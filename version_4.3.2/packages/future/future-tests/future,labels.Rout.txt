
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:50.922] plan(): Setting new future strategy stack:
[13:22:50.922] List of future strategies:
[13:22:50.922] 1. sequential:
[13:22:50.922]    - args: function (..., envir = parent.frame())
[13:22:50.922]    - tweaked: FALSE
[13:22:50.922]    - call: future::plan("sequential")
[13:22:50.937] plan(): nbrOfWorkers() = 1
> 
> message("*** Futures - labels ...")
*** Futures - labels ...
> 
> strategies <- supportedStrategies()
> 
> ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
> if (!fullTest && isWin32) strategies <- NULL
> 
> for (strategy in strategies) {
+   message(sprintf("- plan('%s') ...", strategy))
+   plan(strategy)
+ 
+   for (label in list(NULL, sprintf("strategy = %s", strategy))) {
+     fcn <- get(strategy, mode = "function")
+     stopifnot(inherits(fcn, strategy))
+     f <- fcn(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+     
+     f <- future(42, label = label)
+     print(f)
+     stopifnot(identical(f$label, label))
+     v <- value(f)
+     stopifnot(v == 42)
+ 
+     v %<-% { 42 } %label% label
+     f <- futureOf(v)
+     print(f)
+     stopifnot(identical(f$label, label))
+     stopifnot(v == 42)
+ 
+   } ## for (label ...)
+ 
+   message(sprintf("- plan('%s') ... DONE", strategy))
+ } ## for (strategy ...)
- plan('sequential') ...
[13:22:50.962] plan(): Setting new future strategy stack:
[13:22:50.962] List of future strategies:
[13:22:50.962] 1. sequential:
[13:22:50.962]    - args: function (..., envir = parent.frame())
[13:22:50.962]    - tweaked: FALSE
[13:22:50.962]    - call: plan(strategy)
[13:22:50.975] plan(): nbrOfWorkers() = 1
[13:22:50.976] getGlobalsAndPackages() ...
[13:22:50.976] Searching for globals...
[13:22:50.978] 
[13:22:50.979] Searching for globals ... DONE
[13:22:50.979] - globals: [0] <none>
[13:22:50.979] getGlobalsAndPackages() ... DONE
[13:22:50.980] Packages needed by the future expression (n = 0): <none>
[13:22:50.980] Packages needed by future strategies (n = 0): <none>
[13:22:50.981] {
[13:22:50.981]     {
[13:22:50.981]         {
[13:22:50.981]             ...future.startTime <- base::Sys.time()
[13:22:50.981]             {
[13:22:50.981]                 {
[13:22:50.981]                   {
[13:22:50.981]                     base::local({
[13:22:50.981]                       has_future <- base::requireNamespace("future", 
[13:22:50.981]                         quietly = TRUE)
[13:22:50.981]                       if (has_future) {
[13:22:50.981]                         ns <- base::getNamespace("future")
[13:22:50.981]                         version <- ns[[".package"]][["version"]]
[13:22:50.981]                         if (is.null(version)) 
[13:22:50.981]                           version <- utils::packageVersion("future")
[13:22:50.981]                       }
[13:22:50.981]                       else {
[13:22:50.981]                         version <- NULL
[13:22:50.981]                       }
[13:22:50.981]                       if (!has_future || version < "1.8.0") {
[13:22:50.981]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.981]                           "", base::R.version$version.string), 
[13:22:50.981]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:50.981]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.981]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.981]                             "release", "version")], collapse = " "), 
[13:22:50.981]                           hostname = base::Sys.info()[["nodename"]])
[13:22:50.981]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.981]                           info)
[13:22:50.981]                         info <- base::paste(info, collapse = "; ")
[13:22:50.981]                         if (!has_future) {
[13:22:50.981]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.981]                             info)
[13:22:50.981]                         }
[13:22:50.981]                         else {
[13:22:50.981]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.981]                             info, version)
[13:22:50.981]                         }
[13:22:50.981]                         base::stop(msg)
[13:22:50.981]                       }
[13:22:50.981]                     })
[13:22:50.981]                   }
[13:22:50.981]                   options(future.plan = NULL)
[13:22:50.981]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.981]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.981]                 }
[13:22:50.981]                 ...future.workdir <- getwd()
[13:22:50.981]             }
[13:22:50.981]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.981]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.981]         }
[13:22:50.981]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.981]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.981]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.981]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.981]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.981]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.981]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.981]             base::names(...future.oldOptions))
[13:22:50.981]     }
[13:22:50.981]     if (FALSE) {
[13:22:50.981]     }
[13:22:50.981]     else {
[13:22:50.981]         if (TRUE) {
[13:22:50.981]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.981]                 open = "w")
[13:22:50.981]         }
[13:22:50.981]         else {
[13:22:50.981]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.981]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.981]         }
[13:22:50.981]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.981]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.981]             base::sink(type = "output", split = FALSE)
[13:22:50.981]             base::close(...future.stdout)
[13:22:50.981]         }, add = TRUE)
[13:22:50.981]     }
[13:22:50.981]     ...future.frame <- base::sys.nframe()
[13:22:50.981]     ...future.conditions <- base::list()
[13:22:50.981]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.981]     if (FALSE) {
[13:22:50.981]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.981]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.981]     }
[13:22:50.981]     ...future.result <- base::tryCatch({
[13:22:50.981]         base::withCallingHandlers({
[13:22:50.981]             ...future.value <- base::withVisible(base::local(42))
[13:22:50.981]             future::FutureResult(value = ...future.value$value, 
[13:22:50.981]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.981]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.981]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.981]                     ...future.globalenv.names))
[13:22:50.981]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.981]         }, condition = base::local({
[13:22:50.981]             c <- base::c
[13:22:50.981]             inherits <- base::inherits
[13:22:50.981]             invokeRestart <- base::invokeRestart
[13:22:50.981]             length <- base::length
[13:22:50.981]             list <- base::list
[13:22:50.981]             seq.int <- base::seq.int
[13:22:50.981]             signalCondition <- base::signalCondition
[13:22:50.981]             sys.calls <- base::sys.calls
[13:22:50.981]             `[[` <- base::`[[`
[13:22:50.981]             `+` <- base::`+`
[13:22:50.981]             `<<-` <- base::`<<-`
[13:22:50.981]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.981]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.981]                   3L)]
[13:22:50.981]             }
[13:22:50.981]             function(cond) {
[13:22:50.981]                 is_error <- inherits(cond, "error")
[13:22:50.981]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.981]                   NULL)
[13:22:50.981]                 if (is_error) {
[13:22:50.981]                   sessionInformation <- function() {
[13:22:50.981]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.981]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.981]                       search = base::search(), system = base::Sys.info())
[13:22:50.981]                   }
[13:22:50.981]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.981]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.981]                     cond$call), session = sessionInformation(), 
[13:22:50.981]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.981]                   signalCondition(cond)
[13:22:50.981]                 }
[13:22:50.981]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.981]                 "immediateCondition"))) {
[13:22:50.981]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.981]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.981]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.981]                   if (TRUE && !signal) {
[13:22:50.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.981]                     {
[13:22:50.981]                       inherits <- base::inherits
[13:22:50.981]                       invokeRestart <- base::invokeRestart
[13:22:50.981]                       is.null <- base::is.null
[13:22:50.981]                       muffled <- FALSE
[13:22:50.981]                       if (inherits(cond, "message")) {
[13:22:50.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.981]                         if (muffled) 
[13:22:50.981]                           invokeRestart("muffleMessage")
[13:22:50.981]                       }
[13:22:50.981]                       else if (inherits(cond, "warning")) {
[13:22:50.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.981]                         if (muffled) 
[13:22:50.981]                           invokeRestart("muffleWarning")
[13:22:50.981]                       }
[13:22:50.981]                       else if (inherits(cond, "condition")) {
[13:22:50.981]                         if (!is.null(pattern)) {
[13:22:50.981]                           computeRestarts <- base::computeRestarts
[13:22:50.981]                           grepl <- base::grepl
[13:22:50.981]                           restarts <- computeRestarts(cond)
[13:22:50.981]                           for (restart in restarts) {
[13:22:50.981]                             name <- restart$name
[13:22:50.981]                             if (is.null(name)) 
[13:22:50.981]                               next
[13:22:50.981]                             if (!grepl(pattern, name)) 
[13:22:50.981]                               next
[13:22:50.981]                             invokeRestart(restart)
[13:22:50.981]                             muffled <- TRUE
[13:22:50.981]                             break
[13:22:50.981]                           }
[13:22:50.981]                         }
[13:22:50.981]                       }
[13:22:50.981]                       invisible(muffled)
[13:22:50.981]                     }
[13:22:50.981]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.981]                   }
[13:22:50.981]                 }
[13:22:50.981]                 else {
[13:22:50.981]                   if (TRUE) {
[13:22:50.981]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.981]                     {
[13:22:50.981]                       inherits <- base::inherits
[13:22:50.981]                       invokeRestart <- base::invokeRestart
[13:22:50.981]                       is.null <- base::is.null
[13:22:50.981]                       muffled <- FALSE
[13:22:50.981]                       if (inherits(cond, "message")) {
[13:22:50.981]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.981]                         if (muffled) 
[13:22:50.981]                           invokeRestart("muffleMessage")
[13:22:50.981]                       }
[13:22:50.981]                       else if (inherits(cond, "warning")) {
[13:22:50.981]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.981]                         if (muffled) 
[13:22:50.981]                           invokeRestart("muffleWarning")
[13:22:50.981]                       }
[13:22:50.981]                       else if (inherits(cond, "condition")) {
[13:22:50.981]                         if (!is.null(pattern)) {
[13:22:50.981]                           computeRestarts <- base::computeRestarts
[13:22:50.981]                           grepl <- base::grepl
[13:22:50.981]                           restarts <- computeRestarts(cond)
[13:22:50.981]                           for (restart in restarts) {
[13:22:50.981]                             name <- restart$name
[13:22:50.981]                             if (is.null(name)) 
[13:22:50.981]                               next
[13:22:50.981]                             if (!grepl(pattern, name)) 
[13:22:50.981]                               next
[13:22:50.981]                             invokeRestart(restart)
[13:22:50.981]                             muffled <- TRUE
[13:22:50.981]                             break
[13:22:50.981]                           }
[13:22:50.981]                         }
[13:22:50.981]                       }
[13:22:50.981]                       invisible(muffled)
[13:22:50.981]                     }
[13:22:50.981]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.981]                   }
[13:22:50.981]                 }
[13:22:50.981]             }
[13:22:50.981]         }))
[13:22:50.981]     }, error = function(ex) {
[13:22:50.981]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.981]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.981]                 ...future.rng), started = ...future.startTime, 
[13:22:50.981]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.981]             version = "1.8"), class = "FutureResult")
[13:22:50.981]     }, finally = {
[13:22:50.981]         if (!identical(...future.workdir, getwd())) 
[13:22:50.981]             setwd(...future.workdir)
[13:22:50.981]         {
[13:22:50.981]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.981]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.981]             }
[13:22:50.981]             base::options(...future.oldOptions)
[13:22:50.981]             if (.Platform$OS.type == "windows") {
[13:22:50.981]                 old_names <- names(...future.oldEnvVars)
[13:22:50.981]                 envs <- base::Sys.getenv()
[13:22:50.981]                 names <- names(envs)
[13:22:50.981]                 common <- intersect(names, old_names)
[13:22:50.981]                 added <- setdiff(names, old_names)
[13:22:50.981]                 removed <- setdiff(old_names, names)
[13:22:50.981]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.981]                   envs[common]]
[13:22:50.981]                 NAMES <- toupper(changed)
[13:22:50.981]                 args <- list()
[13:22:50.981]                 for (kk in seq_along(NAMES)) {
[13:22:50.981]                   name <- changed[[kk]]
[13:22:50.981]                   NAME <- NAMES[[kk]]
[13:22:50.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.981]                     next
[13:22:50.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.981]                 }
[13:22:50.981]                 NAMES <- toupper(added)
[13:22:50.981]                 for (kk in seq_along(NAMES)) {
[13:22:50.981]                   name <- added[[kk]]
[13:22:50.981]                   NAME <- NAMES[[kk]]
[13:22:50.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.981]                     next
[13:22:50.981]                   args[[name]] <- ""
[13:22:50.981]                 }
[13:22:50.981]                 NAMES <- toupper(removed)
[13:22:50.981]                 for (kk in seq_along(NAMES)) {
[13:22:50.981]                   name <- removed[[kk]]
[13:22:50.981]                   NAME <- NAMES[[kk]]
[13:22:50.981]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.981]                     next
[13:22:50.981]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.981]                 }
[13:22:50.981]                 if (length(args) > 0) 
[13:22:50.981]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.981]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.981]             }
[13:22:50.981]             else {
[13:22:50.981]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.981]             }
[13:22:50.981]             {
[13:22:50.981]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.981]                   0L) {
[13:22:50.981]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.981]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.981]                   base::options(opts)
[13:22:50.981]                 }
[13:22:50.981]                 {
[13:22:50.981]                   {
[13:22:50.981]                     NULL
[13:22:50.981]                     RNGkind("Mersenne-Twister")
[13:22:50.981]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:50.981]                       inherits = FALSE)
[13:22:50.981]                   }
[13:22:50.981]                   options(future.plan = NULL)
[13:22:50.981]                   if (is.na(NA_character_)) 
[13:22:50.981]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.981]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.981]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:50.981]                   {
[13:22:50.981]                     future <- SequentialFuture(..., envir = envir)
[13:22:50.981]                     if (!future$lazy) 
[13:22:50.981]                       future <- run(future)
[13:22:50.981]                     invisible(future)
[13:22:50.981]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.981]                 }
[13:22:50.981]             }
[13:22:50.981]         }
[13:22:50.981]     })
[13:22:50.981]     if (TRUE) {
[13:22:50.981]         base::sink(type = "output", split = FALSE)
[13:22:50.981]         if (TRUE) {
[13:22:50.981]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.981]         }
[13:22:50.981]         else {
[13:22:50.981]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.981]         }
[13:22:50.981]         base::close(...future.stdout)
[13:22:50.981]         ...future.stdout <- NULL
[13:22:50.981]     }
[13:22:50.981]     ...future.result$conditions <- ...future.conditions
[13:22:50.981]     ...future.result$finished <- base::Sys.time()
[13:22:50.981]     ...future.result
[13:22:50.981] }
[13:22:50.983] plan(): Setting new future strategy stack:
[13:22:50.983] List of future strategies:
[13:22:50.983] 1. sequential:
[13:22:50.983]    - args: function (..., envir = parent.frame())
[13:22:50.983]    - tweaked: FALSE
[13:22:50.983]    - call: NULL
[13:22:50.983] plan(): nbrOfWorkers() = 1
[13:22:50.985] plan(): Setting new future strategy stack:
[13:22:50.985] List of future strategies:
[13:22:50.985] 1. sequential:
[13:22:50.985]    - args: function (..., envir = parent.frame())
[13:22:50.985]    - tweaked: FALSE
[13:22:50.985]    - call: plan(strategy)
[13:22:50.985] plan(): nbrOfWorkers() = 1
[13:22:50.985] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:50.987] getGlobalsAndPackages() ...
[13:22:50.987] Searching for globals...
[13:22:50.987] 
[13:22:50.988] Searching for globals ... DONE
[13:22:50.988] - globals: [0] <none>
[13:22:50.988] getGlobalsAndPackages() ... DONE
[13:22:50.988] run() for ‘Future’ ...
[13:22:50.988] - state: ‘created’
[13:22:50.989] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:50.989] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:50.989] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:50.989]   - Field: ‘label’
[13:22:50.989]   - Field: ‘local’
[13:22:50.989]   - Field: ‘owner’
[13:22:50.989]   - Field: ‘envir’
[13:22:50.989]   - Field: ‘packages’
[13:22:50.989]   - Field: ‘gc’
[13:22:50.990]   - Field: ‘conditions’
[13:22:50.990]   - Field: ‘expr’
[13:22:50.990]   - Field: ‘uuid’
[13:22:50.990]   - Field: ‘seed’
[13:22:50.990]   - Field: ‘version’
[13:22:50.990]   - Field: ‘result’
[13:22:50.990]   - Field: ‘asynchronous’
[13:22:50.990]   - Field: ‘calls’
[13:22:50.990]   - Field: ‘globals’
[13:22:50.990]   - Field: ‘stdout’
[13:22:50.990]   - Field: ‘earlySignal’
[13:22:50.991]   - Field: ‘lazy’
[13:22:50.991]   - Field: ‘state’
[13:22:50.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:50.991] - Launch lazy future ...
[13:22:50.991] Packages needed by the future expression (n = 0): <none>
[13:22:50.991] Packages needed by future strategies (n = 0): <none>
[13:22:50.992] {
[13:22:50.992]     {
[13:22:50.992]         {
[13:22:50.992]             ...future.startTime <- base::Sys.time()
[13:22:50.992]             {
[13:22:50.992]                 {
[13:22:50.992]                   {
[13:22:50.992]                     base::local({
[13:22:50.992]                       has_future <- base::requireNamespace("future", 
[13:22:50.992]                         quietly = TRUE)
[13:22:50.992]                       if (has_future) {
[13:22:50.992]                         ns <- base::getNamespace("future")
[13:22:50.992]                         version <- ns[[".package"]][["version"]]
[13:22:50.992]                         if (is.null(version)) 
[13:22:50.992]                           version <- utils::packageVersion("future")
[13:22:50.992]                       }
[13:22:50.992]                       else {
[13:22:50.992]                         version <- NULL
[13:22:50.992]                       }
[13:22:50.992]                       if (!has_future || version < "1.8.0") {
[13:22:50.992]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:50.992]                           "", base::R.version$version.string), 
[13:22:50.992]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:50.992]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:50.992]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:50.992]                             "release", "version")], collapse = " "), 
[13:22:50.992]                           hostname = base::Sys.info()[["nodename"]])
[13:22:50.992]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:50.992]                           info)
[13:22:50.992]                         info <- base::paste(info, collapse = "; ")
[13:22:50.992]                         if (!has_future) {
[13:22:50.992]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:50.992]                             info)
[13:22:50.992]                         }
[13:22:50.992]                         else {
[13:22:50.992]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:50.992]                             info, version)
[13:22:50.992]                         }
[13:22:50.992]                         base::stop(msg)
[13:22:50.992]                       }
[13:22:50.992]                     })
[13:22:50.992]                   }
[13:22:50.992]                   options(future.plan = NULL)
[13:22:50.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:50.992]                 }
[13:22:50.992]                 ...future.workdir <- getwd()
[13:22:50.992]             }
[13:22:50.992]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:50.992]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:50.992]         }
[13:22:50.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:50.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:50.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:50.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:50.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:50.992]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:50.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:50.992]             base::names(...future.oldOptions))
[13:22:50.992]     }
[13:22:50.992]     if (FALSE) {
[13:22:50.992]     }
[13:22:50.992]     else {
[13:22:50.992]         if (TRUE) {
[13:22:50.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:50.992]                 open = "w")
[13:22:50.992]         }
[13:22:50.992]         else {
[13:22:50.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:50.992]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:50.992]         }
[13:22:50.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:50.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:50.992]             base::sink(type = "output", split = FALSE)
[13:22:50.992]             base::close(...future.stdout)
[13:22:50.992]         }, add = TRUE)
[13:22:50.992]     }
[13:22:50.992]     ...future.frame <- base::sys.nframe()
[13:22:50.992]     ...future.conditions <- base::list()
[13:22:50.992]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:50.992]     if (FALSE) {
[13:22:50.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:50.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:50.992]     }
[13:22:50.992]     ...future.result <- base::tryCatch({
[13:22:50.992]         base::withCallingHandlers({
[13:22:50.992]             ...future.value <- base::withVisible(base::local(42))
[13:22:50.992]             future::FutureResult(value = ...future.value$value, 
[13:22:50.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.992]                   ...future.rng), globalenv = if (FALSE) 
[13:22:50.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:50.992]                     ...future.globalenv.names))
[13:22:50.992]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:50.992]         }, condition = base::local({
[13:22:50.992]             c <- base::c
[13:22:50.992]             inherits <- base::inherits
[13:22:50.992]             invokeRestart <- base::invokeRestart
[13:22:50.992]             length <- base::length
[13:22:50.992]             list <- base::list
[13:22:50.992]             seq.int <- base::seq.int
[13:22:50.992]             signalCondition <- base::signalCondition
[13:22:50.992]             sys.calls <- base::sys.calls
[13:22:50.992]             `[[` <- base::`[[`
[13:22:50.992]             `+` <- base::`+`
[13:22:50.992]             `<<-` <- base::`<<-`
[13:22:50.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:50.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:50.992]                   3L)]
[13:22:50.992]             }
[13:22:50.992]             function(cond) {
[13:22:50.992]                 is_error <- inherits(cond, "error")
[13:22:50.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:50.992]                   NULL)
[13:22:50.992]                 if (is_error) {
[13:22:50.992]                   sessionInformation <- function() {
[13:22:50.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:50.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:50.992]                       search = base::search(), system = base::Sys.info())
[13:22:50.992]                   }
[13:22:50.992]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:50.992]                     cond$call), session = sessionInformation(), 
[13:22:50.992]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:50.992]                   signalCondition(cond)
[13:22:50.992]                 }
[13:22:50.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:50.992]                 "immediateCondition"))) {
[13:22:50.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:50.992]                   ...future.conditions[[length(...future.conditions) + 
[13:22:50.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:50.992]                   if (TRUE && !signal) {
[13:22:50.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.992]                     {
[13:22:50.992]                       inherits <- base::inherits
[13:22:50.992]                       invokeRestart <- base::invokeRestart
[13:22:50.992]                       is.null <- base::is.null
[13:22:50.992]                       muffled <- FALSE
[13:22:50.992]                       if (inherits(cond, "message")) {
[13:22:50.992]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.992]                         if (muffled) 
[13:22:50.992]                           invokeRestart("muffleMessage")
[13:22:50.992]                       }
[13:22:50.992]                       else if (inherits(cond, "warning")) {
[13:22:50.992]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.992]                         if (muffled) 
[13:22:50.992]                           invokeRestart("muffleWarning")
[13:22:50.992]                       }
[13:22:50.992]                       else if (inherits(cond, "condition")) {
[13:22:50.992]                         if (!is.null(pattern)) {
[13:22:50.992]                           computeRestarts <- base::computeRestarts
[13:22:50.992]                           grepl <- base::grepl
[13:22:50.992]                           restarts <- computeRestarts(cond)
[13:22:50.992]                           for (restart in restarts) {
[13:22:50.992]                             name <- restart$name
[13:22:50.992]                             if (is.null(name)) 
[13:22:50.992]                               next
[13:22:50.992]                             if (!grepl(pattern, name)) 
[13:22:50.992]                               next
[13:22:50.992]                             invokeRestart(restart)
[13:22:50.992]                             muffled <- TRUE
[13:22:50.992]                             break
[13:22:50.992]                           }
[13:22:50.992]                         }
[13:22:50.992]                       }
[13:22:50.992]                       invisible(muffled)
[13:22:50.992]                     }
[13:22:50.992]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.992]                   }
[13:22:50.992]                 }
[13:22:50.992]                 else {
[13:22:50.992]                   if (TRUE) {
[13:22:50.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:50.992]                     {
[13:22:50.992]                       inherits <- base::inherits
[13:22:50.992]                       invokeRestart <- base::invokeRestart
[13:22:50.992]                       is.null <- base::is.null
[13:22:50.992]                       muffled <- FALSE
[13:22:50.992]                       if (inherits(cond, "message")) {
[13:22:50.992]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:50.992]                         if (muffled) 
[13:22:50.992]                           invokeRestart("muffleMessage")
[13:22:50.992]                       }
[13:22:50.992]                       else if (inherits(cond, "warning")) {
[13:22:50.992]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:50.992]                         if (muffled) 
[13:22:50.992]                           invokeRestart("muffleWarning")
[13:22:50.992]                       }
[13:22:50.992]                       else if (inherits(cond, "condition")) {
[13:22:50.992]                         if (!is.null(pattern)) {
[13:22:50.992]                           computeRestarts <- base::computeRestarts
[13:22:50.992]                           grepl <- base::grepl
[13:22:50.992]                           restarts <- computeRestarts(cond)
[13:22:50.992]                           for (restart in restarts) {
[13:22:50.992]                             name <- restart$name
[13:22:50.992]                             if (is.null(name)) 
[13:22:50.992]                               next
[13:22:50.992]                             if (!grepl(pattern, name)) 
[13:22:50.992]                               next
[13:22:50.992]                             invokeRestart(restart)
[13:22:50.992]                             muffled <- TRUE
[13:22:50.992]                             break
[13:22:50.992]                           }
[13:22:50.992]                         }
[13:22:50.992]                       }
[13:22:50.992]                       invisible(muffled)
[13:22:50.992]                     }
[13:22:50.992]                     muffleCondition(cond, pattern = "^muffle")
[13:22:50.992]                   }
[13:22:50.992]                 }
[13:22:50.992]             }
[13:22:50.992]         }))
[13:22:50.992]     }, error = function(ex) {
[13:22:50.992]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:50.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:50.992]                 ...future.rng), started = ...future.startTime, 
[13:22:50.992]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:50.992]             version = "1.8"), class = "FutureResult")
[13:22:50.992]     }, finally = {
[13:22:50.992]         if (!identical(...future.workdir, getwd())) 
[13:22:50.992]             setwd(...future.workdir)
[13:22:50.992]         {
[13:22:50.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:50.992]                 ...future.oldOptions$nwarnings <- NULL
[13:22:50.992]             }
[13:22:50.992]             base::options(...future.oldOptions)
[13:22:50.992]             if (.Platform$OS.type == "windows") {
[13:22:50.992]                 old_names <- names(...future.oldEnvVars)
[13:22:50.992]                 envs <- base::Sys.getenv()
[13:22:50.992]                 names <- names(envs)
[13:22:50.992]                 common <- intersect(names, old_names)
[13:22:50.992]                 added <- setdiff(names, old_names)
[13:22:50.992]                 removed <- setdiff(old_names, names)
[13:22:50.992]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:50.992]                   envs[common]]
[13:22:50.992]                 NAMES <- toupper(changed)
[13:22:50.992]                 args <- list()
[13:22:50.992]                 for (kk in seq_along(NAMES)) {
[13:22:50.992]                   name <- changed[[kk]]
[13:22:50.992]                   NAME <- NAMES[[kk]]
[13:22:50.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.992]                     next
[13:22:50.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.992]                 }
[13:22:50.992]                 NAMES <- toupper(added)
[13:22:50.992]                 for (kk in seq_along(NAMES)) {
[13:22:50.992]                   name <- added[[kk]]
[13:22:50.992]                   NAME <- NAMES[[kk]]
[13:22:50.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.992]                     next
[13:22:50.992]                   args[[name]] <- ""
[13:22:50.992]                 }
[13:22:50.992]                 NAMES <- toupper(removed)
[13:22:50.992]                 for (kk in seq_along(NAMES)) {
[13:22:50.992]                   name <- removed[[kk]]
[13:22:50.992]                   NAME <- NAMES[[kk]]
[13:22:50.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:50.992]                     next
[13:22:50.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:50.992]                 }
[13:22:50.992]                 if (length(args) > 0) 
[13:22:50.992]                   base::do.call(base::Sys.setenv, args = args)
[13:22:50.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:50.992]             }
[13:22:50.992]             else {
[13:22:50.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:50.992]             }
[13:22:50.992]             {
[13:22:50.992]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:50.992]                   0L) {
[13:22:50.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:50.992]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:50.992]                   base::options(opts)
[13:22:50.992]                 }
[13:22:50.992]                 {
[13:22:50.992]                   {
[13:22:50.992]                     NULL
[13:22:50.992]                     RNGkind("Mersenne-Twister")
[13:22:50.992]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:50.992]                       inherits = FALSE)
[13:22:50.992]                   }
[13:22:50.992]                   options(future.plan = NULL)
[13:22:50.992]                   if (is.na(NA_character_)) 
[13:22:50.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:50.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:50.992]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:50.992]                   {
[13:22:50.992]                     future <- SequentialFuture(..., envir = envir)
[13:22:50.992]                     if (!future$lazy) 
[13:22:50.992]                       future <- run(future)
[13:22:50.992]                     invisible(future)
[13:22:50.992]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:50.992]                 }
[13:22:50.992]             }
[13:22:50.992]         }
[13:22:50.992]     })
[13:22:50.992]     if (TRUE) {
[13:22:50.992]         base::sink(type = "output", split = FALSE)
[13:22:50.992]         if (TRUE) {
[13:22:50.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:50.992]         }
[13:22:50.992]         else {
[13:22:50.992]             ...future.result["stdout"] <- base::list(NULL)
[13:22:50.992]         }
[13:22:50.992]         base::close(...future.stdout)
[13:22:50.992]         ...future.stdout <- NULL
[13:22:50.992]     }
[13:22:50.992]     ...future.result$conditions <- ...future.conditions
[13:22:50.992]     ...future.result$finished <- base::Sys.time()
[13:22:50.992]     ...future.result
[13:22:50.992] }
[13:22:50.993] plan(): Setting new future strategy stack:
[13:22:50.994] List of future strategies:
[13:22:50.994] 1. sequential:
[13:22:50.994]    - args: function (..., envir = parent.frame())
[13:22:50.994]    - tweaked: FALSE
[13:22:50.994]    - call: NULL
[13:22:50.994] plan(): nbrOfWorkers() = 1
[13:22:50.995] plan(): Setting new future strategy stack:
[13:22:50.995] List of future strategies:
[13:22:50.995] 1. sequential:
[13:22:50.995]    - args: function (..., envir = parent.frame())
[13:22:50.995]    - tweaked: FALSE
[13:22:50.995]    - call: plan(strategy)
[13:22:50.995] plan(): nbrOfWorkers() = 1
[13:22:50.995] SequentialFuture started (and completed)
[13:22:50.995] - Launch lazy future ... done
[13:22:50.996] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:50.997] getGlobalsAndPackages() ...
[13:22:50.997] Searching for globals...
[13:22:50.999] - globals found: [1] ‘{’
[13:22:50.999] Searching for globals ... DONE
[13:22:50.999] Resolving globals: FALSE
[13:22:50.999] 
[13:22:51.000] 
[13:22:51.000] getGlobalsAndPackages() ... DONE
[13:22:51.000] run() for ‘Future’ ...
[13:22:51.000] - state: ‘created’
[13:22:51.000] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:51.000] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.001] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:51.001]   - Field: ‘label’
[13:22:51.001]   - Field: ‘local’
[13:22:51.001]   - Field: ‘owner’
[13:22:51.001]   - Field: ‘envir’
[13:22:51.001]   - Field: ‘packages’
[13:22:51.001]   - Field: ‘gc’
[13:22:51.001]   - Field: ‘conditions’
[13:22:51.001]   - Field: ‘expr’
[13:22:51.001]   - Field: ‘uuid’
[13:22:51.002]   - Field: ‘seed’
[13:22:51.002]   - Field: ‘version’
[13:22:51.002]   - Field: ‘result’
[13:22:51.002]   - Field: ‘asynchronous’
[13:22:51.002]   - Field: ‘calls’
[13:22:51.002]   - Field: ‘globals’
[13:22:51.002]   - Field: ‘stdout’
[13:22:51.002]   - Field: ‘earlySignal’
[13:22:51.002]   - Field: ‘lazy’
[13:22:51.002]   - Field: ‘state’
[13:22:51.002] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:51.003] - Launch lazy future ...
[13:22:51.003] Packages needed by the future expression (n = 0): <none>
[13:22:51.003] Packages needed by future strategies (n = 0): <none>
[13:22:51.003] {
[13:22:51.003]     {
[13:22:51.003]         {
[13:22:51.003]             ...future.startTime <- base::Sys.time()
[13:22:51.003]             {
[13:22:51.003]                 {
[13:22:51.003]                   {
[13:22:51.003]                     base::local({
[13:22:51.003]                       has_future <- base::requireNamespace("future", 
[13:22:51.003]                         quietly = TRUE)
[13:22:51.003]                       if (has_future) {
[13:22:51.003]                         ns <- base::getNamespace("future")
[13:22:51.003]                         version <- ns[[".package"]][["version"]]
[13:22:51.003]                         if (is.null(version)) 
[13:22:51.003]                           version <- utils::packageVersion("future")
[13:22:51.003]                       }
[13:22:51.003]                       else {
[13:22:51.003]                         version <- NULL
[13:22:51.003]                       }
[13:22:51.003]                       if (!has_future || version < "1.8.0") {
[13:22:51.003]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.003]                           "", base::R.version$version.string), 
[13:22:51.003]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:51.003]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.003]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.003]                             "release", "version")], collapse = " "), 
[13:22:51.003]                           hostname = base::Sys.info()[["nodename"]])
[13:22:51.003]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.003]                           info)
[13:22:51.003]                         info <- base::paste(info, collapse = "; ")
[13:22:51.003]                         if (!has_future) {
[13:22:51.003]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.003]                             info)
[13:22:51.003]                         }
[13:22:51.003]                         else {
[13:22:51.003]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.003]                             info, version)
[13:22:51.003]                         }
[13:22:51.003]                         base::stop(msg)
[13:22:51.003]                       }
[13:22:51.003]                     })
[13:22:51.003]                   }
[13:22:51.003]                   options(future.plan = NULL)
[13:22:51.003]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.003]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.003]                 }
[13:22:51.003]                 ...future.workdir <- getwd()
[13:22:51.003]             }
[13:22:51.003]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.003]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.003]         }
[13:22:51.003]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.003]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.003]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.003]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.003]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.003]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.003]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.003]             base::names(...future.oldOptions))
[13:22:51.003]     }
[13:22:51.003]     if (FALSE) {
[13:22:51.003]     }
[13:22:51.003]     else {
[13:22:51.003]         if (TRUE) {
[13:22:51.003]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.003]                 open = "w")
[13:22:51.003]         }
[13:22:51.003]         else {
[13:22:51.003]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.003]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.003]         }
[13:22:51.003]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.003]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.003]             base::sink(type = "output", split = FALSE)
[13:22:51.003]             base::close(...future.stdout)
[13:22:51.003]         }, add = TRUE)
[13:22:51.003]     }
[13:22:51.003]     ...future.frame <- base::sys.nframe()
[13:22:51.003]     ...future.conditions <- base::list()
[13:22:51.003]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.003]     if (FALSE) {
[13:22:51.003]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.003]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.003]     }
[13:22:51.003]     ...future.result <- base::tryCatch({
[13:22:51.003]         base::withCallingHandlers({
[13:22:51.003]             ...future.value <- base::withVisible(base::local({
[13:22:51.003]                 42
[13:22:51.003]             }))
[13:22:51.003]             future::FutureResult(value = ...future.value$value, 
[13:22:51.003]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.003]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.003]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.003]                     ...future.globalenv.names))
[13:22:51.003]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.003]         }, condition = base::local({
[13:22:51.003]             c <- base::c
[13:22:51.003]             inherits <- base::inherits
[13:22:51.003]             invokeRestart <- base::invokeRestart
[13:22:51.003]             length <- base::length
[13:22:51.003]             list <- base::list
[13:22:51.003]             seq.int <- base::seq.int
[13:22:51.003]             signalCondition <- base::signalCondition
[13:22:51.003]             sys.calls <- base::sys.calls
[13:22:51.003]             `[[` <- base::`[[`
[13:22:51.003]             `+` <- base::`+`
[13:22:51.003]             `<<-` <- base::`<<-`
[13:22:51.003]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.003]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.003]                   3L)]
[13:22:51.003]             }
[13:22:51.003]             function(cond) {
[13:22:51.003]                 is_error <- inherits(cond, "error")
[13:22:51.003]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.003]                   NULL)
[13:22:51.003]                 if (is_error) {
[13:22:51.003]                   sessionInformation <- function() {
[13:22:51.003]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.003]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.003]                       search = base::search(), system = base::Sys.info())
[13:22:51.003]                   }
[13:22:51.003]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.003]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.003]                     cond$call), session = sessionInformation(), 
[13:22:51.003]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.003]                   signalCondition(cond)
[13:22:51.003]                 }
[13:22:51.003]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.003]                 "immediateCondition"))) {
[13:22:51.003]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.003]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.003]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.003]                   if (TRUE && !signal) {
[13:22:51.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.003]                     {
[13:22:51.003]                       inherits <- base::inherits
[13:22:51.003]                       invokeRestart <- base::invokeRestart
[13:22:51.003]                       is.null <- base::is.null
[13:22:51.003]                       muffled <- FALSE
[13:22:51.003]                       if (inherits(cond, "message")) {
[13:22:51.003]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.003]                         if (muffled) 
[13:22:51.003]                           invokeRestart("muffleMessage")
[13:22:51.003]                       }
[13:22:51.003]                       else if (inherits(cond, "warning")) {
[13:22:51.003]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.003]                         if (muffled) 
[13:22:51.003]                           invokeRestart("muffleWarning")
[13:22:51.003]                       }
[13:22:51.003]                       else if (inherits(cond, "condition")) {
[13:22:51.003]                         if (!is.null(pattern)) {
[13:22:51.003]                           computeRestarts <- base::computeRestarts
[13:22:51.003]                           grepl <- base::grepl
[13:22:51.003]                           restarts <- computeRestarts(cond)
[13:22:51.003]                           for (restart in restarts) {
[13:22:51.003]                             name <- restart$name
[13:22:51.003]                             if (is.null(name)) 
[13:22:51.003]                               next
[13:22:51.003]                             if (!grepl(pattern, name)) 
[13:22:51.003]                               next
[13:22:51.003]                             invokeRestart(restart)
[13:22:51.003]                             muffled <- TRUE
[13:22:51.003]                             break
[13:22:51.003]                           }
[13:22:51.003]                         }
[13:22:51.003]                       }
[13:22:51.003]                       invisible(muffled)
[13:22:51.003]                     }
[13:22:51.003]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.003]                   }
[13:22:51.003]                 }
[13:22:51.003]                 else {
[13:22:51.003]                   if (TRUE) {
[13:22:51.003]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.003]                     {
[13:22:51.003]                       inherits <- base::inherits
[13:22:51.003]                       invokeRestart <- base::invokeRestart
[13:22:51.003]                       is.null <- base::is.null
[13:22:51.003]                       muffled <- FALSE
[13:22:51.003]                       if (inherits(cond, "message")) {
[13:22:51.003]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.003]                         if (muffled) 
[13:22:51.003]                           invokeRestart("muffleMessage")
[13:22:51.003]                       }
[13:22:51.003]                       else if (inherits(cond, "warning")) {
[13:22:51.003]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.003]                         if (muffled) 
[13:22:51.003]                           invokeRestart("muffleWarning")
[13:22:51.003]                       }
[13:22:51.003]                       else if (inherits(cond, "condition")) {
[13:22:51.003]                         if (!is.null(pattern)) {
[13:22:51.003]                           computeRestarts <- base::computeRestarts
[13:22:51.003]                           grepl <- base::grepl
[13:22:51.003]                           restarts <- computeRestarts(cond)
[13:22:51.003]                           for (restart in restarts) {
[13:22:51.003]                             name <- restart$name
[13:22:51.003]                             if (is.null(name)) 
[13:22:51.003]                               next
[13:22:51.003]                             if (!grepl(pattern, name)) 
[13:22:51.003]                               next
[13:22:51.003]                             invokeRestart(restart)
[13:22:51.003]                             muffled <- TRUE
[13:22:51.003]                             break
[13:22:51.003]                           }
[13:22:51.003]                         }
[13:22:51.003]                       }
[13:22:51.003]                       invisible(muffled)
[13:22:51.003]                     }
[13:22:51.003]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.003]                   }
[13:22:51.003]                 }
[13:22:51.003]             }
[13:22:51.003]         }))
[13:22:51.003]     }, error = function(ex) {
[13:22:51.003]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.003]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.003]                 ...future.rng), started = ...future.startTime, 
[13:22:51.003]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.003]             version = "1.8"), class = "FutureResult")
[13:22:51.003]     }, finally = {
[13:22:51.003]         if (!identical(...future.workdir, getwd())) 
[13:22:51.003]             setwd(...future.workdir)
[13:22:51.003]         {
[13:22:51.003]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.003]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.003]             }
[13:22:51.003]             base::options(...future.oldOptions)
[13:22:51.003]             if (.Platform$OS.type == "windows") {
[13:22:51.003]                 old_names <- names(...future.oldEnvVars)
[13:22:51.003]                 envs <- base::Sys.getenv()
[13:22:51.003]                 names <- names(envs)
[13:22:51.003]                 common <- intersect(names, old_names)
[13:22:51.003]                 added <- setdiff(names, old_names)
[13:22:51.003]                 removed <- setdiff(old_names, names)
[13:22:51.003]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.003]                   envs[common]]
[13:22:51.003]                 NAMES <- toupper(changed)
[13:22:51.003]                 args <- list()
[13:22:51.003]                 for (kk in seq_along(NAMES)) {
[13:22:51.003]                   name <- changed[[kk]]
[13:22:51.003]                   NAME <- NAMES[[kk]]
[13:22:51.003]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.003]                     next
[13:22:51.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.003]                 }
[13:22:51.003]                 NAMES <- toupper(added)
[13:22:51.003]                 for (kk in seq_along(NAMES)) {
[13:22:51.003]                   name <- added[[kk]]
[13:22:51.003]                   NAME <- NAMES[[kk]]
[13:22:51.003]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.003]                     next
[13:22:51.003]                   args[[name]] <- ""
[13:22:51.003]                 }
[13:22:51.003]                 NAMES <- toupper(removed)
[13:22:51.003]                 for (kk in seq_along(NAMES)) {
[13:22:51.003]                   name <- removed[[kk]]
[13:22:51.003]                   NAME <- NAMES[[kk]]
[13:22:51.003]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.003]                     next
[13:22:51.003]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.003]                 }
[13:22:51.003]                 if (length(args) > 0) 
[13:22:51.003]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.003]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.003]             }
[13:22:51.003]             else {
[13:22:51.003]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.003]             }
[13:22:51.003]             {
[13:22:51.003]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.003]                   0L) {
[13:22:51.003]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.003]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.003]                   base::options(opts)
[13:22:51.003]                 }
[13:22:51.003]                 {
[13:22:51.003]                   {
[13:22:51.003]                     NULL
[13:22:51.003]                     RNGkind("Mersenne-Twister")
[13:22:51.003]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:51.003]                       inherits = FALSE)
[13:22:51.003]                   }
[13:22:51.003]                   options(future.plan = NULL)
[13:22:51.003]                   if (is.na(NA_character_)) 
[13:22:51.003]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.003]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.003]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:51.003]                   {
[13:22:51.003]                     future <- SequentialFuture(..., envir = envir)
[13:22:51.003]                     if (!future$lazy) 
[13:22:51.003]                       future <- run(future)
[13:22:51.003]                     invisible(future)
[13:22:51.003]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.003]                 }
[13:22:51.003]             }
[13:22:51.003]         }
[13:22:51.003]     })
[13:22:51.003]     if (TRUE) {
[13:22:51.003]         base::sink(type = "output", split = FALSE)
[13:22:51.003]         if (TRUE) {
[13:22:51.003]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.003]         }
[13:22:51.003]         else {
[13:22:51.003]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.003]         }
[13:22:51.003]         base::close(...future.stdout)
[13:22:51.003]         ...future.stdout <- NULL
[13:22:51.003]     }
[13:22:51.003]     ...future.result$conditions <- ...future.conditions
[13:22:51.003]     ...future.result$finished <- base::Sys.time()
[13:22:51.003]     ...future.result
[13:22:51.003] }
[13:22:51.005] plan(): Setting new future strategy stack:
[13:22:51.005] List of future strategies:
[13:22:51.005] 1. sequential:
[13:22:51.005]    - args: function (..., envir = parent.frame())
[13:22:51.005]    - tweaked: FALSE
[13:22:51.005]    - call: NULL
[13:22:51.006] plan(): nbrOfWorkers() = 1
[13:22:51.006] plan(): Setting new future strategy stack:
[13:22:51.006] List of future strategies:
[13:22:51.006] 1. sequential:
[13:22:51.006]    - args: function (..., envir = parent.frame())
[13:22:51.006]    - tweaked: FALSE
[13:22:51.006]    - call: plan(strategy)
[13:22:51.007] plan(): nbrOfWorkers() = 1
[13:22:51.007] SequentialFuture started (and completed)
[13:22:51.007] - Launch lazy future ... done
[13:22:51.007] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.008] getGlobalsAndPackages() ...
[13:22:51.008] Searching for globals...
[13:22:51.008] 
[13:22:51.009] Searching for globals ... DONE
[13:22:51.009] - globals: [0] <none>
[13:22:51.009] getGlobalsAndPackages() ... DONE
[13:22:51.009] Packages needed by the future expression (n = 0): <none>
[13:22:51.009] Packages needed by future strategies (n = 0): <none>
[13:22:51.010] {
[13:22:51.010]     {
[13:22:51.010]         {
[13:22:51.010]             ...future.startTime <- base::Sys.time()
[13:22:51.010]             {
[13:22:51.010]                 {
[13:22:51.010]                   {
[13:22:51.010]                     base::local({
[13:22:51.010]                       has_future <- base::requireNamespace("future", 
[13:22:51.010]                         quietly = TRUE)
[13:22:51.010]                       if (has_future) {
[13:22:51.010]                         ns <- base::getNamespace("future")
[13:22:51.010]                         version <- ns[[".package"]][["version"]]
[13:22:51.010]                         if (is.null(version)) 
[13:22:51.010]                           version <- utils::packageVersion("future")
[13:22:51.010]                       }
[13:22:51.010]                       else {
[13:22:51.010]                         version <- NULL
[13:22:51.010]                       }
[13:22:51.010]                       if (!has_future || version < "1.8.0") {
[13:22:51.010]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.010]                           "", base::R.version$version.string), 
[13:22:51.010]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:51.010]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.010]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.010]                             "release", "version")], collapse = " "), 
[13:22:51.010]                           hostname = base::Sys.info()[["nodename"]])
[13:22:51.010]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.010]                           info)
[13:22:51.010]                         info <- base::paste(info, collapse = "; ")
[13:22:51.010]                         if (!has_future) {
[13:22:51.010]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.010]                             info)
[13:22:51.010]                         }
[13:22:51.010]                         else {
[13:22:51.010]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.010]                             info, version)
[13:22:51.010]                         }
[13:22:51.010]                         base::stop(msg)
[13:22:51.010]                       }
[13:22:51.010]                     })
[13:22:51.010]                   }
[13:22:51.010]                   options(future.plan = NULL)
[13:22:51.010]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.010]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.010]                 }
[13:22:51.010]                 ...future.workdir <- getwd()
[13:22:51.010]             }
[13:22:51.010]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.010]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.010]         }
[13:22:51.010]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.010]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.010]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.010]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.010]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.010]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.010]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.010]             base::names(...future.oldOptions))
[13:22:51.010]     }
[13:22:51.010]     if (FALSE) {
[13:22:51.010]     }
[13:22:51.010]     else {
[13:22:51.010]         if (TRUE) {
[13:22:51.010]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.010]                 open = "w")
[13:22:51.010]         }
[13:22:51.010]         else {
[13:22:51.010]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.010]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.010]         }
[13:22:51.010]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.010]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.010]             base::sink(type = "output", split = FALSE)
[13:22:51.010]             base::close(...future.stdout)
[13:22:51.010]         }, add = TRUE)
[13:22:51.010]     }
[13:22:51.010]     ...future.frame <- base::sys.nframe()
[13:22:51.010]     ...future.conditions <- base::list()
[13:22:51.010]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.010]     if (FALSE) {
[13:22:51.010]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.010]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.010]     }
[13:22:51.010]     ...future.result <- base::tryCatch({
[13:22:51.010]         base::withCallingHandlers({
[13:22:51.010]             ...future.value <- base::withVisible(base::local(42))
[13:22:51.010]             future::FutureResult(value = ...future.value$value, 
[13:22:51.010]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.010]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.010]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.010]                     ...future.globalenv.names))
[13:22:51.010]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.010]         }, condition = base::local({
[13:22:51.010]             c <- base::c
[13:22:51.010]             inherits <- base::inherits
[13:22:51.010]             invokeRestart <- base::invokeRestart
[13:22:51.010]             length <- base::length
[13:22:51.010]             list <- base::list
[13:22:51.010]             seq.int <- base::seq.int
[13:22:51.010]             signalCondition <- base::signalCondition
[13:22:51.010]             sys.calls <- base::sys.calls
[13:22:51.010]             `[[` <- base::`[[`
[13:22:51.010]             `+` <- base::`+`
[13:22:51.010]             `<<-` <- base::`<<-`
[13:22:51.010]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.010]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.010]                   3L)]
[13:22:51.010]             }
[13:22:51.010]             function(cond) {
[13:22:51.010]                 is_error <- inherits(cond, "error")
[13:22:51.010]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.010]                   NULL)
[13:22:51.010]                 if (is_error) {
[13:22:51.010]                   sessionInformation <- function() {
[13:22:51.010]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.010]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.010]                       search = base::search(), system = base::Sys.info())
[13:22:51.010]                   }
[13:22:51.010]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.010]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.010]                     cond$call), session = sessionInformation(), 
[13:22:51.010]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.010]                   signalCondition(cond)
[13:22:51.010]                 }
[13:22:51.010]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.010]                 "immediateCondition"))) {
[13:22:51.010]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.010]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.010]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.010]                   if (TRUE && !signal) {
[13:22:51.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.010]                     {
[13:22:51.010]                       inherits <- base::inherits
[13:22:51.010]                       invokeRestart <- base::invokeRestart
[13:22:51.010]                       is.null <- base::is.null
[13:22:51.010]                       muffled <- FALSE
[13:22:51.010]                       if (inherits(cond, "message")) {
[13:22:51.010]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.010]                         if (muffled) 
[13:22:51.010]                           invokeRestart("muffleMessage")
[13:22:51.010]                       }
[13:22:51.010]                       else if (inherits(cond, "warning")) {
[13:22:51.010]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.010]                         if (muffled) 
[13:22:51.010]                           invokeRestart("muffleWarning")
[13:22:51.010]                       }
[13:22:51.010]                       else if (inherits(cond, "condition")) {
[13:22:51.010]                         if (!is.null(pattern)) {
[13:22:51.010]                           computeRestarts <- base::computeRestarts
[13:22:51.010]                           grepl <- base::grepl
[13:22:51.010]                           restarts <- computeRestarts(cond)
[13:22:51.010]                           for (restart in restarts) {
[13:22:51.010]                             name <- restart$name
[13:22:51.010]                             if (is.null(name)) 
[13:22:51.010]                               next
[13:22:51.010]                             if (!grepl(pattern, name)) 
[13:22:51.010]                               next
[13:22:51.010]                             invokeRestart(restart)
[13:22:51.010]                             muffled <- TRUE
[13:22:51.010]                             break
[13:22:51.010]                           }
[13:22:51.010]                         }
[13:22:51.010]                       }
[13:22:51.010]                       invisible(muffled)
[13:22:51.010]                     }
[13:22:51.010]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.010]                   }
[13:22:51.010]                 }
[13:22:51.010]                 else {
[13:22:51.010]                   if (TRUE) {
[13:22:51.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.010]                     {
[13:22:51.010]                       inherits <- base::inherits
[13:22:51.010]                       invokeRestart <- base::invokeRestart
[13:22:51.010]                       is.null <- base::is.null
[13:22:51.010]                       muffled <- FALSE
[13:22:51.010]                       if (inherits(cond, "message")) {
[13:22:51.010]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.010]                         if (muffled) 
[13:22:51.010]                           invokeRestart("muffleMessage")
[13:22:51.010]                       }
[13:22:51.010]                       else if (inherits(cond, "warning")) {
[13:22:51.010]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.010]                         if (muffled) 
[13:22:51.010]                           invokeRestart("muffleWarning")
[13:22:51.010]                       }
[13:22:51.010]                       else if (inherits(cond, "condition")) {
[13:22:51.010]                         if (!is.null(pattern)) {
[13:22:51.010]                           computeRestarts <- base::computeRestarts
[13:22:51.010]                           grepl <- base::grepl
[13:22:51.010]                           restarts <- computeRestarts(cond)
[13:22:51.010]                           for (restart in restarts) {
[13:22:51.010]                             name <- restart$name
[13:22:51.010]                             if (is.null(name)) 
[13:22:51.010]                               next
[13:22:51.010]                             if (!grepl(pattern, name)) 
[13:22:51.010]                               next
[13:22:51.010]                             invokeRestart(restart)
[13:22:51.010]                             muffled <- TRUE
[13:22:51.010]                             break
[13:22:51.010]                           }
[13:22:51.010]                         }
[13:22:51.010]                       }
[13:22:51.010]                       invisible(muffled)
[13:22:51.010]                     }
[13:22:51.010]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.010]                   }
[13:22:51.010]                 }
[13:22:51.010]             }
[13:22:51.010]         }))
[13:22:51.010]     }, error = function(ex) {
[13:22:51.010]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.010]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.010]                 ...future.rng), started = ...future.startTime, 
[13:22:51.010]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.010]             version = "1.8"), class = "FutureResult")
[13:22:51.010]     }, finally = {
[13:22:51.010]         if (!identical(...future.workdir, getwd())) 
[13:22:51.010]             setwd(...future.workdir)
[13:22:51.010]         {
[13:22:51.010]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.010]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.010]             }
[13:22:51.010]             base::options(...future.oldOptions)
[13:22:51.010]             if (.Platform$OS.type == "windows") {
[13:22:51.010]                 old_names <- names(...future.oldEnvVars)
[13:22:51.010]                 envs <- base::Sys.getenv()
[13:22:51.010]                 names <- names(envs)
[13:22:51.010]                 common <- intersect(names, old_names)
[13:22:51.010]                 added <- setdiff(names, old_names)
[13:22:51.010]                 removed <- setdiff(old_names, names)
[13:22:51.010]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.010]                   envs[common]]
[13:22:51.010]                 NAMES <- toupper(changed)
[13:22:51.010]                 args <- list()
[13:22:51.010]                 for (kk in seq_along(NAMES)) {
[13:22:51.010]                   name <- changed[[kk]]
[13:22:51.010]                   NAME <- NAMES[[kk]]
[13:22:51.010]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.010]                     next
[13:22:51.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.010]                 }
[13:22:51.010]                 NAMES <- toupper(added)
[13:22:51.010]                 for (kk in seq_along(NAMES)) {
[13:22:51.010]                   name <- added[[kk]]
[13:22:51.010]                   NAME <- NAMES[[kk]]
[13:22:51.010]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.010]                     next
[13:22:51.010]                   args[[name]] <- ""
[13:22:51.010]                 }
[13:22:51.010]                 NAMES <- toupper(removed)
[13:22:51.010]                 for (kk in seq_along(NAMES)) {
[13:22:51.010]                   name <- removed[[kk]]
[13:22:51.010]                   NAME <- NAMES[[kk]]
[13:22:51.010]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.010]                     next
[13:22:51.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.010]                 }
[13:22:51.010]                 if (length(args) > 0) 
[13:22:51.010]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.010]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.010]             }
[13:22:51.010]             else {
[13:22:51.010]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.010]             }
[13:22:51.010]             {
[13:22:51.010]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.010]                   0L) {
[13:22:51.010]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.010]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.010]                   base::options(opts)
[13:22:51.010]                 }
[13:22:51.010]                 {
[13:22:51.010]                   {
[13:22:51.010]                     NULL
[13:22:51.010]                     RNGkind("Mersenne-Twister")
[13:22:51.010]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:51.010]                       inherits = FALSE)
[13:22:51.010]                   }
[13:22:51.010]                   options(future.plan = NULL)
[13:22:51.010]                   if (is.na(NA_character_)) 
[13:22:51.010]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.010]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.010]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:51.010]                   {
[13:22:51.010]                     future <- SequentialFuture(..., envir = envir)
[13:22:51.010]                     if (!future$lazy) 
[13:22:51.010]                       future <- run(future)
[13:22:51.010]                     invisible(future)
[13:22:51.010]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.010]                 }
[13:22:51.010]             }
[13:22:51.010]         }
[13:22:51.010]     })
[13:22:51.010]     if (TRUE) {
[13:22:51.010]         base::sink(type = "output", split = FALSE)
[13:22:51.010]         if (TRUE) {
[13:22:51.010]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.010]         }
[13:22:51.010]         else {
[13:22:51.010]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.010]         }
[13:22:51.010]         base::close(...future.stdout)
[13:22:51.010]         ...future.stdout <- NULL
[13:22:51.010]     }
[13:22:51.010]     ...future.result$conditions <- ...future.conditions
[13:22:51.010]     ...future.result$finished <- base::Sys.time()
[13:22:51.010]     ...future.result
[13:22:51.010] }
[13:22:51.011] plan(): Setting new future strategy stack:
[13:22:51.011] List of future strategies:
[13:22:51.011] 1. sequential:
[13:22:51.011]    - args: function (..., envir = parent.frame())
[13:22:51.011]    - tweaked: FALSE
[13:22:51.011]    - call: NULL
[13:22:51.012] plan(): nbrOfWorkers() = 1
[13:22:51.013] plan(): Setting new future strategy stack:
[13:22:51.013] List of future strategies:
[13:22:51.013] 1. sequential:
[13:22:51.013]    - args: function (..., envir = parent.frame())
[13:22:51.013]    - tweaked: FALSE
[13:22:51.013]    - call: plan(strategy)
[13:22:51.013] plan(): nbrOfWorkers() = 1
[13:22:51.013] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.014] getGlobalsAndPackages() ...
[13:22:51.014] Searching for globals...
[13:22:51.014] 
[13:22:51.014] Searching for globals ... DONE
[13:22:51.015] - globals: [0] <none>
[13:22:51.015] getGlobalsAndPackages() ... DONE
[13:22:51.015] run() for ‘Future’ ...
[13:22:51.015] - state: ‘created’
[13:22:51.015] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:51.015] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.015] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:51.016]   - Field: ‘label’
[13:22:51.016]   - Field: ‘local’
[13:22:51.016]   - Field: ‘owner’
[13:22:51.016]   - Field: ‘envir’
[13:22:51.019]   - Field: ‘packages’
[13:22:51.019]   - Field: ‘gc’
[13:22:51.019]   - Field: ‘conditions’
[13:22:51.019]   - Field: ‘expr’
[13:22:51.019]   - Field: ‘uuid’
[13:22:51.019]   - Field: ‘seed’
[13:22:51.019]   - Field: ‘version’
[13:22:51.019]   - Field: ‘result’
[13:22:51.019]   - Field: ‘asynchronous’
[13:22:51.019]   - Field: ‘calls’
[13:22:51.020]   - Field: ‘globals’
[13:22:51.020]   - Field: ‘stdout’
[13:22:51.020]   - Field: ‘earlySignal’
[13:22:51.020]   - Field: ‘lazy’
[13:22:51.020]   - Field: ‘state’
[13:22:51.020] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:51.020] - Launch lazy future ...
[13:22:51.020] Packages needed by the future expression (n = 0): <none>
[13:22:51.020] Packages needed by future strategies (n = 0): <none>
[13:22:51.021] {
[13:22:51.021]     {
[13:22:51.021]         {
[13:22:51.021]             ...future.startTime <- base::Sys.time()
[13:22:51.021]             {
[13:22:51.021]                 {
[13:22:51.021]                   {
[13:22:51.021]                     base::local({
[13:22:51.021]                       has_future <- base::requireNamespace("future", 
[13:22:51.021]                         quietly = TRUE)
[13:22:51.021]                       if (has_future) {
[13:22:51.021]                         ns <- base::getNamespace("future")
[13:22:51.021]                         version <- ns[[".package"]][["version"]]
[13:22:51.021]                         if (is.null(version)) 
[13:22:51.021]                           version <- utils::packageVersion("future")
[13:22:51.021]                       }
[13:22:51.021]                       else {
[13:22:51.021]                         version <- NULL
[13:22:51.021]                       }
[13:22:51.021]                       if (!has_future || version < "1.8.0") {
[13:22:51.021]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.021]                           "", base::R.version$version.string), 
[13:22:51.021]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:51.021]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.021]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.021]                             "release", "version")], collapse = " "), 
[13:22:51.021]                           hostname = base::Sys.info()[["nodename"]])
[13:22:51.021]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.021]                           info)
[13:22:51.021]                         info <- base::paste(info, collapse = "; ")
[13:22:51.021]                         if (!has_future) {
[13:22:51.021]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.021]                             info)
[13:22:51.021]                         }
[13:22:51.021]                         else {
[13:22:51.021]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.021]                             info, version)
[13:22:51.021]                         }
[13:22:51.021]                         base::stop(msg)
[13:22:51.021]                       }
[13:22:51.021]                     })
[13:22:51.021]                   }
[13:22:51.021]                   options(future.plan = NULL)
[13:22:51.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.021]                 }
[13:22:51.021]                 ...future.workdir <- getwd()
[13:22:51.021]             }
[13:22:51.021]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.021]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.021]         }
[13:22:51.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.021]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.021]             base::names(...future.oldOptions))
[13:22:51.021]     }
[13:22:51.021]     if (FALSE) {
[13:22:51.021]     }
[13:22:51.021]     else {
[13:22:51.021]         if (TRUE) {
[13:22:51.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.021]                 open = "w")
[13:22:51.021]         }
[13:22:51.021]         else {
[13:22:51.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.021]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.021]         }
[13:22:51.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.021]             base::sink(type = "output", split = FALSE)
[13:22:51.021]             base::close(...future.stdout)
[13:22:51.021]         }, add = TRUE)
[13:22:51.021]     }
[13:22:51.021]     ...future.frame <- base::sys.nframe()
[13:22:51.021]     ...future.conditions <- base::list()
[13:22:51.021]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.021]     if (FALSE) {
[13:22:51.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.021]     }
[13:22:51.021]     ...future.result <- base::tryCatch({
[13:22:51.021]         base::withCallingHandlers({
[13:22:51.021]             ...future.value <- base::withVisible(base::local(42))
[13:22:51.021]             future::FutureResult(value = ...future.value$value, 
[13:22:51.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.021]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.021]                     ...future.globalenv.names))
[13:22:51.021]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.021]         }, condition = base::local({
[13:22:51.021]             c <- base::c
[13:22:51.021]             inherits <- base::inherits
[13:22:51.021]             invokeRestart <- base::invokeRestart
[13:22:51.021]             length <- base::length
[13:22:51.021]             list <- base::list
[13:22:51.021]             seq.int <- base::seq.int
[13:22:51.021]             signalCondition <- base::signalCondition
[13:22:51.021]             sys.calls <- base::sys.calls
[13:22:51.021]             `[[` <- base::`[[`
[13:22:51.021]             `+` <- base::`+`
[13:22:51.021]             `<<-` <- base::`<<-`
[13:22:51.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.021]                   3L)]
[13:22:51.021]             }
[13:22:51.021]             function(cond) {
[13:22:51.021]                 is_error <- inherits(cond, "error")
[13:22:51.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.021]                   NULL)
[13:22:51.021]                 if (is_error) {
[13:22:51.021]                   sessionInformation <- function() {
[13:22:51.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.021]                       search = base::search(), system = base::Sys.info())
[13:22:51.021]                   }
[13:22:51.021]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.021]                     cond$call), session = sessionInformation(), 
[13:22:51.021]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.021]                   signalCondition(cond)
[13:22:51.021]                 }
[13:22:51.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.021]                 "immediateCondition"))) {
[13:22:51.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.021]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.021]                   if (TRUE && !signal) {
[13:22:51.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.021]                     {
[13:22:51.021]                       inherits <- base::inherits
[13:22:51.021]                       invokeRestart <- base::invokeRestart
[13:22:51.021]                       is.null <- base::is.null
[13:22:51.021]                       muffled <- FALSE
[13:22:51.021]                       if (inherits(cond, "message")) {
[13:22:51.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.021]                         if (muffled) 
[13:22:51.021]                           invokeRestart("muffleMessage")
[13:22:51.021]                       }
[13:22:51.021]                       else if (inherits(cond, "warning")) {
[13:22:51.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.021]                         if (muffled) 
[13:22:51.021]                           invokeRestart("muffleWarning")
[13:22:51.021]                       }
[13:22:51.021]                       else if (inherits(cond, "condition")) {
[13:22:51.021]                         if (!is.null(pattern)) {
[13:22:51.021]                           computeRestarts <- base::computeRestarts
[13:22:51.021]                           grepl <- base::grepl
[13:22:51.021]                           restarts <- computeRestarts(cond)
[13:22:51.021]                           for (restart in restarts) {
[13:22:51.021]                             name <- restart$name
[13:22:51.021]                             if (is.null(name)) 
[13:22:51.021]                               next
[13:22:51.021]                             if (!grepl(pattern, name)) 
[13:22:51.021]                               next
[13:22:51.021]                             invokeRestart(restart)
[13:22:51.021]                             muffled <- TRUE
[13:22:51.021]                             break
[13:22:51.021]                           }
[13:22:51.021]                         }
[13:22:51.021]                       }
[13:22:51.021]                       invisible(muffled)
[13:22:51.021]                     }
[13:22:51.021]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.021]                   }
[13:22:51.021]                 }
[13:22:51.021]                 else {
[13:22:51.021]                   if (TRUE) {
[13:22:51.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.021]                     {
[13:22:51.021]                       inherits <- base::inherits
[13:22:51.021]                       invokeRestart <- base::invokeRestart
[13:22:51.021]                       is.null <- base::is.null
[13:22:51.021]                       muffled <- FALSE
[13:22:51.021]                       if (inherits(cond, "message")) {
[13:22:51.021]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.021]                         if (muffled) 
[13:22:51.021]                           invokeRestart("muffleMessage")
[13:22:51.021]                       }
[13:22:51.021]                       else if (inherits(cond, "warning")) {
[13:22:51.021]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.021]                         if (muffled) 
[13:22:51.021]                           invokeRestart("muffleWarning")
[13:22:51.021]                       }
[13:22:51.021]                       else if (inherits(cond, "condition")) {
[13:22:51.021]                         if (!is.null(pattern)) {
[13:22:51.021]                           computeRestarts <- base::computeRestarts
[13:22:51.021]                           grepl <- base::grepl
[13:22:51.021]                           restarts <- computeRestarts(cond)
[13:22:51.021]                           for (restart in restarts) {
[13:22:51.021]                             name <- restart$name
[13:22:51.021]                             if (is.null(name)) 
[13:22:51.021]                               next
[13:22:51.021]                             if (!grepl(pattern, name)) 
[13:22:51.021]                               next
[13:22:51.021]                             invokeRestart(restart)
[13:22:51.021]                             muffled <- TRUE
[13:22:51.021]                             break
[13:22:51.021]                           }
[13:22:51.021]                         }
[13:22:51.021]                       }
[13:22:51.021]                       invisible(muffled)
[13:22:51.021]                     }
[13:22:51.021]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.021]                   }
[13:22:51.021]                 }
[13:22:51.021]             }
[13:22:51.021]         }))
[13:22:51.021]     }, error = function(ex) {
[13:22:51.021]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.021]                 ...future.rng), started = ...future.startTime, 
[13:22:51.021]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.021]             version = "1.8"), class = "FutureResult")
[13:22:51.021]     }, finally = {
[13:22:51.021]         if (!identical(...future.workdir, getwd())) 
[13:22:51.021]             setwd(...future.workdir)
[13:22:51.021]         {
[13:22:51.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.021]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.021]             }
[13:22:51.021]             base::options(...future.oldOptions)
[13:22:51.021]             if (.Platform$OS.type == "windows") {
[13:22:51.021]                 old_names <- names(...future.oldEnvVars)
[13:22:51.021]                 envs <- base::Sys.getenv()
[13:22:51.021]                 names <- names(envs)
[13:22:51.021]                 common <- intersect(names, old_names)
[13:22:51.021]                 added <- setdiff(names, old_names)
[13:22:51.021]                 removed <- setdiff(old_names, names)
[13:22:51.021]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.021]                   envs[common]]
[13:22:51.021]                 NAMES <- toupper(changed)
[13:22:51.021]                 args <- list()
[13:22:51.021]                 for (kk in seq_along(NAMES)) {
[13:22:51.021]                   name <- changed[[kk]]
[13:22:51.021]                   NAME <- NAMES[[kk]]
[13:22:51.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.021]                     next
[13:22:51.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.021]                 }
[13:22:51.021]                 NAMES <- toupper(added)
[13:22:51.021]                 for (kk in seq_along(NAMES)) {
[13:22:51.021]                   name <- added[[kk]]
[13:22:51.021]                   NAME <- NAMES[[kk]]
[13:22:51.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.021]                     next
[13:22:51.021]                   args[[name]] <- ""
[13:22:51.021]                 }
[13:22:51.021]                 NAMES <- toupper(removed)
[13:22:51.021]                 for (kk in seq_along(NAMES)) {
[13:22:51.021]                   name <- removed[[kk]]
[13:22:51.021]                   NAME <- NAMES[[kk]]
[13:22:51.021]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.021]                     next
[13:22:51.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.021]                 }
[13:22:51.021]                 if (length(args) > 0) 
[13:22:51.021]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.021]             }
[13:22:51.021]             else {
[13:22:51.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.021]             }
[13:22:51.021]             {
[13:22:51.021]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.021]                   0L) {
[13:22:51.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.021]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.021]                   base::options(opts)
[13:22:51.021]                 }
[13:22:51.021]                 {
[13:22:51.021]                   {
[13:22:51.021]                     NULL
[13:22:51.021]                     RNGkind("Mersenne-Twister")
[13:22:51.021]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:51.021]                       inherits = FALSE)
[13:22:51.021]                   }
[13:22:51.021]                   options(future.plan = NULL)
[13:22:51.021]                   if (is.na(NA_character_)) 
[13:22:51.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.021]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:51.021]                   {
[13:22:51.021]                     future <- SequentialFuture(..., envir = envir)
[13:22:51.021]                     if (!future$lazy) 
[13:22:51.021]                       future <- run(future)
[13:22:51.021]                     invisible(future)
[13:22:51.021]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.021]                 }
[13:22:51.021]             }
[13:22:51.021]         }
[13:22:51.021]     })
[13:22:51.021]     if (TRUE) {
[13:22:51.021]         base::sink(type = "output", split = FALSE)
[13:22:51.021]         if (TRUE) {
[13:22:51.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.021]         }
[13:22:51.021]         else {
[13:22:51.021]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.021]         }
[13:22:51.021]         base::close(...future.stdout)
[13:22:51.021]         ...future.stdout <- NULL
[13:22:51.021]     }
[13:22:51.021]     ...future.result$conditions <- ...future.conditions
[13:22:51.021]     ...future.result$finished <- base::Sys.time()
[13:22:51.021]     ...future.result
[13:22:51.021] }
[13:22:51.023] plan(): Setting new future strategy stack:
[13:22:51.023] List of future strategies:
[13:22:51.023] 1. sequential:
[13:22:51.023]    - args: function (..., envir = parent.frame())
[13:22:51.023]    - tweaked: FALSE
[13:22:51.023]    - call: NULL
[13:22:51.023] plan(): nbrOfWorkers() = 1
[13:22:51.024] plan(): Setting new future strategy stack:
[13:22:51.024] List of future strategies:
[13:22:51.024] 1. sequential:
[13:22:51.024]    - args: function (..., envir = parent.frame())
[13:22:51.024]    - tweaked: FALSE
[13:22:51.024]    - call: plan(strategy)
[13:22:51.024] plan(): nbrOfWorkers() = 1
[13:22:51.025] SequentialFuture started (and completed)
[13:22:51.025] - Launch lazy future ... done
[13:22:51.025] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.026] getGlobalsAndPackages() ...
[13:22:51.026] Searching for globals...
[13:22:51.026] - globals found: [1] ‘{’
[13:22:51.026] Searching for globals ... DONE
[13:22:51.026] Resolving globals: FALSE
[13:22:51.027] 
[13:22:51.027] 
[13:22:51.027] getGlobalsAndPackages() ... DONE
[13:22:51.027] run() for ‘Future’ ...
[13:22:51.027] - state: ‘created’
[13:22:51.027] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:51.028] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:51.028] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:51.028]   - Field: ‘label’
[13:22:51.028]   - Field: ‘local’
[13:22:51.028]   - Field: ‘owner’
[13:22:51.028]   - Field: ‘envir’
[13:22:51.028]   - Field: ‘packages’
[13:22:51.028]   - Field: ‘gc’
[13:22:51.028]   - Field: ‘conditions’
[13:22:51.029]   - Field: ‘expr’
[13:22:51.029]   - Field: ‘uuid’
[13:22:51.029]   - Field: ‘seed’
[13:22:51.029]   - Field: ‘version’
[13:22:51.029]   - Field: ‘result’
[13:22:51.029]   - Field: ‘asynchronous’
[13:22:51.029]   - Field: ‘calls’
[13:22:51.029]   - Field: ‘globals’
[13:22:51.029]   - Field: ‘stdout’
[13:22:51.029]   - Field: ‘earlySignal’
[13:22:51.029]   - Field: ‘lazy’
[13:22:51.030]   - Field: ‘state’
[13:22:51.030] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:51.030] - Launch lazy future ...
[13:22:51.030] Packages needed by the future expression (n = 0): <none>
[13:22:51.030] Packages needed by future strategies (n = 0): <none>
[13:22:51.030] {
[13:22:51.030]     {
[13:22:51.030]         {
[13:22:51.030]             ...future.startTime <- base::Sys.time()
[13:22:51.030]             {
[13:22:51.030]                 {
[13:22:51.030]                   {
[13:22:51.030]                     base::local({
[13:22:51.030]                       has_future <- base::requireNamespace("future", 
[13:22:51.030]                         quietly = TRUE)
[13:22:51.030]                       if (has_future) {
[13:22:51.030]                         ns <- base::getNamespace("future")
[13:22:51.030]                         version <- ns[[".package"]][["version"]]
[13:22:51.030]                         if (is.null(version)) 
[13:22:51.030]                           version <- utils::packageVersion("future")
[13:22:51.030]                       }
[13:22:51.030]                       else {
[13:22:51.030]                         version <- NULL
[13:22:51.030]                       }
[13:22:51.030]                       if (!has_future || version < "1.8.0") {
[13:22:51.030]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.030]                           "", base::R.version$version.string), 
[13:22:51.030]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:51.030]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.030]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.030]                             "release", "version")], collapse = " "), 
[13:22:51.030]                           hostname = base::Sys.info()[["nodename"]])
[13:22:51.030]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.030]                           info)
[13:22:51.030]                         info <- base::paste(info, collapse = "; ")
[13:22:51.030]                         if (!has_future) {
[13:22:51.030]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.030]                             info)
[13:22:51.030]                         }
[13:22:51.030]                         else {
[13:22:51.030]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.030]                             info, version)
[13:22:51.030]                         }
[13:22:51.030]                         base::stop(msg)
[13:22:51.030]                       }
[13:22:51.030]                     })
[13:22:51.030]                   }
[13:22:51.030]                   options(future.plan = NULL)
[13:22:51.030]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.030]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.030]                 }
[13:22:51.030]                 ...future.workdir <- getwd()
[13:22:51.030]             }
[13:22:51.030]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.030]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.030]         }
[13:22:51.030]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.030]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.030]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.030]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.030]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.030]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.030]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.030]             base::names(...future.oldOptions))
[13:22:51.030]     }
[13:22:51.030]     if (FALSE) {
[13:22:51.030]     }
[13:22:51.030]     else {
[13:22:51.030]         if (TRUE) {
[13:22:51.030]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.030]                 open = "w")
[13:22:51.030]         }
[13:22:51.030]         else {
[13:22:51.030]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.030]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.030]         }
[13:22:51.030]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.030]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.030]             base::sink(type = "output", split = FALSE)
[13:22:51.030]             base::close(...future.stdout)
[13:22:51.030]         }, add = TRUE)
[13:22:51.030]     }
[13:22:51.030]     ...future.frame <- base::sys.nframe()
[13:22:51.030]     ...future.conditions <- base::list()
[13:22:51.030]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.030]     if (FALSE) {
[13:22:51.030]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.030]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.030]     }
[13:22:51.030]     ...future.result <- base::tryCatch({
[13:22:51.030]         base::withCallingHandlers({
[13:22:51.030]             ...future.value <- base::withVisible(base::local({
[13:22:51.030]                 42
[13:22:51.030]             }))
[13:22:51.030]             future::FutureResult(value = ...future.value$value, 
[13:22:51.030]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.030]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.030]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.030]                     ...future.globalenv.names))
[13:22:51.030]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.030]         }, condition = base::local({
[13:22:51.030]             c <- base::c
[13:22:51.030]             inherits <- base::inherits
[13:22:51.030]             invokeRestart <- base::invokeRestart
[13:22:51.030]             length <- base::length
[13:22:51.030]             list <- base::list
[13:22:51.030]             seq.int <- base::seq.int
[13:22:51.030]             signalCondition <- base::signalCondition
[13:22:51.030]             sys.calls <- base::sys.calls
[13:22:51.030]             `[[` <- base::`[[`
[13:22:51.030]             `+` <- base::`+`
[13:22:51.030]             `<<-` <- base::`<<-`
[13:22:51.030]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.030]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.030]                   3L)]
[13:22:51.030]             }
[13:22:51.030]             function(cond) {
[13:22:51.030]                 is_error <- inherits(cond, "error")
[13:22:51.030]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.030]                   NULL)
[13:22:51.030]                 if (is_error) {
[13:22:51.030]                   sessionInformation <- function() {
[13:22:51.030]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.030]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.030]                       search = base::search(), system = base::Sys.info())
[13:22:51.030]                   }
[13:22:51.030]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.030]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.030]                     cond$call), session = sessionInformation(), 
[13:22:51.030]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.030]                   signalCondition(cond)
[13:22:51.030]                 }
[13:22:51.030]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.030]                 "immediateCondition"))) {
[13:22:51.030]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.030]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.030]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.030]                   if (TRUE && !signal) {
[13:22:51.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.030]                     {
[13:22:51.030]                       inherits <- base::inherits
[13:22:51.030]                       invokeRestart <- base::invokeRestart
[13:22:51.030]                       is.null <- base::is.null
[13:22:51.030]                       muffled <- FALSE
[13:22:51.030]                       if (inherits(cond, "message")) {
[13:22:51.030]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.030]                         if (muffled) 
[13:22:51.030]                           invokeRestart("muffleMessage")
[13:22:51.030]                       }
[13:22:51.030]                       else if (inherits(cond, "warning")) {
[13:22:51.030]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.030]                         if (muffled) 
[13:22:51.030]                           invokeRestart("muffleWarning")
[13:22:51.030]                       }
[13:22:51.030]                       else if (inherits(cond, "condition")) {
[13:22:51.030]                         if (!is.null(pattern)) {
[13:22:51.030]                           computeRestarts <- base::computeRestarts
[13:22:51.030]                           grepl <- base::grepl
[13:22:51.030]                           restarts <- computeRestarts(cond)
[13:22:51.030]                           for (restart in restarts) {
[13:22:51.030]                             name <- restart$name
[13:22:51.030]                             if (is.null(name)) 
[13:22:51.030]                               next
[13:22:51.030]                             if (!grepl(pattern, name)) 
[13:22:51.030]                               next
[13:22:51.030]                             invokeRestart(restart)
[13:22:51.030]                             muffled <- TRUE
[13:22:51.030]                             break
[13:22:51.030]                           }
[13:22:51.030]                         }
[13:22:51.030]                       }
[13:22:51.030]                       invisible(muffled)
[13:22:51.030]                     }
[13:22:51.030]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.030]                   }
[13:22:51.030]                 }
[13:22:51.030]                 else {
[13:22:51.030]                   if (TRUE) {
[13:22:51.030]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.030]                     {
[13:22:51.030]                       inherits <- base::inherits
[13:22:51.030]                       invokeRestart <- base::invokeRestart
[13:22:51.030]                       is.null <- base::is.null
[13:22:51.030]                       muffled <- FALSE
[13:22:51.030]                       if (inherits(cond, "message")) {
[13:22:51.030]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.030]                         if (muffled) 
[13:22:51.030]                           invokeRestart("muffleMessage")
[13:22:51.030]                       }
[13:22:51.030]                       else if (inherits(cond, "warning")) {
[13:22:51.030]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.030]                         if (muffled) 
[13:22:51.030]                           invokeRestart("muffleWarning")
[13:22:51.030]                       }
[13:22:51.030]                       else if (inherits(cond, "condition")) {
[13:22:51.030]                         if (!is.null(pattern)) {
[13:22:51.030]                           computeRestarts <- base::computeRestarts
[13:22:51.030]                           grepl <- base::grepl
[13:22:51.030]                           restarts <- computeRestarts(cond)
[13:22:51.030]                           for (restart in restarts) {
[13:22:51.030]                             name <- restart$name
[13:22:51.030]                             if (is.null(name)) 
[13:22:51.030]                               next
[13:22:51.030]                             if (!grepl(pattern, name)) 
[13:22:51.030]                               next
[13:22:51.030]                             invokeRestart(restart)
[13:22:51.030]                             muffled <- TRUE
[13:22:51.030]                             break
[13:22:51.030]                           }
[13:22:51.030]                         }
[13:22:51.030]                       }
[13:22:51.030]                       invisible(muffled)
[13:22:51.030]                     }
[13:22:51.030]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.030]                   }
[13:22:51.030]                 }
[13:22:51.030]             }
[13:22:51.030]         }))
[13:22:51.030]     }, error = function(ex) {
[13:22:51.030]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.030]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.030]                 ...future.rng), started = ...future.startTime, 
[13:22:51.030]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.030]             version = "1.8"), class = "FutureResult")
[13:22:51.030]     }, finally = {
[13:22:51.030]         if (!identical(...future.workdir, getwd())) 
[13:22:51.030]             setwd(...future.workdir)
[13:22:51.030]         {
[13:22:51.030]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.030]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.030]             }
[13:22:51.030]             base::options(...future.oldOptions)
[13:22:51.030]             if (.Platform$OS.type == "windows") {
[13:22:51.030]                 old_names <- names(...future.oldEnvVars)
[13:22:51.030]                 envs <- base::Sys.getenv()
[13:22:51.030]                 names <- names(envs)
[13:22:51.030]                 common <- intersect(names, old_names)
[13:22:51.030]                 added <- setdiff(names, old_names)
[13:22:51.030]                 removed <- setdiff(old_names, names)
[13:22:51.030]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.030]                   envs[common]]
[13:22:51.030]                 NAMES <- toupper(changed)
[13:22:51.030]                 args <- list()
[13:22:51.030]                 for (kk in seq_along(NAMES)) {
[13:22:51.030]                   name <- changed[[kk]]
[13:22:51.030]                   NAME <- NAMES[[kk]]
[13:22:51.030]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.030]                     next
[13:22:51.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.030]                 }
[13:22:51.030]                 NAMES <- toupper(added)
[13:22:51.030]                 for (kk in seq_along(NAMES)) {
[13:22:51.030]                   name <- added[[kk]]
[13:22:51.030]                   NAME <- NAMES[[kk]]
[13:22:51.030]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.030]                     next
[13:22:51.030]                   args[[name]] <- ""
[13:22:51.030]                 }
[13:22:51.030]                 NAMES <- toupper(removed)
[13:22:51.030]                 for (kk in seq_along(NAMES)) {
[13:22:51.030]                   name <- removed[[kk]]
[13:22:51.030]                   NAME <- NAMES[[kk]]
[13:22:51.030]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.030]                     next
[13:22:51.030]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.030]                 }
[13:22:51.030]                 if (length(args) > 0) 
[13:22:51.030]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.030]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.030]             }
[13:22:51.030]             else {
[13:22:51.030]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.030]             }
[13:22:51.030]             {
[13:22:51.030]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.030]                   0L) {
[13:22:51.030]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.030]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.030]                   base::options(opts)
[13:22:51.030]                 }
[13:22:51.030]                 {
[13:22:51.030]                   {
[13:22:51.030]                     NULL
[13:22:51.030]                     RNGkind("Mersenne-Twister")
[13:22:51.030]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:51.030]                       inherits = FALSE)
[13:22:51.030]                   }
[13:22:51.030]                   options(future.plan = NULL)
[13:22:51.030]                   if (is.na(NA_character_)) 
[13:22:51.030]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.030]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.030]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:51.030]                   {
[13:22:51.030]                     future <- SequentialFuture(..., envir = envir)
[13:22:51.030]                     if (!future$lazy) 
[13:22:51.030]                       future <- run(future)
[13:22:51.030]                     invisible(future)
[13:22:51.030]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.030]                 }
[13:22:51.030]             }
[13:22:51.030]         }
[13:22:51.030]     })
[13:22:51.030]     if (TRUE) {
[13:22:51.030]         base::sink(type = "output", split = FALSE)
[13:22:51.030]         if (TRUE) {
[13:22:51.030]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.030]         }
[13:22:51.030]         else {
[13:22:51.030]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.030]         }
[13:22:51.030]         base::close(...future.stdout)
[13:22:51.030]         ...future.stdout <- NULL
[13:22:51.030]     }
[13:22:51.030]     ...future.result$conditions <- ...future.conditions
[13:22:51.030]     ...future.result$finished <- base::Sys.time()
[13:22:51.030]     ...future.result
[13:22:51.030] }
[13:22:51.032] plan(): Setting new future strategy stack:
[13:22:51.032] List of future strategies:
[13:22:51.032] 1. sequential:
[13:22:51.032]    - args: function (..., envir = parent.frame())
[13:22:51.032]    - tweaked: FALSE
[13:22:51.032]    - call: NULL
[13:22:51.033] plan(): nbrOfWorkers() = 1
[13:22:51.033] plan(): Setting new future strategy stack:
[13:22:51.034] List of future strategies:
[13:22:51.034] 1. sequential:
[13:22:51.034]    - args: function (..., envir = parent.frame())
[13:22:51.034]    - tweaked: FALSE
[13:22:51.034]    - call: plan(strategy)
[13:22:51.034] plan(): nbrOfWorkers() = 1
[13:22:51.034] SequentialFuture started (and completed)
[13:22:51.034] - Launch lazy future ... done
[13:22:51.034] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘strategy = sequential’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
- plan('sequential') ... DONE
- plan('multicore') ...
[13:22:51.035] plan(): Setting new future strategy stack:
[13:22:51.035] List of future strategies:
[13:22:51.035] 1. multicore:
[13:22:51.035]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.035]    - tweaked: FALSE
[13:22:51.035]    - call: plan(strategy)
[13:22:51.039] plan(): nbrOfWorkers() = 2
[13:22:51.043] getGlobalsAndPackages() ...
[13:22:51.043] 
[13:22:51.043] - globals: [0] <none>
[13:22:51.043] getGlobalsAndPackages() ... DONE
[13:22:51.044] Packages needed by the future expression (n = 0): <none>
[13:22:51.045] Packages needed by future strategies (n = 0): <none>
[13:22:51.045] {
[13:22:51.045]     {
[13:22:51.045]         {
[13:22:51.045]             ...future.startTime <- base::Sys.time()
[13:22:51.045]             {
[13:22:51.045]                 {
[13:22:51.045]                   {
[13:22:51.045]                     {
[13:22:51.045]                       base::local({
[13:22:51.045]                         has_future <- base::requireNamespace("future", 
[13:22:51.045]                           quietly = TRUE)
[13:22:51.045]                         if (has_future) {
[13:22:51.045]                           ns <- base::getNamespace("future")
[13:22:51.045]                           version <- ns[[".package"]][["version"]]
[13:22:51.045]                           if (is.null(version)) 
[13:22:51.045]                             version <- utils::packageVersion("future")
[13:22:51.045]                         }
[13:22:51.045]                         else {
[13:22:51.045]                           version <- NULL
[13:22:51.045]                         }
[13:22:51.045]                         if (!has_future || version < "1.8.0") {
[13:22:51.045]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.045]                             "", base::R.version$version.string), 
[13:22:51.045]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.045]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.045]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.045]                               "release", "version")], collapse = " "), 
[13:22:51.045]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.045]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.045]                             info)
[13:22:51.045]                           info <- base::paste(info, collapse = "; ")
[13:22:51.045]                           if (!has_future) {
[13:22:51.045]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.045]                               info)
[13:22:51.045]                           }
[13:22:51.045]                           else {
[13:22:51.045]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.045]                               info, version)
[13:22:51.045]                           }
[13:22:51.045]                           base::stop(msg)
[13:22:51.045]                         }
[13:22:51.045]                       })
[13:22:51.045]                     }
[13:22:51.045]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.045]                     base::options(mc.cores = 1L)
[13:22:51.045]                   }
[13:22:51.045]                   options(future.plan = NULL)
[13:22:51.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.045]                 }
[13:22:51.045]                 ...future.workdir <- getwd()
[13:22:51.045]             }
[13:22:51.045]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.045]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.045]         }
[13:22:51.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.045]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.045]             base::names(...future.oldOptions))
[13:22:51.045]     }
[13:22:51.045]     if (FALSE) {
[13:22:51.045]     }
[13:22:51.045]     else {
[13:22:51.045]         if (TRUE) {
[13:22:51.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.045]                 open = "w")
[13:22:51.045]         }
[13:22:51.045]         else {
[13:22:51.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.045]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.045]         }
[13:22:51.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.045]             base::sink(type = "output", split = FALSE)
[13:22:51.045]             base::close(...future.stdout)
[13:22:51.045]         }, add = TRUE)
[13:22:51.045]     }
[13:22:51.045]     ...future.frame <- base::sys.nframe()
[13:22:51.045]     ...future.conditions <- base::list()
[13:22:51.045]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.045]     if (FALSE) {
[13:22:51.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.045]     }
[13:22:51.045]     ...future.result <- base::tryCatch({
[13:22:51.045]         base::withCallingHandlers({
[13:22:51.045]             ...future.value <- base::withVisible(base::local({
[13:22:51.045]                 withCallingHandlers({
[13:22:51.045]                   42
[13:22:51.045]                 }, immediateCondition = function(cond) {
[13:22:51.045]                   save_rds <- function (object, pathname, ...) 
[13:22:51.045]                   {
[13:22:51.045]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.045]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.045]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.045]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.045]                         fi_tmp[["mtime"]])
[13:22:51.045]                     }
[13:22:51.045]                     tryCatch({
[13:22:51.045]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.045]                     }, error = function(ex) {
[13:22:51.045]                       msg <- conditionMessage(ex)
[13:22:51.045]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.045]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.045]                         fi_tmp[["mtime"]], msg)
[13:22:51.045]                       ex$message <- msg
[13:22:51.045]                       stop(ex)
[13:22:51.045]                     })
[13:22:51.045]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.045]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.045]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.045]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.045]                       fi <- file.info(pathname)
[13:22:51.045]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.045]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.045]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.045]                         fi[["size"]], fi[["mtime"]])
[13:22:51.045]                       stop(msg)
[13:22:51.045]                     }
[13:22:51.045]                     invisible(pathname)
[13:22:51.045]                   }
[13:22:51.045]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.045]                     rootPath = tempdir()) 
[13:22:51.045]                   {
[13:22:51.045]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.045]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.045]                       tmpdir = path, fileext = ".rds")
[13:22:51.045]                     save_rds(obj, file)
[13:22:51.045]                   }
[13:22:51.045]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.045]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.045]                   {
[13:22:51.045]                     inherits <- base::inherits
[13:22:51.045]                     invokeRestart <- base::invokeRestart
[13:22:51.045]                     is.null <- base::is.null
[13:22:51.045]                     muffled <- FALSE
[13:22:51.045]                     if (inherits(cond, "message")) {
[13:22:51.045]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.045]                       if (muffled) 
[13:22:51.045]                         invokeRestart("muffleMessage")
[13:22:51.045]                     }
[13:22:51.045]                     else if (inherits(cond, "warning")) {
[13:22:51.045]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.045]                       if (muffled) 
[13:22:51.045]                         invokeRestart("muffleWarning")
[13:22:51.045]                     }
[13:22:51.045]                     else if (inherits(cond, "condition")) {
[13:22:51.045]                       if (!is.null(pattern)) {
[13:22:51.045]                         computeRestarts <- base::computeRestarts
[13:22:51.045]                         grepl <- base::grepl
[13:22:51.045]                         restarts <- computeRestarts(cond)
[13:22:51.045]                         for (restart in restarts) {
[13:22:51.045]                           name <- restart$name
[13:22:51.045]                           if (is.null(name)) 
[13:22:51.045]                             next
[13:22:51.045]                           if (!grepl(pattern, name)) 
[13:22:51.045]                             next
[13:22:51.045]                           invokeRestart(restart)
[13:22:51.045]                           muffled <- TRUE
[13:22:51.045]                           break
[13:22:51.045]                         }
[13:22:51.045]                       }
[13:22:51.045]                     }
[13:22:51.045]                     invisible(muffled)
[13:22:51.045]                   }
[13:22:51.045]                   muffleCondition(cond)
[13:22:51.045]                 })
[13:22:51.045]             }))
[13:22:51.045]             future::FutureResult(value = ...future.value$value, 
[13:22:51.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.045]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.045]                     ...future.globalenv.names))
[13:22:51.045]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.045]         }, condition = base::local({
[13:22:51.045]             c <- base::c
[13:22:51.045]             inherits <- base::inherits
[13:22:51.045]             invokeRestart <- base::invokeRestart
[13:22:51.045]             length <- base::length
[13:22:51.045]             list <- base::list
[13:22:51.045]             seq.int <- base::seq.int
[13:22:51.045]             signalCondition <- base::signalCondition
[13:22:51.045]             sys.calls <- base::sys.calls
[13:22:51.045]             `[[` <- base::`[[`
[13:22:51.045]             `+` <- base::`+`
[13:22:51.045]             `<<-` <- base::`<<-`
[13:22:51.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.045]                   3L)]
[13:22:51.045]             }
[13:22:51.045]             function(cond) {
[13:22:51.045]                 is_error <- inherits(cond, "error")
[13:22:51.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.045]                   NULL)
[13:22:51.045]                 if (is_error) {
[13:22:51.045]                   sessionInformation <- function() {
[13:22:51.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.045]                       search = base::search(), system = base::Sys.info())
[13:22:51.045]                   }
[13:22:51.045]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.045]                     cond$call), session = sessionInformation(), 
[13:22:51.045]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.045]                   signalCondition(cond)
[13:22:51.045]                 }
[13:22:51.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.045]                 "immediateCondition"))) {
[13:22:51.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.045]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.045]                   if (TRUE && !signal) {
[13:22:51.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.045]                     {
[13:22:51.045]                       inherits <- base::inherits
[13:22:51.045]                       invokeRestart <- base::invokeRestart
[13:22:51.045]                       is.null <- base::is.null
[13:22:51.045]                       muffled <- FALSE
[13:22:51.045]                       if (inherits(cond, "message")) {
[13:22:51.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.045]                         if (muffled) 
[13:22:51.045]                           invokeRestart("muffleMessage")
[13:22:51.045]                       }
[13:22:51.045]                       else if (inherits(cond, "warning")) {
[13:22:51.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.045]                         if (muffled) 
[13:22:51.045]                           invokeRestart("muffleWarning")
[13:22:51.045]                       }
[13:22:51.045]                       else if (inherits(cond, "condition")) {
[13:22:51.045]                         if (!is.null(pattern)) {
[13:22:51.045]                           computeRestarts <- base::computeRestarts
[13:22:51.045]                           grepl <- base::grepl
[13:22:51.045]                           restarts <- computeRestarts(cond)
[13:22:51.045]                           for (restart in restarts) {
[13:22:51.045]                             name <- restart$name
[13:22:51.045]                             if (is.null(name)) 
[13:22:51.045]                               next
[13:22:51.045]                             if (!grepl(pattern, name)) 
[13:22:51.045]                               next
[13:22:51.045]                             invokeRestart(restart)
[13:22:51.045]                             muffled <- TRUE
[13:22:51.045]                             break
[13:22:51.045]                           }
[13:22:51.045]                         }
[13:22:51.045]                       }
[13:22:51.045]                       invisible(muffled)
[13:22:51.045]                     }
[13:22:51.045]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.045]                   }
[13:22:51.045]                 }
[13:22:51.045]                 else {
[13:22:51.045]                   if (TRUE) {
[13:22:51.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.045]                     {
[13:22:51.045]                       inherits <- base::inherits
[13:22:51.045]                       invokeRestart <- base::invokeRestart
[13:22:51.045]                       is.null <- base::is.null
[13:22:51.045]                       muffled <- FALSE
[13:22:51.045]                       if (inherits(cond, "message")) {
[13:22:51.045]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.045]                         if (muffled) 
[13:22:51.045]                           invokeRestart("muffleMessage")
[13:22:51.045]                       }
[13:22:51.045]                       else if (inherits(cond, "warning")) {
[13:22:51.045]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.045]                         if (muffled) 
[13:22:51.045]                           invokeRestart("muffleWarning")
[13:22:51.045]                       }
[13:22:51.045]                       else if (inherits(cond, "condition")) {
[13:22:51.045]                         if (!is.null(pattern)) {
[13:22:51.045]                           computeRestarts <- base::computeRestarts
[13:22:51.045]                           grepl <- base::grepl
[13:22:51.045]                           restarts <- computeRestarts(cond)
[13:22:51.045]                           for (restart in restarts) {
[13:22:51.045]                             name <- restart$name
[13:22:51.045]                             if (is.null(name)) 
[13:22:51.045]                               next
[13:22:51.045]                             if (!grepl(pattern, name)) 
[13:22:51.045]                               next
[13:22:51.045]                             invokeRestart(restart)
[13:22:51.045]                             muffled <- TRUE
[13:22:51.045]                             break
[13:22:51.045]                           }
[13:22:51.045]                         }
[13:22:51.045]                       }
[13:22:51.045]                       invisible(muffled)
[13:22:51.045]                     }
[13:22:51.045]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.045]                   }
[13:22:51.045]                 }
[13:22:51.045]             }
[13:22:51.045]         }))
[13:22:51.045]     }, error = function(ex) {
[13:22:51.045]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.045]                 ...future.rng), started = ...future.startTime, 
[13:22:51.045]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.045]             version = "1.8"), class = "FutureResult")
[13:22:51.045]     }, finally = {
[13:22:51.045]         if (!identical(...future.workdir, getwd())) 
[13:22:51.045]             setwd(...future.workdir)
[13:22:51.045]         {
[13:22:51.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.045]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.045]             }
[13:22:51.045]             base::options(...future.oldOptions)
[13:22:51.045]             if (.Platform$OS.type == "windows") {
[13:22:51.045]                 old_names <- names(...future.oldEnvVars)
[13:22:51.045]                 envs <- base::Sys.getenv()
[13:22:51.045]                 names <- names(envs)
[13:22:51.045]                 common <- intersect(names, old_names)
[13:22:51.045]                 added <- setdiff(names, old_names)
[13:22:51.045]                 removed <- setdiff(old_names, names)
[13:22:51.045]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.045]                   envs[common]]
[13:22:51.045]                 NAMES <- toupper(changed)
[13:22:51.045]                 args <- list()
[13:22:51.045]                 for (kk in seq_along(NAMES)) {
[13:22:51.045]                   name <- changed[[kk]]
[13:22:51.045]                   NAME <- NAMES[[kk]]
[13:22:51.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.045]                     next
[13:22:51.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.045]                 }
[13:22:51.045]                 NAMES <- toupper(added)
[13:22:51.045]                 for (kk in seq_along(NAMES)) {
[13:22:51.045]                   name <- added[[kk]]
[13:22:51.045]                   NAME <- NAMES[[kk]]
[13:22:51.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.045]                     next
[13:22:51.045]                   args[[name]] <- ""
[13:22:51.045]                 }
[13:22:51.045]                 NAMES <- toupper(removed)
[13:22:51.045]                 for (kk in seq_along(NAMES)) {
[13:22:51.045]                   name <- removed[[kk]]
[13:22:51.045]                   NAME <- NAMES[[kk]]
[13:22:51.045]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.045]                     next
[13:22:51.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.045]                 }
[13:22:51.045]                 if (length(args) > 0) 
[13:22:51.045]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.045]             }
[13:22:51.045]             else {
[13:22:51.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.045]             }
[13:22:51.045]             {
[13:22:51.045]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.045]                   0L) {
[13:22:51.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.045]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.045]                   base::options(opts)
[13:22:51.045]                 }
[13:22:51.045]                 {
[13:22:51.045]                   {
[13:22:51.045]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.045]                     NULL
[13:22:51.045]                   }
[13:22:51.045]                   options(future.plan = NULL)
[13:22:51.045]                   if (is.na(NA_character_)) 
[13:22:51.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.045]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.045]                     envir = parent.frame()) 
[13:22:51.045]                   {
[13:22:51.045]                     default_workers <- missing(workers)
[13:22:51.045]                     if (is.function(workers)) 
[13:22:51.045]                       workers <- workers()
[13:22:51.045]                     workers <- structure(as.integer(workers), 
[13:22:51.045]                       class = class(workers))
[13:22:51.045]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.045]                       1L)
[13:22:51.045]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.045]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.045]                       if (default_workers) 
[13:22:51.045]                         supportsMulticore(warn = TRUE)
[13:22:51.045]                       return(sequential(..., envir = envir))
[13:22:51.045]                     }
[13:22:51.045]                     oopts <- options(mc.cores = workers)
[13:22:51.045]                     on.exit(options(oopts))
[13:22:51.045]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.045]                       envir = envir)
[13:22:51.045]                     if (!future$lazy) 
[13:22:51.045]                       future <- run(future)
[13:22:51.045]                     invisible(future)
[13:22:51.045]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.045]                 }
[13:22:51.045]             }
[13:22:51.045]         }
[13:22:51.045]     })
[13:22:51.045]     if (TRUE) {
[13:22:51.045]         base::sink(type = "output", split = FALSE)
[13:22:51.045]         if (TRUE) {
[13:22:51.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.045]         }
[13:22:51.045]         else {
[13:22:51.045]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.045]         }
[13:22:51.045]         base::close(...future.stdout)
[13:22:51.045]         ...future.stdout <- NULL
[13:22:51.045]     }
[13:22:51.045]     ...future.result$conditions <- ...future.conditions
[13:22:51.045]     ...future.result$finished <- base::Sys.time()
[13:22:51.045]     ...future.result
[13:22:51.045] }
[13:22:51.047] requestCore(): workers = 2
[13:22:51.050] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[13:22:51.051] plan(): Setting new future strategy stack:
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.051] List of future strategies:
[13:22:51.051] 1. sequential:
[13:22:51.051]    - args: function (..., envir = parent.frame())
[13:22:51.051]    - tweaked: FALSE
[13:22:51.051]    - call: NULL
[13:22:51.052] plan(): nbrOfWorkers() = 1
[13:22:51.054] plan(): Setting new future strategy stack:
[13:22:51.054] List of future strategies:
[13:22:51.054] 1. multicore:
[13:22:51.054]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.054]    - tweaked: FALSE
[13:22:51.054]    - call: plan(strategy)
[13:22:51.060] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.061] result() for MulticoreFuture ...
[13:22:51.066] result() for MulticoreFuture ...
[13:22:51.066] result() for MulticoreFuture ... done
[13:22:51.067] result() for MulticoreFuture ... done
[13:22:51.067] result() for MulticoreFuture ...
[13:22:51.067] result() for MulticoreFuture ... done
[13:22:51.067] getGlobalsAndPackages() ...
[13:22:51.067] Searching for globals...
[13:22:51.068] 
[13:22:51.068] Searching for globals ... DONE
[13:22:51.068] - globals: [0] <none>
[13:22:51.068] getGlobalsAndPackages() ... DONE
[13:22:51.068] run() for ‘Future’ ...
[13:22:51.068] - state: ‘created’
[13:22:51.069] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:51.073] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.073] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:51.073]   - Field: ‘label’
[13:22:51.073]   - Field: ‘local’
[13:22:51.074]   - Field: ‘owner’
[13:22:51.074]   - Field: ‘envir’
[13:22:51.074]   - Field: ‘workers’
[13:22:51.074]   - Field: ‘packages’
[13:22:51.074]   - Field: ‘gc’
[13:22:51.074]   - Field: ‘job’
[13:22:51.074]   - Field: ‘conditions’
[13:22:51.074]   - Field: ‘expr’
[13:22:51.074]   - Field: ‘uuid’
[13:22:51.075]   - Field: ‘seed’
[13:22:51.075]   - Field: ‘version’
[13:22:51.075]   - Field: ‘result’
[13:22:51.075]   - Field: ‘asynchronous’
[13:22:51.075]   - Field: ‘calls’
[13:22:51.075]   - Field: ‘globals’
[13:22:51.075]   - Field: ‘stdout’
[13:22:51.075]   - Field: ‘earlySignal’
[13:22:51.075]   - Field: ‘lazy’
[13:22:51.075]   - Field: ‘state’
[13:22:51.078] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:51.079] - Launch lazy future ...
[13:22:51.079] Packages needed by the future expression (n = 0): <none>
[13:22:51.079] Packages needed by future strategies (n = 0): <none>
[13:22:51.080] {
[13:22:51.080]     {
[13:22:51.080]         {
[13:22:51.080]             ...future.startTime <- base::Sys.time()
[13:22:51.080]             {
[13:22:51.080]                 {
[13:22:51.080]                   {
[13:22:51.080]                     {
[13:22:51.080]                       base::local({
[13:22:51.080]                         has_future <- base::requireNamespace("future", 
[13:22:51.080]                           quietly = TRUE)
[13:22:51.080]                         if (has_future) {
[13:22:51.080]                           ns <- base::getNamespace("future")
[13:22:51.080]                           version <- ns[[".package"]][["version"]]
[13:22:51.080]                           if (is.null(version)) 
[13:22:51.080]                             version <- utils::packageVersion("future")
[13:22:51.080]                         }
[13:22:51.080]                         else {
[13:22:51.080]                           version <- NULL
[13:22:51.080]                         }
[13:22:51.080]                         if (!has_future || version < "1.8.0") {
[13:22:51.080]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.080]                             "", base::R.version$version.string), 
[13:22:51.080]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.080]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.080]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.080]                               "release", "version")], collapse = " "), 
[13:22:51.080]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.080]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.080]                             info)
[13:22:51.080]                           info <- base::paste(info, collapse = "; ")
[13:22:51.080]                           if (!has_future) {
[13:22:51.080]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.080]                               info)
[13:22:51.080]                           }
[13:22:51.080]                           else {
[13:22:51.080]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.080]                               info, version)
[13:22:51.080]                           }
[13:22:51.080]                           base::stop(msg)
[13:22:51.080]                         }
[13:22:51.080]                       })
[13:22:51.080]                     }
[13:22:51.080]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.080]                     base::options(mc.cores = 1L)
[13:22:51.080]                   }
[13:22:51.080]                   options(future.plan = NULL)
[13:22:51.080]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.080]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.080]                 }
[13:22:51.080]                 ...future.workdir <- getwd()
[13:22:51.080]             }
[13:22:51.080]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.080]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.080]         }
[13:22:51.080]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.080]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.080]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.080]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.080]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.080]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.080]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.080]             base::names(...future.oldOptions))
[13:22:51.080]     }
[13:22:51.080]     if (FALSE) {
[13:22:51.080]     }
[13:22:51.080]     else {
[13:22:51.080]         if (TRUE) {
[13:22:51.080]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.080]                 open = "w")
[13:22:51.080]         }
[13:22:51.080]         else {
[13:22:51.080]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.080]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.080]         }
[13:22:51.080]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.080]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.080]             base::sink(type = "output", split = FALSE)
[13:22:51.080]             base::close(...future.stdout)
[13:22:51.080]         }, add = TRUE)
[13:22:51.080]     }
[13:22:51.080]     ...future.frame <- base::sys.nframe()
[13:22:51.080]     ...future.conditions <- base::list()
[13:22:51.080]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.080]     if (FALSE) {
[13:22:51.080]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.080]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.080]     }
[13:22:51.080]     ...future.result <- base::tryCatch({
[13:22:51.080]         base::withCallingHandlers({
[13:22:51.080]             ...future.value <- base::withVisible(base::local({
[13:22:51.080]                 withCallingHandlers({
[13:22:51.080]                   42
[13:22:51.080]                 }, immediateCondition = function(cond) {
[13:22:51.080]                   save_rds <- function (object, pathname, ...) 
[13:22:51.080]                   {
[13:22:51.080]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.080]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.080]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.080]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.080]                         fi_tmp[["mtime"]])
[13:22:51.080]                     }
[13:22:51.080]                     tryCatch({
[13:22:51.080]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.080]                     }, error = function(ex) {
[13:22:51.080]                       msg <- conditionMessage(ex)
[13:22:51.080]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.080]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.080]                         fi_tmp[["mtime"]], msg)
[13:22:51.080]                       ex$message <- msg
[13:22:51.080]                       stop(ex)
[13:22:51.080]                     })
[13:22:51.080]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.080]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.080]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.080]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.080]                       fi <- file.info(pathname)
[13:22:51.080]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.080]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.080]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.080]                         fi[["size"]], fi[["mtime"]])
[13:22:51.080]                       stop(msg)
[13:22:51.080]                     }
[13:22:51.080]                     invisible(pathname)
[13:22:51.080]                   }
[13:22:51.080]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.080]                     rootPath = tempdir()) 
[13:22:51.080]                   {
[13:22:51.080]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.080]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.080]                       tmpdir = path, fileext = ".rds")
[13:22:51.080]                     save_rds(obj, file)
[13:22:51.080]                   }
[13:22:51.080]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.080]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.080]                   {
[13:22:51.080]                     inherits <- base::inherits
[13:22:51.080]                     invokeRestart <- base::invokeRestart
[13:22:51.080]                     is.null <- base::is.null
[13:22:51.080]                     muffled <- FALSE
[13:22:51.080]                     if (inherits(cond, "message")) {
[13:22:51.080]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.080]                       if (muffled) 
[13:22:51.080]                         invokeRestart("muffleMessage")
[13:22:51.080]                     }
[13:22:51.080]                     else if (inherits(cond, "warning")) {
[13:22:51.080]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.080]                       if (muffled) 
[13:22:51.080]                         invokeRestart("muffleWarning")
[13:22:51.080]                     }
[13:22:51.080]                     else if (inherits(cond, "condition")) {
[13:22:51.080]                       if (!is.null(pattern)) {
[13:22:51.080]                         computeRestarts <- base::computeRestarts
[13:22:51.080]                         grepl <- base::grepl
[13:22:51.080]                         restarts <- computeRestarts(cond)
[13:22:51.080]                         for (restart in restarts) {
[13:22:51.080]                           name <- restart$name
[13:22:51.080]                           if (is.null(name)) 
[13:22:51.080]                             next
[13:22:51.080]                           if (!grepl(pattern, name)) 
[13:22:51.080]                             next
[13:22:51.080]                           invokeRestart(restart)
[13:22:51.080]                           muffled <- TRUE
[13:22:51.080]                           break
[13:22:51.080]                         }
[13:22:51.080]                       }
[13:22:51.080]                     }
[13:22:51.080]                     invisible(muffled)
[13:22:51.080]                   }
[13:22:51.080]                   muffleCondition(cond)
[13:22:51.080]                 })
[13:22:51.080]             }))
[13:22:51.080]             future::FutureResult(value = ...future.value$value, 
[13:22:51.080]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.080]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.080]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.080]                     ...future.globalenv.names))
[13:22:51.080]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.080]         }, condition = base::local({
[13:22:51.080]             c <- base::c
[13:22:51.080]             inherits <- base::inherits
[13:22:51.080]             invokeRestart <- base::invokeRestart
[13:22:51.080]             length <- base::length
[13:22:51.080]             list <- base::list
[13:22:51.080]             seq.int <- base::seq.int
[13:22:51.080]             signalCondition <- base::signalCondition
[13:22:51.080]             sys.calls <- base::sys.calls
[13:22:51.080]             `[[` <- base::`[[`
[13:22:51.080]             `+` <- base::`+`
[13:22:51.080]             `<<-` <- base::`<<-`
[13:22:51.080]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.080]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.080]                   3L)]
[13:22:51.080]             }
[13:22:51.080]             function(cond) {
[13:22:51.080]                 is_error <- inherits(cond, "error")
[13:22:51.080]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.080]                   NULL)
[13:22:51.080]                 if (is_error) {
[13:22:51.080]                   sessionInformation <- function() {
[13:22:51.080]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.080]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.080]                       search = base::search(), system = base::Sys.info())
[13:22:51.080]                   }
[13:22:51.080]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.080]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.080]                     cond$call), session = sessionInformation(), 
[13:22:51.080]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.080]                   signalCondition(cond)
[13:22:51.080]                 }
[13:22:51.080]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.080]                 "immediateCondition"))) {
[13:22:51.080]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.080]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.080]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.080]                   if (TRUE && !signal) {
[13:22:51.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.080]                     {
[13:22:51.080]                       inherits <- base::inherits
[13:22:51.080]                       invokeRestart <- base::invokeRestart
[13:22:51.080]                       is.null <- base::is.null
[13:22:51.080]                       muffled <- FALSE
[13:22:51.080]                       if (inherits(cond, "message")) {
[13:22:51.080]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.080]                         if (muffled) 
[13:22:51.080]                           invokeRestart("muffleMessage")
[13:22:51.080]                       }
[13:22:51.080]                       else if (inherits(cond, "warning")) {
[13:22:51.080]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.080]                         if (muffled) 
[13:22:51.080]                           invokeRestart("muffleWarning")
[13:22:51.080]                       }
[13:22:51.080]                       else if (inherits(cond, "condition")) {
[13:22:51.080]                         if (!is.null(pattern)) {
[13:22:51.080]                           computeRestarts <- base::computeRestarts
[13:22:51.080]                           grepl <- base::grepl
[13:22:51.080]                           restarts <- computeRestarts(cond)
[13:22:51.080]                           for (restart in restarts) {
[13:22:51.080]                             name <- restart$name
[13:22:51.080]                             if (is.null(name)) 
[13:22:51.080]                               next
[13:22:51.080]                             if (!grepl(pattern, name)) 
[13:22:51.080]                               next
[13:22:51.080]                             invokeRestart(restart)
[13:22:51.080]                             muffled <- TRUE
[13:22:51.080]                             break
[13:22:51.080]                           }
[13:22:51.080]                         }
[13:22:51.080]                       }
[13:22:51.080]                       invisible(muffled)
[13:22:51.080]                     }
[13:22:51.080]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.080]                   }
[13:22:51.080]                 }
[13:22:51.080]                 else {
[13:22:51.080]                   if (TRUE) {
[13:22:51.080]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.080]                     {
[13:22:51.080]                       inherits <- base::inherits
[13:22:51.080]                       invokeRestart <- base::invokeRestart
[13:22:51.080]                       is.null <- base::is.null
[13:22:51.080]                       muffled <- FALSE
[13:22:51.080]                       if (inherits(cond, "message")) {
[13:22:51.080]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.080]                         if (muffled) 
[13:22:51.080]                           invokeRestart("muffleMessage")
[13:22:51.080]                       }
[13:22:51.080]                       else if (inherits(cond, "warning")) {
[13:22:51.080]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.080]                         if (muffled) 
[13:22:51.080]                           invokeRestart("muffleWarning")
[13:22:51.080]                       }
[13:22:51.080]                       else if (inherits(cond, "condition")) {
[13:22:51.080]                         if (!is.null(pattern)) {
[13:22:51.080]                           computeRestarts <- base::computeRestarts
[13:22:51.080]                           grepl <- base::grepl
[13:22:51.080]                           restarts <- computeRestarts(cond)
[13:22:51.080]                           for (restart in restarts) {
[13:22:51.080]                             name <- restart$name
[13:22:51.080]                             if (is.null(name)) 
[13:22:51.080]                               next
[13:22:51.080]                             if (!grepl(pattern, name)) 
[13:22:51.080]                               next
[13:22:51.080]                             invokeRestart(restart)
[13:22:51.080]                             muffled <- TRUE
[13:22:51.080]                             break
[13:22:51.080]                           }
[13:22:51.080]                         }
[13:22:51.080]                       }
[13:22:51.080]                       invisible(muffled)
[13:22:51.080]                     }
[13:22:51.080]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.080]                   }
[13:22:51.080]                 }
[13:22:51.080]             }
[13:22:51.080]         }))
[13:22:51.080]     }, error = function(ex) {
[13:22:51.080]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.080]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.080]                 ...future.rng), started = ...future.startTime, 
[13:22:51.080]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.080]             version = "1.8"), class = "FutureResult")
[13:22:51.080]     }, finally = {
[13:22:51.080]         if (!identical(...future.workdir, getwd())) 
[13:22:51.080]             setwd(...future.workdir)
[13:22:51.080]         {
[13:22:51.080]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.080]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.080]             }
[13:22:51.080]             base::options(...future.oldOptions)
[13:22:51.080]             if (.Platform$OS.type == "windows") {
[13:22:51.080]                 old_names <- names(...future.oldEnvVars)
[13:22:51.080]                 envs <- base::Sys.getenv()
[13:22:51.080]                 names <- names(envs)
[13:22:51.080]                 common <- intersect(names, old_names)
[13:22:51.080]                 added <- setdiff(names, old_names)
[13:22:51.080]                 removed <- setdiff(old_names, names)
[13:22:51.080]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.080]                   envs[common]]
[13:22:51.080]                 NAMES <- toupper(changed)
[13:22:51.080]                 args <- list()
[13:22:51.080]                 for (kk in seq_along(NAMES)) {
[13:22:51.080]                   name <- changed[[kk]]
[13:22:51.080]                   NAME <- NAMES[[kk]]
[13:22:51.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.080]                     next
[13:22:51.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.080]                 }
[13:22:51.080]                 NAMES <- toupper(added)
[13:22:51.080]                 for (kk in seq_along(NAMES)) {
[13:22:51.080]                   name <- added[[kk]]
[13:22:51.080]                   NAME <- NAMES[[kk]]
[13:22:51.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.080]                     next
[13:22:51.080]                   args[[name]] <- ""
[13:22:51.080]                 }
[13:22:51.080]                 NAMES <- toupper(removed)
[13:22:51.080]                 for (kk in seq_along(NAMES)) {
[13:22:51.080]                   name <- removed[[kk]]
[13:22:51.080]                   NAME <- NAMES[[kk]]
[13:22:51.080]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.080]                     next
[13:22:51.080]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.080]                 }
[13:22:51.080]                 if (length(args) > 0) 
[13:22:51.080]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.080]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.080]             }
[13:22:51.080]             else {
[13:22:51.080]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.080]             }
[13:22:51.080]             {
[13:22:51.080]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.080]                   0L) {
[13:22:51.080]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.080]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.080]                   base::options(opts)
[13:22:51.080]                 }
[13:22:51.080]                 {
[13:22:51.080]                   {
[13:22:51.080]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.080]                     NULL
[13:22:51.080]                   }
[13:22:51.080]                   options(future.plan = NULL)
[13:22:51.080]                   if (is.na(NA_character_)) 
[13:22:51.080]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.080]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.080]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.080]                     envir = parent.frame()) 
[13:22:51.080]                   {
[13:22:51.080]                     default_workers <- missing(workers)
[13:22:51.080]                     if (is.function(workers)) 
[13:22:51.080]                       workers <- workers()
[13:22:51.080]                     workers <- structure(as.integer(workers), 
[13:22:51.080]                       class = class(workers))
[13:22:51.080]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.080]                       1L)
[13:22:51.080]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.080]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.080]                       if (default_workers) 
[13:22:51.080]                         supportsMulticore(warn = TRUE)
[13:22:51.080]                       return(sequential(..., envir = envir))
[13:22:51.080]                     }
[13:22:51.080]                     oopts <- options(mc.cores = workers)
[13:22:51.080]                     on.exit(options(oopts))
[13:22:51.080]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.080]                       envir = envir)
[13:22:51.080]                     if (!future$lazy) 
[13:22:51.080]                       future <- run(future)
[13:22:51.080]                     invisible(future)
[13:22:51.080]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.080]                 }
[13:22:51.080]             }
[13:22:51.080]         }
[13:22:51.080]     })
[13:22:51.080]     if (TRUE) {
[13:22:51.080]         base::sink(type = "output", split = FALSE)
[13:22:51.080]         if (TRUE) {
[13:22:51.080]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.080]         }
[13:22:51.080]         else {
[13:22:51.080]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.080]         }
[13:22:51.080]         base::close(...future.stdout)
[13:22:51.080]         ...future.stdout <- NULL
[13:22:51.080]     }
[13:22:51.080]     ...future.result$conditions <- ...future.conditions
[13:22:51.080]     ...future.result$finished <- base::Sys.time()
[13:22:51.080]     ...future.result
[13:22:51.080] }
[13:22:51.082] requestCore(): workers = 2
[13:22:51.085] MulticoreFuture started
[13:22:51.085] - Launch lazy future ... done
[13:22:51.085] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
[13:22:51.086] plan(): Setting new future strategy stack:
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.086] List of future strategies:
[13:22:51.086] 1. sequential:
[13:22:51.086]    - args: function (..., envir = parent.frame())
[13:22:51.086]    - tweaked: FALSE
[13:22:51.086]    - call: NULL
[13:22:51.087] plan(): nbrOfWorkers() = 1
[13:22:51.089] plan(): Setting new future strategy stack:
[13:22:51.089] List of future strategies:
[13:22:51.089] 1. multicore:
[13:22:51.089]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.089]    - tweaked: FALSE
[13:22:51.089]    - call: plan(strategy)
[13:22:51.095] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.096] result() for MulticoreFuture ...
[13:22:51.097] result() for MulticoreFuture ...
[13:22:51.097] result() for MulticoreFuture ... done
[13:22:51.097] result() for MulticoreFuture ... done
[13:22:51.098] result() for MulticoreFuture ...
[13:22:51.098] result() for MulticoreFuture ... done
[13:22:51.098] getGlobalsAndPackages() ...
[13:22:51.098] Searching for globals...
[13:22:51.099] - globals found: [1] ‘{’
[13:22:51.100] Searching for globals ... DONE
[13:22:51.100] Resolving globals: FALSE
[13:22:51.100] 
[13:22:51.100] 
[13:22:51.100] getGlobalsAndPackages() ... DONE
[13:22:51.101] run() for ‘Future’ ...
[13:22:51.101] - state: ‘created’
[13:22:51.101] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:51.105] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.105] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:51.105]   - Field: ‘label’
[13:22:51.106]   - Field: ‘local’
[13:22:51.106]   - Field: ‘owner’
[13:22:51.106]   - Field: ‘envir’
[13:22:51.106]   - Field: ‘workers’
[13:22:51.106]   - Field: ‘packages’
[13:22:51.106]   - Field: ‘gc’
[13:22:51.106]   - Field: ‘job’
[13:22:51.106]   - Field: ‘conditions’
[13:22:51.107]   - Field: ‘expr’
[13:22:51.107]   - Field: ‘uuid’
[13:22:51.107]   - Field: ‘seed’
[13:22:51.107]   - Field: ‘version’
[13:22:51.107]   - Field: ‘result’
[13:22:51.107]   - Field: ‘asynchronous’
[13:22:51.107]   - Field: ‘calls’
[13:22:51.107]   - Field: ‘globals’
[13:22:51.108]   - Field: ‘stdout’
[13:22:51.108]   - Field: ‘earlySignal’
[13:22:51.108]   - Field: ‘lazy’
[13:22:51.108]   - Field: ‘state’
[13:22:51.108] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:51.108] - Launch lazy future ...
[13:22:51.108] Packages needed by the future expression (n = 0): <none>
[13:22:51.109] Packages needed by future strategies (n = 0): <none>
[13:22:51.109] {
[13:22:51.109]     {
[13:22:51.109]         {
[13:22:51.109]             ...future.startTime <- base::Sys.time()
[13:22:51.109]             {
[13:22:51.109]                 {
[13:22:51.109]                   {
[13:22:51.109]                     {
[13:22:51.109]                       base::local({
[13:22:51.109]                         has_future <- base::requireNamespace("future", 
[13:22:51.109]                           quietly = TRUE)
[13:22:51.109]                         if (has_future) {
[13:22:51.109]                           ns <- base::getNamespace("future")
[13:22:51.109]                           version <- ns[[".package"]][["version"]]
[13:22:51.109]                           if (is.null(version)) 
[13:22:51.109]                             version <- utils::packageVersion("future")
[13:22:51.109]                         }
[13:22:51.109]                         else {
[13:22:51.109]                           version <- NULL
[13:22:51.109]                         }
[13:22:51.109]                         if (!has_future || version < "1.8.0") {
[13:22:51.109]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.109]                             "", base::R.version$version.string), 
[13:22:51.109]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.109]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.109]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.109]                               "release", "version")], collapse = " "), 
[13:22:51.109]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.109]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.109]                             info)
[13:22:51.109]                           info <- base::paste(info, collapse = "; ")
[13:22:51.109]                           if (!has_future) {
[13:22:51.109]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.109]                               info)
[13:22:51.109]                           }
[13:22:51.109]                           else {
[13:22:51.109]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.109]                               info, version)
[13:22:51.109]                           }
[13:22:51.109]                           base::stop(msg)
[13:22:51.109]                         }
[13:22:51.109]                       })
[13:22:51.109]                     }
[13:22:51.109]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.109]                     base::options(mc.cores = 1L)
[13:22:51.109]                   }
[13:22:51.109]                   options(future.plan = NULL)
[13:22:51.109]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.109]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.109]                 }
[13:22:51.109]                 ...future.workdir <- getwd()
[13:22:51.109]             }
[13:22:51.109]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.109]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.109]         }
[13:22:51.109]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.109]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.109]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.109]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.109]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.109]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.109]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.109]             base::names(...future.oldOptions))
[13:22:51.109]     }
[13:22:51.109]     if (FALSE) {
[13:22:51.109]     }
[13:22:51.109]     else {
[13:22:51.109]         if (TRUE) {
[13:22:51.109]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.109]                 open = "w")
[13:22:51.109]         }
[13:22:51.109]         else {
[13:22:51.109]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.109]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.109]         }
[13:22:51.109]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.109]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.109]             base::sink(type = "output", split = FALSE)
[13:22:51.109]             base::close(...future.stdout)
[13:22:51.109]         }, add = TRUE)
[13:22:51.109]     }
[13:22:51.109]     ...future.frame <- base::sys.nframe()
[13:22:51.109]     ...future.conditions <- base::list()
[13:22:51.109]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.109]     if (FALSE) {
[13:22:51.109]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.109]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.109]     }
[13:22:51.109]     ...future.result <- base::tryCatch({
[13:22:51.109]         base::withCallingHandlers({
[13:22:51.109]             ...future.value <- base::withVisible(base::local({
[13:22:51.109]                 withCallingHandlers({
[13:22:51.109]                   {
[13:22:51.109]                     42
[13:22:51.109]                   }
[13:22:51.109]                 }, immediateCondition = function(cond) {
[13:22:51.109]                   save_rds <- function (object, pathname, ...) 
[13:22:51.109]                   {
[13:22:51.109]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.109]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.109]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.109]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.109]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.109]                         fi_tmp[["mtime"]])
[13:22:51.109]                     }
[13:22:51.109]                     tryCatch({
[13:22:51.109]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.109]                     }, error = function(ex) {
[13:22:51.109]                       msg <- conditionMessage(ex)
[13:22:51.109]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.109]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.109]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.109]                         fi_tmp[["mtime"]], msg)
[13:22:51.109]                       ex$message <- msg
[13:22:51.109]                       stop(ex)
[13:22:51.109]                     })
[13:22:51.109]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.109]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.109]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.109]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.109]                       fi <- file.info(pathname)
[13:22:51.109]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.109]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.109]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.109]                         fi[["size"]], fi[["mtime"]])
[13:22:51.109]                       stop(msg)
[13:22:51.109]                     }
[13:22:51.109]                     invisible(pathname)
[13:22:51.109]                   }
[13:22:51.109]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.109]                     rootPath = tempdir()) 
[13:22:51.109]                   {
[13:22:51.109]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.109]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.109]                       tmpdir = path, fileext = ".rds")
[13:22:51.109]                     save_rds(obj, file)
[13:22:51.109]                   }
[13:22:51.109]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.109]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.109]                   {
[13:22:51.109]                     inherits <- base::inherits
[13:22:51.109]                     invokeRestart <- base::invokeRestart
[13:22:51.109]                     is.null <- base::is.null
[13:22:51.109]                     muffled <- FALSE
[13:22:51.109]                     if (inherits(cond, "message")) {
[13:22:51.109]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.109]                       if (muffled) 
[13:22:51.109]                         invokeRestart("muffleMessage")
[13:22:51.109]                     }
[13:22:51.109]                     else if (inherits(cond, "warning")) {
[13:22:51.109]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.109]                       if (muffled) 
[13:22:51.109]                         invokeRestart("muffleWarning")
[13:22:51.109]                     }
[13:22:51.109]                     else if (inherits(cond, "condition")) {
[13:22:51.109]                       if (!is.null(pattern)) {
[13:22:51.109]                         computeRestarts <- base::computeRestarts
[13:22:51.109]                         grepl <- base::grepl
[13:22:51.109]                         restarts <- computeRestarts(cond)
[13:22:51.109]                         for (restart in restarts) {
[13:22:51.109]                           name <- restart$name
[13:22:51.109]                           if (is.null(name)) 
[13:22:51.109]                             next
[13:22:51.109]                           if (!grepl(pattern, name)) 
[13:22:51.109]                             next
[13:22:51.109]                           invokeRestart(restart)
[13:22:51.109]                           muffled <- TRUE
[13:22:51.109]                           break
[13:22:51.109]                         }
[13:22:51.109]                       }
[13:22:51.109]                     }
[13:22:51.109]                     invisible(muffled)
[13:22:51.109]                   }
[13:22:51.109]                   muffleCondition(cond)
[13:22:51.109]                 })
[13:22:51.109]             }))
[13:22:51.109]             future::FutureResult(value = ...future.value$value, 
[13:22:51.109]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.109]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.109]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.109]                     ...future.globalenv.names))
[13:22:51.109]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.109]         }, condition = base::local({
[13:22:51.109]             c <- base::c
[13:22:51.109]             inherits <- base::inherits
[13:22:51.109]             invokeRestart <- base::invokeRestart
[13:22:51.109]             length <- base::length
[13:22:51.109]             list <- base::list
[13:22:51.109]             seq.int <- base::seq.int
[13:22:51.109]             signalCondition <- base::signalCondition
[13:22:51.109]             sys.calls <- base::sys.calls
[13:22:51.109]             `[[` <- base::`[[`
[13:22:51.109]             `+` <- base::`+`
[13:22:51.109]             `<<-` <- base::`<<-`
[13:22:51.109]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.109]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.109]                   3L)]
[13:22:51.109]             }
[13:22:51.109]             function(cond) {
[13:22:51.109]                 is_error <- inherits(cond, "error")
[13:22:51.109]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.109]                   NULL)
[13:22:51.109]                 if (is_error) {
[13:22:51.109]                   sessionInformation <- function() {
[13:22:51.109]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.109]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.109]                       search = base::search(), system = base::Sys.info())
[13:22:51.109]                   }
[13:22:51.109]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.109]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.109]                     cond$call), session = sessionInformation(), 
[13:22:51.109]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.109]                   signalCondition(cond)
[13:22:51.109]                 }
[13:22:51.109]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.109]                 "immediateCondition"))) {
[13:22:51.109]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.109]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.109]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.109]                   if (TRUE && !signal) {
[13:22:51.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.109]                     {
[13:22:51.109]                       inherits <- base::inherits
[13:22:51.109]                       invokeRestart <- base::invokeRestart
[13:22:51.109]                       is.null <- base::is.null
[13:22:51.109]                       muffled <- FALSE
[13:22:51.109]                       if (inherits(cond, "message")) {
[13:22:51.109]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.109]                         if (muffled) 
[13:22:51.109]                           invokeRestart("muffleMessage")
[13:22:51.109]                       }
[13:22:51.109]                       else if (inherits(cond, "warning")) {
[13:22:51.109]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.109]                         if (muffled) 
[13:22:51.109]                           invokeRestart("muffleWarning")
[13:22:51.109]                       }
[13:22:51.109]                       else if (inherits(cond, "condition")) {
[13:22:51.109]                         if (!is.null(pattern)) {
[13:22:51.109]                           computeRestarts <- base::computeRestarts
[13:22:51.109]                           grepl <- base::grepl
[13:22:51.109]                           restarts <- computeRestarts(cond)
[13:22:51.109]                           for (restart in restarts) {
[13:22:51.109]                             name <- restart$name
[13:22:51.109]                             if (is.null(name)) 
[13:22:51.109]                               next
[13:22:51.109]                             if (!grepl(pattern, name)) 
[13:22:51.109]                               next
[13:22:51.109]                             invokeRestart(restart)
[13:22:51.109]                             muffled <- TRUE
[13:22:51.109]                             break
[13:22:51.109]                           }
[13:22:51.109]                         }
[13:22:51.109]                       }
[13:22:51.109]                       invisible(muffled)
[13:22:51.109]                     }
[13:22:51.109]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.109]                   }
[13:22:51.109]                 }
[13:22:51.109]                 else {
[13:22:51.109]                   if (TRUE) {
[13:22:51.109]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.109]                     {
[13:22:51.109]                       inherits <- base::inherits
[13:22:51.109]                       invokeRestart <- base::invokeRestart
[13:22:51.109]                       is.null <- base::is.null
[13:22:51.109]                       muffled <- FALSE
[13:22:51.109]                       if (inherits(cond, "message")) {
[13:22:51.109]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.109]                         if (muffled) 
[13:22:51.109]                           invokeRestart("muffleMessage")
[13:22:51.109]                       }
[13:22:51.109]                       else if (inherits(cond, "warning")) {
[13:22:51.109]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.109]                         if (muffled) 
[13:22:51.109]                           invokeRestart("muffleWarning")
[13:22:51.109]                       }
[13:22:51.109]                       else if (inherits(cond, "condition")) {
[13:22:51.109]                         if (!is.null(pattern)) {
[13:22:51.109]                           computeRestarts <- base::computeRestarts
[13:22:51.109]                           grepl <- base::grepl
[13:22:51.109]                           restarts <- computeRestarts(cond)
[13:22:51.109]                           for (restart in restarts) {
[13:22:51.109]                             name <- restart$name
[13:22:51.109]                             if (is.null(name)) 
[13:22:51.109]                               next
[13:22:51.109]                             if (!grepl(pattern, name)) 
[13:22:51.109]                               next
[13:22:51.109]                             invokeRestart(restart)
[13:22:51.109]                             muffled <- TRUE
[13:22:51.109]                             break
[13:22:51.109]                           }
[13:22:51.109]                         }
[13:22:51.109]                       }
[13:22:51.109]                       invisible(muffled)
[13:22:51.109]                     }
[13:22:51.109]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.109]                   }
[13:22:51.109]                 }
[13:22:51.109]             }
[13:22:51.109]         }))
[13:22:51.109]     }, error = function(ex) {
[13:22:51.109]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.109]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.109]                 ...future.rng), started = ...future.startTime, 
[13:22:51.109]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.109]             version = "1.8"), class = "FutureResult")
[13:22:51.109]     }, finally = {
[13:22:51.109]         if (!identical(...future.workdir, getwd())) 
[13:22:51.109]             setwd(...future.workdir)
[13:22:51.109]         {
[13:22:51.109]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.109]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.109]             }
[13:22:51.109]             base::options(...future.oldOptions)
[13:22:51.109]             if (.Platform$OS.type == "windows") {
[13:22:51.109]                 old_names <- names(...future.oldEnvVars)
[13:22:51.109]                 envs <- base::Sys.getenv()
[13:22:51.109]                 names <- names(envs)
[13:22:51.109]                 common <- intersect(names, old_names)
[13:22:51.109]                 added <- setdiff(names, old_names)
[13:22:51.109]                 removed <- setdiff(old_names, names)
[13:22:51.109]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.109]                   envs[common]]
[13:22:51.109]                 NAMES <- toupper(changed)
[13:22:51.109]                 args <- list()
[13:22:51.109]                 for (kk in seq_along(NAMES)) {
[13:22:51.109]                   name <- changed[[kk]]
[13:22:51.109]                   NAME <- NAMES[[kk]]
[13:22:51.109]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.109]                     next
[13:22:51.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.109]                 }
[13:22:51.109]                 NAMES <- toupper(added)
[13:22:51.109]                 for (kk in seq_along(NAMES)) {
[13:22:51.109]                   name <- added[[kk]]
[13:22:51.109]                   NAME <- NAMES[[kk]]
[13:22:51.109]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.109]                     next
[13:22:51.109]                   args[[name]] <- ""
[13:22:51.109]                 }
[13:22:51.109]                 NAMES <- toupper(removed)
[13:22:51.109]                 for (kk in seq_along(NAMES)) {
[13:22:51.109]                   name <- removed[[kk]]
[13:22:51.109]                   NAME <- NAMES[[kk]]
[13:22:51.109]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.109]                     next
[13:22:51.109]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.109]                 }
[13:22:51.109]                 if (length(args) > 0) 
[13:22:51.109]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.109]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.109]             }
[13:22:51.109]             else {
[13:22:51.109]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.109]             }
[13:22:51.109]             {
[13:22:51.109]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.109]                   0L) {
[13:22:51.109]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.109]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.109]                   base::options(opts)
[13:22:51.109]                 }
[13:22:51.109]                 {
[13:22:51.109]                   {
[13:22:51.109]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.109]                     NULL
[13:22:51.109]                   }
[13:22:51.109]                   options(future.plan = NULL)
[13:22:51.109]                   if (is.na(NA_character_)) 
[13:22:51.109]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.109]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.109]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.109]                     envir = parent.frame()) 
[13:22:51.109]                   {
[13:22:51.109]                     default_workers <- missing(workers)
[13:22:51.109]                     if (is.function(workers)) 
[13:22:51.109]                       workers <- workers()
[13:22:51.109]                     workers <- structure(as.integer(workers), 
[13:22:51.109]                       class = class(workers))
[13:22:51.109]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.109]                       1L)
[13:22:51.109]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.109]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.109]                       if (default_workers) 
[13:22:51.109]                         supportsMulticore(warn = TRUE)
[13:22:51.109]                       return(sequential(..., envir = envir))
[13:22:51.109]                     }
[13:22:51.109]                     oopts <- options(mc.cores = workers)
[13:22:51.109]                     on.exit(options(oopts))
[13:22:51.109]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.109]                       envir = envir)
[13:22:51.109]                     if (!future$lazy) 
[13:22:51.109]                       future <- run(future)
[13:22:51.109]                     invisible(future)
[13:22:51.109]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.109]                 }
[13:22:51.109]             }
[13:22:51.109]         }
[13:22:51.109]     })
[13:22:51.109]     if (TRUE) {
[13:22:51.109]         base::sink(type = "output", split = FALSE)
[13:22:51.109]         if (TRUE) {
[13:22:51.109]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.109]         }
[13:22:51.109]         else {
[13:22:51.109]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.109]         }
[13:22:51.109]         base::close(...future.stdout)
[13:22:51.109]         ...future.stdout <- NULL
[13:22:51.109]     }
[13:22:51.109]     ...future.result$conditions <- ...future.conditions
[13:22:51.109]     ...future.result$finished <- base::Sys.time()
[13:22:51.109]     ...future.result
[13:22:51.109] }
[13:22:51.112] requestCore(): workers = 2
[13:22:51.114] MulticoreFuture started
[13:22:51.115] - Launch lazy future ... done
[13:22:51.115] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘<none>’
Expression:
[13:22:51.116] plan(): Setting new future strategy stack:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.116] List of future strategies:
[13:22:51.116] 1. sequential:
[13:22:51.116]    - args: function (..., envir = parent.frame())
[13:22:51.116]    - tweaked: FALSE
[13:22:51.116]    - call: NULL
[13:22:51.117] plan(): nbrOfWorkers() = 1
[13:22:51.119] plan(): Setting new future strategy stack:
[13:22:51.119] List of future strategies:
[13:22:51.119] 1. multicore:
[13:22:51.119]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.119]    - tweaked: FALSE
[13:22:51.119]    - call: plan(strategy)
[13:22:51.125] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.125] result() for MulticoreFuture ...
[13:22:51.126] result() for MulticoreFuture ...
[13:22:51.127] result() for MulticoreFuture ... done
[13:22:51.127] result() for MulticoreFuture ... done
[13:22:51.127] result() for MulticoreFuture ...
[13:22:51.127] result() for MulticoreFuture ... done
[13:22:51.131] getGlobalsAndPackages() ...
[13:22:51.131] 
[13:22:51.131] - globals: [0] <none>
[13:22:51.132] getGlobalsAndPackages() ... DONE
[13:22:51.132] Packages needed by the future expression (n = 0): <none>
[13:22:51.132] Packages needed by future strategies (n = 0): <none>
[13:22:51.133] {
[13:22:51.133]     {
[13:22:51.133]         {
[13:22:51.133]             ...future.startTime <- base::Sys.time()
[13:22:51.133]             {
[13:22:51.133]                 {
[13:22:51.133]                   {
[13:22:51.133]                     {
[13:22:51.133]                       base::local({
[13:22:51.133]                         has_future <- base::requireNamespace("future", 
[13:22:51.133]                           quietly = TRUE)
[13:22:51.133]                         if (has_future) {
[13:22:51.133]                           ns <- base::getNamespace("future")
[13:22:51.133]                           version <- ns[[".package"]][["version"]]
[13:22:51.133]                           if (is.null(version)) 
[13:22:51.133]                             version <- utils::packageVersion("future")
[13:22:51.133]                         }
[13:22:51.133]                         else {
[13:22:51.133]                           version <- NULL
[13:22:51.133]                         }
[13:22:51.133]                         if (!has_future || version < "1.8.0") {
[13:22:51.133]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.133]                             "", base::R.version$version.string), 
[13:22:51.133]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.133]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.133]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.133]                               "release", "version")], collapse = " "), 
[13:22:51.133]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.133]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.133]                             info)
[13:22:51.133]                           info <- base::paste(info, collapse = "; ")
[13:22:51.133]                           if (!has_future) {
[13:22:51.133]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.133]                               info)
[13:22:51.133]                           }
[13:22:51.133]                           else {
[13:22:51.133]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.133]                               info, version)
[13:22:51.133]                           }
[13:22:51.133]                           base::stop(msg)
[13:22:51.133]                         }
[13:22:51.133]                       })
[13:22:51.133]                     }
[13:22:51.133]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.133]                     base::options(mc.cores = 1L)
[13:22:51.133]                   }
[13:22:51.133]                   options(future.plan = NULL)
[13:22:51.133]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.133]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.133]                 }
[13:22:51.133]                 ...future.workdir <- getwd()
[13:22:51.133]             }
[13:22:51.133]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.133]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.133]         }
[13:22:51.133]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.133]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.133]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.133]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.133]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.133]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.133]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.133]             base::names(...future.oldOptions))
[13:22:51.133]     }
[13:22:51.133]     if (FALSE) {
[13:22:51.133]     }
[13:22:51.133]     else {
[13:22:51.133]         if (TRUE) {
[13:22:51.133]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.133]                 open = "w")
[13:22:51.133]         }
[13:22:51.133]         else {
[13:22:51.133]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.133]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.133]         }
[13:22:51.133]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.133]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.133]             base::sink(type = "output", split = FALSE)
[13:22:51.133]             base::close(...future.stdout)
[13:22:51.133]         }, add = TRUE)
[13:22:51.133]     }
[13:22:51.133]     ...future.frame <- base::sys.nframe()
[13:22:51.133]     ...future.conditions <- base::list()
[13:22:51.133]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.133]     if (FALSE) {
[13:22:51.133]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.133]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.133]     }
[13:22:51.133]     ...future.result <- base::tryCatch({
[13:22:51.133]         base::withCallingHandlers({
[13:22:51.133]             ...future.value <- base::withVisible(base::local({
[13:22:51.133]                 withCallingHandlers({
[13:22:51.133]                   42
[13:22:51.133]                 }, immediateCondition = function(cond) {
[13:22:51.133]                   save_rds <- function (object, pathname, ...) 
[13:22:51.133]                   {
[13:22:51.133]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.133]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.133]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.133]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.133]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.133]                         fi_tmp[["mtime"]])
[13:22:51.133]                     }
[13:22:51.133]                     tryCatch({
[13:22:51.133]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.133]                     }, error = function(ex) {
[13:22:51.133]                       msg <- conditionMessage(ex)
[13:22:51.133]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.133]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.133]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.133]                         fi_tmp[["mtime"]], msg)
[13:22:51.133]                       ex$message <- msg
[13:22:51.133]                       stop(ex)
[13:22:51.133]                     })
[13:22:51.133]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.133]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.133]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.133]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.133]                       fi <- file.info(pathname)
[13:22:51.133]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.133]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.133]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.133]                         fi[["size"]], fi[["mtime"]])
[13:22:51.133]                       stop(msg)
[13:22:51.133]                     }
[13:22:51.133]                     invisible(pathname)
[13:22:51.133]                   }
[13:22:51.133]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.133]                     rootPath = tempdir()) 
[13:22:51.133]                   {
[13:22:51.133]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.133]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.133]                       tmpdir = path, fileext = ".rds")
[13:22:51.133]                     save_rds(obj, file)
[13:22:51.133]                   }
[13:22:51.133]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.133]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.133]                   {
[13:22:51.133]                     inherits <- base::inherits
[13:22:51.133]                     invokeRestart <- base::invokeRestart
[13:22:51.133]                     is.null <- base::is.null
[13:22:51.133]                     muffled <- FALSE
[13:22:51.133]                     if (inherits(cond, "message")) {
[13:22:51.133]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.133]                       if (muffled) 
[13:22:51.133]                         invokeRestart("muffleMessage")
[13:22:51.133]                     }
[13:22:51.133]                     else if (inherits(cond, "warning")) {
[13:22:51.133]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.133]                       if (muffled) 
[13:22:51.133]                         invokeRestart("muffleWarning")
[13:22:51.133]                     }
[13:22:51.133]                     else if (inherits(cond, "condition")) {
[13:22:51.133]                       if (!is.null(pattern)) {
[13:22:51.133]                         computeRestarts <- base::computeRestarts
[13:22:51.133]                         grepl <- base::grepl
[13:22:51.133]                         restarts <- computeRestarts(cond)
[13:22:51.133]                         for (restart in restarts) {
[13:22:51.133]                           name <- restart$name
[13:22:51.133]                           if (is.null(name)) 
[13:22:51.133]                             next
[13:22:51.133]                           if (!grepl(pattern, name)) 
[13:22:51.133]                             next
[13:22:51.133]                           invokeRestart(restart)
[13:22:51.133]                           muffled <- TRUE
[13:22:51.133]                           break
[13:22:51.133]                         }
[13:22:51.133]                       }
[13:22:51.133]                     }
[13:22:51.133]                     invisible(muffled)
[13:22:51.133]                   }
[13:22:51.133]                   muffleCondition(cond)
[13:22:51.133]                 })
[13:22:51.133]             }))
[13:22:51.133]             future::FutureResult(value = ...future.value$value, 
[13:22:51.133]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.133]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.133]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.133]                     ...future.globalenv.names))
[13:22:51.133]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.133]         }, condition = base::local({
[13:22:51.133]             c <- base::c
[13:22:51.133]             inherits <- base::inherits
[13:22:51.133]             invokeRestart <- base::invokeRestart
[13:22:51.133]             length <- base::length
[13:22:51.133]             list <- base::list
[13:22:51.133]             seq.int <- base::seq.int
[13:22:51.133]             signalCondition <- base::signalCondition
[13:22:51.133]             sys.calls <- base::sys.calls
[13:22:51.133]             `[[` <- base::`[[`
[13:22:51.133]             `+` <- base::`+`
[13:22:51.133]             `<<-` <- base::`<<-`
[13:22:51.133]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.133]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.133]                   3L)]
[13:22:51.133]             }
[13:22:51.133]             function(cond) {
[13:22:51.133]                 is_error <- inherits(cond, "error")
[13:22:51.133]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.133]                   NULL)
[13:22:51.133]                 if (is_error) {
[13:22:51.133]                   sessionInformation <- function() {
[13:22:51.133]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.133]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.133]                       search = base::search(), system = base::Sys.info())
[13:22:51.133]                   }
[13:22:51.133]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.133]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.133]                     cond$call), session = sessionInformation(), 
[13:22:51.133]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.133]                   signalCondition(cond)
[13:22:51.133]                 }
[13:22:51.133]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.133]                 "immediateCondition"))) {
[13:22:51.133]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.133]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.133]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.133]                   if (TRUE && !signal) {
[13:22:51.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.133]                     {
[13:22:51.133]                       inherits <- base::inherits
[13:22:51.133]                       invokeRestart <- base::invokeRestart
[13:22:51.133]                       is.null <- base::is.null
[13:22:51.133]                       muffled <- FALSE
[13:22:51.133]                       if (inherits(cond, "message")) {
[13:22:51.133]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.133]                         if (muffled) 
[13:22:51.133]                           invokeRestart("muffleMessage")
[13:22:51.133]                       }
[13:22:51.133]                       else if (inherits(cond, "warning")) {
[13:22:51.133]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.133]                         if (muffled) 
[13:22:51.133]                           invokeRestart("muffleWarning")
[13:22:51.133]                       }
[13:22:51.133]                       else if (inherits(cond, "condition")) {
[13:22:51.133]                         if (!is.null(pattern)) {
[13:22:51.133]                           computeRestarts <- base::computeRestarts
[13:22:51.133]                           grepl <- base::grepl
[13:22:51.133]                           restarts <- computeRestarts(cond)
[13:22:51.133]                           for (restart in restarts) {
[13:22:51.133]                             name <- restart$name
[13:22:51.133]                             if (is.null(name)) 
[13:22:51.133]                               next
[13:22:51.133]                             if (!grepl(pattern, name)) 
[13:22:51.133]                               next
[13:22:51.133]                             invokeRestart(restart)
[13:22:51.133]                             muffled <- TRUE
[13:22:51.133]                             break
[13:22:51.133]                           }
[13:22:51.133]                         }
[13:22:51.133]                       }
[13:22:51.133]                       invisible(muffled)
[13:22:51.133]                     }
[13:22:51.133]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.133]                   }
[13:22:51.133]                 }
[13:22:51.133]                 else {
[13:22:51.133]                   if (TRUE) {
[13:22:51.133]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.133]                     {
[13:22:51.133]                       inherits <- base::inherits
[13:22:51.133]                       invokeRestart <- base::invokeRestart
[13:22:51.133]                       is.null <- base::is.null
[13:22:51.133]                       muffled <- FALSE
[13:22:51.133]                       if (inherits(cond, "message")) {
[13:22:51.133]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.133]                         if (muffled) 
[13:22:51.133]                           invokeRestart("muffleMessage")
[13:22:51.133]                       }
[13:22:51.133]                       else if (inherits(cond, "warning")) {
[13:22:51.133]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.133]                         if (muffled) 
[13:22:51.133]                           invokeRestart("muffleWarning")
[13:22:51.133]                       }
[13:22:51.133]                       else if (inherits(cond, "condition")) {
[13:22:51.133]                         if (!is.null(pattern)) {
[13:22:51.133]                           computeRestarts <- base::computeRestarts
[13:22:51.133]                           grepl <- base::grepl
[13:22:51.133]                           restarts <- computeRestarts(cond)
[13:22:51.133]                           for (restart in restarts) {
[13:22:51.133]                             name <- restart$name
[13:22:51.133]                             if (is.null(name)) 
[13:22:51.133]                               next
[13:22:51.133]                             if (!grepl(pattern, name)) 
[13:22:51.133]                               next
[13:22:51.133]                             invokeRestart(restart)
[13:22:51.133]                             muffled <- TRUE
[13:22:51.133]                             break
[13:22:51.133]                           }
[13:22:51.133]                         }
[13:22:51.133]                       }
[13:22:51.133]                       invisible(muffled)
[13:22:51.133]                     }
[13:22:51.133]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.133]                   }
[13:22:51.133]                 }
[13:22:51.133]             }
[13:22:51.133]         }))
[13:22:51.133]     }, error = function(ex) {
[13:22:51.133]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.133]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.133]                 ...future.rng), started = ...future.startTime, 
[13:22:51.133]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.133]             version = "1.8"), class = "FutureResult")
[13:22:51.133]     }, finally = {
[13:22:51.133]         if (!identical(...future.workdir, getwd())) 
[13:22:51.133]             setwd(...future.workdir)
[13:22:51.133]         {
[13:22:51.133]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.133]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.133]             }
[13:22:51.133]             base::options(...future.oldOptions)
[13:22:51.133]             if (.Platform$OS.type == "windows") {
[13:22:51.133]                 old_names <- names(...future.oldEnvVars)
[13:22:51.133]                 envs <- base::Sys.getenv()
[13:22:51.133]                 names <- names(envs)
[13:22:51.133]                 common <- intersect(names, old_names)
[13:22:51.133]                 added <- setdiff(names, old_names)
[13:22:51.133]                 removed <- setdiff(old_names, names)
[13:22:51.133]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.133]                   envs[common]]
[13:22:51.133]                 NAMES <- toupper(changed)
[13:22:51.133]                 args <- list()
[13:22:51.133]                 for (kk in seq_along(NAMES)) {
[13:22:51.133]                   name <- changed[[kk]]
[13:22:51.133]                   NAME <- NAMES[[kk]]
[13:22:51.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.133]                     next
[13:22:51.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.133]                 }
[13:22:51.133]                 NAMES <- toupper(added)
[13:22:51.133]                 for (kk in seq_along(NAMES)) {
[13:22:51.133]                   name <- added[[kk]]
[13:22:51.133]                   NAME <- NAMES[[kk]]
[13:22:51.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.133]                     next
[13:22:51.133]                   args[[name]] <- ""
[13:22:51.133]                 }
[13:22:51.133]                 NAMES <- toupper(removed)
[13:22:51.133]                 for (kk in seq_along(NAMES)) {
[13:22:51.133]                   name <- removed[[kk]]
[13:22:51.133]                   NAME <- NAMES[[kk]]
[13:22:51.133]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.133]                     next
[13:22:51.133]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.133]                 }
[13:22:51.133]                 if (length(args) > 0) 
[13:22:51.133]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.133]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.133]             }
[13:22:51.133]             else {
[13:22:51.133]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.133]             }
[13:22:51.133]             {
[13:22:51.133]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.133]                   0L) {
[13:22:51.133]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.133]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.133]                   base::options(opts)
[13:22:51.133]                 }
[13:22:51.133]                 {
[13:22:51.133]                   {
[13:22:51.133]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.133]                     NULL
[13:22:51.133]                   }
[13:22:51.133]                   options(future.plan = NULL)
[13:22:51.133]                   if (is.na(NA_character_)) 
[13:22:51.133]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.133]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.133]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.133]                     envir = parent.frame()) 
[13:22:51.133]                   {
[13:22:51.133]                     default_workers <- missing(workers)
[13:22:51.133]                     if (is.function(workers)) 
[13:22:51.133]                       workers <- workers()
[13:22:51.133]                     workers <- structure(as.integer(workers), 
[13:22:51.133]                       class = class(workers))
[13:22:51.133]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.133]                       1L)
[13:22:51.133]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.133]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.133]                       if (default_workers) 
[13:22:51.133]                         supportsMulticore(warn = TRUE)
[13:22:51.133]                       return(sequential(..., envir = envir))
[13:22:51.133]                     }
[13:22:51.133]                     oopts <- options(mc.cores = workers)
[13:22:51.133]                     on.exit(options(oopts))
[13:22:51.133]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.133]                       envir = envir)
[13:22:51.133]                     if (!future$lazy) 
[13:22:51.133]                       future <- run(future)
[13:22:51.133]                     invisible(future)
[13:22:51.133]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.133]                 }
[13:22:51.133]             }
[13:22:51.133]         }
[13:22:51.133]     })
[13:22:51.133]     if (TRUE) {
[13:22:51.133]         base::sink(type = "output", split = FALSE)
[13:22:51.133]         if (TRUE) {
[13:22:51.133]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.133]         }
[13:22:51.133]         else {
[13:22:51.133]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.133]         }
[13:22:51.133]         base::close(...future.stdout)
[13:22:51.133]         ...future.stdout <- NULL
[13:22:51.133]     }
[13:22:51.133]     ...future.result$conditions <- ...future.conditions
[13:22:51.133]     ...future.result$finished <- base::Sys.time()
[13:22:51.133]     ...future.result
[13:22:51.133] }
[13:22:51.136] requestCore(): workers = 2
[13:22:51.138] MulticoreFuture started
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.139] plan(): Setting new future strategy stack:
[13:22:51.140] List of future strategies:
[13:22:51.140] 1. sequential:
[13:22:51.140]    - args: function (..., envir = parent.frame())
[13:22:51.140]    - tweaked: FALSE
[13:22:51.140]    - call: NULL
[13:22:51.140] plan(): nbrOfWorkers() = 1
[13:22:51.142] plan(): Setting new future strategy stack:
[13:22:51.143] List of future strategies:
[13:22:51.143] 1. multicore:
[13:22:51.143]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.143]    - tweaked: FALSE
[13:22:51.143]    - call: plan(strategy)
[13:22:51.148] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.149] result() for MulticoreFuture ...
[13:22:51.150] result() for MulticoreFuture ...
[13:22:51.150] result() for MulticoreFuture ... done
[13:22:51.150] result() for MulticoreFuture ... done
[13:22:51.150] result() for MulticoreFuture ...
[13:22:51.151] result() for MulticoreFuture ... done
[13:22:51.151] getGlobalsAndPackages() ...
[13:22:51.151] Searching for globals...
[13:22:51.152] 
[13:22:51.152] Searching for globals ... DONE
[13:22:51.152] - globals: [0] <none>
[13:22:51.152] getGlobalsAndPackages() ... DONE
[13:22:51.153] run() for ‘Future’ ...
[13:22:51.153] - state: ‘created’
[13:22:51.153] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:51.158] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.158] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:51.158]   - Field: ‘label’
[13:22:51.158]   - Field: ‘local’
[13:22:51.158]   - Field: ‘owner’
[13:22:51.158]   - Field: ‘envir’
[13:22:51.158]   - Field: ‘workers’
[13:22:51.158]   - Field: ‘packages’
[13:22:51.159]   - Field: ‘gc’
[13:22:51.159]   - Field: ‘job’
[13:22:51.159]   - Field: ‘conditions’
[13:22:51.159]   - Field: ‘expr’
[13:22:51.159]   - Field: ‘uuid’
[13:22:51.159]   - Field: ‘seed’
[13:22:51.159]   - Field: ‘version’
[13:22:51.159]   - Field: ‘result’
[13:22:51.159]   - Field: ‘asynchronous’
[13:22:51.160]   - Field: ‘calls’
[13:22:51.160]   - Field: ‘globals’
[13:22:51.160]   - Field: ‘stdout’
[13:22:51.160]   - Field: ‘earlySignal’
[13:22:51.160]   - Field: ‘lazy’
[13:22:51.160]   - Field: ‘state’
[13:22:51.160] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:51.160] - Launch lazy future ...
[13:22:51.161] Packages needed by the future expression (n = 0): <none>
[13:22:51.161] Packages needed by future strategies (n = 0): <none>
[13:22:51.161] {
[13:22:51.161]     {
[13:22:51.161]         {
[13:22:51.161]             ...future.startTime <- base::Sys.time()
[13:22:51.161]             {
[13:22:51.161]                 {
[13:22:51.161]                   {
[13:22:51.161]                     {
[13:22:51.161]                       base::local({
[13:22:51.161]                         has_future <- base::requireNamespace("future", 
[13:22:51.161]                           quietly = TRUE)
[13:22:51.161]                         if (has_future) {
[13:22:51.161]                           ns <- base::getNamespace("future")
[13:22:51.161]                           version <- ns[[".package"]][["version"]]
[13:22:51.161]                           if (is.null(version)) 
[13:22:51.161]                             version <- utils::packageVersion("future")
[13:22:51.161]                         }
[13:22:51.161]                         else {
[13:22:51.161]                           version <- NULL
[13:22:51.161]                         }
[13:22:51.161]                         if (!has_future || version < "1.8.0") {
[13:22:51.161]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.161]                             "", base::R.version$version.string), 
[13:22:51.161]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.161]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.161]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.161]                               "release", "version")], collapse = " "), 
[13:22:51.161]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.161]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.161]                             info)
[13:22:51.161]                           info <- base::paste(info, collapse = "; ")
[13:22:51.161]                           if (!has_future) {
[13:22:51.161]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.161]                               info)
[13:22:51.161]                           }
[13:22:51.161]                           else {
[13:22:51.161]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.161]                               info, version)
[13:22:51.161]                           }
[13:22:51.161]                           base::stop(msg)
[13:22:51.161]                         }
[13:22:51.161]                       })
[13:22:51.161]                     }
[13:22:51.161]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.161]                     base::options(mc.cores = 1L)
[13:22:51.161]                   }
[13:22:51.161]                   options(future.plan = NULL)
[13:22:51.161]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.161]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.161]                 }
[13:22:51.161]                 ...future.workdir <- getwd()
[13:22:51.161]             }
[13:22:51.161]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.161]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.161]         }
[13:22:51.161]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.161]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.161]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.161]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.161]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.161]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.161]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.161]             base::names(...future.oldOptions))
[13:22:51.161]     }
[13:22:51.161]     if (FALSE) {
[13:22:51.161]     }
[13:22:51.161]     else {
[13:22:51.161]         if (TRUE) {
[13:22:51.161]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.161]                 open = "w")
[13:22:51.161]         }
[13:22:51.161]         else {
[13:22:51.161]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.161]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.161]         }
[13:22:51.161]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.161]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.161]             base::sink(type = "output", split = FALSE)
[13:22:51.161]             base::close(...future.stdout)
[13:22:51.161]         }, add = TRUE)
[13:22:51.161]     }
[13:22:51.161]     ...future.frame <- base::sys.nframe()
[13:22:51.161]     ...future.conditions <- base::list()
[13:22:51.161]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.161]     if (FALSE) {
[13:22:51.161]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.161]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.161]     }
[13:22:51.161]     ...future.result <- base::tryCatch({
[13:22:51.161]         base::withCallingHandlers({
[13:22:51.161]             ...future.value <- base::withVisible(base::local({
[13:22:51.161]                 withCallingHandlers({
[13:22:51.161]                   42
[13:22:51.161]                 }, immediateCondition = function(cond) {
[13:22:51.161]                   save_rds <- function (object, pathname, ...) 
[13:22:51.161]                   {
[13:22:51.161]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.161]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.161]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.161]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.161]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.161]                         fi_tmp[["mtime"]])
[13:22:51.161]                     }
[13:22:51.161]                     tryCatch({
[13:22:51.161]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.161]                     }, error = function(ex) {
[13:22:51.161]                       msg <- conditionMessage(ex)
[13:22:51.161]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.161]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.161]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.161]                         fi_tmp[["mtime"]], msg)
[13:22:51.161]                       ex$message <- msg
[13:22:51.161]                       stop(ex)
[13:22:51.161]                     })
[13:22:51.161]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.161]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.161]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.161]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.161]                       fi <- file.info(pathname)
[13:22:51.161]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.161]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.161]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.161]                         fi[["size"]], fi[["mtime"]])
[13:22:51.161]                       stop(msg)
[13:22:51.161]                     }
[13:22:51.161]                     invisible(pathname)
[13:22:51.161]                   }
[13:22:51.161]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.161]                     rootPath = tempdir()) 
[13:22:51.161]                   {
[13:22:51.161]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.161]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.161]                       tmpdir = path, fileext = ".rds")
[13:22:51.161]                     save_rds(obj, file)
[13:22:51.161]                   }
[13:22:51.161]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.161]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.161]                   {
[13:22:51.161]                     inherits <- base::inherits
[13:22:51.161]                     invokeRestart <- base::invokeRestart
[13:22:51.161]                     is.null <- base::is.null
[13:22:51.161]                     muffled <- FALSE
[13:22:51.161]                     if (inherits(cond, "message")) {
[13:22:51.161]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.161]                       if (muffled) 
[13:22:51.161]                         invokeRestart("muffleMessage")
[13:22:51.161]                     }
[13:22:51.161]                     else if (inherits(cond, "warning")) {
[13:22:51.161]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.161]                       if (muffled) 
[13:22:51.161]                         invokeRestart("muffleWarning")
[13:22:51.161]                     }
[13:22:51.161]                     else if (inherits(cond, "condition")) {
[13:22:51.161]                       if (!is.null(pattern)) {
[13:22:51.161]                         computeRestarts <- base::computeRestarts
[13:22:51.161]                         grepl <- base::grepl
[13:22:51.161]                         restarts <- computeRestarts(cond)
[13:22:51.161]                         for (restart in restarts) {
[13:22:51.161]                           name <- restart$name
[13:22:51.161]                           if (is.null(name)) 
[13:22:51.161]                             next
[13:22:51.161]                           if (!grepl(pattern, name)) 
[13:22:51.161]                             next
[13:22:51.161]                           invokeRestart(restart)
[13:22:51.161]                           muffled <- TRUE
[13:22:51.161]                           break
[13:22:51.161]                         }
[13:22:51.161]                       }
[13:22:51.161]                     }
[13:22:51.161]                     invisible(muffled)
[13:22:51.161]                   }
[13:22:51.161]                   muffleCondition(cond)
[13:22:51.161]                 })
[13:22:51.161]             }))
[13:22:51.161]             future::FutureResult(value = ...future.value$value, 
[13:22:51.161]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.161]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.161]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.161]                     ...future.globalenv.names))
[13:22:51.161]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.161]         }, condition = base::local({
[13:22:51.161]             c <- base::c
[13:22:51.161]             inherits <- base::inherits
[13:22:51.161]             invokeRestart <- base::invokeRestart
[13:22:51.161]             length <- base::length
[13:22:51.161]             list <- base::list
[13:22:51.161]             seq.int <- base::seq.int
[13:22:51.161]             signalCondition <- base::signalCondition
[13:22:51.161]             sys.calls <- base::sys.calls
[13:22:51.161]             `[[` <- base::`[[`
[13:22:51.161]             `+` <- base::`+`
[13:22:51.161]             `<<-` <- base::`<<-`
[13:22:51.161]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.161]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.161]                   3L)]
[13:22:51.161]             }
[13:22:51.161]             function(cond) {
[13:22:51.161]                 is_error <- inherits(cond, "error")
[13:22:51.161]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.161]                   NULL)
[13:22:51.161]                 if (is_error) {
[13:22:51.161]                   sessionInformation <- function() {
[13:22:51.161]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.161]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.161]                       search = base::search(), system = base::Sys.info())
[13:22:51.161]                   }
[13:22:51.161]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.161]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.161]                     cond$call), session = sessionInformation(), 
[13:22:51.161]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.161]                   signalCondition(cond)
[13:22:51.161]                 }
[13:22:51.161]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.161]                 "immediateCondition"))) {
[13:22:51.161]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.161]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.161]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.161]                   if (TRUE && !signal) {
[13:22:51.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.161]                     {
[13:22:51.161]                       inherits <- base::inherits
[13:22:51.161]                       invokeRestart <- base::invokeRestart
[13:22:51.161]                       is.null <- base::is.null
[13:22:51.161]                       muffled <- FALSE
[13:22:51.161]                       if (inherits(cond, "message")) {
[13:22:51.161]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.161]                         if (muffled) 
[13:22:51.161]                           invokeRestart("muffleMessage")
[13:22:51.161]                       }
[13:22:51.161]                       else if (inherits(cond, "warning")) {
[13:22:51.161]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.161]                         if (muffled) 
[13:22:51.161]                           invokeRestart("muffleWarning")
[13:22:51.161]                       }
[13:22:51.161]                       else if (inherits(cond, "condition")) {
[13:22:51.161]                         if (!is.null(pattern)) {
[13:22:51.161]                           computeRestarts <- base::computeRestarts
[13:22:51.161]                           grepl <- base::grepl
[13:22:51.161]                           restarts <- computeRestarts(cond)
[13:22:51.161]                           for (restart in restarts) {
[13:22:51.161]                             name <- restart$name
[13:22:51.161]                             if (is.null(name)) 
[13:22:51.161]                               next
[13:22:51.161]                             if (!grepl(pattern, name)) 
[13:22:51.161]                               next
[13:22:51.161]                             invokeRestart(restart)
[13:22:51.161]                             muffled <- TRUE
[13:22:51.161]                             break
[13:22:51.161]                           }
[13:22:51.161]                         }
[13:22:51.161]                       }
[13:22:51.161]                       invisible(muffled)
[13:22:51.161]                     }
[13:22:51.161]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.161]                   }
[13:22:51.161]                 }
[13:22:51.161]                 else {
[13:22:51.161]                   if (TRUE) {
[13:22:51.161]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.161]                     {
[13:22:51.161]                       inherits <- base::inherits
[13:22:51.161]                       invokeRestart <- base::invokeRestart
[13:22:51.161]                       is.null <- base::is.null
[13:22:51.161]                       muffled <- FALSE
[13:22:51.161]                       if (inherits(cond, "message")) {
[13:22:51.161]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.161]                         if (muffled) 
[13:22:51.161]                           invokeRestart("muffleMessage")
[13:22:51.161]                       }
[13:22:51.161]                       else if (inherits(cond, "warning")) {
[13:22:51.161]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.161]                         if (muffled) 
[13:22:51.161]                           invokeRestart("muffleWarning")
[13:22:51.161]                       }
[13:22:51.161]                       else if (inherits(cond, "condition")) {
[13:22:51.161]                         if (!is.null(pattern)) {
[13:22:51.161]                           computeRestarts <- base::computeRestarts
[13:22:51.161]                           grepl <- base::grepl
[13:22:51.161]                           restarts <- computeRestarts(cond)
[13:22:51.161]                           for (restart in restarts) {
[13:22:51.161]                             name <- restart$name
[13:22:51.161]                             if (is.null(name)) 
[13:22:51.161]                               next
[13:22:51.161]                             if (!grepl(pattern, name)) 
[13:22:51.161]                               next
[13:22:51.161]                             invokeRestart(restart)
[13:22:51.161]                             muffled <- TRUE
[13:22:51.161]                             break
[13:22:51.161]                           }
[13:22:51.161]                         }
[13:22:51.161]                       }
[13:22:51.161]                       invisible(muffled)
[13:22:51.161]                     }
[13:22:51.161]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.161]                   }
[13:22:51.161]                 }
[13:22:51.161]             }
[13:22:51.161]         }))
[13:22:51.161]     }, error = function(ex) {
[13:22:51.161]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.161]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.161]                 ...future.rng), started = ...future.startTime, 
[13:22:51.161]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.161]             version = "1.8"), class = "FutureResult")
[13:22:51.161]     }, finally = {
[13:22:51.161]         if (!identical(...future.workdir, getwd())) 
[13:22:51.161]             setwd(...future.workdir)
[13:22:51.161]         {
[13:22:51.161]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.161]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.161]             }
[13:22:51.161]             base::options(...future.oldOptions)
[13:22:51.161]             if (.Platform$OS.type == "windows") {
[13:22:51.161]                 old_names <- names(...future.oldEnvVars)
[13:22:51.161]                 envs <- base::Sys.getenv()
[13:22:51.161]                 names <- names(envs)
[13:22:51.161]                 common <- intersect(names, old_names)
[13:22:51.161]                 added <- setdiff(names, old_names)
[13:22:51.161]                 removed <- setdiff(old_names, names)
[13:22:51.161]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.161]                   envs[common]]
[13:22:51.161]                 NAMES <- toupper(changed)
[13:22:51.161]                 args <- list()
[13:22:51.161]                 for (kk in seq_along(NAMES)) {
[13:22:51.161]                   name <- changed[[kk]]
[13:22:51.161]                   NAME <- NAMES[[kk]]
[13:22:51.161]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.161]                     next
[13:22:51.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.161]                 }
[13:22:51.161]                 NAMES <- toupper(added)
[13:22:51.161]                 for (kk in seq_along(NAMES)) {
[13:22:51.161]                   name <- added[[kk]]
[13:22:51.161]                   NAME <- NAMES[[kk]]
[13:22:51.161]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.161]                     next
[13:22:51.161]                   args[[name]] <- ""
[13:22:51.161]                 }
[13:22:51.161]                 NAMES <- toupper(removed)
[13:22:51.161]                 for (kk in seq_along(NAMES)) {
[13:22:51.161]                   name <- removed[[kk]]
[13:22:51.161]                   NAME <- NAMES[[kk]]
[13:22:51.161]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.161]                     next
[13:22:51.161]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.161]                 }
[13:22:51.161]                 if (length(args) > 0) 
[13:22:51.161]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.161]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.161]             }
[13:22:51.161]             else {
[13:22:51.161]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.161]             }
[13:22:51.161]             {
[13:22:51.161]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.161]                   0L) {
[13:22:51.161]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.161]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.161]                   base::options(opts)
[13:22:51.161]                 }
[13:22:51.161]                 {
[13:22:51.161]                   {
[13:22:51.161]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.161]                     NULL
[13:22:51.161]                   }
[13:22:51.161]                   options(future.plan = NULL)
[13:22:51.161]                   if (is.na(NA_character_)) 
[13:22:51.161]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.161]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.161]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.161]                     envir = parent.frame()) 
[13:22:51.161]                   {
[13:22:51.161]                     default_workers <- missing(workers)
[13:22:51.161]                     if (is.function(workers)) 
[13:22:51.161]                       workers <- workers()
[13:22:51.161]                     workers <- structure(as.integer(workers), 
[13:22:51.161]                       class = class(workers))
[13:22:51.161]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.161]                       1L)
[13:22:51.161]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.161]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.161]                       if (default_workers) 
[13:22:51.161]                         supportsMulticore(warn = TRUE)
[13:22:51.161]                       return(sequential(..., envir = envir))
[13:22:51.161]                     }
[13:22:51.161]                     oopts <- options(mc.cores = workers)
[13:22:51.161]                     on.exit(options(oopts))
[13:22:51.161]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.161]                       envir = envir)
[13:22:51.161]                     if (!future$lazy) 
[13:22:51.161]                       future <- run(future)
[13:22:51.161]                     invisible(future)
[13:22:51.161]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.161]                 }
[13:22:51.161]             }
[13:22:51.161]         }
[13:22:51.161]     })
[13:22:51.161]     if (TRUE) {
[13:22:51.161]         base::sink(type = "output", split = FALSE)
[13:22:51.161]         if (TRUE) {
[13:22:51.161]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.161]         }
[13:22:51.161]         else {
[13:22:51.161]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.161]         }
[13:22:51.161]         base::close(...future.stdout)
[13:22:51.161]         ...future.stdout <- NULL
[13:22:51.161]     }
[13:22:51.161]     ...future.result$conditions <- ...future.conditions
[13:22:51.161]     ...future.result$finished <- base::Sys.time()
[13:22:51.161]     ...future.result
[13:22:51.161] }
[13:22:51.164] requestCore(): workers = 2
[13:22:51.167] MulticoreFuture started
[13:22:51.167] - Launch lazy future ... done
[13:22:51.167] run() for ‘MulticoreFuture’ ... done
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.168] plan(): Setting new future strategy stack:
[13:22:51.168] List of future strategies:
[13:22:51.168] 1. sequential:
[13:22:51.168]    - args: function (..., envir = parent.frame())
[13:22:51.168]    - tweaked: FALSE
[13:22:51.168]    - call: NULL
[13:22:51.169] plan(): nbrOfWorkers() = 1
[13:22:51.171] plan(): Setting new future strategy stack:
[13:22:51.171] List of future strategies:
[13:22:51.171] 1. multicore:
[13:22:51.171]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.171]    - tweaked: FALSE
[13:22:51.171]    - call: plan(strategy)
[13:22:51.176] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.177] result() for MulticoreFuture ...
[13:22:51.178] result() for MulticoreFuture ...
[13:22:51.178] result() for MulticoreFuture ... done
[13:22:51.178] result() for MulticoreFuture ... done
[13:22:51.178] result() for MulticoreFuture ...
[13:22:51.178] result() for MulticoreFuture ... done
[13:22:51.179] getGlobalsAndPackages() ...
[13:22:51.179] Searching for globals...
[13:22:51.180] - globals found: [1] ‘{’
[13:22:51.180] Searching for globals ... DONE
[13:22:51.180] Resolving globals: FALSE
[13:22:51.181] 
[13:22:51.181] 
[13:22:51.181] getGlobalsAndPackages() ... DONE
[13:22:51.181] run() for ‘Future’ ...
[13:22:51.182] - state: ‘created’
[13:22:51.182] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:51.189] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.190] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:51.190]   - Field: ‘label’
[13:22:51.190]   - Field: ‘local’
[13:22:51.190]   - Field: ‘owner’
[13:22:51.190]   - Field: ‘envir’
[13:22:51.190]   - Field: ‘workers’
[13:22:51.190]   - Field: ‘packages’
[13:22:51.191]   - Field: ‘gc’
[13:22:51.191]   - Field: ‘job’
[13:22:51.191]   - Field: ‘conditions’
[13:22:51.191]   - Field: ‘expr’
[13:22:51.191]   - Field: ‘uuid’
[13:22:51.191]   - Field: ‘seed’
[13:22:51.191]   - Field: ‘version’
[13:22:51.192]   - Field: ‘result’
[13:22:51.192]   - Field: ‘asynchronous’
[13:22:51.192]   - Field: ‘calls’
[13:22:51.192]   - Field: ‘globals’
[13:22:51.192]   - Field: ‘stdout’
[13:22:51.192]   - Field: ‘earlySignal’
[13:22:51.192]   - Field: ‘lazy’
[13:22:51.192]   - Field: ‘state’
[13:22:51.193] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:51.193] - Launch lazy future ...
[13:22:51.193] Packages needed by the future expression (n = 0): <none>
[13:22:51.193] Packages needed by future strategies (n = 0): <none>
[13:22:51.194] {
[13:22:51.194]     {
[13:22:51.194]         {
[13:22:51.194]             ...future.startTime <- base::Sys.time()
[13:22:51.194]             {
[13:22:51.194]                 {
[13:22:51.194]                   {
[13:22:51.194]                     {
[13:22:51.194]                       base::local({
[13:22:51.194]                         has_future <- base::requireNamespace("future", 
[13:22:51.194]                           quietly = TRUE)
[13:22:51.194]                         if (has_future) {
[13:22:51.194]                           ns <- base::getNamespace("future")
[13:22:51.194]                           version <- ns[[".package"]][["version"]]
[13:22:51.194]                           if (is.null(version)) 
[13:22:51.194]                             version <- utils::packageVersion("future")
[13:22:51.194]                         }
[13:22:51.194]                         else {
[13:22:51.194]                           version <- NULL
[13:22:51.194]                         }
[13:22:51.194]                         if (!has_future || version < "1.8.0") {
[13:22:51.194]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.194]                             "", base::R.version$version.string), 
[13:22:51.194]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.194]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.194]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.194]                               "release", "version")], collapse = " "), 
[13:22:51.194]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.194]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.194]                             info)
[13:22:51.194]                           info <- base::paste(info, collapse = "; ")
[13:22:51.194]                           if (!has_future) {
[13:22:51.194]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.194]                               info)
[13:22:51.194]                           }
[13:22:51.194]                           else {
[13:22:51.194]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.194]                               info, version)
[13:22:51.194]                           }
[13:22:51.194]                           base::stop(msg)
[13:22:51.194]                         }
[13:22:51.194]                       })
[13:22:51.194]                     }
[13:22:51.194]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.194]                     base::options(mc.cores = 1L)
[13:22:51.194]                   }
[13:22:51.194]                   options(future.plan = NULL)
[13:22:51.194]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.194]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.194]                 }
[13:22:51.194]                 ...future.workdir <- getwd()
[13:22:51.194]             }
[13:22:51.194]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.194]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.194]         }
[13:22:51.194]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.194]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.194]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.194]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.194]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.194]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.194]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.194]             base::names(...future.oldOptions))
[13:22:51.194]     }
[13:22:51.194]     if (FALSE) {
[13:22:51.194]     }
[13:22:51.194]     else {
[13:22:51.194]         if (TRUE) {
[13:22:51.194]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.194]                 open = "w")
[13:22:51.194]         }
[13:22:51.194]         else {
[13:22:51.194]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.194]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.194]         }
[13:22:51.194]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.194]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.194]             base::sink(type = "output", split = FALSE)
[13:22:51.194]             base::close(...future.stdout)
[13:22:51.194]         }, add = TRUE)
[13:22:51.194]     }
[13:22:51.194]     ...future.frame <- base::sys.nframe()
[13:22:51.194]     ...future.conditions <- base::list()
[13:22:51.194]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.194]     if (FALSE) {
[13:22:51.194]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.194]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.194]     }
[13:22:51.194]     ...future.result <- base::tryCatch({
[13:22:51.194]         base::withCallingHandlers({
[13:22:51.194]             ...future.value <- base::withVisible(base::local({
[13:22:51.194]                 withCallingHandlers({
[13:22:51.194]                   {
[13:22:51.194]                     42
[13:22:51.194]                   }
[13:22:51.194]                 }, immediateCondition = function(cond) {
[13:22:51.194]                   save_rds <- function (object, pathname, ...) 
[13:22:51.194]                   {
[13:22:51.194]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:51.194]                     if (file_test("-f", pathname_tmp)) {
[13:22:51.194]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.194]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:51.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.194]                         fi_tmp[["mtime"]])
[13:22:51.194]                     }
[13:22:51.194]                     tryCatch({
[13:22:51.194]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:51.194]                     }, error = function(ex) {
[13:22:51.194]                       msg <- conditionMessage(ex)
[13:22:51.194]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.194]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:51.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.194]                         fi_tmp[["mtime"]], msg)
[13:22:51.194]                       ex$message <- msg
[13:22:51.194]                       stop(ex)
[13:22:51.194]                     })
[13:22:51.194]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:51.194]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:51.194]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:51.194]                       fi_tmp <- file.info(pathname_tmp)
[13:22:51.194]                       fi <- file.info(pathname)
[13:22:51.194]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:51.194]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:51.194]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:51.194]                         fi[["size"]], fi[["mtime"]])
[13:22:51.194]                       stop(msg)
[13:22:51.194]                     }
[13:22:51.194]                     invisible(pathname)
[13:22:51.194]                   }
[13:22:51.194]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:51.194]                     rootPath = tempdir()) 
[13:22:51.194]                   {
[13:22:51.194]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:51.194]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:51.194]                       tmpdir = path, fileext = ".rds")
[13:22:51.194]                     save_rds(obj, file)
[13:22:51.194]                   }
[13:22:51.194]                   saveImmediateCondition(cond, path = "/tmp/RtmpZrhdGa/.future/immediateConditions")
[13:22:51.194]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.194]                   {
[13:22:51.194]                     inherits <- base::inherits
[13:22:51.194]                     invokeRestart <- base::invokeRestart
[13:22:51.194]                     is.null <- base::is.null
[13:22:51.194]                     muffled <- FALSE
[13:22:51.194]                     if (inherits(cond, "message")) {
[13:22:51.194]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.194]                       if (muffled) 
[13:22:51.194]                         invokeRestart("muffleMessage")
[13:22:51.194]                     }
[13:22:51.194]                     else if (inherits(cond, "warning")) {
[13:22:51.194]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.194]                       if (muffled) 
[13:22:51.194]                         invokeRestart("muffleWarning")
[13:22:51.194]                     }
[13:22:51.194]                     else if (inherits(cond, "condition")) {
[13:22:51.194]                       if (!is.null(pattern)) {
[13:22:51.194]                         computeRestarts <- base::computeRestarts
[13:22:51.194]                         grepl <- base::grepl
[13:22:51.194]                         restarts <- computeRestarts(cond)
[13:22:51.194]                         for (restart in restarts) {
[13:22:51.194]                           name <- restart$name
[13:22:51.194]                           if (is.null(name)) 
[13:22:51.194]                             next
[13:22:51.194]                           if (!grepl(pattern, name)) 
[13:22:51.194]                             next
[13:22:51.194]                           invokeRestart(restart)
[13:22:51.194]                           muffled <- TRUE
[13:22:51.194]                           break
[13:22:51.194]                         }
[13:22:51.194]                       }
[13:22:51.194]                     }
[13:22:51.194]                     invisible(muffled)
[13:22:51.194]                   }
[13:22:51.194]                   muffleCondition(cond)
[13:22:51.194]                 })
[13:22:51.194]             }))
[13:22:51.194]             future::FutureResult(value = ...future.value$value, 
[13:22:51.194]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.194]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.194]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.194]                     ...future.globalenv.names))
[13:22:51.194]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.194]         }, condition = base::local({
[13:22:51.194]             c <- base::c
[13:22:51.194]             inherits <- base::inherits
[13:22:51.194]             invokeRestart <- base::invokeRestart
[13:22:51.194]             length <- base::length
[13:22:51.194]             list <- base::list
[13:22:51.194]             seq.int <- base::seq.int
[13:22:51.194]             signalCondition <- base::signalCondition
[13:22:51.194]             sys.calls <- base::sys.calls
[13:22:51.194]             `[[` <- base::`[[`
[13:22:51.194]             `+` <- base::`+`
[13:22:51.194]             `<<-` <- base::`<<-`
[13:22:51.194]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.194]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.194]                   3L)]
[13:22:51.194]             }
[13:22:51.194]             function(cond) {
[13:22:51.194]                 is_error <- inherits(cond, "error")
[13:22:51.194]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.194]                   NULL)
[13:22:51.194]                 if (is_error) {
[13:22:51.194]                   sessionInformation <- function() {
[13:22:51.194]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.194]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.194]                       search = base::search(), system = base::Sys.info())
[13:22:51.194]                   }
[13:22:51.194]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.194]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.194]                     cond$call), session = sessionInformation(), 
[13:22:51.194]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.194]                   signalCondition(cond)
[13:22:51.194]                 }
[13:22:51.194]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.194]                 "immediateCondition"))) {
[13:22:51.194]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.194]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.194]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.194]                   if (TRUE && !signal) {
[13:22:51.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.194]                     {
[13:22:51.194]                       inherits <- base::inherits
[13:22:51.194]                       invokeRestart <- base::invokeRestart
[13:22:51.194]                       is.null <- base::is.null
[13:22:51.194]                       muffled <- FALSE
[13:22:51.194]                       if (inherits(cond, "message")) {
[13:22:51.194]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.194]                         if (muffled) 
[13:22:51.194]                           invokeRestart("muffleMessage")
[13:22:51.194]                       }
[13:22:51.194]                       else if (inherits(cond, "warning")) {
[13:22:51.194]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.194]                         if (muffled) 
[13:22:51.194]                           invokeRestart("muffleWarning")
[13:22:51.194]                       }
[13:22:51.194]                       else if (inherits(cond, "condition")) {
[13:22:51.194]                         if (!is.null(pattern)) {
[13:22:51.194]                           computeRestarts <- base::computeRestarts
[13:22:51.194]                           grepl <- base::grepl
[13:22:51.194]                           restarts <- computeRestarts(cond)
[13:22:51.194]                           for (restart in restarts) {
[13:22:51.194]                             name <- restart$name
[13:22:51.194]                             if (is.null(name)) 
[13:22:51.194]                               next
[13:22:51.194]                             if (!grepl(pattern, name)) 
[13:22:51.194]                               next
[13:22:51.194]                             invokeRestart(restart)
[13:22:51.194]                             muffled <- TRUE
[13:22:51.194]                             break
[13:22:51.194]                           }
[13:22:51.194]                         }
[13:22:51.194]                       }
[13:22:51.194]                       invisible(muffled)
[13:22:51.194]                     }
[13:22:51.194]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.194]                   }
[13:22:51.194]                 }
[13:22:51.194]                 else {
[13:22:51.194]                   if (TRUE) {
[13:22:51.194]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.194]                     {
[13:22:51.194]                       inherits <- base::inherits
[13:22:51.194]                       invokeRestart <- base::invokeRestart
[13:22:51.194]                       is.null <- base::is.null
[13:22:51.194]                       muffled <- FALSE
[13:22:51.194]                       if (inherits(cond, "message")) {
[13:22:51.194]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.194]                         if (muffled) 
[13:22:51.194]                           invokeRestart("muffleMessage")
[13:22:51.194]                       }
[13:22:51.194]                       else if (inherits(cond, "warning")) {
[13:22:51.194]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.194]                         if (muffled) 
[13:22:51.194]                           invokeRestart("muffleWarning")
[13:22:51.194]                       }
[13:22:51.194]                       else if (inherits(cond, "condition")) {
[13:22:51.194]                         if (!is.null(pattern)) {
[13:22:51.194]                           computeRestarts <- base::computeRestarts
[13:22:51.194]                           grepl <- base::grepl
[13:22:51.194]                           restarts <- computeRestarts(cond)
[13:22:51.194]                           for (restart in restarts) {
[13:22:51.194]                             name <- restart$name
[13:22:51.194]                             if (is.null(name)) 
[13:22:51.194]                               next
[13:22:51.194]                             if (!grepl(pattern, name)) 
[13:22:51.194]                               next
[13:22:51.194]                             invokeRestart(restart)
[13:22:51.194]                             muffled <- TRUE
[13:22:51.194]                             break
[13:22:51.194]                           }
[13:22:51.194]                         }
[13:22:51.194]                       }
[13:22:51.194]                       invisible(muffled)
[13:22:51.194]                     }
[13:22:51.194]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.194]                   }
[13:22:51.194]                 }
[13:22:51.194]             }
[13:22:51.194]         }))
[13:22:51.194]     }, error = function(ex) {
[13:22:51.194]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.194]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.194]                 ...future.rng), started = ...future.startTime, 
[13:22:51.194]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.194]             version = "1.8"), class = "FutureResult")
[13:22:51.194]     }, finally = {
[13:22:51.194]         if (!identical(...future.workdir, getwd())) 
[13:22:51.194]             setwd(...future.workdir)
[13:22:51.194]         {
[13:22:51.194]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.194]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.194]             }
[13:22:51.194]             base::options(...future.oldOptions)
[13:22:51.194]             if (.Platform$OS.type == "windows") {
[13:22:51.194]                 old_names <- names(...future.oldEnvVars)
[13:22:51.194]                 envs <- base::Sys.getenv()
[13:22:51.194]                 names <- names(envs)
[13:22:51.194]                 common <- intersect(names, old_names)
[13:22:51.194]                 added <- setdiff(names, old_names)
[13:22:51.194]                 removed <- setdiff(old_names, names)
[13:22:51.194]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.194]                   envs[common]]
[13:22:51.194]                 NAMES <- toupper(changed)
[13:22:51.194]                 args <- list()
[13:22:51.194]                 for (kk in seq_along(NAMES)) {
[13:22:51.194]                   name <- changed[[kk]]
[13:22:51.194]                   NAME <- NAMES[[kk]]
[13:22:51.194]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.194]                     next
[13:22:51.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.194]                 }
[13:22:51.194]                 NAMES <- toupper(added)
[13:22:51.194]                 for (kk in seq_along(NAMES)) {
[13:22:51.194]                   name <- added[[kk]]
[13:22:51.194]                   NAME <- NAMES[[kk]]
[13:22:51.194]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.194]                     next
[13:22:51.194]                   args[[name]] <- ""
[13:22:51.194]                 }
[13:22:51.194]                 NAMES <- toupper(removed)
[13:22:51.194]                 for (kk in seq_along(NAMES)) {
[13:22:51.194]                   name <- removed[[kk]]
[13:22:51.194]                   NAME <- NAMES[[kk]]
[13:22:51.194]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.194]                     next
[13:22:51.194]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.194]                 }
[13:22:51.194]                 if (length(args) > 0) 
[13:22:51.194]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.194]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.194]             }
[13:22:51.194]             else {
[13:22:51.194]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.194]             }
[13:22:51.194]             {
[13:22:51.194]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.194]                   0L) {
[13:22:51.194]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.194]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.194]                   base::options(opts)
[13:22:51.194]                 }
[13:22:51.194]                 {
[13:22:51.194]                   {
[13:22:51.194]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.194]                     NULL
[13:22:51.194]                   }
[13:22:51.194]                   options(future.plan = NULL)
[13:22:51.194]                   if (is.na(NA_character_)) 
[13:22:51.194]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.194]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.194]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:51.194]                     envir = parent.frame()) 
[13:22:51.194]                   {
[13:22:51.194]                     default_workers <- missing(workers)
[13:22:51.194]                     if (is.function(workers)) 
[13:22:51.194]                       workers <- workers()
[13:22:51.194]                     workers <- structure(as.integer(workers), 
[13:22:51.194]                       class = class(workers))
[13:22:51.194]                     stop_if_not(is.finite(workers), workers >= 
[13:22:51.194]                       1L)
[13:22:51.194]                     if ((workers == 1L && !inherits(workers, 
[13:22:51.194]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:51.194]                       if (default_workers) 
[13:22:51.194]                         supportsMulticore(warn = TRUE)
[13:22:51.194]                       return(sequential(..., envir = envir))
[13:22:51.194]                     }
[13:22:51.194]                     oopts <- options(mc.cores = workers)
[13:22:51.194]                     on.exit(options(oopts))
[13:22:51.194]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:51.194]                       envir = envir)
[13:22:51.194]                     if (!future$lazy) 
[13:22:51.194]                       future <- run(future)
[13:22:51.194]                     invisible(future)
[13:22:51.194]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.194]                 }
[13:22:51.194]             }
[13:22:51.194]         }
[13:22:51.194]     })
[13:22:51.194]     if (TRUE) {
[13:22:51.194]         base::sink(type = "output", split = FALSE)
[13:22:51.194]         if (TRUE) {
[13:22:51.194]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.194]         }
[13:22:51.194]         else {
[13:22:51.194]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.194]         }
[13:22:51.194]         base::close(...future.stdout)
[13:22:51.194]         ...future.stdout <- NULL
[13:22:51.194]     }
[13:22:51.194]     ...future.result$conditions <- ...future.conditions
[13:22:51.194]     ...future.result$finished <- base::Sys.time()
[13:22:51.194]     ...future.result
[13:22:51.194] }
[13:22:51.196] requestCore(): workers = 2
[13:22:51.199] MulticoreFuture started
[13:22:51.199] - Launch lazy future ... done
[13:22:51.199] run() for ‘MulticoreFuture’ ... done
[13:22:51.200] plan(): Setting new future strategy stack:
MulticoreFuture:
Label: ‘strategy = multicore’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[13:22:51.200] List of future strategies:
[13:22:51.200] 1. sequential:
[13:22:51.200]    - args: function (..., envir = parent.frame())
[13:22:51.200]    - tweaked: FALSE
[13:22:51.200]    - call: NULL
[13:22:51.201] plan(): nbrOfWorkers() = 1
[13:22:51.203] plan(): Setting new future strategy stack:
[13:22:51.203] List of future strategies:
[13:22:51.203] 1. multicore:
[13:22:51.203]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:51.203]    - tweaked: FALSE
[13:22:51.203]    - call: plan(strategy)
[13:22:51.208] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.209] result() for MulticoreFuture ...
[13:22:51.210] result() for MulticoreFuture ...
[13:22:51.210] result() for MulticoreFuture ... done
[13:22:51.211] result() for MulticoreFuture ... done
[13:22:51.211] result() for MulticoreFuture ...
[13:22:51.211] result() for MulticoreFuture ... done
- plan('multicore') ... DONE
- plan('multisession') ...
[13:22:51.212] plan(): Setting new future strategy stack:
[13:22:51.212] List of future strategies:
[13:22:51.212] 1. multisession:
[13:22:51.212]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:51.212]    - tweaked: FALSE
[13:22:51.212]    - call: plan(strategy)
[13:22:51.212] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:51.213] multisession:
[13:22:51.213] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:51.213] - tweaked: FALSE
[13:22:51.213] - call: plan(strategy)
[13:22:51.220] getGlobalsAndPackages() ...
[13:22:51.220] Not searching for globals
[13:22:51.220] - globals: [0] <none>
[13:22:51.220] getGlobalsAndPackages() ... DONE
[13:22:51.221] [local output] makeClusterPSOCK() ...
[13:22:51.268] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:51.269] [local output] Base port: 11369
[13:22:51.269] [local output] Getting setup options for 2 cluster nodes ...
[13:22:51.270] [local output]  - Node 1 of 2 ...
[13:22:51.270] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:51.271] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZrhdGa/worker.rank=1.parallelly.parent=82928.143f0381a8146.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpZrhdGa/worker.rank=1.parallelly.parent=82928.143f0381a8146.pid")'’
[13:22:51.465] - Possible to infer worker's PID: TRUE
[13:22:51.465] [local output] Rscript port: 11369

[13:22:51.465] [local output]  - Node 2 of 2 ...
[13:22:51.466] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:51.466] [local output] Rscript port: 11369

[13:22:51.467] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:51.467] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:51.467] [local output] Setting up PSOCK nodes in parallel
[13:22:51.468] List of 36
[13:22:51.468]  $ worker          : chr "localhost"
[13:22:51.468]   ..- attr(*, "localhost")= logi TRUE
[13:22:51.468]  $ master          : chr "localhost"
[13:22:51.468]  $ port            : int 11369
[13:22:51.468]  $ connectTimeout  : num 120
[13:22:51.468]  $ timeout         : num 2592000
[13:22:51.468]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:51.468]  $ homogeneous     : logi TRUE
[13:22:51.468]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:51.468]  $ rscript_envs    : NULL
[13:22:51.468]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:51.468]  $ rscript_startup : NULL
[13:22:51.468]  $ rscript_sh      : chr "sh"
[13:22:51.468]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:51.468]  $ methods         : logi TRUE
[13:22:51.468]  $ socketOptions   : chr "no-delay"
[13:22:51.468]  $ useXDR          : logi FALSE
[13:22:51.468]  $ outfile         : chr "/dev/null"
[13:22:51.468]  $ renice          : int NA
[13:22:51.468]  $ rshcmd          : NULL
[13:22:51.468]  $ user            : chr(0) 
[13:22:51.468]  $ revtunnel       : logi FALSE
[13:22:51.468]  $ rshlogfile      : NULL
[13:22:51.468]  $ rshopts         : chr(0) 
[13:22:51.468]  $ rank            : int 1
[13:22:51.468]  $ manual          : logi FALSE
[13:22:51.468]  $ dryrun          : logi FALSE
[13:22:51.468]  $ quiet           : logi FALSE
[13:22:51.468]  $ setup_strategy  : chr "parallel"
[13:22:51.468]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:51.468]  $ pidfile         : chr "/tmp/RtmpZrhdGa/worker.rank=1.parallelly.parent=82928.143f0381a8146.pid"
[13:22:51.468]  $ rshcmd_label    : NULL
[13:22:51.468]  $ rsh_call        : NULL
[13:22:51.468]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:51.468]  $ localMachine    : logi TRUE
[13:22:51.468]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:51.468]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:51.468]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:51.468]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:51.468]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:51.468]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:51.468]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:51.468]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:51.468]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:51.468]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:51.468]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:51.468]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:51.468]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:51.468]  $ arguments       :List of 28
[13:22:51.468]   ..$ worker          : chr "localhost"
[13:22:51.468]   ..$ master          : NULL
[13:22:51.468]   ..$ port            : int 11369
[13:22:51.468]   ..$ connectTimeout  : num 120
[13:22:51.468]   ..$ timeout         : num 2592000
[13:22:51.468]   ..$ rscript         : NULL
[13:22:51.468]   ..$ homogeneous     : NULL
[13:22:51.468]   ..$ rscript_args    : NULL
[13:22:51.468]   ..$ rscript_envs    : NULL
[13:22:51.468]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:51.468]   ..$ rscript_startup : NULL
[13:22:51.468]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:51.468]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:51.468]   ..$ methods         : logi TRUE
[13:22:51.468]   ..$ socketOptions   : chr "no-delay"
[13:22:51.468]   ..$ useXDR          : logi FALSE
[13:22:51.468]   ..$ outfile         : chr "/dev/null"
[13:22:51.468]   ..$ renice          : int NA
[13:22:51.468]   ..$ rshcmd          : NULL
[13:22:51.468]   ..$ user            : NULL
[13:22:51.468]   ..$ revtunnel       : logi NA
[13:22:51.468]   ..$ rshlogfile      : NULL
[13:22:51.468]   ..$ rshopts         : NULL
[13:22:51.468]   ..$ rank            : int 1
[13:22:51.468]   ..$ manual          : logi FALSE
[13:22:51.468]   ..$ dryrun          : logi FALSE
[13:22:51.468]   ..$ quiet           : logi FALSE
[13:22:51.468]   ..$ setup_strategy  : chr "parallel"
[13:22:51.468]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:51.487] [local output] System call to launch all workers:
[13:22:51.487] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpZrhdGa/worker.rank=1.parallelly.parent=82928.143f0381a8146.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11369 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:51.487] [local output] Starting PSOCK main server
[13:22:51.493] [local output] Workers launched
[13:22:51.493] [local output] Waiting for workers to connect back
[13:22:51.493]  - [local output] 0 workers out of 2 ready
[13:22:51.744]  - [local output] 0 workers out of 2 ready
[13:22:51.745]  - [local output] 1 workers out of 2 ready
[13:22:51.745]  - [local output] 2 workers out of 2 ready
[13:22:51.745] [local output] Launching of workers completed
[13:22:51.745] [local output] Collecting session information from workers
[13:22:51.746] [local output]  - Worker #1 of 2
[13:22:51.747] [local output]  - Worker #2 of 2
[13:22:51.747] [local output] makeClusterPSOCK() ... done
[13:22:51.760] Packages needed by the future expression (n = 0): <none>
[13:22:51.760] Packages needed by future strategies (n = 0): <none>
[13:22:51.760] {
[13:22:51.760]     {
[13:22:51.760]         {
[13:22:51.760]             ...future.startTime <- base::Sys.time()
[13:22:51.760]             {
[13:22:51.760]                 {
[13:22:51.760]                   {
[13:22:51.760]                     {
[13:22:51.760]                       base::local({
[13:22:51.760]                         has_future <- base::requireNamespace("future", 
[13:22:51.760]                           quietly = TRUE)
[13:22:51.760]                         if (has_future) {
[13:22:51.760]                           ns <- base::getNamespace("future")
[13:22:51.760]                           version <- ns[[".package"]][["version"]]
[13:22:51.760]                           if (is.null(version)) 
[13:22:51.760]                             version <- utils::packageVersion("future")
[13:22:51.760]                         }
[13:22:51.760]                         else {
[13:22:51.760]                           version <- NULL
[13:22:51.760]                         }
[13:22:51.760]                         if (!has_future || version < "1.8.0") {
[13:22:51.760]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.760]                             "", base::R.version$version.string), 
[13:22:51.760]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.760]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.760]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.760]                               "release", "version")], collapse = " "), 
[13:22:51.760]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.760]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.760]                             info)
[13:22:51.760]                           info <- base::paste(info, collapse = "; ")
[13:22:51.760]                           if (!has_future) {
[13:22:51.760]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.760]                               info)
[13:22:51.760]                           }
[13:22:51.760]                           else {
[13:22:51.760]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.760]                               info, version)
[13:22:51.760]                           }
[13:22:51.760]                           base::stop(msg)
[13:22:51.760]                         }
[13:22:51.760]                       })
[13:22:51.760]                     }
[13:22:51.760]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.760]                     base::options(mc.cores = 1L)
[13:22:51.760]                   }
[13:22:51.760]                   options(future.plan = NULL)
[13:22:51.760]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.760]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.760]                 }
[13:22:51.760]                 ...future.workdir <- getwd()
[13:22:51.760]             }
[13:22:51.760]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.760]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.760]         }
[13:22:51.760]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.760]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.760]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.760]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.760]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.760]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.760]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.760]             base::names(...future.oldOptions))
[13:22:51.760]     }
[13:22:51.760]     if (FALSE) {
[13:22:51.760]     }
[13:22:51.760]     else {
[13:22:51.760]         if (TRUE) {
[13:22:51.760]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.760]                 open = "w")
[13:22:51.760]         }
[13:22:51.760]         else {
[13:22:51.760]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.760]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.760]         }
[13:22:51.760]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.760]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.760]             base::sink(type = "output", split = FALSE)
[13:22:51.760]             base::close(...future.stdout)
[13:22:51.760]         }, add = TRUE)
[13:22:51.760]     }
[13:22:51.760]     ...future.frame <- base::sys.nframe()
[13:22:51.760]     ...future.conditions <- base::list()
[13:22:51.760]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.760]     if (FALSE) {
[13:22:51.760]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.760]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.760]     }
[13:22:51.760]     ...future.result <- base::tryCatch({
[13:22:51.760]         base::withCallingHandlers({
[13:22:51.760]             ...future.value <- base::withVisible(base::local({
[13:22:51.760]                 ...future.makeSendCondition <- base::local({
[13:22:51.760]                   sendCondition <- NULL
[13:22:51.760]                   function(frame = 1L) {
[13:22:51.760]                     if (is.function(sendCondition)) 
[13:22:51.760]                       return(sendCondition)
[13:22:51.760]                     ns <- getNamespace("parallel")
[13:22:51.760]                     if (exists("sendData", mode = "function", 
[13:22:51.760]                       envir = ns)) {
[13:22:51.760]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:51.760]                         envir = ns)
[13:22:51.760]                       envir <- sys.frame(frame)
[13:22:51.760]                       master <- NULL
[13:22:51.760]                       while (!identical(envir, .GlobalEnv) && 
[13:22:51.760]                         !identical(envir, emptyenv())) {
[13:22:51.760]                         if (exists("master", mode = "list", envir = envir, 
[13:22:51.760]                           inherits = FALSE)) {
[13:22:51.760]                           master <- get("master", mode = "list", 
[13:22:51.760]                             envir = envir, inherits = FALSE)
[13:22:51.760]                           if (inherits(master, c("SOCKnode", 
[13:22:51.760]                             "SOCK0node"))) {
[13:22:51.760]                             sendCondition <<- function(cond) {
[13:22:51.760]                               data <- list(type = "VALUE", value = cond, 
[13:22:51.760]                                 success = TRUE)
[13:22:51.760]                               parallel_sendData(master, data)
[13:22:51.760]                             }
[13:22:51.760]                             return(sendCondition)
[13:22:51.760]                           }
[13:22:51.760]                         }
[13:22:51.760]                         frame <- frame + 1L
[13:22:51.760]                         envir <- sys.frame(frame)
[13:22:51.760]                       }
[13:22:51.760]                     }
[13:22:51.760]                     sendCondition <<- function(cond) NULL
[13:22:51.760]                   }
[13:22:51.760]                 })
[13:22:51.760]                 withCallingHandlers({
[13:22:51.760]                   NA
[13:22:51.760]                 }, immediateCondition = function(cond) {
[13:22:51.760]                   sendCondition <- ...future.makeSendCondition()
[13:22:51.760]                   sendCondition(cond)
[13:22:51.760]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.760]                   {
[13:22:51.760]                     inherits <- base::inherits
[13:22:51.760]                     invokeRestart <- base::invokeRestart
[13:22:51.760]                     is.null <- base::is.null
[13:22:51.760]                     muffled <- FALSE
[13:22:51.760]                     if (inherits(cond, "message")) {
[13:22:51.760]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.760]                       if (muffled) 
[13:22:51.760]                         invokeRestart("muffleMessage")
[13:22:51.760]                     }
[13:22:51.760]                     else if (inherits(cond, "warning")) {
[13:22:51.760]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.760]                       if (muffled) 
[13:22:51.760]                         invokeRestart("muffleWarning")
[13:22:51.760]                     }
[13:22:51.760]                     else if (inherits(cond, "condition")) {
[13:22:51.760]                       if (!is.null(pattern)) {
[13:22:51.760]                         computeRestarts <- base::computeRestarts
[13:22:51.760]                         grepl <- base::grepl
[13:22:51.760]                         restarts <- computeRestarts(cond)
[13:22:51.760]                         for (restart in restarts) {
[13:22:51.760]                           name <- restart$name
[13:22:51.760]                           if (is.null(name)) 
[13:22:51.760]                             next
[13:22:51.760]                           if (!grepl(pattern, name)) 
[13:22:51.760]                             next
[13:22:51.760]                           invokeRestart(restart)
[13:22:51.760]                           muffled <- TRUE
[13:22:51.760]                           break
[13:22:51.760]                         }
[13:22:51.760]                       }
[13:22:51.760]                     }
[13:22:51.760]                     invisible(muffled)
[13:22:51.760]                   }
[13:22:51.760]                   muffleCondition(cond)
[13:22:51.760]                 })
[13:22:51.760]             }))
[13:22:51.760]             future::FutureResult(value = ...future.value$value, 
[13:22:51.760]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.760]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.760]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.760]                     ...future.globalenv.names))
[13:22:51.760]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.760]         }, condition = base::local({
[13:22:51.760]             c <- base::c
[13:22:51.760]             inherits <- base::inherits
[13:22:51.760]             invokeRestart <- base::invokeRestart
[13:22:51.760]             length <- base::length
[13:22:51.760]             list <- base::list
[13:22:51.760]             seq.int <- base::seq.int
[13:22:51.760]             signalCondition <- base::signalCondition
[13:22:51.760]             sys.calls <- base::sys.calls
[13:22:51.760]             `[[` <- base::`[[`
[13:22:51.760]             `+` <- base::`+`
[13:22:51.760]             `<<-` <- base::`<<-`
[13:22:51.760]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.760]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.760]                   3L)]
[13:22:51.760]             }
[13:22:51.760]             function(cond) {
[13:22:51.760]                 is_error <- inherits(cond, "error")
[13:22:51.760]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.760]                   NULL)
[13:22:51.760]                 if (is_error) {
[13:22:51.760]                   sessionInformation <- function() {
[13:22:51.760]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.760]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.760]                       search = base::search(), system = base::Sys.info())
[13:22:51.760]                   }
[13:22:51.760]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.760]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.760]                     cond$call), session = sessionInformation(), 
[13:22:51.760]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.760]                   signalCondition(cond)
[13:22:51.760]                 }
[13:22:51.760]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.760]                 "immediateCondition"))) {
[13:22:51.760]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.760]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.760]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.760]                   if (TRUE && !signal) {
[13:22:51.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.760]                     {
[13:22:51.760]                       inherits <- base::inherits
[13:22:51.760]                       invokeRestart <- base::invokeRestart
[13:22:51.760]                       is.null <- base::is.null
[13:22:51.760]                       muffled <- FALSE
[13:22:51.760]                       if (inherits(cond, "message")) {
[13:22:51.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.760]                         if (muffled) 
[13:22:51.760]                           invokeRestart("muffleMessage")
[13:22:51.760]                       }
[13:22:51.760]                       else if (inherits(cond, "warning")) {
[13:22:51.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.760]                         if (muffled) 
[13:22:51.760]                           invokeRestart("muffleWarning")
[13:22:51.760]                       }
[13:22:51.760]                       else if (inherits(cond, "condition")) {
[13:22:51.760]                         if (!is.null(pattern)) {
[13:22:51.760]                           computeRestarts <- base::computeRestarts
[13:22:51.760]                           grepl <- base::grepl
[13:22:51.760]                           restarts <- computeRestarts(cond)
[13:22:51.760]                           for (restart in restarts) {
[13:22:51.760]                             name <- restart$name
[13:22:51.760]                             if (is.null(name)) 
[13:22:51.760]                               next
[13:22:51.760]                             if (!grepl(pattern, name)) 
[13:22:51.760]                               next
[13:22:51.760]                             invokeRestart(restart)
[13:22:51.760]                             muffled <- TRUE
[13:22:51.760]                             break
[13:22:51.760]                           }
[13:22:51.760]                         }
[13:22:51.760]                       }
[13:22:51.760]                       invisible(muffled)
[13:22:51.760]                     }
[13:22:51.760]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.760]                   }
[13:22:51.760]                 }
[13:22:51.760]                 else {
[13:22:51.760]                   if (TRUE) {
[13:22:51.760]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.760]                     {
[13:22:51.760]                       inherits <- base::inherits
[13:22:51.760]                       invokeRestart <- base::invokeRestart
[13:22:51.760]                       is.null <- base::is.null
[13:22:51.760]                       muffled <- FALSE
[13:22:51.760]                       if (inherits(cond, "message")) {
[13:22:51.760]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.760]                         if (muffled) 
[13:22:51.760]                           invokeRestart("muffleMessage")
[13:22:51.760]                       }
[13:22:51.760]                       else if (inherits(cond, "warning")) {
[13:22:51.760]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.760]                         if (muffled) 
[13:22:51.760]                           invokeRestart("muffleWarning")
[13:22:51.760]                       }
[13:22:51.760]                       else if (inherits(cond, "condition")) {
[13:22:51.760]                         if (!is.null(pattern)) {
[13:22:51.760]                           computeRestarts <- base::computeRestarts
[13:22:51.760]                           grepl <- base::grepl
[13:22:51.760]                           restarts <- computeRestarts(cond)
[13:22:51.760]                           for (restart in restarts) {
[13:22:51.760]                             name <- restart$name
[13:22:51.760]                             if (is.null(name)) 
[13:22:51.760]                               next
[13:22:51.760]                             if (!grepl(pattern, name)) 
[13:22:51.760]                               next
[13:22:51.760]                             invokeRestart(restart)
[13:22:51.760]                             muffled <- TRUE
[13:22:51.760]                             break
[13:22:51.760]                           }
[13:22:51.760]                         }
[13:22:51.760]                       }
[13:22:51.760]                       invisible(muffled)
[13:22:51.760]                     }
[13:22:51.760]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.760]                   }
[13:22:51.760]                 }
[13:22:51.760]             }
[13:22:51.760]         }))
[13:22:51.760]     }, error = function(ex) {
[13:22:51.760]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.760]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.760]                 ...future.rng), started = ...future.startTime, 
[13:22:51.760]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.760]             version = "1.8"), class = "FutureResult")
[13:22:51.760]     }, finally = {
[13:22:51.760]         if (!identical(...future.workdir, getwd())) 
[13:22:51.760]             setwd(...future.workdir)
[13:22:51.760]         {
[13:22:51.760]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.760]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.760]             }
[13:22:51.760]             base::options(...future.oldOptions)
[13:22:51.760]             if (.Platform$OS.type == "windows") {
[13:22:51.760]                 old_names <- names(...future.oldEnvVars)
[13:22:51.760]                 envs <- base::Sys.getenv()
[13:22:51.760]                 names <- names(envs)
[13:22:51.760]                 common <- intersect(names, old_names)
[13:22:51.760]                 added <- setdiff(names, old_names)
[13:22:51.760]                 removed <- setdiff(old_names, names)
[13:22:51.760]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.760]                   envs[common]]
[13:22:51.760]                 NAMES <- toupper(changed)
[13:22:51.760]                 args <- list()
[13:22:51.760]                 for (kk in seq_along(NAMES)) {
[13:22:51.760]                   name <- changed[[kk]]
[13:22:51.760]                   NAME <- NAMES[[kk]]
[13:22:51.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.760]                     next
[13:22:51.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.760]                 }
[13:22:51.760]                 NAMES <- toupper(added)
[13:22:51.760]                 for (kk in seq_along(NAMES)) {
[13:22:51.760]                   name <- added[[kk]]
[13:22:51.760]                   NAME <- NAMES[[kk]]
[13:22:51.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.760]                     next
[13:22:51.760]                   args[[name]] <- ""
[13:22:51.760]                 }
[13:22:51.760]                 NAMES <- toupper(removed)
[13:22:51.760]                 for (kk in seq_along(NAMES)) {
[13:22:51.760]                   name <- removed[[kk]]
[13:22:51.760]                   NAME <- NAMES[[kk]]
[13:22:51.760]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.760]                     next
[13:22:51.760]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.760]                 }
[13:22:51.760]                 if (length(args) > 0) 
[13:22:51.760]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.760]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.760]             }
[13:22:51.760]             else {
[13:22:51.760]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.760]             }
[13:22:51.760]             {
[13:22:51.760]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.760]                   0L) {
[13:22:51.760]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.760]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.760]                   base::options(opts)
[13:22:51.760]                 }
[13:22:51.760]                 {
[13:22:51.760]                   {
[13:22:51.760]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.760]                     NULL
[13:22:51.760]                   }
[13:22:51.760]                   options(future.plan = NULL)
[13:22:51.760]                   if (is.na(NA_character_)) 
[13:22:51.760]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.760]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.760]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:51.760]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:51.760]                     envir = parent.frame()) 
[13:22:51.760]                   {
[13:22:51.760]                     if (is.function(workers)) 
[13:22:51.760]                       workers <- workers()
[13:22:51.760]                     workers <- structure(as.integer(workers), 
[13:22:51.760]                       class = class(workers))
[13:22:51.760]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:51.760]                       workers >= 1)
[13:22:51.760]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:51.760]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:51.760]                     }
[13:22:51.760]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:51.760]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:51.760]                       envir = envir)
[13:22:51.760]                     if (!future$lazy) 
[13:22:51.760]                       future <- run(future)
[13:22:51.760]                     invisible(future)
[13:22:51.760]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.760]                 }
[13:22:51.760]             }
[13:22:51.760]         }
[13:22:51.760]     })
[13:22:51.760]     if (TRUE) {
[13:22:51.760]         base::sink(type = "output", split = FALSE)
[13:22:51.760]         if (TRUE) {
[13:22:51.760]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.760]         }
[13:22:51.760]         else {
[13:22:51.760]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.760]         }
[13:22:51.760]         base::close(...future.stdout)
[13:22:51.760]         ...future.stdout <- NULL
[13:22:51.760]     }
[13:22:51.760]     ...future.result$conditions <- ...future.conditions
[13:22:51.760]     ...future.result$finished <- base::Sys.time()
[13:22:51.760]     ...future.result
[13:22:51.760] }
[13:22:51.817] MultisessionFuture started
[13:22:51.817] result() for ClusterFuture ...
[13:22:51.818] receiveMessageFromWorker() for ClusterFuture ...
[13:22:51.818] - Validating connection of MultisessionFuture
[13:22:51.863] - received message: FutureResult
[13:22:51.863] - Received FutureResult
[13:22:51.863] - Erased future from FutureRegistry
[13:22:51.864] result() for ClusterFuture ...
[13:22:51.864] - result already collected: FutureResult
[13:22:51.864] result() for ClusterFuture ... done
[13:22:51.864] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:51.864] result() for ClusterFuture ... done
[13:22:51.864] result() for ClusterFuture ...
[13:22:51.864] - result already collected: FutureResult
[13:22:51.864] result() for ClusterFuture ... done
[13:22:51.865] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:51.869] plan(): nbrOfWorkers() = 2
[13:22:51.872] getGlobalsAndPackages() ...
[13:22:51.872] 
[13:22:51.873] - globals: [0] <none>
[13:22:51.873] getGlobalsAndPackages() ... DONE
[13:22:51.884] Packages needed by the future expression (n = 0): <none>
[13:22:51.884] Packages needed by future strategies (n = 0): <none>
[13:22:51.885] {
[13:22:51.885]     {
[13:22:51.885]         {
[13:22:51.885]             ...future.startTime <- base::Sys.time()
[13:22:51.885]             {
[13:22:51.885]                 {
[13:22:51.885]                   {
[13:22:51.885]                     {
[13:22:51.885]                       base::local({
[13:22:51.885]                         has_future <- base::requireNamespace("future", 
[13:22:51.885]                           quietly = TRUE)
[13:22:51.885]                         if (has_future) {
[13:22:51.885]                           ns <- base::getNamespace("future")
[13:22:51.885]                           version <- ns[[".package"]][["version"]]
[13:22:51.885]                           if (is.null(version)) 
[13:22:51.885]                             version <- utils::packageVersion("future")
[13:22:51.885]                         }
[13:22:51.885]                         else {
[13:22:51.885]                           version <- NULL
[13:22:51.885]                         }
[13:22:51.885]                         if (!has_future || version < "1.8.0") {
[13:22:51.885]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.885]                             "", base::R.version$version.string), 
[13:22:51.885]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.885]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.885]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.885]                               "release", "version")], collapse = " "), 
[13:22:51.885]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.885]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.885]                             info)
[13:22:51.885]                           info <- base::paste(info, collapse = "; ")
[13:22:51.885]                           if (!has_future) {
[13:22:51.885]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.885]                               info)
[13:22:51.885]                           }
[13:22:51.885]                           else {
[13:22:51.885]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.885]                               info, version)
[13:22:51.885]                           }
[13:22:51.885]                           base::stop(msg)
[13:22:51.885]                         }
[13:22:51.885]                       })
[13:22:51.885]                     }
[13:22:51.885]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.885]                     base::options(mc.cores = 1L)
[13:22:51.885]                   }
[13:22:51.885]                   options(future.plan = NULL)
[13:22:51.885]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.885]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.885]                 }
[13:22:51.885]                 ...future.workdir <- getwd()
[13:22:51.885]             }
[13:22:51.885]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.885]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.885]         }
[13:22:51.885]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.885]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.885]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.885]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.885]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.885]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.885]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.885]             base::names(...future.oldOptions))
[13:22:51.885]     }
[13:22:51.885]     if (FALSE) {
[13:22:51.885]     }
[13:22:51.885]     else {
[13:22:51.885]         if (TRUE) {
[13:22:51.885]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.885]                 open = "w")
[13:22:51.885]         }
[13:22:51.885]         else {
[13:22:51.885]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.885]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.885]         }
[13:22:51.885]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.885]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.885]             base::sink(type = "output", split = FALSE)
[13:22:51.885]             base::close(...future.stdout)
[13:22:51.885]         }, add = TRUE)
[13:22:51.885]     }
[13:22:51.885]     ...future.frame <- base::sys.nframe()
[13:22:51.885]     ...future.conditions <- base::list()
[13:22:51.885]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.885]     if (FALSE) {
[13:22:51.885]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.885]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.885]     }
[13:22:51.885]     ...future.result <- base::tryCatch({
[13:22:51.885]         base::withCallingHandlers({
[13:22:51.885]             ...future.value <- base::withVisible(base::local({
[13:22:51.885]                 ...future.makeSendCondition <- base::local({
[13:22:51.885]                   sendCondition <- NULL
[13:22:51.885]                   function(frame = 1L) {
[13:22:51.885]                     if (is.function(sendCondition)) 
[13:22:51.885]                       return(sendCondition)
[13:22:51.885]                     ns <- getNamespace("parallel")
[13:22:51.885]                     if (exists("sendData", mode = "function", 
[13:22:51.885]                       envir = ns)) {
[13:22:51.885]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:51.885]                         envir = ns)
[13:22:51.885]                       envir <- sys.frame(frame)
[13:22:51.885]                       master <- NULL
[13:22:51.885]                       while (!identical(envir, .GlobalEnv) && 
[13:22:51.885]                         !identical(envir, emptyenv())) {
[13:22:51.885]                         if (exists("master", mode = "list", envir = envir, 
[13:22:51.885]                           inherits = FALSE)) {
[13:22:51.885]                           master <- get("master", mode = "list", 
[13:22:51.885]                             envir = envir, inherits = FALSE)
[13:22:51.885]                           if (inherits(master, c("SOCKnode", 
[13:22:51.885]                             "SOCK0node"))) {
[13:22:51.885]                             sendCondition <<- function(cond) {
[13:22:51.885]                               data <- list(type = "VALUE", value = cond, 
[13:22:51.885]                                 success = TRUE)
[13:22:51.885]                               parallel_sendData(master, data)
[13:22:51.885]                             }
[13:22:51.885]                             return(sendCondition)
[13:22:51.885]                           }
[13:22:51.885]                         }
[13:22:51.885]                         frame <- frame + 1L
[13:22:51.885]                         envir <- sys.frame(frame)
[13:22:51.885]                       }
[13:22:51.885]                     }
[13:22:51.885]                     sendCondition <<- function(cond) NULL
[13:22:51.885]                   }
[13:22:51.885]                 })
[13:22:51.885]                 withCallingHandlers({
[13:22:51.885]                   42
[13:22:51.885]                 }, immediateCondition = function(cond) {
[13:22:51.885]                   sendCondition <- ...future.makeSendCondition()
[13:22:51.885]                   sendCondition(cond)
[13:22:51.885]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.885]                   {
[13:22:51.885]                     inherits <- base::inherits
[13:22:51.885]                     invokeRestart <- base::invokeRestart
[13:22:51.885]                     is.null <- base::is.null
[13:22:51.885]                     muffled <- FALSE
[13:22:51.885]                     if (inherits(cond, "message")) {
[13:22:51.885]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.885]                       if (muffled) 
[13:22:51.885]                         invokeRestart("muffleMessage")
[13:22:51.885]                     }
[13:22:51.885]                     else if (inherits(cond, "warning")) {
[13:22:51.885]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.885]                       if (muffled) 
[13:22:51.885]                         invokeRestart("muffleWarning")
[13:22:51.885]                     }
[13:22:51.885]                     else if (inherits(cond, "condition")) {
[13:22:51.885]                       if (!is.null(pattern)) {
[13:22:51.885]                         computeRestarts <- base::computeRestarts
[13:22:51.885]                         grepl <- base::grepl
[13:22:51.885]                         restarts <- computeRestarts(cond)
[13:22:51.885]                         for (restart in restarts) {
[13:22:51.885]                           name <- restart$name
[13:22:51.885]                           if (is.null(name)) 
[13:22:51.885]                             next
[13:22:51.885]                           if (!grepl(pattern, name)) 
[13:22:51.885]                             next
[13:22:51.885]                           invokeRestart(restart)
[13:22:51.885]                           muffled <- TRUE
[13:22:51.885]                           break
[13:22:51.885]                         }
[13:22:51.885]                       }
[13:22:51.885]                     }
[13:22:51.885]                     invisible(muffled)
[13:22:51.885]                   }
[13:22:51.885]                   muffleCondition(cond)
[13:22:51.885]                 })
[13:22:51.885]             }))
[13:22:51.885]             future::FutureResult(value = ...future.value$value, 
[13:22:51.885]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.885]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.885]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.885]                     ...future.globalenv.names))
[13:22:51.885]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.885]         }, condition = base::local({
[13:22:51.885]             c <- base::c
[13:22:51.885]             inherits <- base::inherits
[13:22:51.885]             invokeRestart <- base::invokeRestart
[13:22:51.885]             length <- base::length
[13:22:51.885]             list <- base::list
[13:22:51.885]             seq.int <- base::seq.int
[13:22:51.885]             signalCondition <- base::signalCondition
[13:22:51.885]             sys.calls <- base::sys.calls
[13:22:51.885]             `[[` <- base::`[[`
[13:22:51.885]             `+` <- base::`+`
[13:22:51.885]             `<<-` <- base::`<<-`
[13:22:51.885]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.885]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.885]                   3L)]
[13:22:51.885]             }
[13:22:51.885]             function(cond) {
[13:22:51.885]                 is_error <- inherits(cond, "error")
[13:22:51.885]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.885]                   NULL)
[13:22:51.885]                 if (is_error) {
[13:22:51.885]                   sessionInformation <- function() {
[13:22:51.885]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.885]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.885]                       search = base::search(), system = base::Sys.info())
[13:22:51.885]                   }
[13:22:51.885]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.885]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.885]                     cond$call), session = sessionInformation(), 
[13:22:51.885]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.885]                   signalCondition(cond)
[13:22:51.885]                 }
[13:22:51.885]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.885]                 "immediateCondition"))) {
[13:22:51.885]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.885]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.885]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.885]                   if (TRUE && !signal) {
[13:22:51.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.885]                     {
[13:22:51.885]                       inherits <- base::inherits
[13:22:51.885]                       invokeRestart <- base::invokeRestart
[13:22:51.885]                       is.null <- base::is.null
[13:22:51.885]                       muffled <- FALSE
[13:22:51.885]                       if (inherits(cond, "message")) {
[13:22:51.885]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.885]                         if (muffled) 
[13:22:51.885]                           invokeRestart("muffleMessage")
[13:22:51.885]                       }
[13:22:51.885]                       else if (inherits(cond, "warning")) {
[13:22:51.885]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.885]                         if (muffled) 
[13:22:51.885]                           invokeRestart("muffleWarning")
[13:22:51.885]                       }
[13:22:51.885]                       else if (inherits(cond, "condition")) {
[13:22:51.885]                         if (!is.null(pattern)) {
[13:22:51.885]                           computeRestarts <- base::computeRestarts
[13:22:51.885]                           grepl <- base::grepl
[13:22:51.885]                           restarts <- computeRestarts(cond)
[13:22:51.885]                           for (restart in restarts) {
[13:22:51.885]                             name <- restart$name
[13:22:51.885]                             if (is.null(name)) 
[13:22:51.885]                               next
[13:22:51.885]                             if (!grepl(pattern, name)) 
[13:22:51.885]                               next
[13:22:51.885]                             invokeRestart(restart)
[13:22:51.885]                             muffled <- TRUE
[13:22:51.885]                             break
[13:22:51.885]                           }
[13:22:51.885]                         }
[13:22:51.885]                       }
[13:22:51.885]                       invisible(muffled)
[13:22:51.885]                     }
[13:22:51.885]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.885]                   }
[13:22:51.885]                 }
[13:22:51.885]                 else {
[13:22:51.885]                   if (TRUE) {
[13:22:51.885]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.885]                     {
[13:22:51.885]                       inherits <- base::inherits
[13:22:51.885]                       invokeRestart <- base::invokeRestart
[13:22:51.885]                       is.null <- base::is.null
[13:22:51.885]                       muffled <- FALSE
[13:22:51.885]                       if (inherits(cond, "message")) {
[13:22:51.885]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.885]                         if (muffled) 
[13:22:51.885]                           invokeRestart("muffleMessage")
[13:22:51.885]                       }
[13:22:51.885]                       else if (inherits(cond, "warning")) {
[13:22:51.885]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.885]                         if (muffled) 
[13:22:51.885]                           invokeRestart("muffleWarning")
[13:22:51.885]                       }
[13:22:51.885]                       else if (inherits(cond, "condition")) {
[13:22:51.885]                         if (!is.null(pattern)) {
[13:22:51.885]                           computeRestarts <- base::computeRestarts
[13:22:51.885]                           grepl <- base::grepl
[13:22:51.885]                           restarts <- computeRestarts(cond)
[13:22:51.885]                           for (restart in restarts) {
[13:22:51.885]                             name <- restart$name
[13:22:51.885]                             if (is.null(name)) 
[13:22:51.885]                               next
[13:22:51.885]                             if (!grepl(pattern, name)) 
[13:22:51.885]                               next
[13:22:51.885]                             invokeRestart(restart)
[13:22:51.885]                             muffled <- TRUE
[13:22:51.885]                             break
[13:22:51.885]                           }
[13:22:51.885]                         }
[13:22:51.885]                       }
[13:22:51.885]                       invisible(muffled)
[13:22:51.885]                     }
[13:22:51.885]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.885]                   }
[13:22:51.885]                 }
[13:22:51.885]             }
[13:22:51.885]         }))
[13:22:51.885]     }, error = function(ex) {
[13:22:51.885]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.885]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.885]                 ...future.rng), started = ...future.startTime, 
[13:22:51.885]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.885]             version = "1.8"), class = "FutureResult")
[13:22:51.885]     }, finally = {
[13:22:51.885]         if (!identical(...future.workdir, getwd())) 
[13:22:51.885]             setwd(...future.workdir)
[13:22:51.885]         {
[13:22:51.885]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.885]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.885]             }
[13:22:51.885]             base::options(...future.oldOptions)
[13:22:51.885]             if (.Platform$OS.type == "windows") {
[13:22:51.885]                 old_names <- names(...future.oldEnvVars)
[13:22:51.885]                 envs <- base::Sys.getenv()
[13:22:51.885]                 names <- names(envs)
[13:22:51.885]                 common <- intersect(names, old_names)
[13:22:51.885]                 added <- setdiff(names, old_names)
[13:22:51.885]                 removed <- setdiff(old_names, names)
[13:22:51.885]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.885]                   envs[common]]
[13:22:51.885]                 NAMES <- toupper(changed)
[13:22:51.885]                 args <- list()
[13:22:51.885]                 for (kk in seq_along(NAMES)) {
[13:22:51.885]                   name <- changed[[kk]]
[13:22:51.885]                   NAME <- NAMES[[kk]]
[13:22:51.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.885]                     next
[13:22:51.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.885]                 }
[13:22:51.885]                 NAMES <- toupper(added)
[13:22:51.885]                 for (kk in seq_along(NAMES)) {
[13:22:51.885]                   name <- added[[kk]]
[13:22:51.885]                   NAME <- NAMES[[kk]]
[13:22:51.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.885]                     next
[13:22:51.885]                   args[[name]] <- ""
[13:22:51.885]                 }
[13:22:51.885]                 NAMES <- toupper(removed)
[13:22:51.885]                 for (kk in seq_along(NAMES)) {
[13:22:51.885]                   name <- removed[[kk]]
[13:22:51.885]                   NAME <- NAMES[[kk]]
[13:22:51.885]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.885]                     next
[13:22:51.885]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.885]                 }
[13:22:51.885]                 if (length(args) > 0) 
[13:22:51.885]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.885]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.885]             }
[13:22:51.885]             else {
[13:22:51.885]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.885]             }
[13:22:51.885]             {
[13:22:51.885]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.885]                   0L) {
[13:22:51.885]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.885]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.885]                   base::options(opts)
[13:22:51.885]                 }
[13:22:51.885]                 {
[13:22:51.885]                   {
[13:22:51.885]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.885]                     NULL
[13:22:51.885]                   }
[13:22:51.885]                   options(future.plan = NULL)
[13:22:51.885]                   if (is.na(NA_character_)) 
[13:22:51.885]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.885]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.885]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:51.885]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:51.885]                     envir = parent.frame()) 
[13:22:51.885]                   {
[13:22:51.885]                     if (is.function(workers)) 
[13:22:51.885]                       workers <- workers()
[13:22:51.885]                     workers <- structure(as.integer(workers), 
[13:22:51.885]                       class = class(workers))
[13:22:51.885]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:51.885]                       workers >= 1)
[13:22:51.885]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:51.885]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:51.885]                     }
[13:22:51.885]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:51.885]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:51.885]                       envir = envir)
[13:22:51.885]                     if (!future$lazy) 
[13:22:51.885]                       future <- run(future)
[13:22:51.885]                     invisible(future)
[13:22:51.885]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.885]                 }
[13:22:51.885]             }
[13:22:51.885]         }
[13:22:51.885]     })
[13:22:51.885]     if (TRUE) {
[13:22:51.885]         base::sink(type = "output", split = FALSE)
[13:22:51.885]         if (TRUE) {
[13:22:51.885]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.885]         }
[13:22:51.885]         else {
[13:22:51.885]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.885]         }
[13:22:51.885]         base::close(...future.stdout)
[13:22:51.885]         ...future.stdout <- NULL
[13:22:51.885]     }
[13:22:51.885]     ...future.result$conditions <- ...future.conditions
[13:22:51.885]     ...future.result$finished <- base::Sys.time()
[13:22:51.885]     ...future.result
[13:22:51.885] }
[13:22:51.888] MultisessionFuture started
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.900] result() for ClusterFuture ...
[13:22:51.900] receiveMessageFromWorker() for ClusterFuture ...
[13:22:51.900] - Validating connection of MultisessionFuture
[13:22:51.937] - received message: FutureResult
[13:22:51.937] - Received FutureResult
[13:22:51.937] - Erased future from FutureRegistry
[13:22:51.938] result() for ClusterFuture ...
[13:22:51.938] - result already collected: FutureResult
[13:22:51.938] result() for ClusterFuture ... done
[13:22:51.938] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:51.938] result() for ClusterFuture ... done
[13:22:51.938] result() for ClusterFuture ...
[13:22:51.938] - result already collected: FutureResult
[13:22:51.938] result() for ClusterFuture ... done
[13:22:51.939] getGlobalsAndPackages() ...
[13:22:51.939] Searching for globals...
[13:22:51.939] 
[13:22:51.939] Searching for globals ... DONE
[13:22:51.939] - globals: [0] <none>
[13:22:51.939] getGlobalsAndPackages() ... DONE
[13:22:51.940] run() for ‘Future’ ...
[13:22:51.940] - state: ‘created’
[13:22:51.940] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:51.955] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.955] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:51.955]   - Field: ‘node’
[13:22:51.955]   - Field: ‘label’
[13:22:51.955]   - Field: ‘local’
[13:22:51.955]   - Field: ‘owner’
[13:22:51.955]   - Field: ‘envir’
[13:22:51.956]   - Field: ‘workers’
[13:22:51.956]   - Field: ‘packages’
[13:22:51.956]   - Field: ‘gc’
[13:22:51.956]   - Field: ‘conditions’
[13:22:51.956]   - Field: ‘persistent’
[13:22:51.956]   - Field: ‘expr’
[13:22:51.956]   - Field: ‘uuid’
[13:22:51.956]   - Field: ‘seed’
[13:22:51.957]   - Field: ‘version’
[13:22:51.957]   - Field: ‘result’
[13:22:51.957]   - Field: ‘asynchronous’
[13:22:51.957]   - Field: ‘calls’
[13:22:51.957]   - Field: ‘globals’
[13:22:51.957]   - Field: ‘stdout’
[13:22:51.957]   - Field: ‘earlySignal’
[13:22:51.957]   - Field: ‘lazy’
[13:22:51.958]   - Field: ‘state’
[13:22:51.958] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:51.958] - Launch lazy future ...
[13:22:51.958] Packages needed by the future expression (n = 0): <none>
[13:22:51.958] Packages needed by future strategies (n = 0): <none>
[13:22:51.959] {
[13:22:51.959]     {
[13:22:51.959]         {
[13:22:51.959]             ...future.startTime <- base::Sys.time()
[13:22:51.959]             {
[13:22:51.959]                 {
[13:22:51.959]                   {
[13:22:51.959]                     {
[13:22:51.959]                       base::local({
[13:22:51.959]                         has_future <- base::requireNamespace("future", 
[13:22:51.959]                           quietly = TRUE)
[13:22:51.959]                         if (has_future) {
[13:22:51.959]                           ns <- base::getNamespace("future")
[13:22:51.959]                           version <- ns[[".package"]][["version"]]
[13:22:51.959]                           if (is.null(version)) 
[13:22:51.959]                             version <- utils::packageVersion("future")
[13:22:51.959]                         }
[13:22:51.959]                         else {
[13:22:51.959]                           version <- NULL
[13:22:51.959]                         }
[13:22:51.959]                         if (!has_future || version < "1.8.0") {
[13:22:51.959]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:51.959]                             "", base::R.version$version.string), 
[13:22:51.959]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:51.959]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:51.959]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:51.959]                               "release", "version")], collapse = " "), 
[13:22:51.959]                             hostname = base::Sys.info()[["nodename"]])
[13:22:51.959]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:51.959]                             info)
[13:22:51.959]                           info <- base::paste(info, collapse = "; ")
[13:22:51.959]                           if (!has_future) {
[13:22:51.959]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:51.959]                               info)
[13:22:51.959]                           }
[13:22:51.959]                           else {
[13:22:51.959]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:51.959]                               info, version)
[13:22:51.959]                           }
[13:22:51.959]                           base::stop(msg)
[13:22:51.959]                         }
[13:22:51.959]                       })
[13:22:51.959]                     }
[13:22:51.959]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:51.959]                     base::options(mc.cores = 1L)
[13:22:51.959]                   }
[13:22:51.959]                   options(future.plan = NULL)
[13:22:51.959]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.959]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:51.959]                 }
[13:22:51.959]                 ...future.workdir <- getwd()
[13:22:51.959]             }
[13:22:51.959]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:51.959]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:51.959]         }
[13:22:51.959]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:51.959]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:51.959]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:51.959]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:51.959]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:51.959]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:51.959]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:51.959]             base::names(...future.oldOptions))
[13:22:51.959]     }
[13:22:51.959]     if (FALSE) {
[13:22:51.959]     }
[13:22:51.959]     else {
[13:22:51.959]         if (TRUE) {
[13:22:51.959]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:51.959]                 open = "w")
[13:22:51.959]         }
[13:22:51.959]         else {
[13:22:51.959]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:51.959]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:51.959]         }
[13:22:51.959]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:51.959]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:51.959]             base::sink(type = "output", split = FALSE)
[13:22:51.959]             base::close(...future.stdout)
[13:22:51.959]         }, add = TRUE)
[13:22:51.959]     }
[13:22:51.959]     ...future.frame <- base::sys.nframe()
[13:22:51.959]     ...future.conditions <- base::list()
[13:22:51.959]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:51.959]     if (FALSE) {
[13:22:51.959]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:51.959]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:51.959]     }
[13:22:51.959]     ...future.result <- base::tryCatch({
[13:22:51.959]         base::withCallingHandlers({
[13:22:51.959]             ...future.value <- base::withVisible(base::local({
[13:22:51.959]                 ...future.makeSendCondition <- base::local({
[13:22:51.959]                   sendCondition <- NULL
[13:22:51.959]                   function(frame = 1L) {
[13:22:51.959]                     if (is.function(sendCondition)) 
[13:22:51.959]                       return(sendCondition)
[13:22:51.959]                     ns <- getNamespace("parallel")
[13:22:51.959]                     if (exists("sendData", mode = "function", 
[13:22:51.959]                       envir = ns)) {
[13:22:51.959]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:51.959]                         envir = ns)
[13:22:51.959]                       envir <- sys.frame(frame)
[13:22:51.959]                       master <- NULL
[13:22:51.959]                       while (!identical(envir, .GlobalEnv) && 
[13:22:51.959]                         !identical(envir, emptyenv())) {
[13:22:51.959]                         if (exists("master", mode = "list", envir = envir, 
[13:22:51.959]                           inherits = FALSE)) {
[13:22:51.959]                           master <- get("master", mode = "list", 
[13:22:51.959]                             envir = envir, inherits = FALSE)
[13:22:51.959]                           if (inherits(master, c("SOCKnode", 
[13:22:51.959]                             "SOCK0node"))) {
[13:22:51.959]                             sendCondition <<- function(cond) {
[13:22:51.959]                               data <- list(type = "VALUE", value = cond, 
[13:22:51.959]                                 success = TRUE)
[13:22:51.959]                               parallel_sendData(master, data)
[13:22:51.959]                             }
[13:22:51.959]                             return(sendCondition)
[13:22:51.959]                           }
[13:22:51.959]                         }
[13:22:51.959]                         frame <- frame + 1L
[13:22:51.959]                         envir <- sys.frame(frame)
[13:22:51.959]                       }
[13:22:51.959]                     }
[13:22:51.959]                     sendCondition <<- function(cond) NULL
[13:22:51.959]                   }
[13:22:51.959]                 })
[13:22:51.959]                 withCallingHandlers({
[13:22:51.959]                   42
[13:22:51.959]                 }, immediateCondition = function(cond) {
[13:22:51.959]                   sendCondition <- ...future.makeSendCondition()
[13:22:51.959]                   sendCondition(cond)
[13:22:51.959]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.959]                   {
[13:22:51.959]                     inherits <- base::inherits
[13:22:51.959]                     invokeRestart <- base::invokeRestart
[13:22:51.959]                     is.null <- base::is.null
[13:22:51.959]                     muffled <- FALSE
[13:22:51.959]                     if (inherits(cond, "message")) {
[13:22:51.959]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:51.959]                       if (muffled) 
[13:22:51.959]                         invokeRestart("muffleMessage")
[13:22:51.959]                     }
[13:22:51.959]                     else if (inherits(cond, "warning")) {
[13:22:51.959]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:51.959]                       if (muffled) 
[13:22:51.959]                         invokeRestart("muffleWarning")
[13:22:51.959]                     }
[13:22:51.959]                     else if (inherits(cond, "condition")) {
[13:22:51.959]                       if (!is.null(pattern)) {
[13:22:51.959]                         computeRestarts <- base::computeRestarts
[13:22:51.959]                         grepl <- base::grepl
[13:22:51.959]                         restarts <- computeRestarts(cond)
[13:22:51.959]                         for (restart in restarts) {
[13:22:51.959]                           name <- restart$name
[13:22:51.959]                           if (is.null(name)) 
[13:22:51.959]                             next
[13:22:51.959]                           if (!grepl(pattern, name)) 
[13:22:51.959]                             next
[13:22:51.959]                           invokeRestart(restart)
[13:22:51.959]                           muffled <- TRUE
[13:22:51.959]                           break
[13:22:51.959]                         }
[13:22:51.959]                       }
[13:22:51.959]                     }
[13:22:51.959]                     invisible(muffled)
[13:22:51.959]                   }
[13:22:51.959]                   muffleCondition(cond)
[13:22:51.959]                 })
[13:22:51.959]             }))
[13:22:51.959]             future::FutureResult(value = ...future.value$value, 
[13:22:51.959]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.959]                   ...future.rng), globalenv = if (FALSE) 
[13:22:51.959]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:51.959]                     ...future.globalenv.names))
[13:22:51.959]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:51.959]         }, condition = base::local({
[13:22:51.959]             c <- base::c
[13:22:51.959]             inherits <- base::inherits
[13:22:51.959]             invokeRestart <- base::invokeRestart
[13:22:51.959]             length <- base::length
[13:22:51.959]             list <- base::list
[13:22:51.959]             seq.int <- base::seq.int
[13:22:51.959]             signalCondition <- base::signalCondition
[13:22:51.959]             sys.calls <- base::sys.calls
[13:22:51.959]             `[[` <- base::`[[`
[13:22:51.959]             `+` <- base::`+`
[13:22:51.959]             `<<-` <- base::`<<-`
[13:22:51.959]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:51.959]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:51.959]                   3L)]
[13:22:51.959]             }
[13:22:51.959]             function(cond) {
[13:22:51.959]                 is_error <- inherits(cond, "error")
[13:22:51.959]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:51.959]                   NULL)
[13:22:51.959]                 if (is_error) {
[13:22:51.959]                   sessionInformation <- function() {
[13:22:51.959]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:51.959]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:51.959]                       search = base::search(), system = base::Sys.info())
[13:22:51.959]                   }
[13:22:51.959]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.959]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:51.959]                     cond$call), session = sessionInformation(), 
[13:22:51.959]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:51.959]                   signalCondition(cond)
[13:22:51.959]                 }
[13:22:51.959]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:51.959]                 "immediateCondition"))) {
[13:22:51.959]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:51.959]                   ...future.conditions[[length(...future.conditions) + 
[13:22:51.959]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:51.959]                   if (TRUE && !signal) {
[13:22:51.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.959]                     {
[13:22:51.959]                       inherits <- base::inherits
[13:22:51.959]                       invokeRestart <- base::invokeRestart
[13:22:51.959]                       is.null <- base::is.null
[13:22:51.959]                       muffled <- FALSE
[13:22:51.959]                       if (inherits(cond, "message")) {
[13:22:51.959]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.959]                         if (muffled) 
[13:22:51.959]                           invokeRestart("muffleMessage")
[13:22:51.959]                       }
[13:22:51.959]                       else if (inherits(cond, "warning")) {
[13:22:51.959]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.959]                         if (muffled) 
[13:22:51.959]                           invokeRestart("muffleWarning")
[13:22:51.959]                       }
[13:22:51.959]                       else if (inherits(cond, "condition")) {
[13:22:51.959]                         if (!is.null(pattern)) {
[13:22:51.959]                           computeRestarts <- base::computeRestarts
[13:22:51.959]                           grepl <- base::grepl
[13:22:51.959]                           restarts <- computeRestarts(cond)
[13:22:51.959]                           for (restart in restarts) {
[13:22:51.959]                             name <- restart$name
[13:22:51.959]                             if (is.null(name)) 
[13:22:51.959]                               next
[13:22:51.959]                             if (!grepl(pattern, name)) 
[13:22:51.959]                               next
[13:22:51.959]                             invokeRestart(restart)
[13:22:51.959]                             muffled <- TRUE
[13:22:51.959]                             break
[13:22:51.959]                           }
[13:22:51.959]                         }
[13:22:51.959]                       }
[13:22:51.959]                       invisible(muffled)
[13:22:51.959]                     }
[13:22:51.959]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.959]                   }
[13:22:51.959]                 }
[13:22:51.959]                 else {
[13:22:51.959]                   if (TRUE) {
[13:22:51.959]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:51.959]                     {
[13:22:51.959]                       inherits <- base::inherits
[13:22:51.959]                       invokeRestart <- base::invokeRestart
[13:22:51.959]                       is.null <- base::is.null
[13:22:51.959]                       muffled <- FALSE
[13:22:51.959]                       if (inherits(cond, "message")) {
[13:22:51.959]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:51.959]                         if (muffled) 
[13:22:51.959]                           invokeRestart("muffleMessage")
[13:22:51.959]                       }
[13:22:51.959]                       else if (inherits(cond, "warning")) {
[13:22:51.959]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:51.959]                         if (muffled) 
[13:22:51.959]                           invokeRestart("muffleWarning")
[13:22:51.959]                       }
[13:22:51.959]                       else if (inherits(cond, "condition")) {
[13:22:51.959]                         if (!is.null(pattern)) {
[13:22:51.959]                           computeRestarts <- base::computeRestarts
[13:22:51.959]                           grepl <- base::grepl
[13:22:51.959]                           restarts <- computeRestarts(cond)
[13:22:51.959]                           for (restart in restarts) {
[13:22:51.959]                             name <- restart$name
[13:22:51.959]                             if (is.null(name)) 
[13:22:51.959]                               next
[13:22:51.959]                             if (!grepl(pattern, name)) 
[13:22:51.959]                               next
[13:22:51.959]                             invokeRestart(restart)
[13:22:51.959]                             muffled <- TRUE
[13:22:51.959]                             break
[13:22:51.959]                           }
[13:22:51.959]                         }
[13:22:51.959]                       }
[13:22:51.959]                       invisible(muffled)
[13:22:51.959]                     }
[13:22:51.959]                     muffleCondition(cond, pattern = "^muffle")
[13:22:51.959]                   }
[13:22:51.959]                 }
[13:22:51.959]             }
[13:22:51.959]         }))
[13:22:51.959]     }, error = function(ex) {
[13:22:51.959]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:51.959]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:51.959]                 ...future.rng), started = ...future.startTime, 
[13:22:51.959]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:51.959]             version = "1.8"), class = "FutureResult")
[13:22:51.959]     }, finally = {
[13:22:51.959]         if (!identical(...future.workdir, getwd())) 
[13:22:51.959]             setwd(...future.workdir)
[13:22:51.959]         {
[13:22:51.959]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:51.959]                 ...future.oldOptions$nwarnings <- NULL
[13:22:51.959]             }
[13:22:51.959]             base::options(...future.oldOptions)
[13:22:51.959]             if (.Platform$OS.type == "windows") {
[13:22:51.959]                 old_names <- names(...future.oldEnvVars)
[13:22:51.959]                 envs <- base::Sys.getenv()
[13:22:51.959]                 names <- names(envs)
[13:22:51.959]                 common <- intersect(names, old_names)
[13:22:51.959]                 added <- setdiff(names, old_names)
[13:22:51.959]                 removed <- setdiff(old_names, names)
[13:22:51.959]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:51.959]                   envs[common]]
[13:22:51.959]                 NAMES <- toupper(changed)
[13:22:51.959]                 args <- list()
[13:22:51.959]                 for (kk in seq_along(NAMES)) {
[13:22:51.959]                   name <- changed[[kk]]
[13:22:51.959]                   NAME <- NAMES[[kk]]
[13:22:51.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.959]                     next
[13:22:51.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.959]                 }
[13:22:51.959]                 NAMES <- toupper(added)
[13:22:51.959]                 for (kk in seq_along(NAMES)) {
[13:22:51.959]                   name <- added[[kk]]
[13:22:51.959]                   NAME <- NAMES[[kk]]
[13:22:51.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.959]                     next
[13:22:51.959]                   args[[name]] <- ""
[13:22:51.959]                 }
[13:22:51.959]                 NAMES <- toupper(removed)
[13:22:51.959]                 for (kk in seq_along(NAMES)) {
[13:22:51.959]                   name <- removed[[kk]]
[13:22:51.959]                   NAME <- NAMES[[kk]]
[13:22:51.959]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:51.959]                     next
[13:22:51.959]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:51.959]                 }
[13:22:51.959]                 if (length(args) > 0) 
[13:22:51.959]                   base::do.call(base::Sys.setenv, args = args)
[13:22:51.959]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:51.959]             }
[13:22:51.959]             else {
[13:22:51.959]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:51.959]             }
[13:22:51.959]             {
[13:22:51.959]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:51.959]                   0L) {
[13:22:51.959]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:51.959]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:51.959]                   base::options(opts)
[13:22:51.959]                 }
[13:22:51.959]                 {
[13:22:51.959]                   {
[13:22:51.959]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:51.959]                     NULL
[13:22:51.959]                   }
[13:22:51.959]                   options(future.plan = NULL)
[13:22:51.959]                   if (is.na(NA_character_)) 
[13:22:51.959]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:51.959]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:51.959]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:51.959]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:51.959]                     envir = parent.frame()) 
[13:22:51.959]                   {
[13:22:51.959]                     if (is.function(workers)) 
[13:22:51.959]                       workers <- workers()
[13:22:51.959]                     workers <- structure(as.integer(workers), 
[13:22:51.959]                       class = class(workers))
[13:22:51.959]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:51.959]                       workers >= 1)
[13:22:51.959]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:51.959]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:51.959]                     }
[13:22:51.959]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:51.959]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:51.959]                       envir = envir)
[13:22:51.959]                     if (!future$lazy) 
[13:22:51.959]                       future <- run(future)
[13:22:51.959]                     invisible(future)
[13:22:51.959]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:51.959]                 }
[13:22:51.959]             }
[13:22:51.959]         }
[13:22:51.959]     })
[13:22:51.959]     if (TRUE) {
[13:22:51.959]         base::sink(type = "output", split = FALSE)
[13:22:51.959]         if (TRUE) {
[13:22:51.959]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:51.959]         }
[13:22:51.959]         else {
[13:22:51.959]             ...future.result["stdout"] <- base::list(NULL)
[13:22:51.959]         }
[13:22:51.959]         base::close(...future.stdout)
[13:22:51.959]         ...future.stdout <- NULL
[13:22:51.959]     }
[13:22:51.959]     ...future.result$conditions <- ...future.conditions
[13:22:51.959]     ...future.result$finished <- base::Sys.time()
[13:22:51.959]     ...future.result
[13:22:51.959] }
[13:22:51.962] MultisessionFuture started
[13:22:51.963] - Launch lazy future ... done
[13:22:51.963] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:51.974] result() for ClusterFuture ...
[13:22:51.974] receiveMessageFromWorker() for ClusterFuture ...
[13:22:51.974] - Validating connection of MultisessionFuture
[13:22:52.009] - received message: FutureResult
[13:22:52.009] - Received FutureResult
[13:22:52.010] - Erased future from FutureRegistry
[13:22:52.010] result() for ClusterFuture ...
[13:22:52.010] - result already collected: FutureResult
[13:22:52.010] result() for ClusterFuture ... done
[13:22:52.010] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:52.010] result() for ClusterFuture ... done
[13:22:52.010] result() for ClusterFuture ...
[13:22:52.010] - result already collected: FutureResult
[13:22:52.010] result() for ClusterFuture ... done
[13:22:52.011] getGlobalsAndPackages() ...
[13:22:52.011] Searching for globals...
[13:22:52.012] - globals found: [1] ‘{’
[13:22:52.012] Searching for globals ... DONE
[13:22:52.012] Resolving globals: FALSE
[13:22:52.013] 
[13:22:52.013] 
[13:22:52.013] getGlobalsAndPackages() ... DONE
[13:22:52.013] run() for ‘Future’ ...
[13:22:52.013] - state: ‘created’
[13:22:52.013] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:52.028] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.028] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:52.028]   - Field: ‘node’
[13:22:52.028]   - Field: ‘label’
[13:22:52.029]   - Field: ‘local’
[13:22:52.029]   - Field: ‘owner’
[13:22:52.029]   - Field: ‘envir’
[13:22:52.029]   - Field: ‘workers’
[13:22:52.029]   - Field: ‘packages’
[13:22:52.029]   - Field: ‘gc’
[13:22:52.029]   - Field: ‘conditions’
[13:22:52.029]   - Field: ‘persistent’
[13:22:52.029]   - Field: ‘expr’
[13:22:52.029]   - Field: ‘uuid’
[13:22:52.030]   - Field: ‘seed’
[13:22:52.030]   - Field: ‘version’
[13:22:52.030]   - Field: ‘result’
[13:22:52.030]   - Field: ‘asynchronous’
[13:22:52.030]   - Field: ‘calls’
[13:22:52.030]   - Field: ‘globals’
[13:22:52.030]   - Field: ‘stdout’
[13:22:52.030]   - Field: ‘earlySignal’
[13:22:52.031]   - Field: ‘lazy’
[13:22:52.031]   - Field: ‘state’
[13:22:52.031] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:52.031] - Launch lazy future ...
[13:22:52.031] Packages needed by the future expression (n = 0): <none>
[13:22:52.031] Packages needed by future strategies (n = 0): <none>
[13:22:52.032] {
[13:22:52.032]     {
[13:22:52.032]         {
[13:22:52.032]             ...future.startTime <- base::Sys.time()
[13:22:52.032]             {
[13:22:52.032]                 {
[13:22:52.032]                   {
[13:22:52.032]                     {
[13:22:52.032]                       base::local({
[13:22:52.032]                         has_future <- base::requireNamespace("future", 
[13:22:52.032]                           quietly = TRUE)
[13:22:52.032]                         if (has_future) {
[13:22:52.032]                           ns <- base::getNamespace("future")
[13:22:52.032]                           version <- ns[[".package"]][["version"]]
[13:22:52.032]                           if (is.null(version)) 
[13:22:52.032]                             version <- utils::packageVersion("future")
[13:22:52.032]                         }
[13:22:52.032]                         else {
[13:22:52.032]                           version <- NULL
[13:22:52.032]                         }
[13:22:52.032]                         if (!has_future || version < "1.8.0") {
[13:22:52.032]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:52.032]                             "", base::R.version$version.string), 
[13:22:52.032]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:52.032]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:52.032]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:52.032]                               "release", "version")], collapse = " "), 
[13:22:52.032]                             hostname = base::Sys.info()[["nodename"]])
[13:22:52.032]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:52.032]                             info)
[13:22:52.032]                           info <- base::paste(info, collapse = "; ")
[13:22:52.032]                           if (!has_future) {
[13:22:52.032]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:52.032]                               info)
[13:22:52.032]                           }
[13:22:52.032]                           else {
[13:22:52.032]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:52.032]                               info, version)
[13:22:52.032]                           }
[13:22:52.032]                           base::stop(msg)
[13:22:52.032]                         }
[13:22:52.032]                       })
[13:22:52.032]                     }
[13:22:52.032]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:52.032]                     base::options(mc.cores = 1L)
[13:22:52.032]                   }
[13:22:52.032]                   options(future.plan = NULL)
[13:22:52.032]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.032]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:52.032]                 }
[13:22:52.032]                 ...future.workdir <- getwd()
[13:22:52.032]             }
[13:22:52.032]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:52.032]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:52.032]         }
[13:22:52.032]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:52.032]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:52.032]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:52.032]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:52.032]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:52.032]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:52.032]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:52.032]             base::names(...future.oldOptions))
[13:22:52.032]     }
[13:22:52.032]     if (FALSE) {
[13:22:52.032]     }
[13:22:52.032]     else {
[13:22:52.032]         if (TRUE) {
[13:22:52.032]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:52.032]                 open = "w")
[13:22:52.032]         }
[13:22:52.032]         else {
[13:22:52.032]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:52.032]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:52.032]         }
[13:22:52.032]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:52.032]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:52.032]             base::sink(type = "output", split = FALSE)
[13:22:52.032]             base::close(...future.stdout)
[13:22:52.032]         }, add = TRUE)
[13:22:52.032]     }
[13:22:52.032]     ...future.frame <- base::sys.nframe()
[13:22:52.032]     ...future.conditions <- base::list()
[13:22:52.032]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:52.032]     if (FALSE) {
[13:22:52.032]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:52.032]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:52.032]     }
[13:22:52.032]     ...future.result <- base::tryCatch({
[13:22:52.032]         base::withCallingHandlers({
[13:22:52.032]             ...future.value <- base::withVisible(base::local({
[13:22:52.032]                 ...future.makeSendCondition <- base::local({
[13:22:52.032]                   sendCondition <- NULL
[13:22:52.032]                   function(frame = 1L) {
[13:22:52.032]                     if (is.function(sendCondition)) 
[13:22:52.032]                       return(sendCondition)
[13:22:52.032]                     ns <- getNamespace("parallel")
[13:22:52.032]                     if (exists("sendData", mode = "function", 
[13:22:52.032]                       envir = ns)) {
[13:22:52.032]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:52.032]                         envir = ns)
[13:22:52.032]                       envir <- sys.frame(frame)
[13:22:52.032]                       master <- NULL
[13:22:52.032]                       while (!identical(envir, .GlobalEnv) && 
[13:22:52.032]                         !identical(envir, emptyenv())) {
[13:22:52.032]                         if (exists("master", mode = "list", envir = envir, 
[13:22:52.032]                           inherits = FALSE)) {
[13:22:52.032]                           master <- get("master", mode = "list", 
[13:22:52.032]                             envir = envir, inherits = FALSE)
[13:22:52.032]                           if (inherits(master, c("SOCKnode", 
[13:22:52.032]                             "SOCK0node"))) {
[13:22:52.032]                             sendCondition <<- function(cond) {
[13:22:52.032]                               data <- list(type = "VALUE", value = cond, 
[13:22:52.032]                                 success = TRUE)
[13:22:52.032]                               parallel_sendData(master, data)
[13:22:52.032]                             }
[13:22:52.032]                             return(sendCondition)
[13:22:52.032]                           }
[13:22:52.032]                         }
[13:22:52.032]                         frame <- frame + 1L
[13:22:52.032]                         envir <- sys.frame(frame)
[13:22:52.032]                       }
[13:22:52.032]                     }
[13:22:52.032]                     sendCondition <<- function(cond) NULL
[13:22:52.032]                   }
[13:22:52.032]                 })
[13:22:52.032]                 withCallingHandlers({
[13:22:52.032]                   {
[13:22:52.032]                     42
[13:22:52.032]                   }
[13:22:52.032]                 }, immediateCondition = function(cond) {
[13:22:52.032]                   sendCondition <- ...future.makeSendCondition()
[13:22:52.032]                   sendCondition(cond)
[13:22:52.032]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.032]                   {
[13:22:52.032]                     inherits <- base::inherits
[13:22:52.032]                     invokeRestart <- base::invokeRestart
[13:22:52.032]                     is.null <- base::is.null
[13:22:52.032]                     muffled <- FALSE
[13:22:52.032]                     if (inherits(cond, "message")) {
[13:22:52.032]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:52.032]                       if (muffled) 
[13:22:52.032]                         invokeRestart("muffleMessage")
[13:22:52.032]                     }
[13:22:52.032]                     else if (inherits(cond, "warning")) {
[13:22:52.032]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:52.032]                       if (muffled) 
[13:22:52.032]                         invokeRestart("muffleWarning")
[13:22:52.032]                     }
[13:22:52.032]                     else if (inherits(cond, "condition")) {
[13:22:52.032]                       if (!is.null(pattern)) {
[13:22:52.032]                         computeRestarts <- base::computeRestarts
[13:22:52.032]                         grepl <- base::grepl
[13:22:52.032]                         restarts <- computeRestarts(cond)
[13:22:52.032]                         for (restart in restarts) {
[13:22:52.032]                           name <- restart$name
[13:22:52.032]                           if (is.null(name)) 
[13:22:52.032]                             next
[13:22:52.032]                           if (!grepl(pattern, name)) 
[13:22:52.032]                             next
[13:22:52.032]                           invokeRestart(restart)
[13:22:52.032]                           muffled <- TRUE
[13:22:52.032]                           break
[13:22:52.032]                         }
[13:22:52.032]                       }
[13:22:52.032]                     }
[13:22:52.032]                     invisible(muffled)
[13:22:52.032]                   }
[13:22:52.032]                   muffleCondition(cond)
[13:22:52.032]                 })
[13:22:52.032]             }))
[13:22:52.032]             future::FutureResult(value = ...future.value$value, 
[13:22:52.032]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.032]                   ...future.rng), globalenv = if (FALSE) 
[13:22:52.032]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:52.032]                     ...future.globalenv.names))
[13:22:52.032]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:52.032]         }, condition = base::local({
[13:22:52.032]             c <- base::c
[13:22:52.032]             inherits <- base::inherits
[13:22:52.032]             invokeRestart <- base::invokeRestart
[13:22:52.032]             length <- base::length
[13:22:52.032]             list <- base::list
[13:22:52.032]             seq.int <- base::seq.int
[13:22:52.032]             signalCondition <- base::signalCondition
[13:22:52.032]             sys.calls <- base::sys.calls
[13:22:52.032]             `[[` <- base::`[[`
[13:22:52.032]             `+` <- base::`+`
[13:22:52.032]             `<<-` <- base::`<<-`
[13:22:52.032]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:52.032]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:52.032]                   3L)]
[13:22:52.032]             }
[13:22:52.032]             function(cond) {
[13:22:52.032]                 is_error <- inherits(cond, "error")
[13:22:52.032]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:52.032]                   NULL)
[13:22:52.032]                 if (is_error) {
[13:22:52.032]                   sessionInformation <- function() {
[13:22:52.032]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:52.032]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:52.032]                       search = base::search(), system = base::Sys.info())
[13:22:52.032]                   }
[13:22:52.032]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.032]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:52.032]                     cond$call), session = sessionInformation(), 
[13:22:52.032]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:52.032]                   signalCondition(cond)
[13:22:52.032]                 }
[13:22:52.032]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:52.032]                 "immediateCondition"))) {
[13:22:52.032]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:52.032]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.032]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:52.032]                   if (TRUE && !signal) {
[13:22:52.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.032]                     {
[13:22:52.032]                       inherits <- base::inherits
[13:22:52.032]                       invokeRestart <- base::invokeRestart
[13:22:52.032]                       is.null <- base::is.null
[13:22:52.032]                       muffled <- FALSE
[13:22:52.032]                       if (inherits(cond, "message")) {
[13:22:52.032]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.032]                         if (muffled) 
[13:22:52.032]                           invokeRestart("muffleMessage")
[13:22:52.032]                       }
[13:22:52.032]                       else if (inherits(cond, "warning")) {
[13:22:52.032]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.032]                         if (muffled) 
[13:22:52.032]                           invokeRestart("muffleWarning")
[13:22:52.032]                       }
[13:22:52.032]                       else if (inherits(cond, "condition")) {
[13:22:52.032]                         if (!is.null(pattern)) {
[13:22:52.032]                           computeRestarts <- base::computeRestarts
[13:22:52.032]                           grepl <- base::grepl
[13:22:52.032]                           restarts <- computeRestarts(cond)
[13:22:52.032]                           for (restart in restarts) {
[13:22:52.032]                             name <- restart$name
[13:22:52.032]                             if (is.null(name)) 
[13:22:52.032]                               next
[13:22:52.032]                             if (!grepl(pattern, name)) 
[13:22:52.032]                               next
[13:22:52.032]                             invokeRestart(restart)
[13:22:52.032]                             muffled <- TRUE
[13:22:52.032]                             break
[13:22:52.032]                           }
[13:22:52.032]                         }
[13:22:52.032]                       }
[13:22:52.032]                       invisible(muffled)
[13:22:52.032]                     }
[13:22:52.032]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.032]                   }
[13:22:52.032]                 }
[13:22:52.032]                 else {
[13:22:52.032]                   if (TRUE) {
[13:22:52.032]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.032]                     {
[13:22:52.032]                       inherits <- base::inherits
[13:22:52.032]                       invokeRestart <- base::invokeRestart
[13:22:52.032]                       is.null <- base::is.null
[13:22:52.032]                       muffled <- FALSE
[13:22:52.032]                       if (inherits(cond, "message")) {
[13:22:52.032]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.032]                         if (muffled) 
[13:22:52.032]                           invokeRestart("muffleMessage")
[13:22:52.032]                       }
[13:22:52.032]                       else if (inherits(cond, "warning")) {
[13:22:52.032]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.032]                         if (muffled) 
[13:22:52.032]                           invokeRestart("muffleWarning")
[13:22:52.032]                       }
[13:22:52.032]                       else if (inherits(cond, "condition")) {
[13:22:52.032]                         if (!is.null(pattern)) {
[13:22:52.032]                           computeRestarts <- base::computeRestarts
[13:22:52.032]                           grepl <- base::grepl
[13:22:52.032]                           restarts <- computeRestarts(cond)
[13:22:52.032]                           for (restart in restarts) {
[13:22:52.032]                             name <- restart$name
[13:22:52.032]                             if (is.null(name)) 
[13:22:52.032]                               next
[13:22:52.032]                             if (!grepl(pattern, name)) 
[13:22:52.032]                               next
[13:22:52.032]                             invokeRestart(restart)
[13:22:52.032]                             muffled <- TRUE
[13:22:52.032]                             break
[13:22:52.032]                           }
[13:22:52.032]                         }
[13:22:52.032]                       }
[13:22:52.032]                       invisible(muffled)
[13:22:52.032]                     }
[13:22:52.032]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.032]                   }
[13:22:52.032]                 }
[13:22:52.032]             }
[13:22:52.032]         }))
[13:22:52.032]     }, error = function(ex) {
[13:22:52.032]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:52.032]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.032]                 ...future.rng), started = ...future.startTime, 
[13:22:52.032]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:52.032]             version = "1.8"), class = "FutureResult")
[13:22:52.032]     }, finally = {
[13:22:52.032]         if (!identical(...future.workdir, getwd())) 
[13:22:52.032]             setwd(...future.workdir)
[13:22:52.032]         {
[13:22:52.032]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:52.032]                 ...future.oldOptions$nwarnings <- NULL
[13:22:52.032]             }
[13:22:52.032]             base::options(...future.oldOptions)
[13:22:52.032]             if (.Platform$OS.type == "windows") {
[13:22:52.032]                 old_names <- names(...future.oldEnvVars)
[13:22:52.032]                 envs <- base::Sys.getenv()
[13:22:52.032]                 names <- names(envs)
[13:22:52.032]                 common <- intersect(names, old_names)
[13:22:52.032]                 added <- setdiff(names, old_names)
[13:22:52.032]                 removed <- setdiff(old_names, names)
[13:22:52.032]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:52.032]                   envs[common]]
[13:22:52.032]                 NAMES <- toupper(changed)
[13:22:52.032]                 args <- list()
[13:22:52.032]                 for (kk in seq_along(NAMES)) {
[13:22:52.032]                   name <- changed[[kk]]
[13:22:52.032]                   NAME <- NAMES[[kk]]
[13:22:52.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.032]                     next
[13:22:52.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.032]                 }
[13:22:52.032]                 NAMES <- toupper(added)
[13:22:52.032]                 for (kk in seq_along(NAMES)) {
[13:22:52.032]                   name <- added[[kk]]
[13:22:52.032]                   NAME <- NAMES[[kk]]
[13:22:52.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.032]                     next
[13:22:52.032]                   args[[name]] <- ""
[13:22:52.032]                 }
[13:22:52.032]                 NAMES <- toupper(removed)
[13:22:52.032]                 for (kk in seq_along(NAMES)) {
[13:22:52.032]                   name <- removed[[kk]]
[13:22:52.032]                   NAME <- NAMES[[kk]]
[13:22:52.032]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.032]                     next
[13:22:52.032]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.032]                 }
[13:22:52.032]                 if (length(args) > 0) 
[13:22:52.032]                   base::do.call(base::Sys.setenv, args = args)
[13:22:52.032]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:52.032]             }
[13:22:52.032]             else {
[13:22:52.032]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:52.032]             }
[13:22:52.032]             {
[13:22:52.032]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:52.032]                   0L) {
[13:22:52.032]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:52.032]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:52.032]                   base::options(opts)
[13:22:52.032]                 }
[13:22:52.032]                 {
[13:22:52.032]                   {
[13:22:52.032]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:52.032]                     NULL
[13:22:52.032]                   }
[13:22:52.032]                   options(future.plan = NULL)
[13:22:52.032]                   if (is.na(NA_character_)) 
[13:22:52.032]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.032]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:52.032]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:52.032]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:52.032]                     envir = parent.frame()) 
[13:22:52.032]                   {
[13:22:52.032]                     if (is.function(workers)) 
[13:22:52.032]                       workers <- workers()
[13:22:52.032]                     workers <- structure(as.integer(workers), 
[13:22:52.032]                       class = class(workers))
[13:22:52.032]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:52.032]                       workers >= 1)
[13:22:52.032]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:52.032]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:52.032]                     }
[13:22:52.032]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:52.032]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:52.032]                       envir = envir)
[13:22:52.032]                     if (!future$lazy) 
[13:22:52.032]                       future <- run(future)
[13:22:52.032]                     invisible(future)
[13:22:52.032]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:52.032]                 }
[13:22:52.032]             }
[13:22:52.032]         }
[13:22:52.032]     })
[13:22:52.032]     if (TRUE) {
[13:22:52.032]         base::sink(type = "output", split = FALSE)
[13:22:52.032]         if (TRUE) {
[13:22:52.032]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:52.032]         }
[13:22:52.032]         else {
[13:22:52.032]             ...future.result["stdout"] <- base::list(NULL)
[13:22:52.032]         }
[13:22:52.032]         base::close(...future.stdout)
[13:22:52.032]         ...future.stdout <- NULL
[13:22:52.032]     }
[13:22:52.032]     ...future.result$conditions <- ...future.conditions
[13:22:52.032]     ...future.result$finished <- base::Sys.time()
[13:22:52.032]     ...future.result
[13:22:52.032] }
[13:22:52.036] MultisessionFuture started
[13:22:52.036] - Launch lazy future ... done
[13:22:52.036] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.048] result() for ClusterFuture ...
[13:22:52.048] receiveMessageFromWorker() for ClusterFuture ...
[13:22:52.048] - Validating connection of MultisessionFuture
[13:22:52.081] - received message: FutureResult
[13:22:52.081] - Received FutureResult
[13:22:52.081] - Erased future from FutureRegistry
[13:22:52.082] result() for ClusterFuture ...
[13:22:52.082] - result already collected: FutureResult
[13:22:52.082] result() for ClusterFuture ... done
[13:22:52.082] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:52.082] result() for ClusterFuture ... done
[13:22:52.082] result() for ClusterFuture ...
[13:22:52.082] - result already collected: FutureResult
[13:22:52.082] result() for ClusterFuture ... done
[13:22:52.086] getGlobalsAndPackages() ...
[13:22:52.086] 
[13:22:52.087] - globals: [0] <none>
[13:22:52.087] getGlobalsAndPackages() ... DONE
[13:22:52.098] Packages needed by the future expression (n = 0): <none>
[13:22:52.098] Packages needed by future strategies (n = 0): <none>
[13:22:52.101] {
[13:22:52.101]     {
[13:22:52.101]         {
[13:22:52.101]             ...future.startTime <- base::Sys.time()
[13:22:52.101]             {
[13:22:52.101]                 {
[13:22:52.101]                   {
[13:22:52.101]                     {
[13:22:52.101]                       base::local({
[13:22:52.101]                         has_future <- base::requireNamespace("future", 
[13:22:52.101]                           quietly = TRUE)
[13:22:52.101]                         if (has_future) {
[13:22:52.101]                           ns <- base::getNamespace("future")
[13:22:52.101]                           version <- ns[[".package"]][["version"]]
[13:22:52.101]                           if (is.null(version)) 
[13:22:52.101]                             version <- utils::packageVersion("future")
[13:22:52.101]                         }
[13:22:52.101]                         else {
[13:22:52.101]                           version <- NULL
[13:22:52.101]                         }
[13:22:52.101]                         if (!has_future || version < "1.8.0") {
[13:22:52.101]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:52.101]                             "", base::R.version$version.string), 
[13:22:52.101]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:52.101]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:52.101]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:52.101]                               "release", "version")], collapse = " "), 
[13:22:52.101]                             hostname = base::Sys.info()[["nodename"]])
[13:22:52.101]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:52.101]                             info)
[13:22:52.101]                           info <- base::paste(info, collapse = "; ")
[13:22:52.101]                           if (!has_future) {
[13:22:52.101]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:52.101]                               info)
[13:22:52.101]                           }
[13:22:52.101]                           else {
[13:22:52.101]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:52.101]                               info, version)
[13:22:52.101]                           }
[13:22:52.101]                           base::stop(msg)
[13:22:52.101]                         }
[13:22:52.101]                       })
[13:22:52.101]                     }
[13:22:52.101]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:52.101]                     base::options(mc.cores = 1L)
[13:22:52.101]                   }
[13:22:52.101]                   options(future.plan = NULL)
[13:22:52.101]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.101]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:52.101]                 }
[13:22:52.101]                 ...future.workdir <- getwd()
[13:22:52.101]             }
[13:22:52.101]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:52.101]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:52.101]         }
[13:22:52.101]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:52.101]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:52.101]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:52.101]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:52.101]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:52.101]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:52.101]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:52.101]             base::names(...future.oldOptions))
[13:22:52.101]     }
[13:22:52.101]     if (FALSE) {
[13:22:52.101]     }
[13:22:52.101]     else {
[13:22:52.101]         if (TRUE) {
[13:22:52.101]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:52.101]                 open = "w")
[13:22:52.101]         }
[13:22:52.101]         else {
[13:22:52.101]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:52.101]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:52.101]         }
[13:22:52.101]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:52.101]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:52.101]             base::sink(type = "output", split = FALSE)
[13:22:52.101]             base::close(...future.stdout)
[13:22:52.101]         }, add = TRUE)
[13:22:52.101]     }
[13:22:52.101]     ...future.frame <- base::sys.nframe()
[13:22:52.101]     ...future.conditions <- base::list()
[13:22:52.101]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:52.101]     if (FALSE) {
[13:22:52.101]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:52.101]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:52.101]     }
[13:22:52.101]     ...future.result <- base::tryCatch({
[13:22:52.101]         base::withCallingHandlers({
[13:22:52.101]             ...future.value <- base::withVisible(base::local({
[13:22:52.101]                 ...future.makeSendCondition <- base::local({
[13:22:52.101]                   sendCondition <- NULL
[13:22:52.101]                   function(frame = 1L) {
[13:22:52.101]                     if (is.function(sendCondition)) 
[13:22:52.101]                       return(sendCondition)
[13:22:52.101]                     ns <- getNamespace("parallel")
[13:22:52.101]                     if (exists("sendData", mode = "function", 
[13:22:52.101]                       envir = ns)) {
[13:22:52.101]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:52.101]                         envir = ns)
[13:22:52.101]                       envir <- sys.frame(frame)
[13:22:52.101]                       master <- NULL
[13:22:52.101]                       while (!identical(envir, .GlobalEnv) && 
[13:22:52.101]                         !identical(envir, emptyenv())) {
[13:22:52.101]                         if (exists("master", mode = "list", envir = envir, 
[13:22:52.101]                           inherits = FALSE)) {
[13:22:52.101]                           master <- get("master", mode = "list", 
[13:22:52.101]                             envir = envir, inherits = FALSE)
[13:22:52.101]                           if (inherits(master, c("SOCKnode", 
[13:22:52.101]                             "SOCK0node"))) {
[13:22:52.101]                             sendCondition <<- function(cond) {
[13:22:52.101]                               data <- list(type = "VALUE", value = cond, 
[13:22:52.101]                                 success = TRUE)
[13:22:52.101]                               parallel_sendData(master, data)
[13:22:52.101]                             }
[13:22:52.101]                             return(sendCondition)
[13:22:52.101]                           }
[13:22:52.101]                         }
[13:22:52.101]                         frame <- frame + 1L
[13:22:52.101]                         envir <- sys.frame(frame)
[13:22:52.101]                       }
[13:22:52.101]                     }
[13:22:52.101]                     sendCondition <<- function(cond) NULL
[13:22:52.101]                   }
[13:22:52.101]                 })
[13:22:52.101]                 withCallingHandlers({
[13:22:52.101]                   42
[13:22:52.101]                 }, immediateCondition = function(cond) {
[13:22:52.101]                   sendCondition <- ...future.makeSendCondition()
[13:22:52.101]                   sendCondition(cond)
[13:22:52.101]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.101]                   {
[13:22:52.101]                     inherits <- base::inherits
[13:22:52.101]                     invokeRestart <- base::invokeRestart
[13:22:52.101]                     is.null <- base::is.null
[13:22:52.101]                     muffled <- FALSE
[13:22:52.101]                     if (inherits(cond, "message")) {
[13:22:52.101]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:52.101]                       if (muffled) 
[13:22:52.101]                         invokeRestart("muffleMessage")
[13:22:52.101]                     }
[13:22:52.101]                     else if (inherits(cond, "warning")) {
[13:22:52.101]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:52.101]                       if (muffled) 
[13:22:52.101]                         invokeRestart("muffleWarning")
[13:22:52.101]                     }
[13:22:52.101]                     else if (inherits(cond, "condition")) {
[13:22:52.101]                       if (!is.null(pattern)) {
[13:22:52.101]                         computeRestarts <- base::computeRestarts
[13:22:52.101]                         grepl <- base::grepl
[13:22:52.101]                         restarts <- computeRestarts(cond)
[13:22:52.101]                         for (restart in restarts) {
[13:22:52.101]                           name <- restart$name
[13:22:52.101]                           if (is.null(name)) 
[13:22:52.101]                             next
[13:22:52.101]                           if (!grepl(pattern, name)) 
[13:22:52.101]                             next
[13:22:52.101]                           invokeRestart(restart)
[13:22:52.101]                           muffled <- TRUE
[13:22:52.101]                           break
[13:22:52.101]                         }
[13:22:52.101]                       }
[13:22:52.101]                     }
[13:22:52.101]                     invisible(muffled)
[13:22:52.101]                   }
[13:22:52.101]                   muffleCondition(cond)
[13:22:52.101]                 })
[13:22:52.101]             }))
[13:22:52.101]             future::FutureResult(value = ...future.value$value, 
[13:22:52.101]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.101]                   ...future.rng), globalenv = if (FALSE) 
[13:22:52.101]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:52.101]                     ...future.globalenv.names))
[13:22:52.101]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:52.101]         }, condition = base::local({
[13:22:52.101]             c <- base::c
[13:22:52.101]             inherits <- base::inherits
[13:22:52.101]             invokeRestart <- base::invokeRestart
[13:22:52.101]             length <- base::length
[13:22:52.101]             list <- base::list
[13:22:52.101]             seq.int <- base::seq.int
[13:22:52.101]             signalCondition <- base::signalCondition
[13:22:52.101]             sys.calls <- base::sys.calls
[13:22:52.101]             `[[` <- base::`[[`
[13:22:52.101]             `+` <- base::`+`
[13:22:52.101]             `<<-` <- base::`<<-`
[13:22:52.101]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:52.101]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:52.101]                   3L)]
[13:22:52.101]             }
[13:22:52.101]             function(cond) {
[13:22:52.101]                 is_error <- inherits(cond, "error")
[13:22:52.101]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:52.101]                   NULL)
[13:22:52.101]                 if (is_error) {
[13:22:52.101]                   sessionInformation <- function() {
[13:22:52.101]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:52.101]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:52.101]                       search = base::search(), system = base::Sys.info())
[13:22:52.101]                   }
[13:22:52.101]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.101]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:52.101]                     cond$call), session = sessionInformation(), 
[13:22:52.101]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:52.101]                   signalCondition(cond)
[13:22:52.101]                 }
[13:22:52.101]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:52.101]                 "immediateCondition"))) {
[13:22:52.101]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:52.101]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.101]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:52.101]                   if (TRUE && !signal) {
[13:22:52.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.101]                     {
[13:22:52.101]                       inherits <- base::inherits
[13:22:52.101]                       invokeRestart <- base::invokeRestart
[13:22:52.101]                       is.null <- base::is.null
[13:22:52.101]                       muffled <- FALSE
[13:22:52.101]                       if (inherits(cond, "message")) {
[13:22:52.101]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.101]                         if (muffled) 
[13:22:52.101]                           invokeRestart("muffleMessage")
[13:22:52.101]                       }
[13:22:52.101]                       else if (inherits(cond, "warning")) {
[13:22:52.101]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.101]                         if (muffled) 
[13:22:52.101]                           invokeRestart("muffleWarning")
[13:22:52.101]                       }
[13:22:52.101]                       else if (inherits(cond, "condition")) {
[13:22:52.101]                         if (!is.null(pattern)) {
[13:22:52.101]                           computeRestarts <- base::computeRestarts
[13:22:52.101]                           grepl <- base::grepl
[13:22:52.101]                           restarts <- computeRestarts(cond)
[13:22:52.101]                           for (restart in restarts) {
[13:22:52.101]                             name <- restart$name
[13:22:52.101]                             if (is.null(name)) 
[13:22:52.101]                               next
[13:22:52.101]                             if (!grepl(pattern, name)) 
[13:22:52.101]                               next
[13:22:52.101]                             invokeRestart(restart)
[13:22:52.101]                             muffled <- TRUE
[13:22:52.101]                             break
[13:22:52.101]                           }
[13:22:52.101]                         }
[13:22:52.101]                       }
[13:22:52.101]                       invisible(muffled)
[13:22:52.101]                     }
[13:22:52.101]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.101]                   }
[13:22:52.101]                 }
[13:22:52.101]                 else {
[13:22:52.101]                   if (TRUE) {
[13:22:52.101]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.101]                     {
[13:22:52.101]                       inherits <- base::inherits
[13:22:52.101]                       invokeRestart <- base::invokeRestart
[13:22:52.101]                       is.null <- base::is.null
[13:22:52.101]                       muffled <- FALSE
[13:22:52.101]                       if (inherits(cond, "message")) {
[13:22:52.101]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.101]                         if (muffled) 
[13:22:52.101]                           invokeRestart("muffleMessage")
[13:22:52.101]                       }
[13:22:52.101]                       else if (inherits(cond, "warning")) {
[13:22:52.101]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.101]                         if (muffled) 
[13:22:52.101]                           invokeRestart("muffleWarning")
[13:22:52.101]                       }
[13:22:52.101]                       else if (inherits(cond, "condition")) {
[13:22:52.101]                         if (!is.null(pattern)) {
[13:22:52.101]                           computeRestarts <- base::computeRestarts
[13:22:52.101]                           grepl <- base::grepl
[13:22:52.101]                           restarts <- computeRestarts(cond)
[13:22:52.101]                           for (restart in restarts) {
[13:22:52.101]                             name <- restart$name
[13:22:52.101]                             if (is.null(name)) 
[13:22:52.101]                               next
[13:22:52.101]                             if (!grepl(pattern, name)) 
[13:22:52.101]                               next
[13:22:52.101]                             invokeRestart(restart)
[13:22:52.101]                             muffled <- TRUE
[13:22:52.101]                             break
[13:22:52.101]                           }
[13:22:52.101]                         }
[13:22:52.101]                       }
[13:22:52.101]                       invisible(muffled)
[13:22:52.101]                     }
[13:22:52.101]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.101]                   }
[13:22:52.101]                 }
[13:22:52.101]             }
[13:22:52.101]         }))
[13:22:52.101]     }, error = function(ex) {
[13:22:52.101]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:52.101]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.101]                 ...future.rng), started = ...future.startTime, 
[13:22:52.101]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:52.101]             version = "1.8"), class = "FutureResult")
[13:22:52.101]     }, finally = {
[13:22:52.101]         if (!identical(...future.workdir, getwd())) 
[13:22:52.101]             setwd(...future.workdir)
[13:22:52.101]         {
[13:22:52.101]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:52.101]                 ...future.oldOptions$nwarnings <- NULL
[13:22:52.101]             }
[13:22:52.101]             base::options(...future.oldOptions)
[13:22:52.101]             if (.Platform$OS.type == "windows") {
[13:22:52.101]                 old_names <- names(...future.oldEnvVars)
[13:22:52.101]                 envs <- base::Sys.getenv()
[13:22:52.101]                 names <- names(envs)
[13:22:52.101]                 common <- intersect(names, old_names)
[13:22:52.101]                 added <- setdiff(names, old_names)
[13:22:52.101]                 removed <- setdiff(old_names, names)
[13:22:52.101]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:52.101]                   envs[common]]
[13:22:52.101]                 NAMES <- toupper(changed)
[13:22:52.101]                 args <- list()
[13:22:52.101]                 for (kk in seq_along(NAMES)) {
[13:22:52.101]                   name <- changed[[kk]]
[13:22:52.101]                   NAME <- NAMES[[kk]]
[13:22:52.101]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.101]                     next
[13:22:52.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.101]                 }
[13:22:52.101]                 NAMES <- toupper(added)
[13:22:52.101]                 for (kk in seq_along(NAMES)) {
[13:22:52.101]                   name <- added[[kk]]
[13:22:52.101]                   NAME <- NAMES[[kk]]
[13:22:52.101]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.101]                     next
[13:22:52.101]                   args[[name]] <- ""
[13:22:52.101]                 }
[13:22:52.101]                 NAMES <- toupper(removed)
[13:22:52.101]                 for (kk in seq_along(NAMES)) {
[13:22:52.101]                   name <- removed[[kk]]
[13:22:52.101]                   NAME <- NAMES[[kk]]
[13:22:52.101]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.101]                     next
[13:22:52.101]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.101]                 }
[13:22:52.101]                 if (length(args) > 0) 
[13:22:52.101]                   base::do.call(base::Sys.setenv, args = args)
[13:22:52.101]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:52.101]             }
[13:22:52.101]             else {
[13:22:52.101]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:52.101]             }
[13:22:52.101]             {
[13:22:52.101]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:52.101]                   0L) {
[13:22:52.101]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:52.101]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:52.101]                   base::options(opts)
[13:22:52.101]                 }
[13:22:52.101]                 {
[13:22:52.101]                   {
[13:22:52.101]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:52.101]                     NULL
[13:22:52.101]                   }
[13:22:52.101]                   options(future.plan = NULL)
[13:22:52.101]                   if (is.na(NA_character_)) 
[13:22:52.101]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.101]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:52.101]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:52.101]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:52.101]                     envir = parent.frame()) 
[13:22:52.101]                   {
[13:22:52.101]                     if (is.function(workers)) 
[13:22:52.101]                       workers <- workers()
[13:22:52.101]                     workers <- structure(as.integer(workers), 
[13:22:52.101]                       class = class(workers))
[13:22:52.101]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:52.101]                       workers >= 1)
[13:22:52.101]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:52.101]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:52.101]                     }
[13:22:52.101]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:52.101]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:52.101]                       envir = envir)
[13:22:52.101]                     if (!future$lazy) 
[13:22:52.101]                       future <- run(future)
[13:22:52.101]                     invisible(future)
[13:22:52.101]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:52.101]                 }
[13:22:52.101]             }
[13:22:52.101]         }
[13:22:52.101]     })
[13:22:52.101]     if (TRUE) {
[13:22:52.101]         base::sink(type = "output", split = FALSE)
[13:22:52.101]         if (TRUE) {
[13:22:52.101]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:52.101]         }
[13:22:52.101]         else {
[13:22:52.101]             ...future.result["stdout"] <- base::list(NULL)
[13:22:52.101]         }
[13:22:52.101]         base::close(...future.stdout)
[13:22:52.101]         ...future.stdout <- NULL
[13:22:52.101]     }
[13:22:52.101]     ...future.result$conditions <- ...future.conditions
[13:22:52.101]     ...future.result$finished <- base::Sys.time()
[13:22:52.101]     ...future.result
[13:22:52.101] }
[13:22:52.105] MultisessionFuture started
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.116] result() for ClusterFuture ...
[13:22:52.116] receiveMessageFromWorker() for ClusterFuture ...
[13:22:52.116] - Validating connection of MultisessionFuture
[13:22:52.153] - received message: FutureResult
[13:22:52.153] - Received FutureResult
[13:22:52.153] - Erased future from FutureRegistry
[13:22:52.154] result() for ClusterFuture ...
[13:22:52.154] - result already collected: FutureResult
[13:22:52.154] result() for ClusterFuture ... done
[13:22:52.154] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:52.154] result() for ClusterFuture ... done
[13:22:52.154] result() for ClusterFuture ...
[13:22:52.154] - result already collected: FutureResult
[13:22:52.154] result() for ClusterFuture ... done
[13:22:52.154] getGlobalsAndPackages() ...
[13:22:52.154] Searching for globals...
[13:22:52.155] 
[13:22:52.155] Searching for globals ... DONE
[13:22:52.155] - globals: [0] <none>
[13:22:52.155] getGlobalsAndPackages() ... DONE
[13:22:52.155] run() for ‘Future’ ...
[13:22:52.155] - state: ‘created’
[13:22:52.156] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:52.170] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.170] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:52.170]   - Field: ‘node’
[13:22:52.170]   - Field: ‘label’
[13:22:52.170]   - Field: ‘local’
[13:22:52.170]   - Field: ‘owner’
[13:22:52.170]   - Field: ‘envir’
[13:22:52.170]   - Field: ‘workers’
[13:22:52.171]   - Field: ‘packages’
[13:22:52.171]   - Field: ‘gc’
[13:22:52.171]   - Field: ‘conditions’
[13:22:52.171]   - Field: ‘persistent’
[13:22:52.171]   - Field: ‘expr’
[13:22:52.171]   - Field: ‘uuid’
[13:22:52.171]   - Field: ‘seed’
[13:22:52.171]   - Field: ‘version’
[13:22:52.171]   - Field: ‘result’
[13:22:52.171]   - Field: ‘asynchronous’
[13:22:52.171]   - Field: ‘calls’
[13:22:52.172]   - Field: ‘globals’
[13:22:52.172]   - Field: ‘stdout’
[13:22:52.172]   - Field: ‘earlySignal’
[13:22:52.172]   - Field: ‘lazy’
[13:22:52.172]   - Field: ‘state’
[13:22:52.172] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:52.172] - Launch lazy future ...
[13:22:52.173] Packages needed by the future expression (n = 0): <none>
[13:22:52.173] Packages needed by future strategies (n = 0): <none>
[13:22:52.173] {
[13:22:52.173]     {
[13:22:52.173]         {
[13:22:52.173]             ...future.startTime <- base::Sys.time()
[13:22:52.173]             {
[13:22:52.173]                 {
[13:22:52.173]                   {
[13:22:52.173]                     {
[13:22:52.173]                       base::local({
[13:22:52.173]                         has_future <- base::requireNamespace("future", 
[13:22:52.173]                           quietly = TRUE)
[13:22:52.173]                         if (has_future) {
[13:22:52.173]                           ns <- base::getNamespace("future")
[13:22:52.173]                           version <- ns[[".package"]][["version"]]
[13:22:52.173]                           if (is.null(version)) 
[13:22:52.173]                             version <- utils::packageVersion("future")
[13:22:52.173]                         }
[13:22:52.173]                         else {
[13:22:52.173]                           version <- NULL
[13:22:52.173]                         }
[13:22:52.173]                         if (!has_future || version < "1.8.0") {
[13:22:52.173]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:52.173]                             "", base::R.version$version.string), 
[13:22:52.173]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:52.173]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:52.173]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:52.173]                               "release", "version")], collapse = " "), 
[13:22:52.173]                             hostname = base::Sys.info()[["nodename"]])
[13:22:52.173]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:52.173]                             info)
[13:22:52.173]                           info <- base::paste(info, collapse = "; ")
[13:22:52.173]                           if (!has_future) {
[13:22:52.173]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:52.173]                               info)
[13:22:52.173]                           }
[13:22:52.173]                           else {
[13:22:52.173]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:52.173]                               info, version)
[13:22:52.173]                           }
[13:22:52.173]                           base::stop(msg)
[13:22:52.173]                         }
[13:22:52.173]                       })
[13:22:52.173]                     }
[13:22:52.173]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:52.173]                     base::options(mc.cores = 1L)
[13:22:52.173]                   }
[13:22:52.173]                   options(future.plan = NULL)
[13:22:52.173]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.173]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:52.173]                 }
[13:22:52.173]                 ...future.workdir <- getwd()
[13:22:52.173]             }
[13:22:52.173]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:52.173]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:52.173]         }
[13:22:52.173]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:52.173]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:52.173]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:52.173]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:52.173]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:52.173]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:52.173]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:52.173]             base::names(...future.oldOptions))
[13:22:52.173]     }
[13:22:52.173]     if (FALSE) {
[13:22:52.173]     }
[13:22:52.173]     else {
[13:22:52.173]         if (TRUE) {
[13:22:52.173]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:52.173]                 open = "w")
[13:22:52.173]         }
[13:22:52.173]         else {
[13:22:52.173]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:52.173]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:52.173]         }
[13:22:52.173]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:52.173]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:52.173]             base::sink(type = "output", split = FALSE)
[13:22:52.173]             base::close(...future.stdout)
[13:22:52.173]         }, add = TRUE)
[13:22:52.173]     }
[13:22:52.173]     ...future.frame <- base::sys.nframe()
[13:22:52.173]     ...future.conditions <- base::list()
[13:22:52.173]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:52.173]     if (FALSE) {
[13:22:52.173]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:52.173]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:52.173]     }
[13:22:52.173]     ...future.result <- base::tryCatch({
[13:22:52.173]         base::withCallingHandlers({
[13:22:52.173]             ...future.value <- base::withVisible(base::local({
[13:22:52.173]                 ...future.makeSendCondition <- base::local({
[13:22:52.173]                   sendCondition <- NULL
[13:22:52.173]                   function(frame = 1L) {
[13:22:52.173]                     if (is.function(sendCondition)) 
[13:22:52.173]                       return(sendCondition)
[13:22:52.173]                     ns <- getNamespace("parallel")
[13:22:52.173]                     if (exists("sendData", mode = "function", 
[13:22:52.173]                       envir = ns)) {
[13:22:52.173]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:52.173]                         envir = ns)
[13:22:52.173]                       envir <- sys.frame(frame)
[13:22:52.173]                       master <- NULL
[13:22:52.173]                       while (!identical(envir, .GlobalEnv) && 
[13:22:52.173]                         !identical(envir, emptyenv())) {
[13:22:52.173]                         if (exists("master", mode = "list", envir = envir, 
[13:22:52.173]                           inherits = FALSE)) {
[13:22:52.173]                           master <- get("master", mode = "list", 
[13:22:52.173]                             envir = envir, inherits = FALSE)
[13:22:52.173]                           if (inherits(master, c("SOCKnode", 
[13:22:52.173]                             "SOCK0node"))) {
[13:22:52.173]                             sendCondition <<- function(cond) {
[13:22:52.173]                               data <- list(type = "VALUE", value = cond, 
[13:22:52.173]                                 success = TRUE)
[13:22:52.173]                               parallel_sendData(master, data)
[13:22:52.173]                             }
[13:22:52.173]                             return(sendCondition)
[13:22:52.173]                           }
[13:22:52.173]                         }
[13:22:52.173]                         frame <- frame + 1L
[13:22:52.173]                         envir <- sys.frame(frame)
[13:22:52.173]                       }
[13:22:52.173]                     }
[13:22:52.173]                     sendCondition <<- function(cond) NULL
[13:22:52.173]                   }
[13:22:52.173]                 })
[13:22:52.173]                 withCallingHandlers({
[13:22:52.173]                   42
[13:22:52.173]                 }, immediateCondition = function(cond) {
[13:22:52.173]                   sendCondition <- ...future.makeSendCondition()
[13:22:52.173]                   sendCondition(cond)
[13:22:52.173]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.173]                   {
[13:22:52.173]                     inherits <- base::inherits
[13:22:52.173]                     invokeRestart <- base::invokeRestart
[13:22:52.173]                     is.null <- base::is.null
[13:22:52.173]                     muffled <- FALSE
[13:22:52.173]                     if (inherits(cond, "message")) {
[13:22:52.173]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:52.173]                       if (muffled) 
[13:22:52.173]                         invokeRestart("muffleMessage")
[13:22:52.173]                     }
[13:22:52.173]                     else if (inherits(cond, "warning")) {
[13:22:52.173]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:52.173]                       if (muffled) 
[13:22:52.173]                         invokeRestart("muffleWarning")
[13:22:52.173]                     }
[13:22:52.173]                     else if (inherits(cond, "condition")) {
[13:22:52.173]                       if (!is.null(pattern)) {
[13:22:52.173]                         computeRestarts <- base::computeRestarts
[13:22:52.173]                         grepl <- base::grepl
[13:22:52.173]                         restarts <- computeRestarts(cond)
[13:22:52.173]                         for (restart in restarts) {
[13:22:52.173]                           name <- restart$name
[13:22:52.173]                           if (is.null(name)) 
[13:22:52.173]                             next
[13:22:52.173]                           if (!grepl(pattern, name)) 
[13:22:52.173]                             next
[13:22:52.173]                           invokeRestart(restart)
[13:22:52.173]                           muffled <- TRUE
[13:22:52.173]                           break
[13:22:52.173]                         }
[13:22:52.173]                       }
[13:22:52.173]                     }
[13:22:52.173]                     invisible(muffled)
[13:22:52.173]                   }
[13:22:52.173]                   muffleCondition(cond)
[13:22:52.173]                 })
[13:22:52.173]             }))
[13:22:52.173]             future::FutureResult(value = ...future.value$value, 
[13:22:52.173]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.173]                   ...future.rng), globalenv = if (FALSE) 
[13:22:52.173]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:52.173]                     ...future.globalenv.names))
[13:22:52.173]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:52.173]         }, condition = base::local({
[13:22:52.173]             c <- base::c
[13:22:52.173]             inherits <- base::inherits
[13:22:52.173]             invokeRestart <- base::invokeRestart
[13:22:52.173]             length <- base::length
[13:22:52.173]             list <- base::list
[13:22:52.173]             seq.int <- base::seq.int
[13:22:52.173]             signalCondition <- base::signalCondition
[13:22:52.173]             sys.calls <- base::sys.calls
[13:22:52.173]             `[[` <- base::`[[`
[13:22:52.173]             `+` <- base::`+`
[13:22:52.173]             `<<-` <- base::`<<-`
[13:22:52.173]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:52.173]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:52.173]                   3L)]
[13:22:52.173]             }
[13:22:52.173]             function(cond) {
[13:22:52.173]                 is_error <- inherits(cond, "error")
[13:22:52.173]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:52.173]                   NULL)
[13:22:52.173]                 if (is_error) {
[13:22:52.173]                   sessionInformation <- function() {
[13:22:52.173]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:52.173]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:52.173]                       search = base::search(), system = base::Sys.info())
[13:22:52.173]                   }
[13:22:52.173]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.173]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:52.173]                     cond$call), session = sessionInformation(), 
[13:22:52.173]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:52.173]                   signalCondition(cond)
[13:22:52.173]                 }
[13:22:52.173]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:52.173]                 "immediateCondition"))) {
[13:22:52.173]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:52.173]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.173]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:52.173]                   if (TRUE && !signal) {
[13:22:52.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.173]                     {
[13:22:52.173]                       inherits <- base::inherits
[13:22:52.173]                       invokeRestart <- base::invokeRestart
[13:22:52.173]                       is.null <- base::is.null
[13:22:52.173]                       muffled <- FALSE
[13:22:52.173]                       if (inherits(cond, "message")) {
[13:22:52.173]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.173]                         if (muffled) 
[13:22:52.173]                           invokeRestart("muffleMessage")
[13:22:52.173]                       }
[13:22:52.173]                       else if (inherits(cond, "warning")) {
[13:22:52.173]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.173]                         if (muffled) 
[13:22:52.173]                           invokeRestart("muffleWarning")
[13:22:52.173]                       }
[13:22:52.173]                       else if (inherits(cond, "condition")) {
[13:22:52.173]                         if (!is.null(pattern)) {
[13:22:52.173]                           computeRestarts <- base::computeRestarts
[13:22:52.173]                           grepl <- base::grepl
[13:22:52.173]                           restarts <- computeRestarts(cond)
[13:22:52.173]                           for (restart in restarts) {
[13:22:52.173]                             name <- restart$name
[13:22:52.173]                             if (is.null(name)) 
[13:22:52.173]                               next
[13:22:52.173]                             if (!grepl(pattern, name)) 
[13:22:52.173]                               next
[13:22:52.173]                             invokeRestart(restart)
[13:22:52.173]                             muffled <- TRUE
[13:22:52.173]                             break
[13:22:52.173]                           }
[13:22:52.173]                         }
[13:22:52.173]                       }
[13:22:52.173]                       invisible(muffled)
[13:22:52.173]                     }
[13:22:52.173]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.173]                   }
[13:22:52.173]                 }
[13:22:52.173]                 else {
[13:22:52.173]                   if (TRUE) {
[13:22:52.173]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.173]                     {
[13:22:52.173]                       inherits <- base::inherits
[13:22:52.173]                       invokeRestart <- base::invokeRestart
[13:22:52.173]                       is.null <- base::is.null
[13:22:52.173]                       muffled <- FALSE
[13:22:52.173]                       if (inherits(cond, "message")) {
[13:22:52.173]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.173]                         if (muffled) 
[13:22:52.173]                           invokeRestart("muffleMessage")
[13:22:52.173]                       }
[13:22:52.173]                       else if (inherits(cond, "warning")) {
[13:22:52.173]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.173]                         if (muffled) 
[13:22:52.173]                           invokeRestart("muffleWarning")
[13:22:52.173]                       }
[13:22:52.173]                       else if (inherits(cond, "condition")) {
[13:22:52.173]                         if (!is.null(pattern)) {
[13:22:52.173]                           computeRestarts <- base::computeRestarts
[13:22:52.173]                           grepl <- base::grepl
[13:22:52.173]                           restarts <- computeRestarts(cond)
[13:22:52.173]                           for (restart in restarts) {
[13:22:52.173]                             name <- restart$name
[13:22:52.173]                             if (is.null(name)) 
[13:22:52.173]                               next
[13:22:52.173]                             if (!grepl(pattern, name)) 
[13:22:52.173]                               next
[13:22:52.173]                             invokeRestart(restart)
[13:22:52.173]                             muffled <- TRUE
[13:22:52.173]                             break
[13:22:52.173]                           }
[13:22:52.173]                         }
[13:22:52.173]                       }
[13:22:52.173]                       invisible(muffled)
[13:22:52.173]                     }
[13:22:52.173]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.173]                   }
[13:22:52.173]                 }
[13:22:52.173]             }
[13:22:52.173]         }))
[13:22:52.173]     }, error = function(ex) {
[13:22:52.173]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:52.173]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.173]                 ...future.rng), started = ...future.startTime, 
[13:22:52.173]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:52.173]             version = "1.8"), class = "FutureResult")
[13:22:52.173]     }, finally = {
[13:22:52.173]         if (!identical(...future.workdir, getwd())) 
[13:22:52.173]             setwd(...future.workdir)
[13:22:52.173]         {
[13:22:52.173]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:52.173]                 ...future.oldOptions$nwarnings <- NULL
[13:22:52.173]             }
[13:22:52.173]             base::options(...future.oldOptions)
[13:22:52.173]             if (.Platform$OS.type == "windows") {
[13:22:52.173]                 old_names <- names(...future.oldEnvVars)
[13:22:52.173]                 envs <- base::Sys.getenv()
[13:22:52.173]                 names <- names(envs)
[13:22:52.173]                 common <- intersect(names, old_names)
[13:22:52.173]                 added <- setdiff(names, old_names)
[13:22:52.173]                 removed <- setdiff(old_names, names)
[13:22:52.173]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:52.173]                   envs[common]]
[13:22:52.173]                 NAMES <- toupper(changed)
[13:22:52.173]                 args <- list()
[13:22:52.173]                 for (kk in seq_along(NAMES)) {
[13:22:52.173]                   name <- changed[[kk]]
[13:22:52.173]                   NAME <- NAMES[[kk]]
[13:22:52.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.173]                     next
[13:22:52.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.173]                 }
[13:22:52.173]                 NAMES <- toupper(added)
[13:22:52.173]                 for (kk in seq_along(NAMES)) {
[13:22:52.173]                   name <- added[[kk]]
[13:22:52.173]                   NAME <- NAMES[[kk]]
[13:22:52.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.173]                     next
[13:22:52.173]                   args[[name]] <- ""
[13:22:52.173]                 }
[13:22:52.173]                 NAMES <- toupper(removed)
[13:22:52.173]                 for (kk in seq_along(NAMES)) {
[13:22:52.173]                   name <- removed[[kk]]
[13:22:52.173]                   NAME <- NAMES[[kk]]
[13:22:52.173]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.173]                     next
[13:22:52.173]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.173]                 }
[13:22:52.173]                 if (length(args) > 0) 
[13:22:52.173]                   base::do.call(base::Sys.setenv, args = args)
[13:22:52.173]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:52.173]             }
[13:22:52.173]             else {
[13:22:52.173]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:52.173]             }
[13:22:52.173]             {
[13:22:52.173]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:52.173]                   0L) {
[13:22:52.173]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:52.173]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:52.173]                   base::options(opts)
[13:22:52.173]                 }
[13:22:52.173]                 {
[13:22:52.173]                   {
[13:22:52.173]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:52.173]                     NULL
[13:22:52.173]                   }
[13:22:52.173]                   options(future.plan = NULL)
[13:22:52.173]                   if (is.na(NA_character_)) 
[13:22:52.173]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.173]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:52.173]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:52.173]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:52.173]                     envir = parent.frame()) 
[13:22:52.173]                   {
[13:22:52.173]                     if (is.function(workers)) 
[13:22:52.173]                       workers <- workers()
[13:22:52.173]                     workers <- structure(as.integer(workers), 
[13:22:52.173]                       class = class(workers))
[13:22:52.173]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:52.173]                       workers >= 1)
[13:22:52.173]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:52.173]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:52.173]                     }
[13:22:52.173]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:52.173]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:52.173]                       envir = envir)
[13:22:52.173]                     if (!future$lazy) 
[13:22:52.173]                       future <- run(future)
[13:22:52.173]                     invisible(future)
[13:22:52.173]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:52.173]                 }
[13:22:52.173]             }
[13:22:52.173]         }
[13:22:52.173]     })
[13:22:52.173]     if (TRUE) {
[13:22:52.173]         base::sink(type = "output", split = FALSE)
[13:22:52.173]         if (TRUE) {
[13:22:52.173]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:52.173]         }
[13:22:52.173]         else {
[13:22:52.173]             ...future.result["stdout"] <- base::list(NULL)
[13:22:52.173]         }
[13:22:52.173]         base::close(...future.stdout)
[13:22:52.173]         ...future.stdout <- NULL
[13:22:52.173]     }
[13:22:52.173]     ...future.result$conditions <- ...future.conditions
[13:22:52.173]     ...future.result$finished <- base::Sys.time()
[13:22:52.173]     ...future.result
[13:22:52.173] }
[13:22:52.176] MultisessionFuture started
[13:22:52.177] - Launch lazy future ... done
[13:22:52.177] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
[1] 42
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.188] result() for ClusterFuture ...
[13:22:52.188] receiveMessageFromWorker() for ClusterFuture ...
[13:22:52.188] - Validating connection of MultisessionFuture
[13:22:52.225] - received message: FutureResult
[13:22:52.225] - Received FutureResult
[13:22:52.226] - Erased future from FutureRegistry
[13:22:52.226] result() for ClusterFuture ...
[13:22:52.226] - result already collected: FutureResult
[13:22:52.226] result() for ClusterFuture ... done
[13:22:52.226] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:52.226] result() for ClusterFuture ... done
[13:22:52.226] result() for ClusterFuture ...
[13:22:52.226] - result already collected: FutureResult
[13:22:52.226] result() for ClusterFuture ... done
[13:22:52.227] getGlobalsAndPackages() ...
[13:22:52.227] Searching for globals...
[13:22:52.227] - globals found: [1] ‘{’
[13:22:52.228] Searching for globals ... DONE
[13:22:52.228] Resolving globals: FALSE
[13:22:52.228] 
[13:22:52.228] 
[13:22:52.228] getGlobalsAndPackages() ... DONE
[13:22:52.229] run() for ‘Future’ ...
[13:22:52.229] - state: ‘created’
[13:22:52.229] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:52.243] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.244] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:52.244]   - Field: ‘node’
[13:22:52.244]   - Field: ‘label’
[13:22:52.244]   - Field: ‘local’
[13:22:52.244]   - Field: ‘owner’
[13:22:52.244]   - Field: ‘envir’
[13:22:52.244]   - Field: ‘workers’
[13:22:52.244]   - Field: ‘packages’
[13:22:52.245]   - Field: ‘gc’
[13:22:52.245]   - Field: ‘conditions’
[13:22:52.245]   - Field: ‘persistent’
[13:22:52.245]   - Field: ‘expr’
[13:22:52.245]   - Field: ‘uuid’
[13:22:52.245]   - Field: ‘seed’
[13:22:52.245]   - Field: ‘version’
[13:22:52.245]   - Field: ‘result’
[13:22:52.245]   - Field: ‘asynchronous’
[13:22:52.245]   - Field: ‘calls’
[13:22:52.245]   - Field: ‘globals’
[13:22:52.246]   - Field: ‘stdout’
[13:22:52.246]   - Field: ‘earlySignal’
[13:22:52.246]   - Field: ‘lazy’
[13:22:52.246]   - Field: ‘state’
[13:22:52.246] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:52.246] - Launch lazy future ...
[13:22:52.246] Packages needed by the future expression (n = 0): <none>
[13:22:52.246] Packages needed by future strategies (n = 0): <none>
[13:22:52.247] {
[13:22:52.247]     {
[13:22:52.247]         {
[13:22:52.247]             ...future.startTime <- base::Sys.time()
[13:22:52.247]             {
[13:22:52.247]                 {
[13:22:52.247]                   {
[13:22:52.247]                     {
[13:22:52.247]                       base::local({
[13:22:52.247]                         has_future <- base::requireNamespace("future", 
[13:22:52.247]                           quietly = TRUE)
[13:22:52.247]                         if (has_future) {
[13:22:52.247]                           ns <- base::getNamespace("future")
[13:22:52.247]                           version <- ns[[".package"]][["version"]]
[13:22:52.247]                           if (is.null(version)) 
[13:22:52.247]                             version <- utils::packageVersion("future")
[13:22:52.247]                         }
[13:22:52.247]                         else {
[13:22:52.247]                           version <- NULL
[13:22:52.247]                         }
[13:22:52.247]                         if (!has_future || version < "1.8.0") {
[13:22:52.247]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:52.247]                             "", base::R.version$version.string), 
[13:22:52.247]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:52.247]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:52.247]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:52.247]                               "release", "version")], collapse = " "), 
[13:22:52.247]                             hostname = base::Sys.info()[["nodename"]])
[13:22:52.247]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:52.247]                             info)
[13:22:52.247]                           info <- base::paste(info, collapse = "; ")
[13:22:52.247]                           if (!has_future) {
[13:22:52.247]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:52.247]                               info)
[13:22:52.247]                           }
[13:22:52.247]                           else {
[13:22:52.247]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:52.247]                               info, version)
[13:22:52.247]                           }
[13:22:52.247]                           base::stop(msg)
[13:22:52.247]                         }
[13:22:52.247]                       })
[13:22:52.247]                     }
[13:22:52.247]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:52.247]                     base::options(mc.cores = 1L)
[13:22:52.247]                   }
[13:22:52.247]                   options(future.plan = NULL)
[13:22:52.247]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.247]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:52.247]                 }
[13:22:52.247]                 ...future.workdir <- getwd()
[13:22:52.247]             }
[13:22:52.247]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:52.247]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:52.247]         }
[13:22:52.247]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:52.247]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:52.247]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:52.247]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:52.247]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:52.247]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:52.247]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:52.247]             base::names(...future.oldOptions))
[13:22:52.247]     }
[13:22:52.247]     if (FALSE) {
[13:22:52.247]     }
[13:22:52.247]     else {
[13:22:52.247]         if (TRUE) {
[13:22:52.247]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:52.247]                 open = "w")
[13:22:52.247]         }
[13:22:52.247]         else {
[13:22:52.247]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:52.247]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:52.247]         }
[13:22:52.247]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:52.247]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:52.247]             base::sink(type = "output", split = FALSE)
[13:22:52.247]             base::close(...future.stdout)
[13:22:52.247]         }, add = TRUE)
[13:22:52.247]     }
[13:22:52.247]     ...future.frame <- base::sys.nframe()
[13:22:52.247]     ...future.conditions <- base::list()
[13:22:52.247]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:52.247]     if (FALSE) {
[13:22:52.247]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:52.247]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:52.247]     }
[13:22:52.247]     ...future.result <- base::tryCatch({
[13:22:52.247]         base::withCallingHandlers({
[13:22:52.247]             ...future.value <- base::withVisible(base::local({
[13:22:52.247]                 ...future.makeSendCondition <- base::local({
[13:22:52.247]                   sendCondition <- NULL
[13:22:52.247]                   function(frame = 1L) {
[13:22:52.247]                     if (is.function(sendCondition)) 
[13:22:52.247]                       return(sendCondition)
[13:22:52.247]                     ns <- getNamespace("parallel")
[13:22:52.247]                     if (exists("sendData", mode = "function", 
[13:22:52.247]                       envir = ns)) {
[13:22:52.247]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:52.247]                         envir = ns)
[13:22:52.247]                       envir <- sys.frame(frame)
[13:22:52.247]                       master <- NULL
[13:22:52.247]                       while (!identical(envir, .GlobalEnv) && 
[13:22:52.247]                         !identical(envir, emptyenv())) {
[13:22:52.247]                         if (exists("master", mode = "list", envir = envir, 
[13:22:52.247]                           inherits = FALSE)) {
[13:22:52.247]                           master <- get("master", mode = "list", 
[13:22:52.247]                             envir = envir, inherits = FALSE)
[13:22:52.247]                           if (inherits(master, c("SOCKnode", 
[13:22:52.247]                             "SOCK0node"))) {
[13:22:52.247]                             sendCondition <<- function(cond) {
[13:22:52.247]                               data <- list(type = "VALUE", value = cond, 
[13:22:52.247]                                 success = TRUE)
[13:22:52.247]                               parallel_sendData(master, data)
[13:22:52.247]                             }
[13:22:52.247]                             return(sendCondition)
[13:22:52.247]                           }
[13:22:52.247]                         }
[13:22:52.247]                         frame <- frame + 1L
[13:22:52.247]                         envir <- sys.frame(frame)
[13:22:52.247]                       }
[13:22:52.247]                     }
[13:22:52.247]                     sendCondition <<- function(cond) NULL
[13:22:52.247]                   }
[13:22:52.247]                 })
[13:22:52.247]                 withCallingHandlers({
[13:22:52.247]                   {
[13:22:52.247]                     42
[13:22:52.247]                   }
[13:22:52.247]                 }, immediateCondition = function(cond) {
[13:22:52.247]                   sendCondition <- ...future.makeSendCondition()
[13:22:52.247]                   sendCondition(cond)
[13:22:52.247]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.247]                   {
[13:22:52.247]                     inherits <- base::inherits
[13:22:52.247]                     invokeRestart <- base::invokeRestart
[13:22:52.247]                     is.null <- base::is.null
[13:22:52.247]                     muffled <- FALSE
[13:22:52.247]                     if (inherits(cond, "message")) {
[13:22:52.247]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:52.247]                       if (muffled) 
[13:22:52.247]                         invokeRestart("muffleMessage")
[13:22:52.247]                     }
[13:22:52.247]                     else if (inherits(cond, "warning")) {
[13:22:52.247]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:52.247]                       if (muffled) 
[13:22:52.247]                         invokeRestart("muffleWarning")
[13:22:52.247]                     }
[13:22:52.247]                     else if (inherits(cond, "condition")) {
[13:22:52.247]                       if (!is.null(pattern)) {
[13:22:52.247]                         computeRestarts <- base::computeRestarts
[13:22:52.247]                         grepl <- base::grepl
[13:22:52.247]                         restarts <- computeRestarts(cond)
[13:22:52.247]                         for (restart in restarts) {
[13:22:52.247]                           name <- restart$name
[13:22:52.247]                           if (is.null(name)) 
[13:22:52.247]                             next
[13:22:52.247]                           if (!grepl(pattern, name)) 
[13:22:52.247]                             next
[13:22:52.247]                           invokeRestart(restart)
[13:22:52.247]                           muffled <- TRUE
[13:22:52.247]                           break
[13:22:52.247]                         }
[13:22:52.247]                       }
[13:22:52.247]                     }
[13:22:52.247]                     invisible(muffled)
[13:22:52.247]                   }
[13:22:52.247]                   muffleCondition(cond)
[13:22:52.247]                 })
[13:22:52.247]             }))
[13:22:52.247]             future::FutureResult(value = ...future.value$value, 
[13:22:52.247]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.247]                   ...future.rng), globalenv = if (FALSE) 
[13:22:52.247]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:52.247]                     ...future.globalenv.names))
[13:22:52.247]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:52.247]         }, condition = base::local({
[13:22:52.247]             c <- base::c
[13:22:52.247]             inherits <- base::inherits
[13:22:52.247]             invokeRestart <- base::invokeRestart
[13:22:52.247]             length <- base::length
[13:22:52.247]             list <- base::list
[13:22:52.247]             seq.int <- base::seq.int
[13:22:52.247]             signalCondition <- base::signalCondition
[13:22:52.247]             sys.calls <- base::sys.calls
[13:22:52.247]             `[[` <- base::`[[`
[13:22:52.247]             `+` <- base::`+`
[13:22:52.247]             `<<-` <- base::`<<-`
[13:22:52.247]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:52.247]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:52.247]                   3L)]
[13:22:52.247]             }
[13:22:52.247]             function(cond) {
[13:22:52.247]                 is_error <- inherits(cond, "error")
[13:22:52.247]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:52.247]                   NULL)
[13:22:52.247]                 if (is_error) {
[13:22:52.247]                   sessionInformation <- function() {
[13:22:52.247]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:52.247]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:52.247]                       search = base::search(), system = base::Sys.info())
[13:22:52.247]                   }
[13:22:52.247]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.247]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:52.247]                     cond$call), session = sessionInformation(), 
[13:22:52.247]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:52.247]                   signalCondition(cond)
[13:22:52.247]                 }
[13:22:52.247]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:52.247]                 "immediateCondition"))) {
[13:22:52.247]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:52.247]                   ...future.conditions[[length(...future.conditions) + 
[13:22:52.247]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:52.247]                   if (TRUE && !signal) {
[13:22:52.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.247]                     {
[13:22:52.247]                       inherits <- base::inherits
[13:22:52.247]                       invokeRestart <- base::invokeRestart
[13:22:52.247]                       is.null <- base::is.null
[13:22:52.247]                       muffled <- FALSE
[13:22:52.247]                       if (inherits(cond, "message")) {
[13:22:52.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.247]                         if (muffled) 
[13:22:52.247]                           invokeRestart("muffleMessage")
[13:22:52.247]                       }
[13:22:52.247]                       else if (inherits(cond, "warning")) {
[13:22:52.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.247]                         if (muffled) 
[13:22:52.247]                           invokeRestart("muffleWarning")
[13:22:52.247]                       }
[13:22:52.247]                       else if (inherits(cond, "condition")) {
[13:22:52.247]                         if (!is.null(pattern)) {
[13:22:52.247]                           computeRestarts <- base::computeRestarts
[13:22:52.247]                           grepl <- base::grepl
[13:22:52.247]                           restarts <- computeRestarts(cond)
[13:22:52.247]                           for (restart in restarts) {
[13:22:52.247]                             name <- restart$name
[13:22:52.247]                             if (is.null(name)) 
[13:22:52.247]                               next
[13:22:52.247]                             if (!grepl(pattern, name)) 
[13:22:52.247]                               next
[13:22:52.247]                             invokeRestart(restart)
[13:22:52.247]                             muffled <- TRUE
[13:22:52.247]                             break
[13:22:52.247]                           }
[13:22:52.247]                         }
[13:22:52.247]                       }
[13:22:52.247]                       invisible(muffled)
[13:22:52.247]                     }
[13:22:52.247]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.247]                   }
[13:22:52.247]                 }
[13:22:52.247]                 else {
[13:22:52.247]                   if (TRUE) {
[13:22:52.247]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:52.247]                     {
[13:22:52.247]                       inherits <- base::inherits
[13:22:52.247]                       invokeRestart <- base::invokeRestart
[13:22:52.247]                       is.null <- base::is.null
[13:22:52.247]                       muffled <- FALSE
[13:22:52.247]                       if (inherits(cond, "message")) {
[13:22:52.247]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:52.247]                         if (muffled) 
[13:22:52.247]                           invokeRestart("muffleMessage")
[13:22:52.247]                       }
[13:22:52.247]                       else if (inherits(cond, "warning")) {
[13:22:52.247]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:52.247]                         if (muffled) 
[13:22:52.247]                           invokeRestart("muffleWarning")
[13:22:52.247]                       }
[13:22:52.247]                       else if (inherits(cond, "condition")) {
[13:22:52.247]                         if (!is.null(pattern)) {
[13:22:52.247]                           computeRestarts <- base::computeRestarts
[13:22:52.247]                           grepl <- base::grepl
[13:22:52.247]                           restarts <- computeRestarts(cond)
[13:22:52.247]                           for (restart in restarts) {
[13:22:52.247]                             name <- restart$name
[13:22:52.247]                             if (is.null(name)) 
[13:22:52.247]                               next
[13:22:52.247]                             if (!grepl(pattern, name)) 
[13:22:52.247]                               next
[13:22:52.247]                             invokeRestart(restart)
[13:22:52.247]                             muffled <- TRUE
[13:22:52.247]                             break
[13:22:52.247]                           }
[13:22:52.247]                         }
[13:22:52.247]                       }
[13:22:52.247]                       invisible(muffled)
[13:22:52.247]                     }
[13:22:52.247]                     muffleCondition(cond, pattern = "^muffle")
[13:22:52.247]                   }
[13:22:52.247]                 }
[13:22:52.247]             }
[13:22:52.247]         }))
[13:22:52.247]     }, error = function(ex) {
[13:22:52.247]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:52.247]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:52.247]                 ...future.rng), started = ...future.startTime, 
[13:22:52.247]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:52.247]             version = "1.8"), class = "FutureResult")
[13:22:52.247]     }, finally = {
[13:22:52.247]         if (!identical(...future.workdir, getwd())) 
[13:22:52.247]             setwd(...future.workdir)
[13:22:52.247]         {
[13:22:52.247]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:52.247]                 ...future.oldOptions$nwarnings <- NULL
[13:22:52.247]             }
[13:22:52.247]             base::options(...future.oldOptions)
[13:22:52.247]             if (.Platform$OS.type == "windows") {
[13:22:52.247]                 old_names <- names(...future.oldEnvVars)
[13:22:52.247]                 envs <- base::Sys.getenv()
[13:22:52.247]                 names <- names(envs)
[13:22:52.247]                 common <- intersect(names, old_names)
[13:22:52.247]                 added <- setdiff(names, old_names)
[13:22:52.247]                 removed <- setdiff(old_names, names)
[13:22:52.247]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:52.247]                   envs[common]]
[13:22:52.247]                 NAMES <- toupper(changed)
[13:22:52.247]                 args <- list()
[13:22:52.247]                 for (kk in seq_along(NAMES)) {
[13:22:52.247]                   name <- changed[[kk]]
[13:22:52.247]                   NAME <- NAMES[[kk]]
[13:22:52.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.247]                     next
[13:22:52.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.247]                 }
[13:22:52.247]                 NAMES <- toupper(added)
[13:22:52.247]                 for (kk in seq_along(NAMES)) {
[13:22:52.247]                   name <- added[[kk]]
[13:22:52.247]                   NAME <- NAMES[[kk]]
[13:22:52.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.247]                     next
[13:22:52.247]                   args[[name]] <- ""
[13:22:52.247]                 }
[13:22:52.247]                 NAMES <- toupper(removed)
[13:22:52.247]                 for (kk in seq_along(NAMES)) {
[13:22:52.247]                   name <- removed[[kk]]
[13:22:52.247]                   NAME <- NAMES[[kk]]
[13:22:52.247]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:52.247]                     next
[13:22:52.247]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:52.247]                 }
[13:22:52.247]                 if (length(args) > 0) 
[13:22:52.247]                   base::do.call(base::Sys.setenv, args = args)
[13:22:52.247]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:52.247]             }
[13:22:52.247]             else {
[13:22:52.247]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:52.247]             }
[13:22:52.247]             {
[13:22:52.247]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:52.247]                   0L) {
[13:22:52.247]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:52.247]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:52.247]                   base::options(opts)
[13:22:52.247]                 }
[13:22:52.247]                 {
[13:22:52.247]                   {
[13:22:52.247]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:52.247]                     NULL
[13:22:52.247]                   }
[13:22:52.247]                   options(future.plan = NULL)
[13:22:52.247]                   if (is.na(NA_character_)) 
[13:22:52.247]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:52.247]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:52.247]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:52.247]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:52.247]                     envir = parent.frame()) 
[13:22:52.247]                   {
[13:22:52.247]                     if (is.function(workers)) 
[13:22:52.247]                       workers <- workers()
[13:22:52.247]                     workers <- structure(as.integer(workers), 
[13:22:52.247]                       class = class(workers))
[13:22:52.247]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:52.247]                       workers >= 1)
[13:22:52.247]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:52.247]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:52.247]                     }
[13:22:52.247]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:52.247]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:52.247]                       envir = envir)
[13:22:52.247]                     if (!future$lazy) 
[13:22:52.247]                       future <- run(future)
[13:22:52.247]                     invisible(future)
[13:22:52.247]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:52.247]                 }
[13:22:52.247]             }
[13:22:52.247]         }
[13:22:52.247]     })
[13:22:52.247]     if (TRUE) {
[13:22:52.247]         base::sink(type = "output", split = FALSE)
[13:22:52.247]         if (TRUE) {
[13:22:52.247]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:52.247]         }
[13:22:52.247]         else {
[13:22:52.247]             ...future.result["stdout"] <- base::list(NULL)
[13:22:52.247]         }
[13:22:52.247]         base::close(...future.stdout)
[13:22:52.247]         ...future.stdout <- NULL
[13:22:52.247]     }
[13:22:52.247]     ...future.result$conditions <- ...future.conditions
[13:22:52.247]     ...future.result$finished <- base::Sys.time()
[13:22:52.247]     ...future.result
[13:22:52.247] }
[13:22:52.250] MultisessionFuture started
[13:22:52.250] - Launch lazy future ... done
[13:22:52.251] run() for ‘MultisessionFuture’ ... done
MultisessionFuture:
Label: ‘strategy = multisession’
Expression:
{
    42
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 5bd9ddd8-d2a7-6c26-088b-79b28e639ed6
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:52.262] result() for ClusterFuture ...
[13:22:52.262] receiveMessageFromWorker() for ClusterFuture ...
[13:22:52.262] - Validating connection of MultisessionFuture
[13:22:52.297] - received message: FutureResult
[13:22:52.298] - Received FutureResult
[13:22:52.298] - Erased future from FutureRegistry
[13:22:52.298] result() for ClusterFuture ...
[13:22:52.298] - result already collected: FutureResult
[13:22:52.298] result() for ClusterFuture ... done
[13:22:52.298] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:52.298] result() for ClusterFuture ... done
[13:22:52.299] result() for ClusterFuture ...
[13:22:52.299] - result already collected: FutureResult
[13:22:52.299] result() for ClusterFuture ... done
- plan('multisession') ... DONE
> 
> message("*** Futures - labels ... DONE")
*** Futures - labels ... DONE
> 
> source("incl/end.R")
[13:22:52.300] plan(): Setting new future strategy stack:
[13:22:52.300] List of future strategies:
[13:22:52.300] 1. FutureStrategy:
[13:22:52.300]    - args: function (..., envir = parent.frame())
[13:22:52.300]    - tweaked: FALSE
[13:22:52.300]    - call: future::plan(oplan)
[13:22:52.301] plan(): nbrOfWorkers() = 1
> 
