
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:03:55.942] plan(): Setting new future strategy stack:
[16:03:55.942] List of future strategies:
[16:03:55.942] 1. sequential:
[16:03:55.942]    - args: function (..., envir = parent.frame())
[16:03:55.942]    - tweaked: FALSE
[16:03:55.942]    - call: future::plan("sequential")
[16:03:55.955] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[16:03:55.966] getGlobalsAndPackages() ...
[16:03:55.966] Searching for globals...
[16:03:55.972] - globals found: [2] ‘{’, ‘stop’
[16:03:55.972] Searching for globals ... DONE
[16:03:55.973] Resolving globals: FALSE
[16:03:55.973] 
[16:03:55.973] 
[16:03:55.973] getGlobalsAndPackages() ... DONE
[16:03:55.974] run() for ‘Future’ ...
[16:03:55.974] - state: ‘created’
[16:03:55.974] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:55.975] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:55.975] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:55.975]   - Field: ‘label’
[16:03:55.975]   - Field: ‘local’
[16:03:55.975]   - Field: ‘owner’
[16:03:55.975]   - Field: ‘envir’
[16:03:55.975]   - Field: ‘packages’
[16:03:55.975]   - Field: ‘gc’
[16:03:55.975]   - Field: ‘conditions’
[16:03:55.976]   - Field: ‘expr’
[16:03:55.976]   - Field: ‘uuid’
[16:03:55.976]   - Field: ‘seed’
[16:03:55.976]   - Field: ‘version’
[16:03:55.976]   - Field: ‘result’
[16:03:55.976]   - Field: ‘asynchronous’
[16:03:55.976]   - Field: ‘calls’
[16:03:55.976]   - Field: ‘globals’
[16:03:55.976]   - Field: ‘stdout’
[16:03:55.976]   - Field: ‘earlySignal’
[16:03:55.976]   - Field: ‘lazy’
[16:03:55.976]   - Field: ‘state’
[16:03:55.977] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:55.977] - Launch lazy future ...
[16:03:55.977] Packages needed by the future expression (n = 0): <none>
[16:03:55.978] Packages needed by future strategies (n = 0): <none>
[16:03:55.978] {
[16:03:55.978]     {
[16:03:55.978]         {
[16:03:55.978]             ...future.startTime <- base::Sys.time()
[16:03:55.978]             {
[16:03:55.978]                 {
[16:03:55.978]                   {
[16:03:55.978]                     base::local({
[16:03:55.978]                       has_future <- base::requireNamespace("future", 
[16:03:55.978]                         quietly = TRUE)
[16:03:55.978]                       if (has_future) {
[16:03:55.978]                         ns <- base::getNamespace("future")
[16:03:55.978]                         version <- ns[[".package"]][["version"]]
[16:03:55.978]                         if (is.null(version)) 
[16:03:55.978]                           version <- utils::packageVersion("future")
[16:03:55.978]                       }
[16:03:55.978]                       else {
[16:03:55.978]                         version <- NULL
[16:03:55.978]                       }
[16:03:55.978]                       if (!has_future || version < "1.8.0") {
[16:03:55.978]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:55.978]                           "", base::R.version$version.string), 
[16:03:55.978]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:55.978]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:55.978]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:55.978]                             "release", "version")], collapse = " "), 
[16:03:55.978]                           hostname = base::Sys.info()[["nodename"]])
[16:03:55.978]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:55.978]                           info)
[16:03:55.978]                         info <- base::paste(info, collapse = "; ")
[16:03:55.978]                         if (!has_future) {
[16:03:55.978]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:55.978]                             info)
[16:03:55.978]                         }
[16:03:55.978]                         else {
[16:03:55.978]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:55.978]                             info, version)
[16:03:55.978]                         }
[16:03:55.978]                         base::stop(msg)
[16:03:55.978]                       }
[16:03:55.978]                     })
[16:03:55.978]                   }
[16:03:55.978]                   options(future.plan = NULL)
[16:03:55.978]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:55.978]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:55.978]                 }
[16:03:55.978]                 ...future.workdir <- getwd()
[16:03:55.978]             }
[16:03:55.978]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:55.978]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:55.978]         }
[16:03:55.978]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:55.978]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:55.978]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:55.978]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:55.978]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:55.978]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:55.978]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:55.978]             base::names(...future.oldOptions))
[16:03:55.978]     }
[16:03:55.978]     if (FALSE) {
[16:03:55.978]     }
[16:03:55.978]     else {
[16:03:55.978]         if (TRUE) {
[16:03:55.978]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:55.978]                 open = "w")
[16:03:55.978]         }
[16:03:55.978]         else {
[16:03:55.978]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:55.978]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:55.978]         }
[16:03:55.978]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:55.978]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:55.978]             base::sink(type = "output", split = FALSE)
[16:03:55.978]             base::close(...future.stdout)
[16:03:55.978]         }, add = TRUE)
[16:03:55.978]     }
[16:03:55.978]     ...future.frame <- base::sys.nframe()
[16:03:55.978]     ...future.conditions <- base::list()
[16:03:55.978]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:55.978]     if (FALSE) {
[16:03:55.978]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:55.978]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:55.978]     }
[16:03:55.978]     ...future.result <- base::tryCatch({
[16:03:55.978]         base::withCallingHandlers({
[16:03:55.978]             ...future.value <- base::withVisible(base::local({
[16:03:55.978]                 42L
[16:03:55.978]                 stop("Woops")
[16:03:55.978]             }))
[16:03:55.978]             future::FutureResult(value = ...future.value$value, 
[16:03:55.978]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:55.978]                   ...future.rng), globalenv = if (FALSE) 
[16:03:55.978]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:55.978]                     ...future.globalenv.names))
[16:03:55.978]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:55.978]         }, condition = base::local({
[16:03:55.978]             c <- base::c
[16:03:55.978]             inherits <- base::inherits
[16:03:55.978]             invokeRestart <- base::invokeRestart
[16:03:55.978]             length <- base::length
[16:03:55.978]             list <- base::list
[16:03:55.978]             seq.int <- base::seq.int
[16:03:55.978]             signalCondition <- base::signalCondition
[16:03:55.978]             sys.calls <- base::sys.calls
[16:03:55.978]             `[[` <- base::`[[`
[16:03:55.978]             `+` <- base::`+`
[16:03:55.978]             `<<-` <- base::`<<-`
[16:03:55.978]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:55.978]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:55.978]                   3L)]
[16:03:55.978]             }
[16:03:55.978]             function(cond) {
[16:03:55.978]                 is_error <- inherits(cond, "error")
[16:03:55.978]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:55.978]                   NULL)
[16:03:55.978]                 if (is_error) {
[16:03:55.978]                   sessionInformation <- function() {
[16:03:55.978]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:55.978]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:55.978]                       search = base::search(), system = base::Sys.info())
[16:03:55.978]                   }
[16:03:55.978]                   ...future.conditions[[length(...future.conditions) + 
[16:03:55.978]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:55.978]                     cond$call), session = sessionInformation(), 
[16:03:55.978]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:55.978]                   signalCondition(cond)
[16:03:55.978]                 }
[16:03:55.978]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:55.978]                 "immediateCondition"))) {
[16:03:55.978]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:55.978]                   ...future.conditions[[length(...future.conditions) + 
[16:03:55.978]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:55.978]                   if (TRUE && !signal) {
[16:03:55.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:55.978]                     {
[16:03:55.978]                       inherits <- base::inherits
[16:03:55.978]                       invokeRestart <- base::invokeRestart
[16:03:55.978]                       is.null <- base::is.null
[16:03:55.978]                       muffled <- FALSE
[16:03:55.978]                       if (inherits(cond, "message")) {
[16:03:55.978]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:55.978]                         if (muffled) 
[16:03:55.978]                           invokeRestart("muffleMessage")
[16:03:55.978]                       }
[16:03:55.978]                       else if (inherits(cond, "warning")) {
[16:03:55.978]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:55.978]                         if (muffled) 
[16:03:55.978]                           invokeRestart("muffleWarning")
[16:03:55.978]                       }
[16:03:55.978]                       else if (inherits(cond, "condition")) {
[16:03:55.978]                         if (!is.null(pattern)) {
[16:03:55.978]                           computeRestarts <- base::computeRestarts
[16:03:55.978]                           grepl <- base::grepl
[16:03:55.978]                           restarts <- computeRestarts(cond)
[16:03:55.978]                           for (restart in restarts) {
[16:03:55.978]                             name <- restart$name
[16:03:55.978]                             if (is.null(name)) 
[16:03:55.978]                               next
[16:03:55.978]                             if (!grepl(pattern, name)) 
[16:03:55.978]                               next
[16:03:55.978]                             invokeRestart(restart)
[16:03:55.978]                             muffled <- TRUE
[16:03:55.978]                             break
[16:03:55.978]                           }
[16:03:55.978]                         }
[16:03:55.978]                       }
[16:03:55.978]                       invisible(muffled)
[16:03:55.978]                     }
[16:03:55.978]                     muffleCondition(cond, pattern = "^muffle")
[16:03:55.978]                   }
[16:03:55.978]                 }
[16:03:55.978]                 else {
[16:03:55.978]                   if (TRUE) {
[16:03:55.978]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:55.978]                     {
[16:03:55.978]                       inherits <- base::inherits
[16:03:55.978]                       invokeRestart <- base::invokeRestart
[16:03:55.978]                       is.null <- base::is.null
[16:03:55.978]                       muffled <- FALSE
[16:03:55.978]                       if (inherits(cond, "message")) {
[16:03:55.978]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:55.978]                         if (muffled) 
[16:03:55.978]                           invokeRestart("muffleMessage")
[16:03:55.978]                       }
[16:03:55.978]                       else if (inherits(cond, "warning")) {
[16:03:55.978]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:55.978]                         if (muffled) 
[16:03:55.978]                           invokeRestart("muffleWarning")
[16:03:55.978]                       }
[16:03:55.978]                       else if (inherits(cond, "condition")) {
[16:03:55.978]                         if (!is.null(pattern)) {
[16:03:55.978]                           computeRestarts <- base::computeRestarts
[16:03:55.978]                           grepl <- base::grepl
[16:03:55.978]                           restarts <- computeRestarts(cond)
[16:03:55.978]                           for (restart in restarts) {
[16:03:55.978]                             name <- restart$name
[16:03:55.978]                             if (is.null(name)) 
[16:03:55.978]                               next
[16:03:55.978]                             if (!grepl(pattern, name)) 
[16:03:55.978]                               next
[16:03:55.978]                             invokeRestart(restart)
[16:03:55.978]                             muffled <- TRUE
[16:03:55.978]                             break
[16:03:55.978]                           }
[16:03:55.978]                         }
[16:03:55.978]                       }
[16:03:55.978]                       invisible(muffled)
[16:03:55.978]                     }
[16:03:55.978]                     muffleCondition(cond, pattern = "^muffle")
[16:03:55.978]                   }
[16:03:55.978]                 }
[16:03:55.978]             }
[16:03:55.978]         }))
[16:03:55.978]     }, error = function(ex) {
[16:03:55.978]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:55.978]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:55.978]                 ...future.rng), started = ...future.startTime, 
[16:03:55.978]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:55.978]             version = "1.8"), class = "FutureResult")
[16:03:55.978]     }, finally = {
[16:03:55.978]         if (!identical(...future.workdir, getwd())) 
[16:03:55.978]             setwd(...future.workdir)
[16:03:55.978]         {
[16:03:55.978]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:55.978]                 ...future.oldOptions$nwarnings <- NULL
[16:03:55.978]             }
[16:03:55.978]             base::options(...future.oldOptions)
[16:03:55.978]             if (.Platform$OS.type == "windows") {
[16:03:55.978]                 old_names <- names(...future.oldEnvVars)
[16:03:55.978]                 envs <- base::Sys.getenv()
[16:03:55.978]                 names <- names(envs)
[16:03:55.978]                 common <- intersect(names, old_names)
[16:03:55.978]                 added <- setdiff(names, old_names)
[16:03:55.978]                 removed <- setdiff(old_names, names)
[16:03:55.978]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:55.978]                   envs[common]]
[16:03:55.978]                 NAMES <- toupper(changed)
[16:03:55.978]                 args <- list()
[16:03:55.978]                 for (kk in seq_along(NAMES)) {
[16:03:55.978]                   name <- changed[[kk]]
[16:03:55.978]                   NAME <- NAMES[[kk]]
[16:03:55.978]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.978]                     next
[16:03:55.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:55.978]                 }
[16:03:55.978]                 NAMES <- toupper(added)
[16:03:55.978]                 for (kk in seq_along(NAMES)) {
[16:03:55.978]                   name <- added[[kk]]
[16:03:55.978]                   NAME <- NAMES[[kk]]
[16:03:55.978]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.978]                     next
[16:03:55.978]                   args[[name]] <- ""
[16:03:55.978]                 }
[16:03:55.978]                 NAMES <- toupper(removed)
[16:03:55.978]                 for (kk in seq_along(NAMES)) {
[16:03:55.978]                   name <- removed[[kk]]
[16:03:55.978]                   NAME <- NAMES[[kk]]
[16:03:55.978]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.978]                     next
[16:03:55.978]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:55.978]                 }
[16:03:55.978]                 if (length(args) > 0) 
[16:03:55.978]                   base::do.call(base::Sys.setenv, args = args)
[16:03:55.978]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:55.978]             }
[16:03:55.978]             else {
[16:03:55.978]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:55.978]             }
[16:03:55.978]             {
[16:03:55.978]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:55.978]                   0L) {
[16:03:55.978]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:55.978]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:55.978]                   base::options(opts)
[16:03:55.978]                 }
[16:03:55.978]                 {
[16:03:55.978]                   {
[16:03:55.978]                     NULL
[16:03:55.978]                     RNGkind("Mersenne-Twister")
[16:03:55.978]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:55.978]                       inherits = FALSE)
[16:03:55.978]                   }
[16:03:55.978]                   options(future.plan = NULL)
[16:03:55.978]                   if (is.na(NA_character_)) 
[16:03:55.978]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:55.978]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:55.978]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:55.978]                   {
[16:03:55.978]                     future <- SequentialFuture(..., envir = envir)
[16:03:55.978]                     if (!future$lazy) 
[16:03:55.978]                       future <- run(future)
[16:03:55.978]                     invisible(future)
[16:03:55.978]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:55.978]                 }
[16:03:55.978]             }
[16:03:55.978]         }
[16:03:55.978]     })
[16:03:55.978]     if (TRUE) {
[16:03:55.978]         base::sink(type = "output", split = FALSE)
[16:03:55.978]         if (TRUE) {
[16:03:55.978]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:55.978]         }
[16:03:55.978]         else {
[16:03:55.978]             ...future.result["stdout"] <- base::list(NULL)
[16:03:55.978]         }
[16:03:55.978]         base::close(...future.stdout)
[16:03:55.978]         ...future.stdout <- NULL
[16:03:55.978]     }
[16:03:55.978]     ...future.result$conditions <- ...future.conditions
[16:03:55.978]     ...future.result$finished <- base::Sys.time()
[16:03:55.978]     ...future.result
[16:03:55.978] }
[16:03:55.980] plan(): Setting new future strategy stack:
[16:03:55.980] List of future strategies:
[16:03:55.980] 1. sequential:
[16:03:55.980]    - args: function (..., envir = parent.frame())
[16:03:55.980]    - tweaked: FALSE
[16:03:55.980]    - call: NULL
[16:03:55.981] plan(): nbrOfWorkers() = 1
[16:03:55.982] plan(): Setting new future strategy stack:
[16:03:55.982] List of future strategies:
[16:03:55.982] 1. sequential:
[16:03:55.982]    - args: function (..., envir = parent.frame())
[16:03:55.982]    - tweaked: FALSE
[16:03:55.982]    - call: future::plan("sequential")
[16:03:55.982] plan(): nbrOfWorkers() = 1
[16:03:55.982] SequentialFuture started (and completed)
[16:03:55.983] signalConditions() ...
[16:03:55.983]  - include = ‘immediateCondition’
[16:03:55.983]  - exclude = 
[16:03:55.983]  - resignal = FALSE
[16:03:55.983]  - Number of conditions: 1
[16:03:55.983] signalConditions() ... done
[16:03:55.983] - Launch lazy future ... done
[16:03:55.983] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:03:55.984] signalConditions() ...
[16:03:55.984]  - include = ‘immediateCondition’
[16:03:55.984]  - exclude = 
[16:03:55.984]  - resignal = FALSE
[16:03:55.984]  - Number of conditions: 1
[16:03:55.984] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[16:03:55.986] resolved() for ‘SequentialFuture’ ...
[16:03:55.986] - state: ‘finished’
[16:03:55.986] - run: TRUE
[16:03:55.986] - result: ‘FutureResult’
[16:03:55.986] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[16:03:55.987] getGlobalsAndPackages() ...
[16:03:55.987] Searching for globals...
[16:03:55.988] - globals found: [2] ‘{’, ‘stop’
[16:03:55.988] Searching for globals ... DONE
[16:03:55.988] Resolving globals: FALSE
[16:03:55.988] 
[16:03:55.988] 
[16:03:55.988] getGlobalsAndPackages() ... DONE
[16:03:55.989] run() for ‘Future’ ...
[16:03:55.989] - state: ‘created’
[16:03:55.989] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:55.989] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:55.989] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:55.989]   - Field: ‘label’
[16:03:55.989]   - Field: ‘local’
[16:03:55.989]   - Field: ‘owner’
[16:03:55.989]   - Field: ‘envir’
[16:03:55.990]   - Field: ‘packages’
[16:03:55.990]   - Field: ‘gc’
[16:03:55.990]   - Field: ‘conditions’
[16:03:55.990]   - Field: ‘expr’
[16:03:55.990]   - Field: ‘uuid’
[16:03:55.990]   - Field: ‘seed’
[16:03:55.990]   - Field: ‘version’
[16:03:55.990]   - Field: ‘result’
[16:03:55.990]   - Field: ‘asynchronous’
[16:03:55.990]   - Field: ‘calls’
[16:03:55.990]   - Field: ‘globals’
[16:03:55.991]   - Field: ‘stdout’
[16:03:55.991]   - Field: ‘earlySignal’
[16:03:55.991]   - Field: ‘lazy’
[16:03:55.991]   - Field: ‘state’
[16:03:55.991] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:55.991] - Launch lazy future ...
[16:03:55.991] Packages needed by the future expression (n = 0): <none>
[16:03:55.991] Packages needed by future strategies (n = 0): <none>
[16:03:55.992] {
[16:03:55.992]     {
[16:03:55.992]         {
[16:03:55.992]             ...future.startTime <- base::Sys.time()
[16:03:55.992]             {
[16:03:55.992]                 {
[16:03:55.992]                   {
[16:03:55.992]                     base::local({
[16:03:55.992]                       has_future <- base::requireNamespace("future", 
[16:03:55.992]                         quietly = TRUE)
[16:03:55.992]                       if (has_future) {
[16:03:55.992]                         ns <- base::getNamespace("future")
[16:03:55.992]                         version <- ns[[".package"]][["version"]]
[16:03:55.992]                         if (is.null(version)) 
[16:03:55.992]                           version <- utils::packageVersion("future")
[16:03:55.992]                       }
[16:03:55.992]                       else {
[16:03:55.992]                         version <- NULL
[16:03:55.992]                       }
[16:03:55.992]                       if (!has_future || version < "1.8.0") {
[16:03:55.992]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:55.992]                           "", base::R.version$version.string), 
[16:03:55.992]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:55.992]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:55.992]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:55.992]                             "release", "version")], collapse = " "), 
[16:03:55.992]                           hostname = base::Sys.info()[["nodename"]])
[16:03:55.992]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:55.992]                           info)
[16:03:55.992]                         info <- base::paste(info, collapse = "; ")
[16:03:55.992]                         if (!has_future) {
[16:03:55.992]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:55.992]                             info)
[16:03:55.992]                         }
[16:03:55.992]                         else {
[16:03:55.992]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:55.992]                             info, version)
[16:03:55.992]                         }
[16:03:55.992]                         base::stop(msg)
[16:03:55.992]                       }
[16:03:55.992]                     })
[16:03:55.992]                   }
[16:03:55.992]                   options(future.plan = NULL)
[16:03:55.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:55.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:55.992]                 }
[16:03:55.992]                 ...future.workdir <- getwd()
[16:03:55.992]             }
[16:03:55.992]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:55.992]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:55.992]         }
[16:03:55.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:55.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:55.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:55.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:55.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:55.992]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:55.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:55.992]             base::names(...future.oldOptions))
[16:03:55.992]     }
[16:03:55.992]     if (FALSE) {
[16:03:55.992]     }
[16:03:55.992]     else {
[16:03:55.992]         if (TRUE) {
[16:03:55.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:55.992]                 open = "w")
[16:03:55.992]         }
[16:03:55.992]         else {
[16:03:55.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:55.992]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:55.992]         }
[16:03:55.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:55.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:55.992]             base::sink(type = "output", split = FALSE)
[16:03:55.992]             base::close(...future.stdout)
[16:03:55.992]         }, add = TRUE)
[16:03:55.992]     }
[16:03:55.992]     ...future.frame <- base::sys.nframe()
[16:03:55.992]     ...future.conditions <- base::list()
[16:03:55.992]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:55.992]     if (FALSE) {
[16:03:55.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:55.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:55.992]     }
[16:03:55.992]     ...future.result <- base::tryCatch({
[16:03:55.992]         base::withCallingHandlers({
[16:03:55.992]             ...future.value <- base::withVisible(base::local({
[16:03:55.992]                 42L
[16:03:55.992]                 stop("Woops")
[16:03:55.992]             }))
[16:03:55.992]             future::FutureResult(value = ...future.value$value, 
[16:03:55.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:55.992]                   ...future.rng), globalenv = if (FALSE) 
[16:03:55.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:55.992]                     ...future.globalenv.names))
[16:03:55.992]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:55.992]         }, condition = base::local({
[16:03:55.992]             c <- base::c
[16:03:55.992]             inherits <- base::inherits
[16:03:55.992]             invokeRestart <- base::invokeRestart
[16:03:55.992]             length <- base::length
[16:03:55.992]             list <- base::list
[16:03:55.992]             seq.int <- base::seq.int
[16:03:55.992]             signalCondition <- base::signalCondition
[16:03:55.992]             sys.calls <- base::sys.calls
[16:03:55.992]             `[[` <- base::`[[`
[16:03:55.992]             `+` <- base::`+`
[16:03:55.992]             `<<-` <- base::`<<-`
[16:03:55.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:55.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:55.992]                   3L)]
[16:03:55.992]             }
[16:03:55.992]             function(cond) {
[16:03:55.992]                 is_error <- inherits(cond, "error")
[16:03:55.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:55.992]                   NULL)
[16:03:55.992]                 if (is_error) {
[16:03:55.992]                   sessionInformation <- function() {
[16:03:55.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:55.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:55.992]                       search = base::search(), system = base::Sys.info())
[16:03:55.992]                   }
[16:03:55.992]                   ...future.conditions[[length(...future.conditions) + 
[16:03:55.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:55.992]                     cond$call), session = sessionInformation(), 
[16:03:55.992]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:55.992]                   signalCondition(cond)
[16:03:55.992]                 }
[16:03:55.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:55.992]                 "immediateCondition"))) {
[16:03:55.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:55.992]                   ...future.conditions[[length(...future.conditions) + 
[16:03:55.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:55.992]                   if (TRUE && !signal) {
[16:03:55.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:55.992]                     {
[16:03:55.992]                       inherits <- base::inherits
[16:03:55.992]                       invokeRestart <- base::invokeRestart
[16:03:55.992]                       is.null <- base::is.null
[16:03:55.992]                       muffled <- FALSE
[16:03:55.992]                       if (inherits(cond, "message")) {
[16:03:55.992]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:55.992]                         if (muffled) 
[16:03:55.992]                           invokeRestart("muffleMessage")
[16:03:55.992]                       }
[16:03:55.992]                       else if (inherits(cond, "warning")) {
[16:03:55.992]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:55.992]                         if (muffled) 
[16:03:55.992]                           invokeRestart("muffleWarning")
[16:03:55.992]                       }
[16:03:55.992]                       else if (inherits(cond, "condition")) {
[16:03:55.992]                         if (!is.null(pattern)) {
[16:03:55.992]                           computeRestarts <- base::computeRestarts
[16:03:55.992]                           grepl <- base::grepl
[16:03:55.992]                           restarts <- computeRestarts(cond)
[16:03:55.992]                           for (restart in restarts) {
[16:03:55.992]                             name <- restart$name
[16:03:55.992]                             if (is.null(name)) 
[16:03:55.992]                               next
[16:03:55.992]                             if (!grepl(pattern, name)) 
[16:03:55.992]                               next
[16:03:55.992]                             invokeRestart(restart)
[16:03:55.992]                             muffled <- TRUE
[16:03:55.992]                             break
[16:03:55.992]                           }
[16:03:55.992]                         }
[16:03:55.992]                       }
[16:03:55.992]                       invisible(muffled)
[16:03:55.992]                     }
[16:03:55.992]                     muffleCondition(cond, pattern = "^muffle")
[16:03:55.992]                   }
[16:03:55.992]                 }
[16:03:55.992]                 else {
[16:03:55.992]                   if (TRUE) {
[16:03:55.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:55.992]                     {
[16:03:55.992]                       inherits <- base::inherits
[16:03:55.992]                       invokeRestart <- base::invokeRestart
[16:03:55.992]                       is.null <- base::is.null
[16:03:55.992]                       muffled <- FALSE
[16:03:55.992]                       if (inherits(cond, "message")) {
[16:03:55.992]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:55.992]                         if (muffled) 
[16:03:55.992]                           invokeRestart("muffleMessage")
[16:03:55.992]                       }
[16:03:55.992]                       else if (inherits(cond, "warning")) {
[16:03:55.992]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:55.992]                         if (muffled) 
[16:03:55.992]                           invokeRestart("muffleWarning")
[16:03:55.992]                       }
[16:03:55.992]                       else if (inherits(cond, "condition")) {
[16:03:55.992]                         if (!is.null(pattern)) {
[16:03:55.992]                           computeRestarts <- base::computeRestarts
[16:03:55.992]                           grepl <- base::grepl
[16:03:55.992]                           restarts <- computeRestarts(cond)
[16:03:55.992]                           for (restart in restarts) {
[16:03:55.992]                             name <- restart$name
[16:03:55.992]                             if (is.null(name)) 
[16:03:55.992]                               next
[16:03:55.992]                             if (!grepl(pattern, name)) 
[16:03:55.992]                               next
[16:03:55.992]                             invokeRestart(restart)
[16:03:55.992]                             muffled <- TRUE
[16:03:55.992]                             break
[16:03:55.992]                           }
[16:03:55.992]                         }
[16:03:55.992]                       }
[16:03:55.992]                       invisible(muffled)
[16:03:55.992]                     }
[16:03:55.992]                     muffleCondition(cond, pattern = "^muffle")
[16:03:55.992]                   }
[16:03:55.992]                 }
[16:03:55.992]             }
[16:03:55.992]         }))
[16:03:55.992]     }, error = function(ex) {
[16:03:55.992]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:55.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:55.992]                 ...future.rng), started = ...future.startTime, 
[16:03:55.992]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:55.992]             version = "1.8"), class = "FutureResult")
[16:03:55.992]     }, finally = {
[16:03:55.992]         if (!identical(...future.workdir, getwd())) 
[16:03:55.992]             setwd(...future.workdir)
[16:03:55.992]         {
[16:03:55.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:55.992]                 ...future.oldOptions$nwarnings <- NULL
[16:03:55.992]             }
[16:03:55.992]             base::options(...future.oldOptions)
[16:03:55.992]             if (.Platform$OS.type == "windows") {
[16:03:55.992]                 old_names <- names(...future.oldEnvVars)
[16:03:55.992]                 envs <- base::Sys.getenv()
[16:03:55.992]                 names <- names(envs)
[16:03:55.992]                 common <- intersect(names, old_names)
[16:03:55.992]                 added <- setdiff(names, old_names)
[16:03:55.992]                 removed <- setdiff(old_names, names)
[16:03:55.992]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:55.992]                   envs[common]]
[16:03:55.992]                 NAMES <- toupper(changed)
[16:03:55.992]                 args <- list()
[16:03:55.992]                 for (kk in seq_along(NAMES)) {
[16:03:55.992]                   name <- changed[[kk]]
[16:03:55.992]                   NAME <- NAMES[[kk]]
[16:03:55.992]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.992]                     next
[16:03:55.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:55.992]                 }
[16:03:55.992]                 NAMES <- toupper(added)
[16:03:55.992]                 for (kk in seq_along(NAMES)) {
[16:03:55.992]                   name <- added[[kk]]
[16:03:55.992]                   NAME <- NAMES[[kk]]
[16:03:55.992]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.992]                     next
[16:03:55.992]                   args[[name]] <- ""
[16:03:55.992]                 }
[16:03:55.992]                 NAMES <- toupper(removed)
[16:03:55.992]                 for (kk in seq_along(NAMES)) {
[16:03:55.992]                   name <- removed[[kk]]
[16:03:55.992]                   NAME <- NAMES[[kk]]
[16:03:55.992]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:55.992]                     next
[16:03:55.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:55.992]                 }
[16:03:55.992]                 if (length(args) > 0) 
[16:03:55.992]                   base::do.call(base::Sys.setenv, args = args)
[16:03:55.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:55.992]             }
[16:03:55.992]             else {
[16:03:55.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:55.992]             }
[16:03:55.992]             {
[16:03:55.992]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:55.992]                   0L) {
[16:03:55.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:55.992]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:55.992]                   base::options(opts)
[16:03:55.992]                 }
[16:03:55.992]                 {
[16:03:55.992]                   {
[16:03:55.992]                     NULL
[16:03:55.992]                     RNGkind("Mersenne-Twister")
[16:03:55.992]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:55.992]                       inherits = FALSE)
[16:03:55.992]                   }
[16:03:55.992]                   options(future.plan = NULL)
[16:03:55.992]                   if (is.na(NA_character_)) 
[16:03:55.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:55.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:55.992]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:55.992]                   {
[16:03:55.992]                     future <- SequentialFuture(..., envir = envir)
[16:03:55.992]                     if (!future$lazy) 
[16:03:55.992]                       future <- run(future)
[16:03:55.992]                     invisible(future)
[16:03:55.992]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:55.992]                 }
[16:03:55.992]             }
[16:03:55.992]         }
[16:03:55.992]     })
[16:03:55.992]     if (TRUE) {
[16:03:55.992]         base::sink(type = "output", split = FALSE)
[16:03:55.992]         if (TRUE) {
[16:03:55.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:55.992]         }
[16:03:55.992]         else {
[16:03:55.992]             ...future.result["stdout"] <- base::list(NULL)
[16:03:55.992]         }
[16:03:55.992]         base::close(...future.stdout)
[16:03:55.992]         ...future.stdout <- NULL
[16:03:55.992]     }
[16:03:55.992]     ...future.result$conditions <- ...future.conditions
[16:03:55.992]     ...future.result$finished <- base::Sys.time()
[16:03:55.992]     ...future.result
[16:03:55.992] }
[16:03:55.993] plan(): Setting new future strategy stack:
[16:03:55.993] List of future strategies:
[16:03:55.993] 1. sequential:
[16:03:55.993]    - args: function (..., envir = parent.frame())
[16:03:55.993]    - tweaked: FALSE
[16:03:55.993]    - call: NULL
[16:03:55.994] plan(): nbrOfWorkers() = 1
[16:03:55.995] plan(): Setting new future strategy stack:
[16:03:55.995] List of future strategies:
[16:03:55.995] 1. sequential:
[16:03:55.995]    - args: function (..., envir = parent.frame())
[16:03:55.995]    - tweaked: FALSE
[16:03:55.995]    - call: future::plan("sequential")
[16:03:55.995] plan(): nbrOfWorkers() = 1
[16:03:55.995] SequentialFuture started (and completed)
[16:03:55.995] signalConditions() ...
[16:03:55.995]  - include = ‘immediateCondition’
[16:03:55.996]  - exclude = 
[16:03:55.996]  - resignal = FALSE
[16:03:55.996]  - Number of conditions: 1
[16:03:55.996] signalConditions() ... done
[16:03:55.996] - Launch lazy future ... done
[16:03:55.996] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[16:03:55.996] resolved() for ‘SequentialFuture’ ...
[16:03:55.996] - state: ‘finished’
[16:03:55.996] - run: TRUE
[16:03:55.997] - result: ‘FutureResult’
[16:03:55.997] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[16:03:55.997] getGlobalsAndPackages() ...
[16:03:55.998] Searching for globals...
[16:03:55.998] - globals found: [2] ‘{’, ‘stop’
[16:03:55.999] Searching for globals ... DONE
[16:03:55.999] Resolving globals: FALSE
[16:03:55.999] 
[16:03:55.999] 
[16:03:55.999] getGlobalsAndPackages() ... DONE
[16:03:55.999] run() for ‘Future’ ...
[16:03:56.000] - state: ‘created’
[16:03:56.000] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.002] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.002] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.002]   - Field: ‘label’
[16:03:56.002]   - Field: ‘local’
[16:03:56.002]   - Field: ‘owner’
[16:03:56.002]   - Field: ‘envir’
[16:03:56.002]   - Field: ‘packages’
[16:03:56.003]   - Field: ‘gc’
[16:03:56.003]   - Field: ‘conditions’
[16:03:56.003]   - Field: ‘expr’
[16:03:56.003]   - Field: ‘uuid’
[16:03:56.003]   - Field: ‘seed’
[16:03:56.003]   - Field: ‘version’
[16:03:56.003]   - Field: ‘result’
[16:03:56.003]   - Field: ‘asynchronous’
[16:03:56.003]   - Field: ‘calls’
[16:03:56.003]   - Field: ‘globals’
[16:03:56.003]   - Field: ‘stdout’
[16:03:56.004]   - Field: ‘earlySignal’
[16:03:56.004]   - Field: ‘lazy’
[16:03:56.004]   - Field: ‘state’
[16:03:56.004] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.004] - Launch lazy future ...
[16:03:56.004] Packages needed by the future expression (n = 0): <none>
[16:03:56.004] Packages needed by future strategies (n = 0): <none>
[16:03:56.005] {
[16:03:56.005]     {
[16:03:56.005]         {
[16:03:56.005]             ...future.startTime <- base::Sys.time()
[16:03:56.005]             {
[16:03:56.005]                 {
[16:03:56.005]                   {
[16:03:56.005]                     base::local({
[16:03:56.005]                       has_future <- base::requireNamespace("future", 
[16:03:56.005]                         quietly = TRUE)
[16:03:56.005]                       if (has_future) {
[16:03:56.005]                         ns <- base::getNamespace("future")
[16:03:56.005]                         version <- ns[[".package"]][["version"]]
[16:03:56.005]                         if (is.null(version)) 
[16:03:56.005]                           version <- utils::packageVersion("future")
[16:03:56.005]                       }
[16:03:56.005]                       else {
[16:03:56.005]                         version <- NULL
[16:03:56.005]                       }
[16:03:56.005]                       if (!has_future || version < "1.8.0") {
[16:03:56.005]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.005]                           "", base::R.version$version.string), 
[16:03:56.005]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.005]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.005]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.005]                             "release", "version")], collapse = " "), 
[16:03:56.005]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.005]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.005]                           info)
[16:03:56.005]                         info <- base::paste(info, collapse = "; ")
[16:03:56.005]                         if (!has_future) {
[16:03:56.005]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.005]                             info)
[16:03:56.005]                         }
[16:03:56.005]                         else {
[16:03:56.005]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.005]                             info, version)
[16:03:56.005]                         }
[16:03:56.005]                         base::stop(msg)
[16:03:56.005]                       }
[16:03:56.005]                     })
[16:03:56.005]                   }
[16:03:56.005]                   options(future.plan = NULL)
[16:03:56.005]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.005]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.005]                 }
[16:03:56.005]                 ...future.workdir <- getwd()
[16:03:56.005]             }
[16:03:56.005]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.005]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.005]         }
[16:03:56.005]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.005]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.005]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.005]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.005]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.005]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.005]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.005]             base::names(...future.oldOptions))
[16:03:56.005]     }
[16:03:56.005]     if (FALSE) {
[16:03:56.005]     }
[16:03:56.005]     else {
[16:03:56.005]         if (TRUE) {
[16:03:56.005]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.005]                 open = "w")
[16:03:56.005]         }
[16:03:56.005]         else {
[16:03:56.005]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.005]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.005]         }
[16:03:56.005]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.005]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.005]             base::sink(type = "output", split = FALSE)
[16:03:56.005]             base::close(...future.stdout)
[16:03:56.005]         }, add = TRUE)
[16:03:56.005]     }
[16:03:56.005]     ...future.frame <- base::sys.nframe()
[16:03:56.005]     ...future.conditions <- base::list()
[16:03:56.005]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.005]     if (FALSE) {
[16:03:56.005]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.005]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.005]     }
[16:03:56.005]     ...future.result <- base::tryCatch({
[16:03:56.005]         base::withCallingHandlers({
[16:03:56.005]             ...future.value <- base::withVisible(base::local({
[16:03:56.005]                 42L
[16:03:56.005]                 stop("Woops")
[16:03:56.005]             }))
[16:03:56.005]             future::FutureResult(value = ...future.value$value, 
[16:03:56.005]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.005]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.005]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.005]                     ...future.globalenv.names))
[16:03:56.005]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.005]         }, condition = base::local({
[16:03:56.005]             c <- base::c
[16:03:56.005]             inherits <- base::inherits
[16:03:56.005]             invokeRestart <- base::invokeRestart
[16:03:56.005]             length <- base::length
[16:03:56.005]             list <- base::list
[16:03:56.005]             seq.int <- base::seq.int
[16:03:56.005]             signalCondition <- base::signalCondition
[16:03:56.005]             sys.calls <- base::sys.calls
[16:03:56.005]             `[[` <- base::`[[`
[16:03:56.005]             `+` <- base::`+`
[16:03:56.005]             `<<-` <- base::`<<-`
[16:03:56.005]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.005]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.005]                   3L)]
[16:03:56.005]             }
[16:03:56.005]             function(cond) {
[16:03:56.005]                 is_error <- inherits(cond, "error")
[16:03:56.005]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.005]                   NULL)
[16:03:56.005]                 if (is_error) {
[16:03:56.005]                   sessionInformation <- function() {
[16:03:56.005]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.005]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.005]                       search = base::search(), system = base::Sys.info())
[16:03:56.005]                   }
[16:03:56.005]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.005]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.005]                     cond$call), session = sessionInformation(), 
[16:03:56.005]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.005]                   signalCondition(cond)
[16:03:56.005]                 }
[16:03:56.005]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.005]                 "immediateCondition"))) {
[16:03:56.005]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.005]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.005]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.005]                   if (TRUE && !signal) {
[16:03:56.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.005]                     {
[16:03:56.005]                       inherits <- base::inherits
[16:03:56.005]                       invokeRestart <- base::invokeRestart
[16:03:56.005]                       is.null <- base::is.null
[16:03:56.005]                       muffled <- FALSE
[16:03:56.005]                       if (inherits(cond, "message")) {
[16:03:56.005]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.005]                         if (muffled) 
[16:03:56.005]                           invokeRestart("muffleMessage")
[16:03:56.005]                       }
[16:03:56.005]                       else if (inherits(cond, "warning")) {
[16:03:56.005]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.005]                         if (muffled) 
[16:03:56.005]                           invokeRestart("muffleWarning")
[16:03:56.005]                       }
[16:03:56.005]                       else if (inherits(cond, "condition")) {
[16:03:56.005]                         if (!is.null(pattern)) {
[16:03:56.005]                           computeRestarts <- base::computeRestarts
[16:03:56.005]                           grepl <- base::grepl
[16:03:56.005]                           restarts <- computeRestarts(cond)
[16:03:56.005]                           for (restart in restarts) {
[16:03:56.005]                             name <- restart$name
[16:03:56.005]                             if (is.null(name)) 
[16:03:56.005]                               next
[16:03:56.005]                             if (!grepl(pattern, name)) 
[16:03:56.005]                               next
[16:03:56.005]                             invokeRestart(restart)
[16:03:56.005]                             muffled <- TRUE
[16:03:56.005]                             break
[16:03:56.005]                           }
[16:03:56.005]                         }
[16:03:56.005]                       }
[16:03:56.005]                       invisible(muffled)
[16:03:56.005]                     }
[16:03:56.005]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.005]                   }
[16:03:56.005]                 }
[16:03:56.005]                 else {
[16:03:56.005]                   if (TRUE) {
[16:03:56.005]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.005]                     {
[16:03:56.005]                       inherits <- base::inherits
[16:03:56.005]                       invokeRestart <- base::invokeRestart
[16:03:56.005]                       is.null <- base::is.null
[16:03:56.005]                       muffled <- FALSE
[16:03:56.005]                       if (inherits(cond, "message")) {
[16:03:56.005]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.005]                         if (muffled) 
[16:03:56.005]                           invokeRestart("muffleMessage")
[16:03:56.005]                       }
[16:03:56.005]                       else if (inherits(cond, "warning")) {
[16:03:56.005]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.005]                         if (muffled) 
[16:03:56.005]                           invokeRestart("muffleWarning")
[16:03:56.005]                       }
[16:03:56.005]                       else if (inherits(cond, "condition")) {
[16:03:56.005]                         if (!is.null(pattern)) {
[16:03:56.005]                           computeRestarts <- base::computeRestarts
[16:03:56.005]                           grepl <- base::grepl
[16:03:56.005]                           restarts <- computeRestarts(cond)
[16:03:56.005]                           for (restart in restarts) {
[16:03:56.005]                             name <- restart$name
[16:03:56.005]                             if (is.null(name)) 
[16:03:56.005]                               next
[16:03:56.005]                             if (!grepl(pattern, name)) 
[16:03:56.005]                               next
[16:03:56.005]                             invokeRestart(restart)
[16:03:56.005]                             muffled <- TRUE
[16:03:56.005]                             break
[16:03:56.005]                           }
[16:03:56.005]                         }
[16:03:56.005]                       }
[16:03:56.005]                       invisible(muffled)
[16:03:56.005]                     }
[16:03:56.005]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.005]                   }
[16:03:56.005]                 }
[16:03:56.005]             }
[16:03:56.005]         }))
[16:03:56.005]     }, error = function(ex) {
[16:03:56.005]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.005]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.005]                 ...future.rng), started = ...future.startTime, 
[16:03:56.005]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.005]             version = "1.8"), class = "FutureResult")
[16:03:56.005]     }, finally = {
[16:03:56.005]         if (!identical(...future.workdir, getwd())) 
[16:03:56.005]             setwd(...future.workdir)
[16:03:56.005]         {
[16:03:56.005]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.005]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.005]             }
[16:03:56.005]             base::options(...future.oldOptions)
[16:03:56.005]             if (.Platform$OS.type == "windows") {
[16:03:56.005]                 old_names <- names(...future.oldEnvVars)
[16:03:56.005]                 envs <- base::Sys.getenv()
[16:03:56.005]                 names <- names(envs)
[16:03:56.005]                 common <- intersect(names, old_names)
[16:03:56.005]                 added <- setdiff(names, old_names)
[16:03:56.005]                 removed <- setdiff(old_names, names)
[16:03:56.005]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.005]                   envs[common]]
[16:03:56.005]                 NAMES <- toupper(changed)
[16:03:56.005]                 args <- list()
[16:03:56.005]                 for (kk in seq_along(NAMES)) {
[16:03:56.005]                   name <- changed[[kk]]
[16:03:56.005]                   NAME <- NAMES[[kk]]
[16:03:56.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.005]                     next
[16:03:56.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.005]                 }
[16:03:56.005]                 NAMES <- toupper(added)
[16:03:56.005]                 for (kk in seq_along(NAMES)) {
[16:03:56.005]                   name <- added[[kk]]
[16:03:56.005]                   NAME <- NAMES[[kk]]
[16:03:56.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.005]                     next
[16:03:56.005]                   args[[name]] <- ""
[16:03:56.005]                 }
[16:03:56.005]                 NAMES <- toupper(removed)
[16:03:56.005]                 for (kk in seq_along(NAMES)) {
[16:03:56.005]                   name <- removed[[kk]]
[16:03:56.005]                   NAME <- NAMES[[kk]]
[16:03:56.005]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.005]                     next
[16:03:56.005]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.005]                 }
[16:03:56.005]                 if (length(args) > 0) 
[16:03:56.005]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.005]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.005]             }
[16:03:56.005]             else {
[16:03:56.005]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.005]             }
[16:03:56.005]             {
[16:03:56.005]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.005]                   0L) {
[16:03:56.005]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.005]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.005]                   base::options(opts)
[16:03:56.005]                 }
[16:03:56.005]                 {
[16:03:56.005]                   {
[16:03:56.005]                     NULL
[16:03:56.005]                     RNGkind("Mersenne-Twister")
[16:03:56.005]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.005]                       inherits = FALSE)
[16:03:56.005]                   }
[16:03:56.005]                   options(future.plan = NULL)
[16:03:56.005]                   if (is.na(NA_character_)) 
[16:03:56.005]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.005]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.005]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.005]                   {
[16:03:56.005]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.005]                     if (!future$lazy) 
[16:03:56.005]                       future <- run(future)
[16:03:56.005]                     invisible(future)
[16:03:56.005]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.005]                 }
[16:03:56.005]             }
[16:03:56.005]         }
[16:03:56.005]     })
[16:03:56.005]     if (TRUE) {
[16:03:56.005]         base::sink(type = "output", split = FALSE)
[16:03:56.005]         if (TRUE) {
[16:03:56.005]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.005]         }
[16:03:56.005]         else {
[16:03:56.005]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.005]         }
[16:03:56.005]         base::close(...future.stdout)
[16:03:56.005]         ...future.stdout <- NULL
[16:03:56.005]     }
[16:03:56.005]     ...future.result$conditions <- ...future.conditions
[16:03:56.005]     ...future.result$finished <- base::Sys.time()
[16:03:56.005]     ...future.result
[16:03:56.005] }
[16:03:56.006] plan(): Setting new future strategy stack:
[16:03:56.006] List of future strategies:
[16:03:56.006] 1. sequential:
[16:03:56.006]    - args: function (..., envir = parent.frame())
[16:03:56.006]    - tweaked: FALSE
[16:03:56.006]    - call: NULL
[16:03:56.007] plan(): nbrOfWorkers() = 1
[16:03:56.007] plan(): Setting new future strategy stack:
[16:03:56.008] List of future strategies:
[16:03:56.008] 1. sequential:
[16:03:56.008]    - args: function (..., envir = parent.frame())
[16:03:56.008]    - tweaked: FALSE
[16:03:56.008]    - call: future::plan("sequential")
[16:03:56.008] plan(): nbrOfWorkers() = 1
[16:03:56.008] SequentialFuture started (and completed)
[16:03:56.008] signalConditions() ...
[16:03:56.008]  - include = ‘immediateCondition’
[16:03:56.008]  - exclude = 
[16:03:56.008]  - resignal = FALSE
[16:03:56.009]  - Number of conditions: 1
[16:03:56.009] signalConditions() ... done
[16:03:56.009] - Launch lazy future ... done
[16:03:56.009] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[16:03:56.009] getGlobalsAndPackages() ...
[16:03:56.009] Searching for globals...
[16:03:56.010] - globals found: [2] ‘{’, ‘stop’
[16:03:56.010] Searching for globals ... DONE
[16:03:56.010] Resolving globals: FALSE
[16:03:56.010] 
[16:03:56.011] 
[16:03:56.011] getGlobalsAndPackages() ... DONE
[16:03:56.011] run() for ‘Future’ ...
[16:03:56.011] - state: ‘created’
[16:03:56.011] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.011] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.011] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.012]   - Field: ‘label’
[16:03:56.012]   - Field: ‘local’
[16:03:56.012]   - Field: ‘owner’
[16:03:56.012]   - Field: ‘envir’
[16:03:56.012]   - Field: ‘packages’
[16:03:56.012]   - Field: ‘gc’
[16:03:56.012]   - Field: ‘conditions’
[16:03:56.012]   - Field: ‘expr’
[16:03:56.012]   - Field: ‘uuid’
[16:03:56.012]   - Field: ‘seed’
[16:03:56.012]   - Field: ‘version’
[16:03:56.013]   - Field: ‘result’
[16:03:56.013]   - Field: ‘asynchronous’
[16:03:56.013]   - Field: ‘calls’
[16:03:56.013]   - Field: ‘globals’
[16:03:56.013]   - Field: ‘stdout’
[16:03:56.013]   - Field: ‘earlySignal’
[16:03:56.013]   - Field: ‘lazy’
[16:03:56.013]   - Field: ‘state’
[16:03:56.013] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.013] - Launch lazy future ...
[16:03:56.013] Packages needed by the future expression (n = 0): <none>
[16:03:56.014] Packages needed by future strategies (n = 0): <none>
[16:03:56.014] {
[16:03:56.014]     {
[16:03:56.014]         {
[16:03:56.014]             ...future.startTime <- base::Sys.time()
[16:03:56.014]             {
[16:03:56.014]                 {
[16:03:56.014]                   {
[16:03:56.014]                     base::local({
[16:03:56.014]                       has_future <- base::requireNamespace("future", 
[16:03:56.014]                         quietly = TRUE)
[16:03:56.014]                       if (has_future) {
[16:03:56.014]                         ns <- base::getNamespace("future")
[16:03:56.014]                         version <- ns[[".package"]][["version"]]
[16:03:56.014]                         if (is.null(version)) 
[16:03:56.014]                           version <- utils::packageVersion("future")
[16:03:56.014]                       }
[16:03:56.014]                       else {
[16:03:56.014]                         version <- NULL
[16:03:56.014]                       }
[16:03:56.014]                       if (!has_future || version < "1.8.0") {
[16:03:56.014]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.014]                           "", base::R.version$version.string), 
[16:03:56.014]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.014]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.014]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.014]                             "release", "version")], collapse = " "), 
[16:03:56.014]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.014]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.014]                           info)
[16:03:56.014]                         info <- base::paste(info, collapse = "; ")
[16:03:56.014]                         if (!has_future) {
[16:03:56.014]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.014]                             info)
[16:03:56.014]                         }
[16:03:56.014]                         else {
[16:03:56.014]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.014]                             info, version)
[16:03:56.014]                         }
[16:03:56.014]                         base::stop(msg)
[16:03:56.014]                       }
[16:03:56.014]                     })
[16:03:56.014]                   }
[16:03:56.014]                   options(future.plan = NULL)
[16:03:56.014]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.014]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.014]                 }
[16:03:56.014]                 ...future.workdir <- getwd()
[16:03:56.014]             }
[16:03:56.014]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.014]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.014]         }
[16:03:56.014]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.014]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.014]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.014]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.014]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.014]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.014]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.014]             base::names(...future.oldOptions))
[16:03:56.014]     }
[16:03:56.014]     if (FALSE) {
[16:03:56.014]     }
[16:03:56.014]     else {
[16:03:56.014]         if (TRUE) {
[16:03:56.014]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.014]                 open = "w")
[16:03:56.014]         }
[16:03:56.014]         else {
[16:03:56.014]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.014]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.014]         }
[16:03:56.014]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.014]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.014]             base::sink(type = "output", split = FALSE)
[16:03:56.014]             base::close(...future.stdout)
[16:03:56.014]         }, add = TRUE)
[16:03:56.014]     }
[16:03:56.014]     ...future.frame <- base::sys.nframe()
[16:03:56.014]     ...future.conditions <- base::list()
[16:03:56.014]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.014]     if (FALSE) {
[16:03:56.014]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.014]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.014]     }
[16:03:56.014]     ...future.result <- base::tryCatch({
[16:03:56.014]         base::withCallingHandlers({
[16:03:56.014]             ...future.value <- base::withVisible(base::local({
[16:03:56.014]                 42L
[16:03:56.014]                 stop("Woops")
[16:03:56.014]             }))
[16:03:56.014]             future::FutureResult(value = ...future.value$value, 
[16:03:56.014]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.014]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.014]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.014]                     ...future.globalenv.names))
[16:03:56.014]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.014]         }, condition = base::local({
[16:03:56.014]             c <- base::c
[16:03:56.014]             inherits <- base::inherits
[16:03:56.014]             invokeRestart <- base::invokeRestart
[16:03:56.014]             length <- base::length
[16:03:56.014]             list <- base::list
[16:03:56.014]             seq.int <- base::seq.int
[16:03:56.014]             signalCondition <- base::signalCondition
[16:03:56.014]             sys.calls <- base::sys.calls
[16:03:56.014]             `[[` <- base::`[[`
[16:03:56.014]             `+` <- base::`+`
[16:03:56.014]             `<<-` <- base::`<<-`
[16:03:56.014]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.014]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.014]                   3L)]
[16:03:56.014]             }
[16:03:56.014]             function(cond) {
[16:03:56.014]                 is_error <- inherits(cond, "error")
[16:03:56.014]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.014]                   NULL)
[16:03:56.014]                 if (is_error) {
[16:03:56.014]                   sessionInformation <- function() {
[16:03:56.014]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.014]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.014]                       search = base::search(), system = base::Sys.info())
[16:03:56.014]                   }
[16:03:56.014]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.014]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.014]                     cond$call), session = sessionInformation(), 
[16:03:56.014]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.014]                   signalCondition(cond)
[16:03:56.014]                 }
[16:03:56.014]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.014]                 "immediateCondition"))) {
[16:03:56.014]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.014]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.014]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.014]                   if (TRUE && !signal) {
[16:03:56.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.014]                     {
[16:03:56.014]                       inherits <- base::inherits
[16:03:56.014]                       invokeRestart <- base::invokeRestart
[16:03:56.014]                       is.null <- base::is.null
[16:03:56.014]                       muffled <- FALSE
[16:03:56.014]                       if (inherits(cond, "message")) {
[16:03:56.014]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.014]                         if (muffled) 
[16:03:56.014]                           invokeRestart("muffleMessage")
[16:03:56.014]                       }
[16:03:56.014]                       else if (inherits(cond, "warning")) {
[16:03:56.014]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.014]                         if (muffled) 
[16:03:56.014]                           invokeRestart("muffleWarning")
[16:03:56.014]                       }
[16:03:56.014]                       else if (inherits(cond, "condition")) {
[16:03:56.014]                         if (!is.null(pattern)) {
[16:03:56.014]                           computeRestarts <- base::computeRestarts
[16:03:56.014]                           grepl <- base::grepl
[16:03:56.014]                           restarts <- computeRestarts(cond)
[16:03:56.014]                           for (restart in restarts) {
[16:03:56.014]                             name <- restart$name
[16:03:56.014]                             if (is.null(name)) 
[16:03:56.014]                               next
[16:03:56.014]                             if (!grepl(pattern, name)) 
[16:03:56.014]                               next
[16:03:56.014]                             invokeRestart(restart)
[16:03:56.014]                             muffled <- TRUE
[16:03:56.014]                             break
[16:03:56.014]                           }
[16:03:56.014]                         }
[16:03:56.014]                       }
[16:03:56.014]                       invisible(muffled)
[16:03:56.014]                     }
[16:03:56.014]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.014]                   }
[16:03:56.014]                 }
[16:03:56.014]                 else {
[16:03:56.014]                   if (TRUE) {
[16:03:56.014]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.014]                     {
[16:03:56.014]                       inherits <- base::inherits
[16:03:56.014]                       invokeRestart <- base::invokeRestart
[16:03:56.014]                       is.null <- base::is.null
[16:03:56.014]                       muffled <- FALSE
[16:03:56.014]                       if (inherits(cond, "message")) {
[16:03:56.014]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.014]                         if (muffled) 
[16:03:56.014]                           invokeRestart("muffleMessage")
[16:03:56.014]                       }
[16:03:56.014]                       else if (inherits(cond, "warning")) {
[16:03:56.014]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.014]                         if (muffled) 
[16:03:56.014]                           invokeRestart("muffleWarning")
[16:03:56.014]                       }
[16:03:56.014]                       else if (inherits(cond, "condition")) {
[16:03:56.014]                         if (!is.null(pattern)) {
[16:03:56.014]                           computeRestarts <- base::computeRestarts
[16:03:56.014]                           grepl <- base::grepl
[16:03:56.014]                           restarts <- computeRestarts(cond)
[16:03:56.014]                           for (restart in restarts) {
[16:03:56.014]                             name <- restart$name
[16:03:56.014]                             if (is.null(name)) 
[16:03:56.014]                               next
[16:03:56.014]                             if (!grepl(pattern, name)) 
[16:03:56.014]                               next
[16:03:56.014]                             invokeRestart(restart)
[16:03:56.014]                             muffled <- TRUE
[16:03:56.014]                             break
[16:03:56.014]                           }
[16:03:56.014]                         }
[16:03:56.014]                       }
[16:03:56.014]                       invisible(muffled)
[16:03:56.014]                     }
[16:03:56.014]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.014]                   }
[16:03:56.014]                 }
[16:03:56.014]             }
[16:03:56.014]         }))
[16:03:56.014]     }, error = function(ex) {
[16:03:56.014]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.014]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.014]                 ...future.rng), started = ...future.startTime, 
[16:03:56.014]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.014]             version = "1.8"), class = "FutureResult")
[16:03:56.014]     }, finally = {
[16:03:56.014]         if (!identical(...future.workdir, getwd())) 
[16:03:56.014]             setwd(...future.workdir)
[16:03:56.014]         {
[16:03:56.014]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.014]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.014]             }
[16:03:56.014]             base::options(...future.oldOptions)
[16:03:56.014]             if (.Platform$OS.type == "windows") {
[16:03:56.014]                 old_names <- names(...future.oldEnvVars)
[16:03:56.014]                 envs <- base::Sys.getenv()
[16:03:56.014]                 names <- names(envs)
[16:03:56.014]                 common <- intersect(names, old_names)
[16:03:56.014]                 added <- setdiff(names, old_names)
[16:03:56.014]                 removed <- setdiff(old_names, names)
[16:03:56.014]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.014]                   envs[common]]
[16:03:56.014]                 NAMES <- toupper(changed)
[16:03:56.014]                 args <- list()
[16:03:56.014]                 for (kk in seq_along(NAMES)) {
[16:03:56.014]                   name <- changed[[kk]]
[16:03:56.014]                   NAME <- NAMES[[kk]]
[16:03:56.014]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.014]                     next
[16:03:56.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.014]                 }
[16:03:56.014]                 NAMES <- toupper(added)
[16:03:56.014]                 for (kk in seq_along(NAMES)) {
[16:03:56.014]                   name <- added[[kk]]
[16:03:56.014]                   NAME <- NAMES[[kk]]
[16:03:56.014]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.014]                     next
[16:03:56.014]                   args[[name]] <- ""
[16:03:56.014]                 }
[16:03:56.014]                 NAMES <- toupper(removed)
[16:03:56.014]                 for (kk in seq_along(NAMES)) {
[16:03:56.014]                   name <- removed[[kk]]
[16:03:56.014]                   NAME <- NAMES[[kk]]
[16:03:56.014]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.014]                     next
[16:03:56.014]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.014]                 }
[16:03:56.014]                 if (length(args) > 0) 
[16:03:56.014]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.014]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.014]             }
[16:03:56.014]             else {
[16:03:56.014]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.014]             }
[16:03:56.014]             {
[16:03:56.014]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.014]                   0L) {
[16:03:56.014]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.014]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.014]                   base::options(opts)
[16:03:56.014]                 }
[16:03:56.014]                 {
[16:03:56.014]                   {
[16:03:56.014]                     NULL
[16:03:56.014]                     RNGkind("Mersenne-Twister")
[16:03:56.014]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.014]                       inherits = FALSE)
[16:03:56.014]                   }
[16:03:56.014]                   options(future.plan = NULL)
[16:03:56.014]                   if (is.na(NA_character_)) 
[16:03:56.014]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.014]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.014]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.014]                   {
[16:03:56.014]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.014]                     if (!future$lazy) 
[16:03:56.014]                       future <- run(future)
[16:03:56.014]                     invisible(future)
[16:03:56.014]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.014]                 }
[16:03:56.014]             }
[16:03:56.014]         }
[16:03:56.014]     })
[16:03:56.014]     if (TRUE) {
[16:03:56.014]         base::sink(type = "output", split = FALSE)
[16:03:56.014]         if (TRUE) {
[16:03:56.014]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.014]         }
[16:03:56.014]         else {
[16:03:56.014]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.014]         }
[16:03:56.014]         base::close(...future.stdout)
[16:03:56.014]         ...future.stdout <- NULL
[16:03:56.014]     }
[16:03:56.014]     ...future.result$conditions <- ...future.conditions
[16:03:56.014]     ...future.result$finished <- base::Sys.time()
[16:03:56.014]     ...future.result
[16:03:56.014] }
[16:03:56.016] plan(): Setting new future strategy stack:
[16:03:56.016] List of future strategies:
[16:03:56.016] 1. sequential:
[16:03:56.016]    - args: function (..., envir = parent.frame())
[16:03:56.016]    - tweaked: FALSE
[16:03:56.016]    - call: NULL
[16:03:56.016] plan(): nbrOfWorkers() = 1
[16:03:56.017] plan(): Setting new future strategy stack:
[16:03:56.017] List of future strategies:
[16:03:56.017] 1. sequential:
[16:03:56.017]    - args: function (..., envir = parent.frame())
[16:03:56.017]    - tweaked: FALSE
[16:03:56.017]    - call: future::plan("sequential")
[16:03:56.017] plan(): nbrOfWorkers() = 1
[16:03:56.017] SequentialFuture started (and completed)
[16:03:56.018] signalConditions() ...
[16:03:56.018]  - include = ‘immediateCondition’
[16:03:56.018]  - exclude = 
[16:03:56.018]  - resignal = FALSE
[16:03:56.018]  - Number of conditions: 1
[16:03:56.018] signalConditions() ... done
[16:03:56.018] - Launch lazy future ... done
[16:03:56.018] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[16:03:56.018] resolved() for ‘SequentialFuture’ ...
[16:03:56.019] - state: ‘finished’
[16:03:56.019] - run: TRUE
[16:03:56.019] - result: ‘FutureResult’
[16:03:56.019] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[16:03:56.020] getGlobalsAndPackages() ...
[16:03:56.020] Searching for globals...
[16:03:56.021] - globals found: [2] ‘{’, ‘stop’
[16:03:56.021] Searching for globals ... DONE
[16:03:56.021] Resolving globals: FALSE
[16:03:56.021] 
[16:03:56.021] 
[16:03:56.021] getGlobalsAndPackages() ... DONE
[16:03:56.022] run() for ‘Future’ ...
[16:03:56.022] - state: ‘created’
[16:03:56.022] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.022] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.022] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.022]   - Field: ‘label’
[16:03:56.022]   - Field: ‘local’
[16:03:56.023]   - Field: ‘owner’
[16:03:56.023]   - Field: ‘envir’
[16:03:56.023]   - Field: ‘packages’
[16:03:56.023]   - Field: ‘gc’
[16:03:56.023]   - Field: ‘conditions’
[16:03:56.023]   - Field: ‘expr’
[16:03:56.023]   - Field: ‘uuid’
[16:03:56.023]   - Field: ‘seed’
[16:03:56.023]   - Field: ‘version’
[16:03:56.023]   - Field: ‘result’
[16:03:56.023]   - Field: ‘asynchronous’
[16:03:56.024]   - Field: ‘calls’
[16:03:56.024]   - Field: ‘globals’
[16:03:56.024]   - Field: ‘stdout’
[16:03:56.024]   - Field: ‘earlySignal’
[16:03:56.024]   - Field: ‘lazy’
[16:03:56.024]   - Field: ‘state’
[16:03:56.024] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.024] - Launch lazy future ...
[16:03:56.024] Packages needed by the future expression (n = 0): <none>
[16:03:56.024] Packages needed by future strategies (n = 0): <none>
[16:03:56.025] {
[16:03:56.025]     {
[16:03:56.025]         {
[16:03:56.025]             ...future.startTime <- base::Sys.time()
[16:03:56.025]             {
[16:03:56.025]                 {
[16:03:56.025]                   {
[16:03:56.025]                     base::local({
[16:03:56.025]                       has_future <- base::requireNamespace("future", 
[16:03:56.025]                         quietly = TRUE)
[16:03:56.025]                       if (has_future) {
[16:03:56.025]                         ns <- base::getNamespace("future")
[16:03:56.025]                         version <- ns[[".package"]][["version"]]
[16:03:56.025]                         if (is.null(version)) 
[16:03:56.025]                           version <- utils::packageVersion("future")
[16:03:56.025]                       }
[16:03:56.025]                       else {
[16:03:56.025]                         version <- NULL
[16:03:56.025]                       }
[16:03:56.025]                       if (!has_future || version < "1.8.0") {
[16:03:56.025]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.025]                           "", base::R.version$version.string), 
[16:03:56.025]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.025]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.025]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.025]                             "release", "version")], collapse = " "), 
[16:03:56.025]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.025]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.025]                           info)
[16:03:56.025]                         info <- base::paste(info, collapse = "; ")
[16:03:56.025]                         if (!has_future) {
[16:03:56.025]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.025]                             info)
[16:03:56.025]                         }
[16:03:56.025]                         else {
[16:03:56.025]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.025]                             info, version)
[16:03:56.025]                         }
[16:03:56.025]                         base::stop(msg)
[16:03:56.025]                       }
[16:03:56.025]                     })
[16:03:56.025]                   }
[16:03:56.025]                   options(future.plan = NULL)
[16:03:56.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.025]                 }
[16:03:56.025]                 ...future.workdir <- getwd()
[16:03:56.025]             }
[16:03:56.025]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.025]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.025]         }
[16:03:56.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.025]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.025]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.025]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.025]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.025]             base::names(...future.oldOptions))
[16:03:56.025]     }
[16:03:56.025]     if (FALSE) {
[16:03:56.025]     }
[16:03:56.025]     else {
[16:03:56.025]         if (TRUE) {
[16:03:56.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.025]                 open = "w")
[16:03:56.025]         }
[16:03:56.025]         else {
[16:03:56.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.025]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.025]         }
[16:03:56.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.025]             base::sink(type = "output", split = FALSE)
[16:03:56.025]             base::close(...future.stdout)
[16:03:56.025]         }, add = TRUE)
[16:03:56.025]     }
[16:03:56.025]     ...future.frame <- base::sys.nframe()
[16:03:56.025]     ...future.conditions <- base::list()
[16:03:56.025]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.025]     if (FALSE) {
[16:03:56.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.025]     }
[16:03:56.025]     ...future.result <- base::tryCatch({
[16:03:56.025]         base::withCallingHandlers({
[16:03:56.025]             ...future.value <- base::withVisible(base::local({
[16:03:56.025]                 42L
[16:03:56.025]                 stop("Woops")
[16:03:56.025]             }))
[16:03:56.025]             future::FutureResult(value = ...future.value$value, 
[16:03:56.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.025]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.025]                     ...future.globalenv.names))
[16:03:56.025]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.025]         }, condition = base::local({
[16:03:56.025]             c <- base::c
[16:03:56.025]             inherits <- base::inherits
[16:03:56.025]             invokeRestart <- base::invokeRestart
[16:03:56.025]             length <- base::length
[16:03:56.025]             list <- base::list
[16:03:56.025]             seq.int <- base::seq.int
[16:03:56.025]             signalCondition <- base::signalCondition
[16:03:56.025]             sys.calls <- base::sys.calls
[16:03:56.025]             `[[` <- base::`[[`
[16:03:56.025]             `+` <- base::`+`
[16:03:56.025]             `<<-` <- base::`<<-`
[16:03:56.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.025]                   3L)]
[16:03:56.025]             }
[16:03:56.025]             function(cond) {
[16:03:56.025]                 is_error <- inherits(cond, "error")
[16:03:56.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.025]                   NULL)
[16:03:56.025]                 if (is_error) {
[16:03:56.025]                   sessionInformation <- function() {
[16:03:56.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.025]                       search = base::search(), system = base::Sys.info())
[16:03:56.025]                   }
[16:03:56.025]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.025]                     cond$call), session = sessionInformation(), 
[16:03:56.025]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.025]                   signalCondition(cond)
[16:03:56.025]                 }
[16:03:56.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.025]                 "immediateCondition"))) {
[16:03:56.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.025]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.025]                   if (TRUE && !signal) {
[16:03:56.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.025]                     {
[16:03:56.025]                       inherits <- base::inherits
[16:03:56.025]                       invokeRestart <- base::invokeRestart
[16:03:56.025]                       is.null <- base::is.null
[16:03:56.025]                       muffled <- FALSE
[16:03:56.025]                       if (inherits(cond, "message")) {
[16:03:56.025]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.025]                         if (muffled) 
[16:03:56.025]                           invokeRestart("muffleMessage")
[16:03:56.025]                       }
[16:03:56.025]                       else if (inherits(cond, "warning")) {
[16:03:56.025]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.025]                         if (muffled) 
[16:03:56.025]                           invokeRestart("muffleWarning")
[16:03:56.025]                       }
[16:03:56.025]                       else if (inherits(cond, "condition")) {
[16:03:56.025]                         if (!is.null(pattern)) {
[16:03:56.025]                           computeRestarts <- base::computeRestarts
[16:03:56.025]                           grepl <- base::grepl
[16:03:56.025]                           restarts <- computeRestarts(cond)
[16:03:56.025]                           for (restart in restarts) {
[16:03:56.025]                             name <- restart$name
[16:03:56.025]                             if (is.null(name)) 
[16:03:56.025]                               next
[16:03:56.025]                             if (!grepl(pattern, name)) 
[16:03:56.025]                               next
[16:03:56.025]                             invokeRestart(restart)
[16:03:56.025]                             muffled <- TRUE
[16:03:56.025]                             break
[16:03:56.025]                           }
[16:03:56.025]                         }
[16:03:56.025]                       }
[16:03:56.025]                       invisible(muffled)
[16:03:56.025]                     }
[16:03:56.025]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.025]                   }
[16:03:56.025]                 }
[16:03:56.025]                 else {
[16:03:56.025]                   if (TRUE) {
[16:03:56.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.025]                     {
[16:03:56.025]                       inherits <- base::inherits
[16:03:56.025]                       invokeRestart <- base::invokeRestart
[16:03:56.025]                       is.null <- base::is.null
[16:03:56.025]                       muffled <- FALSE
[16:03:56.025]                       if (inherits(cond, "message")) {
[16:03:56.025]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.025]                         if (muffled) 
[16:03:56.025]                           invokeRestart("muffleMessage")
[16:03:56.025]                       }
[16:03:56.025]                       else if (inherits(cond, "warning")) {
[16:03:56.025]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.025]                         if (muffled) 
[16:03:56.025]                           invokeRestart("muffleWarning")
[16:03:56.025]                       }
[16:03:56.025]                       else if (inherits(cond, "condition")) {
[16:03:56.025]                         if (!is.null(pattern)) {
[16:03:56.025]                           computeRestarts <- base::computeRestarts
[16:03:56.025]                           grepl <- base::grepl
[16:03:56.025]                           restarts <- computeRestarts(cond)
[16:03:56.025]                           for (restart in restarts) {
[16:03:56.025]                             name <- restart$name
[16:03:56.025]                             if (is.null(name)) 
[16:03:56.025]                               next
[16:03:56.025]                             if (!grepl(pattern, name)) 
[16:03:56.025]                               next
[16:03:56.025]                             invokeRestart(restart)
[16:03:56.025]                             muffled <- TRUE
[16:03:56.025]                             break
[16:03:56.025]                           }
[16:03:56.025]                         }
[16:03:56.025]                       }
[16:03:56.025]                       invisible(muffled)
[16:03:56.025]                     }
[16:03:56.025]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.025]                   }
[16:03:56.025]                 }
[16:03:56.025]             }
[16:03:56.025]         }))
[16:03:56.025]     }, error = function(ex) {
[16:03:56.025]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.025]                 ...future.rng), started = ...future.startTime, 
[16:03:56.025]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.025]             version = "1.8"), class = "FutureResult")
[16:03:56.025]     }, finally = {
[16:03:56.025]         if (!identical(...future.workdir, getwd())) 
[16:03:56.025]             setwd(...future.workdir)
[16:03:56.025]         {
[16:03:56.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.025]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.025]             }
[16:03:56.025]             base::options(...future.oldOptions)
[16:03:56.025]             if (.Platform$OS.type == "windows") {
[16:03:56.025]                 old_names <- names(...future.oldEnvVars)
[16:03:56.025]                 envs <- base::Sys.getenv()
[16:03:56.025]                 names <- names(envs)
[16:03:56.025]                 common <- intersect(names, old_names)
[16:03:56.025]                 added <- setdiff(names, old_names)
[16:03:56.025]                 removed <- setdiff(old_names, names)
[16:03:56.025]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.025]                   envs[common]]
[16:03:56.025]                 NAMES <- toupper(changed)
[16:03:56.025]                 args <- list()
[16:03:56.025]                 for (kk in seq_along(NAMES)) {
[16:03:56.025]                   name <- changed[[kk]]
[16:03:56.025]                   NAME <- NAMES[[kk]]
[16:03:56.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.025]                     next
[16:03:56.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.025]                 }
[16:03:56.025]                 NAMES <- toupper(added)
[16:03:56.025]                 for (kk in seq_along(NAMES)) {
[16:03:56.025]                   name <- added[[kk]]
[16:03:56.025]                   NAME <- NAMES[[kk]]
[16:03:56.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.025]                     next
[16:03:56.025]                   args[[name]] <- ""
[16:03:56.025]                 }
[16:03:56.025]                 NAMES <- toupper(removed)
[16:03:56.025]                 for (kk in seq_along(NAMES)) {
[16:03:56.025]                   name <- removed[[kk]]
[16:03:56.025]                   NAME <- NAMES[[kk]]
[16:03:56.025]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.025]                     next
[16:03:56.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.025]                 }
[16:03:56.025]                 if (length(args) > 0) 
[16:03:56.025]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.025]             }
[16:03:56.025]             else {
[16:03:56.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.025]             }
[16:03:56.025]             {
[16:03:56.025]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.025]                   0L) {
[16:03:56.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.025]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.025]                   base::options(opts)
[16:03:56.025]                 }
[16:03:56.025]                 {
[16:03:56.025]                   {
[16:03:56.025]                     NULL
[16:03:56.025]                     RNGkind("Mersenne-Twister")
[16:03:56.025]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.025]                       inherits = FALSE)
[16:03:56.025]                   }
[16:03:56.025]                   options(future.plan = NULL)
[16:03:56.025]                   if (is.na(NA_character_)) 
[16:03:56.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.025]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.025]                   {
[16:03:56.025]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.025]                     if (!future$lazy) 
[16:03:56.025]                       future <- run(future)
[16:03:56.025]                     invisible(future)
[16:03:56.025]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.025]                 }
[16:03:56.025]             }
[16:03:56.025]         }
[16:03:56.025]     })
[16:03:56.025]     if (TRUE) {
[16:03:56.025]         base::sink(type = "output", split = FALSE)
[16:03:56.025]         if (TRUE) {
[16:03:56.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.025]         }
[16:03:56.025]         else {
[16:03:56.025]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.025]         }
[16:03:56.025]         base::close(...future.stdout)
[16:03:56.025]         ...future.stdout <- NULL
[16:03:56.025]     }
[16:03:56.025]     ...future.result$conditions <- ...future.conditions
[16:03:56.025]     ...future.result$finished <- base::Sys.time()
[16:03:56.025]     ...future.result
[16:03:56.025] }
[16:03:56.027] plan(): Setting new future strategy stack:
[16:03:56.027] List of future strategies:
[16:03:56.027] 1. sequential:
[16:03:56.027]    - args: function (..., envir = parent.frame())
[16:03:56.027]    - tweaked: FALSE
[16:03:56.027]    - call: NULL
[16:03:56.027] plan(): nbrOfWorkers() = 1
[16:03:56.028] plan(): Setting new future strategy stack:
[16:03:56.028] List of future strategies:
[16:03:56.028] 1. sequential:
[16:03:56.028]    - args: function (..., envir = parent.frame())
[16:03:56.028]    - tweaked: FALSE
[16:03:56.028]    - call: future::plan("sequential")
[16:03:56.028] plan(): nbrOfWorkers() = 1
[16:03:56.028] SequentialFuture started (and completed)
[16:03:56.028] signalConditions() ...
[16:03:56.029]  - include = ‘immediateCondition’
[16:03:56.029]  - exclude = 
[16:03:56.029]  - resignal = FALSE
[16:03:56.029]  - Number of conditions: 1
[16:03:56.029] signalConditions() ... done
[16:03:56.029] - Launch lazy future ... done
[16:03:56.029] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[16:03:56.029] getGlobalsAndPackages() ...
[16:03:56.029] Searching for globals...
[16:03:56.030] - globals found: [2] ‘{’, ‘stop’
[16:03:56.030] Searching for globals ... DONE
[16:03:56.030] Resolving globals: FALSE
[16:03:56.031] 
[16:03:56.031] 
[16:03:56.031] getGlobalsAndPackages() ... DONE
[16:03:56.031] run() for ‘Future’ ...
[16:03:56.031] - state: ‘created’
[16:03:56.031] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.032] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.032] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.032]   - Field: ‘label’
[16:03:56.032]   - Field: ‘local’
[16:03:56.032]   - Field: ‘owner’
[16:03:56.032]   - Field: ‘envir’
[16:03:56.032]   - Field: ‘packages’
[16:03:56.033]   - Field: ‘gc’
[16:03:56.033]   - Field: ‘conditions’
[16:03:56.033]   - Field: ‘expr’
[16:03:56.033]   - Field: ‘uuid’
[16:03:56.034]   - Field: ‘seed’
[16:03:56.034]   - Field: ‘version’
[16:03:56.034]   - Field: ‘result’
[16:03:56.034]   - Field: ‘asynchronous’
[16:03:56.034]   - Field: ‘calls’
[16:03:56.034]   - Field: ‘globals’
[16:03:56.034]   - Field: ‘stdout’
[16:03:56.034]   - Field: ‘earlySignal’
[16:03:56.034]   - Field: ‘lazy’
[16:03:56.034]   - Field: ‘state’
[16:03:56.034] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.034] - Launch lazy future ...
[16:03:56.035] Packages needed by the future expression (n = 0): <none>
[16:03:56.035] Packages needed by future strategies (n = 0): <none>
[16:03:56.035] {
[16:03:56.035]     {
[16:03:56.035]         {
[16:03:56.035]             ...future.startTime <- base::Sys.time()
[16:03:56.035]             {
[16:03:56.035]                 {
[16:03:56.035]                   {
[16:03:56.035]                     base::local({
[16:03:56.035]                       has_future <- base::requireNamespace("future", 
[16:03:56.035]                         quietly = TRUE)
[16:03:56.035]                       if (has_future) {
[16:03:56.035]                         ns <- base::getNamespace("future")
[16:03:56.035]                         version <- ns[[".package"]][["version"]]
[16:03:56.035]                         if (is.null(version)) 
[16:03:56.035]                           version <- utils::packageVersion("future")
[16:03:56.035]                       }
[16:03:56.035]                       else {
[16:03:56.035]                         version <- NULL
[16:03:56.035]                       }
[16:03:56.035]                       if (!has_future || version < "1.8.0") {
[16:03:56.035]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.035]                           "", base::R.version$version.string), 
[16:03:56.035]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.035]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.035]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.035]                             "release", "version")], collapse = " "), 
[16:03:56.035]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.035]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.035]                           info)
[16:03:56.035]                         info <- base::paste(info, collapse = "; ")
[16:03:56.035]                         if (!has_future) {
[16:03:56.035]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.035]                             info)
[16:03:56.035]                         }
[16:03:56.035]                         else {
[16:03:56.035]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.035]                             info, version)
[16:03:56.035]                         }
[16:03:56.035]                         base::stop(msg)
[16:03:56.035]                       }
[16:03:56.035]                     })
[16:03:56.035]                   }
[16:03:56.035]                   options(future.plan = NULL)
[16:03:56.035]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.035]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.035]                 }
[16:03:56.035]                 ...future.workdir <- getwd()
[16:03:56.035]             }
[16:03:56.035]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.035]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.035]         }
[16:03:56.035]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.035]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.035]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.035]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.035]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.035]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.035]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.035]             base::names(...future.oldOptions))
[16:03:56.035]     }
[16:03:56.035]     if (FALSE) {
[16:03:56.035]     }
[16:03:56.035]     else {
[16:03:56.035]         if (TRUE) {
[16:03:56.035]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.035]                 open = "w")
[16:03:56.035]         }
[16:03:56.035]         else {
[16:03:56.035]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.035]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.035]         }
[16:03:56.035]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.035]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.035]             base::sink(type = "output", split = FALSE)
[16:03:56.035]             base::close(...future.stdout)
[16:03:56.035]         }, add = TRUE)
[16:03:56.035]     }
[16:03:56.035]     ...future.frame <- base::sys.nframe()
[16:03:56.035]     ...future.conditions <- base::list()
[16:03:56.035]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.035]     if (FALSE) {
[16:03:56.035]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.035]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.035]     }
[16:03:56.035]     ...future.result <- base::tryCatch({
[16:03:56.035]         base::withCallingHandlers({
[16:03:56.035]             ...future.value <- base::withVisible(base::local({
[16:03:56.035]                 42L
[16:03:56.035]                 stop("Woops")
[16:03:56.035]             }))
[16:03:56.035]             future::FutureResult(value = ...future.value$value, 
[16:03:56.035]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.035]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.035]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.035]                     ...future.globalenv.names))
[16:03:56.035]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.035]         }, condition = base::local({
[16:03:56.035]             c <- base::c
[16:03:56.035]             inherits <- base::inherits
[16:03:56.035]             invokeRestart <- base::invokeRestart
[16:03:56.035]             length <- base::length
[16:03:56.035]             list <- base::list
[16:03:56.035]             seq.int <- base::seq.int
[16:03:56.035]             signalCondition <- base::signalCondition
[16:03:56.035]             sys.calls <- base::sys.calls
[16:03:56.035]             `[[` <- base::`[[`
[16:03:56.035]             `+` <- base::`+`
[16:03:56.035]             `<<-` <- base::`<<-`
[16:03:56.035]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.035]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.035]                   3L)]
[16:03:56.035]             }
[16:03:56.035]             function(cond) {
[16:03:56.035]                 is_error <- inherits(cond, "error")
[16:03:56.035]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.035]                   NULL)
[16:03:56.035]                 if (is_error) {
[16:03:56.035]                   sessionInformation <- function() {
[16:03:56.035]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.035]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.035]                       search = base::search(), system = base::Sys.info())
[16:03:56.035]                   }
[16:03:56.035]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.035]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.035]                     cond$call), session = sessionInformation(), 
[16:03:56.035]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.035]                   signalCondition(cond)
[16:03:56.035]                 }
[16:03:56.035]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.035]                 "immediateCondition"))) {
[16:03:56.035]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.035]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.035]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.035]                   if (TRUE && !signal) {
[16:03:56.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.035]                     {
[16:03:56.035]                       inherits <- base::inherits
[16:03:56.035]                       invokeRestart <- base::invokeRestart
[16:03:56.035]                       is.null <- base::is.null
[16:03:56.035]                       muffled <- FALSE
[16:03:56.035]                       if (inherits(cond, "message")) {
[16:03:56.035]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.035]                         if (muffled) 
[16:03:56.035]                           invokeRestart("muffleMessage")
[16:03:56.035]                       }
[16:03:56.035]                       else if (inherits(cond, "warning")) {
[16:03:56.035]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.035]                         if (muffled) 
[16:03:56.035]                           invokeRestart("muffleWarning")
[16:03:56.035]                       }
[16:03:56.035]                       else if (inherits(cond, "condition")) {
[16:03:56.035]                         if (!is.null(pattern)) {
[16:03:56.035]                           computeRestarts <- base::computeRestarts
[16:03:56.035]                           grepl <- base::grepl
[16:03:56.035]                           restarts <- computeRestarts(cond)
[16:03:56.035]                           for (restart in restarts) {
[16:03:56.035]                             name <- restart$name
[16:03:56.035]                             if (is.null(name)) 
[16:03:56.035]                               next
[16:03:56.035]                             if (!grepl(pattern, name)) 
[16:03:56.035]                               next
[16:03:56.035]                             invokeRestart(restart)
[16:03:56.035]                             muffled <- TRUE
[16:03:56.035]                             break
[16:03:56.035]                           }
[16:03:56.035]                         }
[16:03:56.035]                       }
[16:03:56.035]                       invisible(muffled)
[16:03:56.035]                     }
[16:03:56.035]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.035]                   }
[16:03:56.035]                 }
[16:03:56.035]                 else {
[16:03:56.035]                   if (TRUE) {
[16:03:56.035]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.035]                     {
[16:03:56.035]                       inherits <- base::inherits
[16:03:56.035]                       invokeRestart <- base::invokeRestart
[16:03:56.035]                       is.null <- base::is.null
[16:03:56.035]                       muffled <- FALSE
[16:03:56.035]                       if (inherits(cond, "message")) {
[16:03:56.035]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.035]                         if (muffled) 
[16:03:56.035]                           invokeRestart("muffleMessage")
[16:03:56.035]                       }
[16:03:56.035]                       else if (inherits(cond, "warning")) {
[16:03:56.035]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.035]                         if (muffled) 
[16:03:56.035]                           invokeRestart("muffleWarning")
[16:03:56.035]                       }
[16:03:56.035]                       else if (inherits(cond, "condition")) {
[16:03:56.035]                         if (!is.null(pattern)) {
[16:03:56.035]                           computeRestarts <- base::computeRestarts
[16:03:56.035]                           grepl <- base::grepl
[16:03:56.035]                           restarts <- computeRestarts(cond)
[16:03:56.035]                           for (restart in restarts) {
[16:03:56.035]                             name <- restart$name
[16:03:56.035]                             if (is.null(name)) 
[16:03:56.035]                               next
[16:03:56.035]                             if (!grepl(pattern, name)) 
[16:03:56.035]                               next
[16:03:56.035]                             invokeRestart(restart)
[16:03:56.035]                             muffled <- TRUE
[16:03:56.035]                             break
[16:03:56.035]                           }
[16:03:56.035]                         }
[16:03:56.035]                       }
[16:03:56.035]                       invisible(muffled)
[16:03:56.035]                     }
[16:03:56.035]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.035]                   }
[16:03:56.035]                 }
[16:03:56.035]             }
[16:03:56.035]         }))
[16:03:56.035]     }, error = function(ex) {
[16:03:56.035]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.035]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.035]                 ...future.rng), started = ...future.startTime, 
[16:03:56.035]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.035]             version = "1.8"), class = "FutureResult")
[16:03:56.035]     }, finally = {
[16:03:56.035]         if (!identical(...future.workdir, getwd())) 
[16:03:56.035]             setwd(...future.workdir)
[16:03:56.035]         {
[16:03:56.035]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.035]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.035]             }
[16:03:56.035]             base::options(...future.oldOptions)
[16:03:56.035]             if (.Platform$OS.type == "windows") {
[16:03:56.035]                 old_names <- names(...future.oldEnvVars)
[16:03:56.035]                 envs <- base::Sys.getenv()
[16:03:56.035]                 names <- names(envs)
[16:03:56.035]                 common <- intersect(names, old_names)
[16:03:56.035]                 added <- setdiff(names, old_names)
[16:03:56.035]                 removed <- setdiff(old_names, names)
[16:03:56.035]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.035]                   envs[common]]
[16:03:56.035]                 NAMES <- toupper(changed)
[16:03:56.035]                 args <- list()
[16:03:56.035]                 for (kk in seq_along(NAMES)) {
[16:03:56.035]                   name <- changed[[kk]]
[16:03:56.035]                   NAME <- NAMES[[kk]]
[16:03:56.035]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.035]                     next
[16:03:56.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.035]                 }
[16:03:56.035]                 NAMES <- toupper(added)
[16:03:56.035]                 for (kk in seq_along(NAMES)) {
[16:03:56.035]                   name <- added[[kk]]
[16:03:56.035]                   NAME <- NAMES[[kk]]
[16:03:56.035]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.035]                     next
[16:03:56.035]                   args[[name]] <- ""
[16:03:56.035]                 }
[16:03:56.035]                 NAMES <- toupper(removed)
[16:03:56.035]                 for (kk in seq_along(NAMES)) {
[16:03:56.035]                   name <- removed[[kk]]
[16:03:56.035]                   NAME <- NAMES[[kk]]
[16:03:56.035]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.035]                     next
[16:03:56.035]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.035]                 }
[16:03:56.035]                 if (length(args) > 0) 
[16:03:56.035]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.035]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.035]             }
[16:03:56.035]             else {
[16:03:56.035]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.035]             }
[16:03:56.035]             {
[16:03:56.035]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.035]                   0L) {
[16:03:56.035]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.035]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.035]                   base::options(opts)
[16:03:56.035]                 }
[16:03:56.035]                 {
[16:03:56.035]                   {
[16:03:56.035]                     NULL
[16:03:56.035]                     RNGkind("Mersenne-Twister")
[16:03:56.035]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.035]                       inherits = FALSE)
[16:03:56.035]                   }
[16:03:56.035]                   options(future.plan = NULL)
[16:03:56.035]                   if (is.na(NA_character_)) 
[16:03:56.035]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.035]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.035]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.035]                   {
[16:03:56.035]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.035]                     if (!future$lazy) 
[16:03:56.035]                       future <- run(future)
[16:03:56.035]                     invisible(future)
[16:03:56.035]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.035]                 }
[16:03:56.035]             }
[16:03:56.035]         }
[16:03:56.035]     })
[16:03:56.035]     if (TRUE) {
[16:03:56.035]         base::sink(type = "output", split = FALSE)
[16:03:56.035]         if (TRUE) {
[16:03:56.035]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.035]         }
[16:03:56.035]         else {
[16:03:56.035]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.035]         }
[16:03:56.035]         base::close(...future.stdout)
[16:03:56.035]         ...future.stdout <- NULL
[16:03:56.035]     }
[16:03:56.035]     ...future.result$conditions <- ...future.conditions
[16:03:56.035]     ...future.result$finished <- base::Sys.time()
[16:03:56.035]     ...future.result
[16:03:56.035] }
[16:03:56.037] plan(): Setting new future strategy stack:
[16:03:56.037] List of future strategies:
[16:03:56.037] 1. sequential:
[16:03:56.037]    - args: function (..., envir = parent.frame())
[16:03:56.037]    - tweaked: FALSE
[16:03:56.037]    - call: NULL
[16:03:56.037] plan(): nbrOfWorkers() = 1
[16:03:56.038] plan(): Setting new future strategy stack:
[16:03:56.038] List of future strategies:
[16:03:56.038] 1. sequential:
[16:03:56.038]    - args: function (..., envir = parent.frame())
[16:03:56.038]    - tweaked: FALSE
[16:03:56.038]    - call: future::plan("sequential")
[16:03:56.038] plan(): nbrOfWorkers() = 1
[16:03:56.039] SequentialFuture started (and completed)
[16:03:56.039] signalConditions() ...
[16:03:56.039]  - include = ‘immediateCondition’
[16:03:56.039]  - exclude = 
[16:03:56.039]  - resignal = FALSE
[16:03:56.039]  - Number of conditions: 1
[16:03:56.039] signalConditions() ... done
[16:03:56.039] - Launch lazy future ... done
[16:03:56.039] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[16:03:56.040] resolved() for ‘SequentialFuture’ ...
[16:03:56.040] - state: ‘finished’
[16:03:56.040] - run: TRUE
[16:03:56.040] - result: ‘FutureResult’
[16:03:56.040] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[16:03:56.041] getGlobalsAndPackages() ...
[16:03:56.041] Searching for globals...
[16:03:56.041] - globals found: [2] ‘{’, ‘stop’
[16:03:56.042] Searching for globals ... DONE
[16:03:56.042] Resolving globals: FALSE
[16:03:56.042] 
[16:03:56.042] 
[16:03:56.042] getGlobalsAndPackages() ... DONE
[16:03:56.042] run() for ‘Future’ ...
[16:03:56.042] - state: ‘created’
[16:03:56.043] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.043] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.043] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.043]   - Field: ‘label’
[16:03:56.043]   - Field: ‘local’
[16:03:56.043]   - Field: ‘owner’
[16:03:56.043]   - Field: ‘envir’
[16:03:56.043]   - Field: ‘packages’
[16:03:56.043]   - Field: ‘gc’
[16:03:56.044]   - Field: ‘conditions’
[16:03:56.044]   - Field: ‘expr’
[16:03:56.044]   - Field: ‘uuid’
[16:03:56.044]   - Field: ‘seed’
[16:03:56.044]   - Field: ‘version’
[16:03:56.044]   - Field: ‘result’
[16:03:56.044]   - Field: ‘asynchronous’
[16:03:56.044]   - Field: ‘calls’
[16:03:56.044]   - Field: ‘globals’
[16:03:56.044]   - Field: ‘stdout’
[16:03:56.044]   - Field: ‘earlySignal’
[16:03:56.044]   - Field: ‘lazy’
[16:03:56.045]   - Field: ‘state’
[16:03:56.045] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.045] - Launch lazy future ...
[16:03:56.045] Packages needed by the future expression (n = 0): <none>
[16:03:56.045] Packages needed by future strategies (n = 0): <none>
[16:03:56.045] {
[16:03:56.045]     {
[16:03:56.045]         {
[16:03:56.045]             ...future.startTime <- base::Sys.time()
[16:03:56.045]             {
[16:03:56.045]                 {
[16:03:56.045]                   {
[16:03:56.045]                     base::local({
[16:03:56.045]                       has_future <- base::requireNamespace("future", 
[16:03:56.045]                         quietly = TRUE)
[16:03:56.045]                       if (has_future) {
[16:03:56.045]                         ns <- base::getNamespace("future")
[16:03:56.045]                         version <- ns[[".package"]][["version"]]
[16:03:56.045]                         if (is.null(version)) 
[16:03:56.045]                           version <- utils::packageVersion("future")
[16:03:56.045]                       }
[16:03:56.045]                       else {
[16:03:56.045]                         version <- NULL
[16:03:56.045]                       }
[16:03:56.045]                       if (!has_future || version < "1.8.0") {
[16:03:56.045]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.045]                           "", base::R.version$version.string), 
[16:03:56.045]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.045]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.045]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.045]                             "release", "version")], collapse = " "), 
[16:03:56.045]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.045]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.045]                           info)
[16:03:56.045]                         info <- base::paste(info, collapse = "; ")
[16:03:56.045]                         if (!has_future) {
[16:03:56.045]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.045]                             info)
[16:03:56.045]                         }
[16:03:56.045]                         else {
[16:03:56.045]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.045]                             info, version)
[16:03:56.045]                         }
[16:03:56.045]                         base::stop(msg)
[16:03:56.045]                       }
[16:03:56.045]                     })
[16:03:56.045]                   }
[16:03:56.045]                   options(future.plan = NULL)
[16:03:56.045]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.045]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.045]                 }
[16:03:56.045]                 ...future.workdir <- getwd()
[16:03:56.045]             }
[16:03:56.045]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.045]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.045]         }
[16:03:56.045]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.045]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.045]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.045]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.045]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.045]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.045]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.045]             base::names(...future.oldOptions))
[16:03:56.045]     }
[16:03:56.045]     if (FALSE) {
[16:03:56.045]     }
[16:03:56.045]     else {
[16:03:56.045]         if (TRUE) {
[16:03:56.045]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.045]                 open = "w")
[16:03:56.045]         }
[16:03:56.045]         else {
[16:03:56.045]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.045]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.045]         }
[16:03:56.045]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.045]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.045]             base::sink(type = "output", split = FALSE)
[16:03:56.045]             base::close(...future.stdout)
[16:03:56.045]         }, add = TRUE)
[16:03:56.045]     }
[16:03:56.045]     ...future.frame <- base::sys.nframe()
[16:03:56.045]     ...future.conditions <- base::list()
[16:03:56.045]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.045]     if (FALSE) {
[16:03:56.045]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.045]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.045]     }
[16:03:56.045]     ...future.result <- base::tryCatch({
[16:03:56.045]         base::withCallingHandlers({
[16:03:56.045]             ...future.value <- base::withVisible(base::local({
[16:03:56.045]                 42L
[16:03:56.045]                 stop("Woops")
[16:03:56.045]             }))
[16:03:56.045]             future::FutureResult(value = ...future.value$value, 
[16:03:56.045]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.045]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.045]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.045]                     ...future.globalenv.names))
[16:03:56.045]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.045]         }, condition = base::local({
[16:03:56.045]             c <- base::c
[16:03:56.045]             inherits <- base::inherits
[16:03:56.045]             invokeRestart <- base::invokeRestart
[16:03:56.045]             length <- base::length
[16:03:56.045]             list <- base::list
[16:03:56.045]             seq.int <- base::seq.int
[16:03:56.045]             signalCondition <- base::signalCondition
[16:03:56.045]             sys.calls <- base::sys.calls
[16:03:56.045]             `[[` <- base::`[[`
[16:03:56.045]             `+` <- base::`+`
[16:03:56.045]             `<<-` <- base::`<<-`
[16:03:56.045]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.045]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.045]                   3L)]
[16:03:56.045]             }
[16:03:56.045]             function(cond) {
[16:03:56.045]                 is_error <- inherits(cond, "error")
[16:03:56.045]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.045]                   NULL)
[16:03:56.045]                 if (is_error) {
[16:03:56.045]                   sessionInformation <- function() {
[16:03:56.045]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.045]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.045]                       search = base::search(), system = base::Sys.info())
[16:03:56.045]                   }
[16:03:56.045]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.045]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.045]                     cond$call), session = sessionInformation(), 
[16:03:56.045]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.045]                   signalCondition(cond)
[16:03:56.045]                 }
[16:03:56.045]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.045]                 "immediateCondition"))) {
[16:03:56.045]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.045]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.045]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.045]                   if (TRUE && !signal) {
[16:03:56.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.045]                     {
[16:03:56.045]                       inherits <- base::inherits
[16:03:56.045]                       invokeRestart <- base::invokeRestart
[16:03:56.045]                       is.null <- base::is.null
[16:03:56.045]                       muffled <- FALSE
[16:03:56.045]                       if (inherits(cond, "message")) {
[16:03:56.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.045]                         if (muffled) 
[16:03:56.045]                           invokeRestart("muffleMessage")
[16:03:56.045]                       }
[16:03:56.045]                       else if (inherits(cond, "warning")) {
[16:03:56.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.045]                         if (muffled) 
[16:03:56.045]                           invokeRestart("muffleWarning")
[16:03:56.045]                       }
[16:03:56.045]                       else if (inherits(cond, "condition")) {
[16:03:56.045]                         if (!is.null(pattern)) {
[16:03:56.045]                           computeRestarts <- base::computeRestarts
[16:03:56.045]                           grepl <- base::grepl
[16:03:56.045]                           restarts <- computeRestarts(cond)
[16:03:56.045]                           for (restart in restarts) {
[16:03:56.045]                             name <- restart$name
[16:03:56.045]                             if (is.null(name)) 
[16:03:56.045]                               next
[16:03:56.045]                             if (!grepl(pattern, name)) 
[16:03:56.045]                               next
[16:03:56.045]                             invokeRestart(restart)
[16:03:56.045]                             muffled <- TRUE
[16:03:56.045]                             break
[16:03:56.045]                           }
[16:03:56.045]                         }
[16:03:56.045]                       }
[16:03:56.045]                       invisible(muffled)
[16:03:56.045]                     }
[16:03:56.045]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.045]                   }
[16:03:56.045]                 }
[16:03:56.045]                 else {
[16:03:56.045]                   if (TRUE) {
[16:03:56.045]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.045]                     {
[16:03:56.045]                       inherits <- base::inherits
[16:03:56.045]                       invokeRestart <- base::invokeRestart
[16:03:56.045]                       is.null <- base::is.null
[16:03:56.045]                       muffled <- FALSE
[16:03:56.045]                       if (inherits(cond, "message")) {
[16:03:56.045]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.045]                         if (muffled) 
[16:03:56.045]                           invokeRestart("muffleMessage")
[16:03:56.045]                       }
[16:03:56.045]                       else if (inherits(cond, "warning")) {
[16:03:56.045]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.045]                         if (muffled) 
[16:03:56.045]                           invokeRestart("muffleWarning")
[16:03:56.045]                       }
[16:03:56.045]                       else if (inherits(cond, "condition")) {
[16:03:56.045]                         if (!is.null(pattern)) {
[16:03:56.045]                           computeRestarts <- base::computeRestarts
[16:03:56.045]                           grepl <- base::grepl
[16:03:56.045]                           restarts <- computeRestarts(cond)
[16:03:56.045]                           for (restart in restarts) {
[16:03:56.045]                             name <- restart$name
[16:03:56.045]                             if (is.null(name)) 
[16:03:56.045]                               next
[16:03:56.045]                             if (!grepl(pattern, name)) 
[16:03:56.045]                               next
[16:03:56.045]                             invokeRestart(restart)
[16:03:56.045]                             muffled <- TRUE
[16:03:56.045]                             break
[16:03:56.045]                           }
[16:03:56.045]                         }
[16:03:56.045]                       }
[16:03:56.045]                       invisible(muffled)
[16:03:56.045]                     }
[16:03:56.045]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.045]                   }
[16:03:56.045]                 }
[16:03:56.045]             }
[16:03:56.045]         }))
[16:03:56.045]     }, error = function(ex) {
[16:03:56.045]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.045]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.045]                 ...future.rng), started = ...future.startTime, 
[16:03:56.045]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.045]             version = "1.8"), class = "FutureResult")
[16:03:56.045]     }, finally = {
[16:03:56.045]         if (!identical(...future.workdir, getwd())) 
[16:03:56.045]             setwd(...future.workdir)
[16:03:56.045]         {
[16:03:56.045]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.045]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.045]             }
[16:03:56.045]             base::options(...future.oldOptions)
[16:03:56.045]             if (.Platform$OS.type == "windows") {
[16:03:56.045]                 old_names <- names(...future.oldEnvVars)
[16:03:56.045]                 envs <- base::Sys.getenv()
[16:03:56.045]                 names <- names(envs)
[16:03:56.045]                 common <- intersect(names, old_names)
[16:03:56.045]                 added <- setdiff(names, old_names)
[16:03:56.045]                 removed <- setdiff(old_names, names)
[16:03:56.045]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.045]                   envs[common]]
[16:03:56.045]                 NAMES <- toupper(changed)
[16:03:56.045]                 args <- list()
[16:03:56.045]                 for (kk in seq_along(NAMES)) {
[16:03:56.045]                   name <- changed[[kk]]
[16:03:56.045]                   NAME <- NAMES[[kk]]
[16:03:56.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.045]                     next
[16:03:56.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.045]                 }
[16:03:56.045]                 NAMES <- toupper(added)
[16:03:56.045]                 for (kk in seq_along(NAMES)) {
[16:03:56.045]                   name <- added[[kk]]
[16:03:56.045]                   NAME <- NAMES[[kk]]
[16:03:56.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.045]                     next
[16:03:56.045]                   args[[name]] <- ""
[16:03:56.045]                 }
[16:03:56.045]                 NAMES <- toupper(removed)
[16:03:56.045]                 for (kk in seq_along(NAMES)) {
[16:03:56.045]                   name <- removed[[kk]]
[16:03:56.045]                   NAME <- NAMES[[kk]]
[16:03:56.045]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.045]                     next
[16:03:56.045]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.045]                 }
[16:03:56.045]                 if (length(args) > 0) 
[16:03:56.045]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.045]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.045]             }
[16:03:56.045]             else {
[16:03:56.045]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.045]             }
[16:03:56.045]             {
[16:03:56.045]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.045]                   0L) {
[16:03:56.045]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.045]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.045]                   base::options(opts)
[16:03:56.045]                 }
[16:03:56.045]                 {
[16:03:56.045]                   {
[16:03:56.045]                     NULL
[16:03:56.045]                     RNGkind("Mersenne-Twister")
[16:03:56.045]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.045]                       inherits = FALSE)
[16:03:56.045]                   }
[16:03:56.045]                   options(future.plan = NULL)
[16:03:56.045]                   if (is.na(NA_character_)) 
[16:03:56.045]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.045]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.045]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.045]                   {
[16:03:56.045]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.045]                     if (!future$lazy) 
[16:03:56.045]                       future <- run(future)
[16:03:56.045]                     invisible(future)
[16:03:56.045]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.045]                 }
[16:03:56.045]             }
[16:03:56.045]         }
[16:03:56.045]     })
[16:03:56.045]     if (TRUE) {
[16:03:56.045]         base::sink(type = "output", split = FALSE)
[16:03:56.045]         if (TRUE) {
[16:03:56.045]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.045]         }
[16:03:56.045]         else {
[16:03:56.045]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.045]         }
[16:03:56.045]         base::close(...future.stdout)
[16:03:56.045]         ...future.stdout <- NULL
[16:03:56.045]     }
[16:03:56.045]     ...future.result$conditions <- ...future.conditions
[16:03:56.045]     ...future.result$finished <- base::Sys.time()
[16:03:56.045]     ...future.result
[16:03:56.045] }
[16:03:56.047] plan(): Setting new future strategy stack:
[16:03:56.047] List of future strategies:
[16:03:56.047] 1. sequential:
[16:03:56.047]    - args: function (..., envir = parent.frame())
[16:03:56.047]    - tweaked: FALSE
[16:03:56.047]    - call: NULL
[16:03:56.048] plan(): nbrOfWorkers() = 1
[16:03:56.048] plan(): Setting new future strategy stack:
[16:03:56.048] List of future strategies:
[16:03:56.048] 1. sequential:
[16:03:56.048]    - args: function (..., envir = parent.frame())
[16:03:56.048]    - tweaked: FALSE
[16:03:56.048]    - call: future::plan("sequential")
[16:03:56.049] plan(): nbrOfWorkers() = 1
[16:03:56.049] SequentialFuture started (and completed)
[16:03:56.049] signalConditions() ...
[16:03:56.049]  - include = ‘immediateCondition’
[16:03:56.049]  - exclude = 
[16:03:56.049]  - resignal = FALSE
[16:03:56.049]  - Number of conditions: 1
[16:03:56.049] signalConditions() ... done
[16:03:56.049] - Launch lazy future ... done
[16:03:56.050] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[16:03:56.050] getGlobalsAndPackages() ...
[16:03:56.050] Searching for globals...
[16:03:56.051] - globals found: [2] ‘{’, ‘stop’
[16:03:56.051] Searching for globals ... DONE
[16:03:56.051] Resolving globals: FALSE
[16:03:56.051] 
[16:03:56.051] 
[16:03:56.051] getGlobalsAndPackages() ... DONE
[16:03:56.051] run() for ‘Future’ ...
[16:03:56.052] - state: ‘created’
[16:03:56.052] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.052] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.052] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.052]   - Field: ‘label’
[16:03:56.052]   - Field: ‘local’
[16:03:56.052]   - Field: ‘owner’
[16:03:56.052]   - Field: ‘envir’
[16:03:56.053]   - Field: ‘packages’
[16:03:56.053]   - Field: ‘gc’
[16:03:56.053]   - Field: ‘conditions’
[16:03:56.053]   - Field: ‘expr’
[16:03:56.053]   - Field: ‘uuid’
[16:03:56.053]   - Field: ‘seed’
[16:03:56.053]   - Field: ‘version’
[16:03:56.053]   - Field: ‘result’
[16:03:56.053]   - Field: ‘asynchronous’
[16:03:56.053]   - Field: ‘calls’
[16:03:56.053]   - Field: ‘globals’
[16:03:56.053]   - Field: ‘stdout’
[16:03:56.054]   - Field: ‘earlySignal’
[16:03:56.054]   - Field: ‘lazy’
[16:03:56.054]   - Field: ‘state’
[16:03:56.054] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.054] - Launch lazy future ...
[16:03:56.054] Packages needed by the future expression (n = 0): <none>
[16:03:56.054] Packages needed by future strategies (n = 0): <none>
[16:03:56.055] {
[16:03:56.055]     {
[16:03:56.055]         {
[16:03:56.055]             ...future.startTime <- base::Sys.time()
[16:03:56.055]             {
[16:03:56.055]                 {
[16:03:56.055]                   {
[16:03:56.055]                     base::local({
[16:03:56.055]                       has_future <- base::requireNamespace("future", 
[16:03:56.055]                         quietly = TRUE)
[16:03:56.055]                       if (has_future) {
[16:03:56.055]                         ns <- base::getNamespace("future")
[16:03:56.055]                         version <- ns[[".package"]][["version"]]
[16:03:56.055]                         if (is.null(version)) 
[16:03:56.055]                           version <- utils::packageVersion("future")
[16:03:56.055]                       }
[16:03:56.055]                       else {
[16:03:56.055]                         version <- NULL
[16:03:56.055]                       }
[16:03:56.055]                       if (!has_future || version < "1.8.0") {
[16:03:56.055]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.055]                           "", base::R.version$version.string), 
[16:03:56.055]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.055]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.055]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.055]                             "release", "version")], collapse = " "), 
[16:03:56.055]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.055]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.055]                           info)
[16:03:56.055]                         info <- base::paste(info, collapse = "; ")
[16:03:56.055]                         if (!has_future) {
[16:03:56.055]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.055]                             info)
[16:03:56.055]                         }
[16:03:56.055]                         else {
[16:03:56.055]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.055]                             info, version)
[16:03:56.055]                         }
[16:03:56.055]                         base::stop(msg)
[16:03:56.055]                       }
[16:03:56.055]                     })
[16:03:56.055]                   }
[16:03:56.055]                   options(future.plan = NULL)
[16:03:56.055]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.055]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.055]                 }
[16:03:56.055]                 ...future.workdir <- getwd()
[16:03:56.055]             }
[16:03:56.055]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.055]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.055]         }
[16:03:56.055]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.055]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.055]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.055]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.055]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.055]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.055]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.055]             base::names(...future.oldOptions))
[16:03:56.055]     }
[16:03:56.055]     if (FALSE) {
[16:03:56.055]     }
[16:03:56.055]     else {
[16:03:56.055]         if (TRUE) {
[16:03:56.055]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.055]                 open = "w")
[16:03:56.055]         }
[16:03:56.055]         else {
[16:03:56.055]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.055]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.055]         }
[16:03:56.055]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.055]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.055]             base::sink(type = "output", split = FALSE)
[16:03:56.055]             base::close(...future.stdout)
[16:03:56.055]         }, add = TRUE)
[16:03:56.055]     }
[16:03:56.055]     ...future.frame <- base::sys.nframe()
[16:03:56.055]     ...future.conditions <- base::list()
[16:03:56.055]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.055]     if (FALSE) {
[16:03:56.055]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.055]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.055]     }
[16:03:56.055]     ...future.result <- base::tryCatch({
[16:03:56.055]         base::withCallingHandlers({
[16:03:56.055]             ...future.value <- base::withVisible(base::local({
[16:03:56.055]                 42L
[16:03:56.055]                 stop("Woops")
[16:03:56.055]             }))
[16:03:56.055]             future::FutureResult(value = ...future.value$value, 
[16:03:56.055]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.055]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.055]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.055]                     ...future.globalenv.names))
[16:03:56.055]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.055]         }, condition = base::local({
[16:03:56.055]             c <- base::c
[16:03:56.055]             inherits <- base::inherits
[16:03:56.055]             invokeRestart <- base::invokeRestart
[16:03:56.055]             length <- base::length
[16:03:56.055]             list <- base::list
[16:03:56.055]             seq.int <- base::seq.int
[16:03:56.055]             signalCondition <- base::signalCondition
[16:03:56.055]             sys.calls <- base::sys.calls
[16:03:56.055]             `[[` <- base::`[[`
[16:03:56.055]             `+` <- base::`+`
[16:03:56.055]             `<<-` <- base::`<<-`
[16:03:56.055]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.055]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.055]                   3L)]
[16:03:56.055]             }
[16:03:56.055]             function(cond) {
[16:03:56.055]                 is_error <- inherits(cond, "error")
[16:03:56.055]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.055]                   NULL)
[16:03:56.055]                 if (is_error) {
[16:03:56.055]                   sessionInformation <- function() {
[16:03:56.055]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.055]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.055]                       search = base::search(), system = base::Sys.info())
[16:03:56.055]                   }
[16:03:56.055]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.055]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.055]                     cond$call), session = sessionInformation(), 
[16:03:56.055]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.055]                   signalCondition(cond)
[16:03:56.055]                 }
[16:03:56.055]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.055]                 "immediateCondition"))) {
[16:03:56.055]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.055]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.055]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.055]                   if (TRUE && !signal) {
[16:03:56.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.055]                     {
[16:03:56.055]                       inherits <- base::inherits
[16:03:56.055]                       invokeRestart <- base::invokeRestart
[16:03:56.055]                       is.null <- base::is.null
[16:03:56.055]                       muffled <- FALSE
[16:03:56.055]                       if (inherits(cond, "message")) {
[16:03:56.055]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.055]                         if (muffled) 
[16:03:56.055]                           invokeRestart("muffleMessage")
[16:03:56.055]                       }
[16:03:56.055]                       else if (inherits(cond, "warning")) {
[16:03:56.055]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.055]                         if (muffled) 
[16:03:56.055]                           invokeRestart("muffleWarning")
[16:03:56.055]                       }
[16:03:56.055]                       else if (inherits(cond, "condition")) {
[16:03:56.055]                         if (!is.null(pattern)) {
[16:03:56.055]                           computeRestarts <- base::computeRestarts
[16:03:56.055]                           grepl <- base::grepl
[16:03:56.055]                           restarts <- computeRestarts(cond)
[16:03:56.055]                           for (restart in restarts) {
[16:03:56.055]                             name <- restart$name
[16:03:56.055]                             if (is.null(name)) 
[16:03:56.055]                               next
[16:03:56.055]                             if (!grepl(pattern, name)) 
[16:03:56.055]                               next
[16:03:56.055]                             invokeRestart(restart)
[16:03:56.055]                             muffled <- TRUE
[16:03:56.055]                             break
[16:03:56.055]                           }
[16:03:56.055]                         }
[16:03:56.055]                       }
[16:03:56.055]                       invisible(muffled)
[16:03:56.055]                     }
[16:03:56.055]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.055]                   }
[16:03:56.055]                 }
[16:03:56.055]                 else {
[16:03:56.055]                   if (TRUE) {
[16:03:56.055]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.055]                     {
[16:03:56.055]                       inherits <- base::inherits
[16:03:56.055]                       invokeRestart <- base::invokeRestart
[16:03:56.055]                       is.null <- base::is.null
[16:03:56.055]                       muffled <- FALSE
[16:03:56.055]                       if (inherits(cond, "message")) {
[16:03:56.055]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.055]                         if (muffled) 
[16:03:56.055]                           invokeRestart("muffleMessage")
[16:03:56.055]                       }
[16:03:56.055]                       else if (inherits(cond, "warning")) {
[16:03:56.055]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.055]                         if (muffled) 
[16:03:56.055]                           invokeRestart("muffleWarning")
[16:03:56.055]                       }
[16:03:56.055]                       else if (inherits(cond, "condition")) {
[16:03:56.055]                         if (!is.null(pattern)) {
[16:03:56.055]                           computeRestarts <- base::computeRestarts
[16:03:56.055]                           grepl <- base::grepl
[16:03:56.055]                           restarts <- computeRestarts(cond)
[16:03:56.055]                           for (restart in restarts) {
[16:03:56.055]                             name <- restart$name
[16:03:56.055]                             if (is.null(name)) 
[16:03:56.055]                               next
[16:03:56.055]                             if (!grepl(pattern, name)) 
[16:03:56.055]                               next
[16:03:56.055]                             invokeRestart(restart)
[16:03:56.055]                             muffled <- TRUE
[16:03:56.055]                             break
[16:03:56.055]                           }
[16:03:56.055]                         }
[16:03:56.055]                       }
[16:03:56.055]                       invisible(muffled)
[16:03:56.055]                     }
[16:03:56.055]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.055]                   }
[16:03:56.055]                 }
[16:03:56.055]             }
[16:03:56.055]         }))
[16:03:56.055]     }, error = function(ex) {
[16:03:56.055]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.055]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.055]                 ...future.rng), started = ...future.startTime, 
[16:03:56.055]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.055]             version = "1.8"), class = "FutureResult")
[16:03:56.055]     }, finally = {
[16:03:56.055]         if (!identical(...future.workdir, getwd())) 
[16:03:56.055]             setwd(...future.workdir)
[16:03:56.055]         {
[16:03:56.055]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.055]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.055]             }
[16:03:56.055]             base::options(...future.oldOptions)
[16:03:56.055]             if (.Platform$OS.type == "windows") {
[16:03:56.055]                 old_names <- names(...future.oldEnvVars)
[16:03:56.055]                 envs <- base::Sys.getenv()
[16:03:56.055]                 names <- names(envs)
[16:03:56.055]                 common <- intersect(names, old_names)
[16:03:56.055]                 added <- setdiff(names, old_names)
[16:03:56.055]                 removed <- setdiff(old_names, names)
[16:03:56.055]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.055]                   envs[common]]
[16:03:56.055]                 NAMES <- toupper(changed)
[16:03:56.055]                 args <- list()
[16:03:56.055]                 for (kk in seq_along(NAMES)) {
[16:03:56.055]                   name <- changed[[kk]]
[16:03:56.055]                   NAME <- NAMES[[kk]]
[16:03:56.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.055]                     next
[16:03:56.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.055]                 }
[16:03:56.055]                 NAMES <- toupper(added)
[16:03:56.055]                 for (kk in seq_along(NAMES)) {
[16:03:56.055]                   name <- added[[kk]]
[16:03:56.055]                   NAME <- NAMES[[kk]]
[16:03:56.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.055]                     next
[16:03:56.055]                   args[[name]] <- ""
[16:03:56.055]                 }
[16:03:56.055]                 NAMES <- toupper(removed)
[16:03:56.055]                 for (kk in seq_along(NAMES)) {
[16:03:56.055]                   name <- removed[[kk]]
[16:03:56.055]                   NAME <- NAMES[[kk]]
[16:03:56.055]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.055]                     next
[16:03:56.055]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.055]                 }
[16:03:56.055]                 if (length(args) > 0) 
[16:03:56.055]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.055]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.055]             }
[16:03:56.055]             else {
[16:03:56.055]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.055]             }
[16:03:56.055]             {
[16:03:56.055]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.055]                   0L) {
[16:03:56.055]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.055]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.055]                   base::options(opts)
[16:03:56.055]                 }
[16:03:56.055]                 {
[16:03:56.055]                   {
[16:03:56.055]                     NULL
[16:03:56.055]                     RNGkind("Mersenne-Twister")
[16:03:56.055]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.055]                       inherits = FALSE)
[16:03:56.055]                   }
[16:03:56.055]                   options(future.plan = NULL)
[16:03:56.055]                   if (is.na(NA_character_)) 
[16:03:56.055]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.055]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.055]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.055]                   {
[16:03:56.055]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.055]                     if (!future$lazy) 
[16:03:56.055]                       future <- run(future)
[16:03:56.055]                     invisible(future)
[16:03:56.055]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.055]                 }
[16:03:56.055]             }
[16:03:56.055]         }
[16:03:56.055]     })
[16:03:56.055]     if (TRUE) {
[16:03:56.055]         base::sink(type = "output", split = FALSE)
[16:03:56.055]         if (TRUE) {
[16:03:56.055]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.055]         }
[16:03:56.055]         else {
[16:03:56.055]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.055]         }
[16:03:56.055]         base::close(...future.stdout)
[16:03:56.055]         ...future.stdout <- NULL
[16:03:56.055]     }
[16:03:56.055]     ...future.result$conditions <- ...future.conditions
[16:03:56.055]     ...future.result$finished <- base::Sys.time()
[16:03:56.055]     ...future.result
[16:03:56.055] }
[16:03:56.056] plan(): Setting new future strategy stack:
[16:03:56.056] List of future strategies:
[16:03:56.056] 1. sequential:
[16:03:56.056]    - args: function (..., envir = parent.frame())
[16:03:56.056]    - tweaked: FALSE
[16:03:56.056]    - call: NULL
[16:03:56.057] plan(): nbrOfWorkers() = 1
[16:03:56.057] plan(): Setting new future strategy stack:
[16:03:56.058] List of future strategies:
[16:03:56.058] 1. sequential:
[16:03:56.058]    - args: function (..., envir = parent.frame())
[16:03:56.058]    - tweaked: FALSE
[16:03:56.058]    - call: future::plan("sequential")
[16:03:56.058] plan(): nbrOfWorkers() = 1
[16:03:56.058] SequentialFuture started (and completed)
[16:03:56.058] signalConditions() ...
[16:03:56.058]  - include = ‘immediateCondition’
[16:03:56.058]  - exclude = 
[16:03:56.058]  - resignal = FALSE
[16:03:56.058]  - Number of conditions: 1
[16:03:56.059] signalConditions() ... done
[16:03:56.059] - Launch lazy future ... done
[16:03:56.059] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[16:03:56.059] resolve() on list ...
[16:03:56.059]  recursive: 0
[16:03:56.060]  length: 2
[16:03:56.060] 
[16:03:56.060] resolved() for ‘SequentialFuture’ ...
[16:03:56.060] - state: ‘finished’
[16:03:56.060] - run: TRUE
[16:03:56.060] - result: ‘FutureResult’
[16:03:56.060] resolved() for ‘SequentialFuture’ ... done
[16:03:56.060] Future #1
[16:03:56.060] signalConditions() ...
[16:03:56.060]  - include = ‘immediateCondition’
[16:03:56.060]  - exclude = 
[16:03:56.061]  - resignal = FALSE
[16:03:56.061]  - Number of conditions: 1
[16:03:56.061] signalConditions() ... done
[16:03:56.061] signalConditionsASAP(SequentialFuture, pos=1) ...
[16:03:56.061] - nx: 2
[16:03:56.061] - relay: TRUE
[16:03:56.061] - stdout: TRUE
[16:03:56.061] - signal: FALSE
[16:03:56.061] - resignal: FALSE
[16:03:56.061] - force: TRUE
[16:03:56.061] - relayed: [n=2] FALSE, FALSE
[16:03:56.061] - queued futures: [n=2] FALSE, FALSE
[16:03:56.062]  - until=1
[16:03:56.062]  - relaying element #1
[16:03:56.062] signalConditions() ...
[16:03:56.062]  - include = ‘immediateCondition’
[16:03:56.062]  - exclude = 
[16:03:56.062]  - resignal = FALSE
[16:03:56.062]  - Number of conditions: 1
[16:03:56.062] signalConditions() ... done
[16:03:56.062] - relayed: [n=2] TRUE, FALSE
[16:03:56.062] - queued futures: [n=2] TRUE, FALSE
[16:03:56.062] signalConditionsASAP(SequentialFuture, pos=1) ... done
[16:03:56.063]  length: 1 (resolved future 1)
[16:03:56.063] resolved() for ‘SequentialFuture’ ...
[16:03:56.063] - state: ‘finished’
[16:03:56.063] - run: TRUE
[16:03:56.064] - result: ‘FutureResult’
[16:03:56.064] resolved() for ‘SequentialFuture’ ... done
[16:03:56.064] Future #2
[16:03:56.064] signalConditions() ...
[16:03:56.064]  - include = ‘immediateCondition’
[16:03:56.065]  - exclude = 
[16:03:56.065]  - resignal = FALSE
[16:03:56.065]  - Number of conditions: 1
[16:03:56.065] signalConditions() ... done
[16:03:56.065] signalConditionsASAP(SequentialFuture, pos=2) ...
[16:03:56.065] - nx: 2
[16:03:56.065] - relay: TRUE
[16:03:56.065] - stdout: TRUE
[16:03:56.065] - signal: FALSE
[16:03:56.065] - resignal: FALSE
[16:03:56.065] - force: TRUE
[16:03:56.065] - relayed: [n=2] TRUE, FALSE
[16:03:56.066] - queued futures: [n=2] TRUE, FALSE
[16:03:56.066]  - until=2
[16:03:56.066]  - relaying element #2
[16:03:56.066] signalConditions() ...
[16:03:56.066]  - include = ‘immediateCondition’
[16:03:56.066]  - exclude = 
[16:03:56.066]  - resignal = FALSE
[16:03:56.066]  - Number of conditions: 1
[16:03:56.066] signalConditions() ... done
[16:03:56.066] - relayed: [n=2] TRUE, TRUE
[16:03:56.066] - queued futures: [n=2] TRUE, TRUE
[16:03:56.067] signalConditionsASAP(SequentialFuture, pos=2) ... done
[16:03:56.067]  length: 0 (resolved future 2)
[16:03:56.067] Relaying remaining futures
[16:03:56.067] signalConditionsASAP(NULL, pos=0) ...
[16:03:56.067] - nx: 2
[16:03:56.067] - relay: TRUE
[16:03:56.067] - stdout: TRUE
[16:03:56.067] - signal: FALSE
[16:03:56.067] - resignal: FALSE
[16:03:56.067] - force: TRUE
[16:03:56.067] - relayed: [n=2] TRUE, TRUE
[16:03:56.067] - queued futures: [n=2] TRUE, TRUE
 - flush all
[16:03:56.068] - relayed: [n=2] TRUE, TRUE
[16:03:56.068] - queued futures: [n=2] TRUE, TRUE
[16:03:56.068] signalConditionsASAP(NULL, pos=0) ... done
[16:03:56.068] resolve() on list ... DONE
[16:03:56.068] signalConditions() ...
[16:03:56.068]  - include = ‘immediateCondition’
[16:03:56.068]  - exclude = 
[16:03:56.068]  - resignal = FALSE
[16:03:56.068]  - Number of conditions: 1
[16:03:56.068] signalConditions() ... done
[16:03:56.068] signalConditions() ...
[16:03:56.069]  - include = ‘immediateCondition’
[16:03:56.069]  - exclude = 
[16:03:56.069]  - resignal = FALSE
[16:03:56.069]  - Number of conditions: 1
[16:03:56.069] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[16:03:56.069] resolved() for ‘SequentialFuture’ ...
[16:03:56.069] - state: ‘finished’
[16:03:56.069] - run: TRUE
[16:03:56.069] - result: ‘FutureResult’
[16:03:56.070] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[16:03:56.070] getGlobalsAndPackages() ...
[16:03:56.070] Searching for globals...
[16:03:56.070] 
[16:03:56.070] Searching for globals ... DONE
[16:03:56.071] - globals: [0] <none>
[16:03:56.071] getGlobalsAndPackages() ... DONE
[16:03:56.071] run() for ‘Future’ ...
[16:03:56.071] - state: ‘created’
[16:03:56.071] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.071] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.071] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.072]   - Field: ‘label’
[16:03:56.072]   - Field: ‘local’
[16:03:56.072]   - Field: ‘owner’
[16:03:56.072]   - Field: ‘envir’
[16:03:56.072]   - Field: ‘packages’
[16:03:56.072]   - Field: ‘gc’
[16:03:56.072]   - Field: ‘conditions’
[16:03:56.072]   - Field: ‘expr’
[16:03:56.072]   - Field: ‘uuid’
[16:03:56.072]   - Field: ‘seed’
[16:03:56.072]   - Field: ‘version’
[16:03:56.072]   - Field: ‘result’
[16:03:56.073]   - Field: ‘asynchronous’
[16:03:56.073]   - Field: ‘calls’
[16:03:56.073]   - Field: ‘globals’
[16:03:56.073]   - Field: ‘stdout’
[16:03:56.073]   - Field: ‘earlySignal’
[16:03:56.073]   - Field: ‘lazy’
[16:03:56.073]   - Field: ‘state’
[16:03:56.073] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.073] - Launch lazy future ...
[16:03:56.073] Packages needed by the future expression (n = 0): <none>
[16:03:56.074] Packages needed by future strategies (n = 0): <none>
[16:03:56.074] {
[16:03:56.074]     {
[16:03:56.074]         {
[16:03:56.074]             ...future.startTime <- base::Sys.time()
[16:03:56.074]             {
[16:03:56.074]                 {
[16:03:56.074]                   {
[16:03:56.074]                     base::local({
[16:03:56.074]                       has_future <- base::requireNamespace("future", 
[16:03:56.074]                         quietly = TRUE)
[16:03:56.074]                       if (has_future) {
[16:03:56.074]                         ns <- base::getNamespace("future")
[16:03:56.074]                         version <- ns[[".package"]][["version"]]
[16:03:56.074]                         if (is.null(version)) 
[16:03:56.074]                           version <- utils::packageVersion("future")
[16:03:56.074]                       }
[16:03:56.074]                       else {
[16:03:56.074]                         version <- NULL
[16:03:56.074]                       }
[16:03:56.074]                       if (!has_future || version < "1.8.0") {
[16:03:56.074]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.074]                           "", base::R.version$version.string), 
[16:03:56.074]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.074]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.074]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.074]                             "release", "version")], collapse = " "), 
[16:03:56.074]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.074]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.074]                           info)
[16:03:56.074]                         info <- base::paste(info, collapse = "; ")
[16:03:56.074]                         if (!has_future) {
[16:03:56.074]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.074]                             info)
[16:03:56.074]                         }
[16:03:56.074]                         else {
[16:03:56.074]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.074]                             info, version)
[16:03:56.074]                         }
[16:03:56.074]                         base::stop(msg)
[16:03:56.074]                       }
[16:03:56.074]                     })
[16:03:56.074]                   }
[16:03:56.074]                   options(future.plan = NULL)
[16:03:56.074]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.074]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.074]                 }
[16:03:56.074]                 ...future.workdir <- getwd()
[16:03:56.074]             }
[16:03:56.074]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.074]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.074]         }
[16:03:56.074]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.074]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.074]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.074]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.074]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.074]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.074]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.074]             base::names(...future.oldOptions))
[16:03:56.074]     }
[16:03:56.074]     if (FALSE) {
[16:03:56.074]     }
[16:03:56.074]     else {
[16:03:56.074]         if (TRUE) {
[16:03:56.074]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.074]                 open = "w")
[16:03:56.074]         }
[16:03:56.074]         else {
[16:03:56.074]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.074]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.074]         }
[16:03:56.074]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.074]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.074]             base::sink(type = "output", split = FALSE)
[16:03:56.074]             base::close(...future.stdout)
[16:03:56.074]         }, add = TRUE)
[16:03:56.074]     }
[16:03:56.074]     ...future.frame <- base::sys.nframe()
[16:03:56.074]     ...future.conditions <- base::list()
[16:03:56.074]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.074]     if (FALSE) {
[16:03:56.074]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.074]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.074]     }
[16:03:56.074]     ...future.result <- base::tryCatch({
[16:03:56.074]         base::withCallingHandlers({
[16:03:56.074]             ...future.value <- base::withVisible(base::local(42L))
[16:03:56.074]             future::FutureResult(value = ...future.value$value, 
[16:03:56.074]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.074]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.074]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.074]                     ...future.globalenv.names))
[16:03:56.074]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.074]         }, condition = base::local({
[16:03:56.074]             c <- base::c
[16:03:56.074]             inherits <- base::inherits
[16:03:56.074]             invokeRestart <- base::invokeRestart
[16:03:56.074]             length <- base::length
[16:03:56.074]             list <- base::list
[16:03:56.074]             seq.int <- base::seq.int
[16:03:56.074]             signalCondition <- base::signalCondition
[16:03:56.074]             sys.calls <- base::sys.calls
[16:03:56.074]             `[[` <- base::`[[`
[16:03:56.074]             `+` <- base::`+`
[16:03:56.074]             `<<-` <- base::`<<-`
[16:03:56.074]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.074]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.074]                   3L)]
[16:03:56.074]             }
[16:03:56.074]             function(cond) {
[16:03:56.074]                 is_error <- inherits(cond, "error")
[16:03:56.074]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.074]                   NULL)
[16:03:56.074]                 if (is_error) {
[16:03:56.074]                   sessionInformation <- function() {
[16:03:56.074]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.074]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.074]                       search = base::search(), system = base::Sys.info())
[16:03:56.074]                   }
[16:03:56.074]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.074]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.074]                     cond$call), session = sessionInformation(), 
[16:03:56.074]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.074]                   signalCondition(cond)
[16:03:56.074]                 }
[16:03:56.074]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.074]                 "immediateCondition"))) {
[16:03:56.074]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.074]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.074]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.074]                   if (TRUE && !signal) {
[16:03:56.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.074]                     {
[16:03:56.074]                       inherits <- base::inherits
[16:03:56.074]                       invokeRestart <- base::invokeRestart
[16:03:56.074]                       is.null <- base::is.null
[16:03:56.074]                       muffled <- FALSE
[16:03:56.074]                       if (inherits(cond, "message")) {
[16:03:56.074]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.074]                         if (muffled) 
[16:03:56.074]                           invokeRestart("muffleMessage")
[16:03:56.074]                       }
[16:03:56.074]                       else if (inherits(cond, "warning")) {
[16:03:56.074]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.074]                         if (muffled) 
[16:03:56.074]                           invokeRestart("muffleWarning")
[16:03:56.074]                       }
[16:03:56.074]                       else if (inherits(cond, "condition")) {
[16:03:56.074]                         if (!is.null(pattern)) {
[16:03:56.074]                           computeRestarts <- base::computeRestarts
[16:03:56.074]                           grepl <- base::grepl
[16:03:56.074]                           restarts <- computeRestarts(cond)
[16:03:56.074]                           for (restart in restarts) {
[16:03:56.074]                             name <- restart$name
[16:03:56.074]                             if (is.null(name)) 
[16:03:56.074]                               next
[16:03:56.074]                             if (!grepl(pattern, name)) 
[16:03:56.074]                               next
[16:03:56.074]                             invokeRestart(restart)
[16:03:56.074]                             muffled <- TRUE
[16:03:56.074]                             break
[16:03:56.074]                           }
[16:03:56.074]                         }
[16:03:56.074]                       }
[16:03:56.074]                       invisible(muffled)
[16:03:56.074]                     }
[16:03:56.074]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.074]                   }
[16:03:56.074]                 }
[16:03:56.074]                 else {
[16:03:56.074]                   if (TRUE) {
[16:03:56.074]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.074]                     {
[16:03:56.074]                       inherits <- base::inherits
[16:03:56.074]                       invokeRestart <- base::invokeRestart
[16:03:56.074]                       is.null <- base::is.null
[16:03:56.074]                       muffled <- FALSE
[16:03:56.074]                       if (inherits(cond, "message")) {
[16:03:56.074]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.074]                         if (muffled) 
[16:03:56.074]                           invokeRestart("muffleMessage")
[16:03:56.074]                       }
[16:03:56.074]                       else if (inherits(cond, "warning")) {
[16:03:56.074]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.074]                         if (muffled) 
[16:03:56.074]                           invokeRestart("muffleWarning")
[16:03:56.074]                       }
[16:03:56.074]                       else if (inherits(cond, "condition")) {
[16:03:56.074]                         if (!is.null(pattern)) {
[16:03:56.074]                           computeRestarts <- base::computeRestarts
[16:03:56.074]                           grepl <- base::grepl
[16:03:56.074]                           restarts <- computeRestarts(cond)
[16:03:56.074]                           for (restart in restarts) {
[16:03:56.074]                             name <- restart$name
[16:03:56.074]                             if (is.null(name)) 
[16:03:56.074]                               next
[16:03:56.074]                             if (!grepl(pattern, name)) 
[16:03:56.074]                               next
[16:03:56.074]                             invokeRestart(restart)
[16:03:56.074]                             muffled <- TRUE
[16:03:56.074]                             break
[16:03:56.074]                           }
[16:03:56.074]                         }
[16:03:56.074]                       }
[16:03:56.074]                       invisible(muffled)
[16:03:56.074]                     }
[16:03:56.074]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.074]                   }
[16:03:56.074]                 }
[16:03:56.074]             }
[16:03:56.074]         }))
[16:03:56.074]     }, error = function(ex) {
[16:03:56.074]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.074]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.074]                 ...future.rng), started = ...future.startTime, 
[16:03:56.074]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.074]             version = "1.8"), class = "FutureResult")
[16:03:56.074]     }, finally = {
[16:03:56.074]         if (!identical(...future.workdir, getwd())) 
[16:03:56.074]             setwd(...future.workdir)
[16:03:56.074]         {
[16:03:56.074]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.074]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.074]             }
[16:03:56.074]             base::options(...future.oldOptions)
[16:03:56.074]             if (.Platform$OS.type == "windows") {
[16:03:56.074]                 old_names <- names(...future.oldEnvVars)
[16:03:56.074]                 envs <- base::Sys.getenv()
[16:03:56.074]                 names <- names(envs)
[16:03:56.074]                 common <- intersect(names, old_names)
[16:03:56.074]                 added <- setdiff(names, old_names)
[16:03:56.074]                 removed <- setdiff(old_names, names)
[16:03:56.074]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.074]                   envs[common]]
[16:03:56.074]                 NAMES <- toupper(changed)
[16:03:56.074]                 args <- list()
[16:03:56.074]                 for (kk in seq_along(NAMES)) {
[16:03:56.074]                   name <- changed[[kk]]
[16:03:56.074]                   NAME <- NAMES[[kk]]
[16:03:56.074]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.074]                     next
[16:03:56.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.074]                 }
[16:03:56.074]                 NAMES <- toupper(added)
[16:03:56.074]                 for (kk in seq_along(NAMES)) {
[16:03:56.074]                   name <- added[[kk]]
[16:03:56.074]                   NAME <- NAMES[[kk]]
[16:03:56.074]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.074]                     next
[16:03:56.074]                   args[[name]] <- ""
[16:03:56.074]                 }
[16:03:56.074]                 NAMES <- toupper(removed)
[16:03:56.074]                 for (kk in seq_along(NAMES)) {
[16:03:56.074]                   name <- removed[[kk]]
[16:03:56.074]                   NAME <- NAMES[[kk]]
[16:03:56.074]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.074]                     next
[16:03:56.074]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.074]                 }
[16:03:56.074]                 if (length(args) > 0) 
[16:03:56.074]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.074]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.074]             }
[16:03:56.074]             else {
[16:03:56.074]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.074]             }
[16:03:56.074]             {
[16:03:56.074]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.074]                   0L) {
[16:03:56.074]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.074]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.074]                   base::options(opts)
[16:03:56.074]                 }
[16:03:56.074]                 {
[16:03:56.074]                   {
[16:03:56.074]                     NULL
[16:03:56.074]                     RNGkind("Mersenne-Twister")
[16:03:56.074]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.074]                       inherits = FALSE)
[16:03:56.074]                   }
[16:03:56.074]                   options(future.plan = NULL)
[16:03:56.074]                   if (is.na(NA_character_)) 
[16:03:56.074]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.074]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.074]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.074]                   {
[16:03:56.074]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.074]                     if (!future$lazy) 
[16:03:56.074]                       future <- run(future)
[16:03:56.074]                     invisible(future)
[16:03:56.074]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.074]                 }
[16:03:56.074]             }
[16:03:56.074]         }
[16:03:56.074]     })
[16:03:56.074]     if (TRUE) {
[16:03:56.074]         base::sink(type = "output", split = FALSE)
[16:03:56.074]         if (TRUE) {
[16:03:56.074]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.074]         }
[16:03:56.074]         else {
[16:03:56.074]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.074]         }
[16:03:56.074]         base::close(...future.stdout)
[16:03:56.074]         ...future.stdout <- NULL
[16:03:56.074]     }
[16:03:56.074]     ...future.result$conditions <- ...future.conditions
[16:03:56.074]     ...future.result$finished <- base::Sys.time()
[16:03:56.074]     ...future.result
[16:03:56.074] }
[16:03:56.076] plan(): Setting new future strategy stack:
[16:03:56.076] List of future strategies:
[16:03:56.076] 1. sequential:
[16:03:56.076]    - args: function (..., envir = parent.frame())
[16:03:56.076]    - tweaked: FALSE
[16:03:56.076]    - call: NULL
[16:03:56.076] plan(): nbrOfWorkers() = 1
[16:03:56.077] plan(): Setting new future strategy stack:
[16:03:56.077] List of future strategies:
[16:03:56.077] 1. sequential:
[16:03:56.077]    - args: function (..., envir = parent.frame())
[16:03:56.077]    - tweaked: FALSE
[16:03:56.077]    - call: future::plan("sequential")
[16:03:56.077] plan(): nbrOfWorkers() = 1
[16:03:56.078] SequentialFuture started (and completed)
[16:03:56.078] - Launch lazy future ... done
[16:03:56.078] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[16:03:56.078] resolved() for ‘SequentialFuture’ ...
[16:03:56.078] - state: ‘finished’
[16:03:56.078] - run: TRUE
[16:03:56.078] - result: ‘FutureResult’
[16:03:56.078] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[16:03:56.079] getGlobalsAndPackages() ...
[16:03:56.079] Searching for globals...
[16:03:56.080] - globals found: [2] ‘{’, ‘stop’
[16:03:56.080] Searching for globals ... DONE
[16:03:56.080] Resolving globals: FALSE
[16:03:56.080] 
[16:03:56.080] 
[16:03:56.080] getGlobalsAndPackages() ... DONE
[16:03:56.081] run() for ‘Future’ ...
[16:03:56.081] - state: ‘created’
[16:03:56.081] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:03:56.081] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:03:56.081] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:03:56.081]   - Field: ‘label’
[16:03:56.081]   - Field: ‘local’
[16:03:56.081]   - Field: ‘owner’
[16:03:56.081]   - Field: ‘envir’
[16:03:56.082]   - Field: ‘packages’
[16:03:56.082]   - Field: ‘gc’
[16:03:56.082]   - Field: ‘conditions’
[16:03:56.082]   - Field: ‘expr’
[16:03:56.082]   - Field: ‘uuid’
[16:03:56.082]   - Field: ‘seed’
[16:03:56.082]   - Field: ‘version’
[16:03:56.082]   - Field: ‘result’
[16:03:56.082]   - Field: ‘asynchronous’
[16:03:56.082]   - Field: ‘calls’
[16:03:56.082]   - Field: ‘globals’
[16:03:56.082]   - Field: ‘stdout’
[16:03:56.083]   - Field: ‘earlySignal’
[16:03:56.083]   - Field: ‘lazy’
[16:03:56.083]   - Field: ‘state’
[16:03:56.083] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:03:56.083] - Launch lazy future ...
[16:03:56.083] Packages needed by the future expression (n = 0): <none>
[16:03:56.083] Packages needed by future strategies (n = 0): <none>
[16:03:56.084] {
[16:03:56.084]     {
[16:03:56.084]         {
[16:03:56.084]             ...future.startTime <- base::Sys.time()
[16:03:56.084]             {
[16:03:56.084]                 {
[16:03:56.084]                   {
[16:03:56.084]                     base::local({
[16:03:56.084]                       has_future <- base::requireNamespace("future", 
[16:03:56.084]                         quietly = TRUE)
[16:03:56.084]                       if (has_future) {
[16:03:56.084]                         ns <- base::getNamespace("future")
[16:03:56.084]                         version <- ns[[".package"]][["version"]]
[16:03:56.084]                         if (is.null(version)) 
[16:03:56.084]                           version <- utils::packageVersion("future")
[16:03:56.084]                       }
[16:03:56.084]                       else {
[16:03:56.084]                         version <- NULL
[16:03:56.084]                       }
[16:03:56.084]                       if (!has_future || version < "1.8.0") {
[16:03:56.084]                         info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.084]                           "", base::R.version$version.string), 
[16:03:56.084]                           platform = base::sprintf("%s (%s-bit)", 
[16:03:56.084]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.084]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.084]                             "release", "version")], collapse = " "), 
[16:03:56.084]                           hostname = base::Sys.info()[["nodename"]])
[16:03:56.084]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.084]                           info)
[16:03:56.084]                         info <- base::paste(info, collapse = "; ")
[16:03:56.084]                         if (!has_future) {
[16:03:56.084]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.084]                             info)
[16:03:56.084]                         }
[16:03:56.084]                         else {
[16:03:56.084]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.084]                             info, version)
[16:03:56.084]                         }
[16:03:56.084]                         base::stop(msg)
[16:03:56.084]                       }
[16:03:56.084]                     })
[16:03:56.084]                   }
[16:03:56.084]                   options(future.plan = NULL)
[16:03:56.084]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.084]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.084]                 }
[16:03:56.084]                 ...future.workdir <- getwd()
[16:03:56.084]             }
[16:03:56.084]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.084]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.084]         }
[16:03:56.084]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.084]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.084]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.084]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.084]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.084]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.084]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.084]             base::names(...future.oldOptions))
[16:03:56.084]     }
[16:03:56.084]     if (FALSE) {
[16:03:56.084]     }
[16:03:56.084]     else {
[16:03:56.084]         if (TRUE) {
[16:03:56.084]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.084]                 open = "w")
[16:03:56.084]         }
[16:03:56.084]         else {
[16:03:56.084]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.084]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.084]         }
[16:03:56.084]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.084]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.084]             base::sink(type = "output", split = FALSE)
[16:03:56.084]             base::close(...future.stdout)
[16:03:56.084]         }, add = TRUE)
[16:03:56.084]     }
[16:03:56.084]     ...future.frame <- base::sys.nframe()
[16:03:56.084]     ...future.conditions <- base::list()
[16:03:56.084]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.084]     if (FALSE) {
[16:03:56.084]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.084]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.084]     }
[16:03:56.084]     ...future.result <- base::tryCatch({
[16:03:56.084]         base::withCallingHandlers({
[16:03:56.084]             ...future.value <- base::withVisible(base::local({
[16:03:56.084]                 42L
[16:03:56.084]                 stop("Woops")
[16:03:56.084]             }))
[16:03:56.084]             future::FutureResult(value = ...future.value$value, 
[16:03:56.084]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.084]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.084]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.084]                     ...future.globalenv.names))
[16:03:56.084]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.084]         }, condition = base::local({
[16:03:56.084]             c <- base::c
[16:03:56.084]             inherits <- base::inherits
[16:03:56.084]             invokeRestart <- base::invokeRestart
[16:03:56.084]             length <- base::length
[16:03:56.084]             list <- base::list
[16:03:56.084]             seq.int <- base::seq.int
[16:03:56.084]             signalCondition <- base::signalCondition
[16:03:56.084]             sys.calls <- base::sys.calls
[16:03:56.084]             `[[` <- base::`[[`
[16:03:56.084]             `+` <- base::`+`
[16:03:56.084]             `<<-` <- base::`<<-`
[16:03:56.084]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.084]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.084]                   3L)]
[16:03:56.084]             }
[16:03:56.084]             function(cond) {
[16:03:56.084]                 is_error <- inherits(cond, "error")
[16:03:56.084]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.084]                   NULL)
[16:03:56.084]                 if (is_error) {
[16:03:56.084]                   sessionInformation <- function() {
[16:03:56.084]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.084]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.084]                       search = base::search(), system = base::Sys.info())
[16:03:56.084]                   }
[16:03:56.084]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.084]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.084]                     cond$call), session = sessionInformation(), 
[16:03:56.084]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.084]                   signalCondition(cond)
[16:03:56.084]                 }
[16:03:56.084]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.084]                 "immediateCondition"))) {
[16:03:56.084]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.084]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.084]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.084]                   if (TRUE && !signal) {
[16:03:56.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.084]                     {
[16:03:56.084]                       inherits <- base::inherits
[16:03:56.084]                       invokeRestart <- base::invokeRestart
[16:03:56.084]                       is.null <- base::is.null
[16:03:56.084]                       muffled <- FALSE
[16:03:56.084]                       if (inherits(cond, "message")) {
[16:03:56.084]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.084]                         if (muffled) 
[16:03:56.084]                           invokeRestart("muffleMessage")
[16:03:56.084]                       }
[16:03:56.084]                       else if (inherits(cond, "warning")) {
[16:03:56.084]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.084]                         if (muffled) 
[16:03:56.084]                           invokeRestart("muffleWarning")
[16:03:56.084]                       }
[16:03:56.084]                       else if (inherits(cond, "condition")) {
[16:03:56.084]                         if (!is.null(pattern)) {
[16:03:56.084]                           computeRestarts <- base::computeRestarts
[16:03:56.084]                           grepl <- base::grepl
[16:03:56.084]                           restarts <- computeRestarts(cond)
[16:03:56.084]                           for (restart in restarts) {
[16:03:56.084]                             name <- restart$name
[16:03:56.084]                             if (is.null(name)) 
[16:03:56.084]                               next
[16:03:56.084]                             if (!grepl(pattern, name)) 
[16:03:56.084]                               next
[16:03:56.084]                             invokeRestart(restart)
[16:03:56.084]                             muffled <- TRUE
[16:03:56.084]                             break
[16:03:56.084]                           }
[16:03:56.084]                         }
[16:03:56.084]                       }
[16:03:56.084]                       invisible(muffled)
[16:03:56.084]                     }
[16:03:56.084]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.084]                   }
[16:03:56.084]                 }
[16:03:56.084]                 else {
[16:03:56.084]                   if (TRUE) {
[16:03:56.084]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.084]                     {
[16:03:56.084]                       inherits <- base::inherits
[16:03:56.084]                       invokeRestart <- base::invokeRestart
[16:03:56.084]                       is.null <- base::is.null
[16:03:56.084]                       muffled <- FALSE
[16:03:56.084]                       if (inherits(cond, "message")) {
[16:03:56.084]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.084]                         if (muffled) 
[16:03:56.084]                           invokeRestart("muffleMessage")
[16:03:56.084]                       }
[16:03:56.084]                       else if (inherits(cond, "warning")) {
[16:03:56.084]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.084]                         if (muffled) 
[16:03:56.084]                           invokeRestart("muffleWarning")
[16:03:56.084]                       }
[16:03:56.084]                       else if (inherits(cond, "condition")) {
[16:03:56.084]                         if (!is.null(pattern)) {
[16:03:56.084]                           computeRestarts <- base::computeRestarts
[16:03:56.084]                           grepl <- base::grepl
[16:03:56.084]                           restarts <- computeRestarts(cond)
[16:03:56.084]                           for (restart in restarts) {
[16:03:56.084]                             name <- restart$name
[16:03:56.084]                             if (is.null(name)) 
[16:03:56.084]                               next
[16:03:56.084]                             if (!grepl(pattern, name)) 
[16:03:56.084]                               next
[16:03:56.084]                             invokeRestart(restart)
[16:03:56.084]                             muffled <- TRUE
[16:03:56.084]                             break
[16:03:56.084]                           }
[16:03:56.084]                         }
[16:03:56.084]                       }
[16:03:56.084]                       invisible(muffled)
[16:03:56.084]                     }
[16:03:56.084]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.084]                   }
[16:03:56.084]                 }
[16:03:56.084]             }
[16:03:56.084]         }))
[16:03:56.084]     }, error = function(ex) {
[16:03:56.084]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.084]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.084]                 ...future.rng), started = ...future.startTime, 
[16:03:56.084]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.084]             version = "1.8"), class = "FutureResult")
[16:03:56.084]     }, finally = {
[16:03:56.084]         if (!identical(...future.workdir, getwd())) 
[16:03:56.084]             setwd(...future.workdir)
[16:03:56.084]         {
[16:03:56.084]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.084]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.084]             }
[16:03:56.084]             base::options(...future.oldOptions)
[16:03:56.084]             if (.Platform$OS.type == "windows") {
[16:03:56.084]                 old_names <- names(...future.oldEnvVars)
[16:03:56.084]                 envs <- base::Sys.getenv()
[16:03:56.084]                 names <- names(envs)
[16:03:56.084]                 common <- intersect(names, old_names)
[16:03:56.084]                 added <- setdiff(names, old_names)
[16:03:56.084]                 removed <- setdiff(old_names, names)
[16:03:56.084]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.084]                   envs[common]]
[16:03:56.084]                 NAMES <- toupper(changed)
[16:03:56.084]                 args <- list()
[16:03:56.084]                 for (kk in seq_along(NAMES)) {
[16:03:56.084]                   name <- changed[[kk]]
[16:03:56.084]                   NAME <- NAMES[[kk]]
[16:03:56.084]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.084]                     next
[16:03:56.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.084]                 }
[16:03:56.084]                 NAMES <- toupper(added)
[16:03:56.084]                 for (kk in seq_along(NAMES)) {
[16:03:56.084]                   name <- added[[kk]]
[16:03:56.084]                   NAME <- NAMES[[kk]]
[16:03:56.084]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.084]                     next
[16:03:56.084]                   args[[name]] <- ""
[16:03:56.084]                 }
[16:03:56.084]                 NAMES <- toupper(removed)
[16:03:56.084]                 for (kk in seq_along(NAMES)) {
[16:03:56.084]                   name <- removed[[kk]]
[16:03:56.084]                   NAME <- NAMES[[kk]]
[16:03:56.084]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.084]                     next
[16:03:56.084]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.084]                 }
[16:03:56.084]                 if (length(args) > 0) 
[16:03:56.084]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.084]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.084]             }
[16:03:56.084]             else {
[16:03:56.084]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.084]             }
[16:03:56.084]             {
[16:03:56.084]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.084]                   0L) {
[16:03:56.084]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.084]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.084]                   base::options(opts)
[16:03:56.084]                 }
[16:03:56.084]                 {
[16:03:56.084]                   {
[16:03:56.084]                     NULL
[16:03:56.084]                     RNGkind("Mersenne-Twister")
[16:03:56.084]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:03:56.084]                       inherits = FALSE)
[16:03:56.084]                   }
[16:03:56.084]                   options(future.plan = NULL)
[16:03:56.084]                   if (is.na(NA_character_)) 
[16:03:56.084]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.084]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.084]                   future::plan(list(function (..., envir = parent.frame()) 
[16:03:56.084]                   {
[16:03:56.084]                     future <- SequentialFuture(..., envir = envir)
[16:03:56.084]                     if (!future$lazy) 
[16:03:56.084]                       future <- run(future)
[16:03:56.084]                     invisible(future)
[16:03:56.084]                   }), .cleanup = FALSE, .init = FALSE)
[16:03:56.084]                 }
[16:03:56.084]             }
[16:03:56.084]         }
[16:03:56.084]     })
[16:03:56.084]     if (TRUE) {
[16:03:56.084]         base::sink(type = "output", split = FALSE)
[16:03:56.084]         if (TRUE) {
[16:03:56.084]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.084]         }
[16:03:56.084]         else {
[16:03:56.084]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.084]         }
[16:03:56.084]         base::close(...future.stdout)
[16:03:56.084]         ...future.stdout <- NULL
[16:03:56.084]     }
[16:03:56.084]     ...future.result$conditions <- ...future.conditions
[16:03:56.084]     ...future.result$finished <- base::Sys.time()
[16:03:56.084]     ...future.result
[16:03:56.084] }
[16:03:56.085] plan(): Setting new future strategy stack:
[16:03:56.085] List of future strategies:
[16:03:56.085] 1. sequential:
[16:03:56.085]    - args: function (..., envir = parent.frame())
[16:03:56.085]    - tweaked: FALSE
[16:03:56.085]    - call: NULL
[16:03:56.086] plan(): nbrOfWorkers() = 1
[16:03:56.086] plan(): Setting new future strategy stack:
[16:03:56.087] List of future strategies:
[16:03:56.087] 1. sequential:
[16:03:56.087]    - args: function (..., envir = parent.frame())
[16:03:56.087]    - tweaked: FALSE
[16:03:56.087]    - call: future::plan("sequential")
[16:03:56.087] plan(): nbrOfWorkers() = 1
[16:03:56.087] SequentialFuture started (and completed)
[16:03:56.087] signalConditions() ...
[16:03:56.087]  - include = ‘immediateCondition’
[16:03:56.087]  - exclude = 
[16:03:56.087]  - resignal = FALSE
[16:03:56.088]  - Number of conditions: 1
[16:03:56.088] signalConditions() ... done
[16:03:56.088] - Launch lazy future ... done
[16:03:56.088] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[16:03:56.088] signalConditions() ...
[16:03:56.088]  - include = ‘immediateCondition’
[16:03:56.088]  - exclude = 
[16:03:56.088]  - resignal = FALSE
[16:03:56.088]  - Number of conditions: 1
[16:03:56.088] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[16:03:56.094] plan(): Setting new future strategy stack:
[16:03:56.094] List of future strategies:
[16:03:56.094] 1. multisession:
[16:03:56.094]    - args: function (..., workers = 2L, envir = parent.frame())
[16:03:56.094]    - tweaked: TRUE
[16:03:56.094]    - call: plan(multisession, workers = 2L)
[16:03:56.106] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:03:56.106] multisession:
[16:03:56.106] - args: function (..., workers = 2L, envir = parent.frame())
[16:03:56.106] - tweaked: TRUE
[16:03:56.106] - call: plan(multisession, workers = 2L)
[16:03:56.106] getGlobalsAndPackages() ...
[16:03:56.107] Not searching for globals
[16:03:56.107] - globals: [0] <none>
[16:03:56.107] getGlobalsAndPackages() ... DONE
[16:03:56.107] [local output] makeClusterPSOCK() ...
[16:03:56.137] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:03:56.138] [local output] Base port: 11240
[16:03:56.138] [local output] Getting setup options for 2 cluster nodes ...
[16:03:56.139] [local output]  - Node 1 of 2 ...
[16:03:56.139] [local output] localMachine=TRUE => revtunnel=FALSE

[16:03:56.140] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpw58bJ9/worker.rank=1.parallelly.parent=79939.138433da34807.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmpw58bJ9/worker.rank=1.parallelly.parent=79939.138433da34807.pid")'’
[16:03:56.325] - Possible to infer worker's PID: TRUE
[16:03:56.325] [local output] Rscript port: 11240

[16:03:56.325] [local output]  - Node 2 of 2 ...
[16:03:56.326] [local output] localMachine=TRUE => revtunnel=FALSE

[16:03:56.326] [local output] Rscript port: 11240

[16:03:56.326] [local output] Getting setup options for 2 cluster nodes ... done
[16:03:56.327] [local output]  - Parallel setup requested for some PSOCK nodes
[16:03:56.327] [local output] Setting up PSOCK nodes in parallel
[16:03:56.327] List of 36
[16:03:56.327]  $ worker          : chr "localhost"
[16:03:56.327]   ..- attr(*, "localhost")= logi TRUE
[16:03:56.327]  $ master          : chr "localhost"
[16:03:56.327]  $ port            : int 11240
[16:03:56.327]  $ connectTimeout  : num 120
[16:03:56.327]  $ timeout         : num 2592000
[16:03:56.327]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:03:56.327]  $ homogeneous     : logi TRUE
[16:03:56.327]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:03:56.327]  $ rscript_envs    : NULL
[16:03:56.327]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:03:56.327]  $ rscript_startup : NULL
[16:03:56.327]  $ rscript_sh      : chr "sh"
[16:03:56.327]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:03:56.327]  $ methods         : logi TRUE
[16:03:56.327]  $ socketOptions   : chr "no-delay"
[16:03:56.327]  $ useXDR          : logi FALSE
[16:03:56.327]  $ outfile         : chr "/dev/null"
[16:03:56.327]  $ renice          : int NA
[16:03:56.327]  $ rshcmd          : NULL
[16:03:56.327]  $ user            : chr(0) 
[16:03:56.327]  $ revtunnel       : logi FALSE
[16:03:56.327]  $ rshlogfile      : NULL
[16:03:56.327]  $ rshopts         : chr(0) 
[16:03:56.327]  $ rank            : int 1
[16:03:56.327]  $ manual          : logi FALSE
[16:03:56.327]  $ dryrun          : logi FALSE
[16:03:56.327]  $ quiet           : logi FALSE
[16:03:56.327]  $ setup_strategy  : chr "parallel"
[16:03:56.327]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:03:56.327]  $ pidfile         : chr "/tmp/Rtmpw58bJ9/worker.rank=1.parallelly.parent=79939.138433da34807.pid"
[16:03:56.327]  $ rshcmd_label    : NULL
[16:03:56.327]  $ rsh_call        : NULL
[16:03:56.327]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:03:56.327]  $ localMachine    : logi TRUE
[16:03:56.327]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:03:56.327]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:03:56.327]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:03:56.327]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:03:56.327]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:03:56.327]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:03:56.327]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:03:56.327]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:03:56.327]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:03:56.327]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:03:56.327]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:03:56.327]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:03:56.327]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:03:56.327]  $ arguments       :List of 28
[16:03:56.327]   ..$ worker          : chr "localhost"
[16:03:56.327]   ..$ master          : NULL
[16:03:56.327]   ..$ port            : int 11240
[16:03:56.327]   ..$ connectTimeout  : num 120
[16:03:56.327]   ..$ timeout         : num 2592000
[16:03:56.327]   ..$ rscript         : NULL
[16:03:56.327]   ..$ homogeneous     : NULL
[16:03:56.327]   ..$ rscript_args    : NULL
[16:03:56.327]   ..$ rscript_envs    : NULL
[16:03:56.327]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:03:56.327]   ..$ rscript_startup : NULL
[16:03:56.327]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:03:56.327]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:03:56.327]   ..$ methods         : logi TRUE
[16:03:56.327]   ..$ socketOptions   : chr "no-delay"
[16:03:56.327]   ..$ useXDR          : logi FALSE
[16:03:56.327]   ..$ outfile         : chr "/dev/null"
[16:03:56.327]   ..$ renice          : int NA
[16:03:56.327]   ..$ rshcmd          : NULL
[16:03:56.327]   ..$ user            : NULL
[16:03:56.327]   ..$ revtunnel       : logi NA
[16:03:56.327]   ..$ rshlogfile      : NULL
[16:03:56.327]   ..$ rshopts         : NULL
[16:03:56.327]   ..$ rank            : int 1
[16:03:56.327]   ..$ manual          : logi FALSE
[16:03:56.327]   ..$ dryrun          : logi FALSE
[16:03:56.327]   ..$ quiet           : logi FALSE
[16:03:56.327]   ..$ setup_strategy  : chr "parallel"
[16:03:56.327]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:03:56.346] [local output] System call to launch all workers:
[16:03:56.346] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmpw58bJ9/worker.rank=1.parallelly.parent=79939.138433da34807.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11240 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:03:56.346] [local output] Starting PSOCK main server
[16:03:56.352] [local output] Workers launched
[16:03:56.352] [local output] Waiting for workers to connect back
[16:03:56.352]  - [local output] 0 workers out of 2 ready
[16:03:56.585]  - [local output] 0 workers out of 2 ready
[16:03:56.585]  - [local output] 1 workers out of 2 ready
[16:03:56.596]  - [local output] 1 workers out of 2 ready
[16:03:56.597]  - [local output] 2 workers out of 2 ready
[16:03:56.597] [local output] Launching of workers completed
[16:03:56.597] [local output] Collecting session information from workers
[16:03:56.598] [local output]  - Worker #1 of 2
[16:03:56.598] [local output]  - Worker #2 of 2
[16:03:56.599] [local output] makeClusterPSOCK() ... done
[16:03:56.610] Packages needed by the future expression (n = 0): <none>
[16:03:56.610] Packages needed by future strategies (n = 0): <none>
[16:03:56.610] {
[16:03:56.610]     {
[16:03:56.610]         {
[16:03:56.610]             ...future.startTime <- base::Sys.time()
[16:03:56.610]             {
[16:03:56.610]                 {
[16:03:56.610]                   {
[16:03:56.610]                     {
[16:03:56.610]                       base::local({
[16:03:56.610]                         has_future <- base::requireNamespace("future", 
[16:03:56.610]                           quietly = TRUE)
[16:03:56.610]                         if (has_future) {
[16:03:56.610]                           ns <- base::getNamespace("future")
[16:03:56.610]                           version <- ns[[".package"]][["version"]]
[16:03:56.610]                           if (is.null(version)) 
[16:03:56.610]                             version <- utils::packageVersion("future")
[16:03:56.610]                         }
[16:03:56.610]                         else {
[16:03:56.610]                           version <- NULL
[16:03:56.610]                         }
[16:03:56.610]                         if (!has_future || version < "1.8.0") {
[16:03:56.610]                           info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.610]                             "", base::R.version$version.string), 
[16:03:56.610]                             platform = base::sprintf("%s (%s-bit)", 
[16:03:56.610]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.610]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.610]                               "release", "version")], collapse = " "), 
[16:03:56.610]                             hostname = base::Sys.info()[["nodename"]])
[16:03:56.610]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.610]                             info)
[16:03:56.610]                           info <- base::paste(info, collapse = "; ")
[16:03:56.610]                           if (!has_future) {
[16:03:56.610]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.610]                               info)
[16:03:56.610]                           }
[16:03:56.610]                           else {
[16:03:56.610]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.610]                               info, version)
[16:03:56.610]                           }
[16:03:56.610]                           base::stop(msg)
[16:03:56.610]                         }
[16:03:56.610]                       })
[16:03:56.610]                     }
[16:03:56.610]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:03:56.610]                     base::options(mc.cores = 1L)
[16:03:56.610]                   }
[16:03:56.610]                   options(future.plan = NULL)
[16:03:56.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.610]                 }
[16:03:56.610]                 ...future.workdir <- getwd()
[16:03:56.610]             }
[16:03:56.610]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.610]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.610]         }
[16:03:56.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.610]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.610]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.610]             base::names(...future.oldOptions))
[16:03:56.610]     }
[16:03:56.610]     if (FALSE) {
[16:03:56.610]     }
[16:03:56.610]     else {
[16:03:56.610]         if (TRUE) {
[16:03:56.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.610]                 open = "w")
[16:03:56.610]         }
[16:03:56.610]         else {
[16:03:56.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.610]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.610]         }
[16:03:56.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.610]             base::sink(type = "output", split = FALSE)
[16:03:56.610]             base::close(...future.stdout)
[16:03:56.610]         }, add = TRUE)
[16:03:56.610]     }
[16:03:56.610]     ...future.frame <- base::sys.nframe()
[16:03:56.610]     ...future.conditions <- base::list()
[16:03:56.610]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.610]     if (FALSE) {
[16:03:56.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.610]     }
[16:03:56.610]     ...future.result <- base::tryCatch({
[16:03:56.610]         base::withCallingHandlers({
[16:03:56.610]             ...future.value <- base::withVisible(base::local({
[16:03:56.610]                 ...future.makeSendCondition <- base::local({
[16:03:56.610]                   sendCondition <- NULL
[16:03:56.610]                   function(frame = 1L) {
[16:03:56.610]                     if (is.function(sendCondition)) 
[16:03:56.610]                       return(sendCondition)
[16:03:56.610]                     ns <- getNamespace("parallel")
[16:03:56.610]                     if (exists("sendData", mode = "function", 
[16:03:56.610]                       envir = ns)) {
[16:03:56.610]                       parallel_sendData <- get("sendData", mode = "function", 
[16:03:56.610]                         envir = ns)
[16:03:56.610]                       envir <- sys.frame(frame)
[16:03:56.610]                       master <- NULL
[16:03:56.610]                       while (!identical(envir, .GlobalEnv) && 
[16:03:56.610]                         !identical(envir, emptyenv())) {
[16:03:56.610]                         if (exists("master", mode = "list", envir = envir, 
[16:03:56.610]                           inherits = FALSE)) {
[16:03:56.610]                           master <- get("master", mode = "list", 
[16:03:56.610]                             envir = envir, inherits = FALSE)
[16:03:56.610]                           if (inherits(master, c("SOCKnode", 
[16:03:56.610]                             "SOCK0node"))) {
[16:03:56.610]                             sendCondition <<- function(cond) {
[16:03:56.610]                               data <- list(type = "VALUE", value = cond, 
[16:03:56.610]                                 success = TRUE)
[16:03:56.610]                               parallel_sendData(master, data)
[16:03:56.610]                             }
[16:03:56.610]                             return(sendCondition)
[16:03:56.610]                           }
[16:03:56.610]                         }
[16:03:56.610]                         frame <- frame + 1L
[16:03:56.610]                         envir <- sys.frame(frame)
[16:03:56.610]                       }
[16:03:56.610]                     }
[16:03:56.610]                     sendCondition <<- function(cond) NULL
[16:03:56.610]                   }
[16:03:56.610]                 })
[16:03:56.610]                 withCallingHandlers({
[16:03:56.610]                   NA
[16:03:56.610]                 }, immediateCondition = function(cond) {
[16:03:56.610]                   sendCondition <- ...future.makeSendCondition()
[16:03:56.610]                   sendCondition(cond)
[16:03:56.610]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.610]                   {
[16:03:56.610]                     inherits <- base::inherits
[16:03:56.610]                     invokeRestart <- base::invokeRestart
[16:03:56.610]                     is.null <- base::is.null
[16:03:56.610]                     muffled <- FALSE
[16:03:56.610]                     if (inherits(cond, "message")) {
[16:03:56.610]                       muffled <- grepl(pattern, "muffleMessage")
[16:03:56.610]                       if (muffled) 
[16:03:56.610]                         invokeRestart("muffleMessage")
[16:03:56.610]                     }
[16:03:56.610]                     else if (inherits(cond, "warning")) {
[16:03:56.610]                       muffled <- grepl(pattern, "muffleWarning")
[16:03:56.610]                       if (muffled) 
[16:03:56.610]                         invokeRestart("muffleWarning")
[16:03:56.610]                     }
[16:03:56.610]                     else if (inherits(cond, "condition")) {
[16:03:56.610]                       if (!is.null(pattern)) {
[16:03:56.610]                         computeRestarts <- base::computeRestarts
[16:03:56.610]                         grepl <- base::grepl
[16:03:56.610]                         restarts <- computeRestarts(cond)
[16:03:56.610]                         for (restart in restarts) {
[16:03:56.610]                           name <- restart$name
[16:03:56.610]                           if (is.null(name)) 
[16:03:56.610]                             next
[16:03:56.610]                           if (!grepl(pattern, name)) 
[16:03:56.610]                             next
[16:03:56.610]                           invokeRestart(restart)
[16:03:56.610]                           muffled <- TRUE
[16:03:56.610]                           break
[16:03:56.610]                         }
[16:03:56.610]                       }
[16:03:56.610]                     }
[16:03:56.610]                     invisible(muffled)
[16:03:56.610]                   }
[16:03:56.610]                   muffleCondition(cond)
[16:03:56.610]                 })
[16:03:56.610]             }))
[16:03:56.610]             future::FutureResult(value = ...future.value$value, 
[16:03:56.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.610]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.610]                     ...future.globalenv.names))
[16:03:56.610]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.610]         }, condition = base::local({
[16:03:56.610]             c <- base::c
[16:03:56.610]             inherits <- base::inherits
[16:03:56.610]             invokeRestart <- base::invokeRestart
[16:03:56.610]             length <- base::length
[16:03:56.610]             list <- base::list
[16:03:56.610]             seq.int <- base::seq.int
[16:03:56.610]             signalCondition <- base::signalCondition
[16:03:56.610]             sys.calls <- base::sys.calls
[16:03:56.610]             `[[` <- base::`[[`
[16:03:56.610]             `+` <- base::`+`
[16:03:56.610]             `<<-` <- base::`<<-`
[16:03:56.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.610]                   3L)]
[16:03:56.610]             }
[16:03:56.610]             function(cond) {
[16:03:56.610]                 is_error <- inherits(cond, "error")
[16:03:56.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.610]                   NULL)
[16:03:56.610]                 if (is_error) {
[16:03:56.610]                   sessionInformation <- function() {
[16:03:56.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.610]                       search = base::search(), system = base::Sys.info())
[16:03:56.610]                   }
[16:03:56.610]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.610]                     cond$call), session = sessionInformation(), 
[16:03:56.610]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.610]                   signalCondition(cond)
[16:03:56.610]                 }
[16:03:56.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.610]                 "immediateCondition"))) {
[16:03:56.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.610]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.610]                   if (TRUE && !signal) {
[16:03:56.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.610]                     {
[16:03:56.610]                       inherits <- base::inherits
[16:03:56.610]                       invokeRestart <- base::invokeRestart
[16:03:56.610]                       is.null <- base::is.null
[16:03:56.610]                       muffled <- FALSE
[16:03:56.610]                       if (inherits(cond, "message")) {
[16:03:56.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.610]                         if (muffled) 
[16:03:56.610]                           invokeRestart("muffleMessage")
[16:03:56.610]                       }
[16:03:56.610]                       else if (inherits(cond, "warning")) {
[16:03:56.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.610]                         if (muffled) 
[16:03:56.610]                           invokeRestart("muffleWarning")
[16:03:56.610]                       }
[16:03:56.610]                       else if (inherits(cond, "condition")) {
[16:03:56.610]                         if (!is.null(pattern)) {
[16:03:56.610]                           computeRestarts <- base::computeRestarts
[16:03:56.610]                           grepl <- base::grepl
[16:03:56.610]                           restarts <- computeRestarts(cond)
[16:03:56.610]                           for (restart in restarts) {
[16:03:56.610]                             name <- restart$name
[16:03:56.610]                             if (is.null(name)) 
[16:03:56.610]                               next
[16:03:56.610]                             if (!grepl(pattern, name)) 
[16:03:56.610]                               next
[16:03:56.610]                             invokeRestart(restart)
[16:03:56.610]                             muffled <- TRUE
[16:03:56.610]                             break
[16:03:56.610]                           }
[16:03:56.610]                         }
[16:03:56.610]                       }
[16:03:56.610]                       invisible(muffled)
[16:03:56.610]                     }
[16:03:56.610]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.610]                   }
[16:03:56.610]                 }
[16:03:56.610]                 else {
[16:03:56.610]                   if (TRUE) {
[16:03:56.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.610]                     {
[16:03:56.610]                       inherits <- base::inherits
[16:03:56.610]                       invokeRestart <- base::invokeRestart
[16:03:56.610]                       is.null <- base::is.null
[16:03:56.610]                       muffled <- FALSE
[16:03:56.610]                       if (inherits(cond, "message")) {
[16:03:56.610]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.610]                         if (muffled) 
[16:03:56.610]                           invokeRestart("muffleMessage")
[16:03:56.610]                       }
[16:03:56.610]                       else if (inherits(cond, "warning")) {
[16:03:56.610]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.610]                         if (muffled) 
[16:03:56.610]                           invokeRestart("muffleWarning")
[16:03:56.610]                       }
[16:03:56.610]                       else if (inherits(cond, "condition")) {
[16:03:56.610]                         if (!is.null(pattern)) {
[16:03:56.610]                           computeRestarts <- base::computeRestarts
[16:03:56.610]                           grepl <- base::grepl
[16:03:56.610]                           restarts <- computeRestarts(cond)
[16:03:56.610]                           for (restart in restarts) {
[16:03:56.610]                             name <- restart$name
[16:03:56.610]                             if (is.null(name)) 
[16:03:56.610]                               next
[16:03:56.610]                             if (!grepl(pattern, name)) 
[16:03:56.610]                               next
[16:03:56.610]                             invokeRestart(restart)
[16:03:56.610]                             muffled <- TRUE
[16:03:56.610]                             break
[16:03:56.610]                           }
[16:03:56.610]                         }
[16:03:56.610]                       }
[16:03:56.610]                       invisible(muffled)
[16:03:56.610]                     }
[16:03:56.610]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.610]                   }
[16:03:56.610]                 }
[16:03:56.610]             }
[16:03:56.610]         }))
[16:03:56.610]     }, error = function(ex) {
[16:03:56.610]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.610]                 ...future.rng), started = ...future.startTime, 
[16:03:56.610]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.610]             version = "1.8"), class = "FutureResult")
[16:03:56.610]     }, finally = {
[16:03:56.610]         if (!identical(...future.workdir, getwd())) 
[16:03:56.610]             setwd(...future.workdir)
[16:03:56.610]         {
[16:03:56.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.610]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.610]             }
[16:03:56.610]             base::options(...future.oldOptions)
[16:03:56.610]             if (.Platform$OS.type == "windows") {
[16:03:56.610]                 old_names <- names(...future.oldEnvVars)
[16:03:56.610]                 envs <- base::Sys.getenv()
[16:03:56.610]                 names <- names(envs)
[16:03:56.610]                 common <- intersect(names, old_names)
[16:03:56.610]                 added <- setdiff(names, old_names)
[16:03:56.610]                 removed <- setdiff(old_names, names)
[16:03:56.610]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.610]                   envs[common]]
[16:03:56.610]                 NAMES <- toupper(changed)
[16:03:56.610]                 args <- list()
[16:03:56.610]                 for (kk in seq_along(NAMES)) {
[16:03:56.610]                   name <- changed[[kk]]
[16:03:56.610]                   NAME <- NAMES[[kk]]
[16:03:56.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.610]                     next
[16:03:56.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.610]                 }
[16:03:56.610]                 NAMES <- toupper(added)
[16:03:56.610]                 for (kk in seq_along(NAMES)) {
[16:03:56.610]                   name <- added[[kk]]
[16:03:56.610]                   NAME <- NAMES[[kk]]
[16:03:56.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.610]                     next
[16:03:56.610]                   args[[name]] <- ""
[16:03:56.610]                 }
[16:03:56.610]                 NAMES <- toupper(removed)
[16:03:56.610]                 for (kk in seq_along(NAMES)) {
[16:03:56.610]                   name <- removed[[kk]]
[16:03:56.610]                   NAME <- NAMES[[kk]]
[16:03:56.610]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.610]                     next
[16:03:56.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.610]                 }
[16:03:56.610]                 if (length(args) > 0) 
[16:03:56.610]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.610]             }
[16:03:56.610]             else {
[16:03:56.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.610]             }
[16:03:56.610]             {
[16:03:56.610]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.610]                   0L) {
[16:03:56.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.610]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.610]                   base::options(opts)
[16:03:56.610]                 }
[16:03:56.610]                 {
[16:03:56.610]                   {
[16:03:56.610]                     base::options(mc.cores = ...future.mc.cores.old)
[16:03:56.610]                     NULL
[16:03:56.610]                   }
[16:03:56.610]                   options(future.plan = NULL)
[16:03:56.610]                   if (is.na(NA_character_)) 
[16:03:56.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.610]                   future::plan(list(function (..., workers = 2L, 
[16:03:56.610]                     envir = parent.frame()) 
[16:03:56.610]                   strategy(..., workers = workers, envir = envir)), 
[16:03:56.610]                     .cleanup = FALSE, .init = FALSE)
[16:03:56.610]                 }
[16:03:56.610]             }
[16:03:56.610]         }
[16:03:56.610]     })
[16:03:56.610]     if (TRUE) {
[16:03:56.610]         base::sink(type = "output", split = FALSE)
[16:03:56.610]         if (TRUE) {
[16:03:56.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.610]         }
[16:03:56.610]         else {
[16:03:56.610]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.610]         }
[16:03:56.610]         base::close(...future.stdout)
[16:03:56.610]         ...future.stdout <- NULL
[16:03:56.610]     }
[16:03:56.610]     ...future.result$conditions <- ...future.conditions
[16:03:56.610]     ...future.result$finished <- base::Sys.time()
[16:03:56.610]     ...future.result
[16:03:56.610] }
[16:03:56.663] MultisessionFuture started
[16:03:56.663] result() for ClusterFuture ...
[16:03:56.664] receiveMessageFromWorker() for ClusterFuture ...
[16:03:56.664] - Validating connection of MultisessionFuture
[16:03:56.696] - received message: FutureResult
[16:03:56.697] - Received FutureResult
[16:03:56.700] - Erased future from FutureRegistry
[16:03:56.700] result() for ClusterFuture ...
[16:03:56.700] - result already collected: FutureResult
[16:03:56.700] result() for ClusterFuture ... done
[16:03:56.700] receiveMessageFromWorker() for ClusterFuture ... done
[16:03:56.700] result() for ClusterFuture ... done
[16:03:56.700] result() for ClusterFuture ...
[16:03:56.700] - result already collected: FutureResult
[16:03:56.700] result() for ClusterFuture ... done
[16:03:56.701] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:03:56.701] plan(): nbrOfWorkers() = 2
[16:03:56.701] getGlobalsAndPackages() ...
[16:03:56.701] Searching for globals...
[16:03:56.703] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[16:03:56.703] Searching for globals ... DONE
[16:03:56.703] Resolving globals: FALSE
[16:03:56.704] 
[16:03:56.704] 
[16:03:56.704] getGlobalsAndPackages() ... DONE
[16:03:56.704] run() for ‘Future’ ...
[16:03:56.704] - state: ‘created’
[16:03:56.704] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:03:56.715] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:03:56.715] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:03:56.716]   - Field: ‘node’
[16:03:56.716]   - Field: ‘label’
[16:03:56.716]   - Field: ‘local’
[16:03:56.716]   - Field: ‘owner’
[16:03:56.716]   - Field: ‘envir’
[16:03:56.716]   - Field: ‘workers’
[16:03:56.716]   - Field: ‘packages’
[16:03:56.716]   - Field: ‘gc’
[16:03:56.716]   - Field: ‘conditions’
[16:03:56.717]   - Field: ‘persistent’
[16:03:56.717]   - Field: ‘expr’
[16:03:56.717]   - Field: ‘uuid’
[16:03:56.717]   - Field: ‘seed’
[16:03:56.717]   - Field: ‘version’
[16:03:56.717]   - Field: ‘result’
[16:03:56.717]   - Field: ‘asynchronous’
[16:03:56.717]   - Field: ‘calls’
[16:03:56.717]   - Field: ‘globals’
[16:03:56.718]   - Field: ‘stdout’
[16:03:56.718]   - Field: ‘earlySignal’
[16:03:56.718]   - Field: ‘lazy’
[16:03:56.718]   - Field: ‘state’
[16:03:56.718] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:03:56.718] - Launch lazy future ...
[16:03:56.718] Packages needed by the future expression (n = 0): <none>
[16:03:56.719] Packages needed by future strategies (n = 0): <none>
[16:03:56.719] {
[16:03:56.719]     {
[16:03:56.719]         {
[16:03:56.719]             ...future.startTime <- base::Sys.time()
[16:03:56.719]             {
[16:03:56.719]                 {
[16:03:56.719]                   {
[16:03:56.719]                     {
[16:03:56.719]                       base::local({
[16:03:56.719]                         has_future <- base::requireNamespace("future", 
[16:03:56.719]                           quietly = TRUE)
[16:03:56.719]                         if (has_future) {
[16:03:56.719]                           ns <- base::getNamespace("future")
[16:03:56.719]                           version <- ns[[".package"]][["version"]]
[16:03:56.719]                           if (is.null(version)) 
[16:03:56.719]                             version <- utils::packageVersion("future")
[16:03:56.719]                         }
[16:03:56.719]                         else {
[16:03:56.719]                           version <- NULL
[16:03:56.719]                         }
[16:03:56.719]                         if (!has_future || version < "1.8.0") {
[16:03:56.719]                           info <- base::c(r_version = base::gsub("R version ", 
[16:03:56.719]                             "", base::R.version$version.string), 
[16:03:56.719]                             platform = base::sprintf("%s (%s-bit)", 
[16:03:56.719]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:03:56.719]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:03:56.719]                               "release", "version")], collapse = " "), 
[16:03:56.719]                             hostname = base::Sys.info()[["nodename"]])
[16:03:56.719]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:03:56.719]                             info)
[16:03:56.719]                           info <- base::paste(info, collapse = "; ")
[16:03:56.719]                           if (!has_future) {
[16:03:56.719]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:03:56.719]                               info)
[16:03:56.719]                           }
[16:03:56.719]                           else {
[16:03:56.719]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:03:56.719]                               info, version)
[16:03:56.719]                           }
[16:03:56.719]                           base::stop(msg)
[16:03:56.719]                         }
[16:03:56.719]                       })
[16:03:56.719]                     }
[16:03:56.719]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:03:56.719]                     base::options(mc.cores = 1L)
[16:03:56.719]                   }
[16:03:56.719]                   options(future.plan = NULL)
[16:03:56.719]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.719]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:03:56.719]                 }
[16:03:56.719]                 ...future.workdir <- getwd()
[16:03:56.719]             }
[16:03:56.719]             ...future.oldOptions <- base::as.list(base::.Options)
[16:03:56.719]             ...future.oldEnvVars <- base::Sys.getenv()
[16:03:56.719]         }
[16:03:56.719]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:03:56.719]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:03:56.719]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:03:56.719]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:03:56.719]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:03:56.719]             future.stdout.windows.reencode = NULL, width = 80L)
[16:03:56.719]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:03:56.719]             base::names(...future.oldOptions))
[16:03:56.719]     }
[16:03:56.719]     if (FALSE) {
[16:03:56.719]     }
[16:03:56.719]     else {
[16:03:56.719]         if (TRUE) {
[16:03:56.719]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:03:56.719]                 open = "w")
[16:03:56.719]         }
[16:03:56.719]         else {
[16:03:56.719]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:03:56.719]                 windows = "NUL", "/dev/null"), open = "w")
[16:03:56.719]         }
[16:03:56.719]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:03:56.719]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:03:56.719]             base::sink(type = "output", split = FALSE)
[16:03:56.719]             base::close(...future.stdout)
[16:03:56.719]         }, add = TRUE)
[16:03:56.719]     }
[16:03:56.719]     ...future.frame <- base::sys.nframe()
[16:03:56.719]     ...future.conditions <- base::list()
[16:03:56.719]     ...future.rng <- base::globalenv()$.Random.seed
[16:03:56.719]     if (FALSE) {
[16:03:56.719]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:03:56.719]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:03:56.719]     }
[16:03:56.719]     ...future.result <- base::tryCatch({
[16:03:56.719]         base::withCallingHandlers({
[16:03:56.719]             ...future.value <- base::withVisible(base::local({
[16:03:56.719]                 ...future.makeSendCondition <- base::local({
[16:03:56.719]                   sendCondition <- NULL
[16:03:56.719]                   function(frame = 1L) {
[16:03:56.719]                     if (is.function(sendCondition)) 
[16:03:56.719]                       return(sendCondition)
[16:03:56.719]                     ns <- getNamespace("parallel")
[16:03:56.719]                     if (exists("sendData", mode = "function", 
[16:03:56.719]                       envir = ns)) {
[16:03:56.719]                       parallel_sendData <- get("sendData", mode = "function", 
[16:03:56.719]                         envir = ns)
[16:03:56.719]                       envir <- sys.frame(frame)
[16:03:56.719]                       master <- NULL
[16:03:56.719]                       while (!identical(envir, .GlobalEnv) && 
[16:03:56.719]                         !identical(envir, emptyenv())) {
[16:03:56.719]                         if (exists("master", mode = "list", envir = envir, 
[16:03:56.719]                           inherits = FALSE)) {
[16:03:56.719]                           master <- get("master", mode = "list", 
[16:03:56.719]                             envir = envir, inherits = FALSE)
[16:03:56.719]                           if (inherits(master, c("SOCKnode", 
[16:03:56.719]                             "SOCK0node"))) {
[16:03:56.719]                             sendCondition <<- function(cond) {
[16:03:56.719]                               data <- list(type = "VALUE", value = cond, 
[16:03:56.719]                                 success = TRUE)
[16:03:56.719]                               parallel_sendData(master, data)
[16:03:56.719]                             }
[16:03:56.719]                             return(sendCondition)
[16:03:56.719]                           }
[16:03:56.719]                         }
[16:03:56.719]                         frame <- frame + 1L
[16:03:56.719]                         envir <- sys.frame(frame)
[16:03:56.719]                       }
[16:03:56.719]                     }
[16:03:56.719]                     sendCondition <<- function(cond) NULL
[16:03:56.719]                   }
[16:03:56.719]                 })
[16:03:56.719]                 withCallingHandlers({
[16:03:56.719]                   {
[16:03:56.719]                     Sys.sleep(3)
[16:03:56.719]                     42L
[16:03:56.719]                     stop("Woops")
[16:03:56.719]                   }
[16:03:56.719]                 }, immediateCondition = function(cond) {
[16:03:56.719]                   sendCondition <- ...future.makeSendCondition()
[16:03:56.719]                   sendCondition(cond)
[16:03:56.719]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.719]                   {
[16:03:56.719]                     inherits <- base::inherits
[16:03:56.719]                     invokeRestart <- base::invokeRestart
[16:03:56.719]                     is.null <- base::is.null
[16:03:56.719]                     muffled <- FALSE
[16:03:56.719]                     if (inherits(cond, "message")) {
[16:03:56.719]                       muffled <- grepl(pattern, "muffleMessage")
[16:03:56.719]                       if (muffled) 
[16:03:56.719]                         invokeRestart("muffleMessage")
[16:03:56.719]                     }
[16:03:56.719]                     else if (inherits(cond, "warning")) {
[16:03:56.719]                       muffled <- grepl(pattern, "muffleWarning")
[16:03:56.719]                       if (muffled) 
[16:03:56.719]                         invokeRestart("muffleWarning")
[16:03:56.719]                     }
[16:03:56.719]                     else if (inherits(cond, "condition")) {
[16:03:56.719]                       if (!is.null(pattern)) {
[16:03:56.719]                         computeRestarts <- base::computeRestarts
[16:03:56.719]                         grepl <- base::grepl
[16:03:56.719]                         restarts <- computeRestarts(cond)
[16:03:56.719]                         for (restart in restarts) {
[16:03:56.719]                           name <- restart$name
[16:03:56.719]                           if (is.null(name)) 
[16:03:56.719]                             next
[16:03:56.719]                           if (!grepl(pattern, name)) 
[16:03:56.719]                             next
[16:03:56.719]                           invokeRestart(restart)
[16:03:56.719]                           muffled <- TRUE
[16:03:56.719]                           break
[16:03:56.719]                         }
[16:03:56.719]                       }
[16:03:56.719]                     }
[16:03:56.719]                     invisible(muffled)
[16:03:56.719]                   }
[16:03:56.719]                   muffleCondition(cond)
[16:03:56.719]                 })
[16:03:56.719]             }))
[16:03:56.719]             future::FutureResult(value = ...future.value$value, 
[16:03:56.719]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.719]                   ...future.rng), globalenv = if (FALSE) 
[16:03:56.719]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:03:56.719]                     ...future.globalenv.names))
[16:03:56.719]                 else NULL, started = ...future.startTime, version = "1.8")
[16:03:56.719]         }, condition = base::local({
[16:03:56.719]             c <- base::c
[16:03:56.719]             inherits <- base::inherits
[16:03:56.719]             invokeRestart <- base::invokeRestart
[16:03:56.719]             length <- base::length
[16:03:56.719]             list <- base::list
[16:03:56.719]             seq.int <- base::seq.int
[16:03:56.719]             signalCondition <- base::signalCondition
[16:03:56.719]             sys.calls <- base::sys.calls
[16:03:56.719]             `[[` <- base::`[[`
[16:03:56.719]             `+` <- base::`+`
[16:03:56.719]             `<<-` <- base::`<<-`
[16:03:56.719]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:03:56.719]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:03:56.719]                   3L)]
[16:03:56.719]             }
[16:03:56.719]             function(cond) {
[16:03:56.719]                 is_error <- inherits(cond, "error")
[16:03:56.719]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:03:56.719]                   NULL)
[16:03:56.719]                 if (is_error) {
[16:03:56.719]                   sessionInformation <- function() {
[16:03:56.719]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:03:56.719]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:03:56.719]                       search = base::search(), system = base::Sys.info())
[16:03:56.719]                   }
[16:03:56.719]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.719]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:03:56.719]                     cond$call), session = sessionInformation(), 
[16:03:56.719]                     timestamp = base::Sys.time(), signaled = 0L)
[16:03:56.719]                   signalCondition(cond)
[16:03:56.719]                 }
[16:03:56.719]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:03:56.719]                 "immediateCondition"))) {
[16:03:56.719]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:03:56.719]                   ...future.conditions[[length(...future.conditions) + 
[16:03:56.719]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:03:56.719]                   if (TRUE && !signal) {
[16:03:56.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.719]                     {
[16:03:56.719]                       inherits <- base::inherits
[16:03:56.719]                       invokeRestart <- base::invokeRestart
[16:03:56.719]                       is.null <- base::is.null
[16:03:56.719]                       muffled <- FALSE
[16:03:56.719]                       if (inherits(cond, "message")) {
[16:03:56.719]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.719]                         if (muffled) 
[16:03:56.719]                           invokeRestart("muffleMessage")
[16:03:56.719]                       }
[16:03:56.719]                       else if (inherits(cond, "warning")) {
[16:03:56.719]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.719]                         if (muffled) 
[16:03:56.719]                           invokeRestart("muffleWarning")
[16:03:56.719]                       }
[16:03:56.719]                       else if (inherits(cond, "condition")) {
[16:03:56.719]                         if (!is.null(pattern)) {
[16:03:56.719]                           computeRestarts <- base::computeRestarts
[16:03:56.719]                           grepl <- base::grepl
[16:03:56.719]                           restarts <- computeRestarts(cond)
[16:03:56.719]                           for (restart in restarts) {
[16:03:56.719]                             name <- restart$name
[16:03:56.719]                             if (is.null(name)) 
[16:03:56.719]                               next
[16:03:56.719]                             if (!grepl(pattern, name)) 
[16:03:56.719]                               next
[16:03:56.719]                             invokeRestart(restart)
[16:03:56.719]                             muffled <- TRUE
[16:03:56.719]                             break
[16:03:56.719]                           }
[16:03:56.719]                         }
[16:03:56.719]                       }
[16:03:56.719]                       invisible(muffled)
[16:03:56.719]                     }
[16:03:56.719]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.719]                   }
[16:03:56.719]                 }
[16:03:56.719]                 else {
[16:03:56.719]                   if (TRUE) {
[16:03:56.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:03:56.719]                     {
[16:03:56.719]                       inherits <- base::inherits
[16:03:56.719]                       invokeRestart <- base::invokeRestart
[16:03:56.719]                       is.null <- base::is.null
[16:03:56.719]                       muffled <- FALSE
[16:03:56.719]                       if (inherits(cond, "message")) {
[16:03:56.719]                         muffled <- grepl(pattern, "muffleMessage")
[16:03:56.719]                         if (muffled) 
[16:03:56.719]                           invokeRestart("muffleMessage")
[16:03:56.719]                       }
[16:03:56.719]                       else if (inherits(cond, "warning")) {
[16:03:56.719]                         muffled <- grepl(pattern, "muffleWarning")
[16:03:56.719]                         if (muffled) 
[16:03:56.719]                           invokeRestart("muffleWarning")
[16:03:56.719]                       }
[16:03:56.719]                       else if (inherits(cond, "condition")) {
[16:03:56.719]                         if (!is.null(pattern)) {
[16:03:56.719]                           computeRestarts <- base::computeRestarts
[16:03:56.719]                           grepl <- base::grepl
[16:03:56.719]                           restarts <- computeRestarts(cond)
[16:03:56.719]                           for (restart in restarts) {
[16:03:56.719]                             name <- restart$name
[16:03:56.719]                             if (is.null(name)) 
[16:03:56.719]                               next
[16:03:56.719]                             if (!grepl(pattern, name)) 
[16:03:56.719]                               next
[16:03:56.719]                             invokeRestart(restart)
[16:03:56.719]                             muffled <- TRUE
[16:03:56.719]                             break
[16:03:56.719]                           }
[16:03:56.719]                         }
[16:03:56.719]                       }
[16:03:56.719]                       invisible(muffled)
[16:03:56.719]                     }
[16:03:56.719]                     muffleCondition(cond, pattern = "^muffle")
[16:03:56.719]                   }
[16:03:56.719]                 }
[16:03:56.719]             }
[16:03:56.719]         }))
[16:03:56.719]     }, error = function(ex) {
[16:03:56.719]         base::structure(base::list(value = NULL, visible = NULL, 
[16:03:56.719]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:03:56.719]                 ...future.rng), started = ...future.startTime, 
[16:03:56.719]             finished = Sys.time(), session_uuid = NA_character_, 
[16:03:56.719]             version = "1.8"), class = "FutureResult")
[16:03:56.719]     }, finally = {
[16:03:56.719]         if (!identical(...future.workdir, getwd())) 
[16:03:56.719]             setwd(...future.workdir)
[16:03:56.719]         {
[16:03:56.719]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:03:56.719]                 ...future.oldOptions$nwarnings <- NULL
[16:03:56.719]             }
[16:03:56.719]             base::options(...future.oldOptions)
[16:03:56.719]             if (.Platform$OS.type == "windows") {
[16:03:56.719]                 old_names <- names(...future.oldEnvVars)
[16:03:56.719]                 envs <- base::Sys.getenv()
[16:03:56.719]                 names <- names(envs)
[16:03:56.719]                 common <- intersect(names, old_names)
[16:03:56.719]                 added <- setdiff(names, old_names)
[16:03:56.719]                 removed <- setdiff(old_names, names)
[16:03:56.719]                 changed <- common[...future.oldEnvVars[common] != 
[16:03:56.719]                   envs[common]]
[16:03:56.719]                 NAMES <- toupper(changed)
[16:03:56.719]                 args <- list()
[16:03:56.719]                 for (kk in seq_along(NAMES)) {
[16:03:56.719]                   name <- changed[[kk]]
[16:03:56.719]                   NAME <- NAMES[[kk]]
[16:03:56.719]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.719]                     next
[16:03:56.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.719]                 }
[16:03:56.719]                 NAMES <- toupper(added)
[16:03:56.719]                 for (kk in seq_along(NAMES)) {
[16:03:56.719]                   name <- added[[kk]]
[16:03:56.719]                   NAME <- NAMES[[kk]]
[16:03:56.719]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.719]                     next
[16:03:56.719]                   args[[name]] <- ""
[16:03:56.719]                 }
[16:03:56.719]                 NAMES <- toupper(removed)
[16:03:56.719]                 for (kk in seq_along(NAMES)) {
[16:03:56.719]                   name <- removed[[kk]]
[16:03:56.719]                   NAME <- NAMES[[kk]]
[16:03:56.719]                   if (name != NAME && is.element(NAME, old_names)) 
[16:03:56.719]                     next
[16:03:56.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:03:56.719]                 }
[16:03:56.719]                 if (length(args) > 0) 
[16:03:56.719]                   base::do.call(base::Sys.setenv, args = args)
[16:03:56.719]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:03:56.719]             }
[16:03:56.719]             else {
[16:03:56.719]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:03:56.719]             }
[16:03:56.719]             {
[16:03:56.719]                 if (base::length(...future.futureOptionsAdded) > 
[16:03:56.719]                   0L) {
[16:03:56.719]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:03:56.719]                   base::names(opts) <- ...future.futureOptionsAdded
[16:03:56.719]                   base::options(opts)
[16:03:56.719]                 }
[16:03:56.719]                 {
[16:03:56.719]                   {
[16:03:56.719]                     base::options(mc.cores = ...future.mc.cores.old)
[16:03:56.719]                     NULL
[16:03:56.719]                   }
[16:03:56.719]                   options(future.plan = NULL)
[16:03:56.719]                   if (is.na(NA_character_)) 
[16:03:56.719]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:03:56.719]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:03:56.719]                   future::plan(list(function (..., workers = 2L, 
[16:03:56.719]                     envir = parent.frame()) 
[16:03:56.719]                   strategy(..., workers = workers, envir = envir)), 
[16:03:56.719]                     .cleanup = FALSE, .init = FALSE)
[16:03:56.719]                 }
[16:03:56.719]             }
[16:03:56.719]         }
[16:03:56.719]     })
[16:03:56.719]     if (TRUE) {
[16:03:56.719]         base::sink(type = "output", split = FALSE)
[16:03:56.719]         if (TRUE) {
[16:03:56.719]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:03:56.719]         }
[16:03:56.719]         else {
[16:03:56.719]             ...future.result["stdout"] <- base::list(NULL)
[16:03:56.719]         }
[16:03:56.719]         base::close(...future.stdout)
[16:03:56.719]         ...future.stdout <- NULL
[16:03:56.719]     }
[16:03:56.719]     ...future.result$conditions <- ...future.conditions
[16:03:56.719]     ...future.result$finished <- base::Sys.time()
[16:03:56.719]     ...future.result
[16:03:56.719] }
[16:03:56.723] MultisessionFuture started
[16:03:56.723] - Launch lazy future ... done
[16:03:56.723] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[16:03:59.778] receiveMessageFromWorker() for ClusterFuture ...
[16:03:59.778] - Validating connection of MultisessionFuture
[16:03:59.779] - received message: FutureResult
[16:03:59.779] - Received FutureResult
[16:03:59.779] - Erased future from FutureRegistry
[16:03:59.779] result() for ClusterFuture ...
[16:03:59.779] - result already collected: FutureResult
[16:03:59.780] result() for ClusterFuture ... done
[16:03:59.780] signalConditions() ...
[16:03:59.780]  - include = ‘immediateCondition’
[16:03:59.780]  - exclude = 
[16:03:59.780]  - resignal = FALSE
[16:03:59.780]  - Number of conditions: 1
[16:03:59.780] signalConditions() ... done
[16:03:59.780] receiveMessageFromWorker() for ClusterFuture ... done
[16:03:59.780] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 8430ec46-51cc-618a-34f4-f9653d083545
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[16:03:59.782] plan(): Setting new future strategy stack:
[16:03:59.782] List of future strategies:
[16:03:59.782] 1. FutureStrategy:
[16:03:59.782]    - args: function (..., envir = parent.frame())
[16:03:59.782]    - tweaked: FALSE
[16:03:59.782]    - call: future::plan(oplan)
[16:03:59.783] plan(): nbrOfWorkers() = 1
> 
