
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:17.426] plan(): Setting new future strategy stack:
[13:22:17.427] List of future strategies:
[13:22:17.427] 1. sequential:
[13:22:17.427]    - args: function (..., envir = parent.frame())
[13:22:17.427]    - tweaked: FALSE
[13:22:17.427]    - call: future::plan("sequential")
[13:22:17.443] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[13:22:17.454] getGlobalsAndPackages() ...
[13:22:17.455] Searching for globals...
[13:22:17.462] - globals found: [2] ‘{’, ‘stop’
[13:22:17.462] Searching for globals ... DONE
[13:22:17.462] Resolving globals: FALSE
[13:22:17.462] 
[13:22:17.463] 
[13:22:17.463] getGlobalsAndPackages() ... DONE
[13:22:17.463] run() for ‘Future’ ...
[13:22:17.463] - state: ‘created’
[13:22:17.464] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.464] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.464] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.464]   - Field: ‘label’
[13:22:17.464]   - Field: ‘local’
[13:22:17.465]   - Field: ‘owner’
[13:22:17.465]   - Field: ‘envir’
[13:22:17.465]   - Field: ‘packages’
[13:22:17.465]   - Field: ‘gc’
[13:22:17.465]   - Field: ‘conditions’
[13:22:17.465]   - Field: ‘expr’
[13:22:17.465]   - Field: ‘uuid’
[13:22:17.465]   - Field: ‘seed’
[13:22:17.465]   - Field: ‘version’
[13:22:17.465]   - Field: ‘result’
[13:22:17.465]   - Field: ‘asynchronous’
[13:22:17.466]   - Field: ‘calls’
[13:22:17.466]   - Field: ‘globals’
[13:22:17.466]   - Field: ‘stdout’
[13:22:17.466]   - Field: ‘earlySignal’
[13:22:17.466]   - Field: ‘lazy’
[13:22:17.466]   - Field: ‘state’
[13:22:17.466] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.466] - Launch lazy future ...
[13:22:17.467] Packages needed by the future expression (n = 0): <none>
[13:22:17.467] Packages needed by future strategies (n = 0): <none>
[13:22:17.468] {
[13:22:17.468]     {
[13:22:17.468]         {
[13:22:17.468]             ...future.startTime <- base::Sys.time()
[13:22:17.468]             {
[13:22:17.468]                 {
[13:22:17.468]                   {
[13:22:17.468]                     base::local({
[13:22:17.468]                       has_future <- base::requireNamespace("future", 
[13:22:17.468]                         quietly = TRUE)
[13:22:17.468]                       if (has_future) {
[13:22:17.468]                         ns <- base::getNamespace("future")
[13:22:17.468]                         version <- ns[[".package"]][["version"]]
[13:22:17.468]                         if (is.null(version)) 
[13:22:17.468]                           version <- utils::packageVersion("future")
[13:22:17.468]                       }
[13:22:17.468]                       else {
[13:22:17.468]                         version <- NULL
[13:22:17.468]                       }
[13:22:17.468]                       if (!has_future || version < "1.8.0") {
[13:22:17.468]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.468]                           "", base::R.version$version.string), 
[13:22:17.468]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.468]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.468]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.468]                             "release", "version")], collapse = " "), 
[13:22:17.468]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.468]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.468]                           info)
[13:22:17.468]                         info <- base::paste(info, collapse = "; ")
[13:22:17.468]                         if (!has_future) {
[13:22:17.468]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.468]                             info)
[13:22:17.468]                         }
[13:22:17.468]                         else {
[13:22:17.468]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.468]                             info, version)
[13:22:17.468]                         }
[13:22:17.468]                         base::stop(msg)
[13:22:17.468]                       }
[13:22:17.468]                     })
[13:22:17.468]                   }
[13:22:17.468]                   options(future.plan = NULL)
[13:22:17.468]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.468]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.468]                 }
[13:22:17.468]                 ...future.workdir <- getwd()
[13:22:17.468]             }
[13:22:17.468]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.468]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.468]         }
[13:22:17.468]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.468]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.468]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.468]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.468]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.468]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.468]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.468]             base::names(...future.oldOptions))
[13:22:17.468]     }
[13:22:17.468]     if (FALSE) {
[13:22:17.468]     }
[13:22:17.468]     else {
[13:22:17.468]         if (TRUE) {
[13:22:17.468]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.468]                 open = "w")
[13:22:17.468]         }
[13:22:17.468]         else {
[13:22:17.468]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.468]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.468]         }
[13:22:17.468]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.468]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.468]             base::sink(type = "output", split = FALSE)
[13:22:17.468]             base::close(...future.stdout)
[13:22:17.468]         }, add = TRUE)
[13:22:17.468]     }
[13:22:17.468]     ...future.frame <- base::sys.nframe()
[13:22:17.468]     ...future.conditions <- base::list()
[13:22:17.468]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.468]     if (FALSE) {
[13:22:17.468]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.468]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.468]     }
[13:22:17.468]     ...future.result <- base::tryCatch({
[13:22:17.468]         base::withCallingHandlers({
[13:22:17.468]             ...future.value <- base::withVisible(base::local({
[13:22:17.468]                 42L
[13:22:17.468]                 stop("Woops")
[13:22:17.468]             }))
[13:22:17.468]             future::FutureResult(value = ...future.value$value, 
[13:22:17.468]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.468]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.468]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.468]                     ...future.globalenv.names))
[13:22:17.468]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.468]         }, condition = base::local({
[13:22:17.468]             c <- base::c
[13:22:17.468]             inherits <- base::inherits
[13:22:17.468]             invokeRestart <- base::invokeRestart
[13:22:17.468]             length <- base::length
[13:22:17.468]             list <- base::list
[13:22:17.468]             seq.int <- base::seq.int
[13:22:17.468]             signalCondition <- base::signalCondition
[13:22:17.468]             sys.calls <- base::sys.calls
[13:22:17.468]             `[[` <- base::`[[`
[13:22:17.468]             `+` <- base::`+`
[13:22:17.468]             `<<-` <- base::`<<-`
[13:22:17.468]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.468]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.468]                   3L)]
[13:22:17.468]             }
[13:22:17.468]             function(cond) {
[13:22:17.468]                 is_error <- inherits(cond, "error")
[13:22:17.468]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.468]                   NULL)
[13:22:17.468]                 if (is_error) {
[13:22:17.468]                   sessionInformation <- function() {
[13:22:17.468]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.468]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.468]                       search = base::search(), system = base::Sys.info())
[13:22:17.468]                   }
[13:22:17.468]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.468]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.468]                     cond$call), session = sessionInformation(), 
[13:22:17.468]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.468]                   signalCondition(cond)
[13:22:17.468]                 }
[13:22:17.468]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.468]                 "immediateCondition"))) {
[13:22:17.468]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.468]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.468]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.468]                   if (TRUE && !signal) {
[13:22:17.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.468]                     {
[13:22:17.468]                       inherits <- base::inherits
[13:22:17.468]                       invokeRestart <- base::invokeRestart
[13:22:17.468]                       is.null <- base::is.null
[13:22:17.468]                       muffled <- FALSE
[13:22:17.468]                       if (inherits(cond, "message")) {
[13:22:17.468]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.468]                         if (muffled) 
[13:22:17.468]                           invokeRestart("muffleMessage")
[13:22:17.468]                       }
[13:22:17.468]                       else if (inherits(cond, "warning")) {
[13:22:17.468]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.468]                         if (muffled) 
[13:22:17.468]                           invokeRestart("muffleWarning")
[13:22:17.468]                       }
[13:22:17.468]                       else if (inherits(cond, "condition")) {
[13:22:17.468]                         if (!is.null(pattern)) {
[13:22:17.468]                           computeRestarts <- base::computeRestarts
[13:22:17.468]                           grepl <- base::grepl
[13:22:17.468]                           restarts <- computeRestarts(cond)
[13:22:17.468]                           for (restart in restarts) {
[13:22:17.468]                             name <- restart$name
[13:22:17.468]                             if (is.null(name)) 
[13:22:17.468]                               next
[13:22:17.468]                             if (!grepl(pattern, name)) 
[13:22:17.468]                               next
[13:22:17.468]                             invokeRestart(restart)
[13:22:17.468]                             muffled <- TRUE
[13:22:17.468]                             break
[13:22:17.468]                           }
[13:22:17.468]                         }
[13:22:17.468]                       }
[13:22:17.468]                       invisible(muffled)
[13:22:17.468]                     }
[13:22:17.468]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.468]                   }
[13:22:17.468]                 }
[13:22:17.468]                 else {
[13:22:17.468]                   if (TRUE) {
[13:22:17.468]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.468]                     {
[13:22:17.468]                       inherits <- base::inherits
[13:22:17.468]                       invokeRestart <- base::invokeRestart
[13:22:17.468]                       is.null <- base::is.null
[13:22:17.468]                       muffled <- FALSE
[13:22:17.468]                       if (inherits(cond, "message")) {
[13:22:17.468]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.468]                         if (muffled) 
[13:22:17.468]                           invokeRestart("muffleMessage")
[13:22:17.468]                       }
[13:22:17.468]                       else if (inherits(cond, "warning")) {
[13:22:17.468]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.468]                         if (muffled) 
[13:22:17.468]                           invokeRestart("muffleWarning")
[13:22:17.468]                       }
[13:22:17.468]                       else if (inherits(cond, "condition")) {
[13:22:17.468]                         if (!is.null(pattern)) {
[13:22:17.468]                           computeRestarts <- base::computeRestarts
[13:22:17.468]                           grepl <- base::grepl
[13:22:17.468]                           restarts <- computeRestarts(cond)
[13:22:17.468]                           for (restart in restarts) {
[13:22:17.468]                             name <- restart$name
[13:22:17.468]                             if (is.null(name)) 
[13:22:17.468]                               next
[13:22:17.468]                             if (!grepl(pattern, name)) 
[13:22:17.468]                               next
[13:22:17.468]                             invokeRestart(restart)
[13:22:17.468]                             muffled <- TRUE
[13:22:17.468]                             break
[13:22:17.468]                           }
[13:22:17.468]                         }
[13:22:17.468]                       }
[13:22:17.468]                       invisible(muffled)
[13:22:17.468]                     }
[13:22:17.468]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.468]                   }
[13:22:17.468]                 }
[13:22:17.468]             }
[13:22:17.468]         }))
[13:22:17.468]     }, error = function(ex) {
[13:22:17.468]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.468]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.468]                 ...future.rng), started = ...future.startTime, 
[13:22:17.468]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.468]             version = "1.8"), class = "FutureResult")
[13:22:17.468]     }, finally = {
[13:22:17.468]         if (!identical(...future.workdir, getwd())) 
[13:22:17.468]             setwd(...future.workdir)
[13:22:17.468]         {
[13:22:17.468]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.468]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.468]             }
[13:22:17.468]             base::options(...future.oldOptions)
[13:22:17.468]             if (.Platform$OS.type == "windows") {
[13:22:17.468]                 old_names <- names(...future.oldEnvVars)
[13:22:17.468]                 envs <- base::Sys.getenv()
[13:22:17.468]                 names <- names(envs)
[13:22:17.468]                 common <- intersect(names, old_names)
[13:22:17.468]                 added <- setdiff(names, old_names)
[13:22:17.468]                 removed <- setdiff(old_names, names)
[13:22:17.468]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.468]                   envs[common]]
[13:22:17.468]                 NAMES <- toupper(changed)
[13:22:17.468]                 args <- list()
[13:22:17.468]                 for (kk in seq_along(NAMES)) {
[13:22:17.468]                   name <- changed[[kk]]
[13:22:17.468]                   NAME <- NAMES[[kk]]
[13:22:17.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.468]                     next
[13:22:17.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.468]                 }
[13:22:17.468]                 NAMES <- toupper(added)
[13:22:17.468]                 for (kk in seq_along(NAMES)) {
[13:22:17.468]                   name <- added[[kk]]
[13:22:17.468]                   NAME <- NAMES[[kk]]
[13:22:17.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.468]                     next
[13:22:17.468]                   args[[name]] <- ""
[13:22:17.468]                 }
[13:22:17.468]                 NAMES <- toupper(removed)
[13:22:17.468]                 for (kk in seq_along(NAMES)) {
[13:22:17.468]                   name <- removed[[kk]]
[13:22:17.468]                   NAME <- NAMES[[kk]]
[13:22:17.468]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.468]                     next
[13:22:17.468]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.468]                 }
[13:22:17.468]                 if (length(args) > 0) 
[13:22:17.468]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.468]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.468]             }
[13:22:17.468]             else {
[13:22:17.468]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.468]             }
[13:22:17.468]             {
[13:22:17.468]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.468]                   0L) {
[13:22:17.468]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.468]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.468]                   base::options(opts)
[13:22:17.468]                 }
[13:22:17.468]                 {
[13:22:17.468]                   {
[13:22:17.468]                     NULL
[13:22:17.468]                     RNGkind("Mersenne-Twister")
[13:22:17.468]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.468]                       inherits = FALSE)
[13:22:17.468]                   }
[13:22:17.468]                   options(future.plan = NULL)
[13:22:17.468]                   if (is.na(NA_character_)) 
[13:22:17.468]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.468]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.468]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.468]                   {
[13:22:17.468]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.468]                     if (!future$lazy) 
[13:22:17.468]                       future <- run(future)
[13:22:17.468]                     invisible(future)
[13:22:17.468]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.468]                 }
[13:22:17.468]             }
[13:22:17.468]         }
[13:22:17.468]     })
[13:22:17.468]     if (TRUE) {
[13:22:17.468]         base::sink(type = "output", split = FALSE)
[13:22:17.468]         if (TRUE) {
[13:22:17.468]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.468]         }
[13:22:17.468]         else {
[13:22:17.468]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.468]         }
[13:22:17.468]         base::close(...future.stdout)
[13:22:17.468]         ...future.stdout <- NULL
[13:22:17.468]     }
[13:22:17.468]     ...future.result$conditions <- ...future.conditions
[13:22:17.468]     ...future.result$finished <- base::Sys.time()
[13:22:17.468]     ...future.result
[13:22:17.468] }
[13:22:17.470] plan(): Setting new future strategy stack:
[13:22:17.470] List of future strategies:
[13:22:17.470] 1. sequential:
[13:22:17.470]    - args: function (..., envir = parent.frame())
[13:22:17.470]    - tweaked: FALSE
[13:22:17.470]    - call: NULL
[13:22:17.471] plan(): nbrOfWorkers() = 1
[13:22:17.472] plan(): Setting new future strategy stack:
[13:22:17.472] List of future strategies:
[13:22:17.472] 1. sequential:
[13:22:17.472]    - args: function (..., envir = parent.frame())
[13:22:17.472]    - tweaked: FALSE
[13:22:17.472]    - call: future::plan("sequential")
[13:22:17.472] plan(): nbrOfWorkers() = 1
[13:22:17.472] SequentialFuture started (and completed)
[13:22:17.473] signalConditions() ...
[13:22:17.473]  - include = ‘immediateCondition’
[13:22:17.473]  - exclude = 
[13:22:17.473]  - resignal = FALSE
[13:22:17.473]  - Number of conditions: 1
[13:22:17.473] signalConditions() ... done
[13:22:17.474] - Launch lazy future ... done
[13:22:17.474] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:22:17.474] signalConditions() ...
[13:22:17.474]  - include = ‘immediateCondition’
[13:22:17.474]  - exclude = 
[13:22:17.474]  - resignal = FALSE
[13:22:17.474]  - Number of conditions: 1
[13:22:17.475] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[13:22:17.476] resolved() for ‘SequentialFuture’ ...
[13:22:17.476] - state: ‘finished’
[13:22:17.476] - run: TRUE
[13:22:17.476] - result: ‘FutureResult’
[13:22:17.476] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[13:22:17.477] getGlobalsAndPackages() ...
[13:22:17.477] Searching for globals...
[13:22:17.478] - globals found: [2] ‘{’, ‘stop’
[13:22:17.478] Searching for globals ... DONE
[13:22:17.478] Resolving globals: FALSE
[13:22:17.479] 
[13:22:17.479] 
[13:22:17.479] getGlobalsAndPackages() ... DONE
[13:22:17.479] run() for ‘Future’ ...
[13:22:17.479] - state: ‘created’
[13:22:17.479] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.480] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.480] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.480]   - Field: ‘label’
[13:22:17.480]   - Field: ‘local’
[13:22:17.480]   - Field: ‘owner’
[13:22:17.480]   - Field: ‘envir’
[13:22:17.480]   - Field: ‘packages’
[13:22:17.480]   - Field: ‘gc’
[13:22:17.481]   - Field: ‘conditions’
[13:22:17.481]   - Field: ‘expr’
[13:22:17.481]   - Field: ‘uuid’
[13:22:17.481]   - Field: ‘seed’
[13:22:17.481]   - Field: ‘version’
[13:22:17.481]   - Field: ‘result’
[13:22:17.481]   - Field: ‘asynchronous’
[13:22:17.481]   - Field: ‘calls’
[13:22:17.481]   - Field: ‘globals’
[13:22:17.481]   - Field: ‘stdout’
[13:22:17.482]   - Field: ‘earlySignal’
[13:22:17.482]   - Field: ‘lazy’
[13:22:17.482]   - Field: ‘state’
[13:22:17.482] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.482] - Launch lazy future ...
[13:22:17.482] Packages needed by the future expression (n = 0): <none>
[13:22:17.482] Packages needed by future strategies (n = 0): <none>
[13:22:17.483] {
[13:22:17.483]     {
[13:22:17.483]         {
[13:22:17.483]             ...future.startTime <- base::Sys.time()
[13:22:17.483]             {
[13:22:17.483]                 {
[13:22:17.483]                   {
[13:22:17.483]                     base::local({
[13:22:17.483]                       has_future <- base::requireNamespace("future", 
[13:22:17.483]                         quietly = TRUE)
[13:22:17.483]                       if (has_future) {
[13:22:17.483]                         ns <- base::getNamespace("future")
[13:22:17.483]                         version <- ns[[".package"]][["version"]]
[13:22:17.483]                         if (is.null(version)) 
[13:22:17.483]                           version <- utils::packageVersion("future")
[13:22:17.483]                       }
[13:22:17.483]                       else {
[13:22:17.483]                         version <- NULL
[13:22:17.483]                       }
[13:22:17.483]                       if (!has_future || version < "1.8.0") {
[13:22:17.483]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.483]                           "", base::R.version$version.string), 
[13:22:17.483]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.483]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.483]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.483]                             "release", "version")], collapse = " "), 
[13:22:17.483]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.483]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.483]                           info)
[13:22:17.483]                         info <- base::paste(info, collapse = "; ")
[13:22:17.483]                         if (!has_future) {
[13:22:17.483]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.483]                             info)
[13:22:17.483]                         }
[13:22:17.483]                         else {
[13:22:17.483]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.483]                             info, version)
[13:22:17.483]                         }
[13:22:17.483]                         base::stop(msg)
[13:22:17.483]                       }
[13:22:17.483]                     })
[13:22:17.483]                   }
[13:22:17.483]                   options(future.plan = NULL)
[13:22:17.483]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.483]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.483]                 }
[13:22:17.483]                 ...future.workdir <- getwd()
[13:22:17.483]             }
[13:22:17.483]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.483]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.483]         }
[13:22:17.483]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.483]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.483]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.483]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.483]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.483]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.483]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.483]             base::names(...future.oldOptions))
[13:22:17.483]     }
[13:22:17.483]     if (FALSE) {
[13:22:17.483]     }
[13:22:17.483]     else {
[13:22:17.483]         if (TRUE) {
[13:22:17.483]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.483]                 open = "w")
[13:22:17.483]         }
[13:22:17.483]         else {
[13:22:17.483]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.483]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.483]         }
[13:22:17.483]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.483]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.483]             base::sink(type = "output", split = FALSE)
[13:22:17.483]             base::close(...future.stdout)
[13:22:17.483]         }, add = TRUE)
[13:22:17.483]     }
[13:22:17.483]     ...future.frame <- base::sys.nframe()
[13:22:17.483]     ...future.conditions <- base::list()
[13:22:17.483]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.483]     if (FALSE) {
[13:22:17.483]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.483]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.483]     }
[13:22:17.483]     ...future.result <- base::tryCatch({
[13:22:17.483]         base::withCallingHandlers({
[13:22:17.483]             ...future.value <- base::withVisible(base::local({
[13:22:17.483]                 42L
[13:22:17.483]                 stop("Woops")
[13:22:17.483]             }))
[13:22:17.483]             future::FutureResult(value = ...future.value$value, 
[13:22:17.483]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.483]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.483]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.483]                     ...future.globalenv.names))
[13:22:17.483]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.483]         }, condition = base::local({
[13:22:17.483]             c <- base::c
[13:22:17.483]             inherits <- base::inherits
[13:22:17.483]             invokeRestart <- base::invokeRestart
[13:22:17.483]             length <- base::length
[13:22:17.483]             list <- base::list
[13:22:17.483]             seq.int <- base::seq.int
[13:22:17.483]             signalCondition <- base::signalCondition
[13:22:17.483]             sys.calls <- base::sys.calls
[13:22:17.483]             `[[` <- base::`[[`
[13:22:17.483]             `+` <- base::`+`
[13:22:17.483]             `<<-` <- base::`<<-`
[13:22:17.483]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.483]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.483]                   3L)]
[13:22:17.483]             }
[13:22:17.483]             function(cond) {
[13:22:17.483]                 is_error <- inherits(cond, "error")
[13:22:17.483]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.483]                   NULL)
[13:22:17.483]                 if (is_error) {
[13:22:17.483]                   sessionInformation <- function() {
[13:22:17.483]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.483]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.483]                       search = base::search(), system = base::Sys.info())
[13:22:17.483]                   }
[13:22:17.483]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.483]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.483]                     cond$call), session = sessionInformation(), 
[13:22:17.483]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.483]                   signalCondition(cond)
[13:22:17.483]                 }
[13:22:17.483]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.483]                 "immediateCondition"))) {
[13:22:17.483]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.483]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.483]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.483]                   if (TRUE && !signal) {
[13:22:17.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.483]                     {
[13:22:17.483]                       inherits <- base::inherits
[13:22:17.483]                       invokeRestart <- base::invokeRestart
[13:22:17.483]                       is.null <- base::is.null
[13:22:17.483]                       muffled <- FALSE
[13:22:17.483]                       if (inherits(cond, "message")) {
[13:22:17.483]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.483]                         if (muffled) 
[13:22:17.483]                           invokeRestart("muffleMessage")
[13:22:17.483]                       }
[13:22:17.483]                       else if (inherits(cond, "warning")) {
[13:22:17.483]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.483]                         if (muffled) 
[13:22:17.483]                           invokeRestart("muffleWarning")
[13:22:17.483]                       }
[13:22:17.483]                       else if (inherits(cond, "condition")) {
[13:22:17.483]                         if (!is.null(pattern)) {
[13:22:17.483]                           computeRestarts <- base::computeRestarts
[13:22:17.483]                           grepl <- base::grepl
[13:22:17.483]                           restarts <- computeRestarts(cond)
[13:22:17.483]                           for (restart in restarts) {
[13:22:17.483]                             name <- restart$name
[13:22:17.483]                             if (is.null(name)) 
[13:22:17.483]                               next
[13:22:17.483]                             if (!grepl(pattern, name)) 
[13:22:17.483]                               next
[13:22:17.483]                             invokeRestart(restart)
[13:22:17.483]                             muffled <- TRUE
[13:22:17.483]                             break
[13:22:17.483]                           }
[13:22:17.483]                         }
[13:22:17.483]                       }
[13:22:17.483]                       invisible(muffled)
[13:22:17.483]                     }
[13:22:17.483]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.483]                   }
[13:22:17.483]                 }
[13:22:17.483]                 else {
[13:22:17.483]                   if (TRUE) {
[13:22:17.483]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.483]                     {
[13:22:17.483]                       inherits <- base::inherits
[13:22:17.483]                       invokeRestart <- base::invokeRestart
[13:22:17.483]                       is.null <- base::is.null
[13:22:17.483]                       muffled <- FALSE
[13:22:17.483]                       if (inherits(cond, "message")) {
[13:22:17.483]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.483]                         if (muffled) 
[13:22:17.483]                           invokeRestart("muffleMessage")
[13:22:17.483]                       }
[13:22:17.483]                       else if (inherits(cond, "warning")) {
[13:22:17.483]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.483]                         if (muffled) 
[13:22:17.483]                           invokeRestart("muffleWarning")
[13:22:17.483]                       }
[13:22:17.483]                       else if (inherits(cond, "condition")) {
[13:22:17.483]                         if (!is.null(pattern)) {
[13:22:17.483]                           computeRestarts <- base::computeRestarts
[13:22:17.483]                           grepl <- base::grepl
[13:22:17.483]                           restarts <- computeRestarts(cond)
[13:22:17.483]                           for (restart in restarts) {
[13:22:17.483]                             name <- restart$name
[13:22:17.483]                             if (is.null(name)) 
[13:22:17.483]                               next
[13:22:17.483]                             if (!grepl(pattern, name)) 
[13:22:17.483]                               next
[13:22:17.483]                             invokeRestart(restart)
[13:22:17.483]                             muffled <- TRUE
[13:22:17.483]                             break
[13:22:17.483]                           }
[13:22:17.483]                         }
[13:22:17.483]                       }
[13:22:17.483]                       invisible(muffled)
[13:22:17.483]                     }
[13:22:17.483]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.483]                   }
[13:22:17.483]                 }
[13:22:17.483]             }
[13:22:17.483]         }))
[13:22:17.483]     }, error = function(ex) {
[13:22:17.483]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.483]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.483]                 ...future.rng), started = ...future.startTime, 
[13:22:17.483]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.483]             version = "1.8"), class = "FutureResult")
[13:22:17.483]     }, finally = {
[13:22:17.483]         if (!identical(...future.workdir, getwd())) 
[13:22:17.483]             setwd(...future.workdir)
[13:22:17.483]         {
[13:22:17.483]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.483]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.483]             }
[13:22:17.483]             base::options(...future.oldOptions)
[13:22:17.483]             if (.Platform$OS.type == "windows") {
[13:22:17.483]                 old_names <- names(...future.oldEnvVars)
[13:22:17.483]                 envs <- base::Sys.getenv()
[13:22:17.483]                 names <- names(envs)
[13:22:17.483]                 common <- intersect(names, old_names)
[13:22:17.483]                 added <- setdiff(names, old_names)
[13:22:17.483]                 removed <- setdiff(old_names, names)
[13:22:17.483]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.483]                   envs[common]]
[13:22:17.483]                 NAMES <- toupper(changed)
[13:22:17.483]                 args <- list()
[13:22:17.483]                 for (kk in seq_along(NAMES)) {
[13:22:17.483]                   name <- changed[[kk]]
[13:22:17.483]                   NAME <- NAMES[[kk]]
[13:22:17.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.483]                     next
[13:22:17.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.483]                 }
[13:22:17.483]                 NAMES <- toupper(added)
[13:22:17.483]                 for (kk in seq_along(NAMES)) {
[13:22:17.483]                   name <- added[[kk]]
[13:22:17.483]                   NAME <- NAMES[[kk]]
[13:22:17.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.483]                     next
[13:22:17.483]                   args[[name]] <- ""
[13:22:17.483]                 }
[13:22:17.483]                 NAMES <- toupper(removed)
[13:22:17.483]                 for (kk in seq_along(NAMES)) {
[13:22:17.483]                   name <- removed[[kk]]
[13:22:17.483]                   NAME <- NAMES[[kk]]
[13:22:17.483]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.483]                     next
[13:22:17.483]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.483]                 }
[13:22:17.483]                 if (length(args) > 0) 
[13:22:17.483]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.483]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.483]             }
[13:22:17.483]             else {
[13:22:17.483]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.483]             }
[13:22:17.483]             {
[13:22:17.483]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.483]                   0L) {
[13:22:17.483]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.483]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.483]                   base::options(opts)
[13:22:17.483]                 }
[13:22:17.483]                 {
[13:22:17.483]                   {
[13:22:17.483]                     NULL
[13:22:17.483]                     RNGkind("Mersenne-Twister")
[13:22:17.483]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.483]                       inherits = FALSE)
[13:22:17.483]                   }
[13:22:17.483]                   options(future.plan = NULL)
[13:22:17.483]                   if (is.na(NA_character_)) 
[13:22:17.483]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.483]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.483]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.483]                   {
[13:22:17.483]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.483]                     if (!future$lazy) 
[13:22:17.483]                       future <- run(future)
[13:22:17.483]                     invisible(future)
[13:22:17.483]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.483]                 }
[13:22:17.483]             }
[13:22:17.483]         }
[13:22:17.483]     })
[13:22:17.483]     if (TRUE) {
[13:22:17.483]         base::sink(type = "output", split = FALSE)
[13:22:17.483]         if (TRUE) {
[13:22:17.483]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.483]         }
[13:22:17.483]         else {
[13:22:17.483]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.483]         }
[13:22:17.483]         base::close(...future.stdout)
[13:22:17.483]         ...future.stdout <- NULL
[13:22:17.483]     }
[13:22:17.483]     ...future.result$conditions <- ...future.conditions
[13:22:17.483]     ...future.result$finished <- base::Sys.time()
[13:22:17.483]     ...future.result
[13:22:17.483] }
[13:22:17.485] plan(): Setting new future strategy stack:
[13:22:17.485] List of future strategies:
[13:22:17.485] 1. sequential:
[13:22:17.485]    - args: function (..., envir = parent.frame())
[13:22:17.485]    - tweaked: FALSE
[13:22:17.485]    - call: NULL
[13:22:17.485] plan(): nbrOfWorkers() = 1
[13:22:17.486] plan(): Setting new future strategy stack:
[13:22:17.486] List of future strategies:
[13:22:17.486] 1. sequential:
[13:22:17.486]    - args: function (..., envir = parent.frame())
[13:22:17.486]    - tweaked: FALSE
[13:22:17.486]    - call: future::plan("sequential")
[13:22:17.487] plan(): nbrOfWorkers() = 1
[13:22:17.487] SequentialFuture started (and completed)
[13:22:17.487] signalConditions() ...
[13:22:17.487]  - include = ‘immediateCondition’
[13:22:17.487]  - exclude = 
[13:22:17.487]  - resignal = FALSE
[13:22:17.487]  - Number of conditions: 1
[13:22:17.487] signalConditions() ... done
[13:22:17.487] - Launch lazy future ... done
[13:22:17.487] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[13:22:17.488] resolved() for ‘SequentialFuture’ ...
[13:22:17.488] - state: ‘finished’
[13:22:17.488] - run: TRUE
[13:22:17.488] - result: ‘FutureResult’
[13:22:17.488] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[13:22:17.489] getGlobalsAndPackages() ...
[13:22:17.489] Searching for globals...
[13:22:17.490] - globals found: [2] ‘{’, ‘stop’
[13:22:17.491] Searching for globals ... DONE
[13:22:17.491] Resolving globals: FALSE
[13:22:17.491] 
[13:22:17.491] 
[13:22:17.491] getGlobalsAndPackages() ... DONE
[13:22:17.491] run() for ‘Future’ ...
[13:22:17.492] - state: ‘created’
[13:22:17.492] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.495] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.495] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.495]   - Field: ‘label’
[13:22:17.495]   - Field: ‘local’
[13:22:17.495]   - Field: ‘owner’
[13:22:17.495]   - Field: ‘envir’
[13:22:17.496]   - Field: ‘packages’
[13:22:17.496]   - Field: ‘gc’
[13:22:17.496]   - Field: ‘conditions’
[13:22:17.496]   - Field: ‘expr’
[13:22:17.496]   - Field: ‘uuid’
[13:22:17.496]   - Field: ‘seed’
[13:22:17.496]   - Field: ‘version’
[13:22:17.496]   - Field: ‘result’
[13:22:17.496]   - Field: ‘asynchronous’
[13:22:17.497]   - Field: ‘calls’
[13:22:17.497]   - Field: ‘globals’
[13:22:17.497]   - Field: ‘stdout’
[13:22:17.497]   - Field: ‘earlySignal’
[13:22:17.497]   - Field: ‘lazy’
[13:22:17.497]   - Field: ‘state’
[13:22:17.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.497] - Launch lazy future ...
[13:22:17.497] Packages needed by the future expression (n = 0): <none>
[13:22:17.497] Packages needed by future strategies (n = 0): <none>
[13:22:17.498] {
[13:22:17.498]     {
[13:22:17.498]         {
[13:22:17.498]             ...future.startTime <- base::Sys.time()
[13:22:17.498]             {
[13:22:17.498]                 {
[13:22:17.498]                   {
[13:22:17.498]                     base::local({
[13:22:17.498]                       has_future <- base::requireNamespace("future", 
[13:22:17.498]                         quietly = TRUE)
[13:22:17.498]                       if (has_future) {
[13:22:17.498]                         ns <- base::getNamespace("future")
[13:22:17.498]                         version <- ns[[".package"]][["version"]]
[13:22:17.498]                         if (is.null(version)) 
[13:22:17.498]                           version <- utils::packageVersion("future")
[13:22:17.498]                       }
[13:22:17.498]                       else {
[13:22:17.498]                         version <- NULL
[13:22:17.498]                       }
[13:22:17.498]                       if (!has_future || version < "1.8.0") {
[13:22:17.498]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.498]                           "", base::R.version$version.string), 
[13:22:17.498]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.498]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.498]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.498]                             "release", "version")], collapse = " "), 
[13:22:17.498]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.498]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.498]                           info)
[13:22:17.498]                         info <- base::paste(info, collapse = "; ")
[13:22:17.498]                         if (!has_future) {
[13:22:17.498]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.498]                             info)
[13:22:17.498]                         }
[13:22:17.498]                         else {
[13:22:17.498]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.498]                             info, version)
[13:22:17.498]                         }
[13:22:17.498]                         base::stop(msg)
[13:22:17.498]                       }
[13:22:17.498]                     })
[13:22:17.498]                   }
[13:22:17.498]                   options(future.plan = NULL)
[13:22:17.498]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.498]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.498]                 }
[13:22:17.498]                 ...future.workdir <- getwd()
[13:22:17.498]             }
[13:22:17.498]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.498]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.498]         }
[13:22:17.498]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.498]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.498]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.498]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.498]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.498]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.498]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.498]             base::names(...future.oldOptions))
[13:22:17.498]     }
[13:22:17.498]     if (FALSE) {
[13:22:17.498]     }
[13:22:17.498]     else {
[13:22:17.498]         if (TRUE) {
[13:22:17.498]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.498]                 open = "w")
[13:22:17.498]         }
[13:22:17.498]         else {
[13:22:17.498]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.498]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.498]         }
[13:22:17.498]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.498]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.498]             base::sink(type = "output", split = FALSE)
[13:22:17.498]             base::close(...future.stdout)
[13:22:17.498]         }, add = TRUE)
[13:22:17.498]     }
[13:22:17.498]     ...future.frame <- base::sys.nframe()
[13:22:17.498]     ...future.conditions <- base::list()
[13:22:17.498]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.498]     if (FALSE) {
[13:22:17.498]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.498]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.498]     }
[13:22:17.498]     ...future.result <- base::tryCatch({
[13:22:17.498]         base::withCallingHandlers({
[13:22:17.498]             ...future.value <- base::withVisible(base::local({
[13:22:17.498]                 42L
[13:22:17.498]                 stop("Woops")
[13:22:17.498]             }))
[13:22:17.498]             future::FutureResult(value = ...future.value$value, 
[13:22:17.498]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.498]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.498]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.498]                     ...future.globalenv.names))
[13:22:17.498]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.498]         }, condition = base::local({
[13:22:17.498]             c <- base::c
[13:22:17.498]             inherits <- base::inherits
[13:22:17.498]             invokeRestart <- base::invokeRestart
[13:22:17.498]             length <- base::length
[13:22:17.498]             list <- base::list
[13:22:17.498]             seq.int <- base::seq.int
[13:22:17.498]             signalCondition <- base::signalCondition
[13:22:17.498]             sys.calls <- base::sys.calls
[13:22:17.498]             `[[` <- base::`[[`
[13:22:17.498]             `+` <- base::`+`
[13:22:17.498]             `<<-` <- base::`<<-`
[13:22:17.498]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.498]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.498]                   3L)]
[13:22:17.498]             }
[13:22:17.498]             function(cond) {
[13:22:17.498]                 is_error <- inherits(cond, "error")
[13:22:17.498]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.498]                   NULL)
[13:22:17.498]                 if (is_error) {
[13:22:17.498]                   sessionInformation <- function() {
[13:22:17.498]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.498]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.498]                       search = base::search(), system = base::Sys.info())
[13:22:17.498]                   }
[13:22:17.498]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.498]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.498]                     cond$call), session = sessionInformation(), 
[13:22:17.498]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.498]                   signalCondition(cond)
[13:22:17.498]                 }
[13:22:17.498]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.498]                 "immediateCondition"))) {
[13:22:17.498]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.498]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.498]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.498]                   if (TRUE && !signal) {
[13:22:17.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.498]                     {
[13:22:17.498]                       inherits <- base::inherits
[13:22:17.498]                       invokeRestart <- base::invokeRestart
[13:22:17.498]                       is.null <- base::is.null
[13:22:17.498]                       muffled <- FALSE
[13:22:17.498]                       if (inherits(cond, "message")) {
[13:22:17.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.498]                         if (muffled) 
[13:22:17.498]                           invokeRestart("muffleMessage")
[13:22:17.498]                       }
[13:22:17.498]                       else if (inherits(cond, "warning")) {
[13:22:17.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.498]                         if (muffled) 
[13:22:17.498]                           invokeRestart("muffleWarning")
[13:22:17.498]                       }
[13:22:17.498]                       else if (inherits(cond, "condition")) {
[13:22:17.498]                         if (!is.null(pattern)) {
[13:22:17.498]                           computeRestarts <- base::computeRestarts
[13:22:17.498]                           grepl <- base::grepl
[13:22:17.498]                           restarts <- computeRestarts(cond)
[13:22:17.498]                           for (restart in restarts) {
[13:22:17.498]                             name <- restart$name
[13:22:17.498]                             if (is.null(name)) 
[13:22:17.498]                               next
[13:22:17.498]                             if (!grepl(pattern, name)) 
[13:22:17.498]                               next
[13:22:17.498]                             invokeRestart(restart)
[13:22:17.498]                             muffled <- TRUE
[13:22:17.498]                             break
[13:22:17.498]                           }
[13:22:17.498]                         }
[13:22:17.498]                       }
[13:22:17.498]                       invisible(muffled)
[13:22:17.498]                     }
[13:22:17.498]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.498]                   }
[13:22:17.498]                 }
[13:22:17.498]                 else {
[13:22:17.498]                   if (TRUE) {
[13:22:17.498]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.498]                     {
[13:22:17.498]                       inherits <- base::inherits
[13:22:17.498]                       invokeRestart <- base::invokeRestart
[13:22:17.498]                       is.null <- base::is.null
[13:22:17.498]                       muffled <- FALSE
[13:22:17.498]                       if (inherits(cond, "message")) {
[13:22:17.498]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.498]                         if (muffled) 
[13:22:17.498]                           invokeRestart("muffleMessage")
[13:22:17.498]                       }
[13:22:17.498]                       else if (inherits(cond, "warning")) {
[13:22:17.498]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.498]                         if (muffled) 
[13:22:17.498]                           invokeRestart("muffleWarning")
[13:22:17.498]                       }
[13:22:17.498]                       else if (inherits(cond, "condition")) {
[13:22:17.498]                         if (!is.null(pattern)) {
[13:22:17.498]                           computeRestarts <- base::computeRestarts
[13:22:17.498]                           grepl <- base::grepl
[13:22:17.498]                           restarts <- computeRestarts(cond)
[13:22:17.498]                           for (restart in restarts) {
[13:22:17.498]                             name <- restart$name
[13:22:17.498]                             if (is.null(name)) 
[13:22:17.498]                               next
[13:22:17.498]                             if (!grepl(pattern, name)) 
[13:22:17.498]                               next
[13:22:17.498]                             invokeRestart(restart)
[13:22:17.498]                             muffled <- TRUE
[13:22:17.498]                             break
[13:22:17.498]                           }
[13:22:17.498]                         }
[13:22:17.498]                       }
[13:22:17.498]                       invisible(muffled)
[13:22:17.498]                     }
[13:22:17.498]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.498]                   }
[13:22:17.498]                 }
[13:22:17.498]             }
[13:22:17.498]         }))
[13:22:17.498]     }, error = function(ex) {
[13:22:17.498]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.498]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.498]                 ...future.rng), started = ...future.startTime, 
[13:22:17.498]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.498]             version = "1.8"), class = "FutureResult")
[13:22:17.498]     }, finally = {
[13:22:17.498]         if (!identical(...future.workdir, getwd())) 
[13:22:17.498]             setwd(...future.workdir)
[13:22:17.498]         {
[13:22:17.498]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.498]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.498]             }
[13:22:17.498]             base::options(...future.oldOptions)
[13:22:17.498]             if (.Platform$OS.type == "windows") {
[13:22:17.498]                 old_names <- names(...future.oldEnvVars)
[13:22:17.498]                 envs <- base::Sys.getenv()
[13:22:17.498]                 names <- names(envs)
[13:22:17.498]                 common <- intersect(names, old_names)
[13:22:17.498]                 added <- setdiff(names, old_names)
[13:22:17.498]                 removed <- setdiff(old_names, names)
[13:22:17.498]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.498]                   envs[common]]
[13:22:17.498]                 NAMES <- toupper(changed)
[13:22:17.498]                 args <- list()
[13:22:17.498]                 for (kk in seq_along(NAMES)) {
[13:22:17.498]                   name <- changed[[kk]]
[13:22:17.498]                   NAME <- NAMES[[kk]]
[13:22:17.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.498]                     next
[13:22:17.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.498]                 }
[13:22:17.498]                 NAMES <- toupper(added)
[13:22:17.498]                 for (kk in seq_along(NAMES)) {
[13:22:17.498]                   name <- added[[kk]]
[13:22:17.498]                   NAME <- NAMES[[kk]]
[13:22:17.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.498]                     next
[13:22:17.498]                   args[[name]] <- ""
[13:22:17.498]                 }
[13:22:17.498]                 NAMES <- toupper(removed)
[13:22:17.498]                 for (kk in seq_along(NAMES)) {
[13:22:17.498]                   name <- removed[[kk]]
[13:22:17.498]                   NAME <- NAMES[[kk]]
[13:22:17.498]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.498]                     next
[13:22:17.498]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.498]                 }
[13:22:17.498]                 if (length(args) > 0) 
[13:22:17.498]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.498]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.498]             }
[13:22:17.498]             else {
[13:22:17.498]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.498]             }
[13:22:17.498]             {
[13:22:17.498]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.498]                   0L) {
[13:22:17.498]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.498]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.498]                   base::options(opts)
[13:22:17.498]                 }
[13:22:17.498]                 {
[13:22:17.498]                   {
[13:22:17.498]                     NULL
[13:22:17.498]                     RNGkind("Mersenne-Twister")
[13:22:17.498]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.498]                       inherits = FALSE)
[13:22:17.498]                   }
[13:22:17.498]                   options(future.plan = NULL)
[13:22:17.498]                   if (is.na(NA_character_)) 
[13:22:17.498]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.498]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.498]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.498]                   {
[13:22:17.498]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.498]                     if (!future$lazy) 
[13:22:17.498]                       future <- run(future)
[13:22:17.498]                     invisible(future)
[13:22:17.498]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.498]                 }
[13:22:17.498]             }
[13:22:17.498]         }
[13:22:17.498]     })
[13:22:17.498]     if (TRUE) {
[13:22:17.498]         base::sink(type = "output", split = FALSE)
[13:22:17.498]         if (TRUE) {
[13:22:17.498]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.498]         }
[13:22:17.498]         else {
[13:22:17.498]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.498]         }
[13:22:17.498]         base::close(...future.stdout)
[13:22:17.498]         ...future.stdout <- NULL
[13:22:17.498]     }
[13:22:17.498]     ...future.result$conditions <- ...future.conditions
[13:22:17.498]     ...future.result$finished <- base::Sys.time()
[13:22:17.498]     ...future.result
[13:22:17.498] }
[13:22:17.500] plan(): Setting new future strategy stack:
[13:22:17.500] List of future strategies:
[13:22:17.500] 1. sequential:
[13:22:17.500]    - args: function (..., envir = parent.frame())
[13:22:17.500]    - tweaked: FALSE
[13:22:17.500]    - call: NULL
[13:22:17.500] plan(): nbrOfWorkers() = 1
[13:22:17.501] plan(): Setting new future strategy stack:
[13:22:17.501] List of future strategies:
[13:22:17.501] 1. sequential:
[13:22:17.501]    - args: function (..., envir = parent.frame())
[13:22:17.501]    - tweaked: FALSE
[13:22:17.501]    - call: future::plan("sequential")
[13:22:17.502] plan(): nbrOfWorkers() = 1
[13:22:17.502] SequentialFuture started (and completed)
[13:22:17.502] signalConditions() ...
[13:22:17.502]  - include = ‘immediateCondition’
[13:22:17.502]  - exclude = 
[13:22:17.502]  - resignal = FALSE
[13:22:17.502]  - Number of conditions: 1
[13:22:17.502] signalConditions() ... done
[13:22:17.503] - Launch lazy future ... done
[13:22:17.503] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[13:22:17.503] getGlobalsAndPackages() ...
[13:22:17.503] Searching for globals...
[13:22:17.504] - globals found: [2] ‘{’, ‘stop’
[13:22:17.504] Searching for globals ... DONE
[13:22:17.504] Resolving globals: FALSE
[13:22:17.505] 
[13:22:17.505] 
[13:22:17.505] getGlobalsAndPackages() ... DONE
[13:22:17.505] run() for ‘Future’ ...
[13:22:17.505] - state: ‘created’
[13:22:17.505] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.506] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.506] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.506]   - Field: ‘label’
[13:22:17.506]   - Field: ‘local’
[13:22:17.506]   - Field: ‘owner’
[13:22:17.506]   - Field: ‘envir’
[13:22:17.506]   - Field: ‘packages’
[13:22:17.506]   - Field: ‘gc’
[13:22:17.506]   - Field: ‘conditions’
[13:22:17.507]   - Field: ‘expr’
[13:22:17.507]   - Field: ‘uuid’
[13:22:17.507]   - Field: ‘seed’
[13:22:17.507]   - Field: ‘version’
[13:22:17.507]   - Field: ‘result’
[13:22:17.507]   - Field: ‘asynchronous’
[13:22:17.507]   - Field: ‘calls’
[13:22:17.507]   - Field: ‘globals’
[13:22:17.507]   - Field: ‘stdout’
[13:22:17.507]   - Field: ‘earlySignal’
[13:22:17.507]   - Field: ‘lazy’
[13:22:17.508]   - Field: ‘state’
[13:22:17.508] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.508] - Launch lazy future ...
[13:22:17.508] Packages needed by the future expression (n = 0): <none>
[13:22:17.508] Packages needed by future strategies (n = 0): <none>
[13:22:17.508] {
[13:22:17.508]     {
[13:22:17.508]         {
[13:22:17.508]             ...future.startTime <- base::Sys.time()
[13:22:17.508]             {
[13:22:17.508]                 {
[13:22:17.508]                   {
[13:22:17.508]                     base::local({
[13:22:17.508]                       has_future <- base::requireNamespace("future", 
[13:22:17.508]                         quietly = TRUE)
[13:22:17.508]                       if (has_future) {
[13:22:17.508]                         ns <- base::getNamespace("future")
[13:22:17.508]                         version <- ns[[".package"]][["version"]]
[13:22:17.508]                         if (is.null(version)) 
[13:22:17.508]                           version <- utils::packageVersion("future")
[13:22:17.508]                       }
[13:22:17.508]                       else {
[13:22:17.508]                         version <- NULL
[13:22:17.508]                       }
[13:22:17.508]                       if (!has_future || version < "1.8.0") {
[13:22:17.508]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.508]                           "", base::R.version$version.string), 
[13:22:17.508]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.508]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.508]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.508]                             "release", "version")], collapse = " "), 
[13:22:17.508]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.508]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.508]                           info)
[13:22:17.508]                         info <- base::paste(info, collapse = "; ")
[13:22:17.508]                         if (!has_future) {
[13:22:17.508]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.508]                             info)
[13:22:17.508]                         }
[13:22:17.508]                         else {
[13:22:17.508]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.508]                             info, version)
[13:22:17.508]                         }
[13:22:17.508]                         base::stop(msg)
[13:22:17.508]                       }
[13:22:17.508]                     })
[13:22:17.508]                   }
[13:22:17.508]                   options(future.plan = NULL)
[13:22:17.508]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.508]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.508]                 }
[13:22:17.508]                 ...future.workdir <- getwd()
[13:22:17.508]             }
[13:22:17.508]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.508]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.508]         }
[13:22:17.508]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.508]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.508]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.508]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.508]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.508]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.508]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.508]             base::names(...future.oldOptions))
[13:22:17.508]     }
[13:22:17.508]     if (FALSE) {
[13:22:17.508]     }
[13:22:17.508]     else {
[13:22:17.508]         if (TRUE) {
[13:22:17.508]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.508]                 open = "w")
[13:22:17.508]         }
[13:22:17.508]         else {
[13:22:17.508]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.508]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.508]         }
[13:22:17.508]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.508]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.508]             base::sink(type = "output", split = FALSE)
[13:22:17.508]             base::close(...future.stdout)
[13:22:17.508]         }, add = TRUE)
[13:22:17.508]     }
[13:22:17.508]     ...future.frame <- base::sys.nframe()
[13:22:17.508]     ...future.conditions <- base::list()
[13:22:17.508]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.508]     if (FALSE) {
[13:22:17.508]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.508]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.508]     }
[13:22:17.508]     ...future.result <- base::tryCatch({
[13:22:17.508]         base::withCallingHandlers({
[13:22:17.508]             ...future.value <- base::withVisible(base::local({
[13:22:17.508]                 42L
[13:22:17.508]                 stop("Woops")
[13:22:17.508]             }))
[13:22:17.508]             future::FutureResult(value = ...future.value$value, 
[13:22:17.508]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.508]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.508]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.508]                     ...future.globalenv.names))
[13:22:17.508]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.508]         }, condition = base::local({
[13:22:17.508]             c <- base::c
[13:22:17.508]             inherits <- base::inherits
[13:22:17.508]             invokeRestart <- base::invokeRestart
[13:22:17.508]             length <- base::length
[13:22:17.508]             list <- base::list
[13:22:17.508]             seq.int <- base::seq.int
[13:22:17.508]             signalCondition <- base::signalCondition
[13:22:17.508]             sys.calls <- base::sys.calls
[13:22:17.508]             `[[` <- base::`[[`
[13:22:17.508]             `+` <- base::`+`
[13:22:17.508]             `<<-` <- base::`<<-`
[13:22:17.508]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.508]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.508]                   3L)]
[13:22:17.508]             }
[13:22:17.508]             function(cond) {
[13:22:17.508]                 is_error <- inherits(cond, "error")
[13:22:17.508]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.508]                   NULL)
[13:22:17.508]                 if (is_error) {
[13:22:17.508]                   sessionInformation <- function() {
[13:22:17.508]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.508]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.508]                       search = base::search(), system = base::Sys.info())
[13:22:17.508]                   }
[13:22:17.508]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.508]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.508]                     cond$call), session = sessionInformation(), 
[13:22:17.508]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.508]                   signalCondition(cond)
[13:22:17.508]                 }
[13:22:17.508]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.508]                 "immediateCondition"))) {
[13:22:17.508]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.508]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.508]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.508]                   if (TRUE && !signal) {
[13:22:17.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.508]                     {
[13:22:17.508]                       inherits <- base::inherits
[13:22:17.508]                       invokeRestart <- base::invokeRestart
[13:22:17.508]                       is.null <- base::is.null
[13:22:17.508]                       muffled <- FALSE
[13:22:17.508]                       if (inherits(cond, "message")) {
[13:22:17.508]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.508]                         if (muffled) 
[13:22:17.508]                           invokeRestart("muffleMessage")
[13:22:17.508]                       }
[13:22:17.508]                       else if (inherits(cond, "warning")) {
[13:22:17.508]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.508]                         if (muffled) 
[13:22:17.508]                           invokeRestart("muffleWarning")
[13:22:17.508]                       }
[13:22:17.508]                       else if (inherits(cond, "condition")) {
[13:22:17.508]                         if (!is.null(pattern)) {
[13:22:17.508]                           computeRestarts <- base::computeRestarts
[13:22:17.508]                           grepl <- base::grepl
[13:22:17.508]                           restarts <- computeRestarts(cond)
[13:22:17.508]                           for (restart in restarts) {
[13:22:17.508]                             name <- restart$name
[13:22:17.508]                             if (is.null(name)) 
[13:22:17.508]                               next
[13:22:17.508]                             if (!grepl(pattern, name)) 
[13:22:17.508]                               next
[13:22:17.508]                             invokeRestart(restart)
[13:22:17.508]                             muffled <- TRUE
[13:22:17.508]                             break
[13:22:17.508]                           }
[13:22:17.508]                         }
[13:22:17.508]                       }
[13:22:17.508]                       invisible(muffled)
[13:22:17.508]                     }
[13:22:17.508]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.508]                   }
[13:22:17.508]                 }
[13:22:17.508]                 else {
[13:22:17.508]                   if (TRUE) {
[13:22:17.508]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.508]                     {
[13:22:17.508]                       inherits <- base::inherits
[13:22:17.508]                       invokeRestart <- base::invokeRestart
[13:22:17.508]                       is.null <- base::is.null
[13:22:17.508]                       muffled <- FALSE
[13:22:17.508]                       if (inherits(cond, "message")) {
[13:22:17.508]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.508]                         if (muffled) 
[13:22:17.508]                           invokeRestart("muffleMessage")
[13:22:17.508]                       }
[13:22:17.508]                       else if (inherits(cond, "warning")) {
[13:22:17.508]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.508]                         if (muffled) 
[13:22:17.508]                           invokeRestart("muffleWarning")
[13:22:17.508]                       }
[13:22:17.508]                       else if (inherits(cond, "condition")) {
[13:22:17.508]                         if (!is.null(pattern)) {
[13:22:17.508]                           computeRestarts <- base::computeRestarts
[13:22:17.508]                           grepl <- base::grepl
[13:22:17.508]                           restarts <- computeRestarts(cond)
[13:22:17.508]                           for (restart in restarts) {
[13:22:17.508]                             name <- restart$name
[13:22:17.508]                             if (is.null(name)) 
[13:22:17.508]                               next
[13:22:17.508]                             if (!grepl(pattern, name)) 
[13:22:17.508]                               next
[13:22:17.508]                             invokeRestart(restart)
[13:22:17.508]                             muffled <- TRUE
[13:22:17.508]                             break
[13:22:17.508]                           }
[13:22:17.508]                         }
[13:22:17.508]                       }
[13:22:17.508]                       invisible(muffled)
[13:22:17.508]                     }
[13:22:17.508]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.508]                   }
[13:22:17.508]                 }
[13:22:17.508]             }
[13:22:17.508]         }))
[13:22:17.508]     }, error = function(ex) {
[13:22:17.508]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.508]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.508]                 ...future.rng), started = ...future.startTime, 
[13:22:17.508]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.508]             version = "1.8"), class = "FutureResult")
[13:22:17.508]     }, finally = {
[13:22:17.508]         if (!identical(...future.workdir, getwd())) 
[13:22:17.508]             setwd(...future.workdir)
[13:22:17.508]         {
[13:22:17.508]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.508]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.508]             }
[13:22:17.508]             base::options(...future.oldOptions)
[13:22:17.508]             if (.Platform$OS.type == "windows") {
[13:22:17.508]                 old_names <- names(...future.oldEnvVars)
[13:22:17.508]                 envs <- base::Sys.getenv()
[13:22:17.508]                 names <- names(envs)
[13:22:17.508]                 common <- intersect(names, old_names)
[13:22:17.508]                 added <- setdiff(names, old_names)
[13:22:17.508]                 removed <- setdiff(old_names, names)
[13:22:17.508]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.508]                   envs[common]]
[13:22:17.508]                 NAMES <- toupper(changed)
[13:22:17.508]                 args <- list()
[13:22:17.508]                 for (kk in seq_along(NAMES)) {
[13:22:17.508]                   name <- changed[[kk]]
[13:22:17.508]                   NAME <- NAMES[[kk]]
[13:22:17.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.508]                     next
[13:22:17.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.508]                 }
[13:22:17.508]                 NAMES <- toupper(added)
[13:22:17.508]                 for (kk in seq_along(NAMES)) {
[13:22:17.508]                   name <- added[[kk]]
[13:22:17.508]                   NAME <- NAMES[[kk]]
[13:22:17.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.508]                     next
[13:22:17.508]                   args[[name]] <- ""
[13:22:17.508]                 }
[13:22:17.508]                 NAMES <- toupper(removed)
[13:22:17.508]                 for (kk in seq_along(NAMES)) {
[13:22:17.508]                   name <- removed[[kk]]
[13:22:17.508]                   NAME <- NAMES[[kk]]
[13:22:17.508]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.508]                     next
[13:22:17.508]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.508]                 }
[13:22:17.508]                 if (length(args) > 0) 
[13:22:17.508]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.508]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.508]             }
[13:22:17.508]             else {
[13:22:17.508]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.508]             }
[13:22:17.508]             {
[13:22:17.508]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.508]                   0L) {
[13:22:17.508]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.508]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.508]                   base::options(opts)
[13:22:17.508]                 }
[13:22:17.508]                 {
[13:22:17.508]                   {
[13:22:17.508]                     NULL
[13:22:17.508]                     RNGkind("Mersenne-Twister")
[13:22:17.508]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.508]                       inherits = FALSE)
[13:22:17.508]                   }
[13:22:17.508]                   options(future.plan = NULL)
[13:22:17.508]                   if (is.na(NA_character_)) 
[13:22:17.508]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.508]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.508]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.508]                   {
[13:22:17.508]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.508]                     if (!future$lazy) 
[13:22:17.508]                       future <- run(future)
[13:22:17.508]                     invisible(future)
[13:22:17.508]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.508]                 }
[13:22:17.508]             }
[13:22:17.508]         }
[13:22:17.508]     })
[13:22:17.508]     if (TRUE) {
[13:22:17.508]         base::sink(type = "output", split = FALSE)
[13:22:17.508]         if (TRUE) {
[13:22:17.508]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.508]         }
[13:22:17.508]         else {
[13:22:17.508]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.508]         }
[13:22:17.508]         base::close(...future.stdout)
[13:22:17.508]         ...future.stdout <- NULL
[13:22:17.508]     }
[13:22:17.508]     ...future.result$conditions <- ...future.conditions
[13:22:17.508]     ...future.result$finished <- base::Sys.time()
[13:22:17.508]     ...future.result
[13:22:17.508] }
[13:22:17.510] plan(): Setting new future strategy stack:
[13:22:17.510] List of future strategies:
[13:22:17.510] 1. sequential:
[13:22:17.510]    - args: function (..., envir = parent.frame())
[13:22:17.510]    - tweaked: FALSE
[13:22:17.510]    - call: NULL
[13:22:17.511] plan(): nbrOfWorkers() = 1
[13:22:17.512] plan(): Setting new future strategy stack:
[13:22:17.512] List of future strategies:
[13:22:17.512] 1. sequential:
[13:22:17.512]    - args: function (..., envir = parent.frame())
[13:22:17.512]    - tweaked: FALSE
[13:22:17.512]    - call: future::plan("sequential")
[13:22:17.512] plan(): nbrOfWorkers() = 1
[13:22:17.513] SequentialFuture started (and completed)
[13:22:17.513] signalConditions() ...
[13:22:17.513]  - include = ‘immediateCondition’
[13:22:17.513]  - exclude = 
[13:22:17.513]  - resignal = FALSE
[13:22:17.513]  - Number of conditions: 1
[13:22:17.513] signalConditions() ... done
[13:22:17.513] - Launch lazy future ... done
[13:22:17.513] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[13:22:17.514] resolved() for ‘SequentialFuture’ ...
[13:22:17.514] - state: ‘finished’
[13:22:17.514] - run: TRUE
[13:22:17.514] - result: ‘FutureResult’
[13:22:17.514] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[13:22:17.515] getGlobalsAndPackages() ...
[13:22:17.516] Searching for globals...
[13:22:17.516] - globals found: [2] ‘{’, ‘stop’
[13:22:17.517] Searching for globals ... DONE
[13:22:17.517] Resolving globals: FALSE
[13:22:17.517] 
[13:22:17.517] 
[13:22:17.517] getGlobalsAndPackages() ... DONE
[13:22:17.517] run() for ‘Future’ ...
[13:22:17.518] - state: ‘created’
[13:22:17.518] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.518] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.518] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.518]   - Field: ‘label’
[13:22:17.518]   - Field: ‘local’
[13:22:17.518]   - Field: ‘owner’
[13:22:17.519]   - Field: ‘envir’
[13:22:17.519]   - Field: ‘packages’
[13:22:17.519]   - Field: ‘gc’
[13:22:17.519]   - Field: ‘conditions’
[13:22:17.519]   - Field: ‘expr’
[13:22:17.519]   - Field: ‘uuid’
[13:22:17.519]   - Field: ‘seed’
[13:22:17.519]   - Field: ‘version’
[13:22:17.519]   - Field: ‘result’
[13:22:17.519]   - Field: ‘asynchronous’
[13:22:17.519]   - Field: ‘calls’
[13:22:17.520]   - Field: ‘globals’
[13:22:17.520]   - Field: ‘stdout’
[13:22:17.520]   - Field: ‘earlySignal’
[13:22:17.520]   - Field: ‘lazy’
[13:22:17.520]   - Field: ‘state’
[13:22:17.520] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.520] - Launch lazy future ...
[13:22:17.520] Packages needed by the future expression (n = 0): <none>
[13:22:17.520] Packages needed by future strategies (n = 0): <none>
[13:22:17.521] {
[13:22:17.521]     {
[13:22:17.521]         {
[13:22:17.521]             ...future.startTime <- base::Sys.time()
[13:22:17.521]             {
[13:22:17.521]                 {
[13:22:17.521]                   {
[13:22:17.521]                     base::local({
[13:22:17.521]                       has_future <- base::requireNamespace("future", 
[13:22:17.521]                         quietly = TRUE)
[13:22:17.521]                       if (has_future) {
[13:22:17.521]                         ns <- base::getNamespace("future")
[13:22:17.521]                         version <- ns[[".package"]][["version"]]
[13:22:17.521]                         if (is.null(version)) 
[13:22:17.521]                           version <- utils::packageVersion("future")
[13:22:17.521]                       }
[13:22:17.521]                       else {
[13:22:17.521]                         version <- NULL
[13:22:17.521]                       }
[13:22:17.521]                       if (!has_future || version < "1.8.0") {
[13:22:17.521]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.521]                           "", base::R.version$version.string), 
[13:22:17.521]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.521]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.521]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.521]                             "release", "version")], collapse = " "), 
[13:22:17.521]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.521]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.521]                           info)
[13:22:17.521]                         info <- base::paste(info, collapse = "; ")
[13:22:17.521]                         if (!has_future) {
[13:22:17.521]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.521]                             info)
[13:22:17.521]                         }
[13:22:17.521]                         else {
[13:22:17.521]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.521]                             info, version)
[13:22:17.521]                         }
[13:22:17.521]                         base::stop(msg)
[13:22:17.521]                       }
[13:22:17.521]                     })
[13:22:17.521]                   }
[13:22:17.521]                   options(future.plan = NULL)
[13:22:17.521]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.521]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.521]                 }
[13:22:17.521]                 ...future.workdir <- getwd()
[13:22:17.521]             }
[13:22:17.521]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.521]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.521]         }
[13:22:17.521]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.521]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.521]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.521]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.521]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.521]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.521]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.521]             base::names(...future.oldOptions))
[13:22:17.521]     }
[13:22:17.521]     if (FALSE) {
[13:22:17.521]     }
[13:22:17.521]     else {
[13:22:17.521]         if (TRUE) {
[13:22:17.521]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.521]                 open = "w")
[13:22:17.521]         }
[13:22:17.521]         else {
[13:22:17.521]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.521]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.521]         }
[13:22:17.521]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.521]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.521]             base::sink(type = "output", split = FALSE)
[13:22:17.521]             base::close(...future.stdout)
[13:22:17.521]         }, add = TRUE)
[13:22:17.521]     }
[13:22:17.521]     ...future.frame <- base::sys.nframe()
[13:22:17.521]     ...future.conditions <- base::list()
[13:22:17.521]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.521]     if (FALSE) {
[13:22:17.521]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.521]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.521]     }
[13:22:17.521]     ...future.result <- base::tryCatch({
[13:22:17.521]         base::withCallingHandlers({
[13:22:17.521]             ...future.value <- base::withVisible(base::local({
[13:22:17.521]                 42L
[13:22:17.521]                 stop("Woops")
[13:22:17.521]             }))
[13:22:17.521]             future::FutureResult(value = ...future.value$value, 
[13:22:17.521]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.521]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.521]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.521]                     ...future.globalenv.names))
[13:22:17.521]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.521]         }, condition = base::local({
[13:22:17.521]             c <- base::c
[13:22:17.521]             inherits <- base::inherits
[13:22:17.521]             invokeRestart <- base::invokeRestart
[13:22:17.521]             length <- base::length
[13:22:17.521]             list <- base::list
[13:22:17.521]             seq.int <- base::seq.int
[13:22:17.521]             signalCondition <- base::signalCondition
[13:22:17.521]             sys.calls <- base::sys.calls
[13:22:17.521]             `[[` <- base::`[[`
[13:22:17.521]             `+` <- base::`+`
[13:22:17.521]             `<<-` <- base::`<<-`
[13:22:17.521]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.521]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.521]                   3L)]
[13:22:17.521]             }
[13:22:17.521]             function(cond) {
[13:22:17.521]                 is_error <- inherits(cond, "error")
[13:22:17.521]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.521]                   NULL)
[13:22:17.521]                 if (is_error) {
[13:22:17.521]                   sessionInformation <- function() {
[13:22:17.521]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.521]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.521]                       search = base::search(), system = base::Sys.info())
[13:22:17.521]                   }
[13:22:17.521]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.521]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.521]                     cond$call), session = sessionInformation(), 
[13:22:17.521]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.521]                   signalCondition(cond)
[13:22:17.521]                 }
[13:22:17.521]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.521]                 "immediateCondition"))) {
[13:22:17.521]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.521]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.521]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.521]                   if (TRUE && !signal) {
[13:22:17.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.521]                     {
[13:22:17.521]                       inherits <- base::inherits
[13:22:17.521]                       invokeRestart <- base::invokeRestart
[13:22:17.521]                       is.null <- base::is.null
[13:22:17.521]                       muffled <- FALSE
[13:22:17.521]                       if (inherits(cond, "message")) {
[13:22:17.521]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.521]                         if (muffled) 
[13:22:17.521]                           invokeRestart("muffleMessage")
[13:22:17.521]                       }
[13:22:17.521]                       else if (inherits(cond, "warning")) {
[13:22:17.521]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.521]                         if (muffled) 
[13:22:17.521]                           invokeRestart("muffleWarning")
[13:22:17.521]                       }
[13:22:17.521]                       else if (inherits(cond, "condition")) {
[13:22:17.521]                         if (!is.null(pattern)) {
[13:22:17.521]                           computeRestarts <- base::computeRestarts
[13:22:17.521]                           grepl <- base::grepl
[13:22:17.521]                           restarts <- computeRestarts(cond)
[13:22:17.521]                           for (restart in restarts) {
[13:22:17.521]                             name <- restart$name
[13:22:17.521]                             if (is.null(name)) 
[13:22:17.521]                               next
[13:22:17.521]                             if (!grepl(pattern, name)) 
[13:22:17.521]                               next
[13:22:17.521]                             invokeRestart(restart)
[13:22:17.521]                             muffled <- TRUE
[13:22:17.521]                             break
[13:22:17.521]                           }
[13:22:17.521]                         }
[13:22:17.521]                       }
[13:22:17.521]                       invisible(muffled)
[13:22:17.521]                     }
[13:22:17.521]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.521]                   }
[13:22:17.521]                 }
[13:22:17.521]                 else {
[13:22:17.521]                   if (TRUE) {
[13:22:17.521]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.521]                     {
[13:22:17.521]                       inherits <- base::inherits
[13:22:17.521]                       invokeRestart <- base::invokeRestart
[13:22:17.521]                       is.null <- base::is.null
[13:22:17.521]                       muffled <- FALSE
[13:22:17.521]                       if (inherits(cond, "message")) {
[13:22:17.521]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.521]                         if (muffled) 
[13:22:17.521]                           invokeRestart("muffleMessage")
[13:22:17.521]                       }
[13:22:17.521]                       else if (inherits(cond, "warning")) {
[13:22:17.521]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.521]                         if (muffled) 
[13:22:17.521]                           invokeRestart("muffleWarning")
[13:22:17.521]                       }
[13:22:17.521]                       else if (inherits(cond, "condition")) {
[13:22:17.521]                         if (!is.null(pattern)) {
[13:22:17.521]                           computeRestarts <- base::computeRestarts
[13:22:17.521]                           grepl <- base::grepl
[13:22:17.521]                           restarts <- computeRestarts(cond)
[13:22:17.521]                           for (restart in restarts) {
[13:22:17.521]                             name <- restart$name
[13:22:17.521]                             if (is.null(name)) 
[13:22:17.521]                               next
[13:22:17.521]                             if (!grepl(pattern, name)) 
[13:22:17.521]                               next
[13:22:17.521]                             invokeRestart(restart)
[13:22:17.521]                             muffled <- TRUE
[13:22:17.521]                             break
[13:22:17.521]                           }
[13:22:17.521]                         }
[13:22:17.521]                       }
[13:22:17.521]                       invisible(muffled)
[13:22:17.521]                     }
[13:22:17.521]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.521]                   }
[13:22:17.521]                 }
[13:22:17.521]             }
[13:22:17.521]         }))
[13:22:17.521]     }, error = function(ex) {
[13:22:17.521]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.521]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.521]                 ...future.rng), started = ...future.startTime, 
[13:22:17.521]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.521]             version = "1.8"), class = "FutureResult")
[13:22:17.521]     }, finally = {
[13:22:17.521]         if (!identical(...future.workdir, getwd())) 
[13:22:17.521]             setwd(...future.workdir)
[13:22:17.521]         {
[13:22:17.521]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.521]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.521]             }
[13:22:17.521]             base::options(...future.oldOptions)
[13:22:17.521]             if (.Platform$OS.type == "windows") {
[13:22:17.521]                 old_names <- names(...future.oldEnvVars)
[13:22:17.521]                 envs <- base::Sys.getenv()
[13:22:17.521]                 names <- names(envs)
[13:22:17.521]                 common <- intersect(names, old_names)
[13:22:17.521]                 added <- setdiff(names, old_names)
[13:22:17.521]                 removed <- setdiff(old_names, names)
[13:22:17.521]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.521]                   envs[common]]
[13:22:17.521]                 NAMES <- toupper(changed)
[13:22:17.521]                 args <- list()
[13:22:17.521]                 for (kk in seq_along(NAMES)) {
[13:22:17.521]                   name <- changed[[kk]]
[13:22:17.521]                   NAME <- NAMES[[kk]]
[13:22:17.521]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.521]                     next
[13:22:17.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.521]                 }
[13:22:17.521]                 NAMES <- toupper(added)
[13:22:17.521]                 for (kk in seq_along(NAMES)) {
[13:22:17.521]                   name <- added[[kk]]
[13:22:17.521]                   NAME <- NAMES[[kk]]
[13:22:17.521]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.521]                     next
[13:22:17.521]                   args[[name]] <- ""
[13:22:17.521]                 }
[13:22:17.521]                 NAMES <- toupper(removed)
[13:22:17.521]                 for (kk in seq_along(NAMES)) {
[13:22:17.521]                   name <- removed[[kk]]
[13:22:17.521]                   NAME <- NAMES[[kk]]
[13:22:17.521]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.521]                     next
[13:22:17.521]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.521]                 }
[13:22:17.521]                 if (length(args) > 0) 
[13:22:17.521]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.521]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.521]             }
[13:22:17.521]             else {
[13:22:17.521]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.521]             }
[13:22:17.521]             {
[13:22:17.521]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.521]                   0L) {
[13:22:17.521]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.521]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.521]                   base::options(opts)
[13:22:17.521]                 }
[13:22:17.521]                 {
[13:22:17.521]                   {
[13:22:17.521]                     NULL
[13:22:17.521]                     RNGkind("Mersenne-Twister")
[13:22:17.521]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.521]                       inherits = FALSE)
[13:22:17.521]                   }
[13:22:17.521]                   options(future.plan = NULL)
[13:22:17.521]                   if (is.na(NA_character_)) 
[13:22:17.521]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.521]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.521]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.521]                   {
[13:22:17.521]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.521]                     if (!future$lazy) 
[13:22:17.521]                       future <- run(future)
[13:22:17.521]                     invisible(future)
[13:22:17.521]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.521]                 }
[13:22:17.521]             }
[13:22:17.521]         }
[13:22:17.521]     })
[13:22:17.521]     if (TRUE) {
[13:22:17.521]         base::sink(type = "output", split = FALSE)
[13:22:17.521]         if (TRUE) {
[13:22:17.521]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.521]         }
[13:22:17.521]         else {
[13:22:17.521]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.521]         }
[13:22:17.521]         base::close(...future.stdout)
[13:22:17.521]         ...future.stdout <- NULL
[13:22:17.521]     }
[13:22:17.521]     ...future.result$conditions <- ...future.conditions
[13:22:17.521]     ...future.result$finished <- base::Sys.time()
[13:22:17.521]     ...future.result
[13:22:17.521] }
[13:22:17.523] plan(): Setting new future strategy stack:
[13:22:17.523] List of future strategies:
[13:22:17.523] 1. sequential:
[13:22:17.523]    - args: function (..., envir = parent.frame())
[13:22:17.523]    - tweaked: FALSE
[13:22:17.523]    - call: NULL
[13:22:17.523] plan(): nbrOfWorkers() = 1
[13:22:17.524] plan(): Setting new future strategy stack:
[13:22:17.524] List of future strategies:
[13:22:17.524] 1. sequential:
[13:22:17.524]    - args: function (..., envir = parent.frame())
[13:22:17.524]    - tweaked: FALSE
[13:22:17.524]    - call: future::plan("sequential")
[13:22:17.525] plan(): nbrOfWorkers() = 1
[13:22:17.525] SequentialFuture started (and completed)
[13:22:17.525] signalConditions() ...
[13:22:17.525]  - include = ‘immediateCondition’
[13:22:17.525]  - exclude = 
[13:22:17.525]  - resignal = FALSE
[13:22:17.526]  - Number of conditions: 1
[13:22:17.526] signalConditions() ... done
[13:22:17.526] - Launch lazy future ... done
[13:22:17.526] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[13:22:17.526] getGlobalsAndPackages() ...
[13:22:17.526] Searching for globals...
[13:22:17.527] - globals found: [2] ‘{’, ‘stop’
[13:22:17.527] Searching for globals ... DONE
[13:22:17.528] Resolving globals: FALSE
[13:22:17.528] 
[13:22:17.528] 
[13:22:17.528] getGlobalsAndPackages() ... DONE
[13:22:17.528] run() for ‘Future’ ...
[13:22:17.528] - state: ‘created’
[13:22:17.529] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.529] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.529] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.529]   - Field: ‘label’
[13:22:17.529]   - Field: ‘local’
[13:22:17.529]   - Field: ‘owner’
[13:22:17.529]   - Field: ‘envir’
[13:22:17.529]   - Field: ‘packages’
[13:22:17.531]   - Field: ‘gc’
[13:22:17.532]   - Field: ‘conditions’
[13:22:17.532]   - Field: ‘expr’
[13:22:17.532]   - Field: ‘uuid’
[13:22:17.532]   - Field: ‘seed’
[13:22:17.532]   - Field: ‘version’
[13:22:17.532]   - Field: ‘result’
[13:22:17.532]   - Field: ‘asynchronous’
[13:22:17.532]   - Field: ‘calls’
[13:22:17.532]   - Field: ‘globals’
[13:22:17.532]   - Field: ‘stdout’
[13:22:17.533]   - Field: ‘earlySignal’
[13:22:17.533]   - Field: ‘lazy’
[13:22:17.533]   - Field: ‘state’
[13:22:17.533] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.533] - Launch lazy future ...
[13:22:17.533] Packages needed by the future expression (n = 0): <none>
[13:22:17.533] Packages needed by future strategies (n = 0): <none>
[13:22:17.534] {
[13:22:17.534]     {
[13:22:17.534]         {
[13:22:17.534]             ...future.startTime <- base::Sys.time()
[13:22:17.534]             {
[13:22:17.534]                 {
[13:22:17.534]                   {
[13:22:17.534]                     base::local({
[13:22:17.534]                       has_future <- base::requireNamespace("future", 
[13:22:17.534]                         quietly = TRUE)
[13:22:17.534]                       if (has_future) {
[13:22:17.534]                         ns <- base::getNamespace("future")
[13:22:17.534]                         version <- ns[[".package"]][["version"]]
[13:22:17.534]                         if (is.null(version)) 
[13:22:17.534]                           version <- utils::packageVersion("future")
[13:22:17.534]                       }
[13:22:17.534]                       else {
[13:22:17.534]                         version <- NULL
[13:22:17.534]                       }
[13:22:17.534]                       if (!has_future || version < "1.8.0") {
[13:22:17.534]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.534]                           "", base::R.version$version.string), 
[13:22:17.534]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.534]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.534]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.534]                             "release", "version")], collapse = " "), 
[13:22:17.534]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.534]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.534]                           info)
[13:22:17.534]                         info <- base::paste(info, collapse = "; ")
[13:22:17.534]                         if (!has_future) {
[13:22:17.534]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.534]                             info)
[13:22:17.534]                         }
[13:22:17.534]                         else {
[13:22:17.534]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.534]                             info, version)
[13:22:17.534]                         }
[13:22:17.534]                         base::stop(msg)
[13:22:17.534]                       }
[13:22:17.534]                     })
[13:22:17.534]                   }
[13:22:17.534]                   options(future.plan = NULL)
[13:22:17.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.534]                 }
[13:22:17.534]                 ...future.workdir <- getwd()
[13:22:17.534]             }
[13:22:17.534]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.534]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.534]         }
[13:22:17.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.534]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.534]             base::names(...future.oldOptions))
[13:22:17.534]     }
[13:22:17.534]     if (FALSE) {
[13:22:17.534]     }
[13:22:17.534]     else {
[13:22:17.534]         if (TRUE) {
[13:22:17.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.534]                 open = "w")
[13:22:17.534]         }
[13:22:17.534]         else {
[13:22:17.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.534]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.534]         }
[13:22:17.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.534]             base::sink(type = "output", split = FALSE)
[13:22:17.534]             base::close(...future.stdout)
[13:22:17.534]         }, add = TRUE)
[13:22:17.534]     }
[13:22:17.534]     ...future.frame <- base::sys.nframe()
[13:22:17.534]     ...future.conditions <- base::list()
[13:22:17.534]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.534]     if (FALSE) {
[13:22:17.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.534]     }
[13:22:17.534]     ...future.result <- base::tryCatch({
[13:22:17.534]         base::withCallingHandlers({
[13:22:17.534]             ...future.value <- base::withVisible(base::local({
[13:22:17.534]                 42L
[13:22:17.534]                 stop("Woops")
[13:22:17.534]             }))
[13:22:17.534]             future::FutureResult(value = ...future.value$value, 
[13:22:17.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.534]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.534]                     ...future.globalenv.names))
[13:22:17.534]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.534]         }, condition = base::local({
[13:22:17.534]             c <- base::c
[13:22:17.534]             inherits <- base::inherits
[13:22:17.534]             invokeRestart <- base::invokeRestart
[13:22:17.534]             length <- base::length
[13:22:17.534]             list <- base::list
[13:22:17.534]             seq.int <- base::seq.int
[13:22:17.534]             signalCondition <- base::signalCondition
[13:22:17.534]             sys.calls <- base::sys.calls
[13:22:17.534]             `[[` <- base::`[[`
[13:22:17.534]             `+` <- base::`+`
[13:22:17.534]             `<<-` <- base::`<<-`
[13:22:17.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.534]                   3L)]
[13:22:17.534]             }
[13:22:17.534]             function(cond) {
[13:22:17.534]                 is_error <- inherits(cond, "error")
[13:22:17.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.534]                   NULL)
[13:22:17.534]                 if (is_error) {
[13:22:17.534]                   sessionInformation <- function() {
[13:22:17.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.534]                       search = base::search(), system = base::Sys.info())
[13:22:17.534]                   }
[13:22:17.534]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.534]                     cond$call), session = sessionInformation(), 
[13:22:17.534]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.534]                   signalCondition(cond)
[13:22:17.534]                 }
[13:22:17.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.534]                 "immediateCondition"))) {
[13:22:17.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.534]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.534]                   if (TRUE && !signal) {
[13:22:17.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.534]                     {
[13:22:17.534]                       inherits <- base::inherits
[13:22:17.534]                       invokeRestart <- base::invokeRestart
[13:22:17.534]                       is.null <- base::is.null
[13:22:17.534]                       muffled <- FALSE
[13:22:17.534]                       if (inherits(cond, "message")) {
[13:22:17.534]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.534]                         if (muffled) 
[13:22:17.534]                           invokeRestart("muffleMessage")
[13:22:17.534]                       }
[13:22:17.534]                       else if (inherits(cond, "warning")) {
[13:22:17.534]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.534]                         if (muffled) 
[13:22:17.534]                           invokeRestart("muffleWarning")
[13:22:17.534]                       }
[13:22:17.534]                       else if (inherits(cond, "condition")) {
[13:22:17.534]                         if (!is.null(pattern)) {
[13:22:17.534]                           computeRestarts <- base::computeRestarts
[13:22:17.534]                           grepl <- base::grepl
[13:22:17.534]                           restarts <- computeRestarts(cond)
[13:22:17.534]                           for (restart in restarts) {
[13:22:17.534]                             name <- restart$name
[13:22:17.534]                             if (is.null(name)) 
[13:22:17.534]                               next
[13:22:17.534]                             if (!grepl(pattern, name)) 
[13:22:17.534]                               next
[13:22:17.534]                             invokeRestart(restart)
[13:22:17.534]                             muffled <- TRUE
[13:22:17.534]                             break
[13:22:17.534]                           }
[13:22:17.534]                         }
[13:22:17.534]                       }
[13:22:17.534]                       invisible(muffled)
[13:22:17.534]                     }
[13:22:17.534]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.534]                   }
[13:22:17.534]                 }
[13:22:17.534]                 else {
[13:22:17.534]                   if (TRUE) {
[13:22:17.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.534]                     {
[13:22:17.534]                       inherits <- base::inherits
[13:22:17.534]                       invokeRestart <- base::invokeRestart
[13:22:17.534]                       is.null <- base::is.null
[13:22:17.534]                       muffled <- FALSE
[13:22:17.534]                       if (inherits(cond, "message")) {
[13:22:17.534]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.534]                         if (muffled) 
[13:22:17.534]                           invokeRestart("muffleMessage")
[13:22:17.534]                       }
[13:22:17.534]                       else if (inherits(cond, "warning")) {
[13:22:17.534]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.534]                         if (muffled) 
[13:22:17.534]                           invokeRestart("muffleWarning")
[13:22:17.534]                       }
[13:22:17.534]                       else if (inherits(cond, "condition")) {
[13:22:17.534]                         if (!is.null(pattern)) {
[13:22:17.534]                           computeRestarts <- base::computeRestarts
[13:22:17.534]                           grepl <- base::grepl
[13:22:17.534]                           restarts <- computeRestarts(cond)
[13:22:17.534]                           for (restart in restarts) {
[13:22:17.534]                             name <- restart$name
[13:22:17.534]                             if (is.null(name)) 
[13:22:17.534]                               next
[13:22:17.534]                             if (!grepl(pattern, name)) 
[13:22:17.534]                               next
[13:22:17.534]                             invokeRestart(restart)
[13:22:17.534]                             muffled <- TRUE
[13:22:17.534]                             break
[13:22:17.534]                           }
[13:22:17.534]                         }
[13:22:17.534]                       }
[13:22:17.534]                       invisible(muffled)
[13:22:17.534]                     }
[13:22:17.534]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.534]                   }
[13:22:17.534]                 }
[13:22:17.534]             }
[13:22:17.534]         }))
[13:22:17.534]     }, error = function(ex) {
[13:22:17.534]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.534]                 ...future.rng), started = ...future.startTime, 
[13:22:17.534]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.534]             version = "1.8"), class = "FutureResult")
[13:22:17.534]     }, finally = {
[13:22:17.534]         if (!identical(...future.workdir, getwd())) 
[13:22:17.534]             setwd(...future.workdir)
[13:22:17.534]         {
[13:22:17.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.534]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.534]             }
[13:22:17.534]             base::options(...future.oldOptions)
[13:22:17.534]             if (.Platform$OS.type == "windows") {
[13:22:17.534]                 old_names <- names(...future.oldEnvVars)
[13:22:17.534]                 envs <- base::Sys.getenv()
[13:22:17.534]                 names <- names(envs)
[13:22:17.534]                 common <- intersect(names, old_names)
[13:22:17.534]                 added <- setdiff(names, old_names)
[13:22:17.534]                 removed <- setdiff(old_names, names)
[13:22:17.534]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.534]                   envs[common]]
[13:22:17.534]                 NAMES <- toupper(changed)
[13:22:17.534]                 args <- list()
[13:22:17.534]                 for (kk in seq_along(NAMES)) {
[13:22:17.534]                   name <- changed[[kk]]
[13:22:17.534]                   NAME <- NAMES[[kk]]
[13:22:17.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.534]                     next
[13:22:17.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.534]                 }
[13:22:17.534]                 NAMES <- toupper(added)
[13:22:17.534]                 for (kk in seq_along(NAMES)) {
[13:22:17.534]                   name <- added[[kk]]
[13:22:17.534]                   NAME <- NAMES[[kk]]
[13:22:17.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.534]                     next
[13:22:17.534]                   args[[name]] <- ""
[13:22:17.534]                 }
[13:22:17.534]                 NAMES <- toupper(removed)
[13:22:17.534]                 for (kk in seq_along(NAMES)) {
[13:22:17.534]                   name <- removed[[kk]]
[13:22:17.534]                   NAME <- NAMES[[kk]]
[13:22:17.534]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.534]                     next
[13:22:17.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.534]                 }
[13:22:17.534]                 if (length(args) > 0) 
[13:22:17.534]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.534]             }
[13:22:17.534]             else {
[13:22:17.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.534]             }
[13:22:17.534]             {
[13:22:17.534]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.534]                   0L) {
[13:22:17.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.534]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.534]                   base::options(opts)
[13:22:17.534]                 }
[13:22:17.534]                 {
[13:22:17.534]                   {
[13:22:17.534]                     NULL
[13:22:17.534]                     RNGkind("Mersenne-Twister")
[13:22:17.534]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.534]                       inherits = FALSE)
[13:22:17.534]                   }
[13:22:17.534]                   options(future.plan = NULL)
[13:22:17.534]                   if (is.na(NA_character_)) 
[13:22:17.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.534]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.534]                   {
[13:22:17.534]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.534]                     if (!future$lazy) 
[13:22:17.534]                       future <- run(future)
[13:22:17.534]                     invisible(future)
[13:22:17.534]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.534]                 }
[13:22:17.534]             }
[13:22:17.534]         }
[13:22:17.534]     })
[13:22:17.534]     if (TRUE) {
[13:22:17.534]         base::sink(type = "output", split = FALSE)
[13:22:17.534]         if (TRUE) {
[13:22:17.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.534]         }
[13:22:17.534]         else {
[13:22:17.534]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.534]         }
[13:22:17.534]         base::close(...future.stdout)
[13:22:17.534]         ...future.stdout <- NULL
[13:22:17.534]     }
[13:22:17.534]     ...future.result$conditions <- ...future.conditions
[13:22:17.534]     ...future.result$finished <- base::Sys.time()
[13:22:17.534]     ...future.result
[13:22:17.534] }
[13:22:17.536] plan(): Setting new future strategy stack:
[13:22:17.536] List of future strategies:
[13:22:17.536] 1. sequential:
[13:22:17.536]    - args: function (..., envir = parent.frame())
[13:22:17.536]    - tweaked: FALSE
[13:22:17.536]    - call: NULL
[13:22:17.536] plan(): nbrOfWorkers() = 1
[13:22:17.537] plan(): Setting new future strategy stack:
[13:22:17.537] List of future strategies:
[13:22:17.537] 1. sequential:
[13:22:17.537]    - args: function (..., envir = parent.frame())
[13:22:17.537]    - tweaked: FALSE
[13:22:17.537]    - call: future::plan("sequential")
[13:22:17.538] plan(): nbrOfWorkers() = 1
[13:22:17.538] SequentialFuture started (and completed)
[13:22:17.538] signalConditions() ...
[13:22:17.538]  - include = ‘immediateCondition’
[13:22:17.538]  - exclude = 
[13:22:17.538]  - resignal = FALSE
[13:22:17.538]  - Number of conditions: 1
[13:22:17.538] signalConditions() ... done
[13:22:17.538] - Launch lazy future ... done
[13:22:17.538] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[13:22:17.539] resolved() for ‘SequentialFuture’ ...
[13:22:17.539] - state: ‘finished’
[13:22:17.539] - run: TRUE
[13:22:17.539] - result: ‘FutureResult’
[13:22:17.539] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[13:22:17.540] getGlobalsAndPackages() ...
[13:22:17.540] Searching for globals...
[13:22:17.541] - globals found: [2] ‘{’, ‘stop’
[13:22:17.541] Searching for globals ... DONE
[13:22:17.541] Resolving globals: FALSE
[13:22:17.542] 
[13:22:17.542] 
[13:22:17.542] getGlobalsAndPackages() ... DONE
[13:22:17.542] run() for ‘Future’ ...
[13:22:17.542] - state: ‘created’
[13:22:17.542] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.543] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.543] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.543]   - Field: ‘label’
[13:22:17.543]   - Field: ‘local’
[13:22:17.543]   - Field: ‘owner’
[13:22:17.543]   - Field: ‘envir’
[13:22:17.543]   - Field: ‘packages’
[13:22:17.543]   - Field: ‘gc’
[13:22:17.543]   - Field: ‘conditions’
[13:22:17.543]   - Field: ‘expr’
[13:22:17.544]   - Field: ‘uuid’
[13:22:17.544]   - Field: ‘seed’
[13:22:17.544]   - Field: ‘version’
[13:22:17.544]   - Field: ‘result’
[13:22:17.544]   - Field: ‘asynchronous’
[13:22:17.544]   - Field: ‘calls’
[13:22:17.544]   - Field: ‘globals’
[13:22:17.544]   - Field: ‘stdout’
[13:22:17.544]   - Field: ‘earlySignal’
[13:22:17.544]   - Field: ‘lazy’
[13:22:17.545]   - Field: ‘state’
[13:22:17.545] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.545] - Launch lazy future ...
[13:22:17.545] Packages needed by the future expression (n = 0): <none>
[13:22:17.545] Packages needed by future strategies (n = 0): <none>
[13:22:17.546] {
[13:22:17.546]     {
[13:22:17.546]         {
[13:22:17.546]             ...future.startTime <- base::Sys.time()
[13:22:17.546]             {
[13:22:17.546]                 {
[13:22:17.546]                   {
[13:22:17.546]                     base::local({
[13:22:17.546]                       has_future <- base::requireNamespace("future", 
[13:22:17.546]                         quietly = TRUE)
[13:22:17.546]                       if (has_future) {
[13:22:17.546]                         ns <- base::getNamespace("future")
[13:22:17.546]                         version <- ns[[".package"]][["version"]]
[13:22:17.546]                         if (is.null(version)) 
[13:22:17.546]                           version <- utils::packageVersion("future")
[13:22:17.546]                       }
[13:22:17.546]                       else {
[13:22:17.546]                         version <- NULL
[13:22:17.546]                       }
[13:22:17.546]                       if (!has_future || version < "1.8.0") {
[13:22:17.546]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.546]                           "", base::R.version$version.string), 
[13:22:17.546]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.546]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.546]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.546]                             "release", "version")], collapse = " "), 
[13:22:17.546]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.546]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.546]                           info)
[13:22:17.546]                         info <- base::paste(info, collapse = "; ")
[13:22:17.546]                         if (!has_future) {
[13:22:17.546]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.546]                             info)
[13:22:17.546]                         }
[13:22:17.546]                         else {
[13:22:17.546]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.546]                             info, version)
[13:22:17.546]                         }
[13:22:17.546]                         base::stop(msg)
[13:22:17.546]                       }
[13:22:17.546]                     })
[13:22:17.546]                   }
[13:22:17.546]                   options(future.plan = NULL)
[13:22:17.546]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.546]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.546]                 }
[13:22:17.546]                 ...future.workdir <- getwd()
[13:22:17.546]             }
[13:22:17.546]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.546]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.546]         }
[13:22:17.546]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.546]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.546]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.546]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.546]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.546]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.546]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.546]             base::names(...future.oldOptions))
[13:22:17.546]     }
[13:22:17.546]     if (FALSE) {
[13:22:17.546]     }
[13:22:17.546]     else {
[13:22:17.546]         if (TRUE) {
[13:22:17.546]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.546]                 open = "w")
[13:22:17.546]         }
[13:22:17.546]         else {
[13:22:17.546]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.546]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.546]         }
[13:22:17.546]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.546]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.546]             base::sink(type = "output", split = FALSE)
[13:22:17.546]             base::close(...future.stdout)
[13:22:17.546]         }, add = TRUE)
[13:22:17.546]     }
[13:22:17.546]     ...future.frame <- base::sys.nframe()
[13:22:17.546]     ...future.conditions <- base::list()
[13:22:17.546]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.546]     if (FALSE) {
[13:22:17.546]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.546]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.546]     }
[13:22:17.546]     ...future.result <- base::tryCatch({
[13:22:17.546]         base::withCallingHandlers({
[13:22:17.546]             ...future.value <- base::withVisible(base::local({
[13:22:17.546]                 42L
[13:22:17.546]                 stop("Woops")
[13:22:17.546]             }))
[13:22:17.546]             future::FutureResult(value = ...future.value$value, 
[13:22:17.546]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.546]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.546]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.546]                     ...future.globalenv.names))
[13:22:17.546]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.546]         }, condition = base::local({
[13:22:17.546]             c <- base::c
[13:22:17.546]             inherits <- base::inherits
[13:22:17.546]             invokeRestart <- base::invokeRestart
[13:22:17.546]             length <- base::length
[13:22:17.546]             list <- base::list
[13:22:17.546]             seq.int <- base::seq.int
[13:22:17.546]             signalCondition <- base::signalCondition
[13:22:17.546]             sys.calls <- base::sys.calls
[13:22:17.546]             `[[` <- base::`[[`
[13:22:17.546]             `+` <- base::`+`
[13:22:17.546]             `<<-` <- base::`<<-`
[13:22:17.546]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.546]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.546]                   3L)]
[13:22:17.546]             }
[13:22:17.546]             function(cond) {
[13:22:17.546]                 is_error <- inherits(cond, "error")
[13:22:17.546]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.546]                   NULL)
[13:22:17.546]                 if (is_error) {
[13:22:17.546]                   sessionInformation <- function() {
[13:22:17.546]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.546]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.546]                       search = base::search(), system = base::Sys.info())
[13:22:17.546]                   }
[13:22:17.546]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.546]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.546]                     cond$call), session = sessionInformation(), 
[13:22:17.546]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.546]                   signalCondition(cond)
[13:22:17.546]                 }
[13:22:17.546]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.546]                 "immediateCondition"))) {
[13:22:17.546]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.546]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.546]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.546]                   if (TRUE && !signal) {
[13:22:17.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.546]                     {
[13:22:17.546]                       inherits <- base::inherits
[13:22:17.546]                       invokeRestart <- base::invokeRestart
[13:22:17.546]                       is.null <- base::is.null
[13:22:17.546]                       muffled <- FALSE
[13:22:17.546]                       if (inherits(cond, "message")) {
[13:22:17.546]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.546]                         if (muffled) 
[13:22:17.546]                           invokeRestart("muffleMessage")
[13:22:17.546]                       }
[13:22:17.546]                       else if (inherits(cond, "warning")) {
[13:22:17.546]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.546]                         if (muffled) 
[13:22:17.546]                           invokeRestart("muffleWarning")
[13:22:17.546]                       }
[13:22:17.546]                       else if (inherits(cond, "condition")) {
[13:22:17.546]                         if (!is.null(pattern)) {
[13:22:17.546]                           computeRestarts <- base::computeRestarts
[13:22:17.546]                           grepl <- base::grepl
[13:22:17.546]                           restarts <- computeRestarts(cond)
[13:22:17.546]                           for (restart in restarts) {
[13:22:17.546]                             name <- restart$name
[13:22:17.546]                             if (is.null(name)) 
[13:22:17.546]                               next
[13:22:17.546]                             if (!grepl(pattern, name)) 
[13:22:17.546]                               next
[13:22:17.546]                             invokeRestart(restart)
[13:22:17.546]                             muffled <- TRUE
[13:22:17.546]                             break
[13:22:17.546]                           }
[13:22:17.546]                         }
[13:22:17.546]                       }
[13:22:17.546]                       invisible(muffled)
[13:22:17.546]                     }
[13:22:17.546]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.546]                   }
[13:22:17.546]                 }
[13:22:17.546]                 else {
[13:22:17.546]                   if (TRUE) {
[13:22:17.546]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.546]                     {
[13:22:17.546]                       inherits <- base::inherits
[13:22:17.546]                       invokeRestart <- base::invokeRestart
[13:22:17.546]                       is.null <- base::is.null
[13:22:17.546]                       muffled <- FALSE
[13:22:17.546]                       if (inherits(cond, "message")) {
[13:22:17.546]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.546]                         if (muffled) 
[13:22:17.546]                           invokeRestart("muffleMessage")
[13:22:17.546]                       }
[13:22:17.546]                       else if (inherits(cond, "warning")) {
[13:22:17.546]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.546]                         if (muffled) 
[13:22:17.546]                           invokeRestart("muffleWarning")
[13:22:17.546]                       }
[13:22:17.546]                       else if (inherits(cond, "condition")) {
[13:22:17.546]                         if (!is.null(pattern)) {
[13:22:17.546]                           computeRestarts <- base::computeRestarts
[13:22:17.546]                           grepl <- base::grepl
[13:22:17.546]                           restarts <- computeRestarts(cond)
[13:22:17.546]                           for (restart in restarts) {
[13:22:17.546]                             name <- restart$name
[13:22:17.546]                             if (is.null(name)) 
[13:22:17.546]                               next
[13:22:17.546]                             if (!grepl(pattern, name)) 
[13:22:17.546]                               next
[13:22:17.546]                             invokeRestart(restart)
[13:22:17.546]                             muffled <- TRUE
[13:22:17.546]                             break
[13:22:17.546]                           }
[13:22:17.546]                         }
[13:22:17.546]                       }
[13:22:17.546]                       invisible(muffled)
[13:22:17.546]                     }
[13:22:17.546]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.546]                   }
[13:22:17.546]                 }
[13:22:17.546]             }
[13:22:17.546]         }))
[13:22:17.546]     }, error = function(ex) {
[13:22:17.546]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.546]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.546]                 ...future.rng), started = ...future.startTime, 
[13:22:17.546]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.546]             version = "1.8"), class = "FutureResult")
[13:22:17.546]     }, finally = {
[13:22:17.546]         if (!identical(...future.workdir, getwd())) 
[13:22:17.546]             setwd(...future.workdir)
[13:22:17.546]         {
[13:22:17.546]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.546]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.546]             }
[13:22:17.546]             base::options(...future.oldOptions)
[13:22:17.546]             if (.Platform$OS.type == "windows") {
[13:22:17.546]                 old_names <- names(...future.oldEnvVars)
[13:22:17.546]                 envs <- base::Sys.getenv()
[13:22:17.546]                 names <- names(envs)
[13:22:17.546]                 common <- intersect(names, old_names)
[13:22:17.546]                 added <- setdiff(names, old_names)
[13:22:17.546]                 removed <- setdiff(old_names, names)
[13:22:17.546]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.546]                   envs[common]]
[13:22:17.546]                 NAMES <- toupper(changed)
[13:22:17.546]                 args <- list()
[13:22:17.546]                 for (kk in seq_along(NAMES)) {
[13:22:17.546]                   name <- changed[[kk]]
[13:22:17.546]                   NAME <- NAMES[[kk]]
[13:22:17.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.546]                     next
[13:22:17.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.546]                 }
[13:22:17.546]                 NAMES <- toupper(added)
[13:22:17.546]                 for (kk in seq_along(NAMES)) {
[13:22:17.546]                   name <- added[[kk]]
[13:22:17.546]                   NAME <- NAMES[[kk]]
[13:22:17.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.546]                     next
[13:22:17.546]                   args[[name]] <- ""
[13:22:17.546]                 }
[13:22:17.546]                 NAMES <- toupper(removed)
[13:22:17.546]                 for (kk in seq_along(NAMES)) {
[13:22:17.546]                   name <- removed[[kk]]
[13:22:17.546]                   NAME <- NAMES[[kk]]
[13:22:17.546]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.546]                     next
[13:22:17.546]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.546]                 }
[13:22:17.546]                 if (length(args) > 0) 
[13:22:17.546]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.546]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.546]             }
[13:22:17.546]             else {
[13:22:17.546]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.546]             }
[13:22:17.546]             {
[13:22:17.546]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.546]                   0L) {
[13:22:17.546]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.546]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.546]                   base::options(opts)
[13:22:17.546]                 }
[13:22:17.546]                 {
[13:22:17.546]                   {
[13:22:17.546]                     NULL
[13:22:17.546]                     RNGkind("Mersenne-Twister")
[13:22:17.546]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.546]                       inherits = FALSE)
[13:22:17.546]                   }
[13:22:17.546]                   options(future.plan = NULL)
[13:22:17.546]                   if (is.na(NA_character_)) 
[13:22:17.546]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.546]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.546]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.546]                   {
[13:22:17.546]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.546]                     if (!future$lazy) 
[13:22:17.546]                       future <- run(future)
[13:22:17.546]                     invisible(future)
[13:22:17.546]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.546]                 }
[13:22:17.546]             }
[13:22:17.546]         }
[13:22:17.546]     })
[13:22:17.546]     if (TRUE) {
[13:22:17.546]         base::sink(type = "output", split = FALSE)
[13:22:17.546]         if (TRUE) {
[13:22:17.546]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.546]         }
[13:22:17.546]         else {
[13:22:17.546]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.546]         }
[13:22:17.546]         base::close(...future.stdout)
[13:22:17.546]         ...future.stdout <- NULL
[13:22:17.546]     }
[13:22:17.546]     ...future.result$conditions <- ...future.conditions
[13:22:17.546]     ...future.result$finished <- base::Sys.time()
[13:22:17.546]     ...future.result
[13:22:17.546] }
[13:22:17.547] plan(): Setting new future strategy stack:
[13:22:17.548] List of future strategies:
[13:22:17.548] 1. sequential:
[13:22:17.548]    - args: function (..., envir = parent.frame())
[13:22:17.548]    - tweaked: FALSE
[13:22:17.548]    - call: NULL
[13:22:17.548] plan(): nbrOfWorkers() = 1
[13:22:17.549] plan(): Setting new future strategy stack:
[13:22:17.549] List of future strategies:
[13:22:17.549] 1. sequential:
[13:22:17.549]    - args: function (..., envir = parent.frame())
[13:22:17.549]    - tweaked: FALSE
[13:22:17.549]    - call: future::plan("sequential")
[13:22:17.549] plan(): nbrOfWorkers() = 1
[13:22:17.550] SequentialFuture started (and completed)
[13:22:17.550] signalConditions() ...
[13:22:17.550]  - include = ‘immediateCondition’
[13:22:17.550]  - exclude = 
[13:22:17.550]  - resignal = FALSE
[13:22:17.550]  - Number of conditions: 1
[13:22:17.550] signalConditions() ... done
[13:22:17.550] - Launch lazy future ... done
[13:22:17.550] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[13:22:17.551] getGlobalsAndPackages() ...
[13:22:17.551] Searching for globals...
[13:22:17.552] - globals found: [2] ‘{’, ‘stop’
[13:22:17.552] Searching for globals ... DONE
[13:22:17.552] Resolving globals: FALSE
[13:22:17.552] 
[13:22:17.552] 
[13:22:17.552] getGlobalsAndPackages() ... DONE
[13:22:17.553] run() for ‘Future’ ...
[13:22:17.553] - state: ‘created’
[13:22:17.553] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.553] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.553] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.553]   - Field: ‘label’
[13:22:17.554]   - Field: ‘local’
[13:22:17.554]   - Field: ‘owner’
[13:22:17.554]   - Field: ‘envir’
[13:22:17.554]   - Field: ‘packages’
[13:22:17.554]   - Field: ‘gc’
[13:22:17.554]   - Field: ‘conditions’
[13:22:17.554]   - Field: ‘expr’
[13:22:17.554]   - Field: ‘uuid’
[13:22:17.554]   - Field: ‘seed’
[13:22:17.554]   - Field: ‘version’
[13:22:17.555]   - Field: ‘result’
[13:22:17.555]   - Field: ‘asynchronous’
[13:22:17.555]   - Field: ‘calls’
[13:22:17.555]   - Field: ‘globals’
[13:22:17.555]   - Field: ‘stdout’
[13:22:17.555]   - Field: ‘earlySignal’
[13:22:17.555]   - Field: ‘lazy’
[13:22:17.555]   - Field: ‘state’
[13:22:17.555] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.555] - Launch lazy future ...
[13:22:17.556] Packages needed by the future expression (n = 0): <none>
[13:22:17.556] Packages needed by future strategies (n = 0): <none>
[13:22:17.556] {
[13:22:17.556]     {
[13:22:17.556]         {
[13:22:17.556]             ...future.startTime <- base::Sys.time()
[13:22:17.556]             {
[13:22:17.556]                 {
[13:22:17.556]                   {
[13:22:17.556]                     base::local({
[13:22:17.556]                       has_future <- base::requireNamespace("future", 
[13:22:17.556]                         quietly = TRUE)
[13:22:17.556]                       if (has_future) {
[13:22:17.556]                         ns <- base::getNamespace("future")
[13:22:17.556]                         version <- ns[[".package"]][["version"]]
[13:22:17.556]                         if (is.null(version)) 
[13:22:17.556]                           version <- utils::packageVersion("future")
[13:22:17.556]                       }
[13:22:17.556]                       else {
[13:22:17.556]                         version <- NULL
[13:22:17.556]                       }
[13:22:17.556]                       if (!has_future || version < "1.8.0") {
[13:22:17.556]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.556]                           "", base::R.version$version.string), 
[13:22:17.556]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.556]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.556]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.556]                             "release", "version")], collapse = " "), 
[13:22:17.556]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.556]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.556]                           info)
[13:22:17.556]                         info <- base::paste(info, collapse = "; ")
[13:22:17.556]                         if (!has_future) {
[13:22:17.556]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.556]                             info)
[13:22:17.556]                         }
[13:22:17.556]                         else {
[13:22:17.556]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.556]                             info, version)
[13:22:17.556]                         }
[13:22:17.556]                         base::stop(msg)
[13:22:17.556]                       }
[13:22:17.556]                     })
[13:22:17.556]                   }
[13:22:17.556]                   options(future.plan = NULL)
[13:22:17.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.556]                 }
[13:22:17.556]                 ...future.workdir <- getwd()
[13:22:17.556]             }
[13:22:17.556]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.556]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.556]         }
[13:22:17.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.556]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.556]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.556]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.556]             base::names(...future.oldOptions))
[13:22:17.556]     }
[13:22:17.556]     if (FALSE) {
[13:22:17.556]     }
[13:22:17.556]     else {
[13:22:17.556]         if (TRUE) {
[13:22:17.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.556]                 open = "w")
[13:22:17.556]         }
[13:22:17.556]         else {
[13:22:17.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.556]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.556]         }
[13:22:17.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.556]             base::sink(type = "output", split = FALSE)
[13:22:17.556]             base::close(...future.stdout)
[13:22:17.556]         }, add = TRUE)
[13:22:17.556]     }
[13:22:17.556]     ...future.frame <- base::sys.nframe()
[13:22:17.556]     ...future.conditions <- base::list()
[13:22:17.556]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.556]     if (FALSE) {
[13:22:17.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.556]     }
[13:22:17.556]     ...future.result <- base::tryCatch({
[13:22:17.556]         base::withCallingHandlers({
[13:22:17.556]             ...future.value <- base::withVisible(base::local({
[13:22:17.556]                 42L
[13:22:17.556]                 stop("Woops")
[13:22:17.556]             }))
[13:22:17.556]             future::FutureResult(value = ...future.value$value, 
[13:22:17.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.556]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.556]                     ...future.globalenv.names))
[13:22:17.556]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.556]         }, condition = base::local({
[13:22:17.556]             c <- base::c
[13:22:17.556]             inherits <- base::inherits
[13:22:17.556]             invokeRestart <- base::invokeRestart
[13:22:17.556]             length <- base::length
[13:22:17.556]             list <- base::list
[13:22:17.556]             seq.int <- base::seq.int
[13:22:17.556]             signalCondition <- base::signalCondition
[13:22:17.556]             sys.calls <- base::sys.calls
[13:22:17.556]             `[[` <- base::`[[`
[13:22:17.556]             `+` <- base::`+`
[13:22:17.556]             `<<-` <- base::`<<-`
[13:22:17.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.556]                   3L)]
[13:22:17.556]             }
[13:22:17.556]             function(cond) {
[13:22:17.556]                 is_error <- inherits(cond, "error")
[13:22:17.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.556]                   NULL)
[13:22:17.556]                 if (is_error) {
[13:22:17.556]                   sessionInformation <- function() {
[13:22:17.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.556]                       search = base::search(), system = base::Sys.info())
[13:22:17.556]                   }
[13:22:17.556]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.556]                     cond$call), session = sessionInformation(), 
[13:22:17.556]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.556]                   signalCondition(cond)
[13:22:17.556]                 }
[13:22:17.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.556]                 "immediateCondition"))) {
[13:22:17.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.556]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.556]                   if (TRUE && !signal) {
[13:22:17.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.556]                     {
[13:22:17.556]                       inherits <- base::inherits
[13:22:17.556]                       invokeRestart <- base::invokeRestart
[13:22:17.556]                       is.null <- base::is.null
[13:22:17.556]                       muffled <- FALSE
[13:22:17.556]                       if (inherits(cond, "message")) {
[13:22:17.556]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.556]                         if (muffled) 
[13:22:17.556]                           invokeRestart("muffleMessage")
[13:22:17.556]                       }
[13:22:17.556]                       else if (inherits(cond, "warning")) {
[13:22:17.556]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.556]                         if (muffled) 
[13:22:17.556]                           invokeRestart("muffleWarning")
[13:22:17.556]                       }
[13:22:17.556]                       else if (inherits(cond, "condition")) {
[13:22:17.556]                         if (!is.null(pattern)) {
[13:22:17.556]                           computeRestarts <- base::computeRestarts
[13:22:17.556]                           grepl <- base::grepl
[13:22:17.556]                           restarts <- computeRestarts(cond)
[13:22:17.556]                           for (restart in restarts) {
[13:22:17.556]                             name <- restart$name
[13:22:17.556]                             if (is.null(name)) 
[13:22:17.556]                               next
[13:22:17.556]                             if (!grepl(pattern, name)) 
[13:22:17.556]                               next
[13:22:17.556]                             invokeRestart(restart)
[13:22:17.556]                             muffled <- TRUE
[13:22:17.556]                             break
[13:22:17.556]                           }
[13:22:17.556]                         }
[13:22:17.556]                       }
[13:22:17.556]                       invisible(muffled)
[13:22:17.556]                     }
[13:22:17.556]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.556]                   }
[13:22:17.556]                 }
[13:22:17.556]                 else {
[13:22:17.556]                   if (TRUE) {
[13:22:17.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.556]                     {
[13:22:17.556]                       inherits <- base::inherits
[13:22:17.556]                       invokeRestart <- base::invokeRestart
[13:22:17.556]                       is.null <- base::is.null
[13:22:17.556]                       muffled <- FALSE
[13:22:17.556]                       if (inherits(cond, "message")) {
[13:22:17.556]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.556]                         if (muffled) 
[13:22:17.556]                           invokeRestart("muffleMessage")
[13:22:17.556]                       }
[13:22:17.556]                       else if (inherits(cond, "warning")) {
[13:22:17.556]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.556]                         if (muffled) 
[13:22:17.556]                           invokeRestart("muffleWarning")
[13:22:17.556]                       }
[13:22:17.556]                       else if (inherits(cond, "condition")) {
[13:22:17.556]                         if (!is.null(pattern)) {
[13:22:17.556]                           computeRestarts <- base::computeRestarts
[13:22:17.556]                           grepl <- base::grepl
[13:22:17.556]                           restarts <- computeRestarts(cond)
[13:22:17.556]                           for (restart in restarts) {
[13:22:17.556]                             name <- restart$name
[13:22:17.556]                             if (is.null(name)) 
[13:22:17.556]                               next
[13:22:17.556]                             if (!grepl(pattern, name)) 
[13:22:17.556]                               next
[13:22:17.556]                             invokeRestart(restart)
[13:22:17.556]                             muffled <- TRUE
[13:22:17.556]                             break
[13:22:17.556]                           }
[13:22:17.556]                         }
[13:22:17.556]                       }
[13:22:17.556]                       invisible(muffled)
[13:22:17.556]                     }
[13:22:17.556]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.556]                   }
[13:22:17.556]                 }
[13:22:17.556]             }
[13:22:17.556]         }))
[13:22:17.556]     }, error = function(ex) {
[13:22:17.556]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.556]                 ...future.rng), started = ...future.startTime, 
[13:22:17.556]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.556]             version = "1.8"), class = "FutureResult")
[13:22:17.556]     }, finally = {
[13:22:17.556]         if (!identical(...future.workdir, getwd())) 
[13:22:17.556]             setwd(...future.workdir)
[13:22:17.556]         {
[13:22:17.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.556]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.556]             }
[13:22:17.556]             base::options(...future.oldOptions)
[13:22:17.556]             if (.Platform$OS.type == "windows") {
[13:22:17.556]                 old_names <- names(...future.oldEnvVars)
[13:22:17.556]                 envs <- base::Sys.getenv()
[13:22:17.556]                 names <- names(envs)
[13:22:17.556]                 common <- intersect(names, old_names)
[13:22:17.556]                 added <- setdiff(names, old_names)
[13:22:17.556]                 removed <- setdiff(old_names, names)
[13:22:17.556]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.556]                   envs[common]]
[13:22:17.556]                 NAMES <- toupper(changed)
[13:22:17.556]                 args <- list()
[13:22:17.556]                 for (kk in seq_along(NAMES)) {
[13:22:17.556]                   name <- changed[[kk]]
[13:22:17.556]                   NAME <- NAMES[[kk]]
[13:22:17.556]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.556]                     next
[13:22:17.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.556]                 }
[13:22:17.556]                 NAMES <- toupper(added)
[13:22:17.556]                 for (kk in seq_along(NAMES)) {
[13:22:17.556]                   name <- added[[kk]]
[13:22:17.556]                   NAME <- NAMES[[kk]]
[13:22:17.556]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.556]                     next
[13:22:17.556]                   args[[name]] <- ""
[13:22:17.556]                 }
[13:22:17.556]                 NAMES <- toupper(removed)
[13:22:17.556]                 for (kk in seq_along(NAMES)) {
[13:22:17.556]                   name <- removed[[kk]]
[13:22:17.556]                   NAME <- NAMES[[kk]]
[13:22:17.556]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.556]                     next
[13:22:17.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.556]                 }
[13:22:17.556]                 if (length(args) > 0) 
[13:22:17.556]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.556]             }
[13:22:17.556]             else {
[13:22:17.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.556]             }
[13:22:17.556]             {
[13:22:17.556]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.556]                   0L) {
[13:22:17.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.556]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.556]                   base::options(opts)
[13:22:17.556]                 }
[13:22:17.556]                 {
[13:22:17.556]                   {
[13:22:17.556]                     NULL
[13:22:17.556]                     RNGkind("Mersenne-Twister")
[13:22:17.556]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.556]                       inherits = FALSE)
[13:22:17.556]                   }
[13:22:17.556]                   options(future.plan = NULL)
[13:22:17.556]                   if (is.na(NA_character_)) 
[13:22:17.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.556]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.556]                   {
[13:22:17.556]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.556]                     if (!future$lazy) 
[13:22:17.556]                       future <- run(future)
[13:22:17.556]                     invisible(future)
[13:22:17.556]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.556]                 }
[13:22:17.556]             }
[13:22:17.556]         }
[13:22:17.556]     })
[13:22:17.556]     if (TRUE) {
[13:22:17.556]         base::sink(type = "output", split = FALSE)
[13:22:17.556]         if (TRUE) {
[13:22:17.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.556]         }
[13:22:17.556]         else {
[13:22:17.556]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.556]         }
[13:22:17.556]         base::close(...future.stdout)
[13:22:17.556]         ...future.stdout <- NULL
[13:22:17.556]     }
[13:22:17.556]     ...future.result$conditions <- ...future.conditions
[13:22:17.556]     ...future.result$finished <- base::Sys.time()
[13:22:17.556]     ...future.result
[13:22:17.556] }
[13:22:17.558] plan(): Setting new future strategy stack:
[13:22:17.558] List of future strategies:
[13:22:17.558] 1. sequential:
[13:22:17.558]    - args: function (..., envir = parent.frame())
[13:22:17.558]    - tweaked: FALSE
[13:22:17.558]    - call: NULL
[13:22:17.559] plan(): nbrOfWorkers() = 1
[13:22:17.560] plan(): Setting new future strategy stack:
[13:22:17.560] List of future strategies:
[13:22:17.560] 1. sequential:
[13:22:17.560]    - args: function (..., envir = parent.frame())
[13:22:17.560]    - tweaked: FALSE
[13:22:17.560]    - call: future::plan("sequential")
[13:22:17.560] plan(): nbrOfWorkers() = 1
[13:22:17.560] SequentialFuture started (and completed)
[13:22:17.560] signalConditions() ...
[13:22:17.560]  - include = ‘immediateCondition’
[13:22:17.561]  - exclude = 
[13:22:17.561]  - resignal = FALSE
[13:22:17.561]  - Number of conditions: 1
[13:22:17.561] signalConditions() ... done
[13:22:17.561] - Launch lazy future ... done
[13:22:17.561] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[13:22:17.562] resolve() on list ...
[13:22:17.562]  recursive: 0
[13:22:17.562]  length: 2
[13:22:17.562] 
[13:22:17.562] resolved() for ‘SequentialFuture’ ...
[13:22:17.562] - state: ‘finished’
[13:22:17.562] - run: TRUE
[13:22:17.562] - result: ‘FutureResult’
[13:22:17.563] resolved() for ‘SequentialFuture’ ... done
[13:22:17.563] Future #1
[13:22:17.563] signalConditions() ...
[13:22:17.563]  - include = ‘immediateCondition’
[13:22:17.563]  - exclude = 
[13:22:17.563]  - resignal = FALSE
[13:22:17.563]  - Number of conditions: 1
[13:22:17.563] signalConditions() ... done
[13:22:17.563] signalConditionsASAP(SequentialFuture, pos=1) ...
[13:22:17.563] - nx: 2
[13:22:17.563] - relay: TRUE
[13:22:17.564] - stdout: TRUE
[13:22:17.564] - signal: FALSE
[13:22:17.564] - resignal: FALSE
[13:22:17.564] - force: TRUE
[13:22:17.564] - relayed: [n=2] FALSE, FALSE
[13:22:17.564] - queued futures: [n=2] FALSE, FALSE
[13:22:17.564]  - until=1
[13:22:17.564]  - relaying element #1
[13:22:17.564] signalConditions() ...
[13:22:17.564]  - include = ‘immediateCondition’
[13:22:17.565]  - exclude = 
[13:22:17.565]  - resignal = FALSE
[13:22:17.565]  - Number of conditions: 1
[13:22:17.565] signalConditions() ... done
[13:22:17.565] - relayed: [n=2] TRUE, FALSE
[13:22:17.565] - queued futures: [n=2] TRUE, FALSE
[13:22:17.565] signalConditionsASAP(SequentialFuture, pos=1) ... done
[13:22:17.565]  length: 1 (resolved future 1)
[13:22:17.565] resolved() for ‘SequentialFuture’ ...
[13:22:17.566] - state: ‘finished’
[13:22:17.566] - run: TRUE
[13:22:17.568] - result: ‘FutureResult’
[13:22:17.568] resolved() for ‘SequentialFuture’ ... done
[13:22:17.568] Future #2
[13:22:17.568] signalConditions() ...
[13:22:17.568]  - include = ‘immediateCondition’
[13:22:17.568]  - exclude = 
[13:22:17.568]  - resignal = FALSE
[13:22:17.568]  - Number of conditions: 1
[13:22:17.569] signalConditions() ... done
[13:22:17.569] signalConditionsASAP(SequentialFuture, pos=2) ...
[13:22:17.569] - nx: 2
[13:22:17.569] - relay: TRUE
[13:22:17.569] - stdout: TRUE
[13:22:17.569] - signal: FALSE
[13:22:17.569] - resignal: FALSE
[13:22:17.569] - force: TRUE
[13:22:17.569] - relayed: [n=2] TRUE, FALSE
[13:22:17.569] - queued futures: [n=2] TRUE, FALSE
[13:22:17.570]  - until=2
[13:22:17.570]  - relaying element #2
[13:22:17.570] signalConditions() ...
[13:22:17.570]  - include = ‘immediateCondition’
[13:22:17.570]  - exclude = 
[13:22:17.570]  - resignal = FALSE
[13:22:17.570]  - Number of conditions: 1
[13:22:17.570] signalConditions() ... done
[13:22:17.570] - relayed: [n=2] TRUE, TRUE
[13:22:17.570] - queued futures: [n=2] TRUE, TRUE
[13:22:17.571] signalConditionsASAP(SequentialFuture, pos=2) ... done
[13:22:17.571]  length: 0 (resolved future 2)
[13:22:17.571] Relaying remaining futures
[13:22:17.571] signalConditionsASAP(NULL, pos=0) ...
[13:22:17.571] - nx: 2
[13:22:17.571] - relay: TRUE
[13:22:17.571] - stdout: TRUE
[13:22:17.571] - signal: FALSE
[13:22:17.571] - resignal: FALSE
[13:22:17.571] - force: TRUE
[13:22:17.571] - relayed: [n=2] TRUE, TRUE
[13:22:17.571] - queued futures: [n=2] TRUE, TRUE
 - flush all
[13:22:17.572] - relayed: [n=2] TRUE, TRUE
[13:22:17.572] - queued futures: [n=2] TRUE, TRUE
[13:22:17.572] signalConditionsASAP(NULL, pos=0) ... done
[13:22:17.572] resolve() on list ... DONE
[13:22:17.572] signalConditions() ...
[13:22:17.572]  - include = ‘immediateCondition’
[13:22:17.572]  - exclude = 
[13:22:17.572]  - resignal = FALSE
[13:22:17.572]  - Number of conditions: 1
[13:22:17.573] signalConditions() ... done
[13:22:17.573] signalConditions() ...
[13:22:17.573]  - include = ‘immediateCondition’
[13:22:17.573]  - exclude = 
[13:22:17.573]  - resignal = FALSE
[13:22:17.573]  - Number of conditions: 1
[13:22:17.573] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[13:22:17.574] resolved() for ‘SequentialFuture’ ...
[13:22:17.574] - state: ‘finished’
[13:22:17.574] - run: TRUE
[13:22:17.574] - result: ‘FutureResult’
[13:22:17.574] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[13:22:17.575] getGlobalsAndPackages() ...
[13:22:17.575] Searching for globals...
[13:22:17.575] 
[13:22:17.575] Searching for globals ... DONE
[13:22:17.575] - globals: [0] <none>
[13:22:17.575] getGlobalsAndPackages() ... DONE
[13:22:17.576] run() for ‘Future’ ...
[13:22:17.576] - state: ‘created’
[13:22:17.576] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.576] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.576] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.576]   - Field: ‘label’
[13:22:17.577]   - Field: ‘local’
[13:22:17.577]   - Field: ‘owner’
[13:22:17.577]   - Field: ‘envir’
[13:22:17.577]   - Field: ‘packages’
[13:22:17.577]   - Field: ‘gc’
[13:22:17.577]   - Field: ‘conditions’
[13:22:17.577]   - Field: ‘expr’
[13:22:17.577]   - Field: ‘uuid’
[13:22:17.577]   - Field: ‘seed’
[13:22:17.577]   - Field: ‘version’
[13:22:17.577]   - Field: ‘result’
[13:22:17.578]   - Field: ‘asynchronous’
[13:22:17.578]   - Field: ‘calls’
[13:22:17.578]   - Field: ‘globals’
[13:22:17.578]   - Field: ‘stdout’
[13:22:17.578]   - Field: ‘earlySignal’
[13:22:17.578]   - Field: ‘lazy’
[13:22:17.578]   - Field: ‘state’
[13:22:17.578] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.578] - Launch lazy future ...
[13:22:17.579] Packages needed by the future expression (n = 0): <none>
[13:22:17.579] Packages needed by future strategies (n = 0): <none>
[13:22:17.579] {
[13:22:17.579]     {
[13:22:17.579]         {
[13:22:17.579]             ...future.startTime <- base::Sys.time()
[13:22:17.579]             {
[13:22:17.579]                 {
[13:22:17.579]                   {
[13:22:17.579]                     base::local({
[13:22:17.579]                       has_future <- base::requireNamespace("future", 
[13:22:17.579]                         quietly = TRUE)
[13:22:17.579]                       if (has_future) {
[13:22:17.579]                         ns <- base::getNamespace("future")
[13:22:17.579]                         version <- ns[[".package"]][["version"]]
[13:22:17.579]                         if (is.null(version)) 
[13:22:17.579]                           version <- utils::packageVersion("future")
[13:22:17.579]                       }
[13:22:17.579]                       else {
[13:22:17.579]                         version <- NULL
[13:22:17.579]                       }
[13:22:17.579]                       if (!has_future || version < "1.8.0") {
[13:22:17.579]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.579]                           "", base::R.version$version.string), 
[13:22:17.579]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.579]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.579]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.579]                             "release", "version")], collapse = " "), 
[13:22:17.579]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.579]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.579]                           info)
[13:22:17.579]                         info <- base::paste(info, collapse = "; ")
[13:22:17.579]                         if (!has_future) {
[13:22:17.579]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.579]                             info)
[13:22:17.579]                         }
[13:22:17.579]                         else {
[13:22:17.579]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.579]                             info, version)
[13:22:17.579]                         }
[13:22:17.579]                         base::stop(msg)
[13:22:17.579]                       }
[13:22:17.579]                     })
[13:22:17.579]                   }
[13:22:17.579]                   options(future.plan = NULL)
[13:22:17.579]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.579]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.579]                 }
[13:22:17.579]                 ...future.workdir <- getwd()
[13:22:17.579]             }
[13:22:17.579]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.579]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.579]         }
[13:22:17.579]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.579]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.579]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.579]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.579]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.579]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.579]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.579]             base::names(...future.oldOptions))
[13:22:17.579]     }
[13:22:17.579]     if (FALSE) {
[13:22:17.579]     }
[13:22:17.579]     else {
[13:22:17.579]         if (TRUE) {
[13:22:17.579]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.579]                 open = "w")
[13:22:17.579]         }
[13:22:17.579]         else {
[13:22:17.579]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.579]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.579]         }
[13:22:17.579]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.579]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.579]             base::sink(type = "output", split = FALSE)
[13:22:17.579]             base::close(...future.stdout)
[13:22:17.579]         }, add = TRUE)
[13:22:17.579]     }
[13:22:17.579]     ...future.frame <- base::sys.nframe()
[13:22:17.579]     ...future.conditions <- base::list()
[13:22:17.579]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.579]     if (FALSE) {
[13:22:17.579]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.579]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.579]     }
[13:22:17.579]     ...future.result <- base::tryCatch({
[13:22:17.579]         base::withCallingHandlers({
[13:22:17.579]             ...future.value <- base::withVisible(base::local(42L))
[13:22:17.579]             future::FutureResult(value = ...future.value$value, 
[13:22:17.579]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.579]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.579]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.579]                     ...future.globalenv.names))
[13:22:17.579]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.579]         }, condition = base::local({
[13:22:17.579]             c <- base::c
[13:22:17.579]             inherits <- base::inherits
[13:22:17.579]             invokeRestart <- base::invokeRestart
[13:22:17.579]             length <- base::length
[13:22:17.579]             list <- base::list
[13:22:17.579]             seq.int <- base::seq.int
[13:22:17.579]             signalCondition <- base::signalCondition
[13:22:17.579]             sys.calls <- base::sys.calls
[13:22:17.579]             `[[` <- base::`[[`
[13:22:17.579]             `+` <- base::`+`
[13:22:17.579]             `<<-` <- base::`<<-`
[13:22:17.579]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.579]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.579]                   3L)]
[13:22:17.579]             }
[13:22:17.579]             function(cond) {
[13:22:17.579]                 is_error <- inherits(cond, "error")
[13:22:17.579]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.579]                   NULL)
[13:22:17.579]                 if (is_error) {
[13:22:17.579]                   sessionInformation <- function() {
[13:22:17.579]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.579]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.579]                       search = base::search(), system = base::Sys.info())
[13:22:17.579]                   }
[13:22:17.579]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.579]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.579]                     cond$call), session = sessionInformation(), 
[13:22:17.579]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.579]                   signalCondition(cond)
[13:22:17.579]                 }
[13:22:17.579]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.579]                 "immediateCondition"))) {
[13:22:17.579]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.579]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.579]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.579]                   if (TRUE && !signal) {
[13:22:17.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.579]                     {
[13:22:17.579]                       inherits <- base::inherits
[13:22:17.579]                       invokeRestart <- base::invokeRestart
[13:22:17.579]                       is.null <- base::is.null
[13:22:17.579]                       muffled <- FALSE
[13:22:17.579]                       if (inherits(cond, "message")) {
[13:22:17.579]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.579]                         if (muffled) 
[13:22:17.579]                           invokeRestart("muffleMessage")
[13:22:17.579]                       }
[13:22:17.579]                       else if (inherits(cond, "warning")) {
[13:22:17.579]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.579]                         if (muffled) 
[13:22:17.579]                           invokeRestart("muffleWarning")
[13:22:17.579]                       }
[13:22:17.579]                       else if (inherits(cond, "condition")) {
[13:22:17.579]                         if (!is.null(pattern)) {
[13:22:17.579]                           computeRestarts <- base::computeRestarts
[13:22:17.579]                           grepl <- base::grepl
[13:22:17.579]                           restarts <- computeRestarts(cond)
[13:22:17.579]                           for (restart in restarts) {
[13:22:17.579]                             name <- restart$name
[13:22:17.579]                             if (is.null(name)) 
[13:22:17.579]                               next
[13:22:17.579]                             if (!grepl(pattern, name)) 
[13:22:17.579]                               next
[13:22:17.579]                             invokeRestart(restart)
[13:22:17.579]                             muffled <- TRUE
[13:22:17.579]                             break
[13:22:17.579]                           }
[13:22:17.579]                         }
[13:22:17.579]                       }
[13:22:17.579]                       invisible(muffled)
[13:22:17.579]                     }
[13:22:17.579]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.579]                   }
[13:22:17.579]                 }
[13:22:17.579]                 else {
[13:22:17.579]                   if (TRUE) {
[13:22:17.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.579]                     {
[13:22:17.579]                       inherits <- base::inherits
[13:22:17.579]                       invokeRestart <- base::invokeRestart
[13:22:17.579]                       is.null <- base::is.null
[13:22:17.579]                       muffled <- FALSE
[13:22:17.579]                       if (inherits(cond, "message")) {
[13:22:17.579]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.579]                         if (muffled) 
[13:22:17.579]                           invokeRestart("muffleMessage")
[13:22:17.579]                       }
[13:22:17.579]                       else if (inherits(cond, "warning")) {
[13:22:17.579]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.579]                         if (muffled) 
[13:22:17.579]                           invokeRestart("muffleWarning")
[13:22:17.579]                       }
[13:22:17.579]                       else if (inherits(cond, "condition")) {
[13:22:17.579]                         if (!is.null(pattern)) {
[13:22:17.579]                           computeRestarts <- base::computeRestarts
[13:22:17.579]                           grepl <- base::grepl
[13:22:17.579]                           restarts <- computeRestarts(cond)
[13:22:17.579]                           for (restart in restarts) {
[13:22:17.579]                             name <- restart$name
[13:22:17.579]                             if (is.null(name)) 
[13:22:17.579]                               next
[13:22:17.579]                             if (!grepl(pattern, name)) 
[13:22:17.579]                               next
[13:22:17.579]                             invokeRestart(restart)
[13:22:17.579]                             muffled <- TRUE
[13:22:17.579]                             break
[13:22:17.579]                           }
[13:22:17.579]                         }
[13:22:17.579]                       }
[13:22:17.579]                       invisible(muffled)
[13:22:17.579]                     }
[13:22:17.579]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.579]                   }
[13:22:17.579]                 }
[13:22:17.579]             }
[13:22:17.579]         }))
[13:22:17.579]     }, error = function(ex) {
[13:22:17.579]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.579]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.579]                 ...future.rng), started = ...future.startTime, 
[13:22:17.579]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.579]             version = "1.8"), class = "FutureResult")
[13:22:17.579]     }, finally = {
[13:22:17.579]         if (!identical(...future.workdir, getwd())) 
[13:22:17.579]             setwd(...future.workdir)
[13:22:17.579]         {
[13:22:17.579]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.579]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.579]             }
[13:22:17.579]             base::options(...future.oldOptions)
[13:22:17.579]             if (.Platform$OS.type == "windows") {
[13:22:17.579]                 old_names <- names(...future.oldEnvVars)
[13:22:17.579]                 envs <- base::Sys.getenv()
[13:22:17.579]                 names <- names(envs)
[13:22:17.579]                 common <- intersect(names, old_names)
[13:22:17.579]                 added <- setdiff(names, old_names)
[13:22:17.579]                 removed <- setdiff(old_names, names)
[13:22:17.579]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.579]                   envs[common]]
[13:22:17.579]                 NAMES <- toupper(changed)
[13:22:17.579]                 args <- list()
[13:22:17.579]                 for (kk in seq_along(NAMES)) {
[13:22:17.579]                   name <- changed[[kk]]
[13:22:17.579]                   NAME <- NAMES[[kk]]
[13:22:17.579]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.579]                     next
[13:22:17.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.579]                 }
[13:22:17.579]                 NAMES <- toupper(added)
[13:22:17.579]                 for (kk in seq_along(NAMES)) {
[13:22:17.579]                   name <- added[[kk]]
[13:22:17.579]                   NAME <- NAMES[[kk]]
[13:22:17.579]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.579]                     next
[13:22:17.579]                   args[[name]] <- ""
[13:22:17.579]                 }
[13:22:17.579]                 NAMES <- toupper(removed)
[13:22:17.579]                 for (kk in seq_along(NAMES)) {
[13:22:17.579]                   name <- removed[[kk]]
[13:22:17.579]                   NAME <- NAMES[[kk]]
[13:22:17.579]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.579]                     next
[13:22:17.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.579]                 }
[13:22:17.579]                 if (length(args) > 0) 
[13:22:17.579]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.579]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.579]             }
[13:22:17.579]             else {
[13:22:17.579]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.579]             }
[13:22:17.579]             {
[13:22:17.579]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.579]                   0L) {
[13:22:17.579]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.579]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.579]                   base::options(opts)
[13:22:17.579]                 }
[13:22:17.579]                 {
[13:22:17.579]                   {
[13:22:17.579]                     NULL
[13:22:17.579]                     RNGkind("Mersenne-Twister")
[13:22:17.579]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.579]                       inherits = FALSE)
[13:22:17.579]                   }
[13:22:17.579]                   options(future.plan = NULL)
[13:22:17.579]                   if (is.na(NA_character_)) 
[13:22:17.579]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.579]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.579]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.579]                   {
[13:22:17.579]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.579]                     if (!future$lazy) 
[13:22:17.579]                       future <- run(future)
[13:22:17.579]                     invisible(future)
[13:22:17.579]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.579]                 }
[13:22:17.579]             }
[13:22:17.579]         }
[13:22:17.579]     })
[13:22:17.579]     if (TRUE) {
[13:22:17.579]         base::sink(type = "output", split = FALSE)
[13:22:17.579]         if (TRUE) {
[13:22:17.579]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.579]         }
[13:22:17.579]         else {
[13:22:17.579]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.579]         }
[13:22:17.579]         base::close(...future.stdout)
[13:22:17.579]         ...future.stdout <- NULL
[13:22:17.579]     }
[13:22:17.579]     ...future.result$conditions <- ...future.conditions
[13:22:17.579]     ...future.result$finished <- base::Sys.time()
[13:22:17.579]     ...future.result
[13:22:17.579] }
[13:22:17.581] plan(): Setting new future strategy stack:
[13:22:17.581] List of future strategies:
[13:22:17.581] 1. sequential:
[13:22:17.581]    - args: function (..., envir = parent.frame())
[13:22:17.581]    - tweaked: FALSE
[13:22:17.581]    - call: NULL
[13:22:17.582] plan(): nbrOfWorkers() = 1
[13:22:17.583] plan(): Setting new future strategy stack:
[13:22:17.583] List of future strategies:
[13:22:17.583] 1. sequential:
[13:22:17.583]    - args: function (..., envir = parent.frame())
[13:22:17.583]    - tweaked: FALSE
[13:22:17.583]    - call: future::plan("sequential")
[13:22:17.583] plan(): nbrOfWorkers() = 1
[13:22:17.583] SequentialFuture started (and completed)
[13:22:17.584] - Launch lazy future ... done
[13:22:17.584] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[13:22:17.584] resolved() for ‘SequentialFuture’ ...
[13:22:17.584] - state: ‘finished’
[13:22:17.584] - run: TRUE
[13:22:17.584] - result: ‘FutureResult’
[13:22:17.585] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[13:22:17.585] getGlobalsAndPackages() ...
[13:22:17.585] Searching for globals...
[13:22:17.586] - globals found: [2] ‘{’, ‘stop’
[13:22:17.586] Searching for globals ... DONE
[13:22:17.586] Resolving globals: FALSE
[13:22:17.587] 
[13:22:17.587] 
[13:22:17.587] getGlobalsAndPackages() ... DONE
[13:22:17.587] run() for ‘Future’ ...
[13:22:17.587] - state: ‘created’
[13:22:17.587] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:17.588] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:17.588] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:17.588]   - Field: ‘label’
[13:22:17.588]   - Field: ‘local’
[13:22:17.588]   - Field: ‘owner’
[13:22:17.588]   - Field: ‘envir’
[13:22:17.588]   - Field: ‘packages’
[13:22:17.588]   - Field: ‘gc’
[13:22:17.588]   - Field: ‘conditions’
[13:22:17.588]   - Field: ‘expr’
[13:22:17.589]   - Field: ‘uuid’
[13:22:17.589]   - Field: ‘seed’
[13:22:17.589]   - Field: ‘version’
[13:22:17.589]   - Field: ‘result’
[13:22:17.589]   - Field: ‘asynchronous’
[13:22:17.589]   - Field: ‘calls’
[13:22:17.589]   - Field: ‘globals’
[13:22:17.589]   - Field: ‘stdout’
[13:22:17.589]   - Field: ‘earlySignal’
[13:22:17.589]   - Field: ‘lazy’
[13:22:17.590]   - Field: ‘state’
[13:22:17.590] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:17.590] - Launch lazy future ...
[13:22:17.590] Packages needed by the future expression (n = 0): <none>
[13:22:17.590] Packages needed by future strategies (n = 0): <none>
[13:22:17.590] {
[13:22:17.590]     {
[13:22:17.590]         {
[13:22:17.590]             ...future.startTime <- base::Sys.time()
[13:22:17.590]             {
[13:22:17.590]                 {
[13:22:17.590]                   {
[13:22:17.590]                     base::local({
[13:22:17.590]                       has_future <- base::requireNamespace("future", 
[13:22:17.590]                         quietly = TRUE)
[13:22:17.590]                       if (has_future) {
[13:22:17.590]                         ns <- base::getNamespace("future")
[13:22:17.590]                         version <- ns[[".package"]][["version"]]
[13:22:17.590]                         if (is.null(version)) 
[13:22:17.590]                           version <- utils::packageVersion("future")
[13:22:17.590]                       }
[13:22:17.590]                       else {
[13:22:17.590]                         version <- NULL
[13:22:17.590]                       }
[13:22:17.590]                       if (!has_future || version < "1.8.0") {
[13:22:17.590]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:17.590]                           "", base::R.version$version.string), 
[13:22:17.590]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:17.590]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:17.590]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:17.590]                             "release", "version")], collapse = " "), 
[13:22:17.590]                           hostname = base::Sys.info()[["nodename"]])
[13:22:17.590]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:17.590]                           info)
[13:22:17.590]                         info <- base::paste(info, collapse = "; ")
[13:22:17.590]                         if (!has_future) {
[13:22:17.590]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:17.590]                             info)
[13:22:17.590]                         }
[13:22:17.590]                         else {
[13:22:17.590]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:17.590]                             info, version)
[13:22:17.590]                         }
[13:22:17.590]                         base::stop(msg)
[13:22:17.590]                       }
[13:22:17.590]                     })
[13:22:17.590]                   }
[13:22:17.590]                   options(future.plan = NULL)
[13:22:17.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:17.590]                 }
[13:22:17.590]                 ...future.workdir <- getwd()
[13:22:17.590]             }
[13:22:17.590]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:17.590]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:17.590]         }
[13:22:17.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:17.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:17.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:17.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:17.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:17.590]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:17.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:17.590]             base::names(...future.oldOptions))
[13:22:17.590]     }
[13:22:17.590]     if (FALSE) {
[13:22:17.590]     }
[13:22:17.590]     else {
[13:22:17.590]         if (TRUE) {
[13:22:17.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:17.590]                 open = "w")
[13:22:17.590]         }
[13:22:17.590]         else {
[13:22:17.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:17.590]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:17.590]         }
[13:22:17.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:17.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:17.590]             base::sink(type = "output", split = FALSE)
[13:22:17.590]             base::close(...future.stdout)
[13:22:17.590]         }, add = TRUE)
[13:22:17.590]     }
[13:22:17.590]     ...future.frame <- base::sys.nframe()
[13:22:17.590]     ...future.conditions <- base::list()
[13:22:17.590]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:17.590]     if (FALSE) {
[13:22:17.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:17.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:17.590]     }
[13:22:17.590]     ...future.result <- base::tryCatch({
[13:22:17.590]         base::withCallingHandlers({
[13:22:17.590]             ...future.value <- base::withVisible(base::local({
[13:22:17.590]                 42L
[13:22:17.590]                 stop("Woops")
[13:22:17.590]             }))
[13:22:17.590]             future::FutureResult(value = ...future.value$value, 
[13:22:17.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.590]                   ...future.rng), globalenv = if (FALSE) 
[13:22:17.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:17.590]                     ...future.globalenv.names))
[13:22:17.590]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:17.590]         }, condition = base::local({
[13:22:17.590]             c <- base::c
[13:22:17.590]             inherits <- base::inherits
[13:22:17.590]             invokeRestart <- base::invokeRestart
[13:22:17.590]             length <- base::length
[13:22:17.590]             list <- base::list
[13:22:17.590]             seq.int <- base::seq.int
[13:22:17.590]             signalCondition <- base::signalCondition
[13:22:17.590]             sys.calls <- base::sys.calls
[13:22:17.590]             `[[` <- base::`[[`
[13:22:17.590]             `+` <- base::`+`
[13:22:17.590]             `<<-` <- base::`<<-`
[13:22:17.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:17.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:17.590]                   3L)]
[13:22:17.590]             }
[13:22:17.590]             function(cond) {
[13:22:17.590]                 is_error <- inherits(cond, "error")
[13:22:17.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:17.590]                   NULL)
[13:22:17.590]                 if (is_error) {
[13:22:17.590]                   sessionInformation <- function() {
[13:22:17.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:17.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:17.590]                       search = base::search(), system = base::Sys.info())
[13:22:17.590]                   }
[13:22:17.590]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:17.590]                     cond$call), session = sessionInformation(), 
[13:22:17.590]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:17.590]                   signalCondition(cond)
[13:22:17.590]                 }
[13:22:17.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:17.590]                 "immediateCondition"))) {
[13:22:17.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:17.590]                   ...future.conditions[[length(...future.conditions) + 
[13:22:17.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:17.590]                   if (TRUE && !signal) {
[13:22:17.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.590]                     {
[13:22:17.590]                       inherits <- base::inherits
[13:22:17.590]                       invokeRestart <- base::invokeRestart
[13:22:17.590]                       is.null <- base::is.null
[13:22:17.590]                       muffled <- FALSE
[13:22:17.590]                       if (inherits(cond, "message")) {
[13:22:17.590]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.590]                         if (muffled) 
[13:22:17.590]                           invokeRestart("muffleMessage")
[13:22:17.590]                       }
[13:22:17.590]                       else if (inherits(cond, "warning")) {
[13:22:17.590]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.590]                         if (muffled) 
[13:22:17.590]                           invokeRestart("muffleWarning")
[13:22:17.590]                       }
[13:22:17.590]                       else if (inherits(cond, "condition")) {
[13:22:17.590]                         if (!is.null(pattern)) {
[13:22:17.590]                           computeRestarts <- base::computeRestarts
[13:22:17.590]                           grepl <- base::grepl
[13:22:17.590]                           restarts <- computeRestarts(cond)
[13:22:17.590]                           for (restart in restarts) {
[13:22:17.590]                             name <- restart$name
[13:22:17.590]                             if (is.null(name)) 
[13:22:17.590]                               next
[13:22:17.590]                             if (!grepl(pattern, name)) 
[13:22:17.590]                               next
[13:22:17.590]                             invokeRestart(restart)
[13:22:17.590]                             muffled <- TRUE
[13:22:17.590]                             break
[13:22:17.590]                           }
[13:22:17.590]                         }
[13:22:17.590]                       }
[13:22:17.590]                       invisible(muffled)
[13:22:17.590]                     }
[13:22:17.590]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.590]                   }
[13:22:17.590]                 }
[13:22:17.590]                 else {
[13:22:17.590]                   if (TRUE) {
[13:22:17.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:17.590]                     {
[13:22:17.590]                       inherits <- base::inherits
[13:22:17.590]                       invokeRestart <- base::invokeRestart
[13:22:17.590]                       is.null <- base::is.null
[13:22:17.590]                       muffled <- FALSE
[13:22:17.590]                       if (inherits(cond, "message")) {
[13:22:17.590]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:17.590]                         if (muffled) 
[13:22:17.590]                           invokeRestart("muffleMessage")
[13:22:17.590]                       }
[13:22:17.590]                       else if (inherits(cond, "warning")) {
[13:22:17.590]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:17.590]                         if (muffled) 
[13:22:17.590]                           invokeRestart("muffleWarning")
[13:22:17.590]                       }
[13:22:17.590]                       else if (inherits(cond, "condition")) {
[13:22:17.590]                         if (!is.null(pattern)) {
[13:22:17.590]                           computeRestarts <- base::computeRestarts
[13:22:17.590]                           grepl <- base::grepl
[13:22:17.590]                           restarts <- computeRestarts(cond)
[13:22:17.590]                           for (restart in restarts) {
[13:22:17.590]                             name <- restart$name
[13:22:17.590]                             if (is.null(name)) 
[13:22:17.590]                               next
[13:22:17.590]                             if (!grepl(pattern, name)) 
[13:22:17.590]                               next
[13:22:17.590]                             invokeRestart(restart)
[13:22:17.590]                             muffled <- TRUE
[13:22:17.590]                             break
[13:22:17.590]                           }
[13:22:17.590]                         }
[13:22:17.590]                       }
[13:22:17.590]                       invisible(muffled)
[13:22:17.590]                     }
[13:22:17.590]                     muffleCondition(cond, pattern = "^muffle")
[13:22:17.590]                   }
[13:22:17.590]                 }
[13:22:17.590]             }
[13:22:17.590]         }))
[13:22:17.590]     }, error = function(ex) {
[13:22:17.590]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:17.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:17.590]                 ...future.rng), started = ...future.startTime, 
[13:22:17.590]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:17.590]             version = "1.8"), class = "FutureResult")
[13:22:17.590]     }, finally = {
[13:22:17.590]         if (!identical(...future.workdir, getwd())) 
[13:22:17.590]             setwd(...future.workdir)
[13:22:17.590]         {
[13:22:17.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:17.590]                 ...future.oldOptions$nwarnings <- NULL
[13:22:17.590]             }
[13:22:17.590]             base::options(...future.oldOptions)
[13:22:17.590]             if (.Platform$OS.type == "windows") {
[13:22:17.590]                 old_names <- names(...future.oldEnvVars)
[13:22:17.590]                 envs <- base::Sys.getenv()
[13:22:17.590]                 names <- names(envs)
[13:22:17.590]                 common <- intersect(names, old_names)
[13:22:17.590]                 added <- setdiff(names, old_names)
[13:22:17.590]                 removed <- setdiff(old_names, names)
[13:22:17.590]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:17.590]                   envs[common]]
[13:22:17.590]                 NAMES <- toupper(changed)
[13:22:17.590]                 args <- list()
[13:22:17.590]                 for (kk in seq_along(NAMES)) {
[13:22:17.590]                   name <- changed[[kk]]
[13:22:17.590]                   NAME <- NAMES[[kk]]
[13:22:17.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.590]                     next
[13:22:17.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.590]                 }
[13:22:17.590]                 NAMES <- toupper(added)
[13:22:17.590]                 for (kk in seq_along(NAMES)) {
[13:22:17.590]                   name <- added[[kk]]
[13:22:17.590]                   NAME <- NAMES[[kk]]
[13:22:17.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.590]                     next
[13:22:17.590]                   args[[name]] <- ""
[13:22:17.590]                 }
[13:22:17.590]                 NAMES <- toupper(removed)
[13:22:17.590]                 for (kk in seq_along(NAMES)) {
[13:22:17.590]                   name <- removed[[kk]]
[13:22:17.590]                   NAME <- NAMES[[kk]]
[13:22:17.590]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:17.590]                     next
[13:22:17.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:17.590]                 }
[13:22:17.590]                 if (length(args) > 0) 
[13:22:17.590]                   base::do.call(base::Sys.setenv, args = args)
[13:22:17.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:17.590]             }
[13:22:17.590]             else {
[13:22:17.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:17.590]             }
[13:22:17.590]             {
[13:22:17.590]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:17.590]                   0L) {
[13:22:17.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:17.590]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:17.590]                   base::options(opts)
[13:22:17.590]                 }
[13:22:17.590]                 {
[13:22:17.590]                   {
[13:22:17.590]                     NULL
[13:22:17.590]                     RNGkind("Mersenne-Twister")
[13:22:17.590]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:17.590]                       inherits = FALSE)
[13:22:17.590]                   }
[13:22:17.590]                   options(future.plan = NULL)
[13:22:17.590]                   if (is.na(NA_character_)) 
[13:22:17.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:17.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:17.590]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:17.590]                   {
[13:22:17.590]                     future <- SequentialFuture(..., envir = envir)
[13:22:17.590]                     if (!future$lazy) 
[13:22:17.590]                       future <- run(future)
[13:22:17.590]                     invisible(future)
[13:22:17.590]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:17.590]                 }
[13:22:17.590]             }
[13:22:17.590]         }
[13:22:17.590]     })
[13:22:17.590]     if (TRUE) {
[13:22:17.590]         base::sink(type = "output", split = FALSE)
[13:22:17.590]         if (TRUE) {
[13:22:17.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:17.590]         }
[13:22:17.590]         else {
[13:22:17.590]             ...future.result["stdout"] <- base::list(NULL)
[13:22:17.590]         }
[13:22:17.590]         base::close(...future.stdout)
[13:22:17.590]         ...future.stdout <- NULL
[13:22:17.590]     }
[13:22:17.590]     ...future.result$conditions <- ...future.conditions
[13:22:17.590]     ...future.result$finished <- base::Sys.time()
[13:22:17.590]     ...future.result
[13:22:17.590] }
[13:22:17.592] plan(): Setting new future strategy stack:
[13:22:17.592] List of future strategies:
[13:22:17.592] 1. sequential:
[13:22:17.592]    - args: function (..., envir = parent.frame())
[13:22:17.592]    - tweaked: FALSE
[13:22:17.592]    - call: NULL
[13:22:17.593] plan(): nbrOfWorkers() = 1
[13:22:17.594] plan(): Setting new future strategy stack:
[13:22:17.594] List of future strategies:
[13:22:17.594] 1. sequential:
[13:22:17.594]    - args: function (..., envir = parent.frame())
[13:22:17.594]    - tweaked: FALSE
[13:22:17.594]    - call: future::plan("sequential")
[13:22:17.594] plan(): nbrOfWorkers() = 1
[13:22:17.595] SequentialFuture started (and completed)
[13:22:17.595] signalConditions() ...
[13:22:17.595]  - include = ‘immediateCondition’
[13:22:17.595]  - exclude = 
[13:22:17.595]  - resignal = FALSE
[13:22:17.595]  - Number of conditions: 1
[13:22:17.595] signalConditions() ... done
[13:22:17.595] - Launch lazy future ... done
[13:22:17.595] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[13:22:17.595] signalConditions() ...
[13:22:17.596]  - include = ‘immediateCondition’
[13:22:17.596]  - exclude = 
[13:22:17.596]  - resignal = FALSE
[13:22:17.596]  - Number of conditions: 1
[13:22:17.596] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[13:22:17.603] plan(): Setting new future strategy stack:
[13:22:17.603] List of future strategies:
[13:22:17.603] 1. multisession:
[13:22:17.603]    - args: function (..., workers = 2L, envir = parent.frame())
[13:22:17.603]    - tweaked: TRUE
[13:22:17.603]    - call: plan(multisession, workers = 2L)
[13:22:17.617] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:17.617] multisession:
[13:22:17.617] - args: function (..., workers = 2L, envir = parent.frame())
[13:22:17.617] - tweaked: TRUE
[13:22:17.617] - call: plan(multisession, workers = 2L)
[13:22:17.618] getGlobalsAndPackages() ...
[13:22:17.618] Not searching for globals
[13:22:17.618] - globals: [0] <none>
[13:22:17.618] getGlobalsAndPackages() ... DONE
[13:22:17.619] [local output] makeClusterPSOCK() ...
[13:22:17.662] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:17.663] [local output] Base port: 11920
[13:22:17.663] [local output] Getting setup options for 2 cluster nodes ...
[13:22:17.663] [local output]  - Node 1 of 2 ...
[13:22:17.664] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:17.665] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpAXUwEu/worker.rank=1.parallelly.parent=81045.13c95236c182e.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpAXUwEu/worker.rank=1.parallelly.parent=81045.13c95236c182e.pid")'’
[13:22:17.864] - Possible to infer worker's PID: TRUE
[13:22:17.864] [local output] Rscript port: 11920

[13:22:17.865] [local output]  - Node 2 of 2 ...
[13:22:17.865] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:17.866] [local output] Rscript port: 11920

[13:22:17.866] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:17.866] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:17.867] [local output] Setting up PSOCK nodes in parallel
[13:22:17.867] List of 36
[13:22:17.867]  $ worker          : chr "localhost"
[13:22:17.867]   ..- attr(*, "localhost")= logi TRUE
[13:22:17.867]  $ master          : chr "localhost"
[13:22:17.867]  $ port            : int 11920
[13:22:17.867]  $ connectTimeout  : num 120
[13:22:17.867]  $ timeout         : num 2592000
[13:22:17.867]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:17.867]  $ homogeneous     : logi TRUE
[13:22:17.867]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:17.867]  $ rscript_envs    : NULL
[13:22:17.867]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:17.867]  $ rscript_startup : NULL
[13:22:17.867]  $ rscript_sh      : chr "sh"
[13:22:17.867]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:17.867]  $ methods         : logi TRUE
[13:22:17.867]  $ socketOptions   : chr "no-delay"
[13:22:17.867]  $ useXDR          : logi FALSE
[13:22:17.867]  $ outfile         : chr "/dev/null"
[13:22:17.867]  $ renice          : int NA
[13:22:17.867]  $ rshcmd          : NULL
[13:22:17.867]  $ user            : chr(0) 
[13:22:17.867]  $ revtunnel       : logi FALSE
[13:22:17.867]  $ rshlogfile      : NULL
[13:22:17.867]  $ rshopts         : chr(0) 
[13:22:17.867]  $ rank            : int 1
[13:22:17.867]  $ manual          : logi FALSE
[13:22:17.867]  $ dryrun          : logi FALSE
[13:22:17.867]  $ quiet           : logi FALSE
[13:22:17.867]  $ setup_strategy  : chr "parallel"
[13:22:17.867]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:17.867]  $ pidfile         : chr "/tmp/RtmpAXUwEu/worker.rank=1.parallelly.parent=81045.13c95236c182e.pid"
[13:22:17.867]  $ rshcmd_label    : NULL
[13:22:17.867]  $ rsh_call        : NULL
[13:22:17.867]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:17.867]  $ localMachine    : logi TRUE
[13:22:17.867]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:17.867]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:17.867]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:17.867]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:17.867]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:17.867]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:17.867]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:17.867]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:17.867]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:17.867]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:17.867]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:17.867]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:17.867]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:17.867]  $ arguments       :List of 28
[13:22:17.867]   ..$ worker          : chr "localhost"
[13:22:17.867]   ..$ master          : NULL
[13:22:17.867]   ..$ port            : int 11920
[13:22:17.867]   ..$ connectTimeout  : num 120
[13:22:17.867]   ..$ timeout         : num 2592000
[13:22:17.867]   ..$ rscript         : NULL
[13:22:17.867]   ..$ homogeneous     : NULL
[13:22:17.867]   ..$ rscript_args    : NULL
[13:22:17.867]   ..$ rscript_envs    : NULL
[13:22:17.867]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:17.867]   ..$ rscript_startup : NULL
[13:22:17.867]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:17.867]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:17.867]   ..$ methods         : logi TRUE
[13:22:17.867]   ..$ socketOptions   : chr "no-delay"
[13:22:17.867]   ..$ useXDR          : logi FALSE
[13:22:17.867]   ..$ outfile         : chr "/dev/null"
[13:22:17.867]   ..$ renice          : int NA
[13:22:17.867]   ..$ rshcmd          : NULL
[13:22:17.867]   ..$ user            : NULL
[13:22:17.867]   ..$ revtunnel       : logi NA
[13:22:17.867]   ..$ rshlogfile      : NULL
[13:22:17.867]   ..$ rshopts         : NULL
[13:22:17.867]   ..$ rank            : int 1
[13:22:17.867]   ..$ manual          : logi FALSE
[13:22:17.867]   ..$ dryrun          : logi FALSE
[13:22:17.867]   ..$ quiet           : logi FALSE
[13:22:17.867]   ..$ setup_strategy  : chr "parallel"
[13:22:17.867]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:17.887] [local output] System call to launch all workers:
[13:22:17.887] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpAXUwEu/worker.rank=1.parallelly.parent=81045.13c95236c182e.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11920 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:17.887] [local output] Starting PSOCK main server
[13:22:17.893] [local output] Workers launched
[13:22:17.893] [local output] Waiting for workers to connect back
[13:22:17.893]  - [local output] 0 workers out of 2 ready
[13:22:18.158]  - [local output] 0 workers out of 2 ready
[13:22:18.159]  - [local output] 1 workers out of 2 ready
[13:22:18.174]  - [local output] 1 workers out of 2 ready
[13:22:18.175]  - [local output] 2 workers out of 2 ready
[13:22:18.175] [local output] Launching of workers completed
[13:22:18.175] [local output] Collecting session information from workers
[13:22:18.176] [local output]  - Worker #1 of 2
[13:22:18.177] [local output]  - Worker #2 of 2
[13:22:18.177] [local output] makeClusterPSOCK() ... done
[13:22:18.189] Packages needed by the future expression (n = 0): <none>
[13:22:18.189] Packages needed by future strategies (n = 0): <none>
[13:22:18.189] {
[13:22:18.189]     {
[13:22:18.189]         {
[13:22:18.189]             ...future.startTime <- base::Sys.time()
[13:22:18.189]             {
[13:22:18.189]                 {
[13:22:18.189]                   {
[13:22:18.189]                     {
[13:22:18.189]                       base::local({
[13:22:18.189]                         has_future <- base::requireNamespace("future", 
[13:22:18.189]                           quietly = TRUE)
[13:22:18.189]                         if (has_future) {
[13:22:18.189]                           ns <- base::getNamespace("future")
[13:22:18.189]                           version <- ns[[".package"]][["version"]]
[13:22:18.189]                           if (is.null(version)) 
[13:22:18.189]                             version <- utils::packageVersion("future")
[13:22:18.189]                         }
[13:22:18.189]                         else {
[13:22:18.189]                           version <- NULL
[13:22:18.189]                         }
[13:22:18.189]                         if (!has_future || version < "1.8.0") {
[13:22:18.189]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:18.189]                             "", base::R.version$version.string), 
[13:22:18.189]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:18.189]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:18.189]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:18.189]                               "release", "version")], collapse = " "), 
[13:22:18.189]                             hostname = base::Sys.info()[["nodename"]])
[13:22:18.189]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:18.189]                             info)
[13:22:18.189]                           info <- base::paste(info, collapse = "; ")
[13:22:18.189]                           if (!has_future) {
[13:22:18.189]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:18.189]                               info)
[13:22:18.189]                           }
[13:22:18.189]                           else {
[13:22:18.189]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:18.189]                               info, version)
[13:22:18.189]                           }
[13:22:18.189]                           base::stop(msg)
[13:22:18.189]                         }
[13:22:18.189]                       })
[13:22:18.189]                     }
[13:22:18.189]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:18.189]                     base::options(mc.cores = 1L)
[13:22:18.189]                   }
[13:22:18.189]                   options(future.plan = NULL)
[13:22:18.189]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:18.189]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:18.189]                 }
[13:22:18.189]                 ...future.workdir <- getwd()
[13:22:18.189]             }
[13:22:18.189]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:18.189]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:18.189]         }
[13:22:18.189]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:18.189]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:18.189]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:18.189]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:18.189]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:18.189]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:18.189]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:18.189]             base::names(...future.oldOptions))
[13:22:18.189]     }
[13:22:18.189]     if (FALSE) {
[13:22:18.189]     }
[13:22:18.189]     else {
[13:22:18.189]         if (TRUE) {
[13:22:18.189]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:18.189]                 open = "w")
[13:22:18.189]         }
[13:22:18.189]         else {
[13:22:18.189]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:18.189]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:18.189]         }
[13:22:18.189]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:18.189]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:18.189]             base::sink(type = "output", split = FALSE)
[13:22:18.189]             base::close(...future.stdout)
[13:22:18.189]         }, add = TRUE)
[13:22:18.189]     }
[13:22:18.189]     ...future.frame <- base::sys.nframe()
[13:22:18.189]     ...future.conditions <- base::list()
[13:22:18.189]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:18.189]     if (FALSE) {
[13:22:18.189]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:18.189]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:18.189]     }
[13:22:18.189]     ...future.result <- base::tryCatch({
[13:22:18.189]         base::withCallingHandlers({
[13:22:18.189]             ...future.value <- base::withVisible(base::local({
[13:22:18.189]                 ...future.makeSendCondition <- base::local({
[13:22:18.189]                   sendCondition <- NULL
[13:22:18.189]                   function(frame = 1L) {
[13:22:18.189]                     if (is.function(sendCondition)) 
[13:22:18.189]                       return(sendCondition)
[13:22:18.189]                     ns <- getNamespace("parallel")
[13:22:18.189]                     if (exists("sendData", mode = "function", 
[13:22:18.189]                       envir = ns)) {
[13:22:18.189]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:18.189]                         envir = ns)
[13:22:18.189]                       envir <- sys.frame(frame)
[13:22:18.189]                       master <- NULL
[13:22:18.189]                       while (!identical(envir, .GlobalEnv) && 
[13:22:18.189]                         !identical(envir, emptyenv())) {
[13:22:18.189]                         if (exists("master", mode = "list", envir = envir, 
[13:22:18.189]                           inherits = FALSE)) {
[13:22:18.189]                           master <- get("master", mode = "list", 
[13:22:18.189]                             envir = envir, inherits = FALSE)
[13:22:18.189]                           if (inherits(master, c("SOCKnode", 
[13:22:18.189]                             "SOCK0node"))) {
[13:22:18.189]                             sendCondition <<- function(cond) {
[13:22:18.189]                               data <- list(type = "VALUE", value = cond, 
[13:22:18.189]                                 success = TRUE)
[13:22:18.189]                               parallel_sendData(master, data)
[13:22:18.189]                             }
[13:22:18.189]                             return(sendCondition)
[13:22:18.189]                           }
[13:22:18.189]                         }
[13:22:18.189]                         frame <- frame + 1L
[13:22:18.189]                         envir <- sys.frame(frame)
[13:22:18.189]                       }
[13:22:18.189]                     }
[13:22:18.189]                     sendCondition <<- function(cond) NULL
[13:22:18.189]                   }
[13:22:18.189]                 })
[13:22:18.189]                 withCallingHandlers({
[13:22:18.189]                   NA
[13:22:18.189]                 }, immediateCondition = function(cond) {
[13:22:18.189]                   sendCondition <- ...future.makeSendCondition()
[13:22:18.189]                   sendCondition(cond)
[13:22:18.189]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.189]                   {
[13:22:18.189]                     inherits <- base::inherits
[13:22:18.189]                     invokeRestart <- base::invokeRestart
[13:22:18.189]                     is.null <- base::is.null
[13:22:18.189]                     muffled <- FALSE
[13:22:18.189]                     if (inherits(cond, "message")) {
[13:22:18.189]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:18.189]                       if (muffled) 
[13:22:18.189]                         invokeRestart("muffleMessage")
[13:22:18.189]                     }
[13:22:18.189]                     else if (inherits(cond, "warning")) {
[13:22:18.189]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:18.189]                       if (muffled) 
[13:22:18.189]                         invokeRestart("muffleWarning")
[13:22:18.189]                     }
[13:22:18.189]                     else if (inherits(cond, "condition")) {
[13:22:18.189]                       if (!is.null(pattern)) {
[13:22:18.189]                         computeRestarts <- base::computeRestarts
[13:22:18.189]                         grepl <- base::grepl
[13:22:18.189]                         restarts <- computeRestarts(cond)
[13:22:18.189]                         for (restart in restarts) {
[13:22:18.189]                           name <- restart$name
[13:22:18.189]                           if (is.null(name)) 
[13:22:18.189]                             next
[13:22:18.189]                           if (!grepl(pattern, name)) 
[13:22:18.189]                             next
[13:22:18.189]                           invokeRestart(restart)
[13:22:18.189]                           muffled <- TRUE
[13:22:18.189]                           break
[13:22:18.189]                         }
[13:22:18.189]                       }
[13:22:18.189]                     }
[13:22:18.189]                     invisible(muffled)
[13:22:18.189]                   }
[13:22:18.189]                   muffleCondition(cond)
[13:22:18.189]                 })
[13:22:18.189]             }))
[13:22:18.189]             future::FutureResult(value = ...future.value$value, 
[13:22:18.189]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:18.189]                   ...future.rng), globalenv = if (FALSE) 
[13:22:18.189]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:18.189]                     ...future.globalenv.names))
[13:22:18.189]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:18.189]         }, condition = base::local({
[13:22:18.189]             c <- base::c
[13:22:18.189]             inherits <- base::inherits
[13:22:18.189]             invokeRestart <- base::invokeRestart
[13:22:18.189]             length <- base::length
[13:22:18.189]             list <- base::list
[13:22:18.189]             seq.int <- base::seq.int
[13:22:18.189]             signalCondition <- base::signalCondition
[13:22:18.189]             sys.calls <- base::sys.calls
[13:22:18.189]             `[[` <- base::`[[`
[13:22:18.189]             `+` <- base::`+`
[13:22:18.189]             `<<-` <- base::`<<-`
[13:22:18.189]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:18.189]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:18.189]                   3L)]
[13:22:18.189]             }
[13:22:18.189]             function(cond) {
[13:22:18.189]                 is_error <- inherits(cond, "error")
[13:22:18.189]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:18.189]                   NULL)
[13:22:18.189]                 if (is_error) {
[13:22:18.189]                   sessionInformation <- function() {
[13:22:18.189]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:18.189]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:18.189]                       search = base::search(), system = base::Sys.info())
[13:22:18.189]                   }
[13:22:18.189]                   ...future.conditions[[length(...future.conditions) + 
[13:22:18.189]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:18.189]                     cond$call), session = sessionInformation(), 
[13:22:18.189]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:18.189]                   signalCondition(cond)
[13:22:18.189]                 }
[13:22:18.189]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:18.189]                 "immediateCondition"))) {
[13:22:18.189]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:18.189]                   ...future.conditions[[length(...future.conditions) + 
[13:22:18.189]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:18.189]                   if (TRUE && !signal) {
[13:22:18.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.189]                     {
[13:22:18.189]                       inherits <- base::inherits
[13:22:18.189]                       invokeRestart <- base::invokeRestart
[13:22:18.189]                       is.null <- base::is.null
[13:22:18.189]                       muffled <- FALSE
[13:22:18.189]                       if (inherits(cond, "message")) {
[13:22:18.189]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:18.189]                         if (muffled) 
[13:22:18.189]                           invokeRestart("muffleMessage")
[13:22:18.189]                       }
[13:22:18.189]                       else if (inherits(cond, "warning")) {
[13:22:18.189]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:18.189]                         if (muffled) 
[13:22:18.189]                           invokeRestart("muffleWarning")
[13:22:18.189]                       }
[13:22:18.189]                       else if (inherits(cond, "condition")) {
[13:22:18.189]                         if (!is.null(pattern)) {
[13:22:18.189]                           computeRestarts <- base::computeRestarts
[13:22:18.189]                           grepl <- base::grepl
[13:22:18.189]                           restarts <- computeRestarts(cond)
[13:22:18.189]                           for (restart in restarts) {
[13:22:18.189]                             name <- restart$name
[13:22:18.189]                             if (is.null(name)) 
[13:22:18.189]                               next
[13:22:18.189]                             if (!grepl(pattern, name)) 
[13:22:18.189]                               next
[13:22:18.189]                             invokeRestart(restart)
[13:22:18.189]                             muffled <- TRUE
[13:22:18.189]                             break
[13:22:18.189]                           }
[13:22:18.189]                         }
[13:22:18.189]                       }
[13:22:18.189]                       invisible(muffled)
[13:22:18.189]                     }
[13:22:18.189]                     muffleCondition(cond, pattern = "^muffle")
[13:22:18.189]                   }
[13:22:18.189]                 }
[13:22:18.189]                 else {
[13:22:18.189]                   if (TRUE) {
[13:22:18.189]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.189]                     {
[13:22:18.189]                       inherits <- base::inherits
[13:22:18.189]                       invokeRestart <- base::invokeRestart
[13:22:18.189]                       is.null <- base::is.null
[13:22:18.189]                       muffled <- FALSE
[13:22:18.189]                       if (inherits(cond, "message")) {
[13:22:18.189]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:18.189]                         if (muffled) 
[13:22:18.189]                           invokeRestart("muffleMessage")
[13:22:18.189]                       }
[13:22:18.189]                       else if (inherits(cond, "warning")) {
[13:22:18.189]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:18.189]                         if (muffled) 
[13:22:18.189]                           invokeRestart("muffleWarning")
[13:22:18.189]                       }
[13:22:18.189]                       else if (inherits(cond, "condition")) {
[13:22:18.189]                         if (!is.null(pattern)) {
[13:22:18.189]                           computeRestarts <- base::computeRestarts
[13:22:18.189]                           grepl <- base::grepl
[13:22:18.189]                           restarts <- computeRestarts(cond)
[13:22:18.189]                           for (restart in restarts) {
[13:22:18.189]                             name <- restart$name
[13:22:18.189]                             if (is.null(name)) 
[13:22:18.189]                               next
[13:22:18.189]                             if (!grepl(pattern, name)) 
[13:22:18.189]                               next
[13:22:18.189]                             invokeRestart(restart)
[13:22:18.189]                             muffled <- TRUE
[13:22:18.189]                             break
[13:22:18.189]                           }
[13:22:18.189]                         }
[13:22:18.189]                       }
[13:22:18.189]                       invisible(muffled)
[13:22:18.189]                     }
[13:22:18.189]                     muffleCondition(cond, pattern = "^muffle")
[13:22:18.189]                   }
[13:22:18.189]                 }
[13:22:18.189]             }
[13:22:18.189]         }))
[13:22:18.189]     }, error = function(ex) {
[13:22:18.189]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:18.189]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:18.189]                 ...future.rng), started = ...future.startTime, 
[13:22:18.189]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:18.189]             version = "1.8"), class = "FutureResult")
[13:22:18.189]     }, finally = {
[13:22:18.189]         if (!identical(...future.workdir, getwd())) 
[13:22:18.189]             setwd(...future.workdir)
[13:22:18.189]         {
[13:22:18.189]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:18.189]                 ...future.oldOptions$nwarnings <- NULL
[13:22:18.189]             }
[13:22:18.189]             base::options(...future.oldOptions)
[13:22:18.189]             if (.Platform$OS.type == "windows") {
[13:22:18.189]                 old_names <- names(...future.oldEnvVars)
[13:22:18.189]                 envs <- base::Sys.getenv()
[13:22:18.189]                 names <- names(envs)
[13:22:18.189]                 common <- intersect(names, old_names)
[13:22:18.189]                 added <- setdiff(names, old_names)
[13:22:18.189]                 removed <- setdiff(old_names, names)
[13:22:18.189]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:18.189]                   envs[common]]
[13:22:18.189]                 NAMES <- toupper(changed)
[13:22:18.189]                 args <- list()
[13:22:18.189]                 for (kk in seq_along(NAMES)) {
[13:22:18.189]                   name <- changed[[kk]]
[13:22:18.189]                   NAME <- NAMES[[kk]]
[13:22:18.189]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.189]                     next
[13:22:18.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:18.189]                 }
[13:22:18.189]                 NAMES <- toupper(added)
[13:22:18.189]                 for (kk in seq_along(NAMES)) {
[13:22:18.189]                   name <- added[[kk]]
[13:22:18.189]                   NAME <- NAMES[[kk]]
[13:22:18.189]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.189]                     next
[13:22:18.189]                   args[[name]] <- ""
[13:22:18.189]                 }
[13:22:18.189]                 NAMES <- toupper(removed)
[13:22:18.189]                 for (kk in seq_along(NAMES)) {
[13:22:18.189]                   name <- removed[[kk]]
[13:22:18.189]                   NAME <- NAMES[[kk]]
[13:22:18.189]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.189]                     next
[13:22:18.189]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:18.189]                 }
[13:22:18.189]                 if (length(args) > 0) 
[13:22:18.189]                   base::do.call(base::Sys.setenv, args = args)
[13:22:18.189]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:18.189]             }
[13:22:18.189]             else {
[13:22:18.189]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:18.189]             }
[13:22:18.189]             {
[13:22:18.189]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:18.189]                   0L) {
[13:22:18.189]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:18.189]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:18.189]                   base::options(opts)
[13:22:18.189]                 }
[13:22:18.189]                 {
[13:22:18.189]                   {
[13:22:18.189]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:18.189]                     NULL
[13:22:18.189]                   }
[13:22:18.189]                   options(future.plan = NULL)
[13:22:18.189]                   if (is.na(NA_character_)) 
[13:22:18.189]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:18.189]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:18.189]                   future::plan(list(function (..., workers = 2L, 
[13:22:18.189]                     envir = parent.frame()) 
[13:22:18.189]                   strategy(..., workers = workers, envir = envir)), 
[13:22:18.189]                     .cleanup = FALSE, .init = FALSE)
[13:22:18.189]                 }
[13:22:18.189]             }
[13:22:18.189]         }
[13:22:18.189]     })
[13:22:18.189]     if (TRUE) {
[13:22:18.189]         base::sink(type = "output", split = FALSE)
[13:22:18.189]         if (TRUE) {
[13:22:18.189]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:18.189]         }
[13:22:18.189]         else {
[13:22:18.189]             ...future.result["stdout"] <- base::list(NULL)
[13:22:18.189]         }
[13:22:18.189]         base::close(...future.stdout)
[13:22:18.189]         ...future.stdout <- NULL
[13:22:18.189]     }
[13:22:18.189]     ...future.result$conditions <- ...future.conditions
[13:22:18.189]     ...future.result$finished <- base::Sys.time()
[13:22:18.189]     ...future.result
[13:22:18.189] }
[13:22:18.247] MultisessionFuture started
[13:22:18.248] result() for ClusterFuture ...
[13:22:18.249] receiveMessageFromWorker() for ClusterFuture ...
[13:22:18.249] - Validating connection of MultisessionFuture
[13:22:18.284] - received message: FutureResult
[13:22:18.285] - Received FutureResult
[13:22:18.288] - Erased future from FutureRegistry
[13:22:18.288] result() for ClusterFuture ...
[13:22:18.288] - result already collected: FutureResult
[13:22:18.288] result() for ClusterFuture ... done
[13:22:18.288] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:18.288] result() for ClusterFuture ... done
[13:22:18.289] result() for ClusterFuture ...
[13:22:18.289] - result already collected: FutureResult
[13:22:18.289] result() for ClusterFuture ... done
[13:22:18.289] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:18.289] plan(): nbrOfWorkers() = 2
[13:22:18.289] getGlobalsAndPackages() ...
[13:22:18.290] Searching for globals...
[13:22:18.291] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[13:22:18.291] Searching for globals ... DONE
[13:22:18.292] Resolving globals: FALSE
[13:22:18.292] 
[13:22:18.292] 
[13:22:18.292] getGlobalsAndPackages() ... DONE
[13:22:18.293] run() for ‘Future’ ...
[13:22:18.293] - state: ‘created’
[13:22:18.293] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:18.304] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:18.304] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:18.304]   - Field: ‘node’
[13:22:18.305]   - Field: ‘label’
[13:22:18.305]   - Field: ‘local’
[13:22:18.305]   - Field: ‘owner’
[13:22:18.305]   - Field: ‘envir’
[13:22:18.305]   - Field: ‘workers’
[13:22:18.305]   - Field: ‘packages’
[13:22:18.305]   - Field: ‘gc’
[13:22:18.305]   - Field: ‘conditions’
[13:22:18.305]   - Field: ‘persistent’
[13:22:18.306]   - Field: ‘expr’
[13:22:18.306]   - Field: ‘uuid’
[13:22:18.306]   - Field: ‘seed’
[13:22:18.306]   - Field: ‘version’
[13:22:18.306]   - Field: ‘result’
[13:22:18.306]   - Field: ‘asynchronous’
[13:22:18.306]   - Field: ‘calls’
[13:22:18.306]   - Field: ‘globals’
[13:22:18.306]   - Field: ‘stdout’
[13:22:18.307]   - Field: ‘earlySignal’
[13:22:18.307]   - Field: ‘lazy’
[13:22:18.307]   - Field: ‘state’
[13:22:18.307] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:18.307] - Launch lazy future ...
[13:22:18.307] Packages needed by the future expression (n = 0): <none>
[13:22:18.308] Packages needed by future strategies (n = 0): <none>
[13:22:18.308] {
[13:22:18.308]     {
[13:22:18.308]         {
[13:22:18.308]             ...future.startTime <- base::Sys.time()
[13:22:18.308]             {
[13:22:18.308]                 {
[13:22:18.308]                   {
[13:22:18.308]                     {
[13:22:18.308]                       base::local({
[13:22:18.308]                         has_future <- base::requireNamespace("future", 
[13:22:18.308]                           quietly = TRUE)
[13:22:18.308]                         if (has_future) {
[13:22:18.308]                           ns <- base::getNamespace("future")
[13:22:18.308]                           version <- ns[[".package"]][["version"]]
[13:22:18.308]                           if (is.null(version)) 
[13:22:18.308]                             version <- utils::packageVersion("future")
[13:22:18.308]                         }
[13:22:18.308]                         else {
[13:22:18.308]                           version <- NULL
[13:22:18.308]                         }
[13:22:18.308]                         if (!has_future || version < "1.8.0") {
[13:22:18.308]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:18.308]                             "", base::R.version$version.string), 
[13:22:18.308]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:18.308]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:18.308]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:18.308]                               "release", "version")], collapse = " "), 
[13:22:18.308]                             hostname = base::Sys.info()[["nodename"]])
[13:22:18.308]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:18.308]                             info)
[13:22:18.308]                           info <- base::paste(info, collapse = "; ")
[13:22:18.308]                           if (!has_future) {
[13:22:18.308]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:18.308]                               info)
[13:22:18.308]                           }
[13:22:18.308]                           else {
[13:22:18.308]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:18.308]                               info, version)
[13:22:18.308]                           }
[13:22:18.308]                           base::stop(msg)
[13:22:18.308]                         }
[13:22:18.308]                       })
[13:22:18.308]                     }
[13:22:18.308]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:18.308]                     base::options(mc.cores = 1L)
[13:22:18.308]                   }
[13:22:18.308]                   options(future.plan = NULL)
[13:22:18.308]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:18.308]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:18.308]                 }
[13:22:18.308]                 ...future.workdir <- getwd()
[13:22:18.308]             }
[13:22:18.308]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:18.308]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:18.308]         }
[13:22:18.308]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:18.308]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:18.308]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:18.308]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:18.308]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:18.308]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:18.308]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:18.308]             base::names(...future.oldOptions))
[13:22:18.308]     }
[13:22:18.308]     if (FALSE) {
[13:22:18.308]     }
[13:22:18.308]     else {
[13:22:18.308]         if (TRUE) {
[13:22:18.308]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:18.308]                 open = "w")
[13:22:18.308]         }
[13:22:18.308]         else {
[13:22:18.308]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:18.308]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:18.308]         }
[13:22:18.308]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:18.308]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:18.308]             base::sink(type = "output", split = FALSE)
[13:22:18.308]             base::close(...future.stdout)
[13:22:18.308]         }, add = TRUE)
[13:22:18.308]     }
[13:22:18.308]     ...future.frame <- base::sys.nframe()
[13:22:18.308]     ...future.conditions <- base::list()
[13:22:18.308]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:18.308]     if (FALSE) {
[13:22:18.308]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:18.308]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:18.308]     }
[13:22:18.308]     ...future.result <- base::tryCatch({
[13:22:18.308]         base::withCallingHandlers({
[13:22:18.308]             ...future.value <- base::withVisible(base::local({
[13:22:18.308]                 ...future.makeSendCondition <- base::local({
[13:22:18.308]                   sendCondition <- NULL
[13:22:18.308]                   function(frame = 1L) {
[13:22:18.308]                     if (is.function(sendCondition)) 
[13:22:18.308]                       return(sendCondition)
[13:22:18.308]                     ns <- getNamespace("parallel")
[13:22:18.308]                     if (exists("sendData", mode = "function", 
[13:22:18.308]                       envir = ns)) {
[13:22:18.308]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:18.308]                         envir = ns)
[13:22:18.308]                       envir <- sys.frame(frame)
[13:22:18.308]                       master <- NULL
[13:22:18.308]                       while (!identical(envir, .GlobalEnv) && 
[13:22:18.308]                         !identical(envir, emptyenv())) {
[13:22:18.308]                         if (exists("master", mode = "list", envir = envir, 
[13:22:18.308]                           inherits = FALSE)) {
[13:22:18.308]                           master <- get("master", mode = "list", 
[13:22:18.308]                             envir = envir, inherits = FALSE)
[13:22:18.308]                           if (inherits(master, c("SOCKnode", 
[13:22:18.308]                             "SOCK0node"))) {
[13:22:18.308]                             sendCondition <<- function(cond) {
[13:22:18.308]                               data <- list(type = "VALUE", value = cond, 
[13:22:18.308]                                 success = TRUE)
[13:22:18.308]                               parallel_sendData(master, data)
[13:22:18.308]                             }
[13:22:18.308]                             return(sendCondition)
[13:22:18.308]                           }
[13:22:18.308]                         }
[13:22:18.308]                         frame <- frame + 1L
[13:22:18.308]                         envir <- sys.frame(frame)
[13:22:18.308]                       }
[13:22:18.308]                     }
[13:22:18.308]                     sendCondition <<- function(cond) NULL
[13:22:18.308]                   }
[13:22:18.308]                 })
[13:22:18.308]                 withCallingHandlers({
[13:22:18.308]                   {
[13:22:18.308]                     Sys.sleep(3)
[13:22:18.308]                     42L
[13:22:18.308]                     stop("Woops")
[13:22:18.308]                   }
[13:22:18.308]                 }, immediateCondition = function(cond) {
[13:22:18.308]                   sendCondition <- ...future.makeSendCondition()
[13:22:18.308]                   sendCondition(cond)
[13:22:18.308]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.308]                   {
[13:22:18.308]                     inherits <- base::inherits
[13:22:18.308]                     invokeRestart <- base::invokeRestart
[13:22:18.308]                     is.null <- base::is.null
[13:22:18.308]                     muffled <- FALSE
[13:22:18.308]                     if (inherits(cond, "message")) {
[13:22:18.308]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:18.308]                       if (muffled) 
[13:22:18.308]                         invokeRestart("muffleMessage")
[13:22:18.308]                     }
[13:22:18.308]                     else if (inherits(cond, "warning")) {
[13:22:18.308]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:18.308]                       if (muffled) 
[13:22:18.308]                         invokeRestart("muffleWarning")
[13:22:18.308]                     }
[13:22:18.308]                     else if (inherits(cond, "condition")) {
[13:22:18.308]                       if (!is.null(pattern)) {
[13:22:18.308]                         computeRestarts <- base::computeRestarts
[13:22:18.308]                         grepl <- base::grepl
[13:22:18.308]                         restarts <- computeRestarts(cond)
[13:22:18.308]                         for (restart in restarts) {
[13:22:18.308]                           name <- restart$name
[13:22:18.308]                           if (is.null(name)) 
[13:22:18.308]                             next
[13:22:18.308]                           if (!grepl(pattern, name)) 
[13:22:18.308]                             next
[13:22:18.308]                           invokeRestart(restart)
[13:22:18.308]                           muffled <- TRUE
[13:22:18.308]                           break
[13:22:18.308]                         }
[13:22:18.308]                       }
[13:22:18.308]                     }
[13:22:18.308]                     invisible(muffled)
[13:22:18.308]                   }
[13:22:18.308]                   muffleCondition(cond)
[13:22:18.308]                 })
[13:22:18.308]             }))
[13:22:18.308]             future::FutureResult(value = ...future.value$value, 
[13:22:18.308]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:18.308]                   ...future.rng), globalenv = if (FALSE) 
[13:22:18.308]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:18.308]                     ...future.globalenv.names))
[13:22:18.308]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:18.308]         }, condition = base::local({
[13:22:18.308]             c <- base::c
[13:22:18.308]             inherits <- base::inherits
[13:22:18.308]             invokeRestart <- base::invokeRestart
[13:22:18.308]             length <- base::length
[13:22:18.308]             list <- base::list
[13:22:18.308]             seq.int <- base::seq.int
[13:22:18.308]             signalCondition <- base::signalCondition
[13:22:18.308]             sys.calls <- base::sys.calls
[13:22:18.308]             `[[` <- base::`[[`
[13:22:18.308]             `+` <- base::`+`
[13:22:18.308]             `<<-` <- base::`<<-`
[13:22:18.308]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:18.308]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:18.308]                   3L)]
[13:22:18.308]             }
[13:22:18.308]             function(cond) {
[13:22:18.308]                 is_error <- inherits(cond, "error")
[13:22:18.308]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:18.308]                   NULL)
[13:22:18.308]                 if (is_error) {
[13:22:18.308]                   sessionInformation <- function() {
[13:22:18.308]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:18.308]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:18.308]                       search = base::search(), system = base::Sys.info())
[13:22:18.308]                   }
[13:22:18.308]                   ...future.conditions[[length(...future.conditions) + 
[13:22:18.308]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:18.308]                     cond$call), session = sessionInformation(), 
[13:22:18.308]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:18.308]                   signalCondition(cond)
[13:22:18.308]                 }
[13:22:18.308]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:18.308]                 "immediateCondition"))) {
[13:22:18.308]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:18.308]                   ...future.conditions[[length(...future.conditions) + 
[13:22:18.308]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:18.308]                   if (TRUE && !signal) {
[13:22:18.308]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.308]                     {
[13:22:18.308]                       inherits <- base::inherits
[13:22:18.308]                       invokeRestart <- base::invokeRestart
[13:22:18.308]                       is.null <- base::is.null
[13:22:18.308]                       muffled <- FALSE
[13:22:18.308]                       if (inherits(cond, "message")) {
[13:22:18.308]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:18.308]                         if (muffled) 
[13:22:18.308]                           invokeRestart("muffleMessage")
[13:22:18.308]                       }
[13:22:18.308]                       else if (inherits(cond, "warning")) {
[13:22:18.308]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:18.308]                         if (muffled) 
[13:22:18.308]                           invokeRestart("muffleWarning")
[13:22:18.308]                       }
[13:22:18.308]                       else if (inherits(cond, "condition")) {
[13:22:18.308]                         if (!is.null(pattern)) {
[13:22:18.308]                           computeRestarts <- base::computeRestarts
[13:22:18.308]                           grepl <- base::grepl
[13:22:18.308]                           restarts <- computeRestarts(cond)
[13:22:18.308]                           for (restart in restarts) {
[13:22:18.308]                             name <- restart$name
[13:22:18.308]                             if (is.null(name)) 
[13:22:18.308]                               next
[13:22:18.308]                             if (!grepl(pattern, name)) 
[13:22:18.308]                               next
[13:22:18.308]                             invokeRestart(restart)
[13:22:18.308]                             muffled <- TRUE
[13:22:18.308]                             break
[13:22:18.308]                           }
[13:22:18.308]                         }
[13:22:18.308]                       }
[13:22:18.308]                       invisible(muffled)
[13:22:18.308]                     }
[13:22:18.308]                     muffleCondition(cond, pattern = "^muffle")
[13:22:18.308]                   }
[13:22:18.308]                 }
[13:22:18.308]                 else {
[13:22:18.308]                   if (TRUE) {
[13:22:18.308]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:18.308]                     {
[13:22:18.308]                       inherits <- base::inherits
[13:22:18.308]                       invokeRestart <- base::invokeRestart
[13:22:18.308]                       is.null <- base::is.null
[13:22:18.308]                       muffled <- FALSE
[13:22:18.308]                       if (inherits(cond, "message")) {
[13:22:18.308]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:18.308]                         if (muffled) 
[13:22:18.308]                           invokeRestart("muffleMessage")
[13:22:18.308]                       }
[13:22:18.308]                       else if (inherits(cond, "warning")) {
[13:22:18.308]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:18.308]                         if (muffled) 
[13:22:18.308]                           invokeRestart("muffleWarning")
[13:22:18.308]                       }
[13:22:18.308]                       else if (inherits(cond, "condition")) {
[13:22:18.308]                         if (!is.null(pattern)) {
[13:22:18.308]                           computeRestarts <- base::computeRestarts
[13:22:18.308]                           grepl <- base::grepl
[13:22:18.308]                           restarts <- computeRestarts(cond)
[13:22:18.308]                           for (restart in restarts) {
[13:22:18.308]                             name <- restart$name
[13:22:18.308]                             if (is.null(name)) 
[13:22:18.308]                               next
[13:22:18.308]                             if (!grepl(pattern, name)) 
[13:22:18.308]                               next
[13:22:18.308]                             invokeRestart(restart)
[13:22:18.308]                             muffled <- TRUE
[13:22:18.308]                             break
[13:22:18.308]                           }
[13:22:18.308]                         }
[13:22:18.308]                       }
[13:22:18.308]                       invisible(muffled)
[13:22:18.308]                     }
[13:22:18.308]                     muffleCondition(cond, pattern = "^muffle")
[13:22:18.308]                   }
[13:22:18.308]                 }
[13:22:18.308]             }
[13:22:18.308]         }))
[13:22:18.308]     }, error = function(ex) {
[13:22:18.308]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:18.308]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:18.308]                 ...future.rng), started = ...future.startTime, 
[13:22:18.308]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:18.308]             version = "1.8"), class = "FutureResult")
[13:22:18.308]     }, finally = {
[13:22:18.308]         if (!identical(...future.workdir, getwd())) 
[13:22:18.308]             setwd(...future.workdir)
[13:22:18.308]         {
[13:22:18.308]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:18.308]                 ...future.oldOptions$nwarnings <- NULL
[13:22:18.308]             }
[13:22:18.308]             base::options(...future.oldOptions)
[13:22:18.308]             if (.Platform$OS.type == "windows") {
[13:22:18.308]                 old_names <- names(...future.oldEnvVars)
[13:22:18.308]                 envs <- base::Sys.getenv()
[13:22:18.308]                 names <- names(envs)
[13:22:18.308]                 common <- intersect(names, old_names)
[13:22:18.308]                 added <- setdiff(names, old_names)
[13:22:18.308]                 removed <- setdiff(old_names, names)
[13:22:18.308]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:18.308]                   envs[common]]
[13:22:18.308]                 NAMES <- toupper(changed)
[13:22:18.308]                 args <- list()
[13:22:18.308]                 for (kk in seq_along(NAMES)) {
[13:22:18.308]                   name <- changed[[kk]]
[13:22:18.308]                   NAME <- NAMES[[kk]]
[13:22:18.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.308]                     next
[13:22:18.308]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:18.308]                 }
[13:22:18.308]                 NAMES <- toupper(added)
[13:22:18.308]                 for (kk in seq_along(NAMES)) {
[13:22:18.308]                   name <- added[[kk]]
[13:22:18.308]                   NAME <- NAMES[[kk]]
[13:22:18.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.308]                     next
[13:22:18.308]                   args[[name]] <- ""
[13:22:18.308]                 }
[13:22:18.308]                 NAMES <- toupper(removed)
[13:22:18.308]                 for (kk in seq_along(NAMES)) {
[13:22:18.308]                   name <- removed[[kk]]
[13:22:18.308]                   NAME <- NAMES[[kk]]
[13:22:18.308]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:18.308]                     next
[13:22:18.308]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:18.308]                 }
[13:22:18.308]                 if (length(args) > 0) 
[13:22:18.308]                   base::do.call(base::Sys.setenv, args = args)
[13:22:18.308]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:18.308]             }
[13:22:18.308]             else {
[13:22:18.308]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:18.308]             }
[13:22:18.308]             {
[13:22:18.308]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:18.308]                   0L) {
[13:22:18.308]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:18.308]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:18.308]                   base::options(opts)
[13:22:18.308]                 }
[13:22:18.308]                 {
[13:22:18.308]                   {
[13:22:18.308]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:18.308]                     NULL
[13:22:18.308]                   }
[13:22:18.308]                   options(future.plan = NULL)
[13:22:18.308]                   if (is.na(NA_character_)) 
[13:22:18.308]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:18.308]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:18.308]                   future::plan(list(function (..., workers = 2L, 
[13:22:18.308]                     envir = parent.frame()) 
[13:22:18.308]                   strategy(..., workers = workers, envir = envir)), 
[13:22:18.308]                     .cleanup = FALSE, .init = FALSE)
[13:22:18.308]                 }
[13:22:18.308]             }
[13:22:18.308]         }
[13:22:18.308]     })
[13:22:18.308]     if (TRUE) {
[13:22:18.308]         base::sink(type = "output", split = FALSE)
[13:22:18.308]         if (TRUE) {
[13:22:18.308]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:18.308]         }
[13:22:18.308]         else {
[13:22:18.308]             ...future.result["stdout"] <- base::list(NULL)
[13:22:18.308]         }
[13:22:18.308]         base::close(...future.stdout)
[13:22:18.308]         ...future.stdout <- NULL
[13:22:18.308]     }
[13:22:18.308]     ...future.result$conditions <- ...future.conditions
[13:22:18.308]     ...future.result$finished <- base::Sys.time()
[13:22:18.308]     ...future.result
[13:22:18.308] }
[13:22:18.312] MultisessionFuture started
[13:22:18.312] - Launch lazy future ... done
[13:22:18.312] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[13:22:21.366] receiveMessageFromWorker() for ClusterFuture ...
[13:22:21.367] - Validating connection of MultisessionFuture
[13:22:21.367] - received message: FutureResult
[13:22:21.367] - Received FutureResult
[13:22:21.367] - Erased future from FutureRegistry
[13:22:21.367] result() for ClusterFuture ...
[13:22:21.368] - result already collected: FutureResult
[13:22:21.368] result() for ClusterFuture ... done
[13:22:21.368] signalConditions() ...
[13:22:21.368]  - include = ‘immediateCondition’
[13:22:21.368]  - exclude = 
[13:22:21.368]  - resignal = FALSE
[13:22:21.368]  - Number of conditions: 1
[13:22:21.368] signalConditions() ... done
[13:22:21.368] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:21.368] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: c93d62e1-fcaa-0ec5-7bb1-479b0729f13f
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[13:22:21.370] plan(): Setting new future strategy stack:
[13:22:21.370] List of future strategies:
[13:22:21.370] 1. FutureStrategy:
[13:22:21.370]    - args: function (..., envir = parent.frame())
[13:22:21.370]    - tweaked: FALSE
[13:22:21.370]    - call: future::plan(oplan)
[13:22:21.371] plan(): nbrOfWorkers() = 1
> 
