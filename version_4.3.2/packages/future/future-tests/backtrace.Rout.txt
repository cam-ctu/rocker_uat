
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:00.785] plan(): Setting new future strategy stack:
[10:25:00.786] List of future strategies:
[10:25:00.786] 1. sequential:
[10:25:00.786]    - args: function (..., envir = parent.frame())
[10:25:00.786]    - tweaked: FALSE
[10:25:00.786]    - call: future::plan("sequential")
[10:25:00.800] plan(): nbrOfWorkers() = 1
> 
> message("*** backtrace( ) ...")
*** backtrace( ) ...
> 
> message("*** backtrace( ) - explicit future ...")
*** backtrace( ) - explicit future ...
> 
> f <- future({ 42L; stop("Woops") })
[10:25:00.811] getGlobalsAndPackages() ...
[10:25:00.811] Searching for globals...
[10:25:00.818] - globals found: [2] ‘{’, ‘stop’
[10:25:00.818] Searching for globals ... DONE
[10:25:00.818] Resolving globals: FALSE
[10:25:00.818] 
[10:25:00.819] 
[10:25:00.819] getGlobalsAndPackages() ... DONE
[10:25:00.819] run() for ‘Future’ ...
[10:25:00.820] - state: ‘created’
[10:25:00.820] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.820] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.820] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.820]   - Field: ‘label’
[10:25:00.820]   - Field: ‘local’
[10:25:00.821]   - Field: ‘owner’
[10:25:00.821]   - Field: ‘envir’
[10:25:00.821]   - Field: ‘packages’
[10:25:00.821]   - Field: ‘gc’
[10:25:00.821]   - Field: ‘conditions’
[10:25:00.821]   - Field: ‘expr’
[10:25:00.821]   - Field: ‘uuid’
[10:25:00.821]   - Field: ‘seed’
[10:25:00.821]   - Field: ‘version’
[10:25:00.821]   - Field: ‘result’
[10:25:00.821]   - Field: ‘asynchronous’
[10:25:00.822]   - Field: ‘calls’
[10:25:00.822]   - Field: ‘globals’
[10:25:00.822]   - Field: ‘stdout’
[10:25:00.822]   - Field: ‘earlySignal’
[10:25:00.822]   - Field: ‘lazy’
[10:25:00.822]   - Field: ‘state’
[10:25:00.822] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.822] - Launch lazy future ...
[10:25:00.823] Packages needed by the future expression (n = 0): <none>
[10:25:00.823] Packages needed by future strategies (n = 0): <none>
[10:25:00.824] {
[10:25:00.824]     {
[10:25:00.824]         {
[10:25:00.824]             ...future.startTime <- base::Sys.time()
[10:25:00.824]             {
[10:25:00.824]                 {
[10:25:00.824]                   {
[10:25:00.824]                     base::local({
[10:25:00.824]                       has_future <- base::requireNamespace("future", 
[10:25:00.824]                         quietly = TRUE)
[10:25:00.824]                       if (has_future) {
[10:25:00.824]                         ns <- base::getNamespace("future")
[10:25:00.824]                         version <- ns[[".package"]][["version"]]
[10:25:00.824]                         if (is.null(version)) 
[10:25:00.824]                           version <- utils::packageVersion("future")
[10:25:00.824]                       }
[10:25:00.824]                       else {
[10:25:00.824]                         version <- NULL
[10:25:00.824]                       }
[10:25:00.824]                       if (!has_future || version < "1.8.0") {
[10:25:00.824]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.824]                           "", base::R.version$version.string), 
[10:25:00.824]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.824]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.824]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.824]                             "release", "version")], collapse = " "), 
[10:25:00.824]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.824]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.824]                           info)
[10:25:00.824]                         info <- base::paste(info, collapse = "; ")
[10:25:00.824]                         if (!has_future) {
[10:25:00.824]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.824]                             info)
[10:25:00.824]                         }
[10:25:00.824]                         else {
[10:25:00.824]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.824]                             info, version)
[10:25:00.824]                         }
[10:25:00.824]                         base::stop(msg)
[10:25:00.824]                       }
[10:25:00.824]                     })
[10:25:00.824]                   }
[10:25:00.824]                   options(future.plan = NULL)
[10:25:00.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.824]                 }
[10:25:00.824]                 ...future.workdir <- getwd()
[10:25:00.824]             }
[10:25:00.824]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.824]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.824]         }
[10:25:00.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.824]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.824]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.824]             base::names(...future.oldOptions))
[10:25:00.824]     }
[10:25:00.824]     if (FALSE) {
[10:25:00.824]     }
[10:25:00.824]     else {
[10:25:00.824]         if (TRUE) {
[10:25:00.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.824]                 open = "w")
[10:25:00.824]         }
[10:25:00.824]         else {
[10:25:00.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.824]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.824]         }
[10:25:00.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.824]             base::sink(type = "output", split = FALSE)
[10:25:00.824]             base::close(...future.stdout)
[10:25:00.824]         }, add = TRUE)
[10:25:00.824]     }
[10:25:00.824]     ...future.frame <- base::sys.nframe()
[10:25:00.824]     ...future.conditions <- base::list()
[10:25:00.824]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.824]     if (FALSE) {
[10:25:00.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.824]     }
[10:25:00.824]     ...future.result <- base::tryCatch({
[10:25:00.824]         base::withCallingHandlers({
[10:25:00.824]             ...future.value <- base::withVisible(base::local({
[10:25:00.824]                 42L
[10:25:00.824]                 stop("Woops")
[10:25:00.824]             }))
[10:25:00.824]             future::FutureResult(value = ...future.value$value, 
[10:25:00.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.824]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.824]                     ...future.globalenv.names))
[10:25:00.824]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.824]         }, condition = base::local({
[10:25:00.824]             c <- base::c
[10:25:00.824]             inherits <- base::inherits
[10:25:00.824]             invokeRestart <- base::invokeRestart
[10:25:00.824]             length <- base::length
[10:25:00.824]             list <- base::list
[10:25:00.824]             seq.int <- base::seq.int
[10:25:00.824]             signalCondition <- base::signalCondition
[10:25:00.824]             sys.calls <- base::sys.calls
[10:25:00.824]             `[[` <- base::`[[`
[10:25:00.824]             `+` <- base::`+`
[10:25:00.824]             `<<-` <- base::`<<-`
[10:25:00.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.824]                   3L)]
[10:25:00.824]             }
[10:25:00.824]             function(cond) {
[10:25:00.824]                 is_error <- inherits(cond, "error")
[10:25:00.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.824]                   NULL)
[10:25:00.824]                 if (is_error) {
[10:25:00.824]                   sessionInformation <- function() {
[10:25:00.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.824]                       search = base::search(), system = base::Sys.info())
[10:25:00.824]                   }
[10:25:00.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.824]                     cond$call), session = sessionInformation(), 
[10:25:00.824]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.824]                   signalCondition(cond)
[10:25:00.824]                 }
[10:25:00.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.824]                 "immediateCondition"))) {
[10:25:00.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.824]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.824]                   if (TRUE && !signal) {
[10:25:00.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.824]                     {
[10:25:00.824]                       inherits <- base::inherits
[10:25:00.824]                       invokeRestart <- base::invokeRestart
[10:25:00.824]                       is.null <- base::is.null
[10:25:00.824]                       muffled <- FALSE
[10:25:00.824]                       if (inherits(cond, "message")) {
[10:25:00.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.824]                         if (muffled) 
[10:25:00.824]                           invokeRestart("muffleMessage")
[10:25:00.824]                       }
[10:25:00.824]                       else if (inherits(cond, "warning")) {
[10:25:00.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.824]                         if (muffled) 
[10:25:00.824]                           invokeRestart("muffleWarning")
[10:25:00.824]                       }
[10:25:00.824]                       else if (inherits(cond, "condition")) {
[10:25:00.824]                         if (!is.null(pattern)) {
[10:25:00.824]                           computeRestarts <- base::computeRestarts
[10:25:00.824]                           grepl <- base::grepl
[10:25:00.824]                           restarts <- computeRestarts(cond)
[10:25:00.824]                           for (restart in restarts) {
[10:25:00.824]                             name <- restart$name
[10:25:00.824]                             if (is.null(name)) 
[10:25:00.824]                               next
[10:25:00.824]                             if (!grepl(pattern, name)) 
[10:25:00.824]                               next
[10:25:00.824]                             invokeRestart(restart)
[10:25:00.824]                             muffled <- TRUE
[10:25:00.824]                             break
[10:25:00.824]                           }
[10:25:00.824]                         }
[10:25:00.824]                       }
[10:25:00.824]                       invisible(muffled)
[10:25:00.824]                     }
[10:25:00.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.824]                   }
[10:25:00.824]                 }
[10:25:00.824]                 else {
[10:25:00.824]                   if (TRUE) {
[10:25:00.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.824]                     {
[10:25:00.824]                       inherits <- base::inherits
[10:25:00.824]                       invokeRestart <- base::invokeRestart
[10:25:00.824]                       is.null <- base::is.null
[10:25:00.824]                       muffled <- FALSE
[10:25:00.824]                       if (inherits(cond, "message")) {
[10:25:00.824]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.824]                         if (muffled) 
[10:25:00.824]                           invokeRestart("muffleMessage")
[10:25:00.824]                       }
[10:25:00.824]                       else if (inherits(cond, "warning")) {
[10:25:00.824]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.824]                         if (muffled) 
[10:25:00.824]                           invokeRestart("muffleWarning")
[10:25:00.824]                       }
[10:25:00.824]                       else if (inherits(cond, "condition")) {
[10:25:00.824]                         if (!is.null(pattern)) {
[10:25:00.824]                           computeRestarts <- base::computeRestarts
[10:25:00.824]                           grepl <- base::grepl
[10:25:00.824]                           restarts <- computeRestarts(cond)
[10:25:00.824]                           for (restart in restarts) {
[10:25:00.824]                             name <- restart$name
[10:25:00.824]                             if (is.null(name)) 
[10:25:00.824]                               next
[10:25:00.824]                             if (!grepl(pattern, name)) 
[10:25:00.824]                               next
[10:25:00.824]                             invokeRestart(restart)
[10:25:00.824]                             muffled <- TRUE
[10:25:00.824]                             break
[10:25:00.824]                           }
[10:25:00.824]                         }
[10:25:00.824]                       }
[10:25:00.824]                       invisible(muffled)
[10:25:00.824]                     }
[10:25:00.824]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.824]                   }
[10:25:00.824]                 }
[10:25:00.824]             }
[10:25:00.824]         }))
[10:25:00.824]     }, error = function(ex) {
[10:25:00.824]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.824]                 ...future.rng), started = ...future.startTime, 
[10:25:00.824]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.824]             version = "1.8"), class = "FutureResult")
[10:25:00.824]     }, finally = {
[10:25:00.824]         if (!identical(...future.workdir, getwd())) 
[10:25:00.824]             setwd(...future.workdir)
[10:25:00.824]         {
[10:25:00.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.824]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.824]             }
[10:25:00.824]             base::options(...future.oldOptions)
[10:25:00.824]             if (.Platform$OS.type == "windows") {
[10:25:00.824]                 old_names <- names(...future.oldEnvVars)
[10:25:00.824]                 envs <- base::Sys.getenv()
[10:25:00.824]                 names <- names(envs)
[10:25:00.824]                 common <- intersect(names, old_names)
[10:25:00.824]                 added <- setdiff(names, old_names)
[10:25:00.824]                 removed <- setdiff(old_names, names)
[10:25:00.824]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.824]                   envs[common]]
[10:25:00.824]                 NAMES <- toupper(changed)
[10:25:00.824]                 args <- list()
[10:25:00.824]                 for (kk in seq_along(NAMES)) {
[10:25:00.824]                   name <- changed[[kk]]
[10:25:00.824]                   NAME <- NAMES[[kk]]
[10:25:00.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.824]                     next
[10:25:00.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.824]                 }
[10:25:00.824]                 NAMES <- toupper(added)
[10:25:00.824]                 for (kk in seq_along(NAMES)) {
[10:25:00.824]                   name <- added[[kk]]
[10:25:00.824]                   NAME <- NAMES[[kk]]
[10:25:00.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.824]                     next
[10:25:00.824]                   args[[name]] <- ""
[10:25:00.824]                 }
[10:25:00.824]                 NAMES <- toupper(removed)
[10:25:00.824]                 for (kk in seq_along(NAMES)) {
[10:25:00.824]                   name <- removed[[kk]]
[10:25:00.824]                   NAME <- NAMES[[kk]]
[10:25:00.824]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.824]                     next
[10:25:00.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.824]                 }
[10:25:00.824]                 if (length(args) > 0) 
[10:25:00.824]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.824]             }
[10:25:00.824]             else {
[10:25:00.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.824]             }
[10:25:00.824]             {
[10:25:00.824]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.824]                   0L) {
[10:25:00.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.824]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.824]                   base::options(opts)
[10:25:00.824]                 }
[10:25:00.824]                 {
[10:25:00.824]                   {
[10:25:00.824]                     NULL
[10:25:00.824]                     RNGkind("Mersenne-Twister")
[10:25:00.824]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.824]                       inherits = FALSE)
[10:25:00.824]                   }
[10:25:00.824]                   options(future.plan = NULL)
[10:25:00.824]                   if (is.na(NA_character_)) 
[10:25:00.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.824]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.824]                   {
[10:25:00.824]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.824]                     if (!future$lazy) 
[10:25:00.824]                       future <- run(future)
[10:25:00.824]                     invisible(future)
[10:25:00.824]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.824]                 }
[10:25:00.824]             }
[10:25:00.824]         }
[10:25:00.824]     })
[10:25:00.824]     if (TRUE) {
[10:25:00.824]         base::sink(type = "output", split = FALSE)
[10:25:00.824]         if (TRUE) {
[10:25:00.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.824]         }
[10:25:00.824]         else {
[10:25:00.824]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.824]         }
[10:25:00.824]         base::close(...future.stdout)
[10:25:00.824]         ...future.stdout <- NULL
[10:25:00.824]     }
[10:25:00.824]     ...future.result$conditions <- ...future.conditions
[10:25:00.824]     ...future.result$finished <- base::Sys.time()
[10:25:00.824]     ...future.result
[10:25:00.824] }
[10:25:00.826] plan(): Setting new future strategy stack:
[10:25:00.826] List of future strategies:
[10:25:00.826] 1. sequential:
[10:25:00.826]    - args: function (..., envir = parent.frame())
[10:25:00.826]    - tweaked: FALSE
[10:25:00.826]    - call: NULL
[10:25:00.826] plan(): nbrOfWorkers() = 1
[10:25:00.827] plan(): Setting new future strategy stack:
[10:25:00.827] List of future strategies:
[10:25:00.827] 1. sequential:
[10:25:00.827]    - args: function (..., envir = parent.frame())
[10:25:00.827]    - tweaked: FALSE
[10:25:00.827]    - call: future::plan("sequential")
[10:25:00.828] plan(): nbrOfWorkers() = 1
[10:25:00.828] SequentialFuture started (and completed)
[10:25:00.828] signalConditions() ...
[10:25:00.829]  - include = ‘immediateCondition’
[10:25:00.829]  - exclude = 
[10:25:00.829]  - resignal = FALSE
[10:25:00.829]  - Number of conditions: 1
[10:25:00.829] signalConditions() ... done
[10:25:00.829] - Launch lazy future ... done
[10:25:00.829] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[10:25:00.830] signalConditions() ...
[10:25:00.830]  - include = ‘immediateCondition’
[10:25:00.830]  - exclude = 
[10:25:00.830]  - resignal = FALSE
[10:25:00.830]  - Number of conditions: 1
[10:25:00.830] signalConditions() ... done
> print(v)
<simpleError in eval(quote({    42L    stop("Woops")}), new.env()): Woops>
> calls <- backtrace(f)
[10:25:00.831] resolved() for ‘SequentialFuture’ ...
[10:25:00.831] - state: ‘finished’
[10:25:00.832] - run: TRUE
[10:25:00.832] - result: ‘FutureResult’
[10:25:00.832] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - explicit future ... DONE")
*** backtrace( ) - explicit future ... DONE
> 
> 
> message("*** backtrace( ) - implicit future ...")
*** backtrace( ) - implicit future ...
> 
> v %<-% { 42L; stop("Woops") }
[10:25:00.833] getGlobalsAndPackages() ...
[10:25:00.833] Searching for globals...
[10:25:00.834] - globals found: [2] ‘{’, ‘stop’
[10:25:00.834] Searching for globals ... DONE
[10:25:00.834] Resolving globals: FALSE
[10:25:00.834] 
[10:25:00.834] 
[10:25:00.834] getGlobalsAndPackages() ... DONE
[10:25:00.834] run() for ‘Future’ ...
[10:25:00.835] - state: ‘created’
[10:25:00.835] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.835] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.835] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.835]   - Field: ‘label’
[10:25:00.835]   - Field: ‘local’
[10:25:00.835]   - Field: ‘owner’
[10:25:00.835]   - Field: ‘envir’
[10:25:00.836]   - Field: ‘packages’
[10:25:00.836]   - Field: ‘gc’
[10:25:00.836]   - Field: ‘conditions’
[10:25:00.836]   - Field: ‘expr’
[10:25:00.836]   - Field: ‘uuid’
[10:25:00.836]   - Field: ‘seed’
[10:25:00.836]   - Field: ‘version’
[10:25:00.836]   - Field: ‘result’
[10:25:00.836]   - Field: ‘asynchronous’
[10:25:00.836]   - Field: ‘calls’
[10:25:00.836]   - Field: ‘globals’
[10:25:00.837]   - Field: ‘stdout’
[10:25:00.837]   - Field: ‘earlySignal’
[10:25:00.837]   - Field: ‘lazy’
[10:25:00.837]   - Field: ‘state’
[10:25:00.837] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.837] - Launch lazy future ...
[10:25:00.837] Packages needed by the future expression (n = 0): <none>
[10:25:00.837] Packages needed by future strategies (n = 0): <none>
[10:25:00.838] {
[10:25:00.838]     {
[10:25:00.838]         {
[10:25:00.838]             ...future.startTime <- base::Sys.time()
[10:25:00.838]             {
[10:25:00.838]                 {
[10:25:00.838]                   {
[10:25:00.838]                     base::local({
[10:25:00.838]                       has_future <- base::requireNamespace("future", 
[10:25:00.838]                         quietly = TRUE)
[10:25:00.838]                       if (has_future) {
[10:25:00.838]                         ns <- base::getNamespace("future")
[10:25:00.838]                         version <- ns[[".package"]][["version"]]
[10:25:00.838]                         if (is.null(version)) 
[10:25:00.838]                           version <- utils::packageVersion("future")
[10:25:00.838]                       }
[10:25:00.838]                       else {
[10:25:00.838]                         version <- NULL
[10:25:00.838]                       }
[10:25:00.838]                       if (!has_future || version < "1.8.0") {
[10:25:00.838]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.838]                           "", base::R.version$version.string), 
[10:25:00.838]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.838]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.838]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.838]                             "release", "version")], collapse = " "), 
[10:25:00.838]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.838]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.838]                           info)
[10:25:00.838]                         info <- base::paste(info, collapse = "; ")
[10:25:00.838]                         if (!has_future) {
[10:25:00.838]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.838]                             info)
[10:25:00.838]                         }
[10:25:00.838]                         else {
[10:25:00.838]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.838]                             info, version)
[10:25:00.838]                         }
[10:25:00.838]                         base::stop(msg)
[10:25:00.838]                       }
[10:25:00.838]                     })
[10:25:00.838]                   }
[10:25:00.838]                   options(future.plan = NULL)
[10:25:00.838]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.838]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.838]                 }
[10:25:00.838]                 ...future.workdir <- getwd()
[10:25:00.838]             }
[10:25:00.838]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.838]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.838]         }
[10:25:00.838]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.838]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.838]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.838]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.838]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.838]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.838]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.838]             base::names(...future.oldOptions))
[10:25:00.838]     }
[10:25:00.838]     if (FALSE) {
[10:25:00.838]     }
[10:25:00.838]     else {
[10:25:00.838]         if (TRUE) {
[10:25:00.838]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.838]                 open = "w")
[10:25:00.838]         }
[10:25:00.838]         else {
[10:25:00.838]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.838]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.838]         }
[10:25:00.838]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.838]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.838]             base::sink(type = "output", split = FALSE)
[10:25:00.838]             base::close(...future.stdout)
[10:25:00.838]         }, add = TRUE)
[10:25:00.838]     }
[10:25:00.838]     ...future.frame <- base::sys.nframe()
[10:25:00.838]     ...future.conditions <- base::list()
[10:25:00.838]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.838]     if (FALSE) {
[10:25:00.838]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.838]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.838]     }
[10:25:00.838]     ...future.result <- base::tryCatch({
[10:25:00.838]         base::withCallingHandlers({
[10:25:00.838]             ...future.value <- base::withVisible(base::local({
[10:25:00.838]                 42L
[10:25:00.838]                 stop("Woops")
[10:25:00.838]             }))
[10:25:00.838]             future::FutureResult(value = ...future.value$value, 
[10:25:00.838]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.838]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.838]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.838]                     ...future.globalenv.names))
[10:25:00.838]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.838]         }, condition = base::local({
[10:25:00.838]             c <- base::c
[10:25:00.838]             inherits <- base::inherits
[10:25:00.838]             invokeRestart <- base::invokeRestart
[10:25:00.838]             length <- base::length
[10:25:00.838]             list <- base::list
[10:25:00.838]             seq.int <- base::seq.int
[10:25:00.838]             signalCondition <- base::signalCondition
[10:25:00.838]             sys.calls <- base::sys.calls
[10:25:00.838]             `[[` <- base::`[[`
[10:25:00.838]             `+` <- base::`+`
[10:25:00.838]             `<<-` <- base::`<<-`
[10:25:00.838]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.838]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.838]                   3L)]
[10:25:00.838]             }
[10:25:00.838]             function(cond) {
[10:25:00.838]                 is_error <- inherits(cond, "error")
[10:25:00.838]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.838]                   NULL)
[10:25:00.838]                 if (is_error) {
[10:25:00.838]                   sessionInformation <- function() {
[10:25:00.838]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.838]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.838]                       search = base::search(), system = base::Sys.info())
[10:25:00.838]                   }
[10:25:00.838]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.838]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.838]                     cond$call), session = sessionInformation(), 
[10:25:00.838]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.838]                   signalCondition(cond)
[10:25:00.838]                 }
[10:25:00.838]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.838]                 "immediateCondition"))) {
[10:25:00.838]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.838]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.838]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.838]                   if (TRUE && !signal) {
[10:25:00.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.838]                     {
[10:25:00.838]                       inherits <- base::inherits
[10:25:00.838]                       invokeRestart <- base::invokeRestart
[10:25:00.838]                       is.null <- base::is.null
[10:25:00.838]                       muffled <- FALSE
[10:25:00.838]                       if (inherits(cond, "message")) {
[10:25:00.838]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.838]                         if (muffled) 
[10:25:00.838]                           invokeRestart("muffleMessage")
[10:25:00.838]                       }
[10:25:00.838]                       else if (inherits(cond, "warning")) {
[10:25:00.838]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.838]                         if (muffled) 
[10:25:00.838]                           invokeRestart("muffleWarning")
[10:25:00.838]                       }
[10:25:00.838]                       else if (inherits(cond, "condition")) {
[10:25:00.838]                         if (!is.null(pattern)) {
[10:25:00.838]                           computeRestarts <- base::computeRestarts
[10:25:00.838]                           grepl <- base::grepl
[10:25:00.838]                           restarts <- computeRestarts(cond)
[10:25:00.838]                           for (restart in restarts) {
[10:25:00.838]                             name <- restart$name
[10:25:00.838]                             if (is.null(name)) 
[10:25:00.838]                               next
[10:25:00.838]                             if (!grepl(pattern, name)) 
[10:25:00.838]                               next
[10:25:00.838]                             invokeRestart(restart)
[10:25:00.838]                             muffled <- TRUE
[10:25:00.838]                             break
[10:25:00.838]                           }
[10:25:00.838]                         }
[10:25:00.838]                       }
[10:25:00.838]                       invisible(muffled)
[10:25:00.838]                     }
[10:25:00.838]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.838]                   }
[10:25:00.838]                 }
[10:25:00.838]                 else {
[10:25:00.838]                   if (TRUE) {
[10:25:00.838]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.838]                     {
[10:25:00.838]                       inherits <- base::inherits
[10:25:00.838]                       invokeRestart <- base::invokeRestart
[10:25:00.838]                       is.null <- base::is.null
[10:25:00.838]                       muffled <- FALSE
[10:25:00.838]                       if (inherits(cond, "message")) {
[10:25:00.838]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.838]                         if (muffled) 
[10:25:00.838]                           invokeRestart("muffleMessage")
[10:25:00.838]                       }
[10:25:00.838]                       else if (inherits(cond, "warning")) {
[10:25:00.838]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.838]                         if (muffled) 
[10:25:00.838]                           invokeRestart("muffleWarning")
[10:25:00.838]                       }
[10:25:00.838]                       else if (inherits(cond, "condition")) {
[10:25:00.838]                         if (!is.null(pattern)) {
[10:25:00.838]                           computeRestarts <- base::computeRestarts
[10:25:00.838]                           grepl <- base::grepl
[10:25:00.838]                           restarts <- computeRestarts(cond)
[10:25:00.838]                           for (restart in restarts) {
[10:25:00.838]                             name <- restart$name
[10:25:00.838]                             if (is.null(name)) 
[10:25:00.838]                               next
[10:25:00.838]                             if (!grepl(pattern, name)) 
[10:25:00.838]                               next
[10:25:00.838]                             invokeRestart(restart)
[10:25:00.838]                             muffled <- TRUE
[10:25:00.838]                             break
[10:25:00.838]                           }
[10:25:00.838]                         }
[10:25:00.838]                       }
[10:25:00.838]                       invisible(muffled)
[10:25:00.838]                     }
[10:25:00.838]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.838]                   }
[10:25:00.838]                 }
[10:25:00.838]             }
[10:25:00.838]         }))
[10:25:00.838]     }, error = function(ex) {
[10:25:00.838]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.838]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.838]                 ...future.rng), started = ...future.startTime, 
[10:25:00.838]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.838]             version = "1.8"), class = "FutureResult")
[10:25:00.838]     }, finally = {
[10:25:00.838]         if (!identical(...future.workdir, getwd())) 
[10:25:00.838]             setwd(...future.workdir)
[10:25:00.838]         {
[10:25:00.838]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.838]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.838]             }
[10:25:00.838]             base::options(...future.oldOptions)
[10:25:00.838]             if (.Platform$OS.type == "windows") {
[10:25:00.838]                 old_names <- names(...future.oldEnvVars)
[10:25:00.838]                 envs <- base::Sys.getenv()
[10:25:00.838]                 names <- names(envs)
[10:25:00.838]                 common <- intersect(names, old_names)
[10:25:00.838]                 added <- setdiff(names, old_names)
[10:25:00.838]                 removed <- setdiff(old_names, names)
[10:25:00.838]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.838]                   envs[common]]
[10:25:00.838]                 NAMES <- toupper(changed)
[10:25:00.838]                 args <- list()
[10:25:00.838]                 for (kk in seq_along(NAMES)) {
[10:25:00.838]                   name <- changed[[kk]]
[10:25:00.838]                   NAME <- NAMES[[kk]]
[10:25:00.838]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.838]                     next
[10:25:00.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.838]                 }
[10:25:00.838]                 NAMES <- toupper(added)
[10:25:00.838]                 for (kk in seq_along(NAMES)) {
[10:25:00.838]                   name <- added[[kk]]
[10:25:00.838]                   NAME <- NAMES[[kk]]
[10:25:00.838]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.838]                     next
[10:25:00.838]                   args[[name]] <- ""
[10:25:00.838]                 }
[10:25:00.838]                 NAMES <- toupper(removed)
[10:25:00.838]                 for (kk in seq_along(NAMES)) {
[10:25:00.838]                   name <- removed[[kk]]
[10:25:00.838]                   NAME <- NAMES[[kk]]
[10:25:00.838]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.838]                     next
[10:25:00.838]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.838]                 }
[10:25:00.838]                 if (length(args) > 0) 
[10:25:00.838]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.838]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.838]             }
[10:25:00.838]             else {
[10:25:00.838]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.838]             }
[10:25:00.838]             {
[10:25:00.838]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.838]                   0L) {
[10:25:00.838]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.838]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.838]                   base::options(opts)
[10:25:00.838]                 }
[10:25:00.838]                 {
[10:25:00.838]                   {
[10:25:00.838]                     NULL
[10:25:00.838]                     RNGkind("Mersenne-Twister")
[10:25:00.838]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.838]                       inherits = FALSE)
[10:25:00.838]                   }
[10:25:00.838]                   options(future.plan = NULL)
[10:25:00.838]                   if (is.na(NA_character_)) 
[10:25:00.838]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.838]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.838]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.838]                   {
[10:25:00.838]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.838]                     if (!future$lazy) 
[10:25:00.838]                       future <- run(future)
[10:25:00.838]                     invisible(future)
[10:25:00.838]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.838]                 }
[10:25:00.838]             }
[10:25:00.838]         }
[10:25:00.838]     })
[10:25:00.838]     if (TRUE) {
[10:25:00.838]         base::sink(type = "output", split = FALSE)
[10:25:00.838]         if (TRUE) {
[10:25:00.838]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.838]         }
[10:25:00.838]         else {
[10:25:00.838]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.838]         }
[10:25:00.838]         base::close(...future.stdout)
[10:25:00.838]         ...future.stdout <- NULL
[10:25:00.838]     }
[10:25:00.838]     ...future.result$conditions <- ...future.conditions
[10:25:00.838]     ...future.result$finished <- base::Sys.time()
[10:25:00.838]     ...future.result
[10:25:00.838] }
[10:25:00.839] plan(): Setting new future strategy stack:
[10:25:00.840] List of future strategies:
[10:25:00.840] 1. sequential:
[10:25:00.840]    - args: function (..., envir = parent.frame())
[10:25:00.840]    - tweaked: FALSE
[10:25:00.840]    - call: NULL
[10:25:00.840] plan(): nbrOfWorkers() = 1
[10:25:00.841] plan(): Setting new future strategy stack:
[10:25:00.841] List of future strategies:
[10:25:00.841] 1. sequential:
[10:25:00.841]    - args: function (..., envir = parent.frame())
[10:25:00.841]    - tweaked: FALSE
[10:25:00.841]    - call: future::plan("sequential")
[10:25:00.841] plan(): nbrOfWorkers() = 1
[10:25:00.841] SequentialFuture started (and completed)
[10:25:00.842] signalConditions() ...
[10:25:00.842]  - include = ‘immediateCondition’
[10:25:00.842]  - exclude = 
[10:25:00.842]  - resignal = FALSE
[10:25:00.842]  - Number of conditions: 1
[10:25:00.842] signalConditions() ... done
[10:25:00.842] - Launch lazy future ... done
[10:25:00.842] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(v)
[10:25:00.842] resolved() for ‘SequentialFuture’ ...
[10:25:00.843] - state: ‘finished’
[10:25:00.843] - run: TRUE
[10:25:00.843] - result: ‘FutureResult’
[10:25:00.843] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
v %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> 
> message("*** backtrace( ) - implicit future ... DONE")
*** backtrace( ) - implicit future ... DONE
> 
> 
> message("*** backtrace( ) - subsetting ...")
*** backtrace( ) - subsetting ...
> 
> env <- new.env()
> env[["a"]] %<-% { 42L; stop("Woops") }
[10:25:00.844] getGlobalsAndPackages() ...
[10:25:00.844] Searching for globals...
[10:25:00.845] - globals found: [2] ‘{’, ‘stop’
[10:25:00.845] Searching for globals ... DONE
[10:25:00.845] Resolving globals: FALSE
[10:25:00.845] 
[10:25:00.845] 
[10:25:00.845] getGlobalsAndPackages() ... DONE
[10:25:00.846] run() for ‘Future’ ...
[10:25:00.846] - state: ‘created’
[10:25:00.846] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.849] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.849] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.849]   - Field: ‘label’
[10:25:00.849]   - Field: ‘local’
[10:25:00.849]   - Field: ‘owner’
[10:25:00.849]   - Field: ‘envir’
[10:25:00.849]   - Field: ‘packages’
[10:25:00.849]   - Field: ‘gc’
[10:25:00.850]   - Field: ‘conditions’
[10:25:00.850]   - Field: ‘expr’
[10:25:00.850]   - Field: ‘uuid’
[10:25:00.850]   - Field: ‘seed’
[10:25:00.850]   - Field: ‘version’
[10:25:00.850]   - Field: ‘result’
[10:25:00.850]   - Field: ‘asynchronous’
[10:25:00.850]   - Field: ‘calls’
[10:25:00.850]   - Field: ‘globals’
[10:25:00.850]   - Field: ‘stdout’
[10:25:00.850]   - Field: ‘earlySignal’
[10:25:00.851]   - Field: ‘lazy’
[10:25:00.851]   - Field: ‘state’
[10:25:00.851] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.851] - Launch lazy future ...
[10:25:00.851] Packages needed by the future expression (n = 0): <none>
[10:25:00.851] Packages needed by future strategies (n = 0): <none>
[10:25:00.852] {
[10:25:00.852]     {
[10:25:00.852]         {
[10:25:00.852]             ...future.startTime <- base::Sys.time()
[10:25:00.852]             {
[10:25:00.852]                 {
[10:25:00.852]                   {
[10:25:00.852]                     base::local({
[10:25:00.852]                       has_future <- base::requireNamespace("future", 
[10:25:00.852]                         quietly = TRUE)
[10:25:00.852]                       if (has_future) {
[10:25:00.852]                         ns <- base::getNamespace("future")
[10:25:00.852]                         version <- ns[[".package"]][["version"]]
[10:25:00.852]                         if (is.null(version)) 
[10:25:00.852]                           version <- utils::packageVersion("future")
[10:25:00.852]                       }
[10:25:00.852]                       else {
[10:25:00.852]                         version <- NULL
[10:25:00.852]                       }
[10:25:00.852]                       if (!has_future || version < "1.8.0") {
[10:25:00.852]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.852]                           "", base::R.version$version.string), 
[10:25:00.852]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.852]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.852]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.852]                             "release", "version")], collapse = " "), 
[10:25:00.852]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.852]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.852]                           info)
[10:25:00.852]                         info <- base::paste(info, collapse = "; ")
[10:25:00.852]                         if (!has_future) {
[10:25:00.852]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.852]                             info)
[10:25:00.852]                         }
[10:25:00.852]                         else {
[10:25:00.852]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.852]                             info, version)
[10:25:00.852]                         }
[10:25:00.852]                         base::stop(msg)
[10:25:00.852]                       }
[10:25:00.852]                     })
[10:25:00.852]                   }
[10:25:00.852]                   options(future.plan = NULL)
[10:25:00.852]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.852]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.852]                 }
[10:25:00.852]                 ...future.workdir <- getwd()
[10:25:00.852]             }
[10:25:00.852]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.852]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.852]         }
[10:25:00.852]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.852]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.852]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.852]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.852]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.852]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.852]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.852]             base::names(...future.oldOptions))
[10:25:00.852]     }
[10:25:00.852]     if (FALSE) {
[10:25:00.852]     }
[10:25:00.852]     else {
[10:25:00.852]         if (TRUE) {
[10:25:00.852]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.852]                 open = "w")
[10:25:00.852]         }
[10:25:00.852]         else {
[10:25:00.852]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.852]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.852]         }
[10:25:00.852]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.852]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.852]             base::sink(type = "output", split = FALSE)
[10:25:00.852]             base::close(...future.stdout)
[10:25:00.852]         }, add = TRUE)
[10:25:00.852]     }
[10:25:00.852]     ...future.frame <- base::sys.nframe()
[10:25:00.852]     ...future.conditions <- base::list()
[10:25:00.852]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.852]     if (FALSE) {
[10:25:00.852]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.852]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.852]     }
[10:25:00.852]     ...future.result <- base::tryCatch({
[10:25:00.852]         base::withCallingHandlers({
[10:25:00.852]             ...future.value <- base::withVisible(base::local({
[10:25:00.852]                 42L
[10:25:00.852]                 stop("Woops")
[10:25:00.852]             }))
[10:25:00.852]             future::FutureResult(value = ...future.value$value, 
[10:25:00.852]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.852]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.852]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.852]                     ...future.globalenv.names))
[10:25:00.852]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.852]         }, condition = base::local({
[10:25:00.852]             c <- base::c
[10:25:00.852]             inherits <- base::inherits
[10:25:00.852]             invokeRestart <- base::invokeRestart
[10:25:00.852]             length <- base::length
[10:25:00.852]             list <- base::list
[10:25:00.852]             seq.int <- base::seq.int
[10:25:00.852]             signalCondition <- base::signalCondition
[10:25:00.852]             sys.calls <- base::sys.calls
[10:25:00.852]             `[[` <- base::`[[`
[10:25:00.852]             `+` <- base::`+`
[10:25:00.852]             `<<-` <- base::`<<-`
[10:25:00.852]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.852]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.852]                   3L)]
[10:25:00.852]             }
[10:25:00.852]             function(cond) {
[10:25:00.852]                 is_error <- inherits(cond, "error")
[10:25:00.852]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.852]                   NULL)
[10:25:00.852]                 if (is_error) {
[10:25:00.852]                   sessionInformation <- function() {
[10:25:00.852]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.852]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.852]                       search = base::search(), system = base::Sys.info())
[10:25:00.852]                   }
[10:25:00.852]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.852]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.852]                     cond$call), session = sessionInformation(), 
[10:25:00.852]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.852]                   signalCondition(cond)
[10:25:00.852]                 }
[10:25:00.852]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.852]                 "immediateCondition"))) {
[10:25:00.852]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.852]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.852]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.852]                   if (TRUE && !signal) {
[10:25:00.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.852]                     {
[10:25:00.852]                       inherits <- base::inherits
[10:25:00.852]                       invokeRestart <- base::invokeRestart
[10:25:00.852]                       is.null <- base::is.null
[10:25:00.852]                       muffled <- FALSE
[10:25:00.852]                       if (inherits(cond, "message")) {
[10:25:00.852]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.852]                         if (muffled) 
[10:25:00.852]                           invokeRestart("muffleMessage")
[10:25:00.852]                       }
[10:25:00.852]                       else if (inherits(cond, "warning")) {
[10:25:00.852]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.852]                         if (muffled) 
[10:25:00.852]                           invokeRestart("muffleWarning")
[10:25:00.852]                       }
[10:25:00.852]                       else if (inherits(cond, "condition")) {
[10:25:00.852]                         if (!is.null(pattern)) {
[10:25:00.852]                           computeRestarts <- base::computeRestarts
[10:25:00.852]                           grepl <- base::grepl
[10:25:00.852]                           restarts <- computeRestarts(cond)
[10:25:00.852]                           for (restart in restarts) {
[10:25:00.852]                             name <- restart$name
[10:25:00.852]                             if (is.null(name)) 
[10:25:00.852]                               next
[10:25:00.852]                             if (!grepl(pattern, name)) 
[10:25:00.852]                               next
[10:25:00.852]                             invokeRestart(restart)
[10:25:00.852]                             muffled <- TRUE
[10:25:00.852]                             break
[10:25:00.852]                           }
[10:25:00.852]                         }
[10:25:00.852]                       }
[10:25:00.852]                       invisible(muffled)
[10:25:00.852]                     }
[10:25:00.852]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.852]                   }
[10:25:00.852]                 }
[10:25:00.852]                 else {
[10:25:00.852]                   if (TRUE) {
[10:25:00.852]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.852]                     {
[10:25:00.852]                       inherits <- base::inherits
[10:25:00.852]                       invokeRestart <- base::invokeRestart
[10:25:00.852]                       is.null <- base::is.null
[10:25:00.852]                       muffled <- FALSE
[10:25:00.852]                       if (inherits(cond, "message")) {
[10:25:00.852]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.852]                         if (muffled) 
[10:25:00.852]                           invokeRestart("muffleMessage")
[10:25:00.852]                       }
[10:25:00.852]                       else if (inherits(cond, "warning")) {
[10:25:00.852]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.852]                         if (muffled) 
[10:25:00.852]                           invokeRestart("muffleWarning")
[10:25:00.852]                       }
[10:25:00.852]                       else if (inherits(cond, "condition")) {
[10:25:00.852]                         if (!is.null(pattern)) {
[10:25:00.852]                           computeRestarts <- base::computeRestarts
[10:25:00.852]                           grepl <- base::grepl
[10:25:00.852]                           restarts <- computeRestarts(cond)
[10:25:00.852]                           for (restart in restarts) {
[10:25:00.852]                             name <- restart$name
[10:25:00.852]                             if (is.null(name)) 
[10:25:00.852]                               next
[10:25:00.852]                             if (!grepl(pattern, name)) 
[10:25:00.852]                               next
[10:25:00.852]                             invokeRestart(restart)
[10:25:00.852]                             muffled <- TRUE
[10:25:00.852]                             break
[10:25:00.852]                           }
[10:25:00.852]                         }
[10:25:00.852]                       }
[10:25:00.852]                       invisible(muffled)
[10:25:00.852]                     }
[10:25:00.852]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.852]                   }
[10:25:00.852]                 }
[10:25:00.852]             }
[10:25:00.852]         }))
[10:25:00.852]     }, error = function(ex) {
[10:25:00.852]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.852]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.852]                 ...future.rng), started = ...future.startTime, 
[10:25:00.852]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.852]             version = "1.8"), class = "FutureResult")
[10:25:00.852]     }, finally = {
[10:25:00.852]         if (!identical(...future.workdir, getwd())) 
[10:25:00.852]             setwd(...future.workdir)
[10:25:00.852]         {
[10:25:00.852]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.852]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.852]             }
[10:25:00.852]             base::options(...future.oldOptions)
[10:25:00.852]             if (.Platform$OS.type == "windows") {
[10:25:00.852]                 old_names <- names(...future.oldEnvVars)
[10:25:00.852]                 envs <- base::Sys.getenv()
[10:25:00.852]                 names <- names(envs)
[10:25:00.852]                 common <- intersect(names, old_names)
[10:25:00.852]                 added <- setdiff(names, old_names)
[10:25:00.852]                 removed <- setdiff(old_names, names)
[10:25:00.852]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.852]                   envs[common]]
[10:25:00.852]                 NAMES <- toupper(changed)
[10:25:00.852]                 args <- list()
[10:25:00.852]                 for (kk in seq_along(NAMES)) {
[10:25:00.852]                   name <- changed[[kk]]
[10:25:00.852]                   NAME <- NAMES[[kk]]
[10:25:00.852]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.852]                     next
[10:25:00.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.852]                 }
[10:25:00.852]                 NAMES <- toupper(added)
[10:25:00.852]                 for (kk in seq_along(NAMES)) {
[10:25:00.852]                   name <- added[[kk]]
[10:25:00.852]                   NAME <- NAMES[[kk]]
[10:25:00.852]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.852]                     next
[10:25:00.852]                   args[[name]] <- ""
[10:25:00.852]                 }
[10:25:00.852]                 NAMES <- toupper(removed)
[10:25:00.852]                 for (kk in seq_along(NAMES)) {
[10:25:00.852]                   name <- removed[[kk]]
[10:25:00.852]                   NAME <- NAMES[[kk]]
[10:25:00.852]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.852]                     next
[10:25:00.852]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.852]                 }
[10:25:00.852]                 if (length(args) > 0) 
[10:25:00.852]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.852]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.852]             }
[10:25:00.852]             else {
[10:25:00.852]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.852]             }
[10:25:00.852]             {
[10:25:00.852]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.852]                   0L) {
[10:25:00.852]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.852]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.852]                   base::options(opts)
[10:25:00.852]                 }
[10:25:00.852]                 {
[10:25:00.852]                   {
[10:25:00.852]                     NULL
[10:25:00.852]                     RNGkind("Mersenne-Twister")
[10:25:00.852]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.852]                       inherits = FALSE)
[10:25:00.852]                   }
[10:25:00.852]                   options(future.plan = NULL)
[10:25:00.852]                   if (is.na(NA_character_)) 
[10:25:00.852]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.852]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.852]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.852]                   {
[10:25:00.852]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.852]                     if (!future$lazy) 
[10:25:00.852]                       future <- run(future)
[10:25:00.852]                     invisible(future)
[10:25:00.852]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.852]                 }
[10:25:00.852]             }
[10:25:00.852]         }
[10:25:00.852]     })
[10:25:00.852]     if (TRUE) {
[10:25:00.852]         base::sink(type = "output", split = FALSE)
[10:25:00.852]         if (TRUE) {
[10:25:00.852]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.852]         }
[10:25:00.852]         else {
[10:25:00.852]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.852]         }
[10:25:00.852]         base::close(...future.stdout)
[10:25:00.852]         ...future.stdout <- NULL
[10:25:00.852]     }
[10:25:00.852]     ...future.result$conditions <- ...future.conditions
[10:25:00.852]     ...future.result$finished <- base::Sys.time()
[10:25:00.852]     ...future.result
[10:25:00.852] }
[10:25:00.853] plan(): Setting new future strategy stack:
[10:25:00.853] List of future strategies:
[10:25:00.853] 1. sequential:
[10:25:00.853]    - args: function (..., envir = parent.frame())
[10:25:00.853]    - tweaked: FALSE
[10:25:00.853]    - call: NULL
[10:25:00.854] plan(): nbrOfWorkers() = 1
[10:25:00.855] plan(): Setting new future strategy stack:
[10:25:00.855] List of future strategies:
[10:25:00.855] 1. sequential:
[10:25:00.855]    - args: function (..., envir = parent.frame())
[10:25:00.855]    - tweaked: FALSE
[10:25:00.855]    - call: future::plan("sequential")
[10:25:00.855] plan(): nbrOfWorkers() = 1
[10:25:00.855] SequentialFuture started (and completed)
[10:25:00.855] signalConditions() ...
[10:25:00.855]  - include = ‘immediateCondition’
[10:25:00.855]  - exclude = 
[10:25:00.856]  - resignal = FALSE
[10:25:00.856]  - Number of conditions: 1
[10:25:00.856] signalConditions() ... done
[10:25:00.856] - Launch lazy future ... done
[10:25:00.856] run() for ‘SequentialFuture’ ... done
> env[["b"]] %<-% { 42L; stop("Woops") }
[10:25:00.856] getGlobalsAndPackages() ...
[10:25:00.856] Searching for globals...
[10:25:00.857] - globals found: [2] ‘{’, ‘stop’
[10:25:00.857] Searching for globals ... DONE
[10:25:00.857] Resolving globals: FALSE
[10:25:00.858] 
[10:25:00.858] 
[10:25:00.858] getGlobalsAndPackages() ... DONE
[10:25:00.858] run() for ‘Future’ ...
[10:25:00.858] - state: ‘created’
[10:25:00.858] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.859] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.859] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.859]   - Field: ‘label’
[10:25:00.859]   - Field: ‘local’
[10:25:00.859]   - Field: ‘owner’
[10:25:00.859]   - Field: ‘envir’
[10:25:00.859]   - Field: ‘packages’
[10:25:00.859]   - Field: ‘gc’
[10:25:00.859]   - Field: ‘conditions’
[10:25:00.859]   - Field: ‘expr’
[10:25:00.859]   - Field: ‘uuid’
[10:25:00.860]   - Field: ‘seed’
[10:25:00.860]   - Field: ‘version’
[10:25:00.860]   - Field: ‘result’
[10:25:00.860]   - Field: ‘asynchronous’
[10:25:00.860]   - Field: ‘calls’
[10:25:00.860]   - Field: ‘globals’
[10:25:00.860]   - Field: ‘stdout’
[10:25:00.860]   - Field: ‘earlySignal’
[10:25:00.860]   - Field: ‘lazy’
[10:25:00.860]   - Field: ‘state’
[10:25:00.860] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.861] - Launch lazy future ...
[10:25:00.861] Packages needed by the future expression (n = 0): <none>
[10:25:00.861] Packages needed by future strategies (n = 0): <none>
[10:25:00.861] {
[10:25:00.861]     {
[10:25:00.861]         {
[10:25:00.861]             ...future.startTime <- base::Sys.time()
[10:25:00.861]             {
[10:25:00.861]                 {
[10:25:00.861]                   {
[10:25:00.861]                     base::local({
[10:25:00.861]                       has_future <- base::requireNamespace("future", 
[10:25:00.861]                         quietly = TRUE)
[10:25:00.861]                       if (has_future) {
[10:25:00.861]                         ns <- base::getNamespace("future")
[10:25:00.861]                         version <- ns[[".package"]][["version"]]
[10:25:00.861]                         if (is.null(version)) 
[10:25:00.861]                           version <- utils::packageVersion("future")
[10:25:00.861]                       }
[10:25:00.861]                       else {
[10:25:00.861]                         version <- NULL
[10:25:00.861]                       }
[10:25:00.861]                       if (!has_future || version < "1.8.0") {
[10:25:00.861]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.861]                           "", base::R.version$version.string), 
[10:25:00.861]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.861]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.861]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.861]                             "release", "version")], collapse = " "), 
[10:25:00.861]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.861]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.861]                           info)
[10:25:00.861]                         info <- base::paste(info, collapse = "; ")
[10:25:00.861]                         if (!has_future) {
[10:25:00.861]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.861]                             info)
[10:25:00.861]                         }
[10:25:00.861]                         else {
[10:25:00.861]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.861]                             info, version)
[10:25:00.861]                         }
[10:25:00.861]                         base::stop(msg)
[10:25:00.861]                       }
[10:25:00.861]                     })
[10:25:00.861]                   }
[10:25:00.861]                   options(future.plan = NULL)
[10:25:00.861]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.861]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.861]                 }
[10:25:00.861]                 ...future.workdir <- getwd()
[10:25:00.861]             }
[10:25:00.861]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.861]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.861]         }
[10:25:00.861]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.861]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.861]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.861]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.861]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.861]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.861]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.861]             base::names(...future.oldOptions))
[10:25:00.861]     }
[10:25:00.861]     if (FALSE) {
[10:25:00.861]     }
[10:25:00.861]     else {
[10:25:00.861]         if (TRUE) {
[10:25:00.861]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.861]                 open = "w")
[10:25:00.861]         }
[10:25:00.861]         else {
[10:25:00.861]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.861]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.861]         }
[10:25:00.861]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.861]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.861]             base::sink(type = "output", split = FALSE)
[10:25:00.861]             base::close(...future.stdout)
[10:25:00.861]         }, add = TRUE)
[10:25:00.861]     }
[10:25:00.861]     ...future.frame <- base::sys.nframe()
[10:25:00.861]     ...future.conditions <- base::list()
[10:25:00.861]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.861]     if (FALSE) {
[10:25:00.861]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.861]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.861]     }
[10:25:00.861]     ...future.result <- base::tryCatch({
[10:25:00.861]         base::withCallingHandlers({
[10:25:00.861]             ...future.value <- base::withVisible(base::local({
[10:25:00.861]                 42L
[10:25:00.861]                 stop("Woops")
[10:25:00.861]             }))
[10:25:00.861]             future::FutureResult(value = ...future.value$value, 
[10:25:00.861]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.861]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.861]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.861]                     ...future.globalenv.names))
[10:25:00.861]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.861]         }, condition = base::local({
[10:25:00.861]             c <- base::c
[10:25:00.861]             inherits <- base::inherits
[10:25:00.861]             invokeRestart <- base::invokeRestart
[10:25:00.861]             length <- base::length
[10:25:00.861]             list <- base::list
[10:25:00.861]             seq.int <- base::seq.int
[10:25:00.861]             signalCondition <- base::signalCondition
[10:25:00.861]             sys.calls <- base::sys.calls
[10:25:00.861]             `[[` <- base::`[[`
[10:25:00.861]             `+` <- base::`+`
[10:25:00.861]             `<<-` <- base::`<<-`
[10:25:00.861]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.861]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.861]                   3L)]
[10:25:00.861]             }
[10:25:00.861]             function(cond) {
[10:25:00.861]                 is_error <- inherits(cond, "error")
[10:25:00.861]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.861]                   NULL)
[10:25:00.861]                 if (is_error) {
[10:25:00.861]                   sessionInformation <- function() {
[10:25:00.861]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.861]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.861]                       search = base::search(), system = base::Sys.info())
[10:25:00.861]                   }
[10:25:00.861]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.861]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.861]                     cond$call), session = sessionInformation(), 
[10:25:00.861]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.861]                   signalCondition(cond)
[10:25:00.861]                 }
[10:25:00.861]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.861]                 "immediateCondition"))) {
[10:25:00.861]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.861]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.861]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.861]                   if (TRUE && !signal) {
[10:25:00.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.861]                     {
[10:25:00.861]                       inherits <- base::inherits
[10:25:00.861]                       invokeRestart <- base::invokeRestart
[10:25:00.861]                       is.null <- base::is.null
[10:25:00.861]                       muffled <- FALSE
[10:25:00.861]                       if (inherits(cond, "message")) {
[10:25:00.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.861]                         if (muffled) 
[10:25:00.861]                           invokeRestart("muffleMessage")
[10:25:00.861]                       }
[10:25:00.861]                       else if (inherits(cond, "warning")) {
[10:25:00.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.861]                         if (muffled) 
[10:25:00.861]                           invokeRestart("muffleWarning")
[10:25:00.861]                       }
[10:25:00.861]                       else if (inherits(cond, "condition")) {
[10:25:00.861]                         if (!is.null(pattern)) {
[10:25:00.861]                           computeRestarts <- base::computeRestarts
[10:25:00.861]                           grepl <- base::grepl
[10:25:00.861]                           restarts <- computeRestarts(cond)
[10:25:00.861]                           for (restart in restarts) {
[10:25:00.861]                             name <- restart$name
[10:25:00.861]                             if (is.null(name)) 
[10:25:00.861]                               next
[10:25:00.861]                             if (!grepl(pattern, name)) 
[10:25:00.861]                               next
[10:25:00.861]                             invokeRestart(restart)
[10:25:00.861]                             muffled <- TRUE
[10:25:00.861]                             break
[10:25:00.861]                           }
[10:25:00.861]                         }
[10:25:00.861]                       }
[10:25:00.861]                       invisible(muffled)
[10:25:00.861]                     }
[10:25:00.861]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.861]                   }
[10:25:00.861]                 }
[10:25:00.861]                 else {
[10:25:00.861]                   if (TRUE) {
[10:25:00.861]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.861]                     {
[10:25:00.861]                       inherits <- base::inherits
[10:25:00.861]                       invokeRestart <- base::invokeRestart
[10:25:00.861]                       is.null <- base::is.null
[10:25:00.861]                       muffled <- FALSE
[10:25:00.861]                       if (inherits(cond, "message")) {
[10:25:00.861]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.861]                         if (muffled) 
[10:25:00.861]                           invokeRestart("muffleMessage")
[10:25:00.861]                       }
[10:25:00.861]                       else if (inherits(cond, "warning")) {
[10:25:00.861]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.861]                         if (muffled) 
[10:25:00.861]                           invokeRestart("muffleWarning")
[10:25:00.861]                       }
[10:25:00.861]                       else if (inherits(cond, "condition")) {
[10:25:00.861]                         if (!is.null(pattern)) {
[10:25:00.861]                           computeRestarts <- base::computeRestarts
[10:25:00.861]                           grepl <- base::grepl
[10:25:00.861]                           restarts <- computeRestarts(cond)
[10:25:00.861]                           for (restart in restarts) {
[10:25:00.861]                             name <- restart$name
[10:25:00.861]                             if (is.null(name)) 
[10:25:00.861]                               next
[10:25:00.861]                             if (!grepl(pattern, name)) 
[10:25:00.861]                               next
[10:25:00.861]                             invokeRestart(restart)
[10:25:00.861]                             muffled <- TRUE
[10:25:00.861]                             break
[10:25:00.861]                           }
[10:25:00.861]                         }
[10:25:00.861]                       }
[10:25:00.861]                       invisible(muffled)
[10:25:00.861]                     }
[10:25:00.861]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.861]                   }
[10:25:00.861]                 }
[10:25:00.861]             }
[10:25:00.861]         }))
[10:25:00.861]     }, error = function(ex) {
[10:25:00.861]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.861]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.861]                 ...future.rng), started = ...future.startTime, 
[10:25:00.861]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.861]             version = "1.8"), class = "FutureResult")
[10:25:00.861]     }, finally = {
[10:25:00.861]         if (!identical(...future.workdir, getwd())) 
[10:25:00.861]             setwd(...future.workdir)
[10:25:00.861]         {
[10:25:00.861]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.861]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.861]             }
[10:25:00.861]             base::options(...future.oldOptions)
[10:25:00.861]             if (.Platform$OS.type == "windows") {
[10:25:00.861]                 old_names <- names(...future.oldEnvVars)
[10:25:00.861]                 envs <- base::Sys.getenv()
[10:25:00.861]                 names <- names(envs)
[10:25:00.861]                 common <- intersect(names, old_names)
[10:25:00.861]                 added <- setdiff(names, old_names)
[10:25:00.861]                 removed <- setdiff(old_names, names)
[10:25:00.861]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.861]                   envs[common]]
[10:25:00.861]                 NAMES <- toupper(changed)
[10:25:00.861]                 args <- list()
[10:25:00.861]                 for (kk in seq_along(NAMES)) {
[10:25:00.861]                   name <- changed[[kk]]
[10:25:00.861]                   NAME <- NAMES[[kk]]
[10:25:00.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.861]                     next
[10:25:00.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.861]                 }
[10:25:00.861]                 NAMES <- toupper(added)
[10:25:00.861]                 for (kk in seq_along(NAMES)) {
[10:25:00.861]                   name <- added[[kk]]
[10:25:00.861]                   NAME <- NAMES[[kk]]
[10:25:00.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.861]                     next
[10:25:00.861]                   args[[name]] <- ""
[10:25:00.861]                 }
[10:25:00.861]                 NAMES <- toupper(removed)
[10:25:00.861]                 for (kk in seq_along(NAMES)) {
[10:25:00.861]                   name <- removed[[kk]]
[10:25:00.861]                   NAME <- NAMES[[kk]]
[10:25:00.861]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.861]                     next
[10:25:00.861]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.861]                 }
[10:25:00.861]                 if (length(args) > 0) 
[10:25:00.861]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.861]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.861]             }
[10:25:00.861]             else {
[10:25:00.861]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.861]             }
[10:25:00.861]             {
[10:25:00.861]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.861]                   0L) {
[10:25:00.861]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.861]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.861]                   base::options(opts)
[10:25:00.861]                 }
[10:25:00.861]                 {
[10:25:00.861]                   {
[10:25:00.861]                     NULL
[10:25:00.861]                     RNGkind("Mersenne-Twister")
[10:25:00.861]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.861]                       inherits = FALSE)
[10:25:00.861]                   }
[10:25:00.861]                   options(future.plan = NULL)
[10:25:00.861]                   if (is.na(NA_character_)) 
[10:25:00.861]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.861]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.861]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.861]                   {
[10:25:00.861]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.861]                     if (!future$lazy) 
[10:25:00.861]                       future <- run(future)
[10:25:00.861]                     invisible(future)
[10:25:00.861]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.861]                 }
[10:25:00.861]             }
[10:25:00.861]         }
[10:25:00.861]     })
[10:25:00.861]     if (TRUE) {
[10:25:00.861]         base::sink(type = "output", split = FALSE)
[10:25:00.861]         if (TRUE) {
[10:25:00.861]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.861]         }
[10:25:00.861]         else {
[10:25:00.861]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.861]         }
[10:25:00.861]         base::close(...future.stdout)
[10:25:00.861]         ...future.stdout <- NULL
[10:25:00.861]     }
[10:25:00.861]     ...future.result$conditions <- ...future.conditions
[10:25:00.861]     ...future.result$finished <- base::Sys.time()
[10:25:00.861]     ...future.result
[10:25:00.861] }
[10:25:00.863] plan(): Setting new future strategy stack:
[10:25:00.863] List of future strategies:
[10:25:00.863] 1. sequential:
[10:25:00.863]    - args: function (..., envir = parent.frame())
[10:25:00.863]    - tweaked: FALSE
[10:25:00.863]    - call: NULL
[10:25:00.863] plan(): nbrOfWorkers() = 1
[10:25:00.864] plan(): Setting new future strategy stack:
[10:25:00.864] List of future strategies:
[10:25:00.864] 1. sequential:
[10:25:00.864]    - args: function (..., envir = parent.frame())
[10:25:00.864]    - tweaked: FALSE
[10:25:00.864]    - call: future::plan("sequential")
[10:25:00.865] plan(): nbrOfWorkers() = 1
[10:25:00.865] SequentialFuture started (and completed)
[10:25:00.865] signalConditions() ...
[10:25:00.865]  - include = ‘immediateCondition’
[10:25:00.865]  - exclude = 
[10:25:00.865]  - resignal = FALSE
[10:25:00.865]  - Number of conditions: 1
[10:25:00.865] signalConditions() ... done
[10:25:00.865] - Launch lazy future ... done
[10:25:00.866] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(env[["b"]])
[10:25:00.866] resolved() for ‘SequentialFuture’ ...
[10:25:00.866] - state: ‘finished’
[10:25:00.866] - run: TRUE
[10:25:00.866] - result: ‘FutureResult’
[10:25:00.866] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
env[["b"]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> lenv <- listenv::listenv()
> lenv[[1]] %<-% { 42L; stop("Woops") }
[10:25:00.867] getGlobalsAndPackages() ...
[10:25:00.867] Searching for globals...
[10:25:00.868] - globals found: [2] ‘{’, ‘stop’
[10:25:00.868] Searching for globals ... DONE
[10:25:00.869] Resolving globals: FALSE
[10:25:00.869] 
[10:25:00.869] 
[10:25:00.869] getGlobalsAndPackages() ... DONE
[10:25:00.869] run() for ‘Future’ ...
[10:25:00.869] - state: ‘created’
[10:25:00.869] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.870] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.870] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.870]   - Field: ‘label’
[10:25:00.870]   - Field: ‘local’
[10:25:00.870]   - Field: ‘owner’
[10:25:00.870]   - Field: ‘envir’
[10:25:00.870]   - Field: ‘packages’
[10:25:00.870]   - Field: ‘gc’
[10:25:00.870]   - Field: ‘conditions’
[10:25:00.871]   - Field: ‘expr’
[10:25:00.871]   - Field: ‘uuid’
[10:25:00.871]   - Field: ‘seed’
[10:25:00.871]   - Field: ‘version’
[10:25:00.871]   - Field: ‘result’
[10:25:00.871]   - Field: ‘asynchronous’
[10:25:00.871]   - Field: ‘calls’
[10:25:00.871]   - Field: ‘globals’
[10:25:00.871]   - Field: ‘stdout’
[10:25:00.871]   - Field: ‘earlySignal’
[10:25:00.871]   - Field: ‘lazy’
[10:25:00.872]   - Field: ‘state’
[10:25:00.872] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.872] - Launch lazy future ...
[10:25:00.872] Packages needed by the future expression (n = 0): <none>
[10:25:00.872] Packages needed by future strategies (n = 0): <none>
[10:25:00.872] {
[10:25:00.872]     {
[10:25:00.872]         {
[10:25:00.872]             ...future.startTime <- base::Sys.time()
[10:25:00.872]             {
[10:25:00.872]                 {
[10:25:00.872]                   {
[10:25:00.872]                     base::local({
[10:25:00.872]                       has_future <- base::requireNamespace("future", 
[10:25:00.872]                         quietly = TRUE)
[10:25:00.872]                       if (has_future) {
[10:25:00.872]                         ns <- base::getNamespace("future")
[10:25:00.872]                         version <- ns[[".package"]][["version"]]
[10:25:00.872]                         if (is.null(version)) 
[10:25:00.872]                           version <- utils::packageVersion("future")
[10:25:00.872]                       }
[10:25:00.872]                       else {
[10:25:00.872]                         version <- NULL
[10:25:00.872]                       }
[10:25:00.872]                       if (!has_future || version < "1.8.0") {
[10:25:00.872]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.872]                           "", base::R.version$version.string), 
[10:25:00.872]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.872]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.872]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.872]                             "release", "version")], collapse = " "), 
[10:25:00.872]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.872]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.872]                           info)
[10:25:00.872]                         info <- base::paste(info, collapse = "; ")
[10:25:00.872]                         if (!has_future) {
[10:25:00.872]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.872]                             info)
[10:25:00.872]                         }
[10:25:00.872]                         else {
[10:25:00.872]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.872]                             info, version)
[10:25:00.872]                         }
[10:25:00.872]                         base::stop(msg)
[10:25:00.872]                       }
[10:25:00.872]                     })
[10:25:00.872]                   }
[10:25:00.872]                   options(future.plan = NULL)
[10:25:00.872]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.872]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.872]                 }
[10:25:00.872]                 ...future.workdir <- getwd()
[10:25:00.872]             }
[10:25:00.872]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.872]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.872]         }
[10:25:00.872]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.872]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.872]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.872]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.872]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.872]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.872]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.872]             base::names(...future.oldOptions))
[10:25:00.872]     }
[10:25:00.872]     if (FALSE) {
[10:25:00.872]     }
[10:25:00.872]     else {
[10:25:00.872]         if (TRUE) {
[10:25:00.872]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.872]                 open = "w")
[10:25:00.872]         }
[10:25:00.872]         else {
[10:25:00.872]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.872]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.872]         }
[10:25:00.872]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.872]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.872]             base::sink(type = "output", split = FALSE)
[10:25:00.872]             base::close(...future.stdout)
[10:25:00.872]         }, add = TRUE)
[10:25:00.872]     }
[10:25:00.872]     ...future.frame <- base::sys.nframe()
[10:25:00.872]     ...future.conditions <- base::list()
[10:25:00.872]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.872]     if (FALSE) {
[10:25:00.872]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.872]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.872]     }
[10:25:00.872]     ...future.result <- base::tryCatch({
[10:25:00.872]         base::withCallingHandlers({
[10:25:00.872]             ...future.value <- base::withVisible(base::local({
[10:25:00.872]                 42L
[10:25:00.872]                 stop("Woops")
[10:25:00.872]             }))
[10:25:00.872]             future::FutureResult(value = ...future.value$value, 
[10:25:00.872]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.872]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.872]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.872]                     ...future.globalenv.names))
[10:25:00.872]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.872]         }, condition = base::local({
[10:25:00.872]             c <- base::c
[10:25:00.872]             inherits <- base::inherits
[10:25:00.872]             invokeRestart <- base::invokeRestart
[10:25:00.872]             length <- base::length
[10:25:00.872]             list <- base::list
[10:25:00.872]             seq.int <- base::seq.int
[10:25:00.872]             signalCondition <- base::signalCondition
[10:25:00.872]             sys.calls <- base::sys.calls
[10:25:00.872]             `[[` <- base::`[[`
[10:25:00.872]             `+` <- base::`+`
[10:25:00.872]             `<<-` <- base::`<<-`
[10:25:00.872]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.872]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.872]                   3L)]
[10:25:00.872]             }
[10:25:00.872]             function(cond) {
[10:25:00.872]                 is_error <- inherits(cond, "error")
[10:25:00.872]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.872]                   NULL)
[10:25:00.872]                 if (is_error) {
[10:25:00.872]                   sessionInformation <- function() {
[10:25:00.872]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.872]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.872]                       search = base::search(), system = base::Sys.info())
[10:25:00.872]                   }
[10:25:00.872]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.872]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.872]                     cond$call), session = sessionInformation(), 
[10:25:00.872]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.872]                   signalCondition(cond)
[10:25:00.872]                 }
[10:25:00.872]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.872]                 "immediateCondition"))) {
[10:25:00.872]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.872]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.872]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.872]                   if (TRUE && !signal) {
[10:25:00.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.872]                     {
[10:25:00.872]                       inherits <- base::inherits
[10:25:00.872]                       invokeRestart <- base::invokeRestart
[10:25:00.872]                       is.null <- base::is.null
[10:25:00.872]                       muffled <- FALSE
[10:25:00.872]                       if (inherits(cond, "message")) {
[10:25:00.872]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.872]                         if (muffled) 
[10:25:00.872]                           invokeRestart("muffleMessage")
[10:25:00.872]                       }
[10:25:00.872]                       else if (inherits(cond, "warning")) {
[10:25:00.872]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.872]                         if (muffled) 
[10:25:00.872]                           invokeRestart("muffleWarning")
[10:25:00.872]                       }
[10:25:00.872]                       else if (inherits(cond, "condition")) {
[10:25:00.872]                         if (!is.null(pattern)) {
[10:25:00.872]                           computeRestarts <- base::computeRestarts
[10:25:00.872]                           grepl <- base::grepl
[10:25:00.872]                           restarts <- computeRestarts(cond)
[10:25:00.872]                           for (restart in restarts) {
[10:25:00.872]                             name <- restart$name
[10:25:00.872]                             if (is.null(name)) 
[10:25:00.872]                               next
[10:25:00.872]                             if (!grepl(pattern, name)) 
[10:25:00.872]                               next
[10:25:00.872]                             invokeRestart(restart)
[10:25:00.872]                             muffled <- TRUE
[10:25:00.872]                             break
[10:25:00.872]                           }
[10:25:00.872]                         }
[10:25:00.872]                       }
[10:25:00.872]                       invisible(muffled)
[10:25:00.872]                     }
[10:25:00.872]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.872]                   }
[10:25:00.872]                 }
[10:25:00.872]                 else {
[10:25:00.872]                   if (TRUE) {
[10:25:00.872]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.872]                     {
[10:25:00.872]                       inherits <- base::inherits
[10:25:00.872]                       invokeRestart <- base::invokeRestart
[10:25:00.872]                       is.null <- base::is.null
[10:25:00.872]                       muffled <- FALSE
[10:25:00.872]                       if (inherits(cond, "message")) {
[10:25:00.872]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.872]                         if (muffled) 
[10:25:00.872]                           invokeRestart("muffleMessage")
[10:25:00.872]                       }
[10:25:00.872]                       else if (inherits(cond, "warning")) {
[10:25:00.872]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.872]                         if (muffled) 
[10:25:00.872]                           invokeRestart("muffleWarning")
[10:25:00.872]                       }
[10:25:00.872]                       else if (inherits(cond, "condition")) {
[10:25:00.872]                         if (!is.null(pattern)) {
[10:25:00.872]                           computeRestarts <- base::computeRestarts
[10:25:00.872]                           grepl <- base::grepl
[10:25:00.872]                           restarts <- computeRestarts(cond)
[10:25:00.872]                           for (restart in restarts) {
[10:25:00.872]                             name <- restart$name
[10:25:00.872]                             if (is.null(name)) 
[10:25:00.872]                               next
[10:25:00.872]                             if (!grepl(pattern, name)) 
[10:25:00.872]                               next
[10:25:00.872]                             invokeRestart(restart)
[10:25:00.872]                             muffled <- TRUE
[10:25:00.872]                             break
[10:25:00.872]                           }
[10:25:00.872]                         }
[10:25:00.872]                       }
[10:25:00.872]                       invisible(muffled)
[10:25:00.872]                     }
[10:25:00.872]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.872]                   }
[10:25:00.872]                 }
[10:25:00.872]             }
[10:25:00.872]         }))
[10:25:00.872]     }, error = function(ex) {
[10:25:00.872]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.872]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.872]                 ...future.rng), started = ...future.startTime, 
[10:25:00.872]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.872]             version = "1.8"), class = "FutureResult")
[10:25:00.872]     }, finally = {
[10:25:00.872]         if (!identical(...future.workdir, getwd())) 
[10:25:00.872]             setwd(...future.workdir)
[10:25:00.872]         {
[10:25:00.872]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.872]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.872]             }
[10:25:00.872]             base::options(...future.oldOptions)
[10:25:00.872]             if (.Platform$OS.type == "windows") {
[10:25:00.872]                 old_names <- names(...future.oldEnvVars)
[10:25:00.872]                 envs <- base::Sys.getenv()
[10:25:00.872]                 names <- names(envs)
[10:25:00.872]                 common <- intersect(names, old_names)
[10:25:00.872]                 added <- setdiff(names, old_names)
[10:25:00.872]                 removed <- setdiff(old_names, names)
[10:25:00.872]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.872]                   envs[common]]
[10:25:00.872]                 NAMES <- toupper(changed)
[10:25:00.872]                 args <- list()
[10:25:00.872]                 for (kk in seq_along(NAMES)) {
[10:25:00.872]                   name <- changed[[kk]]
[10:25:00.872]                   NAME <- NAMES[[kk]]
[10:25:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.872]                     next
[10:25:00.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.872]                 }
[10:25:00.872]                 NAMES <- toupper(added)
[10:25:00.872]                 for (kk in seq_along(NAMES)) {
[10:25:00.872]                   name <- added[[kk]]
[10:25:00.872]                   NAME <- NAMES[[kk]]
[10:25:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.872]                     next
[10:25:00.872]                   args[[name]] <- ""
[10:25:00.872]                 }
[10:25:00.872]                 NAMES <- toupper(removed)
[10:25:00.872]                 for (kk in seq_along(NAMES)) {
[10:25:00.872]                   name <- removed[[kk]]
[10:25:00.872]                   NAME <- NAMES[[kk]]
[10:25:00.872]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.872]                     next
[10:25:00.872]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.872]                 }
[10:25:00.872]                 if (length(args) > 0) 
[10:25:00.872]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.872]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.872]             }
[10:25:00.872]             else {
[10:25:00.872]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.872]             }
[10:25:00.872]             {
[10:25:00.872]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.872]                   0L) {
[10:25:00.872]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.872]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.872]                   base::options(opts)
[10:25:00.872]                 }
[10:25:00.872]                 {
[10:25:00.872]                   {
[10:25:00.872]                     NULL
[10:25:00.872]                     RNGkind("Mersenne-Twister")
[10:25:00.872]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.872]                       inherits = FALSE)
[10:25:00.872]                   }
[10:25:00.872]                   options(future.plan = NULL)
[10:25:00.872]                   if (is.na(NA_character_)) 
[10:25:00.872]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.872]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.872]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.872]                   {
[10:25:00.872]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.872]                     if (!future$lazy) 
[10:25:00.872]                       future <- run(future)
[10:25:00.872]                     invisible(future)
[10:25:00.872]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.872]                 }
[10:25:00.872]             }
[10:25:00.872]         }
[10:25:00.872]     })
[10:25:00.872]     if (TRUE) {
[10:25:00.872]         base::sink(type = "output", split = FALSE)
[10:25:00.872]         if (TRUE) {
[10:25:00.872]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.872]         }
[10:25:00.872]         else {
[10:25:00.872]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.872]         }
[10:25:00.872]         base::close(...future.stdout)
[10:25:00.872]         ...future.stdout <- NULL
[10:25:00.872]     }
[10:25:00.872]     ...future.result$conditions <- ...future.conditions
[10:25:00.872]     ...future.result$finished <- base::Sys.time()
[10:25:00.872]     ...future.result
[10:25:00.872] }
[10:25:00.874] plan(): Setting new future strategy stack:
[10:25:00.874] List of future strategies:
[10:25:00.874] 1. sequential:
[10:25:00.874]    - args: function (..., envir = parent.frame())
[10:25:00.874]    - tweaked: FALSE
[10:25:00.874]    - call: NULL
[10:25:00.875] plan(): nbrOfWorkers() = 1
[10:25:00.875] plan(): Setting new future strategy stack:
[10:25:00.875] List of future strategies:
[10:25:00.875] 1. sequential:
[10:25:00.875]    - args: function (..., envir = parent.frame())
[10:25:00.875]    - tweaked: FALSE
[10:25:00.875]    - call: future::plan("sequential")
[10:25:00.876] plan(): nbrOfWorkers() = 1
[10:25:00.876] SequentialFuture started (and completed)
[10:25:00.876] signalConditions() ...
[10:25:00.876]  - include = ‘immediateCondition’
[10:25:00.876]  - exclude = 
[10:25:00.876]  - resignal = FALSE
[10:25:00.876]  - Number of conditions: 1
[10:25:00.877] signalConditions() ... done
[10:25:00.877] - Launch lazy future ... done
[10:25:00.877] run() for ‘SequentialFuture’ ... done
> lenv[[2]] %<-% { 42L; stop("Woops") }
[10:25:00.877] getGlobalsAndPackages() ...
[10:25:00.877] Searching for globals...
[10:25:00.878] - globals found: [2] ‘{’, ‘stop’
[10:25:00.878] Searching for globals ... DONE
[10:25:00.878] Resolving globals: FALSE
[10:25:00.879] 
[10:25:00.879] 
[10:25:00.879] getGlobalsAndPackages() ... DONE
[10:25:00.879] run() for ‘Future’ ...
[10:25:00.879] - state: ‘created’
[10:25:00.879] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.879] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.880] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.880]   - Field: ‘label’
[10:25:00.880]   - Field: ‘local’
[10:25:00.880]   - Field: ‘owner’
[10:25:00.880]   - Field: ‘envir’
[10:25:00.880]   - Field: ‘packages’
[10:25:00.882]   - Field: ‘gc’
[10:25:00.882]   - Field: ‘conditions’
[10:25:00.882]   - Field: ‘expr’
[10:25:00.882]   - Field: ‘uuid’
[10:25:00.882]   - Field: ‘seed’
[10:25:00.882]   - Field: ‘version’
[10:25:00.882]   - Field: ‘result’
[10:25:00.882]   - Field: ‘asynchronous’
[10:25:00.882]   - Field: ‘calls’
[10:25:00.882]   - Field: ‘globals’
[10:25:00.882]   - Field: ‘stdout’
[10:25:00.883]   - Field: ‘earlySignal’
[10:25:00.883]   - Field: ‘lazy’
[10:25:00.883]   - Field: ‘state’
[10:25:00.883] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.883] - Launch lazy future ...
[10:25:00.883] Packages needed by the future expression (n = 0): <none>
[10:25:00.883] Packages needed by future strategies (n = 0): <none>
[10:25:00.884] {
[10:25:00.884]     {
[10:25:00.884]         {
[10:25:00.884]             ...future.startTime <- base::Sys.time()
[10:25:00.884]             {
[10:25:00.884]                 {
[10:25:00.884]                   {
[10:25:00.884]                     base::local({
[10:25:00.884]                       has_future <- base::requireNamespace("future", 
[10:25:00.884]                         quietly = TRUE)
[10:25:00.884]                       if (has_future) {
[10:25:00.884]                         ns <- base::getNamespace("future")
[10:25:00.884]                         version <- ns[[".package"]][["version"]]
[10:25:00.884]                         if (is.null(version)) 
[10:25:00.884]                           version <- utils::packageVersion("future")
[10:25:00.884]                       }
[10:25:00.884]                       else {
[10:25:00.884]                         version <- NULL
[10:25:00.884]                       }
[10:25:00.884]                       if (!has_future || version < "1.8.0") {
[10:25:00.884]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.884]                           "", base::R.version$version.string), 
[10:25:00.884]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.884]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.884]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.884]                             "release", "version")], collapse = " "), 
[10:25:00.884]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.884]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.884]                           info)
[10:25:00.884]                         info <- base::paste(info, collapse = "; ")
[10:25:00.884]                         if (!has_future) {
[10:25:00.884]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.884]                             info)
[10:25:00.884]                         }
[10:25:00.884]                         else {
[10:25:00.884]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.884]                             info, version)
[10:25:00.884]                         }
[10:25:00.884]                         base::stop(msg)
[10:25:00.884]                       }
[10:25:00.884]                     })
[10:25:00.884]                   }
[10:25:00.884]                   options(future.plan = NULL)
[10:25:00.884]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.884]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.884]                 }
[10:25:00.884]                 ...future.workdir <- getwd()
[10:25:00.884]             }
[10:25:00.884]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.884]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.884]         }
[10:25:00.884]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.884]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.884]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.884]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.884]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.884]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.884]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.884]             base::names(...future.oldOptions))
[10:25:00.884]     }
[10:25:00.884]     if (FALSE) {
[10:25:00.884]     }
[10:25:00.884]     else {
[10:25:00.884]         if (TRUE) {
[10:25:00.884]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.884]                 open = "w")
[10:25:00.884]         }
[10:25:00.884]         else {
[10:25:00.884]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.884]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.884]         }
[10:25:00.884]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.884]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.884]             base::sink(type = "output", split = FALSE)
[10:25:00.884]             base::close(...future.stdout)
[10:25:00.884]         }, add = TRUE)
[10:25:00.884]     }
[10:25:00.884]     ...future.frame <- base::sys.nframe()
[10:25:00.884]     ...future.conditions <- base::list()
[10:25:00.884]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.884]     if (FALSE) {
[10:25:00.884]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.884]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.884]     }
[10:25:00.884]     ...future.result <- base::tryCatch({
[10:25:00.884]         base::withCallingHandlers({
[10:25:00.884]             ...future.value <- base::withVisible(base::local({
[10:25:00.884]                 42L
[10:25:00.884]                 stop("Woops")
[10:25:00.884]             }))
[10:25:00.884]             future::FutureResult(value = ...future.value$value, 
[10:25:00.884]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.884]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.884]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.884]                     ...future.globalenv.names))
[10:25:00.884]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.884]         }, condition = base::local({
[10:25:00.884]             c <- base::c
[10:25:00.884]             inherits <- base::inherits
[10:25:00.884]             invokeRestart <- base::invokeRestart
[10:25:00.884]             length <- base::length
[10:25:00.884]             list <- base::list
[10:25:00.884]             seq.int <- base::seq.int
[10:25:00.884]             signalCondition <- base::signalCondition
[10:25:00.884]             sys.calls <- base::sys.calls
[10:25:00.884]             `[[` <- base::`[[`
[10:25:00.884]             `+` <- base::`+`
[10:25:00.884]             `<<-` <- base::`<<-`
[10:25:00.884]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.884]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.884]                   3L)]
[10:25:00.884]             }
[10:25:00.884]             function(cond) {
[10:25:00.884]                 is_error <- inherits(cond, "error")
[10:25:00.884]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.884]                   NULL)
[10:25:00.884]                 if (is_error) {
[10:25:00.884]                   sessionInformation <- function() {
[10:25:00.884]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.884]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.884]                       search = base::search(), system = base::Sys.info())
[10:25:00.884]                   }
[10:25:00.884]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.884]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.884]                     cond$call), session = sessionInformation(), 
[10:25:00.884]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.884]                   signalCondition(cond)
[10:25:00.884]                 }
[10:25:00.884]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.884]                 "immediateCondition"))) {
[10:25:00.884]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.884]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.884]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.884]                   if (TRUE && !signal) {
[10:25:00.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.884]                     {
[10:25:00.884]                       inherits <- base::inherits
[10:25:00.884]                       invokeRestart <- base::invokeRestart
[10:25:00.884]                       is.null <- base::is.null
[10:25:00.884]                       muffled <- FALSE
[10:25:00.884]                       if (inherits(cond, "message")) {
[10:25:00.884]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.884]                         if (muffled) 
[10:25:00.884]                           invokeRestart("muffleMessage")
[10:25:00.884]                       }
[10:25:00.884]                       else if (inherits(cond, "warning")) {
[10:25:00.884]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.884]                         if (muffled) 
[10:25:00.884]                           invokeRestart("muffleWarning")
[10:25:00.884]                       }
[10:25:00.884]                       else if (inherits(cond, "condition")) {
[10:25:00.884]                         if (!is.null(pattern)) {
[10:25:00.884]                           computeRestarts <- base::computeRestarts
[10:25:00.884]                           grepl <- base::grepl
[10:25:00.884]                           restarts <- computeRestarts(cond)
[10:25:00.884]                           for (restart in restarts) {
[10:25:00.884]                             name <- restart$name
[10:25:00.884]                             if (is.null(name)) 
[10:25:00.884]                               next
[10:25:00.884]                             if (!grepl(pattern, name)) 
[10:25:00.884]                               next
[10:25:00.884]                             invokeRestart(restart)
[10:25:00.884]                             muffled <- TRUE
[10:25:00.884]                             break
[10:25:00.884]                           }
[10:25:00.884]                         }
[10:25:00.884]                       }
[10:25:00.884]                       invisible(muffled)
[10:25:00.884]                     }
[10:25:00.884]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.884]                   }
[10:25:00.884]                 }
[10:25:00.884]                 else {
[10:25:00.884]                   if (TRUE) {
[10:25:00.884]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.884]                     {
[10:25:00.884]                       inherits <- base::inherits
[10:25:00.884]                       invokeRestart <- base::invokeRestart
[10:25:00.884]                       is.null <- base::is.null
[10:25:00.884]                       muffled <- FALSE
[10:25:00.884]                       if (inherits(cond, "message")) {
[10:25:00.884]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.884]                         if (muffled) 
[10:25:00.884]                           invokeRestart("muffleMessage")
[10:25:00.884]                       }
[10:25:00.884]                       else if (inherits(cond, "warning")) {
[10:25:00.884]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.884]                         if (muffled) 
[10:25:00.884]                           invokeRestart("muffleWarning")
[10:25:00.884]                       }
[10:25:00.884]                       else if (inherits(cond, "condition")) {
[10:25:00.884]                         if (!is.null(pattern)) {
[10:25:00.884]                           computeRestarts <- base::computeRestarts
[10:25:00.884]                           grepl <- base::grepl
[10:25:00.884]                           restarts <- computeRestarts(cond)
[10:25:00.884]                           for (restart in restarts) {
[10:25:00.884]                             name <- restart$name
[10:25:00.884]                             if (is.null(name)) 
[10:25:00.884]                               next
[10:25:00.884]                             if (!grepl(pattern, name)) 
[10:25:00.884]                               next
[10:25:00.884]                             invokeRestart(restart)
[10:25:00.884]                             muffled <- TRUE
[10:25:00.884]                             break
[10:25:00.884]                           }
[10:25:00.884]                         }
[10:25:00.884]                       }
[10:25:00.884]                       invisible(muffled)
[10:25:00.884]                     }
[10:25:00.884]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.884]                   }
[10:25:00.884]                 }
[10:25:00.884]             }
[10:25:00.884]         }))
[10:25:00.884]     }, error = function(ex) {
[10:25:00.884]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.884]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.884]                 ...future.rng), started = ...future.startTime, 
[10:25:00.884]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.884]             version = "1.8"), class = "FutureResult")
[10:25:00.884]     }, finally = {
[10:25:00.884]         if (!identical(...future.workdir, getwd())) 
[10:25:00.884]             setwd(...future.workdir)
[10:25:00.884]         {
[10:25:00.884]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.884]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.884]             }
[10:25:00.884]             base::options(...future.oldOptions)
[10:25:00.884]             if (.Platform$OS.type == "windows") {
[10:25:00.884]                 old_names <- names(...future.oldEnvVars)
[10:25:00.884]                 envs <- base::Sys.getenv()
[10:25:00.884]                 names <- names(envs)
[10:25:00.884]                 common <- intersect(names, old_names)
[10:25:00.884]                 added <- setdiff(names, old_names)
[10:25:00.884]                 removed <- setdiff(old_names, names)
[10:25:00.884]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.884]                   envs[common]]
[10:25:00.884]                 NAMES <- toupper(changed)
[10:25:00.884]                 args <- list()
[10:25:00.884]                 for (kk in seq_along(NAMES)) {
[10:25:00.884]                   name <- changed[[kk]]
[10:25:00.884]                   NAME <- NAMES[[kk]]
[10:25:00.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.884]                     next
[10:25:00.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.884]                 }
[10:25:00.884]                 NAMES <- toupper(added)
[10:25:00.884]                 for (kk in seq_along(NAMES)) {
[10:25:00.884]                   name <- added[[kk]]
[10:25:00.884]                   NAME <- NAMES[[kk]]
[10:25:00.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.884]                     next
[10:25:00.884]                   args[[name]] <- ""
[10:25:00.884]                 }
[10:25:00.884]                 NAMES <- toupper(removed)
[10:25:00.884]                 for (kk in seq_along(NAMES)) {
[10:25:00.884]                   name <- removed[[kk]]
[10:25:00.884]                   NAME <- NAMES[[kk]]
[10:25:00.884]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.884]                     next
[10:25:00.884]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.884]                 }
[10:25:00.884]                 if (length(args) > 0) 
[10:25:00.884]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.884]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.884]             }
[10:25:00.884]             else {
[10:25:00.884]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.884]             }
[10:25:00.884]             {
[10:25:00.884]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.884]                   0L) {
[10:25:00.884]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.884]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.884]                   base::options(opts)
[10:25:00.884]                 }
[10:25:00.884]                 {
[10:25:00.884]                   {
[10:25:00.884]                     NULL
[10:25:00.884]                     RNGkind("Mersenne-Twister")
[10:25:00.884]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.884]                       inherits = FALSE)
[10:25:00.884]                   }
[10:25:00.884]                   options(future.plan = NULL)
[10:25:00.884]                   if (is.na(NA_character_)) 
[10:25:00.884]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.884]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.884]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.884]                   {
[10:25:00.884]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.884]                     if (!future$lazy) 
[10:25:00.884]                       future <- run(future)
[10:25:00.884]                     invisible(future)
[10:25:00.884]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.884]                 }
[10:25:00.884]             }
[10:25:00.884]         }
[10:25:00.884]     })
[10:25:00.884]     if (TRUE) {
[10:25:00.884]         base::sink(type = "output", split = FALSE)
[10:25:00.884]         if (TRUE) {
[10:25:00.884]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.884]         }
[10:25:00.884]         else {
[10:25:00.884]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.884]         }
[10:25:00.884]         base::close(...future.stdout)
[10:25:00.884]         ...future.stdout <- NULL
[10:25:00.884]     }
[10:25:00.884]     ...future.result$conditions <- ...future.conditions
[10:25:00.884]     ...future.result$finished <- base::Sys.time()
[10:25:00.884]     ...future.result
[10:25:00.884] }
[10:25:00.885] plan(): Setting new future strategy stack:
[10:25:00.886] List of future strategies:
[10:25:00.886] 1. sequential:
[10:25:00.886]    - args: function (..., envir = parent.frame())
[10:25:00.886]    - tweaked: FALSE
[10:25:00.886]    - call: NULL
[10:25:00.886] plan(): nbrOfWorkers() = 1
[10:25:00.887] plan(): Setting new future strategy stack:
[10:25:00.887] List of future strategies:
[10:25:00.887] 1. sequential:
[10:25:00.887]    - args: function (..., envir = parent.frame())
[10:25:00.887]    - tweaked: FALSE
[10:25:00.887]    - call: future::plan("sequential")
[10:25:00.887] plan(): nbrOfWorkers() = 1
[10:25:00.887] SequentialFuture started (and completed)
[10:25:00.887] signalConditions() ...
[10:25:00.887]  - include = ‘immediateCondition’
[10:25:00.888]  - exclude = 
[10:25:00.888]  - resignal = FALSE
[10:25:00.888]  - Number of conditions: 1
[10:25:00.888] signalConditions() ... done
[10:25:00.888] - Launch lazy future ... done
[10:25:00.888] run() for ‘SequentialFuture’ ... done
> calls <- backtrace(lenv[[2]])
[10:25:00.888] resolved() for ‘SequentialFuture’ ...
[10:25:00.888] - state: ‘finished’
[10:25:00.888] - run: TRUE
[10:25:00.889] - result: ‘FutureResult’
[10:25:00.889] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
lenv[[2]] %<-% {
    42L
    stop("Woops")
}

[[2]]
futureAssignInternal(target, expr, envir = envir, substitute = FALSE)

[[3]]
futureAssign(name, expr, envir = envir, assign.env = assign.env, 
    substitute = FALSE)

[[4]]
do.call(future::future, args = future.args, envir = assign.env)

[[5]]
(function (expr, envir = parent.frame(), substitute = TRUE, lazy = FALSE, 
    seed = FALSE, globals = TRUE, packages = NULL, stdout = TRUE, 
    conditions = "condition", earlySignal = FALSE, label = NULL, 
    gc = FALSE, ...) 
{
    if (substitute) 
        expr <- substitute(expr)
    t_start <- Sys.time()
    gp <- getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression, 
        globals = globals)
    expr <- gp$expr
    globals <- gp$globals
    if (length(packages) > 0 || length(gp$packages) > 0) {
        packages <- unique(c(gp$packages, packages))
    }
    gp <- NULL
    attr(globals, "already-done") <- TRUE
    future <- Future(expr, substitute = FALSE, envir = envir, 
        lazy = TRUE, seed = seed, globals = globals, packages = packages, 
        stdout = stdout, conditions = conditions, earlySignal = earlySignal, 
        label = label, gc = gc, ...)
    future$.defaultLocal <- !is.element("local", names(list(...)))
    if (getOption("future.journal", FALSE)) {
        future <- makeFutureJournal(future, event = "create", 
            category = "overhead", start = t_start)
    }
    if (!lazy) {
        future <- run(future)
        future$lazy <- FALSE
        stop_if_not(inherits(future, "Future"), !future$lazy)
    }
    future
})({
    42L
    stop("Woops")
}, envir = <environment>, lazy = FALSE, seed = FALSE, globals = TRUE, 
    packages = NULL, stdout = TRUE, conditions = "condition", 
    earlySignal = FALSE, label = NULL, gc = FALSE)

[[6]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[7]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[8]]
stop("Woops")

[[9]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> ll <- list()
> ll[[1]] <- future({ 42L; stop("Woops") })
[10:25:00.889] getGlobalsAndPackages() ...
[10:25:00.889] Searching for globals...
[10:25:00.890] - globals found: [2] ‘{’, ‘stop’
[10:25:00.890] Searching for globals ... DONE
[10:25:00.890] Resolving globals: FALSE
[10:25:00.891] 
[10:25:00.891] 
[10:25:00.891] getGlobalsAndPackages() ... DONE
[10:25:00.891] run() for ‘Future’ ...
[10:25:00.891] - state: ‘created’
[10:25:00.891] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.892] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.892] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.892]   - Field: ‘label’
[10:25:00.892]   - Field: ‘local’
[10:25:00.892]   - Field: ‘owner’
[10:25:00.892]   - Field: ‘envir’
[10:25:00.892]   - Field: ‘packages’
[10:25:00.892]   - Field: ‘gc’
[10:25:00.892]   - Field: ‘conditions’
[10:25:00.892]   - Field: ‘expr’
[10:25:00.893]   - Field: ‘uuid’
[10:25:00.893]   - Field: ‘seed’
[10:25:00.893]   - Field: ‘version’
[10:25:00.893]   - Field: ‘result’
[10:25:00.893]   - Field: ‘asynchronous’
[10:25:00.893]   - Field: ‘calls’
[10:25:00.893]   - Field: ‘globals’
[10:25:00.893]   - Field: ‘stdout’
[10:25:00.893]   - Field: ‘earlySignal’
[10:25:00.893]   - Field: ‘lazy’
[10:25:00.894]   - Field: ‘state’
[10:25:00.894] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.894] - Launch lazy future ...
[10:25:00.894] Packages needed by the future expression (n = 0): <none>
[10:25:00.894] Packages needed by future strategies (n = 0): <none>
[10:25:00.894] {
[10:25:00.894]     {
[10:25:00.894]         {
[10:25:00.894]             ...future.startTime <- base::Sys.time()
[10:25:00.894]             {
[10:25:00.894]                 {
[10:25:00.894]                   {
[10:25:00.894]                     base::local({
[10:25:00.894]                       has_future <- base::requireNamespace("future", 
[10:25:00.894]                         quietly = TRUE)
[10:25:00.894]                       if (has_future) {
[10:25:00.894]                         ns <- base::getNamespace("future")
[10:25:00.894]                         version <- ns[[".package"]][["version"]]
[10:25:00.894]                         if (is.null(version)) 
[10:25:00.894]                           version <- utils::packageVersion("future")
[10:25:00.894]                       }
[10:25:00.894]                       else {
[10:25:00.894]                         version <- NULL
[10:25:00.894]                       }
[10:25:00.894]                       if (!has_future || version < "1.8.0") {
[10:25:00.894]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.894]                           "", base::R.version$version.string), 
[10:25:00.894]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.894]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.894]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.894]                             "release", "version")], collapse = " "), 
[10:25:00.894]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.894]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.894]                           info)
[10:25:00.894]                         info <- base::paste(info, collapse = "; ")
[10:25:00.894]                         if (!has_future) {
[10:25:00.894]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.894]                             info)
[10:25:00.894]                         }
[10:25:00.894]                         else {
[10:25:00.894]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.894]                             info, version)
[10:25:00.894]                         }
[10:25:00.894]                         base::stop(msg)
[10:25:00.894]                       }
[10:25:00.894]                     })
[10:25:00.894]                   }
[10:25:00.894]                   options(future.plan = NULL)
[10:25:00.894]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.894]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.894]                 }
[10:25:00.894]                 ...future.workdir <- getwd()
[10:25:00.894]             }
[10:25:00.894]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.894]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.894]         }
[10:25:00.894]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.894]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.894]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.894]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.894]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.894]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.894]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.894]             base::names(...future.oldOptions))
[10:25:00.894]     }
[10:25:00.894]     if (FALSE) {
[10:25:00.894]     }
[10:25:00.894]     else {
[10:25:00.894]         if (TRUE) {
[10:25:00.894]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.894]                 open = "w")
[10:25:00.894]         }
[10:25:00.894]         else {
[10:25:00.894]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.894]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.894]         }
[10:25:00.894]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.894]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.894]             base::sink(type = "output", split = FALSE)
[10:25:00.894]             base::close(...future.stdout)
[10:25:00.894]         }, add = TRUE)
[10:25:00.894]     }
[10:25:00.894]     ...future.frame <- base::sys.nframe()
[10:25:00.894]     ...future.conditions <- base::list()
[10:25:00.894]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.894]     if (FALSE) {
[10:25:00.894]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.894]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.894]     }
[10:25:00.894]     ...future.result <- base::tryCatch({
[10:25:00.894]         base::withCallingHandlers({
[10:25:00.894]             ...future.value <- base::withVisible(base::local({
[10:25:00.894]                 42L
[10:25:00.894]                 stop("Woops")
[10:25:00.894]             }))
[10:25:00.894]             future::FutureResult(value = ...future.value$value, 
[10:25:00.894]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.894]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.894]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.894]                     ...future.globalenv.names))
[10:25:00.894]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.894]         }, condition = base::local({
[10:25:00.894]             c <- base::c
[10:25:00.894]             inherits <- base::inherits
[10:25:00.894]             invokeRestart <- base::invokeRestart
[10:25:00.894]             length <- base::length
[10:25:00.894]             list <- base::list
[10:25:00.894]             seq.int <- base::seq.int
[10:25:00.894]             signalCondition <- base::signalCondition
[10:25:00.894]             sys.calls <- base::sys.calls
[10:25:00.894]             `[[` <- base::`[[`
[10:25:00.894]             `+` <- base::`+`
[10:25:00.894]             `<<-` <- base::`<<-`
[10:25:00.894]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.894]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.894]                   3L)]
[10:25:00.894]             }
[10:25:00.894]             function(cond) {
[10:25:00.894]                 is_error <- inherits(cond, "error")
[10:25:00.894]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.894]                   NULL)
[10:25:00.894]                 if (is_error) {
[10:25:00.894]                   sessionInformation <- function() {
[10:25:00.894]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.894]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.894]                       search = base::search(), system = base::Sys.info())
[10:25:00.894]                   }
[10:25:00.894]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.894]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.894]                     cond$call), session = sessionInformation(), 
[10:25:00.894]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.894]                   signalCondition(cond)
[10:25:00.894]                 }
[10:25:00.894]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.894]                 "immediateCondition"))) {
[10:25:00.894]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.894]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.894]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.894]                   if (TRUE && !signal) {
[10:25:00.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.894]                     {
[10:25:00.894]                       inherits <- base::inherits
[10:25:00.894]                       invokeRestart <- base::invokeRestart
[10:25:00.894]                       is.null <- base::is.null
[10:25:00.894]                       muffled <- FALSE
[10:25:00.894]                       if (inherits(cond, "message")) {
[10:25:00.894]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.894]                         if (muffled) 
[10:25:00.894]                           invokeRestart("muffleMessage")
[10:25:00.894]                       }
[10:25:00.894]                       else if (inherits(cond, "warning")) {
[10:25:00.894]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.894]                         if (muffled) 
[10:25:00.894]                           invokeRestart("muffleWarning")
[10:25:00.894]                       }
[10:25:00.894]                       else if (inherits(cond, "condition")) {
[10:25:00.894]                         if (!is.null(pattern)) {
[10:25:00.894]                           computeRestarts <- base::computeRestarts
[10:25:00.894]                           grepl <- base::grepl
[10:25:00.894]                           restarts <- computeRestarts(cond)
[10:25:00.894]                           for (restart in restarts) {
[10:25:00.894]                             name <- restart$name
[10:25:00.894]                             if (is.null(name)) 
[10:25:00.894]                               next
[10:25:00.894]                             if (!grepl(pattern, name)) 
[10:25:00.894]                               next
[10:25:00.894]                             invokeRestart(restart)
[10:25:00.894]                             muffled <- TRUE
[10:25:00.894]                             break
[10:25:00.894]                           }
[10:25:00.894]                         }
[10:25:00.894]                       }
[10:25:00.894]                       invisible(muffled)
[10:25:00.894]                     }
[10:25:00.894]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.894]                   }
[10:25:00.894]                 }
[10:25:00.894]                 else {
[10:25:00.894]                   if (TRUE) {
[10:25:00.894]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.894]                     {
[10:25:00.894]                       inherits <- base::inherits
[10:25:00.894]                       invokeRestart <- base::invokeRestart
[10:25:00.894]                       is.null <- base::is.null
[10:25:00.894]                       muffled <- FALSE
[10:25:00.894]                       if (inherits(cond, "message")) {
[10:25:00.894]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.894]                         if (muffled) 
[10:25:00.894]                           invokeRestart("muffleMessage")
[10:25:00.894]                       }
[10:25:00.894]                       else if (inherits(cond, "warning")) {
[10:25:00.894]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.894]                         if (muffled) 
[10:25:00.894]                           invokeRestart("muffleWarning")
[10:25:00.894]                       }
[10:25:00.894]                       else if (inherits(cond, "condition")) {
[10:25:00.894]                         if (!is.null(pattern)) {
[10:25:00.894]                           computeRestarts <- base::computeRestarts
[10:25:00.894]                           grepl <- base::grepl
[10:25:00.894]                           restarts <- computeRestarts(cond)
[10:25:00.894]                           for (restart in restarts) {
[10:25:00.894]                             name <- restart$name
[10:25:00.894]                             if (is.null(name)) 
[10:25:00.894]                               next
[10:25:00.894]                             if (!grepl(pattern, name)) 
[10:25:00.894]                               next
[10:25:00.894]                             invokeRestart(restart)
[10:25:00.894]                             muffled <- TRUE
[10:25:00.894]                             break
[10:25:00.894]                           }
[10:25:00.894]                         }
[10:25:00.894]                       }
[10:25:00.894]                       invisible(muffled)
[10:25:00.894]                     }
[10:25:00.894]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.894]                   }
[10:25:00.894]                 }
[10:25:00.894]             }
[10:25:00.894]         }))
[10:25:00.894]     }, error = function(ex) {
[10:25:00.894]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.894]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.894]                 ...future.rng), started = ...future.startTime, 
[10:25:00.894]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.894]             version = "1.8"), class = "FutureResult")
[10:25:00.894]     }, finally = {
[10:25:00.894]         if (!identical(...future.workdir, getwd())) 
[10:25:00.894]             setwd(...future.workdir)
[10:25:00.894]         {
[10:25:00.894]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.894]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.894]             }
[10:25:00.894]             base::options(...future.oldOptions)
[10:25:00.894]             if (.Platform$OS.type == "windows") {
[10:25:00.894]                 old_names <- names(...future.oldEnvVars)
[10:25:00.894]                 envs <- base::Sys.getenv()
[10:25:00.894]                 names <- names(envs)
[10:25:00.894]                 common <- intersect(names, old_names)
[10:25:00.894]                 added <- setdiff(names, old_names)
[10:25:00.894]                 removed <- setdiff(old_names, names)
[10:25:00.894]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.894]                   envs[common]]
[10:25:00.894]                 NAMES <- toupper(changed)
[10:25:00.894]                 args <- list()
[10:25:00.894]                 for (kk in seq_along(NAMES)) {
[10:25:00.894]                   name <- changed[[kk]]
[10:25:00.894]                   NAME <- NAMES[[kk]]
[10:25:00.894]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.894]                     next
[10:25:00.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.894]                 }
[10:25:00.894]                 NAMES <- toupper(added)
[10:25:00.894]                 for (kk in seq_along(NAMES)) {
[10:25:00.894]                   name <- added[[kk]]
[10:25:00.894]                   NAME <- NAMES[[kk]]
[10:25:00.894]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.894]                     next
[10:25:00.894]                   args[[name]] <- ""
[10:25:00.894]                 }
[10:25:00.894]                 NAMES <- toupper(removed)
[10:25:00.894]                 for (kk in seq_along(NAMES)) {
[10:25:00.894]                   name <- removed[[kk]]
[10:25:00.894]                   NAME <- NAMES[[kk]]
[10:25:00.894]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.894]                     next
[10:25:00.894]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.894]                 }
[10:25:00.894]                 if (length(args) > 0) 
[10:25:00.894]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.894]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.894]             }
[10:25:00.894]             else {
[10:25:00.894]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.894]             }
[10:25:00.894]             {
[10:25:00.894]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.894]                   0L) {
[10:25:00.894]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.894]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.894]                   base::options(opts)
[10:25:00.894]                 }
[10:25:00.894]                 {
[10:25:00.894]                   {
[10:25:00.894]                     NULL
[10:25:00.894]                     RNGkind("Mersenne-Twister")
[10:25:00.894]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.894]                       inherits = FALSE)
[10:25:00.894]                   }
[10:25:00.894]                   options(future.plan = NULL)
[10:25:00.894]                   if (is.na(NA_character_)) 
[10:25:00.894]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.894]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.894]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.894]                   {
[10:25:00.894]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.894]                     if (!future$lazy) 
[10:25:00.894]                       future <- run(future)
[10:25:00.894]                     invisible(future)
[10:25:00.894]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.894]                 }
[10:25:00.894]             }
[10:25:00.894]         }
[10:25:00.894]     })
[10:25:00.894]     if (TRUE) {
[10:25:00.894]         base::sink(type = "output", split = FALSE)
[10:25:00.894]         if (TRUE) {
[10:25:00.894]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.894]         }
[10:25:00.894]         else {
[10:25:00.894]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.894]         }
[10:25:00.894]         base::close(...future.stdout)
[10:25:00.894]         ...future.stdout <- NULL
[10:25:00.894]     }
[10:25:00.894]     ...future.result$conditions <- ...future.conditions
[10:25:00.894]     ...future.result$finished <- base::Sys.time()
[10:25:00.894]     ...future.result
[10:25:00.894] }
[10:25:00.896] plan(): Setting new future strategy stack:
[10:25:00.896] List of future strategies:
[10:25:00.896] 1. sequential:
[10:25:00.896]    - args: function (..., envir = parent.frame())
[10:25:00.896]    - tweaked: FALSE
[10:25:00.896]    - call: NULL
[10:25:00.896] plan(): nbrOfWorkers() = 1
[10:25:00.897] plan(): Setting new future strategy stack:
[10:25:00.897] List of future strategies:
[10:25:00.897] 1. sequential:
[10:25:00.897]    - args: function (..., envir = parent.frame())
[10:25:00.897]    - tweaked: FALSE
[10:25:00.897]    - call: future::plan("sequential")
[10:25:00.898] plan(): nbrOfWorkers() = 1
[10:25:00.898] SequentialFuture started (and completed)
[10:25:00.898] signalConditions() ...
[10:25:00.898]  - include = ‘immediateCondition’
[10:25:00.898]  - exclude = 
[10:25:00.898]  - resignal = FALSE
[10:25:00.898]  - Number of conditions: 1
[10:25:00.898] signalConditions() ... done
[10:25:00.899] - Launch lazy future ... done
[10:25:00.899] run() for ‘SequentialFuture’ ... done
> ll[[2]] <- future({ 42L; stop("Woops") })
[10:25:00.899] getGlobalsAndPackages() ...
[10:25:00.899] Searching for globals...
[10:25:00.900] - globals found: [2] ‘{’, ‘stop’
[10:25:00.900] Searching for globals ... DONE
[10:25:00.900] Resolving globals: FALSE
[10:25:00.900] 
[10:25:00.900] 
[10:25:00.900] getGlobalsAndPackages() ... DONE
[10:25:00.901] run() for ‘Future’ ...
[10:25:00.901] - state: ‘created’
[10:25:00.901] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.901] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.901] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.901]   - Field: ‘label’
[10:25:00.901]   - Field: ‘local’
[10:25:00.901]   - Field: ‘owner’
[10:25:00.902]   - Field: ‘envir’
[10:25:00.902]   - Field: ‘packages’
[10:25:00.902]   - Field: ‘gc’
[10:25:00.902]   - Field: ‘conditions’
[10:25:00.902]   - Field: ‘expr’
[10:25:00.902]   - Field: ‘uuid’
[10:25:00.902]   - Field: ‘seed’
[10:25:00.902]   - Field: ‘version’
[10:25:00.902]   - Field: ‘result’
[10:25:00.902]   - Field: ‘asynchronous’
[10:25:00.903]   - Field: ‘calls’
[10:25:00.903]   - Field: ‘globals’
[10:25:00.903]   - Field: ‘stdout’
[10:25:00.903]   - Field: ‘earlySignal’
[10:25:00.903]   - Field: ‘lazy’
[10:25:00.903]   - Field: ‘state’
[10:25:00.903] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.903] - Launch lazy future ...
[10:25:00.903] Packages needed by the future expression (n = 0): <none>
[10:25:00.903] Packages needed by future strategies (n = 0): <none>
[10:25:00.904] {
[10:25:00.904]     {
[10:25:00.904]         {
[10:25:00.904]             ...future.startTime <- base::Sys.time()
[10:25:00.904]             {
[10:25:00.904]                 {
[10:25:00.904]                   {
[10:25:00.904]                     base::local({
[10:25:00.904]                       has_future <- base::requireNamespace("future", 
[10:25:00.904]                         quietly = TRUE)
[10:25:00.904]                       if (has_future) {
[10:25:00.904]                         ns <- base::getNamespace("future")
[10:25:00.904]                         version <- ns[[".package"]][["version"]]
[10:25:00.904]                         if (is.null(version)) 
[10:25:00.904]                           version <- utils::packageVersion("future")
[10:25:00.904]                       }
[10:25:00.904]                       else {
[10:25:00.904]                         version <- NULL
[10:25:00.904]                       }
[10:25:00.904]                       if (!has_future || version < "1.8.0") {
[10:25:00.904]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.904]                           "", base::R.version$version.string), 
[10:25:00.904]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.904]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.904]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.904]                             "release", "version")], collapse = " "), 
[10:25:00.904]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.904]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.904]                           info)
[10:25:00.904]                         info <- base::paste(info, collapse = "; ")
[10:25:00.904]                         if (!has_future) {
[10:25:00.904]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.904]                             info)
[10:25:00.904]                         }
[10:25:00.904]                         else {
[10:25:00.904]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.904]                             info, version)
[10:25:00.904]                         }
[10:25:00.904]                         base::stop(msg)
[10:25:00.904]                       }
[10:25:00.904]                     })
[10:25:00.904]                   }
[10:25:00.904]                   options(future.plan = NULL)
[10:25:00.904]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.904]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.904]                 }
[10:25:00.904]                 ...future.workdir <- getwd()
[10:25:00.904]             }
[10:25:00.904]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.904]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.904]         }
[10:25:00.904]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.904]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.904]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.904]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.904]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.904]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.904]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.904]             base::names(...future.oldOptions))
[10:25:00.904]     }
[10:25:00.904]     if (FALSE) {
[10:25:00.904]     }
[10:25:00.904]     else {
[10:25:00.904]         if (TRUE) {
[10:25:00.904]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.904]                 open = "w")
[10:25:00.904]         }
[10:25:00.904]         else {
[10:25:00.904]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.904]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.904]         }
[10:25:00.904]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.904]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.904]             base::sink(type = "output", split = FALSE)
[10:25:00.904]             base::close(...future.stdout)
[10:25:00.904]         }, add = TRUE)
[10:25:00.904]     }
[10:25:00.904]     ...future.frame <- base::sys.nframe()
[10:25:00.904]     ...future.conditions <- base::list()
[10:25:00.904]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.904]     if (FALSE) {
[10:25:00.904]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.904]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.904]     }
[10:25:00.904]     ...future.result <- base::tryCatch({
[10:25:00.904]         base::withCallingHandlers({
[10:25:00.904]             ...future.value <- base::withVisible(base::local({
[10:25:00.904]                 42L
[10:25:00.904]                 stop("Woops")
[10:25:00.904]             }))
[10:25:00.904]             future::FutureResult(value = ...future.value$value, 
[10:25:00.904]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.904]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.904]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.904]                     ...future.globalenv.names))
[10:25:00.904]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.904]         }, condition = base::local({
[10:25:00.904]             c <- base::c
[10:25:00.904]             inherits <- base::inherits
[10:25:00.904]             invokeRestart <- base::invokeRestart
[10:25:00.904]             length <- base::length
[10:25:00.904]             list <- base::list
[10:25:00.904]             seq.int <- base::seq.int
[10:25:00.904]             signalCondition <- base::signalCondition
[10:25:00.904]             sys.calls <- base::sys.calls
[10:25:00.904]             `[[` <- base::`[[`
[10:25:00.904]             `+` <- base::`+`
[10:25:00.904]             `<<-` <- base::`<<-`
[10:25:00.904]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.904]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.904]                   3L)]
[10:25:00.904]             }
[10:25:00.904]             function(cond) {
[10:25:00.904]                 is_error <- inherits(cond, "error")
[10:25:00.904]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.904]                   NULL)
[10:25:00.904]                 if (is_error) {
[10:25:00.904]                   sessionInformation <- function() {
[10:25:00.904]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.904]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.904]                       search = base::search(), system = base::Sys.info())
[10:25:00.904]                   }
[10:25:00.904]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.904]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.904]                     cond$call), session = sessionInformation(), 
[10:25:00.904]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.904]                   signalCondition(cond)
[10:25:00.904]                 }
[10:25:00.904]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.904]                 "immediateCondition"))) {
[10:25:00.904]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.904]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.904]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.904]                   if (TRUE && !signal) {
[10:25:00.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.904]                     {
[10:25:00.904]                       inherits <- base::inherits
[10:25:00.904]                       invokeRestart <- base::invokeRestart
[10:25:00.904]                       is.null <- base::is.null
[10:25:00.904]                       muffled <- FALSE
[10:25:00.904]                       if (inherits(cond, "message")) {
[10:25:00.904]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.904]                         if (muffled) 
[10:25:00.904]                           invokeRestart("muffleMessage")
[10:25:00.904]                       }
[10:25:00.904]                       else if (inherits(cond, "warning")) {
[10:25:00.904]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.904]                         if (muffled) 
[10:25:00.904]                           invokeRestart("muffleWarning")
[10:25:00.904]                       }
[10:25:00.904]                       else if (inherits(cond, "condition")) {
[10:25:00.904]                         if (!is.null(pattern)) {
[10:25:00.904]                           computeRestarts <- base::computeRestarts
[10:25:00.904]                           grepl <- base::grepl
[10:25:00.904]                           restarts <- computeRestarts(cond)
[10:25:00.904]                           for (restart in restarts) {
[10:25:00.904]                             name <- restart$name
[10:25:00.904]                             if (is.null(name)) 
[10:25:00.904]                               next
[10:25:00.904]                             if (!grepl(pattern, name)) 
[10:25:00.904]                               next
[10:25:00.904]                             invokeRestart(restart)
[10:25:00.904]                             muffled <- TRUE
[10:25:00.904]                             break
[10:25:00.904]                           }
[10:25:00.904]                         }
[10:25:00.904]                       }
[10:25:00.904]                       invisible(muffled)
[10:25:00.904]                     }
[10:25:00.904]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.904]                   }
[10:25:00.904]                 }
[10:25:00.904]                 else {
[10:25:00.904]                   if (TRUE) {
[10:25:00.904]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.904]                     {
[10:25:00.904]                       inherits <- base::inherits
[10:25:00.904]                       invokeRestart <- base::invokeRestart
[10:25:00.904]                       is.null <- base::is.null
[10:25:00.904]                       muffled <- FALSE
[10:25:00.904]                       if (inherits(cond, "message")) {
[10:25:00.904]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.904]                         if (muffled) 
[10:25:00.904]                           invokeRestart("muffleMessage")
[10:25:00.904]                       }
[10:25:00.904]                       else if (inherits(cond, "warning")) {
[10:25:00.904]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.904]                         if (muffled) 
[10:25:00.904]                           invokeRestart("muffleWarning")
[10:25:00.904]                       }
[10:25:00.904]                       else if (inherits(cond, "condition")) {
[10:25:00.904]                         if (!is.null(pattern)) {
[10:25:00.904]                           computeRestarts <- base::computeRestarts
[10:25:00.904]                           grepl <- base::grepl
[10:25:00.904]                           restarts <- computeRestarts(cond)
[10:25:00.904]                           for (restart in restarts) {
[10:25:00.904]                             name <- restart$name
[10:25:00.904]                             if (is.null(name)) 
[10:25:00.904]                               next
[10:25:00.904]                             if (!grepl(pattern, name)) 
[10:25:00.904]                               next
[10:25:00.904]                             invokeRestart(restart)
[10:25:00.904]                             muffled <- TRUE
[10:25:00.904]                             break
[10:25:00.904]                           }
[10:25:00.904]                         }
[10:25:00.904]                       }
[10:25:00.904]                       invisible(muffled)
[10:25:00.904]                     }
[10:25:00.904]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.904]                   }
[10:25:00.904]                 }
[10:25:00.904]             }
[10:25:00.904]         }))
[10:25:00.904]     }, error = function(ex) {
[10:25:00.904]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.904]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.904]                 ...future.rng), started = ...future.startTime, 
[10:25:00.904]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.904]             version = "1.8"), class = "FutureResult")
[10:25:00.904]     }, finally = {
[10:25:00.904]         if (!identical(...future.workdir, getwd())) 
[10:25:00.904]             setwd(...future.workdir)
[10:25:00.904]         {
[10:25:00.904]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.904]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.904]             }
[10:25:00.904]             base::options(...future.oldOptions)
[10:25:00.904]             if (.Platform$OS.type == "windows") {
[10:25:00.904]                 old_names <- names(...future.oldEnvVars)
[10:25:00.904]                 envs <- base::Sys.getenv()
[10:25:00.904]                 names <- names(envs)
[10:25:00.904]                 common <- intersect(names, old_names)
[10:25:00.904]                 added <- setdiff(names, old_names)
[10:25:00.904]                 removed <- setdiff(old_names, names)
[10:25:00.904]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.904]                   envs[common]]
[10:25:00.904]                 NAMES <- toupper(changed)
[10:25:00.904]                 args <- list()
[10:25:00.904]                 for (kk in seq_along(NAMES)) {
[10:25:00.904]                   name <- changed[[kk]]
[10:25:00.904]                   NAME <- NAMES[[kk]]
[10:25:00.904]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.904]                     next
[10:25:00.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.904]                 }
[10:25:00.904]                 NAMES <- toupper(added)
[10:25:00.904]                 for (kk in seq_along(NAMES)) {
[10:25:00.904]                   name <- added[[kk]]
[10:25:00.904]                   NAME <- NAMES[[kk]]
[10:25:00.904]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.904]                     next
[10:25:00.904]                   args[[name]] <- ""
[10:25:00.904]                 }
[10:25:00.904]                 NAMES <- toupper(removed)
[10:25:00.904]                 for (kk in seq_along(NAMES)) {
[10:25:00.904]                   name <- removed[[kk]]
[10:25:00.904]                   NAME <- NAMES[[kk]]
[10:25:00.904]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.904]                     next
[10:25:00.904]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.904]                 }
[10:25:00.904]                 if (length(args) > 0) 
[10:25:00.904]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.904]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.904]             }
[10:25:00.904]             else {
[10:25:00.904]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.904]             }
[10:25:00.904]             {
[10:25:00.904]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.904]                   0L) {
[10:25:00.904]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.904]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.904]                   base::options(opts)
[10:25:00.904]                 }
[10:25:00.904]                 {
[10:25:00.904]                   {
[10:25:00.904]                     NULL
[10:25:00.904]                     RNGkind("Mersenne-Twister")
[10:25:00.904]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.904]                       inherits = FALSE)
[10:25:00.904]                   }
[10:25:00.904]                   options(future.plan = NULL)
[10:25:00.904]                   if (is.na(NA_character_)) 
[10:25:00.904]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.904]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.904]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.904]                   {
[10:25:00.904]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.904]                     if (!future$lazy) 
[10:25:00.904]                       future <- run(future)
[10:25:00.904]                     invisible(future)
[10:25:00.904]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.904]                 }
[10:25:00.904]             }
[10:25:00.904]         }
[10:25:00.904]     })
[10:25:00.904]     if (TRUE) {
[10:25:00.904]         base::sink(type = "output", split = FALSE)
[10:25:00.904]         if (TRUE) {
[10:25:00.904]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.904]         }
[10:25:00.904]         else {
[10:25:00.904]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.904]         }
[10:25:00.904]         base::close(...future.stdout)
[10:25:00.904]         ...future.stdout <- NULL
[10:25:00.904]     }
[10:25:00.904]     ...future.result$conditions <- ...future.conditions
[10:25:00.904]     ...future.result$finished <- base::Sys.time()
[10:25:00.904]     ...future.result
[10:25:00.904] }
[10:25:00.906] plan(): Setting new future strategy stack:
[10:25:00.906] List of future strategies:
[10:25:00.906] 1. sequential:
[10:25:00.906]    - args: function (..., envir = parent.frame())
[10:25:00.906]    - tweaked: FALSE
[10:25:00.906]    - call: NULL
[10:25:00.906] plan(): nbrOfWorkers() = 1
[10:25:00.907] plan(): Setting new future strategy stack:
[10:25:00.907] List of future strategies:
[10:25:00.907] 1. sequential:
[10:25:00.907]    - args: function (..., envir = parent.frame())
[10:25:00.907]    - tweaked: FALSE
[10:25:00.907]    - call: future::plan("sequential")
[10:25:00.907] plan(): nbrOfWorkers() = 1
[10:25:00.907] SequentialFuture started (and completed)
[10:25:00.908] signalConditions() ...
[10:25:00.908]  - include = ‘immediateCondition’
[10:25:00.908]  - exclude = 
[10:25:00.908]  - resignal = FALSE
[10:25:00.908]  - Number of conditions: 1
[10:25:00.908] signalConditions() ... done
[10:25:00.908] - Launch lazy future ... done
[10:25:00.908] run() for ‘SequentialFuture’ ... done
> vs <- value(ll, signal = FALSE)
[10:25:00.909] resolve() on list ...
[10:25:00.909]  recursive: 0
[10:25:00.909]  length: 2
[10:25:00.909] 
[10:25:00.909] resolved() for ‘SequentialFuture’ ...
[10:25:00.909] - state: ‘finished’
[10:25:00.910] - run: TRUE
[10:25:00.910] - result: ‘FutureResult’
[10:25:00.910] resolved() for ‘SequentialFuture’ ... done
[10:25:00.910] Future #1
[10:25:00.910] signalConditions() ...
[10:25:00.910]  - include = ‘immediateCondition’
[10:25:00.910]  - exclude = 
[10:25:00.910]  - resignal = FALSE
[10:25:00.910]  - Number of conditions: 1
[10:25:00.910] signalConditions() ... done
[10:25:00.910] signalConditionsASAP(SequentialFuture, pos=1) ...
[10:25:00.911] - nx: 2
[10:25:00.911] - relay: TRUE
[10:25:00.911] - stdout: TRUE
[10:25:00.911] - signal: FALSE
[10:25:00.911] - resignal: FALSE
[10:25:00.911] - force: TRUE
[10:25:00.911] - relayed: [n=2] FALSE, FALSE
[10:25:00.911] - queued futures: [n=2] FALSE, FALSE
[10:25:00.911]  - until=1
[10:25:00.911]  - relaying element #1
[10:25:00.911] signalConditions() ...
[10:25:00.912]  - include = ‘immediateCondition’
[10:25:00.912]  - exclude = 
[10:25:00.912]  - resignal = FALSE
[10:25:00.912]  - Number of conditions: 1
[10:25:00.912] signalConditions() ... done
[10:25:00.912] - relayed: [n=2] TRUE, FALSE
[10:25:00.912] - queued futures: [n=2] TRUE, FALSE
[10:25:00.912] signalConditionsASAP(SequentialFuture, pos=1) ... done
[10:25:00.912]  length: 1 (resolved future 1)
[10:25:00.913] resolved() for ‘SequentialFuture’ ...
[10:25:00.913] - state: ‘finished’
[10:25:00.913] - run: TRUE
[10:25:00.914] - result: ‘FutureResult’
[10:25:00.914] resolved() for ‘SequentialFuture’ ... done
[10:25:00.915] Future #2
[10:25:00.915] signalConditions() ...
[10:25:00.915]  - include = ‘immediateCondition’
[10:25:00.915]  - exclude = 
[10:25:00.915]  - resignal = FALSE
[10:25:00.915]  - Number of conditions: 1
[10:25:00.915] signalConditions() ... done
[10:25:00.915] signalConditionsASAP(SequentialFuture, pos=2) ...
[10:25:00.915] - nx: 2
[10:25:00.915] - relay: TRUE
[10:25:00.915] - stdout: TRUE
[10:25:00.916] - signal: FALSE
[10:25:00.916] - resignal: FALSE
[10:25:00.916] - force: TRUE
[10:25:00.916] - relayed: [n=2] TRUE, FALSE
[10:25:00.916] - queued futures: [n=2] TRUE, FALSE
[10:25:00.916]  - until=2
[10:25:00.916]  - relaying element #2
[10:25:00.916] signalConditions() ...
[10:25:00.916]  - include = ‘immediateCondition’
[10:25:00.916]  - exclude = 
[10:25:00.916]  - resignal = FALSE
[10:25:00.917]  - Number of conditions: 1
[10:25:00.917] signalConditions() ... done
[10:25:00.917] - relayed: [n=2] TRUE, TRUE
[10:25:00.917] - queued futures: [n=2] TRUE, TRUE
[10:25:00.917] signalConditionsASAP(SequentialFuture, pos=2) ... done
[10:25:00.917]  length: 0 (resolved future 2)
[10:25:00.917] Relaying remaining futures
[10:25:00.917] signalConditionsASAP(NULL, pos=0) ...
[10:25:00.917] - nx: 2
[10:25:00.917] - relay: TRUE
[10:25:00.918] - stdout: TRUE
[10:25:00.918] - signal: FALSE
[10:25:00.918] - resignal: FALSE
[10:25:00.918] - force: TRUE
[10:25:00.918] - relayed: [n=2] TRUE, TRUE
[10:25:00.918] - queued futures: [n=2] TRUE, TRUE
 - flush all
[10:25:00.918] - relayed: [n=2] TRUE, TRUE
[10:25:00.918] - queued futures: [n=2] TRUE, TRUE
[10:25:00.918] signalConditionsASAP(NULL, pos=0) ... done
[10:25:00.918] resolve() on list ... DONE
[10:25:00.919] signalConditions() ...
[10:25:00.919]  - include = ‘immediateCondition’
[10:25:00.919]  - exclude = 
[10:25:00.919]  - resignal = FALSE
[10:25:00.919]  - Number of conditions: 1
[10:25:00.919] signalConditions() ... done
[10:25:00.919] signalConditions() ...
[10:25:00.919]  - include = ‘immediateCondition’
[10:25:00.919]  - exclude = 
[10:25:00.919]  - resignal = FALSE
[10:25:00.919]  - Number of conditions: 1
[10:25:00.920] signalConditions() ... done
> calls <- backtrace(ll[[2]])
[10:25:00.920] resolved() for ‘SequentialFuture’ ...
[10:25:00.920] - state: ‘finished’
[10:25:00.920] - run: TRUE
[10:25:00.920] - result: ‘FutureResult’
[10:25:00.920] resolved() for ‘SequentialFuture’ ... done
> print(calls)
[[1]]
future({
    42L
    stop("Woops")
})

[[2]]
Future(expr, substitute = FALSE, envir = envir, lazy = TRUE, 
    seed = seed, globals = globals, packages = packages, stdout = stdout, 
    conditions = conditions, earlySignal = earlySignal, label = label, 
    gc = gc, ...)

[[3]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

[[4]]
stop("Woops")

[[5]]
eval(quote({
    42L
    stop("Woops")
}), new.env())

> stopifnot(is.list(calls))
> 
> message("*** backtrace( ) - subsetting ... DONE")
*** backtrace( ) - subsetting ... DONE
> 
> 
> message("*** backtrace( ) - exceptions ...")
*** backtrace( ) - exceptions ...
> 
> message("- No condition ...")
- No condition ...
> f <- future(42L)
[10:25:00.921] getGlobalsAndPackages() ...
[10:25:00.921] Searching for globals...
[10:25:00.921] 
[10:25:00.921] Searching for globals ... DONE
[10:25:00.921] - globals: [0] <none>
[10:25:00.921] getGlobalsAndPackages() ... DONE
[10:25:00.922] run() for ‘Future’ ...
[10:25:00.922] - state: ‘created’
[10:25:00.922] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.922] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.922] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.922]   - Field: ‘label’
[10:25:00.922]   - Field: ‘local’
[10:25:00.923]   - Field: ‘owner’
[10:25:00.923]   - Field: ‘envir’
[10:25:00.923]   - Field: ‘packages’
[10:25:00.923]   - Field: ‘gc’
[10:25:00.923]   - Field: ‘conditions’
[10:25:00.923]   - Field: ‘expr’
[10:25:00.923]   - Field: ‘uuid’
[10:25:00.923]   - Field: ‘seed’
[10:25:00.923]   - Field: ‘version’
[10:25:00.923]   - Field: ‘result’
[10:25:00.923]   - Field: ‘asynchronous’
[10:25:00.924]   - Field: ‘calls’
[10:25:00.924]   - Field: ‘globals’
[10:25:00.924]   - Field: ‘stdout’
[10:25:00.924]   - Field: ‘earlySignal’
[10:25:00.924]   - Field: ‘lazy’
[10:25:00.924]   - Field: ‘state’
[10:25:00.924] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.924] - Launch lazy future ...
[10:25:00.924] Packages needed by the future expression (n = 0): <none>
[10:25:00.924] Packages needed by future strategies (n = 0): <none>
[10:25:00.925] {
[10:25:00.925]     {
[10:25:00.925]         {
[10:25:00.925]             ...future.startTime <- base::Sys.time()
[10:25:00.925]             {
[10:25:00.925]                 {
[10:25:00.925]                   {
[10:25:00.925]                     base::local({
[10:25:00.925]                       has_future <- base::requireNamespace("future", 
[10:25:00.925]                         quietly = TRUE)
[10:25:00.925]                       if (has_future) {
[10:25:00.925]                         ns <- base::getNamespace("future")
[10:25:00.925]                         version <- ns[[".package"]][["version"]]
[10:25:00.925]                         if (is.null(version)) 
[10:25:00.925]                           version <- utils::packageVersion("future")
[10:25:00.925]                       }
[10:25:00.925]                       else {
[10:25:00.925]                         version <- NULL
[10:25:00.925]                       }
[10:25:00.925]                       if (!has_future || version < "1.8.0") {
[10:25:00.925]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.925]                           "", base::R.version$version.string), 
[10:25:00.925]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.925]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.925]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.925]                             "release", "version")], collapse = " "), 
[10:25:00.925]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.925]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.925]                           info)
[10:25:00.925]                         info <- base::paste(info, collapse = "; ")
[10:25:00.925]                         if (!has_future) {
[10:25:00.925]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.925]                             info)
[10:25:00.925]                         }
[10:25:00.925]                         else {
[10:25:00.925]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.925]                             info, version)
[10:25:00.925]                         }
[10:25:00.925]                         base::stop(msg)
[10:25:00.925]                       }
[10:25:00.925]                     })
[10:25:00.925]                   }
[10:25:00.925]                   options(future.plan = NULL)
[10:25:00.925]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.925]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.925]                 }
[10:25:00.925]                 ...future.workdir <- getwd()
[10:25:00.925]             }
[10:25:00.925]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.925]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.925]         }
[10:25:00.925]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.925]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.925]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.925]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.925]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.925]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.925]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.925]             base::names(...future.oldOptions))
[10:25:00.925]     }
[10:25:00.925]     if (FALSE) {
[10:25:00.925]     }
[10:25:00.925]     else {
[10:25:00.925]         if (TRUE) {
[10:25:00.925]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.925]                 open = "w")
[10:25:00.925]         }
[10:25:00.925]         else {
[10:25:00.925]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.925]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.925]         }
[10:25:00.925]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.925]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.925]             base::sink(type = "output", split = FALSE)
[10:25:00.925]             base::close(...future.stdout)
[10:25:00.925]         }, add = TRUE)
[10:25:00.925]     }
[10:25:00.925]     ...future.frame <- base::sys.nframe()
[10:25:00.925]     ...future.conditions <- base::list()
[10:25:00.925]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.925]     if (FALSE) {
[10:25:00.925]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.925]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.925]     }
[10:25:00.925]     ...future.result <- base::tryCatch({
[10:25:00.925]         base::withCallingHandlers({
[10:25:00.925]             ...future.value <- base::withVisible(base::local(42L))
[10:25:00.925]             future::FutureResult(value = ...future.value$value, 
[10:25:00.925]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.925]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.925]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.925]                     ...future.globalenv.names))
[10:25:00.925]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.925]         }, condition = base::local({
[10:25:00.925]             c <- base::c
[10:25:00.925]             inherits <- base::inherits
[10:25:00.925]             invokeRestart <- base::invokeRestart
[10:25:00.925]             length <- base::length
[10:25:00.925]             list <- base::list
[10:25:00.925]             seq.int <- base::seq.int
[10:25:00.925]             signalCondition <- base::signalCondition
[10:25:00.925]             sys.calls <- base::sys.calls
[10:25:00.925]             `[[` <- base::`[[`
[10:25:00.925]             `+` <- base::`+`
[10:25:00.925]             `<<-` <- base::`<<-`
[10:25:00.925]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.925]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.925]                   3L)]
[10:25:00.925]             }
[10:25:00.925]             function(cond) {
[10:25:00.925]                 is_error <- inherits(cond, "error")
[10:25:00.925]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.925]                   NULL)
[10:25:00.925]                 if (is_error) {
[10:25:00.925]                   sessionInformation <- function() {
[10:25:00.925]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.925]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.925]                       search = base::search(), system = base::Sys.info())
[10:25:00.925]                   }
[10:25:00.925]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.925]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.925]                     cond$call), session = sessionInformation(), 
[10:25:00.925]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.925]                   signalCondition(cond)
[10:25:00.925]                 }
[10:25:00.925]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.925]                 "immediateCondition"))) {
[10:25:00.925]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.925]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.925]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.925]                   if (TRUE && !signal) {
[10:25:00.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.925]                     {
[10:25:00.925]                       inherits <- base::inherits
[10:25:00.925]                       invokeRestart <- base::invokeRestart
[10:25:00.925]                       is.null <- base::is.null
[10:25:00.925]                       muffled <- FALSE
[10:25:00.925]                       if (inherits(cond, "message")) {
[10:25:00.925]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.925]                         if (muffled) 
[10:25:00.925]                           invokeRestart("muffleMessage")
[10:25:00.925]                       }
[10:25:00.925]                       else if (inherits(cond, "warning")) {
[10:25:00.925]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.925]                         if (muffled) 
[10:25:00.925]                           invokeRestart("muffleWarning")
[10:25:00.925]                       }
[10:25:00.925]                       else if (inherits(cond, "condition")) {
[10:25:00.925]                         if (!is.null(pattern)) {
[10:25:00.925]                           computeRestarts <- base::computeRestarts
[10:25:00.925]                           grepl <- base::grepl
[10:25:00.925]                           restarts <- computeRestarts(cond)
[10:25:00.925]                           for (restart in restarts) {
[10:25:00.925]                             name <- restart$name
[10:25:00.925]                             if (is.null(name)) 
[10:25:00.925]                               next
[10:25:00.925]                             if (!grepl(pattern, name)) 
[10:25:00.925]                               next
[10:25:00.925]                             invokeRestart(restart)
[10:25:00.925]                             muffled <- TRUE
[10:25:00.925]                             break
[10:25:00.925]                           }
[10:25:00.925]                         }
[10:25:00.925]                       }
[10:25:00.925]                       invisible(muffled)
[10:25:00.925]                     }
[10:25:00.925]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.925]                   }
[10:25:00.925]                 }
[10:25:00.925]                 else {
[10:25:00.925]                   if (TRUE) {
[10:25:00.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.925]                     {
[10:25:00.925]                       inherits <- base::inherits
[10:25:00.925]                       invokeRestart <- base::invokeRestart
[10:25:00.925]                       is.null <- base::is.null
[10:25:00.925]                       muffled <- FALSE
[10:25:00.925]                       if (inherits(cond, "message")) {
[10:25:00.925]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.925]                         if (muffled) 
[10:25:00.925]                           invokeRestart("muffleMessage")
[10:25:00.925]                       }
[10:25:00.925]                       else if (inherits(cond, "warning")) {
[10:25:00.925]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.925]                         if (muffled) 
[10:25:00.925]                           invokeRestart("muffleWarning")
[10:25:00.925]                       }
[10:25:00.925]                       else if (inherits(cond, "condition")) {
[10:25:00.925]                         if (!is.null(pattern)) {
[10:25:00.925]                           computeRestarts <- base::computeRestarts
[10:25:00.925]                           grepl <- base::grepl
[10:25:00.925]                           restarts <- computeRestarts(cond)
[10:25:00.925]                           for (restart in restarts) {
[10:25:00.925]                             name <- restart$name
[10:25:00.925]                             if (is.null(name)) 
[10:25:00.925]                               next
[10:25:00.925]                             if (!grepl(pattern, name)) 
[10:25:00.925]                               next
[10:25:00.925]                             invokeRestart(restart)
[10:25:00.925]                             muffled <- TRUE
[10:25:00.925]                             break
[10:25:00.925]                           }
[10:25:00.925]                         }
[10:25:00.925]                       }
[10:25:00.925]                       invisible(muffled)
[10:25:00.925]                     }
[10:25:00.925]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.925]                   }
[10:25:00.925]                 }
[10:25:00.925]             }
[10:25:00.925]         }))
[10:25:00.925]     }, error = function(ex) {
[10:25:00.925]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.925]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.925]                 ...future.rng), started = ...future.startTime, 
[10:25:00.925]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.925]             version = "1.8"), class = "FutureResult")
[10:25:00.925]     }, finally = {
[10:25:00.925]         if (!identical(...future.workdir, getwd())) 
[10:25:00.925]             setwd(...future.workdir)
[10:25:00.925]         {
[10:25:00.925]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.925]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.925]             }
[10:25:00.925]             base::options(...future.oldOptions)
[10:25:00.925]             if (.Platform$OS.type == "windows") {
[10:25:00.925]                 old_names <- names(...future.oldEnvVars)
[10:25:00.925]                 envs <- base::Sys.getenv()
[10:25:00.925]                 names <- names(envs)
[10:25:00.925]                 common <- intersect(names, old_names)
[10:25:00.925]                 added <- setdiff(names, old_names)
[10:25:00.925]                 removed <- setdiff(old_names, names)
[10:25:00.925]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.925]                   envs[common]]
[10:25:00.925]                 NAMES <- toupper(changed)
[10:25:00.925]                 args <- list()
[10:25:00.925]                 for (kk in seq_along(NAMES)) {
[10:25:00.925]                   name <- changed[[kk]]
[10:25:00.925]                   NAME <- NAMES[[kk]]
[10:25:00.925]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.925]                     next
[10:25:00.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.925]                 }
[10:25:00.925]                 NAMES <- toupper(added)
[10:25:00.925]                 for (kk in seq_along(NAMES)) {
[10:25:00.925]                   name <- added[[kk]]
[10:25:00.925]                   NAME <- NAMES[[kk]]
[10:25:00.925]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.925]                     next
[10:25:00.925]                   args[[name]] <- ""
[10:25:00.925]                 }
[10:25:00.925]                 NAMES <- toupper(removed)
[10:25:00.925]                 for (kk in seq_along(NAMES)) {
[10:25:00.925]                   name <- removed[[kk]]
[10:25:00.925]                   NAME <- NAMES[[kk]]
[10:25:00.925]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.925]                     next
[10:25:00.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.925]                 }
[10:25:00.925]                 if (length(args) > 0) 
[10:25:00.925]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.925]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.925]             }
[10:25:00.925]             else {
[10:25:00.925]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.925]             }
[10:25:00.925]             {
[10:25:00.925]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.925]                   0L) {
[10:25:00.925]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.925]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.925]                   base::options(opts)
[10:25:00.925]                 }
[10:25:00.925]                 {
[10:25:00.925]                   {
[10:25:00.925]                     NULL
[10:25:00.925]                     RNGkind("Mersenne-Twister")
[10:25:00.925]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.925]                       inherits = FALSE)
[10:25:00.925]                   }
[10:25:00.925]                   options(future.plan = NULL)
[10:25:00.925]                   if (is.na(NA_character_)) 
[10:25:00.925]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.925]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.925]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.925]                   {
[10:25:00.925]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.925]                     if (!future$lazy) 
[10:25:00.925]                       future <- run(future)
[10:25:00.925]                     invisible(future)
[10:25:00.925]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.925]                 }
[10:25:00.925]             }
[10:25:00.925]         }
[10:25:00.925]     })
[10:25:00.925]     if (TRUE) {
[10:25:00.925]         base::sink(type = "output", split = FALSE)
[10:25:00.925]         if (TRUE) {
[10:25:00.925]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.925]         }
[10:25:00.925]         else {
[10:25:00.925]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.925]         }
[10:25:00.925]         base::close(...future.stdout)
[10:25:00.925]         ...future.stdout <- NULL
[10:25:00.925]     }
[10:25:00.925]     ...future.result$conditions <- ...future.conditions
[10:25:00.925]     ...future.result$finished <- base::Sys.time()
[10:25:00.925]     ...future.result
[10:25:00.925] }
[10:25:00.927] plan(): Setting new future strategy stack:
[10:25:00.927] List of future strategies:
[10:25:00.927] 1. sequential:
[10:25:00.927]    - args: function (..., envir = parent.frame())
[10:25:00.927]    - tweaked: FALSE
[10:25:00.927]    - call: NULL
[10:25:00.927] plan(): nbrOfWorkers() = 1
[10:25:00.928] plan(): Setting new future strategy stack:
[10:25:00.928] List of future strategies:
[10:25:00.928] 1. sequential:
[10:25:00.928]    - args: function (..., envir = parent.frame())
[10:25:00.928]    - tweaked: FALSE
[10:25:00.928]    - call: future::plan("sequential")
[10:25:00.929] plan(): nbrOfWorkers() = 1
[10:25:00.929] SequentialFuture started (and completed)
[10:25:00.929] - Launch lazy future ... done
[10:25:00.929] run() for ‘SequentialFuture’ ... done
> res <- tryCatch(backtrace(f), error = identity)
[10:25:00.929] resolved() for ‘SequentialFuture’ ...
[10:25:00.929] - state: ‘finished’
[10:25:00.929] - run: TRUE
[10:25:00.930] - result: ‘FutureResult’
[10:25:00.930] resolved() for ‘SequentialFuture’ ... done
> print(res)
<simpleError: No error was caught for this future: ‘f’>
> stopifnot(inherits(res, "error"))
> 
> message("- No call stack ...")
- No call stack ...
> f <- future({ 42L; stop("Woops") })
[10:25:00.930] getGlobalsAndPackages() ...
[10:25:00.930] Searching for globals...
[10:25:00.931] - globals found: [2] ‘{’, ‘stop’
[10:25:00.931] Searching for globals ... DONE
[10:25:00.931] Resolving globals: FALSE
[10:25:00.931] 
[10:25:00.932] 
[10:25:00.932] getGlobalsAndPackages() ... DONE
[10:25:00.932] run() for ‘Future’ ...
[10:25:00.932] - state: ‘created’
[10:25:00.932] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:00.932] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:00.932] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:00.933]   - Field: ‘label’
[10:25:00.933]   - Field: ‘local’
[10:25:00.933]   - Field: ‘owner’
[10:25:00.933]   - Field: ‘envir’
[10:25:00.933]   - Field: ‘packages’
[10:25:00.933]   - Field: ‘gc’
[10:25:00.933]   - Field: ‘conditions’
[10:25:00.933]   - Field: ‘expr’
[10:25:00.933]   - Field: ‘uuid’
[10:25:00.933]   - Field: ‘seed’
[10:25:00.934]   - Field: ‘version’
[10:25:00.934]   - Field: ‘result’
[10:25:00.934]   - Field: ‘asynchronous’
[10:25:00.934]   - Field: ‘calls’
[10:25:00.934]   - Field: ‘globals’
[10:25:00.934]   - Field: ‘stdout’
[10:25:00.934]   - Field: ‘earlySignal’
[10:25:00.934]   - Field: ‘lazy’
[10:25:00.934]   - Field: ‘state’
[10:25:00.934] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:00.934] - Launch lazy future ...
[10:25:00.935] Packages needed by the future expression (n = 0): <none>
[10:25:00.935] Packages needed by future strategies (n = 0): <none>
[10:25:00.935] {
[10:25:00.935]     {
[10:25:00.935]         {
[10:25:00.935]             ...future.startTime <- base::Sys.time()
[10:25:00.935]             {
[10:25:00.935]                 {
[10:25:00.935]                   {
[10:25:00.935]                     base::local({
[10:25:00.935]                       has_future <- base::requireNamespace("future", 
[10:25:00.935]                         quietly = TRUE)
[10:25:00.935]                       if (has_future) {
[10:25:00.935]                         ns <- base::getNamespace("future")
[10:25:00.935]                         version <- ns[[".package"]][["version"]]
[10:25:00.935]                         if (is.null(version)) 
[10:25:00.935]                           version <- utils::packageVersion("future")
[10:25:00.935]                       }
[10:25:00.935]                       else {
[10:25:00.935]                         version <- NULL
[10:25:00.935]                       }
[10:25:00.935]                       if (!has_future || version < "1.8.0") {
[10:25:00.935]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:00.935]                           "", base::R.version$version.string), 
[10:25:00.935]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:00.935]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:00.935]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:00.935]                             "release", "version")], collapse = " "), 
[10:25:00.935]                           hostname = base::Sys.info()[["nodename"]])
[10:25:00.935]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:00.935]                           info)
[10:25:00.935]                         info <- base::paste(info, collapse = "; ")
[10:25:00.935]                         if (!has_future) {
[10:25:00.935]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:00.935]                             info)
[10:25:00.935]                         }
[10:25:00.935]                         else {
[10:25:00.935]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:00.935]                             info, version)
[10:25:00.935]                         }
[10:25:00.935]                         base::stop(msg)
[10:25:00.935]                       }
[10:25:00.935]                     })
[10:25:00.935]                   }
[10:25:00.935]                   options(future.plan = NULL)
[10:25:00.935]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.935]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:00.935]                 }
[10:25:00.935]                 ...future.workdir <- getwd()
[10:25:00.935]             }
[10:25:00.935]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:00.935]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:00.935]         }
[10:25:00.935]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:00.935]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:00.935]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:00.935]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:00.935]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:00.935]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:00.935]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:00.935]             base::names(...future.oldOptions))
[10:25:00.935]     }
[10:25:00.935]     if (FALSE) {
[10:25:00.935]     }
[10:25:00.935]     else {
[10:25:00.935]         if (TRUE) {
[10:25:00.935]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:00.935]                 open = "w")
[10:25:00.935]         }
[10:25:00.935]         else {
[10:25:00.935]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:00.935]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:00.935]         }
[10:25:00.935]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:00.935]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:00.935]             base::sink(type = "output", split = FALSE)
[10:25:00.935]             base::close(...future.stdout)
[10:25:00.935]         }, add = TRUE)
[10:25:00.935]     }
[10:25:00.935]     ...future.frame <- base::sys.nframe()
[10:25:00.935]     ...future.conditions <- base::list()
[10:25:00.935]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:00.935]     if (FALSE) {
[10:25:00.935]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:00.935]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:00.935]     }
[10:25:00.935]     ...future.result <- base::tryCatch({
[10:25:00.935]         base::withCallingHandlers({
[10:25:00.935]             ...future.value <- base::withVisible(base::local({
[10:25:00.935]                 42L
[10:25:00.935]                 stop("Woops")
[10:25:00.935]             }))
[10:25:00.935]             future::FutureResult(value = ...future.value$value, 
[10:25:00.935]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.935]                   ...future.rng), globalenv = if (FALSE) 
[10:25:00.935]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:00.935]                     ...future.globalenv.names))
[10:25:00.935]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:00.935]         }, condition = base::local({
[10:25:00.935]             c <- base::c
[10:25:00.935]             inherits <- base::inherits
[10:25:00.935]             invokeRestart <- base::invokeRestart
[10:25:00.935]             length <- base::length
[10:25:00.935]             list <- base::list
[10:25:00.935]             seq.int <- base::seq.int
[10:25:00.935]             signalCondition <- base::signalCondition
[10:25:00.935]             sys.calls <- base::sys.calls
[10:25:00.935]             `[[` <- base::`[[`
[10:25:00.935]             `+` <- base::`+`
[10:25:00.935]             `<<-` <- base::`<<-`
[10:25:00.935]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:00.935]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:00.935]                   3L)]
[10:25:00.935]             }
[10:25:00.935]             function(cond) {
[10:25:00.935]                 is_error <- inherits(cond, "error")
[10:25:00.935]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:00.935]                   NULL)
[10:25:00.935]                 if (is_error) {
[10:25:00.935]                   sessionInformation <- function() {
[10:25:00.935]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:00.935]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:00.935]                       search = base::search(), system = base::Sys.info())
[10:25:00.935]                   }
[10:25:00.935]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.935]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:00.935]                     cond$call), session = sessionInformation(), 
[10:25:00.935]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:00.935]                   signalCondition(cond)
[10:25:00.935]                 }
[10:25:00.935]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:00.935]                 "immediateCondition"))) {
[10:25:00.935]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:00.935]                   ...future.conditions[[length(...future.conditions) + 
[10:25:00.935]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:00.935]                   if (TRUE && !signal) {
[10:25:00.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.935]                     {
[10:25:00.935]                       inherits <- base::inherits
[10:25:00.935]                       invokeRestart <- base::invokeRestart
[10:25:00.935]                       is.null <- base::is.null
[10:25:00.935]                       muffled <- FALSE
[10:25:00.935]                       if (inherits(cond, "message")) {
[10:25:00.935]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.935]                         if (muffled) 
[10:25:00.935]                           invokeRestart("muffleMessage")
[10:25:00.935]                       }
[10:25:00.935]                       else if (inherits(cond, "warning")) {
[10:25:00.935]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.935]                         if (muffled) 
[10:25:00.935]                           invokeRestart("muffleWarning")
[10:25:00.935]                       }
[10:25:00.935]                       else if (inherits(cond, "condition")) {
[10:25:00.935]                         if (!is.null(pattern)) {
[10:25:00.935]                           computeRestarts <- base::computeRestarts
[10:25:00.935]                           grepl <- base::grepl
[10:25:00.935]                           restarts <- computeRestarts(cond)
[10:25:00.935]                           for (restart in restarts) {
[10:25:00.935]                             name <- restart$name
[10:25:00.935]                             if (is.null(name)) 
[10:25:00.935]                               next
[10:25:00.935]                             if (!grepl(pattern, name)) 
[10:25:00.935]                               next
[10:25:00.935]                             invokeRestart(restart)
[10:25:00.935]                             muffled <- TRUE
[10:25:00.935]                             break
[10:25:00.935]                           }
[10:25:00.935]                         }
[10:25:00.935]                       }
[10:25:00.935]                       invisible(muffled)
[10:25:00.935]                     }
[10:25:00.935]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.935]                   }
[10:25:00.935]                 }
[10:25:00.935]                 else {
[10:25:00.935]                   if (TRUE) {
[10:25:00.935]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:00.935]                     {
[10:25:00.935]                       inherits <- base::inherits
[10:25:00.935]                       invokeRestart <- base::invokeRestart
[10:25:00.935]                       is.null <- base::is.null
[10:25:00.935]                       muffled <- FALSE
[10:25:00.935]                       if (inherits(cond, "message")) {
[10:25:00.935]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:00.935]                         if (muffled) 
[10:25:00.935]                           invokeRestart("muffleMessage")
[10:25:00.935]                       }
[10:25:00.935]                       else if (inherits(cond, "warning")) {
[10:25:00.935]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:00.935]                         if (muffled) 
[10:25:00.935]                           invokeRestart("muffleWarning")
[10:25:00.935]                       }
[10:25:00.935]                       else if (inherits(cond, "condition")) {
[10:25:00.935]                         if (!is.null(pattern)) {
[10:25:00.935]                           computeRestarts <- base::computeRestarts
[10:25:00.935]                           grepl <- base::grepl
[10:25:00.935]                           restarts <- computeRestarts(cond)
[10:25:00.935]                           for (restart in restarts) {
[10:25:00.935]                             name <- restart$name
[10:25:00.935]                             if (is.null(name)) 
[10:25:00.935]                               next
[10:25:00.935]                             if (!grepl(pattern, name)) 
[10:25:00.935]                               next
[10:25:00.935]                             invokeRestart(restart)
[10:25:00.935]                             muffled <- TRUE
[10:25:00.935]                             break
[10:25:00.935]                           }
[10:25:00.935]                         }
[10:25:00.935]                       }
[10:25:00.935]                       invisible(muffled)
[10:25:00.935]                     }
[10:25:00.935]                     muffleCondition(cond, pattern = "^muffle")
[10:25:00.935]                   }
[10:25:00.935]                 }
[10:25:00.935]             }
[10:25:00.935]         }))
[10:25:00.935]     }, error = function(ex) {
[10:25:00.935]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:00.935]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:00.935]                 ...future.rng), started = ...future.startTime, 
[10:25:00.935]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:00.935]             version = "1.8"), class = "FutureResult")
[10:25:00.935]     }, finally = {
[10:25:00.935]         if (!identical(...future.workdir, getwd())) 
[10:25:00.935]             setwd(...future.workdir)
[10:25:00.935]         {
[10:25:00.935]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:00.935]                 ...future.oldOptions$nwarnings <- NULL
[10:25:00.935]             }
[10:25:00.935]             base::options(...future.oldOptions)
[10:25:00.935]             if (.Platform$OS.type == "windows") {
[10:25:00.935]                 old_names <- names(...future.oldEnvVars)
[10:25:00.935]                 envs <- base::Sys.getenv()
[10:25:00.935]                 names <- names(envs)
[10:25:00.935]                 common <- intersect(names, old_names)
[10:25:00.935]                 added <- setdiff(names, old_names)
[10:25:00.935]                 removed <- setdiff(old_names, names)
[10:25:00.935]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:00.935]                   envs[common]]
[10:25:00.935]                 NAMES <- toupper(changed)
[10:25:00.935]                 args <- list()
[10:25:00.935]                 for (kk in seq_along(NAMES)) {
[10:25:00.935]                   name <- changed[[kk]]
[10:25:00.935]                   NAME <- NAMES[[kk]]
[10:25:00.935]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.935]                     next
[10:25:00.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.935]                 }
[10:25:00.935]                 NAMES <- toupper(added)
[10:25:00.935]                 for (kk in seq_along(NAMES)) {
[10:25:00.935]                   name <- added[[kk]]
[10:25:00.935]                   NAME <- NAMES[[kk]]
[10:25:00.935]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.935]                     next
[10:25:00.935]                   args[[name]] <- ""
[10:25:00.935]                 }
[10:25:00.935]                 NAMES <- toupper(removed)
[10:25:00.935]                 for (kk in seq_along(NAMES)) {
[10:25:00.935]                   name <- removed[[kk]]
[10:25:00.935]                   NAME <- NAMES[[kk]]
[10:25:00.935]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:00.935]                     next
[10:25:00.935]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:00.935]                 }
[10:25:00.935]                 if (length(args) > 0) 
[10:25:00.935]                   base::do.call(base::Sys.setenv, args = args)
[10:25:00.935]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:00.935]             }
[10:25:00.935]             else {
[10:25:00.935]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:00.935]             }
[10:25:00.935]             {
[10:25:00.935]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:00.935]                   0L) {
[10:25:00.935]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:00.935]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:00.935]                   base::options(opts)
[10:25:00.935]                 }
[10:25:00.935]                 {
[10:25:00.935]                   {
[10:25:00.935]                     NULL
[10:25:00.935]                     RNGkind("Mersenne-Twister")
[10:25:00.935]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:00.935]                       inherits = FALSE)
[10:25:00.935]                   }
[10:25:00.935]                   options(future.plan = NULL)
[10:25:00.935]                   if (is.na(NA_character_)) 
[10:25:00.935]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:00.935]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:00.935]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:00.935]                   {
[10:25:00.935]                     future <- SequentialFuture(..., envir = envir)
[10:25:00.935]                     if (!future$lazy) 
[10:25:00.935]                       future <- run(future)
[10:25:00.935]                     invisible(future)
[10:25:00.935]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:00.935]                 }
[10:25:00.935]             }
[10:25:00.935]         }
[10:25:00.935]     })
[10:25:00.935]     if (TRUE) {
[10:25:00.935]         base::sink(type = "output", split = FALSE)
[10:25:00.935]         if (TRUE) {
[10:25:00.935]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:00.935]         }
[10:25:00.935]         else {
[10:25:00.935]             ...future.result["stdout"] <- base::list(NULL)
[10:25:00.935]         }
[10:25:00.935]         base::close(...future.stdout)
[10:25:00.935]         ...future.stdout <- NULL
[10:25:00.935]     }
[10:25:00.935]     ...future.result$conditions <- ...future.conditions
[10:25:00.935]     ...future.result$finished <- base::Sys.time()
[10:25:00.935]     ...future.result
[10:25:00.935] }
[10:25:00.937] plan(): Setting new future strategy stack:
[10:25:00.937] List of future strategies:
[10:25:00.937] 1. sequential:
[10:25:00.937]    - args: function (..., envir = parent.frame())
[10:25:00.937]    - tweaked: FALSE
[10:25:00.937]    - call: NULL
[10:25:00.937] plan(): nbrOfWorkers() = 1
[10:25:00.938] plan(): Setting new future strategy stack:
[10:25:00.938] List of future strategies:
[10:25:00.938] 1. sequential:
[10:25:00.938]    - args: function (..., envir = parent.frame())
[10:25:00.938]    - tweaked: FALSE
[10:25:00.938]    - call: future::plan("sequential")
[10:25:00.938] plan(): nbrOfWorkers() = 1
[10:25:00.939] SequentialFuture started (and completed)
[10:25:00.939] signalConditions() ...
[10:25:00.939]  - include = ‘immediateCondition’
[10:25:00.939]  - exclude = 
[10:25:00.939]  - resignal = FALSE
[10:25:00.939]  - Number of conditions: 1
[10:25:00.939] signalConditions() ... done
[10:25:00.939] - Launch lazy future ... done
[10:25:00.939] run() for ‘SequentialFuture’ ... done
> v <- value(f, signal = FALSE)
[10:25:00.939] signalConditions() ...
[10:25:00.940]  - include = ‘immediateCondition’
[10:25:00.940]  - exclude = 
[10:25:00.940]  - resignal = FALSE
[10:25:00.940]  - Number of conditions: 1
[10:25:00.940] signalConditions() ... done
> 
> if (availableCores() >= 2L) {
+   message("- Non-resolved future ...")
+   plan(multisession, workers = 2L)
+   f <- future({ Sys.sleep(3); 42L; stop("Woops") })
+   res <- tryCatch(backtrace(f), error = identity)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   
+   ## If we don't resolve the future, the cluster of workers will not
+   ## be able to shut down naturally. They will eventually time out,
+   ## but that will happen long after 'R CMD check' terminates. Because
+   ## of this, 'R CMD check --as-cran' will report on "detritus in the
+   ## temp directory" when running on MS Windows.  This happens because
+   ## MS Windows doesn't shut down child processes as Linux and macOS
+   ## does when the main R session terminates.
+   resolve(f)
+ }
- Non-resolved future ...
[10:25:00.946] plan(): Setting new future strategy stack:
[10:25:00.946] List of future strategies:
[10:25:00.946] 1. multisession:
[10:25:00.946]    - args: function (..., workers = 2L, envir = parent.frame())
[10:25:00.946]    - tweaked: TRUE
[10:25:00.946]    - call: plan(multisession, workers = 2L)
[10:25:00.958] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:25:00.959] multisession:
[10:25:00.959] - args: function (..., workers = 2L, envir = parent.frame())
[10:25:00.959] - tweaked: TRUE
[10:25:00.959] - call: plan(multisession, workers = 2L)
[10:25:00.959] getGlobalsAndPackages() ...
[10:25:00.959] Not searching for globals
[10:25:00.960] - globals: [0] <none>
[10:25:00.960] getGlobalsAndPackages() ... DONE
[10:25:00.960] [local output] makeClusterPSOCK() ...
[10:25:00.994] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:25:00.995] [local output] Base port: 11992
[10:25:00.995] [local output] Getting setup options for 2 cluster nodes ...
[10:25:00.996] [local output]  - Node 1 of 2 ...
[10:25:00.996] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:00.997] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJeoRCM/worker.rank=1.parallelly.parent=80202.1394a4fe00cbf.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpJeoRCM/worker.rank=1.parallelly.parent=80202.1394a4fe00cbf.pid")'’
[10:25:01.187] - Possible to infer worker's PID: TRUE
[10:25:01.187] [local output] Rscript port: 11992

[10:25:01.188] [local output]  - Node 2 of 2 ...
[10:25:01.188] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:01.189] [local output] Rscript port: 11992

[10:25:01.189] [local output] Getting setup options for 2 cluster nodes ... done
[10:25:01.189] [local output]  - Parallel setup requested for some PSOCK nodes
[10:25:01.190] [local output] Setting up PSOCK nodes in parallel
[10:25:01.190] List of 36
[10:25:01.190]  $ worker          : chr "localhost"
[10:25:01.190]   ..- attr(*, "localhost")= logi TRUE
[10:25:01.190]  $ master          : chr "localhost"
[10:25:01.190]  $ port            : int 11992
[10:25:01.190]  $ connectTimeout  : num 120
[10:25:01.190]  $ timeout         : num 2592000
[10:25:01.190]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:25:01.190]  $ homogeneous     : logi TRUE
[10:25:01.190]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:25:01.190]  $ rscript_envs    : NULL
[10:25:01.190]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:01.190]  $ rscript_startup : NULL
[10:25:01.190]  $ rscript_sh      : chr "sh"
[10:25:01.190]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:01.190]  $ methods         : logi TRUE
[10:25:01.190]  $ socketOptions   : chr "no-delay"
[10:25:01.190]  $ useXDR          : logi FALSE
[10:25:01.190]  $ outfile         : chr "/dev/null"
[10:25:01.190]  $ renice          : int NA
[10:25:01.190]  $ rshcmd          : NULL
[10:25:01.190]  $ user            : chr(0) 
[10:25:01.190]  $ revtunnel       : logi FALSE
[10:25:01.190]  $ rshlogfile      : NULL
[10:25:01.190]  $ rshopts         : chr(0) 
[10:25:01.190]  $ rank            : int 1
[10:25:01.190]  $ manual          : logi FALSE
[10:25:01.190]  $ dryrun          : logi FALSE
[10:25:01.190]  $ quiet           : logi FALSE
[10:25:01.190]  $ setup_strategy  : chr "parallel"
[10:25:01.190]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:01.190]  $ pidfile         : chr "/tmp/RtmpJeoRCM/worker.rank=1.parallelly.parent=80202.1394a4fe00cbf.pid"
[10:25:01.190]  $ rshcmd_label    : NULL
[10:25:01.190]  $ rsh_call        : NULL
[10:25:01.190]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:01.190]  $ localMachine    : logi TRUE
[10:25:01.190]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:25:01.190]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:25:01.190]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:25:01.190]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:25:01.190]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:25:01.190]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:25:01.190]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:25:01.190]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:25:01.190]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:25:01.190]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:25:01.190]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:25:01.190]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:25:01.190]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:25:01.190]  $ arguments       :List of 28
[10:25:01.190]   ..$ worker          : chr "localhost"
[10:25:01.190]   ..$ master          : NULL
[10:25:01.190]   ..$ port            : int 11992
[10:25:01.190]   ..$ connectTimeout  : num 120
[10:25:01.190]   ..$ timeout         : num 2592000
[10:25:01.190]   ..$ rscript         : NULL
[10:25:01.190]   ..$ homogeneous     : NULL
[10:25:01.190]   ..$ rscript_args    : NULL
[10:25:01.190]   ..$ rscript_envs    : NULL
[10:25:01.190]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:01.190]   ..$ rscript_startup : NULL
[10:25:01.190]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:25:01.190]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:01.190]   ..$ methods         : logi TRUE
[10:25:01.190]   ..$ socketOptions   : chr "no-delay"
[10:25:01.190]   ..$ useXDR          : logi FALSE
[10:25:01.190]   ..$ outfile         : chr "/dev/null"
[10:25:01.190]   ..$ renice          : int NA
[10:25:01.190]   ..$ rshcmd          : NULL
[10:25:01.190]   ..$ user            : NULL
[10:25:01.190]   ..$ revtunnel       : logi NA
[10:25:01.190]   ..$ rshlogfile      : NULL
[10:25:01.190]   ..$ rshopts         : NULL
[10:25:01.190]   ..$ rank            : int 1
[10:25:01.190]   ..$ manual          : logi FALSE
[10:25:01.190]   ..$ dryrun          : logi FALSE
[10:25:01.190]   ..$ quiet           : logi FALSE
[10:25:01.190]   ..$ setup_strategy  : chr "parallel"
[10:25:01.190]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:25:01.209] [local output] System call to launch all workers:
[10:25:01.209] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpJeoRCM/worker.rank=1.parallelly.parent=80202.1394a4fe00cbf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11992 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:25:01.209] [local output] Starting PSOCK main server
[10:25:01.215] [local output] Workers launched
[10:25:01.215] [local output] Waiting for workers to connect back
[10:25:01.215]  - [local output] 0 workers out of 2 ready
[10:25:01.475]  - [local output] 0 workers out of 2 ready
[10:25:01.476]  - [local output] 1 workers out of 2 ready
[10:25:01.482]  - [local output] 1 workers out of 2 ready
[10:25:01.483]  - [local output] 2 workers out of 2 ready
[10:25:01.483] [local output] Launching of workers completed
[10:25:01.483] [local output] Collecting session information from workers
[10:25:01.484] [local output]  - Worker #1 of 2
[10:25:01.485] [local output]  - Worker #2 of 2
[10:25:01.485] [local output] makeClusterPSOCK() ... done
[10:25:01.496] Packages needed by the future expression (n = 0): <none>
[10:25:01.497] Packages needed by future strategies (n = 0): <none>
[10:25:01.497] {
[10:25:01.497]     {
[10:25:01.497]         {
[10:25:01.497]             ...future.startTime <- base::Sys.time()
[10:25:01.497]             {
[10:25:01.497]                 {
[10:25:01.497]                   {
[10:25:01.497]                     {
[10:25:01.497]                       base::local({
[10:25:01.497]                         has_future <- base::requireNamespace("future", 
[10:25:01.497]                           quietly = TRUE)
[10:25:01.497]                         if (has_future) {
[10:25:01.497]                           ns <- base::getNamespace("future")
[10:25:01.497]                           version <- ns[[".package"]][["version"]]
[10:25:01.497]                           if (is.null(version)) 
[10:25:01.497]                             version <- utils::packageVersion("future")
[10:25:01.497]                         }
[10:25:01.497]                         else {
[10:25:01.497]                           version <- NULL
[10:25:01.497]                         }
[10:25:01.497]                         if (!has_future || version < "1.8.0") {
[10:25:01.497]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:01.497]                             "", base::R.version$version.string), 
[10:25:01.497]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:01.497]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:01.497]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:01.497]                               "release", "version")], collapse = " "), 
[10:25:01.497]                             hostname = base::Sys.info()[["nodename"]])
[10:25:01.497]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:01.497]                             info)
[10:25:01.497]                           info <- base::paste(info, collapse = "; ")
[10:25:01.497]                           if (!has_future) {
[10:25:01.497]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:01.497]                               info)
[10:25:01.497]                           }
[10:25:01.497]                           else {
[10:25:01.497]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:01.497]                               info, version)
[10:25:01.497]                           }
[10:25:01.497]                           base::stop(msg)
[10:25:01.497]                         }
[10:25:01.497]                       })
[10:25:01.497]                     }
[10:25:01.497]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:01.497]                     base::options(mc.cores = 1L)
[10:25:01.497]                   }
[10:25:01.497]                   options(future.plan = NULL)
[10:25:01.497]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:01.497]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:01.497]                 }
[10:25:01.497]                 ...future.workdir <- getwd()
[10:25:01.497]             }
[10:25:01.497]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:01.497]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:01.497]         }
[10:25:01.497]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:01.497]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:01.497]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:01.497]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:01.497]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:01.497]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:01.497]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:01.497]             base::names(...future.oldOptions))
[10:25:01.497]     }
[10:25:01.497]     if (FALSE) {
[10:25:01.497]     }
[10:25:01.497]     else {
[10:25:01.497]         if (TRUE) {
[10:25:01.497]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:01.497]                 open = "w")
[10:25:01.497]         }
[10:25:01.497]         else {
[10:25:01.497]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:01.497]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:01.497]         }
[10:25:01.497]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:01.497]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:01.497]             base::sink(type = "output", split = FALSE)
[10:25:01.497]             base::close(...future.stdout)
[10:25:01.497]         }, add = TRUE)
[10:25:01.497]     }
[10:25:01.497]     ...future.frame <- base::sys.nframe()
[10:25:01.497]     ...future.conditions <- base::list()
[10:25:01.497]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:01.497]     if (FALSE) {
[10:25:01.497]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:01.497]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:01.497]     }
[10:25:01.497]     ...future.result <- base::tryCatch({
[10:25:01.497]         base::withCallingHandlers({
[10:25:01.497]             ...future.value <- base::withVisible(base::local({
[10:25:01.497]                 ...future.makeSendCondition <- base::local({
[10:25:01.497]                   sendCondition <- NULL
[10:25:01.497]                   function(frame = 1L) {
[10:25:01.497]                     if (is.function(sendCondition)) 
[10:25:01.497]                       return(sendCondition)
[10:25:01.497]                     ns <- getNamespace("parallel")
[10:25:01.497]                     if (exists("sendData", mode = "function", 
[10:25:01.497]                       envir = ns)) {
[10:25:01.497]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:01.497]                         envir = ns)
[10:25:01.497]                       envir <- sys.frame(frame)
[10:25:01.497]                       master <- NULL
[10:25:01.497]                       while (!identical(envir, .GlobalEnv) && 
[10:25:01.497]                         !identical(envir, emptyenv())) {
[10:25:01.497]                         if (exists("master", mode = "list", envir = envir, 
[10:25:01.497]                           inherits = FALSE)) {
[10:25:01.497]                           master <- get("master", mode = "list", 
[10:25:01.497]                             envir = envir, inherits = FALSE)
[10:25:01.497]                           if (inherits(master, c("SOCKnode", 
[10:25:01.497]                             "SOCK0node"))) {
[10:25:01.497]                             sendCondition <<- function(cond) {
[10:25:01.497]                               data <- list(type = "VALUE", value = cond, 
[10:25:01.497]                                 success = TRUE)
[10:25:01.497]                               parallel_sendData(master, data)
[10:25:01.497]                             }
[10:25:01.497]                             return(sendCondition)
[10:25:01.497]                           }
[10:25:01.497]                         }
[10:25:01.497]                         frame <- frame + 1L
[10:25:01.497]                         envir <- sys.frame(frame)
[10:25:01.497]                       }
[10:25:01.497]                     }
[10:25:01.497]                     sendCondition <<- function(cond) NULL
[10:25:01.497]                   }
[10:25:01.497]                 })
[10:25:01.497]                 withCallingHandlers({
[10:25:01.497]                   NA
[10:25:01.497]                 }, immediateCondition = function(cond) {
[10:25:01.497]                   sendCondition <- ...future.makeSendCondition()
[10:25:01.497]                   sendCondition(cond)
[10:25:01.497]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.497]                   {
[10:25:01.497]                     inherits <- base::inherits
[10:25:01.497]                     invokeRestart <- base::invokeRestart
[10:25:01.497]                     is.null <- base::is.null
[10:25:01.497]                     muffled <- FALSE
[10:25:01.497]                     if (inherits(cond, "message")) {
[10:25:01.497]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:01.497]                       if (muffled) 
[10:25:01.497]                         invokeRestart("muffleMessage")
[10:25:01.497]                     }
[10:25:01.497]                     else if (inherits(cond, "warning")) {
[10:25:01.497]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:01.497]                       if (muffled) 
[10:25:01.497]                         invokeRestart("muffleWarning")
[10:25:01.497]                     }
[10:25:01.497]                     else if (inherits(cond, "condition")) {
[10:25:01.497]                       if (!is.null(pattern)) {
[10:25:01.497]                         computeRestarts <- base::computeRestarts
[10:25:01.497]                         grepl <- base::grepl
[10:25:01.497]                         restarts <- computeRestarts(cond)
[10:25:01.497]                         for (restart in restarts) {
[10:25:01.497]                           name <- restart$name
[10:25:01.497]                           if (is.null(name)) 
[10:25:01.497]                             next
[10:25:01.497]                           if (!grepl(pattern, name)) 
[10:25:01.497]                             next
[10:25:01.497]                           invokeRestart(restart)
[10:25:01.497]                           muffled <- TRUE
[10:25:01.497]                           break
[10:25:01.497]                         }
[10:25:01.497]                       }
[10:25:01.497]                     }
[10:25:01.497]                     invisible(muffled)
[10:25:01.497]                   }
[10:25:01.497]                   muffleCondition(cond)
[10:25:01.497]                 })
[10:25:01.497]             }))
[10:25:01.497]             future::FutureResult(value = ...future.value$value, 
[10:25:01.497]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:01.497]                   ...future.rng), globalenv = if (FALSE) 
[10:25:01.497]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:01.497]                     ...future.globalenv.names))
[10:25:01.497]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:01.497]         }, condition = base::local({
[10:25:01.497]             c <- base::c
[10:25:01.497]             inherits <- base::inherits
[10:25:01.497]             invokeRestart <- base::invokeRestart
[10:25:01.497]             length <- base::length
[10:25:01.497]             list <- base::list
[10:25:01.497]             seq.int <- base::seq.int
[10:25:01.497]             signalCondition <- base::signalCondition
[10:25:01.497]             sys.calls <- base::sys.calls
[10:25:01.497]             `[[` <- base::`[[`
[10:25:01.497]             `+` <- base::`+`
[10:25:01.497]             `<<-` <- base::`<<-`
[10:25:01.497]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:01.497]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:01.497]                   3L)]
[10:25:01.497]             }
[10:25:01.497]             function(cond) {
[10:25:01.497]                 is_error <- inherits(cond, "error")
[10:25:01.497]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:01.497]                   NULL)
[10:25:01.497]                 if (is_error) {
[10:25:01.497]                   sessionInformation <- function() {
[10:25:01.497]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:01.497]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:01.497]                       search = base::search(), system = base::Sys.info())
[10:25:01.497]                   }
[10:25:01.497]                   ...future.conditions[[length(...future.conditions) + 
[10:25:01.497]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:01.497]                     cond$call), session = sessionInformation(), 
[10:25:01.497]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:01.497]                   signalCondition(cond)
[10:25:01.497]                 }
[10:25:01.497]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:01.497]                 "immediateCondition"))) {
[10:25:01.497]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:01.497]                   ...future.conditions[[length(...future.conditions) + 
[10:25:01.497]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:01.497]                   if (TRUE && !signal) {
[10:25:01.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.497]                     {
[10:25:01.497]                       inherits <- base::inherits
[10:25:01.497]                       invokeRestart <- base::invokeRestart
[10:25:01.497]                       is.null <- base::is.null
[10:25:01.497]                       muffled <- FALSE
[10:25:01.497]                       if (inherits(cond, "message")) {
[10:25:01.497]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:01.497]                         if (muffled) 
[10:25:01.497]                           invokeRestart("muffleMessage")
[10:25:01.497]                       }
[10:25:01.497]                       else if (inherits(cond, "warning")) {
[10:25:01.497]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:01.497]                         if (muffled) 
[10:25:01.497]                           invokeRestart("muffleWarning")
[10:25:01.497]                       }
[10:25:01.497]                       else if (inherits(cond, "condition")) {
[10:25:01.497]                         if (!is.null(pattern)) {
[10:25:01.497]                           computeRestarts <- base::computeRestarts
[10:25:01.497]                           grepl <- base::grepl
[10:25:01.497]                           restarts <- computeRestarts(cond)
[10:25:01.497]                           for (restart in restarts) {
[10:25:01.497]                             name <- restart$name
[10:25:01.497]                             if (is.null(name)) 
[10:25:01.497]                               next
[10:25:01.497]                             if (!grepl(pattern, name)) 
[10:25:01.497]                               next
[10:25:01.497]                             invokeRestart(restart)
[10:25:01.497]                             muffled <- TRUE
[10:25:01.497]                             break
[10:25:01.497]                           }
[10:25:01.497]                         }
[10:25:01.497]                       }
[10:25:01.497]                       invisible(muffled)
[10:25:01.497]                     }
[10:25:01.497]                     muffleCondition(cond, pattern = "^muffle")
[10:25:01.497]                   }
[10:25:01.497]                 }
[10:25:01.497]                 else {
[10:25:01.497]                   if (TRUE) {
[10:25:01.497]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.497]                     {
[10:25:01.497]                       inherits <- base::inherits
[10:25:01.497]                       invokeRestart <- base::invokeRestart
[10:25:01.497]                       is.null <- base::is.null
[10:25:01.497]                       muffled <- FALSE
[10:25:01.497]                       if (inherits(cond, "message")) {
[10:25:01.497]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:01.497]                         if (muffled) 
[10:25:01.497]                           invokeRestart("muffleMessage")
[10:25:01.497]                       }
[10:25:01.497]                       else if (inherits(cond, "warning")) {
[10:25:01.497]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:01.497]                         if (muffled) 
[10:25:01.497]                           invokeRestart("muffleWarning")
[10:25:01.497]                       }
[10:25:01.497]                       else if (inherits(cond, "condition")) {
[10:25:01.497]                         if (!is.null(pattern)) {
[10:25:01.497]                           computeRestarts <- base::computeRestarts
[10:25:01.497]                           grepl <- base::grepl
[10:25:01.497]                           restarts <- computeRestarts(cond)
[10:25:01.497]                           for (restart in restarts) {
[10:25:01.497]                             name <- restart$name
[10:25:01.497]                             if (is.null(name)) 
[10:25:01.497]                               next
[10:25:01.497]                             if (!grepl(pattern, name)) 
[10:25:01.497]                               next
[10:25:01.497]                             invokeRestart(restart)
[10:25:01.497]                             muffled <- TRUE
[10:25:01.497]                             break
[10:25:01.497]                           }
[10:25:01.497]                         }
[10:25:01.497]                       }
[10:25:01.497]                       invisible(muffled)
[10:25:01.497]                     }
[10:25:01.497]                     muffleCondition(cond, pattern = "^muffle")
[10:25:01.497]                   }
[10:25:01.497]                 }
[10:25:01.497]             }
[10:25:01.497]         }))
[10:25:01.497]     }, error = function(ex) {
[10:25:01.497]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:01.497]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:01.497]                 ...future.rng), started = ...future.startTime, 
[10:25:01.497]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:01.497]             version = "1.8"), class = "FutureResult")
[10:25:01.497]     }, finally = {
[10:25:01.497]         if (!identical(...future.workdir, getwd())) 
[10:25:01.497]             setwd(...future.workdir)
[10:25:01.497]         {
[10:25:01.497]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:01.497]                 ...future.oldOptions$nwarnings <- NULL
[10:25:01.497]             }
[10:25:01.497]             base::options(...future.oldOptions)
[10:25:01.497]             if (.Platform$OS.type == "windows") {
[10:25:01.497]                 old_names <- names(...future.oldEnvVars)
[10:25:01.497]                 envs <- base::Sys.getenv()
[10:25:01.497]                 names <- names(envs)
[10:25:01.497]                 common <- intersect(names, old_names)
[10:25:01.497]                 added <- setdiff(names, old_names)
[10:25:01.497]                 removed <- setdiff(old_names, names)
[10:25:01.497]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:01.497]                   envs[common]]
[10:25:01.497]                 NAMES <- toupper(changed)
[10:25:01.497]                 args <- list()
[10:25:01.497]                 for (kk in seq_along(NAMES)) {
[10:25:01.497]                   name <- changed[[kk]]
[10:25:01.497]                   NAME <- NAMES[[kk]]
[10:25:01.497]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.497]                     next
[10:25:01.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:01.497]                 }
[10:25:01.497]                 NAMES <- toupper(added)
[10:25:01.497]                 for (kk in seq_along(NAMES)) {
[10:25:01.497]                   name <- added[[kk]]
[10:25:01.497]                   NAME <- NAMES[[kk]]
[10:25:01.497]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.497]                     next
[10:25:01.497]                   args[[name]] <- ""
[10:25:01.497]                 }
[10:25:01.497]                 NAMES <- toupper(removed)
[10:25:01.497]                 for (kk in seq_along(NAMES)) {
[10:25:01.497]                   name <- removed[[kk]]
[10:25:01.497]                   NAME <- NAMES[[kk]]
[10:25:01.497]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.497]                     next
[10:25:01.497]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:01.497]                 }
[10:25:01.497]                 if (length(args) > 0) 
[10:25:01.497]                   base::do.call(base::Sys.setenv, args = args)
[10:25:01.497]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:01.497]             }
[10:25:01.497]             else {
[10:25:01.497]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:01.497]             }
[10:25:01.497]             {
[10:25:01.497]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:01.497]                   0L) {
[10:25:01.497]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:01.497]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:01.497]                   base::options(opts)
[10:25:01.497]                 }
[10:25:01.497]                 {
[10:25:01.497]                   {
[10:25:01.497]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:01.497]                     NULL
[10:25:01.497]                   }
[10:25:01.497]                   options(future.plan = NULL)
[10:25:01.497]                   if (is.na(NA_character_)) 
[10:25:01.497]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:01.497]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:01.497]                   future::plan(list(function (..., workers = 2L, 
[10:25:01.497]                     envir = parent.frame()) 
[10:25:01.497]                   strategy(..., workers = workers, envir = envir)), 
[10:25:01.497]                     .cleanup = FALSE, .init = FALSE)
[10:25:01.497]                 }
[10:25:01.497]             }
[10:25:01.497]         }
[10:25:01.497]     })
[10:25:01.497]     if (TRUE) {
[10:25:01.497]         base::sink(type = "output", split = FALSE)
[10:25:01.497]         if (TRUE) {
[10:25:01.497]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:01.497]         }
[10:25:01.497]         else {
[10:25:01.497]             ...future.result["stdout"] <- base::list(NULL)
[10:25:01.497]         }
[10:25:01.497]         base::close(...future.stdout)
[10:25:01.497]         ...future.stdout <- NULL
[10:25:01.497]     }
[10:25:01.497]     ...future.result$conditions <- ...future.conditions
[10:25:01.497]     ...future.result$finished <- base::Sys.time()
[10:25:01.497]     ...future.result
[10:25:01.497] }
[10:25:01.552] MultisessionFuture started
[10:25:01.552] result() for ClusterFuture ...
[10:25:01.552] receiveMessageFromWorker() for ClusterFuture ...
[10:25:01.553] - Validating connection of MultisessionFuture
[10:25:01.586] - received message: FutureResult
[10:25:01.586] - Received FutureResult
[10:25:01.589] - Erased future from FutureRegistry
[10:25:01.589] result() for ClusterFuture ...
[10:25:01.589] - result already collected: FutureResult
[10:25:01.589] result() for ClusterFuture ... done
[10:25:01.590] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:01.590] result() for ClusterFuture ... done
[10:25:01.590] result() for ClusterFuture ...
[10:25:01.590] - result already collected: FutureResult
[10:25:01.590] result() for ClusterFuture ... done
[10:25:01.590] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:25:01.591] plan(): nbrOfWorkers() = 2
[10:25:01.591] getGlobalsAndPackages() ...
[10:25:01.591] Searching for globals...
[10:25:01.592] - globals found: [3] ‘{’, ‘Sys.sleep’, ‘stop’
[10:25:01.593] Searching for globals ... DONE
[10:25:01.593] Resolving globals: FALSE
[10:25:01.593] 
[10:25:01.593] 
[10:25:01.593] getGlobalsAndPackages() ... DONE
[10:25:01.594] run() for ‘Future’ ...
[10:25:01.594] - state: ‘created’
[10:25:01.594] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:01.605] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:01.605] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:01.605]   - Field: ‘node’
[10:25:01.606]   - Field: ‘label’
[10:25:01.606]   - Field: ‘local’
[10:25:01.606]   - Field: ‘owner’
[10:25:01.606]   - Field: ‘envir’
[10:25:01.606]   - Field: ‘workers’
[10:25:01.606]   - Field: ‘packages’
[10:25:01.606]   - Field: ‘gc’
[10:25:01.606]   - Field: ‘conditions’
[10:25:01.606]   - Field: ‘persistent’
[10:25:01.606]   - Field: ‘expr’
[10:25:01.607]   - Field: ‘uuid’
[10:25:01.607]   - Field: ‘seed’
[10:25:01.607]   - Field: ‘version’
[10:25:01.607]   - Field: ‘result’
[10:25:01.607]   - Field: ‘asynchronous’
[10:25:01.607]   - Field: ‘calls’
[10:25:01.607]   - Field: ‘globals’
[10:25:01.607]   - Field: ‘stdout’
[10:25:01.608]   - Field: ‘earlySignal’
[10:25:01.608]   - Field: ‘lazy’
[10:25:01.608]   - Field: ‘state’
[10:25:01.608] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:01.608] - Launch lazy future ...
[10:25:01.608] Packages needed by the future expression (n = 0): <none>
[10:25:01.608] Packages needed by future strategies (n = 0): <none>
[10:25:01.609] {
[10:25:01.609]     {
[10:25:01.609]         {
[10:25:01.609]             ...future.startTime <- base::Sys.time()
[10:25:01.609]             {
[10:25:01.609]                 {
[10:25:01.609]                   {
[10:25:01.609]                     {
[10:25:01.609]                       base::local({
[10:25:01.609]                         has_future <- base::requireNamespace("future", 
[10:25:01.609]                           quietly = TRUE)
[10:25:01.609]                         if (has_future) {
[10:25:01.609]                           ns <- base::getNamespace("future")
[10:25:01.609]                           version <- ns[[".package"]][["version"]]
[10:25:01.609]                           if (is.null(version)) 
[10:25:01.609]                             version <- utils::packageVersion("future")
[10:25:01.609]                         }
[10:25:01.609]                         else {
[10:25:01.609]                           version <- NULL
[10:25:01.609]                         }
[10:25:01.609]                         if (!has_future || version < "1.8.0") {
[10:25:01.609]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:01.609]                             "", base::R.version$version.string), 
[10:25:01.609]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:01.609]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:01.609]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:01.609]                               "release", "version")], collapse = " "), 
[10:25:01.609]                             hostname = base::Sys.info()[["nodename"]])
[10:25:01.609]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:01.609]                             info)
[10:25:01.609]                           info <- base::paste(info, collapse = "; ")
[10:25:01.609]                           if (!has_future) {
[10:25:01.609]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:01.609]                               info)
[10:25:01.609]                           }
[10:25:01.609]                           else {
[10:25:01.609]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:01.609]                               info, version)
[10:25:01.609]                           }
[10:25:01.609]                           base::stop(msg)
[10:25:01.609]                         }
[10:25:01.609]                       })
[10:25:01.609]                     }
[10:25:01.609]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:01.609]                     base::options(mc.cores = 1L)
[10:25:01.609]                   }
[10:25:01.609]                   options(future.plan = NULL)
[10:25:01.609]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:01.609]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:01.609]                 }
[10:25:01.609]                 ...future.workdir <- getwd()
[10:25:01.609]             }
[10:25:01.609]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:01.609]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:01.609]         }
[10:25:01.609]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:01.609]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:01.609]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:01.609]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:01.609]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:01.609]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:01.609]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:01.609]             base::names(...future.oldOptions))
[10:25:01.609]     }
[10:25:01.609]     if (FALSE) {
[10:25:01.609]     }
[10:25:01.609]     else {
[10:25:01.609]         if (TRUE) {
[10:25:01.609]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:01.609]                 open = "w")
[10:25:01.609]         }
[10:25:01.609]         else {
[10:25:01.609]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:01.609]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:01.609]         }
[10:25:01.609]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:01.609]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:01.609]             base::sink(type = "output", split = FALSE)
[10:25:01.609]             base::close(...future.stdout)
[10:25:01.609]         }, add = TRUE)
[10:25:01.609]     }
[10:25:01.609]     ...future.frame <- base::sys.nframe()
[10:25:01.609]     ...future.conditions <- base::list()
[10:25:01.609]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:01.609]     if (FALSE) {
[10:25:01.609]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:01.609]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:01.609]     }
[10:25:01.609]     ...future.result <- base::tryCatch({
[10:25:01.609]         base::withCallingHandlers({
[10:25:01.609]             ...future.value <- base::withVisible(base::local({
[10:25:01.609]                 ...future.makeSendCondition <- base::local({
[10:25:01.609]                   sendCondition <- NULL
[10:25:01.609]                   function(frame = 1L) {
[10:25:01.609]                     if (is.function(sendCondition)) 
[10:25:01.609]                       return(sendCondition)
[10:25:01.609]                     ns <- getNamespace("parallel")
[10:25:01.609]                     if (exists("sendData", mode = "function", 
[10:25:01.609]                       envir = ns)) {
[10:25:01.609]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:01.609]                         envir = ns)
[10:25:01.609]                       envir <- sys.frame(frame)
[10:25:01.609]                       master <- NULL
[10:25:01.609]                       while (!identical(envir, .GlobalEnv) && 
[10:25:01.609]                         !identical(envir, emptyenv())) {
[10:25:01.609]                         if (exists("master", mode = "list", envir = envir, 
[10:25:01.609]                           inherits = FALSE)) {
[10:25:01.609]                           master <- get("master", mode = "list", 
[10:25:01.609]                             envir = envir, inherits = FALSE)
[10:25:01.609]                           if (inherits(master, c("SOCKnode", 
[10:25:01.609]                             "SOCK0node"))) {
[10:25:01.609]                             sendCondition <<- function(cond) {
[10:25:01.609]                               data <- list(type = "VALUE", value = cond, 
[10:25:01.609]                                 success = TRUE)
[10:25:01.609]                               parallel_sendData(master, data)
[10:25:01.609]                             }
[10:25:01.609]                             return(sendCondition)
[10:25:01.609]                           }
[10:25:01.609]                         }
[10:25:01.609]                         frame <- frame + 1L
[10:25:01.609]                         envir <- sys.frame(frame)
[10:25:01.609]                       }
[10:25:01.609]                     }
[10:25:01.609]                     sendCondition <<- function(cond) NULL
[10:25:01.609]                   }
[10:25:01.609]                 })
[10:25:01.609]                 withCallingHandlers({
[10:25:01.609]                   {
[10:25:01.609]                     Sys.sleep(3)
[10:25:01.609]                     42L
[10:25:01.609]                     stop("Woops")
[10:25:01.609]                   }
[10:25:01.609]                 }, immediateCondition = function(cond) {
[10:25:01.609]                   sendCondition <- ...future.makeSendCondition()
[10:25:01.609]                   sendCondition(cond)
[10:25:01.609]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.609]                   {
[10:25:01.609]                     inherits <- base::inherits
[10:25:01.609]                     invokeRestart <- base::invokeRestart
[10:25:01.609]                     is.null <- base::is.null
[10:25:01.609]                     muffled <- FALSE
[10:25:01.609]                     if (inherits(cond, "message")) {
[10:25:01.609]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:01.609]                       if (muffled) 
[10:25:01.609]                         invokeRestart("muffleMessage")
[10:25:01.609]                     }
[10:25:01.609]                     else if (inherits(cond, "warning")) {
[10:25:01.609]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:01.609]                       if (muffled) 
[10:25:01.609]                         invokeRestart("muffleWarning")
[10:25:01.609]                     }
[10:25:01.609]                     else if (inherits(cond, "condition")) {
[10:25:01.609]                       if (!is.null(pattern)) {
[10:25:01.609]                         computeRestarts <- base::computeRestarts
[10:25:01.609]                         grepl <- base::grepl
[10:25:01.609]                         restarts <- computeRestarts(cond)
[10:25:01.609]                         for (restart in restarts) {
[10:25:01.609]                           name <- restart$name
[10:25:01.609]                           if (is.null(name)) 
[10:25:01.609]                             next
[10:25:01.609]                           if (!grepl(pattern, name)) 
[10:25:01.609]                             next
[10:25:01.609]                           invokeRestart(restart)
[10:25:01.609]                           muffled <- TRUE
[10:25:01.609]                           break
[10:25:01.609]                         }
[10:25:01.609]                       }
[10:25:01.609]                     }
[10:25:01.609]                     invisible(muffled)
[10:25:01.609]                   }
[10:25:01.609]                   muffleCondition(cond)
[10:25:01.609]                 })
[10:25:01.609]             }))
[10:25:01.609]             future::FutureResult(value = ...future.value$value, 
[10:25:01.609]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:01.609]                   ...future.rng), globalenv = if (FALSE) 
[10:25:01.609]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:01.609]                     ...future.globalenv.names))
[10:25:01.609]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:01.609]         }, condition = base::local({
[10:25:01.609]             c <- base::c
[10:25:01.609]             inherits <- base::inherits
[10:25:01.609]             invokeRestart <- base::invokeRestart
[10:25:01.609]             length <- base::length
[10:25:01.609]             list <- base::list
[10:25:01.609]             seq.int <- base::seq.int
[10:25:01.609]             signalCondition <- base::signalCondition
[10:25:01.609]             sys.calls <- base::sys.calls
[10:25:01.609]             `[[` <- base::`[[`
[10:25:01.609]             `+` <- base::`+`
[10:25:01.609]             `<<-` <- base::`<<-`
[10:25:01.609]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:01.609]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:01.609]                   3L)]
[10:25:01.609]             }
[10:25:01.609]             function(cond) {
[10:25:01.609]                 is_error <- inherits(cond, "error")
[10:25:01.609]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:01.609]                   NULL)
[10:25:01.609]                 if (is_error) {
[10:25:01.609]                   sessionInformation <- function() {
[10:25:01.609]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:01.609]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:01.609]                       search = base::search(), system = base::Sys.info())
[10:25:01.609]                   }
[10:25:01.609]                   ...future.conditions[[length(...future.conditions) + 
[10:25:01.609]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:01.609]                     cond$call), session = sessionInformation(), 
[10:25:01.609]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:01.609]                   signalCondition(cond)
[10:25:01.609]                 }
[10:25:01.609]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:01.609]                 "immediateCondition"))) {
[10:25:01.609]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:01.609]                   ...future.conditions[[length(...future.conditions) + 
[10:25:01.609]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:01.609]                   if (TRUE && !signal) {
[10:25:01.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.609]                     {
[10:25:01.609]                       inherits <- base::inherits
[10:25:01.609]                       invokeRestart <- base::invokeRestart
[10:25:01.609]                       is.null <- base::is.null
[10:25:01.609]                       muffled <- FALSE
[10:25:01.609]                       if (inherits(cond, "message")) {
[10:25:01.609]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:01.609]                         if (muffled) 
[10:25:01.609]                           invokeRestart("muffleMessage")
[10:25:01.609]                       }
[10:25:01.609]                       else if (inherits(cond, "warning")) {
[10:25:01.609]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:01.609]                         if (muffled) 
[10:25:01.609]                           invokeRestart("muffleWarning")
[10:25:01.609]                       }
[10:25:01.609]                       else if (inherits(cond, "condition")) {
[10:25:01.609]                         if (!is.null(pattern)) {
[10:25:01.609]                           computeRestarts <- base::computeRestarts
[10:25:01.609]                           grepl <- base::grepl
[10:25:01.609]                           restarts <- computeRestarts(cond)
[10:25:01.609]                           for (restart in restarts) {
[10:25:01.609]                             name <- restart$name
[10:25:01.609]                             if (is.null(name)) 
[10:25:01.609]                               next
[10:25:01.609]                             if (!grepl(pattern, name)) 
[10:25:01.609]                               next
[10:25:01.609]                             invokeRestart(restart)
[10:25:01.609]                             muffled <- TRUE
[10:25:01.609]                             break
[10:25:01.609]                           }
[10:25:01.609]                         }
[10:25:01.609]                       }
[10:25:01.609]                       invisible(muffled)
[10:25:01.609]                     }
[10:25:01.609]                     muffleCondition(cond, pattern = "^muffle")
[10:25:01.609]                   }
[10:25:01.609]                 }
[10:25:01.609]                 else {
[10:25:01.609]                   if (TRUE) {
[10:25:01.609]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:01.609]                     {
[10:25:01.609]                       inherits <- base::inherits
[10:25:01.609]                       invokeRestart <- base::invokeRestart
[10:25:01.609]                       is.null <- base::is.null
[10:25:01.609]                       muffled <- FALSE
[10:25:01.609]                       if (inherits(cond, "message")) {
[10:25:01.609]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:01.609]                         if (muffled) 
[10:25:01.609]                           invokeRestart("muffleMessage")
[10:25:01.609]                       }
[10:25:01.609]                       else if (inherits(cond, "warning")) {
[10:25:01.609]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:01.609]                         if (muffled) 
[10:25:01.609]                           invokeRestart("muffleWarning")
[10:25:01.609]                       }
[10:25:01.609]                       else if (inherits(cond, "condition")) {
[10:25:01.609]                         if (!is.null(pattern)) {
[10:25:01.609]                           computeRestarts <- base::computeRestarts
[10:25:01.609]                           grepl <- base::grepl
[10:25:01.609]                           restarts <- computeRestarts(cond)
[10:25:01.609]                           for (restart in restarts) {
[10:25:01.609]                             name <- restart$name
[10:25:01.609]                             if (is.null(name)) 
[10:25:01.609]                               next
[10:25:01.609]                             if (!grepl(pattern, name)) 
[10:25:01.609]                               next
[10:25:01.609]                             invokeRestart(restart)
[10:25:01.609]                             muffled <- TRUE
[10:25:01.609]                             break
[10:25:01.609]                           }
[10:25:01.609]                         }
[10:25:01.609]                       }
[10:25:01.609]                       invisible(muffled)
[10:25:01.609]                     }
[10:25:01.609]                     muffleCondition(cond, pattern = "^muffle")
[10:25:01.609]                   }
[10:25:01.609]                 }
[10:25:01.609]             }
[10:25:01.609]         }))
[10:25:01.609]     }, error = function(ex) {
[10:25:01.609]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:01.609]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:01.609]                 ...future.rng), started = ...future.startTime, 
[10:25:01.609]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:01.609]             version = "1.8"), class = "FutureResult")
[10:25:01.609]     }, finally = {
[10:25:01.609]         if (!identical(...future.workdir, getwd())) 
[10:25:01.609]             setwd(...future.workdir)
[10:25:01.609]         {
[10:25:01.609]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:01.609]                 ...future.oldOptions$nwarnings <- NULL
[10:25:01.609]             }
[10:25:01.609]             base::options(...future.oldOptions)
[10:25:01.609]             if (.Platform$OS.type == "windows") {
[10:25:01.609]                 old_names <- names(...future.oldEnvVars)
[10:25:01.609]                 envs <- base::Sys.getenv()
[10:25:01.609]                 names <- names(envs)
[10:25:01.609]                 common <- intersect(names, old_names)
[10:25:01.609]                 added <- setdiff(names, old_names)
[10:25:01.609]                 removed <- setdiff(old_names, names)
[10:25:01.609]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:01.609]                   envs[common]]
[10:25:01.609]                 NAMES <- toupper(changed)
[10:25:01.609]                 args <- list()
[10:25:01.609]                 for (kk in seq_along(NAMES)) {
[10:25:01.609]                   name <- changed[[kk]]
[10:25:01.609]                   NAME <- NAMES[[kk]]
[10:25:01.609]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.609]                     next
[10:25:01.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:01.609]                 }
[10:25:01.609]                 NAMES <- toupper(added)
[10:25:01.609]                 for (kk in seq_along(NAMES)) {
[10:25:01.609]                   name <- added[[kk]]
[10:25:01.609]                   NAME <- NAMES[[kk]]
[10:25:01.609]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.609]                     next
[10:25:01.609]                   args[[name]] <- ""
[10:25:01.609]                 }
[10:25:01.609]                 NAMES <- toupper(removed)
[10:25:01.609]                 for (kk in seq_along(NAMES)) {
[10:25:01.609]                   name <- removed[[kk]]
[10:25:01.609]                   NAME <- NAMES[[kk]]
[10:25:01.609]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:01.609]                     next
[10:25:01.609]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:01.609]                 }
[10:25:01.609]                 if (length(args) > 0) 
[10:25:01.609]                   base::do.call(base::Sys.setenv, args = args)
[10:25:01.609]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:01.609]             }
[10:25:01.609]             else {
[10:25:01.609]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:01.609]             }
[10:25:01.609]             {
[10:25:01.609]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:01.609]                   0L) {
[10:25:01.609]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:01.609]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:01.609]                   base::options(opts)
[10:25:01.609]                 }
[10:25:01.609]                 {
[10:25:01.609]                   {
[10:25:01.609]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:01.609]                     NULL
[10:25:01.609]                   }
[10:25:01.609]                   options(future.plan = NULL)
[10:25:01.609]                   if (is.na(NA_character_)) 
[10:25:01.609]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:01.609]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:01.609]                   future::plan(list(function (..., workers = 2L, 
[10:25:01.609]                     envir = parent.frame()) 
[10:25:01.609]                   strategy(..., workers = workers, envir = envir)), 
[10:25:01.609]                     .cleanup = FALSE, .init = FALSE)
[10:25:01.609]                 }
[10:25:01.609]             }
[10:25:01.609]         }
[10:25:01.609]     })
[10:25:01.609]     if (TRUE) {
[10:25:01.609]         base::sink(type = "output", split = FALSE)
[10:25:01.609]         if (TRUE) {
[10:25:01.609]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:01.609]         }
[10:25:01.609]         else {
[10:25:01.609]             ...future.result["stdout"] <- base::list(NULL)
[10:25:01.609]         }
[10:25:01.609]         base::close(...future.stdout)
[10:25:01.609]         ...future.stdout <- NULL
[10:25:01.609]     }
[10:25:01.609]     ...future.result$conditions <- ...future.conditions
[10:25:01.609]     ...future.result$finished <- base::Sys.time()
[10:25:01.609]     ...future.result
[10:25:01.609] }
[10:25:01.612] MultisessionFuture started
[10:25:01.613] - Launch lazy future ... done
[10:25:01.613] run() for ‘MultisessionFuture’ ... done
<simpleError: No error has been caught because the future is unresolved: ‘f’>
[10:25:04.667] receiveMessageFromWorker() for ClusterFuture ...
[10:25:04.667] - Validating connection of MultisessionFuture
[10:25:04.668] - received message: FutureResult
[10:25:04.668] - Received FutureResult
[10:25:04.668] - Erased future from FutureRegistry
[10:25:04.668] result() for ClusterFuture ...
[10:25:04.668] - result already collected: FutureResult
[10:25:04.668] result() for ClusterFuture ... done
[10:25:04.668] signalConditions() ...
[10:25:04.668]  - include = ‘immediateCondition’
[10:25:04.669]  - exclude = 
[10:25:04.669]  - resignal = FALSE
[10:25:04.669]  - Number of conditions: 1
[10:25:04.669] signalConditions() ... done
[10:25:04.669] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:04.669] A MultisessionFuture was resolved (result was not collected)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    Sys.sleep(3)
    42L
    stop("Woops")
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 0 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 3c8a50ed-c8ff-65bd-adc9-16dc79be2575
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> 
> message("*** backtrace( ) - exceptions ... DONE")
*** backtrace( ) - exceptions ... DONE
> 
> 
> message("*** backtrace( ) ... DONE")
*** backtrace( ) ... DONE
> 
> source("incl/end.R")
[10:25:04.671] plan(): Setting new future strategy stack:
[10:25:04.671] List of future strategies:
[10:25:04.671] 1. FutureStrategy:
[10:25:04.671]    - args: function (..., envir = parent.frame())
[10:25:04.671]    - tweaked: FALSE
[10:25:04.671]    - call: future::plan(oplan)
[10:25:04.672] plan(): nbrOfWorkers() = 1
> 
