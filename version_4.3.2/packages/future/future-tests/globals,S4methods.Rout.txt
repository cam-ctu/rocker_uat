
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:59.852] plan(): Setting new future strategy stack:
[16:04:59.853] List of future strategies:
[16:04:59.853] 1. sequential:
[16:04:59.853]    - args: function (..., envir = parent.frame())
[16:04:59.853]    - tweaked: FALSE
[16:04:59.853]    - call: future::plan("sequential")
[16:04:59.867] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[16:04:59.899] plan(): Setting new future strategy stack:
[16:04:59.899] List of future strategies:
[16:04:59.899] 1. sequential:
[16:04:59.899]    - args: function (..., envir = parent.frame())
[16:04:59.899]    - tweaked: FALSE
[16:04:59.899]    - call: plan(strategy)
[16:04:59.912] plan(): nbrOfWorkers() = 1
[16:04:59.912] getGlobalsAndPackages() ...
[16:04:59.913] Searching for globals...
[16:04:59.919] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:04:59.919] Searching for globals ... DONE
[16:04:59.919] Resolving globals: FALSE
[16:04:59.920] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:04:59.921] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:04:59.921] - globals: [1] ‘my_fcn’
[16:04:59.921] 
[16:04:59.921] getGlobalsAndPackages() ... DONE
[16:04:59.922] run() for ‘Future’ ...
[16:04:59.922] - state: ‘created’
[16:04:59.922] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:59.923] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:59.923] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:59.923]   - Field: ‘label’
[16:04:59.923]   - Field: ‘local’
[16:04:59.923]   - Field: ‘owner’
[16:04:59.923]   - Field: ‘envir’
[16:04:59.923]   - Field: ‘packages’
[16:04:59.923]   - Field: ‘gc’
[16:04:59.923]   - Field: ‘conditions’
[16:04:59.923]   - Field: ‘expr’
[16:04:59.924]   - Field: ‘uuid’
[16:04:59.924]   - Field: ‘seed’
[16:04:59.924]   - Field: ‘version’
[16:04:59.924]   - Field: ‘result’
[16:04:59.924]   - Field: ‘asynchronous’
[16:04:59.924]   - Field: ‘calls’
[16:04:59.924]   - Field: ‘globals’
[16:04:59.924]   - Field: ‘stdout’
[16:04:59.924]   - Field: ‘earlySignal’
[16:04:59.924]   - Field: ‘lazy’
[16:04:59.924]   - Field: ‘state’
[16:04:59.925] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:59.925] - Launch lazy future ...
[16:04:59.925] Packages needed by the future expression (n = 0): <none>
[16:04:59.926] Packages needed by future strategies (n = 0): <none>
[16:04:59.926] {
[16:04:59.926]     {
[16:04:59.926]         {
[16:04:59.926]             ...future.startTime <- base::Sys.time()
[16:04:59.926]             {
[16:04:59.926]                 {
[16:04:59.926]                   {
[16:04:59.926]                     base::local({
[16:04:59.926]                       has_future <- base::requireNamespace("future", 
[16:04:59.926]                         quietly = TRUE)
[16:04:59.926]                       if (has_future) {
[16:04:59.926]                         ns <- base::getNamespace("future")
[16:04:59.926]                         version <- ns[[".package"]][["version"]]
[16:04:59.926]                         if (is.null(version)) 
[16:04:59.926]                           version <- utils::packageVersion("future")
[16:04:59.926]                       }
[16:04:59.926]                       else {
[16:04:59.926]                         version <- NULL
[16:04:59.926]                       }
[16:04:59.926]                       if (!has_future || version < "1.8.0") {
[16:04:59.926]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.926]                           "", base::R.version$version.string), 
[16:04:59.926]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:59.926]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.926]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.926]                             "release", "version")], collapse = " "), 
[16:04:59.926]                           hostname = base::Sys.info()[["nodename"]])
[16:04:59.926]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.926]                           info)
[16:04:59.926]                         info <- base::paste(info, collapse = "; ")
[16:04:59.926]                         if (!has_future) {
[16:04:59.926]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.926]                             info)
[16:04:59.926]                         }
[16:04:59.926]                         else {
[16:04:59.926]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.926]                             info, version)
[16:04:59.926]                         }
[16:04:59.926]                         base::stop(msg)
[16:04:59.926]                       }
[16:04:59.926]                     })
[16:04:59.926]                   }
[16:04:59.926]                   options(future.plan = NULL)
[16:04:59.926]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.926]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.926]                 }
[16:04:59.926]                 ...future.workdir <- getwd()
[16:04:59.926]             }
[16:04:59.926]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.926]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.926]         }
[16:04:59.926]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.926]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.926]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.926]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:59.926]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.926]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.926]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.926]             base::names(...future.oldOptions))
[16:04:59.926]     }
[16:04:59.926]     if (FALSE) {
[16:04:59.926]     }
[16:04:59.926]     else {
[16:04:59.926]         if (TRUE) {
[16:04:59.926]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.926]                 open = "w")
[16:04:59.926]         }
[16:04:59.926]         else {
[16:04:59.926]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.926]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.926]         }
[16:04:59.926]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.926]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.926]             base::sink(type = "output", split = FALSE)
[16:04:59.926]             base::close(...future.stdout)
[16:04:59.926]         }, add = TRUE)
[16:04:59.926]     }
[16:04:59.926]     ...future.frame <- base::sys.nframe()
[16:04:59.926]     ...future.conditions <- base::list()
[16:04:59.926]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.926]     if (FALSE) {
[16:04:59.926]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.926]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.926]     }
[16:04:59.926]     ...future.result <- base::tryCatch({
[16:04:59.926]         base::withCallingHandlers({
[16:04:59.926]             ...future.value <- base::withVisible(base::local({
[16:04:59.926]                 my_fcn
[16:04:59.926]             }))
[16:04:59.926]             future::FutureResult(value = ...future.value$value, 
[16:04:59.926]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.926]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.926]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.926]                     ...future.globalenv.names))
[16:04:59.926]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.926]         }, condition = base::local({
[16:04:59.926]             c <- base::c
[16:04:59.926]             inherits <- base::inherits
[16:04:59.926]             invokeRestart <- base::invokeRestart
[16:04:59.926]             length <- base::length
[16:04:59.926]             list <- base::list
[16:04:59.926]             seq.int <- base::seq.int
[16:04:59.926]             signalCondition <- base::signalCondition
[16:04:59.926]             sys.calls <- base::sys.calls
[16:04:59.926]             `[[` <- base::`[[`
[16:04:59.926]             `+` <- base::`+`
[16:04:59.926]             `<<-` <- base::`<<-`
[16:04:59.926]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.926]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.926]                   3L)]
[16:04:59.926]             }
[16:04:59.926]             function(cond) {
[16:04:59.926]                 is_error <- inherits(cond, "error")
[16:04:59.926]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.926]                   NULL)
[16:04:59.926]                 if (is_error) {
[16:04:59.926]                   sessionInformation <- function() {
[16:04:59.926]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.926]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.926]                       search = base::search(), system = base::Sys.info())
[16:04:59.926]                   }
[16:04:59.926]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.926]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.926]                     cond$call), session = sessionInformation(), 
[16:04:59.926]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.926]                   signalCondition(cond)
[16:04:59.926]                 }
[16:04:59.926]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.926]                 "immediateCondition"))) {
[16:04:59.926]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.926]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.926]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.926]                   if (TRUE && !signal) {
[16:04:59.926]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.926]                     {
[16:04:59.926]                       inherits <- base::inherits
[16:04:59.926]                       invokeRestart <- base::invokeRestart
[16:04:59.926]                       is.null <- base::is.null
[16:04:59.926]                       muffled <- FALSE
[16:04:59.926]                       if (inherits(cond, "message")) {
[16:04:59.926]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.926]                         if (muffled) 
[16:04:59.926]                           invokeRestart("muffleMessage")
[16:04:59.926]                       }
[16:04:59.926]                       else if (inherits(cond, "warning")) {
[16:04:59.926]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.926]                         if (muffled) 
[16:04:59.926]                           invokeRestart("muffleWarning")
[16:04:59.926]                       }
[16:04:59.926]                       else if (inherits(cond, "condition")) {
[16:04:59.926]                         if (!is.null(pattern)) {
[16:04:59.926]                           computeRestarts <- base::computeRestarts
[16:04:59.926]                           grepl <- base::grepl
[16:04:59.926]                           restarts <- computeRestarts(cond)
[16:04:59.926]                           for (restart in restarts) {
[16:04:59.926]                             name <- restart$name
[16:04:59.926]                             if (is.null(name)) 
[16:04:59.926]                               next
[16:04:59.926]                             if (!grepl(pattern, name)) 
[16:04:59.926]                               next
[16:04:59.926]                             invokeRestart(restart)
[16:04:59.926]                             muffled <- TRUE
[16:04:59.926]                             break
[16:04:59.926]                           }
[16:04:59.926]                         }
[16:04:59.926]                       }
[16:04:59.926]                       invisible(muffled)
[16:04:59.926]                     }
[16:04:59.926]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.926]                   }
[16:04:59.926]                 }
[16:04:59.926]                 else {
[16:04:59.926]                   if (TRUE) {
[16:04:59.926]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.926]                     {
[16:04:59.926]                       inherits <- base::inherits
[16:04:59.926]                       invokeRestart <- base::invokeRestart
[16:04:59.926]                       is.null <- base::is.null
[16:04:59.926]                       muffled <- FALSE
[16:04:59.926]                       if (inherits(cond, "message")) {
[16:04:59.926]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.926]                         if (muffled) 
[16:04:59.926]                           invokeRestart("muffleMessage")
[16:04:59.926]                       }
[16:04:59.926]                       else if (inherits(cond, "warning")) {
[16:04:59.926]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.926]                         if (muffled) 
[16:04:59.926]                           invokeRestart("muffleWarning")
[16:04:59.926]                       }
[16:04:59.926]                       else if (inherits(cond, "condition")) {
[16:04:59.926]                         if (!is.null(pattern)) {
[16:04:59.926]                           computeRestarts <- base::computeRestarts
[16:04:59.926]                           grepl <- base::grepl
[16:04:59.926]                           restarts <- computeRestarts(cond)
[16:04:59.926]                           for (restart in restarts) {
[16:04:59.926]                             name <- restart$name
[16:04:59.926]                             if (is.null(name)) 
[16:04:59.926]                               next
[16:04:59.926]                             if (!grepl(pattern, name)) 
[16:04:59.926]                               next
[16:04:59.926]                             invokeRestart(restart)
[16:04:59.926]                             muffled <- TRUE
[16:04:59.926]                             break
[16:04:59.926]                           }
[16:04:59.926]                         }
[16:04:59.926]                       }
[16:04:59.926]                       invisible(muffled)
[16:04:59.926]                     }
[16:04:59.926]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.926]                   }
[16:04:59.926]                 }
[16:04:59.926]             }
[16:04:59.926]         }))
[16:04:59.926]     }, error = function(ex) {
[16:04:59.926]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.926]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.926]                 ...future.rng), started = ...future.startTime, 
[16:04:59.926]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.926]             version = "1.8"), class = "FutureResult")
[16:04:59.926]     }, finally = {
[16:04:59.926]         if (!identical(...future.workdir, getwd())) 
[16:04:59.926]             setwd(...future.workdir)
[16:04:59.926]         {
[16:04:59.926]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.926]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.926]             }
[16:04:59.926]             base::options(...future.oldOptions)
[16:04:59.926]             if (.Platform$OS.type == "windows") {
[16:04:59.926]                 old_names <- names(...future.oldEnvVars)
[16:04:59.926]                 envs <- base::Sys.getenv()
[16:04:59.926]                 names <- names(envs)
[16:04:59.926]                 common <- intersect(names, old_names)
[16:04:59.926]                 added <- setdiff(names, old_names)
[16:04:59.926]                 removed <- setdiff(old_names, names)
[16:04:59.926]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.926]                   envs[common]]
[16:04:59.926]                 NAMES <- toupper(changed)
[16:04:59.926]                 args <- list()
[16:04:59.926]                 for (kk in seq_along(NAMES)) {
[16:04:59.926]                   name <- changed[[kk]]
[16:04:59.926]                   NAME <- NAMES[[kk]]
[16:04:59.926]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.926]                     next
[16:04:59.926]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.926]                 }
[16:04:59.926]                 NAMES <- toupper(added)
[16:04:59.926]                 for (kk in seq_along(NAMES)) {
[16:04:59.926]                   name <- added[[kk]]
[16:04:59.926]                   NAME <- NAMES[[kk]]
[16:04:59.926]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.926]                     next
[16:04:59.926]                   args[[name]] <- ""
[16:04:59.926]                 }
[16:04:59.926]                 NAMES <- toupper(removed)
[16:04:59.926]                 for (kk in seq_along(NAMES)) {
[16:04:59.926]                   name <- removed[[kk]]
[16:04:59.926]                   NAME <- NAMES[[kk]]
[16:04:59.926]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.926]                     next
[16:04:59.926]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.926]                 }
[16:04:59.926]                 if (length(args) > 0) 
[16:04:59.926]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.926]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.926]             }
[16:04:59.926]             else {
[16:04:59.926]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.926]             }
[16:04:59.926]             {
[16:04:59.926]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.926]                   0L) {
[16:04:59.926]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.926]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.926]                   base::options(opts)
[16:04:59.926]                 }
[16:04:59.926]                 {
[16:04:59.926]                   {
[16:04:59.926]                     NULL
[16:04:59.926]                     RNGkind("Mersenne-Twister")
[16:04:59.926]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:59.926]                       inherits = FALSE)
[16:04:59.926]                   }
[16:04:59.926]                   options(future.plan = NULL)
[16:04:59.926]                   if (is.na(NA_character_)) 
[16:04:59.926]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.926]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.926]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:59.926]                   {
[16:04:59.926]                     future <- SequentialFuture(..., envir = envir)
[16:04:59.926]                     if (!future$lazy) 
[16:04:59.926]                       future <- run(future)
[16:04:59.926]                     invisible(future)
[16:04:59.926]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:59.926]                 }
[16:04:59.926]             }
[16:04:59.926]         }
[16:04:59.926]     })
[16:04:59.926]     if (TRUE) {
[16:04:59.926]         base::sink(type = "output", split = FALSE)
[16:04:59.926]         if (TRUE) {
[16:04:59.926]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.926]         }
[16:04:59.926]         else {
[16:04:59.926]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.926]         }
[16:04:59.926]         base::close(...future.stdout)
[16:04:59.926]         ...future.stdout <- NULL
[16:04:59.926]     }
[16:04:59.926]     ...future.result$conditions <- ...future.conditions
[16:04:59.926]     ...future.result$finished <- base::Sys.time()
[16:04:59.926]     ...future.result
[16:04:59.926] }
[16:04:59.928] assign_globals() ...
[16:04:59.928] List of 1
[16:04:59.928]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:04:59.928]   .. ..@ .Data     :function (x)  
[16:04:59.928]   .. ..@ generic   : chr "my_fcn"
[16:04:59.928]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:04:59.928]   .. ..@ package   : chr ".GlobalEnv"
[16:04:59.928]   .. ..@ group     : list()
[16:04:59.928]   .. ..@ valueClass: chr(0) 
[16:04:59.928]   .. ..@ signature : chr "x"
[16:04:59.928]   .. ..@ default   : NULL
[16:04:59.928]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:04:59.928]  - attr(*, "where")=List of 1
[16:04:59.928]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:04:59.928]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:59.928]  - attr(*, "resolved")= logi FALSE
[16:04:59.928]  - attr(*, "total_size")= num 3936
[16:04:59.928]  - attr(*, "already-done")= logi TRUE
[16:04:59.938] - reassign environment for ‘my_fcn’
[16:04:59.938] - copied ‘my_fcn’ to environment
[16:04:59.938] assign_globals() ... done
[16:04:59.938] plan(): Setting new future strategy stack:
[16:04:59.938] List of future strategies:
[16:04:59.938] 1. sequential:
[16:04:59.938]    - args: function (..., envir = parent.frame())
[16:04:59.938]    - tweaked: FALSE
[16:04:59.938]    - call: NULL
[16:04:59.938] plan(): nbrOfWorkers() = 1
[16:04:59.940] plan(): Setting new future strategy stack:
[16:04:59.940] List of future strategies:
[16:04:59.940] 1. sequential:
[16:04:59.940]    - args: function (..., envir = parent.frame())
[16:04:59.940]    - tweaked: FALSE
[16:04:59.940]    - call: plan(strategy)
[16:04:59.940] plan(): nbrOfWorkers() = 1
[16:04:59.940] SequentialFuture started (and completed)
[16:04:59.941] - Launch lazy future ... done
[16:04:59.941] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x564dddaa96f8>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:04:59.941] getGlobalsAndPackages() ...
[16:04:59.941] Searching for globals...
[16:04:59.945] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:04:59.945] Searching for globals ... DONE
[16:04:59.946] Resolving globals: FALSE
[16:04:59.946] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:04:59.946] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:04:59.946] - globals: [1] ‘my_fcn’
[16:04:59.947] 
[16:04:59.947] getGlobalsAndPackages() ... DONE
[16:04:59.947] run() for ‘Future’ ...
[16:04:59.947] - state: ‘created’
[16:04:59.947] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:59.947] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:59.947] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:59.948]   - Field: ‘label’
[16:04:59.948]   - Field: ‘local’
[16:04:59.948]   - Field: ‘owner’
[16:04:59.948]   - Field: ‘envir’
[16:04:59.948]   - Field: ‘packages’
[16:04:59.948]   - Field: ‘gc’
[16:04:59.948]   - Field: ‘conditions’
[16:04:59.948]   - Field: ‘expr’
[16:04:59.948]   - Field: ‘uuid’
[16:04:59.948]   - Field: ‘seed’
[16:04:59.948]   - Field: ‘version’
[16:04:59.949]   - Field: ‘result’
[16:04:59.949]   - Field: ‘asynchronous’
[16:04:59.949]   - Field: ‘calls’
[16:04:59.949]   - Field: ‘globals’
[16:04:59.949]   - Field: ‘stdout’
[16:04:59.949]   - Field: ‘earlySignal’
[16:04:59.949]   - Field: ‘lazy’
[16:04:59.949]   - Field: ‘state’
[16:04:59.949] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:59.949] - Launch lazy future ...
[16:04:59.950] Packages needed by the future expression (n = 0): <none>
[16:04:59.950] Packages needed by future strategies (n = 0): <none>
[16:04:59.950] {
[16:04:59.950]     {
[16:04:59.950]         {
[16:04:59.950]             ...future.startTime <- base::Sys.time()
[16:04:59.950]             {
[16:04:59.950]                 {
[16:04:59.950]                   {
[16:04:59.950]                     base::local({
[16:04:59.950]                       has_future <- base::requireNamespace("future", 
[16:04:59.950]                         quietly = TRUE)
[16:04:59.950]                       if (has_future) {
[16:04:59.950]                         ns <- base::getNamespace("future")
[16:04:59.950]                         version <- ns[[".package"]][["version"]]
[16:04:59.950]                         if (is.null(version)) 
[16:04:59.950]                           version <- utils::packageVersion("future")
[16:04:59.950]                       }
[16:04:59.950]                       else {
[16:04:59.950]                         version <- NULL
[16:04:59.950]                       }
[16:04:59.950]                       if (!has_future || version < "1.8.0") {
[16:04:59.950]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.950]                           "", base::R.version$version.string), 
[16:04:59.950]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:59.950]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.950]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.950]                             "release", "version")], collapse = " "), 
[16:04:59.950]                           hostname = base::Sys.info()[["nodename"]])
[16:04:59.950]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.950]                           info)
[16:04:59.950]                         info <- base::paste(info, collapse = "; ")
[16:04:59.950]                         if (!has_future) {
[16:04:59.950]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.950]                             info)
[16:04:59.950]                         }
[16:04:59.950]                         else {
[16:04:59.950]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.950]                             info, version)
[16:04:59.950]                         }
[16:04:59.950]                         base::stop(msg)
[16:04:59.950]                       }
[16:04:59.950]                     })
[16:04:59.950]                   }
[16:04:59.950]                   options(future.plan = NULL)
[16:04:59.950]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.950]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.950]                 }
[16:04:59.950]                 ...future.workdir <- getwd()
[16:04:59.950]             }
[16:04:59.950]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.950]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.950]         }
[16:04:59.950]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.950]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.950]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.950]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:59.950]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.950]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.950]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.950]             base::names(...future.oldOptions))
[16:04:59.950]     }
[16:04:59.950]     if (FALSE) {
[16:04:59.950]     }
[16:04:59.950]     else {
[16:04:59.950]         if (TRUE) {
[16:04:59.950]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.950]                 open = "w")
[16:04:59.950]         }
[16:04:59.950]         else {
[16:04:59.950]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.950]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.950]         }
[16:04:59.950]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.950]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.950]             base::sink(type = "output", split = FALSE)
[16:04:59.950]             base::close(...future.stdout)
[16:04:59.950]         }, add = TRUE)
[16:04:59.950]     }
[16:04:59.950]     ...future.frame <- base::sys.nframe()
[16:04:59.950]     ...future.conditions <- base::list()
[16:04:59.950]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.950]     if (FALSE) {
[16:04:59.950]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.950]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.950]     }
[16:04:59.950]     ...future.result <- base::tryCatch({
[16:04:59.950]         base::withCallingHandlers({
[16:04:59.950]             ...future.value <- base::withVisible(base::local({
[16:04:59.950]                 my_fcn(3)
[16:04:59.950]             }))
[16:04:59.950]             future::FutureResult(value = ...future.value$value, 
[16:04:59.950]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.950]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.950]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.950]                     ...future.globalenv.names))
[16:04:59.950]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.950]         }, condition = base::local({
[16:04:59.950]             c <- base::c
[16:04:59.950]             inherits <- base::inherits
[16:04:59.950]             invokeRestart <- base::invokeRestart
[16:04:59.950]             length <- base::length
[16:04:59.950]             list <- base::list
[16:04:59.950]             seq.int <- base::seq.int
[16:04:59.950]             signalCondition <- base::signalCondition
[16:04:59.950]             sys.calls <- base::sys.calls
[16:04:59.950]             `[[` <- base::`[[`
[16:04:59.950]             `+` <- base::`+`
[16:04:59.950]             `<<-` <- base::`<<-`
[16:04:59.950]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.950]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.950]                   3L)]
[16:04:59.950]             }
[16:04:59.950]             function(cond) {
[16:04:59.950]                 is_error <- inherits(cond, "error")
[16:04:59.950]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.950]                   NULL)
[16:04:59.950]                 if (is_error) {
[16:04:59.950]                   sessionInformation <- function() {
[16:04:59.950]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.950]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.950]                       search = base::search(), system = base::Sys.info())
[16:04:59.950]                   }
[16:04:59.950]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.950]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.950]                     cond$call), session = sessionInformation(), 
[16:04:59.950]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.950]                   signalCondition(cond)
[16:04:59.950]                 }
[16:04:59.950]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.950]                 "immediateCondition"))) {
[16:04:59.950]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.950]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.950]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.950]                   if (TRUE && !signal) {
[16:04:59.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.950]                     {
[16:04:59.950]                       inherits <- base::inherits
[16:04:59.950]                       invokeRestart <- base::invokeRestart
[16:04:59.950]                       is.null <- base::is.null
[16:04:59.950]                       muffled <- FALSE
[16:04:59.950]                       if (inherits(cond, "message")) {
[16:04:59.950]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.950]                         if (muffled) 
[16:04:59.950]                           invokeRestart("muffleMessage")
[16:04:59.950]                       }
[16:04:59.950]                       else if (inherits(cond, "warning")) {
[16:04:59.950]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.950]                         if (muffled) 
[16:04:59.950]                           invokeRestart("muffleWarning")
[16:04:59.950]                       }
[16:04:59.950]                       else if (inherits(cond, "condition")) {
[16:04:59.950]                         if (!is.null(pattern)) {
[16:04:59.950]                           computeRestarts <- base::computeRestarts
[16:04:59.950]                           grepl <- base::grepl
[16:04:59.950]                           restarts <- computeRestarts(cond)
[16:04:59.950]                           for (restart in restarts) {
[16:04:59.950]                             name <- restart$name
[16:04:59.950]                             if (is.null(name)) 
[16:04:59.950]                               next
[16:04:59.950]                             if (!grepl(pattern, name)) 
[16:04:59.950]                               next
[16:04:59.950]                             invokeRestart(restart)
[16:04:59.950]                             muffled <- TRUE
[16:04:59.950]                             break
[16:04:59.950]                           }
[16:04:59.950]                         }
[16:04:59.950]                       }
[16:04:59.950]                       invisible(muffled)
[16:04:59.950]                     }
[16:04:59.950]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.950]                   }
[16:04:59.950]                 }
[16:04:59.950]                 else {
[16:04:59.950]                   if (TRUE) {
[16:04:59.950]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.950]                     {
[16:04:59.950]                       inherits <- base::inherits
[16:04:59.950]                       invokeRestart <- base::invokeRestart
[16:04:59.950]                       is.null <- base::is.null
[16:04:59.950]                       muffled <- FALSE
[16:04:59.950]                       if (inherits(cond, "message")) {
[16:04:59.950]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.950]                         if (muffled) 
[16:04:59.950]                           invokeRestart("muffleMessage")
[16:04:59.950]                       }
[16:04:59.950]                       else if (inherits(cond, "warning")) {
[16:04:59.950]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.950]                         if (muffled) 
[16:04:59.950]                           invokeRestart("muffleWarning")
[16:04:59.950]                       }
[16:04:59.950]                       else if (inherits(cond, "condition")) {
[16:04:59.950]                         if (!is.null(pattern)) {
[16:04:59.950]                           computeRestarts <- base::computeRestarts
[16:04:59.950]                           grepl <- base::grepl
[16:04:59.950]                           restarts <- computeRestarts(cond)
[16:04:59.950]                           for (restart in restarts) {
[16:04:59.950]                             name <- restart$name
[16:04:59.950]                             if (is.null(name)) 
[16:04:59.950]                               next
[16:04:59.950]                             if (!grepl(pattern, name)) 
[16:04:59.950]                               next
[16:04:59.950]                             invokeRestart(restart)
[16:04:59.950]                             muffled <- TRUE
[16:04:59.950]                             break
[16:04:59.950]                           }
[16:04:59.950]                         }
[16:04:59.950]                       }
[16:04:59.950]                       invisible(muffled)
[16:04:59.950]                     }
[16:04:59.950]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.950]                   }
[16:04:59.950]                 }
[16:04:59.950]             }
[16:04:59.950]         }))
[16:04:59.950]     }, error = function(ex) {
[16:04:59.950]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.950]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.950]                 ...future.rng), started = ...future.startTime, 
[16:04:59.950]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.950]             version = "1.8"), class = "FutureResult")
[16:04:59.950]     }, finally = {
[16:04:59.950]         if (!identical(...future.workdir, getwd())) 
[16:04:59.950]             setwd(...future.workdir)
[16:04:59.950]         {
[16:04:59.950]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.950]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.950]             }
[16:04:59.950]             base::options(...future.oldOptions)
[16:04:59.950]             if (.Platform$OS.type == "windows") {
[16:04:59.950]                 old_names <- names(...future.oldEnvVars)
[16:04:59.950]                 envs <- base::Sys.getenv()
[16:04:59.950]                 names <- names(envs)
[16:04:59.950]                 common <- intersect(names, old_names)
[16:04:59.950]                 added <- setdiff(names, old_names)
[16:04:59.950]                 removed <- setdiff(old_names, names)
[16:04:59.950]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.950]                   envs[common]]
[16:04:59.950]                 NAMES <- toupper(changed)
[16:04:59.950]                 args <- list()
[16:04:59.950]                 for (kk in seq_along(NAMES)) {
[16:04:59.950]                   name <- changed[[kk]]
[16:04:59.950]                   NAME <- NAMES[[kk]]
[16:04:59.950]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.950]                     next
[16:04:59.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.950]                 }
[16:04:59.950]                 NAMES <- toupper(added)
[16:04:59.950]                 for (kk in seq_along(NAMES)) {
[16:04:59.950]                   name <- added[[kk]]
[16:04:59.950]                   NAME <- NAMES[[kk]]
[16:04:59.950]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.950]                     next
[16:04:59.950]                   args[[name]] <- ""
[16:04:59.950]                 }
[16:04:59.950]                 NAMES <- toupper(removed)
[16:04:59.950]                 for (kk in seq_along(NAMES)) {
[16:04:59.950]                   name <- removed[[kk]]
[16:04:59.950]                   NAME <- NAMES[[kk]]
[16:04:59.950]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.950]                     next
[16:04:59.950]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.950]                 }
[16:04:59.950]                 if (length(args) > 0) 
[16:04:59.950]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.950]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.950]             }
[16:04:59.950]             else {
[16:04:59.950]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.950]             }
[16:04:59.950]             {
[16:04:59.950]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.950]                   0L) {
[16:04:59.950]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.950]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.950]                   base::options(opts)
[16:04:59.950]                 }
[16:04:59.950]                 {
[16:04:59.950]                   {
[16:04:59.950]                     NULL
[16:04:59.950]                     RNGkind("Mersenne-Twister")
[16:04:59.950]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:59.950]                       inherits = FALSE)
[16:04:59.950]                   }
[16:04:59.950]                   options(future.plan = NULL)
[16:04:59.950]                   if (is.na(NA_character_)) 
[16:04:59.950]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.950]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.950]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:59.950]                   {
[16:04:59.950]                     future <- SequentialFuture(..., envir = envir)
[16:04:59.950]                     if (!future$lazy) 
[16:04:59.950]                       future <- run(future)
[16:04:59.950]                     invisible(future)
[16:04:59.950]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:59.950]                 }
[16:04:59.950]             }
[16:04:59.950]         }
[16:04:59.950]     })
[16:04:59.950]     if (TRUE) {
[16:04:59.950]         base::sink(type = "output", split = FALSE)
[16:04:59.950]         if (TRUE) {
[16:04:59.950]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.950]         }
[16:04:59.950]         else {
[16:04:59.950]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.950]         }
[16:04:59.950]         base::close(...future.stdout)
[16:04:59.950]         ...future.stdout <- NULL
[16:04:59.950]     }
[16:04:59.950]     ...future.result$conditions <- ...future.conditions
[16:04:59.950]     ...future.result$finished <- base::Sys.time()
[16:04:59.950]     ...future.result
[16:04:59.950] }
[16:04:59.952] assign_globals() ...
[16:04:59.952] List of 1
[16:04:59.952]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:04:59.952]   .. ..@ .Data     :function (x)  
[16:04:59.952]   .. ..@ generic   : chr "my_fcn"
[16:04:59.952]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:04:59.952]   .. ..@ package   : chr ".GlobalEnv"
[16:04:59.952]   .. ..@ group     : list()
[16:04:59.952]   .. ..@ valueClass: chr(0) 
[16:04:59.952]   .. ..@ signature : chr "x"
[16:04:59.952]   .. ..@ default   : NULL
[16:04:59.952]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:04:59.952]  - attr(*, "where")=List of 1
[16:04:59.952]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:04:59.952]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:59.952]  - attr(*, "resolved")= logi FALSE
[16:04:59.952]  - attr(*, "total_size")= num 3936
[16:04:59.952]  - attr(*, "already-done")= logi TRUE
[16:04:59.956] - reassign environment for ‘my_fcn’
[16:04:59.956] - copied ‘my_fcn’ to environment
[16:04:59.956] assign_globals() ... done
[16:04:59.957] plan(): Setting new future strategy stack:
[16:04:59.957] List of future strategies:
[16:04:59.957] 1. sequential:
[16:04:59.957]    - args: function (..., envir = parent.frame())
[16:04:59.957]    - tweaked: FALSE
[16:04:59.957]    - call: NULL
[16:04:59.957] plan(): nbrOfWorkers() = 1
[16:04:59.959] plan(): Setting new future strategy stack:
[16:04:59.959] List of future strategies:
[16:04:59.959] 1. sequential:
[16:04:59.959]    - args: function (..., envir = parent.frame())
[16:04:59.959]    - tweaked: FALSE
[16:04:59.959]    - call: plan(strategy)
[16:04:59.959] plan(): nbrOfWorkers() = 1
[16:04:59.959] SequentialFuture started (and completed)
[16:04:59.959] signalConditions() ...
[16:04:59.960]  - include = ‘immediateCondition’
[16:04:59.960]  - exclude = 
[16:04:59.960]  - resignal = FALSE
[16:04:59.960]  - Number of conditions: 1
[16:04:59.960] signalConditions() ... done
[16:04:59.960] - Launch lazy future ... done
[16:04:59.960] run() for ‘SequentialFuture’ ... done
[16:04:59.960] signalConditions() ...
[16:04:59.960]  - include = ‘immediateCondition’
[16:04:59.960]  - exclude = 
[16:04:59.960]  - resignal = FALSE
[16:04:59.961]  - Number of conditions: 1
[16:04:59.961] signalConditions() ... done
[16:04:59.962] Future state: ‘finished’
[16:04:59.962] signalConditions() ...
[16:04:59.962]  - include = ‘condition’
[16:04:59.962]  - exclude = ‘immediateCondition’
[16:04:59.963]  - resignal = TRUE
[16:04:59.963]  - Number of conditions: 1
[16:04:59.963]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:04:59.963] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[16:04:59.964] plan(): Setting new future strategy stack:
[16:04:59.964] List of future strategies:
[16:04:59.964] 1. multicore:
[16:04:59.964]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:59.964]    - tweaked: FALSE
[16:04:59.964]    - call: plan(strategy)
[16:04:59.968] plan(): nbrOfWorkers() = 2
[16:04:59.968] getGlobalsAndPackages() ...
[16:04:59.968] Searching for globals...
[16:04:59.970] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:04:59.970] Searching for globals ... DONE
[16:04:59.970] Resolving globals: FALSE
[16:04:59.971] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:04:59.971] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:04:59.971] - globals: [1] ‘my_fcn’
[16:04:59.971] 
[16:04:59.971] getGlobalsAndPackages() ... DONE
[16:04:59.972] run() for ‘Future’ ...
[16:04:59.972] - state: ‘created’
[16:04:59.972] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:04:59.975] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:04:59.975] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:04:59.976]   - Field: ‘label’
[16:04:59.976]   - Field: ‘local’
[16:04:59.976]   - Field: ‘owner’
[16:04:59.976]   - Field: ‘envir’
[16:04:59.976]   - Field: ‘workers’
[16:04:59.976]   - Field: ‘packages’
[16:04:59.976]   - Field: ‘gc’
[16:04:59.976]   - Field: ‘job’
[16:04:59.976]   - Field: ‘conditions’
[16:04:59.976]   - Field: ‘expr’
[16:04:59.977]   - Field: ‘uuid’
[16:04:59.977]   - Field: ‘seed’
[16:04:59.977]   - Field: ‘version’
[16:04:59.977]   - Field: ‘result’
[16:04:59.977]   - Field: ‘asynchronous’
[16:04:59.977]   - Field: ‘calls’
[16:04:59.977]   - Field: ‘globals’
[16:04:59.977]   - Field: ‘stdout’
[16:04:59.977]   - Field: ‘earlySignal’
[16:04:59.977]   - Field: ‘lazy’
[16:04:59.977]   - Field: ‘state’
[16:04:59.978] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:04:59.978] - Launch lazy future ...
[16:04:59.979] Packages needed by the future expression (n = 0): <none>
[16:04:59.979] Packages needed by future strategies (n = 0): <none>
[16:04:59.979] {
[16:04:59.979]     {
[16:04:59.979]         {
[16:04:59.979]             ...future.startTime <- base::Sys.time()
[16:04:59.979]             {
[16:04:59.979]                 {
[16:04:59.979]                   {
[16:04:59.979]                     {
[16:04:59.979]                       base::local({
[16:04:59.979]                         has_future <- base::requireNamespace("future", 
[16:04:59.979]                           quietly = TRUE)
[16:04:59.979]                         if (has_future) {
[16:04:59.979]                           ns <- base::getNamespace("future")
[16:04:59.979]                           version <- ns[[".package"]][["version"]]
[16:04:59.979]                           if (is.null(version)) 
[16:04:59.979]                             version <- utils::packageVersion("future")
[16:04:59.979]                         }
[16:04:59.979]                         else {
[16:04:59.979]                           version <- NULL
[16:04:59.979]                         }
[16:04:59.979]                         if (!has_future || version < "1.8.0") {
[16:04:59.979]                           info <- base::c(r_version = base::gsub("R version ", 
[16:04:59.979]                             "", base::R.version$version.string), 
[16:04:59.979]                             platform = base::sprintf("%s (%s-bit)", 
[16:04:59.979]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:59.979]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:59.979]                               "release", "version")], collapse = " "), 
[16:04:59.979]                             hostname = base::Sys.info()[["nodename"]])
[16:04:59.979]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:04:59.979]                             info)
[16:04:59.979]                           info <- base::paste(info, collapse = "; ")
[16:04:59.979]                           if (!has_future) {
[16:04:59.979]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:59.979]                               info)
[16:04:59.979]                           }
[16:04:59.979]                           else {
[16:04:59.979]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:59.979]                               info, version)
[16:04:59.979]                           }
[16:04:59.979]                           base::stop(msg)
[16:04:59.979]                         }
[16:04:59.979]                       })
[16:04:59.979]                     }
[16:04:59.979]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:04:59.979]                     base::options(mc.cores = 1L)
[16:04:59.979]                   }
[16:04:59.979]                   options(future.plan = NULL)
[16:04:59.979]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.979]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:59.979]                 }
[16:04:59.979]                 ...future.workdir <- getwd()
[16:04:59.979]             }
[16:04:59.979]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:59.979]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:59.979]         }
[16:04:59.979]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:59.979]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:59.979]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:59.979]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:59.979]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:59.979]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:59.979]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:59.979]             base::names(...future.oldOptions))
[16:04:59.979]     }
[16:04:59.979]     if (FALSE) {
[16:04:59.979]     }
[16:04:59.979]     else {
[16:04:59.979]         if (TRUE) {
[16:04:59.979]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:59.979]                 open = "w")
[16:04:59.979]         }
[16:04:59.979]         else {
[16:04:59.979]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:59.979]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:59.979]         }
[16:04:59.979]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:59.979]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:59.979]             base::sink(type = "output", split = FALSE)
[16:04:59.979]             base::close(...future.stdout)
[16:04:59.979]         }, add = TRUE)
[16:04:59.979]     }
[16:04:59.979]     ...future.frame <- base::sys.nframe()
[16:04:59.979]     ...future.conditions <- base::list()
[16:04:59.979]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:59.979]     if (FALSE) {
[16:04:59.979]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:59.979]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:59.979]     }
[16:04:59.979]     ...future.result <- base::tryCatch({
[16:04:59.979]         base::withCallingHandlers({
[16:04:59.979]             ...future.value <- base::withVisible(base::local({
[16:04:59.979]                 withCallingHandlers({
[16:04:59.979]                   {
[16:04:59.979]                     my_fcn
[16:04:59.979]                   }
[16:04:59.979]                 }, immediateCondition = function(cond) {
[16:04:59.979]                   save_rds <- function (object, pathname, ...) 
[16:04:59.979]                   {
[16:04:59.979]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:04:59.979]                     if (file_test("-f", pathname_tmp)) {
[16:04:59.979]                       fi_tmp <- file.info(pathname_tmp)
[16:04:59.979]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:04:59.979]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:59.979]                         fi_tmp[["mtime"]])
[16:04:59.979]                     }
[16:04:59.979]                     tryCatch({
[16:04:59.979]                       saveRDS(object, file = pathname_tmp, ...)
[16:04:59.979]                     }, error = function(ex) {
[16:04:59.979]                       msg <- conditionMessage(ex)
[16:04:59.979]                       fi_tmp <- file.info(pathname_tmp)
[16:04:59.979]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:04:59.979]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:59.979]                         fi_tmp[["mtime"]], msg)
[16:04:59.979]                       ex$message <- msg
[16:04:59.979]                       stop(ex)
[16:04:59.979]                     })
[16:04:59.979]                     stopifnot(file_test("-f", pathname_tmp))
[16:04:59.979]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:04:59.979]                     if (!res || file_test("-f", pathname_tmp)) {
[16:04:59.979]                       fi_tmp <- file.info(pathname_tmp)
[16:04:59.979]                       fi <- file.info(pathname)
[16:04:59.979]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:04:59.979]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:04:59.979]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:04:59.979]                         fi[["size"]], fi[["mtime"]])
[16:04:59.979]                       stop(msg)
[16:04:59.979]                     }
[16:04:59.979]                     invisible(pathname)
[16:04:59.979]                   }
[16:04:59.979]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:04:59.979]                     rootPath = tempdir()) 
[16:04:59.979]                   {
[16:04:59.979]                     obj <- list(time = Sys.time(), condition = cond)
[16:04:59.979]                     file <- tempfile(pattern = class(cond)[1], 
[16:04:59.979]                       tmpdir = path, fileext = ".rds")
[16:04:59.979]                     save_rds(obj, file)
[16:04:59.979]                   }
[16:04:59.979]                   saveImmediateCondition(cond, path = "/tmp/RtmpW8ZFcE/.future/immediateConditions")
[16:04:59.979]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.979]                   {
[16:04:59.979]                     inherits <- base::inherits
[16:04:59.979]                     invokeRestart <- base::invokeRestart
[16:04:59.979]                     is.null <- base::is.null
[16:04:59.979]                     muffled <- FALSE
[16:04:59.979]                     if (inherits(cond, "message")) {
[16:04:59.979]                       muffled <- grepl(pattern, "muffleMessage")
[16:04:59.979]                       if (muffled) 
[16:04:59.979]                         invokeRestart("muffleMessage")
[16:04:59.979]                     }
[16:04:59.979]                     else if (inherits(cond, "warning")) {
[16:04:59.979]                       muffled <- grepl(pattern, "muffleWarning")
[16:04:59.979]                       if (muffled) 
[16:04:59.979]                         invokeRestart("muffleWarning")
[16:04:59.979]                     }
[16:04:59.979]                     else if (inherits(cond, "condition")) {
[16:04:59.979]                       if (!is.null(pattern)) {
[16:04:59.979]                         computeRestarts <- base::computeRestarts
[16:04:59.979]                         grepl <- base::grepl
[16:04:59.979]                         restarts <- computeRestarts(cond)
[16:04:59.979]                         for (restart in restarts) {
[16:04:59.979]                           name <- restart$name
[16:04:59.979]                           if (is.null(name)) 
[16:04:59.979]                             next
[16:04:59.979]                           if (!grepl(pattern, name)) 
[16:04:59.979]                             next
[16:04:59.979]                           invokeRestart(restart)
[16:04:59.979]                           muffled <- TRUE
[16:04:59.979]                           break
[16:04:59.979]                         }
[16:04:59.979]                       }
[16:04:59.979]                     }
[16:04:59.979]                     invisible(muffled)
[16:04:59.979]                   }
[16:04:59.979]                   muffleCondition(cond)
[16:04:59.979]                 })
[16:04:59.979]             }))
[16:04:59.979]             future::FutureResult(value = ...future.value$value, 
[16:04:59.979]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.979]                   ...future.rng), globalenv = if (FALSE) 
[16:04:59.979]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:59.979]                     ...future.globalenv.names))
[16:04:59.979]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:59.979]         }, condition = base::local({
[16:04:59.979]             c <- base::c
[16:04:59.979]             inherits <- base::inherits
[16:04:59.979]             invokeRestart <- base::invokeRestart
[16:04:59.979]             length <- base::length
[16:04:59.979]             list <- base::list
[16:04:59.979]             seq.int <- base::seq.int
[16:04:59.979]             signalCondition <- base::signalCondition
[16:04:59.979]             sys.calls <- base::sys.calls
[16:04:59.979]             `[[` <- base::`[[`
[16:04:59.979]             `+` <- base::`+`
[16:04:59.979]             `<<-` <- base::`<<-`
[16:04:59.979]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:59.979]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:59.979]                   3L)]
[16:04:59.979]             }
[16:04:59.979]             function(cond) {
[16:04:59.979]                 is_error <- inherits(cond, "error")
[16:04:59.979]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:59.979]                   NULL)
[16:04:59.979]                 if (is_error) {
[16:04:59.979]                   sessionInformation <- function() {
[16:04:59.979]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:59.979]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:59.979]                       search = base::search(), system = base::Sys.info())
[16:04:59.979]                   }
[16:04:59.979]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.979]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:59.979]                     cond$call), session = sessionInformation(), 
[16:04:59.979]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:59.979]                   signalCondition(cond)
[16:04:59.979]                 }
[16:04:59.979]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:59.979]                 "immediateCondition"))) {
[16:04:59.979]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:59.979]                   ...future.conditions[[length(...future.conditions) + 
[16:04:59.979]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:59.979]                   if (TRUE && !signal) {
[16:04:59.979]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.979]                     {
[16:04:59.979]                       inherits <- base::inherits
[16:04:59.979]                       invokeRestart <- base::invokeRestart
[16:04:59.979]                       is.null <- base::is.null
[16:04:59.979]                       muffled <- FALSE
[16:04:59.979]                       if (inherits(cond, "message")) {
[16:04:59.979]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.979]                         if (muffled) 
[16:04:59.979]                           invokeRestart("muffleMessage")
[16:04:59.979]                       }
[16:04:59.979]                       else if (inherits(cond, "warning")) {
[16:04:59.979]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.979]                         if (muffled) 
[16:04:59.979]                           invokeRestart("muffleWarning")
[16:04:59.979]                       }
[16:04:59.979]                       else if (inherits(cond, "condition")) {
[16:04:59.979]                         if (!is.null(pattern)) {
[16:04:59.979]                           computeRestarts <- base::computeRestarts
[16:04:59.979]                           grepl <- base::grepl
[16:04:59.979]                           restarts <- computeRestarts(cond)
[16:04:59.979]                           for (restart in restarts) {
[16:04:59.979]                             name <- restart$name
[16:04:59.979]                             if (is.null(name)) 
[16:04:59.979]                               next
[16:04:59.979]                             if (!grepl(pattern, name)) 
[16:04:59.979]                               next
[16:04:59.979]                             invokeRestart(restart)
[16:04:59.979]                             muffled <- TRUE
[16:04:59.979]                             break
[16:04:59.979]                           }
[16:04:59.979]                         }
[16:04:59.979]                       }
[16:04:59.979]                       invisible(muffled)
[16:04:59.979]                     }
[16:04:59.979]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.979]                   }
[16:04:59.979]                 }
[16:04:59.979]                 else {
[16:04:59.979]                   if (TRUE) {
[16:04:59.979]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:59.979]                     {
[16:04:59.979]                       inherits <- base::inherits
[16:04:59.979]                       invokeRestart <- base::invokeRestart
[16:04:59.979]                       is.null <- base::is.null
[16:04:59.979]                       muffled <- FALSE
[16:04:59.979]                       if (inherits(cond, "message")) {
[16:04:59.979]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:59.979]                         if (muffled) 
[16:04:59.979]                           invokeRestart("muffleMessage")
[16:04:59.979]                       }
[16:04:59.979]                       else if (inherits(cond, "warning")) {
[16:04:59.979]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:59.979]                         if (muffled) 
[16:04:59.979]                           invokeRestart("muffleWarning")
[16:04:59.979]                       }
[16:04:59.979]                       else if (inherits(cond, "condition")) {
[16:04:59.979]                         if (!is.null(pattern)) {
[16:04:59.979]                           computeRestarts <- base::computeRestarts
[16:04:59.979]                           grepl <- base::grepl
[16:04:59.979]                           restarts <- computeRestarts(cond)
[16:04:59.979]                           for (restart in restarts) {
[16:04:59.979]                             name <- restart$name
[16:04:59.979]                             if (is.null(name)) 
[16:04:59.979]                               next
[16:04:59.979]                             if (!grepl(pattern, name)) 
[16:04:59.979]                               next
[16:04:59.979]                             invokeRestart(restart)
[16:04:59.979]                             muffled <- TRUE
[16:04:59.979]                             break
[16:04:59.979]                           }
[16:04:59.979]                         }
[16:04:59.979]                       }
[16:04:59.979]                       invisible(muffled)
[16:04:59.979]                     }
[16:04:59.979]                     muffleCondition(cond, pattern = "^muffle")
[16:04:59.979]                   }
[16:04:59.979]                 }
[16:04:59.979]             }
[16:04:59.979]         }))
[16:04:59.979]     }, error = function(ex) {
[16:04:59.979]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:59.979]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:59.979]                 ...future.rng), started = ...future.startTime, 
[16:04:59.979]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:59.979]             version = "1.8"), class = "FutureResult")
[16:04:59.979]     }, finally = {
[16:04:59.979]         if (!identical(...future.workdir, getwd())) 
[16:04:59.979]             setwd(...future.workdir)
[16:04:59.979]         {
[16:04:59.979]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:59.979]                 ...future.oldOptions$nwarnings <- NULL
[16:04:59.979]             }
[16:04:59.979]             base::options(...future.oldOptions)
[16:04:59.979]             if (.Platform$OS.type == "windows") {
[16:04:59.979]                 old_names <- names(...future.oldEnvVars)
[16:04:59.979]                 envs <- base::Sys.getenv()
[16:04:59.979]                 names <- names(envs)
[16:04:59.979]                 common <- intersect(names, old_names)
[16:04:59.979]                 added <- setdiff(names, old_names)
[16:04:59.979]                 removed <- setdiff(old_names, names)
[16:04:59.979]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:59.979]                   envs[common]]
[16:04:59.979]                 NAMES <- toupper(changed)
[16:04:59.979]                 args <- list()
[16:04:59.979]                 for (kk in seq_along(NAMES)) {
[16:04:59.979]                   name <- changed[[kk]]
[16:04:59.979]                   NAME <- NAMES[[kk]]
[16:04:59.979]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.979]                     next
[16:04:59.979]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.979]                 }
[16:04:59.979]                 NAMES <- toupper(added)
[16:04:59.979]                 for (kk in seq_along(NAMES)) {
[16:04:59.979]                   name <- added[[kk]]
[16:04:59.979]                   NAME <- NAMES[[kk]]
[16:04:59.979]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.979]                     next
[16:04:59.979]                   args[[name]] <- ""
[16:04:59.979]                 }
[16:04:59.979]                 NAMES <- toupper(removed)
[16:04:59.979]                 for (kk in seq_along(NAMES)) {
[16:04:59.979]                   name <- removed[[kk]]
[16:04:59.979]                   NAME <- NAMES[[kk]]
[16:04:59.979]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:59.979]                     next
[16:04:59.979]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:59.979]                 }
[16:04:59.979]                 if (length(args) > 0) 
[16:04:59.979]                   base::do.call(base::Sys.setenv, args = args)
[16:04:59.979]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:59.979]             }
[16:04:59.979]             else {
[16:04:59.979]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:59.979]             }
[16:04:59.979]             {
[16:04:59.979]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:59.979]                   0L) {
[16:04:59.979]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:59.979]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:59.979]                   base::options(opts)
[16:04:59.979]                 }
[16:04:59.979]                 {
[16:04:59.979]                   {
[16:04:59.979]                     base::options(mc.cores = ...future.mc.cores.old)
[16:04:59.979]                     NULL
[16:04:59.979]                   }
[16:04:59.979]                   options(future.plan = NULL)
[16:04:59.979]                   if (is.na(NA_character_)) 
[16:04:59.979]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:59.979]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:59.979]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:04:59.979]                     envir = parent.frame()) 
[16:04:59.979]                   {
[16:04:59.979]                     default_workers <- missing(workers)
[16:04:59.979]                     if (is.function(workers)) 
[16:04:59.979]                       workers <- workers()
[16:04:59.979]                     workers <- structure(as.integer(workers), 
[16:04:59.979]                       class = class(workers))
[16:04:59.979]                     stop_if_not(is.finite(workers), workers >= 
[16:04:59.979]                       1L)
[16:04:59.979]                     if ((workers == 1L && !inherits(workers, 
[16:04:59.979]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:04:59.979]                       if (default_workers) 
[16:04:59.979]                         supportsMulticore(warn = TRUE)
[16:04:59.979]                       return(sequential(..., envir = envir))
[16:04:59.979]                     }
[16:04:59.979]                     oopts <- options(mc.cores = workers)
[16:04:59.979]                     on.exit(options(oopts))
[16:04:59.979]                     future <- MulticoreFuture(..., workers = workers, 
[16:04:59.979]                       envir = envir)
[16:04:59.979]                     if (!future$lazy) 
[16:04:59.979]                       future <- run(future)
[16:04:59.979]                     invisible(future)
[16:04:59.979]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:59.979]                 }
[16:04:59.979]             }
[16:04:59.979]         }
[16:04:59.979]     })
[16:04:59.979]     if (TRUE) {
[16:04:59.979]         base::sink(type = "output", split = FALSE)
[16:04:59.979]         if (TRUE) {
[16:04:59.979]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:59.979]         }
[16:04:59.979]         else {
[16:04:59.979]             ...future.result["stdout"] <- base::list(NULL)
[16:04:59.979]         }
[16:04:59.979]         base::close(...future.stdout)
[16:04:59.979]         ...future.stdout <- NULL
[16:04:59.979]     }
[16:04:59.979]     ...future.result$conditions <- ...future.conditions
[16:04:59.979]     ...future.result$finished <- base::Sys.time()
[16:04:59.979]     ...future.result
[16:04:59.979] }
[16:04:59.982] assign_globals() ...
[16:04:59.982] List of 1
[16:04:59.982]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:04:59.982]   .. ..@ .Data     :function (x)  
[16:04:59.982]   .. ..@ generic   : chr "my_fcn"
[16:04:59.982]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:04:59.982]   .. ..@ package   : chr ".GlobalEnv"
[16:04:59.982]   .. ..@ group     : list()
[16:04:59.982]   .. ..@ valueClass: chr(0) 
[16:04:59.982]   .. ..@ signature : chr "x"
[16:04:59.982]   .. ..@ default   : NULL
[16:04:59.982]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:04:59.982]  - attr(*, "where")=List of 1
[16:04:59.982]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:04:59.982]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:04:59.982]  - attr(*, "resolved")= logi FALSE
[16:04:59.982]  - attr(*, "total_size")= num 3936
[16:04:59.982]  - attr(*, "already-done")= logi TRUE
[16:04:59.986] - reassign environment for ‘my_fcn’
[16:04:59.987] - copied ‘my_fcn’ to environment
[16:04:59.987] assign_globals() ... done
[16:04:59.987] requestCore(): workers = 2
[16:04:59.990] MulticoreFuture started
[16:04:59.990] - Launch lazy future ... done
[16:04:59.990] run() for ‘MulticoreFuture’ ... done
[16:04:59.991] plan(): Setting new future strategy stack:
[16:04:59.991] List of future strategies:
[16:04:59.991] 1. sequential:
[16:04:59.991]    - args: function (..., envir = parent.frame())
[16:04:59.991]    - tweaked: FALSE
[16:04:59.991]    - call: NULL
[16:04:59.991] result() for MulticoreFuture ...
[16:04:59.992] plan(): nbrOfWorkers() = 1
[16:04:59.993] plan(): Setting new future strategy stack:
[16:04:59.994] List of future strategies:
[16:04:59.994] 1. multicore:
[16:04:59.994]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:04:59.994]    - tweaked: FALSE
[16:04:59.994]    - call: plan(strategy)
[16:04:59.999] plan(): nbrOfWorkers() = 2
[16:05:00.004] result() for MulticoreFuture ...
[16:05:00.007] result() for MulticoreFuture ... done
[16:05:00.007] result() for MulticoreFuture ... done
[16:05:00.007] result() for MulticoreFuture ...
[16:05:00.007] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x564dddbb4648>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:05:00.008] getGlobalsAndPackages() ...
[16:05:00.008] Searching for globals...
[16:05:00.011] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:05:00.012] Searching for globals ... DONE
[16:05:00.012] Resolving globals: FALSE
[16:05:00.012] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:05:00.013] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:05:00.013] - globals: [1] ‘my_fcn’
[16:05:00.013] 
[16:05:00.013] getGlobalsAndPackages() ... DONE
[16:05:00.013] run() for ‘Future’ ...
[16:05:00.014] - state: ‘created’
[16:05:00.014] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[16:05:00.018] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:00.018] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[16:05:00.018]   - Field: ‘label’
[16:05:00.018]   - Field: ‘local’
[16:05:00.018]   - Field: ‘owner’
[16:05:00.018]   - Field: ‘envir’
[16:05:00.018]   - Field: ‘workers’
[16:05:00.019]   - Field: ‘packages’
[16:05:00.019]   - Field: ‘gc’
[16:05:00.019]   - Field: ‘job’
[16:05:00.019]   - Field: ‘conditions’
[16:05:00.019]   - Field: ‘expr’
[16:05:00.019]   - Field: ‘uuid’
[16:05:00.019]   - Field: ‘seed’
[16:05:00.019]   - Field: ‘version’
[16:05:00.019]   - Field: ‘result’
[16:05:00.020]   - Field: ‘asynchronous’
[16:05:00.020]   - Field: ‘calls’
[16:05:00.020]   - Field: ‘globals’
[16:05:00.020]   - Field: ‘stdout’
[16:05:00.020]   - Field: ‘earlySignal’
[16:05:00.020]   - Field: ‘lazy’
[16:05:00.020]   - Field: ‘state’
[16:05:00.020] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[16:05:00.020] - Launch lazy future ...
[16:05:00.021] Packages needed by the future expression (n = 0): <none>
[16:05:00.021] Packages needed by future strategies (n = 0): <none>
[16:05:00.021] {
[16:05:00.021]     {
[16:05:00.021]         {
[16:05:00.021]             ...future.startTime <- base::Sys.time()
[16:05:00.021]             {
[16:05:00.021]                 {
[16:05:00.021]                   {
[16:05:00.021]                     {
[16:05:00.021]                       base::local({
[16:05:00.021]                         has_future <- base::requireNamespace("future", 
[16:05:00.021]                           quietly = TRUE)
[16:05:00.021]                         if (has_future) {
[16:05:00.021]                           ns <- base::getNamespace("future")
[16:05:00.021]                           version <- ns[[".package"]][["version"]]
[16:05:00.021]                           if (is.null(version)) 
[16:05:00.021]                             version <- utils::packageVersion("future")
[16:05:00.021]                         }
[16:05:00.021]                         else {
[16:05:00.021]                           version <- NULL
[16:05:00.021]                         }
[16:05:00.021]                         if (!has_future || version < "1.8.0") {
[16:05:00.021]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:00.021]                             "", base::R.version$version.string), 
[16:05:00.021]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:00.021]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:00.021]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:00.021]                               "release", "version")], collapse = " "), 
[16:05:00.021]                             hostname = base::Sys.info()[["nodename"]])
[16:05:00.021]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:00.021]                             info)
[16:05:00.021]                           info <- base::paste(info, collapse = "; ")
[16:05:00.021]                           if (!has_future) {
[16:05:00.021]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:00.021]                               info)
[16:05:00.021]                           }
[16:05:00.021]                           else {
[16:05:00.021]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:00.021]                               info, version)
[16:05:00.021]                           }
[16:05:00.021]                           base::stop(msg)
[16:05:00.021]                         }
[16:05:00.021]                       })
[16:05:00.021]                     }
[16:05:00.021]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:00.021]                     base::options(mc.cores = 1L)
[16:05:00.021]                   }
[16:05:00.021]                   options(future.plan = NULL)
[16:05:00.021]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.021]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:00.021]                 }
[16:05:00.021]                 ...future.workdir <- getwd()
[16:05:00.021]             }
[16:05:00.021]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:00.021]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:00.021]         }
[16:05:00.021]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:00.021]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:00.021]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:00.021]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:00.021]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:00.021]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:00.021]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:00.021]             base::names(...future.oldOptions))
[16:05:00.021]     }
[16:05:00.021]     if (FALSE) {
[16:05:00.021]     }
[16:05:00.021]     else {
[16:05:00.021]         if (TRUE) {
[16:05:00.021]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:00.021]                 open = "w")
[16:05:00.021]         }
[16:05:00.021]         else {
[16:05:00.021]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:00.021]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:00.021]         }
[16:05:00.021]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:00.021]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:00.021]             base::sink(type = "output", split = FALSE)
[16:05:00.021]             base::close(...future.stdout)
[16:05:00.021]         }, add = TRUE)
[16:05:00.021]     }
[16:05:00.021]     ...future.frame <- base::sys.nframe()
[16:05:00.021]     ...future.conditions <- base::list()
[16:05:00.021]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:00.021]     if (FALSE) {
[16:05:00.021]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:00.021]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:00.021]     }
[16:05:00.021]     ...future.result <- base::tryCatch({
[16:05:00.021]         base::withCallingHandlers({
[16:05:00.021]             ...future.value <- base::withVisible(base::local({
[16:05:00.021]                 withCallingHandlers({
[16:05:00.021]                   {
[16:05:00.021]                     my_fcn(3)
[16:05:00.021]                   }
[16:05:00.021]                 }, immediateCondition = function(cond) {
[16:05:00.021]                   save_rds <- function (object, pathname, ...) 
[16:05:00.021]                   {
[16:05:00.021]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[16:05:00.021]                     if (file_test("-f", pathname_tmp)) {
[16:05:00.021]                       fi_tmp <- file.info(pathname_tmp)
[16:05:00.021]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[16:05:00.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:00.021]                         fi_tmp[["mtime"]])
[16:05:00.021]                     }
[16:05:00.021]                     tryCatch({
[16:05:00.021]                       saveRDS(object, file = pathname_tmp, ...)
[16:05:00.021]                     }, error = function(ex) {
[16:05:00.021]                       msg <- conditionMessage(ex)
[16:05:00.021]                       fi_tmp <- file.info(pathname_tmp)
[16:05:00.021]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[16:05:00.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:00.021]                         fi_tmp[["mtime"]], msg)
[16:05:00.021]                       ex$message <- msg
[16:05:00.021]                       stop(ex)
[16:05:00.021]                     })
[16:05:00.021]                     stopifnot(file_test("-f", pathname_tmp))
[16:05:00.021]                     res <- file.rename(from = pathname_tmp, to = pathname)
[16:05:00.021]                     if (!res || file_test("-f", pathname_tmp)) {
[16:05:00.021]                       fi_tmp <- file.info(pathname_tmp)
[16:05:00.021]                       fi <- file.info(pathname)
[16:05:00.021]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[16:05:00.021]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[16:05:00.021]                         fi_tmp[["mtime"]], sQuote(pathname), 
[16:05:00.021]                         fi[["size"]], fi[["mtime"]])
[16:05:00.021]                       stop(msg)
[16:05:00.021]                     }
[16:05:00.021]                     invisible(pathname)
[16:05:00.021]                   }
[16:05:00.021]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[16:05:00.021]                     rootPath = tempdir()) 
[16:05:00.021]                   {
[16:05:00.021]                     obj <- list(time = Sys.time(), condition = cond)
[16:05:00.021]                     file <- tempfile(pattern = class(cond)[1], 
[16:05:00.021]                       tmpdir = path, fileext = ".rds")
[16:05:00.021]                     save_rds(obj, file)
[16:05:00.021]                   }
[16:05:00.021]                   saveImmediateCondition(cond, path = "/tmp/RtmpW8ZFcE/.future/immediateConditions")
[16:05:00.021]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.021]                   {
[16:05:00.021]                     inherits <- base::inherits
[16:05:00.021]                     invokeRestart <- base::invokeRestart
[16:05:00.021]                     is.null <- base::is.null
[16:05:00.021]                     muffled <- FALSE
[16:05:00.021]                     if (inherits(cond, "message")) {
[16:05:00.021]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:00.021]                       if (muffled) 
[16:05:00.021]                         invokeRestart("muffleMessage")
[16:05:00.021]                     }
[16:05:00.021]                     else if (inherits(cond, "warning")) {
[16:05:00.021]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:00.021]                       if (muffled) 
[16:05:00.021]                         invokeRestart("muffleWarning")
[16:05:00.021]                     }
[16:05:00.021]                     else if (inherits(cond, "condition")) {
[16:05:00.021]                       if (!is.null(pattern)) {
[16:05:00.021]                         computeRestarts <- base::computeRestarts
[16:05:00.021]                         grepl <- base::grepl
[16:05:00.021]                         restarts <- computeRestarts(cond)
[16:05:00.021]                         for (restart in restarts) {
[16:05:00.021]                           name <- restart$name
[16:05:00.021]                           if (is.null(name)) 
[16:05:00.021]                             next
[16:05:00.021]                           if (!grepl(pattern, name)) 
[16:05:00.021]                             next
[16:05:00.021]                           invokeRestart(restart)
[16:05:00.021]                           muffled <- TRUE
[16:05:00.021]                           break
[16:05:00.021]                         }
[16:05:00.021]                       }
[16:05:00.021]                     }
[16:05:00.021]                     invisible(muffled)
[16:05:00.021]                   }
[16:05:00.021]                   muffleCondition(cond)
[16:05:00.021]                 })
[16:05:00.021]             }))
[16:05:00.021]             future::FutureResult(value = ...future.value$value, 
[16:05:00.021]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.021]                   ...future.rng), globalenv = if (FALSE) 
[16:05:00.021]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:00.021]                     ...future.globalenv.names))
[16:05:00.021]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:00.021]         }, condition = base::local({
[16:05:00.021]             c <- base::c
[16:05:00.021]             inherits <- base::inherits
[16:05:00.021]             invokeRestart <- base::invokeRestart
[16:05:00.021]             length <- base::length
[16:05:00.021]             list <- base::list
[16:05:00.021]             seq.int <- base::seq.int
[16:05:00.021]             signalCondition <- base::signalCondition
[16:05:00.021]             sys.calls <- base::sys.calls
[16:05:00.021]             `[[` <- base::`[[`
[16:05:00.021]             `+` <- base::`+`
[16:05:00.021]             `<<-` <- base::`<<-`
[16:05:00.021]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:00.021]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:00.021]                   3L)]
[16:05:00.021]             }
[16:05:00.021]             function(cond) {
[16:05:00.021]                 is_error <- inherits(cond, "error")
[16:05:00.021]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:00.021]                   NULL)
[16:05:00.021]                 if (is_error) {
[16:05:00.021]                   sessionInformation <- function() {
[16:05:00.021]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:00.021]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:00.021]                       search = base::search(), system = base::Sys.info())
[16:05:00.021]                   }
[16:05:00.021]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.021]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:00.021]                     cond$call), session = sessionInformation(), 
[16:05:00.021]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:00.021]                   signalCondition(cond)
[16:05:00.021]                 }
[16:05:00.021]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:00.021]                 "immediateCondition"))) {
[16:05:00.021]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:00.021]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.021]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:00.021]                   if (TRUE && !signal) {
[16:05:00.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.021]                     {
[16:05:00.021]                       inherits <- base::inherits
[16:05:00.021]                       invokeRestart <- base::invokeRestart
[16:05:00.021]                       is.null <- base::is.null
[16:05:00.021]                       muffled <- FALSE
[16:05:00.021]                       if (inherits(cond, "message")) {
[16:05:00.021]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.021]                         if (muffled) 
[16:05:00.021]                           invokeRestart("muffleMessage")
[16:05:00.021]                       }
[16:05:00.021]                       else if (inherits(cond, "warning")) {
[16:05:00.021]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.021]                         if (muffled) 
[16:05:00.021]                           invokeRestart("muffleWarning")
[16:05:00.021]                       }
[16:05:00.021]                       else if (inherits(cond, "condition")) {
[16:05:00.021]                         if (!is.null(pattern)) {
[16:05:00.021]                           computeRestarts <- base::computeRestarts
[16:05:00.021]                           grepl <- base::grepl
[16:05:00.021]                           restarts <- computeRestarts(cond)
[16:05:00.021]                           for (restart in restarts) {
[16:05:00.021]                             name <- restart$name
[16:05:00.021]                             if (is.null(name)) 
[16:05:00.021]                               next
[16:05:00.021]                             if (!grepl(pattern, name)) 
[16:05:00.021]                               next
[16:05:00.021]                             invokeRestart(restart)
[16:05:00.021]                             muffled <- TRUE
[16:05:00.021]                             break
[16:05:00.021]                           }
[16:05:00.021]                         }
[16:05:00.021]                       }
[16:05:00.021]                       invisible(muffled)
[16:05:00.021]                     }
[16:05:00.021]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.021]                   }
[16:05:00.021]                 }
[16:05:00.021]                 else {
[16:05:00.021]                   if (TRUE) {
[16:05:00.021]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.021]                     {
[16:05:00.021]                       inherits <- base::inherits
[16:05:00.021]                       invokeRestart <- base::invokeRestart
[16:05:00.021]                       is.null <- base::is.null
[16:05:00.021]                       muffled <- FALSE
[16:05:00.021]                       if (inherits(cond, "message")) {
[16:05:00.021]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.021]                         if (muffled) 
[16:05:00.021]                           invokeRestart("muffleMessage")
[16:05:00.021]                       }
[16:05:00.021]                       else if (inherits(cond, "warning")) {
[16:05:00.021]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.021]                         if (muffled) 
[16:05:00.021]                           invokeRestart("muffleWarning")
[16:05:00.021]                       }
[16:05:00.021]                       else if (inherits(cond, "condition")) {
[16:05:00.021]                         if (!is.null(pattern)) {
[16:05:00.021]                           computeRestarts <- base::computeRestarts
[16:05:00.021]                           grepl <- base::grepl
[16:05:00.021]                           restarts <- computeRestarts(cond)
[16:05:00.021]                           for (restart in restarts) {
[16:05:00.021]                             name <- restart$name
[16:05:00.021]                             if (is.null(name)) 
[16:05:00.021]                               next
[16:05:00.021]                             if (!grepl(pattern, name)) 
[16:05:00.021]                               next
[16:05:00.021]                             invokeRestart(restart)
[16:05:00.021]                             muffled <- TRUE
[16:05:00.021]                             break
[16:05:00.021]                           }
[16:05:00.021]                         }
[16:05:00.021]                       }
[16:05:00.021]                       invisible(muffled)
[16:05:00.021]                     }
[16:05:00.021]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.021]                   }
[16:05:00.021]                 }
[16:05:00.021]             }
[16:05:00.021]         }))
[16:05:00.021]     }, error = function(ex) {
[16:05:00.021]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:00.021]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.021]                 ...future.rng), started = ...future.startTime, 
[16:05:00.021]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:00.021]             version = "1.8"), class = "FutureResult")
[16:05:00.021]     }, finally = {
[16:05:00.021]         if (!identical(...future.workdir, getwd())) 
[16:05:00.021]             setwd(...future.workdir)
[16:05:00.021]         {
[16:05:00.021]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:00.021]                 ...future.oldOptions$nwarnings <- NULL
[16:05:00.021]             }
[16:05:00.021]             base::options(...future.oldOptions)
[16:05:00.021]             if (.Platform$OS.type == "windows") {
[16:05:00.021]                 old_names <- names(...future.oldEnvVars)
[16:05:00.021]                 envs <- base::Sys.getenv()
[16:05:00.021]                 names <- names(envs)
[16:05:00.021]                 common <- intersect(names, old_names)
[16:05:00.021]                 added <- setdiff(names, old_names)
[16:05:00.021]                 removed <- setdiff(old_names, names)
[16:05:00.021]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:00.021]                   envs[common]]
[16:05:00.021]                 NAMES <- toupper(changed)
[16:05:00.021]                 args <- list()
[16:05:00.021]                 for (kk in seq_along(NAMES)) {
[16:05:00.021]                   name <- changed[[kk]]
[16:05:00.021]                   NAME <- NAMES[[kk]]
[16:05:00.021]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.021]                     next
[16:05:00.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.021]                 }
[16:05:00.021]                 NAMES <- toupper(added)
[16:05:00.021]                 for (kk in seq_along(NAMES)) {
[16:05:00.021]                   name <- added[[kk]]
[16:05:00.021]                   NAME <- NAMES[[kk]]
[16:05:00.021]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.021]                     next
[16:05:00.021]                   args[[name]] <- ""
[16:05:00.021]                 }
[16:05:00.021]                 NAMES <- toupper(removed)
[16:05:00.021]                 for (kk in seq_along(NAMES)) {
[16:05:00.021]                   name <- removed[[kk]]
[16:05:00.021]                   NAME <- NAMES[[kk]]
[16:05:00.021]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.021]                     next
[16:05:00.021]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.021]                 }
[16:05:00.021]                 if (length(args) > 0) 
[16:05:00.021]                   base::do.call(base::Sys.setenv, args = args)
[16:05:00.021]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:00.021]             }
[16:05:00.021]             else {
[16:05:00.021]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:00.021]             }
[16:05:00.021]             {
[16:05:00.021]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:00.021]                   0L) {
[16:05:00.021]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:00.021]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:00.021]                   base::options(opts)
[16:05:00.021]                 }
[16:05:00.021]                 {
[16:05:00.021]                   {
[16:05:00.021]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:00.021]                     NULL
[16:05:00.021]                   }
[16:05:00.021]                   options(future.plan = NULL)
[16:05:00.021]                   if (is.na(NA_character_)) 
[16:05:00.021]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.021]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:00.021]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[16:05:00.021]                     envir = parent.frame()) 
[16:05:00.021]                   {
[16:05:00.021]                     default_workers <- missing(workers)
[16:05:00.021]                     if (is.function(workers)) 
[16:05:00.021]                       workers <- workers()
[16:05:00.021]                     workers <- structure(as.integer(workers), 
[16:05:00.021]                       class = class(workers))
[16:05:00.021]                     stop_if_not(is.finite(workers), workers >= 
[16:05:00.021]                       1L)
[16:05:00.021]                     if ((workers == 1L && !inherits(workers, 
[16:05:00.021]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[16:05:00.021]                       if (default_workers) 
[16:05:00.021]                         supportsMulticore(warn = TRUE)
[16:05:00.021]                       return(sequential(..., envir = envir))
[16:05:00.021]                     }
[16:05:00.021]                     oopts <- options(mc.cores = workers)
[16:05:00.021]                     on.exit(options(oopts))
[16:05:00.021]                     future <- MulticoreFuture(..., workers = workers, 
[16:05:00.021]                       envir = envir)
[16:05:00.021]                     if (!future$lazy) 
[16:05:00.021]                       future <- run(future)
[16:05:00.021]                     invisible(future)
[16:05:00.021]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:00.021]                 }
[16:05:00.021]             }
[16:05:00.021]         }
[16:05:00.021]     })
[16:05:00.021]     if (TRUE) {
[16:05:00.021]         base::sink(type = "output", split = FALSE)
[16:05:00.021]         if (TRUE) {
[16:05:00.021]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:00.021]         }
[16:05:00.021]         else {
[16:05:00.021]             ...future.result["stdout"] <- base::list(NULL)
[16:05:00.021]         }
[16:05:00.021]         base::close(...future.stdout)
[16:05:00.021]         ...future.stdout <- NULL
[16:05:00.021]     }
[16:05:00.021]     ...future.result$conditions <- ...future.conditions
[16:05:00.021]     ...future.result$finished <- base::Sys.time()
[16:05:00.021]     ...future.result
[16:05:00.021] }
[16:05:00.024] assign_globals() ...
[16:05:00.024] List of 1
[16:05:00.024]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[16:05:00.024]   .. ..@ .Data     :function (x)  
[16:05:00.024]   .. ..@ generic   : chr "my_fcn"
[16:05:00.024]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[16:05:00.024]   .. ..@ package   : chr ".GlobalEnv"
[16:05:00.024]   .. ..@ group     : list()
[16:05:00.024]   .. ..@ valueClass: chr(0) 
[16:05:00.024]   .. ..@ signature : chr "x"
[16:05:00.024]   .. ..@ default   : NULL
[16:05:00.024]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[16:05:00.024]  - attr(*, "where")=List of 1
[16:05:00.024]   ..$ my_fcn:<environment: R_EmptyEnv> 
[16:05:00.024]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[16:05:00.024]  - attr(*, "resolved")= logi FALSE
[16:05:00.024]  - attr(*, "total_size")= num 3936
[16:05:00.024]  - attr(*, "already-done")= logi TRUE
[16:05:00.030] - reassign environment for ‘my_fcn’
[16:05:00.030] - copied ‘my_fcn’ to environment
[16:05:00.030] assign_globals() ... done
[16:05:00.030] requestCore(): workers = 2
[16:05:00.032] MulticoreFuture started
[16:05:00.032] - Launch lazy future ... done
[16:05:00.032] run() for ‘MulticoreFuture’ ... done
[16:05:00.033] result() for MulticoreFuture ...
[16:05:00.033] plan(): Setting new future strategy stack:
[16:05:00.033] List of future strategies:
[16:05:00.033] 1. sequential:
[16:05:00.033]    - args: function (..., envir = parent.frame())
[16:05:00.033]    - tweaked: FALSE
[16:05:00.033]    - call: NULL
[16:05:00.034] plan(): nbrOfWorkers() = 1
[16:05:00.037] plan(): Setting new future strategy stack:
[16:05:00.037] List of future strategies:
[16:05:00.037] 1. multicore:
[16:05:00.037]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[16:05:00.037]    - tweaked: FALSE
[16:05:00.037]    - call: plan(strategy)
[16:05:00.043] plan(): nbrOfWorkers() = 2
[16:05:00.059] result() for MulticoreFuture ...
[16:05:00.062] result() for MulticoreFuture ... done
[16:05:00.062] signalConditions() ...
[16:05:00.062]  - include = ‘immediateCondition’
[16:05:00.062]  - exclude = 
[16:05:00.062]  - resignal = FALSE
[16:05:00.062]  - Number of conditions: 1
[16:05:00.063] signalConditions() ... done
[16:05:00.063] result() for MulticoreFuture ... done
[16:05:00.063] result() for MulticoreFuture ...
[16:05:00.063] result() for MulticoreFuture ... done
[16:05:00.063] signalConditions() ...
[16:05:00.063]  - include = ‘immediateCondition’
[16:05:00.063]  - exclude = 
[16:05:00.064]  - resignal = FALSE
[16:05:00.064]  - Number of conditions: 1
[16:05:00.064] signalConditions() ... done
[16:05:00.064] Future state: ‘finished’
[16:05:00.064] result() for MulticoreFuture ...
[16:05:00.064] result() for MulticoreFuture ... done
[16:05:00.064] signalConditions() ...
[16:05:00.065]  - include = ‘condition’
[16:05:00.065]  - exclude = ‘immediateCondition’
[16:05:00.065]  - resignal = TRUE
[16:05:00.065]  - Number of conditions: 1
[16:05:00.065]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[16:05:00.065] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[16:05:00.066] plan(): Setting new future strategy stack:
[16:05:00.066] List of future strategies:
[16:05:00.066] 1. multisession:
[16:05:00.066]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:05:00.066]    - tweaked: FALSE
[16:05:00.066]    - call: plan(strategy)
[16:05:00.067] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:05:00.067] multisession:
[16:05:00.067] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[16:05:00.067] - tweaked: FALSE
[16:05:00.067] - call: plan(strategy)
[16:05:00.073] getGlobalsAndPackages() ...
[16:05:00.074] Not searching for globals
[16:05:00.074] - globals: [0] <none>
[16:05:00.074] getGlobalsAndPackages() ... DONE
[16:05:00.075] [local output] makeClusterPSOCK() ...
[16:05:00.117] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:05:00.119] [local output] Base port: 11610
[16:05:00.119] [local output] Getting setup options for 2 cluster nodes ...
[16:05:00.119] [local output]  - Node 1 of 2 ...
[16:05:00.119] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:00.120] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpW8ZFcE/worker.rank=1.parallelly.parent=85410.14da224620ad8.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpW8ZFcE/worker.rank=1.parallelly.parent=85410.14da224620ad8.pid")'’
[16:05:00.309] - Possible to infer worker's PID: TRUE
[16:05:00.309] [local output] Rscript port: 11610

[16:05:00.309] [local output]  - Node 2 of 2 ...
[16:05:00.310] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:00.310] [local output] Rscript port: 11610

[16:05:00.311] [local output] Getting setup options for 2 cluster nodes ... done
[16:05:00.311] [local output]  - Parallel setup requested for some PSOCK nodes
[16:05:00.311] [local output] Setting up PSOCK nodes in parallel
[16:05:00.311] List of 36
[16:05:00.311]  $ worker          : chr "localhost"
[16:05:00.311]   ..- attr(*, "localhost")= logi TRUE
[16:05:00.311]  $ master          : chr "localhost"
[16:05:00.311]  $ port            : int 11610
[16:05:00.311]  $ connectTimeout  : num 120
[16:05:00.311]  $ timeout         : num 2592000
[16:05:00.311]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:05:00.311]  $ homogeneous     : logi TRUE
[16:05:00.311]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:05:00.311]  $ rscript_envs    : NULL
[16:05:00.311]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:00.311]  $ rscript_startup : NULL
[16:05:00.311]  $ rscript_sh      : chr "sh"
[16:05:00.311]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:00.311]  $ methods         : logi TRUE
[16:05:00.311]  $ socketOptions   : chr "no-delay"
[16:05:00.311]  $ useXDR          : logi FALSE
[16:05:00.311]  $ outfile         : chr "/dev/null"
[16:05:00.311]  $ renice          : int NA
[16:05:00.311]  $ rshcmd          : NULL
[16:05:00.311]  $ user            : chr(0) 
[16:05:00.311]  $ revtunnel       : logi FALSE
[16:05:00.311]  $ rshlogfile      : NULL
[16:05:00.311]  $ rshopts         : chr(0) 
[16:05:00.311]  $ rank            : int 1
[16:05:00.311]  $ manual          : logi FALSE
[16:05:00.311]  $ dryrun          : logi FALSE
[16:05:00.311]  $ quiet           : logi FALSE
[16:05:00.311]  $ setup_strategy  : chr "parallel"
[16:05:00.311]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:00.311]  $ pidfile         : chr "/tmp/RtmpW8ZFcE/worker.rank=1.parallelly.parent=85410.14da224620ad8.pid"
[16:05:00.311]  $ rshcmd_label    : NULL
[16:05:00.311]  $ rsh_call        : NULL
[16:05:00.311]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:00.311]  $ localMachine    : logi TRUE
[16:05:00.311]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:05:00.311]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:05:00.311]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:05:00.311]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:05:00.311]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:05:00.311]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:05:00.311]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:05:00.311]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:05:00.311]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:05:00.311]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:05:00.311]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:05:00.311]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:05:00.311]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:05:00.311]  $ arguments       :List of 28
[16:05:00.311]   ..$ worker          : chr "localhost"
[16:05:00.311]   ..$ master          : NULL
[16:05:00.311]   ..$ port            : int 11610
[16:05:00.311]   ..$ connectTimeout  : num 120
[16:05:00.311]   ..$ timeout         : num 2592000
[16:05:00.311]   ..$ rscript         : NULL
[16:05:00.311]   ..$ homogeneous     : NULL
[16:05:00.311]   ..$ rscript_args    : NULL
[16:05:00.311]   ..$ rscript_envs    : NULL
[16:05:00.311]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:00.311]   ..$ rscript_startup : NULL
[16:05:00.311]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:05:00.311]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:00.311]   ..$ methods         : logi TRUE
[16:05:00.311]   ..$ socketOptions   : chr "no-delay"
[16:05:00.311]   ..$ useXDR          : logi FALSE
[16:05:00.311]   ..$ outfile         : chr "/dev/null"
[16:05:00.311]   ..$ renice          : int NA
[16:05:00.311]   ..$ rshcmd          : NULL
[16:05:00.311]   ..$ user            : NULL
[16:05:00.311]   ..$ revtunnel       : logi NA
[16:05:00.311]   ..$ rshlogfile      : NULL
[16:05:00.311]   ..$ rshopts         : NULL
[16:05:00.311]   ..$ rank            : int 1
[16:05:00.311]   ..$ manual          : logi FALSE
[16:05:00.311]   ..$ dryrun          : logi FALSE
[16:05:00.311]   ..$ quiet           : logi FALSE
[16:05:00.311]   ..$ setup_strategy  : chr "parallel"
[16:05:00.311]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:05:00.329] [local output] System call to launch all workers:
[16:05:00.329] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpW8ZFcE/worker.rank=1.parallelly.parent=85410.14da224620ad8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11610 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:05:00.329] [local output] Starting PSOCK main server
[16:05:00.334] [local output] Workers launched
[16:05:00.334] [local output] Waiting for workers to connect back
[16:05:00.335]  - [local output] 0 workers out of 2 ready
[16:05:00.573]  - [local output] 0 workers out of 2 ready
[16:05:00.574]  - [local output] 1 workers out of 2 ready
[16:05:00.576]  - [local output] 1 workers out of 2 ready
[16:05:00.576]  - [local output] 2 workers out of 2 ready
[16:05:00.576] [local output] Launching of workers completed
[16:05:00.576] [local output] Collecting session information from workers
[16:05:00.577] [local output]  - Worker #1 of 2
[16:05:00.578] [local output]  - Worker #2 of 2
[16:05:00.578] [local output] makeClusterPSOCK() ... done
[16:05:00.589] Packages needed by the future expression (n = 0): <none>
[16:05:00.590] Packages needed by future strategies (n = 0): <none>
[16:05:00.590] {
[16:05:00.590]     {
[16:05:00.590]         {
[16:05:00.590]             ...future.startTime <- base::Sys.time()
[16:05:00.590]             {
[16:05:00.590]                 {
[16:05:00.590]                   {
[16:05:00.590]                     {
[16:05:00.590]                       base::local({
[16:05:00.590]                         has_future <- base::requireNamespace("future", 
[16:05:00.590]                           quietly = TRUE)
[16:05:00.590]                         if (has_future) {
[16:05:00.590]                           ns <- base::getNamespace("future")
[16:05:00.590]                           version <- ns[[".package"]][["version"]]
[16:05:00.590]                           if (is.null(version)) 
[16:05:00.590]                             version <- utils::packageVersion("future")
[16:05:00.590]                         }
[16:05:00.590]                         else {
[16:05:00.590]                           version <- NULL
[16:05:00.590]                         }
[16:05:00.590]                         if (!has_future || version < "1.8.0") {
[16:05:00.590]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:00.590]                             "", base::R.version$version.string), 
[16:05:00.590]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:00.590]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:00.590]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:00.590]                               "release", "version")], collapse = " "), 
[16:05:00.590]                             hostname = base::Sys.info()[["nodename"]])
[16:05:00.590]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:00.590]                             info)
[16:05:00.590]                           info <- base::paste(info, collapse = "; ")
[16:05:00.590]                           if (!has_future) {
[16:05:00.590]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:00.590]                               info)
[16:05:00.590]                           }
[16:05:00.590]                           else {
[16:05:00.590]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:00.590]                               info, version)
[16:05:00.590]                           }
[16:05:00.590]                           base::stop(msg)
[16:05:00.590]                         }
[16:05:00.590]                       })
[16:05:00.590]                     }
[16:05:00.590]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:00.590]                     base::options(mc.cores = 1L)
[16:05:00.590]                   }
[16:05:00.590]                   options(future.plan = NULL)
[16:05:00.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:00.590]                 }
[16:05:00.590]                 ...future.workdir <- getwd()
[16:05:00.590]             }
[16:05:00.590]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:00.590]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:00.590]         }
[16:05:00.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:00.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:00.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:00.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:00.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:00.590]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:00.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:00.590]             base::names(...future.oldOptions))
[16:05:00.590]     }
[16:05:00.590]     if (FALSE) {
[16:05:00.590]     }
[16:05:00.590]     else {
[16:05:00.590]         if (TRUE) {
[16:05:00.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:00.590]                 open = "w")
[16:05:00.590]         }
[16:05:00.590]         else {
[16:05:00.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:00.590]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:00.590]         }
[16:05:00.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:00.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:00.590]             base::sink(type = "output", split = FALSE)
[16:05:00.590]             base::close(...future.stdout)
[16:05:00.590]         }, add = TRUE)
[16:05:00.590]     }
[16:05:00.590]     ...future.frame <- base::sys.nframe()
[16:05:00.590]     ...future.conditions <- base::list()
[16:05:00.590]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:00.590]     if (FALSE) {
[16:05:00.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:00.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:00.590]     }
[16:05:00.590]     ...future.result <- base::tryCatch({
[16:05:00.590]         base::withCallingHandlers({
[16:05:00.590]             ...future.value <- base::withVisible(base::local({
[16:05:00.590]                 ...future.makeSendCondition <- base::local({
[16:05:00.590]                   sendCondition <- NULL
[16:05:00.590]                   function(frame = 1L) {
[16:05:00.590]                     if (is.function(sendCondition)) 
[16:05:00.590]                       return(sendCondition)
[16:05:00.590]                     ns <- getNamespace("parallel")
[16:05:00.590]                     if (exists("sendData", mode = "function", 
[16:05:00.590]                       envir = ns)) {
[16:05:00.590]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:00.590]                         envir = ns)
[16:05:00.590]                       envir <- sys.frame(frame)
[16:05:00.590]                       master <- NULL
[16:05:00.590]                       while (!identical(envir, .GlobalEnv) && 
[16:05:00.590]                         !identical(envir, emptyenv())) {
[16:05:00.590]                         if (exists("master", mode = "list", envir = envir, 
[16:05:00.590]                           inherits = FALSE)) {
[16:05:00.590]                           master <- get("master", mode = "list", 
[16:05:00.590]                             envir = envir, inherits = FALSE)
[16:05:00.590]                           if (inherits(master, c("SOCKnode", 
[16:05:00.590]                             "SOCK0node"))) {
[16:05:00.590]                             sendCondition <<- function(cond) {
[16:05:00.590]                               data <- list(type = "VALUE", value = cond, 
[16:05:00.590]                                 success = TRUE)
[16:05:00.590]                               parallel_sendData(master, data)
[16:05:00.590]                             }
[16:05:00.590]                             return(sendCondition)
[16:05:00.590]                           }
[16:05:00.590]                         }
[16:05:00.590]                         frame <- frame + 1L
[16:05:00.590]                         envir <- sys.frame(frame)
[16:05:00.590]                       }
[16:05:00.590]                     }
[16:05:00.590]                     sendCondition <<- function(cond) NULL
[16:05:00.590]                   }
[16:05:00.590]                 })
[16:05:00.590]                 withCallingHandlers({
[16:05:00.590]                   NA
[16:05:00.590]                 }, immediateCondition = function(cond) {
[16:05:00.590]                   sendCondition <- ...future.makeSendCondition()
[16:05:00.590]                   sendCondition(cond)
[16:05:00.590]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.590]                   {
[16:05:00.590]                     inherits <- base::inherits
[16:05:00.590]                     invokeRestart <- base::invokeRestart
[16:05:00.590]                     is.null <- base::is.null
[16:05:00.590]                     muffled <- FALSE
[16:05:00.590]                     if (inherits(cond, "message")) {
[16:05:00.590]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:00.590]                       if (muffled) 
[16:05:00.590]                         invokeRestart("muffleMessage")
[16:05:00.590]                     }
[16:05:00.590]                     else if (inherits(cond, "warning")) {
[16:05:00.590]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:00.590]                       if (muffled) 
[16:05:00.590]                         invokeRestart("muffleWarning")
[16:05:00.590]                     }
[16:05:00.590]                     else if (inherits(cond, "condition")) {
[16:05:00.590]                       if (!is.null(pattern)) {
[16:05:00.590]                         computeRestarts <- base::computeRestarts
[16:05:00.590]                         grepl <- base::grepl
[16:05:00.590]                         restarts <- computeRestarts(cond)
[16:05:00.590]                         for (restart in restarts) {
[16:05:00.590]                           name <- restart$name
[16:05:00.590]                           if (is.null(name)) 
[16:05:00.590]                             next
[16:05:00.590]                           if (!grepl(pattern, name)) 
[16:05:00.590]                             next
[16:05:00.590]                           invokeRestart(restart)
[16:05:00.590]                           muffled <- TRUE
[16:05:00.590]                           break
[16:05:00.590]                         }
[16:05:00.590]                       }
[16:05:00.590]                     }
[16:05:00.590]                     invisible(muffled)
[16:05:00.590]                   }
[16:05:00.590]                   muffleCondition(cond)
[16:05:00.590]                 })
[16:05:00.590]             }))
[16:05:00.590]             future::FutureResult(value = ...future.value$value, 
[16:05:00.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.590]                   ...future.rng), globalenv = if (FALSE) 
[16:05:00.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:00.590]                     ...future.globalenv.names))
[16:05:00.590]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:00.590]         }, condition = base::local({
[16:05:00.590]             c <- base::c
[16:05:00.590]             inherits <- base::inherits
[16:05:00.590]             invokeRestart <- base::invokeRestart
[16:05:00.590]             length <- base::length
[16:05:00.590]             list <- base::list
[16:05:00.590]             seq.int <- base::seq.int
[16:05:00.590]             signalCondition <- base::signalCondition
[16:05:00.590]             sys.calls <- base::sys.calls
[16:05:00.590]             `[[` <- base::`[[`
[16:05:00.590]             `+` <- base::`+`
[16:05:00.590]             `<<-` <- base::`<<-`
[16:05:00.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:00.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:00.590]                   3L)]
[16:05:00.590]             }
[16:05:00.590]             function(cond) {
[16:05:00.590]                 is_error <- inherits(cond, "error")
[16:05:00.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:00.590]                   NULL)
[16:05:00.590]                 if (is_error) {
[16:05:00.590]                   sessionInformation <- function() {
[16:05:00.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:00.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:00.590]                       search = base::search(), system = base::Sys.info())
[16:05:00.590]                   }
[16:05:00.590]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:00.590]                     cond$call), session = sessionInformation(), 
[16:05:00.590]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:00.590]                   signalCondition(cond)
[16:05:00.590]                 }
[16:05:00.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:00.590]                 "immediateCondition"))) {
[16:05:00.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:00.590]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:00.590]                   if (TRUE && !signal) {
[16:05:00.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.590]                     {
[16:05:00.590]                       inherits <- base::inherits
[16:05:00.590]                       invokeRestart <- base::invokeRestart
[16:05:00.590]                       is.null <- base::is.null
[16:05:00.590]                       muffled <- FALSE
[16:05:00.590]                       if (inherits(cond, "message")) {
[16:05:00.590]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.590]                         if (muffled) 
[16:05:00.590]                           invokeRestart("muffleMessage")
[16:05:00.590]                       }
[16:05:00.590]                       else if (inherits(cond, "warning")) {
[16:05:00.590]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.590]                         if (muffled) 
[16:05:00.590]                           invokeRestart("muffleWarning")
[16:05:00.590]                       }
[16:05:00.590]                       else if (inherits(cond, "condition")) {
[16:05:00.590]                         if (!is.null(pattern)) {
[16:05:00.590]                           computeRestarts <- base::computeRestarts
[16:05:00.590]                           grepl <- base::grepl
[16:05:00.590]                           restarts <- computeRestarts(cond)
[16:05:00.590]                           for (restart in restarts) {
[16:05:00.590]                             name <- restart$name
[16:05:00.590]                             if (is.null(name)) 
[16:05:00.590]                               next
[16:05:00.590]                             if (!grepl(pattern, name)) 
[16:05:00.590]                               next
[16:05:00.590]                             invokeRestart(restart)
[16:05:00.590]                             muffled <- TRUE
[16:05:00.590]                             break
[16:05:00.590]                           }
[16:05:00.590]                         }
[16:05:00.590]                       }
[16:05:00.590]                       invisible(muffled)
[16:05:00.590]                     }
[16:05:00.590]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.590]                   }
[16:05:00.590]                 }
[16:05:00.590]                 else {
[16:05:00.590]                   if (TRUE) {
[16:05:00.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.590]                     {
[16:05:00.590]                       inherits <- base::inherits
[16:05:00.590]                       invokeRestart <- base::invokeRestart
[16:05:00.590]                       is.null <- base::is.null
[16:05:00.590]                       muffled <- FALSE
[16:05:00.590]                       if (inherits(cond, "message")) {
[16:05:00.590]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.590]                         if (muffled) 
[16:05:00.590]                           invokeRestart("muffleMessage")
[16:05:00.590]                       }
[16:05:00.590]                       else if (inherits(cond, "warning")) {
[16:05:00.590]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.590]                         if (muffled) 
[16:05:00.590]                           invokeRestart("muffleWarning")
[16:05:00.590]                       }
[16:05:00.590]                       else if (inherits(cond, "condition")) {
[16:05:00.590]                         if (!is.null(pattern)) {
[16:05:00.590]                           computeRestarts <- base::computeRestarts
[16:05:00.590]                           grepl <- base::grepl
[16:05:00.590]                           restarts <- computeRestarts(cond)
[16:05:00.590]                           for (restart in restarts) {
[16:05:00.590]                             name <- restart$name
[16:05:00.590]                             if (is.null(name)) 
[16:05:00.590]                               next
[16:05:00.590]                             if (!grepl(pattern, name)) 
[16:05:00.590]                               next
[16:05:00.590]                             invokeRestart(restart)
[16:05:00.590]                             muffled <- TRUE
[16:05:00.590]                             break
[16:05:00.590]                           }
[16:05:00.590]                         }
[16:05:00.590]                       }
[16:05:00.590]                       invisible(muffled)
[16:05:00.590]                     }
[16:05:00.590]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.590]                   }
[16:05:00.590]                 }
[16:05:00.590]             }
[16:05:00.590]         }))
[16:05:00.590]     }, error = function(ex) {
[16:05:00.590]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:00.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.590]                 ...future.rng), started = ...future.startTime, 
[16:05:00.590]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:00.590]             version = "1.8"), class = "FutureResult")
[16:05:00.590]     }, finally = {
[16:05:00.590]         if (!identical(...future.workdir, getwd())) 
[16:05:00.590]             setwd(...future.workdir)
[16:05:00.590]         {
[16:05:00.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:00.590]                 ...future.oldOptions$nwarnings <- NULL
[16:05:00.590]             }
[16:05:00.590]             base::options(...future.oldOptions)
[16:05:00.590]             if (.Platform$OS.type == "windows") {
[16:05:00.590]                 old_names <- names(...future.oldEnvVars)
[16:05:00.590]                 envs <- base::Sys.getenv()
[16:05:00.590]                 names <- names(envs)
[16:05:00.590]                 common <- intersect(names, old_names)
[16:05:00.590]                 added <- setdiff(names, old_names)
[16:05:00.590]                 removed <- setdiff(old_names, names)
[16:05:00.590]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:00.590]                   envs[common]]
[16:05:00.590]                 NAMES <- toupper(changed)
[16:05:00.590]                 args <- list()
[16:05:00.590]                 for (kk in seq_along(NAMES)) {
[16:05:00.590]                   name <- changed[[kk]]
[16:05:00.590]                   NAME <- NAMES[[kk]]
[16:05:00.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.590]                     next
[16:05:00.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.590]                 }
[16:05:00.590]                 NAMES <- toupper(added)
[16:05:00.590]                 for (kk in seq_along(NAMES)) {
[16:05:00.590]                   name <- added[[kk]]
[16:05:00.590]                   NAME <- NAMES[[kk]]
[16:05:00.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.590]                     next
[16:05:00.590]                   args[[name]] <- ""
[16:05:00.590]                 }
[16:05:00.590]                 NAMES <- toupper(removed)
[16:05:00.590]                 for (kk in seq_along(NAMES)) {
[16:05:00.590]                   name <- removed[[kk]]
[16:05:00.590]                   NAME <- NAMES[[kk]]
[16:05:00.590]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.590]                     next
[16:05:00.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.590]                 }
[16:05:00.590]                 if (length(args) > 0) 
[16:05:00.590]                   base::do.call(base::Sys.setenv, args = args)
[16:05:00.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:00.590]             }
[16:05:00.590]             else {
[16:05:00.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:00.590]             }
[16:05:00.590]             {
[16:05:00.590]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:00.590]                   0L) {
[16:05:00.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:00.590]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:00.590]                   base::options(opts)
[16:05:00.590]                 }
[16:05:00.590]                 {
[16:05:00.590]                   {
[16:05:00.590]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:00.590]                     NULL
[16:05:00.590]                   }
[16:05:00.590]                   options(future.plan = NULL)
[16:05:00.590]                   if (is.na(NA_character_)) 
[16:05:00.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:00.590]                   future::plan(list(function (..., workers = availableCores(), 
[16:05:00.590]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:05:00.590]                     envir = parent.frame()) 
[16:05:00.590]                   {
[16:05:00.590]                     if (is.function(workers)) 
[16:05:00.590]                       workers <- workers()
[16:05:00.590]                     workers <- structure(as.integer(workers), 
[16:05:00.590]                       class = class(workers))
[16:05:00.590]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:05:00.590]                       workers >= 1)
[16:05:00.590]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:05:00.590]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:05:00.590]                     }
[16:05:00.590]                     future <- MultisessionFuture(..., workers = workers, 
[16:05:00.590]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:05:00.590]                       envir = envir)
[16:05:00.590]                     if (!future$lazy) 
[16:05:00.590]                       future <- run(future)
[16:05:00.590]                     invisible(future)
[16:05:00.590]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:00.590]                 }
[16:05:00.590]             }
[16:05:00.590]         }
[16:05:00.590]     })
[16:05:00.590]     if (TRUE) {
[16:05:00.590]         base::sink(type = "output", split = FALSE)
[16:05:00.590]         if (TRUE) {
[16:05:00.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:00.590]         }
[16:05:00.590]         else {
[16:05:00.590]             ...future.result["stdout"] <- base::list(NULL)
[16:05:00.590]         }
[16:05:00.590]         base::close(...future.stdout)
[16:05:00.590]         ...future.stdout <- NULL
[16:05:00.590]     }
[16:05:00.590]     ...future.result$conditions <- ...future.conditions
[16:05:00.590]     ...future.result$finished <- base::Sys.time()
[16:05:00.590]     ...future.result
[16:05:00.590] }
[16:05:00.644] MultisessionFuture started
[16:05:00.645] result() for ClusterFuture ...
[16:05:00.645] receiveMessageFromWorker() for ClusterFuture ...
[16:05:00.645] - Validating connection of MultisessionFuture
[16:05:00.688] - received message: FutureResult
[16:05:00.689] - Received FutureResult
[16:05:00.689] - Erased future from FutureRegistry
[16:05:00.689] result() for ClusterFuture ...
[16:05:00.689] - result already collected: FutureResult
[16:05:00.689] result() for ClusterFuture ... done
[16:05:00.689] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:00.689] result() for ClusterFuture ... done
[16:05:00.690] result() for ClusterFuture ...
[16:05:00.690] - result already collected: FutureResult
[16:05:00.690] result() for ClusterFuture ... done
[16:05:00.690] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:05:00.694] plan(): nbrOfWorkers() = 2
[16:05:00.694] getGlobalsAndPackages() ...
[16:05:00.694] Searching for globals...
[16:05:00.697] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:05:00.697] Searching for globals ... DONE
[16:05:00.697] Resolving globals: FALSE
[16:05:00.698] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:05:00.698] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:05:00.698] - globals: [1] ‘my_fcn’
[16:05:00.698] 
[16:05:00.698] getGlobalsAndPackages() ... DONE
[16:05:00.699] run() for ‘Future’ ...
[16:05:00.699] - state: ‘created’
[16:05:00.699] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:00.713] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:00.714] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:00.714]   - Field: ‘node’
[16:05:00.714]   - Field: ‘label’
[16:05:00.714]   - Field: ‘local’
[16:05:00.714]   - Field: ‘owner’
[16:05:00.714]   - Field: ‘envir’
[16:05:00.714]   - Field: ‘workers’
[16:05:00.714]   - Field: ‘packages’
[16:05:00.714]   - Field: ‘gc’
[16:05:00.714]   - Field: ‘conditions’
[16:05:00.715]   - Field: ‘persistent’
[16:05:00.715]   - Field: ‘expr’
[16:05:00.715]   - Field: ‘uuid’
[16:05:00.715]   - Field: ‘seed’
[16:05:00.715]   - Field: ‘version’
[16:05:00.715]   - Field: ‘result’
[16:05:00.715]   - Field: ‘asynchronous’
[16:05:00.715]   - Field: ‘calls’
[16:05:00.716]   - Field: ‘globals’
[16:05:00.716]   - Field: ‘stdout’
[16:05:00.716]   - Field: ‘earlySignal’
[16:05:00.716]   - Field: ‘lazy’
[16:05:00.716]   - Field: ‘state’
[16:05:00.716] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:00.716] - Launch lazy future ...
[16:05:00.717] Packages needed by the future expression (n = 0): <none>
[16:05:00.717] Packages needed by future strategies (n = 0): <none>
[16:05:00.717] {
[16:05:00.717]     {
[16:05:00.717]         {
[16:05:00.717]             ...future.startTime <- base::Sys.time()
[16:05:00.717]             {
[16:05:00.717]                 {
[16:05:00.717]                   {
[16:05:00.717]                     {
[16:05:00.717]                       base::local({
[16:05:00.717]                         has_future <- base::requireNamespace("future", 
[16:05:00.717]                           quietly = TRUE)
[16:05:00.717]                         if (has_future) {
[16:05:00.717]                           ns <- base::getNamespace("future")
[16:05:00.717]                           version <- ns[[".package"]][["version"]]
[16:05:00.717]                           if (is.null(version)) 
[16:05:00.717]                             version <- utils::packageVersion("future")
[16:05:00.717]                         }
[16:05:00.717]                         else {
[16:05:00.717]                           version <- NULL
[16:05:00.717]                         }
[16:05:00.717]                         if (!has_future || version < "1.8.0") {
[16:05:00.717]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:00.717]                             "", base::R.version$version.string), 
[16:05:00.717]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:00.717]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:00.717]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:00.717]                               "release", "version")], collapse = " "), 
[16:05:00.717]                             hostname = base::Sys.info()[["nodename"]])
[16:05:00.717]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:00.717]                             info)
[16:05:00.717]                           info <- base::paste(info, collapse = "; ")
[16:05:00.717]                           if (!has_future) {
[16:05:00.717]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:00.717]                               info)
[16:05:00.717]                           }
[16:05:00.717]                           else {
[16:05:00.717]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:00.717]                               info, version)
[16:05:00.717]                           }
[16:05:00.717]                           base::stop(msg)
[16:05:00.717]                         }
[16:05:00.717]                       })
[16:05:00.717]                     }
[16:05:00.717]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:00.717]                     base::options(mc.cores = 1L)
[16:05:00.717]                   }
[16:05:00.717]                   options(future.plan = NULL)
[16:05:00.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:00.717]                 }
[16:05:00.717]                 ...future.workdir <- getwd()
[16:05:00.717]             }
[16:05:00.717]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:00.717]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:00.717]         }
[16:05:00.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:00.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:00.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:00.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:00.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:00.717]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:00.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:00.717]             base::names(...future.oldOptions))
[16:05:00.717]     }
[16:05:00.717]     if (FALSE) {
[16:05:00.717]     }
[16:05:00.717]     else {
[16:05:00.717]         if (TRUE) {
[16:05:00.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:00.717]                 open = "w")
[16:05:00.717]         }
[16:05:00.717]         else {
[16:05:00.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:00.717]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:00.717]         }
[16:05:00.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:00.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:00.717]             base::sink(type = "output", split = FALSE)
[16:05:00.717]             base::close(...future.stdout)
[16:05:00.717]         }, add = TRUE)
[16:05:00.717]     }
[16:05:00.717]     ...future.frame <- base::sys.nframe()
[16:05:00.717]     ...future.conditions <- base::list()
[16:05:00.717]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:00.717]     if (FALSE) {
[16:05:00.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:00.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:00.717]     }
[16:05:00.717]     ...future.result <- base::tryCatch({
[16:05:00.717]         base::withCallingHandlers({
[16:05:00.717]             ...future.value <- base::withVisible(base::local({
[16:05:00.717]                 ...future.makeSendCondition <- base::local({
[16:05:00.717]                   sendCondition <- NULL
[16:05:00.717]                   function(frame = 1L) {
[16:05:00.717]                     if (is.function(sendCondition)) 
[16:05:00.717]                       return(sendCondition)
[16:05:00.717]                     ns <- getNamespace("parallel")
[16:05:00.717]                     if (exists("sendData", mode = "function", 
[16:05:00.717]                       envir = ns)) {
[16:05:00.717]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:00.717]                         envir = ns)
[16:05:00.717]                       envir <- sys.frame(frame)
[16:05:00.717]                       master <- NULL
[16:05:00.717]                       while (!identical(envir, .GlobalEnv) && 
[16:05:00.717]                         !identical(envir, emptyenv())) {
[16:05:00.717]                         if (exists("master", mode = "list", envir = envir, 
[16:05:00.717]                           inherits = FALSE)) {
[16:05:00.717]                           master <- get("master", mode = "list", 
[16:05:00.717]                             envir = envir, inherits = FALSE)
[16:05:00.717]                           if (inherits(master, c("SOCKnode", 
[16:05:00.717]                             "SOCK0node"))) {
[16:05:00.717]                             sendCondition <<- function(cond) {
[16:05:00.717]                               data <- list(type = "VALUE", value = cond, 
[16:05:00.717]                                 success = TRUE)
[16:05:00.717]                               parallel_sendData(master, data)
[16:05:00.717]                             }
[16:05:00.717]                             return(sendCondition)
[16:05:00.717]                           }
[16:05:00.717]                         }
[16:05:00.717]                         frame <- frame + 1L
[16:05:00.717]                         envir <- sys.frame(frame)
[16:05:00.717]                       }
[16:05:00.717]                     }
[16:05:00.717]                     sendCondition <<- function(cond) NULL
[16:05:00.717]                   }
[16:05:00.717]                 })
[16:05:00.717]                 withCallingHandlers({
[16:05:00.717]                   {
[16:05:00.717]                     my_fcn
[16:05:00.717]                   }
[16:05:00.717]                 }, immediateCondition = function(cond) {
[16:05:00.717]                   sendCondition <- ...future.makeSendCondition()
[16:05:00.717]                   sendCondition(cond)
[16:05:00.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.717]                   {
[16:05:00.717]                     inherits <- base::inherits
[16:05:00.717]                     invokeRestart <- base::invokeRestart
[16:05:00.717]                     is.null <- base::is.null
[16:05:00.717]                     muffled <- FALSE
[16:05:00.717]                     if (inherits(cond, "message")) {
[16:05:00.717]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:00.717]                       if (muffled) 
[16:05:00.717]                         invokeRestart("muffleMessage")
[16:05:00.717]                     }
[16:05:00.717]                     else if (inherits(cond, "warning")) {
[16:05:00.717]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:00.717]                       if (muffled) 
[16:05:00.717]                         invokeRestart("muffleWarning")
[16:05:00.717]                     }
[16:05:00.717]                     else if (inherits(cond, "condition")) {
[16:05:00.717]                       if (!is.null(pattern)) {
[16:05:00.717]                         computeRestarts <- base::computeRestarts
[16:05:00.717]                         grepl <- base::grepl
[16:05:00.717]                         restarts <- computeRestarts(cond)
[16:05:00.717]                         for (restart in restarts) {
[16:05:00.717]                           name <- restart$name
[16:05:00.717]                           if (is.null(name)) 
[16:05:00.717]                             next
[16:05:00.717]                           if (!grepl(pattern, name)) 
[16:05:00.717]                             next
[16:05:00.717]                           invokeRestart(restart)
[16:05:00.717]                           muffled <- TRUE
[16:05:00.717]                           break
[16:05:00.717]                         }
[16:05:00.717]                       }
[16:05:00.717]                     }
[16:05:00.717]                     invisible(muffled)
[16:05:00.717]                   }
[16:05:00.717]                   muffleCondition(cond)
[16:05:00.717]                 })
[16:05:00.717]             }))
[16:05:00.717]             future::FutureResult(value = ...future.value$value, 
[16:05:00.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.717]                   ...future.rng), globalenv = if (FALSE) 
[16:05:00.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:00.717]                     ...future.globalenv.names))
[16:05:00.717]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:00.717]         }, condition = base::local({
[16:05:00.717]             c <- base::c
[16:05:00.717]             inherits <- base::inherits
[16:05:00.717]             invokeRestart <- base::invokeRestart
[16:05:00.717]             length <- base::length
[16:05:00.717]             list <- base::list
[16:05:00.717]             seq.int <- base::seq.int
[16:05:00.717]             signalCondition <- base::signalCondition
[16:05:00.717]             sys.calls <- base::sys.calls
[16:05:00.717]             `[[` <- base::`[[`
[16:05:00.717]             `+` <- base::`+`
[16:05:00.717]             `<<-` <- base::`<<-`
[16:05:00.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:00.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:00.717]                   3L)]
[16:05:00.717]             }
[16:05:00.717]             function(cond) {
[16:05:00.717]                 is_error <- inherits(cond, "error")
[16:05:00.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:00.717]                   NULL)
[16:05:00.717]                 if (is_error) {
[16:05:00.717]                   sessionInformation <- function() {
[16:05:00.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:00.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:00.717]                       search = base::search(), system = base::Sys.info())
[16:05:00.717]                   }
[16:05:00.717]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:00.717]                     cond$call), session = sessionInformation(), 
[16:05:00.717]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:00.717]                   signalCondition(cond)
[16:05:00.717]                 }
[16:05:00.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:00.717]                 "immediateCondition"))) {
[16:05:00.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:00.717]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:00.717]                   if (TRUE && !signal) {
[16:05:00.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.717]                     {
[16:05:00.717]                       inherits <- base::inherits
[16:05:00.717]                       invokeRestart <- base::invokeRestart
[16:05:00.717]                       is.null <- base::is.null
[16:05:00.717]                       muffled <- FALSE
[16:05:00.717]                       if (inherits(cond, "message")) {
[16:05:00.717]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.717]                         if (muffled) 
[16:05:00.717]                           invokeRestart("muffleMessage")
[16:05:00.717]                       }
[16:05:00.717]                       else if (inherits(cond, "warning")) {
[16:05:00.717]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.717]                         if (muffled) 
[16:05:00.717]                           invokeRestart("muffleWarning")
[16:05:00.717]                       }
[16:05:00.717]                       else if (inherits(cond, "condition")) {
[16:05:00.717]                         if (!is.null(pattern)) {
[16:05:00.717]                           computeRestarts <- base::computeRestarts
[16:05:00.717]                           grepl <- base::grepl
[16:05:00.717]                           restarts <- computeRestarts(cond)
[16:05:00.717]                           for (restart in restarts) {
[16:05:00.717]                             name <- restart$name
[16:05:00.717]                             if (is.null(name)) 
[16:05:00.717]                               next
[16:05:00.717]                             if (!grepl(pattern, name)) 
[16:05:00.717]                               next
[16:05:00.717]                             invokeRestart(restart)
[16:05:00.717]                             muffled <- TRUE
[16:05:00.717]                             break
[16:05:00.717]                           }
[16:05:00.717]                         }
[16:05:00.717]                       }
[16:05:00.717]                       invisible(muffled)
[16:05:00.717]                     }
[16:05:00.717]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.717]                   }
[16:05:00.717]                 }
[16:05:00.717]                 else {
[16:05:00.717]                   if (TRUE) {
[16:05:00.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.717]                     {
[16:05:00.717]                       inherits <- base::inherits
[16:05:00.717]                       invokeRestart <- base::invokeRestart
[16:05:00.717]                       is.null <- base::is.null
[16:05:00.717]                       muffled <- FALSE
[16:05:00.717]                       if (inherits(cond, "message")) {
[16:05:00.717]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.717]                         if (muffled) 
[16:05:00.717]                           invokeRestart("muffleMessage")
[16:05:00.717]                       }
[16:05:00.717]                       else if (inherits(cond, "warning")) {
[16:05:00.717]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.717]                         if (muffled) 
[16:05:00.717]                           invokeRestart("muffleWarning")
[16:05:00.717]                       }
[16:05:00.717]                       else if (inherits(cond, "condition")) {
[16:05:00.717]                         if (!is.null(pattern)) {
[16:05:00.717]                           computeRestarts <- base::computeRestarts
[16:05:00.717]                           grepl <- base::grepl
[16:05:00.717]                           restarts <- computeRestarts(cond)
[16:05:00.717]                           for (restart in restarts) {
[16:05:00.717]                             name <- restart$name
[16:05:00.717]                             if (is.null(name)) 
[16:05:00.717]                               next
[16:05:00.717]                             if (!grepl(pattern, name)) 
[16:05:00.717]                               next
[16:05:00.717]                             invokeRestart(restart)
[16:05:00.717]                             muffled <- TRUE
[16:05:00.717]                             break
[16:05:00.717]                           }
[16:05:00.717]                         }
[16:05:00.717]                       }
[16:05:00.717]                       invisible(muffled)
[16:05:00.717]                     }
[16:05:00.717]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.717]                   }
[16:05:00.717]                 }
[16:05:00.717]             }
[16:05:00.717]         }))
[16:05:00.717]     }, error = function(ex) {
[16:05:00.717]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:00.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.717]                 ...future.rng), started = ...future.startTime, 
[16:05:00.717]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:00.717]             version = "1.8"), class = "FutureResult")
[16:05:00.717]     }, finally = {
[16:05:00.717]         if (!identical(...future.workdir, getwd())) 
[16:05:00.717]             setwd(...future.workdir)
[16:05:00.717]         {
[16:05:00.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:00.717]                 ...future.oldOptions$nwarnings <- NULL
[16:05:00.717]             }
[16:05:00.717]             base::options(...future.oldOptions)
[16:05:00.717]             if (.Platform$OS.type == "windows") {
[16:05:00.717]                 old_names <- names(...future.oldEnvVars)
[16:05:00.717]                 envs <- base::Sys.getenv()
[16:05:00.717]                 names <- names(envs)
[16:05:00.717]                 common <- intersect(names, old_names)
[16:05:00.717]                 added <- setdiff(names, old_names)
[16:05:00.717]                 removed <- setdiff(old_names, names)
[16:05:00.717]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:00.717]                   envs[common]]
[16:05:00.717]                 NAMES <- toupper(changed)
[16:05:00.717]                 args <- list()
[16:05:00.717]                 for (kk in seq_along(NAMES)) {
[16:05:00.717]                   name <- changed[[kk]]
[16:05:00.717]                   NAME <- NAMES[[kk]]
[16:05:00.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.717]                     next
[16:05:00.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.717]                 }
[16:05:00.717]                 NAMES <- toupper(added)
[16:05:00.717]                 for (kk in seq_along(NAMES)) {
[16:05:00.717]                   name <- added[[kk]]
[16:05:00.717]                   NAME <- NAMES[[kk]]
[16:05:00.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.717]                     next
[16:05:00.717]                   args[[name]] <- ""
[16:05:00.717]                 }
[16:05:00.717]                 NAMES <- toupper(removed)
[16:05:00.717]                 for (kk in seq_along(NAMES)) {
[16:05:00.717]                   name <- removed[[kk]]
[16:05:00.717]                   NAME <- NAMES[[kk]]
[16:05:00.717]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.717]                     next
[16:05:00.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.717]                 }
[16:05:00.717]                 if (length(args) > 0) 
[16:05:00.717]                   base::do.call(base::Sys.setenv, args = args)
[16:05:00.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:00.717]             }
[16:05:00.717]             else {
[16:05:00.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:00.717]             }
[16:05:00.717]             {
[16:05:00.717]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:00.717]                   0L) {
[16:05:00.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:00.717]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:00.717]                   base::options(opts)
[16:05:00.717]                 }
[16:05:00.717]                 {
[16:05:00.717]                   {
[16:05:00.717]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:00.717]                     NULL
[16:05:00.717]                   }
[16:05:00.717]                   options(future.plan = NULL)
[16:05:00.717]                   if (is.na(NA_character_)) 
[16:05:00.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:00.717]                   future::plan(list(function (..., workers = availableCores(), 
[16:05:00.717]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:05:00.717]                     envir = parent.frame()) 
[16:05:00.717]                   {
[16:05:00.717]                     if (is.function(workers)) 
[16:05:00.717]                       workers <- workers()
[16:05:00.717]                     workers <- structure(as.integer(workers), 
[16:05:00.717]                       class = class(workers))
[16:05:00.717]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:05:00.717]                       workers >= 1)
[16:05:00.717]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:05:00.717]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:05:00.717]                     }
[16:05:00.717]                     future <- MultisessionFuture(..., workers = workers, 
[16:05:00.717]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:05:00.717]                       envir = envir)
[16:05:00.717]                     if (!future$lazy) 
[16:05:00.717]                       future <- run(future)
[16:05:00.717]                     invisible(future)
[16:05:00.717]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:00.717]                 }
[16:05:00.717]             }
[16:05:00.717]         }
[16:05:00.717]     })
[16:05:00.717]     if (TRUE) {
[16:05:00.717]         base::sink(type = "output", split = FALSE)
[16:05:00.717]         if (TRUE) {
[16:05:00.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:00.717]         }
[16:05:00.717]         else {
[16:05:00.717]             ...future.result["stdout"] <- base::list(NULL)
[16:05:00.717]         }
[16:05:00.717]         base::close(...future.stdout)
[16:05:00.717]         ...future.stdout <- NULL
[16:05:00.717]     }
[16:05:00.717]     ...future.result$conditions <- ...future.conditions
[16:05:00.717]     ...future.result$finished <- base::Sys.time()
[16:05:00.717]     ...future.result
[16:05:00.717] }
[16:05:00.720] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:05:00.721] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:05:00.721] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:05:00.721] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:05:00.722] MultisessionFuture started
[16:05:00.722] - Launch lazy future ... done
[16:05:00.722] run() for ‘MultisessionFuture’ ... done
[16:05:00.722] result() for ClusterFuture ...
[16:05:00.722] receiveMessageFromWorker() for ClusterFuture ...
[16:05:00.722] - Validating connection of MultisessionFuture
[16:05:00.768] - received message: FutureResult
[16:05:00.768] - Received FutureResult
[16:05:00.769] - Erased future from FutureRegistry
[16:05:00.769] result() for ClusterFuture ...
[16:05:00.769] - result already collected: FutureResult
[16:05:00.769] result() for ClusterFuture ... done
[16:05:00.769] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:00.769] result() for ClusterFuture ... done
[16:05:00.769] result() for ClusterFuture ...
[16:05:00.769] - result already collected: FutureResult
[16:05:00.770] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x564ddf17c888>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[16:05:00.770] getGlobalsAndPackages() ...
[16:05:00.770] Searching for globals...
[16:05:00.773] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[16:05:00.773] Searching for globals ... DONE
[16:05:00.774] Resolving globals: FALSE
[16:05:00.774] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[16:05:00.775] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[16:05:00.775] - globals: [1] ‘my_fcn’
[16:05:00.775] 
[16:05:00.775] getGlobalsAndPackages() ... DONE
[16:05:00.775] run() for ‘Future’ ...
[16:05:00.775] - state: ‘created’
[16:05:00.776] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:00.790] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:00.790] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:00.790]   - Field: ‘node’
[16:05:00.790]   - Field: ‘label’
[16:05:00.790]   - Field: ‘local’
[16:05:00.791]   - Field: ‘owner’
[16:05:00.791]   - Field: ‘envir’
[16:05:00.791]   - Field: ‘workers’
[16:05:00.791]   - Field: ‘packages’
[16:05:00.791]   - Field: ‘gc’
[16:05:00.791]   - Field: ‘conditions’
[16:05:00.791]   - Field: ‘persistent’
[16:05:00.791]   - Field: ‘expr’
[16:05:00.791]   - Field: ‘uuid’
[16:05:00.792]   - Field: ‘seed’
[16:05:00.792]   - Field: ‘version’
[16:05:00.792]   - Field: ‘result’
[16:05:00.792]   - Field: ‘asynchronous’
[16:05:00.792]   - Field: ‘calls’
[16:05:00.792]   - Field: ‘globals’
[16:05:00.792]   - Field: ‘stdout’
[16:05:00.792]   - Field: ‘earlySignal’
[16:05:00.792]   - Field: ‘lazy’
[16:05:00.793]   - Field: ‘state’
[16:05:00.793] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:00.793] - Launch lazy future ...
[16:05:00.793] Packages needed by the future expression (n = 0): <none>
[16:05:00.793] Packages needed by future strategies (n = 0): <none>
[16:05:00.794] {
[16:05:00.794]     {
[16:05:00.794]         {
[16:05:00.794]             ...future.startTime <- base::Sys.time()
[16:05:00.794]             {
[16:05:00.794]                 {
[16:05:00.794]                   {
[16:05:00.794]                     {
[16:05:00.794]                       base::local({
[16:05:00.794]                         has_future <- base::requireNamespace("future", 
[16:05:00.794]                           quietly = TRUE)
[16:05:00.794]                         if (has_future) {
[16:05:00.794]                           ns <- base::getNamespace("future")
[16:05:00.794]                           version <- ns[[".package"]][["version"]]
[16:05:00.794]                           if (is.null(version)) 
[16:05:00.794]                             version <- utils::packageVersion("future")
[16:05:00.794]                         }
[16:05:00.794]                         else {
[16:05:00.794]                           version <- NULL
[16:05:00.794]                         }
[16:05:00.794]                         if (!has_future || version < "1.8.0") {
[16:05:00.794]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:00.794]                             "", base::R.version$version.string), 
[16:05:00.794]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:00.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:00.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:00.794]                               "release", "version")], collapse = " "), 
[16:05:00.794]                             hostname = base::Sys.info()[["nodename"]])
[16:05:00.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:00.794]                             info)
[16:05:00.794]                           info <- base::paste(info, collapse = "; ")
[16:05:00.794]                           if (!has_future) {
[16:05:00.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:00.794]                               info)
[16:05:00.794]                           }
[16:05:00.794]                           else {
[16:05:00.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:00.794]                               info, version)
[16:05:00.794]                           }
[16:05:00.794]                           base::stop(msg)
[16:05:00.794]                         }
[16:05:00.794]                       })
[16:05:00.794]                     }
[16:05:00.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:00.794]                     base::options(mc.cores = 1L)
[16:05:00.794]                   }
[16:05:00.794]                   options(future.plan = NULL)
[16:05:00.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:00.794]                 }
[16:05:00.794]                 ...future.workdir <- getwd()
[16:05:00.794]             }
[16:05:00.794]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:00.794]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:00.794]         }
[16:05:00.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:00.794]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:00.794]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:00.794]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:00.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:00.794]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:00.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:00.794]             base::names(...future.oldOptions))
[16:05:00.794]     }
[16:05:00.794]     if (FALSE) {
[16:05:00.794]     }
[16:05:00.794]     else {
[16:05:00.794]         if (TRUE) {
[16:05:00.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:00.794]                 open = "w")
[16:05:00.794]         }
[16:05:00.794]         else {
[16:05:00.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:00.794]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:00.794]         }
[16:05:00.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:00.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:00.794]             base::sink(type = "output", split = FALSE)
[16:05:00.794]             base::close(...future.stdout)
[16:05:00.794]         }, add = TRUE)
[16:05:00.794]     }
[16:05:00.794]     ...future.frame <- base::sys.nframe()
[16:05:00.794]     ...future.conditions <- base::list()
[16:05:00.794]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:00.794]     if (FALSE) {
[16:05:00.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:00.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:00.794]     }
[16:05:00.794]     ...future.result <- base::tryCatch({
[16:05:00.794]         base::withCallingHandlers({
[16:05:00.794]             ...future.value <- base::withVisible(base::local({
[16:05:00.794]                 ...future.makeSendCondition <- base::local({
[16:05:00.794]                   sendCondition <- NULL
[16:05:00.794]                   function(frame = 1L) {
[16:05:00.794]                     if (is.function(sendCondition)) 
[16:05:00.794]                       return(sendCondition)
[16:05:00.794]                     ns <- getNamespace("parallel")
[16:05:00.794]                     if (exists("sendData", mode = "function", 
[16:05:00.794]                       envir = ns)) {
[16:05:00.794]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:00.794]                         envir = ns)
[16:05:00.794]                       envir <- sys.frame(frame)
[16:05:00.794]                       master <- NULL
[16:05:00.794]                       while (!identical(envir, .GlobalEnv) && 
[16:05:00.794]                         !identical(envir, emptyenv())) {
[16:05:00.794]                         if (exists("master", mode = "list", envir = envir, 
[16:05:00.794]                           inherits = FALSE)) {
[16:05:00.794]                           master <- get("master", mode = "list", 
[16:05:00.794]                             envir = envir, inherits = FALSE)
[16:05:00.794]                           if (inherits(master, c("SOCKnode", 
[16:05:00.794]                             "SOCK0node"))) {
[16:05:00.794]                             sendCondition <<- function(cond) {
[16:05:00.794]                               data <- list(type = "VALUE", value = cond, 
[16:05:00.794]                                 success = TRUE)
[16:05:00.794]                               parallel_sendData(master, data)
[16:05:00.794]                             }
[16:05:00.794]                             return(sendCondition)
[16:05:00.794]                           }
[16:05:00.794]                         }
[16:05:00.794]                         frame <- frame + 1L
[16:05:00.794]                         envir <- sys.frame(frame)
[16:05:00.794]                       }
[16:05:00.794]                     }
[16:05:00.794]                     sendCondition <<- function(cond) NULL
[16:05:00.794]                   }
[16:05:00.794]                 })
[16:05:00.794]                 withCallingHandlers({
[16:05:00.794]                   {
[16:05:00.794]                     my_fcn(3)
[16:05:00.794]                   }
[16:05:00.794]                 }, immediateCondition = function(cond) {
[16:05:00.794]                   sendCondition <- ...future.makeSendCondition()
[16:05:00.794]                   sendCondition(cond)
[16:05:00.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.794]                   {
[16:05:00.794]                     inherits <- base::inherits
[16:05:00.794]                     invokeRestart <- base::invokeRestart
[16:05:00.794]                     is.null <- base::is.null
[16:05:00.794]                     muffled <- FALSE
[16:05:00.794]                     if (inherits(cond, "message")) {
[16:05:00.794]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:00.794]                       if (muffled) 
[16:05:00.794]                         invokeRestart("muffleMessage")
[16:05:00.794]                     }
[16:05:00.794]                     else if (inherits(cond, "warning")) {
[16:05:00.794]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:00.794]                       if (muffled) 
[16:05:00.794]                         invokeRestart("muffleWarning")
[16:05:00.794]                     }
[16:05:00.794]                     else if (inherits(cond, "condition")) {
[16:05:00.794]                       if (!is.null(pattern)) {
[16:05:00.794]                         computeRestarts <- base::computeRestarts
[16:05:00.794]                         grepl <- base::grepl
[16:05:00.794]                         restarts <- computeRestarts(cond)
[16:05:00.794]                         for (restart in restarts) {
[16:05:00.794]                           name <- restart$name
[16:05:00.794]                           if (is.null(name)) 
[16:05:00.794]                             next
[16:05:00.794]                           if (!grepl(pattern, name)) 
[16:05:00.794]                             next
[16:05:00.794]                           invokeRestart(restart)
[16:05:00.794]                           muffled <- TRUE
[16:05:00.794]                           break
[16:05:00.794]                         }
[16:05:00.794]                       }
[16:05:00.794]                     }
[16:05:00.794]                     invisible(muffled)
[16:05:00.794]                   }
[16:05:00.794]                   muffleCondition(cond)
[16:05:00.794]                 })
[16:05:00.794]             }))
[16:05:00.794]             future::FutureResult(value = ...future.value$value, 
[16:05:00.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.794]                   ...future.rng), globalenv = if (FALSE) 
[16:05:00.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:00.794]                     ...future.globalenv.names))
[16:05:00.794]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:00.794]         }, condition = base::local({
[16:05:00.794]             c <- base::c
[16:05:00.794]             inherits <- base::inherits
[16:05:00.794]             invokeRestart <- base::invokeRestart
[16:05:00.794]             length <- base::length
[16:05:00.794]             list <- base::list
[16:05:00.794]             seq.int <- base::seq.int
[16:05:00.794]             signalCondition <- base::signalCondition
[16:05:00.794]             sys.calls <- base::sys.calls
[16:05:00.794]             `[[` <- base::`[[`
[16:05:00.794]             `+` <- base::`+`
[16:05:00.794]             `<<-` <- base::`<<-`
[16:05:00.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:00.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:00.794]                   3L)]
[16:05:00.794]             }
[16:05:00.794]             function(cond) {
[16:05:00.794]                 is_error <- inherits(cond, "error")
[16:05:00.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:00.794]                   NULL)
[16:05:00.794]                 if (is_error) {
[16:05:00.794]                   sessionInformation <- function() {
[16:05:00.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:00.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:00.794]                       search = base::search(), system = base::Sys.info())
[16:05:00.794]                   }
[16:05:00.794]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:00.794]                     cond$call), session = sessionInformation(), 
[16:05:00.794]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:00.794]                   signalCondition(cond)
[16:05:00.794]                 }
[16:05:00.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:00.794]                 "immediateCondition"))) {
[16:05:00.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:00.794]                   ...future.conditions[[length(...future.conditions) + 
[16:05:00.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:00.794]                   if (TRUE && !signal) {
[16:05:00.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.794]                     {
[16:05:00.794]                       inherits <- base::inherits
[16:05:00.794]                       invokeRestart <- base::invokeRestart
[16:05:00.794]                       is.null <- base::is.null
[16:05:00.794]                       muffled <- FALSE
[16:05:00.794]                       if (inherits(cond, "message")) {
[16:05:00.794]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.794]                         if (muffled) 
[16:05:00.794]                           invokeRestart("muffleMessage")
[16:05:00.794]                       }
[16:05:00.794]                       else if (inherits(cond, "warning")) {
[16:05:00.794]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.794]                         if (muffled) 
[16:05:00.794]                           invokeRestart("muffleWarning")
[16:05:00.794]                       }
[16:05:00.794]                       else if (inherits(cond, "condition")) {
[16:05:00.794]                         if (!is.null(pattern)) {
[16:05:00.794]                           computeRestarts <- base::computeRestarts
[16:05:00.794]                           grepl <- base::grepl
[16:05:00.794]                           restarts <- computeRestarts(cond)
[16:05:00.794]                           for (restart in restarts) {
[16:05:00.794]                             name <- restart$name
[16:05:00.794]                             if (is.null(name)) 
[16:05:00.794]                               next
[16:05:00.794]                             if (!grepl(pattern, name)) 
[16:05:00.794]                               next
[16:05:00.794]                             invokeRestart(restart)
[16:05:00.794]                             muffled <- TRUE
[16:05:00.794]                             break
[16:05:00.794]                           }
[16:05:00.794]                         }
[16:05:00.794]                       }
[16:05:00.794]                       invisible(muffled)
[16:05:00.794]                     }
[16:05:00.794]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.794]                   }
[16:05:00.794]                 }
[16:05:00.794]                 else {
[16:05:00.794]                   if (TRUE) {
[16:05:00.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:00.794]                     {
[16:05:00.794]                       inherits <- base::inherits
[16:05:00.794]                       invokeRestart <- base::invokeRestart
[16:05:00.794]                       is.null <- base::is.null
[16:05:00.794]                       muffled <- FALSE
[16:05:00.794]                       if (inherits(cond, "message")) {
[16:05:00.794]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:00.794]                         if (muffled) 
[16:05:00.794]                           invokeRestart("muffleMessage")
[16:05:00.794]                       }
[16:05:00.794]                       else if (inherits(cond, "warning")) {
[16:05:00.794]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:00.794]                         if (muffled) 
[16:05:00.794]                           invokeRestart("muffleWarning")
[16:05:00.794]                       }
[16:05:00.794]                       else if (inherits(cond, "condition")) {
[16:05:00.794]                         if (!is.null(pattern)) {
[16:05:00.794]                           computeRestarts <- base::computeRestarts
[16:05:00.794]                           grepl <- base::grepl
[16:05:00.794]                           restarts <- computeRestarts(cond)
[16:05:00.794]                           for (restart in restarts) {
[16:05:00.794]                             name <- restart$name
[16:05:00.794]                             if (is.null(name)) 
[16:05:00.794]                               next
[16:05:00.794]                             if (!grepl(pattern, name)) 
[16:05:00.794]                               next
[16:05:00.794]                             invokeRestart(restart)
[16:05:00.794]                             muffled <- TRUE
[16:05:00.794]                             break
[16:05:00.794]                           }
[16:05:00.794]                         }
[16:05:00.794]                       }
[16:05:00.794]                       invisible(muffled)
[16:05:00.794]                     }
[16:05:00.794]                     muffleCondition(cond, pattern = "^muffle")
[16:05:00.794]                   }
[16:05:00.794]                 }
[16:05:00.794]             }
[16:05:00.794]         }))
[16:05:00.794]     }, error = function(ex) {
[16:05:00.794]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:00.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:00.794]                 ...future.rng), started = ...future.startTime, 
[16:05:00.794]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:00.794]             version = "1.8"), class = "FutureResult")
[16:05:00.794]     }, finally = {
[16:05:00.794]         if (!identical(...future.workdir, getwd())) 
[16:05:00.794]             setwd(...future.workdir)
[16:05:00.794]         {
[16:05:00.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:00.794]                 ...future.oldOptions$nwarnings <- NULL
[16:05:00.794]             }
[16:05:00.794]             base::options(...future.oldOptions)
[16:05:00.794]             if (.Platform$OS.type == "windows") {
[16:05:00.794]                 old_names <- names(...future.oldEnvVars)
[16:05:00.794]                 envs <- base::Sys.getenv()
[16:05:00.794]                 names <- names(envs)
[16:05:00.794]                 common <- intersect(names, old_names)
[16:05:00.794]                 added <- setdiff(names, old_names)
[16:05:00.794]                 removed <- setdiff(old_names, names)
[16:05:00.794]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:00.794]                   envs[common]]
[16:05:00.794]                 NAMES <- toupper(changed)
[16:05:00.794]                 args <- list()
[16:05:00.794]                 for (kk in seq_along(NAMES)) {
[16:05:00.794]                   name <- changed[[kk]]
[16:05:00.794]                   NAME <- NAMES[[kk]]
[16:05:00.794]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.794]                     next
[16:05:00.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.794]                 }
[16:05:00.794]                 NAMES <- toupper(added)
[16:05:00.794]                 for (kk in seq_along(NAMES)) {
[16:05:00.794]                   name <- added[[kk]]
[16:05:00.794]                   NAME <- NAMES[[kk]]
[16:05:00.794]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.794]                     next
[16:05:00.794]                   args[[name]] <- ""
[16:05:00.794]                 }
[16:05:00.794]                 NAMES <- toupper(removed)
[16:05:00.794]                 for (kk in seq_along(NAMES)) {
[16:05:00.794]                   name <- removed[[kk]]
[16:05:00.794]                   NAME <- NAMES[[kk]]
[16:05:00.794]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:00.794]                     next
[16:05:00.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:00.794]                 }
[16:05:00.794]                 if (length(args) > 0) 
[16:05:00.794]                   base::do.call(base::Sys.setenv, args = args)
[16:05:00.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:00.794]             }
[16:05:00.794]             else {
[16:05:00.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:00.794]             }
[16:05:00.794]             {
[16:05:00.794]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:00.794]                   0L) {
[16:05:00.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:00.794]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:00.794]                   base::options(opts)
[16:05:00.794]                 }
[16:05:00.794]                 {
[16:05:00.794]                   {
[16:05:00.794]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:00.794]                     NULL
[16:05:00.794]                   }
[16:05:00.794]                   options(future.plan = NULL)
[16:05:00.794]                   if (is.na(NA_character_)) 
[16:05:00.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:00.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:00.794]                   future::plan(list(function (..., workers = availableCores(), 
[16:05:00.794]                     lazy = FALSE, rscript_libs = .libPaths(), 
[16:05:00.794]                     envir = parent.frame()) 
[16:05:00.794]                   {
[16:05:00.794]                     if (is.function(workers)) 
[16:05:00.794]                       workers <- workers()
[16:05:00.794]                     workers <- structure(as.integer(workers), 
[16:05:00.794]                       class = class(workers))
[16:05:00.794]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[16:05:00.794]                       workers >= 1)
[16:05:00.794]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[16:05:00.794]                       return(sequential(..., lazy = TRUE, envir = envir))
[16:05:00.794]                     }
[16:05:00.794]                     future <- MultisessionFuture(..., workers = workers, 
[16:05:00.794]                       lazy = lazy, rscript_libs = rscript_libs, 
[16:05:00.794]                       envir = envir)
[16:05:00.794]                     if (!future$lazy) 
[16:05:00.794]                       future <- run(future)
[16:05:00.794]                     invisible(future)
[16:05:00.794]                   }), .cleanup = FALSE, .init = FALSE)
[16:05:00.794]                 }
[16:05:00.794]             }
[16:05:00.794]         }
[16:05:00.794]     })
[16:05:00.794]     if (TRUE) {
[16:05:00.794]         base::sink(type = "output", split = FALSE)
[16:05:00.794]         if (TRUE) {
[16:05:00.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:00.794]         }
[16:05:00.794]         else {
[16:05:00.794]             ...future.result["stdout"] <- base::list(NULL)
[16:05:00.794]         }
[16:05:00.794]         base::close(...future.stdout)
[16:05:00.794]         ...future.stdout <- NULL
[16:05:00.794]     }
[16:05:00.794]     ...future.result$conditions <- ...future.conditions
[16:05:00.794]     ...future.result$finished <- base::Sys.time()
[16:05:00.794]     ...future.result
[16:05:00.794] }
[16:05:00.797] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[16:05:00.797] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[16:05:00.798] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[16:05:00.798] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[16:05:00.798] MultisessionFuture started
[16:05:00.798] - Launch lazy future ... done
[16:05:00.799] run() for ‘MultisessionFuture’ ... done
[16:05:00.799] result() for ClusterFuture ...
[16:05:00.799] receiveMessageFromWorker() for ClusterFuture ...
[16:05:00.799] - Validating connection of MultisessionFuture
[16:05:00.845] - received message: FutureResult
[16:05:00.845] - Received FutureResult
[16:05:00.845] - Erased future from FutureRegistry
[16:05:00.845] result() for ClusterFuture ...
[16:05:00.846] - result already collected: FutureResult
[16:05:00.846] result() for ClusterFuture ... done
[16:05:00.846] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:00.846] result() for ClusterFuture ... done
[16:05:00.846] result() for ClusterFuture ...
[16:05:00.846] - result already collected: FutureResult
[16:05:00.846] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[16:05:00.847] plan(): Setting new future strategy stack:
[16:05:00.847] List of future strategies:
[16:05:00.847] 1. FutureStrategy:
[16:05:00.847]    - args: function (..., envir = parent.frame())
[16:05:00.847]    - tweaked: FALSE
[16:05:00.847]    - call: future::plan(oplan)
[16:05:00.848] plan(): nbrOfWorkers() = 1
> 
