
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:25.234] plan(): Setting new future strategy stack:
[13:23:25.235] List of future strategies:
[13:23:25.235] 1. sequential:
[13:23:25.235]    - args: function (..., envir = parent.frame())
[13:23:25.235]    - tweaked: FALSE
[13:23:25.235]    - call: future::plan("sequential")
[13:23:25.249] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[13:23:25.283] plan(): Setting new future strategy stack:
[13:23:25.283] List of future strategies:
[13:23:25.283] 1. sequential:
[13:23:25.283]    - args: function (..., envir = parent.frame())
[13:23:25.283]    - tweaked: FALSE
[13:23:25.283]    - call: plan(strategy)
[13:23:25.297] plan(): nbrOfWorkers() = 1
[13:23:25.297] getGlobalsAndPackages() ...
[13:23:25.298] Searching for globals...
[13:23:25.304] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:25.304] Searching for globals ... DONE
[13:23:25.304] Resolving globals: FALSE
[13:23:25.306] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:25.306] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:25.306] - globals: [1] ‘my_fcn’
[13:23:25.306] 
[13:23:25.306] getGlobalsAndPackages() ... DONE
[13:23:25.307] run() for ‘Future’ ...
[13:23:25.308] - state: ‘created’
[13:23:25.308] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:25.308] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:25.308] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:25.308]   - Field: ‘label’
[13:23:25.309]   - Field: ‘local’
[13:23:25.309]   - Field: ‘owner’
[13:23:25.309]   - Field: ‘envir’
[13:23:25.309]   - Field: ‘packages’
[13:23:25.309]   - Field: ‘gc’
[13:23:25.309]   - Field: ‘conditions’
[13:23:25.309]   - Field: ‘expr’
[13:23:25.309]   - Field: ‘uuid’
[13:23:25.309]   - Field: ‘seed’
[13:23:25.309]   - Field: ‘version’
[13:23:25.309]   - Field: ‘result’
[13:23:25.310]   - Field: ‘asynchronous’
[13:23:25.310]   - Field: ‘calls’
[13:23:25.310]   - Field: ‘globals’
[13:23:25.310]   - Field: ‘stdout’
[13:23:25.310]   - Field: ‘earlySignal’
[13:23:25.310]   - Field: ‘lazy’
[13:23:25.310]   - Field: ‘state’
[13:23:25.310] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:25.310] - Launch lazy future ...
[13:23:25.311] Packages needed by the future expression (n = 0): <none>
[13:23:25.311] Packages needed by future strategies (n = 0): <none>
[13:23:25.312] {
[13:23:25.312]     {
[13:23:25.312]         {
[13:23:25.312]             ...future.startTime <- base::Sys.time()
[13:23:25.312]             {
[13:23:25.312]                 {
[13:23:25.312]                   {
[13:23:25.312]                     base::local({
[13:23:25.312]                       has_future <- base::requireNamespace("future", 
[13:23:25.312]                         quietly = TRUE)
[13:23:25.312]                       if (has_future) {
[13:23:25.312]                         ns <- base::getNamespace("future")
[13:23:25.312]                         version <- ns[[".package"]][["version"]]
[13:23:25.312]                         if (is.null(version)) 
[13:23:25.312]                           version <- utils::packageVersion("future")
[13:23:25.312]                       }
[13:23:25.312]                       else {
[13:23:25.312]                         version <- NULL
[13:23:25.312]                       }
[13:23:25.312]                       if (!has_future || version < "1.8.0") {
[13:23:25.312]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:25.312]                           "", base::R.version$version.string), 
[13:23:25.312]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:25.312]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:25.312]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:25.312]                             "release", "version")], collapse = " "), 
[13:23:25.312]                           hostname = base::Sys.info()[["nodename"]])
[13:23:25.312]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:25.312]                           info)
[13:23:25.312]                         info <- base::paste(info, collapse = "; ")
[13:23:25.312]                         if (!has_future) {
[13:23:25.312]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:25.312]                             info)
[13:23:25.312]                         }
[13:23:25.312]                         else {
[13:23:25.312]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:25.312]                             info, version)
[13:23:25.312]                         }
[13:23:25.312]                         base::stop(msg)
[13:23:25.312]                       }
[13:23:25.312]                     })
[13:23:25.312]                   }
[13:23:25.312]                   options(future.plan = NULL)
[13:23:25.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:25.312]                 }
[13:23:25.312]                 ...future.workdir <- getwd()
[13:23:25.312]             }
[13:23:25.312]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:25.312]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:25.312]         }
[13:23:25.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:25.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:25.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:25.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:25.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:25.312]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:25.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:25.312]             base::names(...future.oldOptions))
[13:23:25.312]     }
[13:23:25.312]     if (FALSE) {
[13:23:25.312]     }
[13:23:25.312]     else {
[13:23:25.312]         if (TRUE) {
[13:23:25.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:25.312]                 open = "w")
[13:23:25.312]         }
[13:23:25.312]         else {
[13:23:25.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:25.312]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:25.312]         }
[13:23:25.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:25.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:25.312]             base::sink(type = "output", split = FALSE)
[13:23:25.312]             base::close(...future.stdout)
[13:23:25.312]         }, add = TRUE)
[13:23:25.312]     }
[13:23:25.312]     ...future.frame <- base::sys.nframe()
[13:23:25.312]     ...future.conditions <- base::list()
[13:23:25.312]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:25.312]     if (FALSE) {
[13:23:25.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:25.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:25.312]     }
[13:23:25.312]     ...future.result <- base::tryCatch({
[13:23:25.312]         base::withCallingHandlers({
[13:23:25.312]             ...future.value <- base::withVisible(base::local({
[13:23:25.312]                 my_fcn
[13:23:25.312]             }))
[13:23:25.312]             future::FutureResult(value = ...future.value$value, 
[13:23:25.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.312]                   ...future.rng), globalenv = if (FALSE) 
[13:23:25.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:25.312]                     ...future.globalenv.names))
[13:23:25.312]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:25.312]         }, condition = base::local({
[13:23:25.312]             c <- base::c
[13:23:25.312]             inherits <- base::inherits
[13:23:25.312]             invokeRestart <- base::invokeRestart
[13:23:25.312]             length <- base::length
[13:23:25.312]             list <- base::list
[13:23:25.312]             seq.int <- base::seq.int
[13:23:25.312]             signalCondition <- base::signalCondition
[13:23:25.312]             sys.calls <- base::sys.calls
[13:23:25.312]             `[[` <- base::`[[`
[13:23:25.312]             `+` <- base::`+`
[13:23:25.312]             `<<-` <- base::`<<-`
[13:23:25.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:25.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:25.312]                   3L)]
[13:23:25.312]             }
[13:23:25.312]             function(cond) {
[13:23:25.312]                 is_error <- inherits(cond, "error")
[13:23:25.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:25.312]                   NULL)
[13:23:25.312]                 if (is_error) {
[13:23:25.312]                   sessionInformation <- function() {
[13:23:25.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:25.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:25.312]                       search = base::search(), system = base::Sys.info())
[13:23:25.312]                   }
[13:23:25.312]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:25.312]                     cond$call), session = sessionInformation(), 
[13:23:25.312]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:25.312]                   signalCondition(cond)
[13:23:25.312]                 }
[13:23:25.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:25.312]                 "immediateCondition"))) {
[13:23:25.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:25.312]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:25.312]                   if (TRUE && !signal) {
[13:23:25.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.312]                     {
[13:23:25.312]                       inherits <- base::inherits
[13:23:25.312]                       invokeRestart <- base::invokeRestart
[13:23:25.312]                       is.null <- base::is.null
[13:23:25.312]                       muffled <- FALSE
[13:23:25.312]                       if (inherits(cond, "message")) {
[13:23:25.312]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.312]                         if (muffled) 
[13:23:25.312]                           invokeRestart("muffleMessage")
[13:23:25.312]                       }
[13:23:25.312]                       else if (inherits(cond, "warning")) {
[13:23:25.312]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.312]                         if (muffled) 
[13:23:25.312]                           invokeRestart("muffleWarning")
[13:23:25.312]                       }
[13:23:25.312]                       else if (inherits(cond, "condition")) {
[13:23:25.312]                         if (!is.null(pattern)) {
[13:23:25.312]                           computeRestarts <- base::computeRestarts
[13:23:25.312]                           grepl <- base::grepl
[13:23:25.312]                           restarts <- computeRestarts(cond)
[13:23:25.312]                           for (restart in restarts) {
[13:23:25.312]                             name <- restart$name
[13:23:25.312]                             if (is.null(name)) 
[13:23:25.312]                               next
[13:23:25.312]                             if (!grepl(pattern, name)) 
[13:23:25.312]                               next
[13:23:25.312]                             invokeRestart(restart)
[13:23:25.312]                             muffled <- TRUE
[13:23:25.312]                             break
[13:23:25.312]                           }
[13:23:25.312]                         }
[13:23:25.312]                       }
[13:23:25.312]                       invisible(muffled)
[13:23:25.312]                     }
[13:23:25.312]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.312]                   }
[13:23:25.312]                 }
[13:23:25.312]                 else {
[13:23:25.312]                   if (TRUE) {
[13:23:25.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.312]                     {
[13:23:25.312]                       inherits <- base::inherits
[13:23:25.312]                       invokeRestart <- base::invokeRestart
[13:23:25.312]                       is.null <- base::is.null
[13:23:25.312]                       muffled <- FALSE
[13:23:25.312]                       if (inherits(cond, "message")) {
[13:23:25.312]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.312]                         if (muffled) 
[13:23:25.312]                           invokeRestart("muffleMessage")
[13:23:25.312]                       }
[13:23:25.312]                       else if (inherits(cond, "warning")) {
[13:23:25.312]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.312]                         if (muffled) 
[13:23:25.312]                           invokeRestart("muffleWarning")
[13:23:25.312]                       }
[13:23:25.312]                       else if (inherits(cond, "condition")) {
[13:23:25.312]                         if (!is.null(pattern)) {
[13:23:25.312]                           computeRestarts <- base::computeRestarts
[13:23:25.312]                           grepl <- base::grepl
[13:23:25.312]                           restarts <- computeRestarts(cond)
[13:23:25.312]                           for (restart in restarts) {
[13:23:25.312]                             name <- restart$name
[13:23:25.312]                             if (is.null(name)) 
[13:23:25.312]                               next
[13:23:25.312]                             if (!grepl(pattern, name)) 
[13:23:25.312]                               next
[13:23:25.312]                             invokeRestart(restart)
[13:23:25.312]                             muffled <- TRUE
[13:23:25.312]                             break
[13:23:25.312]                           }
[13:23:25.312]                         }
[13:23:25.312]                       }
[13:23:25.312]                       invisible(muffled)
[13:23:25.312]                     }
[13:23:25.312]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.312]                   }
[13:23:25.312]                 }
[13:23:25.312]             }
[13:23:25.312]         }))
[13:23:25.312]     }, error = function(ex) {
[13:23:25.312]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:25.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.312]                 ...future.rng), started = ...future.startTime, 
[13:23:25.312]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:25.312]             version = "1.8"), class = "FutureResult")
[13:23:25.312]     }, finally = {
[13:23:25.312]         if (!identical(...future.workdir, getwd())) 
[13:23:25.312]             setwd(...future.workdir)
[13:23:25.312]         {
[13:23:25.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:25.312]                 ...future.oldOptions$nwarnings <- NULL
[13:23:25.312]             }
[13:23:25.312]             base::options(...future.oldOptions)
[13:23:25.312]             if (.Platform$OS.type == "windows") {
[13:23:25.312]                 old_names <- names(...future.oldEnvVars)
[13:23:25.312]                 envs <- base::Sys.getenv()
[13:23:25.312]                 names <- names(envs)
[13:23:25.312]                 common <- intersect(names, old_names)
[13:23:25.312]                 added <- setdiff(names, old_names)
[13:23:25.312]                 removed <- setdiff(old_names, names)
[13:23:25.312]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:25.312]                   envs[common]]
[13:23:25.312]                 NAMES <- toupper(changed)
[13:23:25.312]                 args <- list()
[13:23:25.312]                 for (kk in seq_along(NAMES)) {
[13:23:25.312]                   name <- changed[[kk]]
[13:23:25.312]                   NAME <- NAMES[[kk]]
[13:23:25.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.312]                     next
[13:23:25.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.312]                 }
[13:23:25.312]                 NAMES <- toupper(added)
[13:23:25.312]                 for (kk in seq_along(NAMES)) {
[13:23:25.312]                   name <- added[[kk]]
[13:23:25.312]                   NAME <- NAMES[[kk]]
[13:23:25.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.312]                     next
[13:23:25.312]                   args[[name]] <- ""
[13:23:25.312]                 }
[13:23:25.312]                 NAMES <- toupper(removed)
[13:23:25.312]                 for (kk in seq_along(NAMES)) {
[13:23:25.312]                   name <- removed[[kk]]
[13:23:25.312]                   NAME <- NAMES[[kk]]
[13:23:25.312]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.312]                     next
[13:23:25.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.312]                 }
[13:23:25.312]                 if (length(args) > 0) 
[13:23:25.312]                   base::do.call(base::Sys.setenv, args = args)
[13:23:25.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:25.312]             }
[13:23:25.312]             else {
[13:23:25.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:25.312]             }
[13:23:25.312]             {
[13:23:25.312]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:25.312]                   0L) {
[13:23:25.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:25.312]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:25.312]                   base::options(opts)
[13:23:25.312]                 }
[13:23:25.312]                 {
[13:23:25.312]                   {
[13:23:25.312]                     NULL
[13:23:25.312]                     RNGkind("Mersenne-Twister")
[13:23:25.312]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:25.312]                       inherits = FALSE)
[13:23:25.312]                   }
[13:23:25.312]                   options(future.plan = NULL)
[13:23:25.312]                   if (is.na(NA_character_)) 
[13:23:25.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:25.312]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:25.312]                   {
[13:23:25.312]                     future <- SequentialFuture(..., envir = envir)
[13:23:25.312]                     if (!future$lazy) 
[13:23:25.312]                       future <- run(future)
[13:23:25.312]                     invisible(future)
[13:23:25.312]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:25.312]                 }
[13:23:25.312]             }
[13:23:25.312]         }
[13:23:25.312]     })
[13:23:25.312]     if (TRUE) {
[13:23:25.312]         base::sink(type = "output", split = FALSE)
[13:23:25.312]         if (TRUE) {
[13:23:25.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:25.312]         }
[13:23:25.312]         else {
[13:23:25.312]             ...future.result["stdout"] <- base::list(NULL)
[13:23:25.312]         }
[13:23:25.312]         base::close(...future.stdout)
[13:23:25.312]         ...future.stdout <- NULL
[13:23:25.312]     }
[13:23:25.312]     ...future.result$conditions <- ...future.conditions
[13:23:25.312]     ...future.result$finished <- base::Sys.time()
[13:23:25.312]     ...future.result
[13:23:25.312] }
[13:23:25.314] assign_globals() ...
[13:23:25.314] List of 1
[13:23:25.314]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:23:25.314]   .. ..@ .Data     :function (x)  
[13:23:25.314]   .. ..@ generic   : chr "my_fcn"
[13:23:25.314]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:23:25.314]   .. ..@ package   : chr ".GlobalEnv"
[13:23:25.314]   .. ..@ group     : list()
[13:23:25.314]   .. ..@ valueClass: chr(0) 
[13:23:25.314]   .. ..@ signature : chr "x"
[13:23:25.314]   .. ..@ default   : NULL
[13:23:25.314]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:23:25.314]  - attr(*, "where")=List of 1
[13:23:25.314]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:23:25.314]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:25.314]  - attr(*, "resolved")= logi FALSE
[13:23:25.314]  - attr(*, "total_size")= num 3936
[13:23:25.314]  - attr(*, "already-done")= logi TRUE
[13:23:25.324] - reassign environment for ‘my_fcn’
[13:23:25.324] - copied ‘my_fcn’ to environment
[13:23:25.324] assign_globals() ... done
[13:23:25.325] plan(): Setting new future strategy stack:
[13:23:25.325] List of future strategies:
[13:23:25.325] 1. sequential:
[13:23:25.325]    - args: function (..., envir = parent.frame())
[13:23:25.325]    - tweaked: FALSE
[13:23:25.325]    - call: NULL
[13:23:25.325] plan(): nbrOfWorkers() = 1
[13:23:25.327] plan(): Setting new future strategy stack:
[13:23:25.327] List of future strategies:
[13:23:25.327] 1. sequential:
[13:23:25.327]    - args: function (..., envir = parent.frame())
[13:23:25.327]    - tweaked: FALSE
[13:23:25.327]    - call: plan(strategy)
[13:23:25.327] plan(): nbrOfWorkers() = 1
[13:23:25.327] SequentialFuture started (and completed)
[13:23:25.328] - Launch lazy future ... done
[13:23:25.328] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x56024f9c2650>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:23:25.328] getGlobalsAndPackages() ...
[13:23:25.328] Searching for globals...
[13:23:25.333] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:25.333] Searching for globals ... DONE
[13:23:25.333] Resolving globals: FALSE
[13:23:25.333] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:25.334] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:25.334] - globals: [1] ‘my_fcn’
[13:23:25.334] 
[13:23:25.334] getGlobalsAndPackages() ... DONE
[13:23:25.334] run() for ‘Future’ ...
[13:23:25.334] - state: ‘created’
[13:23:25.335] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:25.335] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:25.335] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:25.335]   - Field: ‘label’
[13:23:25.335]   - Field: ‘local’
[13:23:25.335]   - Field: ‘owner’
[13:23:25.335]   - Field: ‘envir’
[13:23:25.336]   - Field: ‘packages’
[13:23:25.336]   - Field: ‘gc’
[13:23:25.336]   - Field: ‘conditions’
[13:23:25.336]   - Field: ‘expr’
[13:23:25.336]   - Field: ‘uuid’
[13:23:25.336]   - Field: ‘seed’
[13:23:25.336]   - Field: ‘version’
[13:23:25.336]   - Field: ‘result’
[13:23:25.336]   - Field: ‘asynchronous’
[13:23:25.336]   - Field: ‘calls’
[13:23:25.337]   - Field: ‘globals’
[13:23:25.337]   - Field: ‘stdout’
[13:23:25.337]   - Field: ‘earlySignal’
[13:23:25.337]   - Field: ‘lazy’
[13:23:25.337]   - Field: ‘state’
[13:23:25.337] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:25.337] - Launch lazy future ...
[13:23:25.337] Packages needed by the future expression (n = 0): <none>
[13:23:25.337] Packages needed by future strategies (n = 0): <none>
[13:23:25.338] {
[13:23:25.338]     {
[13:23:25.338]         {
[13:23:25.338]             ...future.startTime <- base::Sys.time()
[13:23:25.338]             {
[13:23:25.338]                 {
[13:23:25.338]                   {
[13:23:25.338]                     base::local({
[13:23:25.338]                       has_future <- base::requireNamespace("future", 
[13:23:25.338]                         quietly = TRUE)
[13:23:25.338]                       if (has_future) {
[13:23:25.338]                         ns <- base::getNamespace("future")
[13:23:25.338]                         version <- ns[[".package"]][["version"]]
[13:23:25.338]                         if (is.null(version)) 
[13:23:25.338]                           version <- utils::packageVersion("future")
[13:23:25.338]                       }
[13:23:25.338]                       else {
[13:23:25.338]                         version <- NULL
[13:23:25.338]                       }
[13:23:25.338]                       if (!has_future || version < "1.8.0") {
[13:23:25.338]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:25.338]                           "", base::R.version$version.string), 
[13:23:25.338]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:25.338]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:25.338]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:25.338]                             "release", "version")], collapse = " "), 
[13:23:25.338]                           hostname = base::Sys.info()[["nodename"]])
[13:23:25.338]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:25.338]                           info)
[13:23:25.338]                         info <- base::paste(info, collapse = "; ")
[13:23:25.338]                         if (!has_future) {
[13:23:25.338]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:25.338]                             info)
[13:23:25.338]                         }
[13:23:25.338]                         else {
[13:23:25.338]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:25.338]                             info, version)
[13:23:25.338]                         }
[13:23:25.338]                         base::stop(msg)
[13:23:25.338]                       }
[13:23:25.338]                     })
[13:23:25.338]                   }
[13:23:25.338]                   options(future.plan = NULL)
[13:23:25.338]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.338]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:25.338]                 }
[13:23:25.338]                 ...future.workdir <- getwd()
[13:23:25.338]             }
[13:23:25.338]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:25.338]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:25.338]         }
[13:23:25.338]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:25.338]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:25.338]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:25.338]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:25.338]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:25.338]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:25.338]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:25.338]             base::names(...future.oldOptions))
[13:23:25.338]     }
[13:23:25.338]     if (FALSE) {
[13:23:25.338]     }
[13:23:25.338]     else {
[13:23:25.338]         if (TRUE) {
[13:23:25.338]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:25.338]                 open = "w")
[13:23:25.338]         }
[13:23:25.338]         else {
[13:23:25.338]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:25.338]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:25.338]         }
[13:23:25.338]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:25.338]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:25.338]             base::sink(type = "output", split = FALSE)
[13:23:25.338]             base::close(...future.stdout)
[13:23:25.338]         }, add = TRUE)
[13:23:25.338]     }
[13:23:25.338]     ...future.frame <- base::sys.nframe()
[13:23:25.338]     ...future.conditions <- base::list()
[13:23:25.338]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:25.338]     if (FALSE) {
[13:23:25.338]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:25.338]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:25.338]     }
[13:23:25.338]     ...future.result <- base::tryCatch({
[13:23:25.338]         base::withCallingHandlers({
[13:23:25.338]             ...future.value <- base::withVisible(base::local({
[13:23:25.338]                 my_fcn(3)
[13:23:25.338]             }))
[13:23:25.338]             future::FutureResult(value = ...future.value$value, 
[13:23:25.338]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.338]                   ...future.rng), globalenv = if (FALSE) 
[13:23:25.338]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:25.338]                     ...future.globalenv.names))
[13:23:25.338]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:25.338]         }, condition = base::local({
[13:23:25.338]             c <- base::c
[13:23:25.338]             inherits <- base::inherits
[13:23:25.338]             invokeRestart <- base::invokeRestart
[13:23:25.338]             length <- base::length
[13:23:25.338]             list <- base::list
[13:23:25.338]             seq.int <- base::seq.int
[13:23:25.338]             signalCondition <- base::signalCondition
[13:23:25.338]             sys.calls <- base::sys.calls
[13:23:25.338]             `[[` <- base::`[[`
[13:23:25.338]             `+` <- base::`+`
[13:23:25.338]             `<<-` <- base::`<<-`
[13:23:25.338]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:25.338]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:25.338]                   3L)]
[13:23:25.338]             }
[13:23:25.338]             function(cond) {
[13:23:25.338]                 is_error <- inherits(cond, "error")
[13:23:25.338]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:25.338]                   NULL)
[13:23:25.338]                 if (is_error) {
[13:23:25.338]                   sessionInformation <- function() {
[13:23:25.338]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:25.338]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:25.338]                       search = base::search(), system = base::Sys.info())
[13:23:25.338]                   }
[13:23:25.338]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.338]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:25.338]                     cond$call), session = sessionInformation(), 
[13:23:25.338]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:25.338]                   signalCondition(cond)
[13:23:25.338]                 }
[13:23:25.338]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:25.338]                 "immediateCondition"))) {
[13:23:25.338]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:25.338]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.338]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:25.338]                   if (TRUE && !signal) {
[13:23:25.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.338]                     {
[13:23:25.338]                       inherits <- base::inherits
[13:23:25.338]                       invokeRestart <- base::invokeRestart
[13:23:25.338]                       is.null <- base::is.null
[13:23:25.338]                       muffled <- FALSE
[13:23:25.338]                       if (inherits(cond, "message")) {
[13:23:25.338]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.338]                         if (muffled) 
[13:23:25.338]                           invokeRestart("muffleMessage")
[13:23:25.338]                       }
[13:23:25.338]                       else if (inherits(cond, "warning")) {
[13:23:25.338]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.338]                         if (muffled) 
[13:23:25.338]                           invokeRestart("muffleWarning")
[13:23:25.338]                       }
[13:23:25.338]                       else if (inherits(cond, "condition")) {
[13:23:25.338]                         if (!is.null(pattern)) {
[13:23:25.338]                           computeRestarts <- base::computeRestarts
[13:23:25.338]                           grepl <- base::grepl
[13:23:25.338]                           restarts <- computeRestarts(cond)
[13:23:25.338]                           for (restart in restarts) {
[13:23:25.338]                             name <- restart$name
[13:23:25.338]                             if (is.null(name)) 
[13:23:25.338]                               next
[13:23:25.338]                             if (!grepl(pattern, name)) 
[13:23:25.338]                               next
[13:23:25.338]                             invokeRestart(restart)
[13:23:25.338]                             muffled <- TRUE
[13:23:25.338]                             break
[13:23:25.338]                           }
[13:23:25.338]                         }
[13:23:25.338]                       }
[13:23:25.338]                       invisible(muffled)
[13:23:25.338]                     }
[13:23:25.338]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.338]                   }
[13:23:25.338]                 }
[13:23:25.338]                 else {
[13:23:25.338]                   if (TRUE) {
[13:23:25.338]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.338]                     {
[13:23:25.338]                       inherits <- base::inherits
[13:23:25.338]                       invokeRestart <- base::invokeRestart
[13:23:25.338]                       is.null <- base::is.null
[13:23:25.338]                       muffled <- FALSE
[13:23:25.338]                       if (inherits(cond, "message")) {
[13:23:25.338]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.338]                         if (muffled) 
[13:23:25.338]                           invokeRestart("muffleMessage")
[13:23:25.338]                       }
[13:23:25.338]                       else if (inherits(cond, "warning")) {
[13:23:25.338]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.338]                         if (muffled) 
[13:23:25.338]                           invokeRestart("muffleWarning")
[13:23:25.338]                       }
[13:23:25.338]                       else if (inherits(cond, "condition")) {
[13:23:25.338]                         if (!is.null(pattern)) {
[13:23:25.338]                           computeRestarts <- base::computeRestarts
[13:23:25.338]                           grepl <- base::grepl
[13:23:25.338]                           restarts <- computeRestarts(cond)
[13:23:25.338]                           for (restart in restarts) {
[13:23:25.338]                             name <- restart$name
[13:23:25.338]                             if (is.null(name)) 
[13:23:25.338]                               next
[13:23:25.338]                             if (!grepl(pattern, name)) 
[13:23:25.338]                               next
[13:23:25.338]                             invokeRestart(restart)
[13:23:25.338]                             muffled <- TRUE
[13:23:25.338]                             break
[13:23:25.338]                           }
[13:23:25.338]                         }
[13:23:25.338]                       }
[13:23:25.338]                       invisible(muffled)
[13:23:25.338]                     }
[13:23:25.338]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.338]                   }
[13:23:25.338]                 }
[13:23:25.338]             }
[13:23:25.338]         }))
[13:23:25.338]     }, error = function(ex) {
[13:23:25.338]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:25.338]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.338]                 ...future.rng), started = ...future.startTime, 
[13:23:25.338]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:25.338]             version = "1.8"), class = "FutureResult")
[13:23:25.338]     }, finally = {
[13:23:25.338]         if (!identical(...future.workdir, getwd())) 
[13:23:25.338]             setwd(...future.workdir)
[13:23:25.338]         {
[13:23:25.338]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:25.338]                 ...future.oldOptions$nwarnings <- NULL
[13:23:25.338]             }
[13:23:25.338]             base::options(...future.oldOptions)
[13:23:25.338]             if (.Platform$OS.type == "windows") {
[13:23:25.338]                 old_names <- names(...future.oldEnvVars)
[13:23:25.338]                 envs <- base::Sys.getenv()
[13:23:25.338]                 names <- names(envs)
[13:23:25.338]                 common <- intersect(names, old_names)
[13:23:25.338]                 added <- setdiff(names, old_names)
[13:23:25.338]                 removed <- setdiff(old_names, names)
[13:23:25.338]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:25.338]                   envs[common]]
[13:23:25.338]                 NAMES <- toupper(changed)
[13:23:25.338]                 args <- list()
[13:23:25.338]                 for (kk in seq_along(NAMES)) {
[13:23:25.338]                   name <- changed[[kk]]
[13:23:25.338]                   NAME <- NAMES[[kk]]
[13:23:25.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.338]                     next
[13:23:25.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.338]                 }
[13:23:25.338]                 NAMES <- toupper(added)
[13:23:25.338]                 for (kk in seq_along(NAMES)) {
[13:23:25.338]                   name <- added[[kk]]
[13:23:25.338]                   NAME <- NAMES[[kk]]
[13:23:25.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.338]                     next
[13:23:25.338]                   args[[name]] <- ""
[13:23:25.338]                 }
[13:23:25.338]                 NAMES <- toupper(removed)
[13:23:25.338]                 for (kk in seq_along(NAMES)) {
[13:23:25.338]                   name <- removed[[kk]]
[13:23:25.338]                   NAME <- NAMES[[kk]]
[13:23:25.338]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.338]                     next
[13:23:25.338]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.338]                 }
[13:23:25.338]                 if (length(args) > 0) 
[13:23:25.338]                   base::do.call(base::Sys.setenv, args = args)
[13:23:25.338]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:25.338]             }
[13:23:25.338]             else {
[13:23:25.338]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:25.338]             }
[13:23:25.338]             {
[13:23:25.338]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:25.338]                   0L) {
[13:23:25.338]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:25.338]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:25.338]                   base::options(opts)
[13:23:25.338]                 }
[13:23:25.338]                 {
[13:23:25.338]                   {
[13:23:25.338]                     NULL
[13:23:25.338]                     RNGkind("Mersenne-Twister")
[13:23:25.338]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:25.338]                       inherits = FALSE)
[13:23:25.338]                   }
[13:23:25.338]                   options(future.plan = NULL)
[13:23:25.338]                   if (is.na(NA_character_)) 
[13:23:25.338]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.338]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:25.338]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:25.338]                   {
[13:23:25.338]                     future <- SequentialFuture(..., envir = envir)
[13:23:25.338]                     if (!future$lazy) 
[13:23:25.338]                       future <- run(future)
[13:23:25.338]                     invisible(future)
[13:23:25.338]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:25.338]                 }
[13:23:25.338]             }
[13:23:25.338]         }
[13:23:25.338]     })
[13:23:25.338]     if (TRUE) {
[13:23:25.338]         base::sink(type = "output", split = FALSE)
[13:23:25.338]         if (TRUE) {
[13:23:25.338]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:25.338]         }
[13:23:25.338]         else {
[13:23:25.338]             ...future.result["stdout"] <- base::list(NULL)
[13:23:25.338]         }
[13:23:25.338]         base::close(...future.stdout)
[13:23:25.338]         ...future.stdout <- NULL
[13:23:25.338]     }
[13:23:25.338]     ...future.result$conditions <- ...future.conditions
[13:23:25.338]     ...future.result$finished <- base::Sys.time()
[13:23:25.338]     ...future.result
[13:23:25.338] }
[13:23:25.340] assign_globals() ...
[13:23:25.340] List of 1
[13:23:25.340]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:23:25.340]   .. ..@ .Data     :function (x)  
[13:23:25.340]   .. ..@ generic   : chr "my_fcn"
[13:23:25.340]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:23:25.340]   .. ..@ package   : chr ".GlobalEnv"
[13:23:25.340]   .. ..@ group     : list()
[13:23:25.340]   .. ..@ valueClass: chr(0) 
[13:23:25.340]   .. ..@ signature : chr "x"
[13:23:25.340]   .. ..@ default   : NULL
[13:23:25.340]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:23:25.340]  - attr(*, "where")=List of 1
[13:23:25.340]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:23:25.340]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:25.340]  - attr(*, "resolved")= logi FALSE
[13:23:25.340]  - attr(*, "total_size")= num 3936
[13:23:25.340]  - attr(*, "already-done")= logi TRUE
[13:23:25.345] - reassign environment for ‘my_fcn’
[13:23:25.345] - copied ‘my_fcn’ to environment
[13:23:25.345] assign_globals() ... done
[13:23:25.345] plan(): Setting new future strategy stack:
[13:23:25.345] List of future strategies:
[13:23:25.345] 1. sequential:
[13:23:25.345]    - args: function (..., envir = parent.frame())
[13:23:25.345]    - tweaked: FALSE
[13:23:25.345]    - call: NULL
[13:23:25.346] plan(): nbrOfWorkers() = 1
[13:23:25.347] plan(): Setting new future strategy stack:
[13:23:25.347] List of future strategies:
[13:23:25.347] 1. sequential:
[13:23:25.347]    - args: function (..., envir = parent.frame())
[13:23:25.347]    - tweaked: FALSE
[13:23:25.347]    - call: plan(strategy)
[13:23:25.348] plan(): nbrOfWorkers() = 1
[13:23:25.348] SequentialFuture started (and completed)
[13:23:25.348] signalConditions() ...
[13:23:25.348]  - include = ‘immediateCondition’
[13:23:25.348]  - exclude = 
[13:23:25.348]  - resignal = FALSE
[13:23:25.349]  - Number of conditions: 1
[13:23:25.349] signalConditions() ... done
[13:23:25.349] - Launch lazy future ... done
[13:23:25.349] run() for ‘SequentialFuture’ ... done
[13:23:25.349] signalConditions() ...
[13:23:25.349]  - include = ‘immediateCondition’
[13:23:25.349]  - exclude = 
[13:23:25.349]  - resignal = FALSE
[13:23:25.349]  - Number of conditions: 1
[13:23:25.349] signalConditions() ... done
[13:23:25.351] Future state: ‘finished’
[13:23:25.351] signalConditions() ...
[13:23:25.351]  - include = ‘condition’
[13:23:25.352]  - exclude = ‘immediateCondition’
[13:23:25.352]  - resignal = TRUE
[13:23:25.352]  - Number of conditions: 1
[13:23:25.352]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:25.352] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[13:23:25.353] plan(): Setting new future strategy stack:
[13:23:25.353] List of future strategies:
[13:23:25.353] 1. multicore:
[13:23:25.353]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:25.353]    - tweaked: FALSE
[13:23:25.353]    - call: plan(strategy)
[13:23:25.357] plan(): nbrOfWorkers() = 2
[13:23:25.357] getGlobalsAndPackages() ...
[13:23:25.357] Searching for globals...
[13:23:25.359] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:25.359] Searching for globals ... DONE
[13:23:25.359] Resolving globals: FALSE
[13:23:25.360] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:25.360] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:25.360] - globals: [1] ‘my_fcn’
[13:23:25.360] 
[13:23:25.361] getGlobalsAndPackages() ... DONE
[13:23:25.361] run() for ‘Future’ ...
[13:23:25.361] - state: ‘created’
[13:23:25.361] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:25.365] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:25.365] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:25.365]   - Field: ‘label’
[13:23:25.365]   - Field: ‘local’
[13:23:25.365]   - Field: ‘owner’
[13:23:25.365]   - Field: ‘envir’
[13:23:25.365]   - Field: ‘workers’
[13:23:25.365]   - Field: ‘packages’
[13:23:25.366]   - Field: ‘gc’
[13:23:25.366]   - Field: ‘job’
[13:23:25.366]   - Field: ‘conditions’
[13:23:25.366]   - Field: ‘expr’
[13:23:25.366]   - Field: ‘uuid’
[13:23:25.366]   - Field: ‘seed’
[13:23:25.366]   - Field: ‘version’
[13:23:25.366]   - Field: ‘result’
[13:23:25.366]   - Field: ‘asynchronous’
[13:23:25.366]   - Field: ‘calls’
[13:23:25.366]   - Field: ‘globals’
[13:23:25.367]   - Field: ‘stdout’
[13:23:25.367]   - Field: ‘earlySignal’
[13:23:25.367]   - Field: ‘lazy’
[13:23:25.367]   - Field: ‘state’
[13:23:25.367] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:25.367] - Launch lazy future ...
[13:23:25.368] Packages needed by the future expression (n = 0): <none>
[13:23:25.368] Packages needed by future strategies (n = 0): <none>
[13:23:25.369] {
[13:23:25.369]     {
[13:23:25.369]         {
[13:23:25.369]             ...future.startTime <- base::Sys.time()
[13:23:25.369]             {
[13:23:25.369]                 {
[13:23:25.369]                   {
[13:23:25.369]                     {
[13:23:25.369]                       base::local({
[13:23:25.369]                         has_future <- base::requireNamespace("future", 
[13:23:25.369]                           quietly = TRUE)
[13:23:25.369]                         if (has_future) {
[13:23:25.369]                           ns <- base::getNamespace("future")
[13:23:25.369]                           version <- ns[[".package"]][["version"]]
[13:23:25.369]                           if (is.null(version)) 
[13:23:25.369]                             version <- utils::packageVersion("future")
[13:23:25.369]                         }
[13:23:25.369]                         else {
[13:23:25.369]                           version <- NULL
[13:23:25.369]                         }
[13:23:25.369]                         if (!has_future || version < "1.8.0") {
[13:23:25.369]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:25.369]                             "", base::R.version$version.string), 
[13:23:25.369]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:25.369]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:25.369]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:25.369]                               "release", "version")], collapse = " "), 
[13:23:25.369]                             hostname = base::Sys.info()[["nodename"]])
[13:23:25.369]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:25.369]                             info)
[13:23:25.369]                           info <- base::paste(info, collapse = "; ")
[13:23:25.369]                           if (!has_future) {
[13:23:25.369]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:25.369]                               info)
[13:23:25.369]                           }
[13:23:25.369]                           else {
[13:23:25.369]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:25.369]                               info, version)
[13:23:25.369]                           }
[13:23:25.369]                           base::stop(msg)
[13:23:25.369]                         }
[13:23:25.369]                       })
[13:23:25.369]                     }
[13:23:25.369]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:25.369]                     base::options(mc.cores = 1L)
[13:23:25.369]                   }
[13:23:25.369]                   options(future.plan = NULL)
[13:23:25.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.369]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:25.369]                 }
[13:23:25.369]                 ...future.workdir <- getwd()
[13:23:25.369]             }
[13:23:25.369]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:25.369]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:25.369]         }
[13:23:25.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:25.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:25.369]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:25.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:25.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:25.369]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:25.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:25.369]             base::names(...future.oldOptions))
[13:23:25.369]     }
[13:23:25.369]     if (FALSE) {
[13:23:25.369]     }
[13:23:25.369]     else {
[13:23:25.369]         if (TRUE) {
[13:23:25.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:25.369]                 open = "w")
[13:23:25.369]         }
[13:23:25.369]         else {
[13:23:25.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:25.369]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:25.369]         }
[13:23:25.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:25.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:25.369]             base::sink(type = "output", split = FALSE)
[13:23:25.369]             base::close(...future.stdout)
[13:23:25.369]         }, add = TRUE)
[13:23:25.369]     }
[13:23:25.369]     ...future.frame <- base::sys.nframe()
[13:23:25.369]     ...future.conditions <- base::list()
[13:23:25.369]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:25.369]     if (FALSE) {
[13:23:25.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:25.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:25.369]     }
[13:23:25.369]     ...future.result <- base::tryCatch({
[13:23:25.369]         base::withCallingHandlers({
[13:23:25.369]             ...future.value <- base::withVisible(base::local({
[13:23:25.369]                 withCallingHandlers({
[13:23:25.369]                   {
[13:23:25.369]                     my_fcn
[13:23:25.369]                   }
[13:23:25.369]                 }, immediateCondition = function(cond) {
[13:23:25.369]                   save_rds <- function (object, pathname, ...) 
[13:23:25.369]                   {
[13:23:25.369]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:25.369]                     if (file_test("-f", pathname_tmp)) {
[13:23:25.369]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.369]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:25.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.369]                         fi_tmp[["mtime"]])
[13:23:25.369]                     }
[13:23:25.369]                     tryCatch({
[13:23:25.369]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:25.369]                     }, error = function(ex) {
[13:23:25.369]                       msg <- conditionMessage(ex)
[13:23:25.369]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.369]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:25.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.369]                         fi_tmp[["mtime"]], msg)
[13:23:25.369]                       ex$message <- msg
[13:23:25.369]                       stop(ex)
[13:23:25.369]                     })
[13:23:25.369]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:25.369]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:25.369]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:25.369]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.369]                       fi <- file.info(pathname)
[13:23:25.369]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:25.369]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.369]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:25.369]                         fi[["size"]], fi[["mtime"]])
[13:23:25.369]                       stop(msg)
[13:23:25.369]                     }
[13:23:25.369]                     invisible(pathname)
[13:23:25.369]                   }
[13:23:25.369]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:25.369]                     rootPath = tempdir()) 
[13:23:25.369]                   {
[13:23:25.369]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:25.369]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:25.369]                       tmpdir = path, fileext = ".rds")
[13:23:25.369]                     save_rds(obj, file)
[13:23:25.369]                   }
[13:23:25.369]                   saveImmediateCondition(cond, path = "/tmp/RtmpKdp43o/.future/immediateConditions")
[13:23:25.369]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.369]                   {
[13:23:25.369]                     inherits <- base::inherits
[13:23:25.369]                     invokeRestart <- base::invokeRestart
[13:23:25.369]                     is.null <- base::is.null
[13:23:25.369]                     muffled <- FALSE
[13:23:25.369]                     if (inherits(cond, "message")) {
[13:23:25.369]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:25.369]                       if (muffled) 
[13:23:25.369]                         invokeRestart("muffleMessage")
[13:23:25.369]                     }
[13:23:25.369]                     else if (inherits(cond, "warning")) {
[13:23:25.369]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:25.369]                       if (muffled) 
[13:23:25.369]                         invokeRestart("muffleWarning")
[13:23:25.369]                     }
[13:23:25.369]                     else if (inherits(cond, "condition")) {
[13:23:25.369]                       if (!is.null(pattern)) {
[13:23:25.369]                         computeRestarts <- base::computeRestarts
[13:23:25.369]                         grepl <- base::grepl
[13:23:25.369]                         restarts <- computeRestarts(cond)
[13:23:25.369]                         for (restart in restarts) {
[13:23:25.369]                           name <- restart$name
[13:23:25.369]                           if (is.null(name)) 
[13:23:25.369]                             next
[13:23:25.369]                           if (!grepl(pattern, name)) 
[13:23:25.369]                             next
[13:23:25.369]                           invokeRestart(restart)
[13:23:25.369]                           muffled <- TRUE
[13:23:25.369]                           break
[13:23:25.369]                         }
[13:23:25.369]                       }
[13:23:25.369]                     }
[13:23:25.369]                     invisible(muffled)
[13:23:25.369]                   }
[13:23:25.369]                   muffleCondition(cond)
[13:23:25.369]                 })
[13:23:25.369]             }))
[13:23:25.369]             future::FutureResult(value = ...future.value$value, 
[13:23:25.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.369]                   ...future.rng), globalenv = if (FALSE) 
[13:23:25.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:25.369]                     ...future.globalenv.names))
[13:23:25.369]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:25.369]         }, condition = base::local({
[13:23:25.369]             c <- base::c
[13:23:25.369]             inherits <- base::inherits
[13:23:25.369]             invokeRestart <- base::invokeRestart
[13:23:25.369]             length <- base::length
[13:23:25.369]             list <- base::list
[13:23:25.369]             seq.int <- base::seq.int
[13:23:25.369]             signalCondition <- base::signalCondition
[13:23:25.369]             sys.calls <- base::sys.calls
[13:23:25.369]             `[[` <- base::`[[`
[13:23:25.369]             `+` <- base::`+`
[13:23:25.369]             `<<-` <- base::`<<-`
[13:23:25.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:25.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:25.369]                   3L)]
[13:23:25.369]             }
[13:23:25.369]             function(cond) {
[13:23:25.369]                 is_error <- inherits(cond, "error")
[13:23:25.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:25.369]                   NULL)
[13:23:25.369]                 if (is_error) {
[13:23:25.369]                   sessionInformation <- function() {
[13:23:25.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:25.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:25.369]                       search = base::search(), system = base::Sys.info())
[13:23:25.369]                   }
[13:23:25.369]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:25.369]                     cond$call), session = sessionInformation(), 
[13:23:25.369]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:25.369]                   signalCondition(cond)
[13:23:25.369]                 }
[13:23:25.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:25.369]                 "immediateCondition"))) {
[13:23:25.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:25.369]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:25.369]                   if (TRUE && !signal) {
[13:23:25.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.369]                     {
[13:23:25.369]                       inherits <- base::inherits
[13:23:25.369]                       invokeRestart <- base::invokeRestart
[13:23:25.369]                       is.null <- base::is.null
[13:23:25.369]                       muffled <- FALSE
[13:23:25.369]                       if (inherits(cond, "message")) {
[13:23:25.369]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.369]                         if (muffled) 
[13:23:25.369]                           invokeRestart("muffleMessage")
[13:23:25.369]                       }
[13:23:25.369]                       else if (inherits(cond, "warning")) {
[13:23:25.369]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.369]                         if (muffled) 
[13:23:25.369]                           invokeRestart("muffleWarning")
[13:23:25.369]                       }
[13:23:25.369]                       else if (inherits(cond, "condition")) {
[13:23:25.369]                         if (!is.null(pattern)) {
[13:23:25.369]                           computeRestarts <- base::computeRestarts
[13:23:25.369]                           grepl <- base::grepl
[13:23:25.369]                           restarts <- computeRestarts(cond)
[13:23:25.369]                           for (restart in restarts) {
[13:23:25.369]                             name <- restart$name
[13:23:25.369]                             if (is.null(name)) 
[13:23:25.369]                               next
[13:23:25.369]                             if (!grepl(pattern, name)) 
[13:23:25.369]                               next
[13:23:25.369]                             invokeRestart(restart)
[13:23:25.369]                             muffled <- TRUE
[13:23:25.369]                             break
[13:23:25.369]                           }
[13:23:25.369]                         }
[13:23:25.369]                       }
[13:23:25.369]                       invisible(muffled)
[13:23:25.369]                     }
[13:23:25.369]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.369]                   }
[13:23:25.369]                 }
[13:23:25.369]                 else {
[13:23:25.369]                   if (TRUE) {
[13:23:25.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.369]                     {
[13:23:25.369]                       inherits <- base::inherits
[13:23:25.369]                       invokeRestart <- base::invokeRestart
[13:23:25.369]                       is.null <- base::is.null
[13:23:25.369]                       muffled <- FALSE
[13:23:25.369]                       if (inherits(cond, "message")) {
[13:23:25.369]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.369]                         if (muffled) 
[13:23:25.369]                           invokeRestart("muffleMessage")
[13:23:25.369]                       }
[13:23:25.369]                       else if (inherits(cond, "warning")) {
[13:23:25.369]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.369]                         if (muffled) 
[13:23:25.369]                           invokeRestart("muffleWarning")
[13:23:25.369]                       }
[13:23:25.369]                       else if (inherits(cond, "condition")) {
[13:23:25.369]                         if (!is.null(pattern)) {
[13:23:25.369]                           computeRestarts <- base::computeRestarts
[13:23:25.369]                           grepl <- base::grepl
[13:23:25.369]                           restarts <- computeRestarts(cond)
[13:23:25.369]                           for (restart in restarts) {
[13:23:25.369]                             name <- restart$name
[13:23:25.369]                             if (is.null(name)) 
[13:23:25.369]                               next
[13:23:25.369]                             if (!grepl(pattern, name)) 
[13:23:25.369]                               next
[13:23:25.369]                             invokeRestart(restart)
[13:23:25.369]                             muffled <- TRUE
[13:23:25.369]                             break
[13:23:25.369]                           }
[13:23:25.369]                         }
[13:23:25.369]                       }
[13:23:25.369]                       invisible(muffled)
[13:23:25.369]                     }
[13:23:25.369]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.369]                   }
[13:23:25.369]                 }
[13:23:25.369]             }
[13:23:25.369]         }))
[13:23:25.369]     }, error = function(ex) {
[13:23:25.369]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:25.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.369]                 ...future.rng), started = ...future.startTime, 
[13:23:25.369]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:25.369]             version = "1.8"), class = "FutureResult")
[13:23:25.369]     }, finally = {
[13:23:25.369]         if (!identical(...future.workdir, getwd())) 
[13:23:25.369]             setwd(...future.workdir)
[13:23:25.369]         {
[13:23:25.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:25.369]                 ...future.oldOptions$nwarnings <- NULL
[13:23:25.369]             }
[13:23:25.369]             base::options(...future.oldOptions)
[13:23:25.369]             if (.Platform$OS.type == "windows") {
[13:23:25.369]                 old_names <- names(...future.oldEnvVars)
[13:23:25.369]                 envs <- base::Sys.getenv()
[13:23:25.369]                 names <- names(envs)
[13:23:25.369]                 common <- intersect(names, old_names)
[13:23:25.369]                 added <- setdiff(names, old_names)
[13:23:25.369]                 removed <- setdiff(old_names, names)
[13:23:25.369]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:25.369]                   envs[common]]
[13:23:25.369]                 NAMES <- toupper(changed)
[13:23:25.369]                 args <- list()
[13:23:25.369]                 for (kk in seq_along(NAMES)) {
[13:23:25.369]                   name <- changed[[kk]]
[13:23:25.369]                   NAME <- NAMES[[kk]]
[13:23:25.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.369]                     next
[13:23:25.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.369]                 }
[13:23:25.369]                 NAMES <- toupper(added)
[13:23:25.369]                 for (kk in seq_along(NAMES)) {
[13:23:25.369]                   name <- added[[kk]]
[13:23:25.369]                   NAME <- NAMES[[kk]]
[13:23:25.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.369]                     next
[13:23:25.369]                   args[[name]] <- ""
[13:23:25.369]                 }
[13:23:25.369]                 NAMES <- toupper(removed)
[13:23:25.369]                 for (kk in seq_along(NAMES)) {
[13:23:25.369]                   name <- removed[[kk]]
[13:23:25.369]                   NAME <- NAMES[[kk]]
[13:23:25.369]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.369]                     next
[13:23:25.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.369]                 }
[13:23:25.369]                 if (length(args) > 0) 
[13:23:25.369]                   base::do.call(base::Sys.setenv, args = args)
[13:23:25.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:25.369]             }
[13:23:25.369]             else {
[13:23:25.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:25.369]             }
[13:23:25.369]             {
[13:23:25.369]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:25.369]                   0L) {
[13:23:25.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:25.369]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:25.369]                   base::options(opts)
[13:23:25.369]                 }
[13:23:25.369]                 {
[13:23:25.369]                   {
[13:23:25.369]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:25.369]                     NULL
[13:23:25.369]                   }
[13:23:25.369]                   options(future.plan = NULL)
[13:23:25.369]                   if (is.na(NA_character_)) 
[13:23:25.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:25.369]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:25.369]                     envir = parent.frame()) 
[13:23:25.369]                   {
[13:23:25.369]                     default_workers <- missing(workers)
[13:23:25.369]                     if (is.function(workers)) 
[13:23:25.369]                       workers <- workers()
[13:23:25.369]                     workers <- structure(as.integer(workers), 
[13:23:25.369]                       class = class(workers))
[13:23:25.369]                     stop_if_not(is.finite(workers), workers >= 
[13:23:25.369]                       1L)
[13:23:25.369]                     if ((workers == 1L && !inherits(workers, 
[13:23:25.369]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:25.369]                       if (default_workers) 
[13:23:25.369]                         supportsMulticore(warn = TRUE)
[13:23:25.369]                       return(sequential(..., envir = envir))
[13:23:25.369]                     }
[13:23:25.369]                     oopts <- options(mc.cores = workers)
[13:23:25.369]                     on.exit(options(oopts))
[13:23:25.369]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:25.369]                       envir = envir)
[13:23:25.369]                     if (!future$lazy) 
[13:23:25.369]                       future <- run(future)
[13:23:25.369]                     invisible(future)
[13:23:25.369]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:25.369]                 }
[13:23:25.369]             }
[13:23:25.369]         }
[13:23:25.369]     })
[13:23:25.369]     if (TRUE) {
[13:23:25.369]         base::sink(type = "output", split = FALSE)
[13:23:25.369]         if (TRUE) {
[13:23:25.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:25.369]         }
[13:23:25.369]         else {
[13:23:25.369]             ...future.result["stdout"] <- base::list(NULL)
[13:23:25.369]         }
[13:23:25.369]         base::close(...future.stdout)
[13:23:25.369]         ...future.stdout <- NULL
[13:23:25.369]     }
[13:23:25.369]     ...future.result$conditions <- ...future.conditions
[13:23:25.369]     ...future.result$finished <- base::Sys.time()
[13:23:25.369]     ...future.result
[13:23:25.369] }
[13:23:25.371] assign_globals() ...
[13:23:25.371] List of 1
[13:23:25.371]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:23:25.371]   .. ..@ .Data     :function (x)  
[13:23:25.371]   .. ..@ generic   : chr "my_fcn"
[13:23:25.371]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:23:25.371]   .. ..@ package   : chr ".GlobalEnv"
[13:23:25.371]   .. ..@ group     : list()
[13:23:25.371]   .. ..@ valueClass: chr(0) 
[13:23:25.371]   .. ..@ signature : chr "x"
[13:23:25.371]   .. ..@ default   : NULL
[13:23:25.371]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:23:25.371]  - attr(*, "where")=List of 1
[13:23:25.371]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:23:25.371]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:25.371]  - attr(*, "resolved")= logi FALSE
[13:23:25.371]  - attr(*, "total_size")= num 3936
[13:23:25.371]  - attr(*, "already-done")= logi TRUE
[13:23:25.376] - reassign environment for ‘my_fcn’
[13:23:25.376] - copied ‘my_fcn’ to environment
[13:23:25.377] assign_globals() ... done
[13:23:25.377] requestCore(): workers = 2
[13:23:25.380] MulticoreFuture started
[13:23:25.380] - Launch lazy future ... done
[13:23:25.380] run() for ‘MulticoreFuture’ ... done
[13:23:25.380] plan(): Setting new future strategy stack:
[13:23:25.381] List of future strategies:
[13:23:25.381] 1. sequential:
[13:23:25.381]    - args: function (..., envir = parent.frame())
[13:23:25.381]    - tweaked: FALSE
[13:23:25.381]    - call: NULL
[13:23:25.381] result() for MulticoreFuture ...
[13:23:25.381] plan(): nbrOfWorkers() = 1
[13:23:25.383] plan(): Setting new future strategy stack:
[13:23:25.384] List of future strategies:
[13:23:25.384] 1. multicore:
[13:23:25.384]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:25.384]    - tweaked: FALSE
[13:23:25.384]    - call: plan(strategy)
[13:23:25.389] plan(): nbrOfWorkers() = 2
[13:23:25.395] result() for MulticoreFuture ...
[13:23:25.398] result() for MulticoreFuture ... done
[13:23:25.398] result() for MulticoreFuture ... done
[13:23:25.398] result() for MulticoreFuture ...
[13:23:25.398] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x56024faccd88>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:23:25.399] getGlobalsAndPackages() ...
[13:23:25.399] Searching for globals...
[13:23:25.403] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:25.403] Searching for globals ... DONE
[13:23:25.403] Resolving globals: FALSE
[13:23:25.404] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:25.404] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:25.404] - globals: [1] ‘my_fcn’
[13:23:25.404] 
[13:23:25.405] getGlobalsAndPackages() ... DONE
[13:23:25.405] run() for ‘Future’ ...
[13:23:25.405] - state: ‘created’
[13:23:25.405] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:23:25.409] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:25.409] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:23:25.410]   - Field: ‘label’
[13:23:25.410]   - Field: ‘local’
[13:23:25.410]   - Field: ‘owner’
[13:23:25.410]   - Field: ‘envir’
[13:23:25.410]   - Field: ‘workers’
[13:23:25.410]   - Field: ‘packages’
[13:23:25.410]   - Field: ‘gc’
[13:23:25.410]   - Field: ‘job’
[13:23:25.411]   - Field: ‘conditions’
[13:23:25.411]   - Field: ‘expr’
[13:23:25.411]   - Field: ‘uuid’
[13:23:25.411]   - Field: ‘seed’
[13:23:25.411]   - Field: ‘version’
[13:23:25.411]   - Field: ‘result’
[13:23:25.411]   - Field: ‘asynchronous’
[13:23:25.411]   - Field: ‘calls’
[13:23:25.411]   - Field: ‘globals’
[13:23:25.412]   - Field: ‘stdout’
[13:23:25.412]   - Field: ‘earlySignal’
[13:23:25.412]   - Field: ‘lazy’
[13:23:25.412]   - Field: ‘state’
[13:23:25.412] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:23:25.412] - Launch lazy future ...
[13:23:25.413] Packages needed by the future expression (n = 0): <none>
[13:23:25.413] Packages needed by future strategies (n = 0): <none>
[13:23:25.413] {
[13:23:25.413]     {
[13:23:25.413]         {
[13:23:25.413]             ...future.startTime <- base::Sys.time()
[13:23:25.413]             {
[13:23:25.413]                 {
[13:23:25.413]                   {
[13:23:25.413]                     {
[13:23:25.413]                       base::local({
[13:23:25.413]                         has_future <- base::requireNamespace("future", 
[13:23:25.413]                           quietly = TRUE)
[13:23:25.413]                         if (has_future) {
[13:23:25.413]                           ns <- base::getNamespace("future")
[13:23:25.413]                           version <- ns[[".package"]][["version"]]
[13:23:25.413]                           if (is.null(version)) 
[13:23:25.413]                             version <- utils::packageVersion("future")
[13:23:25.413]                         }
[13:23:25.413]                         else {
[13:23:25.413]                           version <- NULL
[13:23:25.413]                         }
[13:23:25.413]                         if (!has_future || version < "1.8.0") {
[13:23:25.413]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:25.413]                             "", base::R.version$version.string), 
[13:23:25.413]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:25.413]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:25.413]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:25.413]                               "release", "version")], collapse = " "), 
[13:23:25.413]                             hostname = base::Sys.info()[["nodename"]])
[13:23:25.413]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:25.413]                             info)
[13:23:25.413]                           info <- base::paste(info, collapse = "; ")
[13:23:25.413]                           if (!has_future) {
[13:23:25.413]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:25.413]                               info)
[13:23:25.413]                           }
[13:23:25.413]                           else {
[13:23:25.413]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:25.413]                               info, version)
[13:23:25.413]                           }
[13:23:25.413]                           base::stop(msg)
[13:23:25.413]                         }
[13:23:25.413]                       })
[13:23:25.413]                     }
[13:23:25.413]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:25.413]                     base::options(mc.cores = 1L)
[13:23:25.413]                   }
[13:23:25.413]                   options(future.plan = NULL)
[13:23:25.413]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.413]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:25.413]                 }
[13:23:25.413]                 ...future.workdir <- getwd()
[13:23:25.413]             }
[13:23:25.413]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:25.413]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:25.413]         }
[13:23:25.413]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:25.413]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:25.413]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:25.413]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:25.413]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:25.413]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:25.413]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:25.413]             base::names(...future.oldOptions))
[13:23:25.413]     }
[13:23:25.413]     if (FALSE) {
[13:23:25.413]     }
[13:23:25.413]     else {
[13:23:25.413]         if (TRUE) {
[13:23:25.413]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:25.413]                 open = "w")
[13:23:25.413]         }
[13:23:25.413]         else {
[13:23:25.413]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:25.413]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:25.413]         }
[13:23:25.413]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:25.413]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:25.413]             base::sink(type = "output", split = FALSE)
[13:23:25.413]             base::close(...future.stdout)
[13:23:25.413]         }, add = TRUE)
[13:23:25.413]     }
[13:23:25.413]     ...future.frame <- base::sys.nframe()
[13:23:25.413]     ...future.conditions <- base::list()
[13:23:25.413]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:25.413]     if (FALSE) {
[13:23:25.413]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:25.413]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:25.413]     }
[13:23:25.413]     ...future.result <- base::tryCatch({
[13:23:25.413]         base::withCallingHandlers({
[13:23:25.413]             ...future.value <- base::withVisible(base::local({
[13:23:25.413]                 withCallingHandlers({
[13:23:25.413]                   {
[13:23:25.413]                     my_fcn(3)
[13:23:25.413]                   }
[13:23:25.413]                 }, immediateCondition = function(cond) {
[13:23:25.413]                   save_rds <- function (object, pathname, ...) 
[13:23:25.413]                   {
[13:23:25.413]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:23:25.413]                     if (file_test("-f", pathname_tmp)) {
[13:23:25.413]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.413]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:23:25.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.413]                         fi_tmp[["mtime"]])
[13:23:25.413]                     }
[13:23:25.413]                     tryCatch({
[13:23:25.413]                       saveRDS(object, file = pathname_tmp, ...)
[13:23:25.413]                     }, error = function(ex) {
[13:23:25.413]                       msg <- conditionMessage(ex)
[13:23:25.413]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.413]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:23:25.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.413]                         fi_tmp[["mtime"]], msg)
[13:23:25.413]                       ex$message <- msg
[13:23:25.413]                       stop(ex)
[13:23:25.413]                     })
[13:23:25.413]                     stopifnot(file_test("-f", pathname_tmp))
[13:23:25.413]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:23:25.413]                     if (!res || file_test("-f", pathname_tmp)) {
[13:23:25.413]                       fi_tmp <- file.info(pathname_tmp)
[13:23:25.413]                       fi <- file.info(pathname)
[13:23:25.413]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:23:25.413]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:23:25.413]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:23:25.413]                         fi[["size"]], fi[["mtime"]])
[13:23:25.413]                       stop(msg)
[13:23:25.413]                     }
[13:23:25.413]                     invisible(pathname)
[13:23:25.413]                   }
[13:23:25.413]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:23:25.413]                     rootPath = tempdir()) 
[13:23:25.413]                   {
[13:23:25.413]                     obj <- list(time = Sys.time(), condition = cond)
[13:23:25.413]                     file <- tempfile(pattern = class(cond)[1], 
[13:23:25.413]                       tmpdir = path, fileext = ".rds")
[13:23:25.413]                     save_rds(obj, file)
[13:23:25.413]                   }
[13:23:25.413]                   saveImmediateCondition(cond, path = "/tmp/RtmpKdp43o/.future/immediateConditions")
[13:23:25.413]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.413]                   {
[13:23:25.413]                     inherits <- base::inherits
[13:23:25.413]                     invokeRestart <- base::invokeRestart
[13:23:25.413]                     is.null <- base::is.null
[13:23:25.413]                     muffled <- FALSE
[13:23:25.413]                     if (inherits(cond, "message")) {
[13:23:25.413]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:25.413]                       if (muffled) 
[13:23:25.413]                         invokeRestart("muffleMessage")
[13:23:25.413]                     }
[13:23:25.413]                     else if (inherits(cond, "warning")) {
[13:23:25.413]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:25.413]                       if (muffled) 
[13:23:25.413]                         invokeRestart("muffleWarning")
[13:23:25.413]                     }
[13:23:25.413]                     else if (inherits(cond, "condition")) {
[13:23:25.413]                       if (!is.null(pattern)) {
[13:23:25.413]                         computeRestarts <- base::computeRestarts
[13:23:25.413]                         grepl <- base::grepl
[13:23:25.413]                         restarts <- computeRestarts(cond)
[13:23:25.413]                         for (restart in restarts) {
[13:23:25.413]                           name <- restart$name
[13:23:25.413]                           if (is.null(name)) 
[13:23:25.413]                             next
[13:23:25.413]                           if (!grepl(pattern, name)) 
[13:23:25.413]                             next
[13:23:25.413]                           invokeRestart(restart)
[13:23:25.413]                           muffled <- TRUE
[13:23:25.413]                           break
[13:23:25.413]                         }
[13:23:25.413]                       }
[13:23:25.413]                     }
[13:23:25.413]                     invisible(muffled)
[13:23:25.413]                   }
[13:23:25.413]                   muffleCondition(cond)
[13:23:25.413]                 })
[13:23:25.413]             }))
[13:23:25.413]             future::FutureResult(value = ...future.value$value, 
[13:23:25.413]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.413]                   ...future.rng), globalenv = if (FALSE) 
[13:23:25.413]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:25.413]                     ...future.globalenv.names))
[13:23:25.413]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:25.413]         }, condition = base::local({
[13:23:25.413]             c <- base::c
[13:23:25.413]             inherits <- base::inherits
[13:23:25.413]             invokeRestart <- base::invokeRestart
[13:23:25.413]             length <- base::length
[13:23:25.413]             list <- base::list
[13:23:25.413]             seq.int <- base::seq.int
[13:23:25.413]             signalCondition <- base::signalCondition
[13:23:25.413]             sys.calls <- base::sys.calls
[13:23:25.413]             `[[` <- base::`[[`
[13:23:25.413]             `+` <- base::`+`
[13:23:25.413]             `<<-` <- base::`<<-`
[13:23:25.413]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:25.413]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:25.413]                   3L)]
[13:23:25.413]             }
[13:23:25.413]             function(cond) {
[13:23:25.413]                 is_error <- inherits(cond, "error")
[13:23:25.413]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:25.413]                   NULL)
[13:23:25.413]                 if (is_error) {
[13:23:25.413]                   sessionInformation <- function() {
[13:23:25.413]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:25.413]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:25.413]                       search = base::search(), system = base::Sys.info())
[13:23:25.413]                   }
[13:23:25.413]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.413]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:25.413]                     cond$call), session = sessionInformation(), 
[13:23:25.413]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:25.413]                   signalCondition(cond)
[13:23:25.413]                 }
[13:23:25.413]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:25.413]                 "immediateCondition"))) {
[13:23:25.413]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:25.413]                   ...future.conditions[[length(...future.conditions) + 
[13:23:25.413]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:25.413]                   if (TRUE && !signal) {
[13:23:25.413]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.413]                     {
[13:23:25.413]                       inherits <- base::inherits
[13:23:25.413]                       invokeRestart <- base::invokeRestart
[13:23:25.413]                       is.null <- base::is.null
[13:23:25.413]                       muffled <- FALSE
[13:23:25.413]                       if (inherits(cond, "message")) {
[13:23:25.413]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.413]                         if (muffled) 
[13:23:25.413]                           invokeRestart("muffleMessage")
[13:23:25.413]                       }
[13:23:25.413]                       else if (inherits(cond, "warning")) {
[13:23:25.413]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.413]                         if (muffled) 
[13:23:25.413]                           invokeRestart("muffleWarning")
[13:23:25.413]                       }
[13:23:25.413]                       else if (inherits(cond, "condition")) {
[13:23:25.413]                         if (!is.null(pattern)) {
[13:23:25.413]                           computeRestarts <- base::computeRestarts
[13:23:25.413]                           grepl <- base::grepl
[13:23:25.413]                           restarts <- computeRestarts(cond)
[13:23:25.413]                           for (restart in restarts) {
[13:23:25.413]                             name <- restart$name
[13:23:25.413]                             if (is.null(name)) 
[13:23:25.413]                               next
[13:23:25.413]                             if (!grepl(pattern, name)) 
[13:23:25.413]                               next
[13:23:25.413]                             invokeRestart(restart)
[13:23:25.413]                             muffled <- TRUE
[13:23:25.413]                             break
[13:23:25.413]                           }
[13:23:25.413]                         }
[13:23:25.413]                       }
[13:23:25.413]                       invisible(muffled)
[13:23:25.413]                     }
[13:23:25.413]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.413]                   }
[13:23:25.413]                 }
[13:23:25.413]                 else {
[13:23:25.413]                   if (TRUE) {
[13:23:25.413]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:25.413]                     {
[13:23:25.413]                       inherits <- base::inherits
[13:23:25.413]                       invokeRestart <- base::invokeRestart
[13:23:25.413]                       is.null <- base::is.null
[13:23:25.413]                       muffled <- FALSE
[13:23:25.413]                       if (inherits(cond, "message")) {
[13:23:25.413]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:25.413]                         if (muffled) 
[13:23:25.413]                           invokeRestart("muffleMessage")
[13:23:25.413]                       }
[13:23:25.413]                       else if (inherits(cond, "warning")) {
[13:23:25.413]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:25.413]                         if (muffled) 
[13:23:25.413]                           invokeRestart("muffleWarning")
[13:23:25.413]                       }
[13:23:25.413]                       else if (inherits(cond, "condition")) {
[13:23:25.413]                         if (!is.null(pattern)) {
[13:23:25.413]                           computeRestarts <- base::computeRestarts
[13:23:25.413]                           grepl <- base::grepl
[13:23:25.413]                           restarts <- computeRestarts(cond)
[13:23:25.413]                           for (restart in restarts) {
[13:23:25.413]                             name <- restart$name
[13:23:25.413]                             if (is.null(name)) 
[13:23:25.413]                               next
[13:23:25.413]                             if (!grepl(pattern, name)) 
[13:23:25.413]                               next
[13:23:25.413]                             invokeRestart(restart)
[13:23:25.413]                             muffled <- TRUE
[13:23:25.413]                             break
[13:23:25.413]                           }
[13:23:25.413]                         }
[13:23:25.413]                       }
[13:23:25.413]                       invisible(muffled)
[13:23:25.413]                     }
[13:23:25.413]                     muffleCondition(cond, pattern = "^muffle")
[13:23:25.413]                   }
[13:23:25.413]                 }
[13:23:25.413]             }
[13:23:25.413]         }))
[13:23:25.413]     }, error = function(ex) {
[13:23:25.413]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:25.413]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:25.413]                 ...future.rng), started = ...future.startTime, 
[13:23:25.413]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:25.413]             version = "1.8"), class = "FutureResult")
[13:23:25.413]     }, finally = {
[13:23:25.413]         if (!identical(...future.workdir, getwd())) 
[13:23:25.413]             setwd(...future.workdir)
[13:23:25.413]         {
[13:23:25.413]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:25.413]                 ...future.oldOptions$nwarnings <- NULL
[13:23:25.413]             }
[13:23:25.413]             base::options(...future.oldOptions)
[13:23:25.413]             if (.Platform$OS.type == "windows") {
[13:23:25.413]                 old_names <- names(...future.oldEnvVars)
[13:23:25.413]                 envs <- base::Sys.getenv()
[13:23:25.413]                 names <- names(envs)
[13:23:25.413]                 common <- intersect(names, old_names)
[13:23:25.413]                 added <- setdiff(names, old_names)
[13:23:25.413]                 removed <- setdiff(old_names, names)
[13:23:25.413]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:25.413]                   envs[common]]
[13:23:25.413]                 NAMES <- toupper(changed)
[13:23:25.413]                 args <- list()
[13:23:25.413]                 for (kk in seq_along(NAMES)) {
[13:23:25.413]                   name <- changed[[kk]]
[13:23:25.413]                   NAME <- NAMES[[kk]]
[13:23:25.413]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.413]                     next
[13:23:25.413]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.413]                 }
[13:23:25.413]                 NAMES <- toupper(added)
[13:23:25.413]                 for (kk in seq_along(NAMES)) {
[13:23:25.413]                   name <- added[[kk]]
[13:23:25.413]                   NAME <- NAMES[[kk]]
[13:23:25.413]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.413]                     next
[13:23:25.413]                   args[[name]] <- ""
[13:23:25.413]                 }
[13:23:25.413]                 NAMES <- toupper(removed)
[13:23:25.413]                 for (kk in seq_along(NAMES)) {
[13:23:25.413]                   name <- removed[[kk]]
[13:23:25.413]                   NAME <- NAMES[[kk]]
[13:23:25.413]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:25.413]                     next
[13:23:25.413]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:25.413]                 }
[13:23:25.413]                 if (length(args) > 0) 
[13:23:25.413]                   base::do.call(base::Sys.setenv, args = args)
[13:23:25.413]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:25.413]             }
[13:23:25.413]             else {
[13:23:25.413]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:25.413]             }
[13:23:25.413]             {
[13:23:25.413]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:25.413]                   0L) {
[13:23:25.413]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:25.413]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:25.413]                   base::options(opts)
[13:23:25.413]                 }
[13:23:25.413]                 {
[13:23:25.413]                   {
[13:23:25.413]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:25.413]                     NULL
[13:23:25.413]                   }
[13:23:25.413]                   options(future.plan = NULL)
[13:23:25.413]                   if (is.na(NA_character_)) 
[13:23:25.413]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:25.413]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:25.413]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:23:25.413]                     envir = parent.frame()) 
[13:23:25.413]                   {
[13:23:25.413]                     default_workers <- missing(workers)
[13:23:25.413]                     if (is.function(workers)) 
[13:23:25.413]                       workers <- workers()
[13:23:25.413]                     workers <- structure(as.integer(workers), 
[13:23:25.413]                       class = class(workers))
[13:23:25.413]                     stop_if_not(is.finite(workers), workers >= 
[13:23:25.413]                       1L)
[13:23:25.413]                     if ((workers == 1L && !inherits(workers, 
[13:23:25.413]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:23:25.413]                       if (default_workers) 
[13:23:25.413]                         supportsMulticore(warn = TRUE)
[13:23:25.413]                       return(sequential(..., envir = envir))
[13:23:25.413]                     }
[13:23:25.413]                     oopts <- options(mc.cores = workers)
[13:23:25.413]                     on.exit(options(oopts))
[13:23:25.413]                     future <- MulticoreFuture(..., workers = workers, 
[13:23:25.413]                       envir = envir)
[13:23:25.413]                     if (!future$lazy) 
[13:23:25.413]                       future <- run(future)
[13:23:25.413]                     invisible(future)
[13:23:25.413]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:25.413]                 }
[13:23:25.413]             }
[13:23:25.413]         }
[13:23:25.413]     })
[13:23:25.413]     if (TRUE) {
[13:23:25.413]         base::sink(type = "output", split = FALSE)
[13:23:25.413]         if (TRUE) {
[13:23:25.413]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:25.413]         }
[13:23:25.413]         else {
[13:23:25.413]             ...future.result["stdout"] <- base::list(NULL)
[13:23:25.413]         }
[13:23:25.413]         base::close(...future.stdout)
[13:23:25.413]         ...future.stdout <- NULL
[13:23:25.413]     }
[13:23:25.413]     ...future.result$conditions <- ...future.conditions
[13:23:25.413]     ...future.result$finished <- base::Sys.time()
[13:23:25.413]     ...future.result
[13:23:25.413] }
[13:23:25.416] assign_globals() ...
[13:23:25.416] List of 1
[13:23:25.416]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[13:23:25.416]   .. ..@ .Data     :function (x)  
[13:23:25.416]   .. ..@ generic   : chr "my_fcn"
[13:23:25.416]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[13:23:25.416]   .. ..@ package   : chr ".GlobalEnv"
[13:23:25.416]   .. ..@ group     : list()
[13:23:25.416]   .. ..@ valueClass: chr(0) 
[13:23:25.416]   .. ..@ signature : chr "x"
[13:23:25.416]   .. ..@ default   : NULL
[13:23:25.416]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[13:23:25.416]  - attr(*, "where")=List of 1
[13:23:25.416]   ..$ my_fcn:<environment: R_EmptyEnv> 
[13:23:25.416]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:23:25.416]  - attr(*, "resolved")= logi FALSE
[13:23:25.416]  - attr(*, "total_size")= num 3936
[13:23:25.416]  - attr(*, "already-done")= logi TRUE
[13:23:25.422] - reassign environment for ‘my_fcn’
[13:23:25.422] - copied ‘my_fcn’ to environment
[13:23:25.422] assign_globals() ... done
[13:23:25.422] requestCore(): workers = 2
[13:23:25.424] MulticoreFuture started
[13:23:25.425] - Launch lazy future ... done
[13:23:25.425] run() for ‘MulticoreFuture’ ... done
[13:23:25.425] result() for MulticoreFuture ...
[13:23:25.426] plan(): Setting new future strategy stack:
[13:23:25.426] List of future strategies:
[13:23:25.426] 1. sequential:
[13:23:25.426]    - args: function (..., envir = parent.frame())
[13:23:25.426]    - tweaked: FALSE
[13:23:25.426]    - call: NULL
[13:23:25.427] plan(): nbrOfWorkers() = 1
[13:23:25.429] plan(): Setting new future strategy stack:
[13:23:25.429] List of future strategies:
[13:23:25.429] 1. multicore:
[13:23:25.429]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:23:25.429]    - tweaked: FALSE
[13:23:25.429]    - call: plan(strategy)
[13:23:25.435] plan(): nbrOfWorkers() = 2
[13:23:25.452] result() for MulticoreFuture ...
[13:23:25.455] result() for MulticoreFuture ... done
[13:23:25.455] signalConditions() ...
[13:23:25.455]  - include = ‘immediateCondition’
[13:23:25.455]  - exclude = 
[13:23:25.455]  - resignal = FALSE
[13:23:25.456]  - Number of conditions: 1
[13:23:25.456] signalConditions() ... done
[13:23:25.456] result() for MulticoreFuture ... done
[13:23:25.456] result() for MulticoreFuture ...
[13:23:25.456] result() for MulticoreFuture ... done
[13:23:25.456] signalConditions() ...
[13:23:25.457]  - include = ‘immediateCondition’
[13:23:25.457]  - exclude = 
[13:23:25.457]  - resignal = FALSE
[13:23:25.457]  - Number of conditions: 1
[13:23:25.457] signalConditions() ... done
[13:23:25.457] Future state: ‘finished’
[13:23:25.457] result() for MulticoreFuture ...
[13:23:25.458] result() for MulticoreFuture ... done
[13:23:25.458] signalConditions() ...
[13:23:25.458]  - include = ‘condition’
[13:23:25.458]  - exclude = ‘immediateCondition’
[13:23:25.458]  - resignal = TRUE
[13:23:25.458]  - Number of conditions: 1
[13:23:25.458]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:23:25.459] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[13:23:25.460] plan(): Setting new future strategy stack:
[13:23:25.460] List of future strategies:
[13:23:25.460] 1. multisession:
[13:23:25.460]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:25.460]    - tweaked: FALSE
[13:23:25.460]    - call: plan(strategy)
[13:23:25.460] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:25.460] multisession:
[13:23:25.460] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:23:25.460] - tweaked: FALSE
[13:23:25.460] - call: plan(strategy)
[13:23:25.467] getGlobalsAndPackages() ...
[13:23:25.468] Not searching for globals
[13:23:25.468] - globals: [0] <none>
[13:23:25.468] getGlobalsAndPackages() ... DONE
[13:23:25.469] [local output] makeClusterPSOCK() ...
[13:23:25.517] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:25.518] [local output] Base port: 11542
[13:23:25.518] [local output] Getting setup options for 2 cluster nodes ...
[13:23:25.518] [local output]  - Node 1 of 2 ...
[13:23:25.518] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:25.519] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdp43o/worker.rank=1.parallelly.parent=86516.151f47f82b7d8.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpKdp43o/worker.rank=1.parallelly.parent=86516.151f47f82b7d8.pid")'’
[13:23:25.715] - Possible to infer worker's PID: TRUE
[13:23:25.715] [local output] Rscript port: 11542

[13:23:25.716] [local output]  - Node 2 of 2 ...
[13:23:25.716] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:25.717] [local output] Rscript port: 11542

[13:23:25.717] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:25.717] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:25.718] [local output] Setting up PSOCK nodes in parallel
[13:23:25.718] List of 36
[13:23:25.718]  $ worker          : chr "localhost"
[13:23:25.718]   ..- attr(*, "localhost")= logi TRUE
[13:23:25.718]  $ master          : chr "localhost"
[13:23:25.718]  $ port            : int 11542
[13:23:25.718]  $ connectTimeout  : num 120
[13:23:25.718]  $ timeout         : num 2592000
[13:23:25.718]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:25.718]  $ homogeneous     : logi TRUE
[13:23:25.718]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:25.718]  $ rscript_envs    : NULL
[13:23:25.718]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:25.718]  $ rscript_startup : NULL
[13:23:25.718]  $ rscript_sh      : chr "sh"
[13:23:25.718]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:25.718]  $ methods         : logi TRUE
[13:23:25.718]  $ socketOptions   : chr "no-delay"
[13:23:25.718]  $ useXDR          : logi FALSE
[13:23:25.718]  $ outfile         : chr "/dev/null"
[13:23:25.718]  $ renice          : int NA
[13:23:25.718]  $ rshcmd          : NULL
[13:23:25.718]  $ user            : chr(0) 
[13:23:25.718]  $ revtunnel       : logi FALSE
[13:23:25.718]  $ rshlogfile      : NULL
[13:23:25.718]  $ rshopts         : chr(0) 
[13:23:25.718]  $ rank            : int 1
[13:23:25.718]  $ manual          : logi FALSE
[13:23:25.718]  $ dryrun          : logi FALSE
[13:23:25.718]  $ quiet           : logi FALSE
[13:23:25.718]  $ setup_strategy  : chr "parallel"
[13:23:25.718]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:25.718]  $ pidfile         : chr "/tmp/RtmpKdp43o/worker.rank=1.parallelly.parent=86516.151f47f82b7d8.pid"
[13:23:25.718]  $ rshcmd_label    : NULL
[13:23:25.718]  $ rsh_call        : NULL
[13:23:25.718]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:25.718]  $ localMachine    : logi TRUE
[13:23:25.718]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:25.718]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:25.718]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:25.718]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:25.718]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:25.718]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:25.718]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:25.718]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:25.718]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:25.718]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:25.718]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:25.718]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:25.718]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:25.718]  $ arguments       :List of 28
[13:23:25.718]   ..$ worker          : chr "localhost"
[13:23:25.718]   ..$ master          : NULL
[13:23:25.718]   ..$ port            : int 11542
[13:23:25.718]   ..$ connectTimeout  : num 120
[13:23:25.718]   ..$ timeout         : num 2592000
[13:23:25.718]   ..$ rscript         : NULL
[13:23:25.718]   ..$ homogeneous     : NULL
[13:23:25.718]   ..$ rscript_args    : NULL
[13:23:25.718]   ..$ rscript_envs    : NULL
[13:23:25.718]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:25.718]   ..$ rscript_startup : NULL
[13:23:25.718]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:25.718]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:25.718]   ..$ methods         : logi TRUE
[13:23:25.718]   ..$ socketOptions   : chr "no-delay"
[13:23:25.718]   ..$ useXDR          : logi FALSE
[13:23:25.718]   ..$ outfile         : chr "/dev/null"
[13:23:25.718]   ..$ renice          : int NA
[13:23:25.718]   ..$ rshcmd          : NULL
[13:23:25.718]   ..$ user            : NULL
[13:23:25.718]   ..$ revtunnel       : logi NA
[13:23:25.718]   ..$ rshlogfile      : NULL
[13:23:25.718]   ..$ rshopts         : NULL
[13:23:25.718]   ..$ rank            : int 1
[13:23:25.718]   ..$ manual          : logi FALSE
[13:23:25.718]   ..$ dryrun          : logi FALSE
[13:23:25.718]   ..$ quiet           : logi FALSE
[13:23:25.718]   ..$ setup_strategy  : chr "parallel"
[13:23:25.718]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:25.736] [local output] System call to launch all workers:
[13:23:25.736] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKdp43o/worker.rank=1.parallelly.parent=86516.151f47f82b7d8.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11542 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:25.736] [local output] Starting PSOCK main server
[13:23:25.741] [local output] Workers launched
[13:23:25.742] [local output] Waiting for workers to connect back
[13:23:25.742]  - [local output] 0 workers out of 2 ready
[13:23:25.985]  - [local output] 0 workers out of 2 ready
[13:23:25.985]  - [local output] 1 workers out of 2 ready
[13:23:26.002]  - [local output] 1 workers out of 2 ready
[13:23:26.003]  - [local output] 2 workers out of 2 ready
[13:23:26.003] [local output] Launching of workers completed
[13:23:26.003] [local output] Collecting session information from workers
[13:23:26.004] [local output]  - Worker #1 of 2
[13:23:26.005] [local output]  - Worker #2 of 2
[13:23:26.005] [local output] makeClusterPSOCK() ... done
[13:23:26.017] Packages needed by the future expression (n = 0): <none>
[13:23:26.017] Packages needed by future strategies (n = 0): <none>
[13:23:26.017] {
[13:23:26.017]     {
[13:23:26.017]         {
[13:23:26.017]             ...future.startTime <- base::Sys.time()
[13:23:26.017]             {
[13:23:26.017]                 {
[13:23:26.017]                   {
[13:23:26.017]                     {
[13:23:26.017]                       base::local({
[13:23:26.017]                         has_future <- base::requireNamespace("future", 
[13:23:26.017]                           quietly = TRUE)
[13:23:26.017]                         if (has_future) {
[13:23:26.017]                           ns <- base::getNamespace("future")
[13:23:26.017]                           version <- ns[[".package"]][["version"]]
[13:23:26.017]                           if (is.null(version)) 
[13:23:26.017]                             version <- utils::packageVersion("future")
[13:23:26.017]                         }
[13:23:26.017]                         else {
[13:23:26.017]                           version <- NULL
[13:23:26.017]                         }
[13:23:26.017]                         if (!has_future || version < "1.8.0") {
[13:23:26.017]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:26.017]                             "", base::R.version$version.string), 
[13:23:26.017]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:26.017]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:26.017]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:26.017]                               "release", "version")], collapse = " "), 
[13:23:26.017]                             hostname = base::Sys.info()[["nodename"]])
[13:23:26.017]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:26.017]                             info)
[13:23:26.017]                           info <- base::paste(info, collapse = "; ")
[13:23:26.017]                           if (!has_future) {
[13:23:26.017]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:26.017]                               info)
[13:23:26.017]                           }
[13:23:26.017]                           else {
[13:23:26.017]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:26.017]                               info, version)
[13:23:26.017]                           }
[13:23:26.017]                           base::stop(msg)
[13:23:26.017]                         }
[13:23:26.017]                       })
[13:23:26.017]                     }
[13:23:26.017]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:26.017]                     base::options(mc.cores = 1L)
[13:23:26.017]                   }
[13:23:26.017]                   options(future.plan = NULL)
[13:23:26.017]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.017]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:26.017]                 }
[13:23:26.017]                 ...future.workdir <- getwd()
[13:23:26.017]             }
[13:23:26.017]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:26.017]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:26.017]         }
[13:23:26.017]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:26.017]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:26.017]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:26.017]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:26.017]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:26.017]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:26.017]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:26.017]             base::names(...future.oldOptions))
[13:23:26.017]     }
[13:23:26.017]     if (FALSE) {
[13:23:26.017]     }
[13:23:26.017]     else {
[13:23:26.017]         if (TRUE) {
[13:23:26.017]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:26.017]                 open = "w")
[13:23:26.017]         }
[13:23:26.017]         else {
[13:23:26.017]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:26.017]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:26.017]         }
[13:23:26.017]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:26.017]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:26.017]             base::sink(type = "output", split = FALSE)
[13:23:26.017]             base::close(...future.stdout)
[13:23:26.017]         }, add = TRUE)
[13:23:26.017]     }
[13:23:26.017]     ...future.frame <- base::sys.nframe()
[13:23:26.017]     ...future.conditions <- base::list()
[13:23:26.017]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:26.017]     if (FALSE) {
[13:23:26.017]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:26.017]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:26.017]     }
[13:23:26.017]     ...future.result <- base::tryCatch({
[13:23:26.017]         base::withCallingHandlers({
[13:23:26.017]             ...future.value <- base::withVisible(base::local({
[13:23:26.017]                 ...future.makeSendCondition <- base::local({
[13:23:26.017]                   sendCondition <- NULL
[13:23:26.017]                   function(frame = 1L) {
[13:23:26.017]                     if (is.function(sendCondition)) 
[13:23:26.017]                       return(sendCondition)
[13:23:26.017]                     ns <- getNamespace("parallel")
[13:23:26.017]                     if (exists("sendData", mode = "function", 
[13:23:26.017]                       envir = ns)) {
[13:23:26.017]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:26.017]                         envir = ns)
[13:23:26.017]                       envir <- sys.frame(frame)
[13:23:26.017]                       master <- NULL
[13:23:26.017]                       while (!identical(envir, .GlobalEnv) && 
[13:23:26.017]                         !identical(envir, emptyenv())) {
[13:23:26.017]                         if (exists("master", mode = "list", envir = envir, 
[13:23:26.017]                           inherits = FALSE)) {
[13:23:26.017]                           master <- get("master", mode = "list", 
[13:23:26.017]                             envir = envir, inherits = FALSE)
[13:23:26.017]                           if (inherits(master, c("SOCKnode", 
[13:23:26.017]                             "SOCK0node"))) {
[13:23:26.017]                             sendCondition <<- function(cond) {
[13:23:26.017]                               data <- list(type = "VALUE", value = cond, 
[13:23:26.017]                                 success = TRUE)
[13:23:26.017]                               parallel_sendData(master, data)
[13:23:26.017]                             }
[13:23:26.017]                             return(sendCondition)
[13:23:26.017]                           }
[13:23:26.017]                         }
[13:23:26.017]                         frame <- frame + 1L
[13:23:26.017]                         envir <- sys.frame(frame)
[13:23:26.017]                       }
[13:23:26.017]                     }
[13:23:26.017]                     sendCondition <<- function(cond) NULL
[13:23:26.017]                   }
[13:23:26.017]                 })
[13:23:26.017]                 withCallingHandlers({
[13:23:26.017]                   NA
[13:23:26.017]                 }, immediateCondition = function(cond) {
[13:23:26.017]                   sendCondition <- ...future.makeSendCondition()
[13:23:26.017]                   sendCondition(cond)
[13:23:26.017]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.017]                   {
[13:23:26.017]                     inherits <- base::inherits
[13:23:26.017]                     invokeRestart <- base::invokeRestart
[13:23:26.017]                     is.null <- base::is.null
[13:23:26.017]                     muffled <- FALSE
[13:23:26.017]                     if (inherits(cond, "message")) {
[13:23:26.017]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:26.017]                       if (muffled) 
[13:23:26.017]                         invokeRestart("muffleMessage")
[13:23:26.017]                     }
[13:23:26.017]                     else if (inherits(cond, "warning")) {
[13:23:26.017]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:26.017]                       if (muffled) 
[13:23:26.017]                         invokeRestart("muffleWarning")
[13:23:26.017]                     }
[13:23:26.017]                     else if (inherits(cond, "condition")) {
[13:23:26.017]                       if (!is.null(pattern)) {
[13:23:26.017]                         computeRestarts <- base::computeRestarts
[13:23:26.017]                         grepl <- base::grepl
[13:23:26.017]                         restarts <- computeRestarts(cond)
[13:23:26.017]                         for (restart in restarts) {
[13:23:26.017]                           name <- restart$name
[13:23:26.017]                           if (is.null(name)) 
[13:23:26.017]                             next
[13:23:26.017]                           if (!grepl(pattern, name)) 
[13:23:26.017]                             next
[13:23:26.017]                           invokeRestart(restart)
[13:23:26.017]                           muffled <- TRUE
[13:23:26.017]                           break
[13:23:26.017]                         }
[13:23:26.017]                       }
[13:23:26.017]                     }
[13:23:26.017]                     invisible(muffled)
[13:23:26.017]                   }
[13:23:26.017]                   muffleCondition(cond)
[13:23:26.017]                 })
[13:23:26.017]             }))
[13:23:26.017]             future::FutureResult(value = ...future.value$value, 
[13:23:26.017]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.017]                   ...future.rng), globalenv = if (FALSE) 
[13:23:26.017]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:26.017]                     ...future.globalenv.names))
[13:23:26.017]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:26.017]         }, condition = base::local({
[13:23:26.017]             c <- base::c
[13:23:26.017]             inherits <- base::inherits
[13:23:26.017]             invokeRestart <- base::invokeRestart
[13:23:26.017]             length <- base::length
[13:23:26.017]             list <- base::list
[13:23:26.017]             seq.int <- base::seq.int
[13:23:26.017]             signalCondition <- base::signalCondition
[13:23:26.017]             sys.calls <- base::sys.calls
[13:23:26.017]             `[[` <- base::`[[`
[13:23:26.017]             `+` <- base::`+`
[13:23:26.017]             `<<-` <- base::`<<-`
[13:23:26.017]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:26.017]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:26.017]                   3L)]
[13:23:26.017]             }
[13:23:26.017]             function(cond) {
[13:23:26.017]                 is_error <- inherits(cond, "error")
[13:23:26.017]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:26.017]                   NULL)
[13:23:26.017]                 if (is_error) {
[13:23:26.017]                   sessionInformation <- function() {
[13:23:26.017]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:26.017]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:26.017]                       search = base::search(), system = base::Sys.info())
[13:23:26.017]                   }
[13:23:26.017]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.017]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:26.017]                     cond$call), session = sessionInformation(), 
[13:23:26.017]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:26.017]                   signalCondition(cond)
[13:23:26.017]                 }
[13:23:26.017]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:26.017]                 "immediateCondition"))) {
[13:23:26.017]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:26.017]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.017]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:26.017]                   if (TRUE && !signal) {
[13:23:26.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.017]                     {
[13:23:26.017]                       inherits <- base::inherits
[13:23:26.017]                       invokeRestart <- base::invokeRestart
[13:23:26.017]                       is.null <- base::is.null
[13:23:26.017]                       muffled <- FALSE
[13:23:26.017]                       if (inherits(cond, "message")) {
[13:23:26.017]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.017]                         if (muffled) 
[13:23:26.017]                           invokeRestart("muffleMessage")
[13:23:26.017]                       }
[13:23:26.017]                       else if (inherits(cond, "warning")) {
[13:23:26.017]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.017]                         if (muffled) 
[13:23:26.017]                           invokeRestart("muffleWarning")
[13:23:26.017]                       }
[13:23:26.017]                       else if (inherits(cond, "condition")) {
[13:23:26.017]                         if (!is.null(pattern)) {
[13:23:26.017]                           computeRestarts <- base::computeRestarts
[13:23:26.017]                           grepl <- base::grepl
[13:23:26.017]                           restarts <- computeRestarts(cond)
[13:23:26.017]                           for (restart in restarts) {
[13:23:26.017]                             name <- restart$name
[13:23:26.017]                             if (is.null(name)) 
[13:23:26.017]                               next
[13:23:26.017]                             if (!grepl(pattern, name)) 
[13:23:26.017]                               next
[13:23:26.017]                             invokeRestart(restart)
[13:23:26.017]                             muffled <- TRUE
[13:23:26.017]                             break
[13:23:26.017]                           }
[13:23:26.017]                         }
[13:23:26.017]                       }
[13:23:26.017]                       invisible(muffled)
[13:23:26.017]                     }
[13:23:26.017]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.017]                   }
[13:23:26.017]                 }
[13:23:26.017]                 else {
[13:23:26.017]                   if (TRUE) {
[13:23:26.017]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.017]                     {
[13:23:26.017]                       inherits <- base::inherits
[13:23:26.017]                       invokeRestart <- base::invokeRestart
[13:23:26.017]                       is.null <- base::is.null
[13:23:26.017]                       muffled <- FALSE
[13:23:26.017]                       if (inherits(cond, "message")) {
[13:23:26.017]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.017]                         if (muffled) 
[13:23:26.017]                           invokeRestart("muffleMessage")
[13:23:26.017]                       }
[13:23:26.017]                       else if (inherits(cond, "warning")) {
[13:23:26.017]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.017]                         if (muffled) 
[13:23:26.017]                           invokeRestart("muffleWarning")
[13:23:26.017]                       }
[13:23:26.017]                       else if (inherits(cond, "condition")) {
[13:23:26.017]                         if (!is.null(pattern)) {
[13:23:26.017]                           computeRestarts <- base::computeRestarts
[13:23:26.017]                           grepl <- base::grepl
[13:23:26.017]                           restarts <- computeRestarts(cond)
[13:23:26.017]                           for (restart in restarts) {
[13:23:26.017]                             name <- restart$name
[13:23:26.017]                             if (is.null(name)) 
[13:23:26.017]                               next
[13:23:26.017]                             if (!grepl(pattern, name)) 
[13:23:26.017]                               next
[13:23:26.017]                             invokeRestart(restart)
[13:23:26.017]                             muffled <- TRUE
[13:23:26.017]                             break
[13:23:26.017]                           }
[13:23:26.017]                         }
[13:23:26.017]                       }
[13:23:26.017]                       invisible(muffled)
[13:23:26.017]                     }
[13:23:26.017]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.017]                   }
[13:23:26.017]                 }
[13:23:26.017]             }
[13:23:26.017]         }))
[13:23:26.017]     }, error = function(ex) {
[13:23:26.017]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:26.017]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.017]                 ...future.rng), started = ...future.startTime, 
[13:23:26.017]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:26.017]             version = "1.8"), class = "FutureResult")
[13:23:26.017]     }, finally = {
[13:23:26.017]         if (!identical(...future.workdir, getwd())) 
[13:23:26.017]             setwd(...future.workdir)
[13:23:26.017]         {
[13:23:26.017]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:26.017]                 ...future.oldOptions$nwarnings <- NULL
[13:23:26.017]             }
[13:23:26.017]             base::options(...future.oldOptions)
[13:23:26.017]             if (.Platform$OS.type == "windows") {
[13:23:26.017]                 old_names <- names(...future.oldEnvVars)
[13:23:26.017]                 envs <- base::Sys.getenv()
[13:23:26.017]                 names <- names(envs)
[13:23:26.017]                 common <- intersect(names, old_names)
[13:23:26.017]                 added <- setdiff(names, old_names)
[13:23:26.017]                 removed <- setdiff(old_names, names)
[13:23:26.017]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:26.017]                   envs[common]]
[13:23:26.017]                 NAMES <- toupper(changed)
[13:23:26.017]                 args <- list()
[13:23:26.017]                 for (kk in seq_along(NAMES)) {
[13:23:26.017]                   name <- changed[[kk]]
[13:23:26.017]                   NAME <- NAMES[[kk]]
[13:23:26.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.017]                     next
[13:23:26.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.017]                 }
[13:23:26.017]                 NAMES <- toupper(added)
[13:23:26.017]                 for (kk in seq_along(NAMES)) {
[13:23:26.017]                   name <- added[[kk]]
[13:23:26.017]                   NAME <- NAMES[[kk]]
[13:23:26.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.017]                     next
[13:23:26.017]                   args[[name]] <- ""
[13:23:26.017]                 }
[13:23:26.017]                 NAMES <- toupper(removed)
[13:23:26.017]                 for (kk in seq_along(NAMES)) {
[13:23:26.017]                   name <- removed[[kk]]
[13:23:26.017]                   NAME <- NAMES[[kk]]
[13:23:26.017]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.017]                     next
[13:23:26.017]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.017]                 }
[13:23:26.017]                 if (length(args) > 0) 
[13:23:26.017]                   base::do.call(base::Sys.setenv, args = args)
[13:23:26.017]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:26.017]             }
[13:23:26.017]             else {
[13:23:26.017]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:26.017]             }
[13:23:26.017]             {
[13:23:26.017]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:26.017]                   0L) {
[13:23:26.017]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:26.017]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:26.017]                   base::options(opts)
[13:23:26.017]                 }
[13:23:26.017]                 {
[13:23:26.017]                   {
[13:23:26.017]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:26.017]                     NULL
[13:23:26.017]                   }
[13:23:26.017]                   options(future.plan = NULL)
[13:23:26.017]                   if (is.na(NA_character_)) 
[13:23:26.017]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.017]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:26.017]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:26.017]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:26.017]                     envir = parent.frame()) 
[13:23:26.017]                   {
[13:23:26.017]                     if (is.function(workers)) 
[13:23:26.017]                       workers <- workers()
[13:23:26.017]                     workers <- structure(as.integer(workers), 
[13:23:26.017]                       class = class(workers))
[13:23:26.017]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:26.017]                       workers >= 1)
[13:23:26.017]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:26.017]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:26.017]                     }
[13:23:26.017]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:26.017]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:26.017]                       envir = envir)
[13:23:26.017]                     if (!future$lazy) 
[13:23:26.017]                       future <- run(future)
[13:23:26.017]                     invisible(future)
[13:23:26.017]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:26.017]                 }
[13:23:26.017]             }
[13:23:26.017]         }
[13:23:26.017]     })
[13:23:26.017]     if (TRUE) {
[13:23:26.017]         base::sink(type = "output", split = FALSE)
[13:23:26.017]         if (TRUE) {
[13:23:26.017]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:26.017]         }
[13:23:26.017]         else {
[13:23:26.017]             ...future.result["stdout"] <- base::list(NULL)
[13:23:26.017]         }
[13:23:26.017]         base::close(...future.stdout)
[13:23:26.017]         ...future.stdout <- NULL
[13:23:26.017]     }
[13:23:26.017]     ...future.result$conditions <- ...future.conditions
[13:23:26.017]     ...future.result$finished <- base::Sys.time()
[13:23:26.017]     ...future.result
[13:23:26.017] }
[13:23:26.074] MultisessionFuture started
[13:23:26.074] result() for ClusterFuture ...
[13:23:26.075] receiveMessageFromWorker() for ClusterFuture ...
[13:23:26.075] - Validating connection of MultisessionFuture
[13:23:26.120] - received message: FutureResult
[13:23:26.121] - Received FutureResult
[13:23:26.121] - Erased future from FutureRegistry
[13:23:26.121] result() for ClusterFuture ...
[13:23:26.121] - result already collected: FutureResult
[13:23:26.121] result() for ClusterFuture ... done
[13:23:26.121] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:26.121] result() for ClusterFuture ... done
[13:23:26.122] result() for ClusterFuture ...
[13:23:26.122] - result already collected: FutureResult
[13:23:26.122] result() for ClusterFuture ... done
[13:23:26.122] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:26.126] plan(): nbrOfWorkers() = 2
[13:23:26.126] getGlobalsAndPackages() ...
[13:23:26.126] Searching for globals...
[13:23:26.129] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:26.130] Searching for globals ... DONE
[13:23:26.130] Resolving globals: FALSE
[13:23:26.130] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:26.131] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:26.131] - globals: [1] ‘my_fcn’
[13:23:26.131] 
[13:23:26.131] getGlobalsAndPackages() ... DONE
[13:23:26.131] run() for ‘Future’ ...
[13:23:26.132] - state: ‘created’
[13:23:26.132] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:26.147] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:26.147] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:26.147]   - Field: ‘node’
[13:23:26.147]   - Field: ‘label’
[13:23:26.147]   - Field: ‘local’
[13:23:26.147]   - Field: ‘owner’
[13:23:26.147]   - Field: ‘envir’
[13:23:26.147]   - Field: ‘workers’
[13:23:26.148]   - Field: ‘packages’
[13:23:26.148]   - Field: ‘gc’
[13:23:26.148]   - Field: ‘conditions’
[13:23:26.148]   - Field: ‘persistent’
[13:23:26.148]   - Field: ‘expr’
[13:23:26.148]   - Field: ‘uuid’
[13:23:26.148]   - Field: ‘seed’
[13:23:26.148]   - Field: ‘version’
[13:23:26.149]   - Field: ‘result’
[13:23:26.149]   - Field: ‘asynchronous’
[13:23:26.149]   - Field: ‘calls’
[13:23:26.149]   - Field: ‘globals’
[13:23:26.149]   - Field: ‘stdout’
[13:23:26.149]   - Field: ‘earlySignal’
[13:23:26.149]   - Field: ‘lazy’
[13:23:26.149]   - Field: ‘state’
[13:23:26.150] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:26.150] - Launch lazy future ...
[13:23:26.150] Packages needed by the future expression (n = 0): <none>
[13:23:26.150] Packages needed by future strategies (n = 0): <none>
[13:23:26.151] {
[13:23:26.151]     {
[13:23:26.151]         {
[13:23:26.151]             ...future.startTime <- base::Sys.time()
[13:23:26.151]             {
[13:23:26.151]                 {
[13:23:26.151]                   {
[13:23:26.151]                     {
[13:23:26.151]                       base::local({
[13:23:26.151]                         has_future <- base::requireNamespace("future", 
[13:23:26.151]                           quietly = TRUE)
[13:23:26.151]                         if (has_future) {
[13:23:26.151]                           ns <- base::getNamespace("future")
[13:23:26.151]                           version <- ns[[".package"]][["version"]]
[13:23:26.151]                           if (is.null(version)) 
[13:23:26.151]                             version <- utils::packageVersion("future")
[13:23:26.151]                         }
[13:23:26.151]                         else {
[13:23:26.151]                           version <- NULL
[13:23:26.151]                         }
[13:23:26.151]                         if (!has_future || version < "1.8.0") {
[13:23:26.151]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:26.151]                             "", base::R.version$version.string), 
[13:23:26.151]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:26.151]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:26.151]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:26.151]                               "release", "version")], collapse = " "), 
[13:23:26.151]                             hostname = base::Sys.info()[["nodename"]])
[13:23:26.151]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:26.151]                             info)
[13:23:26.151]                           info <- base::paste(info, collapse = "; ")
[13:23:26.151]                           if (!has_future) {
[13:23:26.151]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:26.151]                               info)
[13:23:26.151]                           }
[13:23:26.151]                           else {
[13:23:26.151]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:26.151]                               info, version)
[13:23:26.151]                           }
[13:23:26.151]                           base::stop(msg)
[13:23:26.151]                         }
[13:23:26.151]                       })
[13:23:26.151]                     }
[13:23:26.151]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:26.151]                     base::options(mc.cores = 1L)
[13:23:26.151]                   }
[13:23:26.151]                   options(future.plan = NULL)
[13:23:26.151]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.151]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:26.151]                 }
[13:23:26.151]                 ...future.workdir <- getwd()
[13:23:26.151]             }
[13:23:26.151]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:26.151]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:26.151]         }
[13:23:26.151]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:26.151]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:26.151]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:26.151]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:26.151]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:26.151]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:26.151]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:26.151]             base::names(...future.oldOptions))
[13:23:26.151]     }
[13:23:26.151]     if (FALSE) {
[13:23:26.151]     }
[13:23:26.151]     else {
[13:23:26.151]         if (TRUE) {
[13:23:26.151]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:26.151]                 open = "w")
[13:23:26.151]         }
[13:23:26.151]         else {
[13:23:26.151]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:26.151]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:26.151]         }
[13:23:26.151]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:26.151]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:26.151]             base::sink(type = "output", split = FALSE)
[13:23:26.151]             base::close(...future.stdout)
[13:23:26.151]         }, add = TRUE)
[13:23:26.151]     }
[13:23:26.151]     ...future.frame <- base::sys.nframe()
[13:23:26.151]     ...future.conditions <- base::list()
[13:23:26.151]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:26.151]     if (FALSE) {
[13:23:26.151]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:26.151]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:26.151]     }
[13:23:26.151]     ...future.result <- base::tryCatch({
[13:23:26.151]         base::withCallingHandlers({
[13:23:26.151]             ...future.value <- base::withVisible(base::local({
[13:23:26.151]                 ...future.makeSendCondition <- base::local({
[13:23:26.151]                   sendCondition <- NULL
[13:23:26.151]                   function(frame = 1L) {
[13:23:26.151]                     if (is.function(sendCondition)) 
[13:23:26.151]                       return(sendCondition)
[13:23:26.151]                     ns <- getNamespace("parallel")
[13:23:26.151]                     if (exists("sendData", mode = "function", 
[13:23:26.151]                       envir = ns)) {
[13:23:26.151]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:26.151]                         envir = ns)
[13:23:26.151]                       envir <- sys.frame(frame)
[13:23:26.151]                       master <- NULL
[13:23:26.151]                       while (!identical(envir, .GlobalEnv) && 
[13:23:26.151]                         !identical(envir, emptyenv())) {
[13:23:26.151]                         if (exists("master", mode = "list", envir = envir, 
[13:23:26.151]                           inherits = FALSE)) {
[13:23:26.151]                           master <- get("master", mode = "list", 
[13:23:26.151]                             envir = envir, inherits = FALSE)
[13:23:26.151]                           if (inherits(master, c("SOCKnode", 
[13:23:26.151]                             "SOCK0node"))) {
[13:23:26.151]                             sendCondition <<- function(cond) {
[13:23:26.151]                               data <- list(type = "VALUE", value = cond, 
[13:23:26.151]                                 success = TRUE)
[13:23:26.151]                               parallel_sendData(master, data)
[13:23:26.151]                             }
[13:23:26.151]                             return(sendCondition)
[13:23:26.151]                           }
[13:23:26.151]                         }
[13:23:26.151]                         frame <- frame + 1L
[13:23:26.151]                         envir <- sys.frame(frame)
[13:23:26.151]                       }
[13:23:26.151]                     }
[13:23:26.151]                     sendCondition <<- function(cond) NULL
[13:23:26.151]                   }
[13:23:26.151]                 })
[13:23:26.151]                 withCallingHandlers({
[13:23:26.151]                   {
[13:23:26.151]                     my_fcn
[13:23:26.151]                   }
[13:23:26.151]                 }, immediateCondition = function(cond) {
[13:23:26.151]                   sendCondition <- ...future.makeSendCondition()
[13:23:26.151]                   sendCondition(cond)
[13:23:26.151]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.151]                   {
[13:23:26.151]                     inherits <- base::inherits
[13:23:26.151]                     invokeRestart <- base::invokeRestart
[13:23:26.151]                     is.null <- base::is.null
[13:23:26.151]                     muffled <- FALSE
[13:23:26.151]                     if (inherits(cond, "message")) {
[13:23:26.151]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:26.151]                       if (muffled) 
[13:23:26.151]                         invokeRestart("muffleMessage")
[13:23:26.151]                     }
[13:23:26.151]                     else if (inherits(cond, "warning")) {
[13:23:26.151]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:26.151]                       if (muffled) 
[13:23:26.151]                         invokeRestart("muffleWarning")
[13:23:26.151]                     }
[13:23:26.151]                     else if (inherits(cond, "condition")) {
[13:23:26.151]                       if (!is.null(pattern)) {
[13:23:26.151]                         computeRestarts <- base::computeRestarts
[13:23:26.151]                         grepl <- base::grepl
[13:23:26.151]                         restarts <- computeRestarts(cond)
[13:23:26.151]                         for (restart in restarts) {
[13:23:26.151]                           name <- restart$name
[13:23:26.151]                           if (is.null(name)) 
[13:23:26.151]                             next
[13:23:26.151]                           if (!grepl(pattern, name)) 
[13:23:26.151]                             next
[13:23:26.151]                           invokeRestart(restart)
[13:23:26.151]                           muffled <- TRUE
[13:23:26.151]                           break
[13:23:26.151]                         }
[13:23:26.151]                       }
[13:23:26.151]                     }
[13:23:26.151]                     invisible(muffled)
[13:23:26.151]                   }
[13:23:26.151]                   muffleCondition(cond)
[13:23:26.151]                 })
[13:23:26.151]             }))
[13:23:26.151]             future::FutureResult(value = ...future.value$value, 
[13:23:26.151]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.151]                   ...future.rng), globalenv = if (FALSE) 
[13:23:26.151]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:26.151]                     ...future.globalenv.names))
[13:23:26.151]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:26.151]         }, condition = base::local({
[13:23:26.151]             c <- base::c
[13:23:26.151]             inherits <- base::inherits
[13:23:26.151]             invokeRestart <- base::invokeRestart
[13:23:26.151]             length <- base::length
[13:23:26.151]             list <- base::list
[13:23:26.151]             seq.int <- base::seq.int
[13:23:26.151]             signalCondition <- base::signalCondition
[13:23:26.151]             sys.calls <- base::sys.calls
[13:23:26.151]             `[[` <- base::`[[`
[13:23:26.151]             `+` <- base::`+`
[13:23:26.151]             `<<-` <- base::`<<-`
[13:23:26.151]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:26.151]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:26.151]                   3L)]
[13:23:26.151]             }
[13:23:26.151]             function(cond) {
[13:23:26.151]                 is_error <- inherits(cond, "error")
[13:23:26.151]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:26.151]                   NULL)
[13:23:26.151]                 if (is_error) {
[13:23:26.151]                   sessionInformation <- function() {
[13:23:26.151]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:26.151]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:26.151]                       search = base::search(), system = base::Sys.info())
[13:23:26.151]                   }
[13:23:26.151]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.151]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:26.151]                     cond$call), session = sessionInformation(), 
[13:23:26.151]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:26.151]                   signalCondition(cond)
[13:23:26.151]                 }
[13:23:26.151]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:26.151]                 "immediateCondition"))) {
[13:23:26.151]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:26.151]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.151]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:26.151]                   if (TRUE && !signal) {
[13:23:26.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.151]                     {
[13:23:26.151]                       inherits <- base::inherits
[13:23:26.151]                       invokeRestart <- base::invokeRestart
[13:23:26.151]                       is.null <- base::is.null
[13:23:26.151]                       muffled <- FALSE
[13:23:26.151]                       if (inherits(cond, "message")) {
[13:23:26.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.151]                         if (muffled) 
[13:23:26.151]                           invokeRestart("muffleMessage")
[13:23:26.151]                       }
[13:23:26.151]                       else if (inherits(cond, "warning")) {
[13:23:26.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.151]                         if (muffled) 
[13:23:26.151]                           invokeRestart("muffleWarning")
[13:23:26.151]                       }
[13:23:26.151]                       else if (inherits(cond, "condition")) {
[13:23:26.151]                         if (!is.null(pattern)) {
[13:23:26.151]                           computeRestarts <- base::computeRestarts
[13:23:26.151]                           grepl <- base::grepl
[13:23:26.151]                           restarts <- computeRestarts(cond)
[13:23:26.151]                           for (restart in restarts) {
[13:23:26.151]                             name <- restart$name
[13:23:26.151]                             if (is.null(name)) 
[13:23:26.151]                               next
[13:23:26.151]                             if (!grepl(pattern, name)) 
[13:23:26.151]                               next
[13:23:26.151]                             invokeRestart(restart)
[13:23:26.151]                             muffled <- TRUE
[13:23:26.151]                             break
[13:23:26.151]                           }
[13:23:26.151]                         }
[13:23:26.151]                       }
[13:23:26.151]                       invisible(muffled)
[13:23:26.151]                     }
[13:23:26.151]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.151]                   }
[13:23:26.151]                 }
[13:23:26.151]                 else {
[13:23:26.151]                   if (TRUE) {
[13:23:26.151]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.151]                     {
[13:23:26.151]                       inherits <- base::inherits
[13:23:26.151]                       invokeRestart <- base::invokeRestart
[13:23:26.151]                       is.null <- base::is.null
[13:23:26.151]                       muffled <- FALSE
[13:23:26.151]                       if (inherits(cond, "message")) {
[13:23:26.151]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.151]                         if (muffled) 
[13:23:26.151]                           invokeRestart("muffleMessage")
[13:23:26.151]                       }
[13:23:26.151]                       else if (inherits(cond, "warning")) {
[13:23:26.151]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.151]                         if (muffled) 
[13:23:26.151]                           invokeRestart("muffleWarning")
[13:23:26.151]                       }
[13:23:26.151]                       else if (inherits(cond, "condition")) {
[13:23:26.151]                         if (!is.null(pattern)) {
[13:23:26.151]                           computeRestarts <- base::computeRestarts
[13:23:26.151]                           grepl <- base::grepl
[13:23:26.151]                           restarts <- computeRestarts(cond)
[13:23:26.151]                           for (restart in restarts) {
[13:23:26.151]                             name <- restart$name
[13:23:26.151]                             if (is.null(name)) 
[13:23:26.151]                               next
[13:23:26.151]                             if (!grepl(pattern, name)) 
[13:23:26.151]                               next
[13:23:26.151]                             invokeRestart(restart)
[13:23:26.151]                             muffled <- TRUE
[13:23:26.151]                             break
[13:23:26.151]                           }
[13:23:26.151]                         }
[13:23:26.151]                       }
[13:23:26.151]                       invisible(muffled)
[13:23:26.151]                     }
[13:23:26.151]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.151]                   }
[13:23:26.151]                 }
[13:23:26.151]             }
[13:23:26.151]         }))
[13:23:26.151]     }, error = function(ex) {
[13:23:26.151]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:26.151]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.151]                 ...future.rng), started = ...future.startTime, 
[13:23:26.151]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:26.151]             version = "1.8"), class = "FutureResult")
[13:23:26.151]     }, finally = {
[13:23:26.151]         if (!identical(...future.workdir, getwd())) 
[13:23:26.151]             setwd(...future.workdir)
[13:23:26.151]         {
[13:23:26.151]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:26.151]                 ...future.oldOptions$nwarnings <- NULL
[13:23:26.151]             }
[13:23:26.151]             base::options(...future.oldOptions)
[13:23:26.151]             if (.Platform$OS.type == "windows") {
[13:23:26.151]                 old_names <- names(...future.oldEnvVars)
[13:23:26.151]                 envs <- base::Sys.getenv()
[13:23:26.151]                 names <- names(envs)
[13:23:26.151]                 common <- intersect(names, old_names)
[13:23:26.151]                 added <- setdiff(names, old_names)
[13:23:26.151]                 removed <- setdiff(old_names, names)
[13:23:26.151]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:26.151]                   envs[common]]
[13:23:26.151]                 NAMES <- toupper(changed)
[13:23:26.151]                 args <- list()
[13:23:26.151]                 for (kk in seq_along(NAMES)) {
[13:23:26.151]                   name <- changed[[kk]]
[13:23:26.151]                   NAME <- NAMES[[kk]]
[13:23:26.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.151]                     next
[13:23:26.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.151]                 }
[13:23:26.151]                 NAMES <- toupper(added)
[13:23:26.151]                 for (kk in seq_along(NAMES)) {
[13:23:26.151]                   name <- added[[kk]]
[13:23:26.151]                   NAME <- NAMES[[kk]]
[13:23:26.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.151]                     next
[13:23:26.151]                   args[[name]] <- ""
[13:23:26.151]                 }
[13:23:26.151]                 NAMES <- toupper(removed)
[13:23:26.151]                 for (kk in seq_along(NAMES)) {
[13:23:26.151]                   name <- removed[[kk]]
[13:23:26.151]                   NAME <- NAMES[[kk]]
[13:23:26.151]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.151]                     next
[13:23:26.151]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.151]                 }
[13:23:26.151]                 if (length(args) > 0) 
[13:23:26.151]                   base::do.call(base::Sys.setenv, args = args)
[13:23:26.151]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:26.151]             }
[13:23:26.151]             else {
[13:23:26.151]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:26.151]             }
[13:23:26.151]             {
[13:23:26.151]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:26.151]                   0L) {
[13:23:26.151]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:26.151]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:26.151]                   base::options(opts)
[13:23:26.151]                 }
[13:23:26.151]                 {
[13:23:26.151]                   {
[13:23:26.151]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:26.151]                     NULL
[13:23:26.151]                   }
[13:23:26.151]                   options(future.plan = NULL)
[13:23:26.151]                   if (is.na(NA_character_)) 
[13:23:26.151]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.151]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:26.151]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:26.151]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:26.151]                     envir = parent.frame()) 
[13:23:26.151]                   {
[13:23:26.151]                     if (is.function(workers)) 
[13:23:26.151]                       workers <- workers()
[13:23:26.151]                     workers <- structure(as.integer(workers), 
[13:23:26.151]                       class = class(workers))
[13:23:26.151]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:26.151]                       workers >= 1)
[13:23:26.151]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:26.151]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:26.151]                     }
[13:23:26.151]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:26.151]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:26.151]                       envir = envir)
[13:23:26.151]                     if (!future$lazy) 
[13:23:26.151]                       future <- run(future)
[13:23:26.151]                     invisible(future)
[13:23:26.151]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:26.151]                 }
[13:23:26.151]             }
[13:23:26.151]         }
[13:23:26.151]     })
[13:23:26.151]     if (TRUE) {
[13:23:26.151]         base::sink(type = "output", split = FALSE)
[13:23:26.151]         if (TRUE) {
[13:23:26.151]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:26.151]         }
[13:23:26.151]         else {
[13:23:26.151]             ...future.result["stdout"] <- base::list(NULL)
[13:23:26.151]         }
[13:23:26.151]         base::close(...future.stdout)
[13:23:26.151]         ...future.stdout <- NULL
[13:23:26.151]     }
[13:23:26.151]     ...future.result$conditions <- ...future.conditions
[13:23:26.151]     ...future.result$finished <- base::Sys.time()
[13:23:26.151]     ...future.result
[13:23:26.151] }
[13:23:26.154] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:23:26.154] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:23:26.155] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:23:26.155] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:23:26.156] MultisessionFuture started
[13:23:26.156] - Launch lazy future ... done
[13:23:26.156] run() for ‘MultisessionFuture’ ... done
[13:23:26.156] result() for ClusterFuture ...
[13:23:26.156] receiveMessageFromWorker() for ClusterFuture ...
[13:23:26.157] - Validating connection of MultisessionFuture
[13:23:26.201] - received message: FutureResult
[13:23:26.201] - Received FutureResult
[13:23:26.202] - Erased future from FutureRegistry
[13:23:26.202] result() for ClusterFuture ...
[13:23:26.202] - result already collected: FutureResult
[13:23:26.202] result() for ClusterFuture ... done
[13:23:26.202] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:26.202] result() for ClusterFuture ... done
[13:23:26.202] result() for ClusterFuture ...
[13:23:26.203] - result already collected: FutureResult
[13:23:26.203] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x560251095578>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[13:23:26.203] getGlobalsAndPackages() ...
[13:23:26.203] Searching for globals...
[13:23:26.206] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[13:23:26.206] Searching for globals ... DONE
[13:23:26.207] Resolving globals: FALSE
[13:23:26.207] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[13:23:26.208] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[13:23:26.208] - globals: [1] ‘my_fcn’
[13:23:26.208] 
[13:23:26.208] getGlobalsAndPackages() ... DONE
[13:23:26.208] run() for ‘Future’ ...
[13:23:26.209] - state: ‘created’
[13:23:26.209] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:26.224] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:26.224] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:26.224]   - Field: ‘node’
[13:23:26.224]   - Field: ‘label’
[13:23:26.224]   - Field: ‘local’
[13:23:26.224]   - Field: ‘owner’
[13:23:26.224]   - Field: ‘envir’
[13:23:26.225]   - Field: ‘workers’
[13:23:26.225]   - Field: ‘packages’
[13:23:26.225]   - Field: ‘gc’
[13:23:26.225]   - Field: ‘conditions’
[13:23:26.225]   - Field: ‘persistent’
[13:23:26.225]   - Field: ‘expr’
[13:23:26.225]   - Field: ‘uuid’
[13:23:26.225]   - Field: ‘seed’
[13:23:26.225]   - Field: ‘version’
[13:23:26.226]   - Field: ‘result’
[13:23:26.226]   - Field: ‘asynchronous’
[13:23:26.226]   - Field: ‘calls’
[13:23:26.226]   - Field: ‘globals’
[13:23:26.226]   - Field: ‘stdout’
[13:23:26.226]   - Field: ‘earlySignal’
[13:23:26.226]   - Field: ‘lazy’
[13:23:26.226]   - Field: ‘state’
[13:23:26.227] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:26.227] - Launch lazy future ...
[13:23:26.227] Packages needed by the future expression (n = 0): <none>
[13:23:26.227] Packages needed by future strategies (n = 0): <none>
[13:23:26.228] {
[13:23:26.228]     {
[13:23:26.228]         {
[13:23:26.228]             ...future.startTime <- base::Sys.time()
[13:23:26.228]             {
[13:23:26.228]                 {
[13:23:26.228]                   {
[13:23:26.228]                     {
[13:23:26.228]                       base::local({
[13:23:26.228]                         has_future <- base::requireNamespace("future", 
[13:23:26.228]                           quietly = TRUE)
[13:23:26.228]                         if (has_future) {
[13:23:26.228]                           ns <- base::getNamespace("future")
[13:23:26.228]                           version <- ns[[".package"]][["version"]]
[13:23:26.228]                           if (is.null(version)) 
[13:23:26.228]                             version <- utils::packageVersion("future")
[13:23:26.228]                         }
[13:23:26.228]                         else {
[13:23:26.228]                           version <- NULL
[13:23:26.228]                         }
[13:23:26.228]                         if (!has_future || version < "1.8.0") {
[13:23:26.228]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:26.228]                             "", base::R.version$version.string), 
[13:23:26.228]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:26.228]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:26.228]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:26.228]                               "release", "version")], collapse = " "), 
[13:23:26.228]                             hostname = base::Sys.info()[["nodename"]])
[13:23:26.228]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:26.228]                             info)
[13:23:26.228]                           info <- base::paste(info, collapse = "; ")
[13:23:26.228]                           if (!has_future) {
[13:23:26.228]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:26.228]                               info)
[13:23:26.228]                           }
[13:23:26.228]                           else {
[13:23:26.228]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:26.228]                               info, version)
[13:23:26.228]                           }
[13:23:26.228]                           base::stop(msg)
[13:23:26.228]                         }
[13:23:26.228]                       })
[13:23:26.228]                     }
[13:23:26.228]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:26.228]                     base::options(mc.cores = 1L)
[13:23:26.228]                   }
[13:23:26.228]                   options(future.plan = NULL)
[13:23:26.228]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.228]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:26.228]                 }
[13:23:26.228]                 ...future.workdir <- getwd()
[13:23:26.228]             }
[13:23:26.228]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:26.228]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:26.228]         }
[13:23:26.228]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:26.228]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:26.228]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:26.228]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:26.228]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:26.228]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:26.228]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:26.228]             base::names(...future.oldOptions))
[13:23:26.228]     }
[13:23:26.228]     if (FALSE) {
[13:23:26.228]     }
[13:23:26.228]     else {
[13:23:26.228]         if (TRUE) {
[13:23:26.228]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:26.228]                 open = "w")
[13:23:26.228]         }
[13:23:26.228]         else {
[13:23:26.228]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:26.228]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:26.228]         }
[13:23:26.228]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:26.228]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:26.228]             base::sink(type = "output", split = FALSE)
[13:23:26.228]             base::close(...future.stdout)
[13:23:26.228]         }, add = TRUE)
[13:23:26.228]     }
[13:23:26.228]     ...future.frame <- base::sys.nframe()
[13:23:26.228]     ...future.conditions <- base::list()
[13:23:26.228]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:26.228]     if (FALSE) {
[13:23:26.228]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:26.228]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:26.228]     }
[13:23:26.228]     ...future.result <- base::tryCatch({
[13:23:26.228]         base::withCallingHandlers({
[13:23:26.228]             ...future.value <- base::withVisible(base::local({
[13:23:26.228]                 ...future.makeSendCondition <- base::local({
[13:23:26.228]                   sendCondition <- NULL
[13:23:26.228]                   function(frame = 1L) {
[13:23:26.228]                     if (is.function(sendCondition)) 
[13:23:26.228]                       return(sendCondition)
[13:23:26.228]                     ns <- getNamespace("parallel")
[13:23:26.228]                     if (exists("sendData", mode = "function", 
[13:23:26.228]                       envir = ns)) {
[13:23:26.228]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:26.228]                         envir = ns)
[13:23:26.228]                       envir <- sys.frame(frame)
[13:23:26.228]                       master <- NULL
[13:23:26.228]                       while (!identical(envir, .GlobalEnv) && 
[13:23:26.228]                         !identical(envir, emptyenv())) {
[13:23:26.228]                         if (exists("master", mode = "list", envir = envir, 
[13:23:26.228]                           inherits = FALSE)) {
[13:23:26.228]                           master <- get("master", mode = "list", 
[13:23:26.228]                             envir = envir, inherits = FALSE)
[13:23:26.228]                           if (inherits(master, c("SOCKnode", 
[13:23:26.228]                             "SOCK0node"))) {
[13:23:26.228]                             sendCondition <<- function(cond) {
[13:23:26.228]                               data <- list(type = "VALUE", value = cond, 
[13:23:26.228]                                 success = TRUE)
[13:23:26.228]                               parallel_sendData(master, data)
[13:23:26.228]                             }
[13:23:26.228]                             return(sendCondition)
[13:23:26.228]                           }
[13:23:26.228]                         }
[13:23:26.228]                         frame <- frame + 1L
[13:23:26.228]                         envir <- sys.frame(frame)
[13:23:26.228]                       }
[13:23:26.228]                     }
[13:23:26.228]                     sendCondition <<- function(cond) NULL
[13:23:26.228]                   }
[13:23:26.228]                 })
[13:23:26.228]                 withCallingHandlers({
[13:23:26.228]                   {
[13:23:26.228]                     my_fcn(3)
[13:23:26.228]                   }
[13:23:26.228]                 }, immediateCondition = function(cond) {
[13:23:26.228]                   sendCondition <- ...future.makeSendCondition()
[13:23:26.228]                   sendCondition(cond)
[13:23:26.228]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.228]                   {
[13:23:26.228]                     inherits <- base::inherits
[13:23:26.228]                     invokeRestart <- base::invokeRestart
[13:23:26.228]                     is.null <- base::is.null
[13:23:26.228]                     muffled <- FALSE
[13:23:26.228]                     if (inherits(cond, "message")) {
[13:23:26.228]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:26.228]                       if (muffled) 
[13:23:26.228]                         invokeRestart("muffleMessage")
[13:23:26.228]                     }
[13:23:26.228]                     else if (inherits(cond, "warning")) {
[13:23:26.228]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:26.228]                       if (muffled) 
[13:23:26.228]                         invokeRestart("muffleWarning")
[13:23:26.228]                     }
[13:23:26.228]                     else if (inherits(cond, "condition")) {
[13:23:26.228]                       if (!is.null(pattern)) {
[13:23:26.228]                         computeRestarts <- base::computeRestarts
[13:23:26.228]                         grepl <- base::grepl
[13:23:26.228]                         restarts <- computeRestarts(cond)
[13:23:26.228]                         for (restart in restarts) {
[13:23:26.228]                           name <- restart$name
[13:23:26.228]                           if (is.null(name)) 
[13:23:26.228]                             next
[13:23:26.228]                           if (!grepl(pattern, name)) 
[13:23:26.228]                             next
[13:23:26.228]                           invokeRestart(restart)
[13:23:26.228]                           muffled <- TRUE
[13:23:26.228]                           break
[13:23:26.228]                         }
[13:23:26.228]                       }
[13:23:26.228]                     }
[13:23:26.228]                     invisible(muffled)
[13:23:26.228]                   }
[13:23:26.228]                   muffleCondition(cond)
[13:23:26.228]                 })
[13:23:26.228]             }))
[13:23:26.228]             future::FutureResult(value = ...future.value$value, 
[13:23:26.228]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.228]                   ...future.rng), globalenv = if (FALSE) 
[13:23:26.228]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:26.228]                     ...future.globalenv.names))
[13:23:26.228]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:26.228]         }, condition = base::local({
[13:23:26.228]             c <- base::c
[13:23:26.228]             inherits <- base::inherits
[13:23:26.228]             invokeRestart <- base::invokeRestart
[13:23:26.228]             length <- base::length
[13:23:26.228]             list <- base::list
[13:23:26.228]             seq.int <- base::seq.int
[13:23:26.228]             signalCondition <- base::signalCondition
[13:23:26.228]             sys.calls <- base::sys.calls
[13:23:26.228]             `[[` <- base::`[[`
[13:23:26.228]             `+` <- base::`+`
[13:23:26.228]             `<<-` <- base::`<<-`
[13:23:26.228]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:26.228]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:26.228]                   3L)]
[13:23:26.228]             }
[13:23:26.228]             function(cond) {
[13:23:26.228]                 is_error <- inherits(cond, "error")
[13:23:26.228]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:26.228]                   NULL)
[13:23:26.228]                 if (is_error) {
[13:23:26.228]                   sessionInformation <- function() {
[13:23:26.228]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:26.228]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:26.228]                       search = base::search(), system = base::Sys.info())
[13:23:26.228]                   }
[13:23:26.228]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.228]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:26.228]                     cond$call), session = sessionInformation(), 
[13:23:26.228]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:26.228]                   signalCondition(cond)
[13:23:26.228]                 }
[13:23:26.228]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:26.228]                 "immediateCondition"))) {
[13:23:26.228]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:26.228]                   ...future.conditions[[length(...future.conditions) + 
[13:23:26.228]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:26.228]                   if (TRUE && !signal) {
[13:23:26.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.228]                     {
[13:23:26.228]                       inherits <- base::inherits
[13:23:26.228]                       invokeRestart <- base::invokeRestart
[13:23:26.228]                       is.null <- base::is.null
[13:23:26.228]                       muffled <- FALSE
[13:23:26.228]                       if (inherits(cond, "message")) {
[13:23:26.228]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.228]                         if (muffled) 
[13:23:26.228]                           invokeRestart("muffleMessage")
[13:23:26.228]                       }
[13:23:26.228]                       else if (inherits(cond, "warning")) {
[13:23:26.228]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.228]                         if (muffled) 
[13:23:26.228]                           invokeRestart("muffleWarning")
[13:23:26.228]                       }
[13:23:26.228]                       else if (inherits(cond, "condition")) {
[13:23:26.228]                         if (!is.null(pattern)) {
[13:23:26.228]                           computeRestarts <- base::computeRestarts
[13:23:26.228]                           grepl <- base::grepl
[13:23:26.228]                           restarts <- computeRestarts(cond)
[13:23:26.228]                           for (restart in restarts) {
[13:23:26.228]                             name <- restart$name
[13:23:26.228]                             if (is.null(name)) 
[13:23:26.228]                               next
[13:23:26.228]                             if (!grepl(pattern, name)) 
[13:23:26.228]                               next
[13:23:26.228]                             invokeRestart(restart)
[13:23:26.228]                             muffled <- TRUE
[13:23:26.228]                             break
[13:23:26.228]                           }
[13:23:26.228]                         }
[13:23:26.228]                       }
[13:23:26.228]                       invisible(muffled)
[13:23:26.228]                     }
[13:23:26.228]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.228]                   }
[13:23:26.228]                 }
[13:23:26.228]                 else {
[13:23:26.228]                   if (TRUE) {
[13:23:26.228]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:26.228]                     {
[13:23:26.228]                       inherits <- base::inherits
[13:23:26.228]                       invokeRestart <- base::invokeRestart
[13:23:26.228]                       is.null <- base::is.null
[13:23:26.228]                       muffled <- FALSE
[13:23:26.228]                       if (inherits(cond, "message")) {
[13:23:26.228]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:26.228]                         if (muffled) 
[13:23:26.228]                           invokeRestart("muffleMessage")
[13:23:26.228]                       }
[13:23:26.228]                       else if (inherits(cond, "warning")) {
[13:23:26.228]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:26.228]                         if (muffled) 
[13:23:26.228]                           invokeRestart("muffleWarning")
[13:23:26.228]                       }
[13:23:26.228]                       else if (inherits(cond, "condition")) {
[13:23:26.228]                         if (!is.null(pattern)) {
[13:23:26.228]                           computeRestarts <- base::computeRestarts
[13:23:26.228]                           grepl <- base::grepl
[13:23:26.228]                           restarts <- computeRestarts(cond)
[13:23:26.228]                           for (restart in restarts) {
[13:23:26.228]                             name <- restart$name
[13:23:26.228]                             if (is.null(name)) 
[13:23:26.228]                               next
[13:23:26.228]                             if (!grepl(pattern, name)) 
[13:23:26.228]                               next
[13:23:26.228]                             invokeRestart(restart)
[13:23:26.228]                             muffled <- TRUE
[13:23:26.228]                             break
[13:23:26.228]                           }
[13:23:26.228]                         }
[13:23:26.228]                       }
[13:23:26.228]                       invisible(muffled)
[13:23:26.228]                     }
[13:23:26.228]                     muffleCondition(cond, pattern = "^muffle")
[13:23:26.228]                   }
[13:23:26.228]                 }
[13:23:26.228]             }
[13:23:26.228]         }))
[13:23:26.228]     }, error = function(ex) {
[13:23:26.228]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:26.228]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:26.228]                 ...future.rng), started = ...future.startTime, 
[13:23:26.228]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:26.228]             version = "1.8"), class = "FutureResult")
[13:23:26.228]     }, finally = {
[13:23:26.228]         if (!identical(...future.workdir, getwd())) 
[13:23:26.228]             setwd(...future.workdir)
[13:23:26.228]         {
[13:23:26.228]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:26.228]                 ...future.oldOptions$nwarnings <- NULL
[13:23:26.228]             }
[13:23:26.228]             base::options(...future.oldOptions)
[13:23:26.228]             if (.Platform$OS.type == "windows") {
[13:23:26.228]                 old_names <- names(...future.oldEnvVars)
[13:23:26.228]                 envs <- base::Sys.getenv()
[13:23:26.228]                 names <- names(envs)
[13:23:26.228]                 common <- intersect(names, old_names)
[13:23:26.228]                 added <- setdiff(names, old_names)
[13:23:26.228]                 removed <- setdiff(old_names, names)
[13:23:26.228]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:26.228]                   envs[common]]
[13:23:26.228]                 NAMES <- toupper(changed)
[13:23:26.228]                 args <- list()
[13:23:26.228]                 for (kk in seq_along(NAMES)) {
[13:23:26.228]                   name <- changed[[kk]]
[13:23:26.228]                   NAME <- NAMES[[kk]]
[13:23:26.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.228]                     next
[13:23:26.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.228]                 }
[13:23:26.228]                 NAMES <- toupper(added)
[13:23:26.228]                 for (kk in seq_along(NAMES)) {
[13:23:26.228]                   name <- added[[kk]]
[13:23:26.228]                   NAME <- NAMES[[kk]]
[13:23:26.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.228]                     next
[13:23:26.228]                   args[[name]] <- ""
[13:23:26.228]                 }
[13:23:26.228]                 NAMES <- toupper(removed)
[13:23:26.228]                 for (kk in seq_along(NAMES)) {
[13:23:26.228]                   name <- removed[[kk]]
[13:23:26.228]                   NAME <- NAMES[[kk]]
[13:23:26.228]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:26.228]                     next
[13:23:26.228]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:26.228]                 }
[13:23:26.228]                 if (length(args) > 0) 
[13:23:26.228]                   base::do.call(base::Sys.setenv, args = args)
[13:23:26.228]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:26.228]             }
[13:23:26.228]             else {
[13:23:26.228]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:26.228]             }
[13:23:26.228]             {
[13:23:26.228]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:26.228]                   0L) {
[13:23:26.228]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:26.228]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:26.228]                   base::options(opts)
[13:23:26.228]                 }
[13:23:26.228]                 {
[13:23:26.228]                   {
[13:23:26.228]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:26.228]                     NULL
[13:23:26.228]                   }
[13:23:26.228]                   options(future.plan = NULL)
[13:23:26.228]                   if (is.na(NA_character_)) 
[13:23:26.228]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:26.228]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:26.228]                   future::plan(list(function (..., workers = availableCores(), 
[13:23:26.228]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:23:26.228]                     envir = parent.frame()) 
[13:23:26.228]                   {
[13:23:26.228]                     if (is.function(workers)) 
[13:23:26.228]                       workers <- workers()
[13:23:26.228]                     workers <- structure(as.integer(workers), 
[13:23:26.228]                       class = class(workers))
[13:23:26.228]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:23:26.228]                       workers >= 1)
[13:23:26.228]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:23:26.228]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:23:26.228]                     }
[13:23:26.228]                     future <- MultisessionFuture(..., workers = workers, 
[13:23:26.228]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:23:26.228]                       envir = envir)
[13:23:26.228]                     if (!future$lazy) 
[13:23:26.228]                       future <- run(future)
[13:23:26.228]                     invisible(future)
[13:23:26.228]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:26.228]                 }
[13:23:26.228]             }
[13:23:26.228]         }
[13:23:26.228]     })
[13:23:26.228]     if (TRUE) {
[13:23:26.228]         base::sink(type = "output", split = FALSE)
[13:23:26.228]         if (TRUE) {
[13:23:26.228]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:26.228]         }
[13:23:26.228]         else {
[13:23:26.228]             ...future.result["stdout"] <- base::list(NULL)
[13:23:26.228]         }
[13:23:26.228]         base::close(...future.stdout)
[13:23:26.228]         ...future.stdout <- NULL
[13:23:26.228]     }
[13:23:26.228]     ...future.result$conditions <- ...future.conditions
[13:23:26.228]     ...future.result$finished <- base::Sys.time()
[13:23:26.228]     ...future.result
[13:23:26.228] }
[13:23:26.231] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[13:23:26.231] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[13:23:26.232] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[13:23:26.232] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[13:23:26.233] MultisessionFuture started
[13:23:26.233] - Launch lazy future ... done
[13:23:26.233] run() for ‘MultisessionFuture’ ... done
[13:23:26.233] result() for ClusterFuture ...
[13:23:26.233] receiveMessageFromWorker() for ClusterFuture ...
[13:23:26.234] - Validating connection of MultisessionFuture
[13:23:26.282] - received message: FutureResult
[13:23:26.282] - Received FutureResult
[13:23:26.283] - Erased future from FutureRegistry
[13:23:26.283] result() for ClusterFuture ...
[13:23:26.283] - result already collected: FutureResult
[13:23:26.283] result() for ClusterFuture ... done
[13:23:26.283] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:26.283] result() for ClusterFuture ... done
[13:23:26.283] result() for ClusterFuture ...
[13:23:26.283] - result already collected: FutureResult
[13:23:26.284] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[13:23:26.284] plan(): Setting new future strategy stack:
[13:23:26.285] List of future strategies:
[13:23:26.285] 1. FutureStrategy:
[13:23:26.285]    - args: function (..., envir = parent.frame())
[13:23:26.285]    - tweaked: FALSE
[13:23:26.285]    - call: future::plan(oplan)
[13:23:26.286] plan(): nbrOfWorkers() = 1
> 
