
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:26:04.891] plan(): Setting new future strategy stack:
[10:26:04.891] List of future strategies:
[10:26:04.891] 1. sequential:
[10:26:04.891]    - args: function (..., envir = parent.frame())
[10:26:04.891]    - tweaked: FALSE
[10:26:04.891]    - call: future::plan("sequential")
[10:26:04.905] plan(): nbrOfWorkers() = 1
> library(methods)
> 
> message("*** Globals - S4 methods ...")
*** Globals - S4 methods ...
> 
> setGeneric("my_fcn", function(x) standardGeneric("my_fcn"))
[1] "my_fcn"
> setMethod("my_fcn", signature(x = "numeric"), function(x) { -x })
> org_my_fcn <- my_fcn
> 
> truth <- my_fcn(3)
> 
> for (strategy in supportedStrategies()) {
+   message("Type of future: ", strategy)
+   plan(strategy)
+ 
+   ## Assert that S4 generic function 'my_fcn()' is exported
+   f <- future({ my_fcn }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- value(f)
+   print(v)
+   stopifnot(
+     is.function(v),
+     inherits(v, class(org_my_fcn)[1])
+   )
+   my_fcn <- org_my_fcn
+   
+   ## FIXME:
+   ## Just like S3 methods, S4 methods are not picked up
+   ## https://github.com/HenrikBengtsson/future/issues/615
+   f <- future({ my_fcn(3) }, lazy = TRUE)
+   rm(list = "my_fcn")
+   v <- tryCatch(value(f), error = identity)
+   print(v)
+   if (isTRUE(as.logical(Sys.getenv("R_CHECK_IDEAL")))) {
+     if (getOption("future.globals.keepWhere", TRUE)) {
+       stopifnot(identical(v, truth))
+     } else {
+       stopifnot(inherits(v, "error"))
+     }
+   } else if (isTRUE(getOption("future.globals.keepWhere", FALSE))) {
+     stopifnot(identical(v, truth))
+   } else {
+     if (strategy %in% c("sequential", "multicore")) {
+       stopifnot(inherits(v, "error"))
+     } else {
+       stopifnot(identical(v, truth))
+     }
+   }
+   my_fcn <- org_my_fcn
+ }
Type of future: sequential
[10:26:04.937] plan(): Setting new future strategy stack:
[10:26:04.937] List of future strategies:
[10:26:04.937] 1. sequential:
[10:26:04.937]    - args: function (..., envir = parent.frame())
[10:26:04.937]    - tweaked: FALSE
[10:26:04.937]    - call: plan(strategy)
[10:26:04.950] plan(): nbrOfWorkers() = 1
[10:26:04.951] getGlobalsAndPackages() ...
[10:26:04.951] Searching for globals...
[10:26:04.957] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:04.957] Searching for globals ... DONE
[10:26:04.957] Resolving globals: FALSE
[10:26:04.958] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:04.959] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:04.959] - globals: [1] ‘my_fcn’
[10:26:04.959] 
[10:26:04.959] getGlobalsAndPackages() ... DONE
[10:26:04.960] run() for ‘Future’ ...
[10:26:04.960] - state: ‘created’
[10:26:04.961] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:26:04.961] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:26:04.961] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:26:04.961]   - Field: ‘label’
[10:26:04.961]   - Field: ‘local’
[10:26:04.961]   - Field: ‘owner’
[10:26:04.961]   - Field: ‘envir’
[10:26:04.962]   - Field: ‘packages’
[10:26:04.962]   - Field: ‘gc’
[10:26:04.962]   - Field: ‘conditions’
[10:26:04.962]   - Field: ‘expr’
[10:26:04.962]   - Field: ‘uuid’
[10:26:04.962]   - Field: ‘seed’
[10:26:04.962]   - Field: ‘version’
[10:26:04.962]   - Field: ‘result’
[10:26:04.962]   - Field: ‘asynchronous’
[10:26:04.962]   - Field: ‘calls’
[10:26:04.962]   - Field: ‘globals’
[10:26:04.963]   - Field: ‘stdout’
[10:26:04.963]   - Field: ‘earlySignal’
[10:26:04.963]   - Field: ‘lazy’
[10:26:04.963]   - Field: ‘state’
[10:26:04.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:26:04.963] - Launch lazy future ...
[10:26:04.964] Packages needed by the future expression (n = 0): <none>
[10:26:04.964] Packages needed by future strategies (n = 0): <none>
[10:26:04.965] {
[10:26:04.965]     {
[10:26:04.965]         {
[10:26:04.965]             ...future.startTime <- base::Sys.time()
[10:26:04.965]             {
[10:26:04.965]                 {
[10:26:04.965]                   {
[10:26:04.965]                     base::local({
[10:26:04.965]                       has_future <- base::requireNamespace("future", 
[10:26:04.965]                         quietly = TRUE)
[10:26:04.965]                       if (has_future) {
[10:26:04.965]                         ns <- base::getNamespace("future")
[10:26:04.965]                         version <- ns[[".package"]][["version"]]
[10:26:04.965]                         if (is.null(version)) 
[10:26:04.965]                           version <- utils::packageVersion("future")
[10:26:04.965]                       }
[10:26:04.965]                       else {
[10:26:04.965]                         version <- NULL
[10:26:04.965]                       }
[10:26:04.965]                       if (!has_future || version < "1.8.0") {
[10:26:04.965]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.965]                           "", base::R.version$version.string), 
[10:26:04.965]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:04.965]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.965]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.965]                             "release", "version")], collapse = " "), 
[10:26:04.965]                           hostname = base::Sys.info()[["nodename"]])
[10:26:04.965]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.965]                           info)
[10:26:04.965]                         info <- base::paste(info, collapse = "; ")
[10:26:04.965]                         if (!has_future) {
[10:26:04.965]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.965]                             info)
[10:26:04.965]                         }
[10:26:04.965]                         else {
[10:26:04.965]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.965]                             info, version)
[10:26:04.965]                         }
[10:26:04.965]                         base::stop(msg)
[10:26:04.965]                       }
[10:26:04.965]                     })
[10:26:04.965]                   }
[10:26:04.965]                   options(future.plan = NULL)
[10:26:04.965]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.965]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.965]                 }
[10:26:04.965]                 ...future.workdir <- getwd()
[10:26:04.965]             }
[10:26:04.965]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.965]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.965]         }
[10:26:04.965]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.965]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.965]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.965]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:04.965]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.965]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.965]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.965]             base::names(...future.oldOptions))
[10:26:04.965]     }
[10:26:04.965]     if (FALSE) {
[10:26:04.965]     }
[10:26:04.965]     else {
[10:26:04.965]         if (TRUE) {
[10:26:04.965]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.965]                 open = "w")
[10:26:04.965]         }
[10:26:04.965]         else {
[10:26:04.965]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.965]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.965]         }
[10:26:04.965]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.965]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.965]             base::sink(type = "output", split = FALSE)
[10:26:04.965]             base::close(...future.stdout)
[10:26:04.965]         }, add = TRUE)
[10:26:04.965]     }
[10:26:04.965]     ...future.frame <- base::sys.nframe()
[10:26:04.965]     ...future.conditions <- base::list()
[10:26:04.965]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.965]     if (FALSE) {
[10:26:04.965]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.965]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.965]     }
[10:26:04.965]     ...future.result <- base::tryCatch({
[10:26:04.965]         base::withCallingHandlers({
[10:26:04.965]             ...future.value <- base::withVisible(base::local({
[10:26:04.965]                 my_fcn
[10:26:04.965]             }))
[10:26:04.965]             future::FutureResult(value = ...future.value$value, 
[10:26:04.965]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.965]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.965]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.965]                     ...future.globalenv.names))
[10:26:04.965]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.965]         }, condition = base::local({
[10:26:04.965]             c <- base::c
[10:26:04.965]             inherits <- base::inherits
[10:26:04.965]             invokeRestart <- base::invokeRestart
[10:26:04.965]             length <- base::length
[10:26:04.965]             list <- base::list
[10:26:04.965]             seq.int <- base::seq.int
[10:26:04.965]             signalCondition <- base::signalCondition
[10:26:04.965]             sys.calls <- base::sys.calls
[10:26:04.965]             `[[` <- base::`[[`
[10:26:04.965]             `+` <- base::`+`
[10:26:04.965]             `<<-` <- base::`<<-`
[10:26:04.965]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.965]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.965]                   3L)]
[10:26:04.965]             }
[10:26:04.965]             function(cond) {
[10:26:04.965]                 is_error <- inherits(cond, "error")
[10:26:04.965]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.965]                   NULL)
[10:26:04.965]                 if (is_error) {
[10:26:04.965]                   sessionInformation <- function() {
[10:26:04.965]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.965]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.965]                       search = base::search(), system = base::Sys.info())
[10:26:04.965]                   }
[10:26:04.965]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.965]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.965]                     cond$call), session = sessionInformation(), 
[10:26:04.965]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.965]                   signalCondition(cond)
[10:26:04.965]                 }
[10:26:04.965]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.965]                 "immediateCondition"))) {
[10:26:04.965]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.965]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.965]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.965]                   if (TRUE && !signal) {
[10:26:04.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.965]                     {
[10:26:04.965]                       inherits <- base::inherits
[10:26:04.965]                       invokeRestart <- base::invokeRestart
[10:26:04.965]                       is.null <- base::is.null
[10:26:04.965]                       muffled <- FALSE
[10:26:04.965]                       if (inherits(cond, "message")) {
[10:26:04.965]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.965]                         if (muffled) 
[10:26:04.965]                           invokeRestart("muffleMessage")
[10:26:04.965]                       }
[10:26:04.965]                       else if (inherits(cond, "warning")) {
[10:26:04.965]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.965]                         if (muffled) 
[10:26:04.965]                           invokeRestart("muffleWarning")
[10:26:04.965]                       }
[10:26:04.965]                       else if (inherits(cond, "condition")) {
[10:26:04.965]                         if (!is.null(pattern)) {
[10:26:04.965]                           computeRestarts <- base::computeRestarts
[10:26:04.965]                           grepl <- base::grepl
[10:26:04.965]                           restarts <- computeRestarts(cond)
[10:26:04.965]                           for (restart in restarts) {
[10:26:04.965]                             name <- restart$name
[10:26:04.965]                             if (is.null(name)) 
[10:26:04.965]                               next
[10:26:04.965]                             if (!grepl(pattern, name)) 
[10:26:04.965]                               next
[10:26:04.965]                             invokeRestart(restart)
[10:26:04.965]                             muffled <- TRUE
[10:26:04.965]                             break
[10:26:04.965]                           }
[10:26:04.965]                         }
[10:26:04.965]                       }
[10:26:04.965]                       invisible(muffled)
[10:26:04.965]                     }
[10:26:04.965]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.965]                   }
[10:26:04.965]                 }
[10:26:04.965]                 else {
[10:26:04.965]                   if (TRUE) {
[10:26:04.965]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.965]                     {
[10:26:04.965]                       inherits <- base::inherits
[10:26:04.965]                       invokeRestart <- base::invokeRestart
[10:26:04.965]                       is.null <- base::is.null
[10:26:04.965]                       muffled <- FALSE
[10:26:04.965]                       if (inherits(cond, "message")) {
[10:26:04.965]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.965]                         if (muffled) 
[10:26:04.965]                           invokeRestart("muffleMessage")
[10:26:04.965]                       }
[10:26:04.965]                       else if (inherits(cond, "warning")) {
[10:26:04.965]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.965]                         if (muffled) 
[10:26:04.965]                           invokeRestart("muffleWarning")
[10:26:04.965]                       }
[10:26:04.965]                       else if (inherits(cond, "condition")) {
[10:26:04.965]                         if (!is.null(pattern)) {
[10:26:04.965]                           computeRestarts <- base::computeRestarts
[10:26:04.965]                           grepl <- base::grepl
[10:26:04.965]                           restarts <- computeRestarts(cond)
[10:26:04.965]                           for (restart in restarts) {
[10:26:04.965]                             name <- restart$name
[10:26:04.965]                             if (is.null(name)) 
[10:26:04.965]                               next
[10:26:04.965]                             if (!grepl(pattern, name)) 
[10:26:04.965]                               next
[10:26:04.965]                             invokeRestart(restart)
[10:26:04.965]                             muffled <- TRUE
[10:26:04.965]                             break
[10:26:04.965]                           }
[10:26:04.965]                         }
[10:26:04.965]                       }
[10:26:04.965]                       invisible(muffled)
[10:26:04.965]                     }
[10:26:04.965]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.965]                   }
[10:26:04.965]                 }
[10:26:04.965]             }
[10:26:04.965]         }))
[10:26:04.965]     }, error = function(ex) {
[10:26:04.965]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.965]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.965]                 ...future.rng), started = ...future.startTime, 
[10:26:04.965]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.965]             version = "1.8"), class = "FutureResult")
[10:26:04.965]     }, finally = {
[10:26:04.965]         if (!identical(...future.workdir, getwd())) 
[10:26:04.965]             setwd(...future.workdir)
[10:26:04.965]         {
[10:26:04.965]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.965]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.965]             }
[10:26:04.965]             base::options(...future.oldOptions)
[10:26:04.965]             if (.Platform$OS.type == "windows") {
[10:26:04.965]                 old_names <- names(...future.oldEnvVars)
[10:26:04.965]                 envs <- base::Sys.getenv()
[10:26:04.965]                 names <- names(envs)
[10:26:04.965]                 common <- intersect(names, old_names)
[10:26:04.965]                 added <- setdiff(names, old_names)
[10:26:04.965]                 removed <- setdiff(old_names, names)
[10:26:04.965]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.965]                   envs[common]]
[10:26:04.965]                 NAMES <- toupper(changed)
[10:26:04.965]                 args <- list()
[10:26:04.965]                 for (kk in seq_along(NAMES)) {
[10:26:04.965]                   name <- changed[[kk]]
[10:26:04.965]                   NAME <- NAMES[[kk]]
[10:26:04.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.965]                     next
[10:26:04.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.965]                 }
[10:26:04.965]                 NAMES <- toupper(added)
[10:26:04.965]                 for (kk in seq_along(NAMES)) {
[10:26:04.965]                   name <- added[[kk]]
[10:26:04.965]                   NAME <- NAMES[[kk]]
[10:26:04.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.965]                     next
[10:26:04.965]                   args[[name]] <- ""
[10:26:04.965]                 }
[10:26:04.965]                 NAMES <- toupper(removed)
[10:26:04.965]                 for (kk in seq_along(NAMES)) {
[10:26:04.965]                   name <- removed[[kk]]
[10:26:04.965]                   NAME <- NAMES[[kk]]
[10:26:04.965]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.965]                     next
[10:26:04.965]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.965]                 }
[10:26:04.965]                 if (length(args) > 0) 
[10:26:04.965]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.965]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.965]             }
[10:26:04.965]             else {
[10:26:04.965]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.965]             }
[10:26:04.965]             {
[10:26:04.965]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.965]                   0L) {
[10:26:04.965]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.965]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.965]                   base::options(opts)
[10:26:04.965]                 }
[10:26:04.965]                 {
[10:26:04.965]                   {
[10:26:04.965]                     NULL
[10:26:04.965]                     RNGkind("Mersenne-Twister")
[10:26:04.965]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:26:04.965]                       inherits = FALSE)
[10:26:04.965]                   }
[10:26:04.965]                   options(future.plan = NULL)
[10:26:04.965]                   if (is.na(NA_character_)) 
[10:26:04.965]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.965]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.965]                   future::plan(list(function (..., envir = parent.frame()) 
[10:26:04.965]                   {
[10:26:04.965]                     future <- SequentialFuture(..., envir = envir)
[10:26:04.965]                     if (!future$lazy) 
[10:26:04.965]                       future <- run(future)
[10:26:04.965]                     invisible(future)
[10:26:04.965]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:04.965]                 }
[10:26:04.965]             }
[10:26:04.965]         }
[10:26:04.965]     })
[10:26:04.965]     if (TRUE) {
[10:26:04.965]         base::sink(type = "output", split = FALSE)
[10:26:04.965]         if (TRUE) {
[10:26:04.965]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.965]         }
[10:26:04.965]         else {
[10:26:04.965]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.965]         }
[10:26:04.965]         base::close(...future.stdout)
[10:26:04.965]         ...future.stdout <- NULL
[10:26:04.965]     }
[10:26:04.965]     ...future.result$conditions <- ...future.conditions
[10:26:04.965]     ...future.result$finished <- base::Sys.time()
[10:26:04.965]     ...future.result
[10:26:04.965] }
[10:26:04.967] assign_globals() ...
[10:26:04.967] List of 1
[10:26:04.967]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:26:04.967]   .. ..@ .Data     :function (x)  
[10:26:04.967]   .. ..@ generic   : chr "my_fcn"
[10:26:04.967]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:26:04.967]   .. ..@ package   : chr ".GlobalEnv"
[10:26:04.967]   .. ..@ group     : list()
[10:26:04.967]   .. ..@ valueClass: chr(0) 
[10:26:04.967]   .. ..@ signature : chr "x"
[10:26:04.967]   .. ..@ default   : NULL
[10:26:04.967]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:26:04.967]  - attr(*, "where")=List of 1
[10:26:04.967]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:26:04.967]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:26:04.967]  - attr(*, "resolved")= logi FALSE
[10:26:04.967]  - attr(*, "total_size")= num 3936
[10:26:04.967]  - attr(*, "already-done")= logi TRUE
[10:26:04.976] - reassign environment for ‘my_fcn’
[10:26:04.977] - copied ‘my_fcn’ to environment
[10:26:04.977] assign_globals() ... done
[10:26:04.977] plan(): Setting new future strategy stack:
[10:26:04.977] List of future strategies:
[10:26:04.977] 1. sequential:
[10:26:04.977]    - args: function (..., envir = parent.frame())
[10:26:04.977]    - tweaked: FALSE
[10:26:04.977]    - call: NULL
[10:26:04.978] plan(): nbrOfWorkers() = 1
[10:26:04.979] plan(): Setting new future strategy stack:
[10:26:04.979] List of future strategies:
[10:26:04.979] 1. sequential:
[10:26:04.979]    - args: function (..., envir = parent.frame())
[10:26:04.979]    - tweaked: FALSE
[10:26:04.979]    - call: plan(strategy)
[10:26:04.979] plan(): nbrOfWorkers() = 1
[10:26:04.979] SequentialFuture started (and completed)
[10:26:04.980] - Launch lazy future ... done
[10:26:04.980] run() for ‘SequentialFuture’ ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557915535688>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:26:04.980] getGlobalsAndPackages() ...
[10:26:04.980] Searching for globals...
[10:26:04.984] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:04.984] Searching for globals ... DONE
[10:26:04.985] Resolving globals: FALSE
[10:26:04.985] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:04.985] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:04.985] - globals: [1] ‘my_fcn’
[10:26:04.986] 
[10:26:04.986] getGlobalsAndPackages() ... DONE
[10:26:04.986] run() for ‘Future’ ...
[10:26:04.986] - state: ‘created’
[10:26:04.986] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:26:04.986] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:26:04.986] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:26:04.987]   - Field: ‘label’
[10:26:04.987]   - Field: ‘local’
[10:26:04.987]   - Field: ‘owner’
[10:26:04.987]   - Field: ‘envir’
[10:26:04.987]   - Field: ‘packages’
[10:26:04.987]   - Field: ‘gc’
[10:26:04.987]   - Field: ‘conditions’
[10:26:04.987]   - Field: ‘expr’
[10:26:04.987]   - Field: ‘uuid’
[10:26:04.987]   - Field: ‘seed’
[10:26:04.988]   - Field: ‘version’
[10:26:04.988]   - Field: ‘result’
[10:26:04.988]   - Field: ‘asynchronous’
[10:26:04.988]   - Field: ‘calls’
[10:26:04.988]   - Field: ‘globals’
[10:26:04.988]   - Field: ‘stdout’
[10:26:04.988]   - Field: ‘earlySignal’
[10:26:04.988]   - Field: ‘lazy’
[10:26:04.988]   - Field: ‘state’
[10:26:04.988] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:26:04.988] - Launch lazy future ...
[10:26:04.989] Packages needed by the future expression (n = 0): <none>
[10:26:04.989] Packages needed by future strategies (n = 0): <none>
[10:26:04.989] {
[10:26:04.989]     {
[10:26:04.989]         {
[10:26:04.989]             ...future.startTime <- base::Sys.time()
[10:26:04.989]             {
[10:26:04.989]                 {
[10:26:04.989]                   {
[10:26:04.989]                     base::local({
[10:26:04.989]                       has_future <- base::requireNamespace("future", 
[10:26:04.989]                         quietly = TRUE)
[10:26:04.989]                       if (has_future) {
[10:26:04.989]                         ns <- base::getNamespace("future")
[10:26:04.989]                         version <- ns[[".package"]][["version"]]
[10:26:04.989]                         if (is.null(version)) 
[10:26:04.989]                           version <- utils::packageVersion("future")
[10:26:04.989]                       }
[10:26:04.989]                       else {
[10:26:04.989]                         version <- NULL
[10:26:04.989]                       }
[10:26:04.989]                       if (!has_future || version < "1.8.0") {
[10:26:04.989]                         info <- base::c(r_version = base::gsub("R version ", 
[10:26:04.989]                           "", base::R.version$version.string), 
[10:26:04.989]                           platform = base::sprintf("%s (%s-bit)", 
[10:26:04.989]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:04.989]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:04.989]                             "release", "version")], collapse = " "), 
[10:26:04.989]                           hostname = base::Sys.info()[["nodename"]])
[10:26:04.989]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:26:04.989]                           info)
[10:26:04.989]                         info <- base::paste(info, collapse = "; ")
[10:26:04.989]                         if (!has_future) {
[10:26:04.989]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:04.989]                             info)
[10:26:04.989]                         }
[10:26:04.989]                         else {
[10:26:04.989]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:04.989]                             info, version)
[10:26:04.989]                         }
[10:26:04.989]                         base::stop(msg)
[10:26:04.989]                       }
[10:26:04.989]                     })
[10:26:04.989]                   }
[10:26:04.989]                   options(future.plan = NULL)
[10:26:04.989]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.989]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:04.989]                 }
[10:26:04.989]                 ...future.workdir <- getwd()
[10:26:04.989]             }
[10:26:04.989]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:04.989]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:04.989]         }
[10:26:04.989]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:04.989]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:04.989]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:04.989]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:04.989]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:04.989]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:04.989]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:04.989]             base::names(...future.oldOptions))
[10:26:04.989]     }
[10:26:04.989]     if (FALSE) {
[10:26:04.989]     }
[10:26:04.989]     else {
[10:26:04.989]         if (TRUE) {
[10:26:04.989]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:04.989]                 open = "w")
[10:26:04.989]         }
[10:26:04.989]         else {
[10:26:04.989]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:04.989]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:04.989]         }
[10:26:04.989]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:04.989]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:04.989]             base::sink(type = "output", split = FALSE)
[10:26:04.989]             base::close(...future.stdout)
[10:26:04.989]         }, add = TRUE)
[10:26:04.989]     }
[10:26:04.989]     ...future.frame <- base::sys.nframe()
[10:26:04.989]     ...future.conditions <- base::list()
[10:26:04.989]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:04.989]     if (FALSE) {
[10:26:04.989]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:04.989]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:04.989]     }
[10:26:04.989]     ...future.result <- base::tryCatch({
[10:26:04.989]         base::withCallingHandlers({
[10:26:04.989]             ...future.value <- base::withVisible(base::local({
[10:26:04.989]                 my_fcn(3)
[10:26:04.989]             }))
[10:26:04.989]             future::FutureResult(value = ...future.value$value, 
[10:26:04.989]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.989]                   ...future.rng), globalenv = if (FALSE) 
[10:26:04.989]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:04.989]                     ...future.globalenv.names))
[10:26:04.989]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:04.989]         }, condition = base::local({
[10:26:04.989]             c <- base::c
[10:26:04.989]             inherits <- base::inherits
[10:26:04.989]             invokeRestart <- base::invokeRestart
[10:26:04.989]             length <- base::length
[10:26:04.989]             list <- base::list
[10:26:04.989]             seq.int <- base::seq.int
[10:26:04.989]             signalCondition <- base::signalCondition
[10:26:04.989]             sys.calls <- base::sys.calls
[10:26:04.989]             `[[` <- base::`[[`
[10:26:04.989]             `+` <- base::`+`
[10:26:04.989]             `<<-` <- base::`<<-`
[10:26:04.989]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:04.989]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:04.989]                   3L)]
[10:26:04.989]             }
[10:26:04.989]             function(cond) {
[10:26:04.989]                 is_error <- inherits(cond, "error")
[10:26:04.989]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:04.989]                   NULL)
[10:26:04.989]                 if (is_error) {
[10:26:04.989]                   sessionInformation <- function() {
[10:26:04.989]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:04.989]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:04.989]                       search = base::search(), system = base::Sys.info())
[10:26:04.989]                   }
[10:26:04.989]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.989]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:04.989]                     cond$call), session = sessionInformation(), 
[10:26:04.989]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:04.989]                   signalCondition(cond)
[10:26:04.989]                 }
[10:26:04.989]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:04.989]                 "immediateCondition"))) {
[10:26:04.989]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:04.989]                   ...future.conditions[[length(...future.conditions) + 
[10:26:04.989]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:04.989]                   if (TRUE && !signal) {
[10:26:04.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.989]                     {
[10:26:04.989]                       inherits <- base::inherits
[10:26:04.989]                       invokeRestart <- base::invokeRestart
[10:26:04.989]                       is.null <- base::is.null
[10:26:04.989]                       muffled <- FALSE
[10:26:04.989]                       if (inherits(cond, "message")) {
[10:26:04.989]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.989]                         if (muffled) 
[10:26:04.989]                           invokeRestart("muffleMessage")
[10:26:04.989]                       }
[10:26:04.989]                       else if (inherits(cond, "warning")) {
[10:26:04.989]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.989]                         if (muffled) 
[10:26:04.989]                           invokeRestart("muffleWarning")
[10:26:04.989]                       }
[10:26:04.989]                       else if (inherits(cond, "condition")) {
[10:26:04.989]                         if (!is.null(pattern)) {
[10:26:04.989]                           computeRestarts <- base::computeRestarts
[10:26:04.989]                           grepl <- base::grepl
[10:26:04.989]                           restarts <- computeRestarts(cond)
[10:26:04.989]                           for (restart in restarts) {
[10:26:04.989]                             name <- restart$name
[10:26:04.989]                             if (is.null(name)) 
[10:26:04.989]                               next
[10:26:04.989]                             if (!grepl(pattern, name)) 
[10:26:04.989]                               next
[10:26:04.989]                             invokeRestart(restart)
[10:26:04.989]                             muffled <- TRUE
[10:26:04.989]                             break
[10:26:04.989]                           }
[10:26:04.989]                         }
[10:26:04.989]                       }
[10:26:04.989]                       invisible(muffled)
[10:26:04.989]                     }
[10:26:04.989]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.989]                   }
[10:26:04.989]                 }
[10:26:04.989]                 else {
[10:26:04.989]                   if (TRUE) {
[10:26:04.989]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:04.989]                     {
[10:26:04.989]                       inherits <- base::inherits
[10:26:04.989]                       invokeRestart <- base::invokeRestart
[10:26:04.989]                       is.null <- base::is.null
[10:26:04.989]                       muffled <- FALSE
[10:26:04.989]                       if (inherits(cond, "message")) {
[10:26:04.989]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:04.989]                         if (muffled) 
[10:26:04.989]                           invokeRestart("muffleMessage")
[10:26:04.989]                       }
[10:26:04.989]                       else if (inherits(cond, "warning")) {
[10:26:04.989]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:04.989]                         if (muffled) 
[10:26:04.989]                           invokeRestart("muffleWarning")
[10:26:04.989]                       }
[10:26:04.989]                       else if (inherits(cond, "condition")) {
[10:26:04.989]                         if (!is.null(pattern)) {
[10:26:04.989]                           computeRestarts <- base::computeRestarts
[10:26:04.989]                           grepl <- base::grepl
[10:26:04.989]                           restarts <- computeRestarts(cond)
[10:26:04.989]                           for (restart in restarts) {
[10:26:04.989]                             name <- restart$name
[10:26:04.989]                             if (is.null(name)) 
[10:26:04.989]                               next
[10:26:04.989]                             if (!grepl(pattern, name)) 
[10:26:04.989]                               next
[10:26:04.989]                             invokeRestart(restart)
[10:26:04.989]                             muffled <- TRUE
[10:26:04.989]                             break
[10:26:04.989]                           }
[10:26:04.989]                         }
[10:26:04.989]                       }
[10:26:04.989]                       invisible(muffled)
[10:26:04.989]                     }
[10:26:04.989]                     muffleCondition(cond, pattern = "^muffle")
[10:26:04.989]                   }
[10:26:04.989]                 }
[10:26:04.989]             }
[10:26:04.989]         }))
[10:26:04.989]     }, error = function(ex) {
[10:26:04.989]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:04.989]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:04.989]                 ...future.rng), started = ...future.startTime, 
[10:26:04.989]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:04.989]             version = "1.8"), class = "FutureResult")
[10:26:04.989]     }, finally = {
[10:26:04.989]         if (!identical(...future.workdir, getwd())) 
[10:26:04.989]             setwd(...future.workdir)
[10:26:04.989]         {
[10:26:04.989]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:04.989]                 ...future.oldOptions$nwarnings <- NULL
[10:26:04.989]             }
[10:26:04.989]             base::options(...future.oldOptions)
[10:26:04.989]             if (.Platform$OS.type == "windows") {
[10:26:04.989]                 old_names <- names(...future.oldEnvVars)
[10:26:04.989]                 envs <- base::Sys.getenv()
[10:26:04.989]                 names <- names(envs)
[10:26:04.989]                 common <- intersect(names, old_names)
[10:26:04.989]                 added <- setdiff(names, old_names)
[10:26:04.989]                 removed <- setdiff(old_names, names)
[10:26:04.989]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:04.989]                   envs[common]]
[10:26:04.989]                 NAMES <- toupper(changed)
[10:26:04.989]                 args <- list()
[10:26:04.989]                 for (kk in seq_along(NAMES)) {
[10:26:04.989]                   name <- changed[[kk]]
[10:26:04.989]                   NAME <- NAMES[[kk]]
[10:26:04.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.989]                     next
[10:26:04.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.989]                 }
[10:26:04.989]                 NAMES <- toupper(added)
[10:26:04.989]                 for (kk in seq_along(NAMES)) {
[10:26:04.989]                   name <- added[[kk]]
[10:26:04.989]                   NAME <- NAMES[[kk]]
[10:26:04.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.989]                     next
[10:26:04.989]                   args[[name]] <- ""
[10:26:04.989]                 }
[10:26:04.989]                 NAMES <- toupper(removed)
[10:26:04.989]                 for (kk in seq_along(NAMES)) {
[10:26:04.989]                   name <- removed[[kk]]
[10:26:04.989]                   NAME <- NAMES[[kk]]
[10:26:04.989]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:04.989]                     next
[10:26:04.989]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:04.989]                 }
[10:26:04.989]                 if (length(args) > 0) 
[10:26:04.989]                   base::do.call(base::Sys.setenv, args = args)
[10:26:04.989]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:04.989]             }
[10:26:04.989]             else {
[10:26:04.989]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:04.989]             }
[10:26:04.989]             {
[10:26:04.989]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:04.989]                   0L) {
[10:26:04.989]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:04.989]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:04.989]                   base::options(opts)
[10:26:04.989]                 }
[10:26:04.989]                 {
[10:26:04.989]                   {
[10:26:04.989]                     NULL
[10:26:04.989]                     RNGkind("Mersenne-Twister")
[10:26:04.989]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:26:04.989]                       inherits = FALSE)
[10:26:04.989]                   }
[10:26:04.989]                   options(future.plan = NULL)
[10:26:04.989]                   if (is.na(NA_character_)) 
[10:26:04.989]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:04.989]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:04.989]                   future::plan(list(function (..., envir = parent.frame()) 
[10:26:04.989]                   {
[10:26:04.989]                     future <- SequentialFuture(..., envir = envir)
[10:26:04.989]                     if (!future$lazy) 
[10:26:04.989]                       future <- run(future)
[10:26:04.989]                     invisible(future)
[10:26:04.989]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:04.989]                 }
[10:26:04.989]             }
[10:26:04.989]         }
[10:26:04.989]     })
[10:26:04.989]     if (TRUE) {
[10:26:04.989]         base::sink(type = "output", split = FALSE)
[10:26:04.989]         if (TRUE) {
[10:26:04.989]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:04.989]         }
[10:26:04.989]         else {
[10:26:04.989]             ...future.result["stdout"] <- base::list(NULL)
[10:26:04.989]         }
[10:26:04.989]         base::close(...future.stdout)
[10:26:04.989]         ...future.stdout <- NULL
[10:26:04.989]     }
[10:26:04.989]     ...future.result$conditions <- ...future.conditions
[10:26:04.989]     ...future.result$finished <- base::Sys.time()
[10:26:04.989]     ...future.result
[10:26:04.989] }
[10:26:04.991] assign_globals() ...
[10:26:04.991] List of 1
[10:26:04.991]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:26:04.991]   .. ..@ .Data     :function (x)  
[10:26:04.991]   .. ..@ generic   : chr "my_fcn"
[10:26:04.991]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:26:04.991]   .. ..@ package   : chr ".GlobalEnv"
[10:26:04.991]   .. ..@ group     : list()
[10:26:04.991]   .. ..@ valueClass: chr(0) 
[10:26:04.991]   .. ..@ signature : chr "x"
[10:26:04.991]   .. ..@ default   : NULL
[10:26:04.991]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:26:04.991]  - attr(*, "where")=List of 1
[10:26:04.991]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:26:04.991]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:26:04.991]  - attr(*, "resolved")= logi FALSE
[10:26:04.991]  - attr(*, "total_size")= num 3936
[10:26:04.991]  - attr(*, "already-done")= logi TRUE
[10:26:04.995] - reassign environment for ‘my_fcn’
[10:26:04.995] - copied ‘my_fcn’ to environment
[10:26:04.996] assign_globals() ... done
[10:26:04.996] plan(): Setting new future strategy stack:
[10:26:04.996] List of future strategies:
[10:26:04.996] 1. sequential:
[10:26:04.996]    - args: function (..., envir = parent.frame())
[10:26:04.996]    - tweaked: FALSE
[10:26:04.996]    - call: NULL
[10:26:04.996] plan(): nbrOfWorkers() = 1
[10:26:04.998] plan(): Setting new future strategy stack:
[10:26:04.998] List of future strategies:
[10:26:04.998] 1. sequential:
[10:26:04.998]    - args: function (..., envir = parent.frame())
[10:26:04.998]    - tweaked: FALSE
[10:26:04.998]    - call: plan(strategy)
[10:26:04.998] plan(): nbrOfWorkers() = 1
[10:26:04.998] SequentialFuture started (and completed)
[10:26:04.998] signalConditions() ...
[10:26:04.999]  - include = ‘immediateCondition’
[10:26:04.999]  - exclude = 
[10:26:04.999]  - resignal = FALSE
[10:26:04.999]  - Number of conditions: 1
[10:26:04.999] signalConditions() ... done
[10:26:04.999] - Launch lazy future ... done
[10:26:04.999] run() for ‘SequentialFuture’ ... done
[10:26:04.999] signalConditions() ...
[10:26:04.999]  - include = ‘immediateCondition’
[10:26:04.999]  - exclude = 
[10:26:04.999]  - resignal = FALSE
[10:26:05.000]  - Number of conditions: 1
[10:26:05.000] signalConditions() ... done
[10:26:05.001] Future state: ‘finished’
[10:26:05.001] signalConditions() ...
[10:26:05.001]  - include = ‘condition’
[10:26:05.001]  - exclude = ‘immediateCondition’
[10:26:05.002]  - resignal = TRUE
[10:26:05.002]  - Number of conditions: 1
[10:26:05.002]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:26:05.002] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multicore
[10:26:05.003] plan(): Setting new future strategy stack:
[10:26:05.003] List of future strategies:
[10:26:05.003] 1. multicore:
[10:26:05.003]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:26:05.003]    - tweaked: FALSE
[10:26:05.003]    - call: plan(strategy)
[10:26:05.007] plan(): nbrOfWorkers() = 2
[10:26:05.007] getGlobalsAndPackages() ...
[10:26:05.007] Searching for globals...
[10:26:05.009] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:05.009] Searching for globals ... DONE
[10:26:05.009] Resolving globals: FALSE
[10:26:05.009] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:05.010] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:05.010] - globals: [1] ‘my_fcn’
[10:26:05.010] 
[10:26:05.010] getGlobalsAndPackages() ... DONE
[10:26:05.010] run() for ‘Future’ ...
[10:26:05.010] - state: ‘created’
[10:26:05.011] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:26:05.014] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:05.014] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:26:05.014]   - Field: ‘label’
[10:26:05.014]   - Field: ‘local’
[10:26:05.014]   - Field: ‘owner’
[10:26:05.015]   - Field: ‘envir’
[10:26:05.015]   - Field: ‘workers’
[10:26:05.015]   - Field: ‘packages’
[10:26:05.015]   - Field: ‘gc’
[10:26:05.015]   - Field: ‘job’
[10:26:05.015]   - Field: ‘conditions’
[10:26:05.015]   - Field: ‘expr’
[10:26:05.015]   - Field: ‘uuid’
[10:26:05.015]   - Field: ‘seed’
[10:26:05.015]   - Field: ‘version’
[10:26:05.015]   - Field: ‘result’
[10:26:05.016]   - Field: ‘asynchronous’
[10:26:05.016]   - Field: ‘calls’
[10:26:05.016]   - Field: ‘globals’
[10:26:05.016]   - Field: ‘stdout’
[10:26:05.016]   - Field: ‘earlySignal’
[10:26:05.016]   - Field: ‘lazy’
[10:26:05.016]   - Field: ‘state’
[10:26:05.016] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:26:05.016] - Launch lazy future ...
[10:26:05.017] Packages needed by the future expression (n = 0): <none>
[10:26:05.017] Packages needed by future strategies (n = 0): <none>
[10:26:05.018] {
[10:26:05.018]     {
[10:26:05.018]         {
[10:26:05.018]             ...future.startTime <- base::Sys.time()
[10:26:05.018]             {
[10:26:05.018]                 {
[10:26:05.018]                   {
[10:26:05.018]                     {
[10:26:05.018]                       base::local({
[10:26:05.018]                         has_future <- base::requireNamespace("future", 
[10:26:05.018]                           quietly = TRUE)
[10:26:05.018]                         if (has_future) {
[10:26:05.018]                           ns <- base::getNamespace("future")
[10:26:05.018]                           version <- ns[[".package"]][["version"]]
[10:26:05.018]                           if (is.null(version)) 
[10:26:05.018]                             version <- utils::packageVersion("future")
[10:26:05.018]                         }
[10:26:05.018]                         else {
[10:26:05.018]                           version <- NULL
[10:26:05.018]                         }
[10:26:05.018]                         if (!has_future || version < "1.8.0") {
[10:26:05.018]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:05.018]                             "", base::R.version$version.string), 
[10:26:05.018]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:05.018]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:05.018]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:05.018]                               "release", "version")], collapse = " "), 
[10:26:05.018]                             hostname = base::Sys.info()[["nodename"]])
[10:26:05.018]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:05.018]                             info)
[10:26:05.018]                           info <- base::paste(info, collapse = "; ")
[10:26:05.018]                           if (!has_future) {
[10:26:05.018]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:05.018]                               info)
[10:26:05.018]                           }
[10:26:05.018]                           else {
[10:26:05.018]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:05.018]                               info, version)
[10:26:05.018]                           }
[10:26:05.018]                           base::stop(msg)
[10:26:05.018]                         }
[10:26:05.018]                       })
[10:26:05.018]                     }
[10:26:05.018]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:05.018]                     base::options(mc.cores = 1L)
[10:26:05.018]                   }
[10:26:05.018]                   options(future.plan = NULL)
[10:26:05.018]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.018]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:05.018]                 }
[10:26:05.018]                 ...future.workdir <- getwd()
[10:26:05.018]             }
[10:26:05.018]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:05.018]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:05.018]         }
[10:26:05.018]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:05.018]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:05.018]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:05.018]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:05.018]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:05.018]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:05.018]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:05.018]             base::names(...future.oldOptions))
[10:26:05.018]     }
[10:26:05.018]     if (FALSE) {
[10:26:05.018]     }
[10:26:05.018]     else {
[10:26:05.018]         if (TRUE) {
[10:26:05.018]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:05.018]                 open = "w")
[10:26:05.018]         }
[10:26:05.018]         else {
[10:26:05.018]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:05.018]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:05.018]         }
[10:26:05.018]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:05.018]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:05.018]             base::sink(type = "output", split = FALSE)
[10:26:05.018]             base::close(...future.stdout)
[10:26:05.018]         }, add = TRUE)
[10:26:05.018]     }
[10:26:05.018]     ...future.frame <- base::sys.nframe()
[10:26:05.018]     ...future.conditions <- base::list()
[10:26:05.018]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:05.018]     if (FALSE) {
[10:26:05.018]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:05.018]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:05.018]     }
[10:26:05.018]     ...future.result <- base::tryCatch({
[10:26:05.018]         base::withCallingHandlers({
[10:26:05.018]             ...future.value <- base::withVisible(base::local({
[10:26:05.018]                 withCallingHandlers({
[10:26:05.018]                   {
[10:26:05.018]                     my_fcn
[10:26:05.018]                   }
[10:26:05.018]                 }, immediateCondition = function(cond) {
[10:26:05.018]                   save_rds <- function (object, pathname, ...) 
[10:26:05.018]                   {
[10:26:05.018]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:26:05.018]                     if (file_test("-f", pathname_tmp)) {
[10:26:05.018]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.018]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:26:05.018]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.018]                         fi_tmp[["mtime"]])
[10:26:05.018]                     }
[10:26:05.018]                     tryCatch({
[10:26:05.018]                       saveRDS(object, file = pathname_tmp, ...)
[10:26:05.018]                     }, error = function(ex) {
[10:26:05.018]                       msg <- conditionMessage(ex)
[10:26:05.018]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.018]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:26:05.018]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.018]                         fi_tmp[["mtime"]], msg)
[10:26:05.018]                       ex$message <- msg
[10:26:05.018]                       stop(ex)
[10:26:05.018]                     })
[10:26:05.018]                     stopifnot(file_test("-f", pathname_tmp))
[10:26:05.018]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:26:05.018]                     if (!res || file_test("-f", pathname_tmp)) {
[10:26:05.018]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.018]                       fi <- file.info(pathname)
[10:26:05.018]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:26:05.018]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.018]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:26:05.018]                         fi[["size"]], fi[["mtime"]])
[10:26:05.018]                       stop(msg)
[10:26:05.018]                     }
[10:26:05.018]                     invisible(pathname)
[10:26:05.018]                   }
[10:26:05.018]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:26:05.018]                     rootPath = tempdir()) 
[10:26:05.018]                   {
[10:26:05.018]                     obj <- list(time = Sys.time(), condition = cond)
[10:26:05.018]                     file <- tempfile(pattern = class(cond)[1], 
[10:26:05.018]                       tmpdir = path, fileext = ".rds")
[10:26:05.018]                     save_rds(obj, file)
[10:26:05.018]                   }
[10:26:05.018]                   saveImmediateCondition(cond, path = "/tmp/RtmpKeKLlv/.future/immediateConditions")
[10:26:05.018]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.018]                   {
[10:26:05.018]                     inherits <- base::inherits
[10:26:05.018]                     invokeRestart <- base::invokeRestart
[10:26:05.018]                     is.null <- base::is.null
[10:26:05.018]                     muffled <- FALSE
[10:26:05.018]                     if (inherits(cond, "message")) {
[10:26:05.018]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:05.018]                       if (muffled) 
[10:26:05.018]                         invokeRestart("muffleMessage")
[10:26:05.018]                     }
[10:26:05.018]                     else if (inherits(cond, "warning")) {
[10:26:05.018]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:05.018]                       if (muffled) 
[10:26:05.018]                         invokeRestart("muffleWarning")
[10:26:05.018]                     }
[10:26:05.018]                     else if (inherits(cond, "condition")) {
[10:26:05.018]                       if (!is.null(pattern)) {
[10:26:05.018]                         computeRestarts <- base::computeRestarts
[10:26:05.018]                         grepl <- base::grepl
[10:26:05.018]                         restarts <- computeRestarts(cond)
[10:26:05.018]                         for (restart in restarts) {
[10:26:05.018]                           name <- restart$name
[10:26:05.018]                           if (is.null(name)) 
[10:26:05.018]                             next
[10:26:05.018]                           if (!grepl(pattern, name)) 
[10:26:05.018]                             next
[10:26:05.018]                           invokeRestart(restart)
[10:26:05.018]                           muffled <- TRUE
[10:26:05.018]                           break
[10:26:05.018]                         }
[10:26:05.018]                       }
[10:26:05.018]                     }
[10:26:05.018]                     invisible(muffled)
[10:26:05.018]                   }
[10:26:05.018]                   muffleCondition(cond)
[10:26:05.018]                 })
[10:26:05.018]             }))
[10:26:05.018]             future::FutureResult(value = ...future.value$value, 
[10:26:05.018]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.018]                   ...future.rng), globalenv = if (FALSE) 
[10:26:05.018]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:05.018]                     ...future.globalenv.names))
[10:26:05.018]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:05.018]         }, condition = base::local({
[10:26:05.018]             c <- base::c
[10:26:05.018]             inherits <- base::inherits
[10:26:05.018]             invokeRestart <- base::invokeRestart
[10:26:05.018]             length <- base::length
[10:26:05.018]             list <- base::list
[10:26:05.018]             seq.int <- base::seq.int
[10:26:05.018]             signalCondition <- base::signalCondition
[10:26:05.018]             sys.calls <- base::sys.calls
[10:26:05.018]             `[[` <- base::`[[`
[10:26:05.018]             `+` <- base::`+`
[10:26:05.018]             `<<-` <- base::`<<-`
[10:26:05.018]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:05.018]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:05.018]                   3L)]
[10:26:05.018]             }
[10:26:05.018]             function(cond) {
[10:26:05.018]                 is_error <- inherits(cond, "error")
[10:26:05.018]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:05.018]                   NULL)
[10:26:05.018]                 if (is_error) {
[10:26:05.018]                   sessionInformation <- function() {
[10:26:05.018]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:05.018]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:05.018]                       search = base::search(), system = base::Sys.info())
[10:26:05.018]                   }
[10:26:05.018]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.018]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:05.018]                     cond$call), session = sessionInformation(), 
[10:26:05.018]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:05.018]                   signalCondition(cond)
[10:26:05.018]                 }
[10:26:05.018]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:05.018]                 "immediateCondition"))) {
[10:26:05.018]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:05.018]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.018]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:05.018]                   if (TRUE && !signal) {
[10:26:05.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.018]                     {
[10:26:05.018]                       inherits <- base::inherits
[10:26:05.018]                       invokeRestart <- base::invokeRestart
[10:26:05.018]                       is.null <- base::is.null
[10:26:05.018]                       muffled <- FALSE
[10:26:05.018]                       if (inherits(cond, "message")) {
[10:26:05.018]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.018]                         if (muffled) 
[10:26:05.018]                           invokeRestart("muffleMessage")
[10:26:05.018]                       }
[10:26:05.018]                       else if (inherits(cond, "warning")) {
[10:26:05.018]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.018]                         if (muffled) 
[10:26:05.018]                           invokeRestart("muffleWarning")
[10:26:05.018]                       }
[10:26:05.018]                       else if (inherits(cond, "condition")) {
[10:26:05.018]                         if (!is.null(pattern)) {
[10:26:05.018]                           computeRestarts <- base::computeRestarts
[10:26:05.018]                           grepl <- base::grepl
[10:26:05.018]                           restarts <- computeRestarts(cond)
[10:26:05.018]                           for (restart in restarts) {
[10:26:05.018]                             name <- restart$name
[10:26:05.018]                             if (is.null(name)) 
[10:26:05.018]                               next
[10:26:05.018]                             if (!grepl(pattern, name)) 
[10:26:05.018]                               next
[10:26:05.018]                             invokeRestart(restart)
[10:26:05.018]                             muffled <- TRUE
[10:26:05.018]                             break
[10:26:05.018]                           }
[10:26:05.018]                         }
[10:26:05.018]                       }
[10:26:05.018]                       invisible(muffled)
[10:26:05.018]                     }
[10:26:05.018]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.018]                   }
[10:26:05.018]                 }
[10:26:05.018]                 else {
[10:26:05.018]                   if (TRUE) {
[10:26:05.018]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.018]                     {
[10:26:05.018]                       inherits <- base::inherits
[10:26:05.018]                       invokeRestart <- base::invokeRestart
[10:26:05.018]                       is.null <- base::is.null
[10:26:05.018]                       muffled <- FALSE
[10:26:05.018]                       if (inherits(cond, "message")) {
[10:26:05.018]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.018]                         if (muffled) 
[10:26:05.018]                           invokeRestart("muffleMessage")
[10:26:05.018]                       }
[10:26:05.018]                       else if (inherits(cond, "warning")) {
[10:26:05.018]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.018]                         if (muffled) 
[10:26:05.018]                           invokeRestart("muffleWarning")
[10:26:05.018]                       }
[10:26:05.018]                       else if (inherits(cond, "condition")) {
[10:26:05.018]                         if (!is.null(pattern)) {
[10:26:05.018]                           computeRestarts <- base::computeRestarts
[10:26:05.018]                           grepl <- base::grepl
[10:26:05.018]                           restarts <- computeRestarts(cond)
[10:26:05.018]                           for (restart in restarts) {
[10:26:05.018]                             name <- restart$name
[10:26:05.018]                             if (is.null(name)) 
[10:26:05.018]                               next
[10:26:05.018]                             if (!grepl(pattern, name)) 
[10:26:05.018]                               next
[10:26:05.018]                             invokeRestart(restart)
[10:26:05.018]                             muffled <- TRUE
[10:26:05.018]                             break
[10:26:05.018]                           }
[10:26:05.018]                         }
[10:26:05.018]                       }
[10:26:05.018]                       invisible(muffled)
[10:26:05.018]                     }
[10:26:05.018]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.018]                   }
[10:26:05.018]                 }
[10:26:05.018]             }
[10:26:05.018]         }))
[10:26:05.018]     }, error = function(ex) {
[10:26:05.018]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:05.018]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.018]                 ...future.rng), started = ...future.startTime, 
[10:26:05.018]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:05.018]             version = "1.8"), class = "FutureResult")
[10:26:05.018]     }, finally = {
[10:26:05.018]         if (!identical(...future.workdir, getwd())) 
[10:26:05.018]             setwd(...future.workdir)
[10:26:05.018]         {
[10:26:05.018]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:05.018]                 ...future.oldOptions$nwarnings <- NULL
[10:26:05.018]             }
[10:26:05.018]             base::options(...future.oldOptions)
[10:26:05.018]             if (.Platform$OS.type == "windows") {
[10:26:05.018]                 old_names <- names(...future.oldEnvVars)
[10:26:05.018]                 envs <- base::Sys.getenv()
[10:26:05.018]                 names <- names(envs)
[10:26:05.018]                 common <- intersect(names, old_names)
[10:26:05.018]                 added <- setdiff(names, old_names)
[10:26:05.018]                 removed <- setdiff(old_names, names)
[10:26:05.018]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:05.018]                   envs[common]]
[10:26:05.018]                 NAMES <- toupper(changed)
[10:26:05.018]                 args <- list()
[10:26:05.018]                 for (kk in seq_along(NAMES)) {
[10:26:05.018]                   name <- changed[[kk]]
[10:26:05.018]                   NAME <- NAMES[[kk]]
[10:26:05.018]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.018]                     next
[10:26:05.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.018]                 }
[10:26:05.018]                 NAMES <- toupper(added)
[10:26:05.018]                 for (kk in seq_along(NAMES)) {
[10:26:05.018]                   name <- added[[kk]]
[10:26:05.018]                   NAME <- NAMES[[kk]]
[10:26:05.018]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.018]                     next
[10:26:05.018]                   args[[name]] <- ""
[10:26:05.018]                 }
[10:26:05.018]                 NAMES <- toupper(removed)
[10:26:05.018]                 for (kk in seq_along(NAMES)) {
[10:26:05.018]                   name <- removed[[kk]]
[10:26:05.018]                   NAME <- NAMES[[kk]]
[10:26:05.018]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.018]                     next
[10:26:05.018]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.018]                 }
[10:26:05.018]                 if (length(args) > 0) 
[10:26:05.018]                   base::do.call(base::Sys.setenv, args = args)
[10:26:05.018]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:05.018]             }
[10:26:05.018]             else {
[10:26:05.018]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:05.018]             }
[10:26:05.018]             {
[10:26:05.018]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:05.018]                   0L) {
[10:26:05.018]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:05.018]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:05.018]                   base::options(opts)
[10:26:05.018]                 }
[10:26:05.018]                 {
[10:26:05.018]                   {
[10:26:05.018]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:05.018]                     NULL
[10:26:05.018]                   }
[10:26:05.018]                   options(future.plan = NULL)
[10:26:05.018]                   if (is.na(NA_character_)) 
[10:26:05.018]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.018]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:05.018]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:26:05.018]                     envir = parent.frame()) 
[10:26:05.018]                   {
[10:26:05.018]                     default_workers <- missing(workers)
[10:26:05.018]                     if (is.function(workers)) 
[10:26:05.018]                       workers <- workers()
[10:26:05.018]                     workers <- structure(as.integer(workers), 
[10:26:05.018]                       class = class(workers))
[10:26:05.018]                     stop_if_not(is.finite(workers), workers >= 
[10:26:05.018]                       1L)
[10:26:05.018]                     if ((workers == 1L && !inherits(workers, 
[10:26:05.018]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:26:05.018]                       if (default_workers) 
[10:26:05.018]                         supportsMulticore(warn = TRUE)
[10:26:05.018]                       return(sequential(..., envir = envir))
[10:26:05.018]                     }
[10:26:05.018]                     oopts <- options(mc.cores = workers)
[10:26:05.018]                     on.exit(options(oopts))
[10:26:05.018]                     future <- MulticoreFuture(..., workers = workers, 
[10:26:05.018]                       envir = envir)
[10:26:05.018]                     if (!future$lazy) 
[10:26:05.018]                       future <- run(future)
[10:26:05.018]                     invisible(future)
[10:26:05.018]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:05.018]                 }
[10:26:05.018]             }
[10:26:05.018]         }
[10:26:05.018]     })
[10:26:05.018]     if (TRUE) {
[10:26:05.018]         base::sink(type = "output", split = FALSE)
[10:26:05.018]         if (TRUE) {
[10:26:05.018]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:05.018]         }
[10:26:05.018]         else {
[10:26:05.018]             ...future.result["stdout"] <- base::list(NULL)
[10:26:05.018]         }
[10:26:05.018]         base::close(...future.stdout)
[10:26:05.018]         ...future.stdout <- NULL
[10:26:05.018]     }
[10:26:05.018]     ...future.result$conditions <- ...future.conditions
[10:26:05.018]     ...future.result$finished <- base::Sys.time()
[10:26:05.018]     ...future.result
[10:26:05.018] }
[10:26:05.020] assign_globals() ...
[10:26:05.020] List of 1
[10:26:05.020]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:26:05.020]   .. ..@ .Data     :function (x)  
[10:26:05.020]   .. ..@ generic   : chr "my_fcn"
[10:26:05.020]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:26:05.020]   .. ..@ package   : chr ".GlobalEnv"
[10:26:05.020]   .. ..@ group     : list()
[10:26:05.020]   .. ..@ valueClass: chr(0) 
[10:26:05.020]   .. ..@ signature : chr "x"
[10:26:05.020]   .. ..@ default   : NULL
[10:26:05.020]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:26:05.020]  - attr(*, "where")=List of 1
[10:26:05.020]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:26:05.020]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:26:05.020]  - attr(*, "resolved")= logi FALSE
[10:26:05.020]  - attr(*, "total_size")= num 3936
[10:26:05.020]  - attr(*, "already-done")= logi TRUE
[10:26:05.025] - reassign environment for ‘my_fcn’
[10:26:05.025] - copied ‘my_fcn’ to environment
[10:26:05.025] assign_globals() ... done
[10:26:05.025] requestCore(): workers = 2
[10:26:05.028] MulticoreFuture started
[10:26:05.028] - Launch lazy future ... done
[10:26:05.029] run() for ‘MulticoreFuture’ ... done
[10:26:05.029] plan(): Setting new future strategy stack:
[10:26:05.029] List of future strategies:
[10:26:05.029] 1. sequential:
[10:26:05.029]    - args: function (..., envir = parent.frame())
[10:26:05.029]    - tweaked: FALSE
[10:26:05.029]    - call: NULL
[10:26:05.030] result() for MulticoreFuture ...
[10:26:05.030] plan(): nbrOfWorkers() = 1
[10:26:05.032] plan(): Setting new future strategy stack:
[10:26:05.032] List of future strategies:
[10:26:05.032] 1. multicore:
[10:26:05.032]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:26:05.032]    - tweaked: FALSE
[10:26:05.032]    - call: plan(strategy)
[10:26:05.037] plan(): nbrOfWorkers() = 2
[10:26:05.042] result() for MulticoreFuture ...
[10:26:05.045] result() for MulticoreFuture ... done
[10:26:05.045] result() for MulticoreFuture ... done
[10:26:05.045] result() for MulticoreFuture ...
[10:26:05.045] result() for MulticoreFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557915640488>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:26:05.046] getGlobalsAndPackages() ...
[10:26:05.046] Searching for globals...
[10:26:05.049] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:05.049] Searching for globals ... DONE
[10:26:05.049] Resolving globals: FALSE
[10:26:05.050] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:05.051] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:05.051] - globals: [1] ‘my_fcn’
[10:26:05.051] 
[10:26:05.051] getGlobalsAndPackages() ... DONE
[10:26:05.051] run() for ‘Future’ ...
[10:26:05.051] - state: ‘created’
[10:26:05.052] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:26:05.055] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:05.055] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:26:05.056]   - Field: ‘label’
[10:26:05.056]   - Field: ‘local’
[10:26:05.056]   - Field: ‘owner’
[10:26:05.056]   - Field: ‘envir’
[10:26:05.056]   - Field: ‘workers’
[10:26:05.056]   - Field: ‘packages’
[10:26:05.056]   - Field: ‘gc’
[10:26:05.056]   - Field: ‘job’
[10:26:05.057]   - Field: ‘conditions’
[10:26:05.057]   - Field: ‘expr’
[10:26:05.057]   - Field: ‘uuid’
[10:26:05.057]   - Field: ‘seed’
[10:26:05.057]   - Field: ‘version’
[10:26:05.057]   - Field: ‘result’
[10:26:05.057]   - Field: ‘asynchronous’
[10:26:05.057]   - Field: ‘calls’
[10:26:05.057]   - Field: ‘globals’
[10:26:05.058]   - Field: ‘stdout’
[10:26:05.058]   - Field: ‘earlySignal’
[10:26:05.058]   - Field: ‘lazy’
[10:26:05.058]   - Field: ‘state’
[10:26:05.058] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:26:05.058] - Launch lazy future ...
[10:26:05.058] Packages needed by the future expression (n = 0): <none>
[10:26:05.059] Packages needed by future strategies (n = 0): <none>
[10:26:05.059] {
[10:26:05.059]     {
[10:26:05.059]         {
[10:26:05.059]             ...future.startTime <- base::Sys.time()
[10:26:05.059]             {
[10:26:05.059]                 {
[10:26:05.059]                   {
[10:26:05.059]                     {
[10:26:05.059]                       base::local({
[10:26:05.059]                         has_future <- base::requireNamespace("future", 
[10:26:05.059]                           quietly = TRUE)
[10:26:05.059]                         if (has_future) {
[10:26:05.059]                           ns <- base::getNamespace("future")
[10:26:05.059]                           version <- ns[[".package"]][["version"]]
[10:26:05.059]                           if (is.null(version)) 
[10:26:05.059]                             version <- utils::packageVersion("future")
[10:26:05.059]                         }
[10:26:05.059]                         else {
[10:26:05.059]                           version <- NULL
[10:26:05.059]                         }
[10:26:05.059]                         if (!has_future || version < "1.8.0") {
[10:26:05.059]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:05.059]                             "", base::R.version$version.string), 
[10:26:05.059]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:05.059]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:05.059]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:05.059]                               "release", "version")], collapse = " "), 
[10:26:05.059]                             hostname = base::Sys.info()[["nodename"]])
[10:26:05.059]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:05.059]                             info)
[10:26:05.059]                           info <- base::paste(info, collapse = "; ")
[10:26:05.059]                           if (!has_future) {
[10:26:05.059]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:05.059]                               info)
[10:26:05.059]                           }
[10:26:05.059]                           else {
[10:26:05.059]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:05.059]                               info, version)
[10:26:05.059]                           }
[10:26:05.059]                           base::stop(msg)
[10:26:05.059]                         }
[10:26:05.059]                       })
[10:26:05.059]                     }
[10:26:05.059]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:05.059]                     base::options(mc.cores = 1L)
[10:26:05.059]                   }
[10:26:05.059]                   options(future.plan = NULL)
[10:26:05.059]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.059]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:05.059]                 }
[10:26:05.059]                 ...future.workdir <- getwd()
[10:26:05.059]             }
[10:26:05.059]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:05.059]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:05.059]         }
[10:26:05.059]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:05.059]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:05.059]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:05.059]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:05.059]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:05.059]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:05.059]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:05.059]             base::names(...future.oldOptions))
[10:26:05.059]     }
[10:26:05.059]     if (FALSE) {
[10:26:05.059]     }
[10:26:05.059]     else {
[10:26:05.059]         if (TRUE) {
[10:26:05.059]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:05.059]                 open = "w")
[10:26:05.059]         }
[10:26:05.059]         else {
[10:26:05.059]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:05.059]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:05.059]         }
[10:26:05.059]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:05.059]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:05.059]             base::sink(type = "output", split = FALSE)
[10:26:05.059]             base::close(...future.stdout)
[10:26:05.059]         }, add = TRUE)
[10:26:05.059]     }
[10:26:05.059]     ...future.frame <- base::sys.nframe()
[10:26:05.059]     ...future.conditions <- base::list()
[10:26:05.059]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:05.059]     if (FALSE) {
[10:26:05.059]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:05.059]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:05.059]     }
[10:26:05.059]     ...future.result <- base::tryCatch({
[10:26:05.059]         base::withCallingHandlers({
[10:26:05.059]             ...future.value <- base::withVisible(base::local({
[10:26:05.059]                 withCallingHandlers({
[10:26:05.059]                   {
[10:26:05.059]                     my_fcn(3)
[10:26:05.059]                   }
[10:26:05.059]                 }, immediateCondition = function(cond) {
[10:26:05.059]                   save_rds <- function (object, pathname, ...) 
[10:26:05.059]                   {
[10:26:05.059]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:26:05.059]                     if (file_test("-f", pathname_tmp)) {
[10:26:05.059]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.059]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:26:05.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.059]                         fi_tmp[["mtime"]])
[10:26:05.059]                     }
[10:26:05.059]                     tryCatch({
[10:26:05.059]                       saveRDS(object, file = pathname_tmp, ...)
[10:26:05.059]                     }, error = function(ex) {
[10:26:05.059]                       msg <- conditionMessage(ex)
[10:26:05.059]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.059]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:26:05.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.059]                         fi_tmp[["mtime"]], msg)
[10:26:05.059]                       ex$message <- msg
[10:26:05.059]                       stop(ex)
[10:26:05.059]                     })
[10:26:05.059]                     stopifnot(file_test("-f", pathname_tmp))
[10:26:05.059]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:26:05.059]                     if (!res || file_test("-f", pathname_tmp)) {
[10:26:05.059]                       fi_tmp <- file.info(pathname_tmp)
[10:26:05.059]                       fi <- file.info(pathname)
[10:26:05.059]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:26:05.059]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:26:05.059]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:26:05.059]                         fi[["size"]], fi[["mtime"]])
[10:26:05.059]                       stop(msg)
[10:26:05.059]                     }
[10:26:05.059]                     invisible(pathname)
[10:26:05.059]                   }
[10:26:05.059]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:26:05.059]                     rootPath = tempdir()) 
[10:26:05.059]                   {
[10:26:05.059]                     obj <- list(time = Sys.time(), condition = cond)
[10:26:05.059]                     file <- tempfile(pattern = class(cond)[1], 
[10:26:05.059]                       tmpdir = path, fileext = ".rds")
[10:26:05.059]                     save_rds(obj, file)
[10:26:05.059]                   }
[10:26:05.059]                   saveImmediateCondition(cond, path = "/tmp/RtmpKeKLlv/.future/immediateConditions")
[10:26:05.059]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.059]                   {
[10:26:05.059]                     inherits <- base::inherits
[10:26:05.059]                     invokeRestart <- base::invokeRestart
[10:26:05.059]                     is.null <- base::is.null
[10:26:05.059]                     muffled <- FALSE
[10:26:05.059]                     if (inherits(cond, "message")) {
[10:26:05.059]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:05.059]                       if (muffled) 
[10:26:05.059]                         invokeRestart("muffleMessage")
[10:26:05.059]                     }
[10:26:05.059]                     else if (inherits(cond, "warning")) {
[10:26:05.059]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:05.059]                       if (muffled) 
[10:26:05.059]                         invokeRestart("muffleWarning")
[10:26:05.059]                     }
[10:26:05.059]                     else if (inherits(cond, "condition")) {
[10:26:05.059]                       if (!is.null(pattern)) {
[10:26:05.059]                         computeRestarts <- base::computeRestarts
[10:26:05.059]                         grepl <- base::grepl
[10:26:05.059]                         restarts <- computeRestarts(cond)
[10:26:05.059]                         for (restart in restarts) {
[10:26:05.059]                           name <- restart$name
[10:26:05.059]                           if (is.null(name)) 
[10:26:05.059]                             next
[10:26:05.059]                           if (!grepl(pattern, name)) 
[10:26:05.059]                             next
[10:26:05.059]                           invokeRestart(restart)
[10:26:05.059]                           muffled <- TRUE
[10:26:05.059]                           break
[10:26:05.059]                         }
[10:26:05.059]                       }
[10:26:05.059]                     }
[10:26:05.059]                     invisible(muffled)
[10:26:05.059]                   }
[10:26:05.059]                   muffleCondition(cond)
[10:26:05.059]                 })
[10:26:05.059]             }))
[10:26:05.059]             future::FutureResult(value = ...future.value$value, 
[10:26:05.059]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.059]                   ...future.rng), globalenv = if (FALSE) 
[10:26:05.059]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:05.059]                     ...future.globalenv.names))
[10:26:05.059]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:05.059]         }, condition = base::local({
[10:26:05.059]             c <- base::c
[10:26:05.059]             inherits <- base::inherits
[10:26:05.059]             invokeRestart <- base::invokeRestart
[10:26:05.059]             length <- base::length
[10:26:05.059]             list <- base::list
[10:26:05.059]             seq.int <- base::seq.int
[10:26:05.059]             signalCondition <- base::signalCondition
[10:26:05.059]             sys.calls <- base::sys.calls
[10:26:05.059]             `[[` <- base::`[[`
[10:26:05.059]             `+` <- base::`+`
[10:26:05.059]             `<<-` <- base::`<<-`
[10:26:05.059]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:05.059]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:05.059]                   3L)]
[10:26:05.059]             }
[10:26:05.059]             function(cond) {
[10:26:05.059]                 is_error <- inherits(cond, "error")
[10:26:05.059]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:05.059]                   NULL)
[10:26:05.059]                 if (is_error) {
[10:26:05.059]                   sessionInformation <- function() {
[10:26:05.059]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:05.059]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:05.059]                       search = base::search(), system = base::Sys.info())
[10:26:05.059]                   }
[10:26:05.059]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.059]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:05.059]                     cond$call), session = sessionInformation(), 
[10:26:05.059]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:05.059]                   signalCondition(cond)
[10:26:05.059]                 }
[10:26:05.059]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:05.059]                 "immediateCondition"))) {
[10:26:05.059]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:05.059]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.059]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:05.059]                   if (TRUE && !signal) {
[10:26:05.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.059]                     {
[10:26:05.059]                       inherits <- base::inherits
[10:26:05.059]                       invokeRestart <- base::invokeRestart
[10:26:05.059]                       is.null <- base::is.null
[10:26:05.059]                       muffled <- FALSE
[10:26:05.059]                       if (inherits(cond, "message")) {
[10:26:05.059]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.059]                         if (muffled) 
[10:26:05.059]                           invokeRestart("muffleMessage")
[10:26:05.059]                       }
[10:26:05.059]                       else if (inherits(cond, "warning")) {
[10:26:05.059]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.059]                         if (muffled) 
[10:26:05.059]                           invokeRestart("muffleWarning")
[10:26:05.059]                       }
[10:26:05.059]                       else if (inherits(cond, "condition")) {
[10:26:05.059]                         if (!is.null(pattern)) {
[10:26:05.059]                           computeRestarts <- base::computeRestarts
[10:26:05.059]                           grepl <- base::grepl
[10:26:05.059]                           restarts <- computeRestarts(cond)
[10:26:05.059]                           for (restart in restarts) {
[10:26:05.059]                             name <- restart$name
[10:26:05.059]                             if (is.null(name)) 
[10:26:05.059]                               next
[10:26:05.059]                             if (!grepl(pattern, name)) 
[10:26:05.059]                               next
[10:26:05.059]                             invokeRestart(restart)
[10:26:05.059]                             muffled <- TRUE
[10:26:05.059]                             break
[10:26:05.059]                           }
[10:26:05.059]                         }
[10:26:05.059]                       }
[10:26:05.059]                       invisible(muffled)
[10:26:05.059]                     }
[10:26:05.059]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.059]                   }
[10:26:05.059]                 }
[10:26:05.059]                 else {
[10:26:05.059]                   if (TRUE) {
[10:26:05.059]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.059]                     {
[10:26:05.059]                       inherits <- base::inherits
[10:26:05.059]                       invokeRestart <- base::invokeRestart
[10:26:05.059]                       is.null <- base::is.null
[10:26:05.059]                       muffled <- FALSE
[10:26:05.059]                       if (inherits(cond, "message")) {
[10:26:05.059]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.059]                         if (muffled) 
[10:26:05.059]                           invokeRestart("muffleMessage")
[10:26:05.059]                       }
[10:26:05.059]                       else if (inherits(cond, "warning")) {
[10:26:05.059]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.059]                         if (muffled) 
[10:26:05.059]                           invokeRestart("muffleWarning")
[10:26:05.059]                       }
[10:26:05.059]                       else if (inherits(cond, "condition")) {
[10:26:05.059]                         if (!is.null(pattern)) {
[10:26:05.059]                           computeRestarts <- base::computeRestarts
[10:26:05.059]                           grepl <- base::grepl
[10:26:05.059]                           restarts <- computeRestarts(cond)
[10:26:05.059]                           for (restart in restarts) {
[10:26:05.059]                             name <- restart$name
[10:26:05.059]                             if (is.null(name)) 
[10:26:05.059]                               next
[10:26:05.059]                             if (!grepl(pattern, name)) 
[10:26:05.059]                               next
[10:26:05.059]                             invokeRestart(restart)
[10:26:05.059]                             muffled <- TRUE
[10:26:05.059]                             break
[10:26:05.059]                           }
[10:26:05.059]                         }
[10:26:05.059]                       }
[10:26:05.059]                       invisible(muffled)
[10:26:05.059]                     }
[10:26:05.059]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.059]                   }
[10:26:05.059]                 }
[10:26:05.059]             }
[10:26:05.059]         }))
[10:26:05.059]     }, error = function(ex) {
[10:26:05.059]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:05.059]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.059]                 ...future.rng), started = ...future.startTime, 
[10:26:05.059]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:05.059]             version = "1.8"), class = "FutureResult")
[10:26:05.059]     }, finally = {
[10:26:05.059]         if (!identical(...future.workdir, getwd())) 
[10:26:05.059]             setwd(...future.workdir)
[10:26:05.059]         {
[10:26:05.059]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:05.059]                 ...future.oldOptions$nwarnings <- NULL
[10:26:05.059]             }
[10:26:05.059]             base::options(...future.oldOptions)
[10:26:05.059]             if (.Platform$OS.type == "windows") {
[10:26:05.059]                 old_names <- names(...future.oldEnvVars)
[10:26:05.059]                 envs <- base::Sys.getenv()
[10:26:05.059]                 names <- names(envs)
[10:26:05.059]                 common <- intersect(names, old_names)
[10:26:05.059]                 added <- setdiff(names, old_names)
[10:26:05.059]                 removed <- setdiff(old_names, names)
[10:26:05.059]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:05.059]                   envs[common]]
[10:26:05.059]                 NAMES <- toupper(changed)
[10:26:05.059]                 args <- list()
[10:26:05.059]                 for (kk in seq_along(NAMES)) {
[10:26:05.059]                   name <- changed[[kk]]
[10:26:05.059]                   NAME <- NAMES[[kk]]
[10:26:05.059]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.059]                     next
[10:26:05.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.059]                 }
[10:26:05.059]                 NAMES <- toupper(added)
[10:26:05.059]                 for (kk in seq_along(NAMES)) {
[10:26:05.059]                   name <- added[[kk]]
[10:26:05.059]                   NAME <- NAMES[[kk]]
[10:26:05.059]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.059]                     next
[10:26:05.059]                   args[[name]] <- ""
[10:26:05.059]                 }
[10:26:05.059]                 NAMES <- toupper(removed)
[10:26:05.059]                 for (kk in seq_along(NAMES)) {
[10:26:05.059]                   name <- removed[[kk]]
[10:26:05.059]                   NAME <- NAMES[[kk]]
[10:26:05.059]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.059]                     next
[10:26:05.059]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.059]                 }
[10:26:05.059]                 if (length(args) > 0) 
[10:26:05.059]                   base::do.call(base::Sys.setenv, args = args)
[10:26:05.059]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:05.059]             }
[10:26:05.059]             else {
[10:26:05.059]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:05.059]             }
[10:26:05.059]             {
[10:26:05.059]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:05.059]                   0L) {
[10:26:05.059]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:05.059]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:05.059]                   base::options(opts)
[10:26:05.059]                 }
[10:26:05.059]                 {
[10:26:05.059]                   {
[10:26:05.059]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:05.059]                     NULL
[10:26:05.059]                   }
[10:26:05.059]                   options(future.plan = NULL)
[10:26:05.059]                   if (is.na(NA_character_)) 
[10:26:05.059]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.059]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:05.059]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:26:05.059]                     envir = parent.frame()) 
[10:26:05.059]                   {
[10:26:05.059]                     default_workers <- missing(workers)
[10:26:05.059]                     if (is.function(workers)) 
[10:26:05.059]                       workers <- workers()
[10:26:05.059]                     workers <- structure(as.integer(workers), 
[10:26:05.059]                       class = class(workers))
[10:26:05.059]                     stop_if_not(is.finite(workers), workers >= 
[10:26:05.059]                       1L)
[10:26:05.059]                     if ((workers == 1L && !inherits(workers, 
[10:26:05.059]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:26:05.059]                       if (default_workers) 
[10:26:05.059]                         supportsMulticore(warn = TRUE)
[10:26:05.059]                       return(sequential(..., envir = envir))
[10:26:05.059]                     }
[10:26:05.059]                     oopts <- options(mc.cores = workers)
[10:26:05.059]                     on.exit(options(oopts))
[10:26:05.059]                     future <- MulticoreFuture(..., workers = workers, 
[10:26:05.059]                       envir = envir)
[10:26:05.059]                     if (!future$lazy) 
[10:26:05.059]                       future <- run(future)
[10:26:05.059]                     invisible(future)
[10:26:05.059]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:05.059]                 }
[10:26:05.059]             }
[10:26:05.059]         }
[10:26:05.059]     })
[10:26:05.059]     if (TRUE) {
[10:26:05.059]         base::sink(type = "output", split = FALSE)
[10:26:05.059]         if (TRUE) {
[10:26:05.059]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:05.059]         }
[10:26:05.059]         else {
[10:26:05.059]             ...future.result["stdout"] <- base::list(NULL)
[10:26:05.059]         }
[10:26:05.059]         base::close(...future.stdout)
[10:26:05.059]         ...future.stdout <- NULL
[10:26:05.059]     }
[10:26:05.059]     ...future.result$conditions <- ...future.conditions
[10:26:05.059]     ...future.result$finished <- base::Sys.time()
[10:26:05.059]     ...future.result
[10:26:05.059] }
[10:26:05.061] assign_globals() ...
[10:26:05.062] List of 1
[10:26:05.062]  $ my_fcn:Formal class 'standardGeneric' [package "methods"] with 8 slots
[10:26:05.062]   .. ..@ .Data     :function (x)  
[10:26:05.062]   .. ..@ generic   : chr "my_fcn"
[10:26:05.062]   .. .. ..- attr(*, "package")= chr ".GlobalEnv"
[10:26:05.062]   .. ..@ package   : chr ".GlobalEnv"
[10:26:05.062]   .. ..@ group     : list()
[10:26:05.062]   .. ..@ valueClass: chr(0) 
[10:26:05.062]   .. ..@ signature : chr "x"
[10:26:05.062]   .. ..@ default   : NULL
[10:26:05.062]   .. ..@ skeleton  : language (function (x)  stop(gettextf("invalid call in method dispatch to '%s' (no default method)",  ...
[10:26:05.062]  - attr(*, "where")=List of 1
[10:26:05.062]   ..$ my_fcn:<environment: R_EmptyEnv> 
[10:26:05.062]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:26:05.062]  - attr(*, "resolved")= logi FALSE
[10:26:05.062]  - attr(*, "total_size")= num 3936
[10:26:05.062]  - attr(*, "already-done")= logi TRUE
[10:26:05.067] - reassign environment for ‘my_fcn’
[10:26:05.067] - copied ‘my_fcn’ to environment
[10:26:05.067] assign_globals() ... done
[10:26:05.068] requestCore(): workers = 2
[10:26:05.070] MulticoreFuture started
[10:26:05.070] - Launch lazy future ... done
[10:26:05.070] run() for ‘MulticoreFuture’ ... done
[10:26:05.070] result() for MulticoreFuture ...
[10:26:05.071] plan(): Setting new future strategy stack:
[10:26:05.071] List of future strategies:
[10:26:05.071] 1. sequential:
[10:26:05.071]    - args: function (..., envir = parent.frame())
[10:26:05.071]    - tweaked: FALSE
[10:26:05.071]    - call: NULL
[10:26:05.072] plan(): nbrOfWorkers() = 1
[10:26:05.074] plan(): Setting new future strategy stack:
[10:26:05.074] List of future strategies:
[10:26:05.074] 1. multicore:
[10:26:05.074]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:26:05.074]    - tweaked: FALSE
[10:26:05.074]    - call: plan(strategy)
[10:26:05.079] plan(): nbrOfWorkers() = 2
[10:26:05.096] result() for MulticoreFuture ...
[10:26:05.099] result() for MulticoreFuture ... done
[10:26:05.099] signalConditions() ...
[10:26:05.099]  - include = ‘immediateCondition’
[10:26:05.099]  - exclude = 
[10:26:05.099]  - resignal = FALSE
[10:26:05.099]  - Number of conditions: 1
[10:26:05.099] signalConditions() ... done
[10:26:05.099] result() for MulticoreFuture ... done
[10:26:05.100] result() for MulticoreFuture ...
[10:26:05.100] result() for MulticoreFuture ... done
[10:26:05.100] signalConditions() ...
[10:26:05.100]  - include = ‘immediateCondition’
[10:26:05.100]  - exclude = 
[10:26:05.100]  - resignal = FALSE
[10:26:05.100]  - Number of conditions: 1
[10:26:05.101] signalConditions() ... done
[10:26:05.101] Future state: ‘finished’
[10:26:05.101] result() for MulticoreFuture ...
[10:26:05.101] result() for MulticoreFuture ... done
[10:26:05.101] signalConditions() ...
[10:26:05.101]  - include = ‘condition’
[10:26:05.102]  - exclude = ‘immediateCondition’
[10:26:05.102]  - resignal = TRUE
[10:26:05.102]  - Number of conditions: 1
[10:26:05.102]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[10:26:05.102] signalConditions() ... done
<simpleError in (function (classes, fdef, mtable) {    methods <- .findInheritedMethods(classes, fdef, mtable)    if (length(methods) == 1L)         return(methods[[1L]])    else if (length(methods) == 0L) {        cnames <- paste0("\"", vapply(classes, as.character,             ""), "\"", collapse = ", ")        stop(gettextf("unable to find an inherited method for function %s for signature %s",             sQuote(fdef@generic), sQuote(cnames)), domain = NA)    }    else stop("Internal error in finding inherited methods; didn't return a unique method",         domain = NA)})(list("numeric"), new("standardGeneric", .Data = function (x) standardGeneric("my_fcn"), generic = structure("my_fcn", package = ".GlobalEnv"),     package = ".GlobalEnv", group = list(), valueClass = character(0),     signature = "x", default = NULL, skeleton = (function (x)     stop(gettextf("invalid call in method dispatch to '%s' (no default method)",         "my_fcn"), domain = NA))(x)), <environment>): unable to find an inherited method for function ‘my_fcn’ for signature ‘"numeric"’>
Type of future: multisession
[10:26:05.103] plan(): Setting new future strategy stack:
[10:26:05.103] List of future strategies:
[10:26:05.103] 1. multisession:
[10:26:05.103]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:26:05.103]    - tweaked: FALSE
[10:26:05.103]    - call: plan(strategy)
[10:26:05.104] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:05.104] multisession:
[10:26:05.104] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:26:05.104] - tweaked: FALSE
[10:26:05.104] - call: plan(strategy)
[10:26:05.111] getGlobalsAndPackages() ...
[10:26:05.111] Not searching for globals
[10:26:05.111] - globals: [0] <none>
[10:26:05.111] getGlobalsAndPackages() ... DONE
[10:26:05.112] [local output] makeClusterPSOCK() ...
[10:26:05.153] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:05.154] [local output] Base port: 11412
[10:26:05.154] [local output] Getting setup options for 2 cluster nodes ...
[10:26:05.155] [local output]  - Node 1 of 2 ...
[10:26:05.155] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:05.156] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKeKLlv/worker.rank=1.parallelly.parent=85673.14ea946e15798.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpKeKLlv/worker.rank=1.parallelly.parent=85673.14ea946e15798.pid")'’
[10:26:05.345] - Possible to infer worker's PID: TRUE
[10:26:05.346] [local output] Rscript port: 11412

[10:26:05.346] [local output]  - Node 2 of 2 ...
[10:26:05.347] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:05.347] [local output] Rscript port: 11412

[10:26:05.347] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:05.348] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:05.348] [local output] Setting up PSOCK nodes in parallel
[10:26:05.348] List of 36
[10:26:05.348]  $ worker          : chr "localhost"
[10:26:05.348]   ..- attr(*, "localhost")= logi TRUE
[10:26:05.348]  $ master          : chr "localhost"
[10:26:05.348]  $ port            : int 11412
[10:26:05.348]  $ connectTimeout  : num 120
[10:26:05.348]  $ timeout         : num 2592000
[10:26:05.348]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:05.348]  $ homogeneous     : logi TRUE
[10:26:05.348]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:05.348]  $ rscript_envs    : NULL
[10:26:05.348]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:05.348]  $ rscript_startup : NULL
[10:26:05.348]  $ rscript_sh      : chr "sh"
[10:26:05.348]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:05.348]  $ methods         : logi TRUE
[10:26:05.348]  $ socketOptions   : chr "no-delay"
[10:26:05.348]  $ useXDR          : logi FALSE
[10:26:05.348]  $ outfile         : chr "/dev/null"
[10:26:05.348]  $ renice          : int NA
[10:26:05.348]  $ rshcmd          : NULL
[10:26:05.348]  $ user            : chr(0) 
[10:26:05.348]  $ revtunnel       : logi FALSE
[10:26:05.348]  $ rshlogfile      : NULL
[10:26:05.348]  $ rshopts         : chr(0) 
[10:26:05.348]  $ rank            : int 1
[10:26:05.348]  $ manual          : logi FALSE
[10:26:05.348]  $ dryrun          : logi FALSE
[10:26:05.348]  $ quiet           : logi FALSE
[10:26:05.348]  $ setup_strategy  : chr "parallel"
[10:26:05.348]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:05.348]  $ pidfile         : chr "/tmp/RtmpKeKLlv/worker.rank=1.parallelly.parent=85673.14ea946e15798.pid"
[10:26:05.348]  $ rshcmd_label    : NULL
[10:26:05.348]  $ rsh_call        : NULL
[10:26:05.348]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:05.348]  $ localMachine    : logi TRUE
[10:26:05.348]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:05.348]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:05.348]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:05.348]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:05.348]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:05.348]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:05.348]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:05.348]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:05.348]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:05.348]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:05.348]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:05.348]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:05.348]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:05.348]  $ arguments       :List of 28
[10:26:05.348]   ..$ worker          : chr "localhost"
[10:26:05.348]   ..$ master          : NULL
[10:26:05.348]   ..$ port            : int 11412
[10:26:05.348]   ..$ connectTimeout  : num 120
[10:26:05.348]   ..$ timeout         : num 2592000
[10:26:05.348]   ..$ rscript         : NULL
[10:26:05.348]   ..$ homogeneous     : NULL
[10:26:05.348]   ..$ rscript_args    : NULL
[10:26:05.348]   ..$ rscript_envs    : NULL
[10:26:05.348]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:05.348]   ..$ rscript_startup : NULL
[10:26:05.348]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:05.348]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:05.348]   ..$ methods         : logi TRUE
[10:26:05.348]   ..$ socketOptions   : chr "no-delay"
[10:26:05.348]   ..$ useXDR          : logi FALSE
[10:26:05.348]   ..$ outfile         : chr "/dev/null"
[10:26:05.348]   ..$ renice          : int NA
[10:26:05.348]   ..$ rshcmd          : NULL
[10:26:05.348]   ..$ user            : NULL
[10:26:05.348]   ..$ revtunnel       : logi NA
[10:26:05.348]   ..$ rshlogfile      : NULL
[10:26:05.348]   ..$ rshopts         : NULL
[10:26:05.348]   ..$ rank            : int 1
[10:26:05.348]   ..$ manual          : logi FALSE
[10:26:05.348]   ..$ dryrun          : logi FALSE
[10:26:05.348]   ..$ quiet           : logi FALSE
[10:26:05.348]   ..$ setup_strategy  : chr "parallel"
[10:26:05.348]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:05.366] [local output] System call to launch all workers:
[10:26:05.366] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpKeKLlv/worker.rank=1.parallelly.parent=85673.14ea946e15798.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11412 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:05.366] [local output] Starting PSOCK main server
[10:26:05.372] [local output] Workers launched
[10:26:05.372] [local output] Waiting for workers to connect back
[10:26:05.372]  - [local output] 0 workers out of 2 ready
[10:26:05.649]  - [local output] 0 workers out of 2 ready
[10:26:05.649]  - [local output] 1 workers out of 2 ready
[10:26:05.653]  - [local output] 1 workers out of 2 ready
[10:26:05.653]  - [local output] 2 workers out of 2 ready
[10:26:05.654] [local output] Launching of workers completed
[10:26:05.654] [local output] Collecting session information from workers
[10:26:05.655] [local output]  - Worker #1 of 2
[10:26:05.655] [local output]  - Worker #2 of 2
[10:26:05.656] [local output] makeClusterPSOCK() ... done
[10:26:05.667] Packages needed by the future expression (n = 0): <none>
[10:26:05.667] Packages needed by future strategies (n = 0): <none>
[10:26:05.668] {
[10:26:05.668]     {
[10:26:05.668]         {
[10:26:05.668]             ...future.startTime <- base::Sys.time()
[10:26:05.668]             {
[10:26:05.668]                 {
[10:26:05.668]                   {
[10:26:05.668]                     {
[10:26:05.668]                       base::local({
[10:26:05.668]                         has_future <- base::requireNamespace("future", 
[10:26:05.668]                           quietly = TRUE)
[10:26:05.668]                         if (has_future) {
[10:26:05.668]                           ns <- base::getNamespace("future")
[10:26:05.668]                           version <- ns[[".package"]][["version"]]
[10:26:05.668]                           if (is.null(version)) 
[10:26:05.668]                             version <- utils::packageVersion("future")
[10:26:05.668]                         }
[10:26:05.668]                         else {
[10:26:05.668]                           version <- NULL
[10:26:05.668]                         }
[10:26:05.668]                         if (!has_future || version < "1.8.0") {
[10:26:05.668]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:05.668]                             "", base::R.version$version.string), 
[10:26:05.668]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:05.668]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:05.668]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:05.668]                               "release", "version")], collapse = " "), 
[10:26:05.668]                             hostname = base::Sys.info()[["nodename"]])
[10:26:05.668]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:05.668]                             info)
[10:26:05.668]                           info <- base::paste(info, collapse = "; ")
[10:26:05.668]                           if (!has_future) {
[10:26:05.668]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:05.668]                               info)
[10:26:05.668]                           }
[10:26:05.668]                           else {
[10:26:05.668]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:05.668]                               info, version)
[10:26:05.668]                           }
[10:26:05.668]                           base::stop(msg)
[10:26:05.668]                         }
[10:26:05.668]                       })
[10:26:05.668]                     }
[10:26:05.668]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:05.668]                     base::options(mc.cores = 1L)
[10:26:05.668]                   }
[10:26:05.668]                   options(future.plan = NULL)
[10:26:05.668]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.668]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:05.668]                 }
[10:26:05.668]                 ...future.workdir <- getwd()
[10:26:05.668]             }
[10:26:05.668]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:05.668]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:05.668]         }
[10:26:05.668]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:05.668]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:05.668]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:05.668]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:05.668]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:05.668]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:05.668]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:05.668]             base::names(...future.oldOptions))
[10:26:05.668]     }
[10:26:05.668]     if (FALSE) {
[10:26:05.668]     }
[10:26:05.668]     else {
[10:26:05.668]         if (TRUE) {
[10:26:05.668]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:05.668]                 open = "w")
[10:26:05.668]         }
[10:26:05.668]         else {
[10:26:05.668]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:05.668]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:05.668]         }
[10:26:05.668]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:05.668]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:05.668]             base::sink(type = "output", split = FALSE)
[10:26:05.668]             base::close(...future.stdout)
[10:26:05.668]         }, add = TRUE)
[10:26:05.668]     }
[10:26:05.668]     ...future.frame <- base::sys.nframe()
[10:26:05.668]     ...future.conditions <- base::list()
[10:26:05.668]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:05.668]     if (FALSE) {
[10:26:05.668]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:05.668]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:05.668]     }
[10:26:05.668]     ...future.result <- base::tryCatch({
[10:26:05.668]         base::withCallingHandlers({
[10:26:05.668]             ...future.value <- base::withVisible(base::local({
[10:26:05.668]                 ...future.makeSendCondition <- base::local({
[10:26:05.668]                   sendCondition <- NULL
[10:26:05.668]                   function(frame = 1L) {
[10:26:05.668]                     if (is.function(sendCondition)) 
[10:26:05.668]                       return(sendCondition)
[10:26:05.668]                     ns <- getNamespace("parallel")
[10:26:05.668]                     if (exists("sendData", mode = "function", 
[10:26:05.668]                       envir = ns)) {
[10:26:05.668]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:05.668]                         envir = ns)
[10:26:05.668]                       envir <- sys.frame(frame)
[10:26:05.668]                       master <- NULL
[10:26:05.668]                       while (!identical(envir, .GlobalEnv) && 
[10:26:05.668]                         !identical(envir, emptyenv())) {
[10:26:05.668]                         if (exists("master", mode = "list", envir = envir, 
[10:26:05.668]                           inherits = FALSE)) {
[10:26:05.668]                           master <- get("master", mode = "list", 
[10:26:05.668]                             envir = envir, inherits = FALSE)
[10:26:05.668]                           if (inherits(master, c("SOCKnode", 
[10:26:05.668]                             "SOCK0node"))) {
[10:26:05.668]                             sendCondition <<- function(cond) {
[10:26:05.668]                               data <- list(type = "VALUE", value = cond, 
[10:26:05.668]                                 success = TRUE)
[10:26:05.668]                               parallel_sendData(master, data)
[10:26:05.668]                             }
[10:26:05.668]                             return(sendCondition)
[10:26:05.668]                           }
[10:26:05.668]                         }
[10:26:05.668]                         frame <- frame + 1L
[10:26:05.668]                         envir <- sys.frame(frame)
[10:26:05.668]                       }
[10:26:05.668]                     }
[10:26:05.668]                     sendCondition <<- function(cond) NULL
[10:26:05.668]                   }
[10:26:05.668]                 })
[10:26:05.668]                 withCallingHandlers({
[10:26:05.668]                   NA
[10:26:05.668]                 }, immediateCondition = function(cond) {
[10:26:05.668]                   sendCondition <- ...future.makeSendCondition()
[10:26:05.668]                   sendCondition(cond)
[10:26:05.668]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.668]                   {
[10:26:05.668]                     inherits <- base::inherits
[10:26:05.668]                     invokeRestart <- base::invokeRestart
[10:26:05.668]                     is.null <- base::is.null
[10:26:05.668]                     muffled <- FALSE
[10:26:05.668]                     if (inherits(cond, "message")) {
[10:26:05.668]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:05.668]                       if (muffled) 
[10:26:05.668]                         invokeRestart("muffleMessage")
[10:26:05.668]                     }
[10:26:05.668]                     else if (inherits(cond, "warning")) {
[10:26:05.668]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:05.668]                       if (muffled) 
[10:26:05.668]                         invokeRestart("muffleWarning")
[10:26:05.668]                     }
[10:26:05.668]                     else if (inherits(cond, "condition")) {
[10:26:05.668]                       if (!is.null(pattern)) {
[10:26:05.668]                         computeRestarts <- base::computeRestarts
[10:26:05.668]                         grepl <- base::grepl
[10:26:05.668]                         restarts <- computeRestarts(cond)
[10:26:05.668]                         for (restart in restarts) {
[10:26:05.668]                           name <- restart$name
[10:26:05.668]                           if (is.null(name)) 
[10:26:05.668]                             next
[10:26:05.668]                           if (!grepl(pattern, name)) 
[10:26:05.668]                             next
[10:26:05.668]                           invokeRestart(restart)
[10:26:05.668]                           muffled <- TRUE
[10:26:05.668]                           break
[10:26:05.668]                         }
[10:26:05.668]                       }
[10:26:05.668]                     }
[10:26:05.668]                     invisible(muffled)
[10:26:05.668]                   }
[10:26:05.668]                   muffleCondition(cond)
[10:26:05.668]                 })
[10:26:05.668]             }))
[10:26:05.668]             future::FutureResult(value = ...future.value$value, 
[10:26:05.668]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.668]                   ...future.rng), globalenv = if (FALSE) 
[10:26:05.668]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:05.668]                     ...future.globalenv.names))
[10:26:05.668]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:05.668]         }, condition = base::local({
[10:26:05.668]             c <- base::c
[10:26:05.668]             inherits <- base::inherits
[10:26:05.668]             invokeRestart <- base::invokeRestart
[10:26:05.668]             length <- base::length
[10:26:05.668]             list <- base::list
[10:26:05.668]             seq.int <- base::seq.int
[10:26:05.668]             signalCondition <- base::signalCondition
[10:26:05.668]             sys.calls <- base::sys.calls
[10:26:05.668]             `[[` <- base::`[[`
[10:26:05.668]             `+` <- base::`+`
[10:26:05.668]             `<<-` <- base::`<<-`
[10:26:05.668]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:05.668]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:05.668]                   3L)]
[10:26:05.668]             }
[10:26:05.668]             function(cond) {
[10:26:05.668]                 is_error <- inherits(cond, "error")
[10:26:05.668]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:05.668]                   NULL)
[10:26:05.668]                 if (is_error) {
[10:26:05.668]                   sessionInformation <- function() {
[10:26:05.668]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:05.668]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:05.668]                       search = base::search(), system = base::Sys.info())
[10:26:05.668]                   }
[10:26:05.668]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.668]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:05.668]                     cond$call), session = sessionInformation(), 
[10:26:05.668]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:05.668]                   signalCondition(cond)
[10:26:05.668]                 }
[10:26:05.668]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:05.668]                 "immediateCondition"))) {
[10:26:05.668]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:05.668]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.668]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:05.668]                   if (TRUE && !signal) {
[10:26:05.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.668]                     {
[10:26:05.668]                       inherits <- base::inherits
[10:26:05.668]                       invokeRestart <- base::invokeRestart
[10:26:05.668]                       is.null <- base::is.null
[10:26:05.668]                       muffled <- FALSE
[10:26:05.668]                       if (inherits(cond, "message")) {
[10:26:05.668]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.668]                         if (muffled) 
[10:26:05.668]                           invokeRestart("muffleMessage")
[10:26:05.668]                       }
[10:26:05.668]                       else if (inherits(cond, "warning")) {
[10:26:05.668]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.668]                         if (muffled) 
[10:26:05.668]                           invokeRestart("muffleWarning")
[10:26:05.668]                       }
[10:26:05.668]                       else if (inherits(cond, "condition")) {
[10:26:05.668]                         if (!is.null(pattern)) {
[10:26:05.668]                           computeRestarts <- base::computeRestarts
[10:26:05.668]                           grepl <- base::grepl
[10:26:05.668]                           restarts <- computeRestarts(cond)
[10:26:05.668]                           for (restart in restarts) {
[10:26:05.668]                             name <- restart$name
[10:26:05.668]                             if (is.null(name)) 
[10:26:05.668]                               next
[10:26:05.668]                             if (!grepl(pattern, name)) 
[10:26:05.668]                               next
[10:26:05.668]                             invokeRestart(restart)
[10:26:05.668]                             muffled <- TRUE
[10:26:05.668]                             break
[10:26:05.668]                           }
[10:26:05.668]                         }
[10:26:05.668]                       }
[10:26:05.668]                       invisible(muffled)
[10:26:05.668]                     }
[10:26:05.668]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.668]                   }
[10:26:05.668]                 }
[10:26:05.668]                 else {
[10:26:05.668]                   if (TRUE) {
[10:26:05.668]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.668]                     {
[10:26:05.668]                       inherits <- base::inherits
[10:26:05.668]                       invokeRestart <- base::invokeRestart
[10:26:05.668]                       is.null <- base::is.null
[10:26:05.668]                       muffled <- FALSE
[10:26:05.668]                       if (inherits(cond, "message")) {
[10:26:05.668]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.668]                         if (muffled) 
[10:26:05.668]                           invokeRestart("muffleMessage")
[10:26:05.668]                       }
[10:26:05.668]                       else if (inherits(cond, "warning")) {
[10:26:05.668]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.668]                         if (muffled) 
[10:26:05.668]                           invokeRestart("muffleWarning")
[10:26:05.668]                       }
[10:26:05.668]                       else if (inherits(cond, "condition")) {
[10:26:05.668]                         if (!is.null(pattern)) {
[10:26:05.668]                           computeRestarts <- base::computeRestarts
[10:26:05.668]                           grepl <- base::grepl
[10:26:05.668]                           restarts <- computeRestarts(cond)
[10:26:05.668]                           for (restart in restarts) {
[10:26:05.668]                             name <- restart$name
[10:26:05.668]                             if (is.null(name)) 
[10:26:05.668]                               next
[10:26:05.668]                             if (!grepl(pattern, name)) 
[10:26:05.668]                               next
[10:26:05.668]                             invokeRestart(restart)
[10:26:05.668]                             muffled <- TRUE
[10:26:05.668]                             break
[10:26:05.668]                           }
[10:26:05.668]                         }
[10:26:05.668]                       }
[10:26:05.668]                       invisible(muffled)
[10:26:05.668]                     }
[10:26:05.668]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.668]                   }
[10:26:05.668]                 }
[10:26:05.668]             }
[10:26:05.668]         }))
[10:26:05.668]     }, error = function(ex) {
[10:26:05.668]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:05.668]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.668]                 ...future.rng), started = ...future.startTime, 
[10:26:05.668]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:05.668]             version = "1.8"), class = "FutureResult")
[10:26:05.668]     }, finally = {
[10:26:05.668]         if (!identical(...future.workdir, getwd())) 
[10:26:05.668]             setwd(...future.workdir)
[10:26:05.668]         {
[10:26:05.668]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:05.668]                 ...future.oldOptions$nwarnings <- NULL
[10:26:05.668]             }
[10:26:05.668]             base::options(...future.oldOptions)
[10:26:05.668]             if (.Platform$OS.type == "windows") {
[10:26:05.668]                 old_names <- names(...future.oldEnvVars)
[10:26:05.668]                 envs <- base::Sys.getenv()
[10:26:05.668]                 names <- names(envs)
[10:26:05.668]                 common <- intersect(names, old_names)
[10:26:05.668]                 added <- setdiff(names, old_names)
[10:26:05.668]                 removed <- setdiff(old_names, names)
[10:26:05.668]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:05.668]                   envs[common]]
[10:26:05.668]                 NAMES <- toupper(changed)
[10:26:05.668]                 args <- list()
[10:26:05.668]                 for (kk in seq_along(NAMES)) {
[10:26:05.668]                   name <- changed[[kk]]
[10:26:05.668]                   NAME <- NAMES[[kk]]
[10:26:05.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.668]                     next
[10:26:05.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.668]                 }
[10:26:05.668]                 NAMES <- toupper(added)
[10:26:05.668]                 for (kk in seq_along(NAMES)) {
[10:26:05.668]                   name <- added[[kk]]
[10:26:05.668]                   NAME <- NAMES[[kk]]
[10:26:05.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.668]                     next
[10:26:05.668]                   args[[name]] <- ""
[10:26:05.668]                 }
[10:26:05.668]                 NAMES <- toupper(removed)
[10:26:05.668]                 for (kk in seq_along(NAMES)) {
[10:26:05.668]                   name <- removed[[kk]]
[10:26:05.668]                   NAME <- NAMES[[kk]]
[10:26:05.668]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.668]                     next
[10:26:05.668]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.668]                 }
[10:26:05.668]                 if (length(args) > 0) 
[10:26:05.668]                   base::do.call(base::Sys.setenv, args = args)
[10:26:05.668]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:05.668]             }
[10:26:05.668]             else {
[10:26:05.668]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:05.668]             }
[10:26:05.668]             {
[10:26:05.668]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:05.668]                   0L) {
[10:26:05.668]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:05.668]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:05.668]                   base::options(opts)
[10:26:05.668]                 }
[10:26:05.668]                 {
[10:26:05.668]                   {
[10:26:05.668]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:05.668]                     NULL
[10:26:05.668]                   }
[10:26:05.668]                   options(future.plan = NULL)
[10:26:05.668]                   if (is.na(NA_character_)) 
[10:26:05.668]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.668]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:05.668]                   future::plan(list(function (..., workers = availableCores(), 
[10:26:05.668]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:26:05.668]                     envir = parent.frame()) 
[10:26:05.668]                   {
[10:26:05.668]                     if (is.function(workers)) 
[10:26:05.668]                       workers <- workers()
[10:26:05.668]                     workers <- structure(as.integer(workers), 
[10:26:05.668]                       class = class(workers))
[10:26:05.668]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:26:05.668]                       workers >= 1)
[10:26:05.668]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:26:05.668]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:26:05.668]                     }
[10:26:05.668]                     future <- MultisessionFuture(..., workers = workers, 
[10:26:05.668]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:26:05.668]                       envir = envir)
[10:26:05.668]                     if (!future$lazy) 
[10:26:05.668]                       future <- run(future)
[10:26:05.668]                     invisible(future)
[10:26:05.668]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:05.668]                 }
[10:26:05.668]             }
[10:26:05.668]         }
[10:26:05.668]     })
[10:26:05.668]     if (TRUE) {
[10:26:05.668]         base::sink(type = "output", split = FALSE)
[10:26:05.668]         if (TRUE) {
[10:26:05.668]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:05.668]         }
[10:26:05.668]         else {
[10:26:05.668]             ...future.result["stdout"] <- base::list(NULL)
[10:26:05.668]         }
[10:26:05.668]         base::close(...future.stdout)
[10:26:05.668]         ...future.stdout <- NULL
[10:26:05.668]     }
[10:26:05.668]     ...future.result$conditions <- ...future.conditions
[10:26:05.668]     ...future.result$finished <- base::Sys.time()
[10:26:05.668]     ...future.result
[10:26:05.668] }
[10:26:05.721] MultisessionFuture started
[10:26:05.722] result() for ClusterFuture ...
[10:26:05.722] receiveMessageFromWorker() for ClusterFuture ...
[10:26:05.722] - Validating connection of MultisessionFuture
[10:26:05.765] - received message: FutureResult
[10:26:05.765] - Received FutureResult
[10:26:05.765] - Erased future from FutureRegistry
[10:26:05.765] result() for ClusterFuture ...
[10:26:05.765] - result already collected: FutureResult
[10:26:05.766] result() for ClusterFuture ... done
[10:26:05.766] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:05.766] result() for ClusterFuture ... done
[10:26:05.766] result() for ClusterFuture ...
[10:26:05.766] - result already collected: FutureResult
[10:26:05.766] result() for ClusterFuture ... done
[10:26:05.766] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:05.770] plan(): nbrOfWorkers() = 2
[10:26:05.770] getGlobalsAndPackages() ...
[10:26:05.770] Searching for globals...
[10:26:05.773] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:05.773] Searching for globals ... DONE
[10:26:05.773] Resolving globals: FALSE
[10:26:05.774] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:05.774] The total size of the 1 globals exported for future expression (‘{; my_fcn; }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:05.775] - globals: [1] ‘my_fcn’
[10:26:05.775] 
[10:26:05.775] getGlobalsAndPackages() ... DONE
[10:26:05.775] run() for ‘Future’ ...
[10:26:05.775] - state: ‘created’
[10:26:05.775] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:05.790] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:05.790] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:05.790]   - Field: ‘node’
[10:26:05.790]   - Field: ‘label’
[10:26:05.790]   - Field: ‘local’
[10:26:05.790]   - Field: ‘owner’
[10:26:05.791]   - Field: ‘envir’
[10:26:05.791]   - Field: ‘workers’
[10:26:05.791]   - Field: ‘packages’
[10:26:05.791]   - Field: ‘gc’
[10:26:05.791]   - Field: ‘conditions’
[10:26:05.791]   - Field: ‘persistent’
[10:26:05.791]   - Field: ‘expr’
[10:26:05.791]   - Field: ‘uuid’
[10:26:05.791]   - Field: ‘seed’
[10:26:05.792]   - Field: ‘version’
[10:26:05.792]   - Field: ‘result’
[10:26:05.792]   - Field: ‘asynchronous’
[10:26:05.792]   - Field: ‘calls’
[10:26:05.792]   - Field: ‘globals’
[10:26:05.792]   - Field: ‘stdout’
[10:26:05.792]   - Field: ‘earlySignal’
[10:26:05.792]   - Field: ‘lazy’
[10:26:05.793]   - Field: ‘state’
[10:26:05.793] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:05.793] - Launch lazy future ...
[10:26:05.793] Packages needed by the future expression (n = 0): <none>
[10:26:05.793] Packages needed by future strategies (n = 0): <none>
[10:26:05.794] {
[10:26:05.794]     {
[10:26:05.794]         {
[10:26:05.794]             ...future.startTime <- base::Sys.time()
[10:26:05.794]             {
[10:26:05.794]                 {
[10:26:05.794]                   {
[10:26:05.794]                     {
[10:26:05.794]                       base::local({
[10:26:05.794]                         has_future <- base::requireNamespace("future", 
[10:26:05.794]                           quietly = TRUE)
[10:26:05.794]                         if (has_future) {
[10:26:05.794]                           ns <- base::getNamespace("future")
[10:26:05.794]                           version <- ns[[".package"]][["version"]]
[10:26:05.794]                           if (is.null(version)) 
[10:26:05.794]                             version <- utils::packageVersion("future")
[10:26:05.794]                         }
[10:26:05.794]                         else {
[10:26:05.794]                           version <- NULL
[10:26:05.794]                         }
[10:26:05.794]                         if (!has_future || version < "1.8.0") {
[10:26:05.794]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:05.794]                             "", base::R.version$version.string), 
[10:26:05.794]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:05.794]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:05.794]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:05.794]                               "release", "version")], collapse = " "), 
[10:26:05.794]                             hostname = base::Sys.info()[["nodename"]])
[10:26:05.794]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:05.794]                             info)
[10:26:05.794]                           info <- base::paste(info, collapse = "; ")
[10:26:05.794]                           if (!has_future) {
[10:26:05.794]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:05.794]                               info)
[10:26:05.794]                           }
[10:26:05.794]                           else {
[10:26:05.794]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:05.794]                               info, version)
[10:26:05.794]                           }
[10:26:05.794]                           base::stop(msg)
[10:26:05.794]                         }
[10:26:05.794]                       })
[10:26:05.794]                     }
[10:26:05.794]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:05.794]                     base::options(mc.cores = 1L)
[10:26:05.794]                   }
[10:26:05.794]                   options(future.plan = NULL)
[10:26:05.794]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.794]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:05.794]                 }
[10:26:05.794]                 ...future.workdir <- getwd()
[10:26:05.794]             }
[10:26:05.794]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:05.794]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:05.794]         }
[10:26:05.794]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:05.794]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:05.794]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:05.794]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:05.794]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:05.794]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:05.794]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:05.794]             base::names(...future.oldOptions))
[10:26:05.794]     }
[10:26:05.794]     if (FALSE) {
[10:26:05.794]     }
[10:26:05.794]     else {
[10:26:05.794]         if (TRUE) {
[10:26:05.794]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:05.794]                 open = "w")
[10:26:05.794]         }
[10:26:05.794]         else {
[10:26:05.794]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:05.794]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:05.794]         }
[10:26:05.794]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:05.794]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:05.794]             base::sink(type = "output", split = FALSE)
[10:26:05.794]             base::close(...future.stdout)
[10:26:05.794]         }, add = TRUE)
[10:26:05.794]     }
[10:26:05.794]     ...future.frame <- base::sys.nframe()
[10:26:05.794]     ...future.conditions <- base::list()
[10:26:05.794]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:05.794]     if (FALSE) {
[10:26:05.794]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:05.794]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:05.794]     }
[10:26:05.794]     ...future.result <- base::tryCatch({
[10:26:05.794]         base::withCallingHandlers({
[10:26:05.794]             ...future.value <- base::withVisible(base::local({
[10:26:05.794]                 ...future.makeSendCondition <- base::local({
[10:26:05.794]                   sendCondition <- NULL
[10:26:05.794]                   function(frame = 1L) {
[10:26:05.794]                     if (is.function(sendCondition)) 
[10:26:05.794]                       return(sendCondition)
[10:26:05.794]                     ns <- getNamespace("parallel")
[10:26:05.794]                     if (exists("sendData", mode = "function", 
[10:26:05.794]                       envir = ns)) {
[10:26:05.794]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:05.794]                         envir = ns)
[10:26:05.794]                       envir <- sys.frame(frame)
[10:26:05.794]                       master <- NULL
[10:26:05.794]                       while (!identical(envir, .GlobalEnv) && 
[10:26:05.794]                         !identical(envir, emptyenv())) {
[10:26:05.794]                         if (exists("master", mode = "list", envir = envir, 
[10:26:05.794]                           inherits = FALSE)) {
[10:26:05.794]                           master <- get("master", mode = "list", 
[10:26:05.794]                             envir = envir, inherits = FALSE)
[10:26:05.794]                           if (inherits(master, c("SOCKnode", 
[10:26:05.794]                             "SOCK0node"))) {
[10:26:05.794]                             sendCondition <<- function(cond) {
[10:26:05.794]                               data <- list(type = "VALUE", value = cond, 
[10:26:05.794]                                 success = TRUE)
[10:26:05.794]                               parallel_sendData(master, data)
[10:26:05.794]                             }
[10:26:05.794]                             return(sendCondition)
[10:26:05.794]                           }
[10:26:05.794]                         }
[10:26:05.794]                         frame <- frame + 1L
[10:26:05.794]                         envir <- sys.frame(frame)
[10:26:05.794]                       }
[10:26:05.794]                     }
[10:26:05.794]                     sendCondition <<- function(cond) NULL
[10:26:05.794]                   }
[10:26:05.794]                 })
[10:26:05.794]                 withCallingHandlers({
[10:26:05.794]                   {
[10:26:05.794]                     my_fcn
[10:26:05.794]                   }
[10:26:05.794]                 }, immediateCondition = function(cond) {
[10:26:05.794]                   sendCondition <- ...future.makeSendCondition()
[10:26:05.794]                   sendCondition(cond)
[10:26:05.794]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.794]                   {
[10:26:05.794]                     inherits <- base::inherits
[10:26:05.794]                     invokeRestart <- base::invokeRestart
[10:26:05.794]                     is.null <- base::is.null
[10:26:05.794]                     muffled <- FALSE
[10:26:05.794]                     if (inherits(cond, "message")) {
[10:26:05.794]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:05.794]                       if (muffled) 
[10:26:05.794]                         invokeRestart("muffleMessage")
[10:26:05.794]                     }
[10:26:05.794]                     else if (inherits(cond, "warning")) {
[10:26:05.794]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:05.794]                       if (muffled) 
[10:26:05.794]                         invokeRestart("muffleWarning")
[10:26:05.794]                     }
[10:26:05.794]                     else if (inherits(cond, "condition")) {
[10:26:05.794]                       if (!is.null(pattern)) {
[10:26:05.794]                         computeRestarts <- base::computeRestarts
[10:26:05.794]                         grepl <- base::grepl
[10:26:05.794]                         restarts <- computeRestarts(cond)
[10:26:05.794]                         for (restart in restarts) {
[10:26:05.794]                           name <- restart$name
[10:26:05.794]                           if (is.null(name)) 
[10:26:05.794]                             next
[10:26:05.794]                           if (!grepl(pattern, name)) 
[10:26:05.794]                             next
[10:26:05.794]                           invokeRestart(restart)
[10:26:05.794]                           muffled <- TRUE
[10:26:05.794]                           break
[10:26:05.794]                         }
[10:26:05.794]                       }
[10:26:05.794]                     }
[10:26:05.794]                     invisible(muffled)
[10:26:05.794]                   }
[10:26:05.794]                   muffleCondition(cond)
[10:26:05.794]                 })
[10:26:05.794]             }))
[10:26:05.794]             future::FutureResult(value = ...future.value$value, 
[10:26:05.794]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.794]                   ...future.rng), globalenv = if (FALSE) 
[10:26:05.794]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:05.794]                     ...future.globalenv.names))
[10:26:05.794]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:05.794]         }, condition = base::local({
[10:26:05.794]             c <- base::c
[10:26:05.794]             inherits <- base::inherits
[10:26:05.794]             invokeRestart <- base::invokeRestart
[10:26:05.794]             length <- base::length
[10:26:05.794]             list <- base::list
[10:26:05.794]             seq.int <- base::seq.int
[10:26:05.794]             signalCondition <- base::signalCondition
[10:26:05.794]             sys.calls <- base::sys.calls
[10:26:05.794]             `[[` <- base::`[[`
[10:26:05.794]             `+` <- base::`+`
[10:26:05.794]             `<<-` <- base::`<<-`
[10:26:05.794]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:05.794]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:05.794]                   3L)]
[10:26:05.794]             }
[10:26:05.794]             function(cond) {
[10:26:05.794]                 is_error <- inherits(cond, "error")
[10:26:05.794]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:05.794]                   NULL)
[10:26:05.794]                 if (is_error) {
[10:26:05.794]                   sessionInformation <- function() {
[10:26:05.794]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:05.794]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:05.794]                       search = base::search(), system = base::Sys.info())
[10:26:05.794]                   }
[10:26:05.794]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.794]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:05.794]                     cond$call), session = sessionInformation(), 
[10:26:05.794]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:05.794]                   signalCondition(cond)
[10:26:05.794]                 }
[10:26:05.794]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:05.794]                 "immediateCondition"))) {
[10:26:05.794]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:05.794]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.794]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:05.794]                   if (TRUE && !signal) {
[10:26:05.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.794]                     {
[10:26:05.794]                       inherits <- base::inherits
[10:26:05.794]                       invokeRestart <- base::invokeRestart
[10:26:05.794]                       is.null <- base::is.null
[10:26:05.794]                       muffled <- FALSE
[10:26:05.794]                       if (inherits(cond, "message")) {
[10:26:05.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.794]                         if (muffled) 
[10:26:05.794]                           invokeRestart("muffleMessage")
[10:26:05.794]                       }
[10:26:05.794]                       else if (inherits(cond, "warning")) {
[10:26:05.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.794]                         if (muffled) 
[10:26:05.794]                           invokeRestart("muffleWarning")
[10:26:05.794]                       }
[10:26:05.794]                       else if (inherits(cond, "condition")) {
[10:26:05.794]                         if (!is.null(pattern)) {
[10:26:05.794]                           computeRestarts <- base::computeRestarts
[10:26:05.794]                           grepl <- base::grepl
[10:26:05.794]                           restarts <- computeRestarts(cond)
[10:26:05.794]                           for (restart in restarts) {
[10:26:05.794]                             name <- restart$name
[10:26:05.794]                             if (is.null(name)) 
[10:26:05.794]                               next
[10:26:05.794]                             if (!grepl(pattern, name)) 
[10:26:05.794]                               next
[10:26:05.794]                             invokeRestart(restart)
[10:26:05.794]                             muffled <- TRUE
[10:26:05.794]                             break
[10:26:05.794]                           }
[10:26:05.794]                         }
[10:26:05.794]                       }
[10:26:05.794]                       invisible(muffled)
[10:26:05.794]                     }
[10:26:05.794]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.794]                   }
[10:26:05.794]                 }
[10:26:05.794]                 else {
[10:26:05.794]                   if (TRUE) {
[10:26:05.794]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.794]                     {
[10:26:05.794]                       inherits <- base::inherits
[10:26:05.794]                       invokeRestart <- base::invokeRestart
[10:26:05.794]                       is.null <- base::is.null
[10:26:05.794]                       muffled <- FALSE
[10:26:05.794]                       if (inherits(cond, "message")) {
[10:26:05.794]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.794]                         if (muffled) 
[10:26:05.794]                           invokeRestart("muffleMessage")
[10:26:05.794]                       }
[10:26:05.794]                       else if (inherits(cond, "warning")) {
[10:26:05.794]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.794]                         if (muffled) 
[10:26:05.794]                           invokeRestart("muffleWarning")
[10:26:05.794]                       }
[10:26:05.794]                       else if (inherits(cond, "condition")) {
[10:26:05.794]                         if (!is.null(pattern)) {
[10:26:05.794]                           computeRestarts <- base::computeRestarts
[10:26:05.794]                           grepl <- base::grepl
[10:26:05.794]                           restarts <- computeRestarts(cond)
[10:26:05.794]                           for (restart in restarts) {
[10:26:05.794]                             name <- restart$name
[10:26:05.794]                             if (is.null(name)) 
[10:26:05.794]                               next
[10:26:05.794]                             if (!grepl(pattern, name)) 
[10:26:05.794]                               next
[10:26:05.794]                             invokeRestart(restart)
[10:26:05.794]                             muffled <- TRUE
[10:26:05.794]                             break
[10:26:05.794]                           }
[10:26:05.794]                         }
[10:26:05.794]                       }
[10:26:05.794]                       invisible(muffled)
[10:26:05.794]                     }
[10:26:05.794]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.794]                   }
[10:26:05.794]                 }
[10:26:05.794]             }
[10:26:05.794]         }))
[10:26:05.794]     }, error = function(ex) {
[10:26:05.794]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:05.794]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.794]                 ...future.rng), started = ...future.startTime, 
[10:26:05.794]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:05.794]             version = "1.8"), class = "FutureResult")
[10:26:05.794]     }, finally = {
[10:26:05.794]         if (!identical(...future.workdir, getwd())) 
[10:26:05.794]             setwd(...future.workdir)
[10:26:05.794]         {
[10:26:05.794]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:05.794]                 ...future.oldOptions$nwarnings <- NULL
[10:26:05.794]             }
[10:26:05.794]             base::options(...future.oldOptions)
[10:26:05.794]             if (.Platform$OS.type == "windows") {
[10:26:05.794]                 old_names <- names(...future.oldEnvVars)
[10:26:05.794]                 envs <- base::Sys.getenv()
[10:26:05.794]                 names <- names(envs)
[10:26:05.794]                 common <- intersect(names, old_names)
[10:26:05.794]                 added <- setdiff(names, old_names)
[10:26:05.794]                 removed <- setdiff(old_names, names)
[10:26:05.794]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:05.794]                   envs[common]]
[10:26:05.794]                 NAMES <- toupper(changed)
[10:26:05.794]                 args <- list()
[10:26:05.794]                 for (kk in seq_along(NAMES)) {
[10:26:05.794]                   name <- changed[[kk]]
[10:26:05.794]                   NAME <- NAMES[[kk]]
[10:26:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.794]                     next
[10:26:05.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.794]                 }
[10:26:05.794]                 NAMES <- toupper(added)
[10:26:05.794]                 for (kk in seq_along(NAMES)) {
[10:26:05.794]                   name <- added[[kk]]
[10:26:05.794]                   NAME <- NAMES[[kk]]
[10:26:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.794]                     next
[10:26:05.794]                   args[[name]] <- ""
[10:26:05.794]                 }
[10:26:05.794]                 NAMES <- toupper(removed)
[10:26:05.794]                 for (kk in seq_along(NAMES)) {
[10:26:05.794]                   name <- removed[[kk]]
[10:26:05.794]                   NAME <- NAMES[[kk]]
[10:26:05.794]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.794]                     next
[10:26:05.794]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.794]                 }
[10:26:05.794]                 if (length(args) > 0) 
[10:26:05.794]                   base::do.call(base::Sys.setenv, args = args)
[10:26:05.794]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:05.794]             }
[10:26:05.794]             else {
[10:26:05.794]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:05.794]             }
[10:26:05.794]             {
[10:26:05.794]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:05.794]                   0L) {
[10:26:05.794]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:05.794]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:05.794]                   base::options(opts)
[10:26:05.794]                 }
[10:26:05.794]                 {
[10:26:05.794]                   {
[10:26:05.794]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:05.794]                     NULL
[10:26:05.794]                   }
[10:26:05.794]                   options(future.plan = NULL)
[10:26:05.794]                   if (is.na(NA_character_)) 
[10:26:05.794]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.794]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:05.794]                   future::plan(list(function (..., workers = availableCores(), 
[10:26:05.794]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:26:05.794]                     envir = parent.frame()) 
[10:26:05.794]                   {
[10:26:05.794]                     if (is.function(workers)) 
[10:26:05.794]                       workers <- workers()
[10:26:05.794]                     workers <- structure(as.integer(workers), 
[10:26:05.794]                       class = class(workers))
[10:26:05.794]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:26:05.794]                       workers >= 1)
[10:26:05.794]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:26:05.794]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:26:05.794]                     }
[10:26:05.794]                     future <- MultisessionFuture(..., workers = workers, 
[10:26:05.794]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:26:05.794]                       envir = envir)
[10:26:05.794]                     if (!future$lazy) 
[10:26:05.794]                       future <- run(future)
[10:26:05.794]                     invisible(future)
[10:26:05.794]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:05.794]                 }
[10:26:05.794]             }
[10:26:05.794]         }
[10:26:05.794]     })
[10:26:05.794]     if (TRUE) {
[10:26:05.794]         base::sink(type = "output", split = FALSE)
[10:26:05.794]         if (TRUE) {
[10:26:05.794]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:05.794]         }
[10:26:05.794]         else {
[10:26:05.794]             ...future.result["stdout"] <- base::list(NULL)
[10:26:05.794]         }
[10:26:05.794]         base::close(...future.stdout)
[10:26:05.794]         ...future.stdout <- NULL
[10:26:05.794]     }
[10:26:05.794]     ...future.result$conditions <- ...future.conditions
[10:26:05.794]     ...future.result$finished <- base::Sys.time()
[10:26:05.794]     ...future.result
[10:26:05.794] }
[10:26:05.797] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[10:26:05.797] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[10:26:05.798] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[10:26:05.798] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[10:26:05.798] MultisessionFuture started
[10:26:05.798] - Launch lazy future ... done
[10:26:05.798] run() for ‘MultisessionFuture’ ... done
[10:26:05.799] result() for ClusterFuture ...
[10:26:05.799] receiveMessageFromWorker() for ClusterFuture ...
[10:26:05.799] - Validating connection of MultisessionFuture
[10:26:05.846] - received message: FutureResult
[10:26:05.846] - Received FutureResult
[10:26:05.847] - Erased future from FutureRegistry
[10:26:05.847] result() for ClusterFuture ...
[10:26:05.847] - result already collected: FutureResult
[10:26:05.847] result() for ClusterFuture ... done
[10:26:05.847] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:05.847] result() for ClusterFuture ... done
[10:26:05.847] result() for ClusterFuture ...
[10:26:05.847] - result already collected: FutureResult
[10:26:05.847] result() for ClusterFuture ... done
new("standardGeneric", .Data = function (x) 
standardGeneric("my_fcn"), generic = "my_fcn", package = ".GlobalEnv", 
    group = list(), valueClass = character(0), signature = "x", 
    default = NULL, skeleton = (function (x) 
    stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
        "my_fcn"), domain = NA))(x))
<environment: 0x557916c07538>
attr(,"generic")
[1] "my_fcn"
attr(,"generic")attr(,"package")
[1] ".GlobalEnv"
attr(,"package")
[1] ".GlobalEnv"
attr(,"group")
list()
attr(,"valueClass")
character(0)
attr(,"signature")
[1] "x"
attr(,"default")
`\001NULL\001`
attr(,"skeleton")
(function (x) 
stop(gettextf("invalid call in method dispatch to '%s' (no default method)", 
    "my_fcn"), domain = NA))(x)
attr(,"class")
[1] "standardGeneric"
attr(,"class")attr(,"package")
[1] "methods"
[10:26:05.848] getGlobalsAndPackages() ...
[10:26:05.848] Searching for globals...
[10:26:05.851] - globals found: [7] ‘{’, ‘my_fcn’, ‘standardGeneric’, ‘NULL’, ‘stop’, ‘gettextf’, ‘x’
[10:26:05.851] Searching for globals ... DONE
[10:26:05.851] Resolving globals: FALSE
[10:26:05.852] The total size of the 1 globals is 3.84 KiB (3936 bytes)
[10:26:05.852] The total size of the 1 globals exported for future expression (‘{; my_fcn(3); }’) is 3.84 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘my_fcn’ (3.84 KiB of class ‘function’)
[10:26:05.852] - globals: [1] ‘my_fcn’
[10:26:05.852] 
[10:26:05.853] getGlobalsAndPackages() ... DONE
[10:26:05.853] run() for ‘Future’ ...
[10:26:05.853] - state: ‘created’
[10:26:05.853] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:05.867] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:05.867] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:05.867]   - Field: ‘node’
[10:26:05.868]   - Field: ‘label’
[10:26:05.868]   - Field: ‘local’
[10:26:05.868]   - Field: ‘owner’
[10:26:05.868]   - Field: ‘envir’
[10:26:05.868]   - Field: ‘workers’
[10:26:05.868]   - Field: ‘packages’
[10:26:05.868]   - Field: ‘gc’
[10:26:05.868]   - Field: ‘conditions’
[10:26:05.868]   - Field: ‘persistent’
[10:26:05.868]   - Field: ‘expr’
[10:26:05.869]   - Field: ‘uuid’
[10:26:05.869]   - Field: ‘seed’
[10:26:05.869]   - Field: ‘version’
[10:26:05.869]   - Field: ‘result’
[10:26:05.869]   - Field: ‘asynchronous’
[10:26:05.869]   - Field: ‘calls’
[10:26:05.869]   - Field: ‘globals’
[10:26:05.869]   - Field: ‘stdout’
[10:26:05.870]   - Field: ‘earlySignal’
[10:26:05.870]   - Field: ‘lazy’
[10:26:05.870]   - Field: ‘state’
[10:26:05.870] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:05.870] - Launch lazy future ...
[10:26:05.870] Packages needed by the future expression (n = 0): <none>
[10:26:05.870] Packages needed by future strategies (n = 0): <none>
[10:26:05.871] {
[10:26:05.871]     {
[10:26:05.871]         {
[10:26:05.871]             ...future.startTime <- base::Sys.time()
[10:26:05.871]             {
[10:26:05.871]                 {
[10:26:05.871]                   {
[10:26:05.871]                     {
[10:26:05.871]                       base::local({
[10:26:05.871]                         has_future <- base::requireNamespace("future", 
[10:26:05.871]                           quietly = TRUE)
[10:26:05.871]                         if (has_future) {
[10:26:05.871]                           ns <- base::getNamespace("future")
[10:26:05.871]                           version <- ns[[".package"]][["version"]]
[10:26:05.871]                           if (is.null(version)) 
[10:26:05.871]                             version <- utils::packageVersion("future")
[10:26:05.871]                         }
[10:26:05.871]                         else {
[10:26:05.871]                           version <- NULL
[10:26:05.871]                         }
[10:26:05.871]                         if (!has_future || version < "1.8.0") {
[10:26:05.871]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:05.871]                             "", base::R.version$version.string), 
[10:26:05.871]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:05.871]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:05.871]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:05.871]                               "release", "version")], collapse = " "), 
[10:26:05.871]                             hostname = base::Sys.info()[["nodename"]])
[10:26:05.871]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:05.871]                             info)
[10:26:05.871]                           info <- base::paste(info, collapse = "; ")
[10:26:05.871]                           if (!has_future) {
[10:26:05.871]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:05.871]                               info)
[10:26:05.871]                           }
[10:26:05.871]                           else {
[10:26:05.871]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:05.871]                               info, version)
[10:26:05.871]                           }
[10:26:05.871]                           base::stop(msg)
[10:26:05.871]                         }
[10:26:05.871]                       })
[10:26:05.871]                     }
[10:26:05.871]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:05.871]                     base::options(mc.cores = 1L)
[10:26:05.871]                   }
[10:26:05.871]                   options(future.plan = NULL)
[10:26:05.871]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.871]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:05.871]                 }
[10:26:05.871]                 ...future.workdir <- getwd()
[10:26:05.871]             }
[10:26:05.871]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:05.871]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:05.871]         }
[10:26:05.871]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:05.871]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:05.871]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:05.871]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:05.871]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:05.871]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:05.871]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:05.871]             base::names(...future.oldOptions))
[10:26:05.871]     }
[10:26:05.871]     if (FALSE) {
[10:26:05.871]     }
[10:26:05.871]     else {
[10:26:05.871]         if (TRUE) {
[10:26:05.871]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:05.871]                 open = "w")
[10:26:05.871]         }
[10:26:05.871]         else {
[10:26:05.871]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:05.871]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:05.871]         }
[10:26:05.871]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:05.871]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:05.871]             base::sink(type = "output", split = FALSE)
[10:26:05.871]             base::close(...future.stdout)
[10:26:05.871]         }, add = TRUE)
[10:26:05.871]     }
[10:26:05.871]     ...future.frame <- base::sys.nframe()
[10:26:05.871]     ...future.conditions <- base::list()
[10:26:05.871]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:05.871]     if (FALSE) {
[10:26:05.871]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:05.871]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:05.871]     }
[10:26:05.871]     ...future.result <- base::tryCatch({
[10:26:05.871]         base::withCallingHandlers({
[10:26:05.871]             ...future.value <- base::withVisible(base::local({
[10:26:05.871]                 ...future.makeSendCondition <- base::local({
[10:26:05.871]                   sendCondition <- NULL
[10:26:05.871]                   function(frame = 1L) {
[10:26:05.871]                     if (is.function(sendCondition)) 
[10:26:05.871]                       return(sendCondition)
[10:26:05.871]                     ns <- getNamespace("parallel")
[10:26:05.871]                     if (exists("sendData", mode = "function", 
[10:26:05.871]                       envir = ns)) {
[10:26:05.871]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:05.871]                         envir = ns)
[10:26:05.871]                       envir <- sys.frame(frame)
[10:26:05.871]                       master <- NULL
[10:26:05.871]                       while (!identical(envir, .GlobalEnv) && 
[10:26:05.871]                         !identical(envir, emptyenv())) {
[10:26:05.871]                         if (exists("master", mode = "list", envir = envir, 
[10:26:05.871]                           inherits = FALSE)) {
[10:26:05.871]                           master <- get("master", mode = "list", 
[10:26:05.871]                             envir = envir, inherits = FALSE)
[10:26:05.871]                           if (inherits(master, c("SOCKnode", 
[10:26:05.871]                             "SOCK0node"))) {
[10:26:05.871]                             sendCondition <<- function(cond) {
[10:26:05.871]                               data <- list(type = "VALUE", value = cond, 
[10:26:05.871]                                 success = TRUE)
[10:26:05.871]                               parallel_sendData(master, data)
[10:26:05.871]                             }
[10:26:05.871]                             return(sendCondition)
[10:26:05.871]                           }
[10:26:05.871]                         }
[10:26:05.871]                         frame <- frame + 1L
[10:26:05.871]                         envir <- sys.frame(frame)
[10:26:05.871]                       }
[10:26:05.871]                     }
[10:26:05.871]                     sendCondition <<- function(cond) NULL
[10:26:05.871]                   }
[10:26:05.871]                 })
[10:26:05.871]                 withCallingHandlers({
[10:26:05.871]                   {
[10:26:05.871]                     my_fcn(3)
[10:26:05.871]                   }
[10:26:05.871]                 }, immediateCondition = function(cond) {
[10:26:05.871]                   sendCondition <- ...future.makeSendCondition()
[10:26:05.871]                   sendCondition(cond)
[10:26:05.871]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.871]                   {
[10:26:05.871]                     inherits <- base::inherits
[10:26:05.871]                     invokeRestart <- base::invokeRestart
[10:26:05.871]                     is.null <- base::is.null
[10:26:05.871]                     muffled <- FALSE
[10:26:05.871]                     if (inherits(cond, "message")) {
[10:26:05.871]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:05.871]                       if (muffled) 
[10:26:05.871]                         invokeRestart("muffleMessage")
[10:26:05.871]                     }
[10:26:05.871]                     else if (inherits(cond, "warning")) {
[10:26:05.871]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:05.871]                       if (muffled) 
[10:26:05.871]                         invokeRestart("muffleWarning")
[10:26:05.871]                     }
[10:26:05.871]                     else if (inherits(cond, "condition")) {
[10:26:05.871]                       if (!is.null(pattern)) {
[10:26:05.871]                         computeRestarts <- base::computeRestarts
[10:26:05.871]                         grepl <- base::grepl
[10:26:05.871]                         restarts <- computeRestarts(cond)
[10:26:05.871]                         for (restart in restarts) {
[10:26:05.871]                           name <- restart$name
[10:26:05.871]                           if (is.null(name)) 
[10:26:05.871]                             next
[10:26:05.871]                           if (!grepl(pattern, name)) 
[10:26:05.871]                             next
[10:26:05.871]                           invokeRestart(restart)
[10:26:05.871]                           muffled <- TRUE
[10:26:05.871]                           break
[10:26:05.871]                         }
[10:26:05.871]                       }
[10:26:05.871]                     }
[10:26:05.871]                     invisible(muffled)
[10:26:05.871]                   }
[10:26:05.871]                   muffleCondition(cond)
[10:26:05.871]                 })
[10:26:05.871]             }))
[10:26:05.871]             future::FutureResult(value = ...future.value$value, 
[10:26:05.871]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.871]                   ...future.rng), globalenv = if (FALSE) 
[10:26:05.871]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:05.871]                     ...future.globalenv.names))
[10:26:05.871]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:05.871]         }, condition = base::local({
[10:26:05.871]             c <- base::c
[10:26:05.871]             inherits <- base::inherits
[10:26:05.871]             invokeRestart <- base::invokeRestart
[10:26:05.871]             length <- base::length
[10:26:05.871]             list <- base::list
[10:26:05.871]             seq.int <- base::seq.int
[10:26:05.871]             signalCondition <- base::signalCondition
[10:26:05.871]             sys.calls <- base::sys.calls
[10:26:05.871]             `[[` <- base::`[[`
[10:26:05.871]             `+` <- base::`+`
[10:26:05.871]             `<<-` <- base::`<<-`
[10:26:05.871]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:05.871]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:05.871]                   3L)]
[10:26:05.871]             }
[10:26:05.871]             function(cond) {
[10:26:05.871]                 is_error <- inherits(cond, "error")
[10:26:05.871]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:05.871]                   NULL)
[10:26:05.871]                 if (is_error) {
[10:26:05.871]                   sessionInformation <- function() {
[10:26:05.871]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:05.871]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:05.871]                       search = base::search(), system = base::Sys.info())
[10:26:05.871]                   }
[10:26:05.871]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.871]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:05.871]                     cond$call), session = sessionInformation(), 
[10:26:05.871]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:05.871]                   signalCondition(cond)
[10:26:05.871]                 }
[10:26:05.871]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:05.871]                 "immediateCondition"))) {
[10:26:05.871]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:05.871]                   ...future.conditions[[length(...future.conditions) + 
[10:26:05.871]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:05.871]                   if (TRUE && !signal) {
[10:26:05.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.871]                     {
[10:26:05.871]                       inherits <- base::inherits
[10:26:05.871]                       invokeRestart <- base::invokeRestart
[10:26:05.871]                       is.null <- base::is.null
[10:26:05.871]                       muffled <- FALSE
[10:26:05.871]                       if (inherits(cond, "message")) {
[10:26:05.871]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.871]                         if (muffled) 
[10:26:05.871]                           invokeRestart("muffleMessage")
[10:26:05.871]                       }
[10:26:05.871]                       else if (inherits(cond, "warning")) {
[10:26:05.871]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.871]                         if (muffled) 
[10:26:05.871]                           invokeRestart("muffleWarning")
[10:26:05.871]                       }
[10:26:05.871]                       else if (inherits(cond, "condition")) {
[10:26:05.871]                         if (!is.null(pattern)) {
[10:26:05.871]                           computeRestarts <- base::computeRestarts
[10:26:05.871]                           grepl <- base::grepl
[10:26:05.871]                           restarts <- computeRestarts(cond)
[10:26:05.871]                           for (restart in restarts) {
[10:26:05.871]                             name <- restart$name
[10:26:05.871]                             if (is.null(name)) 
[10:26:05.871]                               next
[10:26:05.871]                             if (!grepl(pattern, name)) 
[10:26:05.871]                               next
[10:26:05.871]                             invokeRestart(restart)
[10:26:05.871]                             muffled <- TRUE
[10:26:05.871]                             break
[10:26:05.871]                           }
[10:26:05.871]                         }
[10:26:05.871]                       }
[10:26:05.871]                       invisible(muffled)
[10:26:05.871]                     }
[10:26:05.871]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.871]                   }
[10:26:05.871]                 }
[10:26:05.871]                 else {
[10:26:05.871]                   if (TRUE) {
[10:26:05.871]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:05.871]                     {
[10:26:05.871]                       inherits <- base::inherits
[10:26:05.871]                       invokeRestart <- base::invokeRestart
[10:26:05.871]                       is.null <- base::is.null
[10:26:05.871]                       muffled <- FALSE
[10:26:05.871]                       if (inherits(cond, "message")) {
[10:26:05.871]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:05.871]                         if (muffled) 
[10:26:05.871]                           invokeRestart("muffleMessage")
[10:26:05.871]                       }
[10:26:05.871]                       else if (inherits(cond, "warning")) {
[10:26:05.871]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:05.871]                         if (muffled) 
[10:26:05.871]                           invokeRestart("muffleWarning")
[10:26:05.871]                       }
[10:26:05.871]                       else if (inherits(cond, "condition")) {
[10:26:05.871]                         if (!is.null(pattern)) {
[10:26:05.871]                           computeRestarts <- base::computeRestarts
[10:26:05.871]                           grepl <- base::grepl
[10:26:05.871]                           restarts <- computeRestarts(cond)
[10:26:05.871]                           for (restart in restarts) {
[10:26:05.871]                             name <- restart$name
[10:26:05.871]                             if (is.null(name)) 
[10:26:05.871]                               next
[10:26:05.871]                             if (!grepl(pattern, name)) 
[10:26:05.871]                               next
[10:26:05.871]                             invokeRestart(restart)
[10:26:05.871]                             muffled <- TRUE
[10:26:05.871]                             break
[10:26:05.871]                           }
[10:26:05.871]                         }
[10:26:05.871]                       }
[10:26:05.871]                       invisible(muffled)
[10:26:05.871]                     }
[10:26:05.871]                     muffleCondition(cond, pattern = "^muffle")
[10:26:05.871]                   }
[10:26:05.871]                 }
[10:26:05.871]             }
[10:26:05.871]         }))
[10:26:05.871]     }, error = function(ex) {
[10:26:05.871]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:05.871]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:05.871]                 ...future.rng), started = ...future.startTime, 
[10:26:05.871]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:05.871]             version = "1.8"), class = "FutureResult")
[10:26:05.871]     }, finally = {
[10:26:05.871]         if (!identical(...future.workdir, getwd())) 
[10:26:05.871]             setwd(...future.workdir)
[10:26:05.871]         {
[10:26:05.871]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:05.871]                 ...future.oldOptions$nwarnings <- NULL
[10:26:05.871]             }
[10:26:05.871]             base::options(...future.oldOptions)
[10:26:05.871]             if (.Platform$OS.type == "windows") {
[10:26:05.871]                 old_names <- names(...future.oldEnvVars)
[10:26:05.871]                 envs <- base::Sys.getenv()
[10:26:05.871]                 names <- names(envs)
[10:26:05.871]                 common <- intersect(names, old_names)
[10:26:05.871]                 added <- setdiff(names, old_names)
[10:26:05.871]                 removed <- setdiff(old_names, names)
[10:26:05.871]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:05.871]                   envs[common]]
[10:26:05.871]                 NAMES <- toupper(changed)
[10:26:05.871]                 args <- list()
[10:26:05.871]                 for (kk in seq_along(NAMES)) {
[10:26:05.871]                   name <- changed[[kk]]
[10:26:05.871]                   NAME <- NAMES[[kk]]
[10:26:05.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.871]                     next
[10:26:05.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.871]                 }
[10:26:05.871]                 NAMES <- toupper(added)
[10:26:05.871]                 for (kk in seq_along(NAMES)) {
[10:26:05.871]                   name <- added[[kk]]
[10:26:05.871]                   NAME <- NAMES[[kk]]
[10:26:05.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.871]                     next
[10:26:05.871]                   args[[name]] <- ""
[10:26:05.871]                 }
[10:26:05.871]                 NAMES <- toupper(removed)
[10:26:05.871]                 for (kk in seq_along(NAMES)) {
[10:26:05.871]                   name <- removed[[kk]]
[10:26:05.871]                   NAME <- NAMES[[kk]]
[10:26:05.871]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:05.871]                     next
[10:26:05.871]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:05.871]                 }
[10:26:05.871]                 if (length(args) > 0) 
[10:26:05.871]                   base::do.call(base::Sys.setenv, args = args)
[10:26:05.871]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:05.871]             }
[10:26:05.871]             else {
[10:26:05.871]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:05.871]             }
[10:26:05.871]             {
[10:26:05.871]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:05.871]                   0L) {
[10:26:05.871]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:05.871]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:05.871]                   base::options(opts)
[10:26:05.871]                 }
[10:26:05.871]                 {
[10:26:05.871]                   {
[10:26:05.871]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:05.871]                     NULL
[10:26:05.871]                   }
[10:26:05.871]                   options(future.plan = NULL)
[10:26:05.871]                   if (is.na(NA_character_)) 
[10:26:05.871]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:05.871]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:05.871]                   future::plan(list(function (..., workers = availableCores(), 
[10:26:05.871]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:26:05.871]                     envir = parent.frame()) 
[10:26:05.871]                   {
[10:26:05.871]                     if (is.function(workers)) 
[10:26:05.871]                       workers <- workers()
[10:26:05.871]                     workers <- structure(as.integer(workers), 
[10:26:05.871]                       class = class(workers))
[10:26:05.871]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:26:05.871]                       workers >= 1)
[10:26:05.871]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:26:05.871]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:26:05.871]                     }
[10:26:05.871]                     future <- MultisessionFuture(..., workers = workers, 
[10:26:05.871]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:26:05.871]                       envir = envir)
[10:26:05.871]                     if (!future$lazy) 
[10:26:05.871]                       future <- run(future)
[10:26:05.871]                     invisible(future)
[10:26:05.871]                   }), .cleanup = FALSE, .init = FALSE)
[10:26:05.871]                 }
[10:26:05.871]             }
[10:26:05.871]         }
[10:26:05.871]     })
[10:26:05.871]     if (TRUE) {
[10:26:05.871]         base::sink(type = "output", split = FALSE)
[10:26:05.871]         if (TRUE) {
[10:26:05.871]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:05.871]         }
[10:26:05.871]         else {
[10:26:05.871]             ...future.result["stdout"] <- base::list(NULL)
[10:26:05.871]         }
[10:26:05.871]         base::close(...future.stdout)
[10:26:05.871]         ...future.stdout <- NULL
[10:26:05.871]     }
[10:26:05.871]     ...future.result$conditions <- ...future.conditions
[10:26:05.871]     ...future.result$finished <- base::Sys.time()
[10:26:05.871]     ...future.result
[10:26:05.871] }
[10:26:05.874] Exporting 1 global objects (3.84 KiB) to cluster node #1 ...
[10:26:05.874] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ...
[10:26:05.875] Exporting ‘my_fcn’ (3.84 KiB) to cluster node #1 ... DONE
[10:26:05.875] Exporting 1 global objects (3.84 KiB) to cluster node #1 ... DONE
[10:26:05.875] MultisessionFuture started
[10:26:05.875] - Launch lazy future ... done
[10:26:05.875] run() for ‘MultisessionFuture’ ... done
[10:26:05.876] result() for ClusterFuture ...
[10:26:05.876] receiveMessageFromWorker() for ClusterFuture ...
[10:26:05.876] - Validating connection of MultisessionFuture
[10:26:05.923] - received message: FutureResult
[10:26:05.923] - Received FutureResult
[10:26:05.923] - Erased future from FutureRegistry
[10:26:05.923] result() for ClusterFuture ...
[10:26:05.923] - result already collected: FutureResult
[10:26:05.924] result() for ClusterFuture ... done
[10:26:05.924] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:05.924] result() for ClusterFuture ... done
[10:26:05.924] result() for ClusterFuture ...
[10:26:05.924] - result already collected: FutureResult
[10:26:05.924] result() for ClusterFuture ... done
[1] -3
> 
> message("*** Globals - S4 methods ... DONE")
*** Globals - S4 methods ... DONE
> 
> source("incl/end.R")
[10:26:05.925] plan(): Setting new future strategy stack:
[10:26:05.925] List of future strategies:
[10:26:05.925] 1. FutureStrategy:
[10:26:05.925]    - args: function (..., envir = parent.frame())
[10:26:05.925]    - tweaked: FALSE
[10:26:05.925]    - call: future::plan(oplan)
[10:26:05.926] plan(): nbrOfWorkers() = 1
> 
