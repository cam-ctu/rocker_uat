
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start,load-only.R")
[10:27:52.985] plan(): Setting new future strategy stack:
[10:27:52.985] List of future strategies:
[10:27:52.985] 1. sequential:
[10:27:52.985]    - args: function (..., envir = parent.frame())
[10:27:52.985]    - tweaked: FALSE
[10:27:52.985]    - call: future::plan("sequential")
[10:27:52.996] plan(): nbrOfWorkers() = 1
> 
> message("*** Tweaking future strategies ...")
*** Tweaking future strategies ...
> 
> message("*** y <- tweak(future::sequential) ...")
*** y <- tweak(future::sequential) ...
> sequential2 <- future::tweak(future::sequential)
> print(args(sequential2))
function (..., envir = parent.frame()) 
NULL
> stopifnot(identical(sequential2, future::sequential))
> stopifnot(!inherits(sequential2, "tweaked"))
> 
> 
> message("*** y <- tweak(future::sequential, abc = FALSE) ...")
*** y <- tweak(future::sequential, abc = FALSE) ...
> sequential2 <- future::tweak(future::sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak("sequential", abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> library("future")
[10:27:53.014] Option 'future.startup.script': TRUE
[10:27:53.014] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[10:27:53.014] Future startup scripts found: <none>
> 
> message("*** y <- tweak(sequential, abc = FALSE) ...")
*** y <- tweak(sequential, abc = FALSE) ...
> sequential2 <- future::tweak(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> message("*** y <- tweak('sequential', abc = FALSE) ...")
*** y <- tweak('sequential', abc = FALSE) ...
> sequential2 <- future::tweak('sequential', abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
> print(args(sequential2))
function (..., abc = FALSE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> message("*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...")
*** y <- tweak('sequential', abc = FALSE, abc = 1, def = TRUE) ...
> res <- tryCatch({
+   sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
+ }, warning = function(w) {
+   w
+ })
> stopifnot(inherits(res, "warning"))
> sequential2 <- future::tweak('sequential', abc = FALSE, abc = 1, def = TRUE)
Warning: Detected 2 unknown future arguments: ‘abc’, ‘def’
> print(args(sequential2))
function (..., abc = FALSE, def = TRUE, envir = parent.frame()) 
NULL
> stopifnot(!identical(sequential2, future::sequential))
> stopifnot(inherits(sequential2, "tweaked"))
> stopifnot(identical(formals(sequential2)$abc, FALSE))
> 
> 
> 
> message("*** y <- tweak(cluster, rscript_startup = quote(...)) ...")
*** y <- tweak(cluster, rscript_startup = quote(...)) ...
> cl <- 42L
> cluster2 <- tweak(cluster, workers = cl, rscript_startup = quote(options(abc = 42L)))
> print(args(cluster2))
function (..., workers = 42L, rscript_startup = quote(options(abc = 42L)), 
    envir = parent.frame()) 
NULL
> stopifnot(!identical(cluster2, future::cluster))
> stopifnot(inherits(cluster2, "tweaked"))
> formals2 <- formals(cluster2)
> stopifnot(identical(formals2$workers, cl))
> stopifnot("rscript_startup" %in% names(formals2))
> rscript_startup <- formals2$rscript_startup
> stopifnot(!is.null(rscript_startup),
+           is.language(rscript_startup), is.call(rscript_startup))
> value <- eval(rscript_startup)
> stopifnot(is.language(value), is.call(value))
> 
> 
> message("*** plan() - tweak without introducting package dependencies ...")
*** plan() - tweak without introducting package dependencies ...
> 
> ## Requires a auxillary package that is available and not already loaded
> if (!covr_testing && requireNamespace("grid")) {
+   local({
+     cl <- makeClusterPSOCK(1L)
+     on.exit(parallel:::stopCluster(cl))
+     ns0 <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+ 
+     ## When using futures, the 'future' package is loaded on the worker
+     ns0 <- c(ns0, c("tools", "parallelly",
+                     "codetools", "digest", "globals", "listenv", "future"))
+     if (!is.element("grid", ns0)) {
+       ## Assert that a global copy from a package does not trigger
+       ## that package from being loaded on the worker
+       dummy <- grid::depth
+       oplan <- future::plan(future::cluster, workers = cl)
+       on.exit(future::plan(oplan), add = TRUE)
+       ns <- unlist(parallel::clusterEvalQ(cl, loadedNamespaces()))
+       diff <- setdiff(ns, ns0)
+       if ("covr" %in% diff) diff <- setdiff(diff, c("lazyeval", "rex", "covr"))
+       if (length(diff) > 0) {
+         print(loadedNamespaces())
+         stop("plan() with a tweak() causes new packages to be loaded: ", sQuote(paste(diff, collapse = ", ")))
+       }
+     }
+   })
+ }
Loading required namespace: grid
[10:27:53.031] [local output] makeClusterPSOCK() ...
[10:27:53.068] [local output] Workers: [n = 1] ‘localhost’
[10:27:53.069] [local output] Base port: 11261
[10:27:53.069] [local output] Getting setup options for 1 cluster nodes ...
[10:27:53.069] [local output]  - Node 1 of 1 ...
[10:27:53.070] [local output] localMachine=TRUE => revtunnel=FALSE

[10:27:53.071] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4kbd0a/worker.rank=1.parallelly.parent=92887.16ad7345d0958.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp4kbd0a/worker.rank=1.parallelly.parent=92887.16ad7345d0958.pid")'’
[10:27:53.267] - Possible to infer worker's PID: TRUE
[10:27:53.267] [local output] Rscript port: 11261

[10:27:53.268] [local output] Getting setup options for 1 cluster nodes ... done
[10:27:53.268] [local output]  - Parallel setup requested for some PSOCK nodes
[10:27:53.268] [local output] Setting up PSOCK nodes in parallel
[10:27:53.268] List of 36
[10:27:53.268]  $ worker          : chr "localhost"
[10:27:53.268]   ..- attr(*, "localhost")= logi TRUE
[10:27:53.268]  $ master          : chr "localhost"
[10:27:53.268]  $ port            : int 11261
[10:27:53.268]  $ connectTimeout  : num 120
[10:27:53.268]  $ timeout         : num 2592000
[10:27:53.268]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:27:53.268]  $ homogeneous     : logi TRUE
[10:27:53.268]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:27:53.268]  $ rscript_envs    : NULL
[10:27:53.268]  $ rscript_libs    : NULL
[10:27:53.268]  $ rscript_startup : NULL
[10:27:53.268]  $ rscript_sh      : chr "sh"
[10:27:53.268]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:53.268]  $ methods         : logi TRUE
[10:27:53.268]  $ socketOptions   : chr "no-delay"
[10:27:53.268]  $ useXDR          : logi FALSE
[10:27:53.268]  $ outfile         : chr "/dev/null"
[10:27:53.268]  $ renice          : int NA
[10:27:53.268]  $ rshcmd          : NULL
[10:27:53.268]  $ user            : chr(0) 
[10:27:53.268]  $ revtunnel       : logi FALSE
[10:27:53.268]  $ rshlogfile      : NULL
[10:27:53.268]  $ rshopts         : chr(0) 
[10:27:53.268]  $ rank            : int 1
[10:27:53.268]  $ manual          : logi FALSE
[10:27:53.268]  $ dryrun          : logi FALSE
[10:27:53.268]  $ quiet           : logi FALSE
[10:27:53.268]  $ setup_strategy  : chr "parallel"
[10:27:53.268]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:53.268]  $ pidfile         : chr "/tmp/Rtmp4kbd0a/worker.rank=1.parallelly.parent=92887.16ad7345d0958.pid"
[10:27:53.268]  $ rshcmd_label    : NULL
[10:27:53.268]  $ rsh_call        : NULL
[10:27:53.268]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:27:53.268]  $ localMachine    : logi TRUE
[10:27:53.268]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:27:53.268]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:27:53.268]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:27:53.268]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:27:53.268]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:27:53.268]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:27:53.268]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:27:53.268]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:27:53.268]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:27:53.268]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:27:53.268]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:27:53.268]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:27:53.268]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:27:53.268]  $ arguments       :List of 28
[10:27:53.268]   ..$ worker          : chr "localhost"
[10:27:53.268]   ..$ master          : NULL
[10:27:53.268]   ..$ port            : int 11261
[10:27:53.268]   ..$ connectTimeout  : num 120
[10:27:53.268]   ..$ timeout         : num 2592000
[10:27:53.268]   ..$ rscript         : NULL
[10:27:53.268]   ..$ homogeneous     : NULL
[10:27:53.268]   ..$ rscript_args    : NULL
[10:27:53.268]   ..$ rscript_envs    : NULL
[10:27:53.268]   ..$ rscript_libs    : NULL
[10:27:53.268]   ..$ rscript_startup : NULL
[10:27:53.268]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:27:53.268]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:27:53.268]   ..$ methods         : logi TRUE
[10:27:53.268]   ..$ socketOptions   : chr "no-delay"
[10:27:53.268]   ..$ useXDR          : logi FALSE
[10:27:53.268]   ..$ outfile         : chr "/dev/null"
[10:27:53.268]   ..$ renice          : int NA
[10:27:53.268]   ..$ rshcmd          : NULL
[10:27:53.268]   ..$ user            : NULL
[10:27:53.268]   ..$ revtunnel       : logi NA
[10:27:53.268]   ..$ rshlogfile      : NULL
[10:27:53.268]   ..$ rshopts         : NULL
[10:27:53.268]   ..$ rank            : int 1
[10:27:53.268]   ..$ manual          : logi FALSE
[10:27:53.268]   ..$ dryrun          : logi FALSE
[10:27:53.268]   ..$ quiet           : logi FALSE
[10:27:53.268]   ..$ setup_strategy  : chr "parallel"
[10:27:53.268]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:27:53.287] [local output] System call to launch all workers:
[10:27:53.287] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp4kbd0a/worker.rank=1.parallelly.parent=92887.16ad7345d0958.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11261 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:27:53.287] [local output] Starting PSOCK main server
[10:27:53.293] [local output] Workers launched
[10:27:53.293] [local output] Waiting for workers to connect back
[10:27:53.293]  - [local output] 0 workers out of 1 ready
[10:27:53.493]  - [local output] 0 workers out of 1 ready
[10:27:53.494]  - [local output] 1 workers out of 1 ready
[10:27:53.494] [local output] Launching of workers completed
[10:27:53.494] [local output] Collecting session information from workers
[10:27:53.495] [local output]  - Worker #1 of 1
[10:27:53.495] [local output] makeClusterPSOCK() ... done
[10:27:53.496] plan(): Setting new future strategy stack:
[10:27:53.496] List of future strategies:
[10:27:53.496] 1. cluster:
[10:27:53.496]    - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:27:53.496]    - tweaked: TRUE
[10:27:53.496]    - call: future::plan(future::cluster, workers = cl)
[10:27:53.513] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:27:53.513] cluster:
[10:27:53.513] - args: function (..., workers = "<Socket cluster with 1 nodes where 1 node is on host ‘localhost’ (R version 4.3.2 (2023-10-31), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[10:27:53.513] - tweaked: TRUE
[10:27:53.513] - call: future::plan(future::cluster, workers = cl)
[10:27:53.516] getGlobalsAndPackages() ...
[10:27:53.517] Not searching for globals
[10:27:53.517] - globals: [0] <none>
[10:27:53.517] getGlobalsAndPackages() ... DONE
[10:27:53.524] Packages needed by the future expression (n = 0): <none>
[10:27:53.524] Packages needed by future strategies (n = 0): <none>
[10:27:53.525] {
[10:27:53.525]     {
[10:27:53.525]         {
[10:27:53.525]             ...future.startTime <- base::Sys.time()
[10:27:53.525]             {
[10:27:53.525]                 {
[10:27:53.525]                   {
[10:27:53.525]                     base::local({
[10:27:53.525]                       has_future <- base::requireNamespace("future", 
[10:27:53.525]                         quietly = TRUE)
[10:27:53.525]                       if (has_future) {
[10:27:53.525]                         ns <- base::getNamespace("future")
[10:27:53.525]                         version <- ns[[".package"]][["version"]]
[10:27:53.525]                         if (is.null(version)) 
[10:27:53.525]                           version <- utils::packageVersion("future")
[10:27:53.525]                       }
[10:27:53.525]                       else {
[10:27:53.525]                         version <- NULL
[10:27:53.525]                       }
[10:27:53.525]                       if (!has_future || version < "1.8.0") {
[10:27:53.525]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:53.525]                           "", base::R.version$version.string), 
[10:27:53.525]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:53.525]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:53.525]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:53.525]                             "release", "version")], collapse = " "), 
[10:27:53.525]                           hostname = base::Sys.info()[["nodename"]])
[10:27:53.525]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:53.525]                           info)
[10:27:53.525]                         info <- base::paste(info, collapse = "; ")
[10:27:53.525]                         if (!has_future) {
[10:27:53.525]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:53.525]                             info)
[10:27:53.525]                         }
[10:27:53.525]                         else {
[10:27:53.525]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:53.525]                             info, version)
[10:27:53.525]                         }
[10:27:53.525]                         base::stop(msg)
[10:27:53.525]                       }
[10:27:53.525]                     })
[10:27:53.525]                   }
[10:27:53.525]                   options(future.plan = NULL)
[10:27:53.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:53.525]                 }
[10:27:53.525]                 ...future.workdir <- getwd()
[10:27:53.525]             }
[10:27:53.525]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:53.525]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:53.525]         }
[10:27:53.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:53.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:53.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:53.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:53.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:53.525]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:53.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:53.525]             base::names(...future.oldOptions))
[10:27:53.525]     }
[10:27:53.525]     if (FALSE) {
[10:27:53.525]     }
[10:27:53.525]     else {
[10:27:53.525]         if (TRUE) {
[10:27:53.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:53.525]                 open = "w")
[10:27:53.525]         }
[10:27:53.525]         else {
[10:27:53.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:53.525]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:53.525]         }
[10:27:53.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:53.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:53.525]             base::sink(type = "output", split = FALSE)
[10:27:53.525]             base::close(...future.stdout)
[10:27:53.525]         }, add = TRUE)
[10:27:53.525]     }
[10:27:53.525]     ...future.frame <- base::sys.nframe()
[10:27:53.525]     ...future.conditions <- base::list()
[10:27:53.525]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:53.525]     if (FALSE) {
[10:27:53.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:53.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:53.525]     }
[10:27:53.525]     ...future.result <- base::tryCatch({
[10:27:53.525]         base::withCallingHandlers({
[10:27:53.525]             ...future.value <- base::withVisible(base::local({
[10:27:53.525]                 ...future.makeSendCondition <- base::local({
[10:27:53.525]                   sendCondition <- NULL
[10:27:53.525]                   function(frame = 1L) {
[10:27:53.525]                     if (is.function(sendCondition)) 
[10:27:53.525]                       return(sendCondition)
[10:27:53.525]                     ns <- getNamespace("parallel")
[10:27:53.525]                     if (exists("sendData", mode = "function", 
[10:27:53.525]                       envir = ns)) {
[10:27:53.525]                       parallel_sendData <- get("sendData", mode = "function", 
[10:27:53.525]                         envir = ns)
[10:27:53.525]                       envir <- sys.frame(frame)
[10:27:53.525]                       master <- NULL
[10:27:53.525]                       while (!identical(envir, .GlobalEnv) && 
[10:27:53.525]                         !identical(envir, emptyenv())) {
[10:27:53.525]                         if (exists("master", mode = "list", envir = envir, 
[10:27:53.525]                           inherits = FALSE)) {
[10:27:53.525]                           master <- get("master", mode = "list", 
[10:27:53.525]                             envir = envir, inherits = FALSE)
[10:27:53.525]                           if (inherits(master, c("SOCKnode", 
[10:27:53.525]                             "SOCK0node"))) {
[10:27:53.525]                             sendCondition <<- function(cond) {
[10:27:53.525]                               data <- list(type = "VALUE", value = cond, 
[10:27:53.525]                                 success = TRUE)
[10:27:53.525]                               parallel_sendData(master, data)
[10:27:53.525]                             }
[10:27:53.525]                             return(sendCondition)
[10:27:53.525]                           }
[10:27:53.525]                         }
[10:27:53.525]                         frame <- frame + 1L
[10:27:53.525]                         envir <- sys.frame(frame)
[10:27:53.525]                       }
[10:27:53.525]                     }
[10:27:53.525]                     sendCondition <<- function(cond) NULL
[10:27:53.525]                   }
[10:27:53.525]                 })
[10:27:53.525]                 withCallingHandlers({
[10:27:53.525]                   NA
[10:27:53.525]                 }, immediateCondition = function(cond) {
[10:27:53.525]                   sendCondition <- ...future.makeSendCondition()
[10:27:53.525]                   sendCondition(cond)
[10:27:53.525]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.525]                   {
[10:27:53.525]                     inherits <- base::inherits
[10:27:53.525]                     invokeRestart <- base::invokeRestart
[10:27:53.525]                     is.null <- base::is.null
[10:27:53.525]                     muffled <- FALSE
[10:27:53.525]                     if (inherits(cond, "message")) {
[10:27:53.525]                       muffled <- grepl(pattern, "muffleMessage")
[10:27:53.525]                       if (muffled) 
[10:27:53.525]                         invokeRestart("muffleMessage")
[10:27:53.525]                     }
[10:27:53.525]                     else if (inherits(cond, "warning")) {
[10:27:53.525]                       muffled <- grepl(pattern, "muffleWarning")
[10:27:53.525]                       if (muffled) 
[10:27:53.525]                         invokeRestart("muffleWarning")
[10:27:53.525]                     }
[10:27:53.525]                     else if (inherits(cond, "condition")) {
[10:27:53.525]                       if (!is.null(pattern)) {
[10:27:53.525]                         computeRestarts <- base::computeRestarts
[10:27:53.525]                         grepl <- base::grepl
[10:27:53.525]                         restarts <- computeRestarts(cond)
[10:27:53.525]                         for (restart in restarts) {
[10:27:53.525]                           name <- restart$name
[10:27:53.525]                           if (is.null(name)) 
[10:27:53.525]                             next
[10:27:53.525]                           if (!grepl(pattern, name)) 
[10:27:53.525]                             next
[10:27:53.525]                           invokeRestart(restart)
[10:27:53.525]                           muffled <- TRUE
[10:27:53.525]                           break
[10:27:53.525]                         }
[10:27:53.525]                       }
[10:27:53.525]                     }
[10:27:53.525]                     invisible(muffled)
[10:27:53.525]                   }
[10:27:53.525]                   muffleCondition(cond)
[10:27:53.525]                 })
[10:27:53.525]             }))
[10:27:53.525]             future::FutureResult(value = ...future.value$value, 
[10:27:53.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.525]                   ...future.rng), globalenv = if (FALSE) 
[10:27:53.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:53.525]                     ...future.globalenv.names))
[10:27:53.525]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:53.525]         }, condition = base::local({
[10:27:53.525]             c <- base::c
[10:27:53.525]             inherits <- base::inherits
[10:27:53.525]             invokeRestart <- base::invokeRestart
[10:27:53.525]             length <- base::length
[10:27:53.525]             list <- base::list
[10:27:53.525]             seq.int <- base::seq.int
[10:27:53.525]             signalCondition <- base::signalCondition
[10:27:53.525]             sys.calls <- base::sys.calls
[10:27:53.525]             `[[` <- base::`[[`
[10:27:53.525]             `+` <- base::`+`
[10:27:53.525]             `<<-` <- base::`<<-`
[10:27:53.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:53.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:53.525]                   3L)]
[10:27:53.525]             }
[10:27:53.525]             function(cond) {
[10:27:53.525]                 is_error <- inherits(cond, "error")
[10:27:53.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:53.525]                   NULL)
[10:27:53.525]                 if (is_error) {
[10:27:53.525]                   sessionInformation <- function() {
[10:27:53.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:53.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:53.525]                       search = base::search(), system = base::Sys.info())
[10:27:53.525]                   }
[10:27:53.525]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:53.525]                     cond$call), session = sessionInformation(), 
[10:27:53.525]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:53.525]                   signalCondition(cond)
[10:27:53.525]                 }
[10:27:53.525]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:53.525]                 "immediateCondition"))) {
[10:27:53.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:53.525]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:53.525]                   if (TRUE && !signal) {
[10:27:53.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.525]                     {
[10:27:53.525]                       inherits <- base::inherits
[10:27:53.525]                       invokeRestart <- base::invokeRestart
[10:27:53.525]                       is.null <- base::is.null
[10:27:53.525]                       muffled <- FALSE
[10:27:53.525]                       if (inherits(cond, "message")) {
[10:27:53.525]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.525]                         if (muffled) 
[10:27:53.525]                           invokeRestart("muffleMessage")
[10:27:53.525]                       }
[10:27:53.525]                       else if (inherits(cond, "warning")) {
[10:27:53.525]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.525]                         if (muffled) 
[10:27:53.525]                           invokeRestart("muffleWarning")
[10:27:53.525]                       }
[10:27:53.525]                       else if (inherits(cond, "condition")) {
[10:27:53.525]                         if (!is.null(pattern)) {
[10:27:53.525]                           computeRestarts <- base::computeRestarts
[10:27:53.525]                           grepl <- base::grepl
[10:27:53.525]                           restarts <- computeRestarts(cond)
[10:27:53.525]                           for (restart in restarts) {
[10:27:53.525]                             name <- restart$name
[10:27:53.525]                             if (is.null(name)) 
[10:27:53.525]                               next
[10:27:53.525]                             if (!grepl(pattern, name)) 
[10:27:53.525]                               next
[10:27:53.525]                             invokeRestart(restart)
[10:27:53.525]                             muffled <- TRUE
[10:27:53.525]                             break
[10:27:53.525]                           }
[10:27:53.525]                         }
[10:27:53.525]                       }
[10:27:53.525]                       invisible(muffled)
[10:27:53.525]                     }
[10:27:53.525]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.525]                   }
[10:27:53.525]                 }
[10:27:53.525]                 else {
[10:27:53.525]                   if (TRUE) {
[10:27:53.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.525]                     {
[10:27:53.525]                       inherits <- base::inherits
[10:27:53.525]                       invokeRestart <- base::invokeRestart
[10:27:53.525]                       is.null <- base::is.null
[10:27:53.525]                       muffled <- FALSE
[10:27:53.525]                       if (inherits(cond, "message")) {
[10:27:53.525]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.525]                         if (muffled) 
[10:27:53.525]                           invokeRestart("muffleMessage")
[10:27:53.525]                       }
[10:27:53.525]                       else if (inherits(cond, "warning")) {
[10:27:53.525]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.525]                         if (muffled) 
[10:27:53.525]                           invokeRestart("muffleWarning")
[10:27:53.525]                       }
[10:27:53.525]                       else if (inherits(cond, "condition")) {
[10:27:53.525]                         if (!is.null(pattern)) {
[10:27:53.525]                           computeRestarts <- base::computeRestarts
[10:27:53.525]                           grepl <- base::grepl
[10:27:53.525]                           restarts <- computeRestarts(cond)
[10:27:53.525]                           for (restart in restarts) {
[10:27:53.525]                             name <- restart$name
[10:27:53.525]                             if (is.null(name)) 
[10:27:53.525]                               next
[10:27:53.525]                             if (!grepl(pattern, name)) 
[10:27:53.525]                               next
[10:27:53.525]                             invokeRestart(restart)
[10:27:53.525]                             muffled <- TRUE
[10:27:53.525]                             break
[10:27:53.525]                           }
[10:27:53.525]                         }
[10:27:53.525]                       }
[10:27:53.525]                       invisible(muffled)
[10:27:53.525]                     }
[10:27:53.525]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.525]                   }
[10:27:53.525]                 }
[10:27:53.525]             }
[10:27:53.525]         }))
[10:27:53.525]     }, error = function(ex) {
[10:27:53.525]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:53.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.525]                 ...future.rng), started = ...future.startTime, 
[10:27:53.525]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:53.525]             version = "1.8"), class = "FutureResult")
[10:27:53.525]     }, finally = {
[10:27:53.525]         if (!identical(...future.workdir, getwd())) 
[10:27:53.525]             setwd(...future.workdir)
[10:27:53.525]         {
[10:27:53.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:53.525]                 ...future.oldOptions$nwarnings <- NULL
[10:27:53.525]             }
[10:27:53.525]             base::options(...future.oldOptions)
[10:27:53.525]             if (.Platform$OS.type == "windows") {
[10:27:53.525]                 old_names <- names(...future.oldEnvVars)
[10:27:53.525]                 envs <- base::Sys.getenv()
[10:27:53.525]                 names <- names(envs)
[10:27:53.525]                 common <- intersect(names, old_names)
[10:27:53.525]                 added <- setdiff(names, old_names)
[10:27:53.525]                 removed <- setdiff(old_names, names)
[10:27:53.525]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:53.525]                   envs[common]]
[10:27:53.525]                 NAMES <- toupper(changed)
[10:27:53.525]                 args <- list()
[10:27:53.525]                 for (kk in seq_along(NAMES)) {
[10:27:53.525]                   name <- changed[[kk]]
[10:27:53.525]                   NAME <- NAMES[[kk]]
[10:27:53.525]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.525]                     next
[10:27:53.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.525]                 }
[10:27:53.525]                 NAMES <- toupper(added)
[10:27:53.525]                 for (kk in seq_along(NAMES)) {
[10:27:53.525]                   name <- added[[kk]]
[10:27:53.525]                   NAME <- NAMES[[kk]]
[10:27:53.525]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.525]                     next
[10:27:53.525]                   args[[name]] <- ""
[10:27:53.525]                 }
[10:27:53.525]                 NAMES <- toupper(removed)
[10:27:53.525]                 for (kk in seq_along(NAMES)) {
[10:27:53.525]                   name <- removed[[kk]]
[10:27:53.525]                   NAME <- NAMES[[kk]]
[10:27:53.525]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.525]                     next
[10:27:53.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.525]                 }
[10:27:53.525]                 if (length(args) > 0) 
[10:27:53.525]                   base::do.call(base::Sys.setenv, args = args)
[10:27:53.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:53.525]             }
[10:27:53.525]             else {
[10:27:53.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:53.525]             }
[10:27:53.525]             {
[10:27:53.525]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:53.525]                   0L) {
[10:27:53.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:53.525]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:53.525]                   base::options(opts)
[10:27:53.525]                 }
[10:27:53.525]                 {
[10:27:53.525]                   NULL
[10:27:53.525]                   options(future.plan = NULL)
[10:27:53.525]                   if (is.na(NA_character_)) 
[10:27:53.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:53.525]                   future::plan(list(function (..., workers = list(
[10:27:53.525]                     list(con = 4L, host = "localhost", rank = 0L, 
[10:27:53.525]                       session_info = list(r = list(platform = "x86_64-pc-linux-gnu", 
[10:27:53.525]                         arch = "x86_64", os = "linux-gnu", system = "x86_64, linux-gnu", 
[10:27:53.525]                         status = "", major = "4", minor = "3.2", 
[10:27:53.525]                         year = "2023", month = "10", day = "31", 
[10:27:53.525]                         `svn rev` = "85441", language = "R", 
[10:27:53.525]                         version.string = "R version 4.3.2 (2023-10-31)", 
[10:27:53.525]                         nickname = "Eye Holes", os.type = "unix"), 
[10:27:53.525]                         system = list(sysname = "Linux", release = "6.5.0-1025-azure", 
[10:27:53.525]                           version = "#26~22.04.1-Ubuntu SMP Thu Jul 11 22:33:04 UTC 2024", 
[10:27:53.525]                           nodename = "3e863ac79bce", machine = "x86_64", 
[10:27:53.525]                           login = "unknown", user = "root", effective_user = "root"), 
[10:27:53.525]                         libs = c("/usr/local/lib/R/site-library", 
[10:27:53.525]                         "/usr/local/lib/R/library"), pkgs = NULL, 
[10:27:53.525]                         pwd = "/__w/rocker_uat/rocker_uat/packages/future/future-tests", 
[10:27:53.525]                         process = list(pid = 92940L)))), envir = parent.frame()) 
[10:27:53.525]                   strategy(..., workers = workers, envir = envir)), 
[10:27:53.525]                     .cleanup = FALSE, .init = FALSE)
[10:27:53.525]                 }
[10:27:53.525]             }
[10:27:53.525]         }
[10:27:53.525]     })
[10:27:53.525]     if (TRUE) {
[10:27:53.525]         base::sink(type = "output", split = FALSE)
[10:27:53.525]         if (TRUE) {
[10:27:53.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:53.525]         }
[10:27:53.525]         else {
[10:27:53.525]             ...future.result["stdout"] <- base::list(NULL)
[10:27:53.525]         }
[10:27:53.525]         base::close(...future.stdout)
[10:27:53.525]         ...future.stdout <- NULL
[10:27:53.525]     }
[10:27:53.525]     ...future.result$conditions <- ...future.conditions
[10:27:53.525]     ...future.result$finished <- base::Sys.time()
[10:27:53.525]     ...future.result
[10:27:53.525] }
[10:27:53.585] ClusterFuture started
[10:27:53.586] result() for ClusterFuture ...
[10:27:53.587] receiveMessageFromWorker() for ClusterFuture ...
[10:27:53.587] - Validating connection of ClusterFuture
[10:27:53.620] - received message: FutureResult
[10:27:53.620] - Received FutureResult
[10:27:53.623] - Erased future from FutureRegistry
[10:27:53.624] result() for ClusterFuture ...
[10:27:53.624] - result already collected: FutureResult
[10:27:53.624] result() for ClusterFuture ... done
[10:27:53.624] receiveMessageFromWorker() for ClusterFuture ... done
[10:27:53.624] result() for ClusterFuture ... done
[10:27:53.624] result() for ClusterFuture ...
[10:27:53.624] - result already collected: FutureResult
[10:27:53.624] result() for ClusterFuture ... done
[10:27:53.625] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:27:53.625] plan(): nbrOfWorkers() = 1
[10:27:53.629] plan(): Setting new future strategy stack:
[10:27:53.629] List of future strategies:
[10:27:53.629] 1. sequential:
[10:27:53.629]    - args: function (..., envir = parent.frame())
[10:27:53.629]    - tweaked: FALSE
[10:27:53.629]    - call: future::plan("sequential")
[10:27:53.630] plan(): nbrOfWorkers() = 1
> 
> message("*** plan() - tweak without introducting package dependencies ... DONE")
*** plan() - tweak without introducting package dependencies ... DONE
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ...")
*** y %<-% { expr } %tweak% tweaks ...
> 
> plan(sequential)
[10:27:53.631] plan(): Setting new future strategy stack:
[10:27:53.631] List of future strategies:
[10:27:53.631] 1. sequential:
[10:27:53.631]    - args: function (..., envir = parent.frame())
[10:27:53.631]    - tweaked: FALSE
[10:27:53.631]    - call: plan(sequential)
[10:27:53.631] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[10:27:53.633] getGlobalsAndPackages() ...
[10:27:53.633] Searching for globals...
[10:27:53.642] - globals found: [2] ‘{’, ‘<-’
[10:27:53.642] Searching for globals ... DONE
[10:27:53.642] Resolving globals: FALSE
[10:27:53.643] 
[10:27:53.643] 
[10:27:53.643] getGlobalsAndPackages() ... DONE
[10:27:53.643] run() for ‘Future’ ...
[10:27:53.643] - state: ‘created’
[10:27:53.644] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:27:53.644] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:27:53.644] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:27:53.644]   - Field: ‘label’
[10:27:53.644]   - Field: ‘local’
[10:27:53.644]   - Field: ‘owner’
[10:27:53.644]   - Field: ‘envir’
[10:27:53.645]   - Field: ‘packages’
[10:27:53.645]   - Field: ‘gc’
[10:27:53.645]   - Field: ‘conditions’
[10:27:53.645]   - Field: ‘expr’
[10:27:53.645]   - Field: ‘uuid’
[10:27:53.645]   - Field: ‘seed’
[10:27:53.645]   - Field: ‘version’
[10:27:53.645]   - Field: ‘result’
[10:27:53.645]   - Field: ‘asynchronous’
[10:27:53.645]   - Field: ‘calls’
[10:27:53.645]   - Field: ‘globals’
[10:27:53.646]   - Field: ‘stdout’
[10:27:53.646]   - Field: ‘earlySignal’
[10:27:53.646]   - Field: ‘lazy’
[10:27:53.646]   - Field: ‘state’
[10:27:53.646] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:27:53.646] - Launch lazy future ...
[10:27:53.646] Packages needed by the future expression (n = 0): <none>
[10:27:53.647] Packages needed by future strategies (n = 0): <none>
[10:27:53.647] {
[10:27:53.647]     {
[10:27:53.647]         {
[10:27:53.647]             ...future.startTime <- base::Sys.time()
[10:27:53.647]             {
[10:27:53.647]                 {
[10:27:53.647]                   {
[10:27:53.647]                     base::local({
[10:27:53.647]                       has_future <- base::requireNamespace("future", 
[10:27:53.647]                         quietly = TRUE)
[10:27:53.647]                       if (has_future) {
[10:27:53.647]                         ns <- base::getNamespace("future")
[10:27:53.647]                         version <- ns[[".package"]][["version"]]
[10:27:53.647]                         if (is.null(version)) 
[10:27:53.647]                           version <- utils::packageVersion("future")
[10:27:53.647]                       }
[10:27:53.647]                       else {
[10:27:53.647]                         version <- NULL
[10:27:53.647]                       }
[10:27:53.647]                       if (!has_future || version < "1.8.0") {
[10:27:53.647]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:53.647]                           "", base::R.version$version.string), 
[10:27:53.647]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:53.647]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:53.647]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:53.647]                             "release", "version")], collapse = " "), 
[10:27:53.647]                           hostname = base::Sys.info()[["nodename"]])
[10:27:53.647]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:53.647]                           info)
[10:27:53.647]                         info <- base::paste(info, collapse = "; ")
[10:27:53.647]                         if (!has_future) {
[10:27:53.647]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:53.647]                             info)
[10:27:53.647]                         }
[10:27:53.647]                         else {
[10:27:53.647]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:53.647]                             info, version)
[10:27:53.647]                         }
[10:27:53.647]                         base::stop(msg)
[10:27:53.647]                       }
[10:27:53.647]                     })
[10:27:53.647]                   }
[10:27:53.647]                   options(future.plan = NULL)
[10:27:53.647]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.647]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:53.647]                 }
[10:27:53.647]                 ...future.workdir <- getwd()
[10:27:53.647]             }
[10:27:53.647]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:53.647]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:53.647]         }
[10:27:53.647]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:53.647]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:53.647]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:53.647]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:53.647]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:53.647]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:53.647]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:53.647]             base::names(...future.oldOptions))
[10:27:53.647]     }
[10:27:53.647]     if (FALSE) {
[10:27:53.647]     }
[10:27:53.647]     else {
[10:27:53.647]         if (TRUE) {
[10:27:53.647]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:53.647]                 open = "w")
[10:27:53.647]         }
[10:27:53.647]         else {
[10:27:53.647]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:53.647]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:53.647]         }
[10:27:53.647]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:53.647]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:53.647]             base::sink(type = "output", split = FALSE)
[10:27:53.647]             base::close(...future.stdout)
[10:27:53.647]         }, add = TRUE)
[10:27:53.647]     }
[10:27:53.647]     ...future.frame <- base::sys.nframe()
[10:27:53.647]     ...future.conditions <- base::list()
[10:27:53.647]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:53.647]     if (FALSE) {
[10:27:53.647]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:53.647]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:53.647]     }
[10:27:53.647]     ...future.result <- base::tryCatch({
[10:27:53.647]         base::withCallingHandlers({
[10:27:53.647]             ...future.value <- base::withVisible(base::local({
[10:27:53.647]                 a <- 1
[10:27:53.647]                 a
[10:27:53.647]             }))
[10:27:53.647]             future::FutureResult(value = ...future.value$value, 
[10:27:53.647]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.647]                   ...future.rng), globalenv = if (FALSE) 
[10:27:53.647]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:53.647]                     ...future.globalenv.names))
[10:27:53.647]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:53.647]         }, condition = base::local({
[10:27:53.647]             c <- base::c
[10:27:53.647]             inherits <- base::inherits
[10:27:53.647]             invokeRestart <- base::invokeRestart
[10:27:53.647]             length <- base::length
[10:27:53.647]             list <- base::list
[10:27:53.647]             seq.int <- base::seq.int
[10:27:53.647]             signalCondition <- base::signalCondition
[10:27:53.647]             sys.calls <- base::sys.calls
[10:27:53.647]             `[[` <- base::`[[`
[10:27:53.647]             `+` <- base::`+`
[10:27:53.647]             `<<-` <- base::`<<-`
[10:27:53.647]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:53.647]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:53.647]                   3L)]
[10:27:53.647]             }
[10:27:53.647]             function(cond) {
[10:27:53.647]                 is_error <- inherits(cond, "error")
[10:27:53.647]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:53.647]                   NULL)
[10:27:53.647]                 if (is_error) {
[10:27:53.647]                   sessionInformation <- function() {
[10:27:53.647]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:53.647]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:53.647]                       search = base::search(), system = base::Sys.info())
[10:27:53.647]                   }
[10:27:53.647]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.647]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:53.647]                     cond$call), session = sessionInformation(), 
[10:27:53.647]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:53.647]                   signalCondition(cond)
[10:27:53.647]                 }
[10:27:53.647]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:53.647]                 "immediateCondition"))) {
[10:27:53.647]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:53.647]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.647]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:53.647]                   if (TRUE && !signal) {
[10:27:53.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.647]                     {
[10:27:53.647]                       inherits <- base::inherits
[10:27:53.647]                       invokeRestart <- base::invokeRestart
[10:27:53.647]                       is.null <- base::is.null
[10:27:53.647]                       muffled <- FALSE
[10:27:53.647]                       if (inherits(cond, "message")) {
[10:27:53.647]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.647]                         if (muffled) 
[10:27:53.647]                           invokeRestart("muffleMessage")
[10:27:53.647]                       }
[10:27:53.647]                       else if (inherits(cond, "warning")) {
[10:27:53.647]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.647]                         if (muffled) 
[10:27:53.647]                           invokeRestart("muffleWarning")
[10:27:53.647]                       }
[10:27:53.647]                       else if (inherits(cond, "condition")) {
[10:27:53.647]                         if (!is.null(pattern)) {
[10:27:53.647]                           computeRestarts <- base::computeRestarts
[10:27:53.647]                           grepl <- base::grepl
[10:27:53.647]                           restarts <- computeRestarts(cond)
[10:27:53.647]                           for (restart in restarts) {
[10:27:53.647]                             name <- restart$name
[10:27:53.647]                             if (is.null(name)) 
[10:27:53.647]                               next
[10:27:53.647]                             if (!grepl(pattern, name)) 
[10:27:53.647]                               next
[10:27:53.647]                             invokeRestart(restart)
[10:27:53.647]                             muffled <- TRUE
[10:27:53.647]                             break
[10:27:53.647]                           }
[10:27:53.647]                         }
[10:27:53.647]                       }
[10:27:53.647]                       invisible(muffled)
[10:27:53.647]                     }
[10:27:53.647]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.647]                   }
[10:27:53.647]                 }
[10:27:53.647]                 else {
[10:27:53.647]                   if (TRUE) {
[10:27:53.647]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.647]                     {
[10:27:53.647]                       inherits <- base::inherits
[10:27:53.647]                       invokeRestart <- base::invokeRestart
[10:27:53.647]                       is.null <- base::is.null
[10:27:53.647]                       muffled <- FALSE
[10:27:53.647]                       if (inherits(cond, "message")) {
[10:27:53.647]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.647]                         if (muffled) 
[10:27:53.647]                           invokeRestart("muffleMessage")
[10:27:53.647]                       }
[10:27:53.647]                       else if (inherits(cond, "warning")) {
[10:27:53.647]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.647]                         if (muffled) 
[10:27:53.647]                           invokeRestart("muffleWarning")
[10:27:53.647]                       }
[10:27:53.647]                       else if (inherits(cond, "condition")) {
[10:27:53.647]                         if (!is.null(pattern)) {
[10:27:53.647]                           computeRestarts <- base::computeRestarts
[10:27:53.647]                           grepl <- base::grepl
[10:27:53.647]                           restarts <- computeRestarts(cond)
[10:27:53.647]                           for (restart in restarts) {
[10:27:53.647]                             name <- restart$name
[10:27:53.647]                             if (is.null(name)) 
[10:27:53.647]                               next
[10:27:53.647]                             if (!grepl(pattern, name)) 
[10:27:53.647]                               next
[10:27:53.647]                             invokeRestart(restart)
[10:27:53.647]                             muffled <- TRUE
[10:27:53.647]                             break
[10:27:53.647]                           }
[10:27:53.647]                         }
[10:27:53.647]                       }
[10:27:53.647]                       invisible(muffled)
[10:27:53.647]                     }
[10:27:53.647]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.647]                   }
[10:27:53.647]                 }
[10:27:53.647]             }
[10:27:53.647]         }))
[10:27:53.647]     }, error = function(ex) {
[10:27:53.647]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:53.647]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.647]                 ...future.rng), started = ...future.startTime, 
[10:27:53.647]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:53.647]             version = "1.8"), class = "FutureResult")
[10:27:53.647]     }, finally = {
[10:27:53.647]         if (!identical(...future.workdir, getwd())) 
[10:27:53.647]             setwd(...future.workdir)
[10:27:53.647]         {
[10:27:53.647]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:53.647]                 ...future.oldOptions$nwarnings <- NULL
[10:27:53.647]             }
[10:27:53.647]             base::options(...future.oldOptions)
[10:27:53.647]             if (.Platform$OS.type == "windows") {
[10:27:53.647]                 old_names <- names(...future.oldEnvVars)
[10:27:53.647]                 envs <- base::Sys.getenv()
[10:27:53.647]                 names <- names(envs)
[10:27:53.647]                 common <- intersect(names, old_names)
[10:27:53.647]                 added <- setdiff(names, old_names)
[10:27:53.647]                 removed <- setdiff(old_names, names)
[10:27:53.647]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:53.647]                   envs[common]]
[10:27:53.647]                 NAMES <- toupper(changed)
[10:27:53.647]                 args <- list()
[10:27:53.647]                 for (kk in seq_along(NAMES)) {
[10:27:53.647]                   name <- changed[[kk]]
[10:27:53.647]                   NAME <- NAMES[[kk]]
[10:27:53.647]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.647]                     next
[10:27:53.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.647]                 }
[10:27:53.647]                 NAMES <- toupper(added)
[10:27:53.647]                 for (kk in seq_along(NAMES)) {
[10:27:53.647]                   name <- added[[kk]]
[10:27:53.647]                   NAME <- NAMES[[kk]]
[10:27:53.647]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.647]                     next
[10:27:53.647]                   args[[name]] <- ""
[10:27:53.647]                 }
[10:27:53.647]                 NAMES <- toupper(removed)
[10:27:53.647]                 for (kk in seq_along(NAMES)) {
[10:27:53.647]                   name <- removed[[kk]]
[10:27:53.647]                   NAME <- NAMES[[kk]]
[10:27:53.647]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.647]                     next
[10:27:53.647]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.647]                 }
[10:27:53.647]                 if (length(args) > 0) 
[10:27:53.647]                   base::do.call(base::Sys.setenv, args = args)
[10:27:53.647]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:53.647]             }
[10:27:53.647]             else {
[10:27:53.647]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:53.647]             }
[10:27:53.647]             {
[10:27:53.647]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:53.647]                   0L) {
[10:27:53.647]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:53.647]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:53.647]                   base::options(opts)
[10:27:53.647]                 }
[10:27:53.647]                 {
[10:27:53.647]                   {
[10:27:53.647]                     NULL
[10:27:53.647]                     RNGkind("Mersenne-Twister")
[10:27:53.647]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:53.647]                       inherits = FALSE)
[10:27:53.647]                   }
[10:27:53.647]                   options(future.plan = NULL)
[10:27:53.647]                   if (is.na(NA_character_)) 
[10:27:53.647]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.647]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:53.647]                   future::plan(list(function (..., envir = parent.frame()) 
[10:27:53.647]                   {
[10:27:53.647]                     future <- SequentialFuture(..., envir = envir)
[10:27:53.647]                     if (!future$lazy) 
[10:27:53.647]                       future <- run(future)
[10:27:53.647]                     invisible(future)
[10:27:53.647]                   }), .cleanup = FALSE, .init = FALSE)
[10:27:53.647]                 }
[10:27:53.647]             }
[10:27:53.647]         }
[10:27:53.647]     })
[10:27:53.647]     if (TRUE) {
[10:27:53.647]         base::sink(type = "output", split = FALSE)
[10:27:53.647]         if (TRUE) {
[10:27:53.647]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:53.647]         }
[10:27:53.647]         else {
[10:27:53.647]             ...future.result["stdout"] <- base::list(NULL)
[10:27:53.647]         }
[10:27:53.647]         base::close(...future.stdout)
[10:27:53.647]         ...future.stdout <- NULL
[10:27:53.647]     }
[10:27:53.647]     ...future.result$conditions <- ...future.conditions
[10:27:53.647]     ...future.result$finished <- base::Sys.time()
[10:27:53.647]     ...future.result
[10:27:53.647] }
[10:27:53.649] plan(): Setting new future strategy stack:
[10:27:53.649] List of future strategies:
[10:27:53.649] 1. sequential:
[10:27:53.649]    - args: function (..., envir = parent.frame())
[10:27:53.649]    - tweaked: FALSE
[10:27:53.649]    - call: NULL
[10:27:53.649] plan(): nbrOfWorkers() = 1
[10:27:53.651] plan(): Setting new future strategy stack:
[10:27:53.651] List of future strategies:
[10:27:53.651] 1. sequential:
[10:27:53.651]    - args: function (..., envir = parent.frame())
[10:27:53.651]    - tweaked: FALSE
[10:27:53.651]    - call: plan(sequential)
[10:27:53.651] plan(): nbrOfWorkers() = 1
[10:27:53.651] SequentialFuture started (and completed)
[10:27:53.651] - Launch lazy future ... done
[10:27:53.652] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> plan(sequential, abc = FALSE)
Warning: Detected 1 unknown future arguments: ‘abc’
[10:27:53.652] plan(): Setting new future strategy stack:
[10:27:53.652] List of future strategies:
[10:27:53.652] 1. sequential:
[10:27:53.652]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.652]    - tweaked: TRUE
[10:27:53.652]    - call: plan(sequential, abc = FALSE)
[10:27:53.653] plan(): nbrOfWorkers() = 1
> 
> a <- 0
> x %<-% { a <- 1; a }
[10:27:53.653] getGlobalsAndPackages() ...
[10:27:53.653] Searching for globals...
[10:27:53.654] - globals found: [2] ‘{’, ‘<-’
[10:27:53.654] Searching for globals ... DONE
[10:27:53.654] Resolving globals: FALSE
[10:27:53.655] 
[10:27:53.655] 
[10:27:53.655] getGlobalsAndPackages() ... DONE
[10:27:53.655] run() for ‘Future’ ...
[10:27:53.655] - state: ‘created’
[10:27:53.655] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:27:53.656] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:27:53.656] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:27:53.656]   - Field: ‘label’
[10:27:53.656]   - Field: ‘local’
[10:27:53.656]   - Field: ‘owner’
[10:27:53.656]   - Field: ‘envir’
[10:27:53.656]   - Field: ‘packages’
[10:27:53.656]   - Field: ‘gc’
[10:27:53.656]   - Field: ‘conditions’
[10:27:53.656]   - Field: ‘expr’
[10:27:53.656]   - Field: ‘uuid’
[10:27:53.657]   - Field: ‘seed’
[10:27:53.657]   - Field: ‘version’
[10:27:53.657]   - Field: ‘result’
[10:27:53.657]   - Field: ‘asynchronous’
[10:27:53.657]   - Field: ‘calls’
[10:27:53.657]   - Field: ‘abc’
[10:27:53.657]   - Field: ‘globals’
[10:27:53.657]   - Field: ‘stdout’
[10:27:53.657]   - Field: ‘earlySignal’
[10:27:53.657]   - Field: ‘lazy’
[10:27:53.658]   - Field: ‘state’
[10:27:53.658] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:27:53.658] - Launch lazy future ...
[10:27:53.658] Packages needed by the future expression (n = 0): <none>
[10:27:53.658] Packages needed by future strategies (n = 0): <none>
[10:27:53.658] {
[10:27:53.658]     {
[10:27:53.658]         {
[10:27:53.658]             ...future.startTime <- base::Sys.time()
[10:27:53.658]             {
[10:27:53.658]                 {
[10:27:53.658]                   {
[10:27:53.658]                     base::local({
[10:27:53.658]                       has_future <- base::requireNamespace("future", 
[10:27:53.658]                         quietly = TRUE)
[10:27:53.658]                       if (has_future) {
[10:27:53.658]                         ns <- base::getNamespace("future")
[10:27:53.658]                         version <- ns[[".package"]][["version"]]
[10:27:53.658]                         if (is.null(version)) 
[10:27:53.658]                           version <- utils::packageVersion("future")
[10:27:53.658]                       }
[10:27:53.658]                       else {
[10:27:53.658]                         version <- NULL
[10:27:53.658]                       }
[10:27:53.658]                       if (!has_future || version < "1.8.0") {
[10:27:53.658]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:53.658]                           "", base::R.version$version.string), 
[10:27:53.658]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:53.658]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:53.658]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:53.658]                             "release", "version")], collapse = " "), 
[10:27:53.658]                           hostname = base::Sys.info()[["nodename"]])
[10:27:53.658]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:53.658]                           info)
[10:27:53.658]                         info <- base::paste(info, collapse = "; ")
[10:27:53.658]                         if (!has_future) {
[10:27:53.658]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:53.658]                             info)
[10:27:53.658]                         }
[10:27:53.658]                         else {
[10:27:53.658]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:53.658]                             info, version)
[10:27:53.658]                         }
[10:27:53.658]                         base::stop(msg)
[10:27:53.658]                       }
[10:27:53.658]                     })
[10:27:53.658]                   }
[10:27:53.658]                   options(future.plan = NULL)
[10:27:53.658]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.658]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:53.658]                 }
[10:27:53.658]                 ...future.workdir <- getwd()
[10:27:53.658]             }
[10:27:53.658]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:53.658]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:53.658]         }
[10:27:53.658]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:53.658]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:53.658]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:53.658]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:53.658]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:53.658]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:53.658]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:53.658]             base::names(...future.oldOptions))
[10:27:53.658]     }
[10:27:53.658]     if (FALSE) {
[10:27:53.658]     }
[10:27:53.658]     else {
[10:27:53.658]         if (TRUE) {
[10:27:53.658]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:53.658]                 open = "w")
[10:27:53.658]         }
[10:27:53.658]         else {
[10:27:53.658]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:53.658]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:53.658]         }
[10:27:53.658]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:53.658]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:53.658]             base::sink(type = "output", split = FALSE)
[10:27:53.658]             base::close(...future.stdout)
[10:27:53.658]         }, add = TRUE)
[10:27:53.658]     }
[10:27:53.658]     ...future.frame <- base::sys.nframe()
[10:27:53.658]     ...future.conditions <- base::list()
[10:27:53.658]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:53.658]     if (FALSE) {
[10:27:53.658]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:53.658]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:53.658]     }
[10:27:53.658]     ...future.result <- base::tryCatch({
[10:27:53.658]         base::withCallingHandlers({
[10:27:53.658]             ...future.value <- base::withVisible(base::local({
[10:27:53.658]                 a <- 1
[10:27:53.658]                 a
[10:27:53.658]             }))
[10:27:53.658]             future::FutureResult(value = ...future.value$value, 
[10:27:53.658]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.658]                   ...future.rng), globalenv = if (FALSE) 
[10:27:53.658]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:53.658]                     ...future.globalenv.names))
[10:27:53.658]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:53.658]         }, condition = base::local({
[10:27:53.658]             c <- base::c
[10:27:53.658]             inherits <- base::inherits
[10:27:53.658]             invokeRestart <- base::invokeRestart
[10:27:53.658]             length <- base::length
[10:27:53.658]             list <- base::list
[10:27:53.658]             seq.int <- base::seq.int
[10:27:53.658]             signalCondition <- base::signalCondition
[10:27:53.658]             sys.calls <- base::sys.calls
[10:27:53.658]             `[[` <- base::`[[`
[10:27:53.658]             `+` <- base::`+`
[10:27:53.658]             `<<-` <- base::`<<-`
[10:27:53.658]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:53.658]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:53.658]                   3L)]
[10:27:53.658]             }
[10:27:53.658]             function(cond) {
[10:27:53.658]                 is_error <- inherits(cond, "error")
[10:27:53.658]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:53.658]                   NULL)
[10:27:53.658]                 if (is_error) {
[10:27:53.658]                   sessionInformation <- function() {
[10:27:53.658]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:53.658]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:53.658]                       search = base::search(), system = base::Sys.info())
[10:27:53.658]                   }
[10:27:53.658]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.658]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:53.658]                     cond$call), session = sessionInformation(), 
[10:27:53.658]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:53.658]                   signalCondition(cond)
[10:27:53.658]                 }
[10:27:53.658]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:53.658]                 "immediateCondition"))) {
[10:27:53.658]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:53.658]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.658]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:53.658]                   if (TRUE && !signal) {
[10:27:53.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.658]                     {
[10:27:53.658]                       inherits <- base::inherits
[10:27:53.658]                       invokeRestart <- base::invokeRestart
[10:27:53.658]                       is.null <- base::is.null
[10:27:53.658]                       muffled <- FALSE
[10:27:53.658]                       if (inherits(cond, "message")) {
[10:27:53.658]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.658]                         if (muffled) 
[10:27:53.658]                           invokeRestart("muffleMessage")
[10:27:53.658]                       }
[10:27:53.658]                       else if (inherits(cond, "warning")) {
[10:27:53.658]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.658]                         if (muffled) 
[10:27:53.658]                           invokeRestart("muffleWarning")
[10:27:53.658]                       }
[10:27:53.658]                       else if (inherits(cond, "condition")) {
[10:27:53.658]                         if (!is.null(pattern)) {
[10:27:53.658]                           computeRestarts <- base::computeRestarts
[10:27:53.658]                           grepl <- base::grepl
[10:27:53.658]                           restarts <- computeRestarts(cond)
[10:27:53.658]                           for (restart in restarts) {
[10:27:53.658]                             name <- restart$name
[10:27:53.658]                             if (is.null(name)) 
[10:27:53.658]                               next
[10:27:53.658]                             if (!grepl(pattern, name)) 
[10:27:53.658]                               next
[10:27:53.658]                             invokeRestart(restart)
[10:27:53.658]                             muffled <- TRUE
[10:27:53.658]                             break
[10:27:53.658]                           }
[10:27:53.658]                         }
[10:27:53.658]                       }
[10:27:53.658]                       invisible(muffled)
[10:27:53.658]                     }
[10:27:53.658]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.658]                   }
[10:27:53.658]                 }
[10:27:53.658]                 else {
[10:27:53.658]                   if (TRUE) {
[10:27:53.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.658]                     {
[10:27:53.658]                       inherits <- base::inherits
[10:27:53.658]                       invokeRestart <- base::invokeRestart
[10:27:53.658]                       is.null <- base::is.null
[10:27:53.658]                       muffled <- FALSE
[10:27:53.658]                       if (inherits(cond, "message")) {
[10:27:53.658]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.658]                         if (muffled) 
[10:27:53.658]                           invokeRestart("muffleMessage")
[10:27:53.658]                       }
[10:27:53.658]                       else if (inherits(cond, "warning")) {
[10:27:53.658]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.658]                         if (muffled) 
[10:27:53.658]                           invokeRestart("muffleWarning")
[10:27:53.658]                       }
[10:27:53.658]                       else if (inherits(cond, "condition")) {
[10:27:53.658]                         if (!is.null(pattern)) {
[10:27:53.658]                           computeRestarts <- base::computeRestarts
[10:27:53.658]                           grepl <- base::grepl
[10:27:53.658]                           restarts <- computeRestarts(cond)
[10:27:53.658]                           for (restart in restarts) {
[10:27:53.658]                             name <- restart$name
[10:27:53.658]                             if (is.null(name)) 
[10:27:53.658]                               next
[10:27:53.658]                             if (!grepl(pattern, name)) 
[10:27:53.658]                               next
[10:27:53.658]                             invokeRestart(restart)
[10:27:53.658]                             muffled <- TRUE
[10:27:53.658]                             break
[10:27:53.658]                           }
[10:27:53.658]                         }
[10:27:53.658]                       }
[10:27:53.658]                       invisible(muffled)
[10:27:53.658]                     }
[10:27:53.658]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.658]                   }
[10:27:53.658]                 }
[10:27:53.658]             }
[10:27:53.658]         }))
[10:27:53.658]     }, error = function(ex) {
[10:27:53.658]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:53.658]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.658]                 ...future.rng), started = ...future.startTime, 
[10:27:53.658]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:53.658]             version = "1.8"), class = "FutureResult")
[10:27:53.658]     }, finally = {
[10:27:53.658]         if (!identical(...future.workdir, getwd())) 
[10:27:53.658]             setwd(...future.workdir)
[10:27:53.658]         {
[10:27:53.658]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:53.658]                 ...future.oldOptions$nwarnings <- NULL
[10:27:53.658]             }
[10:27:53.658]             base::options(...future.oldOptions)
[10:27:53.658]             if (.Platform$OS.type == "windows") {
[10:27:53.658]                 old_names <- names(...future.oldEnvVars)
[10:27:53.658]                 envs <- base::Sys.getenv()
[10:27:53.658]                 names <- names(envs)
[10:27:53.658]                 common <- intersect(names, old_names)
[10:27:53.658]                 added <- setdiff(names, old_names)
[10:27:53.658]                 removed <- setdiff(old_names, names)
[10:27:53.658]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:53.658]                   envs[common]]
[10:27:53.658]                 NAMES <- toupper(changed)
[10:27:53.658]                 args <- list()
[10:27:53.658]                 for (kk in seq_along(NAMES)) {
[10:27:53.658]                   name <- changed[[kk]]
[10:27:53.658]                   NAME <- NAMES[[kk]]
[10:27:53.658]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.658]                     next
[10:27:53.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.658]                 }
[10:27:53.658]                 NAMES <- toupper(added)
[10:27:53.658]                 for (kk in seq_along(NAMES)) {
[10:27:53.658]                   name <- added[[kk]]
[10:27:53.658]                   NAME <- NAMES[[kk]]
[10:27:53.658]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.658]                     next
[10:27:53.658]                   args[[name]] <- ""
[10:27:53.658]                 }
[10:27:53.658]                 NAMES <- toupper(removed)
[10:27:53.658]                 for (kk in seq_along(NAMES)) {
[10:27:53.658]                   name <- removed[[kk]]
[10:27:53.658]                   NAME <- NAMES[[kk]]
[10:27:53.658]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.658]                     next
[10:27:53.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.658]                 }
[10:27:53.658]                 if (length(args) > 0) 
[10:27:53.658]                   base::do.call(base::Sys.setenv, args = args)
[10:27:53.658]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:53.658]             }
[10:27:53.658]             else {
[10:27:53.658]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:53.658]             }
[10:27:53.658]             {
[10:27:53.658]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:53.658]                   0L) {
[10:27:53.658]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:53.658]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:53.658]                   base::options(opts)
[10:27:53.658]                 }
[10:27:53.658]                 {
[10:27:53.658]                   {
[10:27:53.658]                     NULL
[10:27:53.658]                     RNGkind("Mersenne-Twister")
[10:27:53.658]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:53.658]                       inherits = FALSE)
[10:27:53.658]                   }
[10:27:53.658]                   options(future.plan = NULL)
[10:27:53.658]                   if (is.na(NA_character_)) 
[10:27:53.658]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.658]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:53.658]                   future::plan(list(function (..., abc = FALSE, 
[10:27:53.658]                     envir = parent.frame()) 
[10:27:53.658]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[10:27:53.658]                     .init = FALSE)
[10:27:53.658]                 }
[10:27:53.658]             }
[10:27:53.658]         }
[10:27:53.658]     })
[10:27:53.658]     if (TRUE) {
[10:27:53.658]         base::sink(type = "output", split = FALSE)
[10:27:53.658]         if (TRUE) {
[10:27:53.658]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:53.658]         }
[10:27:53.658]         else {
[10:27:53.658]             ...future.result["stdout"] <- base::list(NULL)
[10:27:53.658]         }
[10:27:53.658]         base::close(...future.stdout)
[10:27:53.658]         ...future.stdout <- NULL
[10:27:53.658]     }
[10:27:53.658]     ...future.result$conditions <- ...future.conditions
[10:27:53.658]     ...future.result$finished <- base::Sys.time()
[10:27:53.658]     ...future.result
[10:27:53.658] }
[10:27:53.660] plan(): Setting new future strategy stack:
[10:27:53.660] List of future strategies:
[10:27:53.660] 1. sequential:
[10:27:53.660]    - args: function (..., envir = parent.frame())
[10:27:53.660]    - tweaked: FALSE
[10:27:53.660]    - call: NULL
[10:27:53.661] plan(): nbrOfWorkers() = 1
[10:27:53.661] plan(): Setting new future strategy stack:
[10:27:53.661] List of future strategies:
[10:27:53.661] 1. sequential:
[10:27:53.661]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.661]    - tweaked: TRUE
[10:27:53.661]    - call: plan(sequential, abc = FALSE)
[10:27:53.662] plan(): nbrOfWorkers() = 1
[10:27:53.662] SequentialFuture started (and completed)
[10:27:53.662] - Launch lazy future ... done
[10:27:53.662] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> x %<-% { a <- 2; a } %tweak% list(abc = TRUE)
[10:27:53.663] plan(): Setting new future strategy stack:
[10:27:53.663] List of future strategies:
[10:27:53.663] 1. sequential:
[10:27:53.663]    - args: function (..., abc = TRUE, envir = parent.frame())
[10:27:53.663]    - tweaked: TRUE
[10:27:53.663]    - call: plan(sequential, abc = FALSE)
[10:27:53.663] plan(): nbrOfWorkers() = 1
[10:27:53.663] getGlobalsAndPackages() ...
[10:27:53.664] Searching for globals...
[10:27:53.665] - globals found: [2] ‘{’, ‘<-’
[10:27:53.665] Searching for globals ... DONE
[10:27:53.665] Resolving globals: FALSE
[10:27:53.665] 
[10:27:53.665] 
[10:27:53.665] getGlobalsAndPackages() ... DONE
[10:27:53.666] run() for ‘Future’ ...
[10:27:53.666] - state: ‘created’
[10:27:53.666] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘tweaked’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:27:53.666] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:27:53.666] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:27:53.666]   - Field: ‘label’
[10:27:53.666]   - Field: ‘local’
[10:27:53.666]   - Field: ‘owner’
[10:27:53.667]   - Field: ‘envir’
[10:27:53.667]   - Field: ‘packages’
[10:27:53.667]   - Field: ‘gc’
[10:27:53.667]   - Field: ‘conditions’
[10:27:53.667]   - Field: ‘expr’
[10:27:53.667]   - Field: ‘uuid’
[10:27:53.667]   - Field: ‘seed’
[10:27:53.667]   - Field: ‘version’
[10:27:53.667]   - Field: ‘result’
[10:27:53.667]   - Field: ‘asynchronous’
[10:27:53.667]   - Field: ‘calls’
[10:27:53.667]   - Field: ‘abc’
[10:27:53.668]   - Field: ‘globals’
[10:27:53.668]   - Field: ‘stdout’
[10:27:53.668]   - Field: ‘earlySignal’
[10:27:53.668]   - Field: ‘lazy’
[10:27:53.668]   - Field: ‘state’
[10:27:53.668] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:27:53.668] - Launch lazy future ...
[10:27:53.668] Packages needed by the future expression (n = 0): <none>
[10:27:53.668] Packages needed by future strategies (n = 0): <none>
[10:27:53.669] {
[10:27:53.669]     {
[10:27:53.669]         {
[10:27:53.669]             ...future.startTime <- base::Sys.time()
[10:27:53.669]             {
[10:27:53.669]                 {
[10:27:53.669]                   {
[10:27:53.669]                     base::local({
[10:27:53.669]                       has_future <- base::requireNamespace("future", 
[10:27:53.669]                         quietly = TRUE)
[10:27:53.669]                       if (has_future) {
[10:27:53.669]                         ns <- base::getNamespace("future")
[10:27:53.669]                         version <- ns[[".package"]][["version"]]
[10:27:53.669]                         if (is.null(version)) 
[10:27:53.669]                           version <- utils::packageVersion("future")
[10:27:53.669]                       }
[10:27:53.669]                       else {
[10:27:53.669]                         version <- NULL
[10:27:53.669]                       }
[10:27:53.669]                       if (!has_future || version < "1.8.0") {
[10:27:53.669]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:53.669]                           "", base::R.version$version.string), 
[10:27:53.669]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:53.669]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:53.669]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:53.669]                             "release", "version")], collapse = " "), 
[10:27:53.669]                           hostname = base::Sys.info()[["nodename"]])
[10:27:53.669]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:53.669]                           info)
[10:27:53.669]                         info <- base::paste(info, collapse = "; ")
[10:27:53.669]                         if (!has_future) {
[10:27:53.669]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:53.669]                             info)
[10:27:53.669]                         }
[10:27:53.669]                         else {
[10:27:53.669]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:53.669]                             info, version)
[10:27:53.669]                         }
[10:27:53.669]                         base::stop(msg)
[10:27:53.669]                       }
[10:27:53.669]                     })
[10:27:53.669]                   }
[10:27:53.669]                   options(future.plan = NULL)
[10:27:53.669]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.669]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:27:53.669]                 }
[10:27:53.669]                 ...future.workdir <- getwd()
[10:27:53.669]             }
[10:27:53.669]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:53.669]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:53.669]         }
[10:27:53.669]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:53.669]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:53.669]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:53.669]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:53.669]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:53.669]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:53.669]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:53.669]             base::names(...future.oldOptions))
[10:27:53.669]     }
[10:27:53.669]     if (FALSE) {
[10:27:53.669]     }
[10:27:53.669]     else {
[10:27:53.669]         if (TRUE) {
[10:27:53.669]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:53.669]                 open = "w")
[10:27:53.669]         }
[10:27:53.669]         else {
[10:27:53.669]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:53.669]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:53.669]         }
[10:27:53.669]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:53.669]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:53.669]             base::sink(type = "output", split = FALSE)
[10:27:53.669]             base::close(...future.stdout)
[10:27:53.669]         }, add = TRUE)
[10:27:53.669]     }
[10:27:53.669]     ...future.frame <- base::sys.nframe()
[10:27:53.669]     ...future.conditions <- base::list()
[10:27:53.669]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:53.669]     if (FALSE) {
[10:27:53.669]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:53.669]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:53.669]     }
[10:27:53.669]     ...future.result <- base::tryCatch({
[10:27:53.669]         base::withCallingHandlers({
[10:27:53.669]             ...future.value <- base::withVisible(base::local({
[10:27:53.669]                 a <- 2
[10:27:53.669]                 a
[10:27:53.669]             }))
[10:27:53.669]             future::FutureResult(value = ...future.value$value, 
[10:27:53.669]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.669]                   ...future.rng), globalenv = if (FALSE) 
[10:27:53.669]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:53.669]                     ...future.globalenv.names))
[10:27:53.669]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:53.669]         }, condition = base::local({
[10:27:53.669]             c <- base::c
[10:27:53.669]             inherits <- base::inherits
[10:27:53.669]             invokeRestart <- base::invokeRestart
[10:27:53.669]             length <- base::length
[10:27:53.669]             list <- base::list
[10:27:53.669]             seq.int <- base::seq.int
[10:27:53.669]             signalCondition <- base::signalCondition
[10:27:53.669]             sys.calls <- base::sys.calls
[10:27:53.669]             `[[` <- base::`[[`
[10:27:53.669]             `+` <- base::`+`
[10:27:53.669]             `<<-` <- base::`<<-`
[10:27:53.669]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:53.669]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:53.669]                   3L)]
[10:27:53.669]             }
[10:27:53.669]             function(cond) {
[10:27:53.669]                 is_error <- inherits(cond, "error")
[10:27:53.669]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:53.669]                   NULL)
[10:27:53.669]                 if (is_error) {
[10:27:53.669]                   sessionInformation <- function() {
[10:27:53.669]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:53.669]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:53.669]                       search = base::search(), system = base::Sys.info())
[10:27:53.669]                   }
[10:27:53.669]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.669]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:53.669]                     cond$call), session = sessionInformation(), 
[10:27:53.669]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:53.669]                   signalCondition(cond)
[10:27:53.669]                 }
[10:27:53.669]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:53.669]                 "immediateCondition"))) {
[10:27:53.669]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:53.669]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.669]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:53.669]                   if (TRUE && !signal) {
[10:27:53.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.669]                     {
[10:27:53.669]                       inherits <- base::inherits
[10:27:53.669]                       invokeRestart <- base::invokeRestart
[10:27:53.669]                       is.null <- base::is.null
[10:27:53.669]                       muffled <- FALSE
[10:27:53.669]                       if (inherits(cond, "message")) {
[10:27:53.669]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.669]                         if (muffled) 
[10:27:53.669]                           invokeRestart("muffleMessage")
[10:27:53.669]                       }
[10:27:53.669]                       else if (inherits(cond, "warning")) {
[10:27:53.669]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.669]                         if (muffled) 
[10:27:53.669]                           invokeRestart("muffleWarning")
[10:27:53.669]                       }
[10:27:53.669]                       else if (inherits(cond, "condition")) {
[10:27:53.669]                         if (!is.null(pattern)) {
[10:27:53.669]                           computeRestarts <- base::computeRestarts
[10:27:53.669]                           grepl <- base::grepl
[10:27:53.669]                           restarts <- computeRestarts(cond)
[10:27:53.669]                           for (restart in restarts) {
[10:27:53.669]                             name <- restart$name
[10:27:53.669]                             if (is.null(name)) 
[10:27:53.669]                               next
[10:27:53.669]                             if (!grepl(pattern, name)) 
[10:27:53.669]                               next
[10:27:53.669]                             invokeRestart(restart)
[10:27:53.669]                             muffled <- TRUE
[10:27:53.669]                             break
[10:27:53.669]                           }
[10:27:53.669]                         }
[10:27:53.669]                       }
[10:27:53.669]                       invisible(muffled)
[10:27:53.669]                     }
[10:27:53.669]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.669]                   }
[10:27:53.669]                 }
[10:27:53.669]                 else {
[10:27:53.669]                   if (TRUE) {
[10:27:53.669]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.669]                     {
[10:27:53.669]                       inherits <- base::inherits
[10:27:53.669]                       invokeRestart <- base::invokeRestart
[10:27:53.669]                       is.null <- base::is.null
[10:27:53.669]                       muffled <- FALSE
[10:27:53.669]                       if (inherits(cond, "message")) {
[10:27:53.669]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.669]                         if (muffled) 
[10:27:53.669]                           invokeRestart("muffleMessage")
[10:27:53.669]                       }
[10:27:53.669]                       else if (inherits(cond, "warning")) {
[10:27:53.669]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.669]                         if (muffled) 
[10:27:53.669]                           invokeRestart("muffleWarning")
[10:27:53.669]                       }
[10:27:53.669]                       else if (inherits(cond, "condition")) {
[10:27:53.669]                         if (!is.null(pattern)) {
[10:27:53.669]                           computeRestarts <- base::computeRestarts
[10:27:53.669]                           grepl <- base::grepl
[10:27:53.669]                           restarts <- computeRestarts(cond)
[10:27:53.669]                           for (restart in restarts) {
[10:27:53.669]                             name <- restart$name
[10:27:53.669]                             if (is.null(name)) 
[10:27:53.669]                               next
[10:27:53.669]                             if (!grepl(pattern, name)) 
[10:27:53.669]                               next
[10:27:53.669]                             invokeRestart(restart)
[10:27:53.669]                             muffled <- TRUE
[10:27:53.669]                             break
[10:27:53.669]                           }
[10:27:53.669]                         }
[10:27:53.669]                       }
[10:27:53.669]                       invisible(muffled)
[10:27:53.669]                     }
[10:27:53.669]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.669]                   }
[10:27:53.669]                 }
[10:27:53.669]             }
[10:27:53.669]         }))
[10:27:53.669]     }, error = function(ex) {
[10:27:53.669]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:53.669]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.669]                 ...future.rng), started = ...future.startTime, 
[10:27:53.669]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:53.669]             version = "1.8"), class = "FutureResult")
[10:27:53.669]     }, finally = {
[10:27:53.669]         if (!identical(...future.workdir, getwd())) 
[10:27:53.669]             setwd(...future.workdir)
[10:27:53.669]         {
[10:27:53.669]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:53.669]                 ...future.oldOptions$nwarnings <- NULL
[10:27:53.669]             }
[10:27:53.669]             base::options(...future.oldOptions)
[10:27:53.669]             if (.Platform$OS.type == "windows") {
[10:27:53.669]                 old_names <- names(...future.oldEnvVars)
[10:27:53.669]                 envs <- base::Sys.getenv()
[10:27:53.669]                 names <- names(envs)
[10:27:53.669]                 common <- intersect(names, old_names)
[10:27:53.669]                 added <- setdiff(names, old_names)
[10:27:53.669]                 removed <- setdiff(old_names, names)
[10:27:53.669]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:53.669]                   envs[common]]
[10:27:53.669]                 NAMES <- toupper(changed)
[10:27:53.669]                 args <- list()
[10:27:53.669]                 for (kk in seq_along(NAMES)) {
[10:27:53.669]                   name <- changed[[kk]]
[10:27:53.669]                   NAME <- NAMES[[kk]]
[10:27:53.669]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.669]                     next
[10:27:53.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.669]                 }
[10:27:53.669]                 NAMES <- toupper(added)
[10:27:53.669]                 for (kk in seq_along(NAMES)) {
[10:27:53.669]                   name <- added[[kk]]
[10:27:53.669]                   NAME <- NAMES[[kk]]
[10:27:53.669]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.669]                     next
[10:27:53.669]                   args[[name]] <- ""
[10:27:53.669]                 }
[10:27:53.669]                 NAMES <- toupper(removed)
[10:27:53.669]                 for (kk in seq_along(NAMES)) {
[10:27:53.669]                   name <- removed[[kk]]
[10:27:53.669]                   NAME <- NAMES[[kk]]
[10:27:53.669]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.669]                     next
[10:27:53.669]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.669]                 }
[10:27:53.669]                 if (length(args) > 0) 
[10:27:53.669]                   base::do.call(base::Sys.setenv, args = args)
[10:27:53.669]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:53.669]             }
[10:27:53.669]             else {
[10:27:53.669]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:53.669]             }
[10:27:53.669]             {
[10:27:53.669]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:53.669]                   0L) {
[10:27:53.669]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:53.669]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:53.669]                   base::options(opts)
[10:27:53.669]                 }
[10:27:53.669]                 {
[10:27:53.669]                   {
[10:27:53.669]                     NULL
[10:27:53.669]                     RNGkind("Mersenne-Twister")
[10:27:53.669]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:53.669]                       inherits = FALSE)
[10:27:53.669]                   }
[10:27:53.669]                   options(future.plan = NULL)
[10:27:53.669]                   if (is.na(NA_character_)) 
[10:27:53.669]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.669]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:53.669]                   future::plan(list(function (..., abc = TRUE, 
[10:27:53.669]                     envir = parent.frame()) 
[10:27:53.669]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[10:27:53.669]                     .init = FALSE)
[10:27:53.669]                 }
[10:27:53.669]             }
[10:27:53.669]         }
[10:27:53.669]     })
[10:27:53.669]     if (TRUE) {
[10:27:53.669]         base::sink(type = "output", split = FALSE)
[10:27:53.669]         if (TRUE) {
[10:27:53.669]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:53.669]         }
[10:27:53.669]         else {
[10:27:53.669]             ...future.result["stdout"] <- base::list(NULL)
[10:27:53.669]         }
[10:27:53.669]         base::close(...future.stdout)
[10:27:53.669]         ...future.stdout <- NULL
[10:27:53.669]     }
[10:27:53.669]     ...future.result$conditions <- ...future.conditions
[10:27:53.669]     ...future.result$finished <- base::Sys.time()
[10:27:53.669]     ...future.result
[10:27:53.669] }
[10:27:53.671] plan(): Setting new future strategy stack:
[10:27:53.671] List of future strategies:
[10:27:53.671] 1. sequential:
[10:27:53.671]    - args: function (..., envir = parent.frame())
[10:27:53.671]    - tweaked: FALSE
[10:27:53.671]    - call: NULL
[10:27:53.671] plan(): nbrOfWorkers() = 1
[10:27:53.672] plan(): Setting new future strategy stack:
[10:27:53.672] List of future strategies:
[10:27:53.672] 1. sequential:
[10:27:53.672]    - args: function (..., abc = TRUE, envir = parent.frame())
[10:27:53.672]    - tweaked: TRUE
[10:27:53.672]    - call: plan(sequential, abc = FALSE)
[10:27:53.672] plan(): nbrOfWorkers() = 1
[10:27:53.672] SequentialFuture started (and completed)
[10:27:53.672] - Launch lazy future ... done
[10:27:53.673] run() for ‘SequentialFuture’ ... done
[10:27:53.673] plan(): Setting new future strategy stack:
[10:27:53.673] List of future strategies:
[10:27:53.673] 1. sequential:
[10:27:53.673]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.673]    - tweaked: TRUE
[10:27:53.673]    - call: plan(sequential, abc = FALSE)
[10:27:53.673] plan(): nbrOfWorkers() = 1
> print(x)
[1] 2
> stopifnot(a == 0, x == 2)
> 
> 
> # Preserve nested futures
> plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
Warning: Detected 1 unknown future arguments: ‘abc’
[10:27:53.674] plan(): Setting new future strategy stack:
[10:27:53.674] List of future strategies:
[10:27:53.674] 1. sequential:
[10:27:53.674]    - args: function (..., envir = parent.frame())
[10:27:53.674]    - tweaked: FALSE
[10:27:53.674]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[10:27:53.674] 2. sequential:
[10:27:53.674]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.674]    - tweaked: TRUE
[10:27:53.674]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[10:27:53.674] plan(): nbrOfWorkers() = 1
> a <- 0
> 
> x %<-% {
+   stopifnot(identical(names(plan("list")), "B"))
+   a <- 1
+   a
+ }
[10:27:53.675] getGlobalsAndPackages() ...
[10:27:53.675] Searching for globals...
[10:27:53.679] - globals found: [6] ‘{’, ‘stopifnot’, ‘identical’, ‘names’, ‘plan’, ‘<-’
[10:27:53.679] Searching for globals ... DONE
[10:27:53.679] Resolving globals: FALSE
[10:27:53.680] The total size of the 1 globals is 403.23 KiB (412912 bytes)
[10:27:53.680] The total size of the 1 globals exported for future expression (‘{; stopifnot(identical(names(plan("list")), "B")); a <- 1; a; }’) is 403.23 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘plan’ (403.23 KiB of class ‘function’)
[10:27:53.680] - globals: [1] ‘plan’
[10:27:53.680] 
[10:27:53.681] getGlobalsAndPackages() ... DONE
[10:27:53.681] run() for ‘Future’ ...
[10:27:53.681] - state: ‘created’
[10:27:53.681] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:27:53.681] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:27:53.681] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:27:53.682]   - Field: ‘label’
[10:27:53.682]   - Field: ‘local’
[10:27:53.682]   - Field: ‘owner’
[10:27:53.682]   - Field: ‘envir’
[10:27:53.682]   - Field: ‘packages’
[10:27:53.682]   - Field: ‘gc’
[10:27:53.682]   - Field: ‘conditions’
[10:27:53.682]   - Field: ‘expr’
[10:27:53.682]   - Field: ‘uuid’
[10:27:53.682]   - Field: ‘seed’
[10:27:53.682]   - Field: ‘version’
[10:27:53.683]   - Field: ‘result’
[10:27:53.683]   - Field: ‘asynchronous’
[10:27:53.683]   - Field: ‘calls’
[10:27:53.683]   - Field: ‘globals’
[10:27:53.683]   - Field: ‘stdout’
[10:27:53.683]   - Field: ‘earlySignal’
[10:27:53.683]   - Field: ‘lazy’
[10:27:53.683]   - Field: ‘state’
[10:27:53.683] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:27:53.683] - Launch lazy future ...
[10:27:53.684] Packages needed by the future expression (n = 0): <none>
[10:27:53.684] Packages needed by future strategies (n = 0): 
[10:27:53.684] {
[10:27:53.684]     {
[10:27:53.684]         {
[10:27:53.684]             ...future.startTime <- base::Sys.time()
[10:27:53.684]             {
[10:27:53.684]                 {
[10:27:53.684]                   {
[10:27:53.684]                     base::local({
[10:27:53.684]                       has_future <- base::requireNamespace("future", 
[10:27:53.684]                         quietly = TRUE)
[10:27:53.684]                       if (has_future) {
[10:27:53.684]                         ns <- base::getNamespace("future")
[10:27:53.684]                         version <- ns[[".package"]][["version"]]
[10:27:53.684]                         if (is.null(version)) 
[10:27:53.684]                           version <- utils::packageVersion("future")
[10:27:53.684]                       }
[10:27:53.684]                       else {
[10:27:53.684]                         version <- NULL
[10:27:53.684]                       }
[10:27:53.684]                       if (!has_future || version < "1.8.0") {
[10:27:53.684]                         info <- base::c(r_version = base::gsub("R version ", 
[10:27:53.684]                           "", base::R.version$version.string), 
[10:27:53.684]                           platform = base::sprintf("%s (%s-bit)", 
[10:27:53.684]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:27:53.684]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:27:53.684]                             "release", "version")], collapse = " "), 
[10:27:53.684]                           hostname = base::Sys.info()[["nodename"]])
[10:27:53.684]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:27:53.684]                           info)
[10:27:53.684]                         info <- base::paste(info, collapse = "; ")
[10:27:53.684]                         if (!has_future) {
[10:27:53.684]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:27:53.684]                             info)
[10:27:53.684]                         }
[10:27:53.684]                         else {
[10:27:53.684]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:27:53.684]                             info, version)
[10:27:53.684]                         }
[10:27:53.684]                         base::stop(msg)
[10:27:53.684]                       }
[10:27:53.684]                     })
[10:27:53.684]                   }
[10:27:53.684]                   options(future.plan = NULL)
[10:27:53.684]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.684]                   future::plan(list(B = function (..., abc = FALSE, 
[10:27:53.684]                     envir = parent.frame()) 
[10:27:53.684]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[10:27:53.684]                     .init = FALSE)
[10:27:53.684]                 }
[10:27:53.684]                 ...future.workdir <- getwd()
[10:27:53.684]             }
[10:27:53.684]             ...future.oldOptions <- base::as.list(base::.Options)
[10:27:53.684]             ...future.oldEnvVars <- base::Sys.getenv()
[10:27:53.684]         }
[10:27:53.684]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:27:53.684]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:27:53.684]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:27:53.684]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:27:53.684]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:27:53.684]             future.stdout.windows.reencode = NULL, width = 80L)
[10:27:53.684]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:27:53.684]             base::names(...future.oldOptions))
[10:27:53.684]     }
[10:27:53.684]     if (FALSE) {
[10:27:53.684]     }
[10:27:53.684]     else {
[10:27:53.684]         if (TRUE) {
[10:27:53.684]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:27:53.684]                 open = "w")
[10:27:53.684]         }
[10:27:53.684]         else {
[10:27:53.684]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:27:53.684]                 windows = "NUL", "/dev/null"), open = "w")
[10:27:53.684]         }
[10:27:53.684]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:27:53.684]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:27:53.684]             base::sink(type = "output", split = FALSE)
[10:27:53.684]             base::close(...future.stdout)
[10:27:53.684]         }, add = TRUE)
[10:27:53.684]     }
[10:27:53.684]     ...future.frame <- base::sys.nframe()
[10:27:53.684]     ...future.conditions <- base::list()
[10:27:53.684]     ...future.rng <- base::globalenv()$.Random.seed
[10:27:53.684]     if (FALSE) {
[10:27:53.684]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:27:53.684]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:27:53.684]     }
[10:27:53.684]     ...future.result <- base::tryCatch({
[10:27:53.684]         base::withCallingHandlers({
[10:27:53.684]             ...future.value <- base::withVisible(base::local({
[10:27:53.684]                 stopifnot(identical(names(plan("list")), "B"))
[10:27:53.684]                 a <- 1
[10:27:53.684]                 a
[10:27:53.684]             }))
[10:27:53.684]             future::FutureResult(value = ...future.value$value, 
[10:27:53.684]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.684]                   ...future.rng), globalenv = if (FALSE) 
[10:27:53.684]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:27:53.684]                     ...future.globalenv.names))
[10:27:53.684]                 else NULL, started = ...future.startTime, version = "1.8")
[10:27:53.684]         }, condition = base::local({
[10:27:53.684]             c <- base::c
[10:27:53.684]             inherits <- base::inherits
[10:27:53.684]             invokeRestart <- base::invokeRestart
[10:27:53.684]             length <- base::length
[10:27:53.684]             list <- base::list
[10:27:53.684]             seq.int <- base::seq.int
[10:27:53.684]             signalCondition <- base::signalCondition
[10:27:53.684]             sys.calls <- base::sys.calls
[10:27:53.684]             `[[` <- base::`[[`
[10:27:53.684]             `+` <- base::`+`
[10:27:53.684]             `<<-` <- base::`<<-`
[10:27:53.684]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:27:53.684]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:27:53.684]                   3L)]
[10:27:53.684]             }
[10:27:53.684]             function(cond) {
[10:27:53.684]                 is_error <- inherits(cond, "error")
[10:27:53.684]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:27:53.684]                   NULL)
[10:27:53.684]                 if (is_error) {
[10:27:53.684]                   sessionInformation <- function() {
[10:27:53.684]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:27:53.684]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:27:53.684]                       search = base::search(), system = base::Sys.info())
[10:27:53.684]                   }
[10:27:53.684]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.684]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:27:53.684]                     cond$call), session = sessionInformation(), 
[10:27:53.684]                     timestamp = base::Sys.time(), signaled = 0L)
[10:27:53.684]                   signalCondition(cond)
[10:27:53.684]                 }
[10:27:53.684]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:27:53.684]                 "immediateCondition"))) {
[10:27:53.684]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:27:53.684]                   ...future.conditions[[length(...future.conditions) + 
[10:27:53.684]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:27:53.684]                   if (TRUE && !signal) {
[10:27:53.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.684]                     {
[10:27:53.684]                       inherits <- base::inherits
[10:27:53.684]                       invokeRestart <- base::invokeRestart
[10:27:53.684]                       is.null <- base::is.null
[10:27:53.684]                       muffled <- FALSE
[10:27:53.684]                       if (inherits(cond, "message")) {
[10:27:53.684]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.684]                         if (muffled) 
[10:27:53.684]                           invokeRestart("muffleMessage")
[10:27:53.684]                       }
[10:27:53.684]                       else if (inherits(cond, "warning")) {
[10:27:53.684]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.684]                         if (muffled) 
[10:27:53.684]                           invokeRestart("muffleWarning")
[10:27:53.684]                       }
[10:27:53.684]                       else if (inherits(cond, "condition")) {
[10:27:53.684]                         if (!is.null(pattern)) {
[10:27:53.684]                           computeRestarts <- base::computeRestarts
[10:27:53.684]                           grepl <- base::grepl
[10:27:53.684]                           restarts <- computeRestarts(cond)
[10:27:53.684]                           for (restart in restarts) {
[10:27:53.684]                             name <- restart$name
[10:27:53.684]                             if (is.null(name)) 
[10:27:53.684]                               next
[10:27:53.684]                             if (!grepl(pattern, name)) 
[10:27:53.684]                               next
[10:27:53.684]                             invokeRestart(restart)
[10:27:53.684]                             muffled <- TRUE
[10:27:53.684]                             break
[10:27:53.684]                           }
[10:27:53.684]                         }
[10:27:53.684]                       }
[10:27:53.684]                       invisible(muffled)
[10:27:53.684]                     }
[10:27:53.684]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.684]                   }
[10:27:53.684]                 }
[10:27:53.684]                 else {
[10:27:53.684]                   if (TRUE) {
[10:27:53.684]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:27:53.684]                     {
[10:27:53.684]                       inherits <- base::inherits
[10:27:53.684]                       invokeRestart <- base::invokeRestart
[10:27:53.684]                       is.null <- base::is.null
[10:27:53.684]                       muffled <- FALSE
[10:27:53.684]                       if (inherits(cond, "message")) {
[10:27:53.684]                         muffled <- grepl(pattern, "muffleMessage")
[10:27:53.684]                         if (muffled) 
[10:27:53.684]                           invokeRestart("muffleMessage")
[10:27:53.684]                       }
[10:27:53.684]                       else if (inherits(cond, "warning")) {
[10:27:53.684]                         muffled <- grepl(pattern, "muffleWarning")
[10:27:53.684]                         if (muffled) 
[10:27:53.684]                           invokeRestart("muffleWarning")
[10:27:53.684]                       }
[10:27:53.684]                       else if (inherits(cond, "condition")) {
[10:27:53.684]                         if (!is.null(pattern)) {
[10:27:53.684]                           computeRestarts <- base::computeRestarts
[10:27:53.684]                           grepl <- base::grepl
[10:27:53.684]                           restarts <- computeRestarts(cond)
[10:27:53.684]                           for (restart in restarts) {
[10:27:53.684]                             name <- restart$name
[10:27:53.684]                             if (is.null(name)) 
[10:27:53.684]                               next
[10:27:53.684]                             if (!grepl(pattern, name)) 
[10:27:53.684]                               next
[10:27:53.684]                             invokeRestart(restart)
[10:27:53.684]                             muffled <- TRUE
[10:27:53.684]                             break
[10:27:53.684]                           }
[10:27:53.684]                         }
[10:27:53.684]                       }
[10:27:53.684]                       invisible(muffled)
[10:27:53.684]                     }
[10:27:53.684]                     muffleCondition(cond, pattern = "^muffle")
[10:27:53.684]                   }
[10:27:53.684]                 }
[10:27:53.684]             }
[10:27:53.684]         }))
[10:27:53.684]     }, error = function(ex) {
[10:27:53.684]         base::structure(base::list(value = NULL, visible = NULL, 
[10:27:53.684]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:27:53.684]                 ...future.rng), started = ...future.startTime, 
[10:27:53.684]             finished = Sys.time(), session_uuid = NA_character_, 
[10:27:53.684]             version = "1.8"), class = "FutureResult")
[10:27:53.684]     }, finally = {
[10:27:53.684]         if (!identical(...future.workdir, getwd())) 
[10:27:53.684]             setwd(...future.workdir)
[10:27:53.684]         {
[10:27:53.684]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:27:53.684]                 ...future.oldOptions$nwarnings <- NULL
[10:27:53.684]             }
[10:27:53.684]             base::options(...future.oldOptions)
[10:27:53.684]             if (.Platform$OS.type == "windows") {
[10:27:53.684]                 old_names <- names(...future.oldEnvVars)
[10:27:53.684]                 envs <- base::Sys.getenv()
[10:27:53.684]                 names <- names(envs)
[10:27:53.684]                 common <- intersect(names, old_names)
[10:27:53.684]                 added <- setdiff(names, old_names)
[10:27:53.684]                 removed <- setdiff(old_names, names)
[10:27:53.684]                 changed <- common[...future.oldEnvVars[common] != 
[10:27:53.684]                   envs[common]]
[10:27:53.684]                 NAMES <- toupper(changed)
[10:27:53.684]                 args <- list()
[10:27:53.684]                 for (kk in seq_along(NAMES)) {
[10:27:53.684]                   name <- changed[[kk]]
[10:27:53.684]                   NAME <- NAMES[[kk]]
[10:27:53.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.684]                     next
[10:27:53.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.684]                 }
[10:27:53.684]                 NAMES <- toupper(added)
[10:27:53.684]                 for (kk in seq_along(NAMES)) {
[10:27:53.684]                   name <- added[[kk]]
[10:27:53.684]                   NAME <- NAMES[[kk]]
[10:27:53.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.684]                     next
[10:27:53.684]                   args[[name]] <- ""
[10:27:53.684]                 }
[10:27:53.684]                 NAMES <- toupper(removed)
[10:27:53.684]                 for (kk in seq_along(NAMES)) {
[10:27:53.684]                   name <- removed[[kk]]
[10:27:53.684]                   NAME <- NAMES[[kk]]
[10:27:53.684]                   if (name != NAME && is.element(NAME, old_names)) 
[10:27:53.684]                     next
[10:27:53.684]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:27:53.684]                 }
[10:27:53.684]                 if (length(args) > 0) 
[10:27:53.684]                   base::do.call(base::Sys.setenv, args = args)
[10:27:53.684]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:27:53.684]             }
[10:27:53.684]             else {
[10:27:53.684]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:27:53.684]             }
[10:27:53.684]             {
[10:27:53.684]                 if (base::length(...future.futureOptionsAdded) > 
[10:27:53.684]                   0L) {
[10:27:53.684]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:27:53.684]                   base::names(opts) <- ...future.futureOptionsAdded
[10:27:53.684]                   base::options(opts)
[10:27:53.684]                 }
[10:27:53.684]                 {
[10:27:53.684]                   {
[10:27:53.684]                     NULL
[10:27:53.684]                     RNGkind("Mersenne-Twister")
[10:27:53.684]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:27:53.684]                       inherits = FALSE)
[10:27:53.684]                   }
[10:27:53.684]                   options(future.plan = NULL)
[10:27:53.684]                   if (is.na(NA_character_)) 
[10:27:53.684]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:27:53.684]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:27:53.684]                   future::plan(list(A = function (..., envir = parent.frame()) 
[10:27:53.684]                   {
[10:27:53.684]                     future <- SequentialFuture(..., envir = envir)
[10:27:53.684]                     if (!future$lazy) 
[10:27:53.684]                       future <- run(future)
[10:27:53.684]                     invisible(future)
[10:27:53.684]                   }, B = function (..., abc = FALSE, envir = parent.frame()) 
[10:27:53.684]                   strategy(..., abc = abc, envir = envir)), .cleanup = FALSE, 
[10:27:53.684]                     .init = FALSE)
[10:27:53.684]                 }
[10:27:53.684]             }
[10:27:53.684]         }
[10:27:53.684]     })
[10:27:53.684]     if (TRUE) {
[10:27:53.684]         base::sink(type = "output", split = FALSE)
[10:27:53.684]         if (TRUE) {
[10:27:53.684]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:27:53.684]         }
[10:27:53.684]         else {
[10:27:53.684]             ...future.result["stdout"] <- base::list(NULL)
[10:27:53.684]         }
[10:27:53.684]         base::close(...future.stdout)
[10:27:53.684]         ...future.stdout <- NULL
[10:27:53.684]     }
[10:27:53.684]     ...future.result$conditions <- ...future.conditions
[10:27:53.684]     ...future.result$finished <- base::Sys.time()
[10:27:53.684]     ...future.result
[10:27:53.684] }
[10:27:53.686] assign_globals() ...
[10:27:53.686] List of 1
[10:27:53.686]  $ plan:function (strategy = NULL, ..., substitute = TRUE, .skip = FALSE, .call = TRUE, 
[10:27:53.686]     .cleanup = TRUE, .init = TRUE)  
[10:27:53.686]  - attr(*, "where")=List of 1
[10:27:53.686]   ..$ plan:<environment: R_EmptyEnv> 
[10:27:53.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:27:53.686]  - attr(*, "resolved")= logi FALSE
[10:27:53.686]  - attr(*, "total_size")= num 412912
[10:27:53.686]  - attr(*, "already-done")= logi TRUE
[10:27:53.689] - copied ‘plan’ to environment
[10:27:53.689] assign_globals() ... done
[10:27:53.689] plan(): Setting new future strategy stack:
[10:27:53.689] List of future strategies:
[10:27:53.689] 1. sequential:
[10:27:53.689]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.689]    - tweaked: TRUE
[10:27:53.689]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[10:27:53.689] plan(): nbrOfWorkers() = 1
[10:27:53.690] plan(): Setting new future strategy stack:
[10:27:53.690] List of future strategies:
[10:27:53.690] 1. sequential:
[10:27:53.690]    - args: function (..., envir = parent.frame())
[10:27:53.690]    - tweaked: FALSE
[10:27:53.690]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[10:27:53.690] 2. sequential:
[10:27:53.690]    - args: function (..., abc = FALSE, envir = parent.frame())
[10:27:53.690]    - tweaked: TRUE
[10:27:53.690]    - call: plan(list(A = sequential, B = tweak(sequential, abc = FALSE)))
[10:27:53.691] plan(): nbrOfWorkers() = 1
[10:27:53.691] SequentialFuture started (and completed)
[10:27:53.691] - Launch lazy future ... done
[10:27:53.691] run() for ‘SequentialFuture’ ... done
> print(x)
[1] 1
> stopifnot(a == 0, x == 1)
> 
> 
> message("*** y %<-% { expr } %tweak% tweaks ... DONE")
*** y %<-% { expr } %tweak% tweaks ... DONE
> 
> 
> message("*** tweak() - abc = TRUE ...")
*** tweak() - abc = TRUE ...
> 
> res <- tryCatch(tweak(multisession, gc = TRUE), condition = identity)
> stopifnot(inherits(res, "tweaked"))
> 
> ## Argument 'gc' is unknown
> res <- tryCatch(tweak(sequential, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> res <- tryCatch(tweak(multicore, abc = TRUE), condition = identity)
> stopifnot(inherits(res, "warning"))
> 
> message("*** tweak() - abc = TRUE ... DONE")
*** tweak() - abc = TRUE ... DONE
> 
> 
> message("*** tweak() - odds and ends ...")
*** tweak() - odds and ends ...
> 
> ## BUG: getGlobalsAndPackages(Formula::Formula(~ x)) would produce
> ## "the condition has length > 1" warnings.
> ## https://github.com/HenrikBengtsson/future/issues/395
> length.Formula <- function(x) c(1L, 1L)
> expr <- structure(y ~ x, class = "Formula")
> stopifnot(length(length(expr)) == 2L)
> gp <- future::getGlobalsAndPackages(expr)
[10:27:53.693] getGlobalsAndPackages() ...
[10:27:53.693] Searching for globals...
[10:27:53.695] - globals found: [4] ‘{’, ‘y’, ‘x’, ‘~’
[10:27:53.695] Searching for globals ... DONE
[10:27:53.695] Resolving globals: FALSE
[10:27:53.695] The total size of the 1 globals is 56 bytes (56 bytes)
[10:27:53.696] The total size of the 1 globals exported for future expression (‘y ~ x’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘x’ (56 bytes of class ‘numeric’)
[10:27:53.696] - globals: [1] ‘x’
[10:27:53.696] 
[10:27:53.696] getGlobalsAndPackages() ... DONE
> stopifnot(
+   !inherits(gp, "error"),
+   is.list(gp),
+   all(c("expr", "globals", "packages") %in% names(gp))
+ )
> 
> message("*** tweak() - odds and ends ... DONE")
*** tweak() - odds and ends ... DONE
> 
> 
> message("*** tweak() - exceptions ...")
*** tweak() - exceptions ...
> 
> res <- try(tweak("<unknown-future-strategy>"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(base::eval), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, "unnamed-argument"), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> ## Arguments that must not be tweaked
> res <- try(tweak(sequential, lazy = TRUE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, asynchronous = FALSE), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> res <- try(tweak(sequential, seed = 42L), silent = TRUE)
> stopifnot(inherits(res, "try-error"))
> 
> message("*** tweak() - exceptions ... DONE")
*** tweak() - exceptions ... DONE
> 
> 
> message("*** Tweaking future strategies ... DONE")
*** Tweaking future strategies ... DONE
> 
> source("incl/end.R")
[10:27:53.740] plan(): Setting new future strategy stack:
[10:27:53.740] List of future strategies:
[10:27:53.740] 1. FutureStrategy:
[10:27:53.740]    - args: function (..., envir = parent.frame())
[10:27:53.740]    - tweaked: FALSE
[10:27:53.740]    - call: future::plan(oplan)
[10:27:53.740] plan(): nbrOfWorkers() = 1
> 
