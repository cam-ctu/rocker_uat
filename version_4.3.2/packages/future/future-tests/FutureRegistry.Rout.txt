
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:04.435] plan(): Setting new future strategy stack:
[13:23:04.436] List of future strategies:
[13:23:04.436] 1. sequential:
[13:23:04.436]    - args: function (..., envir = parent.frame())
[13:23:04.436]    - tweaked: FALSE
[13:23:04.436]    - call: future::plan("sequential")
[13:23:04.451] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'list') ...
list()
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'add') ...
[13:23:04.488] getGlobalsAndPackages() ...
[13:23:04.488] Searching for globals...
[13:23:04.492] - globals found: [1] ‘{’
[13:23:04.492] Searching for globals ... DONE
[13:23:04.492] Resolving globals: FALSE
[13:23:04.493] 
[13:23:04.493] 
[13:23:04.493] getGlobalsAndPackages() ... DONE
[13:23:04.494] run() for ‘Future’ ...
[13:23:04.494] - state: ‘created’
[13:23:04.494] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.494] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.495] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.495]   - Field: ‘label’
[13:23:04.495]   - Field: ‘local’
[13:23:04.495]   - Field: ‘owner’
[13:23:04.495]   - Field: ‘envir’
[13:23:04.495]   - Field: ‘packages’
[13:23:04.495]   - Field: ‘gc’
[13:23:04.495]   - Field: ‘conditions’
[13:23:04.495]   - Field: ‘expr’
[13:23:04.496]   - Field: ‘uuid’
[13:23:04.496]   - Field: ‘seed’
[13:23:04.496]   - Field: ‘version’
[13:23:04.496]   - Field: ‘result’
[13:23:04.496]   - Field: ‘asynchronous’
[13:23:04.496]   - Field: ‘calls’
[13:23:04.496]   - Field: ‘globals’
[13:23:04.496]   - Field: ‘stdout’
[13:23:04.497]   - Field: ‘earlySignal’
[13:23:04.497]   - Field: ‘lazy’
[13:23:04.497]   - Field: ‘state’
[13:23:04.497] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.497] - Launch lazy future ...
[13:23:04.498] Packages needed by the future expression (n = 0): <none>
[13:23:04.498] Packages needed by future strategies (n = 0): <none>
[13:23:04.499] {
[13:23:04.499]     {
[13:23:04.499]         {
[13:23:04.499]             ...future.startTime <- base::Sys.time()
[13:23:04.499]             {
[13:23:04.499]                 {
[13:23:04.499]                   {
[13:23:04.499]                     base::local({
[13:23:04.499]                       has_future <- base::requireNamespace("future", 
[13:23:04.499]                         quietly = TRUE)
[13:23:04.499]                       if (has_future) {
[13:23:04.499]                         ns <- base::getNamespace("future")
[13:23:04.499]                         version <- ns[[".package"]][["version"]]
[13:23:04.499]                         if (is.null(version)) 
[13:23:04.499]                           version <- utils::packageVersion("future")
[13:23:04.499]                       }
[13:23:04.499]                       else {
[13:23:04.499]                         version <- NULL
[13:23:04.499]                       }
[13:23:04.499]                       if (!has_future || version < "1.8.0") {
[13:23:04.499]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.499]                           "", base::R.version$version.string), 
[13:23:04.499]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.499]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.499]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.499]                             "release", "version")], collapse = " "), 
[13:23:04.499]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.499]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.499]                           info)
[13:23:04.499]                         info <- base::paste(info, collapse = "; ")
[13:23:04.499]                         if (!has_future) {
[13:23:04.499]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.499]                             info)
[13:23:04.499]                         }
[13:23:04.499]                         else {
[13:23:04.499]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.499]                             info, version)
[13:23:04.499]                         }
[13:23:04.499]                         base::stop(msg)
[13:23:04.499]                       }
[13:23:04.499]                     })
[13:23:04.499]                   }
[13:23:04.499]                   options(future.plan = NULL)
[13:23:04.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.499]                 }
[13:23:04.499]                 ...future.workdir <- getwd()
[13:23:04.499]             }
[13:23:04.499]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.499]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.499]         }
[13:23:04.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.499]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.499]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.499]             base::names(...future.oldOptions))
[13:23:04.499]     }
[13:23:04.499]     if (FALSE) {
[13:23:04.499]     }
[13:23:04.499]     else {
[13:23:04.499]         if (TRUE) {
[13:23:04.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.499]                 open = "w")
[13:23:04.499]         }
[13:23:04.499]         else {
[13:23:04.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.499]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.499]         }
[13:23:04.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.499]             base::sink(type = "output", split = FALSE)
[13:23:04.499]             base::close(...future.stdout)
[13:23:04.499]         }, add = TRUE)
[13:23:04.499]     }
[13:23:04.499]     ...future.frame <- base::sys.nframe()
[13:23:04.499]     ...future.conditions <- base::list()
[13:23:04.499]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.499]     if (FALSE) {
[13:23:04.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.499]     }
[13:23:04.499]     ...future.result <- base::tryCatch({
[13:23:04.499]         base::withCallingHandlers({
[13:23:04.499]             ...future.value <- base::withVisible(base::local({
[13:23:04.499]                 1
[13:23:04.499]             }))
[13:23:04.499]             future::FutureResult(value = ...future.value$value, 
[13:23:04.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.499]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.499]                     ...future.globalenv.names))
[13:23:04.499]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.499]         }, condition = base::local({
[13:23:04.499]             c <- base::c
[13:23:04.499]             inherits <- base::inherits
[13:23:04.499]             invokeRestart <- base::invokeRestart
[13:23:04.499]             length <- base::length
[13:23:04.499]             list <- base::list
[13:23:04.499]             seq.int <- base::seq.int
[13:23:04.499]             signalCondition <- base::signalCondition
[13:23:04.499]             sys.calls <- base::sys.calls
[13:23:04.499]             `[[` <- base::`[[`
[13:23:04.499]             `+` <- base::`+`
[13:23:04.499]             `<<-` <- base::`<<-`
[13:23:04.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.499]                   3L)]
[13:23:04.499]             }
[13:23:04.499]             function(cond) {
[13:23:04.499]                 is_error <- inherits(cond, "error")
[13:23:04.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.499]                   NULL)
[13:23:04.499]                 if (is_error) {
[13:23:04.499]                   sessionInformation <- function() {
[13:23:04.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.499]                       search = base::search(), system = base::Sys.info())
[13:23:04.499]                   }
[13:23:04.499]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.499]                     cond$call), session = sessionInformation(), 
[13:23:04.499]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.499]                   signalCondition(cond)
[13:23:04.499]                 }
[13:23:04.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.499]                 "immediateCondition"))) {
[13:23:04.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.499]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.499]                   if (TRUE && !signal) {
[13:23:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.499]                     {
[13:23:04.499]                       inherits <- base::inherits
[13:23:04.499]                       invokeRestart <- base::invokeRestart
[13:23:04.499]                       is.null <- base::is.null
[13:23:04.499]                       muffled <- FALSE
[13:23:04.499]                       if (inherits(cond, "message")) {
[13:23:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.499]                         if (muffled) 
[13:23:04.499]                           invokeRestart("muffleMessage")
[13:23:04.499]                       }
[13:23:04.499]                       else if (inherits(cond, "warning")) {
[13:23:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.499]                         if (muffled) 
[13:23:04.499]                           invokeRestart("muffleWarning")
[13:23:04.499]                       }
[13:23:04.499]                       else if (inherits(cond, "condition")) {
[13:23:04.499]                         if (!is.null(pattern)) {
[13:23:04.499]                           computeRestarts <- base::computeRestarts
[13:23:04.499]                           grepl <- base::grepl
[13:23:04.499]                           restarts <- computeRestarts(cond)
[13:23:04.499]                           for (restart in restarts) {
[13:23:04.499]                             name <- restart$name
[13:23:04.499]                             if (is.null(name)) 
[13:23:04.499]                               next
[13:23:04.499]                             if (!grepl(pattern, name)) 
[13:23:04.499]                               next
[13:23:04.499]                             invokeRestart(restart)
[13:23:04.499]                             muffled <- TRUE
[13:23:04.499]                             break
[13:23:04.499]                           }
[13:23:04.499]                         }
[13:23:04.499]                       }
[13:23:04.499]                       invisible(muffled)
[13:23:04.499]                     }
[13:23:04.499]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.499]                   }
[13:23:04.499]                 }
[13:23:04.499]                 else {
[13:23:04.499]                   if (TRUE) {
[13:23:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.499]                     {
[13:23:04.499]                       inherits <- base::inherits
[13:23:04.499]                       invokeRestart <- base::invokeRestart
[13:23:04.499]                       is.null <- base::is.null
[13:23:04.499]                       muffled <- FALSE
[13:23:04.499]                       if (inherits(cond, "message")) {
[13:23:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.499]                         if (muffled) 
[13:23:04.499]                           invokeRestart("muffleMessage")
[13:23:04.499]                       }
[13:23:04.499]                       else if (inherits(cond, "warning")) {
[13:23:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.499]                         if (muffled) 
[13:23:04.499]                           invokeRestart("muffleWarning")
[13:23:04.499]                       }
[13:23:04.499]                       else if (inherits(cond, "condition")) {
[13:23:04.499]                         if (!is.null(pattern)) {
[13:23:04.499]                           computeRestarts <- base::computeRestarts
[13:23:04.499]                           grepl <- base::grepl
[13:23:04.499]                           restarts <- computeRestarts(cond)
[13:23:04.499]                           for (restart in restarts) {
[13:23:04.499]                             name <- restart$name
[13:23:04.499]                             if (is.null(name)) 
[13:23:04.499]                               next
[13:23:04.499]                             if (!grepl(pattern, name)) 
[13:23:04.499]                               next
[13:23:04.499]                             invokeRestart(restart)
[13:23:04.499]                             muffled <- TRUE
[13:23:04.499]                             break
[13:23:04.499]                           }
[13:23:04.499]                         }
[13:23:04.499]                       }
[13:23:04.499]                       invisible(muffled)
[13:23:04.499]                     }
[13:23:04.499]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.499]                   }
[13:23:04.499]                 }
[13:23:04.499]             }
[13:23:04.499]         }))
[13:23:04.499]     }, error = function(ex) {
[13:23:04.499]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.499]                 ...future.rng), started = ...future.startTime, 
[13:23:04.499]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.499]             version = "1.8"), class = "FutureResult")
[13:23:04.499]     }, finally = {
[13:23:04.499]         if (!identical(...future.workdir, getwd())) 
[13:23:04.499]             setwd(...future.workdir)
[13:23:04.499]         {
[13:23:04.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.499]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.499]             }
[13:23:04.499]             base::options(...future.oldOptions)
[13:23:04.499]             if (.Platform$OS.type == "windows") {
[13:23:04.499]                 old_names <- names(...future.oldEnvVars)
[13:23:04.499]                 envs <- base::Sys.getenv()
[13:23:04.499]                 names <- names(envs)
[13:23:04.499]                 common <- intersect(names, old_names)
[13:23:04.499]                 added <- setdiff(names, old_names)
[13:23:04.499]                 removed <- setdiff(old_names, names)
[13:23:04.499]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.499]                   envs[common]]
[13:23:04.499]                 NAMES <- toupper(changed)
[13:23:04.499]                 args <- list()
[13:23:04.499]                 for (kk in seq_along(NAMES)) {
[13:23:04.499]                   name <- changed[[kk]]
[13:23:04.499]                   NAME <- NAMES[[kk]]
[13:23:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.499]                     next
[13:23:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.499]                 }
[13:23:04.499]                 NAMES <- toupper(added)
[13:23:04.499]                 for (kk in seq_along(NAMES)) {
[13:23:04.499]                   name <- added[[kk]]
[13:23:04.499]                   NAME <- NAMES[[kk]]
[13:23:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.499]                     next
[13:23:04.499]                   args[[name]] <- ""
[13:23:04.499]                 }
[13:23:04.499]                 NAMES <- toupper(removed)
[13:23:04.499]                 for (kk in seq_along(NAMES)) {
[13:23:04.499]                   name <- removed[[kk]]
[13:23:04.499]                   NAME <- NAMES[[kk]]
[13:23:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.499]                     next
[13:23:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.499]                 }
[13:23:04.499]                 if (length(args) > 0) 
[13:23:04.499]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.499]             }
[13:23:04.499]             else {
[13:23:04.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.499]             }
[13:23:04.499]             {
[13:23:04.499]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.499]                   0L) {
[13:23:04.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.499]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.499]                   base::options(opts)
[13:23:04.499]                 }
[13:23:04.499]                 {
[13:23:04.499]                   {
[13:23:04.499]                     NULL
[13:23:04.499]                     RNGkind("Mersenne-Twister")
[13:23:04.499]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.499]                       inherits = FALSE)
[13:23:04.499]                   }
[13:23:04.499]                   options(future.plan = NULL)
[13:23:04.499]                   if (is.na(NA_character_)) 
[13:23:04.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.499]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.499]                   {
[13:23:04.499]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.499]                     if (!future$lazy) 
[13:23:04.499]                       future <- run(future)
[13:23:04.499]                     invisible(future)
[13:23:04.499]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.499]                 }
[13:23:04.499]             }
[13:23:04.499]         }
[13:23:04.499]     })
[13:23:04.499]     if (TRUE) {
[13:23:04.499]         base::sink(type = "output", split = FALSE)
[13:23:04.499]         if (TRUE) {
[13:23:04.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.499]         }
[13:23:04.499]         else {
[13:23:04.499]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.499]         }
[13:23:04.499]         base::close(...future.stdout)
[13:23:04.499]         ...future.stdout <- NULL
[13:23:04.499]     }
[13:23:04.499]     ...future.result$conditions <- ...future.conditions
[13:23:04.499]     ...future.result$finished <- base::Sys.time()
[13:23:04.499]     ...future.result
[13:23:04.499] }
[13:23:04.501] plan(): Setting new future strategy stack:
[13:23:04.501] List of future strategies:
[13:23:04.501] 1. sequential:
[13:23:04.501]    - args: function (..., envir = parent.frame())
[13:23:04.501]    - tweaked: FALSE
[13:23:04.501]    - call: NULL
[13:23:04.501] plan(): nbrOfWorkers() = 1
[13:23:04.503] plan(): Setting new future strategy stack:
[13:23:04.503] List of future strategies:
[13:23:04.503] 1. sequential:
[13:23:04.503]    - args: function (..., envir = parent.frame())
[13:23:04.503]    - tweaked: FALSE
[13:23:04.503]    - call: future::plan("sequential")
[13:23:04.503] plan(): nbrOfWorkers() = 1
[13:23:04.503] SequentialFuture started (and completed)
[13:23:04.504] - Launch lazy future ... done
[13:23:04.504] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'remove') ...
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'list') ...
list()
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'add') ...
[13:23:04.508] getGlobalsAndPackages() ...
[13:23:04.509] Searching for globals...
[13:23:04.509] - globals found: [1] ‘{’
[13:23:04.509] Searching for globals ... DONE
[13:23:04.509] Resolving globals: FALSE
[13:23:04.510] 
[13:23:04.510] 
[13:23:04.510] getGlobalsAndPackages() ... DONE
[13:23:04.510] run() for ‘Future’ ...
[13:23:04.510] - state: ‘created’
[13:23:04.510] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.511] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.511] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.511]   - Field: ‘label’
[13:23:04.511]   - Field: ‘local’
[13:23:04.511]   - Field: ‘owner’
[13:23:04.511]   - Field: ‘envir’
[13:23:04.511]   - Field: ‘packages’
[13:23:04.511]   - Field: ‘gc’
[13:23:04.512]   - Field: ‘conditions’
[13:23:04.512]   - Field: ‘expr’
[13:23:04.512]   - Field: ‘uuid’
[13:23:04.512]   - Field: ‘seed’
[13:23:04.512]   - Field: ‘version’
[13:23:04.512]   - Field: ‘result’
[13:23:04.512]   - Field: ‘asynchronous’
[13:23:04.512]   - Field: ‘calls’
[13:23:04.512]   - Field: ‘globals’
[13:23:04.512]   - Field: ‘stdout’
[13:23:04.513]   - Field: ‘earlySignal’
[13:23:04.513]   - Field: ‘lazy’
[13:23:04.513]   - Field: ‘state’
[13:23:04.513] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.513] - Launch lazy future ...
[13:23:04.513] Packages needed by the future expression (n = 0): <none>
[13:23:04.513] Packages needed by future strategies (n = 0): <none>
[13:23:04.514] {
[13:23:04.514]     {
[13:23:04.514]         {
[13:23:04.514]             ...future.startTime <- base::Sys.time()
[13:23:04.514]             {
[13:23:04.514]                 {
[13:23:04.514]                   {
[13:23:04.514]                     base::local({
[13:23:04.514]                       has_future <- base::requireNamespace("future", 
[13:23:04.514]                         quietly = TRUE)
[13:23:04.514]                       if (has_future) {
[13:23:04.514]                         ns <- base::getNamespace("future")
[13:23:04.514]                         version <- ns[[".package"]][["version"]]
[13:23:04.514]                         if (is.null(version)) 
[13:23:04.514]                           version <- utils::packageVersion("future")
[13:23:04.514]                       }
[13:23:04.514]                       else {
[13:23:04.514]                         version <- NULL
[13:23:04.514]                       }
[13:23:04.514]                       if (!has_future || version < "1.8.0") {
[13:23:04.514]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.514]                           "", base::R.version$version.string), 
[13:23:04.514]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.514]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.514]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.514]                             "release", "version")], collapse = " "), 
[13:23:04.514]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.514]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.514]                           info)
[13:23:04.514]                         info <- base::paste(info, collapse = "; ")
[13:23:04.514]                         if (!has_future) {
[13:23:04.514]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.514]                             info)
[13:23:04.514]                         }
[13:23:04.514]                         else {
[13:23:04.514]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.514]                             info, version)
[13:23:04.514]                         }
[13:23:04.514]                         base::stop(msg)
[13:23:04.514]                       }
[13:23:04.514]                     })
[13:23:04.514]                   }
[13:23:04.514]                   options(future.plan = NULL)
[13:23:04.514]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.514]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.514]                 }
[13:23:04.514]                 ...future.workdir <- getwd()
[13:23:04.514]             }
[13:23:04.514]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.514]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.514]         }
[13:23:04.514]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.514]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.514]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.514]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.514]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.514]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.514]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.514]             base::names(...future.oldOptions))
[13:23:04.514]     }
[13:23:04.514]     if (FALSE) {
[13:23:04.514]     }
[13:23:04.514]     else {
[13:23:04.514]         if (TRUE) {
[13:23:04.514]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.514]                 open = "w")
[13:23:04.514]         }
[13:23:04.514]         else {
[13:23:04.514]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.514]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.514]         }
[13:23:04.514]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.514]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.514]             base::sink(type = "output", split = FALSE)
[13:23:04.514]             base::close(...future.stdout)
[13:23:04.514]         }, add = TRUE)
[13:23:04.514]     }
[13:23:04.514]     ...future.frame <- base::sys.nframe()
[13:23:04.514]     ...future.conditions <- base::list()
[13:23:04.514]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.514]     if (FALSE) {
[13:23:04.514]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.514]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.514]     }
[13:23:04.514]     ...future.result <- base::tryCatch({
[13:23:04.514]         base::withCallingHandlers({
[13:23:04.514]             ...future.value <- base::withVisible(base::local({
[13:23:04.514]                 2
[13:23:04.514]             }))
[13:23:04.514]             future::FutureResult(value = ...future.value$value, 
[13:23:04.514]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.514]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.514]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.514]                     ...future.globalenv.names))
[13:23:04.514]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.514]         }, condition = base::local({
[13:23:04.514]             c <- base::c
[13:23:04.514]             inherits <- base::inherits
[13:23:04.514]             invokeRestart <- base::invokeRestart
[13:23:04.514]             length <- base::length
[13:23:04.514]             list <- base::list
[13:23:04.514]             seq.int <- base::seq.int
[13:23:04.514]             signalCondition <- base::signalCondition
[13:23:04.514]             sys.calls <- base::sys.calls
[13:23:04.514]             `[[` <- base::`[[`
[13:23:04.514]             `+` <- base::`+`
[13:23:04.514]             `<<-` <- base::`<<-`
[13:23:04.514]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.514]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.514]                   3L)]
[13:23:04.514]             }
[13:23:04.514]             function(cond) {
[13:23:04.514]                 is_error <- inherits(cond, "error")
[13:23:04.514]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.514]                   NULL)
[13:23:04.514]                 if (is_error) {
[13:23:04.514]                   sessionInformation <- function() {
[13:23:04.514]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.514]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.514]                       search = base::search(), system = base::Sys.info())
[13:23:04.514]                   }
[13:23:04.514]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.514]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.514]                     cond$call), session = sessionInformation(), 
[13:23:04.514]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.514]                   signalCondition(cond)
[13:23:04.514]                 }
[13:23:04.514]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.514]                 "immediateCondition"))) {
[13:23:04.514]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.514]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.514]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.514]                   if (TRUE && !signal) {
[13:23:04.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.514]                     {
[13:23:04.514]                       inherits <- base::inherits
[13:23:04.514]                       invokeRestart <- base::invokeRestart
[13:23:04.514]                       is.null <- base::is.null
[13:23:04.514]                       muffled <- FALSE
[13:23:04.514]                       if (inherits(cond, "message")) {
[13:23:04.514]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.514]                         if (muffled) 
[13:23:04.514]                           invokeRestart("muffleMessage")
[13:23:04.514]                       }
[13:23:04.514]                       else if (inherits(cond, "warning")) {
[13:23:04.514]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.514]                         if (muffled) 
[13:23:04.514]                           invokeRestart("muffleWarning")
[13:23:04.514]                       }
[13:23:04.514]                       else if (inherits(cond, "condition")) {
[13:23:04.514]                         if (!is.null(pattern)) {
[13:23:04.514]                           computeRestarts <- base::computeRestarts
[13:23:04.514]                           grepl <- base::grepl
[13:23:04.514]                           restarts <- computeRestarts(cond)
[13:23:04.514]                           for (restart in restarts) {
[13:23:04.514]                             name <- restart$name
[13:23:04.514]                             if (is.null(name)) 
[13:23:04.514]                               next
[13:23:04.514]                             if (!grepl(pattern, name)) 
[13:23:04.514]                               next
[13:23:04.514]                             invokeRestart(restart)
[13:23:04.514]                             muffled <- TRUE
[13:23:04.514]                             break
[13:23:04.514]                           }
[13:23:04.514]                         }
[13:23:04.514]                       }
[13:23:04.514]                       invisible(muffled)
[13:23:04.514]                     }
[13:23:04.514]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.514]                   }
[13:23:04.514]                 }
[13:23:04.514]                 else {
[13:23:04.514]                   if (TRUE) {
[13:23:04.514]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.514]                     {
[13:23:04.514]                       inherits <- base::inherits
[13:23:04.514]                       invokeRestart <- base::invokeRestart
[13:23:04.514]                       is.null <- base::is.null
[13:23:04.514]                       muffled <- FALSE
[13:23:04.514]                       if (inherits(cond, "message")) {
[13:23:04.514]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.514]                         if (muffled) 
[13:23:04.514]                           invokeRestart("muffleMessage")
[13:23:04.514]                       }
[13:23:04.514]                       else if (inherits(cond, "warning")) {
[13:23:04.514]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.514]                         if (muffled) 
[13:23:04.514]                           invokeRestart("muffleWarning")
[13:23:04.514]                       }
[13:23:04.514]                       else if (inherits(cond, "condition")) {
[13:23:04.514]                         if (!is.null(pattern)) {
[13:23:04.514]                           computeRestarts <- base::computeRestarts
[13:23:04.514]                           grepl <- base::grepl
[13:23:04.514]                           restarts <- computeRestarts(cond)
[13:23:04.514]                           for (restart in restarts) {
[13:23:04.514]                             name <- restart$name
[13:23:04.514]                             if (is.null(name)) 
[13:23:04.514]                               next
[13:23:04.514]                             if (!grepl(pattern, name)) 
[13:23:04.514]                               next
[13:23:04.514]                             invokeRestart(restart)
[13:23:04.514]                             muffled <- TRUE
[13:23:04.514]                             break
[13:23:04.514]                           }
[13:23:04.514]                         }
[13:23:04.514]                       }
[13:23:04.514]                       invisible(muffled)
[13:23:04.514]                     }
[13:23:04.514]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.514]                   }
[13:23:04.514]                 }
[13:23:04.514]             }
[13:23:04.514]         }))
[13:23:04.514]     }, error = function(ex) {
[13:23:04.514]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.514]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.514]                 ...future.rng), started = ...future.startTime, 
[13:23:04.514]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.514]             version = "1.8"), class = "FutureResult")
[13:23:04.514]     }, finally = {
[13:23:04.514]         if (!identical(...future.workdir, getwd())) 
[13:23:04.514]             setwd(...future.workdir)
[13:23:04.514]         {
[13:23:04.514]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.514]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.514]             }
[13:23:04.514]             base::options(...future.oldOptions)
[13:23:04.514]             if (.Platform$OS.type == "windows") {
[13:23:04.514]                 old_names <- names(...future.oldEnvVars)
[13:23:04.514]                 envs <- base::Sys.getenv()
[13:23:04.514]                 names <- names(envs)
[13:23:04.514]                 common <- intersect(names, old_names)
[13:23:04.514]                 added <- setdiff(names, old_names)
[13:23:04.514]                 removed <- setdiff(old_names, names)
[13:23:04.514]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.514]                   envs[common]]
[13:23:04.514]                 NAMES <- toupper(changed)
[13:23:04.514]                 args <- list()
[13:23:04.514]                 for (kk in seq_along(NAMES)) {
[13:23:04.514]                   name <- changed[[kk]]
[13:23:04.514]                   NAME <- NAMES[[kk]]
[13:23:04.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.514]                     next
[13:23:04.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.514]                 }
[13:23:04.514]                 NAMES <- toupper(added)
[13:23:04.514]                 for (kk in seq_along(NAMES)) {
[13:23:04.514]                   name <- added[[kk]]
[13:23:04.514]                   NAME <- NAMES[[kk]]
[13:23:04.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.514]                     next
[13:23:04.514]                   args[[name]] <- ""
[13:23:04.514]                 }
[13:23:04.514]                 NAMES <- toupper(removed)
[13:23:04.514]                 for (kk in seq_along(NAMES)) {
[13:23:04.514]                   name <- removed[[kk]]
[13:23:04.514]                   NAME <- NAMES[[kk]]
[13:23:04.514]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.514]                     next
[13:23:04.514]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.514]                 }
[13:23:04.514]                 if (length(args) > 0) 
[13:23:04.514]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.514]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.514]             }
[13:23:04.514]             else {
[13:23:04.514]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.514]             }
[13:23:04.514]             {
[13:23:04.514]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.514]                   0L) {
[13:23:04.514]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.514]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.514]                   base::options(opts)
[13:23:04.514]                 }
[13:23:04.514]                 {
[13:23:04.514]                   {
[13:23:04.514]                     NULL
[13:23:04.514]                     RNGkind("Mersenne-Twister")
[13:23:04.514]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.514]                       inherits = FALSE)
[13:23:04.514]                   }
[13:23:04.514]                   options(future.plan = NULL)
[13:23:04.514]                   if (is.na(NA_character_)) 
[13:23:04.514]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.514]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.514]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.514]                   {
[13:23:04.514]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.514]                     if (!future$lazy) 
[13:23:04.514]                       future <- run(future)
[13:23:04.514]                     invisible(future)
[13:23:04.514]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.514]                 }
[13:23:04.514]             }
[13:23:04.514]         }
[13:23:04.514]     })
[13:23:04.514]     if (TRUE) {
[13:23:04.514]         base::sink(type = "output", split = FALSE)
[13:23:04.514]         if (TRUE) {
[13:23:04.514]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.514]         }
[13:23:04.514]         else {
[13:23:04.514]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.514]         }
[13:23:04.514]         base::close(...future.stdout)
[13:23:04.514]         ...future.stdout <- NULL
[13:23:04.514]     }
[13:23:04.514]     ...future.result$conditions <- ...future.conditions
[13:23:04.514]     ...future.result$finished <- base::Sys.time()
[13:23:04.514]     ...future.result
[13:23:04.514] }
[13:23:04.516] plan(): Setting new future strategy stack:
[13:23:04.516] List of future strategies:
[13:23:04.516] 1. sequential:
[13:23:04.516]    - args: function (..., envir = parent.frame())
[13:23:04.516]    - tweaked: FALSE
[13:23:04.516]    - call: NULL
[13:23:04.516] plan(): nbrOfWorkers() = 1
[13:23:04.517] plan(): Setting new future strategy stack:
[13:23:04.517] List of future strategies:
[13:23:04.517] 1. sequential:
[13:23:04.517]    - args: function (..., envir = parent.frame())
[13:23:04.517]    - tweaked: FALSE
[13:23:04.517]    - call: future::plan("sequential")
[13:23:04.517] plan(): nbrOfWorkers() = 1
[13:23:04.518] SequentialFuture started (and completed)
[13:23:04.518] - Launch lazy future ... done
[13:23:04.518] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'collect-first') ...
[13:23:04.519] resolved() for ‘SequentialFuture’ ...
[13:23:04.519] - state: ‘finished’
[13:23:04.519] - run: FALSE
[13:23:04.519] - result: ‘FutureResult’
[13:23:04.519] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'add') ...
[13:23:04.520] getGlobalsAndPackages() ...
[13:23:04.520] Searching for globals...
[13:23:04.521] - globals found: [1] ‘{’
[13:23:04.521] Searching for globals ... DONE
[13:23:04.521] Resolving globals: FALSE
[13:23:04.521] 
[13:23:04.521] 
[13:23:04.522] getGlobalsAndPackages() ... DONE
[13:23:04.522] run() for ‘Future’ ...
[13:23:04.522] - state: ‘created’
[13:23:04.522] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.522] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.522] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.523]   - Field: ‘label’
[13:23:04.523]   - Field: ‘local’
[13:23:04.523]   - Field: ‘owner’
[13:23:04.523]   - Field: ‘envir’
[13:23:04.523]   - Field: ‘packages’
[13:23:04.523]   - Field: ‘gc’
[13:23:04.523]   - Field: ‘conditions’
[13:23:04.523]   - Field: ‘expr’
[13:23:04.523]   - Field: ‘uuid’
[13:23:04.523]   - Field: ‘seed’
[13:23:04.523]   - Field: ‘version’
[13:23:04.524]   - Field: ‘result’
[13:23:04.524]   - Field: ‘asynchronous’
[13:23:04.524]   - Field: ‘calls’
[13:23:04.524]   - Field: ‘globals’
[13:23:04.524]   - Field: ‘stdout’
[13:23:04.524]   - Field: ‘earlySignal’
[13:23:04.524]   - Field: ‘lazy’
[13:23:04.524]   - Field: ‘state’
[13:23:04.524] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.524] - Launch lazy future ...
[13:23:04.525] Packages needed by the future expression (n = 0): <none>
[13:23:04.525] Packages needed by future strategies (n = 0): <none>
[13:23:04.525] {
[13:23:04.525]     {
[13:23:04.525]         {
[13:23:04.525]             ...future.startTime <- base::Sys.time()
[13:23:04.525]             {
[13:23:04.525]                 {
[13:23:04.525]                   {
[13:23:04.525]                     base::local({
[13:23:04.525]                       has_future <- base::requireNamespace("future", 
[13:23:04.525]                         quietly = TRUE)
[13:23:04.525]                       if (has_future) {
[13:23:04.525]                         ns <- base::getNamespace("future")
[13:23:04.525]                         version <- ns[[".package"]][["version"]]
[13:23:04.525]                         if (is.null(version)) 
[13:23:04.525]                           version <- utils::packageVersion("future")
[13:23:04.525]                       }
[13:23:04.525]                       else {
[13:23:04.525]                         version <- NULL
[13:23:04.525]                       }
[13:23:04.525]                       if (!has_future || version < "1.8.0") {
[13:23:04.525]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.525]                           "", base::R.version$version.string), 
[13:23:04.525]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.525]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.525]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.525]                             "release", "version")], collapse = " "), 
[13:23:04.525]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.525]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.525]                           info)
[13:23:04.525]                         info <- base::paste(info, collapse = "; ")
[13:23:04.525]                         if (!has_future) {
[13:23:04.525]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.525]                             info)
[13:23:04.525]                         }
[13:23:04.525]                         else {
[13:23:04.525]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.525]                             info, version)
[13:23:04.525]                         }
[13:23:04.525]                         base::stop(msg)
[13:23:04.525]                       }
[13:23:04.525]                     })
[13:23:04.525]                   }
[13:23:04.525]                   options(future.plan = NULL)
[13:23:04.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.525]                 }
[13:23:04.525]                 ...future.workdir <- getwd()
[13:23:04.525]             }
[13:23:04.525]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.525]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.525]         }
[13:23:04.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.525]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.525]             base::names(...future.oldOptions))
[13:23:04.525]     }
[13:23:04.525]     if (FALSE) {
[13:23:04.525]     }
[13:23:04.525]     else {
[13:23:04.525]         if (TRUE) {
[13:23:04.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.525]                 open = "w")
[13:23:04.525]         }
[13:23:04.525]         else {
[13:23:04.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.525]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.525]         }
[13:23:04.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.525]             base::sink(type = "output", split = FALSE)
[13:23:04.525]             base::close(...future.stdout)
[13:23:04.525]         }, add = TRUE)
[13:23:04.525]     }
[13:23:04.525]     ...future.frame <- base::sys.nframe()
[13:23:04.525]     ...future.conditions <- base::list()
[13:23:04.525]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.525]     if (FALSE) {
[13:23:04.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.525]     }
[13:23:04.525]     ...future.result <- base::tryCatch({
[13:23:04.525]         base::withCallingHandlers({
[13:23:04.525]             ...future.value <- base::withVisible(base::local({
[13:23:04.525]                 2
[13:23:04.525]             }))
[13:23:04.525]             future::FutureResult(value = ...future.value$value, 
[13:23:04.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.525]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.525]                     ...future.globalenv.names))
[13:23:04.525]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.525]         }, condition = base::local({
[13:23:04.525]             c <- base::c
[13:23:04.525]             inherits <- base::inherits
[13:23:04.525]             invokeRestart <- base::invokeRestart
[13:23:04.525]             length <- base::length
[13:23:04.525]             list <- base::list
[13:23:04.525]             seq.int <- base::seq.int
[13:23:04.525]             signalCondition <- base::signalCondition
[13:23:04.525]             sys.calls <- base::sys.calls
[13:23:04.525]             `[[` <- base::`[[`
[13:23:04.525]             `+` <- base::`+`
[13:23:04.525]             `<<-` <- base::`<<-`
[13:23:04.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.525]                   3L)]
[13:23:04.525]             }
[13:23:04.525]             function(cond) {
[13:23:04.525]                 is_error <- inherits(cond, "error")
[13:23:04.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.525]                   NULL)
[13:23:04.525]                 if (is_error) {
[13:23:04.525]                   sessionInformation <- function() {
[13:23:04.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.525]                       search = base::search(), system = base::Sys.info())
[13:23:04.525]                   }
[13:23:04.525]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.525]                     cond$call), session = sessionInformation(), 
[13:23:04.525]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.525]                   signalCondition(cond)
[13:23:04.525]                 }
[13:23:04.525]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.525]                 "immediateCondition"))) {
[13:23:04.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.525]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.525]                   if (TRUE && !signal) {
[13:23:04.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.525]                     {
[13:23:04.525]                       inherits <- base::inherits
[13:23:04.525]                       invokeRestart <- base::invokeRestart
[13:23:04.525]                       is.null <- base::is.null
[13:23:04.525]                       muffled <- FALSE
[13:23:04.525]                       if (inherits(cond, "message")) {
[13:23:04.525]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.525]                         if (muffled) 
[13:23:04.525]                           invokeRestart("muffleMessage")
[13:23:04.525]                       }
[13:23:04.525]                       else if (inherits(cond, "warning")) {
[13:23:04.525]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.525]                         if (muffled) 
[13:23:04.525]                           invokeRestart("muffleWarning")
[13:23:04.525]                       }
[13:23:04.525]                       else if (inherits(cond, "condition")) {
[13:23:04.525]                         if (!is.null(pattern)) {
[13:23:04.525]                           computeRestarts <- base::computeRestarts
[13:23:04.525]                           grepl <- base::grepl
[13:23:04.525]                           restarts <- computeRestarts(cond)
[13:23:04.525]                           for (restart in restarts) {
[13:23:04.525]                             name <- restart$name
[13:23:04.525]                             if (is.null(name)) 
[13:23:04.525]                               next
[13:23:04.525]                             if (!grepl(pattern, name)) 
[13:23:04.525]                               next
[13:23:04.525]                             invokeRestart(restart)
[13:23:04.525]                             muffled <- TRUE
[13:23:04.525]                             break
[13:23:04.525]                           }
[13:23:04.525]                         }
[13:23:04.525]                       }
[13:23:04.525]                       invisible(muffled)
[13:23:04.525]                     }
[13:23:04.525]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.525]                   }
[13:23:04.525]                 }
[13:23:04.525]                 else {
[13:23:04.525]                   if (TRUE) {
[13:23:04.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.525]                     {
[13:23:04.525]                       inherits <- base::inherits
[13:23:04.525]                       invokeRestart <- base::invokeRestart
[13:23:04.525]                       is.null <- base::is.null
[13:23:04.525]                       muffled <- FALSE
[13:23:04.525]                       if (inherits(cond, "message")) {
[13:23:04.525]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.525]                         if (muffled) 
[13:23:04.525]                           invokeRestart("muffleMessage")
[13:23:04.525]                       }
[13:23:04.525]                       else if (inherits(cond, "warning")) {
[13:23:04.525]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.525]                         if (muffled) 
[13:23:04.525]                           invokeRestart("muffleWarning")
[13:23:04.525]                       }
[13:23:04.525]                       else if (inherits(cond, "condition")) {
[13:23:04.525]                         if (!is.null(pattern)) {
[13:23:04.525]                           computeRestarts <- base::computeRestarts
[13:23:04.525]                           grepl <- base::grepl
[13:23:04.525]                           restarts <- computeRestarts(cond)
[13:23:04.525]                           for (restart in restarts) {
[13:23:04.525]                             name <- restart$name
[13:23:04.525]                             if (is.null(name)) 
[13:23:04.525]                               next
[13:23:04.525]                             if (!grepl(pattern, name)) 
[13:23:04.525]                               next
[13:23:04.525]                             invokeRestart(restart)
[13:23:04.525]                             muffled <- TRUE
[13:23:04.525]                             break
[13:23:04.525]                           }
[13:23:04.525]                         }
[13:23:04.525]                       }
[13:23:04.525]                       invisible(muffled)
[13:23:04.525]                     }
[13:23:04.525]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.525]                   }
[13:23:04.525]                 }
[13:23:04.525]             }
[13:23:04.525]         }))
[13:23:04.525]     }, error = function(ex) {
[13:23:04.525]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.525]                 ...future.rng), started = ...future.startTime, 
[13:23:04.525]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.525]             version = "1.8"), class = "FutureResult")
[13:23:04.525]     }, finally = {
[13:23:04.525]         if (!identical(...future.workdir, getwd())) 
[13:23:04.525]             setwd(...future.workdir)
[13:23:04.525]         {
[13:23:04.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.525]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.525]             }
[13:23:04.525]             base::options(...future.oldOptions)
[13:23:04.525]             if (.Platform$OS.type == "windows") {
[13:23:04.525]                 old_names <- names(...future.oldEnvVars)
[13:23:04.525]                 envs <- base::Sys.getenv()
[13:23:04.525]                 names <- names(envs)
[13:23:04.525]                 common <- intersect(names, old_names)
[13:23:04.525]                 added <- setdiff(names, old_names)
[13:23:04.525]                 removed <- setdiff(old_names, names)
[13:23:04.525]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.525]                   envs[common]]
[13:23:04.525]                 NAMES <- toupper(changed)
[13:23:04.525]                 args <- list()
[13:23:04.525]                 for (kk in seq_along(NAMES)) {
[13:23:04.525]                   name <- changed[[kk]]
[13:23:04.525]                   NAME <- NAMES[[kk]]
[13:23:04.525]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.525]                     next
[13:23:04.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.525]                 }
[13:23:04.525]                 NAMES <- toupper(added)
[13:23:04.525]                 for (kk in seq_along(NAMES)) {
[13:23:04.525]                   name <- added[[kk]]
[13:23:04.525]                   NAME <- NAMES[[kk]]
[13:23:04.525]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.525]                     next
[13:23:04.525]                   args[[name]] <- ""
[13:23:04.525]                 }
[13:23:04.525]                 NAMES <- toupper(removed)
[13:23:04.525]                 for (kk in seq_along(NAMES)) {
[13:23:04.525]                   name <- removed[[kk]]
[13:23:04.525]                   NAME <- NAMES[[kk]]
[13:23:04.525]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.525]                     next
[13:23:04.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.525]                 }
[13:23:04.525]                 if (length(args) > 0) 
[13:23:04.525]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.525]             }
[13:23:04.525]             else {
[13:23:04.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.525]             }
[13:23:04.525]             {
[13:23:04.525]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.525]                   0L) {
[13:23:04.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.525]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.525]                   base::options(opts)
[13:23:04.525]                 }
[13:23:04.525]                 {
[13:23:04.525]                   {
[13:23:04.525]                     NULL
[13:23:04.525]                     RNGkind("Mersenne-Twister")
[13:23:04.525]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.525]                       inherits = FALSE)
[13:23:04.525]                   }
[13:23:04.525]                   options(future.plan = NULL)
[13:23:04.525]                   if (is.na(NA_character_)) 
[13:23:04.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.525]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.525]                   {
[13:23:04.525]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.525]                     if (!future$lazy) 
[13:23:04.525]                       future <- run(future)
[13:23:04.525]                     invisible(future)
[13:23:04.525]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.525]                 }
[13:23:04.525]             }
[13:23:04.525]         }
[13:23:04.525]     })
[13:23:04.525]     if (TRUE) {
[13:23:04.525]         base::sink(type = "output", split = FALSE)
[13:23:04.525]         if (TRUE) {
[13:23:04.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.525]         }
[13:23:04.525]         else {
[13:23:04.525]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.525]         }
[13:23:04.525]         base::close(...future.stdout)
[13:23:04.525]         ...future.stdout <- NULL
[13:23:04.525]     }
[13:23:04.525]     ...future.result$conditions <- ...future.conditions
[13:23:04.525]     ...future.result$finished <- base::Sys.time()
[13:23:04.525]     ...future.result
[13:23:04.525] }
[13:23:04.527] plan(): Setting new future strategy stack:
[13:23:04.527] List of future strategies:
[13:23:04.527] 1. sequential:
[13:23:04.527]    - args: function (..., envir = parent.frame())
[13:23:04.527]    - tweaked: FALSE
[13:23:04.527]    - call: NULL
[13:23:04.527] plan(): nbrOfWorkers() = 1
[13:23:04.528] plan(): Setting new future strategy stack:
[13:23:04.528] List of future strategies:
[13:23:04.528] 1. sequential:
[13:23:04.528]    - args: function (..., envir = parent.frame())
[13:23:04.528]    - tweaked: FALSE
[13:23:04.528]    - call: future::plan("sequential")
[13:23:04.529] plan(): nbrOfWorkers() = 1
[13:23:04.529] SequentialFuture started (and completed)
[13:23:04.529] - Launch lazy future ... done
[13:23:04.529] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'reset') ...
*** FutureRegistry('multicore-4f4cfdf2-df38-c804-62b9-c18859e27acf', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:23:04.533] getGlobalsAndPackages() ...
[13:23:04.533] Searching for globals...
[13:23:04.533] - globals found: [1] ‘{’
[13:23:04.534] Searching for globals ... DONE
[13:23:04.534] Resolving globals: FALSE
[13:23:04.534] 
[13:23:04.534] 
[13:23:04.534] getGlobalsAndPackages() ... DONE
[13:23:04.534] run() for ‘Future’ ...
[13:23:04.534] - state: ‘created’
[13:23:04.535] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.535] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.535] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.535]   - Field: ‘label’
[13:23:04.535]   - Field: ‘local’
[13:23:04.535]   - Field: ‘owner’
[13:23:04.535]   - Field: ‘envir’
[13:23:04.535]   - Field: ‘packages’
[13:23:04.536]   - Field: ‘gc’
[13:23:04.536]   - Field: ‘conditions’
[13:23:04.536]   - Field: ‘expr’
[13:23:04.536]   - Field: ‘uuid’
[13:23:04.536]   - Field: ‘seed’
[13:23:04.536]   - Field: ‘version’
[13:23:04.536]   - Field: ‘result’
[13:23:04.536]   - Field: ‘asynchronous’
[13:23:04.536]   - Field: ‘calls’
[13:23:04.536]   - Field: ‘globals’
[13:23:04.536]   - Field: ‘stdout’
[13:23:04.537]   - Field: ‘earlySignal’
[13:23:04.537]   - Field: ‘lazy’
[13:23:04.537]   - Field: ‘state’
[13:23:04.537] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.537] - Launch lazy future ...
[13:23:04.537] Packages needed by the future expression (n = 0): <none>
[13:23:04.537] Packages needed by future strategies (n = 0): <none>
[13:23:04.538] {
[13:23:04.538]     {
[13:23:04.538]         {
[13:23:04.538]             ...future.startTime <- base::Sys.time()
[13:23:04.538]             {
[13:23:04.538]                 {
[13:23:04.538]                   {
[13:23:04.538]                     base::local({
[13:23:04.538]                       has_future <- base::requireNamespace("future", 
[13:23:04.538]                         quietly = TRUE)
[13:23:04.538]                       if (has_future) {
[13:23:04.538]                         ns <- base::getNamespace("future")
[13:23:04.538]                         version <- ns[[".package"]][["version"]]
[13:23:04.538]                         if (is.null(version)) 
[13:23:04.538]                           version <- utils::packageVersion("future")
[13:23:04.538]                       }
[13:23:04.538]                       else {
[13:23:04.538]                         version <- NULL
[13:23:04.538]                       }
[13:23:04.538]                       if (!has_future || version < "1.8.0") {
[13:23:04.538]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.538]                           "", base::R.version$version.string), 
[13:23:04.538]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.538]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.538]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.538]                             "release", "version")], collapse = " "), 
[13:23:04.538]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.538]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.538]                           info)
[13:23:04.538]                         info <- base::paste(info, collapse = "; ")
[13:23:04.538]                         if (!has_future) {
[13:23:04.538]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.538]                             info)
[13:23:04.538]                         }
[13:23:04.538]                         else {
[13:23:04.538]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.538]                             info, version)
[13:23:04.538]                         }
[13:23:04.538]                         base::stop(msg)
[13:23:04.538]                       }
[13:23:04.538]                     })
[13:23:04.538]                   }
[13:23:04.538]                   options(future.plan = NULL)
[13:23:04.538]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.538]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.538]                 }
[13:23:04.538]                 ...future.workdir <- getwd()
[13:23:04.538]             }
[13:23:04.538]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.538]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.538]         }
[13:23:04.538]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.538]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.538]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.538]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.538]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.538]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.538]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.538]             base::names(...future.oldOptions))
[13:23:04.538]     }
[13:23:04.538]     if (FALSE) {
[13:23:04.538]     }
[13:23:04.538]     else {
[13:23:04.538]         if (TRUE) {
[13:23:04.538]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.538]                 open = "w")
[13:23:04.538]         }
[13:23:04.538]         else {
[13:23:04.538]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.538]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.538]         }
[13:23:04.538]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.538]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.538]             base::sink(type = "output", split = FALSE)
[13:23:04.538]             base::close(...future.stdout)
[13:23:04.538]         }, add = TRUE)
[13:23:04.538]     }
[13:23:04.538]     ...future.frame <- base::sys.nframe()
[13:23:04.538]     ...future.conditions <- base::list()
[13:23:04.538]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.538]     if (FALSE) {
[13:23:04.538]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.538]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.538]     }
[13:23:04.538]     ...future.result <- base::tryCatch({
[13:23:04.538]         base::withCallingHandlers({
[13:23:04.538]             ...future.value <- base::withVisible(base::local({
[13:23:04.538]                 1
[13:23:04.538]             }))
[13:23:04.538]             future::FutureResult(value = ...future.value$value, 
[13:23:04.538]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.538]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.538]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.538]                     ...future.globalenv.names))
[13:23:04.538]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.538]         }, condition = base::local({
[13:23:04.538]             c <- base::c
[13:23:04.538]             inherits <- base::inherits
[13:23:04.538]             invokeRestart <- base::invokeRestart
[13:23:04.538]             length <- base::length
[13:23:04.538]             list <- base::list
[13:23:04.538]             seq.int <- base::seq.int
[13:23:04.538]             signalCondition <- base::signalCondition
[13:23:04.538]             sys.calls <- base::sys.calls
[13:23:04.538]             `[[` <- base::`[[`
[13:23:04.538]             `+` <- base::`+`
[13:23:04.538]             `<<-` <- base::`<<-`
[13:23:04.538]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.538]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.538]                   3L)]
[13:23:04.538]             }
[13:23:04.538]             function(cond) {
[13:23:04.538]                 is_error <- inherits(cond, "error")
[13:23:04.538]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.538]                   NULL)
[13:23:04.538]                 if (is_error) {
[13:23:04.538]                   sessionInformation <- function() {
[13:23:04.538]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.538]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.538]                       search = base::search(), system = base::Sys.info())
[13:23:04.538]                   }
[13:23:04.538]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.538]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.538]                     cond$call), session = sessionInformation(), 
[13:23:04.538]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.538]                   signalCondition(cond)
[13:23:04.538]                 }
[13:23:04.538]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.538]                 "immediateCondition"))) {
[13:23:04.538]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.538]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.538]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.538]                   if (TRUE && !signal) {
[13:23:04.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.538]                     {
[13:23:04.538]                       inherits <- base::inherits
[13:23:04.538]                       invokeRestart <- base::invokeRestart
[13:23:04.538]                       is.null <- base::is.null
[13:23:04.538]                       muffled <- FALSE
[13:23:04.538]                       if (inherits(cond, "message")) {
[13:23:04.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.538]                         if (muffled) 
[13:23:04.538]                           invokeRestart("muffleMessage")
[13:23:04.538]                       }
[13:23:04.538]                       else if (inherits(cond, "warning")) {
[13:23:04.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.538]                         if (muffled) 
[13:23:04.538]                           invokeRestart("muffleWarning")
[13:23:04.538]                       }
[13:23:04.538]                       else if (inherits(cond, "condition")) {
[13:23:04.538]                         if (!is.null(pattern)) {
[13:23:04.538]                           computeRestarts <- base::computeRestarts
[13:23:04.538]                           grepl <- base::grepl
[13:23:04.538]                           restarts <- computeRestarts(cond)
[13:23:04.538]                           for (restart in restarts) {
[13:23:04.538]                             name <- restart$name
[13:23:04.538]                             if (is.null(name)) 
[13:23:04.538]                               next
[13:23:04.538]                             if (!grepl(pattern, name)) 
[13:23:04.538]                               next
[13:23:04.538]                             invokeRestart(restart)
[13:23:04.538]                             muffled <- TRUE
[13:23:04.538]                             break
[13:23:04.538]                           }
[13:23:04.538]                         }
[13:23:04.538]                       }
[13:23:04.538]                       invisible(muffled)
[13:23:04.538]                     }
[13:23:04.538]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.538]                   }
[13:23:04.538]                 }
[13:23:04.538]                 else {
[13:23:04.538]                   if (TRUE) {
[13:23:04.538]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.538]                     {
[13:23:04.538]                       inherits <- base::inherits
[13:23:04.538]                       invokeRestart <- base::invokeRestart
[13:23:04.538]                       is.null <- base::is.null
[13:23:04.538]                       muffled <- FALSE
[13:23:04.538]                       if (inherits(cond, "message")) {
[13:23:04.538]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.538]                         if (muffled) 
[13:23:04.538]                           invokeRestart("muffleMessage")
[13:23:04.538]                       }
[13:23:04.538]                       else if (inherits(cond, "warning")) {
[13:23:04.538]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.538]                         if (muffled) 
[13:23:04.538]                           invokeRestart("muffleWarning")
[13:23:04.538]                       }
[13:23:04.538]                       else if (inherits(cond, "condition")) {
[13:23:04.538]                         if (!is.null(pattern)) {
[13:23:04.538]                           computeRestarts <- base::computeRestarts
[13:23:04.538]                           grepl <- base::grepl
[13:23:04.538]                           restarts <- computeRestarts(cond)
[13:23:04.538]                           for (restart in restarts) {
[13:23:04.538]                             name <- restart$name
[13:23:04.538]                             if (is.null(name)) 
[13:23:04.538]                               next
[13:23:04.538]                             if (!grepl(pattern, name)) 
[13:23:04.538]                               next
[13:23:04.538]                             invokeRestart(restart)
[13:23:04.538]                             muffled <- TRUE
[13:23:04.538]                             break
[13:23:04.538]                           }
[13:23:04.538]                         }
[13:23:04.538]                       }
[13:23:04.538]                       invisible(muffled)
[13:23:04.538]                     }
[13:23:04.538]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.538]                   }
[13:23:04.538]                 }
[13:23:04.538]             }
[13:23:04.538]         }))
[13:23:04.538]     }, error = function(ex) {
[13:23:04.538]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.538]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.538]                 ...future.rng), started = ...future.startTime, 
[13:23:04.538]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.538]             version = "1.8"), class = "FutureResult")
[13:23:04.538]     }, finally = {
[13:23:04.538]         if (!identical(...future.workdir, getwd())) 
[13:23:04.538]             setwd(...future.workdir)
[13:23:04.538]         {
[13:23:04.538]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.538]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.538]             }
[13:23:04.538]             base::options(...future.oldOptions)
[13:23:04.538]             if (.Platform$OS.type == "windows") {
[13:23:04.538]                 old_names <- names(...future.oldEnvVars)
[13:23:04.538]                 envs <- base::Sys.getenv()
[13:23:04.538]                 names <- names(envs)
[13:23:04.538]                 common <- intersect(names, old_names)
[13:23:04.538]                 added <- setdiff(names, old_names)
[13:23:04.538]                 removed <- setdiff(old_names, names)
[13:23:04.538]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.538]                   envs[common]]
[13:23:04.538]                 NAMES <- toupper(changed)
[13:23:04.538]                 args <- list()
[13:23:04.538]                 for (kk in seq_along(NAMES)) {
[13:23:04.538]                   name <- changed[[kk]]
[13:23:04.538]                   NAME <- NAMES[[kk]]
[13:23:04.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.538]                     next
[13:23:04.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.538]                 }
[13:23:04.538]                 NAMES <- toupper(added)
[13:23:04.538]                 for (kk in seq_along(NAMES)) {
[13:23:04.538]                   name <- added[[kk]]
[13:23:04.538]                   NAME <- NAMES[[kk]]
[13:23:04.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.538]                     next
[13:23:04.538]                   args[[name]] <- ""
[13:23:04.538]                 }
[13:23:04.538]                 NAMES <- toupper(removed)
[13:23:04.538]                 for (kk in seq_along(NAMES)) {
[13:23:04.538]                   name <- removed[[kk]]
[13:23:04.538]                   NAME <- NAMES[[kk]]
[13:23:04.538]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.538]                     next
[13:23:04.538]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.538]                 }
[13:23:04.538]                 if (length(args) > 0) 
[13:23:04.538]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.538]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.538]             }
[13:23:04.538]             else {
[13:23:04.538]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.538]             }
[13:23:04.538]             {
[13:23:04.538]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.538]                   0L) {
[13:23:04.538]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.538]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.538]                   base::options(opts)
[13:23:04.538]                 }
[13:23:04.538]                 {
[13:23:04.538]                   {
[13:23:04.538]                     NULL
[13:23:04.538]                     RNGkind("Mersenne-Twister")
[13:23:04.538]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.538]                       inherits = FALSE)
[13:23:04.538]                   }
[13:23:04.538]                   options(future.plan = NULL)
[13:23:04.538]                   if (is.na(NA_character_)) 
[13:23:04.538]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.538]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.538]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.538]                   {
[13:23:04.538]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.538]                     if (!future$lazy) 
[13:23:04.538]                       future <- run(future)
[13:23:04.538]                     invisible(future)
[13:23:04.538]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.538]                 }
[13:23:04.538]             }
[13:23:04.538]         }
[13:23:04.538]     })
[13:23:04.538]     if (TRUE) {
[13:23:04.538]         base::sink(type = "output", split = FALSE)
[13:23:04.538]         if (TRUE) {
[13:23:04.538]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.538]         }
[13:23:04.538]         else {
[13:23:04.538]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.538]         }
[13:23:04.538]         base::close(...future.stdout)
[13:23:04.538]         ...future.stdout <- NULL
[13:23:04.538]     }
[13:23:04.538]     ...future.result$conditions <- ...future.conditions
[13:23:04.538]     ...future.result$finished <- base::Sys.time()
[13:23:04.538]     ...future.result
[13:23:04.538] }
[13:23:04.540] plan(): Setting new future strategy stack:
[13:23:04.540] List of future strategies:
[13:23:04.540] 1. sequential:
[13:23:04.540]    - args: function (..., envir = parent.frame())
[13:23:04.540]    - tweaked: FALSE
[13:23:04.540]    - call: NULL
[13:23:04.540] plan(): nbrOfWorkers() = 1
[13:23:04.541] plan(): Setting new future strategy stack:
[13:23:04.541] List of future strategies:
[13:23:04.541] 1. sequential:
[13:23:04.541]    - args: function (..., envir = parent.frame())
[13:23:04.541]    - tweaked: FALSE
[13:23:04.541]    - call: future::plan("sequential")
[13:23:04.541] plan(): nbrOfWorkers() = 1
[13:23:04.542] SequentialFuture started (and completed)
[13:23:04.542] - Launch lazy future ... done
[13:23:04.542] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[13:23:04.543] getGlobalsAndPackages() ...
[13:23:04.543] Searching for globals...
[13:23:04.544] - globals found: [1] ‘{’
[13:23:04.544] Searching for globals ... DONE
[13:23:04.544] Resolving globals: FALSE
[13:23:04.544] 
[13:23:04.544] 
[13:23:04.545] getGlobalsAndPackages() ... DONE
[13:23:04.545] run() for ‘Future’ ...
[13:23:04.545] - state: ‘created’
[13:23:04.545] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.545] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.545] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.546]   - Field: ‘label’
[13:23:04.546]   - Field: ‘local’
[13:23:04.546]   - Field: ‘owner’
[13:23:04.546]   - Field: ‘envir’
[13:23:04.546]   - Field: ‘packages’
[13:23:04.546]   - Field: ‘gc’
[13:23:04.546]   - Field: ‘conditions’
[13:23:04.546]   - Field: ‘expr’
[13:23:04.546]   - Field: ‘uuid’
[13:23:04.546]   - Field: ‘seed’
[13:23:04.546]   - Field: ‘version’
[13:23:04.547]   - Field: ‘result’
[13:23:04.547]   - Field: ‘asynchronous’
[13:23:04.547]   - Field: ‘calls’
[13:23:04.547]   - Field: ‘globals’
[13:23:04.547]   - Field: ‘stdout’
[13:23:04.547]   - Field: ‘earlySignal’
[13:23:04.547]   - Field: ‘lazy’
[13:23:04.547]   - Field: ‘state’
[13:23:04.547] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.547] - Launch lazy future ...
[13:23:04.548] Packages needed by the future expression (n = 0): <none>
[13:23:04.548] Packages needed by future strategies (n = 0): <none>
[13:23:04.548] {
[13:23:04.548]     {
[13:23:04.548]         {
[13:23:04.548]             ...future.startTime <- base::Sys.time()
[13:23:04.548]             {
[13:23:04.548]                 {
[13:23:04.548]                   {
[13:23:04.548]                     base::local({
[13:23:04.548]                       has_future <- base::requireNamespace("future", 
[13:23:04.548]                         quietly = TRUE)
[13:23:04.548]                       if (has_future) {
[13:23:04.548]                         ns <- base::getNamespace("future")
[13:23:04.548]                         version <- ns[[".package"]][["version"]]
[13:23:04.548]                         if (is.null(version)) 
[13:23:04.548]                           version <- utils::packageVersion("future")
[13:23:04.548]                       }
[13:23:04.548]                       else {
[13:23:04.548]                         version <- NULL
[13:23:04.548]                       }
[13:23:04.548]                       if (!has_future || version < "1.8.0") {
[13:23:04.548]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.548]                           "", base::R.version$version.string), 
[13:23:04.548]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.548]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.548]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.548]                             "release", "version")], collapse = " "), 
[13:23:04.548]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.548]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.548]                           info)
[13:23:04.548]                         info <- base::paste(info, collapse = "; ")
[13:23:04.548]                         if (!has_future) {
[13:23:04.548]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.548]                             info)
[13:23:04.548]                         }
[13:23:04.548]                         else {
[13:23:04.548]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.548]                             info, version)
[13:23:04.548]                         }
[13:23:04.548]                         base::stop(msg)
[13:23:04.548]                       }
[13:23:04.548]                     })
[13:23:04.548]                   }
[13:23:04.548]                   options(future.plan = NULL)
[13:23:04.548]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.548]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.548]                 }
[13:23:04.548]                 ...future.workdir <- getwd()
[13:23:04.548]             }
[13:23:04.548]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.548]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.548]         }
[13:23:04.548]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.548]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.548]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.548]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.548]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.548]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.548]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.548]             base::names(...future.oldOptions))
[13:23:04.548]     }
[13:23:04.548]     if (FALSE) {
[13:23:04.548]     }
[13:23:04.548]     else {
[13:23:04.548]         if (TRUE) {
[13:23:04.548]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.548]                 open = "w")
[13:23:04.548]         }
[13:23:04.548]         else {
[13:23:04.548]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.548]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.548]         }
[13:23:04.548]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.548]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.548]             base::sink(type = "output", split = FALSE)
[13:23:04.548]             base::close(...future.stdout)
[13:23:04.548]         }, add = TRUE)
[13:23:04.548]     }
[13:23:04.548]     ...future.frame <- base::sys.nframe()
[13:23:04.548]     ...future.conditions <- base::list()
[13:23:04.548]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.548]     if (FALSE) {
[13:23:04.548]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.548]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.548]     }
[13:23:04.548]     ...future.result <- base::tryCatch({
[13:23:04.548]         base::withCallingHandlers({
[13:23:04.548]             ...future.value <- base::withVisible(base::local({
[13:23:04.548]                 2
[13:23:04.548]             }))
[13:23:04.548]             future::FutureResult(value = ...future.value$value, 
[13:23:04.548]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.548]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.548]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.548]                     ...future.globalenv.names))
[13:23:04.548]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.548]         }, condition = base::local({
[13:23:04.548]             c <- base::c
[13:23:04.548]             inherits <- base::inherits
[13:23:04.548]             invokeRestart <- base::invokeRestart
[13:23:04.548]             length <- base::length
[13:23:04.548]             list <- base::list
[13:23:04.548]             seq.int <- base::seq.int
[13:23:04.548]             signalCondition <- base::signalCondition
[13:23:04.548]             sys.calls <- base::sys.calls
[13:23:04.548]             `[[` <- base::`[[`
[13:23:04.548]             `+` <- base::`+`
[13:23:04.548]             `<<-` <- base::`<<-`
[13:23:04.548]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.548]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.548]                   3L)]
[13:23:04.548]             }
[13:23:04.548]             function(cond) {
[13:23:04.548]                 is_error <- inherits(cond, "error")
[13:23:04.548]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.548]                   NULL)
[13:23:04.548]                 if (is_error) {
[13:23:04.548]                   sessionInformation <- function() {
[13:23:04.548]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.548]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.548]                       search = base::search(), system = base::Sys.info())
[13:23:04.548]                   }
[13:23:04.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.548]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.548]                     cond$call), session = sessionInformation(), 
[13:23:04.548]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.548]                   signalCondition(cond)
[13:23:04.548]                 }
[13:23:04.548]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.548]                 "immediateCondition"))) {
[13:23:04.548]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.548]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.548]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.548]                   if (TRUE && !signal) {
[13:23:04.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.548]                     {
[13:23:04.548]                       inherits <- base::inherits
[13:23:04.548]                       invokeRestart <- base::invokeRestart
[13:23:04.548]                       is.null <- base::is.null
[13:23:04.548]                       muffled <- FALSE
[13:23:04.548]                       if (inherits(cond, "message")) {
[13:23:04.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.548]                         if (muffled) 
[13:23:04.548]                           invokeRestart("muffleMessage")
[13:23:04.548]                       }
[13:23:04.548]                       else if (inherits(cond, "warning")) {
[13:23:04.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.548]                         if (muffled) 
[13:23:04.548]                           invokeRestart("muffleWarning")
[13:23:04.548]                       }
[13:23:04.548]                       else if (inherits(cond, "condition")) {
[13:23:04.548]                         if (!is.null(pattern)) {
[13:23:04.548]                           computeRestarts <- base::computeRestarts
[13:23:04.548]                           grepl <- base::grepl
[13:23:04.548]                           restarts <- computeRestarts(cond)
[13:23:04.548]                           for (restart in restarts) {
[13:23:04.548]                             name <- restart$name
[13:23:04.548]                             if (is.null(name)) 
[13:23:04.548]                               next
[13:23:04.548]                             if (!grepl(pattern, name)) 
[13:23:04.548]                               next
[13:23:04.548]                             invokeRestart(restart)
[13:23:04.548]                             muffled <- TRUE
[13:23:04.548]                             break
[13:23:04.548]                           }
[13:23:04.548]                         }
[13:23:04.548]                       }
[13:23:04.548]                       invisible(muffled)
[13:23:04.548]                     }
[13:23:04.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.548]                   }
[13:23:04.548]                 }
[13:23:04.548]                 else {
[13:23:04.548]                   if (TRUE) {
[13:23:04.548]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.548]                     {
[13:23:04.548]                       inherits <- base::inherits
[13:23:04.548]                       invokeRestart <- base::invokeRestart
[13:23:04.548]                       is.null <- base::is.null
[13:23:04.548]                       muffled <- FALSE
[13:23:04.548]                       if (inherits(cond, "message")) {
[13:23:04.548]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.548]                         if (muffled) 
[13:23:04.548]                           invokeRestart("muffleMessage")
[13:23:04.548]                       }
[13:23:04.548]                       else if (inherits(cond, "warning")) {
[13:23:04.548]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.548]                         if (muffled) 
[13:23:04.548]                           invokeRestart("muffleWarning")
[13:23:04.548]                       }
[13:23:04.548]                       else if (inherits(cond, "condition")) {
[13:23:04.548]                         if (!is.null(pattern)) {
[13:23:04.548]                           computeRestarts <- base::computeRestarts
[13:23:04.548]                           grepl <- base::grepl
[13:23:04.548]                           restarts <- computeRestarts(cond)
[13:23:04.548]                           for (restart in restarts) {
[13:23:04.548]                             name <- restart$name
[13:23:04.548]                             if (is.null(name)) 
[13:23:04.548]                               next
[13:23:04.548]                             if (!grepl(pattern, name)) 
[13:23:04.548]                               next
[13:23:04.548]                             invokeRestart(restart)
[13:23:04.548]                             muffled <- TRUE
[13:23:04.548]                             break
[13:23:04.548]                           }
[13:23:04.548]                         }
[13:23:04.548]                       }
[13:23:04.548]                       invisible(muffled)
[13:23:04.548]                     }
[13:23:04.548]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.548]                   }
[13:23:04.548]                 }
[13:23:04.548]             }
[13:23:04.548]         }))
[13:23:04.548]     }, error = function(ex) {
[13:23:04.548]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.548]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.548]                 ...future.rng), started = ...future.startTime, 
[13:23:04.548]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.548]             version = "1.8"), class = "FutureResult")
[13:23:04.548]     }, finally = {
[13:23:04.548]         if (!identical(...future.workdir, getwd())) 
[13:23:04.548]             setwd(...future.workdir)
[13:23:04.548]         {
[13:23:04.548]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.548]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.548]             }
[13:23:04.548]             base::options(...future.oldOptions)
[13:23:04.548]             if (.Platform$OS.type == "windows") {
[13:23:04.548]                 old_names <- names(...future.oldEnvVars)
[13:23:04.548]                 envs <- base::Sys.getenv()
[13:23:04.548]                 names <- names(envs)
[13:23:04.548]                 common <- intersect(names, old_names)
[13:23:04.548]                 added <- setdiff(names, old_names)
[13:23:04.548]                 removed <- setdiff(old_names, names)
[13:23:04.548]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.548]                   envs[common]]
[13:23:04.548]                 NAMES <- toupper(changed)
[13:23:04.548]                 args <- list()
[13:23:04.548]                 for (kk in seq_along(NAMES)) {
[13:23:04.548]                   name <- changed[[kk]]
[13:23:04.548]                   NAME <- NAMES[[kk]]
[13:23:04.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.548]                     next
[13:23:04.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.548]                 }
[13:23:04.548]                 NAMES <- toupper(added)
[13:23:04.548]                 for (kk in seq_along(NAMES)) {
[13:23:04.548]                   name <- added[[kk]]
[13:23:04.548]                   NAME <- NAMES[[kk]]
[13:23:04.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.548]                     next
[13:23:04.548]                   args[[name]] <- ""
[13:23:04.548]                 }
[13:23:04.548]                 NAMES <- toupper(removed)
[13:23:04.548]                 for (kk in seq_along(NAMES)) {
[13:23:04.548]                   name <- removed[[kk]]
[13:23:04.548]                   NAME <- NAMES[[kk]]
[13:23:04.548]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.548]                     next
[13:23:04.548]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.548]                 }
[13:23:04.548]                 if (length(args) > 0) 
[13:23:04.548]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.548]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.548]             }
[13:23:04.548]             else {
[13:23:04.548]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.548]             }
[13:23:04.548]             {
[13:23:04.548]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.548]                   0L) {
[13:23:04.548]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.548]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.548]                   base::options(opts)
[13:23:04.548]                 }
[13:23:04.548]                 {
[13:23:04.548]                   {
[13:23:04.548]                     NULL
[13:23:04.548]                     RNGkind("Mersenne-Twister")
[13:23:04.548]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.548]                       inherits = FALSE)
[13:23:04.548]                   }
[13:23:04.548]                   options(future.plan = NULL)
[13:23:04.548]                   if (is.na(NA_character_)) 
[13:23:04.548]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.548]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.548]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.548]                   {
[13:23:04.548]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.548]                     if (!future$lazy) 
[13:23:04.548]                       future <- run(future)
[13:23:04.548]                     invisible(future)
[13:23:04.548]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.548]                 }
[13:23:04.548]             }
[13:23:04.548]         }
[13:23:04.548]     })
[13:23:04.548]     if (TRUE) {
[13:23:04.548]         base::sink(type = "output", split = FALSE)
[13:23:04.548]         if (TRUE) {
[13:23:04.548]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.548]         }
[13:23:04.548]         else {
[13:23:04.548]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.548]         }
[13:23:04.548]         base::close(...future.stdout)
[13:23:04.548]         ...future.stdout <- NULL
[13:23:04.548]     }
[13:23:04.548]     ...future.result$conditions <- ...future.conditions
[13:23:04.548]     ...future.result$finished <- base::Sys.time()
[13:23:04.548]     ...future.result
[13:23:04.548] }
[13:23:04.550] plan(): Setting new future strategy stack:
[13:23:04.550] List of future strategies:
[13:23:04.550] 1. sequential:
[13:23:04.550]    - args: function (..., envir = parent.frame())
[13:23:04.550]    - tweaked: FALSE
[13:23:04.550]    - call: NULL
[13:23:04.551] plan(): nbrOfWorkers() = 1
[13:23:04.551] plan(): Setting new future strategy stack:
[13:23:04.551] List of future strategies:
[13:23:04.551] 1. sequential:
[13:23:04.551]    - args: function (..., envir = parent.frame())
[13:23:04.551]    - tweaked: FALSE
[13:23:04.551]    - call: future::plan("sequential")
[13:23:04.552] plan(): nbrOfWorkers() = 1
[13:23:04.552] SequentialFuture started (and completed)
[13:23:04.552] - Launch lazy future ... done
[13:23:04.552] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[13:23:04.562] resolved() for ‘SequentialFuture’ ...
[13:23:04.562] - state: ‘finished’
[13:23:04.562] - run: FALSE
[13:23:04.562] - result: ‘FutureResult’
[13:23:04.562] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[13:23:04.563] getGlobalsAndPackages() ...
[13:23:04.563] Searching for globals...
[13:23:04.563] - globals found: [1] ‘{’
[13:23:04.566] Searching for globals ... DONE
[13:23:04.566] Resolving globals: FALSE
[13:23:04.566] 
[13:23:04.566] 
[13:23:04.566] getGlobalsAndPackages() ... DONE
[13:23:04.566] run() for ‘Future’ ...
[13:23:04.567] - state: ‘created’
[13:23:04.567] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.567] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.567] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.567]   - Field: ‘label’
[13:23:04.567]   - Field: ‘local’
[13:23:04.567]   - Field: ‘owner’
[13:23:04.568]   - Field: ‘envir’
[13:23:04.568]   - Field: ‘packages’
[13:23:04.568]   - Field: ‘gc’
[13:23:04.568]   - Field: ‘conditions’
[13:23:04.568]   - Field: ‘expr’
[13:23:04.568]   - Field: ‘uuid’
[13:23:04.568]   - Field: ‘seed’
[13:23:04.568]   - Field: ‘version’
[13:23:04.568]   - Field: ‘result’
[13:23:04.568]   - Field: ‘asynchronous’
[13:23:04.569]   - Field: ‘calls’
[13:23:04.569]   - Field: ‘globals’
[13:23:04.569]   - Field: ‘stdout’
[13:23:04.569]   - Field: ‘earlySignal’
[13:23:04.569]   - Field: ‘lazy’
[13:23:04.569]   - Field: ‘state’
[13:23:04.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.569] - Launch lazy future ...
[13:23:04.569] Packages needed by the future expression (n = 0): <none>
[13:23:04.570] Packages needed by future strategies (n = 0): <none>
[13:23:04.570] {
[13:23:04.570]     {
[13:23:04.570]         {
[13:23:04.570]             ...future.startTime <- base::Sys.time()
[13:23:04.570]             {
[13:23:04.570]                 {
[13:23:04.570]                   {
[13:23:04.570]                     base::local({
[13:23:04.570]                       has_future <- base::requireNamespace("future", 
[13:23:04.570]                         quietly = TRUE)
[13:23:04.570]                       if (has_future) {
[13:23:04.570]                         ns <- base::getNamespace("future")
[13:23:04.570]                         version <- ns[[".package"]][["version"]]
[13:23:04.570]                         if (is.null(version)) 
[13:23:04.570]                           version <- utils::packageVersion("future")
[13:23:04.570]                       }
[13:23:04.570]                       else {
[13:23:04.570]                         version <- NULL
[13:23:04.570]                       }
[13:23:04.570]                       if (!has_future || version < "1.8.0") {
[13:23:04.570]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.570]                           "", base::R.version$version.string), 
[13:23:04.570]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.570]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.570]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.570]                             "release", "version")], collapse = " "), 
[13:23:04.570]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.570]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.570]                           info)
[13:23:04.570]                         info <- base::paste(info, collapse = "; ")
[13:23:04.570]                         if (!has_future) {
[13:23:04.570]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.570]                             info)
[13:23:04.570]                         }
[13:23:04.570]                         else {
[13:23:04.570]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.570]                             info, version)
[13:23:04.570]                         }
[13:23:04.570]                         base::stop(msg)
[13:23:04.570]                       }
[13:23:04.570]                     })
[13:23:04.570]                   }
[13:23:04.570]                   options(future.plan = NULL)
[13:23:04.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.570]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.570]                 }
[13:23:04.570]                 ...future.workdir <- getwd()
[13:23:04.570]             }
[13:23:04.570]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.570]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.570]         }
[13:23:04.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.570]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.570]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.570]             base::names(...future.oldOptions))
[13:23:04.570]     }
[13:23:04.570]     if (FALSE) {
[13:23:04.570]     }
[13:23:04.570]     else {
[13:23:04.570]         if (TRUE) {
[13:23:04.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.570]                 open = "w")
[13:23:04.570]         }
[13:23:04.570]         else {
[13:23:04.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.570]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.570]         }
[13:23:04.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.570]             base::sink(type = "output", split = FALSE)
[13:23:04.570]             base::close(...future.stdout)
[13:23:04.570]         }, add = TRUE)
[13:23:04.570]     }
[13:23:04.570]     ...future.frame <- base::sys.nframe()
[13:23:04.570]     ...future.conditions <- base::list()
[13:23:04.570]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.570]     if (FALSE) {
[13:23:04.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.570]     }
[13:23:04.570]     ...future.result <- base::tryCatch({
[13:23:04.570]         base::withCallingHandlers({
[13:23:04.570]             ...future.value <- base::withVisible(base::local({
[13:23:04.570]                 2
[13:23:04.570]             }))
[13:23:04.570]             future::FutureResult(value = ...future.value$value, 
[13:23:04.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.570]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.570]                     ...future.globalenv.names))
[13:23:04.570]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.570]         }, condition = base::local({
[13:23:04.570]             c <- base::c
[13:23:04.570]             inherits <- base::inherits
[13:23:04.570]             invokeRestart <- base::invokeRestart
[13:23:04.570]             length <- base::length
[13:23:04.570]             list <- base::list
[13:23:04.570]             seq.int <- base::seq.int
[13:23:04.570]             signalCondition <- base::signalCondition
[13:23:04.570]             sys.calls <- base::sys.calls
[13:23:04.570]             `[[` <- base::`[[`
[13:23:04.570]             `+` <- base::`+`
[13:23:04.570]             `<<-` <- base::`<<-`
[13:23:04.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.570]                   3L)]
[13:23:04.570]             }
[13:23:04.570]             function(cond) {
[13:23:04.570]                 is_error <- inherits(cond, "error")
[13:23:04.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.570]                   NULL)
[13:23:04.570]                 if (is_error) {
[13:23:04.570]                   sessionInformation <- function() {
[13:23:04.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.570]                       search = base::search(), system = base::Sys.info())
[13:23:04.570]                   }
[13:23:04.570]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.570]                     cond$call), session = sessionInformation(), 
[13:23:04.570]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.570]                   signalCondition(cond)
[13:23:04.570]                 }
[13:23:04.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.570]                 "immediateCondition"))) {
[13:23:04.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.570]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.570]                   if (TRUE && !signal) {
[13:23:04.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.570]                     {
[13:23:04.570]                       inherits <- base::inherits
[13:23:04.570]                       invokeRestart <- base::invokeRestart
[13:23:04.570]                       is.null <- base::is.null
[13:23:04.570]                       muffled <- FALSE
[13:23:04.570]                       if (inherits(cond, "message")) {
[13:23:04.570]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.570]                         if (muffled) 
[13:23:04.570]                           invokeRestart("muffleMessage")
[13:23:04.570]                       }
[13:23:04.570]                       else if (inherits(cond, "warning")) {
[13:23:04.570]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.570]                         if (muffled) 
[13:23:04.570]                           invokeRestart("muffleWarning")
[13:23:04.570]                       }
[13:23:04.570]                       else if (inherits(cond, "condition")) {
[13:23:04.570]                         if (!is.null(pattern)) {
[13:23:04.570]                           computeRestarts <- base::computeRestarts
[13:23:04.570]                           grepl <- base::grepl
[13:23:04.570]                           restarts <- computeRestarts(cond)
[13:23:04.570]                           for (restart in restarts) {
[13:23:04.570]                             name <- restart$name
[13:23:04.570]                             if (is.null(name)) 
[13:23:04.570]                               next
[13:23:04.570]                             if (!grepl(pattern, name)) 
[13:23:04.570]                               next
[13:23:04.570]                             invokeRestart(restart)
[13:23:04.570]                             muffled <- TRUE
[13:23:04.570]                             break
[13:23:04.570]                           }
[13:23:04.570]                         }
[13:23:04.570]                       }
[13:23:04.570]                       invisible(muffled)
[13:23:04.570]                     }
[13:23:04.570]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.570]                   }
[13:23:04.570]                 }
[13:23:04.570]                 else {
[13:23:04.570]                   if (TRUE) {
[13:23:04.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.570]                     {
[13:23:04.570]                       inherits <- base::inherits
[13:23:04.570]                       invokeRestart <- base::invokeRestart
[13:23:04.570]                       is.null <- base::is.null
[13:23:04.570]                       muffled <- FALSE
[13:23:04.570]                       if (inherits(cond, "message")) {
[13:23:04.570]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.570]                         if (muffled) 
[13:23:04.570]                           invokeRestart("muffleMessage")
[13:23:04.570]                       }
[13:23:04.570]                       else if (inherits(cond, "warning")) {
[13:23:04.570]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.570]                         if (muffled) 
[13:23:04.570]                           invokeRestart("muffleWarning")
[13:23:04.570]                       }
[13:23:04.570]                       else if (inherits(cond, "condition")) {
[13:23:04.570]                         if (!is.null(pattern)) {
[13:23:04.570]                           computeRestarts <- base::computeRestarts
[13:23:04.570]                           grepl <- base::grepl
[13:23:04.570]                           restarts <- computeRestarts(cond)
[13:23:04.570]                           for (restart in restarts) {
[13:23:04.570]                             name <- restart$name
[13:23:04.570]                             if (is.null(name)) 
[13:23:04.570]                               next
[13:23:04.570]                             if (!grepl(pattern, name)) 
[13:23:04.570]                               next
[13:23:04.570]                             invokeRestart(restart)
[13:23:04.570]                             muffled <- TRUE
[13:23:04.570]                             break
[13:23:04.570]                           }
[13:23:04.570]                         }
[13:23:04.570]                       }
[13:23:04.570]                       invisible(muffled)
[13:23:04.570]                     }
[13:23:04.570]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.570]                   }
[13:23:04.570]                 }
[13:23:04.570]             }
[13:23:04.570]         }))
[13:23:04.570]     }, error = function(ex) {
[13:23:04.570]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.570]                 ...future.rng), started = ...future.startTime, 
[13:23:04.570]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.570]             version = "1.8"), class = "FutureResult")
[13:23:04.570]     }, finally = {
[13:23:04.570]         if (!identical(...future.workdir, getwd())) 
[13:23:04.570]             setwd(...future.workdir)
[13:23:04.570]         {
[13:23:04.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.570]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.570]             }
[13:23:04.570]             base::options(...future.oldOptions)
[13:23:04.570]             if (.Platform$OS.type == "windows") {
[13:23:04.570]                 old_names <- names(...future.oldEnvVars)
[13:23:04.570]                 envs <- base::Sys.getenv()
[13:23:04.570]                 names <- names(envs)
[13:23:04.570]                 common <- intersect(names, old_names)
[13:23:04.570]                 added <- setdiff(names, old_names)
[13:23:04.570]                 removed <- setdiff(old_names, names)
[13:23:04.570]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.570]                   envs[common]]
[13:23:04.570]                 NAMES <- toupper(changed)
[13:23:04.570]                 args <- list()
[13:23:04.570]                 for (kk in seq_along(NAMES)) {
[13:23:04.570]                   name <- changed[[kk]]
[13:23:04.570]                   NAME <- NAMES[[kk]]
[13:23:04.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.570]                     next
[13:23:04.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.570]                 }
[13:23:04.570]                 NAMES <- toupper(added)
[13:23:04.570]                 for (kk in seq_along(NAMES)) {
[13:23:04.570]                   name <- added[[kk]]
[13:23:04.570]                   NAME <- NAMES[[kk]]
[13:23:04.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.570]                     next
[13:23:04.570]                   args[[name]] <- ""
[13:23:04.570]                 }
[13:23:04.570]                 NAMES <- toupper(removed)
[13:23:04.570]                 for (kk in seq_along(NAMES)) {
[13:23:04.570]                   name <- removed[[kk]]
[13:23:04.570]                   NAME <- NAMES[[kk]]
[13:23:04.570]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.570]                     next
[13:23:04.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.570]                 }
[13:23:04.570]                 if (length(args) > 0) 
[13:23:04.570]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.570]             }
[13:23:04.570]             else {
[13:23:04.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.570]             }
[13:23:04.570]             {
[13:23:04.570]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.570]                   0L) {
[13:23:04.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.570]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.570]                   base::options(opts)
[13:23:04.570]                 }
[13:23:04.570]                 {
[13:23:04.570]                   {
[13:23:04.570]                     NULL
[13:23:04.570]                     RNGkind("Mersenne-Twister")
[13:23:04.570]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.570]                       inherits = FALSE)
[13:23:04.570]                   }
[13:23:04.570]                   options(future.plan = NULL)
[13:23:04.570]                   if (is.na(NA_character_)) 
[13:23:04.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.570]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.570]                   {
[13:23:04.570]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.570]                     if (!future$lazy) 
[13:23:04.570]                       future <- run(future)
[13:23:04.570]                     invisible(future)
[13:23:04.570]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.570]                 }
[13:23:04.570]             }
[13:23:04.570]         }
[13:23:04.570]     })
[13:23:04.570]     if (TRUE) {
[13:23:04.570]         base::sink(type = "output", split = FALSE)
[13:23:04.570]         if (TRUE) {
[13:23:04.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.570]         }
[13:23:04.570]         else {
[13:23:04.570]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.570]         }
[13:23:04.570]         base::close(...future.stdout)
[13:23:04.570]         ...future.stdout <- NULL
[13:23:04.570]     }
[13:23:04.570]     ...future.result$conditions <- ...future.conditions
[13:23:04.570]     ...future.result$finished <- base::Sys.time()
[13:23:04.570]     ...future.result
[13:23:04.570] }
[13:23:04.572] plan(): Setting new future strategy stack:
[13:23:04.572] List of future strategies:
[13:23:04.572] 1. sequential:
[13:23:04.572]    - args: function (..., envir = parent.frame())
[13:23:04.572]    - tweaked: FALSE
[13:23:04.572]    - call: NULL
[13:23:04.572] plan(): nbrOfWorkers() = 1
[13:23:04.573] plan(): Setting new future strategy stack:
[13:23:04.573] List of future strategies:
[13:23:04.573] 1. sequential:
[13:23:04.573]    - args: function (..., envir = parent.frame())
[13:23:04.573]    - tweaked: FALSE
[13:23:04.573]    - call: future::plan("sequential")
[13:23:04.574] plan(): nbrOfWorkers() = 1
[13:23:04.574] SequentialFuture started (and completed)
[13:23:04.574] - Launch lazy future ... done
[13:23:04.574] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[13:23:04.575] getGlobalsAndPackages() ...
[13:23:04.575] Searching for globals...
[13:23:04.576] 
[13:23:04.576] Searching for globals ... DONE
[13:23:04.576] - globals: [0] <none>
[13:23:04.576] getGlobalsAndPackages() ... DONE
[13:23:04.577] run() for ‘Future’ ...
[13:23:04.577] - state: ‘created’
[13:23:04.577] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:23:04.577] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:23:04.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:23:04.577]   - Field: ‘label’
[13:23:04.578]   - Field: ‘local’
[13:23:04.578]   - Field: ‘owner’
[13:23:04.578]   - Field: ‘envir’
[13:23:04.578]   - Field: ‘packages’
[13:23:04.578]   - Field: ‘gc’
[13:23:04.578]   - Field: ‘conditions’
[13:23:04.578]   - Field: ‘expr’
[13:23:04.578]   - Field: ‘uuid’
[13:23:04.578]   - Field: ‘seed’
[13:23:04.578]   - Field: ‘version’
[13:23:04.579]   - Field: ‘result’
[13:23:04.579]   - Field: ‘asynchronous’
[13:23:04.579]   - Field: ‘calls’
[13:23:04.579]   - Field: ‘globals’
[13:23:04.579]   - Field: ‘stdout’
[13:23:04.579]   - Field: ‘earlySignal’
[13:23:04.579]   - Field: ‘lazy’
[13:23:04.579]   - Field: ‘state’
[13:23:04.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:23:04.579] - Launch lazy future ...
[13:23:04.580] Packages needed by the future expression (n = 0): <none>
[13:23:04.580] Packages needed by future strategies (n = 0): <none>
[13:23:04.580] {
[13:23:04.580]     {
[13:23:04.580]         {
[13:23:04.580]             ...future.startTime <- base::Sys.time()
[13:23:04.580]             {
[13:23:04.580]                 {
[13:23:04.580]                   {
[13:23:04.580]                     base::local({
[13:23:04.580]                       has_future <- base::requireNamespace("future", 
[13:23:04.580]                         quietly = TRUE)
[13:23:04.580]                       if (has_future) {
[13:23:04.580]                         ns <- base::getNamespace("future")
[13:23:04.580]                         version <- ns[[".package"]][["version"]]
[13:23:04.580]                         if (is.null(version)) 
[13:23:04.580]                           version <- utils::packageVersion("future")
[13:23:04.580]                       }
[13:23:04.580]                       else {
[13:23:04.580]                         version <- NULL
[13:23:04.580]                       }
[13:23:04.580]                       if (!has_future || version < "1.8.0") {
[13:23:04.580]                         info <- base::c(r_version = base::gsub("R version ", 
[13:23:04.580]                           "", base::R.version$version.string), 
[13:23:04.580]                           platform = base::sprintf("%s (%s-bit)", 
[13:23:04.580]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:04.580]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:04.580]                             "release", "version")], collapse = " "), 
[13:23:04.580]                           hostname = base::Sys.info()[["nodename"]])
[13:23:04.580]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:23:04.580]                           info)
[13:23:04.580]                         info <- base::paste(info, collapse = "; ")
[13:23:04.580]                         if (!has_future) {
[13:23:04.580]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:04.580]                             info)
[13:23:04.580]                         }
[13:23:04.580]                         else {
[13:23:04.580]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:04.580]                             info, version)
[13:23:04.580]                         }
[13:23:04.580]                         base::stop(msg)
[13:23:04.580]                       }
[13:23:04.580]                     })
[13:23:04.580]                   }
[13:23:04.580]                   options(future.plan = NULL)
[13:23:04.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:04.580]                 }
[13:23:04.580]                 ...future.workdir <- getwd()
[13:23:04.580]             }
[13:23:04.580]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:04.580]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:04.580]         }
[13:23:04.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:04.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:04.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:04.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:04.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:04.580]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:04.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:04.580]             base::names(...future.oldOptions))
[13:23:04.580]     }
[13:23:04.580]     if (FALSE) {
[13:23:04.580]     }
[13:23:04.580]     else {
[13:23:04.580]         if (TRUE) {
[13:23:04.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:04.580]                 open = "w")
[13:23:04.580]         }
[13:23:04.580]         else {
[13:23:04.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:04.580]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:04.580]         }
[13:23:04.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:04.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:04.580]             base::sink(type = "output", split = FALSE)
[13:23:04.580]             base::close(...future.stdout)
[13:23:04.580]         }, add = TRUE)
[13:23:04.580]     }
[13:23:04.580]     ...future.frame <- base::sys.nframe()
[13:23:04.580]     ...future.conditions <- base::list()
[13:23:04.580]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:04.580]     if (FALSE) {
[13:23:04.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:04.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:04.580]     }
[13:23:04.580]     ...future.result <- base::tryCatch({
[13:23:04.580]         base::withCallingHandlers({
[13:23:04.580]             ...future.value <- base::withVisible(base::local(1))
[13:23:04.580]             future::FutureResult(value = ...future.value$value, 
[13:23:04.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.580]                   ...future.rng), globalenv = if (FALSE) 
[13:23:04.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:04.580]                     ...future.globalenv.names))
[13:23:04.580]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:04.580]         }, condition = base::local({
[13:23:04.580]             c <- base::c
[13:23:04.580]             inherits <- base::inherits
[13:23:04.580]             invokeRestart <- base::invokeRestart
[13:23:04.580]             length <- base::length
[13:23:04.580]             list <- base::list
[13:23:04.580]             seq.int <- base::seq.int
[13:23:04.580]             signalCondition <- base::signalCondition
[13:23:04.580]             sys.calls <- base::sys.calls
[13:23:04.580]             `[[` <- base::`[[`
[13:23:04.580]             `+` <- base::`+`
[13:23:04.580]             `<<-` <- base::`<<-`
[13:23:04.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:04.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:04.580]                   3L)]
[13:23:04.580]             }
[13:23:04.580]             function(cond) {
[13:23:04.580]                 is_error <- inherits(cond, "error")
[13:23:04.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:04.580]                   NULL)
[13:23:04.580]                 if (is_error) {
[13:23:04.580]                   sessionInformation <- function() {
[13:23:04.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:04.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:04.580]                       search = base::search(), system = base::Sys.info())
[13:23:04.580]                   }
[13:23:04.580]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:04.580]                     cond$call), session = sessionInformation(), 
[13:23:04.580]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:04.580]                   signalCondition(cond)
[13:23:04.580]                 }
[13:23:04.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:04.580]                 "immediateCondition"))) {
[13:23:04.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:04.580]                   ...future.conditions[[length(...future.conditions) + 
[13:23:04.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:04.580]                   if (TRUE && !signal) {
[13:23:04.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.580]                     {
[13:23:04.580]                       inherits <- base::inherits
[13:23:04.580]                       invokeRestart <- base::invokeRestart
[13:23:04.580]                       is.null <- base::is.null
[13:23:04.580]                       muffled <- FALSE
[13:23:04.580]                       if (inherits(cond, "message")) {
[13:23:04.580]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.580]                         if (muffled) 
[13:23:04.580]                           invokeRestart("muffleMessage")
[13:23:04.580]                       }
[13:23:04.580]                       else if (inherits(cond, "warning")) {
[13:23:04.580]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.580]                         if (muffled) 
[13:23:04.580]                           invokeRestart("muffleWarning")
[13:23:04.580]                       }
[13:23:04.580]                       else if (inherits(cond, "condition")) {
[13:23:04.580]                         if (!is.null(pattern)) {
[13:23:04.580]                           computeRestarts <- base::computeRestarts
[13:23:04.580]                           grepl <- base::grepl
[13:23:04.580]                           restarts <- computeRestarts(cond)
[13:23:04.580]                           for (restart in restarts) {
[13:23:04.580]                             name <- restart$name
[13:23:04.580]                             if (is.null(name)) 
[13:23:04.580]                               next
[13:23:04.580]                             if (!grepl(pattern, name)) 
[13:23:04.580]                               next
[13:23:04.580]                             invokeRestart(restart)
[13:23:04.580]                             muffled <- TRUE
[13:23:04.580]                             break
[13:23:04.580]                           }
[13:23:04.580]                         }
[13:23:04.580]                       }
[13:23:04.580]                       invisible(muffled)
[13:23:04.580]                     }
[13:23:04.580]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.580]                   }
[13:23:04.580]                 }
[13:23:04.580]                 else {
[13:23:04.580]                   if (TRUE) {
[13:23:04.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:04.580]                     {
[13:23:04.580]                       inherits <- base::inherits
[13:23:04.580]                       invokeRestart <- base::invokeRestart
[13:23:04.580]                       is.null <- base::is.null
[13:23:04.580]                       muffled <- FALSE
[13:23:04.580]                       if (inherits(cond, "message")) {
[13:23:04.580]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:04.580]                         if (muffled) 
[13:23:04.580]                           invokeRestart("muffleMessage")
[13:23:04.580]                       }
[13:23:04.580]                       else if (inherits(cond, "warning")) {
[13:23:04.580]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:04.580]                         if (muffled) 
[13:23:04.580]                           invokeRestart("muffleWarning")
[13:23:04.580]                       }
[13:23:04.580]                       else if (inherits(cond, "condition")) {
[13:23:04.580]                         if (!is.null(pattern)) {
[13:23:04.580]                           computeRestarts <- base::computeRestarts
[13:23:04.580]                           grepl <- base::grepl
[13:23:04.580]                           restarts <- computeRestarts(cond)
[13:23:04.580]                           for (restart in restarts) {
[13:23:04.580]                             name <- restart$name
[13:23:04.580]                             if (is.null(name)) 
[13:23:04.580]                               next
[13:23:04.580]                             if (!grepl(pattern, name)) 
[13:23:04.580]                               next
[13:23:04.580]                             invokeRestart(restart)
[13:23:04.580]                             muffled <- TRUE
[13:23:04.580]                             break
[13:23:04.580]                           }
[13:23:04.580]                         }
[13:23:04.580]                       }
[13:23:04.580]                       invisible(muffled)
[13:23:04.580]                     }
[13:23:04.580]                     muffleCondition(cond, pattern = "^muffle")
[13:23:04.580]                   }
[13:23:04.580]                 }
[13:23:04.580]             }
[13:23:04.580]         }))
[13:23:04.580]     }, error = function(ex) {
[13:23:04.580]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:04.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:04.580]                 ...future.rng), started = ...future.startTime, 
[13:23:04.580]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:04.580]             version = "1.8"), class = "FutureResult")
[13:23:04.580]     }, finally = {
[13:23:04.580]         if (!identical(...future.workdir, getwd())) 
[13:23:04.580]             setwd(...future.workdir)
[13:23:04.580]         {
[13:23:04.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:04.580]                 ...future.oldOptions$nwarnings <- NULL
[13:23:04.580]             }
[13:23:04.580]             base::options(...future.oldOptions)
[13:23:04.580]             if (.Platform$OS.type == "windows") {
[13:23:04.580]                 old_names <- names(...future.oldEnvVars)
[13:23:04.580]                 envs <- base::Sys.getenv()
[13:23:04.580]                 names <- names(envs)
[13:23:04.580]                 common <- intersect(names, old_names)
[13:23:04.580]                 added <- setdiff(names, old_names)
[13:23:04.580]                 removed <- setdiff(old_names, names)
[13:23:04.580]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:04.580]                   envs[common]]
[13:23:04.580]                 NAMES <- toupper(changed)
[13:23:04.580]                 args <- list()
[13:23:04.580]                 for (kk in seq_along(NAMES)) {
[13:23:04.580]                   name <- changed[[kk]]
[13:23:04.580]                   NAME <- NAMES[[kk]]
[13:23:04.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.580]                     next
[13:23:04.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.580]                 }
[13:23:04.580]                 NAMES <- toupper(added)
[13:23:04.580]                 for (kk in seq_along(NAMES)) {
[13:23:04.580]                   name <- added[[kk]]
[13:23:04.580]                   NAME <- NAMES[[kk]]
[13:23:04.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.580]                     next
[13:23:04.580]                   args[[name]] <- ""
[13:23:04.580]                 }
[13:23:04.580]                 NAMES <- toupper(removed)
[13:23:04.580]                 for (kk in seq_along(NAMES)) {
[13:23:04.580]                   name <- removed[[kk]]
[13:23:04.580]                   NAME <- NAMES[[kk]]
[13:23:04.580]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:04.580]                     next
[13:23:04.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:04.580]                 }
[13:23:04.580]                 if (length(args) > 0) 
[13:23:04.580]                   base::do.call(base::Sys.setenv, args = args)
[13:23:04.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:04.580]             }
[13:23:04.580]             else {
[13:23:04.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:04.580]             }
[13:23:04.580]             {
[13:23:04.580]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:04.580]                   0L) {
[13:23:04.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:04.580]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:04.580]                   base::options(opts)
[13:23:04.580]                 }
[13:23:04.580]                 {
[13:23:04.580]                   {
[13:23:04.580]                     NULL
[13:23:04.580]                     RNGkind("Mersenne-Twister")
[13:23:04.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:23:04.580]                       inherits = FALSE)
[13:23:04.580]                   }
[13:23:04.580]                   options(future.plan = NULL)
[13:23:04.580]                   if (is.na(NA_character_)) 
[13:23:04.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:04.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:04.580]                   future::plan(list(function (..., envir = parent.frame()) 
[13:23:04.580]                   {
[13:23:04.580]                     future <- SequentialFuture(..., envir = envir)
[13:23:04.580]                     if (!future$lazy) 
[13:23:04.580]                       future <- run(future)
[13:23:04.580]                     invisible(future)
[13:23:04.580]                   }), .cleanup = FALSE, .init = FALSE)
[13:23:04.580]                 }
[13:23:04.580]             }
[13:23:04.580]         }
[13:23:04.580]     })
[13:23:04.580]     if (TRUE) {
[13:23:04.580]         base::sink(type = "output", split = FALSE)
[13:23:04.580]         if (TRUE) {
[13:23:04.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:04.580]         }
[13:23:04.580]         else {
[13:23:04.580]             ...future.result["stdout"] <- base::list(NULL)
[13:23:04.580]         }
[13:23:04.580]         base::close(...future.stdout)
[13:23:04.580]         ...future.stdout <- NULL
[13:23:04.580]     }
[13:23:04.580]     ...future.result$conditions <- ...future.conditions
[13:23:04.580]     ...future.result$finished <- base::Sys.time()
[13:23:04.580]     ...future.result
[13:23:04.580] }
[13:23:04.582] plan(): Setting new future strategy stack:
[13:23:04.582] List of future strategies:
[13:23:04.582] 1. sequential:
[13:23:04.582]    - args: function (..., envir = parent.frame())
[13:23:04.582]    - tweaked: FALSE
[13:23:04.582]    - call: NULL
[13:23:04.583] plan(): nbrOfWorkers() = 1
[13:23:04.583] plan(): Setting new future strategy stack:
[13:23:04.583] List of future strategies:
[13:23:04.583] 1. sequential:
[13:23:04.583]    - args: function (..., envir = parent.frame())
[13:23:04.583]    - tweaked: FALSE
[13:23:04.583]    - call: future::plan("sequential")
[13:23:04.584] plan(): nbrOfWorkers() = 1
[13:23:04.584] SequentialFuture started (and completed)
[13:23:04.584] - Launch lazy future ... done
[13:23:04.584] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 4f4cfdf2-df38-c804-62b9-c18859e27acf
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[13:23:04.585] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[13:23:04.586] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[13:23:04.586] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[13:23:04.587] plan(): Setting new future strategy stack:
[13:23:04.587] List of future strategies:
[13:23:04.587] 1. FutureStrategy:
[13:23:04.587]    - args: function (..., envir = parent.frame())
[13:23:04.587]    - tweaked: FALSE
[13:23:04.587]    - call: future::plan(oplan)
[13:23:04.601] plan(): nbrOfWorkers() = 1
> 
