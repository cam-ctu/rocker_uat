
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:45.400] plan(): Setting new future strategy stack:
[10:25:45.401] List of future strategies:
[10:25:45.401] 1. sequential:
[10:25:45.401]    - args: function (..., envir = parent.frame())
[10:25:45.401]    - tweaked: FALSE
[10:25:45.401]    - call: future::plan("sequential")
[10:25:45.415] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'list') ...
list()
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'add') ...
[10:25:45.449] getGlobalsAndPackages() ...
[10:25:45.449] Searching for globals...
[10:25:45.452] - globals found: [1] ‘{’
[10:25:45.452] Searching for globals ... DONE
[10:25:45.453] Resolving globals: FALSE
[10:25:45.453] 
[10:25:45.453] 
[10:25:45.453] getGlobalsAndPackages() ... DONE
[10:25:45.454] run() for ‘Future’ ...
[10:25:45.454] - state: ‘created’
[10:25:45.454] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.455] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.455] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.455]   - Field: ‘label’
[10:25:45.455]   - Field: ‘local’
[10:25:45.455]   - Field: ‘owner’
[10:25:45.455]   - Field: ‘envir’
[10:25:45.455]   - Field: ‘packages’
[10:25:45.455]   - Field: ‘gc’
[10:25:45.455]   - Field: ‘conditions’
[10:25:45.455]   - Field: ‘expr’
[10:25:45.456]   - Field: ‘uuid’
[10:25:45.456]   - Field: ‘seed’
[10:25:45.456]   - Field: ‘version’
[10:25:45.456]   - Field: ‘result’
[10:25:45.456]   - Field: ‘asynchronous’
[10:25:45.456]   - Field: ‘calls’
[10:25:45.456]   - Field: ‘globals’
[10:25:45.456]   - Field: ‘stdout’
[10:25:45.456]   - Field: ‘earlySignal’
[10:25:45.456]   - Field: ‘lazy’
[10:25:45.457]   - Field: ‘state’
[10:25:45.457] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.457] - Launch lazy future ...
[10:25:45.458] Packages needed by the future expression (n = 0): <none>
[10:25:45.458] Packages needed by future strategies (n = 0): <none>
[10:25:45.458] {
[10:25:45.458]     {
[10:25:45.458]         {
[10:25:45.458]             ...future.startTime <- base::Sys.time()
[10:25:45.458]             {
[10:25:45.458]                 {
[10:25:45.458]                   {
[10:25:45.458]                     base::local({
[10:25:45.458]                       has_future <- base::requireNamespace("future", 
[10:25:45.458]                         quietly = TRUE)
[10:25:45.458]                       if (has_future) {
[10:25:45.458]                         ns <- base::getNamespace("future")
[10:25:45.458]                         version <- ns[[".package"]][["version"]]
[10:25:45.458]                         if (is.null(version)) 
[10:25:45.458]                           version <- utils::packageVersion("future")
[10:25:45.458]                       }
[10:25:45.458]                       else {
[10:25:45.458]                         version <- NULL
[10:25:45.458]                       }
[10:25:45.458]                       if (!has_future || version < "1.8.0") {
[10:25:45.458]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.458]                           "", base::R.version$version.string), 
[10:25:45.458]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.458]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.458]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.458]                             "release", "version")], collapse = " "), 
[10:25:45.458]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.458]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.458]                           info)
[10:25:45.458]                         info <- base::paste(info, collapse = "; ")
[10:25:45.458]                         if (!has_future) {
[10:25:45.458]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.458]                             info)
[10:25:45.458]                         }
[10:25:45.458]                         else {
[10:25:45.458]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.458]                             info, version)
[10:25:45.458]                         }
[10:25:45.458]                         base::stop(msg)
[10:25:45.458]                       }
[10:25:45.458]                     })
[10:25:45.458]                   }
[10:25:45.458]                   options(future.plan = NULL)
[10:25:45.458]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.458]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.458]                 }
[10:25:45.458]                 ...future.workdir <- getwd()
[10:25:45.458]             }
[10:25:45.458]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.458]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.458]         }
[10:25:45.458]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.458]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.458]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.458]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.458]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.458]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.458]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.458]             base::names(...future.oldOptions))
[10:25:45.458]     }
[10:25:45.458]     if (FALSE) {
[10:25:45.458]     }
[10:25:45.458]     else {
[10:25:45.458]         if (TRUE) {
[10:25:45.458]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.458]                 open = "w")
[10:25:45.458]         }
[10:25:45.458]         else {
[10:25:45.458]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.458]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.458]         }
[10:25:45.458]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.458]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.458]             base::sink(type = "output", split = FALSE)
[10:25:45.458]             base::close(...future.stdout)
[10:25:45.458]         }, add = TRUE)
[10:25:45.458]     }
[10:25:45.458]     ...future.frame <- base::sys.nframe()
[10:25:45.458]     ...future.conditions <- base::list()
[10:25:45.458]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.458]     if (FALSE) {
[10:25:45.458]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.458]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.458]     }
[10:25:45.458]     ...future.result <- base::tryCatch({
[10:25:45.458]         base::withCallingHandlers({
[10:25:45.458]             ...future.value <- base::withVisible(base::local({
[10:25:45.458]                 1
[10:25:45.458]             }))
[10:25:45.458]             future::FutureResult(value = ...future.value$value, 
[10:25:45.458]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.458]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.458]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.458]                     ...future.globalenv.names))
[10:25:45.458]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.458]         }, condition = base::local({
[10:25:45.458]             c <- base::c
[10:25:45.458]             inherits <- base::inherits
[10:25:45.458]             invokeRestart <- base::invokeRestart
[10:25:45.458]             length <- base::length
[10:25:45.458]             list <- base::list
[10:25:45.458]             seq.int <- base::seq.int
[10:25:45.458]             signalCondition <- base::signalCondition
[10:25:45.458]             sys.calls <- base::sys.calls
[10:25:45.458]             `[[` <- base::`[[`
[10:25:45.458]             `+` <- base::`+`
[10:25:45.458]             `<<-` <- base::`<<-`
[10:25:45.458]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.458]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.458]                   3L)]
[10:25:45.458]             }
[10:25:45.458]             function(cond) {
[10:25:45.458]                 is_error <- inherits(cond, "error")
[10:25:45.458]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.458]                   NULL)
[10:25:45.458]                 if (is_error) {
[10:25:45.458]                   sessionInformation <- function() {
[10:25:45.458]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.458]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.458]                       search = base::search(), system = base::Sys.info())
[10:25:45.458]                   }
[10:25:45.458]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.458]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.458]                     cond$call), session = sessionInformation(), 
[10:25:45.458]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.458]                   signalCondition(cond)
[10:25:45.458]                 }
[10:25:45.458]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.458]                 "immediateCondition"))) {
[10:25:45.458]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.458]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.458]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.458]                   if (TRUE && !signal) {
[10:25:45.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.458]                     {
[10:25:45.458]                       inherits <- base::inherits
[10:25:45.458]                       invokeRestart <- base::invokeRestart
[10:25:45.458]                       is.null <- base::is.null
[10:25:45.458]                       muffled <- FALSE
[10:25:45.458]                       if (inherits(cond, "message")) {
[10:25:45.458]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.458]                         if (muffled) 
[10:25:45.458]                           invokeRestart("muffleMessage")
[10:25:45.458]                       }
[10:25:45.458]                       else if (inherits(cond, "warning")) {
[10:25:45.458]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.458]                         if (muffled) 
[10:25:45.458]                           invokeRestart("muffleWarning")
[10:25:45.458]                       }
[10:25:45.458]                       else if (inherits(cond, "condition")) {
[10:25:45.458]                         if (!is.null(pattern)) {
[10:25:45.458]                           computeRestarts <- base::computeRestarts
[10:25:45.458]                           grepl <- base::grepl
[10:25:45.458]                           restarts <- computeRestarts(cond)
[10:25:45.458]                           for (restart in restarts) {
[10:25:45.458]                             name <- restart$name
[10:25:45.458]                             if (is.null(name)) 
[10:25:45.458]                               next
[10:25:45.458]                             if (!grepl(pattern, name)) 
[10:25:45.458]                               next
[10:25:45.458]                             invokeRestart(restart)
[10:25:45.458]                             muffled <- TRUE
[10:25:45.458]                             break
[10:25:45.458]                           }
[10:25:45.458]                         }
[10:25:45.458]                       }
[10:25:45.458]                       invisible(muffled)
[10:25:45.458]                     }
[10:25:45.458]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.458]                   }
[10:25:45.458]                 }
[10:25:45.458]                 else {
[10:25:45.458]                   if (TRUE) {
[10:25:45.458]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.458]                     {
[10:25:45.458]                       inherits <- base::inherits
[10:25:45.458]                       invokeRestart <- base::invokeRestart
[10:25:45.458]                       is.null <- base::is.null
[10:25:45.458]                       muffled <- FALSE
[10:25:45.458]                       if (inherits(cond, "message")) {
[10:25:45.458]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.458]                         if (muffled) 
[10:25:45.458]                           invokeRestart("muffleMessage")
[10:25:45.458]                       }
[10:25:45.458]                       else if (inherits(cond, "warning")) {
[10:25:45.458]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.458]                         if (muffled) 
[10:25:45.458]                           invokeRestart("muffleWarning")
[10:25:45.458]                       }
[10:25:45.458]                       else if (inherits(cond, "condition")) {
[10:25:45.458]                         if (!is.null(pattern)) {
[10:25:45.458]                           computeRestarts <- base::computeRestarts
[10:25:45.458]                           grepl <- base::grepl
[10:25:45.458]                           restarts <- computeRestarts(cond)
[10:25:45.458]                           for (restart in restarts) {
[10:25:45.458]                             name <- restart$name
[10:25:45.458]                             if (is.null(name)) 
[10:25:45.458]                               next
[10:25:45.458]                             if (!grepl(pattern, name)) 
[10:25:45.458]                               next
[10:25:45.458]                             invokeRestart(restart)
[10:25:45.458]                             muffled <- TRUE
[10:25:45.458]                             break
[10:25:45.458]                           }
[10:25:45.458]                         }
[10:25:45.458]                       }
[10:25:45.458]                       invisible(muffled)
[10:25:45.458]                     }
[10:25:45.458]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.458]                   }
[10:25:45.458]                 }
[10:25:45.458]             }
[10:25:45.458]         }))
[10:25:45.458]     }, error = function(ex) {
[10:25:45.458]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.458]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.458]                 ...future.rng), started = ...future.startTime, 
[10:25:45.458]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.458]             version = "1.8"), class = "FutureResult")
[10:25:45.458]     }, finally = {
[10:25:45.458]         if (!identical(...future.workdir, getwd())) 
[10:25:45.458]             setwd(...future.workdir)
[10:25:45.458]         {
[10:25:45.458]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.458]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.458]             }
[10:25:45.458]             base::options(...future.oldOptions)
[10:25:45.458]             if (.Platform$OS.type == "windows") {
[10:25:45.458]                 old_names <- names(...future.oldEnvVars)
[10:25:45.458]                 envs <- base::Sys.getenv()
[10:25:45.458]                 names <- names(envs)
[10:25:45.458]                 common <- intersect(names, old_names)
[10:25:45.458]                 added <- setdiff(names, old_names)
[10:25:45.458]                 removed <- setdiff(old_names, names)
[10:25:45.458]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.458]                   envs[common]]
[10:25:45.458]                 NAMES <- toupper(changed)
[10:25:45.458]                 args <- list()
[10:25:45.458]                 for (kk in seq_along(NAMES)) {
[10:25:45.458]                   name <- changed[[kk]]
[10:25:45.458]                   NAME <- NAMES[[kk]]
[10:25:45.458]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.458]                     next
[10:25:45.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.458]                 }
[10:25:45.458]                 NAMES <- toupper(added)
[10:25:45.458]                 for (kk in seq_along(NAMES)) {
[10:25:45.458]                   name <- added[[kk]]
[10:25:45.458]                   NAME <- NAMES[[kk]]
[10:25:45.458]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.458]                     next
[10:25:45.458]                   args[[name]] <- ""
[10:25:45.458]                 }
[10:25:45.458]                 NAMES <- toupper(removed)
[10:25:45.458]                 for (kk in seq_along(NAMES)) {
[10:25:45.458]                   name <- removed[[kk]]
[10:25:45.458]                   NAME <- NAMES[[kk]]
[10:25:45.458]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.458]                     next
[10:25:45.458]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.458]                 }
[10:25:45.458]                 if (length(args) > 0) 
[10:25:45.458]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.458]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.458]             }
[10:25:45.458]             else {
[10:25:45.458]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.458]             }
[10:25:45.458]             {
[10:25:45.458]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.458]                   0L) {
[10:25:45.458]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.458]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.458]                   base::options(opts)
[10:25:45.458]                 }
[10:25:45.458]                 {
[10:25:45.458]                   {
[10:25:45.458]                     NULL
[10:25:45.458]                     RNGkind("Mersenne-Twister")
[10:25:45.458]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.458]                       inherits = FALSE)
[10:25:45.458]                   }
[10:25:45.458]                   options(future.plan = NULL)
[10:25:45.458]                   if (is.na(NA_character_)) 
[10:25:45.458]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.458]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.458]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.458]                   {
[10:25:45.458]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.458]                     if (!future$lazy) 
[10:25:45.458]                       future <- run(future)
[10:25:45.458]                     invisible(future)
[10:25:45.458]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.458]                 }
[10:25:45.458]             }
[10:25:45.458]         }
[10:25:45.458]     })
[10:25:45.458]     if (TRUE) {
[10:25:45.458]         base::sink(type = "output", split = FALSE)
[10:25:45.458]         if (TRUE) {
[10:25:45.458]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.458]         }
[10:25:45.458]         else {
[10:25:45.458]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.458]         }
[10:25:45.458]         base::close(...future.stdout)
[10:25:45.458]         ...future.stdout <- NULL
[10:25:45.458]     }
[10:25:45.458]     ...future.result$conditions <- ...future.conditions
[10:25:45.458]     ...future.result$finished <- base::Sys.time()
[10:25:45.458]     ...future.result
[10:25:45.458] }
[10:25:45.460] plan(): Setting new future strategy stack:
[10:25:45.460] List of future strategies:
[10:25:45.460] 1. sequential:
[10:25:45.460]    - args: function (..., envir = parent.frame())
[10:25:45.460]    - tweaked: FALSE
[10:25:45.460]    - call: NULL
[10:25:45.461] plan(): nbrOfWorkers() = 1
[10:25:45.462] plan(): Setting new future strategy stack:
[10:25:45.462] List of future strategies:
[10:25:45.462] 1. sequential:
[10:25:45.462]    - args: function (..., envir = parent.frame())
[10:25:45.462]    - tweaked: FALSE
[10:25:45.462]    - call: future::plan("sequential")
[10:25:45.462] plan(): nbrOfWorkers() = 1
[10:25:45.462] SequentialFuture started (and completed)
[10:25:45.463] - Launch lazy future ... done
[10:25:45.463] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'remove') ...
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'list') ...
list()
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'add') ...
[10:25:45.467] getGlobalsAndPackages() ...
[10:25:45.467] Searching for globals...
[10:25:45.467] - globals found: [1] ‘{’
[10:25:45.468] Searching for globals ... DONE
[10:25:45.468] Resolving globals: FALSE
[10:25:45.468] 
[10:25:45.468] 
[10:25:45.468] getGlobalsAndPackages() ... DONE
[10:25:45.468] run() for ‘Future’ ...
[10:25:45.468] - state: ‘created’
[10:25:45.468] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.469] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.469] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.469]   - Field: ‘label’
[10:25:45.469]   - Field: ‘local’
[10:25:45.469]   - Field: ‘owner’
[10:25:45.469]   - Field: ‘envir’
[10:25:45.469]   - Field: ‘packages’
[10:25:45.469]   - Field: ‘gc’
[10:25:45.469]   - Field: ‘conditions’
[10:25:45.470]   - Field: ‘expr’
[10:25:45.470]   - Field: ‘uuid’
[10:25:45.470]   - Field: ‘seed’
[10:25:45.470]   - Field: ‘version’
[10:25:45.470]   - Field: ‘result’
[10:25:45.470]   - Field: ‘asynchronous’
[10:25:45.470]   - Field: ‘calls’
[10:25:45.470]   - Field: ‘globals’
[10:25:45.470]   - Field: ‘stdout’
[10:25:45.470]   - Field: ‘earlySignal’
[10:25:45.470]   - Field: ‘lazy’
[10:25:45.470]   - Field: ‘state’
[10:25:45.471] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.471] - Launch lazy future ...
[10:25:45.471] Packages needed by the future expression (n = 0): <none>
[10:25:45.471] Packages needed by future strategies (n = 0): <none>
[10:25:45.471] {
[10:25:45.471]     {
[10:25:45.471]         {
[10:25:45.471]             ...future.startTime <- base::Sys.time()
[10:25:45.471]             {
[10:25:45.471]                 {
[10:25:45.471]                   {
[10:25:45.471]                     base::local({
[10:25:45.471]                       has_future <- base::requireNamespace("future", 
[10:25:45.471]                         quietly = TRUE)
[10:25:45.471]                       if (has_future) {
[10:25:45.471]                         ns <- base::getNamespace("future")
[10:25:45.471]                         version <- ns[[".package"]][["version"]]
[10:25:45.471]                         if (is.null(version)) 
[10:25:45.471]                           version <- utils::packageVersion("future")
[10:25:45.471]                       }
[10:25:45.471]                       else {
[10:25:45.471]                         version <- NULL
[10:25:45.471]                       }
[10:25:45.471]                       if (!has_future || version < "1.8.0") {
[10:25:45.471]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.471]                           "", base::R.version$version.string), 
[10:25:45.471]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.471]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.471]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.471]                             "release", "version")], collapse = " "), 
[10:25:45.471]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.471]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.471]                           info)
[10:25:45.471]                         info <- base::paste(info, collapse = "; ")
[10:25:45.471]                         if (!has_future) {
[10:25:45.471]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.471]                             info)
[10:25:45.471]                         }
[10:25:45.471]                         else {
[10:25:45.471]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.471]                             info, version)
[10:25:45.471]                         }
[10:25:45.471]                         base::stop(msg)
[10:25:45.471]                       }
[10:25:45.471]                     })
[10:25:45.471]                   }
[10:25:45.471]                   options(future.plan = NULL)
[10:25:45.471]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.471]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.471]                 }
[10:25:45.471]                 ...future.workdir <- getwd()
[10:25:45.471]             }
[10:25:45.471]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.471]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.471]         }
[10:25:45.471]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.471]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.471]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.471]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.471]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.471]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.471]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.471]             base::names(...future.oldOptions))
[10:25:45.471]     }
[10:25:45.471]     if (FALSE) {
[10:25:45.471]     }
[10:25:45.471]     else {
[10:25:45.471]         if (TRUE) {
[10:25:45.471]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.471]                 open = "w")
[10:25:45.471]         }
[10:25:45.471]         else {
[10:25:45.471]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.471]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.471]         }
[10:25:45.471]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.471]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.471]             base::sink(type = "output", split = FALSE)
[10:25:45.471]             base::close(...future.stdout)
[10:25:45.471]         }, add = TRUE)
[10:25:45.471]     }
[10:25:45.471]     ...future.frame <- base::sys.nframe()
[10:25:45.471]     ...future.conditions <- base::list()
[10:25:45.471]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.471]     if (FALSE) {
[10:25:45.471]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.471]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.471]     }
[10:25:45.471]     ...future.result <- base::tryCatch({
[10:25:45.471]         base::withCallingHandlers({
[10:25:45.471]             ...future.value <- base::withVisible(base::local({
[10:25:45.471]                 2
[10:25:45.471]             }))
[10:25:45.471]             future::FutureResult(value = ...future.value$value, 
[10:25:45.471]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.471]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.471]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.471]                     ...future.globalenv.names))
[10:25:45.471]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.471]         }, condition = base::local({
[10:25:45.471]             c <- base::c
[10:25:45.471]             inherits <- base::inherits
[10:25:45.471]             invokeRestart <- base::invokeRestart
[10:25:45.471]             length <- base::length
[10:25:45.471]             list <- base::list
[10:25:45.471]             seq.int <- base::seq.int
[10:25:45.471]             signalCondition <- base::signalCondition
[10:25:45.471]             sys.calls <- base::sys.calls
[10:25:45.471]             `[[` <- base::`[[`
[10:25:45.471]             `+` <- base::`+`
[10:25:45.471]             `<<-` <- base::`<<-`
[10:25:45.471]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.471]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.471]                   3L)]
[10:25:45.471]             }
[10:25:45.471]             function(cond) {
[10:25:45.471]                 is_error <- inherits(cond, "error")
[10:25:45.471]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.471]                   NULL)
[10:25:45.471]                 if (is_error) {
[10:25:45.471]                   sessionInformation <- function() {
[10:25:45.471]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.471]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.471]                       search = base::search(), system = base::Sys.info())
[10:25:45.471]                   }
[10:25:45.471]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.471]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.471]                     cond$call), session = sessionInformation(), 
[10:25:45.471]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.471]                   signalCondition(cond)
[10:25:45.471]                 }
[10:25:45.471]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.471]                 "immediateCondition"))) {
[10:25:45.471]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.471]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.471]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.471]                   if (TRUE && !signal) {
[10:25:45.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.471]                     {
[10:25:45.471]                       inherits <- base::inherits
[10:25:45.471]                       invokeRestart <- base::invokeRestart
[10:25:45.471]                       is.null <- base::is.null
[10:25:45.471]                       muffled <- FALSE
[10:25:45.471]                       if (inherits(cond, "message")) {
[10:25:45.471]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.471]                         if (muffled) 
[10:25:45.471]                           invokeRestart("muffleMessage")
[10:25:45.471]                       }
[10:25:45.471]                       else if (inherits(cond, "warning")) {
[10:25:45.471]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.471]                         if (muffled) 
[10:25:45.471]                           invokeRestart("muffleWarning")
[10:25:45.471]                       }
[10:25:45.471]                       else if (inherits(cond, "condition")) {
[10:25:45.471]                         if (!is.null(pattern)) {
[10:25:45.471]                           computeRestarts <- base::computeRestarts
[10:25:45.471]                           grepl <- base::grepl
[10:25:45.471]                           restarts <- computeRestarts(cond)
[10:25:45.471]                           for (restart in restarts) {
[10:25:45.471]                             name <- restart$name
[10:25:45.471]                             if (is.null(name)) 
[10:25:45.471]                               next
[10:25:45.471]                             if (!grepl(pattern, name)) 
[10:25:45.471]                               next
[10:25:45.471]                             invokeRestart(restart)
[10:25:45.471]                             muffled <- TRUE
[10:25:45.471]                             break
[10:25:45.471]                           }
[10:25:45.471]                         }
[10:25:45.471]                       }
[10:25:45.471]                       invisible(muffled)
[10:25:45.471]                     }
[10:25:45.471]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.471]                   }
[10:25:45.471]                 }
[10:25:45.471]                 else {
[10:25:45.471]                   if (TRUE) {
[10:25:45.471]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.471]                     {
[10:25:45.471]                       inherits <- base::inherits
[10:25:45.471]                       invokeRestart <- base::invokeRestart
[10:25:45.471]                       is.null <- base::is.null
[10:25:45.471]                       muffled <- FALSE
[10:25:45.471]                       if (inherits(cond, "message")) {
[10:25:45.471]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.471]                         if (muffled) 
[10:25:45.471]                           invokeRestart("muffleMessage")
[10:25:45.471]                       }
[10:25:45.471]                       else if (inherits(cond, "warning")) {
[10:25:45.471]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.471]                         if (muffled) 
[10:25:45.471]                           invokeRestart("muffleWarning")
[10:25:45.471]                       }
[10:25:45.471]                       else if (inherits(cond, "condition")) {
[10:25:45.471]                         if (!is.null(pattern)) {
[10:25:45.471]                           computeRestarts <- base::computeRestarts
[10:25:45.471]                           grepl <- base::grepl
[10:25:45.471]                           restarts <- computeRestarts(cond)
[10:25:45.471]                           for (restart in restarts) {
[10:25:45.471]                             name <- restart$name
[10:25:45.471]                             if (is.null(name)) 
[10:25:45.471]                               next
[10:25:45.471]                             if (!grepl(pattern, name)) 
[10:25:45.471]                               next
[10:25:45.471]                             invokeRestart(restart)
[10:25:45.471]                             muffled <- TRUE
[10:25:45.471]                             break
[10:25:45.471]                           }
[10:25:45.471]                         }
[10:25:45.471]                       }
[10:25:45.471]                       invisible(muffled)
[10:25:45.471]                     }
[10:25:45.471]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.471]                   }
[10:25:45.471]                 }
[10:25:45.471]             }
[10:25:45.471]         }))
[10:25:45.471]     }, error = function(ex) {
[10:25:45.471]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.471]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.471]                 ...future.rng), started = ...future.startTime, 
[10:25:45.471]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.471]             version = "1.8"), class = "FutureResult")
[10:25:45.471]     }, finally = {
[10:25:45.471]         if (!identical(...future.workdir, getwd())) 
[10:25:45.471]             setwd(...future.workdir)
[10:25:45.471]         {
[10:25:45.471]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.471]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.471]             }
[10:25:45.471]             base::options(...future.oldOptions)
[10:25:45.471]             if (.Platform$OS.type == "windows") {
[10:25:45.471]                 old_names <- names(...future.oldEnvVars)
[10:25:45.471]                 envs <- base::Sys.getenv()
[10:25:45.471]                 names <- names(envs)
[10:25:45.471]                 common <- intersect(names, old_names)
[10:25:45.471]                 added <- setdiff(names, old_names)
[10:25:45.471]                 removed <- setdiff(old_names, names)
[10:25:45.471]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.471]                   envs[common]]
[10:25:45.471]                 NAMES <- toupper(changed)
[10:25:45.471]                 args <- list()
[10:25:45.471]                 for (kk in seq_along(NAMES)) {
[10:25:45.471]                   name <- changed[[kk]]
[10:25:45.471]                   NAME <- NAMES[[kk]]
[10:25:45.471]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.471]                     next
[10:25:45.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.471]                 }
[10:25:45.471]                 NAMES <- toupper(added)
[10:25:45.471]                 for (kk in seq_along(NAMES)) {
[10:25:45.471]                   name <- added[[kk]]
[10:25:45.471]                   NAME <- NAMES[[kk]]
[10:25:45.471]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.471]                     next
[10:25:45.471]                   args[[name]] <- ""
[10:25:45.471]                 }
[10:25:45.471]                 NAMES <- toupper(removed)
[10:25:45.471]                 for (kk in seq_along(NAMES)) {
[10:25:45.471]                   name <- removed[[kk]]
[10:25:45.471]                   NAME <- NAMES[[kk]]
[10:25:45.471]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.471]                     next
[10:25:45.471]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.471]                 }
[10:25:45.471]                 if (length(args) > 0) 
[10:25:45.471]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.471]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.471]             }
[10:25:45.471]             else {
[10:25:45.471]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.471]             }
[10:25:45.471]             {
[10:25:45.471]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.471]                   0L) {
[10:25:45.471]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.471]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.471]                   base::options(opts)
[10:25:45.471]                 }
[10:25:45.471]                 {
[10:25:45.471]                   {
[10:25:45.471]                     NULL
[10:25:45.471]                     RNGkind("Mersenne-Twister")
[10:25:45.471]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.471]                       inherits = FALSE)
[10:25:45.471]                   }
[10:25:45.471]                   options(future.plan = NULL)
[10:25:45.471]                   if (is.na(NA_character_)) 
[10:25:45.471]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.471]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.471]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.471]                   {
[10:25:45.471]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.471]                     if (!future$lazy) 
[10:25:45.471]                       future <- run(future)
[10:25:45.471]                     invisible(future)
[10:25:45.471]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.471]                 }
[10:25:45.471]             }
[10:25:45.471]         }
[10:25:45.471]     })
[10:25:45.471]     if (TRUE) {
[10:25:45.471]         base::sink(type = "output", split = FALSE)
[10:25:45.471]         if (TRUE) {
[10:25:45.471]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.471]         }
[10:25:45.471]         else {
[10:25:45.471]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.471]         }
[10:25:45.471]         base::close(...future.stdout)
[10:25:45.471]         ...future.stdout <- NULL
[10:25:45.471]     }
[10:25:45.471]     ...future.result$conditions <- ...future.conditions
[10:25:45.471]     ...future.result$finished <- base::Sys.time()
[10:25:45.471]     ...future.result
[10:25:45.471] }
[10:25:45.473] plan(): Setting new future strategy stack:
[10:25:45.473] List of future strategies:
[10:25:45.473] 1. sequential:
[10:25:45.473]    - args: function (..., envir = parent.frame())
[10:25:45.473]    - tweaked: FALSE
[10:25:45.473]    - call: NULL
[10:25:45.473] plan(): nbrOfWorkers() = 1
[10:25:45.474] plan(): Setting new future strategy stack:
[10:25:45.474] List of future strategies:
[10:25:45.474] 1. sequential:
[10:25:45.474]    - args: function (..., envir = parent.frame())
[10:25:45.474]    - tweaked: FALSE
[10:25:45.474]    - call: future::plan("sequential")
[10:25:45.475] plan(): nbrOfWorkers() = 1
[10:25:45.475] SequentialFuture started (and completed)
[10:25:45.475] - Launch lazy future ... done
[10:25:45.475] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'collect-first') ...
[10:25:45.476] resolved() for ‘SequentialFuture’ ...
[10:25:45.476] - state: ‘finished’
[10:25:45.476] - run: FALSE
[10:25:45.476] - result: ‘FutureResult’
[10:25:45.476] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'add') ...
[10:25:45.477] getGlobalsAndPackages() ...
[10:25:45.477] Searching for globals...
[10:25:45.478] - globals found: [1] ‘{’
[10:25:45.478] Searching for globals ... DONE
[10:25:45.478] Resolving globals: FALSE
[10:25:45.478] 
[10:25:45.478] 
[10:25:45.478] getGlobalsAndPackages() ... DONE
[10:25:45.478] run() for ‘Future’ ...
[10:25:45.479] - state: ‘created’
[10:25:45.479] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.479] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.479] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.479]   - Field: ‘label’
[10:25:45.479]   - Field: ‘local’
[10:25:45.479]   - Field: ‘owner’
[10:25:45.479]   - Field: ‘envir’
[10:25:45.479]   - Field: ‘packages’
[10:25:45.480]   - Field: ‘gc’
[10:25:45.480]   - Field: ‘conditions’
[10:25:45.480]   - Field: ‘expr’
[10:25:45.480]   - Field: ‘uuid’
[10:25:45.480]   - Field: ‘seed’
[10:25:45.480]   - Field: ‘version’
[10:25:45.480]   - Field: ‘result’
[10:25:45.480]   - Field: ‘asynchronous’
[10:25:45.480]   - Field: ‘calls’
[10:25:45.480]   - Field: ‘globals’
[10:25:45.480]   - Field: ‘stdout’
[10:25:45.481]   - Field: ‘earlySignal’
[10:25:45.481]   - Field: ‘lazy’
[10:25:45.481]   - Field: ‘state’
[10:25:45.481] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.481] - Launch lazy future ...
[10:25:45.481] Packages needed by the future expression (n = 0): <none>
[10:25:45.481] Packages needed by future strategies (n = 0): <none>
[10:25:45.482] {
[10:25:45.482]     {
[10:25:45.482]         {
[10:25:45.482]             ...future.startTime <- base::Sys.time()
[10:25:45.482]             {
[10:25:45.482]                 {
[10:25:45.482]                   {
[10:25:45.482]                     base::local({
[10:25:45.482]                       has_future <- base::requireNamespace("future", 
[10:25:45.482]                         quietly = TRUE)
[10:25:45.482]                       if (has_future) {
[10:25:45.482]                         ns <- base::getNamespace("future")
[10:25:45.482]                         version <- ns[[".package"]][["version"]]
[10:25:45.482]                         if (is.null(version)) 
[10:25:45.482]                           version <- utils::packageVersion("future")
[10:25:45.482]                       }
[10:25:45.482]                       else {
[10:25:45.482]                         version <- NULL
[10:25:45.482]                       }
[10:25:45.482]                       if (!has_future || version < "1.8.0") {
[10:25:45.482]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.482]                           "", base::R.version$version.string), 
[10:25:45.482]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.482]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.482]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.482]                             "release", "version")], collapse = " "), 
[10:25:45.482]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.482]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.482]                           info)
[10:25:45.482]                         info <- base::paste(info, collapse = "; ")
[10:25:45.482]                         if (!has_future) {
[10:25:45.482]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.482]                             info)
[10:25:45.482]                         }
[10:25:45.482]                         else {
[10:25:45.482]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.482]                             info, version)
[10:25:45.482]                         }
[10:25:45.482]                         base::stop(msg)
[10:25:45.482]                       }
[10:25:45.482]                     })
[10:25:45.482]                   }
[10:25:45.482]                   options(future.plan = NULL)
[10:25:45.482]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.482]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.482]                 }
[10:25:45.482]                 ...future.workdir <- getwd()
[10:25:45.482]             }
[10:25:45.482]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.482]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.482]         }
[10:25:45.482]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.482]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.482]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.482]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.482]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.482]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.482]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.482]             base::names(...future.oldOptions))
[10:25:45.482]     }
[10:25:45.482]     if (FALSE) {
[10:25:45.482]     }
[10:25:45.482]     else {
[10:25:45.482]         if (TRUE) {
[10:25:45.482]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.482]                 open = "w")
[10:25:45.482]         }
[10:25:45.482]         else {
[10:25:45.482]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.482]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.482]         }
[10:25:45.482]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.482]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.482]             base::sink(type = "output", split = FALSE)
[10:25:45.482]             base::close(...future.stdout)
[10:25:45.482]         }, add = TRUE)
[10:25:45.482]     }
[10:25:45.482]     ...future.frame <- base::sys.nframe()
[10:25:45.482]     ...future.conditions <- base::list()
[10:25:45.482]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.482]     if (FALSE) {
[10:25:45.482]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.482]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.482]     }
[10:25:45.482]     ...future.result <- base::tryCatch({
[10:25:45.482]         base::withCallingHandlers({
[10:25:45.482]             ...future.value <- base::withVisible(base::local({
[10:25:45.482]                 2
[10:25:45.482]             }))
[10:25:45.482]             future::FutureResult(value = ...future.value$value, 
[10:25:45.482]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.482]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.482]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.482]                     ...future.globalenv.names))
[10:25:45.482]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.482]         }, condition = base::local({
[10:25:45.482]             c <- base::c
[10:25:45.482]             inherits <- base::inherits
[10:25:45.482]             invokeRestart <- base::invokeRestart
[10:25:45.482]             length <- base::length
[10:25:45.482]             list <- base::list
[10:25:45.482]             seq.int <- base::seq.int
[10:25:45.482]             signalCondition <- base::signalCondition
[10:25:45.482]             sys.calls <- base::sys.calls
[10:25:45.482]             `[[` <- base::`[[`
[10:25:45.482]             `+` <- base::`+`
[10:25:45.482]             `<<-` <- base::`<<-`
[10:25:45.482]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.482]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.482]                   3L)]
[10:25:45.482]             }
[10:25:45.482]             function(cond) {
[10:25:45.482]                 is_error <- inherits(cond, "error")
[10:25:45.482]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.482]                   NULL)
[10:25:45.482]                 if (is_error) {
[10:25:45.482]                   sessionInformation <- function() {
[10:25:45.482]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.482]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.482]                       search = base::search(), system = base::Sys.info())
[10:25:45.482]                   }
[10:25:45.482]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.482]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.482]                     cond$call), session = sessionInformation(), 
[10:25:45.482]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.482]                   signalCondition(cond)
[10:25:45.482]                 }
[10:25:45.482]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.482]                 "immediateCondition"))) {
[10:25:45.482]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.482]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.482]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.482]                   if (TRUE && !signal) {
[10:25:45.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.482]                     {
[10:25:45.482]                       inherits <- base::inherits
[10:25:45.482]                       invokeRestart <- base::invokeRestart
[10:25:45.482]                       is.null <- base::is.null
[10:25:45.482]                       muffled <- FALSE
[10:25:45.482]                       if (inherits(cond, "message")) {
[10:25:45.482]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.482]                         if (muffled) 
[10:25:45.482]                           invokeRestart("muffleMessage")
[10:25:45.482]                       }
[10:25:45.482]                       else if (inherits(cond, "warning")) {
[10:25:45.482]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.482]                         if (muffled) 
[10:25:45.482]                           invokeRestart("muffleWarning")
[10:25:45.482]                       }
[10:25:45.482]                       else if (inherits(cond, "condition")) {
[10:25:45.482]                         if (!is.null(pattern)) {
[10:25:45.482]                           computeRestarts <- base::computeRestarts
[10:25:45.482]                           grepl <- base::grepl
[10:25:45.482]                           restarts <- computeRestarts(cond)
[10:25:45.482]                           for (restart in restarts) {
[10:25:45.482]                             name <- restart$name
[10:25:45.482]                             if (is.null(name)) 
[10:25:45.482]                               next
[10:25:45.482]                             if (!grepl(pattern, name)) 
[10:25:45.482]                               next
[10:25:45.482]                             invokeRestart(restart)
[10:25:45.482]                             muffled <- TRUE
[10:25:45.482]                             break
[10:25:45.482]                           }
[10:25:45.482]                         }
[10:25:45.482]                       }
[10:25:45.482]                       invisible(muffled)
[10:25:45.482]                     }
[10:25:45.482]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.482]                   }
[10:25:45.482]                 }
[10:25:45.482]                 else {
[10:25:45.482]                   if (TRUE) {
[10:25:45.482]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.482]                     {
[10:25:45.482]                       inherits <- base::inherits
[10:25:45.482]                       invokeRestart <- base::invokeRestart
[10:25:45.482]                       is.null <- base::is.null
[10:25:45.482]                       muffled <- FALSE
[10:25:45.482]                       if (inherits(cond, "message")) {
[10:25:45.482]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.482]                         if (muffled) 
[10:25:45.482]                           invokeRestart("muffleMessage")
[10:25:45.482]                       }
[10:25:45.482]                       else if (inherits(cond, "warning")) {
[10:25:45.482]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.482]                         if (muffled) 
[10:25:45.482]                           invokeRestart("muffleWarning")
[10:25:45.482]                       }
[10:25:45.482]                       else if (inherits(cond, "condition")) {
[10:25:45.482]                         if (!is.null(pattern)) {
[10:25:45.482]                           computeRestarts <- base::computeRestarts
[10:25:45.482]                           grepl <- base::grepl
[10:25:45.482]                           restarts <- computeRestarts(cond)
[10:25:45.482]                           for (restart in restarts) {
[10:25:45.482]                             name <- restart$name
[10:25:45.482]                             if (is.null(name)) 
[10:25:45.482]                               next
[10:25:45.482]                             if (!grepl(pattern, name)) 
[10:25:45.482]                               next
[10:25:45.482]                             invokeRestart(restart)
[10:25:45.482]                             muffled <- TRUE
[10:25:45.482]                             break
[10:25:45.482]                           }
[10:25:45.482]                         }
[10:25:45.482]                       }
[10:25:45.482]                       invisible(muffled)
[10:25:45.482]                     }
[10:25:45.482]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.482]                   }
[10:25:45.482]                 }
[10:25:45.482]             }
[10:25:45.482]         }))
[10:25:45.482]     }, error = function(ex) {
[10:25:45.482]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.482]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.482]                 ...future.rng), started = ...future.startTime, 
[10:25:45.482]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.482]             version = "1.8"), class = "FutureResult")
[10:25:45.482]     }, finally = {
[10:25:45.482]         if (!identical(...future.workdir, getwd())) 
[10:25:45.482]             setwd(...future.workdir)
[10:25:45.482]         {
[10:25:45.482]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.482]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.482]             }
[10:25:45.482]             base::options(...future.oldOptions)
[10:25:45.482]             if (.Platform$OS.type == "windows") {
[10:25:45.482]                 old_names <- names(...future.oldEnvVars)
[10:25:45.482]                 envs <- base::Sys.getenv()
[10:25:45.482]                 names <- names(envs)
[10:25:45.482]                 common <- intersect(names, old_names)
[10:25:45.482]                 added <- setdiff(names, old_names)
[10:25:45.482]                 removed <- setdiff(old_names, names)
[10:25:45.482]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.482]                   envs[common]]
[10:25:45.482]                 NAMES <- toupper(changed)
[10:25:45.482]                 args <- list()
[10:25:45.482]                 for (kk in seq_along(NAMES)) {
[10:25:45.482]                   name <- changed[[kk]]
[10:25:45.482]                   NAME <- NAMES[[kk]]
[10:25:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.482]                     next
[10:25:45.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.482]                 }
[10:25:45.482]                 NAMES <- toupper(added)
[10:25:45.482]                 for (kk in seq_along(NAMES)) {
[10:25:45.482]                   name <- added[[kk]]
[10:25:45.482]                   NAME <- NAMES[[kk]]
[10:25:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.482]                     next
[10:25:45.482]                   args[[name]] <- ""
[10:25:45.482]                 }
[10:25:45.482]                 NAMES <- toupper(removed)
[10:25:45.482]                 for (kk in seq_along(NAMES)) {
[10:25:45.482]                   name <- removed[[kk]]
[10:25:45.482]                   NAME <- NAMES[[kk]]
[10:25:45.482]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.482]                     next
[10:25:45.482]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.482]                 }
[10:25:45.482]                 if (length(args) > 0) 
[10:25:45.482]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.482]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.482]             }
[10:25:45.482]             else {
[10:25:45.482]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.482]             }
[10:25:45.482]             {
[10:25:45.482]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.482]                   0L) {
[10:25:45.482]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.482]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.482]                   base::options(opts)
[10:25:45.482]                 }
[10:25:45.482]                 {
[10:25:45.482]                   {
[10:25:45.482]                     NULL
[10:25:45.482]                     RNGkind("Mersenne-Twister")
[10:25:45.482]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.482]                       inherits = FALSE)
[10:25:45.482]                   }
[10:25:45.482]                   options(future.plan = NULL)
[10:25:45.482]                   if (is.na(NA_character_)) 
[10:25:45.482]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.482]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.482]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.482]                   {
[10:25:45.482]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.482]                     if (!future$lazy) 
[10:25:45.482]                       future <- run(future)
[10:25:45.482]                     invisible(future)
[10:25:45.482]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.482]                 }
[10:25:45.482]             }
[10:25:45.482]         }
[10:25:45.482]     })
[10:25:45.482]     if (TRUE) {
[10:25:45.482]         base::sink(type = "output", split = FALSE)
[10:25:45.482]         if (TRUE) {
[10:25:45.482]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.482]         }
[10:25:45.482]         else {
[10:25:45.482]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.482]         }
[10:25:45.482]         base::close(...future.stdout)
[10:25:45.482]         ...future.stdout <- NULL
[10:25:45.482]     }
[10:25:45.482]     ...future.result$conditions <- ...future.conditions
[10:25:45.482]     ...future.result$finished <- base::Sys.time()
[10:25:45.482]     ...future.result
[10:25:45.482] }
[10:25:45.483] plan(): Setting new future strategy stack:
[10:25:45.483] List of future strategies:
[10:25:45.483] 1. sequential:
[10:25:45.483]    - args: function (..., envir = parent.frame())
[10:25:45.483]    - tweaked: FALSE
[10:25:45.483]    - call: NULL
[10:25:45.484] plan(): nbrOfWorkers() = 1
[10:25:45.484] plan(): Setting new future strategy stack:
[10:25:45.484] List of future strategies:
[10:25:45.484] 1. sequential:
[10:25:45.484]    - args: function (..., envir = parent.frame())
[10:25:45.484]    - tweaked: FALSE
[10:25:45.484]    - call: future::plan("sequential")
[10:25:45.485] plan(): nbrOfWorkers() = 1
[10:25:45.485] SequentialFuture started (and completed)
[10:25:45.485] - Launch lazy future ... done
[10:25:45.485] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'reset') ...
*** FutureRegistry('multicore-7c798090-b8bb-948d-4e03-5915f93cf455', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:25:45.487] getGlobalsAndPackages() ...
[10:25:45.488] Searching for globals...
[10:25:45.488] - globals found: [1] ‘{’
[10:25:45.488] Searching for globals ... DONE
[10:25:45.488] Resolving globals: FALSE
[10:25:45.489] 
[10:25:45.489] 
[10:25:45.489] getGlobalsAndPackages() ... DONE
[10:25:45.489] run() for ‘Future’ ...
[10:25:45.489] - state: ‘created’
[10:25:45.489] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.490] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.490] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.490]   - Field: ‘label’
[10:25:45.490]   - Field: ‘local’
[10:25:45.490]   - Field: ‘owner’
[10:25:45.490]   - Field: ‘envir’
[10:25:45.490]   - Field: ‘packages’
[10:25:45.490]   - Field: ‘gc’
[10:25:45.490]   - Field: ‘conditions’
[10:25:45.490]   - Field: ‘expr’
[10:25:45.491]   - Field: ‘uuid’
[10:25:45.491]   - Field: ‘seed’
[10:25:45.491]   - Field: ‘version’
[10:25:45.491]   - Field: ‘result’
[10:25:45.491]   - Field: ‘asynchronous’
[10:25:45.491]   - Field: ‘calls’
[10:25:45.491]   - Field: ‘globals’
[10:25:45.491]   - Field: ‘stdout’
[10:25:45.491]   - Field: ‘earlySignal’
[10:25:45.491]   - Field: ‘lazy’
[10:25:45.491]   - Field: ‘state’
[10:25:45.491] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.492] - Launch lazy future ...
[10:25:45.492] Packages needed by the future expression (n = 0): <none>
[10:25:45.492] Packages needed by future strategies (n = 0): <none>
[10:25:45.492] {
[10:25:45.492]     {
[10:25:45.492]         {
[10:25:45.492]             ...future.startTime <- base::Sys.time()
[10:25:45.492]             {
[10:25:45.492]                 {
[10:25:45.492]                   {
[10:25:45.492]                     base::local({
[10:25:45.492]                       has_future <- base::requireNamespace("future", 
[10:25:45.492]                         quietly = TRUE)
[10:25:45.492]                       if (has_future) {
[10:25:45.492]                         ns <- base::getNamespace("future")
[10:25:45.492]                         version <- ns[[".package"]][["version"]]
[10:25:45.492]                         if (is.null(version)) 
[10:25:45.492]                           version <- utils::packageVersion("future")
[10:25:45.492]                       }
[10:25:45.492]                       else {
[10:25:45.492]                         version <- NULL
[10:25:45.492]                       }
[10:25:45.492]                       if (!has_future || version < "1.8.0") {
[10:25:45.492]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.492]                           "", base::R.version$version.string), 
[10:25:45.492]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.492]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.492]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.492]                             "release", "version")], collapse = " "), 
[10:25:45.492]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.492]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.492]                           info)
[10:25:45.492]                         info <- base::paste(info, collapse = "; ")
[10:25:45.492]                         if (!has_future) {
[10:25:45.492]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.492]                             info)
[10:25:45.492]                         }
[10:25:45.492]                         else {
[10:25:45.492]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.492]                             info, version)
[10:25:45.492]                         }
[10:25:45.492]                         base::stop(msg)
[10:25:45.492]                       }
[10:25:45.492]                     })
[10:25:45.492]                   }
[10:25:45.492]                   options(future.plan = NULL)
[10:25:45.492]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.492]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.492]                 }
[10:25:45.492]                 ...future.workdir <- getwd()
[10:25:45.492]             }
[10:25:45.492]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.492]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.492]         }
[10:25:45.492]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.492]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.492]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.492]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.492]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.492]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.492]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.492]             base::names(...future.oldOptions))
[10:25:45.492]     }
[10:25:45.492]     if (FALSE) {
[10:25:45.492]     }
[10:25:45.492]     else {
[10:25:45.492]         if (TRUE) {
[10:25:45.492]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.492]                 open = "w")
[10:25:45.492]         }
[10:25:45.492]         else {
[10:25:45.492]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.492]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.492]         }
[10:25:45.492]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.492]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.492]             base::sink(type = "output", split = FALSE)
[10:25:45.492]             base::close(...future.stdout)
[10:25:45.492]         }, add = TRUE)
[10:25:45.492]     }
[10:25:45.492]     ...future.frame <- base::sys.nframe()
[10:25:45.492]     ...future.conditions <- base::list()
[10:25:45.492]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.492]     if (FALSE) {
[10:25:45.492]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.492]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.492]     }
[10:25:45.492]     ...future.result <- base::tryCatch({
[10:25:45.492]         base::withCallingHandlers({
[10:25:45.492]             ...future.value <- base::withVisible(base::local({
[10:25:45.492]                 1
[10:25:45.492]             }))
[10:25:45.492]             future::FutureResult(value = ...future.value$value, 
[10:25:45.492]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.492]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.492]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.492]                     ...future.globalenv.names))
[10:25:45.492]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.492]         }, condition = base::local({
[10:25:45.492]             c <- base::c
[10:25:45.492]             inherits <- base::inherits
[10:25:45.492]             invokeRestart <- base::invokeRestart
[10:25:45.492]             length <- base::length
[10:25:45.492]             list <- base::list
[10:25:45.492]             seq.int <- base::seq.int
[10:25:45.492]             signalCondition <- base::signalCondition
[10:25:45.492]             sys.calls <- base::sys.calls
[10:25:45.492]             `[[` <- base::`[[`
[10:25:45.492]             `+` <- base::`+`
[10:25:45.492]             `<<-` <- base::`<<-`
[10:25:45.492]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.492]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.492]                   3L)]
[10:25:45.492]             }
[10:25:45.492]             function(cond) {
[10:25:45.492]                 is_error <- inherits(cond, "error")
[10:25:45.492]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.492]                   NULL)
[10:25:45.492]                 if (is_error) {
[10:25:45.492]                   sessionInformation <- function() {
[10:25:45.492]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.492]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.492]                       search = base::search(), system = base::Sys.info())
[10:25:45.492]                   }
[10:25:45.492]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.492]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.492]                     cond$call), session = sessionInformation(), 
[10:25:45.492]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.492]                   signalCondition(cond)
[10:25:45.492]                 }
[10:25:45.492]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.492]                 "immediateCondition"))) {
[10:25:45.492]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.492]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.492]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.492]                   if (TRUE && !signal) {
[10:25:45.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.492]                     {
[10:25:45.492]                       inherits <- base::inherits
[10:25:45.492]                       invokeRestart <- base::invokeRestart
[10:25:45.492]                       is.null <- base::is.null
[10:25:45.492]                       muffled <- FALSE
[10:25:45.492]                       if (inherits(cond, "message")) {
[10:25:45.492]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.492]                         if (muffled) 
[10:25:45.492]                           invokeRestart("muffleMessage")
[10:25:45.492]                       }
[10:25:45.492]                       else if (inherits(cond, "warning")) {
[10:25:45.492]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.492]                         if (muffled) 
[10:25:45.492]                           invokeRestart("muffleWarning")
[10:25:45.492]                       }
[10:25:45.492]                       else if (inherits(cond, "condition")) {
[10:25:45.492]                         if (!is.null(pattern)) {
[10:25:45.492]                           computeRestarts <- base::computeRestarts
[10:25:45.492]                           grepl <- base::grepl
[10:25:45.492]                           restarts <- computeRestarts(cond)
[10:25:45.492]                           for (restart in restarts) {
[10:25:45.492]                             name <- restart$name
[10:25:45.492]                             if (is.null(name)) 
[10:25:45.492]                               next
[10:25:45.492]                             if (!grepl(pattern, name)) 
[10:25:45.492]                               next
[10:25:45.492]                             invokeRestart(restart)
[10:25:45.492]                             muffled <- TRUE
[10:25:45.492]                             break
[10:25:45.492]                           }
[10:25:45.492]                         }
[10:25:45.492]                       }
[10:25:45.492]                       invisible(muffled)
[10:25:45.492]                     }
[10:25:45.492]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.492]                   }
[10:25:45.492]                 }
[10:25:45.492]                 else {
[10:25:45.492]                   if (TRUE) {
[10:25:45.492]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.492]                     {
[10:25:45.492]                       inherits <- base::inherits
[10:25:45.492]                       invokeRestart <- base::invokeRestart
[10:25:45.492]                       is.null <- base::is.null
[10:25:45.492]                       muffled <- FALSE
[10:25:45.492]                       if (inherits(cond, "message")) {
[10:25:45.492]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.492]                         if (muffled) 
[10:25:45.492]                           invokeRestart("muffleMessage")
[10:25:45.492]                       }
[10:25:45.492]                       else if (inherits(cond, "warning")) {
[10:25:45.492]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.492]                         if (muffled) 
[10:25:45.492]                           invokeRestart("muffleWarning")
[10:25:45.492]                       }
[10:25:45.492]                       else if (inherits(cond, "condition")) {
[10:25:45.492]                         if (!is.null(pattern)) {
[10:25:45.492]                           computeRestarts <- base::computeRestarts
[10:25:45.492]                           grepl <- base::grepl
[10:25:45.492]                           restarts <- computeRestarts(cond)
[10:25:45.492]                           for (restart in restarts) {
[10:25:45.492]                             name <- restart$name
[10:25:45.492]                             if (is.null(name)) 
[10:25:45.492]                               next
[10:25:45.492]                             if (!grepl(pattern, name)) 
[10:25:45.492]                               next
[10:25:45.492]                             invokeRestart(restart)
[10:25:45.492]                             muffled <- TRUE
[10:25:45.492]                             break
[10:25:45.492]                           }
[10:25:45.492]                         }
[10:25:45.492]                       }
[10:25:45.492]                       invisible(muffled)
[10:25:45.492]                     }
[10:25:45.492]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.492]                   }
[10:25:45.492]                 }
[10:25:45.492]             }
[10:25:45.492]         }))
[10:25:45.492]     }, error = function(ex) {
[10:25:45.492]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.492]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.492]                 ...future.rng), started = ...future.startTime, 
[10:25:45.492]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.492]             version = "1.8"), class = "FutureResult")
[10:25:45.492]     }, finally = {
[10:25:45.492]         if (!identical(...future.workdir, getwd())) 
[10:25:45.492]             setwd(...future.workdir)
[10:25:45.492]         {
[10:25:45.492]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.492]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.492]             }
[10:25:45.492]             base::options(...future.oldOptions)
[10:25:45.492]             if (.Platform$OS.type == "windows") {
[10:25:45.492]                 old_names <- names(...future.oldEnvVars)
[10:25:45.492]                 envs <- base::Sys.getenv()
[10:25:45.492]                 names <- names(envs)
[10:25:45.492]                 common <- intersect(names, old_names)
[10:25:45.492]                 added <- setdiff(names, old_names)
[10:25:45.492]                 removed <- setdiff(old_names, names)
[10:25:45.492]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.492]                   envs[common]]
[10:25:45.492]                 NAMES <- toupper(changed)
[10:25:45.492]                 args <- list()
[10:25:45.492]                 for (kk in seq_along(NAMES)) {
[10:25:45.492]                   name <- changed[[kk]]
[10:25:45.492]                   NAME <- NAMES[[kk]]
[10:25:45.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.492]                     next
[10:25:45.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.492]                 }
[10:25:45.492]                 NAMES <- toupper(added)
[10:25:45.492]                 for (kk in seq_along(NAMES)) {
[10:25:45.492]                   name <- added[[kk]]
[10:25:45.492]                   NAME <- NAMES[[kk]]
[10:25:45.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.492]                     next
[10:25:45.492]                   args[[name]] <- ""
[10:25:45.492]                 }
[10:25:45.492]                 NAMES <- toupper(removed)
[10:25:45.492]                 for (kk in seq_along(NAMES)) {
[10:25:45.492]                   name <- removed[[kk]]
[10:25:45.492]                   NAME <- NAMES[[kk]]
[10:25:45.492]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.492]                     next
[10:25:45.492]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.492]                 }
[10:25:45.492]                 if (length(args) > 0) 
[10:25:45.492]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.492]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.492]             }
[10:25:45.492]             else {
[10:25:45.492]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.492]             }
[10:25:45.492]             {
[10:25:45.492]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.492]                   0L) {
[10:25:45.492]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.492]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.492]                   base::options(opts)
[10:25:45.492]                 }
[10:25:45.492]                 {
[10:25:45.492]                   {
[10:25:45.492]                     NULL
[10:25:45.492]                     RNGkind("Mersenne-Twister")
[10:25:45.492]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.492]                       inherits = FALSE)
[10:25:45.492]                   }
[10:25:45.492]                   options(future.plan = NULL)
[10:25:45.492]                   if (is.na(NA_character_)) 
[10:25:45.492]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.492]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.492]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.492]                   {
[10:25:45.492]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.492]                     if (!future$lazy) 
[10:25:45.492]                       future <- run(future)
[10:25:45.492]                     invisible(future)
[10:25:45.492]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.492]                 }
[10:25:45.492]             }
[10:25:45.492]         }
[10:25:45.492]     })
[10:25:45.492]     if (TRUE) {
[10:25:45.492]         base::sink(type = "output", split = FALSE)
[10:25:45.492]         if (TRUE) {
[10:25:45.492]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.492]         }
[10:25:45.492]         else {
[10:25:45.492]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.492]         }
[10:25:45.492]         base::close(...future.stdout)
[10:25:45.492]         ...future.stdout <- NULL
[10:25:45.492]     }
[10:25:45.492]     ...future.result$conditions <- ...future.conditions
[10:25:45.492]     ...future.result$finished <- base::Sys.time()
[10:25:45.492]     ...future.result
[10:25:45.492] }
[10:25:45.494] plan(): Setting new future strategy stack:
[10:25:45.494] List of future strategies:
[10:25:45.494] 1. sequential:
[10:25:45.494]    - args: function (..., envir = parent.frame())
[10:25:45.494]    - tweaked: FALSE
[10:25:45.494]    - call: NULL
[10:25:45.494] plan(): nbrOfWorkers() = 1
[10:25:45.495] plan(): Setting new future strategy stack:
[10:25:45.495] List of future strategies:
[10:25:45.495] 1. sequential:
[10:25:45.495]    - args: function (..., envir = parent.frame())
[10:25:45.495]    - tweaked: FALSE
[10:25:45.495]    - call: future::plan("sequential")
[10:25:45.495] plan(): nbrOfWorkers() = 1
[10:25:45.496] SequentialFuture started (and completed)
[10:25:45.496] - Launch lazy future ... done
[10:25:45.496] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[10:25:45.497] getGlobalsAndPackages() ...
[10:25:45.497] Searching for globals...
[10:25:45.497] - globals found: [1] ‘{’
[10:25:45.498] Searching for globals ... DONE
[10:25:45.498] Resolving globals: FALSE
[10:25:45.498] 
[10:25:45.498] 
[10:25:45.498] getGlobalsAndPackages() ... DONE
[10:25:45.498] run() for ‘Future’ ...
[10:25:45.498] - state: ‘created’
[10:25:45.499] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.499] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.499] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.499]   - Field: ‘label’
[10:25:45.499]   - Field: ‘local’
[10:25:45.499]   - Field: ‘owner’
[10:25:45.499]   - Field: ‘envir’
[10:25:45.499]   - Field: ‘packages’
[10:25:45.499]   - Field: ‘gc’
[10:25:45.499]   - Field: ‘conditions’
[10:25:45.500]   - Field: ‘expr’
[10:25:45.500]   - Field: ‘uuid’
[10:25:45.500]   - Field: ‘seed’
[10:25:45.500]   - Field: ‘version’
[10:25:45.500]   - Field: ‘result’
[10:25:45.500]   - Field: ‘asynchronous’
[10:25:45.500]   - Field: ‘calls’
[10:25:45.500]   - Field: ‘globals’
[10:25:45.500]   - Field: ‘stdout’
[10:25:45.500]   - Field: ‘earlySignal’
[10:25:45.500]   - Field: ‘lazy’
[10:25:45.501]   - Field: ‘state’
[10:25:45.501] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.501] - Launch lazy future ...
[10:25:45.501] Packages needed by the future expression (n = 0): <none>
[10:25:45.501] Packages needed by future strategies (n = 0): <none>
[10:25:45.501] {
[10:25:45.501]     {
[10:25:45.501]         {
[10:25:45.501]             ...future.startTime <- base::Sys.time()
[10:25:45.501]             {
[10:25:45.501]                 {
[10:25:45.501]                   {
[10:25:45.501]                     base::local({
[10:25:45.501]                       has_future <- base::requireNamespace("future", 
[10:25:45.501]                         quietly = TRUE)
[10:25:45.501]                       if (has_future) {
[10:25:45.501]                         ns <- base::getNamespace("future")
[10:25:45.501]                         version <- ns[[".package"]][["version"]]
[10:25:45.501]                         if (is.null(version)) 
[10:25:45.501]                           version <- utils::packageVersion("future")
[10:25:45.501]                       }
[10:25:45.501]                       else {
[10:25:45.501]                         version <- NULL
[10:25:45.501]                       }
[10:25:45.501]                       if (!has_future || version < "1.8.0") {
[10:25:45.501]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.501]                           "", base::R.version$version.string), 
[10:25:45.501]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.501]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.501]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.501]                             "release", "version")], collapse = " "), 
[10:25:45.501]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.501]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.501]                           info)
[10:25:45.501]                         info <- base::paste(info, collapse = "; ")
[10:25:45.501]                         if (!has_future) {
[10:25:45.501]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.501]                             info)
[10:25:45.501]                         }
[10:25:45.501]                         else {
[10:25:45.501]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.501]                             info, version)
[10:25:45.501]                         }
[10:25:45.501]                         base::stop(msg)
[10:25:45.501]                       }
[10:25:45.501]                     })
[10:25:45.501]                   }
[10:25:45.501]                   options(future.plan = NULL)
[10:25:45.501]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.501]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.501]                 }
[10:25:45.501]                 ...future.workdir <- getwd()
[10:25:45.501]             }
[10:25:45.501]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.501]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.501]         }
[10:25:45.501]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.501]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.501]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.501]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.501]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.501]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.501]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.501]             base::names(...future.oldOptions))
[10:25:45.501]     }
[10:25:45.501]     if (FALSE) {
[10:25:45.501]     }
[10:25:45.501]     else {
[10:25:45.501]         if (TRUE) {
[10:25:45.501]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.501]                 open = "w")
[10:25:45.501]         }
[10:25:45.501]         else {
[10:25:45.501]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.501]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.501]         }
[10:25:45.501]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.501]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.501]             base::sink(type = "output", split = FALSE)
[10:25:45.501]             base::close(...future.stdout)
[10:25:45.501]         }, add = TRUE)
[10:25:45.501]     }
[10:25:45.501]     ...future.frame <- base::sys.nframe()
[10:25:45.501]     ...future.conditions <- base::list()
[10:25:45.501]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.501]     if (FALSE) {
[10:25:45.501]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.501]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.501]     }
[10:25:45.501]     ...future.result <- base::tryCatch({
[10:25:45.501]         base::withCallingHandlers({
[10:25:45.501]             ...future.value <- base::withVisible(base::local({
[10:25:45.501]                 2
[10:25:45.501]             }))
[10:25:45.501]             future::FutureResult(value = ...future.value$value, 
[10:25:45.501]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.501]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.501]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.501]                     ...future.globalenv.names))
[10:25:45.501]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.501]         }, condition = base::local({
[10:25:45.501]             c <- base::c
[10:25:45.501]             inherits <- base::inherits
[10:25:45.501]             invokeRestart <- base::invokeRestart
[10:25:45.501]             length <- base::length
[10:25:45.501]             list <- base::list
[10:25:45.501]             seq.int <- base::seq.int
[10:25:45.501]             signalCondition <- base::signalCondition
[10:25:45.501]             sys.calls <- base::sys.calls
[10:25:45.501]             `[[` <- base::`[[`
[10:25:45.501]             `+` <- base::`+`
[10:25:45.501]             `<<-` <- base::`<<-`
[10:25:45.501]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.501]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.501]                   3L)]
[10:25:45.501]             }
[10:25:45.501]             function(cond) {
[10:25:45.501]                 is_error <- inherits(cond, "error")
[10:25:45.501]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.501]                   NULL)
[10:25:45.501]                 if (is_error) {
[10:25:45.501]                   sessionInformation <- function() {
[10:25:45.501]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.501]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.501]                       search = base::search(), system = base::Sys.info())
[10:25:45.501]                   }
[10:25:45.501]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.501]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.501]                     cond$call), session = sessionInformation(), 
[10:25:45.501]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.501]                   signalCondition(cond)
[10:25:45.501]                 }
[10:25:45.501]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.501]                 "immediateCondition"))) {
[10:25:45.501]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.501]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.501]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.501]                   if (TRUE && !signal) {
[10:25:45.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.501]                     {
[10:25:45.501]                       inherits <- base::inherits
[10:25:45.501]                       invokeRestart <- base::invokeRestart
[10:25:45.501]                       is.null <- base::is.null
[10:25:45.501]                       muffled <- FALSE
[10:25:45.501]                       if (inherits(cond, "message")) {
[10:25:45.501]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.501]                         if (muffled) 
[10:25:45.501]                           invokeRestart("muffleMessage")
[10:25:45.501]                       }
[10:25:45.501]                       else if (inherits(cond, "warning")) {
[10:25:45.501]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.501]                         if (muffled) 
[10:25:45.501]                           invokeRestart("muffleWarning")
[10:25:45.501]                       }
[10:25:45.501]                       else if (inherits(cond, "condition")) {
[10:25:45.501]                         if (!is.null(pattern)) {
[10:25:45.501]                           computeRestarts <- base::computeRestarts
[10:25:45.501]                           grepl <- base::grepl
[10:25:45.501]                           restarts <- computeRestarts(cond)
[10:25:45.501]                           for (restart in restarts) {
[10:25:45.501]                             name <- restart$name
[10:25:45.501]                             if (is.null(name)) 
[10:25:45.501]                               next
[10:25:45.501]                             if (!grepl(pattern, name)) 
[10:25:45.501]                               next
[10:25:45.501]                             invokeRestart(restart)
[10:25:45.501]                             muffled <- TRUE
[10:25:45.501]                             break
[10:25:45.501]                           }
[10:25:45.501]                         }
[10:25:45.501]                       }
[10:25:45.501]                       invisible(muffled)
[10:25:45.501]                     }
[10:25:45.501]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.501]                   }
[10:25:45.501]                 }
[10:25:45.501]                 else {
[10:25:45.501]                   if (TRUE) {
[10:25:45.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.501]                     {
[10:25:45.501]                       inherits <- base::inherits
[10:25:45.501]                       invokeRestart <- base::invokeRestart
[10:25:45.501]                       is.null <- base::is.null
[10:25:45.501]                       muffled <- FALSE
[10:25:45.501]                       if (inherits(cond, "message")) {
[10:25:45.501]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.501]                         if (muffled) 
[10:25:45.501]                           invokeRestart("muffleMessage")
[10:25:45.501]                       }
[10:25:45.501]                       else if (inherits(cond, "warning")) {
[10:25:45.501]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.501]                         if (muffled) 
[10:25:45.501]                           invokeRestart("muffleWarning")
[10:25:45.501]                       }
[10:25:45.501]                       else if (inherits(cond, "condition")) {
[10:25:45.501]                         if (!is.null(pattern)) {
[10:25:45.501]                           computeRestarts <- base::computeRestarts
[10:25:45.501]                           grepl <- base::grepl
[10:25:45.501]                           restarts <- computeRestarts(cond)
[10:25:45.501]                           for (restart in restarts) {
[10:25:45.501]                             name <- restart$name
[10:25:45.501]                             if (is.null(name)) 
[10:25:45.501]                               next
[10:25:45.501]                             if (!grepl(pattern, name)) 
[10:25:45.501]                               next
[10:25:45.501]                             invokeRestart(restart)
[10:25:45.501]                             muffled <- TRUE
[10:25:45.501]                             break
[10:25:45.501]                           }
[10:25:45.501]                         }
[10:25:45.501]                       }
[10:25:45.501]                       invisible(muffled)
[10:25:45.501]                     }
[10:25:45.501]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.501]                   }
[10:25:45.501]                 }
[10:25:45.501]             }
[10:25:45.501]         }))
[10:25:45.501]     }, error = function(ex) {
[10:25:45.501]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.501]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.501]                 ...future.rng), started = ...future.startTime, 
[10:25:45.501]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.501]             version = "1.8"), class = "FutureResult")
[10:25:45.501]     }, finally = {
[10:25:45.501]         if (!identical(...future.workdir, getwd())) 
[10:25:45.501]             setwd(...future.workdir)
[10:25:45.501]         {
[10:25:45.501]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.501]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.501]             }
[10:25:45.501]             base::options(...future.oldOptions)
[10:25:45.501]             if (.Platform$OS.type == "windows") {
[10:25:45.501]                 old_names <- names(...future.oldEnvVars)
[10:25:45.501]                 envs <- base::Sys.getenv()
[10:25:45.501]                 names <- names(envs)
[10:25:45.501]                 common <- intersect(names, old_names)
[10:25:45.501]                 added <- setdiff(names, old_names)
[10:25:45.501]                 removed <- setdiff(old_names, names)
[10:25:45.501]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.501]                   envs[common]]
[10:25:45.501]                 NAMES <- toupper(changed)
[10:25:45.501]                 args <- list()
[10:25:45.501]                 for (kk in seq_along(NAMES)) {
[10:25:45.501]                   name <- changed[[kk]]
[10:25:45.501]                   NAME <- NAMES[[kk]]
[10:25:45.501]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.501]                     next
[10:25:45.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.501]                 }
[10:25:45.501]                 NAMES <- toupper(added)
[10:25:45.501]                 for (kk in seq_along(NAMES)) {
[10:25:45.501]                   name <- added[[kk]]
[10:25:45.501]                   NAME <- NAMES[[kk]]
[10:25:45.501]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.501]                     next
[10:25:45.501]                   args[[name]] <- ""
[10:25:45.501]                 }
[10:25:45.501]                 NAMES <- toupper(removed)
[10:25:45.501]                 for (kk in seq_along(NAMES)) {
[10:25:45.501]                   name <- removed[[kk]]
[10:25:45.501]                   NAME <- NAMES[[kk]]
[10:25:45.501]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.501]                     next
[10:25:45.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.501]                 }
[10:25:45.501]                 if (length(args) > 0) 
[10:25:45.501]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.501]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.501]             }
[10:25:45.501]             else {
[10:25:45.501]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.501]             }
[10:25:45.501]             {
[10:25:45.501]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.501]                   0L) {
[10:25:45.501]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.501]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.501]                   base::options(opts)
[10:25:45.501]                 }
[10:25:45.501]                 {
[10:25:45.501]                   {
[10:25:45.501]                     NULL
[10:25:45.501]                     RNGkind("Mersenne-Twister")
[10:25:45.501]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.501]                       inherits = FALSE)
[10:25:45.501]                   }
[10:25:45.501]                   options(future.plan = NULL)
[10:25:45.501]                   if (is.na(NA_character_)) 
[10:25:45.501]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.501]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.501]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.501]                   {
[10:25:45.501]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.501]                     if (!future$lazy) 
[10:25:45.501]                       future <- run(future)
[10:25:45.501]                     invisible(future)
[10:25:45.501]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.501]                 }
[10:25:45.501]             }
[10:25:45.501]         }
[10:25:45.501]     })
[10:25:45.501]     if (TRUE) {
[10:25:45.501]         base::sink(type = "output", split = FALSE)
[10:25:45.501]         if (TRUE) {
[10:25:45.501]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.501]         }
[10:25:45.501]         else {
[10:25:45.501]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.501]         }
[10:25:45.501]         base::close(...future.stdout)
[10:25:45.501]         ...future.stdout <- NULL
[10:25:45.501]     }
[10:25:45.501]     ...future.result$conditions <- ...future.conditions
[10:25:45.501]     ...future.result$finished <- base::Sys.time()
[10:25:45.501]     ...future.result
[10:25:45.501] }
[10:25:45.503] plan(): Setting new future strategy stack:
[10:25:45.503] List of future strategies:
[10:25:45.503] 1. sequential:
[10:25:45.503]    - args: function (..., envir = parent.frame())
[10:25:45.503]    - tweaked: FALSE
[10:25:45.503]    - call: NULL
[10:25:45.503] plan(): nbrOfWorkers() = 1
[10:25:45.504] plan(): Setting new future strategy stack:
[10:25:45.504] List of future strategies:
[10:25:45.504] 1. sequential:
[10:25:45.504]    - args: function (..., envir = parent.frame())
[10:25:45.504]    - tweaked: FALSE
[10:25:45.504]    - call: future::plan("sequential")
[10:25:45.505] plan(): nbrOfWorkers() = 1
[10:25:45.505] SequentialFuture started (and completed)
[10:25:45.505] - Launch lazy future ... done
[10:25:45.505] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[10:25:45.513] resolved() for ‘SequentialFuture’ ...
[10:25:45.513] - state: ‘finished’
[10:25:45.514] - run: FALSE
[10:25:45.514] - result: ‘FutureResult’
[10:25:45.514] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[10:25:45.514] getGlobalsAndPackages() ...
[10:25:45.514] Searching for globals...
[10:25:45.515] - globals found: [1] ‘{’
[10:25:45.516] Searching for globals ... DONE
[10:25:45.516] Resolving globals: FALSE
[10:25:45.516] 
[10:25:45.516] 
[10:25:45.516] getGlobalsAndPackages() ... DONE
[10:25:45.516] run() for ‘Future’ ...
[10:25:45.517] - state: ‘created’
[10:25:45.517] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.517] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.517] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.517]   - Field: ‘label’
[10:25:45.517]   - Field: ‘local’
[10:25:45.517]   - Field: ‘owner’
[10:25:45.517]   - Field: ‘envir’
[10:25:45.518]   - Field: ‘packages’
[10:25:45.518]   - Field: ‘gc’
[10:25:45.518]   - Field: ‘conditions’
[10:25:45.518]   - Field: ‘expr’
[10:25:45.518]   - Field: ‘uuid’
[10:25:45.518]   - Field: ‘seed’
[10:25:45.518]   - Field: ‘version’
[10:25:45.518]   - Field: ‘result’
[10:25:45.518]   - Field: ‘asynchronous’
[10:25:45.518]   - Field: ‘calls’
[10:25:45.518]   - Field: ‘globals’
[10:25:45.518]   - Field: ‘stdout’
[10:25:45.519]   - Field: ‘earlySignal’
[10:25:45.519]   - Field: ‘lazy’
[10:25:45.519]   - Field: ‘state’
[10:25:45.519] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.519] - Launch lazy future ...
[10:25:45.519] Packages needed by the future expression (n = 0): <none>
[10:25:45.519] Packages needed by future strategies (n = 0): <none>
[10:25:45.520] {
[10:25:45.520]     {
[10:25:45.520]         {
[10:25:45.520]             ...future.startTime <- base::Sys.time()
[10:25:45.520]             {
[10:25:45.520]                 {
[10:25:45.520]                   {
[10:25:45.520]                     base::local({
[10:25:45.520]                       has_future <- base::requireNamespace("future", 
[10:25:45.520]                         quietly = TRUE)
[10:25:45.520]                       if (has_future) {
[10:25:45.520]                         ns <- base::getNamespace("future")
[10:25:45.520]                         version <- ns[[".package"]][["version"]]
[10:25:45.520]                         if (is.null(version)) 
[10:25:45.520]                           version <- utils::packageVersion("future")
[10:25:45.520]                       }
[10:25:45.520]                       else {
[10:25:45.520]                         version <- NULL
[10:25:45.520]                       }
[10:25:45.520]                       if (!has_future || version < "1.8.0") {
[10:25:45.520]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.520]                           "", base::R.version$version.string), 
[10:25:45.520]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.520]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.520]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.520]                             "release", "version")], collapse = " "), 
[10:25:45.520]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.520]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.520]                           info)
[10:25:45.520]                         info <- base::paste(info, collapse = "; ")
[10:25:45.520]                         if (!has_future) {
[10:25:45.520]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.520]                             info)
[10:25:45.520]                         }
[10:25:45.520]                         else {
[10:25:45.520]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.520]                             info, version)
[10:25:45.520]                         }
[10:25:45.520]                         base::stop(msg)
[10:25:45.520]                       }
[10:25:45.520]                     })
[10:25:45.520]                   }
[10:25:45.520]                   options(future.plan = NULL)
[10:25:45.520]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.520]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.520]                 }
[10:25:45.520]                 ...future.workdir <- getwd()
[10:25:45.520]             }
[10:25:45.520]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.520]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.520]         }
[10:25:45.520]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.520]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.520]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.520]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.520]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.520]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.520]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.520]             base::names(...future.oldOptions))
[10:25:45.520]     }
[10:25:45.520]     if (FALSE) {
[10:25:45.520]     }
[10:25:45.520]     else {
[10:25:45.520]         if (TRUE) {
[10:25:45.520]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.520]                 open = "w")
[10:25:45.520]         }
[10:25:45.520]         else {
[10:25:45.520]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.520]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.520]         }
[10:25:45.520]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.520]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.520]             base::sink(type = "output", split = FALSE)
[10:25:45.520]             base::close(...future.stdout)
[10:25:45.520]         }, add = TRUE)
[10:25:45.520]     }
[10:25:45.520]     ...future.frame <- base::sys.nframe()
[10:25:45.520]     ...future.conditions <- base::list()
[10:25:45.520]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.520]     if (FALSE) {
[10:25:45.520]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.520]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.520]     }
[10:25:45.520]     ...future.result <- base::tryCatch({
[10:25:45.520]         base::withCallingHandlers({
[10:25:45.520]             ...future.value <- base::withVisible(base::local({
[10:25:45.520]                 2
[10:25:45.520]             }))
[10:25:45.520]             future::FutureResult(value = ...future.value$value, 
[10:25:45.520]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.520]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.520]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.520]                     ...future.globalenv.names))
[10:25:45.520]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.520]         }, condition = base::local({
[10:25:45.520]             c <- base::c
[10:25:45.520]             inherits <- base::inherits
[10:25:45.520]             invokeRestart <- base::invokeRestart
[10:25:45.520]             length <- base::length
[10:25:45.520]             list <- base::list
[10:25:45.520]             seq.int <- base::seq.int
[10:25:45.520]             signalCondition <- base::signalCondition
[10:25:45.520]             sys.calls <- base::sys.calls
[10:25:45.520]             `[[` <- base::`[[`
[10:25:45.520]             `+` <- base::`+`
[10:25:45.520]             `<<-` <- base::`<<-`
[10:25:45.520]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.520]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.520]                   3L)]
[10:25:45.520]             }
[10:25:45.520]             function(cond) {
[10:25:45.520]                 is_error <- inherits(cond, "error")
[10:25:45.520]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.520]                   NULL)
[10:25:45.520]                 if (is_error) {
[10:25:45.520]                   sessionInformation <- function() {
[10:25:45.520]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.520]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.520]                       search = base::search(), system = base::Sys.info())
[10:25:45.520]                   }
[10:25:45.520]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.520]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.520]                     cond$call), session = sessionInformation(), 
[10:25:45.520]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.520]                   signalCondition(cond)
[10:25:45.520]                 }
[10:25:45.520]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.520]                 "immediateCondition"))) {
[10:25:45.520]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.520]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.520]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.520]                   if (TRUE && !signal) {
[10:25:45.520]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.520]                     {
[10:25:45.520]                       inherits <- base::inherits
[10:25:45.520]                       invokeRestart <- base::invokeRestart
[10:25:45.520]                       is.null <- base::is.null
[10:25:45.520]                       muffled <- FALSE
[10:25:45.520]                       if (inherits(cond, "message")) {
[10:25:45.520]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.520]                         if (muffled) 
[10:25:45.520]                           invokeRestart("muffleMessage")
[10:25:45.520]                       }
[10:25:45.520]                       else if (inherits(cond, "warning")) {
[10:25:45.520]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.520]                         if (muffled) 
[10:25:45.520]                           invokeRestart("muffleWarning")
[10:25:45.520]                       }
[10:25:45.520]                       else if (inherits(cond, "condition")) {
[10:25:45.520]                         if (!is.null(pattern)) {
[10:25:45.520]                           computeRestarts <- base::computeRestarts
[10:25:45.520]                           grepl <- base::grepl
[10:25:45.520]                           restarts <- computeRestarts(cond)
[10:25:45.520]                           for (restart in restarts) {
[10:25:45.520]                             name <- restart$name
[10:25:45.520]                             if (is.null(name)) 
[10:25:45.520]                               next
[10:25:45.520]                             if (!grepl(pattern, name)) 
[10:25:45.520]                               next
[10:25:45.520]                             invokeRestart(restart)
[10:25:45.520]                             muffled <- TRUE
[10:25:45.520]                             break
[10:25:45.520]                           }
[10:25:45.520]                         }
[10:25:45.520]                       }
[10:25:45.520]                       invisible(muffled)
[10:25:45.520]                     }
[10:25:45.520]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.520]                   }
[10:25:45.520]                 }
[10:25:45.520]                 else {
[10:25:45.520]                   if (TRUE) {
[10:25:45.520]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.520]                     {
[10:25:45.520]                       inherits <- base::inherits
[10:25:45.520]                       invokeRestart <- base::invokeRestart
[10:25:45.520]                       is.null <- base::is.null
[10:25:45.520]                       muffled <- FALSE
[10:25:45.520]                       if (inherits(cond, "message")) {
[10:25:45.520]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.520]                         if (muffled) 
[10:25:45.520]                           invokeRestart("muffleMessage")
[10:25:45.520]                       }
[10:25:45.520]                       else if (inherits(cond, "warning")) {
[10:25:45.520]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.520]                         if (muffled) 
[10:25:45.520]                           invokeRestart("muffleWarning")
[10:25:45.520]                       }
[10:25:45.520]                       else if (inherits(cond, "condition")) {
[10:25:45.520]                         if (!is.null(pattern)) {
[10:25:45.520]                           computeRestarts <- base::computeRestarts
[10:25:45.520]                           grepl <- base::grepl
[10:25:45.520]                           restarts <- computeRestarts(cond)
[10:25:45.520]                           for (restart in restarts) {
[10:25:45.520]                             name <- restart$name
[10:25:45.520]                             if (is.null(name)) 
[10:25:45.520]                               next
[10:25:45.520]                             if (!grepl(pattern, name)) 
[10:25:45.520]                               next
[10:25:45.520]                             invokeRestart(restart)
[10:25:45.520]                             muffled <- TRUE
[10:25:45.520]                             break
[10:25:45.520]                           }
[10:25:45.520]                         }
[10:25:45.520]                       }
[10:25:45.520]                       invisible(muffled)
[10:25:45.520]                     }
[10:25:45.520]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.520]                   }
[10:25:45.520]                 }
[10:25:45.520]             }
[10:25:45.520]         }))
[10:25:45.520]     }, error = function(ex) {
[10:25:45.520]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.520]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.520]                 ...future.rng), started = ...future.startTime, 
[10:25:45.520]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.520]             version = "1.8"), class = "FutureResult")
[10:25:45.520]     }, finally = {
[10:25:45.520]         if (!identical(...future.workdir, getwd())) 
[10:25:45.520]             setwd(...future.workdir)
[10:25:45.520]         {
[10:25:45.520]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.520]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.520]             }
[10:25:45.520]             base::options(...future.oldOptions)
[10:25:45.520]             if (.Platform$OS.type == "windows") {
[10:25:45.520]                 old_names <- names(...future.oldEnvVars)
[10:25:45.520]                 envs <- base::Sys.getenv()
[10:25:45.520]                 names <- names(envs)
[10:25:45.520]                 common <- intersect(names, old_names)
[10:25:45.520]                 added <- setdiff(names, old_names)
[10:25:45.520]                 removed <- setdiff(old_names, names)
[10:25:45.520]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.520]                   envs[common]]
[10:25:45.520]                 NAMES <- toupper(changed)
[10:25:45.520]                 args <- list()
[10:25:45.520]                 for (kk in seq_along(NAMES)) {
[10:25:45.520]                   name <- changed[[kk]]
[10:25:45.520]                   NAME <- NAMES[[kk]]
[10:25:45.520]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.520]                     next
[10:25:45.520]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.520]                 }
[10:25:45.520]                 NAMES <- toupper(added)
[10:25:45.520]                 for (kk in seq_along(NAMES)) {
[10:25:45.520]                   name <- added[[kk]]
[10:25:45.520]                   NAME <- NAMES[[kk]]
[10:25:45.520]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.520]                     next
[10:25:45.520]                   args[[name]] <- ""
[10:25:45.520]                 }
[10:25:45.520]                 NAMES <- toupper(removed)
[10:25:45.520]                 for (kk in seq_along(NAMES)) {
[10:25:45.520]                   name <- removed[[kk]]
[10:25:45.520]                   NAME <- NAMES[[kk]]
[10:25:45.520]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.520]                     next
[10:25:45.520]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.520]                 }
[10:25:45.520]                 if (length(args) > 0) 
[10:25:45.520]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.520]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.520]             }
[10:25:45.520]             else {
[10:25:45.520]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.520]             }
[10:25:45.520]             {
[10:25:45.520]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.520]                   0L) {
[10:25:45.520]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.520]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.520]                   base::options(opts)
[10:25:45.520]                 }
[10:25:45.520]                 {
[10:25:45.520]                   {
[10:25:45.520]                     NULL
[10:25:45.520]                     RNGkind("Mersenne-Twister")
[10:25:45.520]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.520]                       inherits = FALSE)
[10:25:45.520]                   }
[10:25:45.520]                   options(future.plan = NULL)
[10:25:45.520]                   if (is.na(NA_character_)) 
[10:25:45.520]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.520]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.520]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.520]                   {
[10:25:45.520]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.520]                     if (!future$lazy) 
[10:25:45.520]                       future <- run(future)
[10:25:45.520]                     invisible(future)
[10:25:45.520]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.520]                 }
[10:25:45.520]             }
[10:25:45.520]         }
[10:25:45.520]     })
[10:25:45.520]     if (TRUE) {
[10:25:45.520]         base::sink(type = "output", split = FALSE)
[10:25:45.520]         if (TRUE) {
[10:25:45.520]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.520]         }
[10:25:45.520]         else {
[10:25:45.520]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.520]         }
[10:25:45.520]         base::close(...future.stdout)
[10:25:45.520]         ...future.stdout <- NULL
[10:25:45.520]     }
[10:25:45.520]     ...future.result$conditions <- ...future.conditions
[10:25:45.520]     ...future.result$finished <- base::Sys.time()
[10:25:45.520]     ...future.result
[10:25:45.520] }
[10:25:45.521] plan(): Setting new future strategy stack:
[10:25:45.521] List of future strategies:
[10:25:45.521] 1. sequential:
[10:25:45.521]    - args: function (..., envir = parent.frame())
[10:25:45.521]    - tweaked: FALSE
[10:25:45.521]    - call: NULL
[10:25:45.522] plan(): nbrOfWorkers() = 1
[10:25:45.522] plan(): Setting new future strategy stack:
[10:25:45.522] List of future strategies:
[10:25:45.522] 1. sequential:
[10:25:45.522]    - args: function (..., envir = parent.frame())
[10:25:45.522]    - tweaked: FALSE
[10:25:45.522]    - call: future::plan("sequential")
[10:25:45.523] plan(): nbrOfWorkers() = 1
[10:25:45.523] SequentialFuture started (and completed)
[10:25:45.523] - Launch lazy future ... done
[10:25:45.523] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[10:25:45.524] getGlobalsAndPackages() ...
[10:25:45.524] Searching for globals...
[10:25:45.524] 
[10:25:45.524] Searching for globals ... DONE
[10:25:45.524] - globals: [0] <none>
[10:25:45.525] getGlobalsAndPackages() ... DONE
[10:25:45.525] run() for ‘Future’ ...
[10:25:45.525] - state: ‘created’
[10:25:45.525] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:45.525] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:45.525] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:45.525]   - Field: ‘label’
[10:25:45.525]   - Field: ‘local’
[10:25:45.526]   - Field: ‘owner’
[10:25:45.526]   - Field: ‘envir’
[10:25:45.526]   - Field: ‘packages’
[10:25:45.526]   - Field: ‘gc’
[10:25:45.526]   - Field: ‘conditions’
[10:25:45.526]   - Field: ‘expr’
[10:25:45.526]   - Field: ‘uuid’
[10:25:45.526]   - Field: ‘seed’
[10:25:45.526]   - Field: ‘version’
[10:25:45.526]   - Field: ‘result’
[10:25:45.526]   - Field: ‘asynchronous’
[10:25:45.527]   - Field: ‘calls’
[10:25:45.527]   - Field: ‘globals’
[10:25:45.527]   - Field: ‘stdout’
[10:25:45.527]   - Field: ‘earlySignal’
[10:25:45.527]   - Field: ‘lazy’
[10:25:45.527]   - Field: ‘state’
[10:25:45.527] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:45.527] - Launch lazy future ...
[10:25:45.527] Packages needed by the future expression (n = 0): <none>
[10:25:45.527] Packages needed by future strategies (n = 0): <none>
[10:25:45.528] {
[10:25:45.528]     {
[10:25:45.528]         {
[10:25:45.528]             ...future.startTime <- base::Sys.time()
[10:25:45.528]             {
[10:25:45.528]                 {
[10:25:45.528]                   {
[10:25:45.528]                     base::local({
[10:25:45.528]                       has_future <- base::requireNamespace("future", 
[10:25:45.528]                         quietly = TRUE)
[10:25:45.528]                       if (has_future) {
[10:25:45.528]                         ns <- base::getNamespace("future")
[10:25:45.528]                         version <- ns[[".package"]][["version"]]
[10:25:45.528]                         if (is.null(version)) 
[10:25:45.528]                           version <- utils::packageVersion("future")
[10:25:45.528]                       }
[10:25:45.528]                       else {
[10:25:45.528]                         version <- NULL
[10:25:45.528]                       }
[10:25:45.528]                       if (!has_future || version < "1.8.0") {
[10:25:45.528]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:45.528]                           "", base::R.version$version.string), 
[10:25:45.528]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:45.528]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:45.528]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:45.528]                             "release", "version")], collapse = " "), 
[10:25:45.528]                           hostname = base::Sys.info()[["nodename"]])
[10:25:45.528]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:45.528]                           info)
[10:25:45.528]                         info <- base::paste(info, collapse = "; ")
[10:25:45.528]                         if (!has_future) {
[10:25:45.528]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:45.528]                             info)
[10:25:45.528]                         }
[10:25:45.528]                         else {
[10:25:45.528]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:45.528]                             info, version)
[10:25:45.528]                         }
[10:25:45.528]                         base::stop(msg)
[10:25:45.528]                       }
[10:25:45.528]                     })
[10:25:45.528]                   }
[10:25:45.528]                   options(future.plan = NULL)
[10:25:45.528]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.528]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:45.528]                 }
[10:25:45.528]                 ...future.workdir <- getwd()
[10:25:45.528]             }
[10:25:45.528]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:45.528]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:45.528]         }
[10:25:45.528]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:45.528]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:45.528]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:45.528]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:45.528]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:45.528]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:45.528]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:45.528]             base::names(...future.oldOptions))
[10:25:45.528]     }
[10:25:45.528]     if (FALSE) {
[10:25:45.528]     }
[10:25:45.528]     else {
[10:25:45.528]         if (TRUE) {
[10:25:45.528]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:45.528]                 open = "w")
[10:25:45.528]         }
[10:25:45.528]         else {
[10:25:45.528]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:45.528]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:45.528]         }
[10:25:45.528]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:45.528]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:45.528]             base::sink(type = "output", split = FALSE)
[10:25:45.528]             base::close(...future.stdout)
[10:25:45.528]         }, add = TRUE)
[10:25:45.528]     }
[10:25:45.528]     ...future.frame <- base::sys.nframe()
[10:25:45.528]     ...future.conditions <- base::list()
[10:25:45.528]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:45.528]     if (FALSE) {
[10:25:45.528]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:45.528]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:45.528]     }
[10:25:45.528]     ...future.result <- base::tryCatch({
[10:25:45.528]         base::withCallingHandlers({
[10:25:45.528]             ...future.value <- base::withVisible(base::local(1))
[10:25:45.528]             future::FutureResult(value = ...future.value$value, 
[10:25:45.528]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.528]                   ...future.rng), globalenv = if (FALSE) 
[10:25:45.528]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:45.528]                     ...future.globalenv.names))
[10:25:45.528]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:45.528]         }, condition = base::local({
[10:25:45.528]             c <- base::c
[10:25:45.528]             inherits <- base::inherits
[10:25:45.528]             invokeRestart <- base::invokeRestart
[10:25:45.528]             length <- base::length
[10:25:45.528]             list <- base::list
[10:25:45.528]             seq.int <- base::seq.int
[10:25:45.528]             signalCondition <- base::signalCondition
[10:25:45.528]             sys.calls <- base::sys.calls
[10:25:45.528]             `[[` <- base::`[[`
[10:25:45.528]             `+` <- base::`+`
[10:25:45.528]             `<<-` <- base::`<<-`
[10:25:45.528]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:45.528]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:45.528]                   3L)]
[10:25:45.528]             }
[10:25:45.528]             function(cond) {
[10:25:45.528]                 is_error <- inherits(cond, "error")
[10:25:45.528]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:45.528]                   NULL)
[10:25:45.528]                 if (is_error) {
[10:25:45.528]                   sessionInformation <- function() {
[10:25:45.528]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:45.528]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:45.528]                       search = base::search(), system = base::Sys.info())
[10:25:45.528]                   }
[10:25:45.528]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.528]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:45.528]                     cond$call), session = sessionInformation(), 
[10:25:45.528]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:45.528]                   signalCondition(cond)
[10:25:45.528]                 }
[10:25:45.528]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:45.528]                 "immediateCondition"))) {
[10:25:45.528]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:45.528]                   ...future.conditions[[length(...future.conditions) + 
[10:25:45.528]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:45.528]                   if (TRUE && !signal) {
[10:25:45.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.528]                     {
[10:25:45.528]                       inherits <- base::inherits
[10:25:45.528]                       invokeRestart <- base::invokeRestart
[10:25:45.528]                       is.null <- base::is.null
[10:25:45.528]                       muffled <- FALSE
[10:25:45.528]                       if (inherits(cond, "message")) {
[10:25:45.528]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.528]                         if (muffled) 
[10:25:45.528]                           invokeRestart("muffleMessage")
[10:25:45.528]                       }
[10:25:45.528]                       else if (inherits(cond, "warning")) {
[10:25:45.528]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.528]                         if (muffled) 
[10:25:45.528]                           invokeRestart("muffleWarning")
[10:25:45.528]                       }
[10:25:45.528]                       else if (inherits(cond, "condition")) {
[10:25:45.528]                         if (!is.null(pattern)) {
[10:25:45.528]                           computeRestarts <- base::computeRestarts
[10:25:45.528]                           grepl <- base::grepl
[10:25:45.528]                           restarts <- computeRestarts(cond)
[10:25:45.528]                           for (restart in restarts) {
[10:25:45.528]                             name <- restart$name
[10:25:45.528]                             if (is.null(name)) 
[10:25:45.528]                               next
[10:25:45.528]                             if (!grepl(pattern, name)) 
[10:25:45.528]                               next
[10:25:45.528]                             invokeRestart(restart)
[10:25:45.528]                             muffled <- TRUE
[10:25:45.528]                             break
[10:25:45.528]                           }
[10:25:45.528]                         }
[10:25:45.528]                       }
[10:25:45.528]                       invisible(muffled)
[10:25:45.528]                     }
[10:25:45.528]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.528]                   }
[10:25:45.528]                 }
[10:25:45.528]                 else {
[10:25:45.528]                   if (TRUE) {
[10:25:45.528]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:45.528]                     {
[10:25:45.528]                       inherits <- base::inherits
[10:25:45.528]                       invokeRestart <- base::invokeRestart
[10:25:45.528]                       is.null <- base::is.null
[10:25:45.528]                       muffled <- FALSE
[10:25:45.528]                       if (inherits(cond, "message")) {
[10:25:45.528]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:45.528]                         if (muffled) 
[10:25:45.528]                           invokeRestart("muffleMessage")
[10:25:45.528]                       }
[10:25:45.528]                       else if (inherits(cond, "warning")) {
[10:25:45.528]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:45.528]                         if (muffled) 
[10:25:45.528]                           invokeRestart("muffleWarning")
[10:25:45.528]                       }
[10:25:45.528]                       else if (inherits(cond, "condition")) {
[10:25:45.528]                         if (!is.null(pattern)) {
[10:25:45.528]                           computeRestarts <- base::computeRestarts
[10:25:45.528]                           grepl <- base::grepl
[10:25:45.528]                           restarts <- computeRestarts(cond)
[10:25:45.528]                           for (restart in restarts) {
[10:25:45.528]                             name <- restart$name
[10:25:45.528]                             if (is.null(name)) 
[10:25:45.528]                               next
[10:25:45.528]                             if (!grepl(pattern, name)) 
[10:25:45.528]                               next
[10:25:45.528]                             invokeRestart(restart)
[10:25:45.528]                             muffled <- TRUE
[10:25:45.528]                             break
[10:25:45.528]                           }
[10:25:45.528]                         }
[10:25:45.528]                       }
[10:25:45.528]                       invisible(muffled)
[10:25:45.528]                     }
[10:25:45.528]                     muffleCondition(cond, pattern = "^muffle")
[10:25:45.528]                   }
[10:25:45.528]                 }
[10:25:45.528]             }
[10:25:45.528]         }))
[10:25:45.528]     }, error = function(ex) {
[10:25:45.528]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:45.528]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:45.528]                 ...future.rng), started = ...future.startTime, 
[10:25:45.528]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:45.528]             version = "1.8"), class = "FutureResult")
[10:25:45.528]     }, finally = {
[10:25:45.528]         if (!identical(...future.workdir, getwd())) 
[10:25:45.528]             setwd(...future.workdir)
[10:25:45.528]         {
[10:25:45.528]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:45.528]                 ...future.oldOptions$nwarnings <- NULL
[10:25:45.528]             }
[10:25:45.528]             base::options(...future.oldOptions)
[10:25:45.528]             if (.Platform$OS.type == "windows") {
[10:25:45.528]                 old_names <- names(...future.oldEnvVars)
[10:25:45.528]                 envs <- base::Sys.getenv()
[10:25:45.528]                 names <- names(envs)
[10:25:45.528]                 common <- intersect(names, old_names)
[10:25:45.528]                 added <- setdiff(names, old_names)
[10:25:45.528]                 removed <- setdiff(old_names, names)
[10:25:45.528]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:45.528]                   envs[common]]
[10:25:45.528]                 NAMES <- toupper(changed)
[10:25:45.528]                 args <- list()
[10:25:45.528]                 for (kk in seq_along(NAMES)) {
[10:25:45.528]                   name <- changed[[kk]]
[10:25:45.528]                   NAME <- NAMES[[kk]]
[10:25:45.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.528]                     next
[10:25:45.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.528]                 }
[10:25:45.528]                 NAMES <- toupper(added)
[10:25:45.528]                 for (kk in seq_along(NAMES)) {
[10:25:45.528]                   name <- added[[kk]]
[10:25:45.528]                   NAME <- NAMES[[kk]]
[10:25:45.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.528]                     next
[10:25:45.528]                   args[[name]] <- ""
[10:25:45.528]                 }
[10:25:45.528]                 NAMES <- toupper(removed)
[10:25:45.528]                 for (kk in seq_along(NAMES)) {
[10:25:45.528]                   name <- removed[[kk]]
[10:25:45.528]                   NAME <- NAMES[[kk]]
[10:25:45.528]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:45.528]                     next
[10:25:45.528]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:45.528]                 }
[10:25:45.528]                 if (length(args) > 0) 
[10:25:45.528]                   base::do.call(base::Sys.setenv, args = args)
[10:25:45.528]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:45.528]             }
[10:25:45.528]             else {
[10:25:45.528]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:45.528]             }
[10:25:45.528]             {
[10:25:45.528]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:45.528]                   0L) {
[10:25:45.528]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:45.528]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:45.528]                   base::options(opts)
[10:25:45.528]                 }
[10:25:45.528]                 {
[10:25:45.528]                   {
[10:25:45.528]                     NULL
[10:25:45.528]                     RNGkind("Mersenne-Twister")
[10:25:45.528]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:45.528]                       inherits = FALSE)
[10:25:45.528]                   }
[10:25:45.528]                   options(future.plan = NULL)
[10:25:45.528]                   if (is.na(NA_character_)) 
[10:25:45.528]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:45.528]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:45.528]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:45.528]                   {
[10:25:45.528]                     future <- SequentialFuture(..., envir = envir)
[10:25:45.528]                     if (!future$lazy) 
[10:25:45.528]                       future <- run(future)
[10:25:45.528]                     invisible(future)
[10:25:45.528]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:45.528]                 }
[10:25:45.528]             }
[10:25:45.528]         }
[10:25:45.528]     })
[10:25:45.528]     if (TRUE) {
[10:25:45.528]         base::sink(type = "output", split = FALSE)
[10:25:45.528]         if (TRUE) {
[10:25:45.528]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:45.528]         }
[10:25:45.528]         else {
[10:25:45.528]             ...future.result["stdout"] <- base::list(NULL)
[10:25:45.528]         }
[10:25:45.528]         base::close(...future.stdout)
[10:25:45.528]         ...future.stdout <- NULL
[10:25:45.528]     }
[10:25:45.528]     ...future.result$conditions <- ...future.conditions
[10:25:45.528]     ...future.result$finished <- base::Sys.time()
[10:25:45.528]     ...future.result
[10:25:45.528] }
[10:25:45.529] plan(): Setting new future strategy stack:
[10:25:45.530] List of future strategies:
[10:25:45.530] 1. sequential:
[10:25:45.530]    - args: function (..., envir = parent.frame())
[10:25:45.530]    - tweaked: FALSE
[10:25:45.530]    - call: NULL
[10:25:45.530] plan(): nbrOfWorkers() = 1
[10:25:45.531] plan(): Setting new future strategy stack:
[10:25:45.531] List of future strategies:
[10:25:45.531] 1. sequential:
[10:25:45.531]    - args: function (..., envir = parent.frame())
[10:25:45.531]    - tweaked: FALSE
[10:25:45.531]    - call: future::plan("sequential")
[10:25:45.531] plan(): nbrOfWorkers() = 1
[10:25:45.531] SequentialFuture started (and completed)
[10:25:45.531] - Launch lazy future ... done
[10:25:45.531] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 7c798090-b8bb-948d-4e03-5915f93cf455
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[10:25:45.532] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[10:25:45.532] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[10:25:45.533] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[10:25:45.533] plan(): Setting new future strategy stack:
[10:25:45.534] List of future strategies:
[10:25:45.534] 1. FutureStrategy:
[10:25:45.534]    - args: function (..., envir = parent.frame())
[10:25:45.534]    - tweaked: FALSE
[10:25:45.534]    - call: future::plan(oplan)
[10:25:45.545] plan(): nbrOfWorkers() = 1
> 
