
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:04:40.354] plan(): Setting new future strategy stack:
[16:04:40.354] List of future strategies:
[16:04:40.354] 1. sequential:
[16:04:40.354]    - args: function (..., envir = parent.frame())
[16:04:40.354]    - tweaked: FALSE
[16:04:40.354]    - call: future::plan("sequential")
[16:04:40.368] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'list') ...
list()
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'add') ...
[16:04:40.402] getGlobalsAndPackages() ...
[16:04:40.402] Searching for globals...
[16:04:40.405] - globals found: [1] ‘{’
[16:04:40.405] Searching for globals ... DONE
[16:04:40.406] Resolving globals: FALSE
[16:04:40.406] 
[16:04:40.406] 
[16:04:40.406] getGlobalsAndPackages() ... DONE
[16:04:40.407] run() for ‘Future’ ...
[16:04:40.407] - state: ‘created’
[16:04:40.407] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.408] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.408] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.408]   - Field: ‘label’
[16:04:40.408]   - Field: ‘local’
[16:04:40.408]   - Field: ‘owner’
[16:04:40.408]   - Field: ‘envir’
[16:04:40.408]   - Field: ‘packages’
[16:04:40.408]   - Field: ‘gc’
[16:04:40.408]   - Field: ‘conditions’
[16:04:40.408]   - Field: ‘expr’
[16:04:40.409]   - Field: ‘uuid’
[16:04:40.409]   - Field: ‘seed’
[16:04:40.409]   - Field: ‘version’
[16:04:40.409]   - Field: ‘result’
[16:04:40.409]   - Field: ‘asynchronous’
[16:04:40.409]   - Field: ‘calls’
[16:04:40.409]   - Field: ‘globals’
[16:04:40.409]   - Field: ‘stdout’
[16:04:40.409]   - Field: ‘earlySignal’
[16:04:40.409]   - Field: ‘lazy’
[16:04:40.409]   - Field: ‘state’
[16:04:40.410] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.410] - Launch lazy future ...
[16:04:40.410] Packages needed by the future expression (n = 0): <none>
[16:04:40.411] Packages needed by future strategies (n = 0): <none>
[16:04:40.411] {
[16:04:40.411]     {
[16:04:40.411]         {
[16:04:40.411]             ...future.startTime <- base::Sys.time()
[16:04:40.411]             {
[16:04:40.411]                 {
[16:04:40.411]                   {
[16:04:40.411]                     base::local({
[16:04:40.411]                       has_future <- base::requireNamespace("future", 
[16:04:40.411]                         quietly = TRUE)
[16:04:40.411]                       if (has_future) {
[16:04:40.411]                         ns <- base::getNamespace("future")
[16:04:40.411]                         version <- ns[[".package"]][["version"]]
[16:04:40.411]                         if (is.null(version)) 
[16:04:40.411]                           version <- utils::packageVersion("future")
[16:04:40.411]                       }
[16:04:40.411]                       else {
[16:04:40.411]                         version <- NULL
[16:04:40.411]                       }
[16:04:40.411]                       if (!has_future || version < "1.8.0") {
[16:04:40.411]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.411]                           "", base::R.version$version.string), 
[16:04:40.411]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.411]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.411]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.411]                             "release", "version")], collapse = " "), 
[16:04:40.411]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.411]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.411]                           info)
[16:04:40.411]                         info <- base::paste(info, collapse = "; ")
[16:04:40.411]                         if (!has_future) {
[16:04:40.411]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.411]                             info)
[16:04:40.411]                         }
[16:04:40.411]                         else {
[16:04:40.411]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.411]                             info, version)
[16:04:40.411]                         }
[16:04:40.411]                         base::stop(msg)
[16:04:40.411]                       }
[16:04:40.411]                     })
[16:04:40.411]                   }
[16:04:40.411]                   options(future.plan = NULL)
[16:04:40.411]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.411]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.411]                 }
[16:04:40.411]                 ...future.workdir <- getwd()
[16:04:40.411]             }
[16:04:40.411]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.411]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.411]         }
[16:04:40.411]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.411]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.411]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.411]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.411]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.411]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.411]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.411]             base::names(...future.oldOptions))
[16:04:40.411]     }
[16:04:40.411]     if (FALSE) {
[16:04:40.411]     }
[16:04:40.411]     else {
[16:04:40.411]         if (TRUE) {
[16:04:40.411]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.411]                 open = "w")
[16:04:40.411]         }
[16:04:40.411]         else {
[16:04:40.411]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.411]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.411]         }
[16:04:40.411]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.411]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.411]             base::sink(type = "output", split = FALSE)
[16:04:40.411]             base::close(...future.stdout)
[16:04:40.411]         }, add = TRUE)
[16:04:40.411]     }
[16:04:40.411]     ...future.frame <- base::sys.nframe()
[16:04:40.411]     ...future.conditions <- base::list()
[16:04:40.411]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.411]     if (FALSE) {
[16:04:40.411]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.411]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.411]     }
[16:04:40.411]     ...future.result <- base::tryCatch({
[16:04:40.411]         base::withCallingHandlers({
[16:04:40.411]             ...future.value <- base::withVisible(base::local({
[16:04:40.411]                 1
[16:04:40.411]             }))
[16:04:40.411]             future::FutureResult(value = ...future.value$value, 
[16:04:40.411]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.411]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.411]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.411]                     ...future.globalenv.names))
[16:04:40.411]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.411]         }, condition = base::local({
[16:04:40.411]             c <- base::c
[16:04:40.411]             inherits <- base::inherits
[16:04:40.411]             invokeRestart <- base::invokeRestart
[16:04:40.411]             length <- base::length
[16:04:40.411]             list <- base::list
[16:04:40.411]             seq.int <- base::seq.int
[16:04:40.411]             signalCondition <- base::signalCondition
[16:04:40.411]             sys.calls <- base::sys.calls
[16:04:40.411]             `[[` <- base::`[[`
[16:04:40.411]             `+` <- base::`+`
[16:04:40.411]             `<<-` <- base::`<<-`
[16:04:40.411]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.411]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.411]                   3L)]
[16:04:40.411]             }
[16:04:40.411]             function(cond) {
[16:04:40.411]                 is_error <- inherits(cond, "error")
[16:04:40.411]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.411]                   NULL)
[16:04:40.411]                 if (is_error) {
[16:04:40.411]                   sessionInformation <- function() {
[16:04:40.411]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.411]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.411]                       search = base::search(), system = base::Sys.info())
[16:04:40.411]                   }
[16:04:40.411]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.411]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.411]                     cond$call), session = sessionInformation(), 
[16:04:40.411]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.411]                   signalCondition(cond)
[16:04:40.411]                 }
[16:04:40.411]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.411]                 "immediateCondition"))) {
[16:04:40.411]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.411]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.411]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.411]                   if (TRUE && !signal) {
[16:04:40.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.411]                     {
[16:04:40.411]                       inherits <- base::inherits
[16:04:40.411]                       invokeRestart <- base::invokeRestart
[16:04:40.411]                       is.null <- base::is.null
[16:04:40.411]                       muffled <- FALSE
[16:04:40.411]                       if (inherits(cond, "message")) {
[16:04:40.411]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.411]                         if (muffled) 
[16:04:40.411]                           invokeRestart("muffleMessage")
[16:04:40.411]                       }
[16:04:40.411]                       else if (inherits(cond, "warning")) {
[16:04:40.411]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.411]                         if (muffled) 
[16:04:40.411]                           invokeRestart("muffleWarning")
[16:04:40.411]                       }
[16:04:40.411]                       else if (inherits(cond, "condition")) {
[16:04:40.411]                         if (!is.null(pattern)) {
[16:04:40.411]                           computeRestarts <- base::computeRestarts
[16:04:40.411]                           grepl <- base::grepl
[16:04:40.411]                           restarts <- computeRestarts(cond)
[16:04:40.411]                           for (restart in restarts) {
[16:04:40.411]                             name <- restart$name
[16:04:40.411]                             if (is.null(name)) 
[16:04:40.411]                               next
[16:04:40.411]                             if (!grepl(pattern, name)) 
[16:04:40.411]                               next
[16:04:40.411]                             invokeRestart(restart)
[16:04:40.411]                             muffled <- TRUE
[16:04:40.411]                             break
[16:04:40.411]                           }
[16:04:40.411]                         }
[16:04:40.411]                       }
[16:04:40.411]                       invisible(muffled)
[16:04:40.411]                     }
[16:04:40.411]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.411]                   }
[16:04:40.411]                 }
[16:04:40.411]                 else {
[16:04:40.411]                   if (TRUE) {
[16:04:40.411]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.411]                     {
[16:04:40.411]                       inherits <- base::inherits
[16:04:40.411]                       invokeRestart <- base::invokeRestart
[16:04:40.411]                       is.null <- base::is.null
[16:04:40.411]                       muffled <- FALSE
[16:04:40.411]                       if (inherits(cond, "message")) {
[16:04:40.411]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.411]                         if (muffled) 
[16:04:40.411]                           invokeRestart("muffleMessage")
[16:04:40.411]                       }
[16:04:40.411]                       else if (inherits(cond, "warning")) {
[16:04:40.411]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.411]                         if (muffled) 
[16:04:40.411]                           invokeRestart("muffleWarning")
[16:04:40.411]                       }
[16:04:40.411]                       else if (inherits(cond, "condition")) {
[16:04:40.411]                         if (!is.null(pattern)) {
[16:04:40.411]                           computeRestarts <- base::computeRestarts
[16:04:40.411]                           grepl <- base::grepl
[16:04:40.411]                           restarts <- computeRestarts(cond)
[16:04:40.411]                           for (restart in restarts) {
[16:04:40.411]                             name <- restart$name
[16:04:40.411]                             if (is.null(name)) 
[16:04:40.411]                               next
[16:04:40.411]                             if (!grepl(pattern, name)) 
[16:04:40.411]                               next
[16:04:40.411]                             invokeRestart(restart)
[16:04:40.411]                             muffled <- TRUE
[16:04:40.411]                             break
[16:04:40.411]                           }
[16:04:40.411]                         }
[16:04:40.411]                       }
[16:04:40.411]                       invisible(muffled)
[16:04:40.411]                     }
[16:04:40.411]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.411]                   }
[16:04:40.411]                 }
[16:04:40.411]             }
[16:04:40.411]         }))
[16:04:40.411]     }, error = function(ex) {
[16:04:40.411]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.411]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.411]                 ...future.rng), started = ...future.startTime, 
[16:04:40.411]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.411]             version = "1.8"), class = "FutureResult")
[16:04:40.411]     }, finally = {
[16:04:40.411]         if (!identical(...future.workdir, getwd())) 
[16:04:40.411]             setwd(...future.workdir)
[16:04:40.411]         {
[16:04:40.411]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.411]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.411]             }
[16:04:40.411]             base::options(...future.oldOptions)
[16:04:40.411]             if (.Platform$OS.type == "windows") {
[16:04:40.411]                 old_names <- names(...future.oldEnvVars)
[16:04:40.411]                 envs <- base::Sys.getenv()
[16:04:40.411]                 names <- names(envs)
[16:04:40.411]                 common <- intersect(names, old_names)
[16:04:40.411]                 added <- setdiff(names, old_names)
[16:04:40.411]                 removed <- setdiff(old_names, names)
[16:04:40.411]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.411]                   envs[common]]
[16:04:40.411]                 NAMES <- toupper(changed)
[16:04:40.411]                 args <- list()
[16:04:40.411]                 for (kk in seq_along(NAMES)) {
[16:04:40.411]                   name <- changed[[kk]]
[16:04:40.411]                   NAME <- NAMES[[kk]]
[16:04:40.411]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.411]                     next
[16:04:40.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.411]                 }
[16:04:40.411]                 NAMES <- toupper(added)
[16:04:40.411]                 for (kk in seq_along(NAMES)) {
[16:04:40.411]                   name <- added[[kk]]
[16:04:40.411]                   NAME <- NAMES[[kk]]
[16:04:40.411]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.411]                     next
[16:04:40.411]                   args[[name]] <- ""
[16:04:40.411]                 }
[16:04:40.411]                 NAMES <- toupper(removed)
[16:04:40.411]                 for (kk in seq_along(NAMES)) {
[16:04:40.411]                   name <- removed[[kk]]
[16:04:40.411]                   NAME <- NAMES[[kk]]
[16:04:40.411]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.411]                     next
[16:04:40.411]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.411]                 }
[16:04:40.411]                 if (length(args) > 0) 
[16:04:40.411]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.411]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.411]             }
[16:04:40.411]             else {
[16:04:40.411]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.411]             }
[16:04:40.411]             {
[16:04:40.411]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.411]                   0L) {
[16:04:40.411]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.411]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.411]                   base::options(opts)
[16:04:40.411]                 }
[16:04:40.411]                 {
[16:04:40.411]                   {
[16:04:40.411]                     NULL
[16:04:40.411]                     RNGkind("Mersenne-Twister")
[16:04:40.411]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.411]                       inherits = FALSE)
[16:04:40.411]                   }
[16:04:40.411]                   options(future.plan = NULL)
[16:04:40.411]                   if (is.na(NA_character_)) 
[16:04:40.411]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.411]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.411]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.411]                   {
[16:04:40.411]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.411]                     if (!future$lazy) 
[16:04:40.411]                       future <- run(future)
[16:04:40.411]                     invisible(future)
[16:04:40.411]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.411]                 }
[16:04:40.411]             }
[16:04:40.411]         }
[16:04:40.411]     })
[16:04:40.411]     if (TRUE) {
[16:04:40.411]         base::sink(type = "output", split = FALSE)
[16:04:40.411]         if (TRUE) {
[16:04:40.411]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.411]         }
[16:04:40.411]         else {
[16:04:40.411]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.411]         }
[16:04:40.411]         base::close(...future.stdout)
[16:04:40.411]         ...future.stdout <- NULL
[16:04:40.411]     }
[16:04:40.411]     ...future.result$conditions <- ...future.conditions
[16:04:40.411]     ...future.result$finished <- base::Sys.time()
[16:04:40.411]     ...future.result
[16:04:40.411] }
[16:04:40.413] plan(): Setting new future strategy stack:
[16:04:40.413] List of future strategies:
[16:04:40.413] 1. sequential:
[16:04:40.413]    - args: function (..., envir = parent.frame())
[16:04:40.413]    - tweaked: FALSE
[16:04:40.413]    - call: NULL
[16:04:40.414] plan(): nbrOfWorkers() = 1
[16:04:40.415] plan(): Setting new future strategy stack:
[16:04:40.415] List of future strategies:
[16:04:40.415] 1. sequential:
[16:04:40.415]    - args: function (..., envir = parent.frame())
[16:04:40.415]    - tweaked: FALSE
[16:04:40.415]    - call: future::plan("sequential")
[16:04:40.415] plan(): nbrOfWorkers() = 1
[16:04:40.415] SequentialFuture started (and completed)
[16:04:40.416] - Launch lazy future ... done
[16:04:40.416] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'remove') ...
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'list') ...
list()
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'add') ...
[16:04:40.420] getGlobalsAndPackages() ...
[16:04:40.420] Searching for globals...
[16:04:40.420] - globals found: [1] ‘{’
[16:04:40.420] Searching for globals ... DONE
[16:04:40.420] Resolving globals: FALSE
[16:04:40.421] 
[16:04:40.421] 
[16:04:40.421] getGlobalsAndPackages() ... DONE
[16:04:40.421] run() for ‘Future’ ...
[16:04:40.421] - state: ‘created’
[16:04:40.421] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.422] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.422] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.422]   - Field: ‘label’
[16:04:40.422]   - Field: ‘local’
[16:04:40.422]   - Field: ‘owner’
[16:04:40.422]   - Field: ‘envir’
[16:04:40.422]   - Field: ‘packages’
[16:04:40.422]   - Field: ‘gc’
[16:04:40.422]   - Field: ‘conditions’
[16:04:40.422]   - Field: ‘expr’
[16:04:40.423]   - Field: ‘uuid’
[16:04:40.423]   - Field: ‘seed’
[16:04:40.423]   - Field: ‘version’
[16:04:40.423]   - Field: ‘result’
[16:04:40.423]   - Field: ‘asynchronous’
[16:04:40.423]   - Field: ‘calls’
[16:04:40.423]   - Field: ‘globals’
[16:04:40.423]   - Field: ‘stdout’
[16:04:40.423]   - Field: ‘earlySignal’
[16:04:40.423]   - Field: ‘lazy’
[16:04:40.423]   - Field: ‘state’
[16:04:40.424] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.424] - Launch lazy future ...
[16:04:40.424] Packages needed by the future expression (n = 0): <none>
[16:04:40.424] Packages needed by future strategies (n = 0): <none>
[16:04:40.424] {
[16:04:40.424]     {
[16:04:40.424]         {
[16:04:40.424]             ...future.startTime <- base::Sys.time()
[16:04:40.424]             {
[16:04:40.424]                 {
[16:04:40.424]                   {
[16:04:40.424]                     base::local({
[16:04:40.424]                       has_future <- base::requireNamespace("future", 
[16:04:40.424]                         quietly = TRUE)
[16:04:40.424]                       if (has_future) {
[16:04:40.424]                         ns <- base::getNamespace("future")
[16:04:40.424]                         version <- ns[[".package"]][["version"]]
[16:04:40.424]                         if (is.null(version)) 
[16:04:40.424]                           version <- utils::packageVersion("future")
[16:04:40.424]                       }
[16:04:40.424]                       else {
[16:04:40.424]                         version <- NULL
[16:04:40.424]                       }
[16:04:40.424]                       if (!has_future || version < "1.8.0") {
[16:04:40.424]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.424]                           "", base::R.version$version.string), 
[16:04:40.424]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.424]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.424]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.424]                             "release", "version")], collapse = " "), 
[16:04:40.424]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.424]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.424]                           info)
[16:04:40.424]                         info <- base::paste(info, collapse = "; ")
[16:04:40.424]                         if (!has_future) {
[16:04:40.424]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.424]                             info)
[16:04:40.424]                         }
[16:04:40.424]                         else {
[16:04:40.424]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.424]                             info, version)
[16:04:40.424]                         }
[16:04:40.424]                         base::stop(msg)
[16:04:40.424]                       }
[16:04:40.424]                     })
[16:04:40.424]                   }
[16:04:40.424]                   options(future.plan = NULL)
[16:04:40.424]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.424]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.424]                 }
[16:04:40.424]                 ...future.workdir <- getwd()
[16:04:40.424]             }
[16:04:40.424]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.424]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.424]         }
[16:04:40.424]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.424]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.424]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.424]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.424]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.424]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.424]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.424]             base::names(...future.oldOptions))
[16:04:40.424]     }
[16:04:40.424]     if (FALSE) {
[16:04:40.424]     }
[16:04:40.424]     else {
[16:04:40.424]         if (TRUE) {
[16:04:40.424]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.424]                 open = "w")
[16:04:40.424]         }
[16:04:40.424]         else {
[16:04:40.424]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.424]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.424]         }
[16:04:40.424]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.424]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.424]             base::sink(type = "output", split = FALSE)
[16:04:40.424]             base::close(...future.stdout)
[16:04:40.424]         }, add = TRUE)
[16:04:40.424]     }
[16:04:40.424]     ...future.frame <- base::sys.nframe()
[16:04:40.424]     ...future.conditions <- base::list()
[16:04:40.424]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.424]     if (FALSE) {
[16:04:40.424]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.424]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.424]     }
[16:04:40.424]     ...future.result <- base::tryCatch({
[16:04:40.424]         base::withCallingHandlers({
[16:04:40.424]             ...future.value <- base::withVisible(base::local({
[16:04:40.424]                 2
[16:04:40.424]             }))
[16:04:40.424]             future::FutureResult(value = ...future.value$value, 
[16:04:40.424]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.424]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.424]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.424]                     ...future.globalenv.names))
[16:04:40.424]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.424]         }, condition = base::local({
[16:04:40.424]             c <- base::c
[16:04:40.424]             inherits <- base::inherits
[16:04:40.424]             invokeRestart <- base::invokeRestart
[16:04:40.424]             length <- base::length
[16:04:40.424]             list <- base::list
[16:04:40.424]             seq.int <- base::seq.int
[16:04:40.424]             signalCondition <- base::signalCondition
[16:04:40.424]             sys.calls <- base::sys.calls
[16:04:40.424]             `[[` <- base::`[[`
[16:04:40.424]             `+` <- base::`+`
[16:04:40.424]             `<<-` <- base::`<<-`
[16:04:40.424]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.424]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.424]                   3L)]
[16:04:40.424]             }
[16:04:40.424]             function(cond) {
[16:04:40.424]                 is_error <- inherits(cond, "error")
[16:04:40.424]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.424]                   NULL)
[16:04:40.424]                 if (is_error) {
[16:04:40.424]                   sessionInformation <- function() {
[16:04:40.424]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.424]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.424]                       search = base::search(), system = base::Sys.info())
[16:04:40.424]                   }
[16:04:40.424]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.424]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.424]                     cond$call), session = sessionInformation(), 
[16:04:40.424]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.424]                   signalCondition(cond)
[16:04:40.424]                 }
[16:04:40.424]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.424]                 "immediateCondition"))) {
[16:04:40.424]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.424]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.424]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.424]                   if (TRUE && !signal) {
[16:04:40.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.424]                     {
[16:04:40.424]                       inherits <- base::inherits
[16:04:40.424]                       invokeRestart <- base::invokeRestart
[16:04:40.424]                       is.null <- base::is.null
[16:04:40.424]                       muffled <- FALSE
[16:04:40.424]                       if (inherits(cond, "message")) {
[16:04:40.424]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.424]                         if (muffled) 
[16:04:40.424]                           invokeRestart("muffleMessage")
[16:04:40.424]                       }
[16:04:40.424]                       else if (inherits(cond, "warning")) {
[16:04:40.424]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.424]                         if (muffled) 
[16:04:40.424]                           invokeRestart("muffleWarning")
[16:04:40.424]                       }
[16:04:40.424]                       else if (inherits(cond, "condition")) {
[16:04:40.424]                         if (!is.null(pattern)) {
[16:04:40.424]                           computeRestarts <- base::computeRestarts
[16:04:40.424]                           grepl <- base::grepl
[16:04:40.424]                           restarts <- computeRestarts(cond)
[16:04:40.424]                           for (restart in restarts) {
[16:04:40.424]                             name <- restart$name
[16:04:40.424]                             if (is.null(name)) 
[16:04:40.424]                               next
[16:04:40.424]                             if (!grepl(pattern, name)) 
[16:04:40.424]                               next
[16:04:40.424]                             invokeRestart(restart)
[16:04:40.424]                             muffled <- TRUE
[16:04:40.424]                             break
[16:04:40.424]                           }
[16:04:40.424]                         }
[16:04:40.424]                       }
[16:04:40.424]                       invisible(muffled)
[16:04:40.424]                     }
[16:04:40.424]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.424]                   }
[16:04:40.424]                 }
[16:04:40.424]                 else {
[16:04:40.424]                   if (TRUE) {
[16:04:40.424]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.424]                     {
[16:04:40.424]                       inherits <- base::inherits
[16:04:40.424]                       invokeRestart <- base::invokeRestart
[16:04:40.424]                       is.null <- base::is.null
[16:04:40.424]                       muffled <- FALSE
[16:04:40.424]                       if (inherits(cond, "message")) {
[16:04:40.424]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.424]                         if (muffled) 
[16:04:40.424]                           invokeRestart("muffleMessage")
[16:04:40.424]                       }
[16:04:40.424]                       else if (inherits(cond, "warning")) {
[16:04:40.424]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.424]                         if (muffled) 
[16:04:40.424]                           invokeRestart("muffleWarning")
[16:04:40.424]                       }
[16:04:40.424]                       else if (inherits(cond, "condition")) {
[16:04:40.424]                         if (!is.null(pattern)) {
[16:04:40.424]                           computeRestarts <- base::computeRestarts
[16:04:40.424]                           grepl <- base::grepl
[16:04:40.424]                           restarts <- computeRestarts(cond)
[16:04:40.424]                           for (restart in restarts) {
[16:04:40.424]                             name <- restart$name
[16:04:40.424]                             if (is.null(name)) 
[16:04:40.424]                               next
[16:04:40.424]                             if (!grepl(pattern, name)) 
[16:04:40.424]                               next
[16:04:40.424]                             invokeRestart(restart)
[16:04:40.424]                             muffled <- TRUE
[16:04:40.424]                             break
[16:04:40.424]                           }
[16:04:40.424]                         }
[16:04:40.424]                       }
[16:04:40.424]                       invisible(muffled)
[16:04:40.424]                     }
[16:04:40.424]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.424]                   }
[16:04:40.424]                 }
[16:04:40.424]             }
[16:04:40.424]         }))
[16:04:40.424]     }, error = function(ex) {
[16:04:40.424]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.424]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.424]                 ...future.rng), started = ...future.startTime, 
[16:04:40.424]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.424]             version = "1.8"), class = "FutureResult")
[16:04:40.424]     }, finally = {
[16:04:40.424]         if (!identical(...future.workdir, getwd())) 
[16:04:40.424]             setwd(...future.workdir)
[16:04:40.424]         {
[16:04:40.424]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.424]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.424]             }
[16:04:40.424]             base::options(...future.oldOptions)
[16:04:40.424]             if (.Platform$OS.type == "windows") {
[16:04:40.424]                 old_names <- names(...future.oldEnvVars)
[16:04:40.424]                 envs <- base::Sys.getenv()
[16:04:40.424]                 names <- names(envs)
[16:04:40.424]                 common <- intersect(names, old_names)
[16:04:40.424]                 added <- setdiff(names, old_names)
[16:04:40.424]                 removed <- setdiff(old_names, names)
[16:04:40.424]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.424]                   envs[common]]
[16:04:40.424]                 NAMES <- toupper(changed)
[16:04:40.424]                 args <- list()
[16:04:40.424]                 for (kk in seq_along(NAMES)) {
[16:04:40.424]                   name <- changed[[kk]]
[16:04:40.424]                   NAME <- NAMES[[kk]]
[16:04:40.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.424]                     next
[16:04:40.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.424]                 }
[16:04:40.424]                 NAMES <- toupper(added)
[16:04:40.424]                 for (kk in seq_along(NAMES)) {
[16:04:40.424]                   name <- added[[kk]]
[16:04:40.424]                   NAME <- NAMES[[kk]]
[16:04:40.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.424]                     next
[16:04:40.424]                   args[[name]] <- ""
[16:04:40.424]                 }
[16:04:40.424]                 NAMES <- toupper(removed)
[16:04:40.424]                 for (kk in seq_along(NAMES)) {
[16:04:40.424]                   name <- removed[[kk]]
[16:04:40.424]                   NAME <- NAMES[[kk]]
[16:04:40.424]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.424]                     next
[16:04:40.424]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.424]                 }
[16:04:40.424]                 if (length(args) > 0) 
[16:04:40.424]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.424]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.424]             }
[16:04:40.424]             else {
[16:04:40.424]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.424]             }
[16:04:40.424]             {
[16:04:40.424]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.424]                   0L) {
[16:04:40.424]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.424]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.424]                   base::options(opts)
[16:04:40.424]                 }
[16:04:40.424]                 {
[16:04:40.424]                   {
[16:04:40.424]                     NULL
[16:04:40.424]                     RNGkind("Mersenne-Twister")
[16:04:40.424]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.424]                       inherits = FALSE)
[16:04:40.424]                   }
[16:04:40.424]                   options(future.plan = NULL)
[16:04:40.424]                   if (is.na(NA_character_)) 
[16:04:40.424]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.424]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.424]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.424]                   {
[16:04:40.424]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.424]                     if (!future$lazy) 
[16:04:40.424]                       future <- run(future)
[16:04:40.424]                     invisible(future)
[16:04:40.424]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.424]                 }
[16:04:40.424]             }
[16:04:40.424]         }
[16:04:40.424]     })
[16:04:40.424]     if (TRUE) {
[16:04:40.424]         base::sink(type = "output", split = FALSE)
[16:04:40.424]         if (TRUE) {
[16:04:40.424]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.424]         }
[16:04:40.424]         else {
[16:04:40.424]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.424]         }
[16:04:40.424]         base::close(...future.stdout)
[16:04:40.424]         ...future.stdout <- NULL
[16:04:40.424]     }
[16:04:40.424]     ...future.result$conditions <- ...future.conditions
[16:04:40.424]     ...future.result$finished <- base::Sys.time()
[16:04:40.424]     ...future.result
[16:04:40.424] }
[16:04:40.426] plan(): Setting new future strategy stack:
[16:04:40.426] List of future strategies:
[16:04:40.426] 1. sequential:
[16:04:40.426]    - args: function (..., envir = parent.frame())
[16:04:40.426]    - tweaked: FALSE
[16:04:40.426]    - call: NULL
[16:04:40.426] plan(): nbrOfWorkers() = 1
[16:04:40.427] plan(): Setting new future strategy stack:
[16:04:40.427] List of future strategies:
[16:04:40.427] 1. sequential:
[16:04:40.427]    - args: function (..., envir = parent.frame())
[16:04:40.427]    - tweaked: FALSE
[16:04:40.427]    - call: future::plan("sequential")
[16:04:40.428] plan(): nbrOfWorkers() = 1
[16:04:40.428] SequentialFuture started (and completed)
[16:04:40.428] - Launch lazy future ... done
[16:04:40.428] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'collect-first') ...
[16:04:40.429] resolved() for ‘SequentialFuture’ ...
[16:04:40.429] - state: ‘finished’
[16:04:40.429] - run: FALSE
[16:04:40.429] - result: ‘FutureResult’
[16:04:40.429] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'add') ...
[16:04:40.430] getGlobalsAndPackages() ...
[16:04:40.430] Searching for globals...
[16:04:40.431] - globals found: [1] ‘{’
[16:04:40.431] Searching for globals ... DONE
[16:04:40.431] Resolving globals: FALSE
[16:04:40.431] 
[16:04:40.431] 
[16:04:40.431] getGlobalsAndPackages() ... DONE
[16:04:40.431] run() for ‘Future’ ...
[16:04:40.432] - state: ‘created’
[16:04:40.432] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.432] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.432] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.432]   - Field: ‘label’
[16:04:40.432]   - Field: ‘local’
[16:04:40.432]   - Field: ‘owner’
[16:04:40.432]   - Field: ‘envir’
[16:04:40.433]   - Field: ‘packages’
[16:04:40.433]   - Field: ‘gc’
[16:04:40.433]   - Field: ‘conditions’
[16:04:40.433]   - Field: ‘expr’
[16:04:40.433]   - Field: ‘uuid’
[16:04:40.433]   - Field: ‘seed’
[16:04:40.433]   - Field: ‘version’
[16:04:40.433]   - Field: ‘result’
[16:04:40.433]   - Field: ‘asynchronous’
[16:04:40.433]   - Field: ‘calls’
[16:04:40.433]   - Field: ‘globals’
[16:04:40.433]   - Field: ‘stdout’
[16:04:40.434]   - Field: ‘earlySignal’
[16:04:40.434]   - Field: ‘lazy’
[16:04:40.434]   - Field: ‘state’
[16:04:40.434] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.434] - Launch lazy future ...
[16:04:40.434] Packages needed by the future expression (n = 0): <none>
[16:04:40.434] Packages needed by future strategies (n = 0): <none>
[16:04:40.435] {
[16:04:40.435]     {
[16:04:40.435]         {
[16:04:40.435]             ...future.startTime <- base::Sys.time()
[16:04:40.435]             {
[16:04:40.435]                 {
[16:04:40.435]                   {
[16:04:40.435]                     base::local({
[16:04:40.435]                       has_future <- base::requireNamespace("future", 
[16:04:40.435]                         quietly = TRUE)
[16:04:40.435]                       if (has_future) {
[16:04:40.435]                         ns <- base::getNamespace("future")
[16:04:40.435]                         version <- ns[[".package"]][["version"]]
[16:04:40.435]                         if (is.null(version)) 
[16:04:40.435]                           version <- utils::packageVersion("future")
[16:04:40.435]                       }
[16:04:40.435]                       else {
[16:04:40.435]                         version <- NULL
[16:04:40.435]                       }
[16:04:40.435]                       if (!has_future || version < "1.8.0") {
[16:04:40.435]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.435]                           "", base::R.version$version.string), 
[16:04:40.435]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.435]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.435]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.435]                             "release", "version")], collapse = " "), 
[16:04:40.435]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.435]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.435]                           info)
[16:04:40.435]                         info <- base::paste(info, collapse = "; ")
[16:04:40.435]                         if (!has_future) {
[16:04:40.435]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.435]                             info)
[16:04:40.435]                         }
[16:04:40.435]                         else {
[16:04:40.435]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.435]                             info, version)
[16:04:40.435]                         }
[16:04:40.435]                         base::stop(msg)
[16:04:40.435]                       }
[16:04:40.435]                     })
[16:04:40.435]                   }
[16:04:40.435]                   options(future.plan = NULL)
[16:04:40.435]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.435]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.435]                 }
[16:04:40.435]                 ...future.workdir <- getwd()
[16:04:40.435]             }
[16:04:40.435]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.435]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.435]         }
[16:04:40.435]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.435]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.435]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.435]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.435]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.435]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.435]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.435]             base::names(...future.oldOptions))
[16:04:40.435]     }
[16:04:40.435]     if (FALSE) {
[16:04:40.435]     }
[16:04:40.435]     else {
[16:04:40.435]         if (TRUE) {
[16:04:40.435]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.435]                 open = "w")
[16:04:40.435]         }
[16:04:40.435]         else {
[16:04:40.435]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.435]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.435]         }
[16:04:40.435]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.435]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.435]             base::sink(type = "output", split = FALSE)
[16:04:40.435]             base::close(...future.stdout)
[16:04:40.435]         }, add = TRUE)
[16:04:40.435]     }
[16:04:40.435]     ...future.frame <- base::sys.nframe()
[16:04:40.435]     ...future.conditions <- base::list()
[16:04:40.435]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.435]     if (FALSE) {
[16:04:40.435]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.435]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.435]     }
[16:04:40.435]     ...future.result <- base::tryCatch({
[16:04:40.435]         base::withCallingHandlers({
[16:04:40.435]             ...future.value <- base::withVisible(base::local({
[16:04:40.435]                 2
[16:04:40.435]             }))
[16:04:40.435]             future::FutureResult(value = ...future.value$value, 
[16:04:40.435]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.435]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.435]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.435]                     ...future.globalenv.names))
[16:04:40.435]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.435]         }, condition = base::local({
[16:04:40.435]             c <- base::c
[16:04:40.435]             inherits <- base::inherits
[16:04:40.435]             invokeRestart <- base::invokeRestart
[16:04:40.435]             length <- base::length
[16:04:40.435]             list <- base::list
[16:04:40.435]             seq.int <- base::seq.int
[16:04:40.435]             signalCondition <- base::signalCondition
[16:04:40.435]             sys.calls <- base::sys.calls
[16:04:40.435]             `[[` <- base::`[[`
[16:04:40.435]             `+` <- base::`+`
[16:04:40.435]             `<<-` <- base::`<<-`
[16:04:40.435]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.435]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.435]                   3L)]
[16:04:40.435]             }
[16:04:40.435]             function(cond) {
[16:04:40.435]                 is_error <- inherits(cond, "error")
[16:04:40.435]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.435]                   NULL)
[16:04:40.435]                 if (is_error) {
[16:04:40.435]                   sessionInformation <- function() {
[16:04:40.435]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.435]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.435]                       search = base::search(), system = base::Sys.info())
[16:04:40.435]                   }
[16:04:40.435]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.435]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.435]                     cond$call), session = sessionInformation(), 
[16:04:40.435]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.435]                   signalCondition(cond)
[16:04:40.435]                 }
[16:04:40.435]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.435]                 "immediateCondition"))) {
[16:04:40.435]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.435]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.435]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.435]                   if (TRUE && !signal) {
[16:04:40.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.435]                     {
[16:04:40.435]                       inherits <- base::inherits
[16:04:40.435]                       invokeRestart <- base::invokeRestart
[16:04:40.435]                       is.null <- base::is.null
[16:04:40.435]                       muffled <- FALSE
[16:04:40.435]                       if (inherits(cond, "message")) {
[16:04:40.435]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.435]                         if (muffled) 
[16:04:40.435]                           invokeRestart("muffleMessage")
[16:04:40.435]                       }
[16:04:40.435]                       else if (inherits(cond, "warning")) {
[16:04:40.435]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.435]                         if (muffled) 
[16:04:40.435]                           invokeRestart("muffleWarning")
[16:04:40.435]                       }
[16:04:40.435]                       else if (inherits(cond, "condition")) {
[16:04:40.435]                         if (!is.null(pattern)) {
[16:04:40.435]                           computeRestarts <- base::computeRestarts
[16:04:40.435]                           grepl <- base::grepl
[16:04:40.435]                           restarts <- computeRestarts(cond)
[16:04:40.435]                           for (restart in restarts) {
[16:04:40.435]                             name <- restart$name
[16:04:40.435]                             if (is.null(name)) 
[16:04:40.435]                               next
[16:04:40.435]                             if (!grepl(pattern, name)) 
[16:04:40.435]                               next
[16:04:40.435]                             invokeRestart(restart)
[16:04:40.435]                             muffled <- TRUE
[16:04:40.435]                             break
[16:04:40.435]                           }
[16:04:40.435]                         }
[16:04:40.435]                       }
[16:04:40.435]                       invisible(muffled)
[16:04:40.435]                     }
[16:04:40.435]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.435]                   }
[16:04:40.435]                 }
[16:04:40.435]                 else {
[16:04:40.435]                   if (TRUE) {
[16:04:40.435]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.435]                     {
[16:04:40.435]                       inherits <- base::inherits
[16:04:40.435]                       invokeRestart <- base::invokeRestart
[16:04:40.435]                       is.null <- base::is.null
[16:04:40.435]                       muffled <- FALSE
[16:04:40.435]                       if (inherits(cond, "message")) {
[16:04:40.435]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.435]                         if (muffled) 
[16:04:40.435]                           invokeRestart("muffleMessage")
[16:04:40.435]                       }
[16:04:40.435]                       else if (inherits(cond, "warning")) {
[16:04:40.435]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.435]                         if (muffled) 
[16:04:40.435]                           invokeRestart("muffleWarning")
[16:04:40.435]                       }
[16:04:40.435]                       else if (inherits(cond, "condition")) {
[16:04:40.435]                         if (!is.null(pattern)) {
[16:04:40.435]                           computeRestarts <- base::computeRestarts
[16:04:40.435]                           grepl <- base::grepl
[16:04:40.435]                           restarts <- computeRestarts(cond)
[16:04:40.435]                           for (restart in restarts) {
[16:04:40.435]                             name <- restart$name
[16:04:40.435]                             if (is.null(name)) 
[16:04:40.435]                               next
[16:04:40.435]                             if (!grepl(pattern, name)) 
[16:04:40.435]                               next
[16:04:40.435]                             invokeRestart(restart)
[16:04:40.435]                             muffled <- TRUE
[16:04:40.435]                             break
[16:04:40.435]                           }
[16:04:40.435]                         }
[16:04:40.435]                       }
[16:04:40.435]                       invisible(muffled)
[16:04:40.435]                     }
[16:04:40.435]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.435]                   }
[16:04:40.435]                 }
[16:04:40.435]             }
[16:04:40.435]         }))
[16:04:40.435]     }, error = function(ex) {
[16:04:40.435]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.435]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.435]                 ...future.rng), started = ...future.startTime, 
[16:04:40.435]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.435]             version = "1.8"), class = "FutureResult")
[16:04:40.435]     }, finally = {
[16:04:40.435]         if (!identical(...future.workdir, getwd())) 
[16:04:40.435]             setwd(...future.workdir)
[16:04:40.435]         {
[16:04:40.435]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.435]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.435]             }
[16:04:40.435]             base::options(...future.oldOptions)
[16:04:40.435]             if (.Platform$OS.type == "windows") {
[16:04:40.435]                 old_names <- names(...future.oldEnvVars)
[16:04:40.435]                 envs <- base::Sys.getenv()
[16:04:40.435]                 names <- names(envs)
[16:04:40.435]                 common <- intersect(names, old_names)
[16:04:40.435]                 added <- setdiff(names, old_names)
[16:04:40.435]                 removed <- setdiff(old_names, names)
[16:04:40.435]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.435]                   envs[common]]
[16:04:40.435]                 NAMES <- toupper(changed)
[16:04:40.435]                 args <- list()
[16:04:40.435]                 for (kk in seq_along(NAMES)) {
[16:04:40.435]                   name <- changed[[kk]]
[16:04:40.435]                   NAME <- NAMES[[kk]]
[16:04:40.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.435]                     next
[16:04:40.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.435]                 }
[16:04:40.435]                 NAMES <- toupper(added)
[16:04:40.435]                 for (kk in seq_along(NAMES)) {
[16:04:40.435]                   name <- added[[kk]]
[16:04:40.435]                   NAME <- NAMES[[kk]]
[16:04:40.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.435]                     next
[16:04:40.435]                   args[[name]] <- ""
[16:04:40.435]                 }
[16:04:40.435]                 NAMES <- toupper(removed)
[16:04:40.435]                 for (kk in seq_along(NAMES)) {
[16:04:40.435]                   name <- removed[[kk]]
[16:04:40.435]                   NAME <- NAMES[[kk]]
[16:04:40.435]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.435]                     next
[16:04:40.435]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.435]                 }
[16:04:40.435]                 if (length(args) > 0) 
[16:04:40.435]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.435]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.435]             }
[16:04:40.435]             else {
[16:04:40.435]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.435]             }
[16:04:40.435]             {
[16:04:40.435]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.435]                   0L) {
[16:04:40.435]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.435]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.435]                   base::options(opts)
[16:04:40.435]                 }
[16:04:40.435]                 {
[16:04:40.435]                   {
[16:04:40.435]                     NULL
[16:04:40.435]                     RNGkind("Mersenne-Twister")
[16:04:40.435]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.435]                       inherits = FALSE)
[16:04:40.435]                   }
[16:04:40.435]                   options(future.plan = NULL)
[16:04:40.435]                   if (is.na(NA_character_)) 
[16:04:40.435]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.435]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.435]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.435]                   {
[16:04:40.435]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.435]                     if (!future$lazy) 
[16:04:40.435]                       future <- run(future)
[16:04:40.435]                     invisible(future)
[16:04:40.435]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.435]                 }
[16:04:40.435]             }
[16:04:40.435]         }
[16:04:40.435]     })
[16:04:40.435]     if (TRUE) {
[16:04:40.435]         base::sink(type = "output", split = FALSE)
[16:04:40.435]         if (TRUE) {
[16:04:40.435]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.435]         }
[16:04:40.435]         else {
[16:04:40.435]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.435]         }
[16:04:40.435]         base::close(...future.stdout)
[16:04:40.435]         ...future.stdout <- NULL
[16:04:40.435]     }
[16:04:40.435]     ...future.result$conditions <- ...future.conditions
[16:04:40.435]     ...future.result$finished <- base::Sys.time()
[16:04:40.435]     ...future.result
[16:04:40.435] }
[16:04:40.436] plan(): Setting new future strategy stack:
[16:04:40.436] List of future strategies:
[16:04:40.436] 1. sequential:
[16:04:40.436]    - args: function (..., envir = parent.frame())
[16:04:40.436]    - tweaked: FALSE
[16:04:40.436]    - call: NULL
[16:04:40.437] plan(): nbrOfWorkers() = 1
[16:04:40.437] plan(): Setting new future strategy stack:
[16:04:40.437] List of future strategies:
[16:04:40.437] 1. sequential:
[16:04:40.437]    - args: function (..., envir = parent.frame())
[16:04:40.437]    - tweaked: FALSE
[16:04:40.437]    - call: future::plan("sequential")
[16:04:40.438] plan(): nbrOfWorkers() = 1
[16:04:40.438] SequentialFuture started (and completed)
[16:04:40.438] - Launch lazy future ... done
[16:04:40.438] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'reset') ...
*** FutureRegistry('multicore-b4927c6b-551d-9262-3056-418bc1fda2f7', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:04:40.441] getGlobalsAndPackages() ...
[16:04:40.441] Searching for globals...
[16:04:40.441] - globals found: [1] ‘{’
[16:04:40.441] Searching for globals ... DONE
[16:04:40.441] Resolving globals: FALSE
[16:04:40.442] 
[16:04:40.442] 
[16:04:40.442] getGlobalsAndPackages() ... DONE
[16:04:40.442] run() for ‘Future’ ...
[16:04:40.442] - state: ‘created’
[16:04:40.442] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.442] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.443] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.443]   - Field: ‘label’
[16:04:40.443]   - Field: ‘local’
[16:04:40.443]   - Field: ‘owner’
[16:04:40.443]   - Field: ‘envir’
[16:04:40.443]   - Field: ‘packages’
[16:04:40.443]   - Field: ‘gc’
[16:04:40.443]   - Field: ‘conditions’
[16:04:40.443]   - Field: ‘expr’
[16:04:40.443]   - Field: ‘uuid’
[16:04:40.443]   - Field: ‘seed’
[16:04:40.444]   - Field: ‘version’
[16:04:40.444]   - Field: ‘result’
[16:04:40.444]   - Field: ‘asynchronous’
[16:04:40.444]   - Field: ‘calls’
[16:04:40.444]   - Field: ‘globals’
[16:04:40.444]   - Field: ‘stdout’
[16:04:40.444]   - Field: ‘earlySignal’
[16:04:40.444]   - Field: ‘lazy’
[16:04:40.444]   - Field: ‘state’
[16:04:40.444] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.445] - Launch lazy future ...
[16:04:40.445] Packages needed by the future expression (n = 0): <none>
[16:04:40.445] Packages needed by future strategies (n = 0): <none>
[16:04:40.445] {
[16:04:40.445]     {
[16:04:40.445]         {
[16:04:40.445]             ...future.startTime <- base::Sys.time()
[16:04:40.445]             {
[16:04:40.445]                 {
[16:04:40.445]                   {
[16:04:40.445]                     base::local({
[16:04:40.445]                       has_future <- base::requireNamespace("future", 
[16:04:40.445]                         quietly = TRUE)
[16:04:40.445]                       if (has_future) {
[16:04:40.445]                         ns <- base::getNamespace("future")
[16:04:40.445]                         version <- ns[[".package"]][["version"]]
[16:04:40.445]                         if (is.null(version)) 
[16:04:40.445]                           version <- utils::packageVersion("future")
[16:04:40.445]                       }
[16:04:40.445]                       else {
[16:04:40.445]                         version <- NULL
[16:04:40.445]                       }
[16:04:40.445]                       if (!has_future || version < "1.8.0") {
[16:04:40.445]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.445]                           "", base::R.version$version.string), 
[16:04:40.445]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.445]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.445]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.445]                             "release", "version")], collapse = " "), 
[16:04:40.445]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.445]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.445]                           info)
[16:04:40.445]                         info <- base::paste(info, collapse = "; ")
[16:04:40.445]                         if (!has_future) {
[16:04:40.445]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.445]                             info)
[16:04:40.445]                         }
[16:04:40.445]                         else {
[16:04:40.445]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.445]                             info, version)
[16:04:40.445]                         }
[16:04:40.445]                         base::stop(msg)
[16:04:40.445]                       }
[16:04:40.445]                     })
[16:04:40.445]                   }
[16:04:40.445]                   options(future.plan = NULL)
[16:04:40.445]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.445]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.445]                 }
[16:04:40.445]                 ...future.workdir <- getwd()
[16:04:40.445]             }
[16:04:40.445]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.445]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.445]         }
[16:04:40.445]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.445]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.445]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.445]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.445]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.445]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.445]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.445]             base::names(...future.oldOptions))
[16:04:40.445]     }
[16:04:40.445]     if (FALSE) {
[16:04:40.445]     }
[16:04:40.445]     else {
[16:04:40.445]         if (TRUE) {
[16:04:40.445]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.445]                 open = "w")
[16:04:40.445]         }
[16:04:40.445]         else {
[16:04:40.445]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.445]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.445]         }
[16:04:40.445]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.445]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.445]             base::sink(type = "output", split = FALSE)
[16:04:40.445]             base::close(...future.stdout)
[16:04:40.445]         }, add = TRUE)
[16:04:40.445]     }
[16:04:40.445]     ...future.frame <- base::sys.nframe()
[16:04:40.445]     ...future.conditions <- base::list()
[16:04:40.445]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.445]     if (FALSE) {
[16:04:40.445]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.445]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.445]     }
[16:04:40.445]     ...future.result <- base::tryCatch({
[16:04:40.445]         base::withCallingHandlers({
[16:04:40.445]             ...future.value <- base::withVisible(base::local({
[16:04:40.445]                 1
[16:04:40.445]             }))
[16:04:40.445]             future::FutureResult(value = ...future.value$value, 
[16:04:40.445]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.445]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.445]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.445]                     ...future.globalenv.names))
[16:04:40.445]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.445]         }, condition = base::local({
[16:04:40.445]             c <- base::c
[16:04:40.445]             inherits <- base::inherits
[16:04:40.445]             invokeRestart <- base::invokeRestart
[16:04:40.445]             length <- base::length
[16:04:40.445]             list <- base::list
[16:04:40.445]             seq.int <- base::seq.int
[16:04:40.445]             signalCondition <- base::signalCondition
[16:04:40.445]             sys.calls <- base::sys.calls
[16:04:40.445]             `[[` <- base::`[[`
[16:04:40.445]             `+` <- base::`+`
[16:04:40.445]             `<<-` <- base::`<<-`
[16:04:40.445]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.445]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.445]                   3L)]
[16:04:40.445]             }
[16:04:40.445]             function(cond) {
[16:04:40.445]                 is_error <- inherits(cond, "error")
[16:04:40.445]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.445]                   NULL)
[16:04:40.445]                 if (is_error) {
[16:04:40.445]                   sessionInformation <- function() {
[16:04:40.445]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.445]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.445]                       search = base::search(), system = base::Sys.info())
[16:04:40.445]                   }
[16:04:40.445]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.445]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.445]                     cond$call), session = sessionInformation(), 
[16:04:40.445]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.445]                   signalCondition(cond)
[16:04:40.445]                 }
[16:04:40.445]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.445]                 "immediateCondition"))) {
[16:04:40.445]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.445]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.445]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.445]                   if (TRUE && !signal) {
[16:04:40.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.445]                     {
[16:04:40.445]                       inherits <- base::inherits
[16:04:40.445]                       invokeRestart <- base::invokeRestart
[16:04:40.445]                       is.null <- base::is.null
[16:04:40.445]                       muffled <- FALSE
[16:04:40.445]                       if (inherits(cond, "message")) {
[16:04:40.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.445]                         if (muffled) 
[16:04:40.445]                           invokeRestart("muffleMessage")
[16:04:40.445]                       }
[16:04:40.445]                       else if (inherits(cond, "warning")) {
[16:04:40.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.445]                         if (muffled) 
[16:04:40.445]                           invokeRestart("muffleWarning")
[16:04:40.445]                       }
[16:04:40.445]                       else if (inherits(cond, "condition")) {
[16:04:40.445]                         if (!is.null(pattern)) {
[16:04:40.445]                           computeRestarts <- base::computeRestarts
[16:04:40.445]                           grepl <- base::grepl
[16:04:40.445]                           restarts <- computeRestarts(cond)
[16:04:40.445]                           for (restart in restarts) {
[16:04:40.445]                             name <- restart$name
[16:04:40.445]                             if (is.null(name)) 
[16:04:40.445]                               next
[16:04:40.445]                             if (!grepl(pattern, name)) 
[16:04:40.445]                               next
[16:04:40.445]                             invokeRestart(restart)
[16:04:40.445]                             muffled <- TRUE
[16:04:40.445]                             break
[16:04:40.445]                           }
[16:04:40.445]                         }
[16:04:40.445]                       }
[16:04:40.445]                       invisible(muffled)
[16:04:40.445]                     }
[16:04:40.445]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.445]                   }
[16:04:40.445]                 }
[16:04:40.445]                 else {
[16:04:40.445]                   if (TRUE) {
[16:04:40.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.445]                     {
[16:04:40.445]                       inherits <- base::inherits
[16:04:40.445]                       invokeRestart <- base::invokeRestart
[16:04:40.445]                       is.null <- base::is.null
[16:04:40.445]                       muffled <- FALSE
[16:04:40.445]                       if (inherits(cond, "message")) {
[16:04:40.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.445]                         if (muffled) 
[16:04:40.445]                           invokeRestart("muffleMessage")
[16:04:40.445]                       }
[16:04:40.445]                       else if (inherits(cond, "warning")) {
[16:04:40.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.445]                         if (muffled) 
[16:04:40.445]                           invokeRestart("muffleWarning")
[16:04:40.445]                       }
[16:04:40.445]                       else if (inherits(cond, "condition")) {
[16:04:40.445]                         if (!is.null(pattern)) {
[16:04:40.445]                           computeRestarts <- base::computeRestarts
[16:04:40.445]                           grepl <- base::grepl
[16:04:40.445]                           restarts <- computeRestarts(cond)
[16:04:40.445]                           for (restart in restarts) {
[16:04:40.445]                             name <- restart$name
[16:04:40.445]                             if (is.null(name)) 
[16:04:40.445]                               next
[16:04:40.445]                             if (!grepl(pattern, name)) 
[16:04:40.445]                               next
[16:04:40.445]                             invokeRestart(restart)
[16:04:40.445]                             muffled <- TRUE
[16:04:40.445]                             break
[16:04:40.445]                           }
[16:04:40.445]                         }
[16:04:40.445]                       }
[16:04:40.445]                       invisible(muffled)
[16:04:40.445]                     }
[16:04:40.445]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.445]                   }
[16:04:40.445]                 }
[16:04:40.445]             }
[16:04:40.445]         }))
[16:04:40.445]     }, error = function(ex) {
[16:04:40.445]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.445]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.445]                 ...future.rng), started = ...future.startTime, 
[16:04:40.445]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.445]             version = "1.8"), class = "FutureResult")
[16:04:40.445]     }, finally = {
[16:04:40.445]         if (!identical(...future.workdir, getwd())) 
[16:04:40.445]             setwd(...future.workdir)
[16:04:40.445]         {
[16:04:40.445]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.445]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.445]             }
[16:04:40.445]             base::options(...future.oldOptions)
[16:04:40.445]             if (.Platform$OS.type == "windows") {
[16:04:40.445]                 old_names <- names(...future.oldEnvVars)
[16:04:40.445]                 envs <- base::Sys.getenv()
[16:04:40.445]                 names <- names(envs)
[16:04:40.445]                 common <- intersect(names, old_names)
[16:04:40.445]                 added <- setdiff(names, old_names)
[16:04:40.445]                 removed <- setdiff(old_names, names)
[16:04:40.445]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.445]                   envs[common]]
[16:04:40.445]                 NAMES <- toupper(changed)
[16:04:40.445]                 args <- list()
[16:04:40.445]                 for (kk in seq_along(NAMES)) {
[16:04:40.445]                   name <- changed[[kk]]
[16:04:40.445]                   NAME <- NAMES[[kk]]
[16:04:40.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.445]                     next
[16:04:40.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.445]                 }
[16:04:40.445]                 NAMES <- toupper(added)
[16:04:40.445]                 for (kk in seq_along(NAMES)) {
[16:04:40.445]                   name <- added[[kk]]
[16:04:40.445]                   NAME <- NAMES[[kk]]
[16:04:40.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.445]                     next
[16:04:40.445]                   args[[name]] <- ""
[16:04:40.445]                 }
[16:04:40.445]                 NAMES <- toupper(removed)
[16:04:40.445]                 for (kk in seq_along(NAMES)) {
[16:04:40.445]                   name <- removed[[kk]]
[16:04:40.445]                   NAME <- NAMES[[kk]]
[16:04:40.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.445]                     next
[16:04:40.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.445]                 }
[16:04:40.445]                 if (length(args) > 0) 
[16:04:40.445]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.445]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.445]             }
[16:04:40.445]             else {
[16:04:40.445]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.445]             }
[16:04:40.445]             {
[16:04:40.445]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.445]                   0L) {
[16:04:40.445]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.445]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.445]                   base::options(opts)
[16:04:40.445]                 }
[16:04:40.445]                 {
[16:04:40.445]                   {
[16:04:40.445]                     NULL
[16:04:40.445]                     RNGkind("Mersenne-Twister")
[16:04:40.445]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.445]                       inherits = FALSE)
[16:04:40.445]                   }
[16:04:40.445]                   options(future.plan = NULL)
[16:04:40.445]                   if (is.na(NA_character_)) 
[16:04:40.445]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.445]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.445]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.445]                   {
[16:04:40.445]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.445]                     if (!future$lazy) 
[16:04:40.445]                       future <- run(future)
[16:04:40.445]                     invisible(future)
[16:04:40.445]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.445]                 }
[16:04:40.445]             }
[16:04:40.445]         }
[16:04:40.445]     })
[16:04:40.445]     if (TRUE) {
[16:04:40.445]         base::sink(type = "output", split = FALSE)
[16:04:40.445]         if (TRUE) {
[16:04:40.445]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.445]         }
[16:04:40.445]         else {
[16:04:40.445]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.445]         }
[16:04:40.445]         base::close(...future.stdout)
[16:04:40.445]         ...future.stdout <- NULL
[16:04:40.445]     }
[16:04:40.445]     ...future.result$conditions <- ...future.conditions
[16:04:40.445]     ...future.result$finished <- base::Sys.time()
[16:04:40.445]     ...future.result
[16:04:40.445] }
[16:04:40.447] plan(): Setting new future strategy stack:
[16:04:40.447] List of future strategies:
[16:04:40.447] 1. sequential:
[16:04:40.447]    - args: function (..., envir = parent.frame())
[16:04:40.447]    - tweaked: FALSE
[16:04:40.447]    - call: NULL
[16:04:40.447] plan(): nbrOfWorkers() = 1
[16:04:40.448] plan(): Setting new future strategy stack:
[16:04:40.448] List of future strategies:
[16:04:40.448] 1. sequential:
[16:04:40.448]    - args: function (..., envir = parent.frame())
[16:04:40.448]    - tweaked: FALSE
[16:04:40.448]    - call: future::plan("sequential")
[16:04:40.448] plan(): nbrOfWorkers() = 1
[16:04:40.449] SequentialFuture started (and completed)
[16:04:40.449] - Launch lazy future ... done
[16:04:40.449] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[16:04:40.450] getGlobalsAndPackages() ...
[16:04:40.450] Searching for globals...
[16:04:40.450] - globals found: [1] ‘{’
[16:04:40.451] Searching for globals ... DONE
[16:04:40.451] Resolving globals: FALSE
[16:04:40.451] 
[16:04:40.451] 
[16:04:40.451] getGlobalsAndPackages() ... DONE
[16:04:40.451] run() for ‘Future’ ...
[16:04:40.451] - state: ‘created’
[16:04:40.452] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.452] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.452] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.452]   - Field: ‘label’
[16:04:40.452]   - Field: ‘local’
[16:04:40.452]   - Field: ‘owner’
[16:04:40.452]   - Field: ‘envir’
[16:04:40.452]   - Field: ‘packages’
[16:04:40.452]   - Field: ‘gc’
[16:04:40.453]   - Field: ‘conditions’
[16:04:40.453]   - Field: ‘expr’
[16:04:40.453]   - Field: ‘uuid’
[16:04:40.453]   - Field: ‘seed’
[16:04:40.453]   - Field: ‘version’
[16:04:40.453]   - Field: ‘result’
[16:04:40.453]   - Field: ‘asynchronous’
[16:04:40.453]   - Field: ‘calls’
[16:04:40.453]   - Field: ‘globals’
[16:04:40.453]   - Field: ‘stdout’
[16:04:40.453]   - Field: ‘earlySignal’
[16:04:40.454]   - Field: ‘lazy’
[16:04:40.454]   - Field: ‘state’
[16:04:40.454] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.454] - Launch lazy future ...
[16:04:40.454] Packages needed by the future expression (n = 0): <none>
[16:04:40.454] Packages needed by future strategies (n = 0): <none>
[16:04:40.454] {
[16:04:40.454]     {
[16:04:40.454]         {
[16:04:40.454]             ...future.startTime <- base::Sys.time()
[16:04:40.454]             {
[16:04:40.454]                 {
[16:04:40.454]                   {
[16:04:40.454]                     base::local({
[16:04:40.454]                       has_future <- base::requireNamespace("future", 
[16:04:40.454]                         quietly = TRUE)
[16:04:40.454]                       if (has_future) {
[16:04:40.454]                         ns <- base::getNamespace("future")
[16:04:40.454]                         version <- ns[[".package"]][["version"]]
[16:04:40.454]                         if (is.null(version)) 
[16:04:40.454]                           version <- utils::packageVersion("future")
[16:04:40.454]                       }
[16:04:40.454]                       else {
[16:04:40.454]                         version <- NULL
[16:04:40.454]                       }
[16:04:40.454]                       if (!has_future || version < "1.8.0") {
[16:04:40.454]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.454]                           "", base::R.version$version.string), 
[16:04:40.454]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.454]                             "release", "version")], collapse = " "), 
[16:04:40.454]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.454]                           info)
[16:04:40.454]                         info <- base::paste(info, collapse = "; ")
[16:04:40.454]                         if (!has_future) {
[16:04:40.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.454]                             info)
[16:04:40.454]                         }
[16:04:40.454]                         else {
[16:04:40.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.454]                             info, version)
[16:04:40.454]                         }
[16:04:40.454]                         base::stop(msg)
[16:04:40.454]                       }
[16:04:40.454]                     })
[16:04:40.454]                   }
[16:04:40.454]                   options(future.plan = NULL)
[16:04:40.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.454]                 }
[16:04:40.454]                 ...future.workdir <- getwd()
[16:04:40.454]             }
[16:04:40.454]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.454]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.454]         }
[16:04:40.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.454]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.454]             base::names(...future.oldOptions))
[16:04:40.454]     }
[16:04:40.454]     if (FALSE) {
[16:04:40.454]     }
[16:04:40.454]     else {
[16:04:40.454]         if (TRUE) {
[16:04:40.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.454]                 open = "w")
[16:04:40.454]         }
[16:04:40.454]         else {
[16:04:40.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.454]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.454]         }
[16:04:40.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.454]             base::sink(type = "output", split = FALSE)
[16:04:40.454]             base::close(...future.stdout)
[16:04:40.454]         }, add = TRUE)
[16:04:40.454]     }
[16:04:40.454]     ...future.frame <- base::sys.nframe()
[16:04:40.454]     ...future.conditions <- base::list()
[16:04:40.454]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.454]     if (FALSE) {
[16:04:40.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.454]     }
[16:04:40.454]     ...future.result <- base::tryCatch({
[16:04:40.454]         base::withCallingHandlers({
[16:04:40.454]             ...future.value <- base::withVisible(base::local({
[16:04:40.454]                 2
[16:04:40.454]             }))
[16:04:40.454]             future::FutureResult(value = ...future.value$value, 
[16:04:40.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.454]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.454]                     ...future.globalenv.names))
[16:04:40.454]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.454]         }, condition = base::local({
[16:04:40.454]             c <- base::c
[16:04:40.454]             inherits <- base::inherits
[16:04:40.454]             invokeRestart <- base::invokeRestart
[16:04:40.454]             length <- base::length
[16:04:40.454]             list <- base::list
[16:04:40.454]             seq.int <- base::seq.int
[16:04:40.454]             signalCondition <- base::signalCondition
[16:04:40.454]             sys.calls <- base::sys.calls
[16:04:40.454]             `[[` <- base::`[[`
[16:04:40.454]             `+` <- base::`+`
[16:04:40.454]             `<<-` <- base::`<<-`
[16:04:40.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.454]                   3L)]
[16:04:40.454]             }
[16:04:40.454]             function(cond) {
[16:04:40.454]                 is_error <- inherits(cond, "error")
[16:04:40.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.454]                   NULL)
[16:04:40.454]                 if (is_error) {
[16:04:40.454]                   sessionInformation <- function() {
[16:04:40.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.454]                       search = base::search(), system = base::Sys.info())
[16:04:40.454]                   }
[16:04:40.454]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.454]                     cond$call), session = sessionInformation(), 
[16:04:40.454]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.454]                   signalCondition(cond)
[16:04:40.454]                 }
[16:04:40.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.454]                 "immediateCondition"))) {
[16:04:40.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.454]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.454]                   if (TRUE && !signal) {
[16:04:40.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.454]                     {
[16:04:40.454]                       inherits <- base::inherits
[16:04:40.454]                       invokeRestart <- base::invokeRestart
[16:04:40.454]                       is.null <- base::is.null
[16:04:40.454]                       muffled <- FALSE
[16:04:40.454]                       if (inherits(cond, "message")) {
[16:04:40.454]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.454]                         if (muffled) 
[16:04:40.454]                           invokeRestart("muffleMessage")
[16:04:40.454]                       }
[16:04:40.454]                       else if (inherits(cond, "warning")) {
[16:04:40.454]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.454]                         if (muffled) 
[16:04:40.454]                           invokeRestart("muffleWarning")
[16:04:40.454]                       }
[16:04:40.454]                       else if (inherits(cond, "condition")) {
[16:04:40.454]                         if (!is.null(pattern)) {
[16:04:40.454]                           computeRestarts <- base::computeRestarts
[16:04:40.454]                           grepl <- base::grepl
[16:04:40.454]                           restarts <- computeRestarts(cond)
[16:04:40.454]                           for (restart in restarts) {
[16:04:40.454]                             name <- restart$name
[16:04:40.454]                             if (is.null(name)) 
[16:04:40.454]                               next
[16:04:40.454]                             if (!grepl(pattern, name)) 
[16:04:40.454]                               next
[16:04:40.454]                             invokeRestart(restart)
[16:04:40.454]                             muffled <- TRUE
[16:04:40.454]                             break
[16:04:40.454]                           }
[16:04:40.454]                         }
[16:04:40.454]                       }
[16:04:40.454]                       invisible(muffled)
[16:04:40.454]                     }
[16:04:40.454]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.454]                   }
[16:04:40.454]                 }
[16:04:40.454]                 else {
[16:04:40.454]                   if (TRUE) {
[16:04:40.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.454]                     {
[16:04:40.454]                       inherits <- base::inherits
[16:04:40.454]                       invokeRestart <- base::invokeRestart
[16:04:40.454]                       is.null <- base::is.null
[16:04:40.454]                       muffled <- FALSE
[16:04:40.454]                       if (inherits(cond, "message")) {
[16:04:40.454]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.454]                         if (muffled) 
[16:04:40.454]                           invokeRestart("muffleMessage")
[16:04:40.454]                       }
[16:04:40.454]                       else if (inherits(cond, "warning")) {
[16:04:40.454]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.454]                         if (muffled) 
[16:04:40.454]                           invokeRestart("muffleWarning")
[16:04:40.454]                       }
[16:04:40.454]                       else if (inherits(cond, "condition")) {
[16:04:40.454]                         if (!is.null(pattern)) {
[16:04:40.454]                           computeRestarts <- base::computeRestarts
[16:04:40.454]                           grepl <- base::grepl
[16:04:40.454]                           restarts <- computeRestarts(cond)
[16:04:40.454]                           for (restart in restarts) {
[16:04:40.454]                             name <- restart$name
[16:04:40.454]                             if (is.null(name)) 
[16:04:40.454]                               next
[16:04:40.454]                             if (!grepl(pattern, name)) 
[16:04:40.454]                               next
[16:04:40.454]                             invokeRestart(restart)
[16:04:40.454]                             muffled <- TRUE
[16:04:40.454]                             break
[16:04:40.454]                           }
[16:04:40.454]                         }
[16:04:40.454]                       }
[16:04:40.454]                       invisible(muffled)
[16:04:40.454]                     }
[16:04:40.454]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.454]                   }
[16:04:40.454]                 }
[16:04:40.454]             }
[16:04:40.454]         }))
[16:04:40.454]     }, error = function(ex) {
[16:04:40.454]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.454]                 ...future.rng), started = ...future.startTime, 
[16:04:40.454]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.454]             version = "1.8"), class = "FutureResult")
[16:04:40.454]     }, finally = {
[16:04:40.454]         if (!identical(...future.workdir, getwd())) 
[16:04:40.454]             setwd(...future.workdir)
[16:04:40.454]         {
[16:04:40.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.454]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.454]             }
[16:04:40.454]             base::options(...future.oldOptions)
[16:04:40.454]             if (.Platform$OS.type == "windows") {
[16:04:40.454]                 old_names <- names(...future.oldEnvVars)
[16:04:40.454]                 envs <- base::Sys.getenv()
[16:04:40.454]                 names <- names(envs)
[16:04:40.454]                 common <- intersect(names, old_names)
[16:04:40.454]                 added <- setdiff(names, old_names)
[16:04:40.454]                 removed <- setdiff(old_names, names)
[16:04:40.454]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.454]                   envs[common]]
[16:04:40.454]                 NAMES <- toupper(changed)
[16:04:40.454]                 args <- list()
[16:04:40.454]                 for (kk in seq_along(NAMES)) {
[16:04:40.454]                   name <- changed[[kk]]
[16:04:40.454]                   NAME <- NAMES[[kk]]
[16:04:40.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.454]                     next
[16:04:40.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.454]                 }
[16:04:40.454]                 NAMES <- toupper(added)
[16:04:40.454]                 for (kk in seq_along(NAMES)) {
[16:04:40.454]                   name <- added[[kk]]
[16:04:40.454]                   NAME <- NAMES[[kk]]
[16:04:40.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.454]                     next
[16:04:40.454]                   args[[name]] <- ""
[16:04:40.454]                 }
[16:04:40.454]                 NAMES <- toupper(removed)
[16:04:40.454]                 for (kk in seq_along(NAMES)) {
[16:04:40.454]                   name <- removed[[kk]]
[16:04:40.454]                   NAME <- NAMES[[kk]]
[16:04:40.454]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.454]                     next
[16:04:40.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.454]                 }
[16:04:40.454]                 if (length(args) > 0) 
[16:04:40.454]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.454]             }
[16:04:40.454]             else {
[16:04:40.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.454]             }
[16:04:40.454]             {
[16:04:40.454]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.454]                   0L) {
[16:04:40.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.454]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.454]                   base::options(opts)
[16:04:40.454]                 }
[16:04:40.454]                 {
[16:04:40.454]                   {
[16:04:40.454]                     NULL
[16:04:40.454]                     RNGkind("Mersenne-Twister")
[16:04:40.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.454]                       inherits = FALSE)
[16:04:40.454]                   }
[16:04:40.454]                   options(future.plan = NULL)
[16:04:40.454]                   if (is.na(NA_character_)) 
[16:04:40.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.454]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.454]                   {
[16:04:40.454]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.454]                     if (!future$lazy) 
[16:04:40.454]                       future <- run(future)
[16:04:40.454]                     invisible(future)
[16:04:40.454]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.454]                 }
[16:04:40.454]             }
[16:04:40.454]         }
[16:04:40.454]     })
[16:04:40.454]     if (TRUE) {
[16:04:40.454]         base::sink(type = "output", split = FALSE)
[16:04:40.454]         if (TRUE) {
[16:04:40.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.454]         }
[16:04:40.454]         else {
[16:04:40.454]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.454]         }
[16:04:40.454]         base::close(...future.stdout)
[16:04:40.454]         ...future.stdout <- NULL
[16:04:40.454]     }
[16:04:40.454]     ...future.result$conditions <- ...future.conditions
[16:04:40.454]     ...future.result$finished <- base::Sys.time()
[16:04:40.454]     ...future.result
[16:04:40.454] }
[16:04:40.456] plan(): Setting new future strategy stack:
[16:04:40.456] List of future strategies:
[16:04:40.456] 1. sequential:
[16:04:40.456]    - args: function (..., envir = parent.frame())
[16:04:40.456]    - tweaked: FALSE
[16:04:40.456]    - call: NULL
[16:04:40.457] plan(): nbrOfWorkers() = 1
[16:04:40.457] plan(): Setting new future strategy stack:
[16:04:40.457] List of future strategies:
[16:04:40.457] 1. sequential:
[16:04:40.457]    - args: function (..., envir = parent.frame())
[16:04:40.457]    - tweaked: FALSE
[16:04:40.457]    - call: future::plan("sequential")
[16:04:40.458] plan(): nbrOfWorkers() = 1
[16:04:40.458] SequentialFuture started (and completed)
[16:04:40.458] - Launch lazy future ... done
[16:04:40.458] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[16:04:40.466] resolved() for ‘SequentialFuture’ ...
[16:04:40.467] - state: ‘finished’
[16:04:40.467] - run: FALSE
[16:04:40.467] - result: ‘FutureResult’
[16:04:40.467] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[16:04:40.467] getGlobalsAndPackages() ...
[16:04:40.467] Searching for globals...
[16:04:40.468] - globals found: [1] ‘{’
[16:04:40.469] Searching for globals ... DONE
[16:04:40.469] Resolving globals: FALSE
[16:04:40.469] 
[16:04:40.469] 
[16:04:40.469] getGlobalsAndPackages() ... DONE
[16:04:40.470] run() for ‘Future’ ...
[16:04:40.470] - state: ‘created’
[16:04:40.470] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.470] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.470] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.470]   - Field: ‘label’
[16:04:40.470]   - Field: ‘local’
[16:04:40.470]   - Field: ‘owner’
[16:04:40.471]   - Field: ‘envir’
[16:04:40.471]   - Field: ‘packages’
[16:04:40.471]   - Field: ‘gc’
[16:04:40.471]   - Field: ‘conditions’
[16:04:40.471]   - Field: ‘expr’
[16:04:40.471]   - Field: ‘uuid’
[16:04:40.471]   - Field: ‘seed’
[16:04:40.471]   - Field: ‘version’
[16:04:40.471]   - Field: ‘result’
[16:04:40.471]   - Field: ‘asynchronous’
[16:04:40.471]   - Field: ‘calls’
[16:04:40.472]   - Field: ‘globals’
[16:04:40.472]   - Field: ‘stdout’
[16:04:40.472]   - Field: ‘earlySignal’
[16:04:40.472]   - Field: ‘lazy’
[16:04:40.472]   - Field: ‘state’
[16:04:40.472] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.472] - Launch lazy future ...
[16:04:40.472] Packages needed by the future expression (n = 0): <none>
[16:04:40.472] Packages needed by future strategies (n = 0): <none>
[16:04:40.473] {
[16:04:40.473]     {
[16:04:40.473]         {
[16:04:40.473]             ...future.startTime <- base::Sys.time()
[16:04:40.473]             {
[16:04:40.473]                 {
[16:04:40.473]                   {
[16:04:40.473]                     base::local({
[16:04:40.473]                       has_future <- base::requireNamespace("future", 
[16:04:40.473]                         quietly = TRUE)
[16:04:40.473]                       if (has_future) {
[16:04:40.473]                         ns <- base::getNamespace("future")
[16:04:40.473]                         version <- ns[[".package"]][["version"]]
[16:04:40.473]                         if (is.null(version)) 
[16:04:40.473]                           version <- utils::packageVersion("future")
[16:04:40.473]                       }
[16:04:40.473]                       else {
[16:04:40.473]                         version <- NULL
[16:04:40.473]                       }
[16:04:40.473]                       if (!has_future || version < "1.8.0") {
[16:04:40.473]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.473]                           "", base::R.version$version.string), 
[16:04:40.473]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.473]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.473]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.473]                             "release", "version")], collapse = " "), 
[16:04:40.473]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.473]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.473]                           info)
[16:04:40.473]                         info <- base::paste(info, collapse = "; ")
[16:04:40.473]                         if (!has_future) {
[16:04:40.473]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.473]                             info)
[16:04:40.473]                         }
[16:04:40.473]                         else {
[16:04:40.473]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.473]                             info, version)
[16:04:40.473]                         }
[16:04:40.473]                         base::stop(msg)
[16:04:40.473]                       }
[16:04:40.473]                     })
[16:04:40.473]                   }
[16:04:40.473]                   options(future.plan = NULL)
[16:04:40.473]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.473]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.473]                 }
[16:04:40.473]                 ...future.workdir <- getwd()
[16:04:40.473]             }
[16:04:40.473]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.473]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.473]         }
[16:04:40.473]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.473]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.473]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.473]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.473]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.473]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.473]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.473]             base::names(...future.oldOptions))
[16:04:40.473]     }
[16:04:40.473]     if (FALSE) {
[16:04:40.473]     }
[16:04:40.473]     else {
[16:04:40.473]         if (TRUE) {
[16:04:40.473]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.473]                 open = "w")
[16:04:40.473]         }
[16:04:40.473]         else {
[16:04:40.473]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.473]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.473]         }
[16:04:40.473]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.473]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.473]             base::sink(type = "output", split = FALSE)
[16:04:40.473]             base::close(...future.stdout)
[16:04:40.473]         }, add = TRUE)
[16:04:40.473]     }
[16:04:40.473]     ...future.frame <- base::sys.nframe()
[16:04:40.473]     ...future.conditions <- base::list()
[16:04:40.473]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.473]     if (FALSE) {
[16:04:40.473]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.473]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.473]     }
[16:04:40.473]     ...future.result <- base::tryCatch({
[16:04:40.473]         base::withCallingHandlers({
[16:04:40.473]             ...future.value <- base::withVisible(base::local({
[16:04:40.473]                 2
[16:04:40.473]             }))
[16:04:40.473]             future::FutureResult(value = ...future.value$value, 
[16:04:40.473]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.473]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.473]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.473]                     ...future.globalenv.names))
[16:04:40.473]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.473]         }, condition = base::local({
[16:04:40.473]             c <- base::c
[16:04:40.473]             inherits <- base::inherits
[16:04:40.473]             invokeRestart <- base::invokeRestart
[16:04:40.473]             length <- base::length
[16:04:40.473]             list <- base::list
[16:04:40.473]             seq.int <- base::seq.int
[16:04:40.473]             signalCondition <- base::signalCondition
[16:04:40.473]             sys.calls <- base::sys.calls
[16:04:40.473]             `[[` <- base::`[[`
[16:04:40.473]             `+` <- base::`+`
[16:04:40.473]             `<<-` <- base::`<<-`
[16:04:40.473]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.473]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.473]                   3L)]
[16:04:40.473]             }
[16:04:40.473]             function(cond) {
[16:04:40.473]                 is_error <- inherits(cond, "error")
[16:04:40.473]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.473]                   NULL)
[16:04:40.473]                 if (is_error) {
[16:04:40.473]                   sessionInformation <- function() {
[16:04:40.473]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.473]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.473]                       search = base::search(), system = base::Sys.info())
[16:04:40.473]                   }
[16:04:40.473]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.473]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.473]                     cond$call), session = sessionInformation(), 
[16:04:40.473]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.473]                   signalCondition(cond)
[16:04:40.473]                 }
[16:04:40.473]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.473]                 "immediateCondition"))) {
[16:04:40.473]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.473]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.473]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.473]                   if (TRUE && !signal) {
[16:04:40.473]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.473]                     {
[16:04:40.473]                       inherits <- base::inherits
[16:04:40.473]                       invokeRestart <- base::invokeRestart
[16:04:40.473]                       is.null <- base::is.null
[16:04:40.473]                       muffled <- FALSE
[16:04:40.473]                       if (inherits(cond, "message")) {
[16:04:40.473]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.473]                         if (muffled) 
[16:04:40.473]                           invokeRestart("muffleMessage")
[16:04:40.473]                       }
[16:04:40.473]                       else if (inherits(cond, "warning")) {
[16:04:40.473]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.473]                         if (muffled) 
[16:04:40.473]                           invokeRestart("muffleWarning")
[16:04:40.473]                       }
[16:04:40.473]                       else if (inherits(cond, "condition")) {
[16:04:40.473]                         if (!is.null(pattern)) {
[16:04:40.473]                           computeRestarts <- base::computeRestarts
[16:04:40.473]                           grepl <- base::grepl
[16:04:40.473]                           restarts <- computeRestarts(cond)
[16:04:40.473]                           for (restart in restarts) {
[16:04:40.473]                             name <- restart$name
[16:04:40.473]                             if (is.null(name)) 
[16:04:40.473]                               next
[16:04:40.473]                             if (!grepl(pattern, name)) 
[16:04:40.473]                               next
[16:04:40.473]                             invokeRestart(restart)
[16:04:40.473]                             muffled <- TRUE
[16:04:40.473]                             break
[16:04:40.473]                           }
[16:04:40.473]                         }
[16:04:40.473]                       }
[16:04:40.473]                       invisible(muffled)
[16:04:40.473]                     }
[16:04:40.473]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.473]                   }
[16:04:40.473]                 }
[16:04:40.473]                 else {
[16:04:40.473]                   if (TRUE) {
[16:04:40.473]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.473]                     {
[16:04:40.473]                       inherits <- base::inherits
[16:04:40.473]                       invokeRestart <- base::invokeRestart
[16:04:40.473]                       is.null <- base::is.null
[16:04:40.473]                       muffled <- FALSE
[16:04:40.473]                       if (inherits(cond, "message")) {
[16:04:40.473]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.473]                         if (muffled) 
[16:04:40.473]                           invokeRestart("muffleMessage")
[16:04:40.473]                       }
[16:04:40.473]                       else if (inherits(cond, "warning")) {
[16:04:40.473]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.473]                         if (muffled) 
[16:04:40.473]                           invokeRestart("muffleWarning")
[16:04:40.473]                       }
[16:04:40.473]                       else if (inherits(cond, "condition")) {
[16:04:40.473]                         if (!is.null(pattern)) {
[16:04:40.473]                           computeRestarts <- base::computeRestarts
[16:04:40.473]                           grepl <- base::grepl
[16:04:40.473]                           restarts <- computeRestarts(cond)
[16:04:40.473]                           for (restart in restarts) {
[16:04:40.473]                             name <- restart$name
[16:04:40.473]                             if (is.null(name)) 
[16:04:40.473]                               next
[16:04:40.473]                             if (!grepl(pattern, name)) 
[16:04:40.473]                               next
[16:04:40.473]                             invokeRestart(restart)
[16:04:40.473]                             muffled <- TRUE
[16:04:40.473]                             break
[16:04:40.473]                           }
[16:04:40.473]                         }
[16:04:40.473]                       }
[16:04:40.473]                       invisible(muffled)
[16:04:40.473]                     }
[16:04:40.473]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.473]                   }
[16:04:40.473]                 }
[16:04:40.473]             }
[16:04:40.473]         }))
[16:04:40.473]     }, error = function(ex) {
[16:04:40.473]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.473]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.473]                 ...future.rng), started = ...future.startTime, 
[16:04:40.473]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.473]             version = "1.8"), class = "FutureResult")
[16:04:40.473]     }, finally = {
[16:04:40.473]         if (!identical(...future.workdir, getwd())) 
[16:04:40.473]             setwd(...future.workdir)
[16:04:40.473]         {
[16:04:40.473]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.473]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.473]             }
[16:04:40.473]             base::options(...future.oldOptions)
[16:04:40.473]             if (.Platform$OS.type == "windows") {
[16:04:40.473]                 old_names <- names(...future.oldEnvVars)
[16:04:40.473]                 envs <- base::Sys.getenv()
[16:04:40.473]                 names <- names(envs)
[16:04:40.473]                 common <- intersect(names, old_names)
[16:04:40.473]                 added <- setdiff(names, old_names)
[16:04:40.473]                 removed <- setdiff(old_names, names)
[16:04:40.473]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.473]                   envs[common]]
[16:04:40.473]                 NAMES <- toupper(changed)
[16:04:40.473]                 args <- list()
[16:04:40.473]                 for (kk in seq_along(NAMES)) {
[16:04:40.473]                   name <- changed[[kk]]
[16:04:40.473]                   NAME <- NAMES[[kk]]
[16:04:40.473]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.473]                     next
[16:04:40.473]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.473]                 }
[16:04:40.473]                 NAMES <- toupper(added)
[16:04:40.473]                 for (kk in seq_along(NAMES)) {
[16:04:40.473]                   name <- added[[kk]]
[16:04:40.473]                   NAME <- NAMES[[kk]]
[16:04:40.473]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.473]                     next
[16:04:40.473]                   args[[name]] <- ""
[16:04:40.473]                 }
[16:04:40.473]                 NAMES <- toupper(removed)
[16:04:40.473]                 for (kk in seq_along(NAMES)) {
[16:04:40.473]                   name <- removed[[kk]]
[16:04:40.473]                   NAME <- NAMES[[kk]]
[16:04:40.473]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.473]                     next
[16:04:40.473]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.473]                 }
[16:04:40.473]                 if (length(args) > 0) 
[16:04:40.473]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.473]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.473]             }
[16:04:40.473]             else {
[16:04:40.473]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.473]             }
[16:04:40.473]             {
[16:04:40.473]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.473]                   0L) {
[16:04:40.473]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.473]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.473]                   base::options(opts)
[16:04:40.473]                 }
[16:04:40.473]                 {
[16:04:40.473]                   {
[16:04:40.473]                     NULL
[16:04:40.473]                     RNGkind("Mersenne-Twister")
[16:04:40.473]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.473]                       inherits = FALSE)
[16:04:40.473]                   }
[16:04:40.473]                   options(future.plan = NULL)
[16:04:40.473]                   if (is.na(NA_character_)) 
[16:04:40.473]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.473]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.473]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.473]                   {
[16:04:40.473]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.473]                     if (!future$lazy) 
[16:04:40.473]                       future <- run(future)
[16:04:40.473]                     invisible(future)
[16:04:40.473]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.473]                 }
[16:04:40.473]             }
[16:04:40.473]         }
[16:04:40.473]     })
[16:04:40.473]     if (TRUE) {
[16:04:40.473]         base::sink(type = "output", split = FALSE)
[16:04:40.473]         if (TRUE) {
[16:04:40.473]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.473]         }
[16:04:40.473]         else {
[16:04:40.473]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.473]         }
[16:04:40.473]         base::close(...future.stdout)
[16:04:40.473]         ...future.stdout <- NULL
[16:04:40.473]     }
[16:04:40.473]     ...future.result$conditions <- ...future.conditions
[16:04:40.473]     ...future.result$finished <- base::Sys.time()
[16:04:40.473]     ...future.result
[16:04:40.473] }
[16:04:40.474] plan(): Setting new future strategy stack:
[16:04:40.474] List of future strategies:
[16:04:40.474] 1. sequential:
[16:04:40.474]    - args: function (..., envir = parent.frame())
[16:04:40.474]    - tweaked: FALSE
[16:04:40.474]    - call: NULL
[16:04:40.475] plan(): nbrOfWorkers() = 1
[16:04:40.475] plan(): Setting new future strategy stack:
[16:04:40.476] List of future strategies:
[16:04:40.476] 1. sequential:
[16:04:40.476]    - args: function (..., envir = parent.frame())
[16:04:40.476]    - tweaked: FALSE
[16:04:40.476]    - call: future::plan("sequential")
[16:04:40.476] plan(): nbrOfWorkers() = 1
[16:04:40.476] SequentialFuture started (and completed)
[16:04:40.476] - Launch lazy future ... done
[16:04:40.476] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[16:04:40.477] getGlobalsAndPackages() ...
[16:04:40.477] Searching for globals...
[16:04:40.477] 
[16:04:40.478] Searching for globals ... DONE
[16:04:40.478] - globals: [0] <none>
[16:04:40.478] getGlobalsAndPackages() ... DONE
[16:04:40.478] run() for ‘Future’ ...
[16:04:40.478] - state: ‘created’
[16:04:40.478] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[16:04:40.478] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[16:04:40.478] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[16:04:40.479]   - Field: ‘label’
[16:04:40.479]   - Field: ‘local’
[16:04:40.479]   - Field: ‘owner’
[16:04:40.479]   - Field: ‘envir’
[16:04:40.479]   - Field: ‘packages’
[16:04:40.479]   - Field: ‘gc’
[16:04:40.479]   - Field: ‘conditions’
[16:04:40.479]   - Field: ‘expr’
[16:04:40.479]   - Field: ‘uuid’
[16:04:40.479]   - Field: ‘seed’
[16:04:40.479]   - Field: ‘version’
[16:04:40.480]   - Field: ‘result’
[16:04:40.480]   - Field: ‘asynchronous’
[16:04:40.480]   - Field: ‘calls’
[16:04:40.480]   - Field: ‘globals’
[16:04:40.480]   - Field: ‘stdout’
[16:04:40.480]   - Field: ‘earlySignal’
[16:04:40.480]   - Field: ‘lazy’
[16:04:40.480]   - Field: ‘state’
[16:04:40.480] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[16:04:40.480] - Launch lazy future ...
[16:04:40.480] Packages needed by the future expression (n = 0): <none>
[16:04:40.481] Packages needed by future strategies (n = 0): <none>
[16:04:40.481] {
[16:04:40.481]     {
[16:04:40.481]         {
[16:04:40.481]             ...future.startTime <- base::Sys.time()
[16:04:40.481]             {
[16:04:40.481]                 {
[16:04:40.481]                   {
[16:04:40.481]                     base::local({
[16:04:40.481]                       has_future <- base::requireNamespace("future", 
[16:04:40.481]                         quietly = TRUE)
[16:04:40.481]                       if (has_future) {
[16:04:40.481]                         ns <- base::getNamespace("future")
[16:04:40.481]                         version <- ns[[".package"]][["version"]]
[16:04:40.481]                         if (is.null(version)) 
[16:04:40.481]                           version <- utils::packageVersion("future")
[16:04:40.481]                       }
[16:04:40.481]                       else {
[16:04:40.481]                         version <- NULL
[16:04:40.481]                       }
[16:04:40.481]                       if (!has_future || version < "1.8.0") {
[16:04:40.481]                         info <- base::c(r_version = base::gsub("R version ", 
[16:04:40.481]                           "", base::R.version$version.string), 
[16:04:40.481]                           platform = base::sprintf("%s (%s-bit)", 
[16:04:40.481]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:04:40.481]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[16:04:40.481]                             "release", "version")], collapse = " "), 
[16:04:40.481]                           hostname = base::Sys.info()[["nodename"]])
[16:04:40.481]                         info <- base::sprintf("%s: %s", base::names(info), 
[16:04:40.481]                           info)
[16:04:40.481]                         info <- base::paste(info, collapse = "; ")
[16:04:40.481]                         if (!has_future) {
[16:04:40.481]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:04:40.481]                             info)
[16:04:40.481]                         }
[16:04:40.481]                         else {
[16:04:40.481]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:04:40.481]                             info, version)
[16:04:40.481]                         }
[16:04:40.481]                         base::stop(msg)
[16:04:40.481]                       }
[16:04:40.481]                     })
[16:04:40.481]                   }
[16:04:40.481]                   options(future.plan = NULL)
[16:04:40.481]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.481]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:04:40.481]                 }
[16:04:40.481]                 ...future.workdir <- getwd()
[16:04:40.481]             }
[16:04:40.481]             ...future.oldOptions <- base::as.list(base::.Options)
[16:04:40.481]             ...future.oldEnvVars <- base::Sys.getenv()
[16:04:40.481]         }
[16:04:40.481]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:04:40.481]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:04:40.481]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:04:40.481]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:04:40.481]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:04:40.481]             future.stdout.windows.reencode = NULL, width = 80L)
[16:04:40.481]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:04:40.481]             base::names(...future.oldOptions))
[16:04:40.481]     }
[16:04:40.481]     if (FALSE) {
[16:04:40.481]     }
[16:04:40.481]     else {
[16:04:40.481]         if (TRUE) {
[16:04:40.481]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:04:40.481]                 open = "w")
[16:04:40.481]         }
[16:04:40.481]         else {
[16:04:40.481]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:04:40.481]                 windows = "NUL", "/dev/null"), open = "w")
[16:04:40.481]         }
[16:04:40.481]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:04:40.481]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:04:40.481]             base::sink(type = "output", split = FALSE)
[16:04:40.481]             base::close(...future.stdout)
[16:04:40.481]         }, add = TRUE)
[16:04:40.481]     }
[16:04:40.481]     ...future.frame <- base::sys.nframe()
[16:04:40.481]     ...future.conditions <- base::list()
[16:04:40.481]     ...future.rng <- base::globalenv()$.Random.seed
[16:04:40.481]     if (FALSE) {
[16:04:40.481]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:04:40.481]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:04:40.481]     }
[16:04:40.481]     ...future.result <- base::tryCatch({
[16:04:40.481]         base::withCallingHandlers({
[16:04:40.481]             ...future.value <- base::withVisible(base::local(1))
[16:04:40.481]             future::FutureResult(value = ...future.value$value, 
[16:04:40.481]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.481]                   ...future.rng), globalenv = if (FALSE) 
[16:04:40.481]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:04:40.481]                     ...future.globalenv.names))
[16:04:40.481]                 else NULL, started = ...future.startTime, version = "1.8")
[16:04:40.481]         }, condition = base::local({
[16:04:40.481]             c <- base::c
[16:04:40.481]             inherits <- base::inherits
[16:04:40.481]             invokeRestart <- base::invokeRestart
[16:04:40.481]             length <- base::length
[16:04:40.481]             list <- base::list
[16:04:40.481]             seq.int <- base::seq.int
[16:04:40.481]             signalCondition <- base::signalCondition
[16:04:40.481]             sys.calls <- base::sys.calls
[16:04:40.481]             `[[` <- base::`[[`
[16:04:40.481]             `+` <- base::`+`
[16:04:40.481]             `<<-` <- base::`<<-`
[16:04:40.481]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:04:40.481]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:04:40.481]                   3L)]
[16:04:40.481]             }
[16:04:40.481]             function(cond) {
[16:04:40.481]                 is_error <- inherits(cond, "error")
[16:04:40.481]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:04:40.481]                   NULL)
[16:04:40.481]                 if (is_error) {
[16:04:40.481]                   sessionInformation <- function() {
[16:04:40.481]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:04:40.481]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:04:40.481]                       search = base::search(), system = base::Sys.info())
[16:04:40.481]                   }
[16:04:40.481]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.481]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:04:40.481]                     cond$call), session = sessionInformation(), 
[16:04:40.481]                     timestamp = base::Sys.time(), signaled = 0L)
[16:04:40.481]                   signalCondition(cond)
[16:04:40.481]                 }
[16:04:40.481]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:04:40.481]                 "immediateCondition"))) {
[16:04:40.481]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:04:40.481]                   ...future.conditions[[length(...future.conditions) + 
[16:04:40.481]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:04:40.481]                   if (TRUE && !signal) {
[16:04:40.481]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.481]                     {
[16:04:40.481]                       inherits <- base::inherits
[16:04:40.481]                       invokeRestart <- base::invokeRestart
[16:04:40.481]                       is.null <- base::is.null
[16:04:40.481]                       muffled <- FALSE
[16:04:40.481]                       if (inherits(cond, "message")) {
[16:04:40.481]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.481]                         if (muffled) 
[16:04:40.481]                           invokeRestart("muffleMessage")
[16:04:40.481]                       }
[16:04:40.481]                       else if (inherits(cond, "warning")) {
[16:04:40.481]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.481]                         if (muffled) 
[16:04:40.481]                           invokeRestart("muffleWarning")
[16:04:40.481]                       }
[16:04:40.481]                       else if (inherits(cond, "condition")) {
[16:04:40.481]                         if (!is.null(pattern)) {
[16:04:40.481]                           computeRestarts <- base::computeRestarts
[16:04:40.481]                           grepl <- base::grepl
[16:04:40.481]                           restarts <- computeRestarts(cond)
[16:04:40.481]                           for (restart in restarts) {
[16:04:40.481]                             name <- restart$name
[16:04:40.481]                             if (is.null(name)) 
[16:04:40.481]                               next
[16:04:40.481]                             if (!grepl(pattern, name)) 
[16:04:40.481]                               next
[16:04:40.481]                             invokeRestart(restart)
[16:04:40.481]                             muffled <- TRUE
[16:04:40.481]                             break
[16:04:40.481]                           }
[16:04:40.481]                         }
[16:04:40.481]                       }
[16:04:40.481]                       invisible(muffled)
[16:04:40.481]                     }
[16:04:40.481]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.481]                   }
[16:04:40.481]                 }
[16:04:40.481]                 else {
[16:04:40.481]                   if (TRUE) {
[16:04:40.481]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:04:40.481]                     {
[16:04:40.481]                       inherits <- base::inherits
[16:04:40.481]                       invokeRestart <- base::invokeRestart
[16:04:40.481]                       is.null <- base::is.null
[16:04:40.481]                       muffled <- FALSE
[16:04:40.481]                       if (inherits(cond, "message")) {
[16:04:40.481]                         muffled <- grepl(pattern, "muffleMessage")
[16:04:40.481]                         if (muffled) 
[16:04:40.481]                           invokeRestart("muffleMessage")
[16:04:40.481]                       }
[16:04:40.481]                       else if (inherits(cond, "warning")) {
[16:04:40.481]                         muffled <- grepl(pattern, "muffleWarning")
[16:04:40.481]                         if (muffled) 
[16:04:40.481]                           invokeRestart("muffleWarning")
[16:04:40.481]                       }
[16:04:40.481]                       else if (inherits(cond, "condition")) {
[16:04:40.481]                         if (!is.null(pattern)) {
[16:04:40.481]                           computeRestarts <- base::computeRestarts
[16:04:40.481]                           grepl <- base::grepl
[16:04:40.481]                           restarts <- computeRestarts(cond)
[16:04:40.481]                           for (restart in restarts) {
[16:04:40.481]                             name <- restart$name
[16:04:40.481]                             if (is.null(name)) 
[16:04:40.481]                               next
[16:04:40.481]                             if (!grepl(pattern, name)) 
[16:04:40.481]                               next
[16:04:40.481]                             invokeRestart(restart)
[16:04:40.481]                             muffled <- TRUE
[16:04:40.481]                             break
[16:04:40.481]                           }
[16:04:40.481]                         }
[16:04:40.481]                       }
[16:04:40.481]                       invisible(muffled)
[16:04:40.481]                     }
[16:04:40.481]                     muffleCondition(cond, pattern = "^muffle")
[16:04:40.481]                   }
[16:04:40.481]                 }
[16:04:40.481]             }
[16:04:40.481]         }))
[16:04:40.481]     }, error = function(ex) {
[16:04:40.481]         base::structure(base::list(value = NULL, visible = NULL, 
[16:04:40.481]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:04:40.481]                 ...future.rng), started = ...future.startTime, 
[16:04:40.481]             finished = Sys.time(), session_uuid = NA_character_, 
[16:04:40.481]             version = "1.8"), class = "FutureResult")
[16:04:40.481]     }, finally = {
[16:04:40.481]         if (!identical(...future.workdir, getwd())) 
[16:04:40.481]             setwd(...future.workdir)
[16:04:40.481]         {
[16:04:40.481]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:04:40.481]                 ...future.oldOptions$nwarnings <- NULL
[16:04:40.481]             }
[16:04:40.481]             base::options(...future.oldOptions)
[16:04:40.481]             if (.Platform$OS.type == "windows") {
[16:04:40.481]                 old_names <- names(...future.oldEnvVars)
[16:04:40.481]                 envs <- base::Sys.getenv()
[16:04:40.481]                 names <- names(envs)
[16:04:40.481]                 common <- intersect(names, old_names)
[16:04:40.481]                 added <- setdiff(names, old_names)
[16:04:40.481]                 removed <- setdiff(old_names, names)
[16:04:40.481]                 changed <- common[...future.oldEnvVars[common] != 
[16:04:40.481]                   envs[common]]
[16:04:40.481]                 NAMES <- toupper(changed)
[16:04:40.481]                 args <- list()
[16:04:40.481]                 for (kk in seq_along(NAMES)) {
[16:04:40.481]                   name <- changed[[kk]]
[16:04:40.481]                   NAME <- NAMES[[kk]]
[16:04:40.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.481]                     next
[16:04:40.481]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.481]                 }
[16:04:40.481]                 NAMES <- toupper(added)
[16:04:40.481]                 for (kk in seq_along(NAMES)) {
[16:04:40.481]                   name <- added[[kk]]
[16:04:40.481]                   NAME <- NAMES[[kk]]
[16:04:40.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.481]                     next
[16:04:40.481]                   args[[name]] <- ""
[16:04:40.481]                 }
[16:04:40.481]                 NAMES <- toupper(removed)
[16:04:40.481]                 for (kk in seq_along(NAMES)) {
[16:04:40.481]                   name <- removed[[kk]]
[16:04:40.481]                   NAME <- NAMES[[kk]]
[16:04:40.481]                   if (name != NAME && is.element(NAME, old_names)) 
[16:04:40.481]                     next
[16:04:40.481]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:04:40.481]                 }
[16:04:40.481]                 if (length(args) > 0) 
[16:04:40.481]                   base::do.call(base::Sys.setenv, args = args)
[16:04:40.481]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:04:40.481]             }
[16:04:40.481]             else {
[16:04:40.481]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:04:40.481]             }
[16:04:40.481]             {
[16:04:40.481]                 if (base::length(...future.futureOptionsAdded) > 
[16:04:40.481]                   0L) {
[16:04:40.481]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:04:40.481]                   base::names(opts) <- ...future.futureOptionsAdded
[16:04:40.481]                   base::options(opts)
[16:04:40.481]                 }
[16:04:40.481]                 {
[16:04:40.481]                   {
[16:04:40.481]                     NULL
[16:04:40.481]                     RNGkind("Mersenne-Twister")
[16:04:40.481]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[16:04:40.481]                       inherits = FALSE)
[16:04:40.481]                   }
[16:04:40.481]                   options(future.plan = NULL)
[16:04:40.481]                   if (is.na(NA_character_)) 
[16:04:40.481]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:04:40.481]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:04:40.481]                   future::plan(list(function (..., envir = parent.frame()) 
[16:04:40.481]                   {
[16:04:40.481]                     future <- SequentialFuture(..., envir = envir)
[16:04:40.481]                     if (!future$lazy) 
[16:04:40.481]                       future <- run(future)
[16:04:40.481]                     invisible(future)
[16:04:40.481]                   }), .cleanup = FALSE, .init = FALSE)
[16:04:40.481]                 }
[16:04:40.481]             }
[16:04:40.481]         }
[16:04:40.481]     })
[16:04:40.481]     if (TRUE) {
[16:04:40.481]         base::sink(type = "output", split = FALSE)
[16:04:40.481]         if (TRUE) {
[16:04:40.481]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:04:40.481]         }
[16:04:40.481]         else {
[16:04:40.481]             ...future.result["stdout"] <- base::list(NULL)
[16:04:40.481]         }
[16:04:40.481]         base::close(...future.stdout)
[16:04:40.481]         ...future.stdout <- NULL
[16:04:40.481]     }
[16:04:40.481]     ...future.result$conditions <- ...future.conditions
[16:04:40.481]     ...future.result$finished <- base::Sys.time()
[16:04:40.481]     ...future.result
[16:04:40.481] }
[16:04:40.483] plan(): Setting new future strategy stack:
[16:04:40.483] List of future strategies:
[16:04:40.483] 1. sequential:
[16:04:40.483]    - args: function (..., envir = parent.frame())
[16:04:40.483]    - tweaked: FALSE
[16:04:40.483]    - call: NULL
[16:04:40.483] plan(): nbrOfWorkers() = 1
[16:04:40.484] plan(): Setting new future strategy stack:
[16:04:40.484] List of future strategies:
[16:04:40.484] 1. sequential:
[16:04:40.484]    - args: function (..., envir = parent.frame())
[16:04:40.484]    - tweaked: FALSE
[16:04:40.484]    - call: future::plan("sequential")
[16:04:40.484] plan(): nbrOfWorkers() = 1
[16:04:40.484] SequentialFuture started (and completed)
[16:04:40.484] - Launch lazy future ... done
[16:04:40.485] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 56 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: b4927c6b-551d-9262-3056-418bc1fda2f7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[16:04:40.485] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[16:04:40.486] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[16:04:40.486] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[16:04:40.487] plan(): Setting new future strategy stack:
[16:04:40.487] List of future strategies:
[16:04:40.487] 1. FutureStrategy:
[16:04:40.487]    - args: function (..., envir = parent.frame())
[16:04:40.487]    - tweaked: FALSE
[16:04:40.487]    - call: future::plan(oplan)
[16:04:40.498] plan(): nbrOfWorkers() = 1
> 
