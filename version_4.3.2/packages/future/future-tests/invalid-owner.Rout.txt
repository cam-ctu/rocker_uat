
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[16:05:16.227] plan(): Setting new future strategy stack:
[16:05:16.227] List of future strategies:
[16:05:16.227] 1. sequential:
[16:05:16.227]    - args: function (..., envir = parent.frame())
[16:05:16.227]    - tweaked: FALSE
[16:05:16.227]    - call: future::plan("sequential")
[16:05:16.241] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[16:05:16.253] plan(): Setting new future strategy stack:
[16:05:16.254] List of future strategies:
[16:05:16.254] 1. multisession:
[16:05:16.254]    - args: function (..., workers = 2L, envir = parent.frame())
[16:05:16.254]    - tweaked: TRUE
[16:05:16.254]    - call: plan(multisession, workers = 2L)
[16:05:16.264] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[16:05:16.264] multisession:
[16:05:16.264] - args: function (..., workers = 2L, envir = parent.frame())
[16:05:16.264] - tweaked: TRUE
[16:05:16.264] - call: plan(multisession, workers = 2L)
[16:05:16.266] getGlobalsAndPackages() ...
[16:05:16.266] Not searching for globals
[16:05:16.266] - globals: [0] <none>
[16:05:16.266] getGlobalsAndPackages() ... DONE
[16:05:16.267] [local output] makeClusterPSOCK() ...
[16:05:16.296] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[16:05:16.298] [local output] Base port: 11027
[16:05:16.298] [local output] Getting setup options for 2 cluster nodes ...
[16:05:16.298] [local output]  - Node 1 of 2 ...
[16:05:16.298] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:16.299] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptrY0lN/worker.rank=1.parallelly.parent=86725.152c54be0174d.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmptrY0lN/worker.rank=1.parallelly.parent=86725.152c54be0174d.pid")'’
[16:05:16.487] - Possible to infer worker's PID: TRUE
[16:05:16.488] [local output] Rscript port: 11027

[16:05:16.488] [local output]  - Node 2 of 2 ...
[16:05:16.488] [local output] localMachine=TRUE => revtunnel=FALSE

[16:05:16.489] [local output] Rscript port: 11027

[16:05:16.489] [local output] Getting setup options for 2 cluster nodes ... done
[16:05:16.489] [local output]  - Parallel setup requested for some PSOCK nodes
[16:05:16.490] [local output] Setting up PSOCK nodes in parallel
[16:05:16.490] List of 36
[16:05:16.490]  $ worker          : chr "localhost"
[16:05:16.490]   ..- attr(*, "localhost")= logi TRUE
[16:05:16.490]  $ master          : chr "localhost"
[16:05:16.490]  $ port            : int 11027
[16:05:16.490]  $ connectTimeout  : num 120
[16:05:16.490]  $ timeout         : num 2592000
[16:05:16.490]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[16:05:16.490]  $ homogeneous     : logi TRUE
[16:05:16.490]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[16:05:16.490]  $ rscript_envs    : NULL
[16:05:16.490]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:16.490]  $ rscript_startup : NULL
[16:05:16.490]  $ rscript_sh      : chr "sh"
[16:05:16.490]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:16.490]  $ methods         : logi TRUE
[16:05:16.490]  $ socketOptions   : chr "no-delay"
[16:05:16.490]  $ useXDR          : logi FALSE
[16:05:16.490]  $ outfile         : chr "/dev/null"
[16:05:16.490]  $ renice          : int NA
[16:05:16.490]  $ rshcmd          : NULL
[16:05:16.490]  $ user            : chr(0) 
[16:05:16.490]  $ revtunnel       : logi FALSE
[16:05:16.490]  $ rshlogfile      : NULL
[16:05:16.490]  $ rshopts         : chr(0) 
[16:05:16.490]  $ rank            : int 1
[16:05:16.490]  $ manual          : logi FALSE
[16:05:16.490]  $ dryrun          : logi FALSE
[16:05:16.490]  $ quiet           : logi FALSE
[16:05:16.490]  $ setup_strategy  : chr "parallel"
[16:05:16.490]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:16.490]  $ pidfile         : chr "/tmp/RtmptrY0lN/worker.rank=1.parallelly.parent=86725.152c54be0174d.pid"
[16:05:16.490]  $ rshcmd_label    : NULL
[16:05:16.490]  $ rsh_call        : NULL
[16:05:16.490]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[16:05:16.490]  $ localMachine    : logi TRUE
[16:05:16.490]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[16:05:16.490]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[16:05:16.490]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[16:05:16.490]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[16:05:16.490]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[16:05:16.490]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[16:05:16.490]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[16:05:16.490]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[16:05:16.490]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[16:05:16.490]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[16:05:16.490]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[16:05:16.490]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[16:05:16.490]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[16:05:16.490]  $ arguments       :List of 28
[16:05:16.490]   ..$ worker          : chr "localhost"
[16:05:16.490]   ..$ master          : NULL
[16:05:16.490]   ..$ port            : int 11027
[16:05:16.490]   ..$ connectTimeout  : num 120
[16:05:16.490]   ..$ timeout         : num 2592000
[16:05:16.490]   ..$ rscript         : NULL
[16:05:16.490]   ..$ homogeneous     : NULL
[16:05:16.490]   ..$ rscript_args    : NULL
[16:05:16.490]   ..$ rscript_envs    : NULL
[16:05:16.490]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[16:05:16.490]   ..$ rscript_startup : NULL
[16:05:16.490]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[16:05:16.490]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[16:05:16.490]   ..$ methods         : logi TRUE
[16:05:16.490]   ..$ socketOptions   : chr "no-delay"
[16:05:16.490]   ..$ useXDR          : logi FALSE
[16:05:16.490]   ..$ outfile         : chr "/dev/null"
[16:05:16.490]   ..$ renice          : int NA
[16:05:16.490]   ..$ rshcmd          : NULL
[16:05:16.490]   ..$ user            : NULL
[16:05:16.490]   ..$ revtunnel       : logi NA
[16:05:16.490]   ..$ rshlogfile      : NULL
[16:05:16.490]   ..$ rshopts         : NULL
[16:05:16.490]   ..$ rank            : int 1
[16:05:16.490]   ..$ manual          : logi FALSE
[16:05:16.490]   ..$ dryrun          : logi FALSE
[16:05:16.490]   ..$ quiet           : logi FALSE
[16:05:16.490]   ..$ setup_strategy  : chr "parallel"
[16:05:16.490]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[16:05:16.509] [local output] System call to launch all workers:
[16:05:16.509] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmptrY0lN/worker.rank=1.parallelly.parent=86725.152c54be0174d.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11027 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[16:05:16.509] [local output] Starting PSOCK main server
[16:05:16.515] [local output] Workers launched
[16:05:16.515] [local output] Waiting for workers to connect back
[16:05:16.515]  - [local output] 0 workers out of 2 ready
[16:05:16.784]  - [local output] 0 workers out of 2 ready
[16:05:16.785]  - [local output] 1 workers out of 2 ready
[16:05:16.785]  - [local output] 2 workers out of 2 ready
[16:05:16.785] [local output] Launching of workers completed
[16:05:16.785] [local output] Collecting session information from workers
[16:05:16.786] [local output]  - Worker #1 of 2
[16:05:16.787] [local output]  - Worker #2 of 2
[16:05:16.787] [local output] makeClusterPSOCK() ... done
[16:05:16.800] Packages needed by the future expression (n = 0): <none>
[16:05:16.800] Packages needed by future strategies (n = 0): <none>
[16:05:16.801] {
[16:05:16.801]     {
[16:05:16.801]         {
[16:05:16.801]             ...future.startTime <- base::Sys.time()
[16:05:16.801]             {
[16:05:16.801]                 {
[16:05:16.801]                   {
[16:05:16.801]                     {
[16:05:16.801]                       base::local({
[16:05:16.801]                         has_future <- base::requireNamespace("future", 
[16:05:16.801]                           quietly = TRUE)
[16:05:16.801]                         if (has_future) {
[16:05:16.801]                           ns <- base::getNamespace("future")
[16:05:16.801]                           version <- ns[[".package"]][["version"]]
[16:05:16.801]                           if (is.null(version)) 
[16:05:16.801]                             version <- utils::packageVersion("future")
[16:05:16.801]                         }
[16:05:16.801]                         else {
[16:05:16.801]                           version <- NULL
[16:05:16.801]                         }
[16:05:16.801]                         if (!has_future || version < "1.8.0") {
[16:05:16.801]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:16.801]                             "", base::R.version$version.string), 
[16:05:16.801]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:16.801]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:16.801]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:16.801]                               "release", "version")], collapse = " "), 
[16:05:16.801]                             hostname = base::Sys.info()[["nodename"]])
[16:05:16.801]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:16.801]                             info)
[16:05:16.801]                           info <- base::paste(info, collapse = "; ")
[16:05:16.801]                           if (!has_future) {
[16:05:16.801]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:16.801]                               info)
[16:05:16.801]                           }
[16:05:16.801]                           else {
[16:05:16.801]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:16.801]                               info, version)
[16:05:16.801]                           }
[16:05:16.801]                           base::stop(msg)
[16:05:16.801]                         }
[16:05:16.801]                       })
[16:05:16.801]                     }
[16:05:16.801]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:16.801]                     base::options(mc.cores = 1L)
[16:05:16.801]                   }
[16:05:16.801]                   options(future.plan = NULL)
[16:05:16.801]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.801]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:16.801]                 }
[16:05:16.801]                 ...future.workdir <- getwd()
[16:05:16.801]             }
[16:05:16.801]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:16.801]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:16.801]         }
[16:05:16.801]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:16.801]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:16.801]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:16.801]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:16.801]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:16.801]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:16.801]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:16.801]             base::names(...future.oldOptions))
[16:05:16.801]     }
[16:05:16.801]     if (FALSE) {
[16:05:16.801]     }
[16:05:16.801]     else {
[16:05:16.801]         if (TRUE) {
[16:05:16.801]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:16.801]                 open = "w")
[16:05:16.801]         }
[16:05:16.801]         else {
[16:05:16.801]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:16.801]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:16.801]         }
[16:05:16.801]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:16.801]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:16.801]             base::sink(type = "output", split = FALSE)
[16:05:16.801]             base::close(...future.stdout)
[16:05:16.801]         }, add = TRUE)
[16:05:16.801]     }
[16:05:16.801]     ...future.frame <- base::sys.nframe()
[16:05:16.801]     ...future.conditions <- base::list()
[16:05:16.801]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:16.801]     if (FALSE) {
[16:05:16.801]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:16.801]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:16.801]     }
[16:05:16.801]     ...future.result <- base::tryCatch({
[16:05:16.801]         base::withCallingHandlers({
[16:05:16.801]             ...future.value <- base::withVisible(base::local({
[16:05:16.801]                 ...future.makeSendCondition <- base::local({
[16:05:16.801]                   sendCondition <- NULL
[16:05:16.801]                   function(frame = 1L) {
[16:05:16.801]                     if (is.function(sendCondition)) 
[16:05:16.801]                       return(sendCondition)
[16:05:16.801]                     ns <- getNamespace("parallel")
[16:05:16.801]                     if (exists("sendData", mode = "function", 
[16:05:16.801]                       envir = ns)) {
[16:05:16.801]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:16.801]                         envir = ns)
[16:05:16.801]                       envir <- sys.frame(frame)
[16:05:16.801]                       master <- NULL
[16:05:16.801]                       while (!identical(envir, .GlobalEnv) && 
[16:05:16.801]                         !identical(envir, emptyenv())) {
[16:05:16.801]                         if (exists("master", mode = "list", envir = envir, 
[16:05:16.801]                           inherits = FALSE)) {
[16:05:16.801]                           master <- get("master", mode = "list", 
[16:05:16.801]                             envir = envir, inherits = FALSE)
[16:05:16.801]                           if (inherits(master, c("SOCKnode", 
[16:05:16.801]                             "SOCK0node"))) {
[16:05:16.801]                             sendCondition <<- function(cond) {
[16:05:16.801]                               data <- list(type = "VALUE", value = cond, 
[16:05:16.801]                                 success = TRUE)
[16:05:16.801]                               parallel_sendData(master, data)
[16:05:16.801]                             }
[16:05:16.801]                             return(sendCondition)
[16:05:16.801]                           }
[16:05:16.801]                         }
[16:05:16.801]                         frame <- frame + 1L
[16:05:16.801]                         envir <- sys.frame(frame)
[16:05:16.801]                       }
[16:05:16.801]                     }
[16:05:16.801]                     sendCondition <<- function(cond) NULL
[16:05:16.801]                   }
[16:05:16.801]                 })
[16:05:16.801]                 withCallingHandlers({
[16:05:16.801]                   NA
[16:05:16.801]                 }, immediateCondition = function(cond) {
[16:05:16.801]                   sendCondition <- ...future.makeSendCondition()
[16:05:16.801]                   sendCondition(cond)
[16:05:16.801]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.801]                   {
[16:05:16.801]                     inherits <- base::inherits
[16:05:16.801]                     invokeRestart <- base::invokeRestart
[16:05:16.801]                     is.null <- base::is.null
[16:05:16.801]                     muffled <- FALSE
[16:05:16.801]                     if (inherits(cond, "message")) {
[16:05:16.801]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:16.801]                       if (muffled) 
[16:05:16.801]                         invokeRestart("muffleMessage")
[16:05:16.801]                     }
[16:05:16.801]                     else if (inherits(cond, "warning")) {
[16:05:16.801]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:16.801]                       if (muffled) 
[16:05:16.801]                         invokeRestart("muffleWarning")
[16:05:16.801]                     }
[16:05:16.801]                     else if (inherits(cond, "condition")) {
[16:05:16.801]                       if (!is.null(pattern)) {
[16:05:16.801]                         computeRestarts <- base::computeRestarts
[16:05:16.801]                         grepl <- base::grepl
[16:05:16.801]                         restarts <- computeRestarts(cond)
[16:05:16.801]                         for (restart in restarts) {
[16:05:16.801]                           name <- restart$name
[16:05:16.801]                           if (is.null(name)) 
[16:05:16.801]                             next
[16:05:16.801]                           if (!grepl(pattern, name)) 
[16:05:16.801]                             next
[16:05:16.801]                           invokeRestart(restart)
[16:05:16.801]                           muffled <- TRUE
[16:05:16.801]                           break
[16:05:16.801]                         }
[16:05:16.801]                       }
[16:05:16.801]                     }
[16:05:16.801]                     invisible(muffled)
[16:05:16.801]                   }
[16:05:16.801]                   muffleCondition(cond)
[16:05:16.801]                 })
[16:05:16.801]             }))
[16:05:16.801]             future::FutureResult(value = ...future.value$value, 
[16:05:16.801]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.801]                   ...future.rng), globalenv = if (FALSE) 
[16:05:16.801]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:16.801]                     ...future.globalenv.names))
[16:05:16.801]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:16.801]         }, condition = base::local({
[16:05:16.801]             c <- base::c
[16:05:16.801]             inherits <- base::inherits
[16:05:16.801]             invokeRestart <- base::invokeRestart
[16:05:16.801]             length <- base::length
[16:05:16.801]             list <- base::list
[16:05:16.801]             seq.int <- base::seq.int
[16:05:16.801]             signalCondition <- base::signalCondition
[16:05:16.801]             sys.calls <- base::sys.calls
[16:05:16.801]             `[[` <- base::`[[`
[16:05:16.801]             `+` <- base::`+`
[16:05:16.801]             `<<-` <- base::`<<-`
[16:05:16.801]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:16.801]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:16.801]                   3L)]
[16:05:16.801]             }
[16:05:16.801]             function(cond) {
[16:05:16.801]                 is_error <- inherits(cond, "error")
[16:05:16.801]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:16.801]                   NULL)
[16:05:16.801]                 if (is_error) {
[16:05:16.801]                   sessionInformation <- function() {
[16:05:16.801]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:16.801]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:16.801]                       search = base::search(), system = base::Sys.info())
[16:05:16.801]                   }
[16:05:16.801]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.801]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:16.801]                     cond$call), session = sessionInformation(), 
[16:05:16.801]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:16.801]                   signalCondition(cond)
[16:05:16.801]                 }
[16:05:16.801]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:16.801]                 "immediateCondition"))) {
[16:05:16.801]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:16.801]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.801]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:16.801]                   if (TRUE && !signal) {
[16:05:16.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.801]                     {
[16:05:16.801]                       inherits <- base::inherits
[16:05:16.801]                       invokeRestart <- base::invokeRestart
[16:05:16.801]                       is.null <- base::is.null
[16:05:16.801]                       muffled <- FALSE
[16:05:16.801]                       if (inherits(cond, "message")) {
[16:05:16.801]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.801]                         if (muffled) 
[16:05:16.801]                           invokeRestart("muffleMessage")
[16:05:16.801]                       }
[16:05:16.801]                       else if (inherits(cond, "warning")) {
[16:05:16.801]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.801]                         if (muffled) 
[16:05:16.801]                           invokeRestart("muffleWarning")
[16:05:16.801]                       }
[16:05:16.801]                       else if (inherits(cond, "condition")) {
[16:05:16.801]                         if (!is.null(pattern)) {
[16:05:16.801]                           computeRestarts <- base::computeRestarts
[16:05:16.801]                           grepl <- base::grepl
[16:05:16.801]                           restarts <- computeRestarts(cond)
[16:05:16.801]                           for (restart in restarts) {
[16:05:16.801]                             name <- restart$name
[16:05:16.801]                             if (is.null(name)) 
[16:05:16.801]                               next
[16:05:16.801]                             if (!grepl(pattern, name)) 
[16:05:16.801]                               next
[16:05:16.801]                             invokeRestart(restart)
[16:05:16.801]                             muffled <- TRUE
[16:05:16.801]                             break
[16:05:16.801]                           }
[16:05:16.801]                         }
[16:05:16.801]                       }
[16:05:16.801]                       invisible(muffled)
[16:05:16.801]                     }
[16:05:16.801]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.801]                   }
[16:05:16.801]                 }
[16:05:16.801]                 else {
[16:05:16.801]                   if (TRUE) {
[16:05:16.801]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.801]                     {
[16:05:16.801]                       inherits <- base::inherits
[16:05:16.801]                       invokeRestart <- base::invokeRestart
[16:05:16.801]                       is.null <- base::is.null
[16:05:16.801]                       muffled <- FALSE
[16:05:16.801]                       if (inherits(cond, "message")) {
[16:05:16.801]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.801]                         if (muffled) 
[16:05:16.801]                           invokeRestart("muffleMessage")
[16:05:16.801]                       }
[16:05:16.801]                       else if (inherits(cond, "warning")) {
[16:05:16.801]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.801]                         if (muffled) 
[16:05:16.801]                           invokeRestart("muffleWarning")
[16:05:16.801]                       }
[16:05:16.801]                       else if (inherits(cond, "condition")) {
[16:05:16.801]                         if (!is.null(pattern)) {
[16:05:16.801]                           computeRestarts <- base::computeRestarts
[16:05:16.801]                           grepl <- base::grepl
[16:05:16.801]                           restarts <- computeRestarts(cond)
[16:05:16.801]                           for (restart in restarts) {
[16:05:16.801]                             name <- restart$name
[16:05:16.801]                             if (is.null(name)) 
[16:05:16.801]                               next
[16:05:16.801]                             if (!grepl(pattern, name)) 
[16:05:16.801]                               next
[16:05:16.801]                             invokeRestart(restart)
[16:05:16.801]                             muffled <- TRUE
[16:05:16.801]                             break
[16:05:16.801]                           }
[16:05:16.801]                         }
[16:05:16.801]                       }
[16:05:16.801]                       invisible(muffled)
[16:05:16.801]                     }
[16:05:16.801]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.801]                   }
[16:05:16.801]                 }
[16:05:16.801]             }
[16:05:16.801]         }))
[16:05:16.801]     }, error = function(ex) {
[16:05:16.801]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:16.801]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.801]                 ...future.rng), started = ...future.startTime, 
[16:05:16.801]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:16.801]             version = "1.8"), class = "FutureResult")
[16:05:16.801]     }, finally = {
[16:05:16.801]         if (!identical(...future.workdir, getwd())) 
[16:05:16.801]             setwd(...future.workdir)
[16:05:16.801]         {
[16:05:16.801]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:16.801]                 ...future.oldOptions$nwarnings <- NULL
[16:05:16.801]             }
[16:05:16.801]             base::options(...future.oldOptions)
[16:05:16.801]             if (.Platform$OS.type == "windows") {
[16:05:16.801]                 old_names <- names(...future.oldEnvVars)
[16:05:16.801]                 envs <- base::Sys.getenv()
[16:05:16.801]                 names <- names(envs)
[16:05:16.801]                 common <- intersect(names, old_names)
[16:05:16.801]                 added <- setdiff(names, old_names)
[16:05:16.801]                 removed <- setdiff(old_names, names)
[16:05:16.801]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:16.801]                   envs[common]]
[16:05:16.801]                 NAMES <- toupper(changed)
[16:05:16.801]                 args <- list()
[16:05:16.801]                 for (kk in seq_along(NAMES)) {
[16:05:16.801]                   name <- changed[[kk]]
[16:05:16.801]                   NAME <- NAMES[[kk]]
[16:05:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.801]                     next
[16:05:16.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.801]                 }
[16:05:16.801]                 NAMES <- toupper(added)
[16:05:16.801]                 for (kk in seq_along(NAMES)) {
[16:05:16.801]                   name <- added[[kk]]
[16:05:16.801]                   NAME <- NAMES[[kk]]
[16:05:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.801]                     next
[16:05:16.801]                   args[[name]] <- ""
[16:05:16.801]                 }
[16:05:16.801]                 NAMES <- toupper(removed)
[16:05:16.801]                 for (kk in seq_along(NAMES)) {
[16:05:16.801]                   name <- removed[[kk]]
[16:05:16.801]                   NAME <- NAMES[[kk]]
[16:05:16.801]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.801]                     next
[16:05:16.801]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.801]                 }
[16:05:16.801]                 if (length(args) > 0) 
[16:05:16.801]                   base::do.call(base::Sys.setenv, args = args)
[16:05:16.801]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:16.801]             }
[16:05:16.801]             else {
[16:05:16.801]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:16.801]             }
[16:05:16.801]             {
[16:05:16.801]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:16.801]                   0L) {
[16:05:16.801]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:16.801]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:16.801]                   base::options(opts)
[16:05:16.801]                 }
[16:05:16.801]                 {
[16:05:16.801]                   {
[16:05:16.801]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:16.801]                     NULL
[16:05:16.801]                   }
[16:05:16.801]                   options(future.plan = NULL)
[16:05:16.801]                   if (is.na(NA_character_)) 
[16:05:16.801]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.801]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:16.801]                   future::plan(list(function (..., workers = 2L, 
[16:05:16.801]                     envir = parent.frame()) 
[16:05:16.801]                   strategy(..., workers = workers, envir = envir)), 
[16:05:16.801]                     .cleanup = FALSE, .init = FALSE)
[16:05:16.801]                 }
[16:05:16.801]             }
[16:05:16.801]         }
[16:05:16.801]     })
[16:05:16.801]     if (TRUE) {
[16:05:16.801]         base::sink(type = "output", split = FALSE)
[16:05:16.801]         if (TRUE) {
[16:05:16.801]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:16.801]         }
[16:05:16.801]         else {
[16:05:16.801]             ...future.result["stdout"] <- base::list(NULL)
[16:05:16.801]         }
[16:05:16.801]         base::close(...future.stdout)
[16:05:16.801]         ...future.stdout <- NULL
[16:05:16.801]     }
[16:05:16.801]     ...future.result$conditions <- ...future.conditions
[16:05:16.801]     ...future.result$finished <- base::Sys.time()
[16:05:16.801]     ...future.result
[16:05:16.801] }
[16:05:16.855] MultisessionFuture started
[16:05:16.855] result() for ClusterFuture ...
[16:05:16.856] receiveMessageFromWorker() for ClusterFuture ...
[16:05:16.856] - Validating connection of MultisessionFuture
[16:05:16.888] - received message: FutureResult
[16:05:16.888] - Received FutureResult
[16:05:16.891] - Erased future from FutureRegistry
[16:05:16.892] result() for ClusterFuture ...
[16:05:16.892] - result already collected: FutureResult
[16:05:16.892] result() for ClusterFuture ... done
[16:05:16.892] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:16.892] result() for ClusterFuture ... done
[16:05:16.892] result() for ClusterFuture ...
[16:05:16.892] - result already collected: FutureResult
[16:05:16.893] result() for ClusterFuture ... done
[16:05:16.893] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[16:05:16.893] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 28c28227-32ac-d9ee-1c8b-2c6b7a9a5132
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[16:05:16.894] getGlobalsAndPackages() ...
[16:05:16.894] Searching for globals...
[16:05:16.902] - globals found: [2] ‘{’, ‘:::’
[16:05:16.902] Searching for globals ... DONE
[16:05:16.902] Resolving globals: FALSE
[16:05:16.903] 
[16:05:16.903] 
[16:05:16.903] getGlobalsAndPackages() ... DONE
[16:05:16.903] run() for ‘Future’ ...
[16:05:16.903] - state: ‘created’
[16:05:16.904] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:16.915] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:16.915] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:16.915]   - Field: ‘node’
[16:05:16.915]   - Field: ‘label’
[16:05:16.915]   - Field: ‘local’
[16:05:16.915]   - Field: ‘owner’
[16:05:16.915]   - Field: ‘envir’
[16:05:16.915]   - Field: ‘workers’
[16:05:16.916]   - Field: ‘packages’
[16:05:16.916]   - Field: ‘gc’
[16:05:16.916]   - Field: ‘conditions’
[16:05:16.916]   - Field: ‘persistent’
[16:05:16.916]   - Field: ‘expr’
[16:05:16.916]   - Field: ‘uuid’
[16:05:16.916]   - Field: ‘seed’
[16:05:16.916]   - Field: ‘version’
[16:05:16.916]   - Field: ‘result’
[16:05:16.917]   - Field: ‘asynchronous’
[16:05:16.917]   - Field: ‘calls’
[16:05:16.917]   - Field: ‘globals’
[16:05:16.917]   - Field: ‘stdout’
[16:05:16.917]   - Field: ‘earlySignal’
[16:05:16.917]   - Field: ‘lazy’
[16:05:16.917]   - Field: ‘state’
[16:05:16.917] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:16.918] - Launch lazy future ...
[16:05:16.918] Packages needed by the future expression (n = 0): <none>
[16:05:16.918] Packages needed by future strategies (n = 0): <none>
[16:05:16.919] {
[16:05:16.919]     {
[16:05:16.919]         {
[16:05:16.919]             ...future.startTime <- base::Sys.time()
[16:05:16.919]             {
[16:05:16.919]                 {
[16:05:16.919]                   {
[16:05:16.919]                     {
[16:05:16.919]                       base::local({
[16:05:16.919]                         has_future <- base::requireNamespace("future", 
[16:05:16.919]                           quietly = TRUE)
[16:05:16.919]                         if (has_future) {
[16:05:16.919]                           ns <- base::getNamespace("future")
[16:05:16.919]                           version <- ns[[".package"]][["version"]]
[16:05:16.919]                           if (is.null(version)) 
[16:05:16.919]                             version <- utils::packageVersion("future")
[16:05:16.919]                         }
[16:05:16.919]                         else {
[16:05:16.919]                           version <- NULL
[16:05:16.919]                         }
[16:05:16.919]                         if (!has_future || version < "1.8.0") {
[16:05:16.919]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:16.919]                             "", base::R.version$version.string), 
[16:05:16.919]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:16.919]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:16.919]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:16.919]                               "release", "version")], collapse = " "), 
[16:05:16.919]                             hostname = base::Sys.info()[["nodename"]])
[16:05:16.919]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:16.919]                             info)
[16:05:16.919]                           info <- base::paste(info, collapse = "; ")
[16:05:16.919]                           if (!has_future) {
[16:05:16.919]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:16.919]                               info)
[16:05:16.919]                           }
[16:05:16.919]                           else {
[16:05:16.919]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:16.919]                               info, version)
[16:05:16.919]                           }
[16:05:16.919]                           base::stop(msg)
[16:05:16.919]                         }
[16:05:16.919]                       })
[16:05:16.919]                     }
[16:05:16.919]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:16.919]                     base::options(mc.cores = 1L)
[16:05:16.919]                   }
[16:05:16.919]                   options(future.plan = NULL)
[16:05:16.919]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.919]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:16.919]                 }
[16:05:16.919]                 ...future.workdir <- getwd()
[16:05:16.919]             }
[16:05:16.919]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:16.919]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:16.919]         }
[16:05:16.919]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:16.919]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:16.919]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:16.919]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:16.919]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:16.919]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:16.919]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:16.919]             base::names(...future.oldOptions))
[16:05:16.919]     }
[16:05:16.919]     if (FALSE) {
[16:05:16.919]     }
[16:05:16.919]     else {
[16:05:16.919]         if (TRUE) {
[16:05:16.919]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:16.919]                 open = "w")
[16:05:16.919]         }
[16:05:16.919]         else {
[16:05:16.919]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:16.919]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:16.919]         }
[16:05:16.919]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:16.919]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:16.919]             base::sink(type = "output", split = FALSE)
[16:05:16.919]             base::close(...future.stdout)
[16:05:16.919]         }, add = TRUE)
[16:05:16.919]     }
[16:05:16.919]     ...future.frame <- base::sys.nframe()
[16:05:16.919]     ...future.conditions <- base::list()
[16:05:16.919]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:16.919]     if (FALSE) {
[16:05:16.919]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:16.919]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:16.919]     }
[16:05:16.919]     ...future.result <- base::tryCatch({
[16:05:16.919]         base::withCallingHandlers({
[16:05:16.919]             ...future.value <- base::withVisible(base::local({
[16:05:16.919]                 ...future.makeSendCondition <- base::local({
[16:05:16.919]                   sendCondition <- NULL
[16:05:16.919]                   function(frame = 1L) {
[16:05:16.919]                     if (is.function(sendCondition)) 
[16:05:16.919]                       return(sendCondition)
[16:05:16.919]                     ns <- getNamespace("parallel")
[16:05:16.919]                     if (exists("sendData", mode = "function", 
[16:05:16.919]                       envir = ns)) {
[16:05:16.919]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:16.919]                         envir = ns)
[16:05:16.919]                       envir <- sys.frame(frame)
[16:05:16.919]                       master <- NULL
[16:05:16.919]                       while (!identical(envir, .GlobalEnv) && 
[16:05:16.919]                         !identical(envir, emptyenv())) {
[16:05:16.919]                         if (exists("master", mode = "list", envir = envir, 
[16:05:16.919]                           inherits = FALSE)) {
[16:05:16.919]                           master <- get("master", mode = "list", 
[16:05:16.919]                             envir = envir, inherits = FALSE)
[16:05:16.919]                           if (inherits(master, c("SOCKnode", 
[16:05:16.919]                             "SOCK0node"))) {
[16:05:16.919]                             sendCondition <<- function(cond) {
[16:05:16.919]                               data <- list(type = "VALUE", value = cond, 
[16:05:16.919]                                 success = TRUE)
[16:05:16.919]                               parallel_sendData(master, data)
[16:05:16.919]                             }
[16:05:16.919]                             return(sendCondition)
[16:05:16.919]                           }
[16:05:16.919]                         }
[16:05:16.919]                         frame <- frame + 1L
[16:05:16.919]                         envir <- sys.frame(frame)
[16:05:16.919]                       }
[16:05:16.919]                     }
[16:05:16.919]                     sendCondition <<- function(cond) NULL
[16:05:16.919]                   }
[16:05:16.919]                 })
[16:05:16.919]                 withCallingHandlers({
[16:05:16.919]                   {
[16:05:16.919]                     future:::session_uuid(attributes = TRUE)
[16:05:16.919]                   }
[16:05:16.919]                 }, immediateCondition = function(cond) {
[16:05:16.919]                   sendCondition <- ...future.makeSendCondition()
[16:05:16.919]                   sendCondition(cond)
[16:05:16.919]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.919]                   {
[16:05:16.919]                     inherits <- base::inherits
[16:05:16.919]                     invokeRestart <- base::invokeRestart
[16:05:16.919]                     is.null <- base::is.null
[16:05:16.919]                     muffled <- FALSE
[16:05:16.919]                     if (inherits(cond, "message")) {
[16:05:16.919]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:16.919]                       if (muffled) 
[16:05:16.919]                         invokeRestart("muffleMessage")
[16:05:16.919]                     }
[16:05:16.919]                     else if (inherits(cond, "warning")) {
[16:05:16.919]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:16.919]                       if (muffled) 
[16:05:16.919]                         invokeRestart("muffleWarning")
[16:05:16.919]                     }
[16:05:16.919]                     else if (inherits(cond, "condition")) {
[16:05:16.919]                       if (!is.null(pattern)) {
[16:05:16.919]                         computeRestarts <- base::computeRestarts
[16:05:16.919]                         grepl <- base::grepl
[16:05:16.919]                         restarts <- computeRestarts(cond)
[16:05:16.919]                         for (restart in restarts) {
[16:05:16.919]                           name <- restart$name
[16:05:16.919]                           if (is.null(name)) 
[16:05:16.919]                             next
[16:05:16.919]                           if (!grepl(pattern, name)) 
[16:05:16.919]                             next
[16:05:16.919]                           invokeRestart(restart)
[16:05:16.919]                           muffled <- TRUE
[16:05:16.919]                           break
[16:05:16.919]                         }
[16:05:16.919]                       }
[16:05:16.919]                     }
[16:05:16.919]                     invisible(muffled)
[16:05:16.919]                   }
[16:05:16.919]                   muffleCondition(cond)
[16:05:16.919]                 })
[16:05:16.919]             }))
[16:05:16.919]             future::FutureResult(value = ...future.value$value, 
[16:05:16.919]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.919]                   ...future.rng), globalenv = if (FALSE) 
[16:05:16.919]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:16.919]                     ...future.globalenv.names))
[16:05:16.919]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:16.919]         }, condition = base::local({
[16:05:16.919]             c <- base::c
[16:05:16.919]             inherits <- base::inherits
[16:05:16.919]             invokeRestart <- base::invokeRestart
[16:05:16.919]             length <- base::length
[16:05:16.919]             list <- base::list
[16:05:16.919]             seq.int <- base::seq.int
[16:05:16.919]             signalCondition <- base::signalCondition
[16:05:16.919]             sys.calls <- base::sys.calls
[16:05:16.919]             `[[` <- base::`[[`
[16:05:16.919]             `+` <- base::`+`
[16:05:16.919]             `<<-` <- base::`<<-`
[16:05:16.919]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:16.919]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:16.919]                   3L)]
[16:05:16.919]             }
[16:05:16.919]             function(cond) {
[16:05:16.919]                 is_error <- inherits(cond, "error")
[16:05:16.919]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:16.919]                   NULL)
[16:05:16.919]                 if (is_error) {
[16:05:16.919]                   sessionInformation <- function() {
[16:05:16.919]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:16.919]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:16.919]                       search = base::search(), system = base::Sys.info())
[16:05:16.919]                   }
[16:05:16.919]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.919]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:16.919]                     cond$call), session = sessionInformation(), 
[16:05:16.919]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:16.919]                   signalCondition(cond)
[16:05:16.919]                 }
[16:05:16.919]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:16.919]                 "immediateCondition"))) {
[16:05:16.919]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:16.919]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.919]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:16.919]                   if (TRUE && !signal) {
[16:05:16.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.919]                     {
[16:05:16.919]                       inherits <- base::inherits
[16:05:16.919]                       invokeRestart <- base::invokeRestart
[16:05:16.919]                       is.null <- base::is.null
[16:05:16.919]                       muffled <- FALSE
[16:05:16.919]                       if (inherits(cond, "message")) {
[16:05:16.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.919]                         if (muffled) 
[16:05:16.919]                           invokeRestart("muffleMessage")
[16:05:16.919]                       }
[16:05:16.919]                       else if (inherits(cond, "warning")) {
[16:05:16.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.919]                         if (muffled) 
[16:05:16.919]                           invokeRestart("muffleWarning")
[16:05:16.919]                       }
[16:05:16.919]                       else if (inherits(cond, "condition")) {
[16:05:16.919]                         if (!is.null(pattern)) {
[16:05:16.919]                           computeRestarts <- base::computeRestarts
[16:05:16.919]                           grepl <- base::grepl
[16:05:16.919]                           restarts <- computeRestarts(cond)
[16:05:16.919]                           for (restart in restarts) {
[16:05:16.919]                             name <- restart$name
[16:05:16.919]                             if (is.null(name)) 
[16:05:16.919]                               next
[16:05:16.919]                             if (!grepl(pattern, name)) 
[16:05:16.919]                               next
[16:05:16.919]                             invokeRestart(restart)
[16:05:16.919]                             muffled <- TRUE
[16:05:16.919]                             break
[16:05:16.919]                           }
[16:05:16.919]                         }
[16:05:16.919]                       }
[16:05:16.919]                       invisible(muffled)
[16:05:16.919]                     }
[16:05:16.919]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.919]                   }
[16:05:16.919]                 }
[16:05:16.919]                 else {
[16:05:16.919]                   if (TRUE) {
[16:05:16.919]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.919]                     {
[16:05:16.919]                       inherits <- base::inherits
[16:05:16.919]                       invokeRestart <- base::invokeRestart
[16:05:16.919]                       is.null <- base::is.null
[16:05:16.919]                       muffled <- FALSE
[16:05:16.919]                       if (inherits(cond, "message")) {
[16:05:16.919]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.919]                         if (muffled) 
[16:05:16.919]                           invokeRestart("muffleMessage")
[16:05:16.919]                       }
[16:05:16.919]                       else if (inherits(cond, "warning")) {
[16:05:16.919]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.919]                         if (muffled) 
[16:05:16.919]                           invokeRestart("muffleWarning")
[16:05:16.919]                       }
[16:05:16.919]                       else if (inherits(cond, "condition")) {
[16:05:16.919]                         if (!is.null(pattern)) {
[16:05:16.919]                           computeRestarts <- base::computeRestarts
[16:05:16.919]                           grepl <- base::grepl
[16:05:16.919]                           restarts <- computeRestarts(cond)
[16:05:16.919]                           for (restart in restarts) {
[16:05:16.919]                             name <- restart$name
[16:05:16.919]                             if (is.null(name)) 
[16:05:16.919]                               next
[16:05:16.919]                             if (!grepl(pattern, name)) 
[16:05:16.919]                               next
[16:05:16.919]                             invokeRestart(restart)
[16:05:16.919]                             muffled <- TRUE
[16:05:16.919]                             break
[16:05:16.919]                           }
[16:05:16.919]                         }
[16:05:16.919]                       }
[16:05:16.919]                       invisible(muffled)
[16:05:16.919]                     }
[16:05:16.919]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.919]                   }
[16:05:16.919]                 }
[16:05:16.919]             }
[16:05:16.919]         }))
[16:05:16.919]     }, error = function(ex) {
[16:05:16.919]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:16.919]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.919]                 ...future.rng), started = ...future.startTime, 
[16:05:16.919]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:16.919]             version = "1.8"), class = "FutureResult")
[16:05:16.919]     }, finally = {
[16:05:16.919]         if (!identical(...future.workdir, getwd())) 
[16:05:16.919]             setwd(...future.workdir)
[16:05:16.919]         {
[16:05:16.919]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:16.919]                 ...future.oldOptions$nwarnings <- NULL
[16:05:16.919]             }
[16:05:16.919]             base::options(...future.oldOptions)
[16:05:16.919]             if (.Platform$OS.type == "windows") {
[16:05:16.919]                 old_names <- names(...future.oldEnvVars)
[16:05:16.919]                 envs <- base::Sys.getenv()
[16:05:16.919]                 names <- names(envs)
[16:05:16.919]                 common <- intersect(names, old_names)
[16:05:16.919]                 added <- setdiff(names, old_names)
[16:05:16.919]                 removed <- setdiff(old_names, names)
[16:05:16.919]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:16.919]                   envs[common]]
[16:05:16.919]                 NAMES <- toupper(changed)
[16:05:16.919]                 args <- list()
[16:05:16.919]                 for (kk in seq_along(NAMES)) {
[16:05:16.919]                   name <- changed[[kk]]
[16:05:16.919]                   NAME <- NAMES[[kk]]
[16:05:16.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.919]                     next
[16:05:16.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.919]                 }
[16:05:16.919]                 NAMES <- toupper(added)
[16:05:16.919]                 for (kk in seq_along(NAMES)) {
[16:05:16.919]                   name <- added[[kk]]
[16:05:16.919]                   NAME <- NAMES[[kk]]
[16:05:16.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.919]                     next
[16:05:16.919]                   args[[name]] <- ""
[16:05:16.919]                 }
[16:05:16.919]                 NAMES <- toupper(removed)
[16:05:16.919]                 for (kk in seq_along(NAMES)) {
[16:05:16.919]                   name <- removed[[kk]]
[16:05:16.919]                   NAME <- NAMES[[kk]]
[16:05:16.919]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.919]                     next
[16:05:16.919]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.919]                 }
[16:05:16.919]                 if (length(args) > 0) 
[16:05:16.919]                   base::do.call(base::Sys.setenv, args = args)
[16:05:16.919]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:16.919]             }
[16:05:16.919]             else {
[16:05:16.919]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:16.919]             }
[16:05:16.919]             {
[16:05:16.919]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:16.919]                   0L) {
[16:05:16.919]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:16.919]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:16.919]                   base::options(opts)
[16:05:16.919]                 }
[16:05:16.919]                 {
[16:05:16.919]                   {
[16:05:16.919]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:16.919]                     NULL
[16:05:16.919]                   }
[16:05:16.919]                   options(future.plan = NULL)
[16:05:16.919]                   if (is.na(NA_character_)) 
[16:05:16.919]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.919]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:16.919]                   future::plan(list(function (..., workers = 2L, 
[16:05:16.919]                     envir = parent.frame()) 
[16:05:16.919]                   strategy(..., workers = workers, envir = envir)), 
[16:05:16.919]                     .cleanup = FALSE, .init = FALSE)
[16:05:16.919]                 }
[16:05:16.919]             }
[16:05:16.919]         }
[16:05:16.919]     })
[16:05:16.919]     if (TRUE) {
[16:05:16.919]         base::sink(type = "output", split = FALSE)
[16:05:16.919]         if (TRUE) {
[16:05:16.919]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:16.919]         }
[16:05:16.919]         else {
[16:05:16.919]             ...future.result["stdout"] <- base::list(NULL)
[16:05:16.919]         }
[16:05:16.919]         base::close(...future.stdout)
[16:05:16.919]         ...future.stdout <- NULL
[16:05:16.919]     }
[16:05:16.919]     ...future.result$conditions <- ...future.conditions
[16:05:16.919]     ...future.result$finished <- base::Sys.time()
[16:05:16.919]     ...future.result
[16:05:16.919] }
[16:05:16.922] MultisessionFuture started
[16:05:16.922] - Launch lazy future ... done
[16:05:16.922] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[16:05:16.922] result() for ClusterFuture ...
[16:05:16.923] receiveMessageFromWorker() for ClusterFuture ...
[16:05:16.923] - Validating connection of MultisessionFuture
[16:05:16.968] - received message: FutureResult
[16:05:16.968] - Received FutureResult
[16:05:16.968] - Erased future from FutureRegistry
[16:05:16.969] result() for ClusterFuture ...
[16:05:16.969] - result already collected: FutureResult
[16:05:16.969] result() for ClusterFuture ... done
[16:05:16.969] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:16.969] result() for ClusterFuture ... done
[16:05:16.969] result() for ClusterFuture ...
[16:05:16.969] - result already collected: FutureResult
[16:05:16.969] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 03e239c0-449e-06a1-98ae-e77cdbb952fe
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[16:05:16.970] getGlobalsAndPackages() ...
[16:05:16.970] Searching for globals...
[16:05:16.971] - globals found: [2] ‘{’, ‘:::’
[16:05:16.971] Searching for globals ... DONE
[16:05:16.971] Resolving globals: FALSE
[16:05:16.972] 
[16:05:16.972] 
[16:05:16.972] getGlobalsAndPackages() ... DONE
[16:05:16.972] run() for ‘Future’ ...
[16:05:16.973] - state: ‘created’
[16:05:16.973] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:16.984] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:16.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:16.984]   - Field: ‘node’
[16:05:16.984]   - Field: ‘label’
[16:05:16.984]   - Field: ‘local’
[16:05:16.984]   - Field: ‘owner’
[16:05:16.984]   - Field: ‘envir’
[16:05:16.985]   - Field: ‘workers’
[16:05:16.988]   - Field: ‘packages’
[16:05:16.988]   - Field: ‘gc’
[16:05:16.988]   - Field: ‘conditions’
[16:05:16.988]   - Field: ‘persistent’
[16:05:16.988]   - Field: ‘expr’
[16:05:16.988]   - Field: ‘uuid’
[16:05:16.988]   - Field: ‘seed’
[16:05:16.988]   - Field: ‘version’
[16:05:16.988]   - Field: ‘result’
[16:05:16.989]   - Field: ‘asynchronous’
[16:05:16.989]   - Field: ‘calls’
[16:05:16.989]   - Field: ‘globals’
[16:05:16.989]   - Field: ‘stdout’
[16:05:16.989]   - Field: ‘earlySignal’
[16:05:16.989]   - Field: ‘lazy’
[16:05:16.989]   - Field: ‘state’
[16:05:16.989] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:16.989] - Launch lazy future ...
[16:05:16.989] Packages needed by the future expression (n = 0): <none>
[16:05:16.990] Packages needed by future strategies (n = 0): <none>
[16:05:16.990] {
[16:05:16.990]     {
[16:05:16.990]         {
[16:05:16.990]             ...future.startTime <- base::Sys.time()
[16:05:16.990]             {
[16:05:16.990]                 {
[16:05:16.990]                   {
[16:05:16.990]                     {
[16:05:16.990]                       base::local({
[16:05:16.990]                         has_future <- base::requireNamespace("future", 
[16:05:16.990]                           quietly = TRUE)
[16:05:16.990]                         if (has_future) {
[16:05:16.990]                           ns <- base::getNamespace("future")
[16:05:16.990]                           version <- ns[[".package"]][["version"]]
[16:05:16.990]                           if (is.null(version)) 
[16:05:16.990]                             version <- utils::packageVersion("future")
[16:05:16.990]                         }
[16:05:16.990]                         else {
[16:05:16.990]                           version <- NULL
[16:05:16.990]                         }
[16:05:16.990]                         if (!has_future || version < "1.8.0") {
[16:05:16.990]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:16.990]                             "", base::R.version$version.string), 
[16:05:16.990]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:16.990]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:16.990]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:16.990]                               "release", "version")], collapse = " "), 
[16:05:16.990]                             hostname = base::Sys.info()[["nodename"]])
[16:05:16.990]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:16.990]                             info)
[16:05:16.990]                           info <- base::paste(info, collapse = "; ")
[16:05:16.990]                           if (!has_future) {
[16:05:16.990]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:16.990]                               info)
[16:05:16.990]                           }
[16:05:16.990]                           else {
[16:05:16.990]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:16.990]                               info, version)
[16:05:16.990]                           }
[16:05:16.990]                           base::stop(msg)
[16:05:16.990]                         }
[16:05:16.990]                       })
[16:05:16.990]                     }
[16:05:16.990]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:16.990]                     base::options(mc.cores = 1L)
[16:05:16.990]                   }
[16:05:16.990]                   options(future.plan = NULL)
[16:05:16.990]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.990]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:16.990]                 }
[16:05:16.990]                 ...future.workdir <- getwd()
[16:05:16.990]             }
[16:05:16.990]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:16.990]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:16.990]         }
[16:05:16.990]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:16.990]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:16.990]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:16.990]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:16.990]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:16.990]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:16.990]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:16.990]             base::names(...future.oldOptions))
[16:05:16.990]     }
[16:05:16.990]     if (FALSE) {
[16:05:16.990]     }
[16:05:16.990]     else {
[16:05:16.990]         if (TRUE) {
[16:05:16.990]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:16.990]                 open = "w")
[16:05:16.990]         }
[16:05:16.990]         else {
[16:05:16.990]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:16.990]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:16.990]         }
[16:05:16.990]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:16.990]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:16.990]             base::sink(type = "output", split = FALSE)
[16:05:16.990]             base::close(...future.stdout)
[16:05:16.990]         }, add = TRUE)
[16:05:16.990]     }
[16:05:16.990]     ...future.frame <- base::sys.nframe()
[16:05:16.990]     ...future.conditions <- base::list()
[16:05:16.990]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:16.990]     if (FALSE) {
[16:05:16.990]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:16.990]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:16.990]     }
[16:05:16.990]     ...future.result <- base::tryCatch({
[16:05:16.990]         base::withCallingHandlers({
[16:05:16.990]             ...future.value <- base::withVisible(base::local({
[16:05:16.990]                 ...future.makeSendCondition <- base::local({
[16:05:16.990]                   sendCondition <- NULL
[16:05:16.990]                   function(frame = 1L) {
[16:05:16.990]                     if (is.function(sendCondition)) 
[16:05:16.990]                       return(sendCondition)
[16:05:16.990]                     ns <- getNamespace("parallel")
[16:05:16.990]                     if (exists("sendData", mode = "function", 
[16:05:16.990]                       envir = ns)) {
[16:05:16.990]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:16.990]                         envir = ns)
[16:05:16.990]                       envir <- sys.frame(frame)
[16:05:16.990]                       master <- NULL
[16:05:16.990]                       while (!identical(envir, .GlobalEnv) && 
[16:05:16.990]                         !identical(envir, emptyenv())) {
[16:05:16.990]                         if (exists("master", mode = "list", envir = envir, 
[16:05:16.990]                           inherits = FALSE)) {
[16:05:16.990]                           master <- get("master", mode = "list", 
[16:05:16.990]                             envir = envir, inherits = FALSE)
[16:05:16.990]                           if (inherits(master, c("SOCKnode", 
[16:05:16.990]                             "SOCK0node"))) {
[16:05:16.990]                             sendCondition <<- function(cond) {
[16:05:16.990]                               data <- list(type = "VALUE", value = cond, 
[16:05:16.990]                                 success = TRUE)
[16:05:16.990]                               parallel_sendData(master, data)
[16:05:16.990]                             }
[16:05:16.990]                             return(sendCondition)
[16:05:16.990]                           }
[16:05:16.990]                         }
[16:05:16.990]                         frame <- frame + 1L
[16:05:16.990]                         envir <- sys.frame(frame)
[16:05:16.990]                       }
[16:05:16.990]                     }
[16:05:16.990]                     sendCondition <<- function(cond) NULL
[16:05:16.990]                   }
[16:05:16.990]                 })
[16:05:16.990]                 withCallingHandlers({
[16:05:16.990]                   {
[16:05:16.990]                     future:::session_uuid(attributes = TRUE)
[16:05:16.990]                   }
[16:05:16.990]                 }, immediateCondition = function(cond) {
[16:05:16.990]                   sendCondition <- ...future.makeSendCondition()
[16:05:16.990]                   sendCondition(cond)
[16:05:16.990]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.990]                   {
[16:05:16.990]                     inherits <- base::inherits
[16:05:16.990]                     invokeRestart <- base::invokeRestart
[16:05:16.990]                     is.null <- base::is.null
[16:05:16.990]                     muffled <- FALSE
[16:05:16.990]                     if (inherits(cond, "message")) {
[16:05:16.990]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:16.990]                       if (muffled) 
[16:05:16.990]                         invokeRestart("muffleMessage")
[16:05:16.990]                     }
[16:05:16.990]                     else if (inherits(cond, "warning")) {
[16:05:16.990]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:16.990]                       if (muffled) 
[16:05:16.990]                         invokeRestart("muffleWarning")
[16:05:16.990]                     }
[16:05:16.990]                     else if (inherits(cond, "condition")) {
[16:05:16.990]                       if (!is.null(pattern)) {
[16:05:16.990]                         computeRestarts <- base::computeRestarts
[16:05:16.990]                         grepl <- base::grepl
[16:05:16.990]                         restarts <- computeRestarts(cond)
[16:05:16.990]                         for (restart in restarts) {
[16:05:16.990]                           name <- restart$name
[16:05:16.990]                           if (is.null(name)) 
[16:05:16.990]                             next
[16:05:16.990]                           if (!grepl(pattern, name)) 
[16:05:16.990]                             next
[16:05:16.990]                           invokeRestart(restart)
[16:05:16.990]                           muffled <- TRUE
[16:05:16.990]                           break
[16:05:16.990]                         }
[16:05:16.990]                       }
[16:05:16.990]                     }
[16:05:16.990]                     invisible(muffled)
[16:05:16.990]                   }
[16:05:16.990]                   muffleCondition(cond)
[16:05:16.990]                 })
[16:05:16.990]             }))
[16:05:16.990]             future::FutureResult(value = ...future.value$value, 
[16:05:16.990]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.990]                   ...future.rng), globalenv = if (FALSE) 
[16:05:16.990]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:16.990]                     ...future.globalenv.names))
[16:05:16.990]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:16.990]         }, condition = base::local({
[16:05:16.990]             c <- base::c
[16:05:16.990]             inherits <- base::inherits
[16:05:16.990]             invokeRestart <- base::invokeRestart
[16:05:16.990]             length <- base::length
[16:05:16.990]             list <- base::list
[16:05:16.990]             seq.int <- base::seq.int
[16:05:16.990]             signalCondition <- base::signalCondition
[16:05:16.990]             sys.calls <- base::sys.calls
[16:05:16.990]             `[[` <- base::`[[`
[16:05:16.990]             `+` <- base::`+`
[16:05:16.990]             `<<-` <- base::`<<-`
[16:05:16.990]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:16.990]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:16.990]                   3L)]
[16:05:16.990]             }
[16:05:16.990]             function(cond) {
[16:05:16.990]                 is_error <- inherits(cond, "error")
[16:05:16.990]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:16.990]                   NULL)
[16:05:16.990]                 if (is_error) {
[16:05:16.990]                   sessionInformation <- function() {
[16:05:16.990]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:16.990]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:16.990]                       search = base::search(), system = base::Sys.info())
[16:05:16.990]                   }
[16:05:16.990]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.990]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:16.990]                     cond$call), session = sessionInformation(), 
[16:05:16.990]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:16.990]                   signalCondition(cond)
[16:05:16.990]                 }
[16:05:16.990]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:16.990]                 "immediateCondition"))) {
[16:05:16.990]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:16.990]                   ...future.conditions[[length(...future.conditions) + 
[16:05:16.990]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:16.990]                   if (TRUE && !signal) {
[16:05:16.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.990]                     {
[16:05:16.990]                       inherits <- base::inherits
[16:05:16.990]                       invokeRestart <- base::invokeRestart
[16:05:16.990]                       is.null <- base::is.null
[16:05:16.990]                       muffled <- FALSE
[16:05:16.990]                       if (inherits(cond, "message")) {
[16:05:16.990]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.990]                         if (muffled) 
[16:05:16.990]                           invokeRestart("muffleMessage")
[16:05:16.990]                       }
[16:05:16.990]                       else if (inherits(cond, "warning")) {
[16:05:16.990]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.990]                         if (muffled) 
[16:05:16.990]                           invokeRestart("muffleWarning")
[16:05:16.990]                       }
[16:05:16.990]                       else if (inherits(cond, "condition")) {
[16:05:16.990]                         if (!is.null(pattern)) {
[16:05:16.990]                           computeRestarts <- base::computeRestarts
[16:05:16.990]                           grepl <- base::grepl
[16:05:16.990]                           restarts <- computeRestarts(cond)
[16:05:16.990]                           for (restart in restarts) {
[16:05:16.990]                             name <- restart$name
[16:05:16.990]                             if (is.null(name)) 
[16:05:16.990]                               next
[16:05:16.990]                             if (!grepl(pattern, name)) 
[16:05:16.990]                               next
[16:05:16.990]                             invokeRestart(restart)
[16:05:16.990]                             muffled <- TRUE
[16:05:16.990]                             break
[16:05:16.990]                           }
[16:05:16.990]                         }
[16:05:16.990]                       }
[16:05:16.990]                       invisible(muffled)
[16:05:16.990]                     }
[16:05:16.990]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.990]                   }
[16:05:16.990]                 }
[16:05:16.990]                 else {
[16:05:16.990]                   if (TRUE) {
[16:05:16.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:16.990]                     {
[16:05:16.990]                       inherits <- base::inherits
[16:05:16.990]                       invokeRestart <- base::invokeRestart
[16:05:16.990]                       is.null <- base::is.null
[16:05:16.990]                       muffled <- FALSE
[16:05:16.990]                       if (inherits(cond, "message")) {
[16:05:16.990]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:16.990]                         if (muffled) 
[16:05:16.990]                           invokeRestart("muffleMessage")
[16:05:16.990]                       }
[16:05:16.990]                       else if (inherits(cond, "warning")) {
[16:05:16.990]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:16.990]                         if (muffled) 
[16:05:16.990]                           invokeRestart("muffleWarning")
[16:05:16.990]                       }
[16:05:16.990]                       else if (inherits(cond, "condition")) {
[16:05:16.990]                         if (!is.null(pattern)) {
[16:05:16.990]                           computeRestarts <- base::computeRestarts
[16:05:16.990]                           grepl <- base::grepl
[16:05:16.990]                           restarts <- computeRestarts(cond)
[16:05:16.990]                           for (restart in restarts) {
[16:05:16.990]                             name <- restart$name
[16:05:16.990]                             if (is.null(name)) 
[16:05:16.990]                               next
[16:05:16.990]                             if (!grepl(pattern, name)) 
[16:05:16.990]                               next
[16:05:16.990]                             invokeRestart(restart)
[16:05:16.990]                             muffled <- TRUE
[16:05:16.990]                             break
[16:05:16.990]                           }
[16:05:16.990]                         }
[16:05:16.990]                       }
[16:05:16.990]                       invisible(muffled)
[16:05:16.990]                     }
[16:05:16.990]                     muffleCondition(cond, pattern = "^muffle")
[16:05:16.990]                   }
[16:05:16.990]                 }
[16:05:16.990]             }
[16:05:16.990]         }))
[16:05:16.990]     }, error = function(ex) {
[16:05:16.990]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:16.990]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:16.990]                 ...future.rng), started = ...future.startTime, 
[16:05:16.990]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:16.990]             version = "1.8"), class = "FutureResult")
[16:05:16.990]     }, finally = {
[16:05:16.990]         if (!identical(...future.workdir, getwd())) 
[16:05:16.990]             setwd(...future.workdir)
[16:05:16.990]         {
[16:05:16.990]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:16.990]                 ...future.oldOptions$nwarnings <- NULL
[16:05:16.990]             }
[16:05:16.990]             base::options(...future.oldOptions)
[16:05:16.990]             if (.Platform$OS.type == "windows") {
[16:05:16.990]                 old_names <- names(...future.oldEnvVars)
[16:05:16.990]                 envs <- base::Sys.getenv()
[16:05:16.990]                 names <- names(envs)
[16:05:16.990]                 common <- intersect(names, old_names)
[16:05:16.990]                 added <- setdiff(names, old_names)
[16:05:16.990]                 removed <- setdiff(old_names, names)
[16:05:16.990]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:16.990]                   envs[common]]
[16:05:16.990]                 NAMES <- toupper(changed)
[16:05:16.990]                 args <- list()
[16:05:16.990]                 for (kk in seq_along(NAMES)) {
[16:05:16.990]                   name <- changed[[kk]]
[16:05:16.990]                   NAME <- NAMES[[kk]]
[16:05:16.990]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.990]                     next
[16:05:16.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.990]                 }
[16:05:16.990]                 NAMES <- toupper(added)
[16:05:16.990]                 for (kk in seq_along(NAMES)) {
[16:05:16.990]                   name <- added[[kk]]
[16:05:16.990]                   NAME <- NAMES[[kk]]
[16:05:16.990]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.990]                     next
[16:05:16.990]                   args[[name]] <- ""
[16:05:16.990]                 }
[16:05:16.990]                 NAMES <- toupper(removed)
[16:05:16.990]                 for (kk in seq_along(NAMES)) {
[16:05:16.990]                   name <- removed[[kk]]
[16:05:16.990]                   NAME <- NAMES[[kk]]
[16:05:16.990]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:16.990]                     next
[16:05:16.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:16.990]                 }
[16:05:16.990]                 if (length(args) > 0) 
[16:05:16.990]                   base::do.call(base::Sys.setenv, args = args)
[16:05:16.990]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:16.990]             }
[16:05:16.990]             else {
[16:05:16.990]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:16.990]             }
[16:05:16.990]             {
[16:05:16.990]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:16.990]                   0L) {
[16:05:16.990]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:16.990]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:16.990]                   base::options(opts)
[16:05:16.990]                 }
[16:05:16.990]                 {
[16:05:16.990]                   {
[16:05:16.990]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:16.990]                     NULL
[16:05:16.990]                   }
[16:05:16.990]                   options(future.plan = NULL)
[16:05:16.990]                   if (is.na(NA_character_)) 
[16:05:16.990]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:16.990]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:16.990]                   future::plan(list(function (..., workers = 2L, 
[16:05:16.990]                     envir = parent.frame()) 
[16:05:16.990]                   strategy(..., workers = workers, envir = envir)), 
[16:05:16.990]                     .cleanup = FALSE, .init = FALSE)
[16:05:16.990]                 }
[16:05:16.990]             }
[16:05:16.990]         }
[16:05:16.990]     })
[16:05:16.990]     if (TRUE) {
[16:05:16.990]         base::sink(type = "output", split = FALSE)
[16:05:16.990]         if (TRUE) {
[16:05:16.990]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:16.990]         }
[16:05:16.990]         else {
[16:05:16.990]             ...future.result["stdout"] <- base::list(NULL)
[16:05:16.990]         }
[16:05:16.990]         base::close(...future.stdout)
[16:05:16.990]         ...future.stdout <- NULL
[16:05:16.990]     }
[16:05:16.990]     ...future.result$conditions <- ...future.conditions
[16:05:16.990]     ...future.result$finished <- base::Sys.time()
[16:05:16.990]     ...future.result
[16:05:16.990] }
[16:05:16.993] MultisessionFuture started
[16:05:16.993] - Launch lazy future ... done
[16:05:16.993] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[16:05:16.993] result() for ClusterFuture ...
[16:05:16.993] receiveMessageFromWorker() for ClusterFuture ...
[16:05:16.994] - Validating connection of MultisessionFuture
[16:05:17.036] - received message: FutureResult
[16:05:17.037] - Received FutureResult
[16:05:17.037] - Erased future from FutureRegistry
[16:05:17.037] result() for ClusterFuture ...
[16:05:17.037] - result already collected: FutureResult
[16:05:17.037] result() for ClusterFuture ... done
[16:05:17.037] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.037] result() for ClusterFuture ... done
[16:05:17.037] result() for ClusterFuture ...
[16:05:17.037] - result already collected: FutureResult
[16:05:17.037] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 03e239c0-449e-06a1-98ae-e77cdbb952fe
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[16:05:17.038] getGlobalsAndPackages() ...
[16:05:17.038] Searching for globals...
[16:05:17.039] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:05:17.039] Searching for globals ... DONE
[16:05:17.039] Resolving globals: FALSE
[16:05:17.042] The total size of the 1 globals is 1.56 MiB (1631688 bytes)
[16:05:17.042] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:05:17.042] - globals: [1] ‘f1’
[16:05:17.042] 
[16:05:17.042] getGlobalsAndPackages() ... DONE
[16:05:17.043] run() for ‘Future’ ...
[16:05:17.043] - state: ‘created’
[16:05:17.043] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:17.053] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:17.054] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:17.054]   - Field: ‘node’
[16:05:17.054]   - Field: ‘label’
[16:05:17.054]   - Field: ‘local’
[16:05:17.054]   - Field: ‘owner’
[16:05:17.054]   - Field: ‘envir’
[16:05:17.054]   - Field: ‘workers’
[16:05:17.054]   - Field: ‘packages’
[16:05:17.054]   - Field: ‘gc’
[16:05:17.054]   - Field: ‘conditions’
[16:05:17.054]   - Field: ‘persistent’
[16:05:17.055]   - Field: ‘expr’
[16:05:17.055]   - Field: ‘uuid’
[16:05:17.055]   - Field: ‘seed’
[16:05:17.055]   - Field: ‘version’
[16:05:17.055]   - Field: ‘result’
[16:05:17.055]   - Field: ‘asynchronous’
[16:05:17.055]   - Field: ‘calls’
[16:05:17.055]   - Field: ‘globals’
[16:05:17.055]   - Field: ‘stdout’
[16:05:17.055]   - Field: ‘earlySignal’
[16:05:17.055]   - Field: ‘lazy’
[16:05:17.056]   - Field: ‘state’
[16:05:17.056] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:17.056] - Launch lazy future ...
[16:05:17.056] Packages needed by the future expression (n = 0): <none>
[16:05:17.056] Packages needed by future strategies (n = 0): <none>
[16:05:17.057] {
[16:05:17.057]     {
[16:05:17.057]         {
[16:05:17.057]             ...future.startTime <- base::Sys.time()
[16:05:17.057]             {
[16:05:17.057]                 {
[16:05:17.057]                   {
[16:05:17.057]                     {
[16:05:17.057]                       base::local({
[16:05:17.057]                         has_future <- base::requireNamespace("future", 
[16:05:17.057]                           quietly = TRUE)
[16:05:17.057]                         if (has_future) {
[16:05:17.057]                           ns <- base::getNamespace("future")
[16:05:17.057]                           version <- ns[[".package"]][["version"]]
[16:05:17.057]                           if (is.null(version)) 
[16:05:17.057]                             version <- utils::packageVersion("future")
[16:05:17.057]                         }
[16:05:17.057]                         else {
[16:05:17.057]                           version <- NULL
[16:05:17.057]                         }
[16:05:17.057]                         if (!has_future || version < "1.8.0") {
[16:05:17.057]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:17.057]                             "", base::R.version$version.string), 
[16:05:17.057]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:17.057]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:17.057]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:17.057]                               "release", "version")], collapse = " "), 
[16:05:17.057]                             hostname = base::Sys.info()[["nodename"]])
[16:05:17.057]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:17.057]                             info)
[16:05:17.057]                           info <- base::paste(info, collapse = "; ")
[16:05:17.057]                           if (!has_future) {
[16:05:17.057]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:17.057]                               info)
[16:05:17.057]                           }
[16:05:17.057]                           else {
[16:05:17.057]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:17.057]                               info, version)
[16:05:17.057]                           }
[16:05:17.057]                           base::stop(msg)
[16:05:17.057]                         }
[16:05:17.057]                       })
[16:05:17.057]                     }
[16:05:17.057]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:17.057]                     base::options(mc.cores = 1L)
[16:05:17.057]                   }
[16:05:17.057]                   options(future.plan = NULL)
[16:05:17.057]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.057]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:17.057]                 }
[16:05:17.057]                 ...future.workdir <- getwd()
[16:05:17.057]             }
[16:05:17.057]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:17.057]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:17.057]         }
[16:05:17.057]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:17.057]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:17.057]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:17.057]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:17.057]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:17.057]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:17.057]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:17.057]             base::names(...future.oldOptions))
[16:05:17.057]     }
[16:05:17.057]     if (FALSE) {
[16:05:17.057]     }
[16:05:17.057]     else {
[16:05:17.057]         if (TRUE) {
[16:05:17.057]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:17.057]                 open = "w")
[16:05:17.057]         }
[16:05:17.057]         else {
[16:05:17.057]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:17.057]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:17.057]         }
[16:05:17.057]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:17.057]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:17.057]             base::sink(type = "output", split = FALSE)
[16:05:17.057]             base::close(...future.stdout)
[16:05:17.057]         }, add = TRUE)
[16:05:17.057]     }
[16:05:17.057]     ...future.frame <- base::sys.nframe()
[16:05:17.057]     ...future.conditions <- base::list()
[16:05:17.057]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:17.057]     if (FALSE) {
[16:05:17.057]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:17.057]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:17.057]     }
[16:05:17.057]     ...future.result <- base::tryCatch({
[16:05:17.057]         base::withCallingHandlers({
[16:05:17.057]             ...future.value <- base::withVisible(base::local({
[16:05:17.057]                 ...future.makeSendCondition <- base::local({
[16:05:17.057]                   sendCondition <- NULL
[16:05:17.057]                   function(frame = 1L) {
[16:05:17.057]                     if (is.function(sendCondition)) 
[16:05:17.057]                       return(sendCondition)
[16:05:17.057]                     ns <- getNamespace("parallel")
[16:05:17.057]                     if (exists("sendData", mode = "function", 
[16:05:17.057]                       envir = ns)) {
[16:05:17.057]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:17.057]                         envir = ns)
[16:05:17.057]                       envir <- sys.frame(frame)
[16:05:17.057]                       master <- NULL
[16:05:17.057]                       while (!identical(envir, .GlobalEnv) && 
[16:05:17.057]                         !identical(envir, emptyenv())) {
[16:05:17.057]                         if (exists("master", mode = "list", envir = envir, 
[16:05:17.057]                           inherits = FALSE)) {
[16:05:17.057]                           master <- get("master", mode = "list", 
[16:05:17.057]                             envir = envir, inherits = FALSE)
[16:05:17.057]                           if (inherits(master, c("SOCKnode", 
[16:05:17.057]                             "SOCK0node"))) {
[16:05:17.057]                             sendCondition <<- function(cond) {
[16:05:17.057]                               data <- list(type = "VALUE", value = cond, 
[16:05:17.057]                                 success = TRUE)
[16:05:17.057]                               parallel_sendData(master, data)
[16:05:17.057]                             }
[16:05:17.057]                             return(sendCondition)
[16:05:17.057]                           }
[16:05:17.057]                         }
[16:05:17.057]                         frame <- frame + 1L
[16:05:17.057]                         envir <- sys.frame(frame)
[16:05:17.057]                       }
[16:05:17.057]                     }
[16:05:17.057]                     sendCondition <<- function(cond) NULL
[16:05:17.057]                   }
[16:05:17.057]                 })
[16:05:17.057]                 withCallingHandlers({
[16:05:17.057]                   {
[16:05:17.057]                     f1$owner
[16:05:17.057]                   }
[16:05:17.057]                 }, immediateCondition = function(cond) {
[16:05:17.057]                   sendCondition <- ...future.makeSendCondition()
[16:05:17.057]                   sendCondition(cond)
[16:05:17.057]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.057]                   {
[16:05:17.057]                     inherits <- base::inherits
[16:05:17.057]                     invokeRestart <- base::invokeRestart
[16:05:17.057]                     is.null <- base::is.null
[16:05:17.057]                     muffled <- FALSE
[16:05:17.057]                     if (inherits(cond, "message")) {
[16:05:17.057]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:17.057]                       if (muffled) 
[16:05:17.057]                         invokeRestart("muffleMessage")
[16:05:17.057]                     }
[16:05:17.057]                     else if (inherits(cond, "warning")) {
[16:05:17.057]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:17.057]                       if (muffled) 
[16:05:17.057]                         invokeRestart("muffleWarning")
[16:05:17.057]                     }
[16:05:17.057]                     else if (inherits(cond, "condition")) {
[16:05:17.057]                       if (!is.null(pattern)) {
[16:05:17.057]                         computeRestarts <- base::computeRestarts
[16:05:17.057]                         grepl <- base::grepl
[16:05:17.057]                         restarts <- computeRestarts(cond)
[16:05:17.057]                         for (restart in restarts) {
[16:05:17.057]                           name <- restart$name
[16:05:17.057]                           if (is.null(name)) 
[16:05:17.057]                             next
[16:05:17.057]                           if (!grepl(pattern, name)) 
[16:05:17.057]                             next
[16:05:17.057]                           invokeRestart(restart)
[16:05:17.057]                           muffled <- TRUE
[16:05:17.057]                           break
[16:05:17.057]                         }
[16:05:17.057]                       }
[16:05:17.057]                     }
[16:05:17.057]                     invisible(muffled)
[16:05:17.057]                   }
[16:05:17.057]                   muffleCondition(cond)
[16:05:17.057]                 })
[16:05:17.057]             }))
[16:05:17.057]             future::FutureResult(value = ...future.value$value, 
[16:05:17.057]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.057]                   ...future.rng), globalenv = if (FALSE) 
[16:05:17.057]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:17.057]                     ...future.globalenv.names))
[16:05:17.057]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:17.057]         }, condition = base::local({
[16:05:17.057]             c <- base::c
[16:05:17.057]             inherits <- base::inherits
[16:05:17.057]             invokeRestart <- base::invokeRestart
[16:05:17.057]             length <- base::length
[16:05:17.057]             list <- base::list
[16:05:17.057]             seq.int <- base::seq.int
[16:05:17.057]             signalCondition <- base::signalCondition
[16:05:17.057]             sys.calls <- base::sys.calls
[16:05:17.057]             `[[` <- base::`[[`
[16:05:17.057]             `+` <- base::`+`
[16:05:17.057]             `<<-` <- base::`<<-`
[16:05:17.057]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:17.057]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:17.057]                   3L)]
[16:05:17.057]             }
[16:05:17.057]             function(cond) {
[16:05:17.057]                 is_error <- inherits(cond, "error")
[16:05:17.057]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:17.057]                   NULL)
[16:05:17.057]                 if (is_error) {
[16:05:17.057]                   sessionInformation <- function() {
[16:05:17.057]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:17.057]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:17.057]                       search = base::search(), system = base::Sys.info())
[16:05:17.057]                   }
[16:05:17.057]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.057]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:17.057]                     cond$call), session = sessionInformation(), 
[16:05:17.057]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:17.057]                   signalCondition(cond)
[16:05:17.057]                 }
[16:05:17.057]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:17.057]                 "immediateCondition"))) {
[16:05:17.057]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:17.057]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.057]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:17.057]                   if (TRUE && !signal) {
[16:05:17.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.057]                     {
[16:05:17.057]                       inherits <- base::inherits
[16:05:17.057]                       invokeRestart <- base::invokeRestart
[16:05:17.057]                       is.null <- base::is.null
[16:05:17.057]                       muffled <- FALSE
[16:05:17.057]                       if (inherits(cond, "message")) {
[16:05:17.057]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.057]                         if (muffled) 
[16:05:17.057]                           invokeRestart("muffleMessage")
[16:05:17.057]                       }
[16:05:17.057]                       else if (inherits(cond, "warning")) {
[16:05:17.057]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.057]                         if (muffled) 
[16:05:17.057]                           invokeRestart("muffleWarning")
[16:05:17.057]                       }
[16:05:17.057]                       else if (inherits(cond, "condition")) {
[16:05:17.057]                         if (!is.null(pattern)) {
[16:05:17.057]                           computeRestarts <- base::computeRestarts
[16:05:17.057]                           grepl <- base::grepl
[16:05:17.057]                           restarts <- computeRestarts(cond)
[16:05:17.057]                           for (restart in restarts) {
[16:05:17.057]                             name <- restart$name
[16:05:17.057]                             if (is.null(name)) 
[16:05:17.057]                               next
[16:05:17.057]                             if (!grepl(pattern, name)) 
[16:05:17.057]                               next
[16:05:17.057]                             invokeRestart(restart)
[16:05:17.057]                             muffled <- TRUE
[16:05:17.057]                             break
[16:05:17.057]                           }
[16:05:17.057]                         }
[16:05:17.057]                       }
[16:05:17.057]                       invisible(muffled)
[16:05:17.057]                     }
[16:05:17.057]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.057]                   }
[16:05:17.057]                 }
[16:05:17.057]                 else {
[16:05:17.057]                   if (TRUE) {
[16:05:17.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.057]                     {
[16:05:17.057]                       inherits <- base::inherits
[16:05:17.057]                       invokeRestart <- base::invokeRestart
[16:05:17.057]                       is.null <- base::is.null
[16:05:17.057]                       muffled <- FALSE
[16:05:17.057]                       if (inherits(cond, "message")) {
[16:05:17.057]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.057]                         if (muffled) 
[16:05:17.057]                           invokeRestart("muffleMessage")
[16:05:17.057]                       }
[16:05:17.057]                       else if (inherits(cond, "warning")) {
[16:05:17.057]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.057]                         if (muffled) 
[16:05:17.057]                           invokeRestart("muffleWarning")
[16:05:17.057]                       }
[16:05:17.057]                       else if (inherits(cond, "condition")) {
[16:05:17.057]                         if (!is.null(pattern)) {
[16:05:17.057]                           computeRestarts <- base::computeRestarts
[16:05:17.057]                           grepl <- base::grepl
[16:05:17.057]                           restarts <- computeRestarts(cond)
[16:05:17.057]                           for (restart in restarts) {
[16:05:17.057]                             name <- restart$name
[16:05:17.057]                             if (is.null(name)) 
[16:05:17.057]                               next
[16:05:17.057]                             if (!grepl(pattern, name)) 
[16:05:17.057]                               next
[16:05:17.057]                             invokeRestart(restart)
[16:05:17.057]                             muffled <- TRUE
[16:05:17.057]                             break
[16:05:17.057]                           }
[16:05:17.057]                         }
[16:05:17.057]                       }
[16:05:17.057]                       invisible(muffled)
[16:05:17.057]                     }
[16:05:17.057]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.057]                   }
[16:05:17.057]                 }
[16:05:17.057]             }
[16:05:17.057]         }))
[16:05:17.057]     }, error = function(ex) {
[16:05:17.057]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:17.057]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.057]                 ...future.rng), started = ...future.startTime, 
[16:05:17.057]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:17.057]             version = "1.8"), class = "FutureResult")
[16:05:17.057]     }, finally = {
[16:05:17.057]         if (!identical(...future.workdir, getwd())) 
[16:05:17.057]             setwd(...future.workdir)
[16:05:17.057]         {
[16:05:17.057]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:17.057]                 ...future.oldOptions$nwarnings <- NULL
[16:05:17.057]             }
[16:05:17.057]             base::options(...future.oldOptions)
[16:05:17.057]             if (.Platform$OS.type == "windows") {
[16:05:17.057]                 old_names <- names(...future.oldEnvVars)
[16:05:17.057]                 envs <- base::Sys.getenv()
[16:05:17.057]                 names <- names(envs)
[16:05:17.057]                 common <- intersect(names, old_names)
[16:05:17.057]                 added <- setdiff(names, old_names)
[16:05:17.057]                 removed <- setdiff(old_names, names)
[16:05:17.057]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:17.057]                   envs[common]]
[16:05:17.057]                 NAMES <- toupper(changed)
[16:05:17.057]                 args <- list()
[16:05:17.057]                 for (kk in seq_along(NAMES)) {
[16:05:17.057]                   name <- changed[[kk]]
[16:05:17.057]                   NAME <- NAMES[[kk]]
[16:05:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.057]                     next
[16:05:17.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.057]                 }
[16:05:17.057]                 NAMES <- toupper(added)
[16:05:17.057]                 for (kk in seq_along(NAMES)) {
[16:05:17.057]                   name <- added[[kk]]
[16:05:17.057]                   NAME <- NAMES[[kk]]
[16:05:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.057]                     next
[16:05:17.057]                   args[[name]] <- ""
[16:05:17.057]                 }
[16:05:17.057]                 NAMES <- toupper(removed)
[16:05:17.057]                 for (kk in seq_along(NAMES)) {
[16:05:17.057]                   name <- removed[[kk]]
[16:05:17.057]                   NAME <- NAMES[[kk]]
[16:05:17.057]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.057]                     next
[16:05:17.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.057]                 }
[16:05:17.057]                 if (length(args) > 0) 
[16:05:17.057]                   base::do.call(base::Sys.setenv, args = args)
[16:05:17.057]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:17.057]             }
[16:05:17.057]             else {
[16:05:17.057]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:17.057]             }
[16:05:17.057]             {
[16:05:17.057]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:17.057]                   0L) {
[16:05:17.057]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:17.057]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:17.057]                   base::options(opts)
[16:05:17.057]                 }
[16:05:17.057]                 {
[16:05:17.057]                   {
[16:05:17.057]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:17.057]                     NULL
[16:05:17.057]                   }
[16:05:17.057]                   options(future.plan = NULL)
[16:05:17.057]                   if (is.na(NA_character_)) 
[16:05:17.057]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.057]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:17.057]                   future::plan(list(function (..., workers = 2L, 
[16:05:17.057]                     envir = parent.frame()) 
[16:05:17.057]                   strategy(..., workers = workers, envir = envir)), 
[16:05:17.057]                     .cleanup = FALSE, .init = FALSE)
[16:05:17.057]                 }
[16:05:17.057]             }
[16:05:17.057]         }
[16:05:17.057]     })
[16:05:17.057]     if (TRUE) {
[16:05:17.057]         base::sink(type = "output", split = FALSE)
[16:05:17.057]         if (TRUE) {
[16:05:17.057]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:17.057]         }
[16:05:17.057]         else {
[16:05:17.057]             ...future.result["stdout"] <- base::list(NULL)
[16:05:17.057]         }
[16:05:17.057]         base::close(...future.stdout)
[16:05:17.057]         ...future.stdout <- NULL
[16:05:17.057]     }
[16:05:17.057]     ...future.result$conditions <- ...future.conditions
[16:05:17.057]     ...future.result$finished <- base::Sys.time()
[16:05:17.057]     ...future.result
[16:05:17.057] }
[16:05:17.059] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[16:05:17.061] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[16:05:17.111] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.111] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.112] MultisessionFuture started
[16:05:17.112] - Launch lazy future ... done
[16:05:17.112] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[16:05:17.112] result() for ClusterFuture ...
[16:05:17.113] receiveMessageFromWorker() for ClusterFuture ...
[16:05:17.113] - Validating connection of MultisessionFuture
[16:05:17.157] - received message: FutureResult
[16:05:17.157] - Received FutureResult
[16:05:17.157] - Erased future from FutureRegistry
[16:05:17.157] result() for ClusterFuture ...
[16:05:17.157] - result already collected: FutureResult
[16:05:17.157] result() for ClusterFuture ... done
[16:05:17.157] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.157] result() for ClusterFuture ... done
[16:05:17.157] result() for ClusterFuture ...
[16:05:17.158] - result already collected: FutureResult
[16:05:17.158] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 28c28227-32ac-d9ee-1c8b-2c6b7a9a5132
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[16:05:17.158] getGlobalsAndPackages() ...
[16:05:17.158] Searching for globals...
[16:05:17.159] - globals found: [3] ‘{’, ‘$’, ‘f1’
[16:05:17.159] Searching for globals ... DONE
[16:05:17.159] Resolving globals: FALSE
[16:05:17.162] The total size of the 1 globals is 1.56 MiB (1634624 bytes)
[16:05:17.162] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:05:17.162] - globals: [1] ‘f1’
[16:05:17.162] 
[16:05:17.162] getGlobalsAndPackages() ... DONE
[16:05:17.163] run() for ‘Future’ ...
[16:05:17.163] - state: ‘created’
[16:05:17.163] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:17.175] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:17.175] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:17.175]   - Field: ‘node’
[16:05:17.175]   - Field: ‘label’
[16:05:17.175]   - Field: ‘local’
[16:05:17.175]   - Field: ‘owner’
[16:05:17.175]   - Field: ‘envir’
[16:05:17.175]   - Field: ‘workers’
[16:05:17.176]   - Field: ‘packages’
[16:05:17.176]   - Field: ‘gc’
[16:05:17.176]   - Field: ‘conditions’
[16:05:17.176]   - Field: ‘persistent’
[16:05:17.176]   - Field: ‘expr’
[16:05:17.176]   - Field: ‘uuid’
[16:05:17.176]   - Field: ‘seed’
[16:05:17.176]   - Field: ‘version’
[16:05:17.176]   - Field: ‘result’
[16:05:17.176]   - Field: ‘asynchronous’
[16:05:17.176]   - Field: ‘calls’
[16:05:17.177]   - Field: ‘globals’
[16:05:17.177]   - Field: ‘stdout’
[16:05:17.177]   - Field: ‘earlySignal’
[16:05:17.177]   - Field: ‘lazy’
[16:05:17.177]   - Field: ‘state’
[16:05:17.177] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:17.177] - Launch lazy future ...
[16:05:17.177] Packages needed by the future expression (n = 0): <none>
[16:05:17.177] Packages needed by future strategies (n = 0): <none>
[16:05:17.178] {
[16:05:17.178]     {
[16:05:17.178]         {
[16:05:17.178]             ...future.startTime <- base::Sys.time()
[16:05:17.178]             {
[16:05:17.178]                 {
[16:05:17.178]                   {
[16:05:17.178]                     {
[16:05:17.178]                       base::local({
[16:05:17.178]                         has_future <- base::requireNamespace("future", 
[16:05:17.178]                           quietly = TRUE)
[16:05:17.178]                         if (has_future) {
[16:05:17.178]                           ns <- base::getNamespace("future")
[16:05:17.178]                           version <- ns[[".package"]][["version"]]
[16:05:17.178]                           if (is.null(version)) 
[16:05:17.178]                             version <- utils::packageVersion("future")
[16:05:17.178]                         }
[16:05:17.178]                         else {
[16:05:17.178]                           version <- NULL
[16:05:17.178]                         }
[16:05:17.178]                         if (!has_future || version < "1.8.0") {
[16:05:17.178]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:17.178]                             "", base::R.version$version.string), 
[16:05:17.178]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:17.178]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:17.178]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:17.178]                               "release", "version")], collapse = " "), 
[16:05:17.178]                             hostname = base::Sys.info()[["nodename"]])
[16:05:17.178]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:17.178]                             info)
[16:05:17.178]                           info <- base::paste(info, collapse = "; ")
[16:05:17.178]                           if (!has_future) {
[16:05:17.178]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:17.178]                               info)
[16:05:17.178]                           }
[16:05:17.178]                           else {
[16:05:17.178]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:17.178]                               info, version)
[16:05:17.178]                           }
[16:05:17.178]                           base::stop(msg)
[16:05:17.178]                         }
[16:05:17.178]                       })
[16:05:17.178]                     }
[16:05:17.178]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:17.178]                     base::options(mc.cores = 1L)
[16:05:17.178]                   }
[16:05:17.178]                   options(future.plan = NULL)
[16:05:17.178]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.178]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:17.178]                 }
[16:05:17.178]                 ...future.workdir <- getwd()
[16:05:17.178]             }
[16:05:17.178]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:17.178]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:17.178]         }
[16:05:17.178]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:17.178]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:17.178]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:17.178]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:17.178]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:17.178]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:17.178]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:17.178]             base::names(...future.oldOptions))
[16:05:17.178]     }
[16:05:17.178]     if (FALSE) {
[16:05:17.178]     }
[16:05:17.178]     else {
[16:05:17.178]         if (TRUE) {
[16:05:17.178]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:17.178]                 open = "w")
[16:05:17.178]         }
[16:05:17.178]         else {
[16:05:17.178]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:17.178]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:17.178]         }
[16:05:17.178]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:17.178]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:17.178]             base::sink(type = "output", split = FALSE)
[16:05:17.178]             base::close(...future.stdout)
[16:05:17.178]         }, add = TRUE)
[16:05:17.178]     }
[16:05:17.178]     ...future.frame <- base::sys.nframe()
[16:05:17.178]     ...future.conditions <- base::list()
[16:05:17.178]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:17.178]     if (FALSE) {
[16:05:17.178]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:17.178]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:17.178]     }
[16:05:17.178]     ...future.result <- base::tryCatch({
[16:05:17.178]         base::withCallingHandlers({
[16:05:17.178]             ...future.value <- base::withVisible(base::local({
[16:05:17.178]                 ...future.makeSendCondition <- base::local({
[16:05:17.178]                   sendCondition <- NULL
[16:05:17.178]                   function(frame = 1L) {
[16:05:17.178]                     if (is.function(sendCondition)) 
[16:05:17.178]                       return(sendCondition)
[16:05:17.178]                     ns <- getNamespace("parallel")
[16:05:17.178]                     if (exists("sendData", mode = "function", 
[16:05:17.178]                       envir = ns)) {
[16:05:17.178]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:17.178]                         envir = ns)
[16:05:17.178]                       envir <- sys.frame(frame)
[16:05:17.178]                       master <- NULL
[16:05:17.178]                       while (!identical(envir, .GlobalEnv) && 
[16:05:17.178]                         !identical(envir, emptyenv())) {
[16:05:17.178]                         if (exists("master", mode = "list", envir = envir, 
[16:05:17.178]                           inherits = FALSE)) {
[16:05:17.178]                           master <- get("master", mode = "list", 
[16:05:17.178]                             envir = envir, inherits = FALSE)
[16:05:17.178]                           if (inherits(master, c("SOCKnode", 
[16:05:17.178]                             "SOCK0node"))) {
[16:05:17.178]                             sendCondition <<- function(cond) {
[16:05:17.178]                               data <- list(type = "VALUE", value = cond, 
[16:05:17.178]                                 success = TRUE)
[16:05:17.178]                               parallel_sendData(master, data)
[16:05:17.178]                             }
[16:05:17.178]                             return(sendCondition)
[16:05:17.178]                           }
[16:05:17.178]                         }
[16:05:17.178]                         frame <- frame + 1L
[16:05:17.178]                         envir <- sys.frame(frame)
[16:05:17.178]                       }
[16:05:17.178]                     }
[16:05:17.178]                     sendCondition <<- function(cond) NULL
[16:05:17.178]                   }
[16:05:17.178]                 })
[16:05:17.178]                 withCallingHandlers({
[16:05:17.178]                   {
[16:05:17.178]                     f1$owner
[16:05:17.178]                   }
[16:05:17.178]                 }, immediateCondition = function(cond) {
[16:05:17.178]                   sendCondition <- ...future.makeSendCondition()
[16:05:17.178]                   sendCondition(cond)
[16:05:17.178]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.178]                   {
[16:05:17.178]                     inherits <- base::inherits
[16:05:17.178]                     invokeRestart <- base::invokeRestart
[16:05:17.178]                     is.null <- base::is.null
[16:05:17.178]                     muffled <- FALSE
[16:05:17.178]                     if (inherits(cond, "message")) {
[16:05:17.178]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:17.178]                       if (muffled) 
[16:05:17.178]                         invokeRestart("muffleMessage")
[16:05:17.178]                     }
[16:05:17.178]                     else if (inherits(cond, "warning")) {
[16:05:17.178]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:17.178]                       if (muffled) 
[16:05:17.178]                         invokeRestart("muffleWarning")
[16:05:17.178]                     }
[16:05:17.178]                     else if (inherits(cond, "condition")) {
[16:05:17.178]                       if (!is.null(pattern)) {
[16:05:17.178]                         computeRestarts <- base::computeRestarts
[16:05:17.178]                         grepl <- base::grepl
[16:05:17.178]                         restarts <- computeRestarts(cond)
[16:05:17.178]                         for (restart in restarts) {
[16:05:17.178]                           name <- restart$name
[16:05:17.178]                           if (is.null(name)) 
[16:05:17.178]                             next
[16:05:17.178]                           if (!grepl(pattern, name)) 
[16:05:17.178]                             next
[16:05:17.178]                           invokeRestart(restart)
[16:05:17.178]                           muffled <- TRUE
[16:05:17.178]                           break
[16:05:17.178]                         }
[16:05:17.178]                       }
[16:05:17.178]                     }
[16:05:17.178]                     invisible(muffled)
[16:05:17.178]                   }
[16:05:17.178]                   muffleCondition(cond)
[16:05:17.178]                 })
[16:05:17.178]             }))
[16:05:17.178]             future::FutureResult(value = ...future.value$value, 
[16:05:17.178]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.178]                   ...future.rng), globalenv = if (FALSE) 
[16:05:17.178]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:17.178]                     ...future.globalenv.names))
[16:05:17.178]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:17.178]         }, condition = base::local({
[16:05:17.178]             c <- base::c
[16:05:17.178]             inherits <- base::inherits
[16:05:17.178]             invokeRestart <- base::invokeRestart
[16:05:17.178]             length <- base::length
[16:05:17.178]             list <- base::list
[16:05:17.178]             seq.int <- base::seq.int
[16:05:17.178]             signalCondition <- base::signalCondition
[16:05:17.178]             sys.calls <- base::sys.calls
[16:05:17.178]             `[[` <- base::`[[`
[16:05:17.178]             `+` <- base::`+`
[16:05:17.178]             `<<-` <- base::`<<-`
[16:05:17.178]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:17.178]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:17.178]                   3L)]
[16:05:17.178]             }
[16:05:17.178]             function(cond) {
[16:05:17.178]                 is_error <- inherits(cond, "error")
[16:05:17.178]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:17.178]                   NULL)
[16:05:17.178]                 if (is_error) {
[16:05:17.178]                   sessionInformation <- function() {
[16:05:17.178]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:17.178]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:17.178]                       search = base::search(), system = base::Sys.info())
[16:05:17.178]                   }
[16:05:17.178]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.178]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:17.178]                     cond$call), session = sessionInformation(), 
[16:05:17.178]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:17.178]                   signalCondition(cond)
[16:05:17.178]                 }
[16:05:17.178]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:17.178]                 "immediateCondition"))) {
[16:05:17.178]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:17.178]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.178]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:17.178]                   if (TRUE && !signal) {
[16:05:17.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.178]                     {
[16:05:17.178]                       inherits <- base::inherits
[16:05:17.178]                       invokeRestart <- base::invokeRestart
[16:05:17.178]                       is.null <- base::is.null
[16:05:17.178]                       muffled <- FALSE
[16:05:17.178]                       if (inherits(cond, "message")) {
[16:05:17.178]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.178]                         if (muffled) 
[16:05:17.178]                           invokeRestart("muffleMessage")
[16:05:17.178]                       }
[16:05:17.178]                       else if (inherits(cond, "warning")) {
[16:05:17.178]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.178]                         if (muffled) 
[16:05:17.178]                           invokeRestart("muffleWarning")
[16:05:17.178]                       }
[16:05:17.178]                       else if (inherits(cond, "condition")) {
[16:05:17.178]                         if (!is.null(pattern)) {
[16:05:17.178]                           computeRestarts <- base::computeRestarts
[16:05:17.178]                           grepl <- base::grepl
[16:05:17.178]                           restarts <- computeRestarts(cond)
[16:05:17.178]                           for (restart in restarts) {
[16:05:17.178]                             name <- restart$name
[16:05:17.178]                             if (is.null(name)) 
[16:05:17.178]                               next
[16:05:17.178]                             if (!grepl(pattern, name)) 
[16:05:17.178]                               next
[16:05:17.178]                             invokeRestart(restart)
[16:05:17.178]                             muffled <- TRUE
[16:05:17.178]                             break
[16:05:17.178]                           }
[16:05:17.178]                         }
[16:05:17.178]                       }
[16:05:17.178]                       invisible(muffled)
[16:05:17.178]                     }
[16:05:17.178]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.178]                   }
[16:05:17.178]                 }
[16:05:17.178]                 else {
[16:05:17.178]                   if (TRUE) {
[16:05:17.178]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.178]                     {
[16:05:17.178]                       inherits <- base::inherits
[16:05:17.178]                       invokeRestart <- base::invokeRestart
[16:05:17.178]                       is.null <- base::is.null
[16:05:17.178]                       muffled <- FALSE
[16:05:17.178]                       if (inherits(cond, "message")) {
[16:05:17.178]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.178]                         if (muffled) 
[16:05:17.178]                           invokeRestart("muffleMessage")
[16:05:17.178]                       }
[16:05:17.178]                       else if (inherits(cond, "warning")) {
[16:05:17.178]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.178]                         if (muffled) 
[16:05:17.178]                           invokeRestart("muffleWarning")
[16:05:17.178]                       }
[16:05:17.178]                       else if (inherits(cond, "condition")) {
[16:05:17.178]                         if (!is.null(pattern)) {
[16:05:17.178]                           computeRestarts <- base::computeRestarts
[16:05:17.178]                           grepl <- base::grepl
[16:05:17.178]                           restarts <- computeRestarts(cond)
[16:05:17.178]                           for (restart in restarts) {
[16:05:17.178]                             name <- restart$name
[16:05:17.178]                             if (is.null(name)) 
[16:05:17.178]                               next
[16:05:17.178]                             if (!grepl(pattern, name)) 
[16:05:17.178]                               next
[16:05:17.178]                             invokeRestart(restart)
[16:05:17.178]                             muffled <- TRUE
[16:05:17.178]                             break
[16:05:17.178]                           }
[16:05:17.178]                         }
[16:05:17.178]                       }
[16:05:17.178]                       invisible(muffled)
[16:05:17.178]                     }
[16:05:17.178]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.178]                   }
[16:05:17.178]                 }
[16:05:17.178]             }
[16:05:17.178]         }))
[16:05:17.178]     }, error = function(ex) {
[16:05:17.178]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:17.178]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.178]                 ...future.rng), started = ...future.startTime, 
[16:05:17.178]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:17.178]             version = "1.8"), class = "FutureResult")
[16:05:17.178]     }, finally = {
[16:05:17.178]         if (!identical(...future.workdir, getwd())) 
[16:05:17.178]             setwd(...future.workdir)
[16:05:17.178]         {
[16:05:17.178]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:17.178]                 ...future.oldOptions$nwarnings <- NULL
[16:05:17.178]             }
[16:05:17.178]             base::options(...future.oldOptions)
[16:05:17.178]             if (.Platform$OS.type == "windows") {
[16:05:17.178]                 old_names <- names(...future.oldEnvVars)
[16:05:17.178]                 envs <- base::Sys.getenv()
[16:05:17.178]                 names <- names(envs)
[16:05:17.178]                 common <- intersect(names, old_names)
[16:05:17.178]                 added <- setdiff(names, old_names)
[16:05:17.178]                 removed <- setdiff(old_names, names)
[16:05:17.178]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:17.178]                   envs[common]]
[16:05:17.178]                 NAMES <- toupper(changed)
[16:05:17.178]                 args <- list()
[16:05:17.178]                 for (kk in seq_along(NAMES)) {
[16:05:17.178]                   name <- changed[[kk]]
[16:05:17.178]                   NAME <- NAMES[[kk]]
[16:05:17.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.178]                     next
[16:05:17.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.178]                 }
[16:05:17.178]                 NAMES <- toupper(added)
[16:05:17.178]                 for (kk in seq_along(NAMES)) {
[16:05:17.178]                   name <- added[[kk]]
[16:05:17.178]                   NAME <- NAMES[[kk]]
[16:05:17.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.178]                     next
[16:05:17.178]                   args[[name]] <- ""
[16:05:17.178]                 }
[16:05:17.178]                 NAMES <- toupper(removed)
[16:05:17.178]                 for (kk in seq_along(NAMES)) {
[16:05:17.178]                   name <- removed[[kk]]
[16:05:17.178]                   NAME <- NAMES[[kk]]
[16:05:17.178]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.178]                     next
[16:05:17.178]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.178]                 }
[16:05:17.178]                 if (length(args) > 0) 
[16:05:17.178]                   base::do.call(base::Sys.setenv, args = args)
[16:05:17.178]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:17.178]             }
[16:05:17.178]             else {
[16:05:17.178]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:17.178]             }
[16:05:17.178]             {
[16:05:17.178]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:17.178]                   0L) {
[16:05:17.178]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:17.178]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:17.178]                   base::options(opts)
[16:05:17.178]                 }
[16:05:17.178]                 {
[16:05:17.178]                   {
[16:05:17.178]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:17.178]                     NULL
[16:05:17.178]                   }
[16:05:17.178]                   options(future.plan = NULL)
[16:05:17.178]                   if (is.na(NA_character_)) 
[16:05:17.178]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.178]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:17.178]                   future::plan(list(function (..., workers = 2L, 
[16:05:17.178]                     envir = parent.frame()) 
[16:05:17.178]                   strategy(..., workers = workers, envir = envir)), 
[16:05:17.178]                     .cleanup = FALSE, .init = FALSE)
[16:05:17.178]                 }
[16:05:17.178]             }
[16:05:17.178]         }
[16:05:17.178]     })
[16:05:17.178]     if (TRUE) {
[16:05:17.178]         base::sink(type = "output", split = FALSE)
[16:05:17.178]         if (TRUE) {
[16:05:17.178]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:17.178]         }
[16:05:17.178]         else {
[16:05:17.178]             ...future.result["stdout"] <- base::list(NULL)
[16:05:17.178]         }
[16:05:17.178]         base::close(...future.stdout)
[16:05:17.178]         ...future.stdout <- NULL
[16:05:17.178]     }
[16:05:17.178]     ...future.result$conditions <- ...future.conditions
[16:05:17.178]     ...future.result$finished <- base::Sys.time()
[16:05:17.178]     ...future.result
[16:05:17.178] }
[16:05:17.180] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[16:05:17.182] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[16:05:17.235] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.235] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.236] MultisessionFuture started
[16:05:17.236] - Launch lazy future ... done
[16:05:17.236] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[16:05:17.236] result() for ClusterFuture ...
[16:05:17.236] receiveMessageFromWorker() for ClusterFuture ...
[16:05:17.237] - Validating connection of MultisessionFuture
[16:05:17.281] - received message: FutureResult
[16:05:17.281] - Received FutureResult
[16:05:17.281] - Erased future from FutureRegistry
[16:05:17.281] result() for ClusterFuture ...
[16:05:17.281] - result already collected: FutureResult
[16:05:17.281] result() for ClusterFuture ... done
[16:05:17.281] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.282] result() for ClusterFuture ... done
[16:05:17.282] result() for ClusterFuture ...
[16:05:17.282] - result already collected: FutureResult
[16:05:17.282] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 28c28227-32ac-d9ee-1c8b-2c6b7a9a5132
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[16:05:17.282] getGlobalsAndPackages() ...
[16:05:17.282] Searching for globals...
[16:05:17.284] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[16:05:17.284] Searching for globals ... DONE
[16:05:17.284] Resolving globals: FALSE
[16:05:17.286] The total size of the 1 globals is 1.56 MiB (1637560 bytes)
[16:05:17.287] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[16:05:17.287] - globals: [1] ‘f1’
[16:05:17.287] 
[16:05:17.287] getGlobalsAndPackages() ... DONE
[16:05:17.287] run() for ‘Future’ ...
[16:05:17.287] - state: ‘created’
[16:05:17.288] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:17.298] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:17.298] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:17.298]   - Field: ‘node’
[16:05:17.298]   - Field: ‘label’
[16:05:17.298]   - Field: ‘local’
[16:05:17.299]   - Field: ‘owner’
[16:05:17.299]   - Field: ‘envir’
[16:05:17.299]   - Field: ‘workers’
[16:05:17.299]   - Field: ‘packages’
[16:05:17.299]   - Field: ‘gc’
[16:05:17.299]   - Field: ‘conditions’
[16:05:17.299]   - Field: ‘persistent’
[16:05:17.299]   - Field: ‘expr’
[16:05:17.299]   - Field: ‘uuid’
[16:05:17.299]   - Field: ‘seed’
[16:05:17.299]   - Field: ‘version’
[16:05:17.300]   - Field: ‘result’
[16:05:17.300]   - Field: ‘asynchronous’
[16:05:17.300]   - Field: ‘calls’
[16:05:17.300]   - Field: ‘globals’
[16:05:17.300]   - Field: ‘stdout’
[16:05:17.300]   - Field: ‘earlySignal’
[16:05:17.300]   - Field: ‘lazy’
[16:05:17.300]   - Field: ‘state’
[16:05:17.300] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:17.300] - Launch lazy future ...
[16:05:17.301] Packages needed by the future expression (n = 0): <none>
[16:05:17.301] Packages needed by future strategies (n = 0): <none>
[16:05:17.301] {
[16:05:17.301]     {
[16:05:17.301]         {
[16:05:17.301]             ...future.startTime <- base::Sys.time()
[16:05:17.301]             {
[16:05:17.301]                 {
[16:05:17.301]                   {
[16:05:17.301]                     {
[16:05:17.301]                       base::local({
[16:05:17.301]                         has_future <- base::requireNamespace("future", 
[16:05:17.301]                           quietly = TRUE)
[16:05:17.301]                         if (has_future) {
[16:05:17.301]                           ns <- base::getNamespace("future")
[16:05:17.301]                           version <- ns[[".package"]][["version"]]
[16:05:17.301]                           if (is.null(version)) 
[16:05:17.301]                             version <- utils::packageVersion("future")
[16:05:17.301]                         }
[16:05:17.301]                         else {
[16:05:17.301]                           version <- NULL
[16:05:17.301]                         }
[16:05:17.301]                         if (!has_future || version < "1.8.0") {
[16:05:17.301]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:17.301]                             "", base::R.version$version.string), 
[16:05:17.301]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:17.301]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:17.301]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:17.301]                               "release", "version")], collapse = " "), 
[16:05:17.301]                             hostname = base::Sys.info()[["nodename"]])
[16:05:17.301]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:17.301]                             info)
[16:05:17.301]                           info <- base::paste(info, collapse = "; ")
[16:05:17.301]                           if (!has_future) {
[16:05:17.301]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:17.301]                               info)
[16:05:17.301]                           }
[16:05:17.301]                           else {
[16:05:17.301]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:17.301]                               info, version)
[16:05:17.301]                           }
[16:05:17.301]                           base::stop(msg)
[16:05:17.301]                         }
[16:05:17.301]                       })
[16:05:17.301]                     }
[16:05:17.301]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:17.301]                     base::options(mc.cores = 1L)
[16:05:17.301]                   }
[16:05:17.301]                   options(future.plan = NULL)
[16:05:17.301]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.301]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:17.301]                 }
[16:05:17.301]                 ...future.workdir <- getwd()
[16:05:17.301]             }
[16:05:17.301]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:17.301]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:17.301]         }
[16:05:17.301]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:17.301]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:17.301]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:17.301]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:17.301]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:17.301]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:17.301]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:17.301]             base::names(...future.oldOptions))
[16:05:17.301]     }
[16:05:17.301]     if (FALSE) {
[16:05:17.301]     }
[16:05:17.301]     else {
[16:05:17.301]         if (TRUE) {
[16:05:17.301]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:17.301]                 open = "w")
[16:05:17.301]         }
[16:05:17.301]         else {
[16:05:17.301]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:17.301]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:17.301]         }
[16:05:17.301]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:17.301]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:17.301]             base::sink(type = "output", split = FALSE)
[16:05:17.301]             base::close(...future.stdout)
[16:05:17.301]         }, add = TRUE)
[16:05:17.301]     }
[16:05:17.301]     ...future.frame <- base::sys.nframe()
[16:05:17.301]     ...future.conditions <- base::list()
[16:05:17.301]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:17.301]     if (FALSE) {
[16:05:17.301]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:17.301]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:17.301]     }
[16:05:17.301]     ...future.result <- base::tryCatch({
[16:05:17.301]         base::withCallingHandlers({
[16:05:17.301]             ...future.value <- base::withVisible(base::local({
[16:05:17.301]                 ...future.makeSendCondition <- base::local({
[16:05:17.301]                   sendCondition <- NULL
[16:05:17.301]                   function(frame = 1L) {
[16:05:17.301]                     if (is.function(sendCondition)) 
[16:05:17.301]                       return(sendCondition)
[16:05:17.301]                     ns <- getNamespace("parallel")
[16:05:17.301]                     if (exists("sendData", mode = "function", 
[16:05:17.301]                       envir = ns)) {
[16:05:17.301]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:17.301]                         envir = ns)
[16:05:17.301]                       envir <- sys.frame(frame)
[16:05:17.301]                       master <- NULL
[16:05:17.301]                       while (!identical(envir, .GlobalEnv) && 
[16:05:17.301]                         !identical(envir, emptyenv())) {
[16:05:17.301]                         if (exists("master", mode = "list", envir = envir, 
[16:05:17.301]                           inherits = FALSE)) {
[16:05:17.301]                           master <- get("master", mode = "list", 
[16:05:17.301]                             envir = envir, inherits = FALSE)
[16:05:17.301]                           if (inherits(master, c("SOCKnode", 
[16:05:17.301]                             "SOCK0node"))) {
[16:05:17.301]                             sendCondition <<- function(cond) {
[16:05:17.301]                               data <- list(type = "VALUE", value = cond, 
[16:05:17.301]                                 success = TRUE)
[16:05:17.301]                               parallel_sendData(master, data)
[16:05:17.301]                             }
[16:05:17.301]                             return(sendCondition)
[16:05:17.301]                           }
[16:05:17.301]                         }
[16:05:17.301]                         frame <- frame + 1L
[16:05:17.301]                         envir <- sys.frame(frame)
[16:05:17.301]                       }
[16:05:17.301]                     }
[16:05:17.301]                     sendCondition <<- function(cond) NULL
[16:05:17.301]                   }
[16:05:17.301]                 })
[16:05:17.301]                 withCallingHandlers({
[16:05:17.301]                   {
[16:05:17.301]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[16:05:17.301]                     "not-owner"
[16:05:17.301]                   }
[16:05:17.301]                 }, immediateCondition = function(cond) {
[16:05:17.301]                   sendCondition <- ...future.makeSendCondition()
[16:05:17.301]                   sendCondition(cond)
[16:05:17.301]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.301]                   {
[16:05:17.301]                     inherits <- base::inherits
[16:05:17.301]                     invokeRestart <- base::invokeRestart
[16:05:17.301]                     is.null <- base::is.null
[16:05:17.301]                     muffled <- FALSE
[16:05:17.301]                     if (inherits(cond, "message")) {
[16:05:17.301]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:17.301]                       if (muffled) 
[16:05:17.301]                         invokeRestart("muffleMessage")
[16:05:17.301]                     }
[16:05:17.301]                     else if (inherits(cond, "warning")) {
[16:05:17.301]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:17.301]                       if (muffled) 
[16:05:17.301]                         invokeRestart("muffleWarning")
[16:05:17.301]                     }
[16:05:17.301]                     else if (inherits(cond, "condition")) {
[16:05:17.301]                       if (!is.null(pattern)) {
[16:05:17.301]                         computeRestarts <- base::computeRestarts
[16:05:17.301]                         grepl <- base::grepl
[16:05:17.301]                         restarts <- computeRestarts(cond)
[16:05:17.301]                         for (restart in restarts) {
[16:05:17.301]                           name <- restart$name
[16:05:17.301]                           if (is.null(name)) 
[16:05:17.301]                             next
[16:05:17.301]                           if (!grepl(pattern, name)) 
[16:05:17.301]                             next
[16:05:17.301]                           invokeRestart(restart)
[16:05:17.301]                           muffled <- TRUE
[16:05:17.301]                           break
[16:05:17.301]                         }
[16:05:17.301]                       }
[16:05:17.301]                     }
[16:05:17.301]                     invisible(muffled)
[16:05:17.301]                   }
[16:05:17.301]                   muffleCondition(cond)
[16:05:17.301]                 })
[16:05:17.301]             }))
[16:05:17.301]             future::FutureResult(value = ...future.value$value, 
[16:05:17.301]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.301]                   ...future.rng), globalenv = if (FALSE) 
[16:05:17.301]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:17.301]                     ...future.globalenv.names))
[16:05:17.301]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:17.301]         }, condition = base::local({
[16:05:17.301]             c <- base::c
[16:05:17.301]             inherits <- base::inherits
[16:05:17.301]             invokeRestart <- base::invokeRestart
[16:05:17.301]             length <- base::length
[16:05:17.301]             list <- base::list
[16:05:17.301]             seq.int <- base::seq.int
[16:05:17.301]             signalCondition <- base::signalCondition
[16:05:17.301]             sys.calls <- base::sys.calls
[16:05:17.301]             `[[` <- base::`[[`
[16:05:17.301]             `+` <- base::`+`
[16:05:17.301]             `<<-` <- base::`<<-`
[16:05:17.301]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:17.301]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:17.301]                   3L)]
[16:05:17.301]             }
[16:05:17.301]             function(cond) {
[16:05:17.301]                 is_error <- inherits(cond, "error")
[16:05:17.301]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:17.301]                   NULL)
[16:05:17.301]                 if (is_error) {
[16:05:17.301]                   sessionInformation <- function() {
[16:05:17.301]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:17.301]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:17.301]                       search = base::search(), system = base::Sys.info())
[16:05:17.301]                   }
[16:05:17.301]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.301]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:17.301]                     cond$call), session = sessionInformation(), 
[16:05:17.301]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:17.301]                   signalCondition(cond)
[16:05:17.301]                 }
[16:05:17.301]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:17.301]                 "immediateCondition"))) {
[16:05:17.301]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:17.301]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.301]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:17.301]                   if (TRUE && !signal) {
[16:05:17.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.301]                     {
[16:05:17.301]                       inherits <- base::inherits
[16:05:17.301]                       invokeRestart <- base::invokeRestart
[16:05:17.301]                       is.null <- base::is.null
[16:05:17.301]                       muffled <- FALSE
[16:05:17.301]                       if (inherits(cond, "message")) {
[16:05:17.301]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.301]                         if (muffled) 
[16:05:17.301]                           invokeRestart("muffleMessage")
[16:05:17.301]                       }
[16:05:17.301]                       else if (inherits(cond, "warning")) {
[16:05:17.301]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.301]                         if (muffled) 
[16:05:17.301]                           invokeRestart("muffleWarning")
[16:05:17.301]                       }
[16:05:17.301]                       else if (inherits(cond, "condition")) {
[16:05:17.301]                         if (!is.null(pattern)) {
[16:05:17.301]                           computeRestarts <- base::computeRestarts
[16:05:17.301]                           grepl <- base::grepl
[16:05:17.301]                           restarts <- computeRestarts(cond)
[16:05:17.301]                           for (restart in restarts) {
[16:05:17.301]                             name <- restart$name
[16:05:17.301]                             if (is.null(name)) 
[16:05:17.301]                               next
[16:05:17.301]                             if (!grepl(pattern, name)) 
[16:05:17.301]                               next
[16:05:17.301]                             invokeRestart(restart)
[16:05:17.301]                             muffled <- TRUE
[16:05:17.301]                             break
[16:05:17.301]                           }
[16:05:17.301]                         }
[16:05:17.301]                       }
[16:05:17.301]                       invisible(muffled)
[16:05:17.301]                     }
[16:05:17.301]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.301]                   }
[16:05:17.301]                 }
[16:05:17.301]                 else {
[16:05:17.301]                   if (TRUE) {
[16:05:17.301]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.301]                     {
[16:05:17.301]                       inherits <- base::inherits
[16:05:17.301]                       invokeRestart <- base::invokeRestart
[16:05:17.301]                       is.null <- base::is.null
[16:05:17.301]                       muffled <- FALSE
[16:05:17.301]                       if (inherits(cond, "message")) {
[16:05:17.301]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.301]                         if (muffled) 
[16:05:17.301]                           invokeRestart("muffleMessage")
[16:05:17.301]                       }
[16:05:17.301]                       else if (inherits(cond, "warning")) {
[16:05:17.301]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.301]                         if (muffled) 
[16:05:17.301]                           invokeRestart("muffleWarning")
[16:05:17.301]                       }
[16:05:17.301]                       else if (inherits(cond, "condition")) {
[16:05:17.301]                         if (!is.null(pattern)) {
[16:05:17.301]                           computeRestarts <- base::computeRestarts
[16:05:17.301]                           grepl <- base::grepl
[16:05:17.301]                           restarts <- computeRestarts(cond)
[16:05:17.301]                           for (restart in restarts) {
[16:05:17.301]                             name <- restart$name
[16:05:17.301]                             if (is.null(name)) 
[16:05:17.301]                               next
[16:05:17.301]                             if (!grepl(pattern, name)) 
[16:05:17.301]                               next
[16:05:17.301]                             invokeRestart(restart)
[16:05:17.301]                             muffled <- TRUE
[16:05:17.301]                             break
[16:05:17.301]                           }
[16:05:17.301]                         }
[16:05:17.301]                       }
[16:05:17.301]                       invisible(muffled)
[16:05:17.301]                     }
[16:05:17.301]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.301]                   }
[16:05:17.301]                 }
[16:05:17.301]             }
[16:05:17.301]         }))
[16:05:17.301]     }, error = function(ex) {
[16:05:17.301]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:17.301]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.301]                 ...future.rng), started = ...future.startTime, 
[16:05:17.301]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:17.301]             version = "1.8"), class = "FutureResult")
[16:05:17.301]     }, finally = {
[16:05:17.301]         if (!identical(...future.workdir, getwd())) 
[16:05:17.301]             setwd(...future.workdir)
[16:05:17.301]         {
[16:05:17.301]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:17.301]                 ...future.oldOptions$nwarnings <- NULL
[16:05:17.301]             }
[16:05:17.301]             base::options(...future.oldOptions)
[16:05:17.301]             if (.Platform$OS.type == "windows") {
[16:05:17.301]                 old_names <- names(...future.oldEnvVars)
[16:05:17.301]                 envs <- base::Sys.getenv()
[16:05:17.301]                 names <- names(envs)
[16:05:17.301]                 common <- intersect(names, old_names)
[16:05:17.301]                 added <- setdiff(names, old_names)
[16:05:17.301]                 removed <- setdiff(old_names, names)
[16:05:17.301]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:17.301]                   envs[common]]
[16:05:17.301]                 NAMES <- toupper(changed)
[16:05:17.301]                 args <- list()
[16:05:17.301]                 for (kk in seq_along(NAMES)) {
[16:05:17.301]                   name <- changed[[kk]]
[16:05:17.301]                   NAME <- NAMES[[kk]]
[16:05:17.301]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.301]                     next
[16:05:17.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.301]                 }
[16:05:17.301]                 NAMES <- toupper(added)
[16:05:17.301]                 for (kk in seq_along(NAMES)) {
[16:05:17.301]                   name <- added[[kk]]
[16:05:17.301]                   NAME <- NAMES[[kk]]
[16:05:17.301]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.301]                     next
[16:05:17.301]                   args[[name]] <- ""
[16:05:17.301]                 }
[16:05:17.301]                 NAMES <- toupper(removed)
[16:05:17.301]                 for (kk in seq_along(NAMES)) {
[16:05:17.301]                   name <- removed[[kk]]
[16:05:17.301]                   NAME <- NAMES[[kk]]
[16:05:17.301]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.301]                     next
[16:05:17.301]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.301]                 }
[16:05:17.301]                 if (length(args) > 0) 
[16:05:17.301]                   base::do.call(base::Sys.setenv, args = args)
[16:05:17.301]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:17.301]             }
[16:05:17.301]             else {
[16:05:17.301]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:17.301]             }
[16:05:17.301]             {
[16:05:17.301]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:17.301]                   0L) {
[16:05:17.301]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:17.301]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:17.301]                   base::options(opts)
[16:05:17.301]                 }
[16:05:17.301]                 {
[16:05:17.301]                   {
[16:05:17.301]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:17.301]                     NULL
[16:05:17.301]                   }
[16:05:17.301]                   options(future.plan = NULL)
[16:05:17.301]                   if (is.na(NA_character_)) 
[16:05:17.301]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.301]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:17.301]                   future::plan(list(function (..., workers = 2L, 
[16:05:17.301]                     envir = parent.frame()) 
[16:05:17.301]                   strategy(..., workers = workers, envir = envir)), 
[16:05:17.301]                     .cleanup = FALSE, .init = FALSE)
[16:05:17.301]                 }
[16:05:17.301]             }
[16:05:17.301]         }
[16:05:17.301]     })
[16:05:17.301]     if (TRUE) {
[16:05:17.301]         base::sink(type = "output", split = FALSE)
[16:05:17.301]         if (TRUE) {
[16:05:17.301]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:17.301]         }
[16:05:17.301]         else {
[16:05:17.301]             ...future.result["stdout"] <- base::list(NULL)
[16:05:17.301]         }
[16:05:17.301]         base::close(...future.stdout)
[16:05:17.301]         ...future.stdout <- NULL
[16:05:17.301]     }
[16:05:17.301]     ...future.result$conditions <- ...future.conditions
[16:05:17.301]     ...future.result$finished <- base::Sys.time()
[16:05:17.301]     ...future.result
[16:05:17.301] }
[16:05:17.304] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[16:05:17.308] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[16:05:17.359] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.359] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[16:05:17.360] MultisessionFuture started
[16:05:17.360] - Launch lazy future ... done
[16:05:17.360] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[16:05:17.360] result() for ClusterFuture ...
[16:05:17.360] receiveMessageFromWorker() for ClusterFuture ...
[16:05:17.361] - Validating connection of MultisessionFuture
[16:05:17.405] - received message: FutureResult
[16:05:17.405] - Received FutureResult
[16:05:17.405] - Erased future from FutureRegistry
[16:05:17.405] result() for ClusterFuture ...
[16:05:17.405] - result already collected: FutureResult
[16:05:17.405] result() for ClusterFuture ... done
[16:05:17.405] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.406] result() for ClusterFuture ... done
[16:05:17.406] result() for ClusterFuture ...
[16:05:17.406] - result already collected: FutureResult
[16:05:17.406] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[16:05:17.406] getGlobalsAndPackages() ...
[16:05:17.406] Searching for globals...
[16:05:17.407] - globals found: [1] ‘{’
[16:05:17.407] Searching for globals ... DONE
[16:05:17.407] Resolving globals: FALSE
[16:05:17.408] 
[16:05:17.408] 
[16:05:17.408] getGlobalsAndPackages() ... DONE
[16:05:17.408] run() for ‘Future’ ...
[16:05:17.408] - state: ‘created’
[16:05:17.408] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:17.419] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:17.419] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:17.419]   - Field: ‘node’
[16:05:17.419]   - Field: ‘label’
[16:05:17.419]   - Field: ‘local’
[16:05:17.419]   - Field: ‘owner’
[16:05:17.419]   - Field: ‘envir’
[16:05:17.419]   - Field: ‘workers’
[16:05:17.420]   - Field: ‘packages’
[16:05:17.420]   - Field: ‘gc’
[16:05:17.420]   - Field: ‘conditions’
[16:05:17.420]   - Field: ‘persistent’
[16:05:17.420]   - Field: ‘expr’
[16:05:17.420]   - Field: ‘uuid’
[16:05:17.420]   - Field: ‘seed’
[16:05:17.420]   - Field: ‘version’
[16:05:17.420]   - Field: ‘result’
[16:05:17.420]   - Field: ‘asynchronous’
[16:05:17.420]   - Field: ‘calls’
[16:05:17.421]   - Field: ‘globals’
[16:05:17.421]   - Field: ‘stdout’
[16:05:17.421]   - Field: ‘earlySignal’
[16:05:17.421]   - Field: ‘lazy’
[16:05:17.421]   - Field: ‘state’
[16:05:17.421] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:17.421] - Launch lazy future ...
[16:05:17.421] Packages needed by the future expression (n = 0): <none>
[16:05:17.422] Packages needed by future strategies (n = 0): <none>
[16:05:17.422] {
[16:05:17.422]     {
[16:05:17.422]         {
[16:05:17.422]             ...future.startTime <- base::Sys.time()
[16:05:17.422]             {
[16:05:17.422]                 {
[16:05:17.422]                   {
[16:05:17.422]                     {
[16:05:17.422]                       base::local({
[16:05:17.422]                         has_future <- base::requireNamespace("future", 
[16:05:17.422]                           quietly = TRUE)
[16:05:17.422]                         if (has_future) {
[16:05:17.422]                           ns <- base::getNamespace("future")
[16:05:17.422]                           version <- ns[[".package"]][["version"]]
[16:05:17.422]                           if (is.null(version)) 
[16:05:17.422]                             version <- utils::packageVersion("future")
[16:05:17.422]                         }
[16:05:17.422]                         else {
[16:05:17.422]                           version <- NULL
[16:05:17.422]                         }
[16:05:17.422]                         if (!has_future || version < "1.8.0") {
[16:05:17.422]                           info <- base::c(r_version = base::gsub("R version ", 
[16:05:17.422]                             "", base::R.version$version.string), 
[16:05:17.422]                             platform = base::sprintf("%s (%s-bit)", 
[16:05:17.422]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[16:05:17.422]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:17.422]                               "release", "version")], collapse = " "), 
[16:05:17.422]                             hostname = base::Sys.info()[["nodename"]])
[16:05:17.422]                           info <- base::sprintf("%s: %s", base::names(info), 
[16:05:17.422]                             info)
[16:05:17.422]                           info <- base::paste(info, collapse = "; ")
[16:05:17.422]                           if (!has_future) {
[16:05:17.422]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:17.422]                               info)
[16:05:17.422]                           }
[16:05:17.422]                           else {
[16:05:17.422]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:17.422]                               info, version)
[16:05:17.422]                           }
[16:05:17.422]                           base::stop(msg)
[16:05:17.422]                         }
[16:05:17.422]                       })
[16:05:17.422]                     }
[16:05:17.422]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:17.422]                     base::options(mc.cores = 1L)
[16:05:17.422]                   }
[16:05:17.422]                   options(future.plan = NULL)
[16:05:17.422]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.422]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:17.422]                 }
[16:05:17.422]                 ...future.workdir <- getwd()
[16:05:17.422]             }
[16:05:17.422]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:17.422]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:17.422]         }
[16:05:17.422]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:17.422]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:17.422]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:17.422]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:17.422]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:17.422]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:17.422]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:17.422]             base::names(...future.oldOptions))
[16:05:17.422]     }
[16:05:17.422]     if (FALSE) {
[16:05:17.422]     }
[16:05:17.422]     else {
[16:05:17.422]         if (TRUE) {
[16:05:17.422]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:17.422]                 open = "w")
[16:05:17.422]         }
[16:05:17.422]         else {
[16:05:17.422]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:17.422]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:17.422]         }
[16:05:17.422]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:17.422]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:17.422]             base::sink(type = "output", split = FALSE)
[16:05:17.422]             base::close(...future.stdout)
[16:05:17.422]         }, add = TRUE)
[16:05:17.422]     }
[16:05:17.422]     ...future.frame <- base::sys.nframe()
[16:05:17.422]     ...future.conditions <- base::list()
[16:05:17.422]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:17.422]     if (FALSE) {
[16:05:17.422]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:17.422]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:17.422]     }
[16:05:17.422]     ...future.result <- base::tryCatch({
[16:05:17.422]         base::withCallingHandlers({
[16:05:17.422]             ...future.value <- base::withVisible(base::local({
[16:05:17.422]                 ...future.makeSendCondition <- base::local({
[16:05:17.422]                   sendCondition <- NULL
[16:05:17.422]                   function(frame = 1L) {
[16:05:17.422]                     if (is.function(sendCondition)) 
[16:05:17.422]                       return(sendCondition)
[16:05:17.422]                     ns <- getNamespace("parallel")
[16:05:17.422]                     if (exists("sendData", mode = "function", 
[16:05:17.422]                       envir = ns)) {
[16:05:17.422]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:17.422]                         envir = ns)
[16:05:17.422]                       envir <- sys.frame(frame)
[16:05:17.422]                       master <- NULL
[16:05:17.422]                       while (!identical(envir, .GlobalEnv) && 
[16:05:17.422]                         !identical(envir, emptyenv())) {
[16:05:17.422]                         if (exists("master", mode = "list", envir = envir, 
[16:05:17.422]                           inherits = FALSE)) {
[16:05:17.422]                           master <- get("master", mode = "list", 
[16:05:17.422]                             envir = envir, inherits = FALSE)
[16:05:17.422]                           if (inherits(master, c("SOCKnode", 
[16:05:17.422]                             "SOCK0node"))) {
[16:05:17.422]                             sendCondition <<- function(cond) {
[16:05:17.422]                               data <- list(type = "VALUE", value = cond, 
[16:05:17.422]                                 success = TRUE)
[16:05:17.422]                               parallel_sendData(master, data)
[16:05:17.422]                             }
[16:05:17.422]                             return(sendCondition)
[16:05:17.422]                           }
[16:05:17.422]                         }
[16:05:17.422]                         frame <- frame + 1L
[16:05:17.422]                         envir <- sys.frame(frame)
[16:05:17.422]                       }
[16:05:17.422]                     }
[16:05:17.422]                     sendCondition <<- function(cond) NULL
[16:05:17.422]                   }
[16:05:17.422]                 })
[16:05:17.422]                 withCallingHandlers({
[16:05:17.422]                   {
[16:05:17.422]                     42L
[16:05:17.422]                   }
[16:05:17.422]                 }, immediateCondition = function(cond) {
[16:05:17.422]                   sendCondition <- ...future.makeSendCondition()
[16:05:17.422]                   sendCondition(cond)
[16:05:17.422]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.422]                   {
[16:05:17.422]                     inherits <- base::inherits
[16:05:17.422]                     invokeRestart <- base::invokeRestart
[16:05:17.422]                     is.null <- base::is.null
[16:05:17.422]                     muffled <- FALSE
[16:05:17.422]                     if (inherits(cond, "message")) {
[16:05:17.422]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:17.422]                       if (muffled) 
[16:05:17.422]                         invokeRestart("muffleMessage")
[16:05:17.422]                     }
[16:05:17.422]                     else if (inherits(cond, "warning")) {
[16:05:17.422]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:17.422]                       if (muffled) 
[16:05:17.422]                         invokeRestart("muffleWarning")
[16:05:17.422]                     }
[16:05:17.422]                     else if (inherits(cond, "condition")) {
[16:05:17.422]                       if (!is.null(pattern)) {
[16:05:17.422]                         computeRestarts <- base::computeRestarts
[16:05:17.422]                         grepl <- base::grepl
[16:05:17.422]                         restarts <- computeRestarts(cond)
[16:05:17.422]                         for (restart in restarts) {
[16:05:17.422]                           name <- restart$name
[16:05:17.422]                           if (is.null(name)) 
[16:05:17.422]                             next
[16:05:17.422]                           if (!grepl(pattern, name)) 
[16:05:17.422]                             next
[16:05:17.422]                           invokeRestart(restart)
[16:05:17.422]                           muffled <- TRUE
[16:05:17.422]                           break
[16:05:17.422]                         }
[16:05:17.422]                       }
[16:05:17.422]                     }
[16:05:17.422]                     invisible(muffled)
[16:05:17.422]                   }
[16:05:17.422]                   muffleCondition(cond)
[16:05:17.422]                 })
[16:05:17.422]             }))
[16:05:17.422]             future::FutureResult(value = ...future.value$value, 
[16:05:17.422]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.422]                   ...future.rng), globalenv = if (FALSE) 
[16:05:17.422]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:17.422]                     ...future.globalenv.names))
[16:05:17.422]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:17.422]         }, condition = base::local({
[16:05:17.422]             c <- base::c
[16:05:17.422]             inherits <- base::inherits
[16:05:17.422]             invokeRestart <- base::invokeRestart
[16:05:17.422]             length <- base::length
[16:05:17.422]             list <- base::list
[16:05:17.422]             seq.int <- base::seq.int
[16:05:17.422]             signalCondition <- base::signalCondition
[16:05:17.422]             sys.calls <- base::sys.calls
[16:05:17.422]             `[[` <- base::`[[`
[16:05:17.422]             `+` <- base::`+`
[16:05:17.422]             `<<-` <- base::`<<-`
[16:05:17.422]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:17.422]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:17.422]                   3L)]
[16:05:17.422]             }
[16:05:17.422]             function(cond) {
[16:05:17.422]                 is_error <- inherits(cond, "error")
[16:05:17.422]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:17.422]                   NULL)
[16:05:17.422]                 if (is_error) {
[16:05:17.422]                   sessionInformation <- function() {
[16:05:17.422]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:17.422]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:17.422]                       search = base::search(), system = base::Sys.info())
[16:05:17.422]                   }
[16:05:17.422]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.422]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:17.422]                     cond$call), session = sessionInformation(), 
[16:05:17.422]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:17.422]                   signalCondition(cond)
[16:05:17.422]                 }
[16:05:17.422]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:17.422]                 "immediateCondition"))) {
[16:05:17.422]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:17.422]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.422]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:17.422]                   if (TRUE && !signal) {
[16:05:17.422]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.422]                     {
[16:05:17.422]                       inherits <- base::inherits
[16:05:17.422]                       invokeRestart <- base::invokeRestart
[16:05:17.422]                       is.null <- base::is.null
[16:05:17.422]                       muffled <- FALSE
[16:05:17.422]                       if (inherits(cond, "message")) {
[16:05:17.422]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.422]                         if (muffled) 
[16:05:17.422]                           invokeRestart("muffleMessage")
[16:05:17.422]                       }
[16:05:17.422]                       else if (inherits(cond, "warning")) {
[16:05:17.422]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.422]                         if (muffled) 
[16:05:17.422]                           invokeRestart("muffleWarning")
[16:05:17.422]                       }
[16:05:17.422]                       else if (inherits(cond, "condition")) {
[16:05:17.422]                         if (!is.null(pattern)) {
[16:05:17.422]                           computeRestarts <- base::computeRestarts
[16:05:17.422]                           grepl <- base::grepl
[16:05:17.422]                           restarts <- computeRestarts(cond)
[16:05:17.422]                           for (restart in restarts) {
[16:05:17.422]                             name <- restart$name
[16:05:17.422]                             if (is.null(name)) 
[16:05:17.422]                               next
[16:05:17.422]                             if (!grepl(pattern, name)) 
[16:05:17.422]                               next
[16:05:17.422]                             invokeRestart(restart)
[16:05:17.422]                             muffled <- TRUE
[16:05:17.422]                             break
[16:05:17.422]                           }
[16:05:17.422]                         }
[16:05:17.422]                       }
[16:05:17.422]                       invisible(muffled)
[16:05:17.422]                     }
[16:05:17.422]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.422]                   }
[16:05:17.422]                 }
[16:05:17.422]                 else {
[16:05:17.422]                   if (TRUE) {
[16:05:17.422]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.422]                     {
[16:05:17.422]                       inherits <- base::inherits
[16:05:17.422]                       invokeRestart <- base::invokeRestart
[16:05:17.422]                       is.null <- base::is.null
[16:05:17.422]                       muffled <- FALSE
[16:05:17.422]                       if (inherits(cond, "message")) {
[16:05:17.422]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.422]                         if (muffled) 
[16:05:17.422]                           invokeRestart("muffleMessage")
[16:05:17.422]                       }
[16:05:17.422]                       else if (inherits(cond, "warning")) {
[16:05:17.422]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.422]                         if (muffled) 
[16:05:17.422]                           invokeRestart("muffleWarning")
[16:05:17.422]                       }
[16:05:17.422]                       else if (inherits(cond, "condition")) {
[16:05:17.422]                         if (!is.null(pattern)) {
[16:05:17.422]                           computeRestarts <- base::computeRestarts
[16:05:17.422]                           grepl <- base::grepl
[16:05:17.422]                           restarts <- computeRestarts(cond)
[16:05:17.422]                           for (restart in restarts) {
[16:05:17.422]                             name <- restart$name
[16:05:17.422]                             if (is.null(name)) 
[16:05:17.422]                               next
[16:05:17.422]                             if (!grepl(pattern, name)) 
[16:05:17.422]                               next
[16:05:17.422]                             invokeRestart(restart)
[16:05:17.422]                             muffled <- TRUE
[16:05:17.422]                             break
[16:05:17.422]                           }
[16:05:17.422]                         }
[16:05:17.422]                       }
[16:05:17.422]                       invisible(muffled)
[16:05:17.422]                     }
[16:05:17.422]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.422]                   }
[16:05:17.422]                 }
[16:05:17.422]             }
[16:05:17.422]         }))
[16:05:17.422]     }, error = function(ex) {
[16:05:17.422]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:17.422]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.422]                 ...future.rng), started = ...future.startTime, 
[16:05:17.422]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:17.422]             version = "1.8"), class = "FutureResult")
[16:05:17.422]     }, finally = {
[16:05:17.422]         if (!identical(...future.workdir, getwd())) 
[16:05:17.422]             setwd(...future.workdir)
[16:05:17.422]         {
[16:05:17.422]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:17.422]                 ...future.oldOptions$nwarnings <- NULL
[16:05:17.422]             }
[16:05:17.422]             base::options(...future.oldOptions)
[16:05:17.422]             if (.Platform$OS.type == "windows") {
[16:05:17.422]                 old_names <- names(...future.oldEnvVars)
[16:05:17.422]                 envs <- base::Sys.getenv()
[16:05:17.422]                 names <- names(envs)
[16:05:17.422]                 common <- intersect(names, old_names)
[16:05:17.422]                 added <- setdiff(names, old_names)
[16:05:17.422]                 removed <- setdiff(old_names, names)
[16:05:17.422]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:17.422]                   envs[common]]
[16:05:17.422]                 NAMES <- toupper(changed)
[16:05:17.422]                 args <- list()
[16:05:17.422]                 for (kk in seq_along(NAMES)) {
[16:05:17.422]                   name <- changed[[kk]]
[16:05:17.422]                   NAME <- NAMES[[kk]]
[16:05:17.422]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.422]                     next
[16:05:17.422]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.422]                 }
[16:05:17.422]                 NAMES <- toupper(added)
[16:05:17.422]                 for (kk in seq_along(NAMES)) {
[16:05:17.422]                   name <- added[[kk]]
[16:05:17.422]                   NAME <- NAMES[[kk]]
[16:05:17.422]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.422]                     next
[16:05:17.422]                   args[[name]] <- ""
[16:05:17.422]                 }
[16:05:17.422]                 NAMES <- toupper(removed)
[16:05:17.422]                 for (kk in seq_along(NAMES)) {
[16:05:17.422]                   name <- removed[[kk]]
[16:05:17.422]                   NAME <- NAMES[[kk]]
[16:05:17.422]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.422]                     next
[16:05:17.422]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.422]                 }
[16:05:17.422]                 if (length(args) > 0) 
[16:05:17.422]                   base::do.call(base::Sys.setenv, args = args)
[16:05:17.422]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:17.422]             }
[16:05:17.422]             else {
[16:05:17.422]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:17.422]             }
[16:05:17.422]             {
[16:05:17.422]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:17.422]                   0L) {
[16:05:17.422]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:17.422]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:17.422]                   base::options(opts)
[16:05:17.422]                 }
[16:05:17.422]                 {
[16:05:17.422]                   {
[16:05:17.422]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:17.422]                     NULL
[16:05:17.422]                   }
[16:05:17.422]                   options(future.plan = NULL)
[16:05:17.422]                   if (is.na(NA_character_)) 
[16:05:17.422]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.422]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:17.422]                   future::plan(list(function (..., workers = 2L, 
[16:05:17.422]                     envir = parent.frame()) 
[16:05:17.422]                   strategy(..., workers = workers, envir = envir)), 
[16:05:17.422]                     .cleanup = FALSE, .init = FALSE)
[16:05:17.422]                 }
[16:05:17.422]             }
[16:05:17.422]         }
[16:05:17.422]     })
[16:05:17.422]     if (TRUE) {
[16:05:17.422]         base::sink(type = "output", split = FALSE)
[16:05:17.422]         if (TRUE) {
[16:05:17.422]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:17.422]         }
[16:05:17.422]         else {
[16:05:17.422]             ...future.result["stdout"] <- base::list(NULL)
[16:05:17.422]         }
[16:05:17.422]         base::close(...future.stdout)
[16:05:17.422]         ...future.stdout <- NULL
[16:05:17.422]     }
[16:05:17.422]     ...future.result$conditions <- ...future.conditions
[16:05:17.422]     ...future.result$finished <- base::Sys.time()
[16:05:17.422]     ...future.result
[16:05:17.422] }
[16:05:17.425] MultisessionFuture started
[16:05:17.425] - Launch lazy future ... done
[16:05:17.425] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[16:05:17.426] getGlobalsAndPackages() ...
[16:05:17.426] Searching for globals...
[16:05:17.427] - globals found: [3] ‘{’, ‘value’, ‘f1’
[16:05:17.427] Searching for globals ... DONE
[16:05:17.427] Resolving globals: FALSE
[16:05:17.429] The total size of the 1 globals is 1.55 MiB (1629712 bytes)
[16:05:17.430] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.55 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.55 MiB of class ‘environment’)
[16:05:17.430] - globals: [1] ‘f1’
[16:05:17.430] - packages: [1] ‘future’
[16:05:17.430] getGlobalsAndPackages() ... DONE
[16:05:17.430] run() for ‘Future’ ...
[16:05:17.430] - state: ‘created’
[16:05:17.430] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[16:05:17.441] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[16:05:17.441] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[16:05:17.441]   - Field: ‘node’
[16:05:17.442]   - Field: ‘label’
[16:05:17.442]   - Field: ‘local’
[16:05:17.442]   - Field: ‘owner’
[16:05:17.442]   - Field: ‘envir’
[16:05:17.442]   - Field: ‘workers’
[16:05:17.442]   - Field: ‘packages’
[16:05:17.442]   - Field: ‘gc’
[16:05:17.442]   - Field: ‘conditions’
[16:05:17.442]   - Field: ‘persistent’
[16:05:17.442]   - Field: ‘expr’
[16:05:17.443]   - Field: ‘uuid’
[16:05:17.443]   - Field: ‘seed’
[16:05:17.443]   - Field: ‘version’
[16:05:17.443]   - Field: ‘result’
[16:05:17.443]   - Field: ‘asynchronous’
[16:05:17.443]   - Field: ‘calls’
[16:05:17.443]   - Field: ‘globals’
[16:05:17.443]   - Field: ‘stdout’
[16:05:17.443]   - Field: ‘earlySignal’
[16:05:17.443]   - Field: ‘lazy’
[16:05:17.443]   - Field: ‘state’
[16:05:17.444] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[16:05:17.444] - Launch lazy future ...
[16:05:17.444] Packages needed by the future expression (n = 1): ‘future’
[16:05:17.444] Packages needed by future strategies (n = 0): <none>
[16:05:17.445] {
[16:05:17.445]     {
[16:05:17.445]         {
[16:05:17.445]             ...future.startTime <- base::Sys.time()
[16:05:17.445]             {
[16:05:17.445]                 {
[16:05:17.445]                   {
[16:05:17.445]                     {
[16:05:17.445]                       {
[16:05:17.445]                         base::local({
[16:05:17.445]                           has_future <- base::requireNamespace("future", 
[16:05:17.445]                             quietly = TRUE)
[16:05:17.445]                           if (has_future) {
[16:05:17.445]                             ns <- base::getNamespace("future")
[16:05:17.445]                             version <- ns[[".package"]][["version"]]
[16:05:17.445]                             if (is.null(version)) 
[16:05:17.445]                               version <- utils::packageVersion("future")
[16:05:17.445]                           }
[16:05:17.445]                           else {
[16:05:17.445]                             version <- NULL
[16:05:17.445]                           }
[16:05:17.445]                           if (!has_future || version < "1.8.0") {
[16:05:17.445]                             info <- base::c(r_version = base::gsub("R version ", 
[16:05:17.445]                               "", base::R.version$version.string), 
[16:05:17.445]                               platform = base::sprintf("%s (%s-bit)", 
[16:05:17.445]                                 base::R.version$platform, 8 * 
[16:05:17.445]                                   base::.Machine$sizeof.pointer), 
[16:05:17.445]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[16:05:17.445]                                 "release", "version")], collapse = " "), 
[16:05:17.445]                               hostname = base::Sys.info()[["nodename"]])
[16:05:17.445]                             info <- base::sprintf("%s: %s", base::names(info), 
[16:05:17.445]                               info)
[16:05:17.445]                             info <- base::paste(info, collapse = "; ")
[16:05:17.445]                             if (!has_future) {
[16:05:17.445]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[16:05:17.445]                                 info)
[16:05:17.445]                             }
[16:05:17.445]                             else {
[16:05:17.445]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[16:05:17.445]                                 info, version)
[16:05:17.445]                             }
[16:05:17.445]                             base::stop(msg)
[16:05:17.445]                           }
[16:05:17.445]                         })
[16:05:17.445]                       }
[16:05:17.445]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[16:05:17.445]                       base::options(mc.cores = 1L)
[16:05:17.445]                     }
[16:05:17.445]                     base::local({
[16:05:17.445]                       for (pkg in "future") {
[16:05:17.445]                         base::loadNamespace(pkg)
[16:05:17.445]                         base::library(pkg, character.only = TRUE)
[16:05:17.445]                       }
[16:05:17.445]                     })
[16:05:17.445]                   }
[16:05:17.445]                   options(future.plan = NULL)
[16:05:17.445]                   Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.445]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[16:05:17.445]                 }
[16:05:17.445]                 ...future.workdir <- getwd()
[16:05:17.445]             }
[16:05:17.445]             ...future.oldOptions <- base::as.list(base::.Options)
[16:05:17.445]             ...future.oldEnvVars <- base::Sys.getenv()
[16:05:17.445]         }
[16:05:17.445]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[16:05:17.445]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[16:05:17.445]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[16:05:17.445]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[16:05:17.445]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[16:05:17.445]             future.stdout.windows.reencode = NULL, width = 80L)
[16:05:17.445]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[16:05:17.445]             base::names(...future.oldOptions))
[16:05:17.445]     }
[16:05:17.445]     if (FALSE) {
[16:05:17.445]     }
[16:05:17.445]     else {
[16:05:17.445]         if (TRUE) {
[16:05:17.445]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[16:05:17.445]                 open = "w")
[16:05:17.445]         }
[16:05:17.445]         else {
[16:05:17.445]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[16:05:17.445]                 windows = "NUL", "/dev/null"), open = "w")
[16:05:17.445]         }
[16:05:17.445]         base::sink(...future.stdout, type = "output", split = FALSE)
[16:05:17.445]         base::on.exit(if (!base::is.null(...future.stdout)) {
[16:05:17.445]             base::sink(type = "output", split = FALSE)
[16:05:17.445]             base::close(...future.stdout)
[16:05:17.445]         }, add = TRUE)
[16:05:17.445]     }
[16:05:17.445]     ...future.frame <- base::sys.nframe()
[16:05:17.445]     ...future.conditions <- base::list()
[16:05:17.445]     ...future.rng <- base::globalenv()$.Random.seed
[16:05:17.445]     if (FALSE) {
[16:05:17.445]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[16:05:17.445]             "...future.value", "...future.globalenv.names", ".Random.seed")
[16:05:17.445]     }
[16:05:17.445]     ...future.result <- base::tryCatch({
[16:05:17.445]         base::withCallingHandlers({
[16:05:17.445]             ...future.value <- base::withVisible(base::local({
[16:05:17.445]                 ...future.makeSendCondition <- base::local({
[16:05:17.445]                   sendCondition <- NULL
[16:05:17.445]                   function(frame = 1L) {
[16:05:17.445]                     if (is.function(sendCondition)) 
[16:05:17.445]                       return(sendCondition)
[16:05:17.445]                     ns <- getNamespace("parallel")
[16:05:17.445]                     if (exists("sendData", mode = "function", 
[16:05:17.445]                       envir = ns)) {
[16:05:17.445]                       parallel_sendData <- get("sendData", mode = "function", 
[16:05:17.445]                         envir = ns)
[16:05:17.445]                       envir <- sys.frame(frame)
[16:05:17.445]                       master <- NULL
[16:05:17.445]                       while (!identical(envir, .GlobalEnv) && 
[16:05:17.445]                         !identical(envir, emptyenv())) {
[16:05:17.445]                         if (exists("master", mode = "list", envir = envir, 
[16:05:17.445]                           inherits = FALSE)) {
[16:05:17.445]                           master <- get("master", mode = "list", 
[16:05:17.445]                             envir = envir, inherits = FALSE)
[16:05:17.445]                           if (inherits(master, c("SOCKnode", 
[16:05:17.445]                             "SOCK0node"))) {
[16:05:17.445]                             sendCondition <<- function(cond) {
[16:05:17.445]                               data <- list(type = "VALUE", value = cond, 
[16:05:17.445]                                 success = TRUE)
[16:05:17.445]                               parallel_sendData(master, data)
[16:05:17.445]                             }
[16:05:17.445]                             return(sendCondition)
[16:05:17.445]                           }
[16:05:17.445]                         }
[16:05:17.445]                         frame <- frame + 1L
[16:05:17.445]                         envir <- sys.frame(frame)
[16:05:17.445]                       }
[16:05:17.445]                     }
[16:05:17.445]                     sendCondition <<- function(cond) NULL
[16:05:17.445]                   }
[16:05:17.445]                 })
[16:05:17.445]                 withCallingHandlers({
[16:05:17.445]                   {
[16:05:17.445]                     value(f1)
[16:05:17.445]                   }
[16:05:17.445]                 }, immediateCondition = function(cond) {
[16:05:17.445]                   sendCondition <- ...future.makeSendCondition()
[16:05:17.445]                   sendCondition(cond)
[16:05:17.445]                   muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.445]                   {
[16:05:17.445]                     inherits <- base::inherits
[16:05:17.445]                     invokeRestart <- base::invokeRestart
[16:05:17.445]                     is.null <- base::is.null
[16:05:17.445]                     muffled <- FALSE
[16:05:17.445]                     if (inherits(cond, "message")) {
[16:05:17.445]                       muffled <- grepl(pattern, "muffleMessage")
[16:05:17.445]                       if (muffled) 
[16:05:17.445]                         invokeRestart("muffleMessage")
[16:05:17.445]                     }
[16:05:17.445]                     else if (inherits(cond, "warning")) {
[16:05:17.445]                       muffled <- grepl(pattern, "muffleWarning")
[16:05:17.445]                       if (muffled) 
[16:05:17.445]                         invokeRestart("muffleWarning")
[16:05:17.445]                     }
[16:05:17.445]                     else if (inherits(cond, "condition")) {
[16:05:17.445]                       if (!is.null(pattern)) {
[16:05:17.445]                         computeRestarts <- base::computeRestarts
[16:05:17.445]                         grepl <- base::grepl
[16:05:17.445]                         restarts <- computeRestarts(cond)
[16:05:17.445]                         for (restart in restarts) {
[16:05:17.445]                           name <- restart$name
[16:05:17.445]                           if (is.null(name)) 
[16:05:17.445]                             next
[16:05:17.445]                           if (!grepl(pattern, name)) 
[16:05:17.445]                             next
[16:05:17.445]                           invokeRestart(restart)
[16:05:17.445]                           muffled <- TRUE
[16:05:17.445]                           break
[16:05:17.445]                         }
[16:05:17.445]                       }
[16:05:17.445]                     }
[16:05:17.445]                     invisible(muffled)
[16:05:17.445]                   }
[16:05:17.445]                   muffleCondition(cond)
[16:05:17.445]                 })
[16:05:17.445]             }))
[16:05:17.445]             future::FutureResult(value = ...future.value$value, 
[16:05:17.445]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.445]                   ...future.rng), globalenv = if (FALSE) 
[16:05:17.445]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[16:05:17.445]                     ...future.globalenv.names))
[16:05:17.445]                 else NULL, started = ...future.startTime, version = "1.8")
[16:05:17.445]         }, condition = base::local({
[16:05:17.445]             c <- base::c
[16:05:17.445]             inherits <- base::inherits
[16:05:17.445]             invokeRestart <- base::invokeRestart
[16:05:17.445]             length <- base::length
[16:05:17.445]             list <- base::list
[16:05:17.445]             seq.int <- base::seq.int
[16:05:17.445]             signalCondition <- base::signalCondition
[16:05:17.445]             sys.calls <- base::sys.calls
[16:05:17.445]             `[[` <- base::`[[`
[16:05:17.445]             `+` <- base::`+`
[16:05:17.445]             `<<-` <- base::`<<-`
[16:05:17.445]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[16:05:17.445]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[16:05:17.445]                   3L)]
[16:05:17.445]             }
[16:05:17.445]             function(cond) {
[16:05:17.445]                 is_error <- inherits(cond, "error")
[16:05:17.445]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[16:05:17.445]                   NULL)
[16:05:17.445]                 if (is_error) {
[16:05:17.445]                   sessionInformation <- function() {
[16:05:17.445]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[16:05:17.445]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[16:05:17.445]                       search = base::search(), system = base::Sys.info())
[16:05:17.445]                   }
[16:05:17.445]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.445]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[16:05:17.445]                     cond$call), session = sessionInformation(), 
[16:05:17.445]                     timestamp = base::Sys.time(), signaled = 0L)
[16:05:17.445]                   signalCondition(cond)
[16:05:17.445]                 }
[16:05:17.445]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[16:05:17.445]                 "immediateCondition"))) {
[16:05:17.445]                   signal <- TRUE && inherits(cond, "immediateCondition")
[16:05:17.445]                   ...future.conditions[[length(...future.conditions) + 
[16:05:17.445]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[16:05:17.445]                   if (TRUE && !signal) {
[16:05:17.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.445]                     {
[16:05:17.445]                       inherits <- base::inherits
[16:05:17.445]                       invokeRestart <- base::invokeRestart
[16:05:17.445]                       is.null <- base::is.null
[16:05:17.445]                       muffled <- FALSE
[16:05:17.445]                       if (inherits(cond, "message")) {
[16:05:17.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.445]                         if (muffled) 
[16:05:17.445]                           invokeRestart("muffleMessage")
[16:05:17.445]                       }
[16:05:17.445]                       else if (inherits(cond, "warning")) {
[16:05:17.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.445]                         if (muffled) 
[16:05:17.445]                           invokeRestart("muffleWarning")
[16:05:17.445]                       }
[16:05:17.445]                       else if (inherits(cond, "condition")) {
[16:05:17.445]                         if (!is.null(pattern)) {
[16:05:17.445]                           computeRestarts <- base::computeRestarts
[16:05:17.445]                           grepl <- base::grepl
[16:05:17.445]                           restarts <- computeRestarts(cond)
[16:05:17.445]                           for (restart in restarts) {
[16:05:17.445]                             name <- restart$name
[16:05:17.445]                             if (is.null(name)) 
[16:05:17.445]                               next
[16:05:17.445]                             if (!grepl(pattern, name)) 
[16:05:17.445]                               next
[16:05:17.445]                             invokeRestart(restart)
[16:05:17.445]                             muffled <- TRUE
[16:05:17.445]                             break
[16:05:17.445]                           }
[16:05:17.445]                         }
[16:05:17.445]                       }
[16:05:17.445]                       invisible(muffled)
[16:05:17.445]                     }
[16:05:17.445]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.445]                   }
[16:05:17.445]                 }
[16:05:17.445]                 else {
[16:05:17.445]                   if (TRUE) {
[16:05:17.445]                     muffleCondition <- function (cond, pattern = "^muffle") 
[16:05:17.445]                     {
[16:05:17.445]                       inherits <- base::inherits
[16:05:17.445]                       invokeRestart <- base::invokeRestart
[16:05:17.445]                       is.null <- base::is.null
[16:05:17.445]                       muffled <- FALSE
[16:05:17.445]                       if (inherits(cond, "message")) {
[16:05:17.445]                         muffled <- grepl(pattern, "muffleMessage")
[16:05:17.445]                         if (muffled) 
[16:05:17.445]                           invokeRestart("muffleMessage")
[16:05:17.445]                       }
[16:05:17.445]                       else if (inherits(cond, "warning")) {
[16:05:17.445]                         muffled <- grepl(pattern, "muffleWarning")
[16:05:17.445]                         if (muffled) 
[16:05:17.445]                           invokeRestart("muffleWarning")
[16:05:17.445]                       }
[16:05:17.445]                       else if (inherits(cond, "condition")) {
[16:05:17.445]                         if (!is.null(pattern)) {
[16:05:17.445]                           computeRestarts <- base::computeRestarts
[16:05:17.445]                           grepl <- base::grepl
[16:05:17.445]                           restarts <- computeRestarts(cond)
[16:05:17.445]                           for (restart in restarts) {
[16:05:17.445]                             name <- restart$name
[16:05:17.445]                             if (is.null(name)) 
[16:05:17.445]                               next
[16:05:17.445]                             if (!grepl(pattern, name)) 
[16:05:17.445]                               next
[16:05:17.445]                             invokeRestart(restart)
[16:05:17.445]                             muffled <- TRUE
[16:05:17.445]                             break
[16:05:17.445]                           }
[16:05:17.445]                         }
[16:05:17.445]                       }
[16:05:17.445]                       invisible(muffled)
[16:05:17.445]                     }
[16:05:17.445]                     muffleCondition(cond, pattern = "^muffle")
[16:05:17.445]                   }
[16:05:17.445]                 }
[16:05:17.445]             }
[16:05:17.445]         }))
[16:05:17.445]     }, error = function(ex) {
[16:05:17.445]         base::structure(base::list(value = NULL, visible = NULL, 
[16:05:17.445]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[16:05:17.445]                 ...future.rng), started = ...future.startTime, 
[16:05:17.445]             finished = Sys.time(), session_uuid = NA_character_, 
[16:05:17.445]             version = "1.8"), class = "FutureResult")
[16:05:17.445]     }, finally = {
[16:05:17.445]         if (!identical(...future.workdir, getwd())) 
[16:05:17.445]             setwd(...future.workdir)
[16:05:17.445]         {
[16:05:17.445]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[16:05:17.445]                 ...future.oldOptions$nwarnings <- NULL
[16:05:17.445]             }
[16:05:17.445]             base::options(...future.oldOptions)
[16:05:17.445]             if (.Platform$OS.type == "windows") {
[16:05:17.445]                 old_names <- names(...future.oldEnvVars)
[16:05:17.445]                 envs <- base::Sys.getenv()
[16:05:17.445]                 names <- names(envs)
[16:05:17.445]                 common <- intersect(names, old_names)
[16:05:17.445]                 added <- setdiff(names, old_names)
[16:05:17.445]                 removed <- setdiff(old_names, names)
[16:05:17.445]                 changed <- common[...future.oldEnvVars[common] != 
[16:05:17.445]                   envs[common]]
[16:05:17.445]                 NAMES <- toupper(changed)
[16:05:17.445]                 args <- list()
[16:05:17.445]                 for (kk in seq_along(NAMES)) {
[16:05:17.445]                   name <- changed[[kk]]
[16:05:17.445]                   NAME <- NAMES[[kk]]
[16:05:17.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.445]                     next
[16:05:17.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.445]                 }
[16:05:17.445]                 NAMES <- toupper(added)
[16:05:17.445]                 for (kk in seq_along(NAMES)) {
[16:05:17.445]                   name <- added[[kk]]
[16:05:17.445]                   NAME <- NAMES[[kk]]
[16:05:17.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.445]                     next
[16:05:17.445]                   args[[name]] <- ""
[16:05:17.445]                 }
[16:05:17.445]                 NAMES <- toupper(removed)
[16:05:17.445]                 for (kk in seq_along(NAMES)) {
[16:05:17.445]                   name <- removed[[kk]]
[16:05:17.445]                   NAME <- NAMES[[kk]]
[16:05:17.445]                   if (name != NAME && is.element(NAME, old_names)) 
[16:05:17.445]                     next
[16:05:17.445]                   args[[name]] <- ...future.oldEnvVars[[name]]
[16:05:17.445]                 }
[16:05:17.445]                 if (length(args) > 0) 
[16:05:17.445]                   base::do.call(base::Sys.setenv, args = args)
[16:05:17.445]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[16:05:17.445]             }
[16:05:17.445]             else {
[16:05:17.445]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[16:05:17.445]             }
[16:05:17.445]             {
[16:05:17.445]                 if (base::length(...future.futureOptionsAdded) > 
[16:05:17.445]                   0L) {
[16:05:17.445]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[16:05:17.445]                   base::names(opts) <- ...future.futureOptionsAdded
[16:05:17.445]                   base::options(opts)
[16:05:17.445]                 }
[16:05:17.445]                 {
[16:05:17.445]                   {
[16:05:17.445]                     base::options(mc.cores = ...future.mc.cores.old)
[16:05:17.445]                     NULL
[16:05:17.445]                   }
[16:05:17.445]                   options(future.plan = NULL)
[16:05:17.445]                   if (is.na(NA_character_)) 
[16:05:17.445]                     Sys.unsetenv("R_FUTURE_PLAN")
[16:05:17.445]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[16:05:17.445]                   future::plan(list(function (..., workers = 2L, 
[16:05:17.445]                     envir = parent.frame()) 
[16:05:17.445]                   strategy(..., workers = workers, envir = envir)), 
[16:05:17.445]                     .cleanup = FALSE, .init = FALSE)
[16:05:17.445]                 }
[16:05:17.445]             }
[16:05:17.445]         }
[16:05:17.445]     })
[16:05:17.445]     if (TRUE) {
[16:05:17.445]         base::sink(type = "output", split = FALSE)
[16:05:17.445]         if (TRUE) {
[16:05:17.445]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[16:05:17.445]         }
[16:05:17.445]         else {
[16:05:17.445]             ...future.result["stdout"] <- base::list(NULL)
[16:05:17.445]         }
[16:05:17.445]         base::close(...future.stdout)
[16:05:17.445]         ...future.stdout <- NULL
[16:05:17.445]     }
[16:05:17.445]     ...future.result$conditions <- ...future.conditions
[16:05:17.445]     ...future.result$finished <- base::Sys.time()
[16:05:17.445]     ...future.result
[16:05:17.445] }
[16:05:17.500] Exporting 1 global objects (1.55 MiB) to cluster node #2 ...
[16:05:17.502] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ...
[16:05:17.513] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ... DONE
[16:05:17.513] Exporting 1 global objects (1.55 MiB) to cluster node #2 ... DONE
[16:05:17.514] MultisessionFuture started
[16:05:17.514] - Launch lazy future ... done
[16:05:17.514] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.55 MiB (MultisessionFuture ‘f1’ of 1.55 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28c28227-32ac-d9ee-1c8b-2c6b7a9a5132
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[16:05:17.531] result() for ClusterFuture ...
[16:05:17.531] receiveMessageFromWorker() for ClusterFuture ...
[16:05:17.531] - Validating connection of MultisessionFuture
[16:05:17.610] - received message: FutureResult
[16:05:17.610] - Received FutureResult
[16:05:17.610] - Erased future from FutureRegistry
[16:05:17.610] result() for ClusterFuture ...
[16:05:17.610] - result already collected: FutureResult
[16:05:17.610] result() for ClusterFuture ... done
[16:05:17.610] signalConditions() ...
[16:05:17.610]  - include = ‘immediateCondition’
[16:05:17.611]  - exclude = 
[16:05:17.611]  - resignal = FALSE
[16:05:17.611]  - Number of conditions: 1
[16:05:17.611] signalConditions() ... done
[16:05:17.611] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.611] result() for ClusterFuture ... done
[16:05:17.611] result() for ClusterFuture ...
[16:05:17.611] - result already collected: FutureResult
[16:05:17.611] result() for ClusterFuture ... done
[16:05:17.611] signalConditions() ...
[16:05:17.611]  - include = ‘immediateCondition’
[16:05:17.612]  - exclude = 
[16:05:17.612]  - resignal = FALSE
[16:05:17.612]  - Number of conditions: 1
[16:05:17.612] signalConditions() ... done
[16:05:17.612] Future state: ‘finished’
[16:05:17.612] result() for ClusterFuture ...
[16:05:17.612] - result already collected: FutureResult
[16:05:17.612] result() for ClusterFuture ... done
[16:05:17.612] signalConditions() ...
[16:05:17.612]  - include = ‘condition’
[16:05:17.613]  - exclude = ‘immediateCondition’
[16:05:17.613]  - resignal = TRUE
[16:05:17.613]  - Number of conditions: 1
[16:05:17.613]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[16:05:17.613] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (28c28227-32ac-d9ee-1c8b-2c6b7a9a5132; pid 86725 on 11666ca4073c) that created it, not by any other R processes (a4c7e816-5210-d32a-4adc-094d9a6f8bbb; pid 86779 on 11666ca4073c): {; 42L; }>


Future UUID: 504edd07-f9b1-28e3-7cc9-78c4f711a5f5


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 28c28227-32ac-d9ee-1c8b-2c6b7a9a5132
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[16:05:17.614] result() for ClusterFuture ...
[16:05:17.614] receiveMessageFromWorker() for ClusterFuture ...
[16:05:17.614] - Validating connection of MultisessionFuture
[16:05:17.614] - received message: FutureResult
[16:05:17.614] - Received FutureResult
[16:05:17.615] - Erased future from FutureRegistry
[16:05:17.615] result() for ClusterFuture ...
[16:05:17.615] - result already collected: FutureResult
[16:05:17.615] result() for ClusterFuture ... done
[16:05:17.615] receiveMessageFromWorker() for ClusterFuture ... done
[16:05:17.615] result() for ClusterFuture ... done
[16:05:17.615] result() for ClusterFuture ...
[16:05:17.615] - result already collected: FutureResult
[16:05:17.615] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[16:05:17.616] plan(): Setting new future strategy stack:
[16:05:17.616] List of future strategies:
[16:05:17.616] 1. FutureStrategy:
[16:05:17.616]    - args: function (..., envir = parent.frame())
[16:05:17.616]    - tweaked: FALSE
[16:05:17.616]    - call: future::plan(oplan)
[16:05:17.617] plan(): nbrOfWorkers() = 1
> 
