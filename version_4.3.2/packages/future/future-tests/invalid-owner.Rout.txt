
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:26:20.944] plan(): Setting new future strategy stack:
[10:26:20.945] List of future strategies:
[10:26:20.945] 1. sequential:
[10:26:20.945]    - args: function (..., envir = parent.frame())
[10:26:20.945]    - tweaked: FALSE
[10:26:20.945]    - call: future::plan("sequential")
[10:26:20.968] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[10:26:20.986] plan(): Setting new future strategy stack:
[10:26:20.986] List of future strategies:
[10:26:20.986] 1. multisession:
[10:26:20.986]    - args: function (..., workers = 2L, envir = parent.frame())
[10:26:20.986]    - tweaked: TRUE
[10:26:20.986]    - call: plan(multisession, workers = 2L)
[10:26:20.997] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:26:20.997] multisession:
[10:26:20.997] - args: function (..., workers = 2L, envir = parent.frame())
[10:26:20.997] - tweaked: TRUE
[10:26:20.997] - call: plan(multisession, workers = 2L)
[10:26:20.998] getGlobalsAndPackages() ...
[10:26:20.999] Not searching for globals
[10:26:20.999] - globals: [0] <none>
[10:26:20.999] getGlobalsAndPackages() ... DONE
[10:26:20.999] [local output] makeClusterPSOCK() ...
[10:26:21.029] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:26:21.030] [local output] Base port: 11177
[10:26:21.030] [local output] Getting setup options for 2 cluster nodes ...
[10:26:21.030] [local output]  - Node 1 of 2 ...
[10:26:21.030] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:21.031] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0rOjhK/worker.rank=1.parallelly.parent=86988.153cca53b1cb.pid")), silent = TRUE)' -e 'file.exists("/tmp/Rtmp0rOjhK/worker.rank=1.parallelly.parent=86988.153cca53b1cb.pid")'’
[10:26:21.219] - Possible to infer worker's PID: TRUE
[10:26:21.220] [local output] Rscript port: 11177

[10:26:21.220] [local output]  - Node 2 of 2 ...
[10:26:21.220] [local output] localMachine=TRUE => revtunnel=FALSE

[10:26:21.221] [local output] Rscript port: 11177

[10:26:21.221] [local output] Getting setup options for 2 cluster nodes ... done
[10:26:21.222] [local output]  - Parallel setup requested for some PSOCK nodes
[10:26:21.222] [local output] Setting up PSOCK nodes in parallel
[10:26:21.222] List of 36
[10:26:21.222]  $ worker          : chr "localhost"
[10:26:21.222]   ..- attr(*, "localhost")= logi TRUE
[10:26:21.222]  $ master          : chr "localhost"
[10:26:21.222]  $ port            : int 11177
[10:26:21.222]  $ connectTimeout  : num 120
[10:26:21.222]  $ timeout         : num 2592000
[10:26:21.222]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:26:21.222]  $ homogeneous     : logi TRUE
[10:26:21.222]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:26:21.222]  $ rscript_envs    : NULL
[10:26:21.222]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:21.222]  $ rscript_startup : NULL
[10:26:21.222]  $ rscript_sh      : chr "sh"
[10:26:21.222]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:21.222]  $ methods         : logi TRUE
[10:26:21.222]  $ socketOptions   : chr "no-delay"
[10:26:21.222]  $ useXDR          : logi FALSE
[10:26:21.222]  $ outfile         : chr "/dev/null"
[10:26:21.222]  $ renice          : int NA
[10:26:21.222]  $ rshcmd          : NULL
[10:26:21.222]  $ user            : chr(0) 
[10:26:21.222]  $ revtunnel       : logi FALSE
[10:26:21.222]  $ rshlogfile      : NULL
[10:26:21.222]  $ rshopts         : chr(0) 
[10:26:21.222]  $ rank            : int 1
[10:26:21.222]  $ manual          : logi FALSE
[10:26:21.222]  $ dryrun          : logi FALSE
[10:26:21.222]  $ quiet           : logi FALSE
[10:26:21.222]  $ setup_strategy  : chr "parallel"
[10:26:21.222]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:21.222]  $ pidfile         : chr "/tmp/Rtmp0rOjhK/worker.rank=1.parallelly.parent=86988.153cca53b1cb.pid"
[10:26:21.222]  $ rshcmd_label    : NULL
[10:26:21.222]  $ rsh_call        : NULL
[10:26:21.222]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:26:21.222]  $ localMachine    : logi TRUE
[10:26:21.222]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:26:21.222]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:26:21.222]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:26:21.222]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:26:21.222]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:26:21.222]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:26:21.222]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:26:21.222]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:26:21.222]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:26:21.222]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:26:21.222]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:26:21.222]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:26:21.222]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:26:21.222]  $ arguments       :List of 28
[10:26:21.222]   ..$ worker          : chr "localhost"
[10:26:21.222]   ..$ master          : NULL
[10:26:21.222]   ..$ port            : int 11177
[10:26:21.222]   ..$ connectTimeout  : num 120
[10:26:21.222]   ..$ timeout         : num 2592000
[10:26:21.222]   ..$ rscript         : NULL
[10:26:21.222]   ..$ homogeneous     : NULL
[10:26:21.222]   ..$ rscript_args    : NULL
[10:26:21.222]   ..$ rscript_envs    : NULL
[10:26:21.222]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:26:21.222]   ..$ rscript_startup : NULL
[10:26:21.222]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:26:21.222]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:26:21.222]   ..$ methods         : logi TRUE
[10:26:21.222]   ..$ socketOptions   : chr "no-delay"
[10:26:21.222]   ..$ useXDR          : logi FALSE
[10:26:21.222]   ..$ outfile         : chr "/dev/null"
[10:26:21.222]   ..$ renice          : int NA
[10:26:21.222]   ..$ rshcmd          : NULL
[10:26:21.222]   ..$ user            : NULL
[10:26:21.222]   ..$ revtunnel       : logi NA
[10:26:21.222]   ..$ rshlogfile      : NULL
[10:26:21.222]   ..$ rshopts         : NULL
[10:26:21.222]   ..$ rank            : int 1
[10:26:21.222]   ..$ manual          : logi FALSE
[10:26:21.222]   ..$ dryrun          : logi FALSE
[10:26:21.222]   ..$ quiet           : logi FALSE
[10:26:21.222]   ..$ setup_strategy  : chr "parallel"
[10:26:21.222]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:26:21.241] [local output] System call to launch all workers:
[10:26:21.241] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/Rtmp0rOjhK/worker.rank=1.parallelly.parent=86988.153cca53b1cb.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11177 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:26:21.242] [local output] Starting PSOCK main server
[10:26:21.247] [local output] Workers launched
[10:26:21.247] [local output] Waiting for workers to connect back
[10:26:21.247]  - [local output] 0 workers out of 2 ready
[10:26:21.493]  - [local output] 0 workers out of 2 ready
[10:26:21.494]  - [local output] 1 workers out of 2 ready
[10:26:21.516]  - [local output] 1 workers out of 2 ready
[10:26:21.516]  - [local output] 2 workers out of 2 ready
[10:26:21.516] [local output] Launching of workers completed
[10:26:21.517] [local output] Collecting session information from workers
[10:26:21.518] [local output]  - Worker #1 of 2
[10:26:21.518] [local output]  - Worker #2 of 2
[10:26:21.518] [local output] makeClusterPSOCK() ... done
[10:26:21.532] Packages needed by the future expression (n = 0): <none>
[10:26:21.532] Packages needed by future strategies (n = 0): <none>
[10:26:21.533] {
[10:26:21.533]     {
[10:26:21.533]         {
[10:26:21.533]             ...future.startTime <- base::Sys.time()
[10:26:21.533]             {
[10:26:21.533]                 {
[10:26:21.533]                   {
[10:26:21.533]                     {
[10:26:21.533]                       base::local({
[10:26:21.533]                         has_future <- base::requireNamespace("future", 
[10:26:21.533]                           quietly = TRUE)
[10:26:21.533]                         if (has_future) {
[10:26:21.533]                           ns <- base::getNamespace("future")
[10:26:21.533]                           version <- ns[[".package"]][["version"]]
[10:26:21.533]                           if (is.null(version)) 
[10:26:21.533]                             version <- utils::packageVersion("future")
[10:26:21.533]                         }
[10:26:21.533]                         else {
[10:26:21.533]                           version <- NULL
[10:26:21.533]                         }
[10:26:21.533]                         if (!has_future || version < "1.8.0") {
[10:26:21.533]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:21.533]                             "", base::R.version$version.string), 
[10:26:21.533]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:21.533]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:21.533]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:21.533]                               "release", "version")], collapse = " "), 
[10:26:21.533]                             hostname = base::Sys.info()[["nodename"]])
[10:26:21.533]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:21.533]                             info)
[10:26:21.533]                           info <- base::paste(info, collapse = "; ")
[10:26:21.533]                           if (!has_future) {
[10:26:21.533]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:21.533]                               info)
[10:26:21.533]                           }
[10:26:21.533]                           else {
[10:26:21.533]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:21.533]                               info, version)
[10:26:21.533]                           }
[10:26:21.533]                           base::stop(msg)
[10:26:21.533]                         }
[10:26:21.533]                       })
[10:26:21.533]                     }
[10:26:21.533]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:21.533]                     base::options(mc.cores = 1L)
[10:26:21.533]                   }
[10:26:21.533]                   options(future.plan = NULL)
[10:26:21.533]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.533]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:21.533]                 }
[10:26:21.533]                 ...future.workdir <- getwd()
[10:26:21.533]             }
[10:26:21.533]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:21.533]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:21.533]         }
[10:26:21.533]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:21.533]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:21.533]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:21.533]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:21.533]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:21.533]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:21.533]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:21.533]             base::names(...future.oldOptions))
[10:26:21.533]     }
[10:26:21.533]     if (FALSE) {
[10:26:21.533]     }
[10:26:21.533]     else {
[10:26:21.533]         if (TRUE) {
[10:26:21.533]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:21.533]                 open = "w")
[10:26:21.533]         }
[10:26:21.533]         else {
[10:26:21.533]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:21.533]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:21.533]         }
[10:26:21.533]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:21.533]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:21.533]             base::sink(type = "output", split = FALSE)
[10:26:21.533]             base::close(...future.stdout)
[10:26:21.533]         }, add = TRUE)
[10:26:21.533]     }
[10:26:21.533]     ...future.frame <- base::sys.nframe()
[10:26:21.533]     ...future.conditions <- base::list()
[10:26:21.533]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:21.533]     if (FALSE) {
[10:26:21.533]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:21.533]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:21.533]     }
[10:26:21.533]     ...future.result <- base::tryCatch({
[10:26:21.533]         base::withCallingHandlers({
[10:26:21.533]             ...future.value <- base::withVisible(base::local({
[10:26:21.533]                 ...future.makeSendCondition <- base::local({
[10:26:21.533]                   sendCondition <- NULL
[10:26:21.533]                   function(frame = 1L) {
[10:26:21.533]                     if (is.function(sendCondition)) 
[10:26:21.533]                       return(sendCondition)
[10:26:21.533]                     ns <- getNamespace("parallel")
[10:26:21.533]                     if (exists("sendData", mode = "function", 
[10:26:21.533]                       envir = ns)) {
[10:26:21.533]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:21.533]                         envir = ns)
[10:26:21.533]                       envir <- sys.frame(frame)
[10:26:21.533]                       master <- NULL
[10:26:21.533]                       while (!identical(envir, .GlobalEnv) && 
[10:26:21.533]                         !identical(envir, emptyenv())) {
[10:26:21.533]                         if (exists("master", mode = "list", envir = envir, 
[10:26:21.533]                           inherits = FALSE)) {
[10:26:21.533]                           master <- get("master", mode = "list", 
[10:26:21.533]                             envir = envir, inherits = FALSE)
[10:26:21.533]                           if (inherits(master, c("SOCKnode", 
[10:26:21.533]                             "SOCK0node"))) {
[10:26:21.533]                             sendCondition <<- function(cond) {
[10:26:21.533]                               data <- list(type = "VALUE", value = cond, 
[10:26:21.533]                                 success = TRUE)
[10:26:21.533]                               parallel_sendData(master, data)
[10:26:21.533]                             }
[10:26:21.533]                             return(sendCondition)
[10:26:21.533]                           }
[10:26:21.533]                         }
[10:26:21.533]                         frame <- frame + 1L
[10:26:21.533]                         envir <- sys.frame(frame)
[10:26:21.533]                       }
[10:26:21.533]                     }
[10:26:21.533]                     sendCondition <<- function(cond) NULL
[10:26:21.533]                   }
[10:26:21.533]                 })
[10:26:21.533]                 withCallingHandlers({
[10:26:21.533]                   NA
[10:26:21.533]                 }, immediateCondition = function(cond) {
[10:26:21.533]                   sendCondition <- ...future.makeSendCondition()
[10:26:21.533]                   sendCondition(cond)
[10:26:21.533]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.533]                   {
[10:26:21.533]                     inherits <- base::inherits
[10:26:21.533]                     invokeRestart <- base::invokeRestart
[10:26:21.533]                     is.null <- base::is.null
[10:26:21.533]                     muffled <- FALSE
[10:26:21.533]                     if (inherits(cond, "message")) {
[10:26:21.533]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:21.533]                       if (muffled) 
[10:26:21.533]                         invokeRestart("muffleMessage")
[10:26:21.533]                     }
[10:26:21.533]                     else if (inherits(cond, "warning")) {
[10:26:21.533]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:21.533]                       if (muffled) 
[10:26:21.533]                         invokeRestart("muffleWarning")
[10:26:21.533]                     }
[10:26:21.533]                     else if (inherits(cond, "condition")) {
[10:26:21.533]                       if (!is.null(pattern)) {
[10:26:21.533]                         computeRestarts <- base::computeRestarts
[10:26:21.533]                         grepl <- base::grepl
[10:26:21.533]                         restarts <- computeRestarts(cond)
[10:26:21.533]                         for (restart in restarts) {
[10:26:21.533]                           name <- restart$name
[10:26:21.533]                           if (is.null(name)) 
[10:26:21.533]                             next
[10:26:21.533]                           if (!grepl(pattern, name)) 
[10:26:21.533]                             next
[10:26:21.533]                           invokeRestart(restart)
[10:26:21.533]                           muffled <- TRUE
[10:26:21.533]                           break
[10:26:21.533]                         }
[10:26:21.533]                       }
[10:26:21.533]                     }
[10:26:21.533]                     invisible(muffled)
[10:26:21.533]                   }
[10:26:21.533]                   muffleCondition(cond)
[10:26:21.533]                 })
[10:26:21.533]             }))
[10:26:21.533]             future::FutureResult(value = ...future.value$value, 
[10:26:21.533]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.533]                   ...future.rng), globalenv = if (FALSE) 
[10:26:21.533]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:21.533]                     ...future.globalenv.names))
[10:26:21.533]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:21.533]         }, condition = base::local({
[10:26:21.533]             c <- base::c
[10:26:21.533]             inherits <- base::inherits
[10:26:21.533]             invokeRestart <- base::invokeRestart
[10:26:21.533]             length <- base::length
[10:26:21.533]             list <- base::list
[10:26:21.533]             seq.int <- base::seq.int
[10:26:21.533]             signalCondition <- base::signalCondition
[10:26:21.533]             sys.calls <- base::sys.calls
[10:26:21.533]             `[[` <- base::`[[`
[10:26:21.533]             `+` <- base::`+`
[10:26:21.533]             `<<-` <- base::`<<-`
[10:26:21.533]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:21.533]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:21.533]                   3L)]
[10:26:21.533]             }
[10:26:21.533]             function(cond) {
[10:26:21.533]                 is_error <- inherits(cond, "error")
[10:26:21.533]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:21.533]                   NULL)
[10:26:21.533]                 if (is_error) {
[10:26:21.533]                   sessionInformation <- function() {
[10:26:21.533]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:21.533]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:21.533]                       search = base::search(), system = base::Sys.info())
[10:26:21.533]                   }
[10:26:21.533]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.533]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:21.533]                     cond$call), session = sessionInformation(), 
[10:26:21.533]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:21.533]                   signalCondition(cond)
[10:26:21.533]                 }
[10:26:21.533]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:21.533]                 "immediateCondition"))) {
[10:26:21.533]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:21.533]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.533]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:21.533]                   if (TRUE && !signal) {
[10:26:21.533]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.533]                     {
[10:26:21.533]                       inherits <- base::inherits
[10:26:21.533]                       invokeRestart <- base::invokeRestart
[10:26:21.533]                       is.null <- base::is.null
[10:26:21.533]                       muffled <- FALSE
[10:26:21.533]                       if (inherits(cond, "message")) {
[10:26:21.533]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.533]                         if (muffled) 
[10:26:21.533]                           invokeRestart("muffleMessage")
[10:26:21.533]                       }
[10:26:21.533]                       else if (inherits(cond, "warning")) {
[10:26:21.533]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.533]                         if (muffled) 
[10:26:21.533]                           invokeRestart("muffleWarning")
[10:26:21.533]                       }
[10:26:21.533]                       else if (inherits(cond, "condition")) {
[10:26:21.533]                         if (!is.null(pattern)) {
[10:26:21.533]                           computeRestarts <- base::computeRestarts
[10:26:21.533]                           grepl <- base::grepl
[10:26:21.533]                           restarts <- computeRestarts(cond)
[10:26:21.533]                           for (restart in restarts) {
[10:26:21.533]                             name <- restart$name
[10:26:21.533]                             if (is.null(name)) 
[10:26:21.533]                               next
[10:26:21.533]                             if (!grepl(pattern, name)) 
[10:26:21.533]                               next
[10:26:21.533]                             invokeRestart(restart)
[10:26:21.533]                             muffled <- TRUE
[10:26:21.533]                             break
[10:26:21.533]                           }
[10:26:21.533]                         }
[10:26:21.533]                       }
[10:26:21.533]                       invisible(muffled)
[10:26:21.533]                     }
[10:26:21.533]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.533]                   }
[10:26:21.533]                 }
[10:26:21.533]                 else {
[10:26:21.533]                   if (TRUE) {
[10:26:21.533]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.533]                     {
[10:26:21.533]                       inherits <- base::inherits
[10:26:21.533]                       invokeRestart <- base::invokeRestart
[10:26:21.533]                       is.null <- base::is.null
[10:26:21.533]                       muffled <- FALSE
[10:26:21.533]                       if (inherits(cond, "message")) {
[10:26:21.533]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.533]                         if (muffled) 
[10:26:21.533]                           invokeRestart("muffleMessage")
[10:26:21.533]                       }
[10:26:21.533]                       else if (inherits(cond, "warning")) {
[10:26:21.533]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.533]                         if (muffled) 
[10:26:21.533]                           invokeRestart("muffleWarning")
[10:26:21.533]                       }
[10:26:21.533]                       else if (inherits(cond, "condition")) {
[10:26:21.533]                         if (!is.null(pattern)) {
[10:26:21.533]                           computeRestarts <- base::computeRestarts
[10:26:21.533]                           grepl <- base::grepl
[10:26:21.533]                           restarts <- computeRestarts(cond)
[10:26:21.533]                           for (restart in restarts) {
[10:26:21.533]                             name <- restart$name
[10:26:21.533]                             if (is.null(name)) 
[10:26:21.533]                               next
[10:26:21.533]                             if (!grepl(pattern, name)) 
[10:26:21.533]                               next
[10:26:21.533]                             invokeRestart(restart)
[10:26:21.533]                             muffled <- TRUE
[10:26:21.533]                             break
[10:26:21.533]                           }
[10:26:21.533]                         }
[10:26:21.533]                       }
[10:26:21.533]                       invisible(muffled)
[10:26:21.533]                     }
[10:26:21.533]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.533]                   }
[10:26:21.533]                 }
[10:26:21.533]             }
[10:26:21.533]         }))
[10:26:21.533]     }, error = function(ex) {
[10:26:21.533]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:21.533]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.533]                 ...future.rng), started = ...future.startTime, 
[10:26:21.533]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:21.533]             version = "1.8"), class = "FutureResult")
[10:26:21.533]     }, finally = {
[10:26:21.533]         if (!identical(...future.workdir, getwd())) 
[10:26:21.533]             setwd(...future.workdir)
[10:26:21.533]         {
[10:26:21.533]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:21.533]                 ...future.oldOptions$nwarnings <- NULL
[10:26:21.533]             }
[10:26:21.533]             base::options(...future.oldOptions)
[10:26:21.533]             if (.Platform$OS.type == "windows") {
[10:26:21.533]                 old_names <- names(...future.oldEnvVars)
[10:26:21.533]                 envs <- base::Sys.getenv()
[10:26:21.533]                 names <- names(envs)
[10:26:21.533]                 common <- intersect(names, old_names)
[10:26:21.533]                 added <- setdiff(names, old_names)
[10:26:21.533]                 removed <- setdiff(old_names, names)
[10:26:21.533]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:21.533]                   envs[common]]
[10:26:21.533]                 NAMES <- toupper(changed)
[10:26:21.533]                 args <- list()
[10:26:21.533]                 for (kk in seq_along(NAMES)) {
[10:26:21.533]                   name <- changed[[kk]]
[10:26:21.533]                   NAME <- NAMES[[kk]]
[10:26:21.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.533]                     next
[10:26:21.533]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.533]                 }
[10:26:21.533]                 NAMES <- toupper(added)
[10:26:21.533]                 for (kk in seq_along(NAMES)) {
[10:26:21.533]                   name <- added[[kk]]
[10:26:21.533]                   NAME <- NAMES[[kk]]
[10:26:21.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.533]                     next
[10:26:21.533]                   args[[name]] <- ""
[10:26:21.533]                 }
[10:26:21.533]                 NAMES <- toupper(removed)
[10:26:21.533]                 for (kk in seq_along(NAMES)) {
[10:26:21.533]                   name <- removed[[kk]]
[10:26:21.533]                   NAME <- NAMES[[kk]]
[10:26:21.533]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.533]                     next
[10:26:21.533]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.533]                 }
[10:26:21.533]                 if (length(args) > 0) 
[10:26:21.533]                   base::do.call(base::Sys.setenv, args = args)
[10:26:21.533]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:21.533]             }
[10:26:21.533]             else {
[10:26:21.533]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:21.533]             }
[10:26:21.533]             {
[10:26:21.533]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:21.533]                   0L) {
[10:26:21.533]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:21.533]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:21.533]                   base::options(opts)
[10:26:21.533]                 }
[10:26:21.533]                 {
[10:26:21.533]                   {
[10:26:21.533]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:21.533]                     NULL
[10:26:21.533]                   }
[10:26:21.533]                   options(future.plan = NULL)
[10:26:21.533]                   if (is.na(NA_character_)) 
[10:26:21.533]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.533]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:21.533]                   future::plan(list(function (..., workers = 2L, 
[10:26:21.533]                     envir = parent.frame()) 
[10:26:21.533]                   strategy(..., workers = workers, envir = envir)), 
[10:26:21.533]                     .cleanup = FALSE, .init = FALSE)
[10:26:21.533]                 }
[10:26:21.533]             }
[10:26:21.533]         }
[10:26:21.533]     })
[10:26:21.533]     if (TRUE) {
[10:26:21.533]         base::sink(type = "output", split = FALSE)
[10:26:21.533]         if (TRUE) {
[10:26:21.533]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:21.533]         }
[10:26:21.533]         else {
[10:26:21.533]             ...future.result["stdout"] <- base::list(NULL)
[10:26:21.533]         }
[10:26:21.533]         base::close(...future.stdout)
[10:26:21.533]         ...future.stdout <- NULL
[10:26:21.533]     }
[10:26:21.533]     ...future.result$conditions <- ...future.conditions
[10:26:21.533]     ...future.result$finished <- base::Sys.time()
[10:26:21.533]     ...future.result
[10:26:21.533] }
[10:26:21.587] MultisessionFuture started
[10:26:21.588] result() for ClusterFuture ...
[10:26:21.589] receiveMessageFromWorker() for ClusterFuture ...
[10:26:21.589] - Validating connection of MultisessionFuture
[10:26:21.622] - received message: FutureResult
[10:26:21.622] - Received FutureResult
[10:26:21.625] - Erased future from FutureRegistry
[10:26:21.625] result() for ClusterFuture ...
[10:26:21.625] - result already collected: FutureResult
[10:26:21.625] result() for ClusterFuture ... done
[10:26:21.626] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:21.626] result() for ClusterFuture ... done
[10:26:21.626] result() for ClusterFuture ...
[10:26:21.626] - result already collected: FutureResult
[10:26:21.626] result() for ClusterFuture ... done
[10:26:21.626] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:26:21.627] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: defa8917-db0d-febc-3b53-0b6987030b23
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[10:26:21.627] getGlobalsAndPackages() ...
[10:26:21.627] Searching for globals...
[10:26:21.635] - globals found: [2] ‘{’, ‘:::’
[10:26:21.635] Searching for globals ... DONE
[10:26:21.636] Resolving globals: FALSE
[10:26:21.636] 
[10:26:21.636] 
[10:26:21.636] getGlobalsAndPackages() ... DONE
[10:26:21.637] run() for ‘Future’ ...
[10:26:21.637] - state: ‘created’
[10:26:21.637] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:21.648] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:21.649] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:21.649]   - Field: ‘node’
[10:26:21.649]   - Field: ‘label’
[10:26:21.649]   - Field: ‘local’
[10:26:21.649]   - Field: ‘owner’
[10:26:21.649]   - Field: ‘envir’
[10:26:21.649]   - Field: ‘workers’
[10:26:21.649]   - Field: ‘packages’
[10:26:21.649]   - Field: ‘gc’
[10:26:21.649]   - Field: ‘conditions’
[10:26:21.650]   - Field: ‘persistent’
[10:26:21.650]   - Field: ‘expr’
[10:26:21.650]   - Field: ‘uuid’
[10:26:21.650]   - Field: ‘seed’
[10:26:21.650]   - Field: ‘version’
[10:26:21.650]   - Field: ‘result’
[10:26:21.650]   - Field: ‘asynchronous’
[10:26:21.650]   - Field: ‘calls’
[10:26:21.651]   - Field: ‘globals’
[10:26:21.651]   - Field: ‘stdout’
[10:26:21.651]   - Field: ‘earlySignal’
[10:26:21.651]   - Field: ‘lazy’
[10:26:21.651]   - Field: ‘state’
[10:26:21.651] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:21.651] - Launch lazy future ...
[10:26:21.652] Packages needed by the future expression (n = 0): <none>
[10:26:21.652] Packages needed by future strategies (n = 0): <none>
[10:26:21.652] {
[10:26:21.652]     {
[10:26:21.652]         {
[10:26:21.652]             ...future.startTime <- base::Sys.time()
[10:26:21.652]             {
[10:26:21.652]                 {
[10:26:21.652]                   {
[10:26:21.652]                     {
[10:26:21.652]                       base::local({
[10:26:21.652]                         has_future <- base::requireNamespace("future", 
[10:26:21.652]                           quietly = TRUE)
[10:26:21.652]                         if (has_future) {
[10:26:21.652]                           ns <- base::getNamespace("future")
[10:26:21.652]                           version <- ns[[".package"]][["version"]]
[10:26:21.652]                           if (is.null(version)) 
[10:26:21.652]                             version <- utils::packageVersion("future")
[10:26:21.652]                         }
[10:26:21.652]                         else {
[10:26:21.652]                           version <- NULL
[10:26:21.652]                         }
[10:26:21.652]                         if (!has_future || version < "1.8.0") {
[10:26:21.652]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:21.652]                             "", base::R.version$version.string), 
[10:26:21.652]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:21.652]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:21.652]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:21.652]                               "release", "version")], collapse = " "), 
[10:26:21.652]                             hostname = base::Sys.info()[["nodename"]])
[10:26:21.652]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:21.652]                             info)
[10:26:21.652]                           info <- base::paste(info, collapse = "; ")
[10:26:21.652]                           if (!has_future) {
[10:26:21.652]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:21.652]                               info)
[10:26:21.652]                           }
[10:26:21.652]                           else {
[10:26:21.652]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:21.652]                               info, version)
[10:26:21.652]                           }
[10:26:21.652]                           base::stop(msg)
[10:26:21.652]                         }
[10:26:21.652]                       })
[10:26:21.652]                     }
[10:26:21.652]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:21.652]                     base::options(mc.cores = 1L)
[10:26:21.652]                   }
[10:26:21.652]                   options(future.plan = NULL)
[10:26:21.652]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.652]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:21.652]                 }
[10:26:21.652]                 ...future.workdir <- getwd()
[10:26:21.652]             }
[10:26:21.652]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:21.652]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:21.652]         }
[10:26:21.652]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:21.652]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:21.652]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:21.652]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:21.652]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:21.652]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:21.652]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:21.652]             base::names(...future.oldOptions))
[10:26:21.652]     }
[10:26:21.652]     if (FALSE) {
[10:26:21.652]     }
[10:26:21.652]     else {
[10:26:21.652]         if (TRUE) {
[10:26:21.652]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:21.652]                 open = "w")
[10:26:21.652]         }
[10:26:21.652]         else {
[10:26:21.652]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:21.652]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:21.652]         }
[10:26:21.652]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:21.652]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:21.652]             base::sink(type = "output", split = FALSE)
[10:26:21.652]             base::close(...future.stdout)
[10:26:21.652]         }, add = TRUE)
[10:26:21.652]     }
[10:26:21.652]     ...future.frame <- base::sys.nframe()
[10:26:21.652]     ...future.conditions <- base::list()
[10:26:21.652]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:21.652]     if (FALSE) {
[10:26:21.652]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:21.652]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:21.652]     }
[10:26:21.652]     ...future.result <- base::tryCatch({
[10:26:21.652]         base::withCallingHandlers({
[10:26:21.652]             ...future.value <- base::withVisible(base::local({
[10:26:21.652]                 ...future.makeSendCondition <- base::local({
[10:26:21.652]                   sendCondition <- NULL
[10:26:21.652]                   function(frame = 1L) {
[10:26:21.652]                     if (is.function(sendCondition)) 
[10:26:21.652]                       return(sendCondition)
[10:26:21.652]                     ns <- getNamespace("parallel")
[10:26:21.652]                     if (exists("sendData", mode = "function", 
[10:26:21.652]                       envir = ns)) {
[10:26:21.652]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:21.652]                         envir = ns)
[10:26:21.652]                       envir <- sys.frame(frame)
[10:26:21.652]                       master <- NULL
[10:26:21.652]                       while (!identical(envir, .GlobalEnv) && 
[10:26:21.652]                         !identical(envir, emptyenv())) {
[10:26:21.652]                         if (exists("master", mode = "list", envir = envir, 
[10:26:21.652]                           inherits = FALSE)) {
[10:26:21.652]                           master <- get("master", mode = "list", 
[10:26:21.652]                             envir = envir, inherits = FALSE)
[10:26:21.652]                           if (inherits(master, c("SOCKnode", 
[10:26:21.652]                             "SOCK0node"))) {
[10:26:21.652]                             sendCondition <<- function(cond) {
[10:26:21.652]                               data <- list(type = "VALUE", value = cond, 
[10:26:21.652]                                 success = TRUE)
[10:26:21.652]                               parallel_sendData(master, data)
[10:26:21.652]                             }
[10:26:21.652]                             return(sendCondition)
[10:26:21.652]                           }
[10:26:21.652]                         }
[10:26:21.652]                         frame <- frame + 1L
[10:26:21.652]                         envir <- sys.frame(frame)
[10:26:21.652]                       }
[10:26:21.652]                     }
[10:26:21.652]                     sendCondition <<- function(cond) NULL
[10:26:21.652]                   }
[10:26:21.652]                 })
[10:26:21.652]                 withCallingHandlers({
[10:26:21.652]                   {
[10:26:21.652]                     future:::session_uuid(attributes = TRUE)
[10:26:21.652]                   }
[10:26:21.652]                 }, immediateCondition = function(cond) {
[10:26:21.652]                   sendCondition <- ...future.makeSendCondition()
[10:26:21.652]                   sendCondition(cond)
[10:26:21.652]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.652]                   {
[10:26:21.652]                     inherits <- base::inherits
[10:26:21.652]                     invokeRestart <- base::invokeRestart
[10:26:21.652]                     is.null <- base::is.null
[10:26:21.652]                     muffled <- FALSE
[10:26:21.652]                     if (inherits(cond, "message")) {
[10:26:21.652]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:21.652]                       if (muffled) 
[10:26:21.652]                         invokeRestart("muffleMessage")
[10:26:21.652]                     }
[10:26:21.652]                     else if (inherits(cond, "warning")) {
[10:26:21.652]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:21.652]                       if (muffled) 
[10:26:21.652]                         invokeRestart("muffleWarning")
[10:26:21.652]                     }
[10:26:21.652]                     else if (inherits(cond, "condition")) {
[10:26:21.652]                       if (!is.null(pattern)) {
[10:26:21.652]                         computeRestarts <- base::computeRestarts
[10:26:21.652]                         grepl <- base::grepl
[10:26:21.652]                         restarts <- computeRestarts(cond)
[10:26:21.652]                         for (restart in restarts) {
[10:26:21.652]                           name <- restart$name
[10:26:21.652]                           if (is.null(name)) 
[10:26:21.652]                             next
[10:26:21.652]                           if (!grepl(pattern, name)) 
[10:26:21.652]                             next
[10:26:21.652]                           invokeRestart(restart)
[10:26:21.652]                           muffled <- TRUE
[10:26:21.652]                           break
[10:26:21.652]                         }
[10:26:21.652]                       }
[10:26:21.652]                     }
[10:26:21.652]                     invisible(muffled)
[10:26:21.652]                   }
[10:26:21.652]                   muffleCondition(cond)
[10:26:21.652]                 })
[10:26:21.652]             }))
[10:26:21.652]             future::FutureResult(value = ...future.value$value, 
[10:26:21.652]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.652]                   ...future.rng), globalenv = if (FALSE) 
[10:26:21.652]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:21.652]                     ...future.globalenv.names))
[10:26:21.652]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:21.652]         }, condition = base::local({
[10:26:21.652]             c <- base::c
[10:26:21.652]             inherits <- base::inherits
[10:26:21.652]             invokeRestart <- base::invokeRestart
[10:26:21.652]             length <- base::length
[10:26:21.652]             list <- base::list
[10:26:21.652]             seq.int <- base::seq.int
[10:26:21.652]             signalCondition <- base::signalCondition
[10:26:21.652]             sys.calls <- base::sys.calls
[10:26:21.652]             `[[` <- base::`[[`
[10:26:21.652]             `+` <- base::`+`
[10:26:21.652]             `<<-` <- base::`<<-`
[10:26:21.652]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:21.652]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:21.652]                   3L)]
[10:26:21.652]             }
[10:26:21.652]             function(cond) {
[10:26:21.652]                 is_error <- inherits(cond, "error")
[10:26:21.652]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:21.652]                   NULL)
[10:26:21.652]                 if (is_error) {
[10:26:21.652]                   sessionInformation <- function() {
[10:26:21.652]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:21.652]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:21.652]                       search = base::search(), system = base::Sys.info())
[10:26:21.652]                   }
[10:26:21.652]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.652]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:21.652]                     cond$call), session = sessionInformation(), 
[10:26:21.652]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:21.652]                   signalCondition(cond)
[10:26:21.652]                 }
[10:26:21.652]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:21.652]                 "immediateCondition"))) {
[10:26:21.652]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:21.652]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.652]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:21.652]                   if (TRUE && !signal) {
[10:26:21.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.652]                     {
[10:26:21.652]                       inherits <- base::inherits
[10:26:21.652]                       invokeRestart <- base::invokeRestart
[10:26:21.652]                       is.null <- base::is.null
[10:26:21.652]                       muffled <- FALSE
[10:26:21.652]                       if (inherits(cond, "message")) {
[10:26:21.652]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.652]                         if (muffled) 
[10:26:21.652]                           invokeRestart("muffleMessage")
[10:26:21.652]                       }
[10:26:21.652]                       else if (inherits(cond, "warning")) {
[10:26:21.652]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.652]                         if (muffled) 
[10:26:21.652]                           invokeRestart("muffleWarning")
[10:26:21.652]                       }
[10:26:21.652]                       else if (inherits(cond, "condition")) {
[10:26:21.652]                         if (!is.null(pattern)) {
[10:26:21.652]                           computeRestarts <- base::computeRestarts
[10:26:21.652]                           grepl <- base::grepl
[10:26:21.652]                           restarts <- computeRestarts(cond)
[10:26:21.652]                           for (restart in restarts) {
[10:26:21.652]                             name <- restart$name
[10:26:21.652]                             if (is.null(name)) 
[10:26:21.652]                               next
[10:26:21.652]                             if (!grepl(pattern, name)) 
[10:26:21.652]                               next
[10:26:21.652]                             invokeRestart(restart)
[10:26:21.652]                             muffled <- TRUE
[10:26:21.652]                             break
[10:26:21.652]                           }
[10:26:21.652]                         }
[10:26:21.652]                       }
[10:26:21.652]                       invisible(muffled)
[10:26:21.652]                     }
[10:26:21.652]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.652]                   }
[10:26:21.652]                 }
[10:26:21.652]                 else {
[10:26:21.652]                   if (TRUE) {
[10:26:21.652]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.652]                     {
[10:26:21.652]                       inherits <- base::inherits
[10:26:21.652]                       invokeRestart <- base::invokeRestart
[10:26:21.652]                       is.null <- base::is.null
[10:26:21.652]                       muffled <- FALSE
[10:26:21.652]                       if (inherits(cond, "message")) {
[10:26:21.652]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.652]                         if (muffled) 
[10:26:21.652]                           invokeRestart("muffleMessage")
[10:26:21.652]                       }
[10:26:21.652]                       else if (inherits(cond, "warning")) {
[10:26:21.652]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.652]                         if (muffled) 
[10:26:21.652]                           invokeRestart("muffleWarning")
[10:26:21.652]                       }
[10:26:21.652]                       else if (inherits(cond, "condition")) {
[10:26:21.652]                         if (!is.null(pattern)) {
[10:26:21.652]                           computeRestarts <- base::computeRestarts
[10:26:21.652]                           grepl <- base::grepl
[10:26:21.652]                           restarts <- computeRestarts(cond)
[10:26:21.652]                           for (restart in restarts) {
[10:26:21.652]                             name <- restart$name
[10:26:21.652]                             if (is.null(name)) 
[10:26:21.652]                               next
[10:26:21.652]                             if (!grepl(pattern, name)) 
[10:26:21.652]                               next
[10:26:21.652]                             invokeRestart(restart)
[10:26:21.652]                             muffled <- TRUE
[10:26:21.652]                             break
[10:26:21.652]                           }
[10:26:21.652]                         }
[10:26:21.652]                       }
[10:26:21.652]                       invisible(muffled)
[10:26:21.652]                     }
[10:26:21.652]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.652]                   }
[10:26:21.652]                 }
[10:26:21.652]             }
[10:26:21.652]         }))
[10:26:21.652]     }, error = function(ex) {
[10:26:21.652]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:21.652]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.652]                 ...future.rng), started = ...future.startTime, 
[10:26:21.652]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:21.652]             version = "1.8"), class = "FutureResult")
[10:26:21.652]     }, finally = {
[10:26:21.652]         if (!identical(...future.workdir, getwd())) 
[10:26:21.652]             setwd(...future.workdir)
[10:26:21.652]         {
[10:26:21.652]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:21.652]                 ...future.oldOptions$nwarnings <- NULL
[10:26:21.652]             }
[10:26:21.652]             base::options(...future.oldOptions)
[10:26:21.652]             if (.Platform$OS.type == "windows") {
[10:26:21.652]                 old_names <- names(...future.oldEnvVars)
[10:26:21.652]                 envs <- base::Sys.getenv()
[10:26:21.652]                 names <- names(envs)
[10:26:21.652]                 common <- intersect(names, old_names)
[10:26:21.652]                 added <- setdiff(names, old_names)
[10:26:21.652]                 removed <- setdiff(old_names, names)
[10:26:21.652]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:21.652]                   envs[common]]
[10:26:21.652]                 NAMES <- toupper(changed)
[10:26:21.652]                 args <- list()
[10:26:21.652]                 for (kk in seq_along(NAMES)) {
[10:26:21.652]                   name <- changed[[kk]]
[10:26:21.652]                   NAME <- NAMES[[kk]]
[10:26:21.652]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.652]                     next
[10:26:21.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.652]                 }
[10:26:21.652]                 NAMES <- toupper(added)
[10:26:21.652]                 for (kk in seq_along(NAMES)) {
[10:26:21.652]                   name <- added[[kk]]
[10:26:21.652]                   NAME <- NAMES[[kk]]
[10:26:21.652]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.652]                     next
[10:26:21.652]                   args[[name]] <- ""
[10:26:21.652]                 }
[10:26:21.652]                 NAMES <- toupper(removed)
[10:26:21.652]                 for (kk in seq_along(NAMES)) {
[10:26:21.652]                   name <- removed[[kk]]
[10:26:21.652]                   NAME <- NAMES[[kk]]
[10:26:21.652]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.652]                     next
[10:26:21.652]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.652]                 }
[10:26:21.652]                 if (length(args) > 0) 
[10:26:21.652]                   base::do.call(base::Sys.setenv, args = args)
[10:26:21.652]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:21.652]             }
[10:26:21.652]             else {
[10:26:21.652]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:21.652]             }
[10:26:21.652]             {
[10:26:21.652]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:21.652]                   0L) {
[10:26:21.652]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:21.652]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:21.652]                   base::options(opts)
[10:26:21.652]                 }
[10:26:21.652]                 {
[10:26:21.652]                   {
[10:26:21.652]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:21.652]                     NULL
[10:26:21.652]                   }
[10:26:21.652]                   options(future.plan = NULL)
[10:26:21.652]                   if (is.na(NA_character_)) 
[10:26:21.652]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.652]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:21.652]                   future::plan(list(function (..., workers = 2L, 
[10:26:21.652]                     envir = parent.frame()) 
[10:26:21.652]                   strategy(..., workers = workers, envir = envir)), 
[10:26:21.652]                     .cleanup = FALSE, .init = FALSE)
[10:26:21.652]                 }
[10:26:21.652]             }
[10:26:21.652]         }
[10:26:21.652]     })
[10:26:21.652]     if (TRUE) {
[10:26:21.652]         base::sink(type = "output", split = FALSE)
[10:26:21.652]         if (TRUE) {
[10:26:21.652]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:21.652]         }
[10:26:21.652]         else {
[10:26:21.652]             ...future.result["stdout"] <- base::list(NULL)
[10:26:21.652]         }
[10:26:21.652]         base::close(...future.stdout)
[10:26:21.652]         ...future.stdout <- NULL
[10:26:21.652]     }
[10:26:21.652]     ...future.result$conditions <- ...future.conditions
[10:26:21.652]     ...future.result$finished <- base::Sys.time()
[10:26:21.652]     ...future.result
[10:26:21.652] }
[10:26:21.656] MultisessionFuture started
[10:26:21.656] - Launch lazy future ... done
[10:26:21.656] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[10:26:21.656] result() for ClusterFuture ...
[10:26:21.656] receiveMessageFromWorker() for ClusterFuture ...
[10:26:21.657] - Validating connection of MultisessionFuture
[10:26:21.702] - received message: FutureResult
[10:26:21.702] - Received FutureResult
[10:26:21.702] - Erased future from FutureRegistry
[10:26:21.703] result() for ClusterFuture ...
[10:26:21.703] - result already collected: FutureResult
[10:26:21.703] result() for ClusterFuture ... done
[10:26:21.703] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:21.703] result() for ClusterFuture ... done
[10:26:21.703] result() for ClusterFuture ...
[10:26:21.703] - result already collected: FutureResult
[10:26:21.703] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: 7d06ebf2-2219-4e36-30e4-7214f7670084
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[10:26:21.704] getGlobalsAndPackages() ...
[10:26:21.704] Searching for globals...
[10:26:21.705] - globals found: [2] ‘{’, ‘:::’
[10:26:21.705] Searching for globals ... DONE
[10:26:21.705] Resolving globals: FALSE
[10:26:21.705] 
[10:26:21.706] 
[10:26:21.706] getGlobalsAndPackages() ... DONE
[10:26:21.706] run() for ‘Future’ ...
[10:26:21.706] - state: ‘created’
[10:26:21.706] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:21.717] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:21.717] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:21.718]   - Field: ‘node’
[10:26:21.718]   - Field: ‘label’
[10:26:21.718]   - Field: ‘local’
[10:26:21.718]   - Field: ‘owner’
[10:26:21.721]   - Field: ‘envir’
[10:26:21.721]   - Field: ‘workers’
[10:26:21.721]   - Field: ‘packages’
[10:26:21.721]   - Field: ‘gc’
[10:26:21.721]   - Field: ‘conditions’
[10:26:21.721]   - Field: ‘persistent’
[10:26:21.721]   - Field: ‘expr’
[10:26:21.721]   - Field: ‘uuid’
[10:26:21.721]   - Field: ‘seed’
[10:26:21.721]   - Field: ‘version’
[10:26:21.722]   - Field: ‘result’
[10:26:21.722]   - Field: ‘asynchronous’
[10:26:21.722]   - Field: ‘calls’
[10:26:21.722]   - Field: ‘globals’
[10:26:21.722]   - Field: ‘stdout’
[10:26:21.722]   - Field: ‘earlySignal’
[10:26:21.722]   - Field: ‘lazy’
[10:26:21.722]   - Field: ‘state’
[10:26:21.722] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:21.722] - Launch lazy future ...
[10:26:21.723] Packages needed by the future expression (n = 0): <none>
[10:26:21.723] Packages needed by future strategies (n = 0): <none>
[10:26:21.723] {
[10:26:21.723]     {
[10:26:21.723]         {
[10:26:21.723]             ...future.startTime <- base::Sys.time()
[10:26:21.723]             {
[10:26:21.723]                 {
[10:26:21.723]                   {
[10:26:21.723]                     {
[10:26:21.723]                       base::local({
[10:26:21.723]                         has_future <- base::requireNamespace("future", 
[10:26:21.723]                           quietly = TRUE)
[10:26:21.723]                         if (has_future) {
[10:26:21.723]                           ns <- base::getNamespace("future")
[10:26:21.723]                           version <- ns[[".package"]][["version"]]
[10:26:21.723]                           if (is.null(version)) 
[10:26:21.723]                             version <- utils::packageVersion("future")
[10:26:21.723]                         }
[10:26:21.723]                         else {
[10:26:21.723]                           version <- NULL
[10:26:21.723]                         }
[10:26:21.723]                         if (!has_future || version < "1.8.0") {
[10:26:21.723]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:21.723]                             "", base::R.version$version.string), 
[10:26:21.723]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:21.723]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:21.723]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:21.723]                               "release", "version")], collapse = " "), 
[10:26:21.723]                             hostname = base::Sys.info()[["nodename"]])
[10:26:21.723]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:21.723]                             info)
[10:26:21.723]                           info <- base::paste(info, collapse = "; ")
[10:26:21.723]                           if (!has_future) {
[10:26:21.723]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:21.723]                               info)
[10:26:21.723]                           }
[10:26:21.723]                           else {
[10:26:21.723]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:21.723]                               info, version)
[10:26:21.723]                           }
[10:26:21.723]                           base::stop(msg)
[10:26:21.723]                         }
[10:26:21.723]                       })
[10:26:21.723]                     }
[10:26:21.723]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:21.723]                     base::options(mc.cores = 1L)
[10:26:21.723]                   }
[10:26:21.723]                   options(future.plan = NULL)
[10:26:21.723]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.723]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:21.723]                 }
[10:26:21.723]                 ...future.workdir <- getwd()
[10:26:21.723]             }
[10:26:21.723]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:21.723]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:21.723]         }
[10:26:21.723]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:21.723]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:21.723]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:21.723]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:21.723]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:21.723]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:21.723]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:21.723]             base::names(...future.oldOptions))
[10:26:21.723]     }
[10:26:21.723]     if (FALSE) {
[10:26:21.723]     }
[10:26:21.723]     else {
[10:26:21.723]         if (TRUE) {
[10:26:21.723]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:21.723]                 open = "w")
[10:26:21.723]         }
[10:26:21.723]         else {
[10:26:21.723]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:21.723]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:21.723]         }
[10:26:21.723]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:21.723]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:21.723]             base::sink(type = "output", split = FALSE)
[10:26:21.723]             base::close(...future.stdout)
[10:26:21.723]         }, add = TRUE)
[10:26:21.723]     }
[10:26:21.723]     ...future.frame <- base::sys.nframe()
[10:26:21.723]     ...future.conditions <- base::list()
[10:26:21.723]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:21.723]     if (FALSE) {
[10:26:21.723]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:21.723]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:21.723]     }
[10:26:21.723]     ...future.result <- base::tryCatch({
[10:26:21.723]         base::withCallingHandlers({
[10:26:21.723]             ...future.value <- base::withVisible(base::local({
[10:26:21.723]                 ...future.makeSendCondition <- base::local({
[10:26:21.723]                   sendCondition <- NULL
[10:26:21.723]                   function(frame = 1L) {
[10:26:21.723]                     if (is.function(sendCondition)) 
[10:26:21.723]                       return(sendCondition)
[10:26:21.723]                     ns <- getNamespace("parallel")
[10:26:21.723]                     if (exists("sendData", mode = "function", 
[10:26:21.723]                       envir = ns)) {
[10:26:21.723]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:21.723]                         envir = ns)
[10:26:21.723]                       envir <- sys.frame(frame)
[10:26:21.723]                       master <- NULL
[10:26:21.723]                       while (!identical(envir, .GlobalEnv) && 
[10:26:21.723]                         !identical(envir, emptyenv())) {
[10:26:21.723]                         if (exists("master", mode = "list", envir = envir, 
[10:26:21.723]                           inherits = FALSE)) {
[10:26:21.723]                           master <- get("master", mode = "list", 
[10:26:21.723]                             envir = envir, inherits = FALSE)
[10:26:21.723]                           if (inherits(master, c("SOCKnode", 
[10:26:21.723]                             "SOCK0node"))) {
[10:26:21.723]                             sendCondition <<- function(cond) {
[10:26:21.723]                               data <- list(type = "VALUE", value = cond, 
[10:26:21.723]                                 success = TRUE)
[10:26:21.723]                               parallel_sendData(master, data)
[10:26:21.723]                             }
[10:26:21.723]                             return(sendCondition)
[10:26:21.723]                           }
[10:26:21.723]                         }
[10:26:21.723]                         frame <- frame + 1L
[10:26:21.723]                         envir <- sys.frame(frame)
[10:26:21.723]                       }
[10:26:21.723]                     }
[10:26:21.723]                     sendCondition <<- function(cond) NULL
[10:26:21.723]                   }
[10:26:21.723]                 })
[10:26:21.723]                 withCallingHandlers({
[10:26:21.723]                   {
[10:26:21.723]                     future:::session_uuid(attributes = TRUE)
[10:26:21.723]                   }
[10:26:21.723]                 }, immediateCondition = function(cond) {
[10:26:21.723]                   sendCondition <- ...future.makeSendCondition()
[10:26:21.723]                   sendCondition(cond)
[10:26:21.723]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.723]                   {
[10:26:21.723]                     inherits <- base::inherits
[10:26:21.723]                     invokeRestart <- base::invokeRestart
[10:26:21.723]                     is.null <- base::is.null
[10:26:21.723]                     muffled <- FALSE
[10:26:21.723]                     if (inherits(cond, "message")) {
[10:26:21.723]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:21.723]                       if (muffled) 
[10:26:21.723]                         invokeRestart("muffleMessage")
[10:26:21.723]                     }
[10:26:21.723]                     else if (inherits(cond, "warning")) {
[10:26:21.723]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:21.723]                       if (muffled) 
[10:26:21.723]                         invokeRestart("muffleWarning")
[10:26:21.723]                     }
[10:26:21.723]                     else if (inherits(cond, "condition")) {
[10:26:21.723]                       if (!is.null(pattern)) {
[10:26:21.723]                         computeRestarts <- base::computeRestarts
[10:26:21.723]                         grepl <- base::grepl
[10:26:21.723]                         restarts <- computeRestarts(cond)
[10:26:21.723]                         for (restart in restarts) {
[10:26:21.723]                           name <- restart$name
[10:26:21.723]                           if (is.null(name)) 
[10:26:21.723]                             next
[10:26:21.723]                           if (!grepl(pattern, name)) 
[10:26:21.723]                             next
[10:26:21.723]                           invokeRestart(restart)
[10:26:21.723]                           muffled <- TRUE
[10:26:21.723]                           break
[10:26:21.723]                         }
[10:26:21.723]                       }
[10:26:21.723]                     }
[10:26:21.723]                     invisible(muffled)
[10:26:21.723]                   }
[10:26:21.723]                   muffleCondition(cond)
[10:26:21.723]                 })
[10:26:21.723]             }))
[10:26:21.723]             future::FutureResult(value = ...future.value$value, 
[10:26:21.723]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.723]                   ...future.rng), globalenv = if (FALSE) 
[10:26:21.723]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:21.723]                     ...future.globalenv.names))
[10:26:21.723]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:21.723]         }, condition = base::local({
[10:26:21.723]             c <- base::c
[10:26:21.723]             inherits <- base::inherits
[10:26:21.723]             invokeRestart <- base::invokeRestart
[10:26:21.723]             length <- base::length
[10:26:21.723]             list <- base::list
[10:26:21.723]             seq.int <- base::seq.int
[10:26:21.723]             signalCondition <- base::signalCondition
[10:26:21.723]             sys.calls <- base::sys.calls
[10:26:21.723]             `[[` <- base::`[[`
[10:26:21.723]             `+` <- base::`+`
[10:26:21.723]             `<<-` <- base::`<<-`
[10:26:21.723]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:21.723]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:21.723]                   3L)]
[10:26:21.723]             }
[10:26:21.723]             function(cond) {
[10:26:21.723]                 is_error <- inherits(cond, "error")
[10:26:21.723]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:21.723]                   NULL)
[10:26:21.723]                 if (is_error) {
[10:26:21.723]                   sessionInformation <- function() {
[10:26:21.723]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:21.723]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:21.723]                       search = base::search(), system = base::Sys.info())
[10:26:21.723]                   }
[10:26:21.723]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.723]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:21.723]                     cond$call), session = sessionInformation(), 
[10:26:21.723]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:21.723]                   signalCondition(cond)
[10:26:21.723]                 }
[10:26:21.723]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:21.723]                 "immediateCondition"))) {
[10:26:21.723]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:21.723]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.723]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:21.723]                   if (TRUE && !signal) {
[10:26:21.723]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.723]                     {
[10:26:21.723]                       inherits <- base::inherits
[10:26:21.723]                       invokeRestart <- base::invokeRestart
[10:26:21.723]                       is.null <- base::is.null
[10:26:21.723]                       muffled <- FALSE
[10:26:21.723]                       if (inherits(cond, "message")) {
[10:26:21.723]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.723]                         if (muffled) 
[10:26:21.723]                           invokeRestart("muffleMessage")
[10:26:21.723]                       }
[10:26:21.723]                       else if (inherits(cond, "warning")) {
[10:26:21.723]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.723]                         if (muffled) 
[10:26:21.723]                           invokeRestart("muffleWarning")
[10:26:21.723]                       }
[10:26:21.723]                       else if (inherits(cond, "condition")) {
[10:26:21.723]                         if (!is.null(pattern)) {
[10:26:21.723]                           computeRestarts <- base::computeRestarts
[10:26:21.723]                           grepl <- base::grepl
[10:26:21.723]                           restarts <- computeRestarts(cond)
[10:26:21.723]                           for (restart in restarts) {
[10:26:21.723]                             name <- restart$name
[10:26:21.723]                             if (is.null(name)) 
[10:26:21.723]                               next
[10:26:21.723]                             if (!grepl(pattern, name)) 
[10:26:21.723]                               next
[10:26:21.723]                             invokeRestart(restart)
[10:26:21.723]                             muffled <- TRUE
[10:26:21.723]                             break
[10:26:21.723]                           }
[10:26:21.723]                         }
[10:26:21.723]                       }
[10:26:21.723]                       invisible(muffled)
[10:26:21.723]                     }
[10:26:21.723]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.723]                   }
[10:26:21.723]                 }
[10:26:21.723]                 else {
[10:26:21.723]                   if (TRUE) {
[10:26:21.723]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.723]                     {
[10:26:21.723]                       inherits <- base::inherits
[10:26:21.723]                       invokeRestart <- base::invokeRestart
[10:26:21.723]                       is.null <- base::is.null
[10:26:21.723]                       muffled <- FALSE
[10:26:21.723]                       if (inherits(cond, "message")) {
[10:26:21.723]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.723]                         if (muffled) 
[10:26:21.723]                           invokeRestart("muffleMessage")
[10:26:21.723]                       }
[10:26:21.723]                       else if (inherits(cond, "warning")) {
[10:26:21.723]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.723]                         if (muffled) 
[10:26:21.723]                           invokeRestart("muffleWarning")
[10:26:21.723]                       }
[10:26:21.723]                       else if (inherits(cond, "condition")) {
[10:26:21.723]                         if (!is.null(pattern)) {
[10:26:21.723]                           computeRestarts <- base::computeRestarts
[10:26:21.723]                           grepl <- base::grepl
[10:26:21.723]                           restarts <- computeRestarts(cond)
[10:26:21.723]                           for (restart in restarts) {
[10:26:21.723]                             name <- restart$name
[10:26:21.723]                             if (is.null(name)) 
[10:26:21.723]                               next
[10:26:21.723]                             if (!grepl(pattern, name)) 
[10:26:21.723]                               next
[10:26:21.723]                             invokeRestart(restart)
[10:26:21.723]                             muffled <- TRUE
[10:26:21.723]                             break
[10:26:21.723]                           }
[10:26:21.723]                         }
[10:26:21.723]                       }
[10:26:21.723]                       invisible(muffled)
[10:26:21.723]                     }
[10:26:21.723]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.723]                   }
[10:26:21.723]                 }
[10:26:21.723]             }
[10:26:21.723]         }))
[10:26:21.723]     }, error = function(ex) {
[10:26:21.723]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:21.723]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.723]                 ...future.rng), started = ...future.startTime, 
[10:26:21.723]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:21.723]             version = "1.8"), class = "FutureResult")
[10:26:21.723]     }, finally = {
[10:26:21.723]         if (!identical(...future.workdir, getwd())) 
[10:26:21.723]             setwd(...future.workdir)
[10:26:21.723]         {
[10:26:21.723]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:21.723]                 ...future.oldOptions$nwarnings <- NULL
[10:26:21.723]             }
[10:26:21.723]             base::options(...future.oldOptions)
[10:26:21.723]             if (.Platform$OS.type == "windows") {
[10:26:21.723]                 old_names <- names(...future.oldEnvVars)
[10:26:21.723]                 envs <- base::Sys.getenv()
[10:26:21.723]                 names <- names(envs)
[10:26:21.723]                 common <- intersect(names, old_names)
[10:26:21.723]                 added <- setdiff(names, old_names)
[10:26:21.723]                 removed <- setdiff(old_names, names)
[10:26:21.723]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:21.723]                   envs[common]]
[10:26:21.723]                 NAMES <- toupper(changed)
[10:26:21.723]                 args <- list()
[10:26:21.723]                 for (kk in seq_along(NAMES)) {
[10:26:21.723]                   name <- changed[[kk]]
[10:26:21.723]                   NAME <- NAMES[[kk]]
[10:26:21.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.723]                     next
[10:26:21.723]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.723]                 }
[10:26:21.723]                 NAMES <- toupper(added)
[10:26:21.723]                 for (kk in seq_along(NAMES)) {
[10:26:21.723]                   name <- added[[kk]]
[10:26:21.723]                   NAME <- NAMES[[kk]]
[10:26:21.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.723]                     next
[10:26:21.723]                   args[[name]] <- ""
[10:26:21.723]                 }
[10:26:21.723]                 NAMES <- toupper(removed)
[10:26:21.723]                 for (kk in seq_along(NAMES)) {
[10:26:21.723]                   name <- removed[[kk]]
[10:26:21.723]                   NAME <- NAMES[[kk]]
[10:26:21.723]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.723]                     next
[10:26:21.723]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.723]                 }
[10:26:21.723]                 if (length(args) > 0) 
[10:26:21.723]                   base::do.call(base::Sys.setenv, args = args)
[10:26:21.723]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:21.723]             }
[10:26:21.723]             else {
[10:26:21.723]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:21.723]             }
[10:26:21.723]             {
[10:26:21.723]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:21.723]                   0L) {
[10:26:21.723]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:21.723]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:21.723]                   base::options(opts)
[10:26:21.723]                 }
[10:26:21.723]                 {
[10:26:21.723]                   {
[10:26:21.723]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:21.723]                     NULL
[10:26:21.723]                   }
[10:26:21.723]                   options(future.plan = NULL)
[10:26:21.723]                   if (is.na(NA_character_)) 
[10:26:21.723]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.723]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:21.723]                   future::plan(list(function (..., workers = 2L, 
[10:26:21.723]                     envir = parent.frame()) 
[10:26:21.723]                   strategy(..., workers = workers, envir = envir)), 
[10:26:21.723]                     .cleanup = FALSE, .init = FALSE)
[10:26:21.723]                 }
[10:26:21.723]             }
[10:26:21.723]         }
[10:26:21.723]     })
[10:26:21.723]     if (TRUE) {
[10:26:21.723]         base::sink(type = "output", split = FALSE)
[10:26:21.723]         if (TRUE) {
[10:26:21.723]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:21.723]         }
[10:26:21.723]         else {
[10:26:21.723]             ...future.result["stdout"] <- base::list(NULL)
[10:26:21.723]         }
[10:26:21.723]         base::close(...future.stdout)
[10:26:21.723]         ...future.stdout <- NULL
[10:26:21.723]     }
[10:26:21.723]     ...future.result$conditions <- ...future.conditions
[10:26:21.723]     ...future.result$finished <- base::Sys.time()
[10:26:21.723]     ...future.result
[10:26:21.723] }
[10:26:21.726] MultisessionFuture started
[10:26:21.726] - Launch lazy future ... done
[10:26:21.726] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[10:26:21.727] result() for ClusterFuture ...
[10:26:21.727] receiveMessageFromWorker() for ClusterFuture ...
[10:26:21.727] - Validating connection of MultisessionFuture
[10:26:21.771] - received message: FutureResult
[10:26:21.771] - Received FutureResult
[10:26:21.771] - Erased future from FutureRegistry
[10:26:21.771] result() for ClusterFuture ...
[10:26:21.771] - result already collected: FutureResult
[10:26:21.771] result() for ClusterFuture ... done
[10:26:21.772] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:21.772] result() for ClusterFuture ... done
[10:26:21.772] result() for ClusterFuture ...
[10:26:21.772] - result already collected: FutureResult
[10:26:21.772] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: 7d06ebf2-2219-4e36-30e4-7214f7670084
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[10:26:21.772] getGlobalsAndPackages() ...
[10:26:21.772] Searching for globals...
[10:26:21.773] - globals found: [3] ‘{’, ‘$’, ‘f1’
[10:26:21.773] Searching for globals ... DONE
[10:26:21.773] Resolving globals: FALSE
[10:26:21.776] The total size of the 1 globals is 1.56 MiB (1631688 bytes)
[10:26:21.777] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:26:21.777] - globals: [1] ‘f1’
[10:26:21.777] 
[10:26:21.777] getGlobalsAndPackages() ... DONE
[10:26:21.777] run() for ‘Future’ ...
[10:26:21.777] - state: ‘created’
[10:26:21.777] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:21.788] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:21.788] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:21.788]   - Field: ‘node’
[10:26:21.788]   - Field: ‘label’
[10:26:21.788]   - Field: ‘local’
[10:26:21.788]   - Field: ‘owner’
[10:26:21.789]   - Field: ‘envir’
[10:26:21.789]   - Field: ‘workers’
[10:26:21.789]   - Field: ‘packages’
[10:26:21.789]   - Field: ‘gc’
[10:26:21.789]   - Field: ‘conditions’
[10:26:21.789]   - Field: ‘persistent’
[10:26:21.789]   - Field: ‘expr’
[10:26:21.789]   - Field: ‘uuid’
[10:26:21.789]   - Field: ‘seed’
[10:26:21.789]   - Field: ‘version’
[10:26:21.790]   - Field: ‘result’
[10:26:21.790]   - Field: ‘asynchronous’
[10:26:21.790]   - Field: ‘calls’
[10:26:21.790]   - Field: ‘globals’
[10:26:21.790]   - Field: ‘stdout’
[10:26:21.790]   - Field: ‘earlySignal’
[10:26:21.790]   - Field: ‘lazy’
[10:26:21.790]   - Field: ‘state’
[10:26:21.790] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:21.790] - Launch lazy future ...
[10:26:21.791] Packages needed by the future expression (n = 0): <none>
[10:26:21.791] Packages needed by future strategies (n = 0): <none>
[10:26:21.791] {
[10:26:21.791]     {
[10:26:21.791]         {
[10:26:21.791]             ...future.startTime <- base::Sys.time()
[10:26:21.791]             {
[10:26:21.791]                 {
[10:26:21.791]                   {
[10:26:21.791]                     {
[10:26:21.791]                       base::local({
[10:26:21.791]                         has_future <- base::requireNamespace("future", 
[10:26:21.791]                           quietly = TRUE)
[10:26:21.791]                         if (has_future) {
[10:26:21.791]                           ns <- base::getNamespace("future")
[10:26:21.791]                           version <- ns[[".package"]][["version"]]
[10:26:21.791]                           if (is.null(version)) 
[10:26:21.791]                             version <- utils::packageVersion("future")
[10:26:21.791]                         }
[10:26:21.791]                         else {
[10:26:21.791]                           version <- NULL
[10:26:21.791]                         }
[10:26:21.791]                         if (!has_future || version < "1.8.0") {
[10:26:21.791]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:21.791]                             "", base::R.version$version.string), 
[10:26:21.791]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:21.791]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:21.791]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:21.791]                               "release", "version")], collapse = " "), 
[10:26:21.791]                             hostname = base::Sys.info()[["nodename"]])
[10:26:21.791]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:21.791]                             info)
[10:26:21.791]                           info <- base::paste(info, collapse = "; ")
[10:26:21.791]                           if (!has_future) {
[10:26:21.791]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:21.791]                               info)
[10:26:21.791]                           }
[10:26:21.791]                           else {
[10:26:21.791]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:21.791]                               info, version)
[10:26:21.791]                           }
[10:26:21.791]                           base::stop(msg)
[10:26:21.791]                         }
[10:26:21.791]                       })
[10:26:21.791]                     }
[10:26:21.791]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:21.791]                     base::options(mc.cores = 1L)
[10:26:21.791]                   }
[10:26:21.791]                   options(future.plan = NULL)
[10:26:21.791]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.791]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:21.791]                 }
[10:26:21.791]                 ...future.workdir <- getwd()
[10:26:21.791]             }
[10:26:21.791]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:21.791]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:21.791]         }
[10:26:21.791]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:21.791]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:21.791]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:21.791]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:21.791]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:21.791]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:21.791]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:21.791]             base::names(...future.oldOptions))
[10:26:21.791]     }
[10:26:21.791]     if (FALSE) {
[10:26:21.791]     }
[10:26:21.791]     else {
[10:26:21.791]         if (TRUE) {
[10:26:21.791]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:21.791]                 open = "w")
[10:26:21.791]         }
[10:26:21.791]         else {
[10:26:21.791]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:21.791]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:21.791]         }
[10:26:21.791]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:21.791]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:21.791]             base::sink(type = "output", split = FALSE)
[10:26:21.791]             base::close(...future.stdout)
[10:26:21.791]         }, add = TRUE)
[10:26:21.791]     }
[10:26:21.791]     ...future.frame <- base::sys.nframe()
[10:26:21.791]     ...future.conditions <- base::list()
[10:26:21.791]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:21.791]     if (FALSE) {
[10:26:21.791]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:21.791]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:21.791]     }
[10:26:21.791]     ...future.result <- base::tryCatch({
[10:26:21.791]         base::withCallingHandlers({
[10:26:21.791]             ...future.value <- base::withVisible(base::local({
[10:26:21.791]                 ...future.makeSendCondition <- base::local({
[10:26:21.791]                   sendCondition <- NULL
[10:26:21.791]                   function(frame = 1L) {
[10:26:21.791]                     if (is.function(sendCondition)) 
[10:26:21.791]                       return(sendCondition)
[10:26:21.791]                     ns <- getNamespace("parallel")
[10:26:21.791]                     if (exists("sendData", mode = "function", 
[10:26:21.791]                       envir = ns)) {
[10:26:21.791]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:21.791]                         envir = ns)
[10:26:21.791]                       envir <- sys.frame(frame)
[10:26:21.791]                       master <- NULL
[10:26:21.791]                       while (!identical(envir, .GlobalEnv) && 
[10:26:21.791]                         !identical(envir, emptyenv())) {
[10:26:21.791]                         if (exists("master", mode = "list", envir = envir, 
[10:26:21.791]                           inherits = FALSE)) {
[10:26:21.791]                           master <- get("master", mode = "list", 
[10:26:21.791]                             envir = envir, inherits = FALSE)
[10:26:21.791]                           if (inherits(master, c("SOCKnode", 
[10:26:21.791]                             "SOCK0node"))) {
[10:26:21.791]                             sendCondition <<- function(cond) {
[10:26:21.791]                               data <- list(type = "VALUE", value = cond, 
[10:26:21.791]                                 success = TRUE)
[10:26:21.791]                               parallel_sendData(master, data)
[10:26:21.791]                             }
[10:26:21.791]                             return(sendCondition)
[10:26:21.791]                           }
[10:26:21.791]                         }
[10:26:21.791]                         frame <- frame + 1L
[10:26:21.791]                         envir <- sys.frame(frame)
[10:26:21.791]                       }
[10:26:21.791]                     }
[10:26:21.791]                     sendCondition <<- function(cond) NULL
[10:26:21.791]                   }
[10:26:21.791]                 })
[10:26:21.791]                 withCallingHandlers({
[10:26:21.791]                   {
[10:26:21.791]                     f1$owner
[10:26:21.791]                   }
[10:26:21.791]                 }, immediateCondition = function(cond) {
[10:26:21.791]                   sendCondition <- ...future.makeSendCondition()
[10:26:21.791]                   sendCondition(cond)
[10:26:21.791]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.791]                   {
[10:26:21.791]                     inherits <- base::inherits
[10:26:21.791]                     invokeRestart <- base::invokeRestart
[10:26:21.791]                     is.null <- base::is.null
[10:26:21.791]                     muffled <- FALSE
[10:26:21.791]                     if (inherits(cond, "message")) {
[10:26:21.791]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:21.791]                       if (muffled) 
[10:26:21.791]                         invokeRestart("muffleMessage")
[10:26:21.791]                     }
[10:26:21.791]                     else if (inherits(cond, "warning")) {
[10:26:21.791]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:21.791]                       if (muffled) 
[10:26:21.791]                         invokeRestart("muffleWarning")
[10:26:21.791]                     }
[10:26:21.791]                     else if (inherits(cond, "condition")) {
[10:26:21.791]                       if (!is.null(pattern)) {
[10:26:21.791]                         computeRestarts <- base::computeRestarts
[10:26:21.791]                         grepl <- base::grepl
[10:26:21.791]                         restarts <- computeRestarts(cond)
[10:26:21.791]                         for (restart in restarts) {
[10:26:21.791]                           name <- restart$name
[10:26:21.791]                           if (is.null(name)) 
[10:26:21.791]                             next
[10:26:21.791]                           if (!grepl(pattern, name)) 
[10:26:21.791]                             next
[10:26:21.791]                           invokeRestart(restart)
[10:26:21.791]                           muffled <- TRUE
[10:26:21.791]                           break
[10:26:21.791]                         }
[10:26:21.791]                       }
[10:26:21.791]                     }
[10:26:21.791]                     invisible(muffled)
[10:26:21.791]                   }
[10:26:21.791]                   muffleCondition(cond)
[10:26:21.791]                 })
[10:26:21.791]             }))
[10:26:21.791]             future::FutureResult(value = ...future.value$value, 
[10:26:21.791]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.791]                   ...future.rng), globalenv = if (FALSE) 
[10:26:21.791]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:21.791]                     ...future.globalenv.names))
[10:26:21.791]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:21.791]         }, condition = base::local({
[10:26:21.791]             c <- base::c
[10:26:21.791]             inherits <- base::inherits
[10:26:21.791]             invokeRestart <- base::invokeRestart
[10:26:21.791]             length <- base::length
[10:26:21.791]             list <- base::list
[10:26:21.791]             seq.int <- base::seq.int
[10:26:21.791]             signalCondition <- base::signalCondition
[10:26:21.791]             sys.calls <- base::sys.calls
[10:26:21.791]             `[[` <- base::`[[`
[10:26:21.791]             `+` <- base::`+`
[10:26:21.791]             `<<-` <- base::`<<-`
[10:26:21.791]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:21.791]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:21.791]                   3L)]
[10:26:21.791]             }
[10:26:21.791]             function(cond) {
[10:26:21.791]                 is_error <- inherits(cond, "error")
[10:26:21.791]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:21.791]                   NULL)
[10:26:21.791]                 if (is_error) {
[10:26:21.791]                   sessionInformation <- function() {
[10:26:21.791]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:21.791]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:21.791]                       search = base::search(), system = base::Sys.info())
[10:26:21.791]                   }
[10:26:21.791]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.791]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:21.791]                     cond$call), session = sessionInformation(), 
[10:26:21.791]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:21.791]                   signalCondition(cond)
[10:26:21.791]                 }
[10:26:21.791]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:21.791]                 "immediateCondition"))) {
[10:26:21.791]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:21.791]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.791]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:21.791]                   if (TRUE && !signal) {
[10:26:21.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.791]                     {
[10:26:21.791]                       inherits <- base::inherits
[10:26:21.791]                       invokeRestart <- base::invokeRestart
[10:26:21.791]                       is.null <- base::is.null
[10:26:21.791]                       muffled <- FALSE
[10:26:21.791]                       if (inherits(cond, "message")) {
[10:26:21.791]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.791]                         if (muffled) 
[10:26:21.791]                           invokeRestart("muffleMessage")
[10:26:21.791]                       }
[10:26:21.791]                       else if (inherits(cond, "warning")) {
[10:26:21.791]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.791]                         if (muffled) 
[10:26:21.791]                           invokeRestart("muffleWarning")
[10:26:21.791]                       }
[10:26:21.791]                       else if (inherits(cond, "condition")) {
[10:26:21.791]                         if (!is.null(pattern)) {
[10:26:21.791]                           computeRestarts <- base::computeRestarts
[10:26:21.791]                           grepl <- base::grepl
[10:26:21.791]                           restarts <- computeRestarts(cond)
[10:26:21.791]                           for (restart in restarts) {
[10:26:21.791]                             name <- restart$name
[10:26:21.791]                             if (is.null(name)) 
[10:26:21.791]                               next
[10:26:21.791]                             if (!grepl(pattern, name)) 
[10:26:21.791]                               next
[10:26:21.791]                             invokeRestart(restart)
[10:26:21.791]                             muffled <- TRUE
[10:26:21.791]                             break
[10:26:21.791]                           }
[10:26:21.791]                         }
[10:26:21.791]                       }
[10:26:21.791]                       invisible(muffled)
[10:26:21.791]                     }
[10:26:21.791]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.791]                   }
[10:26:21.791]                 }
[10:26:21.791]                 else {
[10:26:21.791]                   if (TRUE) {
[10:26:21.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.791]                     {
[10:26:21.791]                       inherits <- base::inherits
[10:26:21.791]                       invokeRestart <- base::invokeRestart
[10:26:21.791]                       is.null <- base::is.null
[10:26:21.791]                       muffled <- FALSE
[10:26:21.791]                       if (inherits(cond, "message")) {
[10:26:21.791]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.791]                         if (muffled) 
[10:26:21.791]                           invokeRestart("muffleMessage")
[10:26:21.791]                       }
[10:26:21.791]                       else if (inherits(cond, "warning")) {
[10:26:21.791]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.791]                         if (muffled) 
[10:26:21.791]                           invokeRestart("muffleWarning")
[10:26:21.791]                       }
[10:26:21.791]                       else if (inherits(cond, "condition")) {
[10:26:21.791]                         if (!is.null(pattern)) {
[10:26:21.791]                           computeRestarts <- base::computeRestarts
[10:26:21.791]                           grepl <- base::grepl
[10:26:21.791]                           restarts <- computeRestarts(cond)
[10:26:21.791]                           for (restart in restarts) {
[10:26:21.791]                             name <- restart$name
[10:26:21.791]                             if (is.null(name)) 
[10:26:21.791]                               next
[10:26:21.791]                             if (!grepl(pattern, name)) 
[10:26:21.791]                               next
[10:26:21.791]                             invokeRestart(restart)
[10:26:21.791]                             muffled <- TRUE
[10:26:21.791]                             break
[10:26:21.791]                           }
[10:26:21.791]                         }
[10:26:21.791]                       }
[10:26:21.791]                       invisible(muffled)
[10:26:21.791]                     }
[10:26:21.791]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.791]                   }
[10:26:21.791]                 }
[10:26:21.791]             }
[10:26:21.791]         }))
[10:26:21.791]     }, error = function(ex) {
[10:26:21.791]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:21.791]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.791]                 ...future.rng), started = ...future.startTime, 
[10:26:21.791]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:21.791]             version = "1.8"), class = "FutureResult")
[10:26:21.791]     }, finally = {
[10:26:21.791]         if (!identical(...future.workdir, getwd())) 
[10:26:21.791]             setwd(...future.workdir)
[10:26:21.791]         {
[10:26:21.791]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:21.791]                 ...future.oldOptions$nwarnings <- NULL
[10:26:21.791]             }
[10:26:21.791]             base::options(...future.oldOptions)
[10:26:21.791]             if (.Platform$OS.type == "windows") {
[10:26:21.791]                 old_names <- names(...future.oldEnvVars)
[10:26:21.791]                 envs <- base::Sys.getenv()
[10:26:21.791]                 names <- names(envs)
[10:26:21.791]                 common <- intersect(names, old_names)
[10:26:21.791]                 added <- setdiff(names, old_names)
[10:26:21.791]                 removed <- setdiff(old_names, names)
[10:26:21.791]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:21.791]                   envs[common]]
[10:26:21.791]                 NAMES <- toupper(changed)
[10:26:21.791]                 args <- list()
[10:26:21.791]                 for (kk in seq_along(NAMES)) {
[10:26:21.791]                   name <- changed[[kk]]
[10:26:21.791]                   NAME <- NAMES[[kk]]
[10:26:21.791]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.791]                     next
[10:26:21.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.791]                 }
[10:26:21.791]                 NAMES <- toupper(added)
[10:26:21.791]                 for (kk in seq_along(NAMES)) {
[10:26:21.791]                   name <- added[[kk]]
[10:26:21.791]                   NAME <- NAMES[[kk]]
[10:26:21.791]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.791]                     next
[10:26:21.791]                   args[[name]] <- ""
[10:26:21.791]                 }
[10:26:21.791]                 NAMES <- toupper(removed)
[10:26:21.791]                 for (kk in seq_along(NAMES)) {
[10:26:21.791]                   name <- removed[[kk]]
[10:26:21.791]                   NAME <- NAMES[[kk]]
[10:26:21.791]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.791]                     next
[10:26:21.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.791]                 }
[10:26:21.791]                 if (length(args) > 0) 
[10:26:21.791]                   base::do.call(base::Sys.setenv, args = args)
[10:26:21.791]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:21.791]             }
[10:26:21.791]             else {
[10:26:21.791]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:21.791]             }
[10:26:21.791]             {
[10:26:21.791]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:21.791]                   0L) {
[10:26:21.791]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:21.791]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:21.791]                   base::options(opts)
[10:26:21.791]                 }
[10:26:21.791]                 {
[10:26:21.791]                   {
[10:26:21.791]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:21.791]                     NULL
[10:26:21.791]                   }
[10:26:21.791]                   options(future.plan = NULL)
[10:26:21.791]                   if (is.na(NA_character_)) 
[10:26:21.791]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.791]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:21.791]                   future::plan(list(function (..., workers = 2L, 
[10:26:21.791]                     envir = parent.frame()) 
[10:26:21.791]                   strategy(..., workers = workers, envir = envir)), 
[10:26:21.791]                     .cleanup = FALSE, .init = FALSE)
[10:26:21.791]                 }
[10:26:21.791]             }
[10:26:21.791]         }
[10:26:21.791]     })
[10:26:21.791]     if (TRUE) {
[10:26:21.791]         base::sink(type = "output", split = FALSE)
[10:26:21.791]         if (TRUE) {
[10:26:21.791]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:21.791]         }
[10:26:21.791]         else {
[10:26:21.791]             ...future.result["stdout"] <- base::list(NULL)
[10:26:21.791]         }
[10:26:21.791]         base::close(...future.stdout)
[10:26:21.791]         ...future.stdout <- NULL
[10:26:21.791]     }
[10:26:21.791]     ...future.result$conditions <- ...future.conditions
[10:26:21.791]     ...future.result$finished <- base::Sys.time()
[10:26:21.791]     ...future.result
[10:26:21.791] }
[10:26:21.794] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[10:26:21.795] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[10:26:21.846] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[10:26:21.846] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[10:26:21.847] MultisessionFuture started
[10:26:21.847] - Launch lazy future ... done
[10:26:21.847] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[10:26:21.847] result() for ClusterFuture ...
[10:26:21.847] receiveMessageFromWorker() for ClusterFuture ...
[10:26:21.847] - Validating connection of MultisessionFuture
[10:26:21.891] - received message: FutureResult
[10:26:21.891] - Received FutureResult
[10:26:21.891] - Erased future from FutureRegistry
[10:26:21.891] result() for ClusterFuture ...
[10:26:21.892] - result already collected: FutureResult
[10:26:21.892] result() for ClusterFuture ... done
[10:26:21.892] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:21.892] result() for ClusterFuture ... done
[10:26:21.892] result() for ClusterFuture ...
[10:26:21.892] - result already collected: FutureResult
[10:26:21.892] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: defa8917-db0d-febc-3b53-0b6987030b23
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[10:26:21.892] getGlobalsAndPackages() ...
[10:26:21.892] Searching for globals...
[10:26:21.893] - globals found: [3] ‘{’, ‘$’, ‘f1’
[10:26:21.893] Searching for globals ... DONE
[10:26:21.894] Resolving globals: FALSE
[10:26:21.896] The total size of the 1 globals is 1.56 MiB (1634624 bytes)
[10:26:21.896] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:26:21.896] - globals: [1] ‘f1’
[10:26:21.896] 
[10:26:21.896] getGlobalsAndPackages() ... DONE
[10:26:21.896] run() for ‘Future’ ...
[10:26:21.896] - state: ‘created’
[10:26:21.897] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:21.907] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:21.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:21.907]   - Field: ‘node’
[10:26:21.907]   - Field: ‘label’
[10:26:21.908]   - Field: ‘local’
[10:26:21.908]   - Field: ‘owner’
[10:26:21.908]   - Field: ‘envir’
[10:26:21.908]   - Field: ‘workers’
[10:26:21.908]   - Field: ‘packages’
[10:26:21.908]   - Field: ‘gc’
[10:26:21.908]   - Field: ‘conditions’
[10:26:21.908]   - Field: ‘persistent’
[10:26:21.908]   - Field: ‘expr’
[10:26:21.908]   - Field: ‘uuid’
[10:26:21.909]   - Field: ‘seed’
[10:26:21.909]   - Field: ‘version’
[10:26:21.909]   - Field: ‘result’
[10:26:21.909]   - Field: ‘asynchronous’
[10:26:21.909]   - Field: ‘calls’
[10:26:21.909]   - Field: ‘globals’
[10:26:21.909]   - Field: ‘stdout’
[10:26:21.909]   - Field: ‘earlySignal’
[10:26:21.909]   - Field: ‘lazy’
[10:26:21.909]   - Field: ‘state’
[10:26:21.909] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:21.910] - Launch lazy future ...
[10:26:21.910] Packages needed by the future expression (n = 0): <none>
[10:26:21.910] Packages needed by future strategies (n = 0): <none>
[10:26:21.910] {
[10:26:21.910]     {
[10:26:21.910]         {
[10:26:21.910]             ...future.startTime <- base::Sys.time()
[10:26:21.910]             {
[10:26:21.910]                 {
[10:26:21.910]                   {
[10:26:21.910]                     {
[10:26:21.910]                       base::local({
[10:26:21.910]                         has_future <- base::requireNamespace("future", 
[10:26:21.910]                           quietly = TRUE)
[10:26:21.910]                         if (has_future) {
[10:26:21.910]                           ns <- base::getNamespace("future")
[10:26:21.910]                           version <- ns[[".package"]][["version"]]
[10:26:21.910]                           if (is.null(version)) 
[10:26:21.910]                             version <- utils::packageVersion("future")
[10:26:21.910]                         }
[10:26:21.910]                         else {
[10:26:21.910]                           version <- NULL
[10:26:21.910]                         }
[10:26:21.910]                         if (!has_future || version < "1.8.0") {
[10:26:21.910]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:21.910]                             "", base::R.version$version.string), 
[10:26:21.910]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:21.910]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:21.910]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:21.910]                               "release", "version")], collapse = " "), 
[10:26:21.910]                             hostname = base::Sys.info()[["nodename"]])
[10:26:21.910]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:21.910]                             info)
[10:26:21.910]                           info <- base::paste(info, collapse = "; ")
[10:26:21.910]                           if (!has_future) {
[10:26:21.910]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:21.910]                               info)
[10:26:21.910]                           }
[10:26:21.910]                           else {
[10:26:21.910]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:21.910]                               info, version)
[10:26:21.910]                           }
[10:26:21.910]                           base::stop(msg)
[10:26:21.910]                         }
[10:26:21.910]                       })
[10:26:21.910]                     }
[10:26:21.910]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:21.910]                     base::options(mc.cores = 1L)
[10:26:21.910]                   }
[10:26:21.910]                   options(future.plan = NULL)
[10:26:21.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:21.910]                 }
[10:26:21.910]                 ...future.workdir <- getwd()
[10:26:21.910]             }
[10:26:21.910]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:21.910]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:21.910]         }
[10:26:21.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:21.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:21.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:21.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:21.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:21.910]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:21.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:21.910]             base::names(...future.oldOptions))
[10:26:21.910]     }
[10:26:21.910]     if (FALSE) {
[10:26:21.910]     }
[10:26:21.910]     else {
[10:26:21.910]         if (TRUE) {
[10:26:21.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:21.910]                 open = "w")
[10:26:21.910]         }
[10:26:21.910]         else {
[10:26:21.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:21.910]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:21.910]         }
[10:26:21.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:21.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:21.910]             base::sink(type = "output", split = FALSE)
[10:26:21.910]             base::close(...future.stdout)
[10:26:21.910]         }, add = TRUE)
[10:26:21.910]     }
[10:26:21.910]     ...future.frame <- base::sys.nframe()
[10:26:21.910]     ...future.conditions <- base::list()
[10:26:21.910]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:21.910]     if (FALSE) {
[10:26:21.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:21.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:21.910]     }
[10:26:21.910]     ...future.result <- base::tryCatch({
[10:26:21.910]         base::withCallingHandlers({
[10:26:21.910]             ...future.value <- base::withVisible(base::local({
[10:26:21.910]                 ...future.makeSendCondition <- base::local({
[10:26:21.910]                   sendCondition <- NULL
[10:26:21.910]                   function(frame = 1L) {
[10:26:21.910]                     if (is.function(sendCondition)) 
[10:26:21.910]                       return(sendCondition)
[10:26:21.910]                     ns <- getNamespace("parallel")
[10:26:21.910]                     if (exists("sendData", mode = "function", 
[10:26:21.910]                       envir = ns)) {
[10:26:21.910]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:21.910]                         envir = ns)
[10:26:21.910]                       envir <- sys.frame(frame)
[10:26:21.910]                       master <- NULL
[10:26:21.910]                       while (!identical(envir, .GlobalEnv) && 
[10:26:21.910]                         !identical(envir, emptyenv())) {
[10:26:21.910]                         if (exists("master", mode = "list", envir = envir, 
[10:26:21.910]                           inherits = FALSE)) {
[10:26:21.910]                           master <- get("master", mode = "list", 
[10:26:21.910]                             envir = envir, inherits = FALSE)
[10:26:21.910]                           if (inherits(master, c("SOCKnode", 
[10:26:21.910]                             "SOCK0node"))) {
[10:26:21.910]                             sendCondition <<- function(cond) {
[10:26:21.910]                               data <- list(type = "VALUE", value = cond, 
[10:26:21.910]                                 success = TRUE)
[10:26:21.910]                               parallel_sendData(master, data)
[10:26:21.910]                             }
[10:26:21.910]                             return(sendCondition)
[10:26:21.910]                           }
[10:26:21.910]                         }
[10:26:21.910]                         frame <- frame + 1L
[10:26:21.910]                         envir <- sys.frame(frame)
[10:26:21.910]                       }
[10:26:21.910]                     }
[10:26:21.910]                     sendCondition <<- function(cond) NULL
[10:26:21.910]                   }
[10:26:21.910]                 })
[10:26:21.910]                 withCallingHandlers({
[10:26:21.910]                   {
[10:26:21.910]                     f1$owner
[10:26:21.910]                   }
[10:26:21.910]                 }, immediateCondition = function(cond) {
[10:26:21.910]                   sendCondition <- ...future.makeSendCondition()
[10:26:21.910]                   sendCondition(cond)
[10:26:21.910]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.910]                   {
[10:26:21.910]                     inherits <- base::inherits
[10:26:21.910]                     invokeRestart <- base::invokeRestart
[10:26:21.910]                     is.null <- base::is.null
[10:26:21.910]                     muffled <- FALSE
[10:26:21.910]                     if (inherits(cond, "message")) {
[10:26:21.910]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:21.910]                       if (muffled) 
[10:26:21.910]                         invokeRestart("muffleMessage")
[10:26:21.910]                     }
[10:26:21.910]                     else if (inherits(cond, "warning")) {
[10:26:21.910]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:21.910]                       if (muffled) 
[10:26:21.910]                         invokeRestart("muffleWarning")
[10:26:21.910]                     }
[10:26:21.910]                     else if (inherits(cond, "condition")) {
[10:26:21.910]                       if (!is.null(pattern)) {
[10:26:21.910]                         computeRestarts <- base::computeRestarts
[10:26:21.910]                         grepl <- base::grepl
[10:26:21.910]                         restarts <- computeRestarts(cond)
[10:26:21.910]                         for (restart in restarts) {
[10:26:21.910]                           name <- restart$name
[10:26:21.910]                           if (is.null(name)) 
[10:26:21.910]                             next
[10:26:21.910]                           if (!grepl(pattern, name)) 
[10:26:21.910]                             next
[10:26:21.910]                           invokeRestart(restart)
[10:26:21.910]                           muffled <- TRUE
[10:26:21.910]                           break
[10:26:21.910]                         }
[10:26:21.910]                       }
[10:26:21.910]                     }
[10:26:21.910]                     invisible(muffled)
[10:26:21.910]                   }
[10:26:21.910]                   muffleCondition(cond)
[10:26:21.910]                 })
[10:26:21.910]             }))
[10:26:21.910]             future::FutureResult(value = ...future.value$value, 
[10:26:21.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.910]                   ...future.rng), globalenv = if (FALSE) 
[10:26:21.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:21.910]                     ...future.globalenv.names))
[10:26:21.910]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:21.910]         }, condition = base::local({
[10:26:21.910]             c <- base::c
[10:26:21.910]             inherits <- base::inherits
[10:26:21.910]             invokeRestart <- base::invokeRestart
[10:26:21.910]             length <- base::length
[10:26:21.910]             list <- base::list
[10:26:21.910]             seq.int <- base::seq.int
[10:26:21.910]             signalCondition <- base::signalCondition
[10:26:21.910]             sys.calls <- base::sys.calls
[10:26:21.910]             `[[` <- base::`[[`
[10:26:21.910]             `+` <- base::`+`
[10:26:21.910]             `<<-` <- base::`<<-`
[10:26:21.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:21.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:21.910]                   3L)]
[10:26:21.910]             }
[10:26:21.910]             function(cond) {
[10:26:21.910]                 is_error <- inherits(cond, "error")
[10:26:21.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:21.910]                   NULL)
[10:26:21.910]                 if (is_error) {
[10:26:21.910]                   sessionInformation <- function() {
[10:26:21.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:21.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:21.910]                       search = base::search(), system = base::Sys.info())
[10:26:21.910]                   }
[10:26:21.910]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:21.910]                     cond$call), session = sessionInformation(), 
[10:26:21.910]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:21.910]                   signalCondition(cond)
[10:26:21.910]                 }
[10:26:21.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:21.910]                 "immediateCondition"))) {
[10:26:21.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:21.910]                   ...future.conditions[[length(...future.conditions) + 
[10:26:21.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:21.910]                   if (TRUE && !signal) {
[10:26:21.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.910]                     {
[10:26:21.910]                       inherits <- base::inherits
[10:26:21.910]                       invokeRestart <- base::invokeRestart
[10:26:21.910]                       is.null <- base::is.null
[10:26:21.910]                       muffled <- FALSE
[10:26:21.910]                       if (inherits(cond, "message")) {
[10:26:21.910]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.910]                         if (muffled) 
[10:26:21.910]                           invokeRestart("muffleMessage")
[10:26:21.910]                       }
[10:26:21.910]                       else if (inherits(cond, "warning")) {
[10:26:21.910]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.910]                         if (muffled) 
[10:26:21.910]                           invokeRestart("muffleWarning")
[10:26:21.910]                       }
[10:26:21.910]                       else if (inherits(cond, "condition")) {
[10:26:21.910]                         if (!is.null(pattern)) {
[10:26:21.910]                           computeRestarts <- base::computeRestarts
[10:26:21.910]                           grepl <- base::grepl
[10:26:21.910]                           restarts <- computeRestarts(cond)
[10:26:21.910]                           for (restart in restarts) {
[10:26:21.910]                             name <- restart$name
[10:26:21.910]                             if (is.null(name)) 
[10:26:21.910]                               next
[10:26:21.910]                             if (!grepl(pattern, name)) 
[10:26:21.910]                               next
[10:26:21.910]                             invokeRestart(restart)
[10:26:21.910]                             muffled <- TRUE
[10:26:21.910]                             break
[10:26:21.910]                           }
[10:26:21.910]                         }
[10:26:21.910]                       }
[10:26:21.910]                       invisible(muffled)
[10:26:21.910]                     }
[10:26:21.910]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.910]                   }
[10:26:21.910]                 }
[10:26:21.910]                 else {
[10:26:21.910]                   if (TRUE) {
[10:26:21.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:21.910]                     {
[10:26:21.910]                       inherits <- base::inherits
[10:26:21.910]                       invokeRestart <- base::invokeRestart
[10:26:21.910]                       is.null <- base::is.null
[10:26:21.910]                       muffled <- FALSE
[10:26:21.910]                       if (inherits(cond, "message")) {
[10:26:21.910]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:21.910]                         if (muffled) 
[10:26:21.910]                           invokeRestart("muffleMessage")
[10:26:21.910]                       }
[10:26:21.910]                       else if (inherits(cond, "warning")) {
[10:26:21.910]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:21.910]                         if (muffled) 
[10:26:21.910]                           invokeRestart("muffleWarning")
[10:26:21.910]                       }
[10:26:21.910]                       else if (inherits(cond, "condition")) {
[10:26:21.910]                         if (!is.null(pattern)) {
[10:26:21.910]                           computeRestarts <- base::computeRestarts
[10:26:21.910]                           grepl <- base::grepl
[10:26:21.910]                           restarts <- computeRestarts(cond)
[10:26:21.910]                           for (restart in restarts) {
[10:26:21.910]                             name <- restart$name
[10:26:21.910]                             if (is.null(name)) 
[10:26:21.910]                               next
[10:26:21.910]                             if (!grepl(pattern, name)) 
[10:26:21.910]                               next
[10:26:21.910]                             invokeRestart(restart)
[10:26:21.910]                             muffled <- TRUE
[10:26:21.910]                             break
[10:26:21.910]                           }
[10:26:21.910]                         }
[10:26:21.910]                       }
[10:26:21.910]                       invisible(muffled)
[10:26:21.910]                     }
[10:26:21.910]                     muffleCondition(cond, pattern = "^muffle")
[10:26:21.910]                   }
[10:26:21.910]                 }
[10:26:21.910]             }
[10:26:21.910]         }))
[10:26:21.910]     }, error = function(ex) {
[10:26:21.910]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:21.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:21.910]                 ...future.rng), started = ...future.startTime, 
[10:26:21.910]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:21.910]             version = "1.8"), class = "FutureResult")
[10:26:21.910]     }, finally = {
[10:26:21.910]         if (!identical(...future.workdir, getwd())) 
[10:26:21.910]             setwd(...future.workdir)
[10:26:21.910]         {
[10:26:21.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:21.910]                 ...future.oldOptions$nwarnings <- NULL
[10:26:21.910]             }
[10:26:21.910]             base::options(...future.oldOptions)
[10:26:21.910]             if (.Platform$OS.type == "windows") {
[10:26:21.910]                 old_names <- names(...future.oldEnvVars)
[10:26:21.910]                 envs <- base::Sys.getenv()
[10:26:21.910]                 names <- names(envs)
[10:26:21.910]                 common <- intersect(names, old_names)
[10:26:21.910]                 added <- setdiff(names, old_names)
[10:26:21.910]                 removed <- setdiff(old_names, names)
[10:26:21.910]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:21.910]                   envs[common]]
[10:26:21.910]                 NAMES <- toupper(changed)
[10:26:21.910]                 args <- list()
[10:26:21.910]                 for (kk in seq_along(NAMES)) {
[10:26:21.910]                   name <- changed[[kk]]
[10:26:21.910]                   NAME <- NAMES[[kk]]
[10:26:21.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.910]                     next
[10:26:21.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.910]                 }
[10:26:21.910]                 NAMES <- toupper(added)
[10:26:21.910]                 for (kk in seq_along(NAMES)) {
[10:26:21.910]                   name <- added[[kk]]
[10:26:21.910]                   NAME <- NAMES[[kk]]
[10:26:21.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.910]                     next
[10:26:21.910]                   args[[name]] <- ""
[10:26:21.910]                 }
[10:26:21.910]                 NAMES <- toupper(removed)
[10:26:21.910]                 for (kk in seq_along(NAMES)) {
[10:26:21.910]                   name <- removed[[kk]]
[10:26:21.910]                   NAME <- NAMES[[kk]]
[10:26:21.910]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:21.910]                     next
[10:26:21.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:21.910]                 }
[10:26:21.910]                 if (length(args) > 0) 
[10:26:21.910]                   base::do.call(base::Sys.setenv, args = args)
[10:26:21.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:21.910]             }
[10:26:21.910]             else {
[10:26:21.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:21.910]             }
[10:26:21.910]             {
[10:26:21.910]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:21.910]                   0L) {
[10:26:21.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:21.910]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:21.910]                   base::options(opts)
[10:26:21.910]                 }
[10:26:21.910]                 {
[10:26:21.910]                   {
[10:26:21.910]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:21.910]                     NULL
[10:26:21.910]                   }
[10:26:21.910]                   options(future.plan = NULL)
[10:26:21.910]                   if (is.na(NA_character_)) 
[10:26:21.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:21.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:21.910]                   future::plan(list(function (..., workers = 2L, 
[10:26:21.910]                     envir = parent.frame()) 
[10:26:21.910]                   strategy(..., workers = workers, envir = envir)), 
[10:26:21.910]                     .cleanup = FALSE, .init = FALSE)
[10:26:21.910]                 }
[10:26:21.910]             }
[10:26:21.910]         }
[10:26:21.910]     })
[10:26:21.910]     if (TRUE) {
[10:26:21.910]         base::sink(type = "output", split = FALSE)
[10:26:21.910]         if (TRUE) {
[10:26:21.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:21.910]         }
[10:26:21.910]         else {
[10:26:21.910]             ...future.result["stdout"] <- base::list(NULL)
[10:26:21.910]         }
[10:26:21.910]         base::close(...future.stdout)
[10:26:21.910]         ...future.stdout <- NULL
[10:26:21.910]     }
[10:26:21.910]     ...future.result$conditions <- ...future.conditions
[10:26:21.910]     ...future.result$finished <- base::Sys.time()
[10:26:21.910]     ...future.result
[10:26:21.910] }
[10:26:21.913] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[10:26:21.915] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[10:26:21.966] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[10:26:21.966] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[10:26:21.966] MultisessionFuture started
[10:26:21.967] - Launch lazy future ... done
[10:26:21.967] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[10:26:21.967] result() for ClusterFuture ...
[10:26:21.967] receiveMessageFromWorker() for ClusterFuture ...
[10:26:21.967] - Validating connection of MultisessionFuture
[10:26:22.011] - received message: FutureResult
[10:26:22.011] - Received FutureResult
[10:26:22.011] - Erased future from FutureRegistry
[10:26:22.012] result() for ClusterFuture ...
[10:26:22.012] - result already collected: FutureResult
[10:26:22.012] result() for ClusterFuture ... done
[10:26:22.012] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:22.012] result() for ClusterFuture ... done
[10:26:22.012] result() for ClusterFuture ...
[10:26:22.012] - result already collected: FutureResult
[10:26:22.012] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: defa8917-db0d-febc-3b53-0b6987030b23
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[10:26:22.012] getGlobalsAndPackages() ...
[10:26:22.013] Searching for globals...
[10:26:22.014] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[10:26:22.014] Searching for globals ... DONE
[10:26:22.014] Resolving globals: FALSE
[10:26:22.016] The total size of the 1 globals is 1.56 MiB (1637560 bytes)
[10:26:22.017] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[10:26:22.017] - globals: [1] ‘f1’
[10:26:22.017] 
[10:26:22.017] getGlobalsAndPackages() ... DONE
[10:26:22.017] run() for ‘Future’ ...
[10:26:22.017] - state: ‘created’
[10:26:22.018] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:22.028] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:22.028] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:22.028]   - Field: ‘node’
[10:26:22.028]   - Field: ‘label’
[10:26:22.028]   - Field: ‘local’
[10:26:22.029]   - Field: ‘owner’
[10:26:22.029]   - Field: ‘envir’
[10:26:22.029]   - Field: ‘workers’
[10:26:22.029]   - Field: ‘packages’
[10:26:22.029]   - Field: ‘gc’
[10:26:22.029]   - Field: ‘conditions’
[10:26:22.029]   - Field: ‘persistent’
[10:26:22.029]   - Field: ‘expr’
[10:26:22.029]   - Field: ‘uuid’
[10:26:22.029]   - Field: ‘seed’
[10:26:22.029]   - Field: ‘version’
[10:26:22.030]   - Field: ‘result’
[10:26:22.030]   - Field: ‘asynchronous’
[10:26:22.030]   - Field: ‘calls’
[10:26:22.030]   - Field: ‘globals’
[10:26:22.030]   - Field: ‘stdout’
[10:26:22.030]   - Field: ‘earlySignal’
[10:26:22.030]   - Field: ‘lazy’
[10:26:22.030]   - Field: ‘state’
[10:26:22.030] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:22.030] - Launch lazy future ...
[10:26:22.031] Packages needed by the future expression (n = 0): <none>
[10:26:22.031] Packages needed by future strategies (n = 0): <none>
[10:26:22.031] {
[10:26:22.031]     {
[10:26:22.031]         {
[10:26:22.031]             ...future.startTime <- base::Sys.time()
[10:26:22.031]             {
[10:26:22.031]                 {
[10:26:22.031]                   {
[10:26:22.031]                     {
[10:26:22.031]                       base::local({
[10:26:22.031]                         has_future <- base::requireNamespace("future", 
[10:26:22.031]                           quietly = TRUE)
[10:26:22.031]                         if (has_future) {
[10:26:22.031]                           ns <- base::getNamespace("future")
[10:26:22.031]                           version <- ns[[".package"]][["version"]]
[10:26:22.031]                           if (is.null(version)) 
[10:26:22.031]                             version <- utils::packageVersion("future")
[10:26:22.031]                         }
[10:26:22.031]                         else {
[10:26:22.031]                           version <- NULL
[10:26:22.031]                         }
[10:26:22.031]                         if (!has_future || version < "1.8.0") {
[10:26:22.031]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:22.031]                             "", base::R.version$version.string), 
[10:26:22.031]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:22.031]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:22.031]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:22.031]                               "release", "version")], collapse = " "), 
[10:26:22.031]                             hostname = base::Sys.info()[["nodename"]])
[10:26:22.031]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:22.031]                             info)
[10:26:22.031]                           info <- base::paste(info, collapse = "; ")
[10:26:22.031]                           if (!has_future) {
[10:26:22.031]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:22.031]                               info)
[10:26:22.031]                           }
[10:26:22.031]                           else {
[10:26:22.031]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:22.031]                               info, version)
[10:26:22.031]                           }
[10:26:22.031]                           base::stop(msg)
[10:26:22.031]                         }
[10:26:22.031]                       })
[10:26:22.031]                     }
[10:26:22.031]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:22.031]                     base::options(mc.cores = 1L)
[10:26:22.031]                   }
[10:26:22.031]                   options(future.plan = NULL)
[10:26:22.031]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.031]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:22.031]                 }
[10:26:22.031]                 ...future.workdir <- getwd()
[10:26:22.031]             }
[10:26:22.031]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:22.031]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:22.031]         }
[10:26:22.031]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:22.031]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:22.031]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:22.031]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:22.031]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:22.031]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:22.031]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:22.031]             base::names(...future.oldOptions))
[10:26:22.031]     }
[10:26:22.031]     if (FALSE) {
[10:26:22.031]     }
[10:26:22.031]     else {
[10:26:22.031]         if (TRUE) {
[10:26:22.031]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:22.031]                 open = "w")
[10:26:22.031]         }
[10:26:22.031]         else {
[10:26:22.031]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:22.031]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:22.031]         }
[10:26:22.031]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:22.031]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:22.031]             base::sink(type = "output", split = FALSE)
[10:26:22.031]             base::close(...future.stdout)
[10:26:22.031]         }, add = TRUE)
[10:26:22.031]     }
[10:26:22.031]     ...future.frame <- base::sys.nframe()
[10:26:22.031]     ...future.conditions <- base::list()
[10:26:22.031]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:22.031]     if (FALSE) {
[10:26:22.031]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:22.031]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:22.031]     }
[10:26:22.031]     ...future.result <- base::tryCatch({
[10:26:22.031]         base::withCallingHandlers({
[10:26:22.031]             ...future.value <- base::withVisible(base::local({
[10:26:22.031]                 ...future.makeSendCondition <- base::local({
[10:26:22.031]                   sendCondition <- NULL
[10:26:22.031]                   function(frame = 1L) {
[10:26:22.031]                     if (is.function(sendCondition)) 
[10:26:22.031]                       return(sendCondition)
[10:26:22.031]                     ns <- getNamespace("parallel")
[10:26:22.031]                     if (exists("sendData", mode = "function", 
[10:26:22.031]                       envir = ns)) {
[10:26:22.031]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:22.031]                         envir = ns)
[10:26:22.031]                       envir <- sys.frame(frame)
[10:26:22.031]                       master <- NULL
[10:26:22.031]                       while (!identical(envir, .GlobalEnv) && 
[10:26:22.031]                         !identical(envir, emptyenv())) {
[10:26:22.031]                         if (exists("master", mode = "list", envir = envir, 
[10:26:22.031]                           inherits = FALSE)) {
[10:26:22.031]                           master <- get("master", mode = "list", 
[10:26:22.031]                             envir = envir, inherits = FALSE)
[10:26:22.031]                           if (inherits(master, c("SOCKnode", 
[10:26:22.031]                             "SOCK0node"))) {
[10:26:22.031]                             sendCondition <<- function(cond) {
[10:26:22.031]                               data <- list(type = "VALUE", value = cond, 
[10:26:22.031]                                 success = TRUE)
[10:26:22.031]                               parallel_sendData(master, data)
[10:26:22.031]                             }
[10:26:22.031]                             return(sendCondition)
[10:26:22.031]                           }
[10:26:22.031]                         }
[10:26:22.031]                         frame <- frame + 1L
[10:26:22.031]                         envir <- sys.frame(frame)
[10:26:22.031]                       }
[10:26:22.031]                     }
[10:26:22.031]                     sendCondition <<- function(cond) NULL
[10:26:22.031]                   }
[10:26:22.031]                 })
[10:26:22.031]                 withCallingHandlers({
[10:26:22.031]                   {
[10:26:22.031]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[10:26:22.031]                     "not-owner"
[10:26:22.031]                   }
[10:26:22.031]                 }, immediateCondition = function(cond) {
[10:26:22.031]                   sendCondition <- ...future.makeSendCondition()
[10:26:22.031]                   sendCondition(cond)
[10:26:22.031]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.031]                   {
[10:26:22.031]                     inherits <- base::inherits
[10:26:22.031]                     invokeRestart <- base::invokeRestart
[10:26:22.031]                     is.null <- base::is.null
[10:26:22.031]                     muffled <- FALSE
[10:26:22.031]                     if (inherits(cond, "message")) {
[10:26:22.031]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:22.031]                       if (muffled) 
[10:26:22.031]                         invokeRestart("muffleMessage")
[10:26:22.031]                     }
[10:26:22.031]                     else if (inherits(cond, "warning")) {
[10:26:22.031]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:22.031]                       if (muffled) 
[10:26:22.031]                         invokeRestart("muffleWarning")
[10:26:22.031]                     }
[10:26:22.031]                     else if (inherits(cond, "condition")) {
[10:26:22.031]                       if (!is.null(pattern)) {
[10:26:22.031]                         computeRestarts <- base::computeRestarts
[10:26:22.031]                         grepl <- base::grepl
[10:26:22.031]                         restarts <- computeRestarts(cond)
[10:26:22.031]                         for (restart in restarts) {
[10:26:22.031]                           name <- restart$name
[10:26:22.031]                           if (is.null(name)) 
[10:26:22.031]                             next
[10:26:22.031]                           if (!grepl(pattern, name)) 
[10:26:22.031]                             next
[10:26:22.031]                           invokeRestart(restart)
[10:26:22.031]                           muffled <- TRUE
[10:26:22.031]                           break
[10:26:22.031]                         }
[10:26:22.031]                       }
[10:26:22.031]                     }
[10:26:22.031]                     invisible(muffled)
[10:26:22.031]                   }
[10:26:22.031]                   muffleCondition(cond)
[10:26:22.031]                 })
[10:26:22.031]             }))
[10:26:22.031]             future::FutureResult(value = ...future.value$value, 
[10:26:22.031]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.031]                   ...future.rng), globalenv = if (FALSE) 
[10:26:22.031]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:22.031]                     ...future.globalenv.names))
[10:26:22.031]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:22.031]         }, condition = base::local({
[10:26:22.031]             c <- base::c
[10:26:22.031]             inherits <- base::inherits
[10:26:22.031]             invokeRestart <- base::invokeRestart
[10:26:22.031]             length <- base::length
[10:26:22.031]             list <- base::list
[10:26:22.031]             seq.int <- base::seq.int
[10:26:22.031]             signalCondition <- base::signalCondition
[10:26:22.031]             sys.calls <- base::sys.calls
[10:26:22.031]             `[[` <- base::`[[`
[10:26:22.031]             `+` <- base::`+`
[10:26:22.031]             `<<-` <- base::`<<-`
[10:26:22.031]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:22.031]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:22.031]                   3L)]
[10:26:22.031]             }
[10:26:22.031]             function(cond) {
[10:26:22.031]                 is_error <- inherits(cond, "error")
[10:26:22.031]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:22.031]                   NULL)
[10:26:22.031]                 if (is_error) {
[10:26:22.031]                   sessionInformation <- function() {
[10:26:22.031]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:22.031]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:22.031]                       search = base::search(), system = base::Sys.info())
[10:26:22.031]                   }
[10:26:22.031]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.031]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:22.031]                     cond$call), session = sessionInformation(), 
[10:26:22.031]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:22.031]                   signalCondition(cond)
[10:26:22.031]                 }
[10:26:22.031]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:22.031]                 "immediateCondition"))) {
[10:26:22.031]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:22.031]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.031]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:22.031]                   if (TRUE && !signal) {
[10:26:22.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.031]                     {
[10:26:22.031]                       inherits <- base::inherits
[10:26:22.031]                       invokeRestart <- base::invokeRestart
[10:26:22.031]                       is.null <- base::is.null
[10:26:22.031]                       muffled <- FALSE
[10:26:22.031]                       if (inherits(cond, "message")) {
[10:26:22.031]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.031]                         if (muffled) 
[10:26:22.031]                           invokeRestart("muffleMessage")
[10:26:22.031]                       }
[10:26:22.031]                       else if (inherits(cond, "warning")) {
[10:26:22.031]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.031]                         if (muffled) 
[10:26:22.031]                           invokeRestart("muffleWarning")
[10:26:22.031]                       }
[10:26:22.031]                       else if (inherits(cond, "condition")) {
[10:26:22.031]                         if (!is.null(pattern)) {
[10:26:22.031]                           computeRestarts <- base::computeRestarts
[10:26:22.031]                           grepl <- base::grepl
[10:26:22.031]                           restarts <- computeRestarts(cond)
[10:26:22.031]                           for (restart in restarts) {
[10:26:22.031]                             name <- restart$name
[10:26:22.031]                             if (is.null(name)) 
[10:26:22.031]                               next
[10:26:22.031]                             if (!grepl(pattern, name)) 
[10:26:22.031]                               next
[10:26:22.031]                             invokeRestart(restart)
[10:26:22.031]                             muffled <- TRUE
[10:26:22.031]                             break
[10:26:22.031]                           }
[10:26:22.031]                         }
[10:26:22.031]                       }
[10:26:22.031]                       invisible(muffled)
[10:26:22.031]                     }
[10:26:22.031]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.031]                   }
[10:26:22.031]                 }
[10:26:22.031]                 else {
[10:26:22.031]                   if (TRUE) {
[10:26:22.031]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.031]                     {
[10:26:22.031]                       inherits <- base::inherits
[10:26:22.031]                       invokeRestart <- base::invokeRestart
[10:26:22.031]                       is.null <- base::is.null
[10:26:22.031]                       muffled <- FALSE
[10:26:22.031]                       if (inherits(cond, "message")) {
[10:26:22.031]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.031]                         if (muffled) 
[10:26:22.031]                           invokeRestart("muffleMessage")
[10:26:22.031]                       }
[10:26:22.031]                       else if (inherits(cond, "warning")) {
[10:26:22.031]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.031]                         if (muffled) 
[10:26:22.031]                           invokeRestart("muffleWarning")
[10:26:22.031]                       }
[10:26:22.031]                       else if (inherits(cond, "condition")) {
[10:26:22.031]                         if (!is.null(pattern)) {
[10:26:22.031]                           computeRestarts <- base::computeRestarts
[10:26:22.031]                           grepl <- base::grepl
[10:26:22.031]                           restarts <- computeRestarts(cond)
[10:26:22.031]                           for (restart in restarts) {
[10:26:22.031]                             name <- restart$name
[10:26:22.031]                             if (is.null(name)) 
[10:26:22.031]                               next
[10:26:22.031]                             if (!grepl(pattern, name)) 
[10:26:22.031]                               next
[10:26:22.031]                             invokeRestart(restart)
[10:26:22.031]                             muffled <- TRUE
[10:26:22.031]                             break
[10:26:22.031]                           }
[10:26:22.031]                         }
[10:26:22.031]                       }
[10:26:22.031]                       invisible(muffled)
[10:26:22.031]                     }
[10:26:22.031]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.031]                   }
[10:26:22.031]                 }
[10:26:22.031]             }
[10:26:22.031]         }))
[10:26:22.031]     }, error = function(ex) {
[10:26:22.031]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:22.031]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.031]                 ...future.rng), started = ...future.startTime, 
[10:26:22.031]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:22.031]             version = "1.8"), class = "FutureResult")
[10:26:22.031]     }, finally = {
[10:26:22.031]         if (!identical(...future.workdir, getwd())) 
[10:26:22.031]             setwd(...future.workdir)
[10:26:22.031]         {
[10:26:22.031]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:22.031]                 ...future.oldOptions$nwarnings <- NULL
[10:26:22.031]             }
[10:26:22.031]             base::options(...future.oldOptions)
[10:26:22.031]             if (.Platform$OS.type == "windows") {
[10:26:22.031]                 old_names <- names(...future.oldEnvVars)
[10:26:22.031]                 envs <- base::Sys.getenv()
[10:26:22.031]                 names <- names(envs)
[10:26:22.031]                 common <- intersect(names, old_names)
[10:26:22.031]                 added <- setdiff(names, old_names)
[10:26:22.031]                 removed <- setdiff(old_names, names)
[10:26:22.031]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:22.031]                   envs[common]]
[10:26:22.031]                 NAMES <- toupper(changed)
[10:26:22.031]                 args <- list()
[10:26:22.031]                 for (kk in seq_along(NAMES)) {
[10:26:22.031]                   name <- changed[[kk]]
[10:26:22.031]                   NAME <- NAMES[[kk]]
[10:26:22.031]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.031]                     next
[10:26:22.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.031]                 }
[10:26:22.031]                 NAMES <- toupper(added)
[10:26:22.031]                 for (kk in seq_along(NAMES)) {
[10:26:22.031]                   name <- added[[kk]]
[10:26:22.031]                   NAME <- NAMES[[kk]]
[10:26:22.031]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.031]                     next
[10:26:22.031]                   args[[name]] <- ""
[10:26:22.031]                 }
[10:26:22.031]                 NAMES <- toupper(removed)
[10:26:22.031]                 for (kk in seq_along(NAMES)) {
[10:26:22.031]                   name <- removed[[kk]]
[10:26:22.031]                   NAME <- NAMES[[kk]]
[10:26:22.031]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.031]                     next
[10:26:22.031]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.031]                 }
[10:26:22.031]                 if (length(args) > 0) 
[10:26:22.031]                   base::do.call(base::Sys.setenv, args = args)
[10:26:22.031]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:22.031]             }
[10:26:22.031]             else {
[10:26:22.031]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:22.031]             }
[10:26:22.031]             {
[10:26:22.031]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:22.031]                   0L) {
[10:26:22.031]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:22.031]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:22.031]                   base::options(opts)
[10:26:22.031]                 }
[10:26:22.031]                 {
[10:26:22.031]                   {
[10:26:22.031]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:22.031]                     NULL
[10:26:22.031]                   }
[10:26:22.031]                   options(future.plan = NULL)
[10:26:22.031]                   if (is.na(NA_character_)) 
[10:26:22.031]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.031]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:22.031]                   future::plan(list(function (..., workers = 2L, 
[10:26:22.031]                     envir = parent.frame()) 
[10:26:22.031]                   strategy(..., workers = workers, envir = envir)), 
[10:26:22.031]                     .cleanup = FALSE, .init = FALSE)
[10:26:22.031]                 }
[10:26:22.031]             }
[10:26:22.031]         }
[10:26:22.031]     })
[10:26:22.031]     if (TRUE) {
[10:26:22.031]         base::sink(type = "output", split = FALSE)
[10:26:22.031]         if (TRUE) {
[10:26:22.031]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:22.031]         }
[10:26:22.031]         else {
[10:26:22.031]             ...future.result["stdout"] <- base::list(NULL)
[10:26:22.031]         }
[10:26:22.031]         base::close(...future.stdout)
[10:26:22.031]         ...future.stdout <- NULL
[10:26:22.031]     }
[10:26:22.031]     ...future.result$conditions <- ...future.conditions
[10:26:22.031]     ...future.result$finished <- base::Sys.time()
[10:26:22.031]     ...future.result
[10:26:22.031] }
[10:26:22.034] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[10:26:22.037] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[10:26:22.090] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[10:26:22.090] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[10:26:22.091] MultisessionFuture started
[10:26:22.091] - Launch lazy future ... done
[10:26:22.091] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[10:26:22.091] result() for ClusterFuture ...
[10:26:22.091] receiveMessageFromWorker() for ClusterFuture ...
[10:26:22.091] - Validating connection of MultisessionFuture
[10:26:22.135] - received message: FutureResult
[10:26:22.135] - Received FutureResult
[10:26:22.136] - Erased future from FutureRegistry
[10:26:22.136] result() for ClusterFuture ...
[10:26:22.136] - result already collected: FutureResult
[10:26:22.136] result() for ClusterFuture ... done
[10:26:22.136] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:22.136] result() for ClusterFuture ... done
[10:26:22.136] result() for ClusterFuture ...
[10:26:22.136] - result already collected: FutureResult
[10:26:22.136] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[10:26:22.137] getGlobalsAndPackages() ...
[10:26:22.137] Searching for globals...
[10:26:22.137] - globals found: [1] ‘{’
[10:26:22.138] Searching for globals ... DONE
[10:26:22.138] Resolving globals: FALSE
[10:26:22.138] 
[10:26:22.138] 
[10:26:22.138] getGlobalsAndPackages() ... DONE
[10:26:22.138] run() for ‘Future’ ...
[10:26:22.139] - state: ‘created’
[10:26:22.139] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:22.149] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:22.149] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:22.149]   - Field: ‘node’
[10:26:22.149]   - Field: ‘label’
[10:26:22.149]   - Field: ‘local’
[10:26:22.150]   - Field: ‘owner’
[10:26:22.150]   - Field: ‘envir’
[10:26:22.150]   - Field: ‘workers’
[10:26:22.150]   - Field: ‘packages’
[10:26:22.150]   - Field: ‘gc’
[10:26:22.150]   - Field: ‘conditions’
[10:26:22.150]   - Field: ‘persistent’
[10:26:22.150]   - Field: ‘expr’
[10:26:22.150]   - Field: ‘uuid’
[10:26:22.150]   - Field: ‘seed’
[10:26:22.150]   - Field: ‘version’
[10:26:22.151]   - Field: ‘result’
[10:26:22.151]   - Field: ‘asynchronous’
[10:26:22.151]   - Field: ‘calls’
[10:26:22.151]   - Field: ‘globals’
[10:26:22.151]   - Field: ‘stdout’
[10:26:22.151]   - Field: ‘earlySignal’
[10:26:22.151]   - Field: ‘lazy’
[10:26:22.151]   - Field: ‘state’
[10:26:22.151] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:22.151] - Launch lazy future ...
[10:26:22.152] Packages needed by the future expression (n = 0): <none>
[10:26:22.152] Packages needed by future strategies (n = 0): <none>
[10:26:22.152] {
[10:26:22.152]     {
[10:26:22.152]         {
[10:26:22.152]             ...future.startTime <- base::Sys.time()
[10:26:22.152]             {
[10:26:22.152]                 {
[10:26:22.152]                   {
[10:26:22.152]                     {
[10:26:22.152]                       base::local({
[10:26:22.152]                         has_future <- base::requireNamespace("future", 
[10:26:22.152]                           quietly = TRUE)
[10:26:22.152]                         if (has_future) {
[10:26:22.152]                           ns <- base::getNamespace("future")
[10:26:22.152]                           version <- ns[[".package"]][["version"]]
[10:26:22.152]                           if (is.null(version)) 
[10:26:22.152]                             version <- utils::packageVersion("future")
[10:26:22.152]                         }
[10:26:22.152]                         else {
[10:26:22.152]                           version <- NULL
[10:26:22.152]                         }
[10:26:22.152]                         if (!has_future || version < "1.8.0") {
[10:26:22.152]                           info <- base::c(r_version = base::gsub("R version ", 
[10:26:22.152]                             "", base::R.version$version.string), 
[10:26:22.152]                             platform = base::sprintf("%s (%s-bit)", 
[10:26:22.152]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:26:22.152]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:22.152]                               "release", "version")], collapse = " "), 
[10:26:22.152]                             hostname = base::Sys.info()[["nodename"]])
[10:26:22.152]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:26:22.152]                             info)
[10:26:22.152]                           info <- base::paste(info, collapse = "; ")
[10:26:22.152]                           if (!has_future) {
[10:26:22.152]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:22.152]                               info)
[10:26:22.152]                           }
[10:26:22.152]                           else {
[10:26:22.152]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:22.152]                               info, version)
[10:26:22.152]                           }
[10:26:22.152]                           base::stop(msg)
[10:26:22.152]                         }
[10:26:22.152]                       })
[10:26:22.152]                     }
[10:26:22.152]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:22.152]                     base::options(mc.cores = 1L)
[10:26:22.152]                   }
[10:26:22.152]                   options(future.plan = NULL)
[10:26:22.152]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.152]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:22.152]                 }
[10:26:22.152]                 ...future.workdir <- getwd()
[10:26:22.152]             }
[10:26:22.152]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:22.152]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:22.152]         }
[10:26:22.152]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:22.152]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:22.152]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:22.152]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:22.152]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:22.152]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:22.152]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:22.152]             base::names(...future.oldOptions))
[10:26:22.152]     }
[10:26:22.152]     if (FALSE) {
[10:26:22.152]     }
[10:26:22.152]     else {
[10:26:22.152]         if (TRUE) {
[10:26:22.152]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:22.152]                 open = "w")
[10:26:22.152]         }
[10:26:22.152]         else {
[10:26:22.152]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:22.152]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:22.152]         }
[10:26:22.152]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:22.152]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:22.152]             base::sink(type = "output", split = FALSE)
[10:26:22.152]             base::close(...future.stdout)
[10:26:22.152]         }, add = TRUE)
[10:26:22.152]     }
[10:26:22.152]     ...future.frame <- base::sys.nframe()
[10:26:22.152]     ...future.conditions <- base::list()
[10:26:22.152]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:22.152]     if (FALSE) {
[10:26:22.152]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:22.152]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:22.152]     }
[10:26:22.152]     ...future.result <- base::tryCatch({
[10:26:22.152]         base::withCallingHandlers({
[10:26:22.152]             ...future.value <- base::withVisible(base::local({
[10:26:22.152]                 ...future.makeSendCondition <- base::local({
[10:26:22.152]                   sendCondition <- NULL
[10:26:22.152]                   function(frame = 1L) {
[10:26:22.152]                     if (is.function(sendCondition)) 
[10:26:22.152]                       return(sendCondition)
[10:26:22.152]                     ns <- getNamespace("parallel")
[10:26:22.152]                     if (exists("sendData", mode = "function", 
[10:26:22.152]                       envir = ns)) {
[10:26:22.152]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:22.152]                         envir = ns)
[10:26:22.152]                       envir <- sys.frame(frame)
[10:26:22.152]                       master <- NULL
[10:26:22.152]                       while (!identical(envir, .GlobalEnv) && 
[10:26:22.152]                         !identical(envir, emptyenv())) {
[10:26:22.152]                         if (exists("master", mode = "list", envir = envir, 
[10:26:22.152]                           inherits = FALSE)) {
[10:26:22.152]                           master <- get("master", mode = "list", 
[10:26:22.152]                             envir = envir, inherits = FALSE)
[10:26:22.152]                           if (inherits(master, c("SOCKnode", 
[10:26:22.152]                             "SOCK0node"))) {
[10:26:22.152]                             sendCondition <<- function(cond) {
[10:26:22.152]                               data <- list(type = "VALUE", value = cond, 
[10:26:22.152]                                 success = TRUE)
[10:26:22.152]                               parallel_sendData(master, data)
[10:26:22.152]                             }
[10:26:22.152]                             return(sendCondition)
[10:26:22.152]                           }
[10:26:22.152]                         }
[10:26:22.152]                         frame <- frame + 1L
[10:26:22.152]                         envir <- sys.frame(frame)
[10:26:22.152]                       }
[10:26:22.152]                     }
[10:26:22.152]                     sendCondition <<- function(cond) NULL
[10:26:22.152]                   }
[10:26:22.152]                 })
[10:26:22.152]                 withCallingHandlers({
[10:26:22.152]                   {
[10:26:22.152]                     42L
[10:26:22.152]                   }
[10:26:22.152]                 }, immediateCondition = function(cond) {
[10:26:22.152]                   sendCondition <- ...future.makeSendCondition()
[10:26:22.152]                   sendCondition(cond)
[10:26:22.152]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.152]                   {
[10:26:22.152]                     inherits <- base::inherits
[10:26:22.152]                     invokeRestart <- base::invokeRestart
[10:26:22.152]                     is.null <- base::is.null
[10:26:22.152]                     muffled <- FALSE
[10:26:22.152]                     if (inherits(cond, "message")) {
[10:26:22.152]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:22.152]                       if (muffled) 
[10:26:22.152]                         invokeRestart("muffleMessage")
[10:26:22.152]                     }
[10:26:22.152]                     else if (inherits(cond, "warning")) {
[10:26:22.152]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:22.152]                       if (muffled) 
[10:26:22.152]                         invokeRestart("muffleWarning")
[10:26:22.152]                     }
[10:26:22.152]                     else if (inherits(cond, "condition")) {
[10:26:22.152]                       if (!is.null(pattern)) {
[10:26:22.152]                         computeRestarts <- base::computeRestarts
[10:26:22.152]                         grepl <- base::grepl
[10:26:22.152]                         restarts <- computeRestarts(cond)
[10:26:22.152]                         for (restart in restarts) {
[10:26:22.152]                           name <- restart$name
[10:26:22.152]                           if (is.null(name)) 
[10:26:22.152]                             next
[10:26:22.152]                           if (!grepl(pattern, name)) 
[10:26:22.152]                             next
[10:26:22.152]                           invokeRestart(restart)
[10:26:22.152]                           muffled <- TRUE
[10:26:22.152]                           break
[10:26:22.152]                         }
[10:26:22.152]                       }
[10:26:22.152]                     }
[10:26:22.152]                     invisible(muffled)
[10:26:22.152]                   }
[10:26:22.152]                   muffleCondition(cond)
[10:26:22.152]                 })
[10:26:22.152]             }))
[10:26:22.152]             future::FutureResult(value = ...future.value$value, 
[10:26:22.152]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.152]                   ...future.rng), globalenv = if (FALSE) 
[10:26:22.152]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:22.152]                     ...future.globalenv.names))
[10:26:22.152]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:22.152]         }, condition = base::local({
[10:26:22.152]             c <- base::c
[10:26:22.152]             inherits <- base::inherits
[10:26:22.152]             invokeRestart <- base::invokeRestart
[10:26:22.152]             length <- base::length
[10:26:22.152]             list <- base::list
[10:26:22.152]             seq.int <- base::seq.int
[10:26:22.152]             signalCondition <- base::signalCondition
[10:26:22.152]             sys.calls <- base::sys.calls
[10:26:22.152]             `[[` <- base::`[[`
[10:26:22.152]             `+` <- base::`+`
[10:26:22.152]             `<<-` <- base::`<<-`
[10:26:22.152]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:22.152]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:22.152]                   3L)]
[10:26:22.152]             }
[10:26:22.152]             function(cond) {
[10:26:22.152]                 is_error <- inherits(cond, "error")
[10:26:22.152]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:22.152]                   NULL)
[10:26:22.152]                 if (is_error) {
[10:26:22.152]                   sessionInformation <- function() {
[10:26:22.152]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:22.152]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:22.152]                       search = base::search(), system = base::Sys.info())
[10:26:22.152]                   }
[10:26:22.152]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.152]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:22.152]                     cond$call), session = sessionInformation(), 
[10:26:22.152]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:22.152]                   signalCondition(cond)
[10:26:22.152]                 }
[10:26:22.152]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:22.152]                 "immediateCondition"))) {
[10:26:22.152]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:22.152]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.152]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:22.152]                   if (TRUE && !signal) {
[10:26:22.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.152]                     {
[10:26:22.152]                       inherits <- base::inherits
[10:26:22.152]                       invokeRestart <- base::invokeRestart
[10:26:22.152]                       is.null <- base::is.null
[10:26:22.152]                       muffled <- FALSE
[10:26:22.152]                       if (inherits(cond, "message")) {
[10:26:22.152]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.152]                         if (muffled) 
[10:26:22.152]                           invokeRestart("muffleMessage")
[10:26:22.152]                       }
[10:26:22.152]                       else if (inherits(cond, "warning")) {
[10:26:22.152]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.152]                         if (muffled) 
[10:26:22.152]                           invokeRestart("muffleWarning")
[10:26:22.152]                       }
[10:26:22.152]                       else if (inherits(cond, "condition")) {
[10:26:22.152]                         if (!is.null(pattern)) {
[10:26:22.152]                           computeRestarts <- base::computeRestarts
[10:26:22.152]                           grepl <- base::grepl
[10:26:22.152]                           restarts <- computeRestarts(cond)
[10:26:22.152]                           for (restart in restarts) {
[10:26:22.152]                             name <- restart$name
[10:26:22.152]                             if (is.null(name)) 
[10:26:22.152]                               next
[10:26:22.152]                             if (!grepl(pattern, name)) 
[10:26:22.152]                               next
[10:26:22.152]                             invokeRestart(restart)
[10:26:22.152]                             muffled <- TRUE
[10:26:22.152]                             break
[10:26:22.152]                           }
[10:26:22.152]                         }
[10:26:22.152]                       }
[10:26:22.152]                       invisible(muffled)
[10:26:22.152]                     }
[10:26:22.152]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.152]                   }
[10:26:22.152]                 }
[10:26:22.152]                 else {
[10:26:22.152]                   if (TRUE) {
[10:26:22.152]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.152]                     {
[10:26:22.152]                       inherits <- base::inherits
[10:26:22.152]                       invokeRestart <- base::invokeRestart
[10:26:22.152]                       is.null <- base::is.null
[10:26:22.152]                       muffled <- FALSE
[10:26:22.152]                       if (inherits(cond, "message")) {
[10:26:22.152]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.152]                         if (muffled) 
[10:26:22.152]                           invokeRestart("muffleMessage")
[10:26:22.152]                       }
[10:26:22.152]                       else if (inherits(cond, "warning")) {
[10:26:22.152]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.152]                         if (muffled) 
[10:26:22.152]                           invokeRestart("muffleWarning")
[10:26:22.152]                       }
[10:26:22.152]                       else if (inherits(cond, "condition")) {
[10:26:22.152]                         if (!is.null(pattern)) {
[10:26:22.152]                           computeRestarts <- base::computeRestarts
[10:26:22.152]                           grepl <- base::grepl
[10:26:22.152]                           restarts <- computeRestarts(cond)
[10:26:22.152]                           for (restart in restarts) {
[10:26:22.152]                             name <- restart$name
[10:26:22.152]                             if (is.null(name)) 
[10:26:22.152]                               next
[10:26:22.152]                             if (!grepl(pattern, name)) 
[10:26:22.152]                               next
[10:26:22.152]                             invokeRestart(restart)
[10:26:22.152]                             muffled <- TRUE
[10:26:22.152]                             break
[10:26:22.152]                           }
[10:26:22.152]                         }
[10:26:22.152]                       }
[10:26:22.152]                       invisible(muffled)
[10:26:22.152]                     }
[10:26:22.152]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.152]                   }
[10:26:22.152]                 }
[10:26:22.152]             }
[10:26:22.152]         }))
[10:26:22.152]     }, error = function(ex) {
[10:26:22.152]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:22.152]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.152]                 ...future.rng), started = ...future.startTime, 
[10:26:22.152]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:22.152]             version = "1.8"), class = "FutureResult")
[10:26:22.152]     }, finally = {
[10:26:22.152]         if (!identical(...future.workdir, getwd())) 
[10:26:22.152]             setwd(...future.workdir)
[10:26:22.152]         {
[10:26:22.152]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:22.152]                 ...future.oldOptions$nwarnings <- NULL
[10:26:22.152]             }
[10:26:22.152]             base::options(...future.oldOptions)
[10:26:22.152]             if (.Platform$OS.type == "windows") {
[10:26:22.152]                 old_names <- names(...future.oldEnvVars)
[10:26:22.152]                 envs <- base::Sys.getenv()
[10:26:22.152]                 names <- names(envs)
[10:26:22.152]                 common <- intersect(names, old_names)
[10:26:22.152]                 added <- setdiff(names, old_names)
[10:26:22.152]                 removed <- setdiff(old_names, names)
[10:26:22.152]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:22.152]                   envs[common]]
[10:26:22.152]                 NAMES <- toupper(changed)
[10:26:22.152]                 args <- list()
[10:26:22.152]                 for (kk in seq_along(NAMES)) {
[10:26:22.152]                   name <- changed[[kk]]
[10:26:22.152]                   NAME <- NAMES[[kk]]
[10:26:22.152]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.152]                     next
[10:26:22.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.152]                 }
[10:26:22.152]                 NAMES <- toupper(added)
[10:26:22.152]                 for (kk in seq_along(NAMES)) {
[10:26:22.152]                   name <- added[[kk]]
[10:26:22.152]                   NAME <- NAMES[[kk]]
[10:26:22.152]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.152]                     next
[10:26:22.152]                   args[[name]] <- ""
[10:26:22.152]                 }
[10:26:22.152]                 NAMES <- toupper(removed)
[10:26:22.152]                 for (kk in seq_along(NAMES)) {
[10:26:22.152]                   name <- removed[[kk]]
[10:26:22.152]                   NAME <- NAMES[[kk]]
[10:26:22.152]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.152]                     next
[10:26:22.152]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.152]                 }
[10:26:22.152]                 if (length(args) > 0) 
[10:26:22.152]                   base::do.call(base::Sys.setenv, args = args)
[10:26:22.152]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:22.152]             }
[10:26:22.152]             else {
[10:26:22.152]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:22.152]             }
[10:26:22.152]             {
[10:26:22.152]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:22.152]                   0L) {
[10:26:22.152]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:22.152]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:22.152]                   base::options(opts)
[10:26:22.152]                 }
[10:26:22.152]                 {
[10:26:22.152]                   {
[10:26:22.152]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:22.152]                     NULL
[10:26:22.152]                   }
[10:26:22.152]                   options(future.plan = NULL)
[10:26:22.152]                   if (is.na(NA_character_)) 
[10:26:22.152]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.152]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:22.152]                   future::plan(list(function (..., workers = 2L, 
[10:26:22.152]                     envir = parent.frame()) 
[10:26:22.152]                   strategy(..., workers = workers, envir = envir)), 
[10:26:22.152]                     .cleanup = FALSE, .init = FALSE)
[10:26:22.152]                 }
[10:26:22.152]             }
[10:26:22.152]         }
[10:26:22.152]     })
[10:26:22.152]     if (TRUE) {
[10:26:22.152]         base::sink(type = "output", split = FALSE)
[10:26:22.152]         if (TRUE) {
[10:26:22.152]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:22.152]         }
[10:26:22.152]         else {
[10:26:22.152]             ...future.result["stdout"] <- base::list(NULL)
[10:26:22.152]         }
[10:26:22.152]         base::close(...future.stdout)
[10:26:22.152]         ...future.stdout <- NULL
[10:26:22.152]     }
[10:26:22.152]     ...future.result$conditions <- ...future.conditions
[10:26:22.152]     ...future.result$finished <- base::Sys.time()
[10:26:22.152]     ...future.result
[10:26:22.152] }
[10:26:22.155] MultisessionFuture started
[10:26:22.155] - Launch lazy future ... done
[10:26:22.155] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[10:26:22.156] getGlobalsAndPackages() ...
[10:26:22.156] Searching for globals...
[10:26:22.157] - globals found: [3] ‘{’, ‘value’, ‘f1’
[10:26:22.157] Searching for globals ... DONE
[10:26:22.157] Resolving globals: FALSE
[10:26:22.159] The total size of the 1 globals is 1.55 MiB (1629712 bytes)
[10:26:22.159] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.55 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.55 MiB of class ‘environment’)
[10:26:22.160] - globals: [1] ‘f1’
[10:26:22.160] - packages: [1] ‘future’
[10:26:22.160] getGlobalsAndPackages() ... DONE
[10:26:22.160] run() for ‘Future’ ...
[10:26:22.160] - state: ‘created’
[10:26:22.160] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:26:22.171] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:26:22.171] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:26:22.171]   - Field: ‘node’
[10:26:22.171]   - Field: ‘label’
[10:26:22.171]   - Field: ‘local’
[10:26:22.171]   - Field: ‘owner’
[10:26:22.171]   - Field: ‘envir’
[10:26:22.171]   - Field: ‘workers’
[10:26:22.171]   - Field: ‘packages’
[10:26:22.171]   - Field: ‘gc’
[10:26:22.172]   - Field: ‘conditions’
[10:26:22.172]   - Field: ‘persistent’
[10:26:22.172]   - Field: ‘expr’
[10:26:22.172]   - Field: ‘uuid’
[10:26:22.172]   - Field: ‘seed’
[10:26:22.172]   - Field: ‘version’
[10:26:22.172]   - Field: ‘result’
[10:26:22.172]   - Field: ‘asynchronous’
[10:26:22.172]   - Field: ‘calls’
[10:26:22.172]   - Field: ‘globals’
[10:26:22.172]   - Field: ‘stdout’
[10:26:22.173]   - Field: ‘earlySignal’
[10:26:22.173]   - Field: ‘lazy’
[10:26:22.173]   - Field: ‘state’
[10:26:22.173] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:26:22.173] - Launch lazy future ...
[10:26:22.173] Packages needed by the future expression (n = 1): ‘future’
[10:26:22.173] Packages needed by future strategies (n = 0): <none>
[10:26:22.174] {
[10:26:22.174]     {
[10:26:22.174]         {
[10:26:22.174]             ...future.startTime <- base::Sys.time()
[10:26:22.174]             {
[10:26:22.174]                 {
[10:26:22.174]                   {
[10:26:22.174]                     {
[10:26:22.174]                       {
[10:26:22.174]                         base::local({
[10:26:22.174]                           has_future <- base::requireNamespace("future", 
[10:26:22.174]                             quietly = TRUE)
[10:26:22.174]                           if (has_future) {
[10:26:22.174]                             ns <- base::getNamespace("future")
[10:26:22.174]                             version <- ns[[".package"]][["version"]]
[10:26:22.174]                             if (is.null(version)) 
[10:26:22.174]                               version <- utils::packageVersion("future")
[10:26:22.174]                           }
[10:26:22.174]                           else {
[10:26:22.174]                             version <- NULL
[10:26:22.174]                           }
[10:26:22.174]                           if (!has_future || version < "1.8.0") {
[10:26:22.174]                             info <- base::c(r_version = base::gsub("R version ", 
[10:26:22.174]                               "", base::R.version$version.string), 
[10:26:22.174]                               platform = base::sprintf("%s (%s-bit)", 
[10:26:22.174]                                 base::R.version$platform, 8 * 
[10:26:22.174]                                   base::.Machine$sizeof.pointer), 
[10:26:22.174]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[10:26:22.174]                                 "release", "version")], collapse = " "), 
[10:26:22.174]                               hostname = base::Sys.info()[["nodename"]])
[10:26:22.174]                             info <- base::sprintf("%s: %s", base::names(info), 
[10:26:22.174]                               info)
[10:26:22.174]                             info <- base::paste(info, collapse = "; ")
[10:26:22.174]                             if (!has_future) {
[10:26:22.174]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:26:22.174]                                 info)
[10:26:22.174]                             }
[10:26:22.174]                             else {
[10:26:22.174]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:26:22.174]                                 info, version)
[10:26:22.174]                             }
[10:26:22.174]                             base::stop(msg)
[10:26:22.174]                           }
[10:26:22.174]                         })
[10:26:22.174]                       }
[10:26:22.174]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[10:26:22.174]                       base::options(mc.cores = 1L)
[10:26:22.174]                     }
[10:26:22.174]                     base::local({
[10:26:22.174]                       for (pkg in "future") {
[10:26:22.174]                         base::loadNamespace(pkg)
[10:26:22.174]                         base::library(pkg, character.only = TRUE)
[10:26:22.174]                       }
[10:26:22.174]                     })
[10:26:22.174]                   }
[10:26:22.174]                   options(future.plan = NULL)
[10:26:22.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:26:22.174]                 }
[10:26:22.174]                 ...future.workdir <- getwd()
[10:26:22.174]             }
[10:26:22.174]             ...future.oldOptions <- base::as.list(base::.Options)
[10:26:22.174]             ...future.oldEnvVars <- base::Sys.getenv()
[10:26:22.174]         }
[10:26:22.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:26:22.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:26:22.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:26:22.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:26:22.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:26:22.174]             future.stdout.windows.reencode = NULL, width = 80L)
[10:26:22.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:26:22.174]             base::names(...future.oldOptions))
[10:26:22.174]     }
[10:26:22.174]     if (FALSE) {
[10:26:22.174]     }
[10:26:22.174]     else {
[10:26:22.174]         if (TRUE) {
[10:26:22.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:26:22.174]                 open = "w")
[10:26:22.174]         }
[10:26:22.174]         else {
[10:26:22.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:26:22.174]                 windows = "NUL", "/dev/null"), open = "w")
[10:26:22.174]         }
[10:26:22.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:26:22.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:26:22.174]             base::sink(type = "output", split = FALSE)
[10:26:22.174]             base::close(...future.stdout)
[10:26:22.174]         }, add = TRUE)
[10:26:22.174]     }
[10:26:22.174]     ...future.frame <- base::sys.nframe()
[10:26:22.174]     ...future.conditions <- base::list()
[10:26:22.174]     ...future.rng <- base::globalenv()$.Random.seed
[10:26:22.174]     if (FALSE) {
[10:26:22.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:26:22.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:26:22.174]     }
[10:26:22.174]     ...future.result <- base::tryCatch({
[10:26:22.174]         base::withCallingHandlers({
[10:26:22.174]             ...future.value <- base::withVisible(base::local({
[10:26:22.174]                 ...future.makeSendCondition <- base::local({
[10:26:22.174]                   sendCondition <- NULL
[10:26:22.174]                   function(frame = 1L) {
[10:26:22.174]                     if (is.function(sendCondition)) 
[10:26:22.174]                       return(sendCondition)
[10:26:22.174]                     ns <- getNamespace("parallel")
[10:26:22.174]                     if (exists("sendData", mode = "function", 
[10:26:22.174]                       envir = ns)) {
[10:26:22.174]                       parallel_sendData <- get("sendData", mode = "function", 
[10:26:22.174]                         envir = ns)
[10:26:22.174]                       envir <- sys.frame(frame)
[10:26:22.174]                       master <- NULL
[10:26:22.174]                       while (!identical(envir, .GlobalEnv) && 
[10:26:22.174]                         !identical(envir, emptyenv())) {
[10:26:22.174]                         if (exists("master", mode = "list", envir = envir, 
[10:26:22.174]                           inherits = FALSE)) {
[10:26:22.174]                           master <- get("master", mode = "list", 
[10:26:22.174]                             envir = envir, inherits = FALSE)
[10:26:22.174]                           if (inherits(master, c("SOCKnode", 
[10:26:22.174]                             "SOCK0node"))) {
[10:26:22.174]                             sendCondition <<- function(cond) {
[10:26:22.174]                               data <- list(type = "VALUE", value = cond, 
[10:26:22.174]                                 success = TRUE)
[10:26:22.174]                               parallel_sendData(master, data)
[10:26:22.174]                             }
[10:26:22.174]                             return(sendCondition)
[10:26:22.174]                           }
[10:26:22.174]                         }
[10:26:22.174]                         frame <- frame + 1L
[10:26:22.174]                         envir <- sys.frame(frame)
[10:26:22.174]                       }
[10:26:22.174]                     }
[10:26:22.174]                     sendCondition <<- function(cond) NULL
[10:26:22.174]                   }
[10:26:22.174]                 })
[10:26:22.174]                 withCallingHandlers({
[10:26:22.174]                   {
[10:26:22.174]                     value(f1)
[10:26:22.174]                   }
[10:26:22.174]                 }, immediateCondition = function(cond) {
[10:26:22.174]                   sendCondition <- ...future.makeSendCondition()
[10:26:22.174]                   sendCondition(cond)
[10:26:22.174]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.174]                   {
[10:26:22.174]                     inherits <- base::inherits
[10:26:22.174]                     invokeRestart <- base::invokeRestart
[10:26:22.174]                     is.null <- base::is.null
[10:26:22.174]                     muffled <- FALSE
[10:26:22.174]                     if (inherits(cond, "message")) {
[10:26:22.174]                       muffled <- grepl(pattern, "muffleMessage")
[10:26:22.174]                       if (muffled) 
[10:26:22.174]                         invokeRestart("muffleMessage")
[10:26:22.174]                     }
[10:26:22.174]                     else if (inherits(cond, "warning")) {
[10:26:22.174]                       muffled <- grepl(pattern, "muffleWarning")
[10:26:22.174]                       if (muffled) 
[10:26:22.174]                         invokeRestart("muffleWarning")
[10:26:22.174]                     }
[10:26:22.174]                     else if (inherits(cond, "condition")) {
[10:26:22.174]                       if (!is.null(pattern)) {
[10:26:22.174]                         computeRestarts <- base::computeRestarts
[10:26:22.174]                         grepl <- base::grepl
[10:26:22.174]                         restarts <- computeRestarts(cond)
[10:26:22.174]                         for (restart in restarts) {
[10:26:22.174]                           name <- restart$name
[10:26:22.174]                           if (is.null(name)) 
[10:26:22.174]                             next
[10:26:22.174]                           if (!grepl(pattern, name)) 
[10:26:22.174]                             next
[10:26:22.174]                           invokeRestart(restart)
[10:26:22.174]                           muffled <- TRUE
[10:26:22.174]                           break
[10:26:22.174]                         }
[10:26:22.174]                       }
[10:26:22.174]                     }
[10:26:22.174]                     invisible(muffled)
[10:26:22.174]                   }
[10:26:22.174]                   muffleCondition(cond)
[10:26:22.174]                 })
[10:26:22.174]             }))
[10:26:22.174]             future::FutureResult(value = ...future.value$value, 
[10:26:22.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.174]                   ...future.rng), globalenv = if (FALSE) 
[10:26:22.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:26:22.174]                     ...future.globalenv.names))
[10:26:22.174]                 else NULL, started = ...future.startTime, version = "1.8")
[10:26:22.174]         }, condition = base::local({
[10:26:22.174]             c <- base::c
[10:26:22.174]             inherits <- base::inherits
[10:26:22.174]             invokeRestart <- base::invokeRestart
[10:26:22.174]             length <- base::length
[10:26:22.174]             list <- base::list
[10:26:22.174]             seq.int <- base::seq.int
[10:26:22.174]             signalCondition <- base::signalCondition
[10:26:22.174]             sys.calls <- base::sys.calls
[10:26:22.174]             `[[` <- base::`[[`
[10:26:22.174]             `+` <- base::`+`
[10:26:22.174]             `<<-` <- base::`<<-`
[10:26:22.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:26:22.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:26:22.174]                   3L)]
[10:26:22.174]             }
[10:26:22.174]             function(cond) {
[10:26:22.174]                 is_error <- inherits(cond, "error")
[10:26:22.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:26:22.174]                   NULL)
[10:26:22.174]                 if (is_error) {
[10:26:22.174]                   sessionInformation <- function() {
[10:26:22.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:26:22.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:26:22.174]                       search = base::search(), system = base::Sys.info())
[10:26:22.174]                   }
[10:26:22.174]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:26:22.174]                     cond$call), session = sessionInformation(), 
[10:26:22.174]                     timestamp = base::Sys.time(), signaled = 0L)
[10:26:22.174]                   signalCondition(cond)
[10:26:22.174]                 }
[10:26:22.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:26:22.174]                 "immediateCondition"))) {
[10:26:22.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:26:22.174]                   ...future.conditions[[length(...future.conditions) + 
[10:26:22.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:26:22.174]                   if (TRUE && !signal) {
[10:26:22.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.174]                     {
[10:26:22.174]                       inherits <- base::inherits
[10:26:22.174]                       invokeRestart <- base::invokeRestart
[10:26:22.174]                       is.null <- base::is.null
[10:26:22.174]                       muffled <- FALSE
[10:26:22.174]                       if (inherits(cond, "message")) {
[10:26:22.174]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.174]                         if (muffled) 
[10:26:22.174]                           invokeRestart("muffleMessage")
[10:26:22.174]                       }
[10:26:22.174]                       else if (inherits(cond, "warning")) {
[10:26:22.174]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.174]                         if (muffled) 
[10:26:22.174]                           invokeRestart("muffleWarning")
[10:26:22.174]                       }
[10:26:22.174]                       else if (inherits(cond, "condition")) {
[10:26:22.174]                         if (!is.null(pattern)) {
[10:26:22.174]                           computeRestarts <- base::computeRestarts
[10:26:22.174]                           grepl <- base::grepl
[10:26:22.174]                           restarts <- computeRestarts(cond)
[10:26:22.174]                           for (restart in restarts) {
[10:26:22.174]                             name <- restart$name
[10:26:22.174]                             if (is.null(name)) 
[10:26:22.174]                               next
[10:26:22.174]                             if (!grepl(pattern, name)) 
[10:26:22.174]                               next
[10:26:22.174]                             invokeRestart(restart)
[10:26:22.174]                             muffled <- TRUE
[10:26:22.174]                             break
[10:26:22.174]                           }
[10:26:22.174]                         }
[10:26:22.174]                       }
[10:26:22.174]                       invisible(muffled)
[10:26:22.174]                     }
[10:26:22.174]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.174]                   }
[10:26:22.174]                 }
[10:26:22.174]                 else {
[10:26:22.174]                   if (TRUE) {
[10:26:22.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:26:22.174]                     {
[10:26:22.174]                       inherits <- base::inherits
[10:26:22.174]                       invokeRestart <- base::invokeRestart
[10:26:22.174]                       is.null <- base::is.null
[10:26:22.174]                       muffled <- FALSE
[10:26:22.174]                       if (inherits(cond, "message")) {
[10:26:22.174]                         muffled <- grepl(pattern, "muffleMessage")
[10:26:22.174]                         if (muffled) 
[10:26:22.174]                           invokeRestart("muffleMessage")
[10:26:22.174]                       }
[10:26:22.174]                       else if (inherits(cond, "warning")) {
[10:26:22.174]                         muffled <- grepl(pattern, "muffleWarning")
[10:26:22.174]                         if (muffled) 
[10:26:22.174]                           invokeRestart("muffleWarning")
[10:26:22.174]                       }
[10:26:22.174]                       else if (inherits(cond, "condition")) {
[10:26:22.174]                         if (!is.null(pattern)) {
[10:26:22.174]                           computeRestarts <- base::computeRestarts
[10:26:22.174]                           grepl <- base::grepl
[10:26:22.174]                           restarts <- computeRestarts(cond)
[10:26:22.174]                           for (restart in restarts) {
[10:26:22.174]                             name <- restart$name
[10:26:22.174]                             if (is.null(name)) 
[10:26:22.174]                               next
[10:26:22.174]                             if (!grepl(pattern, name)) 
[10:26:22.174]                               next
[10:26:22.174]                             invokeRestart(restart)
[10:26:22.174]                             muffled <- TRUE
[10:26:22.174]                             break
[10:26:22.174]                           }
[10:26:22.174]                         }
[10:26:22.174]                       }
[10:26:22.174]                       invisible(muffled)
[10:26:22.174]                     }
[10:26:22.174]                     muffleCondition(cond, pattern = "^muffle")
[10:26:22.174]                   }
[10:26:22.174]                 }
[10:26:22.174]             }
[10:26:22.174]         }))
[10:26:22.174]     }, error = function(ex) {
[10:26:22.174]         base::structure(base::list(value = NULL, visible = NULL, 
[10:26:22.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:26:22.174]                 ...future.rng), started = ...future.startTime, 
[10:26:22.174]             finished = Sys.time(), session_uuid = NA_character_, 
[10:26:22.174]             version = "1.8"), class = "FutureResult")
[10:26:22.174]     }, finally = {
[10:26:22.174]         if (!identical(...future.workdir, getwd())) 
[10:26:22.174]             setwd(...future.workdir)
[10:26:22.174]         {
[10:26:22.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:26:22.174]                 ...future.oldOptions$nwarnings <- NULL
[10:26:22.174]             }
[10:26:22.174]             base::options(...future.oldOptions)
[10:26:22.174]             if (.Platform$OS.type == "windows") {
[10:26:22.174]                 old_names <- names(...future.oldEnvVars)
[10:26:22.174]                 envs <- base::Sys.getenv()
[10:26:22.174]                 names <- names(envs)
[10:26:22.174]                 common <- intersect(names, old_names)
[10:26:22.174]                 added <- setdiff(names, old_names)
[10:26:22.174]                 removed <- setdiff(old_names, names)
[10:26:22.174]                 changed <- common[...future.oldEnvVars[common] != 
[10:26:22.174]                   envs[common]]
[10:26:22.174]                 NAMES <- toupper(changed)
[10:26:22.174]                 args <- list()
[10:26:22.174]                 for (kk in seq_along(NAMES)) {
[10:26:22.174]                   name <- changed[[kk]]
[10:26:22.174]                   NAME <- NAMES[[kk]]
[10:26:22.174]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.174]                     next
[10:26:22.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.174]                 }
[10:26:22.174]                 NAMES <- toupper(added)
[10:26:22.174]                 for (kk in seq_along(NAMES)) {
[10:26:22.174]                   name <- added[[kk]]
[10:26:22.174]                   NAME <- NAMES[[kk]]
[10:26:22.174]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.174]                     next
[10:26:22.174]                   args[[name]] <- ""
[10:26:22.174]                 }
[10:26:22.174]                 NAMES <- toupper(removed)
[10:26:22.174]                 for (kk in seq_along(NAMES)) {
[10:26:22.174]                   name <- removed[[kk]]
[10:26:22.174]                   NAME <- NAMES[[kk]]
[10:26:22.174]                   if (name != NAME && is.element(NAME, old_names)) 
[10:26:22.174]                     next
[10:26:22.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:26:22.174]                 }
[10:26:22.174]                 if (length(args) > 0) 
[10:26:22.174]                   base::do.call(base::Sys.setenv, args = args)
[10:26:22.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:26:22.174]             }
[10:26:22.174]             else {
[10:26:22.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:26:22.174]             }
[10:26:22.174]             {
[10:26:22.174]                 if (base::length(...future.futureOptionsAdded) > 
[10:26:22.174]                   0L) {
[10:26:22.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:26:22.174]                   base::names(opts) <- ...future.futureOptionsAdded
[10:26:22.174]                   base::options(opts)
[10:26:22.174]                 }
[10:26:22.174]                 {
[10:26:22.174]                   {
[10:26:22.174]                     base::options(mc.cores = ...future.mc.cores.old)
[10:26:22.174]                     NULL
[10:26:22.174]                   }
[10:26:22.174]                   options(future.plan = NULL)
[10:26:22.174]                   if (is.na(NA_character_)) 
[10:26:22.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:26:22.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:26:22.174]                   future::plan(list(function (..., workers = 2L, 
[10:26:22.174]                     envir = parent.frame()) 
[10:26:22.174]                   strategy(..., workers = workers, envir = envir)), 
[10:26:22.174]                     .cleanup = FALSE, .init = FALSE)
[10:26:22.174]                 }
[10:26:22.174]             }
[10:26:22.174]         }
[10:26:22.174]     })
[10:26:22.174]     if (TRUE) {
[10:26:22.174]         base::sink(type = "output", split = FALSE)
[10:26:22.174]         if (TRUE) {
[10:26:22.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:26:22.174]         }
[10:26:22.174]         else {
[10:26:22.174]             ...future.result["stdout"] <- base::list(NULL)
[10:26:22.174]         }
[10:26:22.174]         base::close(...future.stdout)
[10:26:22.174]         ...future.stdout <- NULL
[10:26:22.174]     }
[10:26:22.174]     ...future.result$conditions <- ...future.conditions
[10:26:22.174]     ...future.result$finished <- base::Sys.time()
[10:26:22.174]     ...future.result
[10:26:22.174] }
[10:26:22.226] Exporting 1 global objects (1.55 MiB) to cluster node #2 ...
[10:26:22.228] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ...
[10:26:22.239] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ... DONE
[10:26:22.239] Exporting 1 global objects (1.55 MiB) to cluster node #2 ... DONE
[10:26:22.240] MultisessionFuture started
[10:26:22.240] - Launch lazy future ... done
[10:26:22.240] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.55 MiB (MultisessionFuture ‘f1’ of 1.55 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: defa8917-db0d-febc-3b53-0b6987030b23
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[10:26:22.257] result() for ClusterFuture ...
[10:26:22.257] receiveMessageFromWorker() for ClusterFuture ...
[10:26:22.257] - Validating connection of MultisessionFuture
[10:26:22.333] - received message: FutureResult
[10:26:22.334] - Received FutureResult
[10:26:22.334] - Erased future from FutureRegistry
[10:26:22.334] result() for ClusterFuture ...
[10:26:22.334] - result already collected: FutureResult
[10:26:22.334] result() for ClusterFuture ... done
[10:26:22.334] signalConditions() ...
[10:26:22.334]  - include = ‘immediateCondition’
[10:26:22.334]  - exclude = 
[10:26:22.334]  - resignal = FALSE
[10:26:22.334]  - Number of conditions: 1
[10:26:22.335] signalConditions() ... done
[10:26:22.335] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:22.335] result() for ClusterFuture ... done
[10:26:22.335] result() for ClusterFuture ...
[10:26:22.335] - result already collected: FutureResult
[10:26:22.335] result() for ClusterFuture ... done
[10:26:22.335] signalConditions() ...
[10:26:22.335]  - include = ‘immediateCondition’
[10:26:22.335]  - exclude = 
[10:26:22.335]  - resignal = FALSE
[10:26:22.335]  - Number of conditions: 1
[10:26:22.336] signalConditions() ... done
[10:26:22.336] Future state: ‘finished’
[10:26:22.336] result() for ClusterFuture ...
[10:26:22.336] - result already collected: FutureResult
[10:26:22.336] result() for ClusterFuture ... done
[10:26:22.336] signalConditions() ...
[10:26:22.336]  - include = ‘condition’
[10:26:22.336]  - exclude = ‘immediateCondition’
[10:26:22.336]  - resignal = TRUE
[10:26:22.336]  - Number of conditions: 1
[10:26:22.336]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[10:26:22.337] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (defa8917-db0d-febc-3b53-0b6987030b23; pid 86988 on 3e863ac79bce) that created it, not by any other R processes (144c1c53-8ee2-739c-8374-4f7f2a35fee1; pid 87042 on 3e863ac79bce): {; 42L; }>


Future UUID: 0414bb40-71a9-7a24-b93a-96cfbaebbcf3


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: defa8917-db0d-febc-3b53-0b6987030b23
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[10:26:22.338] result() for ClusterFuture ...
[10:26:22.338] receiveMessageFromWorker() for ClusterFuture ...
[10:26:22.338] - Validating connection of MultisessionFuture
[10:26:22.338] - received message: FutureResult
[10:26:22.338] - Received FutureResult
[10:26:22.338] - Erased future from FutureRegistry
[10:26:22.338] result() for ClusterFuture ...
[10:26:22.339] - result already collected: FutureResult
[10:26:22.339] result() for ClusterFuture ... done
[10:26:22.339] receiveMessageFromWorker() for ClusterFuture ... done
[10:26:22.339] result() for ClusterFuture ... done
[10:26:22.339] result() for ClusterFuture ...
[10:26:22.339] - result already collected: FutureResult
[10:26:22.339] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[10:26:22.340] plan(): Setting new future strategy stack:
[10:26:22.340] List of future strategies:
[10:26:22.340] 1. FutureStrategy:
[10:26:22.340]    - args: function (..., envir = parent.frame())
[10:26:22.340]    - tweaked: FALSE
[10:26:22.340]    - call: future::plan(oplan)
[10:26:22.341] plan(): nbrOfWorkers() = 1
> 
