
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:23:42.039] plan(): Setting new future strategy stack:
[13:23:42.040] List of future strategies:
[13:23:42.040] 1. sequential:
[13:23:42.040]    - args: function (..., envir = parent.frame())
[13:23:42.040]    - tweaked: FALSE
[13:23:42.040]    - call: future::plan("sequential")
[13:23:42.054] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[13:23:42.067] plan(): Setting new future strategy stack:
[13:23:42.067] List of future strategies:
[13:23:42.067] 1. multisession:
[13:23:42.067]    - args: function (..., workers = 2L, envir = parent.frame())
[13:23:42.067]    - tweaked: TRUE
[13:23:42.067]    - call: plan(multisession, workers = 2L)
[13:23:42.078] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:23:42.079] multisession:
[13:23:42.079] - args: function (..., workers = 2L, envir = parent.frame())
[13:23:42.079] - tweaked: TRUE
[13:23:42.079] - call: plan(multisession, workers = 2L)
[13:23:42.080] getGlobalsAndPackages() ...
[13:23:42.080] Not searching for globals
[13:23:42.081] - globals: [0] <none>
[13:23:42.081] getGlobalsAndPackages() ... DONE
[13:23:42.081] [local output] makeClusterPSOCK() ...
[13:23:42.117] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:23:42.118] [local output] Base port: 11731
[13:23:42.118] [local output] Getting setup options for 2 cluster nodes ...
[13:23:42.118] [local output]  - Node 1 of 2 ...
[13:23:42.118] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:42.119] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDU7kP6/worker.rank=1.parallelly.parent=87831.157177fef57cf.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpDU7kP6/worker.rank=1.parallelly.parent=87831.157177fef57cf.pid")'’
[13:23:42.311] - Possible to infer worker's PID: TRUE
[13:23:42.312] [local output] Rscript port: 11731

[13:23:42.312] [local output]  - Node 2 of 2 ...
[13:23:42.312] [local output] localMachine=TRUE => revtunnel=FALSE

[13:23:42.313] [local output] Rscript port: 11731

[13:23:42.313] [local output] Getting setup options for 2 cluster nodes ... done
[13:23:42.313] [local output]  - Parallel setup requested for some PSOCK nodes
[13:23:42.314] [local output] Setting up PSOCK nodes in parallel
[13:23:42.314] List of 36
[13:23:42.314]  $ worker          : chr "localhost"
[13:23:42.314]   ..- attr(*, "localhost")= logi TRUE
[13:23:42.314]  $ master          : chr "localhost"
[13:23:42.314]  $ port            : int 11731
[13:23:42.314]  $ connectTimeout  : num 120
[13:23:42.314]  $ timeout         : num 2592000
[13:23:42.314]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:23:42.314]  $ homogeneous     : logi TRUE
[13:23:42.314]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:23:42.314]  $ rscript_envs    : NULL
[13:23:42.314]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:42.314]  $ rscript_startup : NULL
[13:23:42.314]  $ rscript_sh      : chr "sh"
[13:23:42.314]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:42.314]  $ methods         : logi TRUE
[13:23:42.314]  $ socketOptions   : chr "no-delay"
[13:23:42.314]  $ useXDR          : logi FALSE
[13:23:42.314]  $ outfile         : chr "/dev/null"
[13:23:42.314]  $ renice          : int NA
[13:23:42.314]  $ rshcmd          : NULL
[13:23:42.314]  $ user            : chr(0) 
[13:23:42.314]  $ revtunnel       : logi FALSE
[13:23:42.314]  $ rshlogfile      : NULL
[13:23:42.314]  $ rshopts         : chr(0) 
[13:23:42.314]  $ rank            : int 1
[13:23:42.314]  $ manual          : logi FALSE
[13:23:42.314]  $ dryrun          : logi FALSE
[13:23:42.314]  $ quiet           : logi FALSE
[13:23:42.314]  $ setup_strategy  : chr "parallel"
[13:23:42.314]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:42.314]  $ pidfile         : chr "/tmp/RtmpDU7kP6/worker.rank=1.parallelly.parent=87831.157177fef57cf.pid"
[13:23:42.314]  $ rshcmd_label    : NULL
[13:23:42.314]  $ rsh_call        : NULL
[13:23:42.314]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:23:42.314]  $ localMachine    : logi TRUE
[13:23:42.314]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:23:42.314]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:23:42.314]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:23:42.314]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:23:42.314]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:23:42.314]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:23:42.314]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:23:42.314]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:23:42.314]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:23:42.314]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:23:42.314]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:23:42.314]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:23:42.314]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:23:42.314]  $ arguments       :List of 28
[13:23:42.314]   ..$ worker          : chr "localhost"
[13:23:42.314]   ..$ master          : NULL
[13:23:42.314]   ..$ port            : int 11731
[13:23:42.314]   ..$ connectTimeout  : num 120
[13:23:42.314]   ..$ timeout         : num 2592000
[13:23:42.314]   ..$ rscript         : NULL
[13:23:42.314]   ..$ homogeneous     : NULL
[13:23:42.314]   ..$ rscript_args    : NULL
[13:23:42.314]   ..$ rscript_envs    : NULL
[13:23:42.314]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:23:42.314]   ..$ rscript_startup : NULL
[13:23:42.314]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:23:42.314]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:23:42.314]   ..$ methods         : logi TRUE
[13:23:42.314]   ..$ socketOptions   : chr "no-delay"
[13:23:42.314]   ..$ useXDR          : logi FALSE
[13:23:42.314]   ..$ outfile         : chr "/dev/null"
[13:23:42.314]   ..$ renice          : int NA
[13:23:42.314]   ..$ rshcmd          : NULL
[13:23:42.314]   ..$ user            : NULL
[13:23:42.314]   ..$ revtunnel       : logi NA
[13:23:42.314]   ..$ rshlogfile      : NULL
[13:23:42.314]   ..$ rshopts         : NULL
[13:23:42.314]   ..$ rank            : int 1
[13:23:42.314]   ..$ manual          : logi FALSE
[13:23:42.314]   ..$ dryrun          : logi FALSE
[13:23:42.314]   ..$ quiet           : logi FALSE
[13:23:42.314]   ..$ setup_strategy  : chr "parallel"
[13:23:42.314]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:23:42.333] [local output] System call to launch all workers:
[13:23:42.333] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDU7kP6/worker.rank=1.parallelly.parent=87831.157177fef57cf.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11731 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:23:42.333] [local output] Starting PSOCK main server
[13:23:42.339] [local output] Workers launched
[13:23:42.339] [local output] Waiting for workers to connect back
[13:23:42.339]  - [local output] 0 workers out of 2 ready
[13:23:42.589]  - [local output] 0 workers out of 2 ready
[13:23:42.589]  - [local output] 1 workers out of 2 ready
[13:23:42.590]  - [local output] 2 workers out of 2 ready
[13:23:42.590] [local output] Launching of workers completed
[13:23:42.590] [local output] Collecting session information from workers
[13:23:42.591] [local output]  - Worker #1 of 2
[13:23:42.591] [local output]  - Worker #2 of 2
[13:23:42.592] [local output] makeClusterPSOCK() ... done
[13:23:42.605] Packages needed by the future expression (n = 0): <none>
[13:23:42.605] Packages needed by future strategies (n = 0): <none>
[13:23:42.606] {
[13:23:42.606]     {
[13:23:42.606]         {
[13:23:42.606]             ...future.startTime <- base::Sys.time()
[13:23:42.606]             {
[13:23:42.606]                 {
[13:23:42.606]                   {
[13:23:42.606]                     {
[13:23:42.606]                       base::local({
[13:23:42.606]                         has_future <- base::requireNamespace("future", 
[13:23:42.606]                           quietly = TRUE)
[13:23:42.606]                         if (has_future) {
[13:23:42.606]                           ns <- base::getNamespace("future")
[13:23:42.606]                           version <- ns[[".package"]][["version"]]
[13:23:42.606]                           if (is.null(version)) 
[13:23:42.606]                             version <- utils::packageVersion("future")
[13:23:42.606]                         }
[13:23:42.606]                         else {
[13:23:42.606]                           version <- NULL
[13:23:42.606]                         }
[13:23:42.606]                         if (!has_future || version < "1.8.0") {
[13:23:42.606]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:42.606]                             "", base::R.version$version.string), 
[13:23:42.606]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:42.606]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:42.606]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:42.606]                               "release", "version")], collapse = " "), 
[13:23:42.606]                             hostname = base::Sys.info()[["nodename"]])
[13:23:42.606]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:42.606]                             info)
[13:23:42.606]                           info <- base::paste(info, collapse = "; ")
[13:23:42.606]                           if (!has_future) {
[13:23:42.606]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:42.606]                               info)
[13:23:42.606]                           }
[13:23:42.606]                           else {
[13:23:42.606]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:42.606]                               info, version)
[13:23:42.606]                           }
[13:23:42.606]                           base::stop(msg)
[13:23:42.606]                         }
[13:23:42.606]                       })
[13:23:42.606]                     }
[13:23:42.606]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:42.606]                     base::options(mc.cores = 1L)
[13:23:42.606]                   }
[13:23:42.606]                   options(future.plan = NULL)
[13:23:42.606]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.606]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:42.606]                 }
[13:23:42.606]                 ...future.workdir <- getwd()
[13:23:42.606]             }
[13:23:42.606]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:42.606]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:42.606]         }
[13:23:42.606]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:42.606]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:42.606]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:42.606]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:42.606]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:42.606]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:42.606]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:42.606]             base::names(...future.oldOptions))
[13:23:42.606]     }
[13:23:42.606]     if (FALSE) {
[13:23:42.606]     }
[13:23:42.606]     else {
[13:23:42.606]         if (TRUE) {
[13:23:42.606]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:42.606]                 open = "w")
[13:23:42.606]         }
[13:23:42.606]         else {
[13:23:42.606]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:42.606]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:42.606]         }
[13:23:42.606]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:42.606]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:42.606]             base::sink(type = "output", split = FALSE)
[13:23:42.606]             base::close(...future.stdout)
[13:23:42.606]         }, add = TRUE)
[13:23:42.606]     }
[13:23:42.606]     ...future.frame <- base::sys.nframe()
[13:23:42.606]     ...future.conditions <- base::list()
[13:23:42.606]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:42.606]     if (FALSE) {
[13:23:42.606]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:42.606]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:42.606]     }
[13:23:42.606]     ...future.result <- base::tryCatch({
[13:23:42.606]         base::withCallingHandlers({
[13:23:42.606]             ...future.value <- base::withVisible(base::local({
[13:23:42.606]                 ...future.makeSendCondition <- base::local({
[13:23:42.606]                   sendCondition <- NULL
[13:23:42.606]                   function(frame = 1L) {
[13:23:42.606]                     if (is.function(sendCondition)) 
[13:23:42.606]                       return(sendCondition)
[13:23:42.606]                     ns <- getNamespace("parallel")
[13:23:42.606]                     if (exists("sendData", mode = "function", 
[13:23:42.606]                       envir = ns)) {
[13:23:42.606]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:42.606]                         envir = ns)
[13:23:42.606]                       envir <- sys.frame(frame)
[13:23:42.606]                       master <- NULL
[13:23:42.606]                       while (!identical(envir, .GlobalEnv) && 
[13:23:42.606]                         !identical(envir, emptyenv())) {
[13:23:42.606]                         if (exists("master", mode = "list", envir = envir, 
[13:23:42.606]                           inherits = FALSE)) {
[13:23:42.606]                           master <- get("master", mode = "list", 
[13:23:42.606]                             envir = envir, inherits = FALSE)
[13:23:42.606]                           if (inherits(master, c("SOCKnode", 
[13:23:42.606]                             "SOCK0node"))) {
[13:23:42.606]                             sendCondition <<- function(cond) {
[13:23:42.606]                               data <- list(type = "VALUE", value = cond, 
[13:23:42.606]                                 success = TRUE)
[13:23:42.606]                               parallel_sendData(master, data)
[13:23:42.606]                             }
[13:23:42.606]                             return(sendCondition)
[13:23:42.606]                           }
[13:23:42.606]                         }
[13:23:42.606]                         frame <- frame + 1L
[13:23:42.606]                         envir <- sys.frame(frame)
[13:23:42.606]                       }
[13:23:42.606]                     }
[13:23:42.606]                     sendCondition <<- function(cond) NULL
[13:23:42.606]                   }
[13:23:42.606]                 })
[13:23:42.606]                 withCallingHandlers({
[13:23:42.606]                   NA
[13:23:42.606]                 }, immediateCondition = function(cond) {
[13:23:42.606]                   sendCondition <- ...future.makeSendCondition()
[13:23:42.606]                   sendCondition(cond)
[13:23:42.606]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.606]                   {
[13:23:42.606]                     inherits <- base::inherits
[13:23:42.606]                     invokeRestart <- base::invokeRestart
[13:23:42.606]                     is.null <- base::is.null
[13:23:42.606]                     muffled <- FALSE
[13:23:42.606]                     if (inherits(cond, "message")) {
[13:23:42.606]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:42.606]                       if (muffled) 
[13:23:42.606]                         invokeRestart("muffleMessage")
[13:23:42.606]                     }
[13:23:42.606]                     else if (inherits(cond, "warning")) {
[13:23:42.606]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:42.606]                       if (muffled) 
[13:23:42.606]                         invokeRestart("muffleWarning")
[13:23:42.606]                     }
[13:23:42.606]                     else if (inherits(cond, "condition")) {
[13:23:42.606]                       if (!is.null(pattern)) {
[13:23:42.606]                         computeRestarts <- base::computeRestarts
[13:23:42.606]                         grepl <- base::grepl
[13:23:42.606]                         restarts <- computeRestarts(cond)
[13:23:42.606]                         for (restart in restarts) {
[13:23:42.606]                           name <- restart$name
[13:23:42.606]                           if (is.null(name)) 
[13:23:42.606]                             next
[13:23:42.606]                           if (!grepl(pattern, name)) 
[13:23:42.606]                             next
[13:23:42.606]                           invokeRestart(restart)
[13:23:42.606]                           muffled <- TRUE
[13:23:42.606]                           break
[13:23:42.606]                         }
[13:23:42.606]                       }
[13:23:42.606]                     }
[13:23:42.606]                     invisible(muffled)
[13:23:42.606]                   }
[13:23:42.606]                   muffleCondition(cond)
[13:23:42.606]                 })
[13:23:42.606]             }))
[13:23:42.606]             future::FutureResult(value = ...future.value$value, 
[13:23:42.606]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.606]                   ...future.rng), globalenv = if (FALSE) 
[13:23:42.606]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:42.606]                     ...future.globalenv.names))
[13:23:42.606]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:42.606]         }, condition = base::local({
[13:23:42.606]             c <- base::c
[13:23:42.606]             inherits <- base::inherits
[13:23:42.606]             invokeRestart <- base::invokeRestart
[13:23:42.606]             length <- base::length
[13:23:42.606]             list <- base::list
[13:23:42.606]             seq.int <- base::seq.int
[13:23:42.606]             signalCondition <- base::signalCondition
[13:23:42.606]             sys.calls <- base::sys.calls
[13:23:42.606]             `[[` <- base::`[[`
[13:23:42.606]             `+` <- base::`+`
[13:23:42.606]             `<<-` <- base::`<<-`
[13:23:42.606]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:42.606]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:42.606]                   3L)]
[13:23:42.606]             }
[13:23:42.606]             function(cond) {
[13:23:42.606]                 is_error <- inherits(cond, "error")
[13:23:42.606]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:42.606]                   NULL)
[13:23:42.606]                 if (is_error) {
[13:23:42.606]                   sessionInformation <- function() {
[13:23:42.606]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:42.606]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:42.606]                       search = base::search(), system = base::Sys.info())
[13:23:42.606]                   }
[13:23:42.606]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.606]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:42.606]                     cond$call), session = sessionInformation(), 
[13:23:42.606]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:42.606]                   signalCondition(cond)
[13:23:42.606]                 }
[13:23:42.606]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:42.606]                 "immediateCondition"))) {
[13:23:42.606]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:42.606]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.606]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:42.606]                   if (TRUE && !signal) {
[13:23:42.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.606]                     {
[13:23:42.606]                       inherits <- base::inherits
[13:23:42.606]                       invokeRestart <- base::invokeRestart
[13:23:42.606]                       is.null <- base::is.null
[13:23:42.606]                       muffled <- FALSE
[13:23:42.606]                       if (inherits(cond, "message")) {
[13:23:42.606]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.606]                         if (muffled) 
[13:23:42.606]                           invokeRestart("muffleMessage")
[13:23:42.606]                       }
[13:23:42.606]                       else if (inherits(cond, "warning")) {
[13:23:42.606]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.606]                         if (muffled) 
[13:23:42.606]                           invokeRestart("muffleWarning")
[13:23:42.606]                       }
[13:23:42.606]                       else if (inherits(cond, "condition")) {
[13:23:42.606]                         if (!is.null(pattern)) {
[13:23:42.606]                           computeRestarts <- base::computeRestarts
[13:23:42.606]                           grepl <- base::grepl
[13:23:42.606]                           restarts <- computeRestarts(cond)
[13:23:42.606]                           for (restart in restarts) {
[13:23:42.606]                             name <- restart$name
[13:23:42.606]                             if (is.null(name)) 
[13:23:42.606]                               next
[13:23:42.606]                             if (!grepl(pattern, name)) 
[13:23:42.606]                               next
[13:23:42.606]                             invokeRestart(restart)
[13:23:42.606]                             muffled <- TRUE
[13:23:42.606]                             break
[13:23:42.606]                           }
[13:23:42.606]                         }
[13:23:42.606]                       }
[13:23:42.606]                       invisible(muffled)
[13:23:42.606]                     }
[13:23:42.606]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.606]                   }
[13:23:42.606]                 }
[13:23:42.606]                 else {
[13:23:42.606]                   if (TRUE) {
[13:23:42.606]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.606]                     {
[13:23:42.606]                       inherits <- base::inherits
[13:23:42.606]                       invokeRestart <- base::invokeRestart
[13:23:42.606]                       is.null <- base::is.null
[13:23:42.606]                       muffled <- FALSE
[13:23:42.606]                       if (inherits(cond, "message")) {
[13:23:42.606]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.606]                         if (muffled) 
[13:23:42.606]                           invokeRestart("muffleMessage")
[13:23:42.606]                       }
[13:23:42.606]                       else if (inherits(cond, "warning")) {
[13:23:42.606]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.606]                         if (muffled) 
[13:23:42.606]                           invokeRestart("muffleWarning")
[13:23:42.606]                       }
[13:23:42.606]                       else if (inherits(cond, "condition")) {
[13:23:42.606]                         if (!is.null(pattern)) {
[13:23:42.606]                           computeRestarts <- base::computeRestarts
[13:23:42.606]                           grepl <- base::grepl
[13:23:42.606]                           restarts <- computeRestarts(cond)
[13:23:42.606]                           for (restart in restarts) {
[13:23:42.606]                             name <- restart$name
[13:23:42.606]                             if (is.null(name)) 
[13:23:42.606]                               next
[13:23:42.606]                             if (!grepl(pattern, name)) 
[13:23:42.606]                               next
[13:23:42.606]                             invokeRestart(restart)
[13:23:42.606]                             muffled <- TRUE
[13:23:42.606]                             break
[13:23:42.606]                           }
[13:23:42.606]                         }
[13:23:42.606]                       }
[13:23:42.606]                       invisible(muffled)
[13:23:42.606]                     }
[13:23:42.606]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.606]                   }
[13:23:42.606]                 }
[13:23:42.606]             }
[13:23:42.606]         }))
[13:23:42.606]     }, error = function(ex) {
[13:23:42.606]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:42.606]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.606]                 ...future.rng), started = ...future.startTime, 
[13:23:42.606]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:42.606]             version = "1.8"), class = "FutureResult")
[13:23:42.606]     }, finally = {
[13:23:42.606]         if (!identical(...future.workdir, getwd())) 
[13:23:42.606]             setwd(...future.workdir)
[13:23:42.606]         {
[13:23:42.606]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:42.606]                 ...future.oldOptions$nwarnings <- NULL
[13:23:42.606]             }
[13:23:42.606]             base::options(...future.oldOptions)
[13:23:42.606]             if (.Platform$OS.type == "windows") {
[13:23:42.606]                 old_names <- names(...future.oldEnvVars)
[13:23:42.606]                 envs <- base::Sys.getenv()
[13:23:42.606]                 names <- names(envs)
[13:23:42.606]                 common <- intersect(names, old_names)
[13:23:42.606]                 added <- setdiff(names, old_names)
[13:23:42.606]                 removed <- setdiff(old_names, names)
[13:23:42.606]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:42.606]                   envs[common]]
[13:23:42.606]                 NAMES <- toupper(changed)
[13:23:42.606]                 args <- list()
[13:23:42.606]                 for (kk in seq_along(NAMES)) {
[13:23:42.606]                   name <- changed[[kk]]
[13:23:42.606]                   NAME <- NAMES[[kk]]
[13:23:42.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.606]                     next
[13:23:42.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.606]                 }
[13:23:42.606]                 NAMES <- toupper(added)
[13:23:42.606]                 for (kk in seq_along(NAMES)) {
[13:23:42.606]                   name <- added[[kk]]
[13:23:42.606]                   NAME <- NAMES[[kk]]
[13:23:42.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.606]                     next
[13:23:42.606]                   args[[name]] <- ""
[13:23:42.606]                 }
[13:23:42.606]                 NAMES <- toupper(removed)
[13:23:42.606]                 for (kk in seq_along(NAMES)) {
[13:23:42.606]                   name <- removed[[kk]]
[13:23:42.606]                   NAME <- NAMES[[kk]]
[13:23:42.606]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.606]                     next
[13:23:42.606]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.606]                 }
[13:23:42.606]                 if (length(args) > 0) 
[13:23:42.606]                   base::do.call(base::Sys.setenv, args = args)
[13:23:42.606]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:42.606]             }
[13:23:42.606]             else {
[13:23:42.606]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:42.606]             }
[13:23:42.606]             {
[13:23:42.606]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:42.606]                   0L) {
[13:23:42.606]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:42.606]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:42.606]                   base::options(opts)
[13:23:42.606]                 }
[13:23:42.606]                 {
[13:23:42.606]                   {
[13:23:42.606]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:42.606]                     NULL
[13:23:42.606]                   }
[13:23:42.606]                   options(future.plan = NULL)
[13:23:42.606]                   if (is.na(NA_character_)) 
[13:23:42.606]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.606]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:42.606]                   future::plan(list(function (..., workers = 2L, 
[13:23:42.606]                     envir = parent.frame()) 
[13:23:42.606]                   strategy(..., workers = workers, envir = envir)), 
[13:23:42.606]                     .cleanup = FALSE, .init = FALSE)
[13:23:42.606]                 }
[13:23:42.606]             }
[13:23:42.606]         }
[13:23:42.606]     })
[13:23:42.606]     if (TRUE) {
[13:23:42.606]         base::sink(type = "output", split = FALSE)
[13:23:42.606]         if (TRUE) {
[13:23:42.606]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:42.606]         }
[13:23:42.606]         else {
[13:23:42.606]             ...future.result["stdout"] <- base::list(NULL)
[13:23:42.606]         }
[13:23:42.606]         base::close(...future.stdout)
[13:23:42.606]         ...future.stdout <- NULL
[13:23:42.606]     }
[13:23:42.606]     ...future.result$conditions <- ...future.conditions
[13:23:42.606]     ...future.result$finished <- base::Sys.time()
[13:23:42.606]     ...future.result
[13:23:42.606] }
[13:23:42.661] MultisessionFuture started
[13:23:42.662] result() for ClusterFuture ...
[13:23:42.662] receiveMessageFromWorker() for ClusterFuture ...
[13:23:42.663] - Validating connection of MultisessionFuture
[13:23:42.696] - received message: FutureResult
[13:23:42.696] - Received FutureResult
[13:23:42.699] - Erased future from FutureRegistry
[13:23:42.700] result() for ClusterFuture ...
[13:23:42.700] - result already collected: FutureResult
[13:23:42.700] result() for ClusterFuture ... done
[13:23:42.700] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:42.700] result() for ClusterFuture ... done
[13:23:42.700] result() for ClusterFuture ...
[13:23:42.700] - result already collected: FutureResult
[13:23:42.700] result() for ClusterFuture ... done
[13:23:42.701] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:23:42.701] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: bb98f2dc-1e36-3d61-5a41-f2a8fc08f775
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[13:23:42.701] getGlobalsAndPackages() ...
[13:23:42.702] Searching for globals...
[13:23:42.710] - globals found: [2] ‘{’, ‘:::’
[13:23:42.710] Searching for globals ... DONE
[13:23:42.710] Resolving globals: FALSE
[13:23:42.711] 
[13:23:42.711] 
[13:23:42.711] getGlobalsAndPackages() ... DONE
[13:23:42.712] run() for ‘Future’ ...
[13:23:42.712] - state: ‘created’
[13:23:42.712] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:42.723] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:42.723] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:42.724]   - Field: ‘node’
[13:23:42.724]   - Field: ‘label’
[13:23:42.724]   - Field: ‘local’
[13:23:42.724]   - Field: ‘owner’
[13:23:42.724]   - Field: ‘envir’
[13:23:42.724]   - Field: ‘workers’
[13:23:42.724]   - Field: ‘packages’
[13:23:42.724]   - Field: ‘gc’
[13:23:42.724]   - Field: ‘conditions’
[13:23:42.725]   - Field: ‘persistent’
[13:23:42.725]   - Field: ‘expr’
[13:23:42.725]   - Field: ‘uuid’
[13:23:42.725]   - Field: ‘seed’
[13:23:42.725]   - Field: ‘version’
[13:23:42.725]   - Field: ‘result’
[13:23:42.725]   - Field: ‘asynchronous’
[13:23:42.725]   - Field: ‘calls’
[13:23:42.725]   - Field: ‘globals’
[13:23:42.726]   - Field: ‘stdout’
[13:23:42.726]   - Field: ‘earlySignal’
[13:23:42.726]   - Field: ‘lazy’
[13:23:42.726]   - Field: ‘state’
[13:23:42.726] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:42.726] - Launch lazy future ...
[13:23:42.726] Packages needed by the future expression (n = 0): <none>
[13:23:42.727] Packages needed by future strategies (n = 0): <none>
[13:23:42.727] {
[13:23:42.727]     {
[13:23:42.727]         {
[13:23:42.727]             ...future.startTime <- base::Sys.time()
[13:23:42.727]             {
[13:23:42.727]                 {
[13:23:42.727]                   {
[13:23:42.727]                     {
[13:23:42.727]                       base::local({
[13:23:42.727]                         has_future <- base::requireNamespace("future", 
[13:23:42.727]                           quietly = TRUE)
[13:23:42.727]                         if (has_future) {
[13:23:42.727]                           ns <- base::getNamespace("future")
[13:23:42.727]                           version <- ns[[".package"]][["version"]]
[13:23:42.727]                           if (is.null(version)) 
[13:23:42.727]                             version <- utils::packageVersion("future")
[13:23:42.727]                         }
[13:23:42.727]                         else {
[13:23:42.727]                           version <- NULL
[13:23:42.727]                         }
[13:23:42.727]                         if (!has_future || version < "1.8.0") {
[13:23:42.727]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:42.727]                             "", base::R.version$version.string), 
[13:23:42.727]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:42.727]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:42.727]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:42.727]                               "release", "version")], collapse = " "), 
[13:23:42.727]                             hostname = base::Sys.info()[["nodename"]])
[13:23:42.727]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:42.727]                             info)
[13:23:42.727]                           info <- base::paste(info, collapse = "; ")
[13:23:42.727]                           if (!has_future) {
[13:23:42.727]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:42.727]                               info)
[13:23:42.727]                           }
[13:23:42.727]                           else {
[13:23:42.727]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:42.727]                               info, version)
[13:23:42.727]                           }
[13:23:42.727]                           base::stop(msg)
[13:23:42.727]                         }
[13:23:42.727]                       })
[13:23:42.727]                     }
[13:23:42.727]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:42.727]                     base::options(mc.cores = 1L)
[13:23:42.727]                   }
[13:23:42.727]                   options(future.plan = NULL)
[13:23:42.727]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.727]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:42.727]                 }
[13:23:42.727]                 ...future.workdir <- getwd()
[13:23:42.727]             }
[13:23:42.727]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:42.727]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:42.727]         }
[13:23:42.727]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:42.727]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:42.727]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:42.727]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:42.727]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:42.727]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:42.727]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:42.727]             base::names(...future.oldOptions))
[13:23:42.727]     }
[13:23:42.727]     if (FALSE) {
[13:23:42.727]     }
[13:23:42.727]     else {
[13:23:42.727]         if (TRUE) {
[13:23:42.727]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:42.727]                 open = "w")
[13:23:42.727]         }
[13:23:42.727]         else {
[13:23:42.727]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:42.727]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:42.727]         }
[13:23:42.727]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:42.727]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:42.727]             base::sink(type = "output", split = FALSE)
[13:23:42.727]             base::close(...future.stdout)
[13:23:42.727]         }, add = TRUE)
[13:23:42.727]     }
[13:23:42.727]     ...future.frame <- base::sys.nframe()
[13:23:42.727]     ...future.conditions <- base::list()
[13:23:42.727]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:42.727]     if (FALSE) {
[13:23:42.727]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:42.727]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:42.727]     }
[13:23:42.727]     ...future.result <- base::tryCatch({
[13:23:42.727]         base::withCallingHandlers({
[13:23:42.727]             ...future.value <- base::withVisible(base::local({
[13:23:42.727]                 ...future.makeSendCondition <- base::local({
[13:23:42.727]                   sendCondition <- NULL
[13:23:42.727]                   function(frame = 1L) {
[13:23:42.727]                     if (is.function(sendCondition)) 
[13:23:42.727]                       return(sendCondition)
[13:23:42.727]                     ns <- getNamespace("parallel")
[13:23:42.727]                     if (exists("sendData", mode = "function", 
[13:23:42.727]                       envir = ns)) {
[13:23:42.727]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:42.727]                         envir = ns)
[13:23:42.727]                       envir <- sys.frame(frame)
[13:23:42.727]                       master <- NULL
[13:23:42.727]                       while (!identical(envir, .GlobalEnv) && 
[13:23:42.727]                         !identical(envir, emptyenv())) {
[13:23:42.727]                         if (exists("master", mode = "list", envir = envir, 
[13:23:42.727]                           inherits = FALSE)) {
[13:23:42.727]                           master <- get("master", mode = "list", 
[13:23:42.727]                             envir = envir, inherits = FALSE)
[13:23:42.727]                           if (inherits(master, c("SOCKnode", 
[13:23:42.727]                             "SOCK0node"))) {
[13:23:42.727]                             sendCondition <<- function(cond) {
[13:23:42.727]                               data <- list(type = "VALUE", value = cond, 
[13:23:42.727]                                 success = TRUE)
[13:23:42.727]                               parallel_sendData(master, data)
[13:23:42.727]                             }
[13:23:42.727]                             return(sendCondition)
[13:23:42.727]                           }
[13:23:42.727]                         }
[13:23:42.727]                         frame <- frame + 1L
[13:23:42.727]                         envir <- sys.frame(frame)
[13:23:42.727]                       }
[13:23:42.727]                     }
[13:23:42.727]                     sendCondition <<- function(cond) NULL
[13:23:42.727]                   }
[13:23:42.727]                 })
[13:23:42.727]                 withCallingHandlers({
[13:23:42.727]                   {
[13:23:42.727]                     future:::session_uuid(attributes = TRUE)
[13:23:42.727]                   }
[13:23:42.727]                 }, immediateCondition = function(cond) {
[13:23:42.727]                   sendCondition <- ...future.makeSendCondition()
[13:23:42.727]                   sendCondition(cond)
[13:23:42.727]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.727]                   {
[13:23:42.727]                     inherits <- base::inherits
[13:23:42.727]                     invokeRestart <- base::invokeRestart
[13:23:42.727]                     is.null <- base::is.null
[13:23:42.727]                     muffled <- FALSE
[13:23:42.727]                     if (inherits(cond, "message")) {
[13:23:42.727]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:42.727]                       if (muffled) 
[13:23:42.727]                         invokeRestart("muffleMessage")
[13:23:42.727]                     }
[13:23:42.727]                     else if (inherits(cond, "warning")) {
[13:23:42.727]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:42.727]                       if (muffled) 
[13:23:42.727]                         invokeRestart("muffleWarning")
[13:23:42.727]                     }
[13:23:42.727]                     else if (inherits(cond, "condition")) {
[13:23:42.727]                       if (!is.null(pattern)) {
[13:23:42.727]                         computeRestarts <- base::computeRestarts
[13:23:42.727]                         grepl <- base::grepl
[13:23:42.727]                         restarts <- computeRestarts(cond)
[13:23:42.727]                         for (restart in restarts) {
[13:23:42.727]                           name <- restart$name
[13:23:42.727]                           if (is.null(name)) 
[13:23:42.727]                             next
[13:23:42.727]                           if (!grepl(pattern, name)) 
[13:23:42.727]                             next
[13:23:42.727]                           invokeRestart(restart)
[13:23:42.727]                           muffled <- TRUE
[13:23:42.727]                           break
[13:23:42.727]                         }
[13:23:42.727]                       }
[13:23:42.727]                     }
[13:23:42.727]                     invisible(muffled)
[13:23:42.727]                   }
[13:23:42.727]                   muffleCondition(cond)
[13:23:42.727]                 })
[13:23:42.727]             }))
[13:23:42.727]             future::FutureResult(value = ...future.value$value, 
[13:23:42.727]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.727]                   ...future.rng), globalenv = if (FALSE) 
[13:23:42.727]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:42.727]                     ...future.globalenv.names))
[13:23:42.727]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:42.727]         }, condition = base::local({
[13:23:42.727]             c <- base::c
[13:23:42.727]             inherits <- base::inherits
[13:23:42.727]             invokeRestart <- base::invokeRestart
[13:23:42.727]             length <- base::length
[13:23:42.727]             list <- base::list
[13:23:42.727]             seq.int <- base::seq.int
[13:23:42.727]             signalCondition <- base::signalCondition
[13:23:42.727]             sys.calls <- base::sys.calls
[13:23:42.727]             `[[` <- base::`[[`
[13:23:42.727]             `+` <- base::`+`
[13:23:42.727]             `<<-` <- base::`<<-`
[13:23:42.727]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:42.727]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:42.727]                   3L)]
[13:23:42.727]             }
[13:23:42.727]             function(cond) {
[13:23:42.727]                 is_error <- inherits(cond, "error")
[13:23:42.727]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:42.727]                   NULL)
[13:23:42.727]                 if (is_error) {
[13:23:42.727]                   sessionInformation <- function() {
[13:23:42.727]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:42.727]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:42.727]                       search = base::search(), system = base::Sys.info())
[13:23:42.727]                   }
[13:23:42.727]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.727]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:42.727]                     cond$call), session = sessionInformation(), 
[13:23:42.727]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:42.727]                   signalCondition(cond)
[13:23:42.727]                 }
[13:23:42.727]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:42.727]                 "immediateCondition"))) {
[13:23:42.727]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:42.727]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.727]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:42.727]                   if (TRUE && !signal) {
[13:23:42.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.727]                     {
[13:23:42.727]                       inherits <- base::inherits
[13:23:42.727]                       invokeRestart <- base::invokeRestart
[13:23:42.727]                       is.null <- base::is.null
[13:23:42.727]                       muffled <- FALSE
[13:23:42.727]                       if (inherits(cond, "message")) {
[13:23:42.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.727]                         if (muffled) 
[13:23:42.727]                           invokeRestart("muffleMessage")
[13:23:42.727]                       }
[13:23:42.727]                       else if (inherits(cond, "warning")) {
[13:23:42.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.727]                         if (muffled) 
[13:23:42.727]                           invokeRestart("muffleWarning")
[13:23:42.727]                       }
[13:23:42.727]                       else if (inherits(cond, "condition")) {
[13:23:42.727]                         if (!is.null(pattern)) {
[13:23:42.727]                           computeRestarts <- base::computeRestarts
[13:23:42.727]                           grepl <- base::grepl
[13:23:42.727]                           restarts <- computeRestarts(cond)
[13:23:42.727]                           for (restart in restarts) {
[13:23:42.727]                             name <- restart$name
[13:23:42.727]                             if (is.null(name)) 
[13:23:42.727]                               next
[13:23:42.727]                             if (!grepl(pattern, name)) 
[13:23:42.727]                               next
[13:23:42.727]                             invokeRestart(restart)
[13:23:42.727]                             muffled <- TRUE
[13:23:42.727]                             break
[13:23:42.727]                           }
[13:23:42.727]                         }
[13:23:42.727]                       }
[13:23:42.727]                       invisible(muffled)
[13:23:42.727]                     }
[13:23:42.727]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.727]                   }
[13:23:42.727]                 }
[13:23:42.727]                 else {
[13:23:42.727]                   if (TRUE) {
[13:23:42.727]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.727]                     {
[13:23:42.727]                       inherits <- base::inherits
[13:23:42.727]                       invokeRestart <- base::invokeRestart
[13:23:42.727]                       is.null <- base::is.null
[13:23:42.727]                       muffled <- FALSE
[13:23:42.727]                       if (inherits(cond, "message")) {
[13:23:42.727]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.727]                         if (muffled) 
[13:23:42.727]                           invokeRestart("muffleMessage")
[13:23:42.727]                       }
[13:23:42.727]                       else if (inherits(cond, "warning")) {
[13:23:42.727]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.727]                         if (muffled) 
[13:23:42.727]                           invokeRestart("muffleWarning")
[13:23:42.727]                       }
[13:23:42.727]                       else if (inherits(cond, "condition")) {
[13:23:42.727]                         if (!is.null(pattern)) {
[13:23:42.727]                           computeRestarts <- base::computeRestarts
[13:23:42.727]                           grepl <- base::grepl
[13:23:42.727]                           restarts <- computeRestarts(cond)
[13:23:42.727]                           for (restart in restarts) {
[13:23:42.727]                             name <- restart$name
[13:23:42.727]                             if (is.null(name)) 
[13:23:42.727]                               next
[13:23:42.727]                             if (!grepl(pattern, name)) 
[13:23:42.727]                               next
[13:23:42.727]                             invokeRestart(restart)
[13:23:42.727]                             muffled <- TRUE
[13:23:42.727]                             break
[13:23:42.727]                           }
[13:23:42.727]                         }
[13:23:42.727]                       }
[13:23:42.727]                       invisible(muffled)
[13:23:42.727]                     }
[13:23:42.727]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.727]                   }
[13:23:42.727]                 }
[13:23:42.727]             }
[13:23:42.727]         }))
[13:23:42.727]     }, error = function(ex) {
[13:23:42.727]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:42.727]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.727]                 ...future.rng), started = ...future.startTime, 
[13:23:42.727]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:42.727]             version = "1.8"), class = "FutureResult")
[13:23:42.727]     }, finally = {
[13:23:42.727]         if (!identical(...future.workdir, getwd())) 
[13:23:42.727]             setwd(...future.workdir)
[13:23:42.727]         {
[13:23:42.727]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:42.727]                 ...future.oldOptions$nwarnings <- NULL
[13:23:42.727]             }
[13:23:42.727]             base::options(...future.oldOptions)
[13:23:42.727]             if (.Platform$OS.type == "windows") {
[13:23:42.727]                 old_names <- names(...future.oldEnvVars)
[13:23:42.727]                 envs <- base::Sys.getenv()
[13:23:42.727]                 names <- names(envs)
[13:23:42.727]                 common <- intersect(names, old_names)
[13:23:42.727]                 added <- setdiff(names, old_names)
[13:23:42.727]                 removed <- setdiff(old_names, names)
[13:23:42.727]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:42.727]                   envs[common]]
[13:23:42.727]                 NAMES <- toupper(changed)
[13:23:42.727]                 args <- list()
[13:23:42.727]                 for (kk in seq_along(NAMES)) {
[13:23:42.727]                   name <- changed[[kk]]
[13:23:42.727]                   NAME <- NAMES[[kk]]
[13:23:42.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.727]                     next
[13:23:42.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.727]                 }
[13:23:42.727]                 NAMES <- toupper(added)
[13:23:42.727]                 for (kk in seq_along(NAMES)) {
[13:23:42.727]                   name <- added[[kk]]
[13:23:42.727]                   NAME <- NAMES[[kk]]
[13:23:42.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.727]                     next
[13:23:42.727]                   args[[name]] <- ""
[13:23:42.727]                 }
[13:23:42.727]                 NAMES <- toupper(removed)
[13:23:42.727]                 for (kk in seq_along(NAMES)) {
[13:23:42.727]                   name <- removed[[kk]]
[13:23:42.727]                   NAME <- NAMES[[kk]]
[13:23:42.727]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.727]                     next
[13:23:42.727]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.727]                 }
[13:23:42.727]                 if (length(args) > 0) 
[13:23:42.727]                   base::do.call(base::Sys.setenv, args = args)
[13:23:42.727]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:42.727]             }
[13:23:42.727]             else {
[13:23:42.727]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:42.727]             }
[13:23:42.727]             {
[13:23:42.727]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:42.727]                   0L) {
[13:23:42.727]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:42.727]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:42.727]                   base::options(opts)
[13:23:42.727]                 }
[13:23:42.727]                 {
[13:23:42.727]                   {
[13:23:42.727]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:42.727]                     NULL
[13:23:42.727]                   }
[13:23:42.727]                   options(future.plan = NULL)
[13:23:42.727]                   if (is.na(NA_character_)) 
[13:23:42.727]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.727]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:42.727]                   future::plan(list(function (..., workers = 2L, 
[13:23:42.727]                     envir = parent.frame()) 
[13:23:42.727]                   strategy(..., workers = workers, envir = envir)), 
[13:23:42.727]                     .cleanup = FALSE, .init = FALSE)
[13:23:42.727]                 }
[13:23:42.727]             }
[13:23:42.727]         }
[13:23:42.727]     })
[13:23:42.727]     if (TRUE) {
[13:23:42.727]         base::sink(type = "output", split = FALSE)
[13:23:42.727]         if (TRUE) {
[13:23:42.727]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:42.727]         }
[13:23:42.727]         else {
[13:23:42.727]             ...future.result["stdout"] <- base::list(NULL)
[13:23:42.727]         }
[13:23:42.727]         base::close(...future.stdout)
[13:23:42.727]         ...future.stdout <- NULL
[13:23:42.727]     }
[13:23:42.727]     ...future.result$conditions <- ...future.conditions
[13:23:42.727]     ...future.result$finished <- base::Sys.time()
[13:23:42.727]     ...future.result
[13:23:42.727] }
[13:23:42.731] MultisessionFuture started
[13:23:42.731] - Launch lazy future ... done
[13:23:42.731] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[13:23:42.732] result() for ClusterFuture ...
[13:23:42.732] receiveMessageFromWorker() for ClusterFuture ...
[13:23:42.732] - Validating connection of MultisessionFuture
[13:23:42.777] - received message: FutureResult
[13:23:42.778] - Received FutureResult
[13:23:42.778] - Erased future from FutureRegistry
[13:23:42.778] result() for ClusterFuture ...
[13:23:42.778] - result already collected: FutureResult
[13:23:42.778] result() for ClusterFuture ... done
[13:23:42.778] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:42.779] result() for ClusterFuture ... done
[13:23:42.779] result() for ClusterFuture ...
[13:23:42.779] - result already collected: FutureResult
[13:23:42.779] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: aa6b3f98-b374-e92f-bf60-ab890829910e
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[13:23:42.779] getGlobalsAndPackages() ...
[13:23:42.779] Searching for globals...
[13:23:42.781] - globals found: [2] ‘{’, ‘:::’
[13:23:42.781] Searching for globals ... DONE
[13:23:42.781] Resolving globals: FALSE
[13:23:42.781] 
[13:23:42.781] 
[13:23:42.782] getGlobalsAndPackages() ... DONE
[13:23:42.782] run() for ‘Future’ ...
[13:23:42.782] - state: ‘created’
[13:23:42.782] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:42.793] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:42.794] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:42.794]   - Field: ‘node’
[13:23:42.794]   - Field: ‘label’
[13:23:42.794]   - Field: ‘local’
[13:23:42.794]   - Field: ‘owner’
[13:23:42.794]   - Field: ‘envir’
[13:23:42.794]   - Field: ‘workers’
[13:23:42.797]   - Field: ‘packages’
[13:23:42.798]   - Field: ‘gc’
[13:23:42.798]   - Field: ‘conditions’
[13:23:42.798]   - Field: ‘persistent’
[13:23:42.798]   - Field: ‘expr’
[13:23:42.798]   - Field: ‘uuid’
[13:23:42.798]   - Field: ‘seed’
[13:23:42.798]   - Field: ‘version’
[13:23:42.798]   - Field: ‘result’
[13:23:42.798]   - Field: ‘asynchronous’
[13:23:42.798]   - Field: ‘calls’
[13:23:42.798]   - Field: ‘globals’
[13:23:42.799]   - Field: ‘stdout’
[13:23:42.799]   - Field: ‘earlySignal’
[13:23:42.799]   - Field: ‘lazy’
[13:23:42.799]   - Field: ‘state’
[13:23:42.799] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:42.799] - Launch lazy future ...
[13:23:42.799] Packages needed by the future expression (n = 0): <none>
[13:23:42.799] Packages needed by future strategies (n = 0): <none>
[13:23:42.800] {
[13:23:42.800]     {
[13:23:42.800]         {
[13:23:42.800]             ...future.startTime <- base::Sys.time()
[13:23:42.800]             {
[13:23:42.800]                 {
[13:23:42.800]                   {
[13:23:42.800]                     {
[13:23:42.800]                       base::local({
[13:23:42.800]                         has_future <- base::requireNamespace("future", 
[13:23:42.800]                           quietly = TRUE)
[13:23:42.800]                         if (has_future) {
[13:23:42.800]                           ns <- base::getNamespace("future")
[13:23:42.800]                           version <- ns[[".package"]][["version"]]
[13:23:42.800]                           if (is.null(version)) 
[13:23:42.800]                             version <- utils::packageVersion("future")
[13:23:42.800]                         }
[13:23:42.800]                         else {
[13:23:42.800]                           version <- NULL
[13:23:42.800]                         }
[13:23:42.800]                         if (!has_future || version < "1.8.0") {
[13:23:42.800]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:42.800]                             "", base::R.version$version.string), 
[13:23:42.800]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:42.800]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:42.800]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:42.800]                               "release", "version")], collapse = " "), 
[13:23:42.800]                             hostname = base::Sys.info()[["nodename"]])
[13:23:42.800]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:42.800]                             info)
[13:23:42.800]                           info <- base::paste(info, collapse = "; ")
[13:23:42.800]                           if (!has_future) {
[13:23:42.800]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:42.800]                               info)
[13:23:42.800]                           }
[13:23:42.800]                           else {
[13:23:42.800]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:42.800]                               info, version)
[13:23:42.800]                           }
[13:23:42.800]                           base::stop(msg)
[13:23:42.800]                         }
[13:23:42.800]                       })
[13:23:42.800]                     }
[13:23:42.800]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:42.800]                     base::options(mc.cores = 1L)
[13:23:42.800]                   }
[13:23:42.800]                   options(future.plan = NULL)
[13:23:42.800]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.800]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:42.800]                 }
[13:23:42.800]                 ...future.workdir <- getwd()
[13:23:42.800]             }
[13:23:42.800]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:42.800]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:42.800]         }
[13:23:42.800]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:42.800]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:42.800]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:42.800]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:42.800]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:42.800]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:42.800]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:42.800]             base::names(...future.oldOptions))
[13:23:42.800]     }
[13:23:42.800]     if (FALSE) {
[13:23:42.800]     }
[13:23:42.800]     else {
[13:23:42.800]         if (TRUE) {
[13:23:42.800]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:42.800]                 open = "w")
[13:23:42.800]         }
[13:23:42.800]         else {
[13:23:42.800]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:42.800]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:42.800]         }
[13:23:42.800]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:42.800]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:42.800]             base::sink(type = "output", split = FALSE)
[13:23:42.800]             base::close(...future.stdout)
[13:23:42.800]         }, add = TRUE)
[13:23:42.800]     }
[13:23:42.800]     ...future.frame <- base::sys.nframe()
[13:23:42.800]     ...future.conditions <- base::list()
[13:23:42.800]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:42.800]     if (FALSE) {
[13:23:42.800]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:42.800]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:42.800]     }
[13:23:42.800]     ...future.result <- base::tryCatch({
[13:23:42.800]         base::withCallingHandlers({
[13:23:42.800]             ...future.value <- base::withVisible(base::local({
[13:23:42.800]                 ...future.makeSendCondition <- base::local({
[13:23:42.800]                   sendCondition <- NULL
[13:23:42.800]                   function(frame = 1L) {
[13:23:42.800]                     if (is.function(sendCondition)) 
[13:23:42.800]                       return(sendCondition)
[13:23:42.800]                     ns <- getNamespace("parallel")
[13:23:42.800]                     if (exists("sendData", mode = "function", 
[13:23:42.800]                       envir = ns)) {
[13:23:42.800]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:42.800]                         envir = ns)
[13:23:42.800]                       envir <- sys.frame(frame)
[13:23:42.800]                       master <- NULL
[13:23:42.800]                       while (!identical(envir, .GlobalEnv) && 
[13:23:42.800]                         !identical(envir, emptyenv())) {
[13:23:42.800]                         if (exists("master", mode = "list", envir = envir, 
[13:23:42.800]                           inherits = FALSE)) {
[13:23:42.800]                           master <- get("master", mode = "list", 
[13:23:42.800]                             envir = envir, inherits = FALSE)
[13:23:42.800]                           if (inherits(master, c("SOCKnode", 
[13:23:42.800]                             "SOCK0node"))) {
[13:23:42.800]                             sendCondition <<- function(cond) {
[13:23:42.800]                               data <- list(type = "VALUE", value = cond, 
[13:23:42.800]                                 success = TRUE)
[13:23:42.800]                               parallel_sendData(master, data)
[13:23:42.800]                             }
[13:23:42.800]                             return(sendCondition)
[13:23:42.800]                           }
[13:23:42.800]                         }
[13:23:42.800]                         frame <- frame + 1L
[13:23:42.800]                         envir <- sys.frame(frame)
[13:23:42.800]                       }
[13:23:42.800]                     }
[13:23:42.800]                     sendCondition <<- function(cond) NULL
[13:23:42.800]                   }
[13:23:42.800]                 })
[13:23:42.800]                 withCallingHandlers({
[13:23:42.800]                   {
[13:23:42.800]                     future:::session_uuid(attributes = TRUE)
[13:23:42.800]                   }
[13:23:42.800]                 }, immediateCondition = function(cond) {
[13:23:42.800]                   sendCondition <- ...future.makeSendCondition()
[13:23:42.800]                   sendCondition(cond)
[13:23:42.800]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.800]                   {
[13:23:42.800]                     inherits <- base::inherits
[13:23:42.800]                     invokeRestart <- base::invokeRestart
[13:23:42.800]                     is.null <- base::is.null
[13:23:42.800]                     muffled <- FALSE
[13:23:42.800]                     if (inherits(cond, "message")) {
[13:23:42.800]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:42.800]                       if (muffled) 
[13:23:42.800]                         invokeRestart("muffleMessage")
[13:23:42.800]                     }
[13:23:42.800]                     else if (inherits(cond, "warning")) {
[13:23:42.800]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:42.800]                       if (muffled) 
[13:23:42.800]                         invokeRestart("muffleWarning")
[13:23:42.800]                     }
[13:23:42.800]                     else if (inherits(cond, "condition")) {
[13:23:42.800]                       if (!is.null(pattern)) {
[13:23:42.800]                         computeRestarts <- base::computeRestarts
[13:23:42.800]                         grepl <- base::grepl
[13:23:42.800]                         restarts <- computeRestarts(cond)
[13:23:42.800]                         for (restart in restarts) {
[13:23:42.800]                           name <- restart$name
[13:23:42.800]                           if (is.null(name)) 
[13:23:42.800]                             next
[13:23:42.800]                           if (!grepl(pattern, name)) 
[13:23:42.800]                             next
[13:23:42.800]                           invokeRestart(restart)
[13:23:42.800]                           muffled <- TRUE
[13:23:42.800]                           break
[13:23:42.800]                         }
[13:23:42.800]                       }
[13:23:42.800]                     }
[13:23:42.800]                     invisible(muffled)
[13:23:42.800]                   }
[13:23:42.800]                   muffleCondition(cond)
[13:23:42.800]                 })
[13:23:42.800]             }))
[13:23:42.800]             future::FutureResult(value = ...future.value$value, 
[13:23:42.800]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.800]                   ...future.rng), globalenv = if (FALSE) 
[13:23:42.800]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:42.800]                     ...future.globalenv.names))
[13:23:42.800]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:42.800]         }, condition = base::local({
[13:23:42.800]             c <- base::c
[13:23:42.800]             inherits <- base::inherits
[13:23:42.800]             invokeRestart <- base::invokeRestart
[13:23:42.800]             length <- base::length
[13:23:42.800]             list <- base::list
[13:23:42.800]             seq.int <- base::seq.int
[13:23:42.800]             signalCondition <- base::signalCondition
[13:23:42.800]             sys.calls <- base::sys.calls
[13:23:42.800]             `[[` <- base::`[[`
[13:23:42.800]             `+` <- base::`+`
[13:23:42.800]             `<<-` <- base::`<<-`
[13:23:42.800]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:42.800]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:42.800]                   3L)]
[13:23:42.800]             }
[13:23:42.800]             function(cond) {
[13:23:42.800]                 is_error <- inherits(cond, "error")
[13:23:42.800]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:42.800]                   NULL)
[13:23:42.800]                 if (is_error) {
[13:23:42.800]                   sessionInformation <- function() {
[13:23:42.800]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:42.800]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:42.800]                       search = base::search(), system = base::Sys.info())
[13:23:42.800]                   }
[13:23:42.800]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.800]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:42.800]                     cond$call), session = sessionInformation(), 
[13:23:42.800]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:42.800]                   signalCondition(cond)
[13:23:42.800]                 }
[13:23:42.800]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:42.800]                 "immediateCondition"))) {
[13:23:42.800]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:42.800]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.800]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:42.800]                   if (TRUE && !signal) {
[13:23:42.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.800]                     {
[13:23:42.800]                       inherits <- base::inherits
[13:23:42.800]                       invokeRestart <- base::invokeRestart
[13:23:42.800]                       is.null <- base::is.null
[13:23:42.800]                       muffled <- FALSE
[13:23:42.800]                       if (inherits(cond, "message")) {
[13:23:42.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.800]                         if (muffled) 
[13:23:42.800]                           invokeRestart("muffleMessage")
[13:23:42.800]                       }
[13:23:42.800]                       else if (inherits(cond, "warning")) {
[13:23:42.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.800]                         if (muffled) 
[13:23:42.800]                           invokeRestart("muffleWarning")
[13:23:42.800]                       }
[13:23:42.800]                       else if (inherits(cond, "condition")) {
[13:23:42.800]                         if (!is.null(pattern)) {
[13:23:42.800]                           computeRestarts <- base::computeRestarts
[13:23:42.800]                           grepl <- base::grepl
[13:23:42.800]                           restarts <- computeRestarts(cond)
[13:23:42.800]                           for (restart in restarts) {
[13:23:42.800]                             name <- restart$name
[13:23:42.800]                             if (is.null(name)) 
[13:23:42.800]                               next
[13:23:42.800]                             if (!grepl(pattern, name)) 
[13:23:42.800]                               next
[13:23:42.800]                             invokeRestart(restart)
[13:23:42.800]                             muffled <- TRUE
[13:23:42.800]                             break
[13:23:42.800]                           }
[13:23:42.800]                         }
[13:23:42.800]                       }
[13:23:42.800]                       invisible(muffled)
[13:23:42.800]                     }
[13:23:42.800]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.800]                   }
[13:23:42.800]                 }
[13:23:42.800]                 else {
[13:23:42.800]                   if (TRUE) {
[13:23:42.800]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.800]                     {
[13:23:42.800]                       inherits <- base::inherits
[13:23:42.800]                       invokeRestart <- base::invokeRestart
[13:23:42.800]                       is.null <- base::is.null
[13:23:42.800]                       muffled <- FALSE
[13:23:42.800]                       if (inherits(cond, "message")) {
[13:23:42.800]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.800]                         if (muffled) 
[13:23:42.800]                           invokeRestart("muffleMessage")
[13:23:42.800]                       }
[13:23:42.800]                       else if (inherits(cond, "warning")) {
[13:23:42.800]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.800]                         if (muffled) 
[13:23:42.800]                           invokeRestart("muffleWarning")
[13:23:42.800]                       }
[13:23:42.800]                       else if (inherits(cond, "condition")) {
[13:23:42.800]                         if (!is.null(pattern)) {
[13:23:42.800]                           computeRestarts <- base::computeRestarts
[13:23:42.800]                           grepl <- base::grepl
[13:23:42.800]                           restarts <- computeRestarts(cond)
[13:23:42.800]                           for (restart in restarts) {
[13:23:42.800]                             name <- restart$name
[13:23:42.800]                             if (is.null(name)) 
[13:23:42.800]                               next
[13:23:42.800]                             if (!grepl(pattern, name)) 
[13:23:42.800]                               next
[13:23:42.800]                             invokeRestart(restart)
[13:23:42.800]                             muffled <- TRUE
[13:23:42.800]                             break
[13:23:42.800]                           }
[13:23:42.800]                         }
[13:23:42.800]                       }
[13:23:42.800]                       invisible(muffled)
[13:23:42.800]                     }
[13:23:42.800]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.800]                   }
[13:23:42.800]                 }
[13:23:42.800]             }
[13:23:42.800]         }))
[13:23:42.800]     }, error = function(ex) {
[13:23:42.800]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:42.800]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.800]                 ...future.rng), started = ...future.startTime, 
[13:23:42.800]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:42.800]             version = "1.8"), class = "FutureResult")
[13:23:42.800]     }, finally = {
[13:23:42.800]         if (!identical(...future.workdir, getwd())) 
[13:23:42.800]             setwd(...future.workdir)
[13:23:42.800]         {
[13:23:42.800]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:42.800]                 ...future.oldOptions$nwarnings <- NULL
[13:23:42.800]             }
[13:23:42.800]             base::options(...future.oldOptions)
[13:23:42.800]             if (.Platform$OS.type == "windows") {
[13:23:42.800]                 old_names <- names(...future.oldEnvVars)
[13:23:42.800]                 envs <- base::Sys.getenv()
[13:23:42.800]                 names <- names(envs)
[13:23:42.800]                 common <- intersect(names, old_names)
[13:23:42.800]                 added <- setdiff(names, old_names)
[13:23:42.800]                 removed <- setdiff(old_names, names)
[13:23:42.800]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:42.800]                   envs[common]]
[13:23:42.800]                 NAMES <- toupper(changed)
[13:23:42.800]                 args <- list()
[13:23:42.800]                 for (kk in seq_along(NAMES)) {
[13:23:42.800]                   name <- changed[[kk]]
[13:23:42.800]                   NAME <- NAMES[[kk]]
[13:23:42.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.800]                     next
[13:23:42.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.800]                 }
[13:23:42.800]                 NAMES <- toupper(added)
[13:23:42.800]                 for (kk in seq_along(NAMES)) {
[13:23:42.800]                   name <- added[[kk]]
[13:23:42.800]                   NAME <- NAMES[[kk]]
[13:23:42.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.800]                     next
[13:23:42.800]                   args[[name]] <- ""
[13:23:42.800]                 }
[13:23:42.800]                 NAMES <- toupper(removed)
[13:23:42.800]                 for (kk in seq_along(NAMES)) {
[13:23:42.800]                   name <- removed[[kk]]
[13:23:42.800]                   NAME <- NAMES[[kk]]
[13:23:42.800]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.800]                     next
[13:23:42.800]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.800]                 }
[13:23:42.800]                 if (length(args) > 0) 
[13:23:42.800]                   base::do.call(base::Sys.setenv, args = args)
[13:23:42.800]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:42.800]             }
[13:23:42.800]             else {
[13:23:42.800]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:42.800]             }
[13:23:42.800]             {
[13:23:42.800]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:42.800]                   0L) {
[13:23:42.800]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:42.800]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:42.800]                   base::options(opts)
[13:23:42.800]                 }
[13:23:42.800]                 {
[13:23:42.800]                   {
[13:23:42.800]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:42.800]                     NULL
[13:23:42.800]                   }
[13:23:42.800]                   options(future.plan = NULL)
[13:23:42.800]                   if (is.na(NA_character_)) 
[13:23:42.800]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.800]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:42.800]                   future::plan(list(function (..., workers = 2L, 
[13:23:42.800]                     envir = parent.frame()) 
[13:23:42.800]                   strategy(..., workers = workers, envir = envir)), 
[13:23:42.800]                     .cleanup = FALSE, .init = FALSE)
[13:23:42.800]                 }
[13:23:42.800]             }
[13:23:42.800]         }
[13:23:42.800]     })
[13:23:42.800]     if (TRUE) {
[13:23:42.800]         base::sink(type = "output", split = FALSE)
[13:23:42.800]         if (TRUE) {
[13:23:42.800]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:42.800]         }
[13:23:42.800]         else {
[13:23:42.800]             ...future.result["stdout"] <- base::list(NULL)
[13:23:42.800]         }
[13:23:42.800]         base::close(...future.stdout)
[13:23:42.800]         ...future.stdout <- NULL
[13:23:42.800]     }
[13:23:42.800]     ...future.result$conditions <- ...future.conditions
[13:23:42.800]     ...future.result$finished <- base::Sys.time()
[13:23:42.800]     ...future.result
[13:23:42.800] }
[13:23:42.803] MultisessionFuture started
[13:23:42.803] - Launch lazy future ... done
[13:23:42.803] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[13:23:42.804] result() for ClusterFuture ...
[13:23:42.804] receiveMessageFromWorker() for ClusterFuture ...
[13:23:42.804] - Validating connection of MultisessionFuture
[13:23:42.846] - received message: FutureResult
[13:23:42.846] - Received FutureResult
[13:23:42.846] - Erased future from FutureRegistry
[13:23:42.846] result() for ClusterFuture ...
[13:23:42.846] - result already collected: FutureResult
[13:23:42.846] result() for ClusterFuture ... done
[13:23:42.846] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:42.847] result() for ClusterFuture ... done
[13:23:42.847] result() for ClusterFuture ...
[13:23:42.847] - result already collected: FutureResult
[13:23:42.847] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: aa6b3f98-b374-e92f-bf60-ab890829910e
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[13:23:42.847] getGlobalsAndPackages() ...
[13:23:42.847] Searching for globals...
[13:23:42.848] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:23:42.848] Searching for globals ... DONE
[13:23:42.848] Resolving globals: FALSE
[13:23:42.851] The total size of the 1 globals is 1.56 MiB (1631688 bytes)
[13:23:42.852] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:23:42.852] - globals: [1] ‘f1’
[13:23:42.852] 
[13:23:42.852] getGlobalsAndPackages() ... DONE
[13:23:42.852] run() for ‘Future’ ...
[13:23:42.853] - state: ‘created’
[13:23:42.853] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:42.863] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:42.864] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:42.864]   - Field: ‘node’
[13:23:42.864]   - Field: ‘label’
[13:23:42.864]   - Field: ‘local’
[13:23:42.864]   - Field: ‘owner’
[13:23:42.864]   - Field: ‘envir’
[13:23:42.864]   - Field: ‘workers’
[13:23:42.864]   - Field: ‘packages’
[13:23:42.864]   - Field: ‘gc’
[13:23:42.864]   - Field: ‘conditions’
[13:23:42.865]   - Field: ‘persistent’
[13:23:42.865]   - Field: ‘expr’
[13:23:42.865]   - Field: ‘uuid’
[13:23:42.865]   - Field: ‘seed’
[13:23:42.865]   - Field: ‘version’
[13:23:42.865]   - Field: ‘result’
[13:23:42.865]   - Field: ‘asynchronous’
[13:23:42.865]   - Field: ‘calls’
[13:23:42.865]   - Field: ‘globals’
[13:23:42.865]   - Field: ‘stdout’
[13:23:42.865]   - Field: ‘earlySignal’
[13:23:42.865]   - Field: ‘lazy’
[13:23:42.866]   - Field: ‘state’
[13:23:42.866] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:42.866] - Launch lazy future ...
[13:23:42.866] Packages needed by the future expression (n = 0): <none>
[13:23:42.866] Packages needed by future strategies (n = 0): <none>
[13:23:42.867] {
[13:23:42.867]     {
[13:23:42.867]         {
[13:23:42.867]             ...future.startTime <- base::Sys.time()
[13:23:42.867]             {
[13:23:42.867]                 {
[13:23:42.867]                   {
[13:23:42.867]                     {
[13:23:42.867]                       base::local({
[13:23:42.867]                         has_future <- base::requireNamespace("future", 
[13:23:42.867]                           quietly = TRUE)
[13:23:42.867]                         if (has_future) {
[13:23:42.867]                           ns <- base::getNamespace("future")
[13:23:42.867]                           version <- ns[[".package"]][["version"]]
[13:23:42.867]                           if (is.null(version)) 
[13:23:42.867]                             version <- utils::packageVersion("future")
[13:23:42.867]                         }
[13:23:42.867]                         else {
[13:23:42.867]                           version <- NULL
[13:23:42.867]                         }
[13:23:42.867]                         if (!has_future || version < "1.8.0") {
[13:23:42.867]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:42.867]                             "", base::R.version$version.string), 
[13:23:42.867]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:42.867]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:42.867]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:42.867]                               "release", "version")], collapse = " "), 
[13:23:42.867]                             hostname = base::Sys.info()[["nodename"]])
[13:23:42.867]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:42.867]                             info)
[13:23:42.867]                           info <- base::paste(info, collapse = "; ")
[13:23:42.867]                           if (!has_future) {
[13:23:42.867]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:42.867]                               info)
[13:23:42.867]                           }
[13:23:42.867]                           else {
[13:23:42.867]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:42.867]                               info, version)
[13:23:42.867]                           }
[13:23:42.867]                           base::stop(msg)
[13:23:42.867]                         }
[13:23:42.867]                       })
[13:23:42.867]                     }
[13:23:42.867]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:42.867]                     base::options(mc.cores = 1L)
[13:23:42.867]                   }
[13:23:42.867]                   options(future.plan = NULL)
[13:23:42.867]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.867]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:42.867]                 }
[13:23:42.867]                 ...future.workdir <- getwd()
[13:23:42.867]             }
[13:23:42.867]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:42.867]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:42.867]         }
[13:23:42.867]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:42.867]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:42.867]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:42.867]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:42.867]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:42.867]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:42.867]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:42.867]             base::names(...future.oldOptions))
[13:23:42.867]     }
[13:23:42.867]     if (FALSE) {
[13:23:42.867]     }
[13:23:42.867]     else {
[13:23:42.867]         if (TRUE) {
[13:23:42.867]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:42.867]                 open = "w")
[13:23:42.867]         }
[13:23:42.867]         else {
[13:23:42.867]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:42.867]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:42.867]         }
[13:23:42.867]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:42.867]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:42.867]             base::sink(type = "output", split = FALSE)
[13:23:42.867]             base::close(...future.stdout)
[13:23:42.867]         }, add = TRUE)
[13:23:42.867]     }
[13:23:42.867]     ...future.frame <- base::sys.nframe()
[13:23:42.867]     ...future.conditions <- base::list()
[13:23:42.867]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:42.867]     if (FALSE) {
[13:23:42.867]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:42.867]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:42.867]     }
[13:23:42.867]     ...future.result <- base::tryCatch({
[13:23:42.867]         base::withCallingHandlers({
[13:23:42.867]             ...future.value <- base::withVisible(base::local({
[13:23:42.867]                 ...future.makeSendCondition <- base::local({
[13:23:42.867]                   sendCondition <- NULL
[13:23:42.867]                   function(frame = 1L) {
[13:23:42.867]                     if (is.function(sendCondition)) 
[13:23:42.867]                       return(sendCondition)
[13:23:42.867]                     ns <- getNamespace("parallel")
[13:23:42.867]                     if (exists("sendData", mode = "function", 
[13:23:42.867]                       envir = ns)) {
[13:23:42.867]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:42.867]                         envir = ns)
[13:23:42.867]                       envir <- sys.frame(frame)
[13:23:42.867]                       master <- NULL
[13:23:42.867]                       while (!identical(envir, .GlobalEnv) && 
[13:23:42.867]                         !identical(envir, emptyenv())) {
[13:23:42.867]                         if (exists("master", mode = "list", envir = envir, 
[13:23:42.867]                           inherits = FALSE)) {
[13:23:42.867]                           master <- get("master", mode = "list", 
[13:23:42.867]                             envir = envir, inherits = FALSE)
[13:23:42.867]                           if (inherits(master, c("SOCKnode", 
[13:23:42.867]                             "SOCK0node"))) {
[13:23:42.867]                             sendCondition <<- function(cond) {
[13:23:42.867]                               data <- list(type = "VALUE", value = cond, 
[13:23:42.867]                                 success = TRUE)
[13:23:42.867]                               parallel_sendData(master, data)
[13:23:42.867]                             }
[13:23:42.867]                             return(sendCondition)
[13:23:42.867]                           }
[13:23:42.867]                         }
[13:23:42.867]                         frame <- frame + 1L
[13:23:42.867]                         envir <- sys.frame(frame)
[13:23:42.867]                       }
[13:23:42.867]                     }
[13:23:42.867]                     sendCondition <<- function(cond) NULL
[13:23:42.867]                   }
[13:23:42.867]                 })
[13:23:42.867]                 withCallingHandlers({
[13:23:42.867]                   {
[13:23:42.867]                     f1$owner
[13:23:42.867]                   }
[13:23:42.867]                 }, immediateCondition = function(cond) {
[13:23:42.867]                   sendCondition <- ...future.makeSendCondition()
[13:23:42.867]                   sendCondition(cond)
[13:23:42.867]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.867]                   {
[13:23:42.867]                     inherits <- base::inherits
[13:23:42.867]                     invokeRestart <- base::invokeRestart
[13:23:42.867]                     is.null <- base::is.null
[13:23:42.867]                     muffled <- FALSE
[13:23:42.867]                     if (inherits(cond, "message")) {
[13:23:42.867]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:42.867]                       if (muffled) 
[13:23:42.867]                         invokeRestart("muffleMessage")
[13:23:42.867]                     }
[13:23:42.867]                     else if (inherits(cond, "warning")) {
[13:23:42.867]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:42.867]                       if (muffled) 
[13:23:42.867]                         invokeRestart("muffleWarning")
[13:23:42.867]                     }
[13:23:42.867]                     else if (inherits(cond, "condition")) {
[13:23:42.867]                       if (!is.null(pattern)) {
[13:23:42.867]                         computeRestarts <- base::computeRestarts
[13:23:42.867]                         grepl <- base::grepl
[13:23:42.867]                         restarts <- computeRestarts(cond)
[13:23:42.867]                         for (restart in restarts) {
[13:23:42.867]                           name <- restart$name
[13:23:42.867]                           if (is.null(name)) 
[13:23:42.867]                             next
[13:23:42.867]                           if (!grepl(pattern, name)) 
[13:23:42.867]                             next
[13:23:42.867]                           invokeRestart(restart)
[13:23:42.867]                           muffled <- TRUE
[13:23:42.867]                           break
[13:23:42.867]                         }
[13:23:42.867]                       }
[13:23:42.867]                     }
[13:23:42.867]                     invisible(muffled)
[13:23:42.867]                   }
[13:23:42.867]                   muffleCondition(cond)
[13:23:42.867]                 })
[13:23:42.867]             }))
[13:23:42.867]             future::FutureResult(value = ...future.value$value, 
[13:23:42.867]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.867]                   ...future.rng), globalenv = if (FALSE) 
[13:23:42.867]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:42.867]                     ...future.globalenv.names))
[13:23:42.867]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:42.867]         }, condition = base::local({
[13:23:42.867]             c <- base::c
[13:23:42.867]             inherits <- base::inherits
[13:23:42.867]             invokeRestart <- base::invokeRestart
[13:23:42.867]             length <- base::length
[13:23:42.867]             list <- base::list
[13:23:42.867]             seq.int <- base::seq.int
[13:23:42.867]             signalCondition <- base::signalCondition
[13:23:42.867]             sys.calls <- base::sys.calls
[13:23:42.867]             `[[` <- base::`[[`
[13:23:42.867]             `+` <- base::`+`
[13:23:42.867]             `<<-` <- base::`<<-`
[13:23:42.867]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:42.867]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:42.867]                   3L)]
[13:23:42.867]             }
[13:23:42.867]             function(cond) {
[13:23:42.867]                 is_error <- inherits(cond, "error")
[13:23:42.867]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:42.867]                   NULL)
[13:23:42.867]                 if (is_error) {
[13:23:42.867]                   sessionInformation <- function() {
[13:23:42.867]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:42.867]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:42.867]                       search = base::search(), system = base::Sys.info())
[13:23:42.867]                   }
[13:23:42.867]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.867]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:42.867]                     cond$call), session = sessionInformation(), 
[13:23:42.867]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:42.867]                   signalCondition(cond)
[13:23:42.867]                 }
[13:23:42.867]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:42.867]                 "immediateCondition"))) {
[13:23:42.867]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:42.867]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.867]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:42.867]                   if (TRUE && !signal) {
[13:23:42.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.867]                     {
[13:23:42.867]                       inherits <- base::inherits
[13:23:42.867]                       invokeRestart <- base::invokeRestart
[13:23:42.867]                       is.null <- base::is.null
[13:23:42.867]                       muffled <- FALSE
[13:23:42.867]                       if (inherits(cond, "message")) {
[13:23:42.867]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.867]                         if (muffled) 
[13:23:42.867]                           invokeRestart("muffleMessage")
[13:23:42.867]                       }
[13:23:42.867]                       else if (inherits(cond, "warning")) {
[13:23:42.867]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.867]                         if (muffled) 
[13:23:42.867]                           invokeRestart("muffleWarning")
[13:23:42.867]                       }
[13:23:42.867]                       else if (inherits(cond, "condition")) {
[13:23:42.867]                         if (!is.null(pattern)) {
[13:23:42.867]                           computeRestarts <- base::computeRestarts
[13:23:42.867]                           grepl <- base::grepl
[13:23:42.867]                           restarts <- computeRestarts(cond)
[13:23:42.867]                           for (restart in restarts) {
[13:23:42.867]                             name <- restart$name
[13:23:42.867]                             if (is.null(name)) 
[13:23:42.867]                               next
[13:23:42.867]                             if (!grepl(pattern, name)) 
[13:23:42.867]                               next
[13:23:42.867]                             invokeRestart(restart)
[13:23:42.867]                             muffled <- TRUE
[13:23:42.867]                             break
[13:23:42.867]                           }
[13:23:42.867]                         }
[13:23:42.867]                       }
[13:23:42.867]                       invisible(muffled)
[13:23:42.867]                     }
[13:23:42.867]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.867]                   }
[13:23:42.867]                 }
[13:23:42.867]                 else {
[13:23:42.867]                   if (TRUE) {
[13:23:42.867]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.867]                     {
[13:23:42.867]                       inherits <- base::inherits
[13:23:42.867]                       invokeRestart <- base::invokeRestart
[13:23:42.867]                       is.null <- base::is.null
[13:23:42.867]                       muffled <- FALSE
[13:23:42.867]                       if (inherits(cond, "message")) {
[13:23:42.867]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.867]                         if (muffled) 
[13:23:42.867]                           invokeRestart("muffleMessage")
[13:23:42.867]                       }
[13:23:42.867]                       else if (inherits(cond, "warning")) {
[13:23:42.867]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.867]                         if (muffled) 
[13:23:42.867]                           invokeRestart("muffleWarning")
[13:23:42.867]                       }
[13:23:42.867]                       else if (inherits(cond, "condition")) {
[13:23:42.867]                         if (!is.null(pattern)) {
[13:23:42.867]                           computeRestarts <- base::computeRestarts
[13:23:42.867]                           grepl <- base::grepl
[13:23:42.867]                           restarts <- computeRestarts(cond)
[13:23:42.867]                           for (restart in restarts) {
[13:23:42.867]                             name <- restart$name
[13:23:42.867]                             if (is.null(name)) 
[13:23:42.867]                               next
[13:23:42.867]                             if (!grepl(pattern, name)) 
[13:23:42.867]                               next
[13:23:42.867]                             invokeRestart(restart)
[13:23:42.867]                             muffled <- TRUE
[13:23:42.867]                             break
[13:23:42.867]                           }
[13:23:42.867]                         }
[13:23:42.867]                       }
[13:23:42.867]                       invisible(muffled)
[13:23:42.867]                     }
[13:23:42.867]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.867]                   }
[13:23:42.867]                 }
[13:23:42.867]             }
[13:23:42.867]         }))
[13:23:42.867]     }, error = function(ex) {
[13:23:42.867]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:42.867]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.867]                 ...future.rng), started = ...future.startTime, 
[13:23:42.867]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:42.867]             version = "1.8"), class = "FutureResult")
[13:23:42.867]     }, finally = {
[13:23:42.867]         if (!identical(...future.workdir, getwd())) 
[13:23:42.867]             setwd(...future.workdir)
[13:23:42.867]         {
[13:23:42.867]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:42.867]                 ...future.oldOptions$nwarnings <- NULL
[13:23:42.867]             }
[13:23:42.867]             base::options(...future.oldOptions)
[13:23:42.867]             if (.Platform$OS.type == "windows") {
[13:23:42.867]                 old_names <- names(...future.oldEnvVars)
[13:23:42.867]                 envs <- base::Sys.getenv()
[13:23:42.867]                 names <- names(envs)
[13:23:42.867]                 common <- intersect(names, old_names)
[13:23:42.867]                 added <- setdiff(names, old_names)
[13:23:42.867]                 removed <- setdiff(old_names, names)
[13:23:42.867]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:42.867]                   envs[common]]
[13:23:42.867]                 NAMES <- toupper(changed)
[13:23:42.867]                 args <- list()
[13:23:42.867]                 for (kk in seq_along(NAMES)) {
[13:23:42.867]                   name <- changed[[kk]]
[13:23:42.867]                   NAME <- NAMES[[kk]]
[13:23:42.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.867]                     next
[13:23:42.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.867]                 }
[13:23:42.867]                 NAMES <- toupper(added)
[13:23:42.867]                 for (kk in seq_along(NAMES)) {
[13:23:42.867]                   name <- added[[kk]]
[13:23:42.867]                   NAME <- NAMES[[kk]]
[13:23:42.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.867]                     next
[13:23:42.867]                   args[[name]] <- ""
[13:23:42.867]                 }
[13:23:42.867]                 NAMES <- toupper(removed)
[13:23:42.867]                 for (kk in seq_along(NAMES)) {
[13:23:42.867]                   name <- removed[[kk]]
[13:23:42.867]                   NAME <- NAMES[[kk]]
[13:23:42.867]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.867]                     next
[13:23:42.867]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.867]                 }
[13:23:42.867]                 if (length(args) > 0) 
[13:23:42.867]                   base::do.call(base::Sys.setenv, args = args)
[13:23:42.867]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:42.867]             }
[13:23:42.867]             else {
[13:23:42.867]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:42.867]             }
[13:23:42.867]             {
[13:23:42.867]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:42.867]                   0L) {
[13:23:42.867]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:42.867]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:42.867]                   base::options(opts)
[13:23:42.867]                 }
[13:23:42.867]                 {
[13:23:42.867]                   {
[13:23:42.867]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:42.867]                     NULL
[13:23:42.867]                   }
[13:23:42.867]                   options(future.plan = NULL)
[13:23:42.867]                   if (is.na(NA_character_)) 
[13:23:42.867]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.867]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:42.867]                   future::plan(list(function (..., workers = 2L, 
[13:23:42.867]                     envir = parent.frame()) 
[13:23:42.867]                   strategy(..., workers = workers, envir = envir)), 
[13:23:42.867]                     .cleanup = FALSE, .init = FALSE)
[13:23:42.867]                 }
[13:23:42.867]             }
[13:23:42.867]         }
[13:23:42.867]     })
[13:23:42.867]     if (TRUE) {
[13:23:42.867]         base::sink(type = "output", split = FALSE)
[13:23:42.867]         if (TRUE) {
[13:23:42.867]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:42.867]         }
[13:23:42.867]         else {
[13:23:42.867]             ...future.result["stdout"] <- base::list(NULL)
[13:23:42.867]         }
[13:23:42.867]         base::close(...future.stdout)
[13:23:42.867]         ...future.stdout <- NULL
[13:23:42.867]     }
[13:23:42.867]     ...future.result$conditions <- ...future.conditions
[13:23:42.867]     ...future.result$finished <- base::Sys.time()
[13:23:42.867]     ...future.result
[13:23:42.867] }
[13:23:42.869] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[13:23:42.871] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[13:23:42.924] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[13:23:42.925] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[13:23:42.925] MultisessionFuture started
[13:23:42.925] - Launch lazy future ... done
[13:23:42.926] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[13:23:42.926] result() for ClusterFuture ...
[13:23:42.926] receiveMessageFromWorker() for ClusterFuture ...
[13:23:42.926] - Validating connection of MultisessionFuture
[13:23:42.970] - received message: FutureResult
[13:23:42.970] - Received FutureResult
[13:23:42.970] - Erased future from FutureRegistry
[13:23:42.970] result() for ClusterFuture ...
[13:23:42.971] - result already collected: FutureResult
[13:23:42.971] result() for ClusterFuture ... done
[13:23:42.971] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:42.971] result() for ClusterFuture ... done
[13:23:42.971] result() for ClusterFuture ...
[13:23:42.971] - result already collected: FutureResult
[13:23:42.971] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: bb98f2dc-1e36-3d61-5a41-f2a8fc08f775
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[13:23:42.971] getGlobalsAndPackages() ...
[13:23:42.972] Searching for globals...
[13:23:42.973] - globals found: [3] ‘{’, ‘$’, ‘f1’
[13:23:42.973] Searching for globals ... DONE
[13:23:42.973] Resolving globals: FALSE
[13:23:42.975] The total size of the 1 globals is 1.56 MiB (1634624 bytes)
[13:23:42.976] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:23:42.976] - globals: [1] ‘f1’
[13:23:42.976] 
[13:23:42.976] getGlobalsAndPackages() ... DONE
[13:23:42.976] run() for ‘Future’ ...
[13:23:42.976] - state: ‘created’
[13:23:42.976] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:42.988] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:42.988] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:42.989]   - Field: ‘node’
[13:23:42.989]   - Field: ‘label’
[13:23:42.989]   - Field: ‘local’
[13:23:42.989]   - Field: ‘owner’
[13:23:42.989]   - Field: ‘envir’
[13:23:42.989]   - Field: ‘workers’
[13:23:42.989]   - Field: ‘packages’
[13:23:42.989]   - Field: ‘gc’
[13:23:42.989]   - Field: ‘conditions’
[13:23:42.989]   - Field: ‘persistent’
[13:23:42.990]   - Field: ‘expr’
[13:23:42.990]   - Field: ‘uuid’
[13:23:42.990]   - Field: ‘seed’
[13:23:42.990]   - Field: ‘version’
[13:23:42.990]   - Field: ‘result’
[13:23:42.990]   - Field: ‘asynchronous’
[13:23:42.990]   - Field: ‘calls’
[13:23:42.990]   - Field: ‘globals’
[13:23:42.990]   - Field: ‘stdout’
[13:23:42.991]   - Field: ‘earlySignal’
[13:23:42.991]   - Field: ‘lazy’
[13:23:42.991]   - Field: ‘state’
[13:23:42.991] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:42.991] - Launch lazy future ...
[13:23:42.991] Packages needed by the future expression (n = 0): <none>
[13:23:42.991] Packages needed by future strategies (n = 0): <none>
[13:23:42.992] {
[13:23:42.992]     {
[13:23:42.992]         {
[13:23:42.992]             ...future.startTime <- base::Sys.time()
[13:23:42.992]             {
[13:23:42.992]                 {
[13:23:42.992]                   {
[13:23:42.992]                     {
[13:23:42.992]                       base::local({
[13:23:42.992]                         has_future <- base::requireNamespace("future", 
[13:23:42.992]                           quietly = TRUE)
[13:23:42.992]                         if (has_future) {
[13:23:42.992]                           ns <- base::getNamespace("future")
[13:23:42.992]                           version <- ns[[".package"]][["version"]]
[13:23:42.992]                           if (is.null(version)) 
[13:23:42.992]                             version <- utils::packageVersion("future")
[13:23:42.992]                         }
[13:23:42.992]                         else {
[13:23:42.992]                           version <- NULL
[13:23:42.992]                         }
[13:23:42.992]                         if (!has_future || version < "1.8.0") {
[13:23:42.992]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:42.992]                             "", base::R.version$version.string), 
[13:23:42.992]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:42.992]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:42.992]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:42.992]                               "release", "version")], collapse = " "), 
[13:23:42.992]                             hostname = base::Sys.info()[["nodename"]])
[13:23:42.992]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:42.992]                             info)
[13:23:42.992]                           info <- base::paste(info, collapse = "; ")
[13:23:42.992]                           if (!has_future) {
[13:23:42.992]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:42.992]                               info)
[13:23:42.992]                           }
[13:23:42.992]                           else {
[13:23:42.992]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:42.992]                               info, version)
[13:23:42.992]                           }
[13:23:42.992]                           base::stop(msg)
[13:23:42.992]                         }
[13:23:42.992]                       })
[13:23:42.992]                     }
[13:23:42.992]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:42.992]                     base::options(mc.cores = 1L)
[13:23:42.992]                   }
[13:23:42.992]                   options(future.plan = NULL)
[13:23:42.992]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.992]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:42.992]                 }
[13:23:42.992]                 ...future.workdir <- getwd()
[13:23:42.992]             }
[13:23:42.992]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:42.992]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:42.992]         }
[13:23:42.992]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:42.992]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:42.992]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:42.992]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:42.992]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:42.992]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:42.992]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:42.992]             base::names(...future.oldOptions))
[13:23:42.992]     }
[13:23:42.992]     if (FALSE) {
[13:23:42.992]     }
[13:23:42.992]     else {
[13:23:42.992]         if (TRUE) {
[13:23:42.992]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:42.992]                 open = "w")
[13:23:42.992]         }
[13:23:42.992]         else {
[13:23:42.992]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:42.992]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:42.992]         }
[13:23:42.992]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:42.992]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:42.992]             base::sink(type = "output", split = FALSE)
[13:23:42.992]             base::close(...future.stdout)
[13:23:42.992]         }, add = TRUE)
[13:23:42.992]     }
[13:23:42.992]     ...future.frame <- base::sys.nframe()
[13:23:42.992]     ...future.conditions <- base::list()
[13:23:42.992]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:42.992]     if (FALSE) {
[13:23:42.992]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:42.992]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:42.992]     }
[13:23:42.992]     ...future.result <- base::tryCatch({
[13:23:42.992]         base::withCallingHandlers({
[13:23:42.992]             ...future.value <- base::withVisible(base::local({
[13:23:42.992]                 ...future.makeSendCondition <- base::local({
[13:23:42.992]                   sendCondition <- NULL
[13:23:42.992]                   function(frame = 1L) {
[13:23:42.992]                     if (is.function(sendCondition)) 
[13:23:42.992]                       return(sendCondition)
[13:23:42.992]                     ns <- getNamespace("parallel")
[13:23:42.992]                     if (exists("sendData", mode = "function", 
[13:23:42.992]                       envir = ns)) {
[13:23:42.992]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:42.992]                         envir = ns)
[13:23:42.992]                       envir <- sys.frame(frame)
[13:23:42.992]                       master <- NULL
[13:23:42.992]                       while (!identical(envir, .GlobalEnv) && 
[13:23:42.992]                         !identical(envir, emptyenv())) {
[13:23:42.992]                         if (exists("master", mode = "list", envir = envir, 
[13:23:42.992]                           inherits = FALSE)) {
[13:23:42.992]                           master <- get("master", mode = "list", 
[13:23:42.992]                             envir = envir, inherits = FALSE)
[13:23:42.992]                           if (inherits(master, c("SOCKnode", 
[13:23:42.992]                             "SOCK0node"))) {
[13:23:42.992]                             sendCondition <<- function(cond) {
[13:23:42.992]                               data <- list(type = "VALUE", value = cond, 
[13:23:42.992]                                 success = TRUE)
[13:23:42.992]                               parallel_sendData(master, data)
[13:23:42.992]                             }
[13:23:42.992]                             return(sendCondition)
[13:23:42.992]                           }
[13:23:42.992]                         }
[13:23:42.992]                         frame <- frame + 1L
[13:23:42.992]                         envir <- sys.frame(frame)
[13:23:42.992]                       }
[13:23:42.992]                     }
[13:23:42.992]                     sendCondition <<- function(cond) NULL
[13:23:42.992]                   }
[13:23:42.992]                 })
[13:23:42.992]                 withCallingHandlers({
[13:23:42.992]                   {
[13:23:42.992]                     f1$owner
[13:23:42.992]                   }
[13:23:42.992]                 }, immediateCondition = function(cond) {
[13:23:42.992]                   sendCondition <- ...future.makeSendCondition()
[13:23:42.992]                   sendCondition(cond)
[13:23:42.992]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.992]                   {
[13:23:42.992]                     inherits <- base::inherits
[13:23:42.992]                     invokeRestart <- base::invokeRestart
[13:23:42.992]                     is.null <- base::is.null
[13:23:42.992]                     muffled <- FALSE
[13:23:42.992]                     if (inherits(cond, "message")) {
[13:23:42.992]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:42.992]                       if (muffled) 
[13:23:42.992]                         invokeRestart("muffleMessage")
[13:23:42.992]                     }
[13:23:42.992]                     else if (inherits(cond, "warning")) {
[13:23:42.992]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:42.992]                       if (muffled) 
[13:23:42.992]                         invokeRestart("muffleWarning")
[13:23:42.992]                     }
[13:23:42.992]                     else if (inherits(cond, "condition")) {
[13:23:42.992]                       if (!is.null(pattern)) {
[13:23:42.992]                         computeRestarts <- base::computeRestarts
[13:23:42.992]                         grepl <- base::grepl
[13:23:42.992]                         restarts <- computeRestarts(cond)
[13:23:42.992]                         for (restart in restarts) {
[13:23:42.992]                           name <- restart$name
[13:23:42.992]                           if (is.null(name)) 
[13:23:42.992]                             next
[13:23:42.992]                           if (!grepl(pattern, name)) 
[13:23:42.992]                             next
[13:23:42.992]                           invokeRestart(restart)
[13:23:42.992]                           muffled <- TRUE
[13:23:42.992]                           break
[13:23:42.992]                         }
[13:23:42.992]                       }
[13:23:42.992]                     }
[13:23:42.992]                     invisible(muffled)
[13:23:42.992]                   }
[13:23:42.992]                   muffleCondition(cond)
[13:23:42.992]                 })
[13:23:42.992]             }))
[13:23:42.992]             future::FutureResult(value = ...future.value$value, 
[13:23:42.992]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.992]                   ...future.rng), globalenv = if (FALSE) 
[13:23:42.992]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:42.992]                     ...future.globalenv.names))
[13:23:42.992]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:42.992]         }, condition = base::local({
[13:23:42.992]             c <- base::c
[13:23:42.992]             inherits <- base::inherits
[13:23:42.992]             invokeRestart <- base::invokeRestart
[13:23:42.992]             length <- base::length
[13:23:42.992]             list <- base::list
[13:23:42.992]             seq.int <- base::seq.int
[13:23:42.992]             signalCondition <- base::signalCondition
[13:23:42.992]             sys.calls <- base::sys.calls
[13:23:42.992]             `[[` <- base::`[[`
[13:23:42.992]             `+` <- base::`+`
[13:23:42.992]             `<<-` <- base::`<<-`
[13:23:42.992]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:42.992]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:42.992]                   3L)]
[13:23:42.992]             }
[13:23:42.992]             function(cond) {
[13:23:42.992]                 is_error <- inherits(cond, "error")
[13:23:42.992]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:42.992]                   NULL)
[13:23:42.992]                 if (is_error) {
[13:23:42.992]                   sessionInformation <- function() {
[13:23:42.992]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:42.992]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:42.992]                       search = base::search(), system = base::Sys.info())
[13:23:42.992]                   }
[13:23:42.992]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.992]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:42.992]                     cond$call), session = sessionInformation(), 
[13:23:42.992]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:42.992]                   signalCondition(cond)
[13:23:42.992]                 }
[13:23:42.992]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:42.992]                 "immediateCondition"))) {
[13:23:42.992]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:42.992]                   ...future.conditions[[length(...future.conditions) + 
[13:23:42.992]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:42.992]                   if (TRUE && !signal) {
[13:23:42.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.992]                     {
[13:23:42.992]                       inherits <- base::inherits
[13:23:42.992]                       invokeRestart <- base::invokeRestart
[13:23:42.992]                       is.null <- base::is.null
[13:23:42.992]                       muffled <- FALSE
[13:23:42.992]                       if (inherits(cond, "message")) {
[13:23:42.992]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.992]                         if (muffled) 
[13:23:42.992]                           invokeRestart("muffleMessage")
[13:23:42.992]                       }
[13:23:42.992]                       else if (inherits(cond, "warning")) {
[13:23:42.992]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.992]                         if (muffled) 
[13:23:42.992]                           invokeRestart("muffleWarning")
[13:23:42.992]                       }
[13:23:42.992]                       else if (inherits(cond, "condition")) {
[13:23:42.992]                         if (!is.null(pattern)) {
[13:23:42.992]                           computeRestarts <- base::computeRestarts
[13:23:42.992]                           grepl <- base::grepl
[13:23:42.992]                           restarts <- computeRestarts(cond)
[13:23:42.992]                           for (restart in restarts) {
[13:23:42.992]                             name <- restart$name
[13:23:42.992]                             if (is.null(name)) 
[13:23:42.992]                               next
[13:23:42.992]                             if (!grepl(pattern, name)) 
[13:23:42.992]                               next
[13:23:42.992]                             invokeRestart(restart)
[13:23:42.992]                             muffled <- TRUE
[13:23:42.992]                             break
[13:23:42.992]                           }
[13:23:42.992]                         }
[13:23:42.992]                       }
[13:23:42.992]                       invisible(muffled)
[13:23:42.992]                     }
[13:23:42.992]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.992]                   }
[13:23:42.992]                 }
[13:23:42.992]                 else {
[13:23:42.992]                   if (TRUE) {
[13:23:42.992]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:42.992]                     {
[13:23:42.992]                       inherits <- base::inherits
[13:23:42.992]                       invokeRestart <- base::invokeRestart
[13:23:42.992]                       is.null <- base::is.null
[13:23:42.992]                       muffled <- FALSE
[13:23:42.992]                       if (inherits(cond, "message")) {
[13:23:42.992]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:42.992]                         if (muffled) 
[13:23:42.992]                           invokeRestart("muffleMessage")
[13:23:42.992]                       }
[13:23:42.992]                       else if (inherits(cond, "warning")) {
[13:23:42.992]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:42.992]                         if (muffled) 
[13:23:42.992]                           invokeRestart("muffleWarning")
[13:23:42.992]                       }
[13:23:42.992]                       else if (inherits(cond, "condition")) {
[13:23:42.992]                         if (!is.null(pattern)) {
[13:23:42.992]                           computeRestarts <- base::computeRestarts
[13:23:42.992]                           grepl <- base::grepl
[13:23:42.992]                           restarts <- computeRestarts(cond)
[13:23:42.992]                           for (restart in restarts) {
[13:23:42.992]                             name <- restart$name
[13:23:42.992]                             if (is.null(name)) 
[13:23:42.992]                               next
[13:23:42.992]                             if (!grepl(pattern, name)) 
[13:23:42.992]                               next
[13:23:42.992]                             invokeRestart(restart)
[13:23:42.992]                             muffled <- TRUE
[13:23:42.992]                             break
[13:23:42.992]                           }
[13:23:42.992]                         }
[13:23:42.992]                       }
[13:23:42.992]                       invisible(muffled)
[13:23:42.992]                     }
[13:23:42.992]                     muffleCondition(cond, pattern = "^muffle")
[13:23:42.992]                   }
[13:23:42.992]                 }
[13:23:42.992]             }
[13:23:42.992]         }))
[13:23:42.992]     }, error = function(ex) {
[13:23:42.992]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:42.992]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:42.992]                 ...future.rng), started = ...future.startTime, 
[13:23:42.992]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:42.992]             version = "1.8"), class = "FutureResult")
[13:23:42.992]     }, finally = {
[13:23:42.992]         if (!identical(...future.workdir, getwd())) 
[13:23:42.992]             setwd(...future.workdir)
[13:23:42.992]         {
[13:23:42.992]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:42.992]                 ...future.oldOptions$nwarnings <- NULL
[13:23:42.992]             }
[13:23:42.992]             base::options(...future.oldOptions)
[13:23:42.992]             if (.Platform$OS.type == "windows") {
[13:23:42.992]                 old_names <- names(...future.oldEnvVars)
[13:23:42.992]                 envs <- base::Sys.getenv()
[13:23:42.992]                 names <- names(envs)
[13:23:42.992]                 common <- intersect(names, old_names)
[13:23:42.992]                 added <- setdiff(names, old_names)
[13:23:42.992]                 removed <- setdiff(old_names, names)
[13:23:42.992]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:42.992]                   envs[common]]
[13:23:42.992]                 NAMES <- toupper(changed)
[13:23:42.992]                 args <- list()
[13:23:42.992]                 for (kk in seq_along(NAMES)) {
[13:23:42.992]                   name <- changed[[kk]]
[13:23:42.992]                   NAME <- NAMES[[kk]]
[13:23:42.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.992]                     next
[13:23:42.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.992]                 }
[13:23:42.992]                 NAMES <- toupper(added)
[13:23:42.992]                 for (kk in seq_along(NAMES)) {
[13:23:42.992]                   name <- added[[kk]]
[13:23:42.992]                   NAME <- NAMES[[kk]]
[13:23:42.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.992]                     next
[13:23:42.992]                   args[[name]] <- ""
[13:23:42.992]                 }
[13:23:42.992]                 NAMES <- toupper(removed)
[13:23:42.992]                 for (kk in seq_along(NAMES)) {
[13:23:42.992]                   name <- removed[[kk]]
[13:23:42.992]                   NAME <- NAMES[[kk]]
[13:23:42.992]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:42.992]                     next
[13:23:42.992]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:42.992]                 }
[13:23:42.992]                 if (length(args) > 0) 
[13:23:42.992]                   base::do.call(base::Sys.setenv, args = args)
[13:23:42.992]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:42.992]             }
[13:23:42.992]             else {
[13:23:42.992]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:42.992]             }
[13:23:42.992]             {
[13:23:42.992]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:42.992]                   0L) {
[13:23:42.992]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:42.992]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:42.992]                   base::options(opts)
[13:23:42.992]                 }
[13:23:42.992]                 {
[13:23:42.992]                   {
[13:23:42.992]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:42.992]                     NULL
[13:23:42.992]                   }
[13:23:42.992]                   options(future.plan = NULL)
[13:23:42.992]                   if (is.na(NA_character_)) 
[13:23:42.992]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:42.992]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:42.992]                   future::plan(list(function (..., workers = 2L, 
[13:23:42.992]                     envir = parent.frame()) 
[13:23:42.992]                   strategy(..., workers = workers, envir = envir)), 
[13:23:42.992]                     .cleanup = FALSE, .init = FALSE)
[13:23:42.992]                 }
[13:23:42.992]             }
[13:23:42.992]         }
[13:23:42.992]     })
[13:23:42.992]     if (TRUE) {
[13:23:42.992]         base::sink(type = "output", split = FALSE)
[13:23:42.992]         if (TRUE) {
[13:23:42.992]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:42.992]         }
[13:23:42.992]         else {
[13:23:42.992]             ...future.result["stdout"] <- base::list(NULL)
[13:23:42.992]         }
[13:23:42.992]         base::close(...future.stdout)
[13:23:42.992]         ...future.stdout <- NULL
[13:23:42.992]     }
[13:23:42.992]     ...future.result$conditions <- ...future.conditions
[13:23:42.992]     ...future.result$finished <- base::Sys.time()
[13:23:42.992]     ...future.result
[13:23:42.992] }
[13:23:42.995] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[13:23:42.997] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[13:23:43.048] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[13:23:43.049] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[13:23:43.049] MultisessionFuture started
[13:23:43.049] - Launch lazy future ... done
[13:23:43.050] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[13:23:43.050] result() for ClusterFuture ...
[13:23:43.050] receiveMessageFromWorker() for ClusterFuture ...
[13:23:43.050] - Validating connection of MultisessionFuture
[13:23:43.094] - received message: FutureResult
[13:23:43.094] - Received FutureResult
[13:23:43.094] - Erased future from FutureRegistry
[13:23:43.095] result() for ClusterFuture ...
[13:23:43.095] - result already collected: FutureResult
[13:23:43.095] result() for ClusterFuture ... done
[13:23:43.095] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:43.095] result() for ClusterFuture ... done
[13:23:43.095] result() for ClusterFuture ...
[13:23:43.095] - result already collected: FutureResult
[13:23:43.095] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: bb98f2dc-1e36-3d61-5a41-f2a8fc08f775
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[13:23:43.096] getGlobalsAndPackages() ...
[13:23:43.096] Searching for globals...
[13:23:43.097] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[13:23:43.097] Searching for globals ... DONE
[13:23:43.098] Resolving globals: FALSE
[13:23:43.100] The total size of the 1 globals is 1.56 MiB (1637560 bytes)
[13:23:43.100] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 1.56 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.56 MiB of class ‘environment’)
[13:23:43.101] - globals: [1] ‘f1’
[13:23:43.101] 
[13:23:43.101] getGlobalsAndPackages() ... DONE
[13:23:43.101] run() for ‘Future’ ...
[13:23:43.101] - state: ‘created’
[13:23:43.101] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:43.112] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:43.112] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:43.112]   - Field: ‘node’
[13:23:43.112]   - Field: ‘label’
[13:23:43.112]   - Field: ‘local’
[13:23:43.113]   - Field: ‘owner’
[13:23:43.113]   - Field: ‘envir’
[13:23:43.113]   - Field: ‘workers’
[13:23:43.113]   - Field: ‘packages’
[13:23:43.113]   - Field: ‘gc’
[13:23:43.113]   - Field: ‘conditions’
[13:23:43.113]   - Field: ‘persistent’
[13:23:43.113]   - Field: ‘expr’
[13:23:43.113]   - Field: ‘uuid’
[13:23:43.113]   - Field: ‘seed’
[13:23:43.113]   - Field: ‘version’
[13:23:43.114]   - Field: ‘result’
[13:23:43.114]   - Field: ‘asynchronous’
[13:23:43.114]   - Field: ‘calls’
[13:23:43.114]   - Field: ‘globals’
[13:23:43.114]   - Field: ‘stdout’
[13:23:43.114]   - Field: ‘earlySignal’
[13:23:43.114]   - Field: ‘lazy’
[13:23:43.114]   - Field: ‘state’
[13:23:43.114] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:43.114] - Launch lazy future ...
[13:23:43.115] Packages needed by the future expression (n = 0): <none>
[13:23:43.115] Packages needed by future strategies (n = 0): <none>
[13:23:43.115] {
[13:23:43.115]     {
[13:23:43.115]         {
[13:23:43.115]             ...future.startTime <- base::Sys.time()
[13:23:43.115]             {
[13:23:43.115]                 {
[13:23:43.115]                   {
[13:23:43.115]                     {
[13:23:43.115]                       base::local({
[13:23:43.115]                         has_future <- base::requireNamespace("future", 
[13:23:43.115]                           quietly = TRUE)
[13:23:43.115]                         if (has_future) {
[13:23:43.115]                           ns <- base::getNamespace("future")
[13:23:43.115]                           version <- ns[[".package"]][["version"]]
[13:23:43.115]                           if (is.null(version)) 
[13:23:43.115]                             version <- utils::packageVersion("future")
[13:23:43.115]                         }
[13:23:43.115]                         else {
[13:23:43.115]                           version <- NULL
[13:23:43.115]                         }
[13:23:43.115]                         if (!has_future || version < "1.8.0") {
[13:23:43.115]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:43.115]                             "", base::R.version$version.string), 
[13:23:43.115]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:43.115]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:43.115]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:43.115]                               "release", "version")], collapse = " "), 
[13:23:43.115]                             hostname = base::Sys.info()[["nodename"]])
[13:23:43.115]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:43.115]                             info)
[13:23:43.115]                           info <- base::paste(info, collapse = "; ")
[13:23:43.115]                           if (!has_future) {
[13:23:43.115]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:43.115]                               info)
[13:23:43.115]                           }
[13:23:43.115]                           else {
[13:23:43.115]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:43.115]                               info, version)
[13:23:43.115]                           }
[13:23:43.115]                           base::stop(msg)
[13:23:43.115]                         }
[13:23:43.115]                       })
[13:23:43.115]                     }
[13:23:43.115]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:43.115]                     base::options(mc.cores = 1L)
[13:23:43.115]                   }
[13:23:43.115]                   options(future.plan = NULL)
[13:23:43.115]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.115]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:43.115]                 }
[13:23:43.115]                 ...future.workdir <- getwd()
[13:23:43.115]             }
[13:23:43.115]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:43.115]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:43.115]         }
[13:23:43.115]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:43.115]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:43.115]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:43.115]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:43.115]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:43.115]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:43.115]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:43.115]             base::names(...future.oldOptions))
[13:23:43.115]     }
[13:23:43.115]     if (FALSE) {
[13:23:43.115]     }
[13:23:43.115]     else {
[13:23:43.115]         if (TRUE) {
[13:23:43.115]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:43.115]                 open = "w")
[13:23:43.115]         }
[13:23:43.115]         else {
[13:23:43.115]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:43.115]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:43.115]         }
[13:23:43.115]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:43.115]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:43.115]             base::sink(type = "output", split = FALSE)
[13:23:43.115]             base::close(...future.stdout)
[13:23:43.115]         }, add = TRUE)
[13:23:43.115]     }
[13:23:43.115]     ...future.frame <- base::sys.nframe()
[13:23:43.115]     ...future.conditions <- base::list()
[13:23:43.115]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:43.115]     if (FALSE) {
[13:23:43.115]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:43.115]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:43.115]     }
[13:23:43.115]     ...future.result <- base::tryCatch({
[13:23:43.115]         base::withCallingHandlers({
[13:23:43.115]             ...future.value <- base::withVisible(base::local({
[13:23:43.115]                 ...future.makeSendCondition <- base::local({
[13:23:43.115]                   sendCondition <- NULL
[13:23:43.115]                   function(frame = 1L) {
[13:23:43.115]                     if (is.function(sendCondition)) 
[13:23:43.115]                       return(sendCondition)
[13:23:43.115]                     ns <- getNamespace("parallel")
[13:23:43.115]                     if (exists("sendData", mode = "function", 
[13:23:43.115]                       envir = ns)) {
[13:23:43.115]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:43.115]                         envir = ns)
[13:23:43.115]                       envir <- sys.frame(frame)
[13:23:43.115]                       master <- NULL
[13:23:43.115]                       while (!identical(envir, .GlobalEnv) && 
[13:23:43.115]                         !identical(envir, emptyenv())) {
[13:23:43.115]                         if (exists("master", mode = "list", envir = envir, 
[13:23:43.115]                           inherits = FALSE)) {
[13:23:43.115]                           master <- get("master", mode = "list", 
[13:23:43.115]                             envir = envir, inherits = FALSE)
[13:23:43.115]                           if (inherits(master, c("SOCKnode", 
[13:23:43.115]                             "SOCK0node"))) {
[13:23:43.115]                             sendCondition <<- function(cond) {
[13:23:43.115]                               data <- list(type = "VALUE", value = cond, 
[13:23:43.115]                                 success = TRUE)
[13:23:43.115]                               parallel_sendData(master, data)
[13:23:43.115]                             }
[13:23:43.115]                             return(sendCondition)
[13:23:43.115]                           }
[13:23:43.115]                         }
[13:23:43.115]                         frame <- frame + 1L
[13:23:43.115]                         envir <- sys.frame(frame)
[13:23:43.115]                       }
[13:23:43.115]                     }
[13:23:43.115]                     sendCondition <<- function(cond) NULL
[13:23:43.115]                   }
[13:23:43.115]                 })
[13:23:43.115]                 withCallingHandlers({
[13:23:43.115]                   {
[13:23:43.115]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[13:23:43.115]                     "not-owner"
[13:23:43.115]                   }
[13:23:43.115]                 }, immediateCondition = function(cond) {
[13:23:43.115]                   sendCondition <- ...future.makeSendCondition()
[13:23:43.115]                   sendCondition(cond)
[13:23:43.115]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.115]                   {
[13:23:43.115]                     inherits <- base::inherits
[13:23:43.115]                     invokeRestart <- base::invokeRestart
[13:23:43.115]                     is.null <- base::is.null
[13:23:43.115]                     muffled <- FALSE
[13:23:43.115]                     if (inherits(cond, "message")) {
[13:23:43.115]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:43.115]                       if (muffled) 
[13:23:43.115]                         invokeRestart("muffleMessage")
[13:23:43.115]                     }
[13:23:43.115]                     else if (inherits(cond, "warning")) {
[13:23:43.115]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:43.115]                       if (muffled) 
[13:23:43.115]                         invokeRestart("muffleWarning")
[13:23:43.115]                     }
[13:23:43.115]                     else if (inherits(cond, "condition")) {
[13:23:43.115]                       if (!is.null(pattern)) {
[13:23:43.115]                         computeRestarts <- base::computeRestarts
[13:23:43.115]                         grepl <- base::grepl
[13:23:43.115]                         restarts <- computeRestarts(cond)
[13:23:43.115]                         for (restart in restarts) {
[13:23:43.115]                           name <- restart$name
[13:23:43.115]                           if (is.null(name)) 
[13:23:43.115]                             next
[13:23:43.115]                           if (!grepl(pattern, name)) 
[13:23:43.115]                             next
[13:23:43.115]                           invokeRestart(restart)
[13:23:43.115]                           muffled <- TRUE
[13:23:43.115]                           break
[13:23:43.115]                         }
[13:23:43.115]                       }
[13:23:43.115]                     }
[13:23:43.115]                     invisible(muffled)
[13:23:43.115]                   }
[13:23:43.115]                   muffleCondition(cond)
[13:23:43.115]                 })
[13:23:43.115]             }))
[13:23:43.115]             future::FutureResult(value = ...future.value$value, 
[13:23:43.115]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.115]                   ...future.rng), globalenv = if (FALSE) 
[13:23:43.115]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:43.115]                     ...future.globalenv.names))
[13:23:43.115]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:43.115]         }, condition = base::local({
[13:23:43.115]             c <- base::c
[13:23:43.115]             inherits <- base::inherits
[13:23:43.115]             invokeRestart <- base::invokeRestart
[13:23:43.115]             length <- base::length
[13:23:43.115]             list <- base::list
[13:23:43.115]             seq.int <- base::seq.int
[13:23:43.115]             signalCondition <- base::signalCondition
[13:23:43.115]             sys.calls <- base::sys.calls
[13:23:43.115]             `[[` <- base::`[[`
[13:23:43.115]             `+` <- base::`+`
[13:23:43.115]             `<<-` <- base::`<<-`
[13:23:43.115]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:43.115]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:43.115]                   3L)]
[13:23:43.115]             }
[13:23:43.115]             function(cond) {
[13:23:43.115]                 is_error <- inherits(cond, "error")
[13:23:43.115]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:43.115]                   NULL)
[13:23:43.115]                 if (is_error) {
[13:23:43.115]                   sessionInformation <- function() {
[13:23:43.115]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:43.115]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:43.115]                       search = base::search(), system = base::Sys.info())
[13:23:43.115]                   }
[13:23:43.115]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.115]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:43.115]                     cond$call), session = sessionInformation(), 
[13:23:43.115]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:43.115]                   signalCondition(cond)
[13:23:43.115]                 }
[13:23:43.115]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:43.115]                 "immediateCondition"))) {
[13:23:43.115]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:43.115]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.115]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:43.115]                   if (TRUE && !signal) {
[13:23:43.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.115]                     {
[13:23:43.115]                       inherits <- base::inherits
[13:23:43.115]                       invokeRestart <- base::invokeRestart
[13:23:43.115]                       is.null <- base::is.null
[13:23:43.115]                       muffled <- FALSE
[13:23:43.115]                       if (inherits(cond, "message")) {
[13:23:43.115]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.115]                         if (muffled) 
[13:23:43.115]                           invokeRestart("muffleMessage")
[13:23:43.115]                       }
[13:23:43.115]                       else if (inherits(cond, "warning")) {
[13:23:43.115]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.115]                         if (muffled) 
[13:23:43.115]                           invokeRestart("muffleWarning")
[13:23:43.115]                       }
[13:23:43.115]                       else if (inherits(cond, "condition")) {
[13:23:43.115]                         if (!is.null(pattern)) {
[13:23:43.115]                           computeRestarts <- base::computeRestarts
[13:23:43.115]                           grepl <- base::grepl
[13:23:43.115]                           restarts <- computeRestarts(cond)
[13:23:43.115]                           for (restart in restarts) {
[13:23:43.115]                             name <- restart$name
[13:23:43.115]                             if (is.null(name)) 
[13:23:43.115]                               next
[13:23:43.115]                             if (!grepl(pattern, name)) 
[13:23:43.115]                               next
[13:23:43.115]                             invokeRestart(restart)
[13:23:43.115]                             muffled <- TRUE
[13:23:43.115]                             break
[13:23:43.115]                           }
[13:23:43.115]                         }
[13:23:43.115]                       }
[13:23:43.115]                       invisible(muffled)
[13:23:43.115]                     }
[13:23:43.115]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.115]                   }
[13:23:43.115]                 }
[13:23:43.115]                 else {
[13:23:43.115]                   if (TRUE) {
[13:23:43.115]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.115]                     {
[13:23:43.115]                       inherits <- base::inherits
[13:23:43.115]                       invokeRestart <- base::invokeRestart
[13:23:43.115]                       is.null <- base::is.null
[13:23:43.115]                       muffled <- FALSE
[13:23:43.115]                       if (inherits(cond, "message")) {
[13:23:43.115]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.115]                         if (muffled) 
[13:23:43.115]                           invokeRestart("muffleMessage")
[13:23:43.115]                       }
[13:23:43.115]                       else if (inherits(cond, "warning")) {
[13:23:43.115]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.115]                         if (muffled) 
[13:23:43.115]                           invokeRestart("muffleWarning")
[13:23:43.115]                       }
[13:23:43.115]                       else if (inherits(cond, "condition")) {
[13:23:43.115]                         if (!is.null(pattern)) {
[13:23:43.115]                           computeRestarts <- base::computeRestarts
[13:23:43.115]                           grepl <- base::grepl
[13:23:43.115]                           restarts <- computeRestarts(cond)
[13:23:43.115]                           for (restart in restarts) {
[13:23:43.115]                             name <- restart$name
[13:23:43.115]                             if (is.null(name)) 
[13:23:43.115]                               next
[13:23:43.115]                             if (!grepl(pattern, name)) 
[13:23:43.115]                               next
[13:23:43.115]                             invokeRestart(restart)
[13:23:43.115]                             muffled <- TRUE
[13:23:43.115]                             break
[13:23:43.115]                           }
[13:23:43.115]                         }
[13:23:43.115]                       }
[13:23:43.115]                       invisible(muffled)
[13:23:43.115]                     }
[13:23:43.115]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.115]                   }
[13:23:43.115]                 }
[13:23:43.115]             }
[13:23:43.115]         }))
[13:23:43.115]     }, error = function(ex) {
[13:23:43.115]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:43.115]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.115]                 ...future.rng), started = ...future.startTime, 
[13:23:43.115]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:43.115]             version = "1.8"), class = "FutureResult")
[13:23:43.115]     }, finally = {
[13:23:43.115]         if (!identical(...future.workdir, getwd())) 
[13:23:43.115]             setwd(...future.workdir)
[13:23:43.115]         {
[13:23:43.115]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:43.115]                 ...future.oldOptions$nwarnings <- NULL
[13:23:43.115]             }
[13:23:43.115]             base::options(...future.oldOptions)
[13:23:43.115]             if (.Platform$OS.type == "windows") {
[13:23:43.115]                 old_names <- names(...future.oldEnvVars)
[13:23:43.115]                 envs <- base::Sys.getenv()
[13:23:43.115]                 names <- names(envs)
[13:23:43.115]                 common <- intersect(names, old_names)
[13:23:43.115]                 added <- setdiff(names, old_names)
[13:23:43.115]                 removed <- setdiff(old_names, names)
[13:23:43.115]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:43.115]                   envs[common]]
[13:23:43.115]                 NAMES <- toupper(changed)
[13:23:43.115]                 args <- list()
[13:23:43.115]                 for (kk in seq_along(NAMES)) {
[13:23:43.115]                   name <- changed[[kk]]
[13:23:43.115]                   NAME <- NAMES[[kk]]
[13:23:43.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.115]                     next
[13:23:43.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.115]                 }
[13:23:43.115]                 NAMES <- toupper(added)
[13:23:43.115]                 for (kk in seq_along(NAMES)) {
[13:23:43.115]                   name <- added[[kk]]
[13:23:43.115]                   NAME <- NAMES[[kk]]
[13:23:43.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.115]                     next
[13:23:43.115]                   args[[name]] <- ""
[13:23:43.115]                 }
[13:23:43.115]                 NAMES <- toupper(removed)
[13:23:43.115]                 for (kk in seq_along(NAMES)) {
[13:23:43.115]                   name <- removed[[kk]]
[13:23:43.115]                   NAME <- NAMES[[kk]]
[13:23:43.115]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.115]                     next
[13:23:43.115]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.115]                 }
[13:23:43.115]                 if (length(args) > 0) 
[13:23:43.115]                   base::do.call(base::Sys.setenv, args = args)
[13:23:43.115]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:43.115]             }
[13:23:43.115]             else {
[13:23:43.115]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:43.115]             }
[13:23:43.115]             {
[13:23:43.115]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:43.115]                   0L) {
[13:23:43.115]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:43.115]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:43.115]                   base::options(opts)
[13:23:43.115]                 }
[13:23:43.115]                 {
[13:23:43.115]                   {
[13:23:43.115]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:43.115]                     NULL
[13:23:43.115]                   }
[13:23:43.115]                   options(future.plan = NULL)
[13:23:43.115]                   if (is.na(NA_character_)) 
[13:23:43.115]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.115]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:43.115]                   future::plan(list(function (..., workers = 2L, 
[13:23:43.115]                     envir = parent.frame()) 
[13:23:43.115]                   strategy(..., workers = workers, envir = envir)), 
[13:23:43.115]                     .cleanup = FALSE, .init = FALSE)
[13:23:43.115]                 }
[13:23:43.115]             }
[13:23:43.115]         }
[13:23:43.115]     })
[13:23:43.115]     if (TRUE) {
[13:23:43.115]         base::sink(type = "output", split = FALSE)
[13:23:43.115]         if (TRUE) {
[13:23:43.115]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:43.115]         }
[13:23:43.115]         else {
[13:23:43.115]             ...future.result["stdout"] <- base::list(NULL)
[13:23:43.115]         }
[13:23:43.115]         base::close(...future.stdout)
[13:23:43.115]         ...future.stdout <- NULL
[13:23:43.115]     }
[13:23:43.115]     ...future.result$conditions <- ...future.conditions
[13:23:43.115]     ...future.result$finished <- base::Sys.time()
[13:23:43.115]     ...future.result
[13:23:43.115] }
[13:23:43.118] Exporting 1 global objects (1.56 MiB) to cluster node #1 ...
[13:23:43.123] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ...
[13:23:43.176] Exporting ‘f1’ (1.56 MiB) to cluster node #1 ... DONE
[13:23:43.177] Exporting 1 global objects (1.56 MiB) to cluster node #1 ... DONE
[13:23:43.177] MultisessionFuture started
[13:23:43.177] - Launch lazy future ... done
[13:23:43.178] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[13:23:43.178] result() for ClusterFuture ...
[13:23:43.178] receiveMessageFromWorker() for ClusterFuture ...
[13:23:43.178] - Validating connection of MultisessionFuture
[13:23:43.222] - received message: FutureResult
[13:23:43.222] - Received FutureResult
[13:23:43.222] - Erased future from FutureRegistry
[13:23:43.222] result() for ClusterFuture ...
[13:23:43.222] - result already collected: FutureResult
[13:23:43.223] result() for ClusterFuture ... done
[13:23:43.223] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:43.223] result() for ClusterFuture ... done
[13:23:43.223] result() for ClusterFuture ...
[13:23:43.223] - result already collected: FutureResult
[13:23:43.223] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[13:23:43.223] getGlobalsAndPackages() ...
[13:23:43.224] Searching for globals...
[13:23:43.224] - globals found: [1] ‘{’
[13:23:43.224] Searching for globals ... DONE
[13:23:43.225] Resolving globals: FALSE
[13:23:43.225] 
[13:23:43.225] 
[13:23:43.225] getGlobalsAndPackages() ... DONE
[13:23:43.225] run() for ‘Future’ ...
[13:23:43.225] - state: ‘created’
[13:23:43.226] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:43.236] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:43.236] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:43.236]   - Field: ‘node’
[13:23:43.236]   - Field: ‘label’
[13:23:43.237]   - Field: ‘local’
[13:23:43.237]   - Field: ‘owner’
[13:23:43.237]   - Field: ‘envir’
[13:23:43.237]   - Field: ‘workers’
[13:23:43.237]   - Field: ‘packages’
[13:23:43.237]   - Field: ‘gc’
[13:23:43.237]   - Field: ‘conditions’
[13:23:43.237]   - Field: ‘persistent’
[13:23:43.237]   - Field: ‘expr’
[13:23:43.237]   - Field: ‘uuid’
[13:23:43.237]   - Field: ‘seed’
[13:23:43.238]   - Field: ‘version’
[13:23:43.238]   - Field: ‘result’
[13:23:43.238]   - Field: ‘asynchronous’
[13:23:43.238]   - Field: ‘calls’
[13:23:43.238]   - Field: ‘globals’
[13:23:43.238]   - Field: ‘stdout’
[13:23:43.238]   - Field: ‘earlySignal’
[13:23:43.238]   - Field: ‘lazy’
[13:23:43.238]   - Field: ‘state’
[13:23:43.238] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:43.238] - Launch lazy future ...
[13:23:43.239] Packages needed by the future expression (n = 0): <none>
[13:23:43.239] Packages needed by future strategies (n = 0): <none>
[13:23:43.239] {
[13:23:43.239]     {
[13:23:43.239]         {
[13:23:43.239]             ...future.startTime <- base::Sys.time()
[13:23:43.239]             {
[13:23:43.239]                 {
[13:23:43.239]                   {
[13:23:43.239]                     {
[13:23:43.239]                       base::local({
[13:23:43.239]                         has_future <- base::requireNamespace("future", 
[13:23:43.239]                           quietly = TRUE)
[13:23:43.239]                         if (has_future) {
[13:23:43.239]                           ns <- base::getNamespace("future")
[13:23:43.239]                           version <- ns[[".package"]][["version"]]
[13:23:43.239]                           if (is.null(version)) 
[13:23:43.239]                             version <- utils::packageVersion("future")
[13:23:43.239]                         }
[13:23:43.239]                         else {
[13:23:43.239]                           version <- NULL
[13:23:43.239]                         }
[13:23:43.239]                         if (!has_future || version < "1.8.0") {
[13:23:43.239]                           info <- base::c(r_version = base::gsub("R version ", 
[13:23:43.239]                             "", base::R.version$version.string), 
[13:23:43.239]                             platform = base::sprintf("%s (%s-bit)", 
[13:23:43.239]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:23:43.239]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:43.239]                               "release", "version")], collapse = " "), 
[13:23:43.239]                             hostname = base::Sys.info()[["nodename"]])
[13:23:43.239]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:23:43.239]                             info)
[13:23:43.239]                           info <- base::paste(info, collapse = "; ")
[13:23:43.239]                           if (!has_future) {
[13:23:43.239]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:43.239]                               info)
[13:23:43.239]                           }
[13:23:43.239]                           else {
[13:23:43.239]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:43.239]                               info, version)
[13:23:43.239]                           }
[13:23:43.239]                           base::stop(msg)
[13:23:43.239]                         }
[13:23:43.239]                       })
[13:23:43.239]                     }
[13:23:43.239]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:43.239]                     base::options(mc.cores = 1L)
[13:23:43.239]                   }
[13:23:43.239]                   options(future.plan = NULL)
[13:23:43.239]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.239]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:43.239]                 }
[13:23:43.239]                 ...future.workdir <- getwd()
[13:23:43.239]             }
[13:23:43.239]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:43.239]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:43.239]         }
[13:23:43.239]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:43.239]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:43.239]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:43.239]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:43.239]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:43.239]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:43.239]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:43.239]             base::names(...future.oldOptions))
[13:23:43.239]     }
[13:23:43.239]     if (FALSE) {
[13:23:43.239]     }
[13:23:43.239]     else {
[13:23:43.239]         if (TRUE) {
[13:23:43.239]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:43.239]                 open = "w")
[13:23:43.239]         }
[13:23:43.239]         else {
[13:23:43.239]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:43.239]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:43.239]         }
[13:23:43.239]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:43.239]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:43.239]             base::sink(type = "output", split = FALSE)
[13:23:43.239]             base::close(...future.stdout)
[13:23:43.239]         }, add = TRUE)
[13:23:43.239]     }
[13:23:43.239]     ...future.frame <- base::sys.nframe()
[13:23:43.239]     ...future.conditions <- base::list()
[13:23:43.239]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:43.239]     if (FALSE) {
[13:23:43.239]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:43.239]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:43.239]     }
[13:23:43.239]     ...future.result <- base::tryCatch({
[13:23:43.239]         base::withCallingHandlers({
[13:23:43.239]             ...future.value <- base::withVisible(base::local({
[13:23:43.239]                 ...future.makeSendCondition <- base::local({
[13:23:43.239]                   sendCondition <- NULL
[13:23:43.239]                   function(frame = 1L) {
[13:23:43.239]                     if (is.function(sendCondition)) 
[13:23:43.239]                       return(sendCondition)
[13:23:43.239]                     ns <- getNamespace("parallel")
[13:23:43.239]                     if (exists("sendData", mode = "function", 
[13:23:43.239]                       envir = ns)) {
[13:23:43.239]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:43.239]                         envir = ns)
[13:23:43.239]                       envir <- sys.frame(frame)
[13:23:43.239]                       master <- NULL
[13:23:43.239]                       while (!identical(envir, .GlobalEnv) && 
[13:23:43.239]                         !identical(envir, emptyenv())) {
[13:23:43.239]                         if (exists("master", mode = "list", envir = envir, 
[13:23:43.239]                           inherits = FALSE)) {
[13:23:43.239]                           master <- get("master", mode = "list", 
[13:23:43.239]                             envir = envir, inherits = FALSE)
[13:23:43.239]                           if (inherits(master, c("SOCKnode", 
[13:23:43.239]                             "SOCK0node"))) {
[13:23:43.239]                             sendCondition <<- function(cond) {
[13:23:43.239]                               data <- list(type = "VALUE", value = cond, 
[13:23:43.239]                                 success = TRUE)
[13:23:43.239]                               parallel_sendData(master, data)
[13:23:43.239]                             }
[13:23:43.239]                             return(sendCondition)
[13:23:43.239]                           }
[13:23:43.239]                         }
[13:23:43.239]                         frame <- frame + 1L
[13:23:43.239]                         envir <- sys.frame(frame)
[13:23:43.239]                       }
[13:23:43.239]                     }
[13:23:43.239]                     sendCondition <<- function(cond) NULL
[13:23:43.239]                   }
[13:23:43.239]                 })
[13:23:43.239]                 withCallingHandlers({
[13:23:43.239]                   {
[13:23:43.239]                     42L
[13:23:43.239]                   }
[13:23:43.239]                 }, immediateCondition = function(cond) {
[13:23:43.239]                   sendCondition <- ...future.makeSendCondition()
[13:23:43.239]                   sendCondition(cond)
[13:23:43.239]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.239]                   {
[13:23:43.239]                     inherits <- base::inherits
[13:23:43.239]                     invokeRestart <- base::invokeRestart
[13:23:43.239]                     is.null <- base::is.null
[13:23:43.239]                     muffled <- FALSE
[13:23:43.239]                     if (inherits(cond, "message")) {
[13:23:43.239]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:43.239]                       if (muffled) 
[13:23:43.239]                         invokeRestart("muffleMessage")
[13:23:43.239]                     }
[13:23:43.239]                     else if (inherits(cond, "warning")) {
[13:23:43.239]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:43.239]                       if (muffled) 
[13:23:43.239]                         invokeRestart("muffleWarning")
[13:23:43.239]                     }
[13:23:43.239]                     else if (inherits(cond, "condition")) {
[13:23:43.239]                       if (!is.null(pattern)) {
[13:23:43.239]                         computeRestarts <- base::computeRestarts
[13:23:43.239]                         grepl <- base::grepl
[13:23:43.239]                         restarts <- computeRestarts(cond)
[13:23:43.239]                         for (restart in restarts) {
[13:23:43.239]                           name <- restart$name
[13:23:43.239]                           if (is.null(name)) 
[13:23:43.239]                             next
[13:23:43.239]                           if (!grepl(pattern, name)) 
[13:23:43.239]                             next
[13:23:43.239]                           invokeRestart(restart)
[13:23:43.239]                           muffled <- TRUE
[13:23:43.239]                           break
[13:23:43.239]                         }
[13:23:43.239]                       }
[13:23:43.239]                     }
[13:23:43.239]                     invisible(muffled)
[13:23:43.239]                   }
[13:23:43.239]                   muffleCondition(cond)
[13:23:43.239]                 })
[13:23:43.239]             }))
[13:23:43.239]             future::FutureResult(value = ...future.value$value, 
[13:23:43.239]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.239]                   ...future.rng), globalenv = if (FALSE) 
[13:23:43.239]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:43.239]                     ...future.globalenv.names))
[13:23:43.239]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:43.239]         }, condition = base::local({
[13:23:43.239]             c <- base::c
[13:23:43.239]             inherits <- base::inherits
[13:23:43.239]             invokeRestart <- base::invokeRestart
[13:23:43.239]             length <- base::length
[13:23:43.239]             list <- base::list
[13:23:43.239]             seq.int <- base::seq.int
[13:23:43.239]             signalCondition <- base::signalCondition
[13:23:43.239]             sys.calls <- base::sys.calls
[13:23:43.239]             `[[` <- base::`[[`
[13:23:43.239]             `+` <- base::`+`
[13:23:43.239]             `<<-` <- base::`<<-`
[13:23:43.239]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:43.239]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:43.239]                   3L)]
[13:23:43.239]             }
[13:23:43.239]             function(cond) {
[13:23:43.239]                 is_error <- inherits(cond, "error")
[13:23:43.239]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:43.239]                   NULL)
[13:23:43.239]                 if (is_error) {
[13:23:43.239]                   sessionInformation <- function() {
[13:23:43.239]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:43.239]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:43.239]                       search = base::search(), system = base::Sys.info())
[13:23:43.239]                   }
[13:23:43.239]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.239]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:43.239]                     cond$call), session = sessionInformation(), 
[13:23:43.239]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:43.239]                   signalCondition(cond)
[13:23:43.239]                 }
[13:23:43.239]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:43.239]                 "immediateCondition"))) {
[13:23:43.239]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:43.239]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.239]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:43.239]                   if (TRUE && !signal) {
[13:23:43.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.239]                     {
[13:23:43.239]                       inherits <- base::inherits
[13:23:43.239]                       invokeRestart <- base::invokeRestart
[13:23:43.239]                       is.null <- base::is.null
[13:23:43.239]                       muffled <- FALSE
[13:23:43.239]                       if (inherits(cond, "message")) {
[13:23:43.239]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.239]                         if (muffled) 
[13:23:43.239]                           invokeRestart("muffleMessage")
[13:23:43.239]                       }
[13:23:43.239]                       else if (inherits(cond, "warning")) {
[13:23:43.239]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.239]                         if (muffled) 
[13:23:43.239]                           invokeRestart("muffleWarning")
[13:23:43.239]                       }
[13:23:43.239]                       else if (inherits(cond, "condition")) {
[13:23:43.239]                         if (!is.null(pattern)) {
[13:23:43.239]                           computeRestarts <- base::computeRestarts
[13:23:43.239]                           grepl <- base::grepl
[13:23:43.239]                           restarts <- computeRestarts(cond)
[13:23:43.239]                           for (restart in restarts) {
[13:23:43.239]                             name <- restart$name
[13:23:43.239]                             if (is.null(name)) 
[13:23:43.239]                               next
[13:23:43.239]                             if (!grepl(pattern, name)) 
[13:23:43.239]                               next
[13:23:43.239]                             invokeRestart(restart)
[13:23:43.239]                             muffled <- TRUE
[13:23:43.239]                             break
[13:23:43.239]                           }
[13:23:43.239]                         }
[13:23:43.239]                       }
[13:23:43.239]                       invisible(muffled)
[13:23:43.239]                     }
[13:23:43.239]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.239]                   }
[13:23:43.239]                 }
[13:23:43.239]                 else {
[13:23:43.239]                   if (TRUE) {
[13:23:43.239]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.239]                     {
[13:23:43.239]                       inherits <- base::inherits
[13:23:43.239]                       invokeRestart <- base::invokeRestart
[13:23:43.239]                       is.null <- base::is.null
[13:23:43.239]                       muffled <- FALSE
[13:23:43.239]                       if (inherits(cond, "message")) {
[13:23:43.239]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.239]                         if (muffled) 
[13:23:43.239]                           invokeRestart("muffleMessage")
[13:23:43.239]                       }
[13:23:43.239]                       else if (inherits(cond, "warning")) {
[13:23:43.239]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.239]                         if (muffled) 
[13:23:43.239]                           invokeRestart("muffleWarning")
[13:23:43.239]                       }
[13:23:43.239]                       else if (inherits(cond, "condition")) {
[13:23:43.239]                         if (!is.null(pattern)) {
[13:23:43.239]                           computeRestarts <- base::computeRestarts
[13:23:43.239]                           grepl <- base::grepl
[13:23:43.239]                           restarts <- computeRestarts(cond)
[13:23:43.239]                           for (restart in restarts) {
[13:23:43.239]                             name <- restart$name
[13:23:43.239]                             if (is.null(name)) 
[13:23:43.239]                               next
[13:23:43.239]                             if (!grepl(pattern, name)) 
[13:23:43.239]                               next
[13:23:43.239]                             invokeRestart(restart)
[13:23:43.239]                             muffled <- TRUE
[13:23:43.239]                             break
[13:23:43.239]                           }
[13:23:43.239]                         }
[13:23:43.239]                       }
[13:23:43.239]                       invisible(muffled)
[13:23:43.239]                     }
[13:23:43.239]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.239]                   }
[13:23:43.239]                 }
[13:23:43.239]             }
[13:23:43.239]         }))
[13:23:43.239]     }, error = function(ex) {
[13:23:43.239]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:43.239]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.239]                 ...future.rng), started = ...future.startTime, 
[13:23:43.239]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:43.239]             version = "1.8"), class = "FutureResult")
[13:23:43.239]     }, finally = {
[13:23:43.239]         if (!identical(...future.workdir, getwd())) 
[13:23:43.239]             setwd(...future.workdir)
[13:23:43.239]         {
[13:23:43.239]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:43.239]                 ...future.oldOptions$nwarnings <- NULL
[13:23:43.239]             }
[13:23:43.239]             base::options(...future.oldOptions)
[13:23:43.239]             if (.Platform$OS.type == "windows") {
[13:23:43.239]                 old_names <- names(...future.oldEnvVars)
[13:23:43.239]                 envs <- base::Sys.getenv()
[13:23:43.239]                 names <- names(envs)
[13:23:43.239]                 common <- intersect(names, old_names)
[13:23:43.239]                 added <- setdiff(names, old_names)
[13:23:43.239]                 removed <- setdiff(old_names, names)
[13:23:43.239]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:43.239]                   envs[common]]
[13:23:43.239]                 NAMES <- toupper(changed)
[13:23:43.239]                 args <- list()
[13:23:43.239]                 for (kk in seq_along(NAMES)) {
[13:23:43.239]                   name <- changed[[kk]]
[13:23:43.239]                   NAME <- NAMES[[kk]]
[13:23:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.239]                     next
[13:23:43.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.239]                 }
[13:23:43.239]                 NAMES <- toupper(added)
[13:23:43.239]                 for (kk in seq_along(NAMES)) {
[13:23:43.239]                   name <- added[[kk]]
[13:23:43.239]                   NAME <- NAMES[[kk]]
[13:23:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.239]                     next
[13:23:43.239]                   args[[name]] <- ""
[13:23:43.239]                 }
[13:23:43.239]                 NAMES <- toupper(removed)
[13:23:43.239]                 for (kk in seq_along(NAMES)) {
[13:23:43.239]                   name <- removed[[kk]]
[13:23:43.239]                   NAME <- NAMES[[kk]]
[13:23:43.239]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.239]                     next
[13:23:43.239]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.239]                 }
[13:23:43.239]                 if (length(args) > 0) 
[13:23:43.239]                   base::do.call(base::Sys.setenv, args = args)
[13:23:43.239]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:43.239]             }
[13:23:43.239]             else {
[13:23:43.239]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:43.239]             }
[13:23:43.239]             {
[13:23:43.239]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:43.239]                   0L) {
[13:23:43.239]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:43.239]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:43.239]                   base::options(opts)
[13:23:43.239]                 }
[13:23:43.239]                 {
[13:23:43.239]                   {
[13:23:43.239]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:43.239]                     NULL
[13:23:43.239]                   }
[13:23:43.239]                   options(future.plan = NULL)
[13:23:43.239]                   if (is.na(NA_character_)) 
[13:23:43.239]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.239]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:43.239]                   future::plan(list(function (..., workers = 2L, 
[13:23:43.239]                     envir = parent.frame()) 
[13:23:43.239]                   strategy(..., workers = workers, envir = envir)), 
[13:23:43.239]                     .cleanup = FALSE, .init = FALSE)
[13:23:43.239]                 }
[13:23:43.239]             }
[13:23:43.239]         }
[13:23:43.239]     })
[13:23:43.239]     if (TRUE) {
[13:23:43.239]         base::sink(type = "output", split = FALSE)
[13:23:43.239]         if (TRUE) {
[13:23:43.239]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:43.239]         }
[13:23:43.239]         else {
[13:23:43.239]             ...future.result["stdout"] <- base::list(NULL)
[13:23:43.239]         }
[13:23:43.239]         base::close(...future.stdout)
[13:23:43.239]         ...future.stdout <- NULL
[13:23:43.239]     }
[13:23:43.239]     ...future.result$conditions <- ...future.conditions
[13:23:43.239]     ...future.result$finished <- base::Sys.time()
[13:23:43.239]     ...future.result
[13:23:43.239] }
[13:23:43.243] MultisessionFuture started
[13:23:43.243] - Launch lazy future ... done
[13:23:43.243] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[13:23:43.243] getGlobalsAndPackages() ...
[13:23:43.243] Searching for globals...
[13:23:43.244] - globals found: [3] ‘{’, ‘value’, ‘f1’
[13:23:43.244] Searching for globals ... DONE
[13:23:43.244] Resolving globals: FALSE
[13:23:43.247] The total size of the 1 globals is 1.55 MiB (1629712 bytes)
[13:23:43.247] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 1.55 MiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (1.55 MiB of class ‘environment’)
[13:23:43.247] - globals: [1] ‘f1’
[13:23:43.247] - packages: [1] ‘future’
[13:23:43.247] getGlobalsAndPackages() ... DONE
[13:23:43.248] run() for ‘Future’ ...
[13:23:43.248] - state: ‘created’
[13:23:43.248] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:23:43.259] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:23:43.259] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:23:43.259]   - Field: ‘node’
[13:23:43.259]   - Field: ‘label’
[13:23:43.259]   - Field: ‘local’
[13:23:43.259]   - Field: ‘owner’
[13:23:43.259]   - Field: ‘envir’
[13:23:43.259]   - Field: ‘workers’
[13:23:43.259]   - Field: ‘packages’
[13:23:43.259]   - Field: ‘gc’
[13:23:43.260]   - Field: ‘conditions’
[13:23:43.260]   - Field: ‘persistent’
[13:23:43.260]   - Field: ‘expr’
[13:23:43.260]   - Field: ‘uuid’
[13:23:43.260]   - Field: ‘seed’
[13:23:43.260]   - Field: ‘version’
[13:23:43.260]   - Field: ‘result’
[13:23:43.260]   - Field: ‘asynchronous’
[13:23:43.260]   - Field: ‘calls’
[13:23:43.260]   - Field: ‘globals’
[13:23:43.260]   - Field: ‘stdout’
[13:23:43.261]   - Field: ‘earlySignal’
[13:23:43.261]   - Field: ‘lazy’
[13:23:43.261]   - Field: ‘state’
[13:23:43.261] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:23:43.261] - Launch lazy future ...
[13:23:43.261] Packages needed by the future expression (n = 1): ‘future’
[13:23:43.261] Packages needed by future strategies (n = 0): <none>
[13:23:43.262] {
[13:23:43.262]     {
[13:23:43.262]         {
[13:23:43.262]             ...future.startTime <- base::Sys.time()
[13:23:43.262]             {
[13:23:43.262]                 {
[13:23:43.262]                   {
[13:23:43.262]                     {
[13:23:43.262]                       {
[13:23:43.262]                         base::local({
[13:23:43.262]                           has_future <- base::requireNamespace("future", 
[13:23:43.262]                             quietly = TRUE)
[13:23:43.262]                           if (has_future) {
[13:23:43.262]                             ns <- base::getNamespace("future")
[13:23:43.262]                             version <- ns[[".package"]][["version"]]
[13:23:43.262]                             if (is.null(version)) 
[13:23:43.262]                               version <- utils::packageVersion("future")
[13:23:43.262]                           }
[13:23:43.262]                           else {
[13:23:43.262]                             version <- NULL
[13:23:43.262]                           }
[13:23:43.262]                           if (!has_future || version < "1.8.0") {
[13:23:43.262]                             info <- base::c(r_version = base::gsub("R version ", 
[13:23:43.262]                               "", base::R.version$version.string), 
[13:23:43.262]                               platform = base::sprintf("%s (%s-bit)", 
[13:23:43.262]                                 base::R.version$platform, 8 * 
[13:23:43.262]                                   base::.Machine$sizeof.pointer), 
[13:23:43.262]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[13:23:43.262]                                 "release", "version")], collapse = " "), 
[13:23:43.262]                               hostname = base::Sys.info()[["nodename"]])
[13:23:43.262]                             info <- base::sprintf("%s: %s", base::names(info), 
[13:23:43.262]                               info)
[13:23:43.262]                             info <- base::paste(info, collapse = "; ")
[13:23:43.262]                             if (!has_future) {
[13:23:43.262]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:23:43.262]                                 info)
[13:23:43.262]                             }
[13:23:43.262]                             else {
[13:23:43.262]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:23:43.262]                                 info, version)
[13:23:43.262]                             }
[13:23:43.262]                             base::stop(msg)
[13:23:43.262]                           }
[13:23:43.262]                         })
[13:23:43.262]                       }
[13:23:43.262]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[13:23:43.262]                       base::options(mc.cores = 1L)
[13:23:43.262]                     }
[13:23:43.262]                     base::local({
[13:23:43.262]                       for (pkg in "future") {
[13:23:43.262]                         base::loadNamespace(pkg)
[13:23:43.262]                         base::library(pkg, character.only = TRUE)
[13:23:43.262]                       }
[13:23:43.262]                     })
[13:23:43.262]                   }
[13:23:43.262]                   options(future.plan = NULL)
[13:23:43.262]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.262]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:23:43.262]                 }
[13:23:43.262]                 ...future.workdir <- getwd()
[13:23:43.262]             }
[13:23:43.262]             ...future.oldOptions <- base::as.list(base::.Options)
[13:23:43.262]             ...future.oldEnvVars <- base::Sys.getenv()
[13:23:43.262]         }
[13:23:43.262]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:23:43.262]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:23:43.262]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:23:43.262]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:23:43.262]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:23:43.262]             future.stdout.windows.reencode = NULL, width = 80L)
[13:23:43.262]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:23:43.262]             base::names(...future.oldOptions))
[13:23:43.262]     }
[13:23:43.262]     if (FALSE) {
[13:23:43.262]     }
[13:23:43.262]     else {
[13:23:43.262]         if (TRUE) {
[13:23:43.262]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:23:43.262]                 open = "w")
[13:23:43.262]         }
[13:23:43.262]         else {
[13:23:43.262]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:23:43.262]                 windows = "NUL", "/dev/null"), open = "w")
[13:23:43.262]         }
[13:23:43.262]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:23:43.262]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:23:43.262]             base::sink(type = "output", split = FALSE)
[13:23:43.262]             base::close(...future.stdout)
[13:23:43.262]         }, add = TRUE)
[13:23:43.262]     }
[13:23:43.262]     ...future.frame <- base::sys.nframe()
[13:23:43.262]     ...future.conditions <- base::list()
[13:23:43.262]     ...future.rng <- base::globalenv()$.Random.seed
[13:23:43.262]     if (FALSE) {
[13:23:43.262]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:23:43.262]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:23:43.262]     }
[13:23:43.262]     ...future.result <- base::tryCatch({
[13:23:43.262]         base::withCallingHandlers({
[13:23:43.262]             ...future.value <- base::withVisible(base::local({
[13:23:43.262]                 ...future.makeSendCondition <- base::local({
[13:23:43.262]                   sendCondition <- NULL
[13:23:43.262]                   function(frame = 1L) {
[13:23:43.262]                     if (is.function(sendCondition)) 
[13:23:43.262]                       return(sendCondition)
[13:23:43.262]                     ns <- getNamespace("parallel")
[13:23:43.262]                     if (exists("sendData", mode = "function", 
[13:23:43.262]                       envir = ns)) {
[13:23:43.262]                       parallel_sendData <- get("sendData", mode = "function", 
[13:23:43.262]                         envir = ns)
[13:23:43.262]                       envir <- sys.frame(frame)
[13:23:43.262]                       master <- NULL
[13:23:43.262]                       while (!identical(envir, .GlobalEnv) && 
[13:23:43.262]                         !identical(envir, emptyenv())) {
[13:23:43.262]                         if (exists("master", mode = "list", envir = envir, 
[13:23:43.262]                           inherits = FALSE)) {
[13:23:43.262]                           master <- get("master", mode = "list", 
[13:23:43.262]                             envir = envir, inherits = FALSE)
[13:23:43.262]                           if (inherits(master, c("SOCKnode", 
[13:23:43.262]                             "SOCK0node"))) {
[13:23:43.262]                             sendCondition <<- function(cond) {
[13:23:43.262]                               data <- list(type = "VALUE", value = cond, 
[13:23:43.262]                                 success = TRUE)
[13:23:43.262]                               parallel_sendData(master, data)
[13:23:43.262]                             }
[13:23:43.262]                             return(sendCondition)
[13:23:43.262]                           }
[13:23:43.262]                         }
[13:23:43.262]                         frame <- frame + 1L
[13:23:43.262]                         envir <- sys.frame(frame)
[13:23:43.262]                       }
[13:23:43.262]                     }
[13:23:43.262]                     sendCondition <<- function(cond) NULL
[13:23:43.262]                   }
[13:23:43.262]                 })
[13:23:43.262]                 withCallingHandlers({
[13:23:43.262]                   {
[13:23:43.262]                     value(f1)
[13:23:43.262]                   }
[13:23:43.262]                 }, immediateCondition = function(cond) {
[13:23:43.262]                   sendCondition <- ...future.makeSendCondition()
[13:23:43.262]                   sendCondition(cond)
[13:23:43.262]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.262]                   {
[13:23:43.262]                     inherits <- base::inherits
[13:23:43.262]                     invokeRestart <- base::invokeRestart
[13:23:43.262]                     is.null <- base::is.null
[13:23:43.262]                     muffled <- FALSE
[13:23:43.262]                     if (inherits(cond, "message")) {
[13:23:43.262]                       muffled <- grepl(pattern, "muffleMessage")
[13:23:43.262]                       if (muffled) 
[13:23:43.262]                         invokeRestart("muffleMessage")
[13:23:43.262]                     }
[13:23:43.262]                     else if (inherits(cond, "warning")) {
[13:23:43.262]                       muffled <- grepl(pattern, "muffleWarning")
[13:23:43.262]                       if (muffled) 
[13:23:43.262]                         invokeRestart("muffleWarning")
[13:23:43.262]                     }
[13:23:43.262]                     else if (inherits(cond, "condition")) {
[13:23:43.262]                       if (!is.null(pattern)) {
[13:23:43.262]                         computeRestarts <- base::computeRestarts
[13:23:43.262]                         grepl <- base::grepl
[13:23:43.262]                         restarts <- computeRestarts(cond)
[13:23:43.262]                         for (restart in restarts) {
[13:23:43.262]                           name <- restart$name
[13:23:43.262]                           if (is.null(name)) 
[13:23:43.262]                             next
[13:23:43.262]                           if (!grepl(pattern, name)) 
[13:23:43.262]                             next
[13:23:43.262]                           invokeRestart(restart)
[13:23:43.262]                           muffled <- TRUE
[13:23:43.262]                           break
[13:23:43.262]                         }
[13:23:43.262]                       }
[13:23:43.262]                     }
[13:23:43.262]                     invisible(muffled)
[13:23:43.262]                   }
[13:23:43.262]                   muffleCondition(cond)
[13:23:43.262]                 })
[13:23:43.262]             }))
[13:23:43.262]             future::FutureResult(value = ...future.value$value, 
[13:23:43.262]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.262]                   ...future.rng), globalenv = if (FALSE) 
[13:23:43.262]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:23:43.262]                     ...future.globalenv.names))
[13:23:43.262]                 else NULL, started = ...future.startTime, version = "1.8")
[13:23:43.262]         }, condition = base::local({
[13:23:43.262]             c <- base::c
[13:23:43.262]             inherits <- base::inherits
[13:23:43.262]             invokeRestart <- base::invokeRestart
[13:23:43.262]             length <- base::length
[13:23:43.262]             list <- base::list
[13:23:43.262]             seq.int <- base::seq.int
[13:23:43.262]             signalCondition <- base::signalCondition
[13:23:43.262]             sys.calls <- base::sys.calls
[13:23:43.262]             `[[` <- base::`[[`
[13:23:43.262]             `+` <- base::`+`
[13:23:43.262]             `<<-` <- base::`<<-`
[13:23:43.262]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:23:43.262]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:23:43.262]                   3L)]
[13:23:43.262]             }
[13:23:43.262]             function(cond) {
[13:23:43.262]                 is_error <- inherits(cond, "error")
[13:23:43.262]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:23:43.262]                   NULL)
[13:23:43.262]                 if (is_error) {
[13:23:43.262]                   sessionInformation <- function() {
[13:23:43.262]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:23:43.262]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:23:43.262]                       search = base::search(), system = base::Sys.info())
[13:23:43.262]                   }
[13:23:43.262]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.262]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:23:43.262]                     cond$call), session = sessionInformation(), 
[13:23:43.262]                     timestamp = base::Sys.time(), signaled = 0L)
[13:23:43.262]                   signalCondition(cond)
[13:23:43.262]                 }
[13:23:43.262]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:23:43.262]                 "immediateCondition"))) {
[13:23:43.262]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:23:43.262]                   ...future.conditions[[length(...future.conditions) + 
[13:23:43.262]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:23:43.262]                   if (TRUE && !signal) {
[13:23:43.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.262]                     {
[13:23:43.262]                       inherits <- base::inherits
[13:23:43.262]                       invokeRestart <- base::invokeRestart
[13:23:43.262]                       is.null <- base::is.null
[13:23:43.262]                       muffled <- FALSE
[13:23:43.262]                       if (inherits(cond, "message")) {
[13:23:43.262]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.262]                         if (muffled) 
[13:23:43.262]                           invokeRestart("muffleMessage")
[13:23:43.262]                       }
[13:23:43.262]                       else if (inherits(cond, "warning")) {
[13:23:43.262]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.262]                         if (muffled) 
[13:23:43.262]                           invokeRestart("muffleWarning")
[13:23:43.262]                       }
[13:23:43.262]                       else if (inherits(cond, "condition")) {
[13:23:43.262]                         if (!is.null(pattern)) {
[13:23:43.262]                           computeRestarts <- base::computeRestarts
[13:23:43.262]                           grepl <- base::grepl
[13:23:43.262]                           restarts <- computeRestarts(cond)
[13:23:43.262]                           for (restart in restarts) {
[13:23:43.262]                             name <- restart$name
[13:23:43.262]                             if (is.null(name)) 
[13:23:43.262]                               next
[13:23:43.262]                             if (!grepl(pattern, name)) 
[13:23:43.262]                               next
[13:23:43.262]                             invokeRestart(restart)
[13:23:43.262]                             muffled <- TRUE
[13:23:43.262]                             break
[13:23:43.262]                           }
[13:23:43.262]                         }
[13:23:43.262]                       }
[13:23:43.262]                       invisible(muffled)
[13:23:43.262]                     }
[13:23:43.262]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.262]                   }
[13:23:43.262]                 }
[13:23:43.262]                 else {
[13:23:43.262]                   if (TRUE) {
[13:23:43.262]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:23:43.262]                     {
[13:23:43.262]                       inherits <- base::inherits
[13:23:43.262]                       invokeRestart <- base::invokeRestart
[13:23:43.262]                       is.null <- base::is.null
[13:23:43.262]                       muffled <- FALSE
[13:23:43.262]                       if (inherits(cond, "message")) {
[13:23:43.262]                         muffled <- grepl(pattern, "muffleMessage")
[13:23:43.262]                         if (muffled) 
[13:23:43.262]                           invokeRestart("muffleMessage")
[13:23:43.262]                       }
[13:23:43.262]                       else if (inherits(cond, "warning")) {
[13:23:43.262]                         muffled <- grepl(pattern, "muffleWarning")
[13:23:43.262]                         if (muffled) 
[13:23:43.262]                           invokeRestart("muffleWarning")
[13:23:43.262]                       }
[13:23:43.262]                       else if (inherits(cond, "condition")) {
[13:23:43.262]                         if (!is.null(pattern)) {
[13:23:43.262]                           computeRestarts <- base::computeRestarts
[13:23:43.262]                           grepl <- base::grepl
[13:23:43.262]                           restarts <- computeRestarts(cond)
[13:23:43.262]                           for (restart in restarts) {
[13:23:43.262]                             name <- restart$name
[13:23:43.262]                             if (is.null(name)) 
[13:23:43.262]                               next
[13:23:43.262]                             if (!grepl(pattern, name)) 
[13:23:43.262]                               next
[13:23:43.262]                             invokeRestart(restart)
[13:23:43.262]                             muffled <- TRUE
[13:23:43.262]                             break
[13:23:43.262]                           }
[13:23:43.262]                         }
[13:23:43.262]                       }
[13:23:43.262]                       invisible(muffled)
[13:23:43.262]                     }
[13:23:43.262]                     muffleCondition(cond, pattern = "^muffle")
[13:23:43.262]                   }
[13:23:43.262]                 }
[13:23:43.262]             }
[13:23:43.262]         }))
[13:23:43.262]     }, error = function(ex) {
[13:23:43.262]         base::structure(base::list(value = NULL, visible = NULL, 
[13:23:43.262]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:23:43.262]                 ...future.rng), started = ...future.startTime, 
[13:23:43.262]             finished = Sys.time(), session_uuid = NA_character_, 
[13:23:43.262]             version = "1.8"), class = "FutureResult")
[13:23:43.262]     }, finally = {
[13:23:43.262]         if (!identical(...future.workdir, getwd())) 
[13:23:43.262]             setwd(...future.workdir)
[13:23:43.262]         {
[13:23:43.262]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:23:43.262]                 ...future.oldOptions$nwarnings <- NULL
[13:23:43.262]             }
[13:23:43.262]             base::options(...future.oldOptions)
[13:23:43.262]             if (.Platform$OS.type == "windows") {
[13:23:43.262]                 old_names <- names(...future.oldEnvVars)
[13:23:43.262]                 envs <- base::Sys.getenv()
[13:23:43.262]                 names <- names(envs)
[13:23:43.262]                 common <- intersect(names, old_names)
[13:23:43.262]                 added <- setdiff(names, old_names)
[13:23:43.262]                 removed <- setdiff(old_names, names)
[13:23:43.262]                 changed <- common[...future.oldEnvVars[common] != 
[13:23:43.262]                   envs[common]]
[13:23:43.262]                 NAMES <- toupper(changed)
[13:23:43.262]                 args <- list()
[13:23:43.262]                 for (kk in seq_along(NAMES)) {
[13:23:43.262]                   name <- changed[[kk]]
[13:23:43.262]                   NAME <- NAMES[[kk]]
[13:23:43.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.262]                     next
[13:23:43.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.262]                 }
[13:23:43.262]                 NAMES <- toupper(added)
[13:23:43.262]                 for (kk in seq_along(NAMES)) {
[13:23:43.262]                   name <- added[[kk]]
[13:23:43.262]                   NAME <- NAMES[[kk]]
[13:23:43.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.262]                     next
[13:23:43.262]                   args[[name]] <- ""
[13:23:43.262]                 }
[13:23:43.262]                 NAMES <- toupper(removed)
[13:23:43.262]                 for (kk in seq_along(NAMES)) {
[13:23:43.262]                   name <- removed[[kk]]
[13:23:43.262]                   NAME <- NAMES[[kk]]
[13:23:43.262]                   if (name != NAME && is.element(NAME, old_names)) 
[13:23:43.262]                     next
[13:23:43.262]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:23:43.262]                 }
[13:23:43.262]                 if (length(args) > 0) 
[13:23:43.262]                   base::do.call(base::Sys.setenv, args = args)
[13:23:43.262]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:23:43.262]             }
[13:23:43.262]             else {
[13:23:43.262]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:23:43.262]             }
[13:23:43.262]             {
[13:23:43.262]                 if (base::length(...future.futureOptionsAdded) > 
[13:23:43.262]                   0L) {
[13:23:43.262]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:23:43.262]                   base::names(opts) <- ...future.futureOptionsAdded
[13:23:43.262]                   base::options(opts)
[13:23:43.262]                 }
[13:23:43.262]                 {
[13:23:43.262]                   {
[13:23:43.262]                     base::options(mc.cores = ...future.mc.cores.old)
[13:23:43.262]                     NULL
[13:23:43.262]                   }
[13:23:43.262]                   options(future.plan = NULL)
[13:23:43.262]                   if (is.na(NA_character_)) 
[13:23:43.262]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:23:43.262]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:23:43.262]                   future::plan(list(function (..., workers = 2L, 
[13:23:43.262]                     envir = parent.frame()) 
[13:23:43.262]                   strategy(..., workers = workers, envir = envir)), 
[13:23:43.262]                     .cleanup = FALSE, .init = FALSE)
[13:23:43.262]                 }
[13:23:43.262]             }
[13:23:43.262]         }
[13:23:43.262]     })
[13:23:43.262]     if (TRUE) {
[13:23:43.262]         base::sink(type = "output", split = FALSE)
[13:23:43.262]         if (TRUE) {
[13:23:43.262]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:23:43.262]         }
[13:23:43.262]         else {
[13:23:43.262]             ...future.result["stdout"] <- base::list(NULL)
[13:23:43.262]         }
[13:23:43.262]         base::close(...future.stdout)
[13:23:43.262]         ...future.stdout <- NULL
[13:23:43.262]     }
[13:23:43.262]     ...future.result$conditions <- ...future.conditions
[13:23:43.262]     ...future.result$finished <- base::Sys.time()
[13:23:43.262]     ...future.result
[13:23:43.262] }
[13:23:43.315] Exporting 1 global objects (1.55 MiB) to cluster node #2 ...
[13:23:43.318] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ...
[13:23:43.328] Exporting ‘f1’ (1.55 MiB) to cluster node #2 ... DONE
[13:23:43.328] Exporting 1 global objects (1.55 MiB) to cluster node #2 ... DONE
[13:23:43.329] MultisessionFuture started
[13:23:43.329] - Launch lazy future ... done
[13:23:43.329] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 1.55 MiB (MultisessionFuture ‘f1’ of 1.55 MiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bb98f2dc-1e36-3d61-5a41-f2a8fc08f775
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[13:23:43.346] result() for ClusterFuture ...
[13:23:43.346] receiveMessageFromWorker() for ClusterFuture ...
[13:23:43.346] - Validating connection of MultisessionFuture
[13:23:43.425] - received message: FutureResult
[13:23:43.425] - Received FutureResult
[13:23:43.425] - Erased future from FutureRegistry
[13:23:43.425] result() for ClusterFuture ...
[13:23:43.425] - result already collected: FutureResult
[13:23:43.425] result() for ClusterFuture ... done
[13:23:43.425] signalConditions() ...
[13:23:43.425]  - include = ‘immediateCondition’
[13:23:43.426]  - exclude = 
[13:23:43.426]  - resignal = FALSE
[13:23:43.426]  - Number of conditions: 1
[13:23:43.426] signalConditions() ... done
[13:23:43.426] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:43.426] result() for ClusterFuture ... done
[13:23:43.426] result() for ClusterFuture ...
[13:23:43.426] - result already collected: FutureResult
[13:23:43.426] result() for ClusterFuture ... done
[13:23:43.426] signalConditions() ...
[13:23:43.426]  - include = ‘immediateCondition’
[13:23:43.427]  - exclude = 
[13:23:43.427]  - resignal = FALSE
[13:23:43.427]  - Number of conditions: 1
[13:23:43.427] signalConditions() ... done
[13:23:43.427] Future state: ‘finished’
[13:23:43.427] result() for ClusterFuture ...
[13:23:43.427] - result already collected: FutureResult
[13:23:43.427] result() for ClusterFuture ... done
[13:23:43.427] signalConditions() ...
[13:23:43.427]  - include = ‘condition’
[13:23:43.427]  - exclude = ‘immediateCondition’
[13:23:43.428]  - resignal = TRUE
[13:23:43.428]  - Number of conditions: 1
[13:23:43.428]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[13:23:43.428] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (bb98f2dc-1e36-3d61-5a41-f2a8fc08f775; pid 87831 on 47b98e4ec3a9) that created it, not by any other R processes (03b010fa-5ce8-8099-ca0e-76090443d2ce; pid 87885 on 47b98e4ec3a9): {; 42L; }>


Future UUID: 498c3298-8a34-8fb9-423b-ce299d8eef85


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: bb98f2dc-1e36-3d61-5a41-f2a8fc08f775
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[13:23:43.429] result() for ClusterFuture ...
[13:23:43.429] receiveMessageFromWorker() for ClusterFuture ...
[13:23:43.429] - Validating connection of MultisessionFuture
[13:23:43.429] - received message: FutureResult
[13:23:43.429] - Received FutureResult
[13:23:43.429] - Erased future from FutureRegistry
[13:23:43.430] result() for ClusterFuture ...
[13:23:43.430] - result already collected: FutureResult
[13:23:43.430] result() for ClusterFuture ... done
[13:23:43.430] receiveMessageFromWorker() for ClusterFuture ... done
[13:23:43.430] result() for ClusterFuture ... done
[13:23:43.430] result() for ClusterFuture ...
[13:23:43.430] - result already collected: FutureResult
[13:23:43.430] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[13:23:43.431] plan(): Setting new future strategy stack:
[13:23:43.431] List of future strategies:
[13:23:43.431] 1. FutureStrategy:
[13:23:43.431]    - args: function (..., envir = parent.frame())
[13:23:43.431]    - tweaked: FALSE
[13:23:43.431]    - call: future::plan(oplan)
[13:23:43.432] plan(): nbrOfWorkers() = 1
> 
