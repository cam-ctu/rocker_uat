
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[10:25:38.819] plan(): Setting new future strategy stack:
[10:25:38.820] List of future strategies:
[10:25:38.820] 1. sequential:
[10:25:38.820]    - args: function (..., envir = parent.frame())
[10:25:38.820]    - tweaked: FALSE
[10:25:38.820]    - call: future::plan("sequential")
[10:25:38.834] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[10:25:38.845] getGlobalsAndPackages() ...
[10:25:38.845] Searching for globals...
[10:25:38.852] - globals found: [2] ‘{’, ‘cat’
[10:25:38.852] Searching for globals ... DONE
[10:25:38.852] Resolving globals: FALSE
[10:25:38.853] 
[10:25:38.853] 
[10:25:38.853] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[10:25:38.854] run() for ‘Future’ ...
[10:25:38.854] - state: ‘created’
[10:25:38.854] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.855] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.855] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.855]   - Field: ‘label’
[10:25:38.855]   - Field: ‘local’
[10:25:38.855]   - Field: ‘owner’
[10:25:38.855]   - Field: ‘envir’
[10:25:38.855]   - Field: ‘packages’
[10:25:38.855]   - Field: ‘gc’
[10:25:38.855]   - Field: ‘conditions’
[10:25:38.856]   - Field: ‘expr’
[10:25:38.856]   - Field: ‘uuid’
[10:25:38.856]   - Field: ‘seed’
[10:25:38.856]   - Field: ‘version’
[10:25:38.856]   - Field: ‘result’
[10:25:38.856]   - Field: ‘asynchronous’
[10:25:38.856]   - Field: ‘calls’
[10:25:38.856]   - Field: ‘globals’
[10:25:38.856]   - Field: ‘stdout’
[10:25:38.856]   - Field: ‘earlySignal’
[10:25:38.856]   - Field: ‘lazy’
[10:25:38.857]   - Field: ‘state’
[10:25:38.857] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.857] - Launch lazy future ...
[10:25:38.858] Packages needed by the future expression (n = 0): <none>
[10:25:38.858] Packages needed by future strategies (n = 0): <none>
[10:25:38.858] {
[10:25:38.858]     {
[10:25:38.858]         {
[10:25:38.858]             ...future.startTime <- base::Sys.time()
[10:25:38.858]             {
[10:25:38.858]                 {
[10:25:38.858]                   {
[10:25:38.858]                     base::local({
[10:25:38.858]                       has_future <- base::requireNamespace("future", 
[10:25:38.858]                         quietly = TRUE)
[10:25:38.858]                       if (has_future) {
[10:25:38.858]                         ns <- base::getNamespace("future")
[10:25:38.858]                         version <- ns[[".package"]][["version"]]
[10:25:38.858]                         if (is.null(version)) 
[10:25:38.858]                           version <- utils::packageVersion("future")
[10:25:38.858]                       }
[10:25:38.858]                       else {
[10:25:38.858]                         version <- NULL
[10:25:38.858]                       }
[10:25:38.858]                       if (!has_future || version < "1.8.0") {
[10:25:38.858]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.858]                           "", base::R.version$version.string), 
[10:25:38.858]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.858]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.858]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.858]                             "release", "version")], collapse = " "), 
[10:25:38.858]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.858]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.858]                           info)
[10:25:38.858]                         info <- base::paste(info, collapse = "; ")
[10:25:38.858]                         if (!has_future) {
[10:25:38.858]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.858]                             info)
[10:25:38.858]                         }
[10:25:38.858]                         else {
[10:25:38.858]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.858]                             info, version)
[10:25:38.858]                         }
[10:25:38.858]                         base::stop(msg)
[10:25:38.858]                       }
[10:25:38.858]                     })
[10:25:38.858]                   }
[10:25:38.858]                   options(future.plan = NULL)
[10:25:38.858]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.858]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.858]                 }
[10:25:38.858]                 ...future.workdir <- getwd()
[10:25:38.858]             }
[10:25:38.858]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.858]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.858]         }
[10:25:38.858]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.858]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.858]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.858]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.858]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.858]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.858]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.858]             base::names(...future.oldOptions))
[10:25:38.858]     }
[10:25:38.858]     if (FALSE) {
[10:25:38.858]     }
[10:25:38.858]     else {
[10:25:38.858]         if (TRUE) {
[10:25:38.858]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.858]                 open = "w")
[10:25:38.858]         }
[10:25:38.858]         else {
[10:25:38.858]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.858]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.858]         }
[10:25:38.858]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.858]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.858]             base::sink(type = "output", split = FALSE)
[10:25:38.858]             base::close(...future.stdout)
[10:25:38.858]         }, add = TRUE)
[10:25:38.858]     }
[10:25:38.858]     ...future.frame <- base::sys.nframe()
[10:25:38.858]     ...future.conditions <- base::list()
[10:25:38.858]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.858]     if (FALSE) {
[10:25:38.858]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.858]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.858]     }
[10:25:38.858]     ...future.result <- base::tryCatch({
[10:25:38.858]         base::withCallingHandlers({
[10:25:38.858]             ...future.value <- base::withVisible(base::local({
[10:25:38.858]                 cat("Future assignment evaluated\n")
[10:25:38.858]                 2
[10:25:38.858]             }))
[10:25:38.858]             future::FutureResult(value = ...future.value$value, 
[10:25:38.858]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.858]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.858]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.858]                     ...future.globalenv.names))
[10:25:38.858]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.858]         }, condition = base::local({
[10:25:38.858]             c <- base::c
[10:25:38.858]             inherits <- base::inherits
[10:25:38.858]             invokeRestart <- base::invokeRestart
[10:25:38.858]             length <- base::length
[10:25:38.858]             list <- base::list
[10:25:38.858]             seq.int <- base::seq.int
[10:25:38.858]             signalCondition <- base::signalCondition
[10:25:38.858]             sys.calls <- base::sys.calls
[10:25:38.858]             `[[` <- base::`[[`
[10:25:38.858]             `+` <- base::`+`
[10:25:38.858]             `<<-` <- base::`<<-`
[10:25:38.858]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.858]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.858]                   3L)]
[10:25:38.858]             }
[10:25:38.858]             function(cond) {
[10:25:38.858]                 is_error <- inherits(cond, "error")
[10:25:38.858]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.858]                   NULL)
[10:25:38.858]                 if (is_error) {
[10:25:38.858]                   sessionInformation <- function() {
[10:25:38.858]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.858]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.858]                       search = base::search(), system = base::Sys.info())
[10:25:38.858]                   }
[10:25:38.858]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.858]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.858]                     cond$call), session = sessionInformation(), 
[10:25:38.858]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.858]                   signalCondition(cond)
[10:25:38.858]                 }
[10:25:38.858]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.858]                 "immediateCondition"))) {
[10:25:38.858]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.858]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.858]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.858]                   if (TRUE && !signal) {
[10:25:38.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.858]                     {
[10:25:38.858]                       inherits <- base::inherits
[10:25:38.858]                       invokeRestart <- base::invokeRestart
[10:25:38.858]                       is.null <- base::is.null
[10:25:38.858]                       muffled <- FALSE
[10:25:38.858]                       if (inherits(cond, "message")) {
[10:25:38.858]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.858]                         if (muffled) 
[10:25:38.858]                           invokeRestart("muffleMessage")
[10:25:38.858]                       }
[10:25:38.858]                       else if (inherits(cond, "warning")) {
[10:25:38.858]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.858]                         if (muffled) 
[10:25:38.858]                           invokeRestart("muffleWarning")
[10:25:38.858]                       }
[10:25:38.858]                       else if (inherits(cond, "condition")) {
[10:25:38.858]                         if (!is.null(pattern)) {
[10:25:38.858]                           computeRestarts <- base::computeRestarts
[10:25:38.858]                           grepl <- base::grepl
[10:25:38.858]                           restarts <- computeRestarts(cond)
[10:25:38.858]                           for (restart in restarts) {
[10:25:38.858]                             name <- restart$name
[10:25:38.858]                             if (is.null(name)) 
[10:25:38.858]                               next
[10:25:38.858]                             if (!grepl(pattern, name)) 
[10:25:38.858]                               next
[10:25:38.858]                             invokeRestart(restart)
[10:25:38.858]                             muffled <- TRUE
[10:25:38.858]                             break
[10:25:38.858]                           }
[10:25:38.858]                         }
[10:25:38.858]                       }
[10:25:38.858]                       invisible(muffled)
[10:25:38.858]                     }
[10:25:38.858]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.858]                   }
[10:25:38.858]                 }
[10:25:38.858]                 else {
[10:25:38.858]                   if (TRUE) {
[10:25:38.858]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.858]                     {
[10:25:38.858]                       inherits <- base::inherits
[10:25:38.858]                       invokeRestart <- base::invokeRestart
[10:25:38.858]                       is.null <- base::is.null
[10:25:38.858]                       muffled <- FALSE
[10:25:38.858]                       if (inherits(cond, "message")) {
[10:25:38.858]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.858]                         if (muffled) 
[10:25:38.858]                           invokeRestart("muffleMessage")
[10:25:38.858]                       }
[10:25:38.858]                       else if (inherits(cond, "warning")) {
[10:25:38.858]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.858]                         if (muffled) 
[10:25:38.858]                           invokeRestart("muffleWarning")
[10:25:38.858]                       }
[10:25:38.858]                       else if (inherits(cond, "condition")) {
[10:25:38.858]                         if (!is.null(pattern)) {
[10:25:38.858]                           computeRestarts <- base::computeRestarts
[10:25:38.858]                           grepl <- base::grepl
[10:25:38.858]                           restarts <- computeRestarts(cond)
[10:25:38.858]                           for (restart in restarts) {
[10:25:38.858]                             name <- restart$name
[10:25:38.858]                             if (is.null(name)) 
[10:25:38.858]                               next
[10:25:38.858]                             if (!grepl(pattern, name)) 
[10:25:38.858]                               next
[10:25:38.858]                             invokeRestart(restart)
[10:25:38.858]                             muffled <- TRUE
[10:25:38.858]                             break
[10:25:38.858]                           }
[10:25:38.858]                         }
[10:25:38.858]                       }
[10:25:38.858]                       invisible(muffled)
[10:25:38.858]                     }
[10:25:38.858]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.858]                   }
[10:25:38.858]                 }
[10:25:38.858]             }
[10:25:38.858]         }))
[10:25:38.858]     }, error = function(ex) {
[10:25:38.858]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.858]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.858]                 ...future.rng), started = ...future.startTime, 
[10:25:38.858]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.858]             version = "1.8"), class = "FutureResult")
[10:25:38.858]     }, finally = {
[10:25:38.858]         if (!identical(...future.workdir, getwd())) 
[10:25:38.858]             setwd(...future.workdir)
[10:25:38.858]         {
[10:25:38.858]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.858]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.858]             }
[10:25:38.858]             base::options(...future.oldOptions)
[10:25:38.858]             if (.Platform$OS.type == "windows") {
[10:25:38.858]                 old_names <- names(...future.oldEnvVars)
[10:25:38.858]                 envs <- base::Sys.getenv()
[10:25:38.858]                 names <- names(envs)
[10:25:38.858]                 common <- intersect(names, old_names)
[10:25:38.858]                 added <- setdiff(names, old_names)
[10:25:38.858]                 removed <- setdiff(old_names, names)
[10:25:38.858]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.858]                   envs[common]]
[10:25:38.858]                 NAMES <- toupper(changed)
[10:25:38.858]                 args <- list()
[10:25:38.858]                 for (kk in seq_along(NAMES)) {
[10:25:38.858]                   name <- changed[[kk]]
[10:25:38.858]                   NAME <- NAMES[[kk]]
[10:25:38.858]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.858]                     next
[10:25:38.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.858]                 }
[10:25:38.858]                 NAMES <- toupper(added)
[10:25:38.858]                 for (kk in seq_along(NAMES)) {
[10:25:38.858]                   name <- added[[kk]]
[10:25:38.858]                   NAME <- NAMES[[kk]]
[10:25:38.858]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.858]                     next
[10:25:38.858]                   args[[name]] <- ""
[10:25:38.858]                 }
[10:25:38.858]                 NAMES <- toupper(removed)
[10:25:38.858]                 for (kk in seq_along(NAMES)) {
[10:25:38.858]                   name <- removed[[kk]]
[10:25:38.858]                   NAME <- NAMES[[kk]]
[10:25:38.858]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.858]                     next
[10:25:38.858]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.858]                 }
[10:25:38.858]                 if (length(args) > 0) 
[10:25:38.858]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.858]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.858]             }
[10:25:38.858]             else {
[10:25:38.858]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.858]             }
[10:25:38.858]             {
[10:25:38.858]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.858]                   0L) {
[10:25:38.858]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.858]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.858]                   base::options(opts)
[10:25:38.858]                 }
[10:25:38.858]                 {
[10:25:38.858]                   {
[10:25:38.858]                     NULL
[10:25:38.858]                     RNGkind("Mersenne-Twister")
[10:25:38.858]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.858]                       inherits = FALSE)
[10:25:38.858]                   }
[10:25:38.858]                   options(future.plan = NULL)
[10:25:38.858]                   if (is.na(NA_character_)) 
[10:25:38.858]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.858]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.858]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.858]                   {
[10:25:38.858]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.858]                     if (!future$lazy) 
[10:25:38.858]                       future <- run(future)
[10:25:38.858]                     invisible(future)
[10:25:38.858]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.858]                 }
[10:25:38.858]             }
[10:25:38.858]         }
[10:25:38.858]     })
[10:25:38.858]     if (TRUE) {
[10:25:38.858]         base::sink(type = "output", split = FALSE)
[10:25:38.858]         if (TRUE) {
[10:25:38.858]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.858]         }
[10:25:38.858]         else {
[10:25:38.858]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.858]         }
[10:25:38.858]         base::close(...future.stdout)
[10:25:38.858]         ...future.stdout <- NULL
[10:25:38.858]     }
[10:25:38.858]     ...future.result$conditions <- ...future.conditions
[10:25:38.858]     ...future.result$finished <- base::Sys.time()
[10:25:38.858]     ...future.result
[10:25:38.858] }
[10:25:38.860] plan(): Setting new future strategy stack:
[10:25:38.861] List of future strategies:
[10:25:38.861] 1. sequential:
[10:25:38.861]    - args: function (..., envir = parent.frame())
[10:25:38.861]    - tweaked: FALSE
[10:25:38.861]    - call: NULL
[10:25:38.861] plan(): nbrOfWorkers() = 1
[10:25:38.862] plan(): Setting new future strategy stack:
[10:25:38.862] List of future strategies:
[10:25:38.862] 1. sequential:
[10:25:38.862]    - args: function (..., envir = parent.frame())
[10:25:38.862]    - tweaked: FALSE
[10:25:38.862]    - call: future::plan("sequential")
[10:25:38.863] plan(): nbrOfWorkers() = 1
[10:25:38.863] SequentialFuture started (and completed)
[10:25:38.863] - Launch lazy future ... done
[10:25:38.863] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[10:25:38.889] plan(): Setting new future strategy stack:
[10:25:38.889] List of future strategies:
[10:25:38.889] 1. sequential:
[10:25:38.889]    - args: function (..., envir = parent.frame())
[10:25:38.889]    - tweaked: FALSE
[10:25:38.889]    - call: plan(strategy)
[10:25:38.900] plan(): nbrOfWorkers() = 1
[10:25:38.900] getGlobalsAndPackages() ...
[10:25:38.900] Searching for globals...
[10:25:38.901] - globals found: [1] ‘{’
[10:25:38.901] Searching for globals ... DONE
[10:25:38.901] Resolving globals: FALSE
[10:25:38.901] 
[10:25:38.901] 
[10:25:38.902] getGlobalsAndPackages() ... DONE
[10:25:38.902] run() for ‘Future’ ...
[10:25:38.902] - state: ‘created’
[10:25:38.902] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.902] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.902] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.902]   - Field: ‘label’
[10:25:38.903]   - Field: ‘local’
[10:25:38.903]   - Field: ‘owner’
[10:25:38.903]   - Field: ‘envir’
[10:25:38.903]   - Field: ‘packages’
[10:25:38.903]   - Field: ‘gc’
[10:25:38.903]   - Field: ‘conditions’
[10:25:38.903]   - Field: ‘expr’
[10:25:38.903]   - Field: ‘uuid’
[10:25:38.903]   - Field: ‘seed’
[10:25:38.903]   - Field: ‘version’
[10:25:38.903]   - Field: ‘result’
[10:25:38.904]   - Field: ‘asynchronous’
[10:25:38.904]   - Field: ‘calls’
[10:25:38.904]   - Field: ‘globals’
[10:25:38.904]   - Field: ‘stdout’
[10:25:38.904]   - Field: ‘earlySignal’
[10:25:38.904]   - Field: ‘lazy’
[10:25:38.904]   - Field: ‘state’
[10:25:38.904] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.904] - Launch lazy future ...
[10:25:38.904] Packages needed by the future expression (n = 0): <none>
[10:25:38.904] Packages needed by future strategies (n = 0): <none>
[10:25:38.905] {
[10:25:38.905]     {
[10:25:38.905]         {
[10:25:38.905]             ...future.startTime <- base::Sys.time()
[10:25:38.905]             {
[10:25:38.905]                 {
[10:25:38.905]                   {
[10:25:38.905]                     base::local({
[10:25:38.905]                       has_future <- base::requireNamespace("future", 
[10:25:38.905]                         quietly = TRUE)
[10:25:38.905]                       if (has_future) {
[10:25:38.905]                         ns <- base::getNamespace("future")
[10:25:38.905]                         version <- ns[[".package"]][["version"]]
[10:25:38.905]                         if (is.null(version)) 
[10:25:38.905]                           version <- utils::packageVersion("future")
[10:25:38.905]                       }
[10:25:38.905]                       else {
[10:25:38.905]                         version <- NULL
[10:25:38.905]                       }
[10:25:38.905]                       if (!has_future || version < "1.8.0") {
[10:25:38.905]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.905]                           "", base::R.version$version.string), 
[10:25:38.905]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.905]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.905]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.905]                             "release", "version")], collapse = " "), 
[10:25:38.905]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.905]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.905]                           info)
[10:25:38.905]                         info <- base::paste(info, collapse = "; ")
[10:25:38.905]                         if (!has_future) {
[10:25:38.905]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.905]                             info)
[10:25:38.905]                         }
[10:25:38.905]                         else {
[10:25:38.905]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.905]                             info, version)
[10:25:38.905]                         }
[10:25:38.905]                         base::stop(msg)
[10:25:38.905]                       }
[10:25:38.905]                     })
[10:25:38.905]                   }
[10:25:38.905]                   options(future.plan = NULL)
[10:25:38.905]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.905]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.905]                 }
[10:25:38.905]                 ...future.workdir <- getwd()
[10:25:38.905]             }
[10:25:38.905]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.905]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.905]         }
[10:25:38.905]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.905]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.905]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.905]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.905]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.905]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.905]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.905]             base::names(...future.oldOptions))
[10:25:38.905]     }
[10:25:38.905]     if (FALSE) {
[10:25:38.905]     }
[10:25:38.905]     else {
[10:25:38.905]         if (TRUE) {
[10:25:38.905]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.905]                 open = "w")
[10:25:38.905]         }
[10:25:38.905]         else {
[10:25:38.905]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.905]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.905]         }
[10:25:38.905]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.905]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.905]             base::sink(type = "output", split = FALSE)
[10:25:38.905]             base::close(...future.stdout)
[10:25:38.905]         }, add = TRUE)
[10:25:38.905]     }
[10:25:38.905]     ...future.frame <- base::sys.nframe()
[10:25:38.905]     ...future.conditions <- base::list()
[10:25:38.905]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.905]     if (FALSE) {
[10:25:38.905]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.905]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.905]     }
[10:25:38.905]     ...future.result <- base::tryCatch({
[10:25:38.905]         base::withCallingHandlers({
[10:25:38.905]             ...future.value <- base::withVisible(base::local({
[10:25:38.905]                 2
[10:25:38.905]             }))
[10:25:38.905]             future::FutureResult(value = ...future.value$value, 
[10:25:38.905]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.905]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.905]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.905]                     ...future.globalenv.names))
[10:25:38.905]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.905]         }, condition = base::local({
[10:25:38.905]             c <- base::c
[10:25:38.905]             inherits <- base::inherits
[10:25:38.905]             invokeRestart <- base::invokeRestart
[10:25:38.905]             length <- base::length
[10:25:38.905]             list <- base::list
[10:25:38.905]             seq.int <- base::seq.int
[10:25:38.905]             signalCondition <- base::signalCondition
[10:25:38.905]             sys.calls <- base::sys.calls
[10:25:38.905]             `[[` <- base::`[[`
[10:25:38.905]             `+` <- base::`+`
[10:25:38.905]             `<<-` <- base::`<<-`
[10:25:38.905]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.905]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.905]                   3L)]
[10:25:38.905]             }
[10:25:38.905]             function(cond) {
[10:25:38.905]                 is_error <- inherits(cond, "error")
[10:25:38.905]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.905]                   NULL)
[10:25:38.905]                 if (is_error) {
[10:25:38.905]                   sessionInformation <- function() {
[10:25:38.905]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.905]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.905]                       search = base::search(), system = base::Sys.info())
[10:25:38.905]                   }
[10:25:38.905]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.905]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.905]                     cond$call), session = sessionInformation(), 
[10:25:38.905]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.905]                   signalCondition(cond)
[10:25:38.905]                 }
[10:25:38.905]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.905]                 "immediateCondition"))) {
[10:25:38.905]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.905]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.905]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.905]                   if (TRUE && !signal) {
[10:25:38.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.905]                     {
[10:25:38.905]                       inherits <- base::inherits
[10:25:38.905]                       invokeRestart <- base::invokeRestart
[10:25:38.905]                       is.null <- base::is.null
[10:25:38.905]                       muffled <- FALSE
[10:25:38.905]                       if (inherits(cond, "message")) {
[10:25:38.905]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.905]                         if (muffled) 
[10:25:38.905]                           invokeRestart("muffleMessage")
[10:25:38.905]                       }
[10:25:38.905]                       else if (inherits(cond, "warning")) {
[10:25:38.905]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.905]                         if (muffled) 
[10:25:38.905]                           invokeRestart("muffleWarning")
[10:25:38.905]                       }
[10:25:38.905]                       else if (inherits(cond, "condition")) {
[10:25:38.905]                         if (!is.null(pattern)) {
[10:25:38.905]                           computeRestarts <- base::computeRestarts
[10:25:38.905]                           grepl <- base::grepl
[10:25:38.905]                           restarts <- computeRestarts(cond)
[10:25:38.905]                           for (restart in restarts) {
[10:25:38.905]                             name <- restart$name
[10:25:38.905]                             if (is.null(name)) 
[10:25:38.905]                               next
[10:25:38.905]                             if (!grepl(pattern, name)) 
[10:25:38.905]                               next
[10:25:38.905]                             invokeRestart(restart)
[10:25:38.905]                             muffled <- TRUE
[10:25:38.905]                             break
[10:25:38.905]                           }
[10:25:38.905]                         }
[10:25:38.905]                       }
[10:25:38.905]                       invisible(muffled)
[10:25:38.905]                     }
[10:25:38.905]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.905]                   }
[10:25:38.905]                 }
[10:25:38.905]                 else {
[10:25:38.905]                   if (TRUE) {
[10:25:38.905]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.905]                     {
[10:25:38.905]                       inherits <- base::inherits
[10:25:38.905]                       invokeRestart <- base::invokeRestart
[10:25:38.905]                       is.null <- base::is.null
[10:25:38.905]                       muffled <- FALSE
[10:25:38.905]                       if (inherits(cond, "message")) {
[10:25:38.905]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.905]                         if (muffled) 
[10:25:38.905]                           invokeRestart("muffleMessage")
[10:25:38.905]                       }
[10:25:38.905]                       else if (inherits(cond, "warning")) {
[10:25:38.905]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.905]                         if (muffled) 
[10:25:38.905]                           invokeRestart("muffleWarning")
[10:25:38.905]                       }
[10:25:38.905]                       else if (inherits(cond, "condition")) {
[10:25:38.905]                         if (!is.null(pattern)) {
[10:25:38.905]                           computeRestarts <- base::computeRestarts
[10:25:38.905]                           grepl <- base::grepl
[10:25:38.905]                           restarts <- computeRestarts(cond)
[10:25:38.905]                           for (restart in restarts) {
[10:25:38.905]                             name <- restart$name
[10:25:38.905]                             if (is.null(name)) 
[10:25:38.905]                               next
[10:25:38.905]                             if (!grepl(pattern, name)) 
[10:25:38.905]                               next
[10:25:38.905]                             invokeRestart(restart)
[10:25:38.905]                             muffled <- TRUE
[10:25:38.905]                             break
[10:25:38.905]                           }
[10:25:38.905]                         }
[10:25:38.905]                       }
[10:25:38.905]                       invisible(muffled)
[10:25:38.905]                     }
[10:25:38.905]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.905]                   }
[10:25:38.905]                 }
[10:25:38.905]             }
[10:25:38.905]         }))
[10:25:38.905]     }, error = function(ex) {
[10:25:38.905]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.905]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.905]                 ...future.rng), started = ...future.startTime, 
[10:25:38.905]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.905]             version = "1.8"), class = "FutureResult")
[10:25:38.905]     }, finally = {
[10:25:38.905]         if (!identical(...future.workdir, getwd())) 
[10:25:38.905]             setwd(...future.workdir)
[10:25:38.905]         {
[10:25:38.905]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.905]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.905]             }
[10:25:38.905]             base::options(...future.oldOptions)
[10:25:38.905]             if (.Platform$OS.type == "windows") {
[10:25:38.905]                 old_names <- names(...future.oldEnvVars)
[10:25:38.905]                 envs <- base::Sys.getenv()
[10:25:38.905]                 names <- names(envs)
[10:25:38.905]                 common <- intersect(names, old_names)
[10:25:38.905]                 added <- setdiff(names, old_names)
[10:25:38.905]                 removed <- setdiff(old_names, names)
[10:25:38.905]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.905]                   envs[common]]
[10:25:38.905]                 NAMES <- toupper(changed)
[10:25:38.905]                 args <- list()
[10:25:38.905]                 for (kk in seq_along(NAMES)) {
[10:25:38.905]                   name <- changed[[kk]]
[10:25:38.905]                   NAME <- NAMES[[kk]]
[10:25:38.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.905]                     next
[10:25:38.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.905]                 }
[10:25:38.905]                 NAMES <- toupper(added)
[10:25:38.905]                 for (kk in seq_along(NAMES)) {
[10:25:38.905]                   name <- added[[kk]]
[10:25:38.905]                   NAME <- NAMES[[kk]]
[10:25:38.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.905]                     next
[10:25:38.905]                   args[[name]] <- ""
[10:25:38.905]                 }
[10:25:38.905]                 NAMES <- toupper(removed)
[10:25:38.905]                 for (kk in seq_along(NAMES)) {
[10:25:38.905]                   name <- removed[[kk]]
[10:25:38.905]                   NAME <- NAMES[[kk]]
[10:25:38.905]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.905]                     next
[10:25:38.905]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.905]                 }
[10:25:38.905]                 if (length(args) > 0) 
[10:25:38.905]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.905]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.905]             }
[10:25:38.905]             else {
[10:25:38.905]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.905]             }
[10:25:38.905]             {
[10:25:38.905]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.905]                   0L) {
[10:25:38.905]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.905]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.905]                   base::options(opts)
[10:25:38.905]                 }
[10:25:38.905]                 {
[10:25:38.905]                   {
[10:25:38.905]                     NULL
[10:25:38.905]                     RNGkind("Mersenne-Twister")
[10:25:38.905]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.905]                       inherits = FALSE)
[10:25:38.905]                   }
[10:25:38.905]                   options(future.plan = NULL)
[10:25:38.905]                   if (is.na(NA_character_)) 
[10:25:38.905]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.905]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.905]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.905]                   {
[10:25:38.905]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.905]                     if (!future$lazy) 
[10:25:38.905]                       future <- run(future)
[10:25:38.905]                     invisible(future)
[10:25:38.905]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.905]                 }
[10:25:38.905]             }
[10:25:38.905]         }
[10:25:38.905]     })
[10:25:38.905]     if (TRUE) {
[10:25:38.905]         base::sink(type = "output", split = FALSE)
[10:25:38.905]         if (TRUE) {
[10:25:38.905]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.905]         }
[10:25:38.905]         else {
[10:25:38.905]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.905]         }
[10:25:38.905]         base::close(...future.stdout)
[10:25:38.905]         ...future.stdout <- NULL
[10:25:38.905]     }
[10:25:38.905]     ...future.result$conditions <- ...future.conditions
[10:25:38.905]     ...future.result$finished <- base::Sys.time()
[10:25:38.905]     ...future.result
[10:25:38.905] }
[10:25:38.907] plan(): Setting new future strategy stack:
[10:25:38.907] List of future strategies:
[10:25:38.907] 1. sequential:
[10:25:38.907]    - args: function (..., envir = parent.frame())
[10:25:38.907]    - tweaked: FALSE
[10:25:38.907]    - call: NULL
[10:25:38.907] plan(): nbrOfWorkers() = 1
[10:25:38.908] plan(): Setting new future strategy stack:
[10:25:38.908] List of future strategies:
[10:25:38.908] 1. sequential:
[10:25:38.908]    - args: function (..., envir = parent.frame())
[10:25:38.908]    - tweaked: FALSE
[10:25:38.908]    - call: plan(strategy)
[10:25:38.908] plan(): nbrOfWorkers() = 1
[10:25:38.908] SequentialFuture started (and completed)
[10:25:38.908] - Launch lazy future ... done
[10:25:38.909] run() for ‘SequentialFuture’ ... done
[10:25:38.909] getGlobalsAndPackages() ...
[10:25:38.909] Searching for globals...
[10:25:38.909] - globals found: [1] ‘{’
[10:25:38.909] Searching for globals ... DONE
[10:25:38.909] Resolving globals: FALSE
[10:25:38.910] 
[10:25:38.910] 
[10:25:38.910] getGlobalsAndPackages() ... DONE
[10:25:38.910] run() for ‘Future’ ...
[10:25:38.910] - state: ‘created’
[10:25:38.910] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.911] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.911] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.911]   - Field: ‘label’
[10:25:38.911]   - Field: ‘local’
[10:25:38.911]   - Field: ‘owner’
[10:25:38.911]   - Field: ‘envir’
[10:25:38.911]   - Field: ‘packages’
[10:25:38.911]   - Field: ‘gc’
[10:25:38.911]   - Field: ‘conditions’
[10:25:38.911]   - Field: ‘expr’
[10:25:38.912]   - Field: ‘uuid’
[10:25:38.912]   - Field: ‘seed’
[10:25:38.912]   - Field: ‘version’
[10:25:38.912]   - Field: ‘result’
[10:25:38.912]   - Field: ‘asynchronous’
[10:25:38.912]   - Field: ‘calls’
[10:25:38.912]   - Field: ‘globals’
[10:25:38.912]   - Field: ‘stdout’
[10:25:38.912]   - Field: ‘earlySignal’
[10:25:38.912]   - Field: ‘lazy’
[10:25:38.912]   - Field: ‘state’
[10:25:38.912] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.913] - Launch lazy future ...
[10:25:38.913] Packages needed by the future expression (n = 0): <none>
[10:25:38.913] Packages needed by future strategies (n = 0): <none>
[10:25:38.913] {
[10:25:38.913]     {
[10:25:38.913]         {
[10:25:38.913]             ...future.startTime <- base::Sys.time()
[10:25:38.913]             {
[10:25:38.913]                 {
[10:25:38.913]                   {
[10:25:38.913]                     base::local({
[10:25:38.913]                       has_future <- base::requireNamespace("future", 
[10:25:38.913]                         quietly = TRUE)
[10:25:38.913]                       if (has_future) {
[10:25:38.913]                         ns <- base::getNamespace("future")
[10:25:38.913]                         version <- ns[[".package"]][["version"]]
[10:25:38.913]                         if (is.null(version)) 
[10:25:38.913]                           version <- utils::packageVersion("future")
[10:25:38.913]                       }
[10:25:38.913]                       else {
[10:25:38.913]                         version <- NULL
[10:25:38.913]                       }
[10:25:38.913]                       if (!has_future || version < "1.8.0") {
[10:25:38.913]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.913]                           "", base::R.version$version.string), 
[10:25:38.913]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.913]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.913]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.913]                             "release", "version")], collapse = " "), 
[10:25:38.913]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.913]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.913]                           info)
[10:25:38.913]                         info <- base::paste(info, collapse = "; ")
[10:25:38.913]                         if (!has_future) {
[10:25:38.913]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.913]                             info)
[10:25:38.913]                         }
[10:25:38.913]                         else {
[10:25:38.913]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.913]                             info, version)
[10:25:38.913]                         }
[10:25:38.913]                         base::stop(msg)
[10:25:38.913]                       }
[10:25:38.913]                     })
[10:25:38.913]                   }
[10:25:38.913]                   options(future.plan = NULL)
[10:25:38.913]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.913]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.913]                 }
[10:25:38.913]                 ...future.workdir <- getwd()
[10:25:38.913]             }
[10:25:38.913]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.913]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.913]         }
[10:25:38.913]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.913]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.913]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.913]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.913]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.913]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.913]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.913]             base::names(...future.oldOptions))
[10:25:38.913]     }
[10:25:38.913]     if (FALSE) {
[10:25:38.913]     }
[10:25:38.913]     else {
[10:25:38.913]         if (TRUE) {
[10:25:38.913]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.913]                 open = "w")
[10:25:38.913]         }
[10:25:38.913]         else {
[10:25:38.913]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.913]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.913]         }
[10:25:38.913]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.913]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.913]             base::sink(type = "output", split = FALSE)
[10:25:38.913]             base::close(...future.stdout)
[10:25:38.913]         }, add = TRUE)
[10:25:38.913]     }
[10:25:38.913]     ...future.frame <- base::sys.nframe()
[10:25:38.913]     ...future.conditions <- base::list()
[10:25:38.913]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.913]     if (FALSE) {
[10:25:38.913]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.913]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.913]     }
[10:25:38.913]     ...future.result <- base::tryCatch({
[10:25:38.913]         base::withCallingHandlers({
[10:25:38.913]             ...future.value <- base::withVisible(base::local({
[10:25:38.913]                 4
[10:25:38.913]             }))
[10:25:38.913]             future::FutureResult(value = ...future.value$value, 
[10:25:38.913]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.913]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.913]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.913]                     ...future.globalenv.names))
[10:25:38.913]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.913]         }, condition = base::local({
[10:25:38.913]             c <- base::c
[10:25:38.913]             inherits <- base::inherits
[10:25:38.913]             invokeRestart <- base::invokeRestart
[10:25:38.913]             length <- base::length
[10:25:38.913]             list <- base::list
[10:25:38.913]             seq.int <- base::seq.int
[10:25:38.913]             signalCondition <- base::signalCondition
[10:25:38.913]             sys.calls <- base::sys.calls
[10:25:38.913]             `[[` <- base::`[[`
[10:25:38.913]             `+` <- base::`+`
[10:25:38.913]             `<<-` <- base::`<<-`
[10:25:38.913]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.913]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.913]                   3L)]
[10:25:38.913]             }
[10:25:38.913]             function(cond) {
[10:25:38.913]                 is_error <- inherits(cond, "error")
[10:25:38.913]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.913]                   NULL)
[10:25:38.913]                 if (is_error) {
[10:25:38.913]                   sessionInformation <- function() {
[10:25:38.913]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.913]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.913]                       search = base::search(), system = base::Sys.info())
[10:25:38.913]                   }
[10:25:38.913]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.913]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.913]                     cond$call), session = sessionInformation(), 
[10:25:38.913]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.913]                   signalCondition(cond)
[10:25:38.913]                 }
[10:25:38.913]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.913]                 "immediateCondition"))) {
[10:25:38.913]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.913]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.913]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.913]                   if (TRUE && !signal) {
[10:25:38.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.913]                     {
[10:25:38.913]                       inherits <- base::inherits
[10:25:38.913]                       invokeRestart <- base::invokeRestart
[10:25:38.913]                       is.null <- base::is.null
[10:25:38.913]                       muffled <- FALSE
[10:25:38.913]                       if (inherits(cond, "message")) {
[10:25:38.913]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.913]                         if (muffled) 
[10:25:38.913]                           invokeRestart("muffleMessage")
[10:25:38.913]                       }
[10:25:38.913]                       else if (inherits(cond, "warning")) {
[10:25:38.913]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.913]                         if (muffled) 
[10:25:38.913]                           invokeRestart("muffleWarning")
[10:25:38.913]                       }
[10:25:38.913]                       else if (inherits(cond, "condition")) {
[10:25:38.913]                         if (!is.null(pattern)) {
[10:25:38.913]                           computeRestarts <- base::computeRestarts
[10:25:38.913]                           grepl <- base::grepl
[10:25:38.913]                           restarts <- computeRestarts(cond)
[10:25:38.913]                           for (restart in restarts) {
[10:25:38.913]                             name <- restart$name
[10:25:38.913]                             if (is.null(name)) 
[10:25:38.913]                               next
[10:25:38.913]                             if (!grepl(pattern, name)) 
[10:25:38.913]                               next
[10:25:38.913]                             invokeRestart(restart)
[10:25:38.913]                             muffled <- TRUE
[10:25:38.913]                             break
[10:25:38.913]                           }
[10:25:38.913]                         }
[10:25:38.913]                       }
[10:25:38.913]                       invisible(muffled)
[10:25:38.913]                     }
[10:25:38.913]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.913]                   }
[10:25:38.913]                 }
[10:25:38.913]                 else {
[10:25:38.913]                   if (TRUE) {
[10:25:38.913]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.913]                     {
[10:25:38.913]                       inherits <- base::inherits
[10:25:38.913]                       invokeRestart <- base::invokeRestart
[10:25:38.913]                       is.null <- base::is.null
[10:25:38.913]                       muffled <- FALSE
[10:25:38.913]                       if (inherits(cond, "message")) {
[10:25:38.913]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.913]                         if (muffled) 
[10:25:38.913]                           invokeRestart("muffleMessage")
[10:25:38.913]                       }
[10:25:38.913]                       else if (inherits(cond, "warning")) {
[10:25:38.913]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.913]                         if (muffled) 
[10:25:38.913]                           invokeRestart("muffleWarning")
[10:25:38.913]                       }
[10:25:38.913]                       else if (inherits(cond, "condition")) {
[10:25:38.913]                         if (!is.null(pattern)) {
[10:25:38.913]                           computeRestarts <- base::computeRestarts
[10:25:38.913]                           grepl <- base::grepl
[10:25:38.913]                           restarts <- computeRestarts(cond)
[10:25:38.913]                           for (restart in restarts) {
[10:25:38.913]                             name <- restart$name
[10:25:38.913]                             if (is.null(name)) 
[10:25:38.913]                               next
[10:25:38.913]                             if (!grepl(pattern, name)) 
[10:25:38.913]                               next
[10:25:38.913]                             invokeRestart(restart)
[10:25:38.913]                             muffled <- TRUE
[10:25:38.913]                             break
[10:25:38.913]                           }
[10:25:38.913]                         }
[10:25:38.913]                       }
[10:25:38.913]                       invisible(muffled)
[10:25:38.913]                     }
[10:25:38.913]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.913]                   }
[10:25:38.913]                 }
[10:25:38.913]             }
[10:25:38.913]         }))
[10:25:38.913]     }, error = function(ex) {
[10:25:38.913]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.913]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.913]                 ...future.rng), started = ...future.startTime, 
[10:25:38.913]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.913]             version = "1.8"), class = "FutureResult")
[10:25:38.913]     }, finally = {
[10:25:38.913]         if (!identical(...future.workdir, getwd())) 
[10:25:38.913]             setwd(...future.workdir)
[10:25:38.913]         {
[10:25:38.913]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.913]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.913]             }
[10:25:38.913]             base::options(...future.oldOptions)
[10:25:38.913]             if (.Platform$OS.type == "windows") {
[10:25:38.913]                 old_names <- names(...future.oldEnvVars)
[10:25:38.913]                 envs <- base::Sys.getenv()
[10:25:38.913]                 names <- names(envs)
[10:25:38.913]                 common <- intersect(names, old_names)
[10:25:38.913]                 added <- setdiff(names, old_names)
[10:25:38.913]                 removed <- setdiff(old_names, names)
[10:25:38.913]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.913]                   envs[common]]
[10:25:38.913]                 NAMES <- toupper(changed)
[10:25:38.913]                 args <- list()
[10:25:38.913]                 for (kk in seq_along(NAMES)) {
[10:25:38.913]                   name <- changed[[kk]]
[10:25:38.913]                   NAME <- NAMES[[kk]]
[10:25:38.913]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.913]                     next
[10:25:38.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.913]                 }
[10:25:38.913]                 NAMES <- toupper(added)
[10:25:38.913]                 for (kk in seq_along(NAMES)) {
[10:25:38.913]                   name <- added[[kk]]
[10:25:38.913]                   NAME <- NAMES[[kk]]
[10:25:38.913]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.913]                     next
[10:25:38.913]                   args[[name]] <- ""
[10:25:38.913]                 }
[10:25:38.913]                 NAMES <- toupper(removed)
[10:25:38.913]                 for (kk in seq_along(NAMES)) {
[10:25:38.913]                   name <- removed[[kk]]
[10:25:38.913]                   NAME <- NAMES[[kk]]
[10:25:38.913]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.913]                     next
[10:25:38.913]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.913]                 }
[10:25:38.913]                 if (length(args) > 0) 
[10:25:38.913]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.913]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.913]             }
[10:25:38.913]             else {
[10:25:38.913]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.913]             }
[10:25:38.913]             {
[10:25:38.913]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.913]                   0L) {
[10:25:38.913]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.913]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.913]                   base::options(opts)
[10:25:38.913]                 }
[10:25:38.913]                 {
[10:25:38.913]                   {
[10:25:38.913]                     NULL
[10:25:38.913]                     RNGkind("Mersenne-Twister")
[10:25:38.913]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.913]                       inherits = FALSE)
[10:25:38.913]                   }
[10:25:38.913]                   options(future.plan = NULL)
[10:25:38.913]                   if (is.na(NA_character_)) 
[10:25:38.913]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.913]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.913]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.913]                   {
[10:25:38.913]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.913]                     if (!future$lazy) 
[10:25:38.913]                       future <- run(future)
[10:25:38.913]                     invisible(future)
[10:25:38.913]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.913]                 }
[10:25:38.913]             }
[10:25:38.913]         }
[10:25:38.913]     })
[10:25:38.913]     if (TRUE) {
[10:25:38.913]         base::sink(type = "output", split = FALSE)
[10:25:38.913]         if (TRUE) {
[10:25:38.913]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.913]         }
[10:25:38.913]         else {
[10:25:38.913]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.913]         }
[10:25:38.913]         base::close(...future.stdout)
[10:25:38.913]         ...future.stdout <- NULL
[10:25:38.913]     }
[10:25:38.913]     ...future.result$conditions <- ...future.conditions
[10:25:38.913]     ...future.result$finished <- base::Sys.time()
[10:25:38.913]     ...future.result
[10:25:38.913] }
[10:25:38.915] plan(): Setting new future strategy stack:
[10:25:38.915] List of future strategies:
[10:25:38.915] 1. sequential:
[10:25:38.915]    - args: function (..., envir = parent.frame())
[10:25:38.915]    - tweaked: FALSE
[10:25:38.915]    - call: NULL
[10:25:38.915] plan(): nbrOfWorkers() = 1
[10:25:38.916] plan(): Setting new future strategy stack:
[10:25:38.916] List of future strategies:
[10:25:38.916] 1. sequential:
[10:25:38.916]    - args: function (..., envir = parent.frame())
[10:25:38.916]    - tweaked: FALSE
[10:25:38.916]    - call: plan(strategy)
[10:25:38.916] plan(): nbrOfWorkers() = 1
[10:25:38.917] SequentialFuture started (and completed)
[10:25:38.917] - Launch lazy future ... done
[10:25:38.917] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[10:25:38.917] getGlobalsAndPackages() ...
[10:25:38.917] Searching for globals...
[10:25:38.918] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:38.918] Searching for globals ... DONE
[10:25:38.918] Resolving globals: FALSE
[10:25:38.919] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.919] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.920] - globals: [1] ‘a’
[10:25:38.920] 
[10:25:38.920] getGlobalsAndPackages() ... DONE
[10:25:38.920] run() for ‘Future’ ...
[10:25:38.920] - state: ‘created’
[10:25:38.920] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.920] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.921] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.921]   - Field: ‘label’
[10:25:38.921]   - Field: ‘local’
[10:25:38.921]   - Field: ‘owner’
[10:25:38.921]   - Field: ‘envir’
[10:25:38.921]   - Field: ‘packages’
[10:25:38.921]   - Field: ‘gc’
[10:25:38.921]   - Field: ‘conditions’
[10:25:38.921]   - Field: ‘expr’
[10:25:38.921]   - Field: ‘uuid’
[10:25:38.921]   - Field: ‘seed’
[10:25:38.922]   - Field: ‘version’
[10:25:38.922]   - Field: ‘result’
[10:25:38.922]   - Field: ‘asynchronous’
[10:25:38.922]   - Field: ‘calls’
[10:25:38.922]   - Field: ‘globals’
[10:25:38.922]   - Field: ‘stdout’
[10:25:38.922]   - Field: ‘earlySignal’
[10:25:38.922]   - Field: ‘lazy’
[10:25:38.922]   - Field: ‘state’
[10:25:38.922] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.922] - Launch lazy future ...
[10:25:38.923] Packages needed by the future expression (n = 0): <none>
[10:25:38.923] Packages needed by future strategies (n = 0): <none>
[10:25:38.923] {
[10:25:38.923]     {
[10:25:38.923]         {
[10:25:38.923]             ...future.startTime <- base::Sys.time()
[10:25:38.923]             {
[10:25:38.923]                 {
[10:25:38.923]                   {
[10:25:38.923]                     base::local({
[10:25:38.923]                       has_future <- base::requireNamespace("future", 
[10:25:38.923]                         quietly = TRUE)
[10:25:38.923]                       if (has_future) {
[10:25:38.923]                         ns <- base::getNamespace("future")
[10:25:38.923]                         version <- ns[[".package"]][["version"]]
[10:25:38.923]                         if (is.null(version)) 
[10:25:38.923]                           version <- utils::packageVersion("future")
[10:25:38.923]                       }
[10:25:38.923]                       else {
[10:25:38.923]                         version <- NULL
[10:25:38.923]                       }
[10:25:38.923]                       if (!has_future || version < "1.8.0") {
[10:25:38.923]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.923]                           "", base::R.version$version.string), 
[10:25:38.923]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.923]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.923]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.923]                             "release", "version")], collapse = " "), 
[10:25:38.923]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.923]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.923]                           info)
[10:25:38.923]                         info <- base::paste(info, collapse = "; ")
[10:25:38.923]                         if (!has_future) {
[10:25:38.923]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.923]                             info)
[10:25:38.923]                         }
[10:25:38.923]                         else {
[10:25:38.923]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.923]                             info, version)
[10:25:38.923]                         }
[10:25:38.923]                         base::stop(msg)
[10:25:38.923]                       }
[10:25:38.923]                     })
[10:25:38.923]                   }
[10:25:38.923]                   options(future.plan = NULL)
[10:25:38.923]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.923]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.923]                 }
[10:25:38.923]                 ...future.workdir <- getwd()
[10:25:38.923]             }
[10:25:38.923]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.923]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.923]         }
[10:25:38.923]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.923]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.923]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.923]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.923]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.923]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.923]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.923]             base::names(...future.oldOptions))
[10:25:38.923]     }
[10:25:38.923]     if (FALSE) {
[10:25:38.923]     }
[10:25:38.923]     else {
[10:25:38.923]         if (TRUE) {
[10:25:38.923]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.923]                 open = "w")
[10:25:38.923]         }
[10:25:38.923]         else {
[10:25:38.923]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.923]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.923]         }
[10:25:38.923]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.923]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.923]             base::sink(type = "output", split = FALSE)
[10:25:38.923]             base::close(...future.stdout)
[10:25:38.923]         }, add = TRUE)
[10:25:38.923]     }
[10:25:38.923]     ...future.frame <- base::sys.nframe()
[10:25:38.923]     ...future.conditions <- base::list()
[10:25:38.923]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.923]     if (FALSE) {
[10:25:38.923]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.923]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.923]     }
[10:25:38.923]     ...future.result <- base::tryCatch({
[10:25:38.923]         base::withCallingHandlers({
[10:25:38.923]             ...future.value <- base::withVisible(base::local({
[10:25:38.923]                 2 * a
[10:25:38.923]             }))
[10:25:38.923]             future::FutureResult(value = ...future.value$value, 
[10:25:38.923]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.923]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.923]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.923]                     ...future.globalenv.names))
[10:25:38.923]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.923]         }, condition = base::local({
[10:25:38.923]             c <- base::c
[10:25:38.923]             inherits <- base::inherits
[10:25:38.923]             invokeRestart <- base::invokeRestart
[10:25:38.923]             length <- base::length
[10:25:38.923]             list <- base::list
[10:25:38.923]             seq.int <- base::seq.int
[10:25:38.923]             signalCondition <- base::signalCondition
[10:25:38.923]             sys.calls <- base::sys.calls
[10:25:38.923]             `[[` <- base::`[[`
[10:25:38.923]             `+` <- base::`+`
[10:25:38.923]             `<<-` <- base::`<<-`
[10:25:38.923]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.923]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.923]                   3L)]
[10:25:38.923]             }
[10:25:38.923]             function(cond) {
[10:25:38.923]                 is_error <- inherits(cond, "error")
[10:25:38.923]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.923]                   NULL)
[10:25:38.923]                 if (is_error) {
[10:25:38.923]                   sessionInformation <- function() {
[10:25:38.923]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.923]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.923]                       search = base::search(), system = base::Sys.info())
[10:25:38.923]                   }
[10:25:38.923]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.923]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.923]                     cond$call), session = sessionInformation(), 
[10:25:38.923]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.923]                   signalCondition(cond)
[10:25:38.923]                 }
[10:25:38.923]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.923]                 "immediateCondition"))) {
[10:25:38.923]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.923]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.923]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.923]                   if (TRUE && !signal) {
[10:25:38.923]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.923]                     {
[10:25:38.923]                       inherits <- base::inherits
[10:25:38.923]                       invokeRestart <- base::invokeRestart
[10:25:38.923]                       is.null <- base::is.null
[10:25:38.923]                       muffled <- FALSE
[10:25:38.923]                       if (inherits(cond, "message")) {
[10:25:38.923]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.923]                         if (muffled) 
[10:25:38.923]                           invokeRestart("muffleMessage")
[10:25:38.923]                       }
[10:25:38.923]                       else if (inherits(cond, "warning")) {
[10:25:38.923]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.923]                         if (muffled) 
[10:25:38.923]                           invokeRestart("muffleWarning")
[10:25:38.923]                       }
[10:25:38.923]                       else if (inherits(cond, "condition")) {
[10:25:38.923]                         if (!is.null(pattern)) {
[10:25:38.923]                           computeRestarts <- base::computeRestarts
[10:25:38.923]                           grepl <- base::grepl
[10:25:38.923]                           restarts <- computeRestarts(cond)
[10:25:38.923]                           for (restart in restarts) {
[10:25:38.923]                             name <- restart$name
[10:25:38.923]                             if (is.null(name)) 
[10:25:38.923]                               next
[10:25:38.923]                             if (!grepl(pattern, name)) 
[10:25:38.923]                               next
[10:25:38.923]                             invokeRestart(restart)
[10:25:38.923]                             muffled <- TRUE
[10:25:38.923]                             break
[10:25:38.923]                           }
[10:25:38.923]                         }
[10:25:38.923]                       }
[10:25:38.923]                       invisible(muffled)
[10:25:38.923]                     }
[10:25:38.923]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.923]                   }
[10:25:38.923]                 }
[10:25:38.923]                 else {
[10:25:38.923]                   if (TRUE) {
[10:25:38.923]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.923]                     {
[10:25:38.923]                       inherits <- base::inherits
[10:25:38.923]                       invokeRestart <- base::invokeRestart
[10:25:38.923]                       is.null <- base::is.null
[10:25:38.923]                       muffled <- FALSE
[10:25:38.923]                       if (inherits(cond, "message")) {
[10:25:38.923]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.923]                         if (muffled) 
[10:25:38.923]                           invokeRestart("muffleMessage")
[10:25:38.923]                       }
[10:25:38.923]                       else if (inherits(cond, "warning")) {
[10:25:38.923]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.923]                         if (muffled) 
[10:25:38.923]                           invokeRestart("muffleWarning")
[10:25:38.923]                       }
[10:25:38.923]                       else if (inherits(cond, "condition")) {
[10:25:38.923]                         if (!is.null(pattern)) {
[10:25:38.923]                           computeRestarts <- base::computeRestarts
[10:25:38.923]                           grepl <- base::grepl
[10:25:38.923]                           restarts <- computeRestarts(cond)
[10:25:38.923]                           for (restart in restarts) {
[10:25:38.923]                             name <- restart$name
[10:25:38.923]                             if (is.null(name)) 
[10:25:38.923]                               next
[10:25:38.923]                             if (!grepl(pattern, name)) 
[10:25:38.923]                               next
[10:25:38.923]                             invokeRestart(restart)
[10:25:38.923]                             muffled <- TRUE
[10:25:38.923]                             break
[10:25:38.923]                           }
[10:25:38.923]                         }
[10:25:38.923]                       }
[10:25:38.923]                       invisible(muffled)
[10:25:38.923]                     }
[10:25:38.923]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.923]                   }
[10:25:38.923]                 }
[10:25:38.923]             }
[10:25:38.923]         }))
[10:25:38.923]     }, error = function(ex) {
[10:25:38.923]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.923]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.923]                 ...future.rng), started = ...future.startTime, 
[10:25:38.923]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.923]             version = "1.8"), class = "FutureResult")
[10:25:38.923]     }, finally = {
[10:25:38.923]         if (!identical(...future.workdir, getwd())) 
[10:25:38.923]             setwd(...future.workdir)
[10:25:38.923]         {
[10:25:38.923]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.923]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.923]             }
[10:25:38.923]             base::options(...future.oldOptions)
[10:25:38.923]             if (.Platform$OS.type == "windows") {
[10:25:38.923]                 old_names <- names(...future.oldEnvVars)
[10:25:38.923]                 envs <- base::Sys.getenv()
[10:25:38.923]                 names <- names(envs)
[10:25:38.923]                 common <- intersect(names, old_names)
[10:25:38.923]                 added <- setdiff(names, old_names)
[10:25:38.923]                 removed <- setdiff(old_names, names)
[10:25:38.923]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.923]                   envs[common]]
[10:25:38.923]                 NAMES <- toupper(changed)
[10:25:38.923]                 args <- list()
[10:25:38.923]                 for (kk in seq_along(NAMES)) {
[10:25:38.923]                   name <- changed[[kk]]
[10:25:38.923]                   NAME <- NAMES[[kk]]
[10:25:38.923]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.923]                     next
[10:25:38.923]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.923]                 }
[10:25:38.923]                 NAMES <- toupper(added)
[10:25:38.923]                 for (kk in seq_along(NAMES)) {
[10:25:38.923]                   name <- added[[kk]]
[10:25:38.923]                   NAME <- NAMES[[kk]]
[10:25:38.923]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.923]                     next
[10:25:38.923]                   args[[name]] <- ""
[10:25:38.923]                 }
[10:25:38.923]                 NAMES <- toupper(removed)
[10:25:38.923]                 for (kk in seq_along(NAMES)) {
[10:25:38.923]                   name <- removed[[kk]]
[10:25:38.923]                   NAME <- NAMES[[kk]]
[10:25:38.923]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.923]                     next
[10:25:38.923]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.923]                 }
[10:25:38.923]                 if (length(args) > 0) 
[10:25:38.923]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.923]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.923]             }
[10:25:38.923]             else {
[10:25:38.923]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.923]             }
[10:25:38.923]             {
[10:25:38.923]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.923]                   0L) {
[10:25:38.923]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.923]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.923]                   base::options(opts)
[10:25:38.923]                 }
[10:25:38.923]                 {
[10:25:38.923]                   {
[10:25:38.923]                     NULL
[10:25:38.923]                     RNGkind("Mersenne-Twister")
[10:25:38.923]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.923]                       inherits = FALSE)
[10:25:38.923]                   }
[10:25:38.923]                   options(future.plan = NULL)
[10:25:38.923]                   if (is.na(NA_character_)) 
[10:25:38.923]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.923]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.923]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.923]                   {
[10:25:38.923]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.923]                     if (!future$lazy) 
[10:25:38.923]                       future <- run(future)
[10:25:38.923]                     invisible(future)
[10:25:38.923]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.923]                 }
[10:25:38.923]             }
[10:25:38.923]         }
[10:25:38.923]     })
[10:25:38.923]     if (TRUE) {
[10:25:38.923]         base::sink(type = "output", split = FALSE)
[10:25:38.923]         if (TRUE) {
[10:25:38.923]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.923]         }
[10:25:38.923]         else {
[10:25:38.923]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.923]         }
[10:25:38.923]         base::close(...future.stdout)
[10:25:38.923]         ...future.stdout <- NULL
[10:25:38.923]     }
[10:25:38.923]     ...future.result$conditions <- ...future.conditions
[10:25:38.923]     ...future.result$finished <- base::Sys.time()
[10:25:38.923]     ...future.result
[10:25:38.923] }
[10:25:38.925] assign_globals() ...
[10:25:38.925] List of 1
[10:25:38.925]  $ a: num 1
[10:25:38.925]  - attr(*, "where")=List of 1
[10:25:38.925]   ..$ a:<environment: R_EmptyEnv> 
[10:25:38.925]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:38.925]  - attr(*, "resolved")= logi FALSE
[10:25:38.925]  - attr(*, "total_size")= num 56
[10:25:38.925]  - attr(*, "already-done")= logi TRUE
[10:25:38.931] - copied ‘a’ to environment
[10:25:38.931] assign_globals() ... done
[10:25:38.931] plan(): Setting new future strategy stack:
[10:25:38.931] List of future strategies:
[10:25:38.931] 1. sequential:
[10:25:38.931]    - args: function (..., envir = parent.frame())
[10:25:38.931]    - tweaked: FALSE
[10:25:38.931]    - call: NULL
[10:25:38.932] plan(): nbrOfWorkers() = 1
[10:25:38.932] plan(): Setting new future strategy stack:
[10:25:38.932] List of future strategies:
[10:25:38.932] 1. sequential:
[10:25:38.932]    - args: function (..., envir = parent.frame())
[10:25:38.932]    - tweaked: FALSE
[10:25:38.932]    - call: plan(strategy)
[10:25:38.933] plan(): nbrOfWorkers() = 1
[10:25:38.933] SequentialFuture started (and completed)
[10:25:38.933] - Launch lazy future ... done
[10:25:38.933] run() for ‘SequentialFuture’ ... done
[10:25:38.933] getGlobalsAndPackages() ...
[10:25:38.933] Searching for globals...
[10:25:38.934] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:38.934] Searching for globals ... DONE
[10:25:38.934] Resolving globals: FALSE
[10:25:38.935] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.935] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.935] - globals: [1] ‘a’
[10:25:38.935] 
[10:25:38.935] getGlobalsAndPackages() ... DONE
[10:25:38.936] run() for ‘Future’ ...
[10:25:38.936] - state: ‘created’
[10:25:38.936] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.936] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.936] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.936]   - Field: ‘label’
[10:25:38.936]   - Field: ‘local’
[10:25:38.936]   - Field: ‘owner’
[10:25:38.937]   - Field: ‘envir’
[10:25:38.937]   - Field: ‘packages’
[10:25:38.937]   - Field: ‘gc’
[10:25:38.937]   - Field: ‘conditions’
[10:25:38.937]   - Field: ‘expr’
[10:25:38.937]   - Field: ‘uuid’
[10:25:38.937]   - Field: ‘seed’
[10:25:38.937]   - Field: ‘version’
[10:25:38.937]   - Field: ‘result’
[10:25:38.937]   - Field: ‘asynchronous’
[10:25:38.937]   - Field: ‘calls’
[10:25:38.938]   - Field: ‘globals’
[10:25:38.938]   - Field: ‘stdout’
[10:25:38.938]   - Field: ‘earlySignal’
[10:25:38.938]   - Field: ‘lazy’
[10:25:38.938]   - Field: ‘state’
[10:25:38.938] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.938] - Launch lazy future ...
[10:25:38.938] Packages needed by the future expression (n = 0): <none>
[10:25:38.938] Packages needed by future strategies (n = 0): <none>
[10:25:38.939] {
[10:25:38.939]     {
[10:25:38.939]         {
[10:25:38.939]             ...future.startTime <- base::Sys.time()
[10:25:38.939]             {
[10:25:38.939]                 {
[10:25:38.939]                   {
[10:25:38.939]                     base::local({
[10:25:38.939]                       has_future <- base::requireNamespace("future", 
[10:25:38.939]                         quietly = TRUE)
[10:25:38.939]                       if (has_future) {
[10:25:38.939]                         ns <- base::getNamespace("future")
[10:25:38.939]                         version <- ns[[".package"]][["version"]]
[10:25:38.939]                         if (is.null(version)) 
[10:25:38.939]                           version <- utils::packageVersion("future")
[10:25:38.939]                       }
[10:25:38.939]                       else {
[10:25:38.939]                         version <- NULL
[10:25:38.939]                       }
[10:25:38.939]                       if (!has_future || version < "1.8.0") {
[10:25:38.939]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.939]                           "", base::R.version$version.string), 
[10:25:38.939]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.939]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.939]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.939]                             "release", "version")], collapse = " "), 
[10:25:38.939]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.939]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.939]                           info)
[10:25:38.939]                         info <- base::paste(info, collapse = "; ")
[10:25:38.939]                         if (!has_future) {
[10:25:38.939]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.939]                             info)
[10:25:38.939]                         }
[10:25:38.939]                         else {
[10:25:38.939]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.939]                             info, version)
[10:25:38.939]                         }
[10:25:38.939]                         base::stop(msg)
[10:25:38.939]                       }
[10:25:38.939]                     })
[10:25:38.939]                   }
[10:25:38.939]                   options(future.plan = NULL)
[10:25:38.939]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.939]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.939]                 }
[10:25:38.939]                 ...future.workdir <- getwd()
[10:25:38.939]             }
[10:25:38.939]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.939]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.939]         }
[10:25:38.939]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.939]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.939]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.939]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.939]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.939]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.939]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.939]             base::names(...future.oldOptions))
[10:25:38.939]     }
[10:25:38.939]     if (FALSE) {
[10:25:38.939]     }
[10:25:38.939]     else {
[10:25:38.939]         if (TRUE) {
[10:25:38.939]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.939]                 open = "w")
[10:25:38.939]         }
[10:25:38.939]         else {
[10:25:38.939]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.939]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.939]         }
[10:25:38.939]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.939]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.939]             base::sink(type = "output", split = FALSE)
[10:25:38.939]             base::close(...future.stdout)
[10:25:38.939]         }, add = TRUE)
[10:25:38.939]     }
[10:25:38.939]     ...future.frame <- base::sys.nframe()
[10:25:38.939]     ...future.conditions <- base::list()
[10:25:38.939]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.939]     if (FALSE) {
[10:25:38.939]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.939]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.939]     }
[10:25:38.939]     ...future.result <- base::tryCatch({
[10:25:38.939]         base::withCallingHandlers({
[10:25:38.939]             ...future.value <- base::withVisible(base::local({
[10:25:38.939]                 2 * a
[10:25:38.939]             }))
[10:25:38.939]             future::FutureResult(value = ...future.value$value, 
[10:25:38.939]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.939]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.939]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.939]                     ...future.globalenv.names))
[10:25:38.939]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.939]         }, condition = base::local({
[10:25:38.939]             c <- base::c
[10:25:38.939]             inherits <- base::inherits
[10:25:38.939]             invokeRestart <- base::invokeRestart
[10:25:38.939]             length <- base::length
[10:25:38.939]             list <- base::list
[10:25:38.939]             seq.int <- base::seq.int
[10:25:38.939]             signalCondition <- base::signalCondition
[10:25:38.939]             sys.calls <- base::sys.calls
[10:25:38.939]             `[[` <- base::`[[`
[10:25:38.939]             `+` <- base::`+`
[10:25:38.939]             `<<-` <- base::`<<-`
[10:25:38.939]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.939]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.939]                   3L)]
[10:25:38.939]             }
[10:25:38.939]             function(cond) {
[10:25:38.939]                 is_error <- inherits(cond, "error")
[10:25:38.939]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.939]                   NULL)
[10:25:38.939]                 if (is_error) {
[10:25:38.939]                   sessionInformation <- function() {
[10:25:38.939]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.939]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.939]                       search = base::search(), system = base::Sys.info())
[10:25:38.939]                   }
[10:25:38.939]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.939]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.939]                     cond$call), session = sessionInformation(), 
[10:25:38.939]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.939]                   signalCondition(cond)
[10:25:38.939]                 }
[10:25:38.939]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.939]                 "immediateCondition"))) {
[10:25:38.939]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.939]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.939]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.939]                   if (TRUE && !signal) {
[10:25:38.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.939]                     {
[10:25:38.939]                       inherits <- base::inherits
[10:25:38.939]                       invokeRestart <- base::invokeRestart
[10:25:38.939]                       is.null <- base::is.null
[10:25:38.939]                       muffled <- FALSE
[10:25:38.939]                       if (inherits(cond, "message")) {
[10:25:38.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.939]                         if (muffled) 
[10:25:38.939]                           invokeRestart("muffleMessage")
[10:25:38.939]                       }
[10:25:38.939]                       else if (inherits(cond, "warning")) {
[10:25:38.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.939]                         if (muffled) 
[10:25:38.939]                           invokeRestart("muffleWarning")
[10:25:38.939]                       }
[10:25:38.939]                       else if (inherits(cond, "condition")) {
[10:25:38.939]                         if (!is.null(pattern)) {
[10:25:38.939]                           computeRestarts <- base::computeRestarts
[10:25:38.939]                           grepl <- base::grepl
[10:25:38.939]                           restarts <- computeRestarts(cond)
[10:25:38.939]                           for (restart in restarts) {
[10:25:38.939]                             name <- restart$name
[10:25:38.939]                             if (is.null(name)) 
[10:25:38.939]                               next
[10:25:38.939]                             if (!grepl(pattern, name)) 
[10:25:38.939]                               next
[10:25:38.939]                             invokeRestart(restart)
[10:25:38.939]                             muffled <- TRUE
[10:25:38.939]                             break
[10:25:38.939]                           }
[10:25:38.939]                         }
[10:25:38.939]                       }
[10:25:38.939]                       invisible(muffled)
[10:25:38.939]                     }
[10:25:38.939]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.939]                   }
[10:25:38.939]                 }
[10:25:38.939]                 else {
[10:25:38.939]                   if (TRUE) {
[10:25:38.939]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.939]                     {
[10:25:38.939]                       inherits <- base::inherits
[10:25:38.939]                       invokeRestart <- base::invokeRestart
[10:25:38.939]                       is.null <- base::is.null
[10:25:38.939]                       muffled <- FALSE
[10:25:38.939]                       if (inherits(cond, "message")) {
[10:25:38.939]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.939]                         if (muffled) 
[10:25:38.939]                           invokeRestart("muffleMessage")
[10:25:38.939]                       }
[10:25:38.939]                       else if (inherits(cond, "warning")) {
[10:25:38.939]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.939]                         if (muffled) 
[10:25:38.939]                           invokeRestart("muffleWarning")
[10:25:38.939]                       }
[10:25:38.939]                       else if (inherits(cond, "condition")) {
[10:25:38.939]                         if (!is.null(pattern)) {
[10:25:38.939]                           computeRestarts <- base::computeRestarts
[10:25:38.939]                           grepl <- base::grepl
[10:25:38.939]                           restarts <- computeRestarts(cond)
[10:25:38.939]                           for (restart in restarts) {
[10:25:38.939]                             name <- restart$name
[10:25:38.939]                             if (is.null(name)) 
[10:25:38.939]                               next
[10:25:38.939]                             if (!grepl(pattern, name)) 
[10:25:38.939]                               next
[10:25:38.939]                             invokeRestart(restart)
[10:25:38.939]                             muffled <- TRUE
[10:25:38.939]                             break
[10:25:38.939]                           }
[10:25:38.939]                         }
[10:25:38.939]                       }
[10:25:38.939]                       invisible(muffled)
[10:25:38.939]                     }
[10:25:38.939]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.939]                   }
[10:25:38.939]                 }
[10:25:38.939]             }
[10:25:38.939]         }))
[10:25:38.939]     }, error = function(ex) {
[10:25:38.939]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.939]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.939]                 ...future.rng), started = ...future.startTime, 
[10:25:38.939]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.939]             version = "1.8"), class = "FutureResult")
[10:25:38.939]     }, finally = {
[10:25:38.939]         if (!identical(...future.workdir, getwd())) 
[10:25:38.939]             setwd(...future.workdir)
[10:25:38.939]         {
[10:25:38.939]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.939]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.939]             }
[10:25:38.939]             base::options(...future.oldOptions)
[10:25:38.939]             if (.Platform$OS.type == "windows") {
[10:25:38.939]                 old_names <- names(...future.oldEnvVars)
[10:25:38.939]                 envs <- base::Sys.getenv()
[10:25:38.939]                 names <- names(envs)
[10:25:38.939]                 common <- intersect(names, old_names)
[10:25:38.939]                 added <- setdiff(names, old_names)
[10:25:38.939]                 removed <- setdiff(old_names, names)
[10:25:38.939]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.939]                   envs[common]]
[10:25:38.939]                 NAMES <- toupper(changed)
[10:25:38.939]                 args <- list()
[10:25:38.939]                 for (kk in seq_along(NAMES)) {
[10:25:38.939]                   name <- changed[[kk]]
[10:25:38.939]                   NAME <- NAMES[[kk]]
[10:25:38.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.939]                     next
[10:25:38.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.939]                 }
[10:25:38.939]                 NAMES <- toupper(added)
[10:25:38.939]                 for (kk in seq_along(NAMES)) {
[10:25:38.939]                   name <- added[[kk]]
[10:25:38.939]                   NAME <- NAMES[[kk]]
[10:25:38.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.939]                     next
[10:25:38.939]                   args[[name]] <- ""
[10:25:38.939]                 }
[10:25:38.939]                 NAMES <- toupper(removed)
[10:25:38.939]                 for (kk in seq_along(NAMES)) {
[10:25:38.939]                   name <- removed[[kk]]
[10:25:38.939]                   NAME <- NAMES[[kk]]
[10:25:38.939]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.939]                     next
[10:25:38.939]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.939]                 }
[10:25:38.939]                 if (length(args) > 0) 
[10:25:38.939]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.939]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.939]             }
[10:25:38.939]             else {
[10:25:38.939]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.939]             }
[10:25:38.939]             {
[10:25:38.939]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.939]                   0L) {
[10:25:38.939]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.939]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.939]                   base::options(opts)
[10:25:38.939]                 }
[10:25:38.939]                 {
[10:25:38.939]                   {
[10:25:38.939]                     NULL
[10:25:38.939]                     RNGkind("Mersenne-Twister")
[10:25:38.939]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.939]                       inherits = FALSE)
[10:25:38.939]                   }
[10:25:38.939]                   options(future.plan = NULL)
[10:25:38.939]                   if (is.na(NA_character_)) 
[10:25:38.939]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.939]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.939]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.939]                   {
[10:25:38.939]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.939]                     if (!future$lazy) 
[10:25:38.939]                       future <- run(future)
[10:25:38.939]                     invisible(future)
[10:25:38.939]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.939]                 }
[10:25:38.939]             }
[10:25:38.939]         }
[10:25:38.939]     })
[10:25:38.939]     if (TRUE) {
[10:25:38.939]         base::sink(type = "output", split = FALSE)
[10:25:38.939]         if (TRUE) {
[10:25:38.939]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.939]         }
[10:25:38.939]         else {
[10:25:38.939]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.939]         }
[10:25:38.939]         base::close(...future.stdout)
[10:25:38.939]         ...future.stdout <- NULL
[10:25:38.939]     }
[10:25:38.939]     ...future.result$conditions <- ...future.conditions
[10:25:38.939]     ...future.result$finished <- base::Sys.time()
[10:25:38.939]     ...future.result
[10:25:38.939] }
[10:25:38.940] assign_globals() ...
[10:25:38.940] List of 1
[10:25:38.940]  $ a: num 1
[10:25:38.940]  - attr(*, "where")=List of 1
[10:25:38.940]   ..$ a:<environment: R_EmptyEnv> 
[10:25:38.940]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:38.940]  - attr(*, "resolved")= logi FALSE
[10:25:38.940]  - attr(*, "total_size")= num 56
[10:25:38.940]  - attr(*, "already-done")= logi TRUE
[10:25:38.943] - copied ‘a’ to environment
[10:25:38.943] assign_globals() ... done
[10:25:38.943] plan(): Setting new future strategy stack:
[10:25:38.943] List of future strategies:
[10:25:38.943] 1. sequential:
[10:25:38.943]    - args: function (..., envir = parent.frame())
[10:25:38.943]    - tweaked: FALSE
[10:25:38.943]    - call: NULL
[10:25:38.943] plan(): nbrOfWorkers() = 1
[10:25:38.944] plan(): Setting new future strategy stack:
[10:25:38.944] List of future strategies:
[10:25:38.944] 1. sequential:
[10:25:38.944]    - args: function (..., envir = parent.frame())
[10:25:38.944]    - tweaked: FALSE
[10:25:38.944]    - call: plan(strategy)
[10:25:38.945] plan(): nbrOfWorkers() = 1
[10:25:38.945] SequentialFuture started (and completed)
[10:25:38.945] - Launch lazy future ... done
[10:25:38.945] run() for ‘SequentialFuture’ ... done
[10:25:38.945] getGlobalsAndPackages() ...
[10:25:38.945] Searching for globals...
[10:25:38.946] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:38.946] Searching for globals ... DONE
[10:25:38.946] Resolving globals: FALSE
[10:25:38.947] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.947] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.947] - globals: [1] ‘a’
[10:25:38.947] 
[10:25:38.947] getGlobalsAndPackages() ... DONE
[10:25:38.947] run() for ‘Future’ ...
[10:25:38.948] - state: ‘created’
[10:25:38.948] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.948] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.948] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.948]   - Field: ‘label’
[10:25:38.948]   - Field: ‘local’
[10:25:38.948]   - Field: ‘owner’
[10:25:38.948]   - Field: ‘envir’
[10:25:38.948]   - Field: ‘packages’
[10:25:38.949]   - Field: ‘gc’
[10:25:38.949]   - Field: ‘conditions’
[10:25:38.949]   - Field: ‘expr’
[10:25:38.949]   - Field: ‘uuid’
[10:25:38.949]   - Field: ‘seed’
[10:25:38.949]   - Field: ‘version’
[10:25:38.949]   - Field: ‘result’
[10:25:38.949]   - Field: ‘asynchronous’
[10:25:38.949]   - Field: ‘calls’
[10:25:38.949]   - Field: ‘globals’
[10:25:38.949]   - Field: ‘stdout’
[10:25:38.950]   - Field: ‘earlySignal’
[10:25:38.950]   - Field: ‘lazy’
[10:25:38.950]   - Field: ‘state’
[10:25:38.950] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.950] - Launch lazy future ...
[10:25:38.950] Packages needed by the future expression (n = 0): <none>
[10:25:38.950] Packages needed by future strategies (n = 0): <none>
[10:25:38.951] {
[10:25:38.951]     {
[10:25:38.951]         {
[10:25:38.951]             ...future.startTime <- base::Sys.time()
[10:25:38.951]             {
[10:25:38.951]                 {
[10:25:38.951]                   {
[10:25:38.951]                     base::local({
[10:25:38.951]                       has_future <- base::requireNamespace("future", 
[10:25:38.951]                         quietly = TRUE)
[10:25:38.951]                       if (has_future) {
[10:25:38.951]                         ns <- base::getNamespace("future")
[10:25:38.951]                         version <- ns[[".package"]][["version"]]
[10:25:38.951]                         if (is.null(version)) 
[10:25:38.951]                           version <- utils::packageVersion("future")
[10:25:38.951]                       }
[10:25:38.951]                       else {
[10:25:38.951]                         version <- NULL
[10:25:38.951]                       }
[10:25:38.951]                       if (!has_future || version < "1.8.0") {
[10:25:38.951]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.951]                           "", base::R.version$version.string), 
[10:25:38.951]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.951]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.951]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.951]                             "release", "version")], collapse = " "), 
[10:25:38.951]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.951]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.951]                           info)
[10:25:38.951]                         info <- base::paste(info, collapse = "; ")
[10:25:38.951]                         if (!has_future) {
[10:25:38.951]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.951]                             info)
[10:25:38.951]                         }
[10:25:38.951]                         else {
[10:25:38.951]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.951]                             info, version)
[10:25:38.951]                         }
[10:25:38.951]                         base::stop(msg)
[10:25:38.951]                       }
[10:25:38.951]                     })
[10:25:38.951]                   }
[10:25:38.951]                   options(future.plan = NULL)
[10:25:38.951]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.951]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.951]                 }
[10:25:38.951]                 ...future.workdir <- getwd()
[10:25:38.951]             }
[10:25:38.951]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.951]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.951]         }
[10:25:38.951]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.951]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.951]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.951]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.951]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.951]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.951]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.951]             base::names(...future.oldOptions))
[10:25:38.951]     }
[10:25:38.951]     if (FALSE) {
[10:25:38.951]     }
[10:25:38.951]     else {
[10:25:38.951]         if (TRUE) {
[10:25:38.951]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.951]                 open = "w")
[10:25:38.951]         }
[10:25:38.951]         else {
[10:25:38.951]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.951]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.951]         }
[10:25:38.951]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.951]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.951]             base::sink(type = "output", split = FALSE)
[10:25:38.951]             base::close(...future.stdout)
[10:25:38.951]         }, add = TRUE)
[10:25:38.951]     }
[10:25:38.951]     ...future.frame <- base::sys.nframe()
[10:25:38.951]     ...future.conditions <- base::list()
[10:25:38.951]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.951]     if (FALSE) {
[10:25:38.951]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.951]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.951]     }
[10:25:38.951]     ...future.result <- base::tryCatch({
[10:25:38.951]         base::withCallingHandlers({
[10:25:38.951]             ...future.value <- base::withVisible(base::local({
[10:25:38.951]                 2 * a
[10:25:38.951]             }))
[10:25:38.951]             future::FutureResult(value = ...future.value$value, 
[10:25:38.951]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.951]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.951]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.951]                     ...future.globalenv.names))
[10:25:38.951]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.951]         }, condition = base::local({
[10:25:38.951]             c <- base::c
[10:25:38.951]             inherits <- base::inherits
[10:25:38.951]             invokeRestart <- base::invokeRestart
[10:25:38.951]             length <- base::length
[10:25:38.951]             list <- base::list
[10:25:38.951]             seq.int <- base::seq.int
[10:25:38.951]             signalCondition <- base::signalCondition
[10:25:38.951]             sys.calls <- base::sys.calls
[10:25:38.951]             `[[` <- base::`[[`
[10:25:38.951]             `+` <- base::`+`
[10:25:38.951]             `<<-` <- base::`<<-`
[10:25:38.951]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.951]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.951]                   3L)]
[10:25:38.951]             }
[10:25:38.951]             function(cond) {
[10:25:38.951]                 is_error <- inherits(cond, "error")
[10:25:38.951]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.951]                   NULL)
[10:25:38.951]                 if (is_error) {
[10:25:38.951]                   sessionInformation <- function() {
[10:25:38.951]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.951]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.951]                       search = base::search(), system = base::Sys.info())
[10:25:38.951]                   }
[10:25:38.951]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.951]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.951]                     cond$call), session = sessionInformation(), 
[10:25:38.951]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.951]                   signalCondition(cond)
[10:25:38.951]                 }
[10:25:38.951]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.951]                 "immediateCondition"))) {
[10:25:38.951]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.951]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.951]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.951]                   if (TRUE && !signal) {
[10:25:38.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.951]                     {
[10:25:38.951]                       inherits <- base::inherits
[10:25:38.951]                       invokeRestart <- base::invokeRestart
[10:25:38.951]                       is.null <- base::is.null
[10:25:38.951]                       muffled <- FALSE
[10:25:38.951]                       if (inherits(cond, "message")) {
[10:25:38.951]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.951]                         if (muffled) 
[10:25:38.951]                           invokeRestart("muffleMessage")
[10:25:38.951]                       }
[10:25:38.951]                       else if (inherits(cond, "warning")) {
[10:25:38.951]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.951]                         if (muffled) 
[10:25:38.951]                           invokeRestart("muffleWarning")
[10:25:38.951]                       }
[10:25:38.951]                       else if (inherits(cond, "condition")) {
[10:25:38.951]                         if (!is.null(pattern)) {
[10:25:38.951]                           computeRestarts <- base::computeRestarts
[10:25:38.951]                           grepl <- base::grepl
[10:25:38.951]                           restarts <- computeRestarts(cond)
[10:25:38.951]                           for (restart in restarts) {
[10:25:38.951]                             name <- restart$name
[10:25:38.951]                             if (is.null(name)) 
[10:25:38.951]                               next
[10:25:38.951]                             if (!grepl(pattern, name)) 
[10:25:38.951]                               next
[10:25:38.951]                             invokeRestart(restart)
[10:25:38.951]                             muffled <- TRUE
[10:25:38.951]                             break
[10:25:38.951]                           }
[10:25:38.951]                         }
[10:25:38.951]                       }
[10:25:38.951]                       invisible(muffled)
[10:25:38.951]                     }
[10:25:38.951]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.951]                   }
[10:25:38.951]                 }
[10:25:38.951]                 else {
[10:25:38.951]                   if (TRUE) {
[10:25:38.951]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.951]                     {
[10:25:38.951]                       inherits <- base::inherits
[10:25:38.951]                       invokeRestart <- base::invokeRestart
[10:25:38.951]                       is.null <- base::is.null
[10:25:38.951]                       muffled <- FALSE
[10:25:38.951]                       if (inherits(cond, "message")) {
[10:25:38.951]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.951]                         if (muffled) 
[10:25:38.951]                           invokeRestart("muffleMessage")
[10:25:38.951]                       }
[10:25:38.951]                       else if (inherits(cond, "warning")) {
[10:25:38.951]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.951]                         if (muffled) 
[10:25:38.951]                           invokeRestart("muffleWarning")
[10:25:38.951]                       }
[10:25:38.951]                       else if (inherits(cond, "condition")) {
[10:25:38.951]                         if (!is.null(pattern)) {
[10:25:38.951]                           computeRestarts <- base::computeRestarts
[10:25:38.951]                           grepl <- base::grepl
[10:25:38.951]                           restarts <- computeRestarts(cond)
[10:25:38.951]                           for (restart in restarts) {
[10:25:38.951]                             name <- restart$name
[10:25:38.951]                             if (is.null(name)) 
[10:25:38.951]                               next
[10:25:38.951]                             if (!grepl(pattern, name)) 
[10:25:38.951]                               next
[10:25:38.951]                             invokeRestart(restart)
[10:25:38.951]                             muffled <- TRUE
[10:25:38.951]                             break
[10:25:38.951]                           }
[10:25:38.951]                         }
[10:25:38.951]                       }
[10:25:38.951]                       invisible(muffled)
[10:25:38.951]                     }
[10:25:38.951]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.951]                   }
[10:25:38.951]                 }
[10:25:38.951]             }
[10:25:38.951]         }))
[10:25:38.951]     }, error = function(ex) {
[10:25:38.951]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.951]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.951]                 ...future.rng), started = ...future.startTime, 
[10:25:38.951]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.951]             version = "1.8"), class = "FutureResult")
[10:25:38.951]     }, finally = {
[10:25:38.951]         if (!identical(...future.workdir, getwd())) 
[10:25:38.951]             setwd(...future.workdir)
[10:25:38.951]         {
[10:25:38.951]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.951]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.951]             }
[10:25:38.951]             base::options(...future.oldOptions)
[10:25:38.951]             if (.Platform$OS.type == "windows") {
[10:25:38.951]                 old_names <- names(...future.oldEnvVars)
[10:25:38.951]                 envs <- base::Sys.getenv()
[10:25:38.951]                 names <- names(envs)
[10:25:38.951]                 common <- intersect(names, old_names)
[10:25:38.951]                 added <- setdiff(names, old_names)
[10:25:38.951]                 removed <- setdiff(old_names, names)
[10:25:38.951]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.951]                   envs[common]]
[10:25:38.951]                 NAMES <- toupper(changed)
[10:25:38.951]                 args <- list()
[10:25:38.951]                 for (kk in seq_along(NAMES)) {
[10:25:38.951]                   name <- changed[[kk]]
[10:25:38.951]                   NAME <- NAMES[[kk]]
[10:25:38.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.951]                     next
[10:25:38.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.951]                 }
[10:25:38.951]                 NAMES <- toupper(added)
[10:25:38.951]                 for (kk in seq_along(NAMES)) {
[10:25:38.951]                   name <- added[[kk]]
[10:25:38.951]                   NAME <- NAMES[[kk]]
[10:25:38.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.951]                     next
[10:25:38.951]                   args[[name]] <- ""
[10:25:38.951]                 }
[10:25:38.951]                 NAMES <- toupper(removed)
[10:25:38.951]                 for (kk in seq_along(NAMES)) {
[10:25:38.951]                   name <- removed[[kk]]
[10:25:38.951]                   NAME <- NAMES[[kk]]
[10:25:38.951]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.951]                     next
[10:25:38.951]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.951]                 }
[10:25:38.951]                 if (length(args) > 0) 
[10:25:38.951]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.951]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.951]             }
[10:25:38.951]             else {
[10:25:38.951]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.951]             }
[10:25:38.951]             {
[10:25:38.951]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.951]                   0L) {
[10:25:38.951]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.951]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.951]                   base::options(opts)
[10:25:38.951]                 }
[10:25:38.951]                 {
[10:25:38.951]                   {
[10:25:38.951]                     NULL
[10:25:38.951]                     RNGkind("Mersenne-Twister")
[10:25:38.951]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.951]                       inherits = FALSE)
[10:25:38.951]                   }
[10:25:38.951]                   options(future.plan = NULL)
[10:25:38.951]                   if (is.na(NA_character_)) 
[10:25:38.951]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.951]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.951]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.951]                   {
[10:25:38.951]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.951]                     if (!future$lazy) 
[10:25:38.951]                       future <- run(future)
[10:25:38.951]                     invisible(future)
[10:25:38.951]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.951]                 }
[10:25:38.951]             }
[10:25:38.951]         }
[10:25:38.951]     })
[10:25:38.951]     if (TRUE) {
[10:25:38.951]         base::sink(type = "output", split = FALSE)
[10:25:38.951]         if (TRUE) {
[10:25:38.951]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.951]         }
[10:25:38.951]         else {
[10:25:38.951]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.951]         }
[10:25:38.951]         base::close(...future.stdout)
[10:25:38.951]         ...future.stdout <- NULL
[10:25:38.951]     }
[10:25:38.951]     ...future.result$conditions <- ...future.conditions
[10:25:38.951]     ...future.result$finished <- base::Sys.time()
[10:25:38.951]     ...future.result
[10:25:38.951] }
[10:25:38.952] assign_globals() ...
[10:25:38.952] List of 1
[10:25:38.952]  $ a: num 1
[10:25:38.952]  - attr(*, "where")=List of 1
[10:25:38.952]   ..$ a:<environment: R_EmptyEnv> 
[10:25:38.952]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:38.952]  - attr(*, "resolved")= logi FALSE
[10:25:38.952]  - attr(*, "total_size")= num 56
[10:25:38.952]  - attr(*, "already-done")= logi TRUE
[10:25:38.955] - copied ‘a’ to environment
[10:25:38.955] assign_globals() ... done
[10:25:38.955] plan(): Setting new future strategy stack:
[10:25:38.955] List of future strategies:
[10:25:38.955] 1. sequential:
[10:25:38.955]    - args: function (..., envir = parent.frame())
[10:25:38.955]    - tweaked: FALSE
[10:25:38.955]    - call: NULL
[10:25:38.955] plan(): nbrOfWorkers() = 1
[10:25:38.956] plan(): Setting new future strategy stack:
[10:25:38.956] List of future strategies:
[10:25:38.956] 1. sequential:
[10:25:38.956]    - args: function (..., envir = parent.frame())
[10:25:38.956]    - tweaked: FALSE
[10:25:38.956]    - call: plan(strategy)
[10:25:38.956] plan(): nbrOfWorkers() = 1
[10:25:38.957] SequentialFuture started (and completed)
[10:25:38.958] - Launch lazy future ... done
[10:25:38.958] run() for ‘SequentialFuture’ ... done
[10:25:38.958] getGlobalsAndPackages() ...
[10:25:38.958] Searching for globals...
[10:25:38.959] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:38.959] Searching for globals ... DONE
[10:25:38.959] Resolving globals: FALSE
[10:25:38.960] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.960] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.960] - globals: [1] ‘a’
[10:25:38.960] 
[10:25:38.960] getGlobalsAndPackages() ... DONE
[10:25:38.961] run() for ‘Future’ ...
[10:25:38.961] - state: ‘created’
[10:25:38.961] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.961] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.961] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.961]   - Field: ‘label’
[10:25:38.961]   - Field: ‘local’
[10:25:38.962]   - Field: ‘owner’
[10:25:38.962]   - Field: ‘envir’
[10:25:38.962]   - Field: ‘packages’
[10:25:38.962]   - Field: ‘gc’
[10:25:38.962]   - Field: ‘conditions’
[10:25:38.962]   - Field: ‘expr’
[10:25:38.962]   - Field: ‘uuid’
[10:25:38.962]   - Field: ‘seed’
[10:25:38.962]   - Field: ‘version’
[10:25:38.962]   - Field: ‘result’
[10:25:38.962]   - Field: ‘asynchronous’
[10:25:38.963]   - Field: ‘calls’
[10:25:38.963]   - Field: ‘globals’
[10:25:38.963]   - Field: ‘stdout’
[10:25:38.963]   - Field: ‘earlySignal’
[10:25:38.963]   - Field: ‘lazy’
[10:25:38.963]   - Field: ‘state’
[10:25:38.963] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.963] - Launch lazy future ...
[10:25:38.963] Packages needed by the future expression (n = 0): <none>
[10:25:38.964] Packages needed by future strategies (n = 0): <none>
[10:25:38.964] {
[10:25:38.964]     {
[10:25:38.964]         {
[10:25:38.964]             ...future.startTime <- base::Sys.time()
[10:25:38.964]             {
[10:25:38.964]                 {
[10:25:38.964]                   {
[10:25:38.964]                     base::local({
[10:25:38.964]                       has_future <- base::requireNamespace("future", 
[10:25:38.964]                         quietly = TRUE)
[10:25:38.964]                       if (has_future) {
[10:25:38.964]                         ns <- base::getNamespace("future")
[10:25:38.964]                         version <- ns[[".package"]][["version"]]
[10:25:38.964]                         if (is.null(version)) 
[10:25:38.964]                           version <- utils::packageVersion("future")
[10:25:38.964]                       }
[10:25:38.964]                       else {
[10:25:38.964]                         version <- NULL
[10:25:38.964]                       }
[10:25:38.964]                       if (!has_future || version < "1.8.0") {
[10:25:38.964]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.964]                           "", base::R.version$version.string), 
[10:25:38.964]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.964]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.964]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.964]                             "release", "version")], collapse = " "), 
[10:25:38.964]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.964]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.964]                           info)
[10:25:38.964]                         info <- base::paste(info, collapse = "; ")
[10:25:38.964]                         if (!has_future) {
[10:25:38.964]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.964]                             info)
[10:25:38.964]                         }
[10:25:38.964]                         else {
[10:25:38.964]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.964]                             info, version)
[10:25:38.964]                         }
[10:25:38.964]                         base::stop(msg)
[10:25:38.964]                       }
[10:25:38.964]                     })
[10:25:38.964]                   }
[10:25:38.964]                   options(future.plan = NULL)
[10:25:38.964]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.964]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.964]                 }
[10:25:38.964]                 ...future.workdir <- getwd()
[10:25:38.964]             }
[10:25:38.964]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.964]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.964]         }
[10:25:38.964]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.964]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.964]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.964]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.964]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.964]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.964]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.964]             base::names(...future.oldOptions))
[10:25:38.964]     }
[10:25:38.964]     if (FALSE) {
[10:25:38.964]     }
[10:25:38.964]     else {
[10:25:38.964]         if (TRUE) {
[10:25:38.964]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.964]                 open = "w")
[10:25:38.964]         }
[10:25:38.964]         else {
[10:25:38.964]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.964]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.964]         }
[10:25:38.964]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.964]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.964]             base::sink(type = "output", split = FALSE)
[10:25:38.964]             base::close(...future.stdout)
[10:25:38.964]         }, add = TRUE)
[10:25:38.964]     }
[10:25:38.964]     ...future.frame <- base::sys.nframe()
[10:25:38.964]     ...future.conditions <- base::list()
[10:25:38.964]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.964]     if (FALSE) {
[10:25:38.964]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.964]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.964]     }
[10:25:38.964]     ...future.result <- base::tryCatch({
[10:25:38.964]         base::withCallingHandlers({
[10:25:38.964]             ...future.value <- base::withVisible(base::local({
[10:25:38.964]                 2 * a
[10:25:38.964]             }))
[10:25:38.964]             future::FutureResult(value = ...future.value$value, 
[10:25:38.964]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.964]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.964]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.964]                     ...future.globalenv.names))
[10:25:38.964]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.964]         }, condition = base::local({
[10:25:38.964]             c <- base::c
[10:25:38.964]             inherits <- base::inherits
[10:25:38.964]             invokeRestart <- base::invokeRestart
[10:25:38.964]             length <- base::length
[10:25:38.964]             list <- base::list
[10:25:38.964]             seq.int <- base::seq.int
[10:25:38.964]             signalCondition <- base::signalCondition
[10:25:38.964]             sys.calls <- base::sys.calls
[10:25:38.964]             `[[` <- base::`[[`
[10:25:38.964]             `+` <- base::`+`
[10:25:38.964]             `<<-` <- base::`<<-`
[10:25:38.964]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.964]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.964]                   3L)]
[10:25:38.964]             }
[10:25:38.964]             function(cond) {
[10:25:38.964]                 is_error <- inherits(cond, "error")
[10:25:38.964]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.964]                   NULL)
[10:25:38.964]                 if (is_error) {
[10:25:38.964]                   sessionInformation <- function() {
[10:25:38.964]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.964]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.964]                       search = base::search(), system = base::Sys.info())
[10:25:38.964]                   }
[10:25:38.964]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.964]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.964]                     cond$call), session = sessionInformation(), 
[10:25:38.964]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.964]                   signalCondition(cond)
[10:25:38.964]                 }
[10:25:38.964]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.964]                 "immediateCondition"))) {
[10:25:38.964]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.964]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.964]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.964]                   if (TRUE && !signal) {
[10:25:38.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.964]                     {
[10:25:38.964]                       inherits <- base::inherits
[10:25:38.964]                       invokeRestart <- base::invokeRestart
[10:25:38.964]                       is.null <- base::is.null
[10:25:38.964]                       muffled <- FALSE
[10:25:38.964]                       if (inherits(cond, "message")) {
[10:25:38.964]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.964]                         if (muffled) 
[10:25:38.964]                           invokeRestart("muffleMessage")
[10:25:38.964]                       }
[10:25:38.964]                       else if (inherits(cond, "warning")) {
[10:25:38.964]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.964]                         if (muffled) 
[10:25:38.964]                           invokeRestart("muffleWarning")
[10:25:38.964]                       }
[10:25:38.964]                       else if (inherits(cond, "condition")) {
[10:25:38.964]                         if (!is.null(pattern)) {
[10:25:38.964]                           computeRestarts <- base::computeRestarts
[10:25:38.964]                           grepl <- base::grepl
[10:25:38.964]                           restarts <- computeRestarts(cond)
[10:25:38.964]                           for (restart in restarts) {
[10:25:38.964]                             name <- restart$name
[10:25:38.964]                             if (is.null(name)) 
[10:25:38.964]                               next
[10:25:38.964]                             if (!grepl(pattern, name)) 
[10:25:38.964]                               next
[10:25:38.964]                             invokeRestart(restart)
[10:25:38.964]                             muffled <- TRUE
[10:25:38.964]                             break
[10:25:38.964]                           }
[10:25:38.964]                         }
[10:25:38.964]                       }
[10:25:38.964]                       invisible(muffled)
[10:25:38.964]                     }
[10:25:38.964]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.964]                   }
[10:25:38.964]                 }
[10:25:38.964]                 else {
[10:25:38.964]                   if (TRUE) {
[10:25:38.964]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.964]                     {
[10:25:38.964]                       inherits <- base::inherits
[10:25:38.964]                       invokeRestart <- base::invokeRestart
[10:25:38.964]                       is.null <- base::is.null
[10:25:38.964]                       muffled <- FALSE
[10:25:38.964]                       if (inherits(cond, "message")) {
[10:25:38.964]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.964]                         if (muffled) 
[10:25:38.964]                           invokeRestart("muffleMessage")
[10:25:38.964]                       }
[10:25:38.964]                       else if (inherits(cond, "warning")) {
[10:25:38.964]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.964]                         if (muffled) 
[10:25:38.964]                           invokeRestart("muffleWarning")
[10:25:38.964]                       }
[10:25:38.964]                       else if (inherits(cond, "condition")) {
[10:25:38.964]                         if (!is.null(pattern)) {
[10:25:38.964]                           computeRestarts <- base::computeRestarts
[10:25:38.964]                           grepl <- base::grepl
[10:25:38.964]                           restarts <- computeRestarts(cond)
[10:25:38.964]                           for (restart in restarts) {
[10:25:38.964]                             name <- restart$name
[10:25:38.964]                             if (is.null(name)) 
[10:25:38.964]                               next
[10:25:38.964]                             if (!grepl(pattern, name)) 
[10:25:38.964]                               next
[10:25:38.964]                             invokeRestart(restart)
[10:25:38.964]                             muffled <- TRUE
[10:25:38.964]                             break
[10:25:38.964]                           }
[10:25:38.964]                         }
[10:25:38.964]                       }
[10:25:38.964]                       invisible(muffled)
[10:25:38.964]                     }
[10:25:38.964]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.964]                   }
[10:25:38.964]                 }
[10:25:38.964]             }
[10:25:38.964]         }))
[10:25:38.964]     }, error = function(ex) {
[10:25:38.964]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.964]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.964]                 ...future.rng), started = ...future.startTime, 
[10:25:38.964]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.964]             version = "1.8"), class = "FutureResult")
[10:25:38.964]     }, finally = {
[10:25:38.964]         if (!identical(...future.workdir, getwd())) 
[10:25:38.964]             setwd(...future.workdir)
[10:25:38.964]         {
[10:25:38.964]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.964]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.964]             }
[10:25:38.964]             base::options(...future.oldOptions)
[10:25:38.964]             if (.Platform$OS.type == "windows") {
[10:25:38.964]                 old_names <- names(...future.oldEnvVars)
[10:25:38.964]                 envs <- base::Sys.getenv()
[10:25:38.964]                 names <- names(envs)
[10:25:38.964]                 common <- intersect(names, old_names)
[10:25:38.964]                 added <- setdiff(names, old_names)
[10:25:38.964]                 removed <- setdiff(old_names, names)
[10:25:38.964]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.964]                   envs[common]]
[10:25:38.964]                 NAMES <- toupper(changed)
[10:25:38.964]                 args <- list()
[10:25:38.964]                 for (kk in seq_along(NAMES)) {
[10:25:38.964]                   name <- changed[[kk]]
[10:25:38.964]                   NAME <- NAMES[[kk]]
[10:25:38.964]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.964]                     next
[10:25:38.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.964]                 }
[10:25:38.964]                 NAMES <- toupper(added)
[10:25:38.964]                 for (kk in seq_along(NAMES)) {
[10:25:38.964]                   name <- added[[kk]]
[10:25:38.964]                   NAME <- NAMES[[kk]]
[10:25:38.964]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.964]                     next
[10:25:38.964]                   args[[name]] <- ""
[10:25:38.964]                 }
[10:25:38.964]                 NAMES <- toupper(removed)
[10:25:38.964]                 for (kk in seq_along(NAMES)) {
[10:25:38.964]                   name <- removed[[kk]]
[10:25:38.964]                   NAME <- NAMES[[kk]]
[10:25:38.964]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.964]                     next
[10:25:38.964]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.964]                 }
[10:25:38.964]                 if (length(args) > 0) 
[10:25:38.964]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.964]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.964]             }
[10:25:38.964]             else {
[10:25:38.964]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.964]             }
[10:25:38.964]             {
[10:25:38.964]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.964]                   0L) {
[10:25:38.964]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.964]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.964]                   base::options(opts)
[10:25:38.964]                 }
[10:25:38.964]                 {
[10:25:38.964]                   {
[10:25:38.964]                     NULL
[10:25:38.964]                     RNGkind("Mersenne-Twister")
[10:25:38.964]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.964]                       inherits = FALSE)
[10:25:38.964]                   }
[10:25:38.964]                   options(future.plan = NULL)
[10:25:38.964]                   if (is.na(NA_character_)) 
[10:25:38.964]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.964]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.964]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.964]                   {
[10:25:38.964]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.964]                     if (!future$lazy) 
[10:25:38.964]                       future <- run(future)
[10:25:38.964]                     invisible(future)
[10:25:38.964]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.964]                 }
[10:25:38.964]             }
[10:25:38.964]         }
[10:25:38.964]     })
[10:25:38.964]     if (TRUE) {
[10:25:38.964]         base::sink(type = "output", split = FALSE)
[10:25:38.964]         if (TRUE) {
[10:25:38.964]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.964]         }
[10:25:38.964]         else {
[10:25:38.964]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.964]         }
[10:25:38.964]         base::close(...future.stdout)
[10:25:38.964]         ...future.stdout <- NULL
[10:25:38.964]     }
[10:25:38.964]     ...future.result$conditions <- ...future.conditions
[10:25:38.964]     ...future.result$finished <- base::Sys.time()
[10:25:38.964]     ...future.result
[10:25:38.964] }
[10:25:38.966] assign_globals() ...
[10:25:38.966] List of 1
[10:25:38.966]  $ a: num 1
[10:25:38.966]  - attr(*, "where")=List of 1
[10:25:38.966]   ..$ a:<environment: R_EmptyEnv> 
[10:25:38.966]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:38.966]  - attr(*, "resolved")= logi FALSE
[10:25:38.966]  - attr(*, "total_size")= num 56
[10:25:38.966]  - attr(*, "already-done")= logi TRUE
[10:25:38.968] - copied ‘a’ to environment
[10:25:38.968] assign_globals() ... done
[10:25:38.968] plan(): Setting new future strategy stack:
[10:25:38.968] List of future strategies:
[10:25:38.968] 1. sequential:
[10:25:38.968]    - args: function (..., envir = parent.frame())
[10:25:38.968]    - tweaked: FALSE
[10:25:38.968]    - call: NULL
[10:25:38.969] plan(): nbrOfWorkers() = 1
[10:25:38.970] plan(): Setting new future strategy stack:
[10:25:38.970] List of future strategies:
[10:25:38.970] 1. sequential:
[10:25:38.970]    - args: function (..., envir = parent.frame())
[10:25:38.970]    - tweaked: FALSE
[10:25:38.970]    - call: plan(strategy)
[10:25:38.970] plan(): nbrOfWorkers() = 1
[10:25:38.970] SequentialFuture started (and completed)
[10:25:38.970] - Launch lazy future ... done
[10:25:38.970] run() for ‘SequentialFuture’ ... done
[10:25:38.971] getGlobalsAndPackages() ...
[10:25:38.971] Searching for globals...
[10:25:38.971] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:38.972] Searching for globals ... DONE
[10:25:38.972] Resolving globals: FALSE
[10:25:38.972] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:38.972] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:38.972] - globals: [1] ‘a’
[10:25:38.973] 
[10:25:38.973] getGlobalsAndPackages() ... DONE
[10:25:38.973] run() for ‘Future’ ...
[10:25:38.973] - state: ‘created’
[10:25:38.973] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[10:25:38.973] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[10:25:38.973] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[10:25:38.974]   - Field: ‘label’
[10:25:38.974]   - Field: ‘local’
[10:25:38.974]   - Field: ‘owner’
[10:25:38.974]   - Field: ‘envir’
[10:25:38.974]   - Field: ‘packages’
[10:25:38.974]   - Field: ‘gc’
[10:25:38.974]   - Field: ‘conditions’
[10:25:38.974]   - Field: ‘expr’
[10:25:38.974]   - Field: ‘uuid’
[10:25:38.974]   - Field: ‘seed’
[10:25:38.974]   - Field: ‘version’
[10:25:38.975]   - Field: ‘result’
[10:25:38.975]   - Field: ‘asynchronous’
[10:25:38.975]   - Field: ‘calls’
[10:25:38.975]   - Field: ‘globals’
[10:25:38.975]   - Field: ‘stdout’
[10:25:38.975]   - Field: ‘earlySignal’
[10:25:38.975]   - Field: ‘lazy’
[10:25:38.975]   - Field: ‘state’
[10:25:38.975] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[10:25:38.975] - Launch lazy future ...
[10:25:38.976] Packages needed by the future expression (n = 0): <none>
[10:25:38.976] Packages needed by future strategies (n = 0): <none>
[10:25:38.976] {
[10:25:38.976]     {
[10:25:38.976]         {
[10:25:38.976]             ...future.startTime <- base::Sys.time()
[10:25:38.976]             {
[10:25:38.976]                 {
[10:25:38.976]                   {
[10:25:38.976]                     base::local({
[10:25:38.976]                       has_future <- base::requireNamespace("future", 
[10:25:38.976]                         quietly = TRUE)
[10:25:38.976]                       if (has_future) {
[10:25:38.976]                         ns <- base::getNamespace("future")
[10:25:38.976]                         version <- ns[[".package"]][["version"]]
[10:25:38.976]                         if (is.null(version)) 
[10:25:38.976]                           version <- utils::packageVersion("future")
[10:25:38.976]                       }
[10:25:38.976]                       else {
[10:25:38.976]                         version <- NULL
[10:25:38.976]                       }
[10:25:38.976]                       if (!has_future || version < "1.8.0") {
[10:25:38.976]                         info <- base::c(r_version = base::gsub("R version ", 
[10:25:38.976]                           "", base::R.version$version.string), 
[10:25:38.976]                           platform = base::sprintf("%s (%s-bit)", 
[10:25:38.976]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:38.976]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:38.976]                             "release", "version")], collapse = " "), 
[10:25:38.976]                           hostname = base::Sys.info()[["nodename"]])
[10:25:38.976]                         info <- base::sprintf("%s: %s", base::names(info), 
[10:25:38.976]                           info)
[10:25:38.976]                         info <- base::paste(info, collapse = "; ")
[10:25:38.976]                         if (!has_future) {
[10:25:38.976]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:38.976]                             info)
[10:25:38.976]                         }
[10:25:38.976]                         else {
[10:25:38.976]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:38.976]                             info, version)
[10:25:38.976]                         }
[10:25:38.976]                         base::stop(msg)
[10:25:38.976]                       }
[10:25:38.976]                     })
[10:25:38.976]                   }
[10:25:38.976]                   options(future.plan = NULL)
[10:25:38.976]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.976]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:38.976]                 }
[10:25:38.976]                 ...future.workdir <- getwd()
[10:25:38.976]             }
[10:25:38.976]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:38.976]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:38.976]         }
[10:25:38.976]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:38.976]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:38.976]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:38.976]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:38.976]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:38.976]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:38.976]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:38.976]             base::names(...future.oldOptions))
[10:25:38.976]     }
[10:25:38.976]     if (FALSE) {
[10:25:38.976]     }
[10:25:38.976]     else {
[10:25:38.976]         if (TRUE) {
[10:25:38.976]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:38.976]                 open = "w")
[10:25:38.976]         }
[10:25:38.976]         else {
[10:25:38.976]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:38.976]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:38.976]         }
[10:25:38.976]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:38.976]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:38.976]             base::sink(type = "output", split = FALSE)
[10:25:38.976]             base::close(...future.stdout)
[10:25:38.976]         }, add = TRUE)
[10:25:38.976]     }
[10:25:38.976]     ...future.frame <- base::sys.nframe()
[10:25:38.976]     ...future.conditions <- base::list()
[10:25:38.976]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:38.976]     if (FALSE) {
[10:25:38.976]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:38.976]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:38.976]     }
[10:25:38.976]     ...future.result <- base::tryCatch({
[10:25:38.976]         base::withCallingHandlers({
[10:25:38.976]             ...future.value <- base::withVisible(base::local({
[10:25:38.976]                 2 * a
[10:25:38.976]             }))
[10:25:38.976]             future::FutureResult(value = ...future.value$value, 
[10:25:38.976]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.976]                   ...future.rng), globalenv = if (FALSE) 
[10:25:38.976]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:38.976]                     ...future.globalenv.names))
[10:25:38.976]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:38.976]         }, condition = base::local({
[10:25:38.976]             c <- base::c
[10:25:38.976]             inherits <- base::inherits
[10:25:38.976]             invokeRestart <- base::invokeRestart
[10:25:38.976]             length <- base::length
[10:25:38.976]             list <- base::list
[10:25:38.976]             seq.int <- base::seq.int
[10:25:38.976]             signalCondition <- base::signalCondition
[10:25:38.976]             sys.calls <- base::sys.calls
[10:25:38.976]             `[[` <- base::`[[`
[10:25:38.976]             `+` <- base::`+`
[10:25:38.976]             `<<-` <- base::`<<-`
[10:25:38.976]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:38.976]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:38.976]                   3L)]
[10:25:38.976]             }
[10:25:38.976]             function(cond) {
[10:25:38.976]                 is_error <- inherits(cond, "error")
[10:25:38.976]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:38.976]                   NULL)
[10:25:38.976]                 if (is_error) {
[10:25:38.976]                   sessionInformation <- function() {
[10:25:38.976]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:38.976]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:38.976]                       search = base::search(), system = base::Sys.info())
[10:25:38.976]                   }
[10:25:38.976]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.976]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:38.976]                     cond$call), session = sessionInformation(), 
[10:25:38.976]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:38.976]                   signalCondition(cond)
[10:25:38.976]                 }
[10:25:38.976]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:38.976]                 "immediateCondition"))) {
[10:25:38.976]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:38.976]                   ...future.conditions[[length(...future.conditions) + 
[10:25:38.976]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:38.976]                   if (TRUE && !signal) {
[10:25:38.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.976]                     {
[10:25:38.976]                       inherits <- base::inherits
[10:25:38.976]                       invokeRestart <- base::invokeRestart
[10:25:38.976]                       is.null <- base::is.null
[10:25:38.976]                       muffled <- FALSE
[10:25:38.976]                       if (inherits(cond, "message")) {
[10:25:38.976]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.976]                         if (muffled) 
[10:25:38.976]                           invokeRestart("muffleMessage")
[10:25:38.976]                       }
[10:25:38.976]                       else if (inherits(cond, "warning")) {
[10:25:38.976]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.976]                         if (muffled) 
[10:25:38.976]                           invokeRestart("muffleWarning")
[10:25:38.976]                       }
[10:25:38.976]                       else if (inherits(cond, "condition")) {
[10:25:38.976]                         if (!is.null(pattern)) {
[10:25:38.976]                           computeRestarts <- base::computeRestarts
[10:25:38.976]                           grepl <- base::grepl
[10:25:38.976]                           restarts <- computeRestarts(cond)
[10:25:38.976]                           for (restart in restarts) {
[10:25:38.976]                             name <- restart$name
[10:25:38.976]                             if (is.null(name)) 
[10:25:38.976]                               next
[10:25:38.976]                             if (!grepl(pattern, name)) 
[10:25:38.976]                               next
[10:25:38.976]                             invokeRestart(restart)
[10:25:38.976]                             muffled <- TRUE
[10:25:38.976]                             break
[10:25:38.976]                           }
[10:25:38.976]                         }
[10:25:38.976]                       }
[10:25:38.976]                       invisible(muffled)
[10:25:38.976]                     }
[10:25:38.976]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.976]                   }
[10:25:38.976]                 }
[10:25:38.976]                 else {
[10:25:38.976]                   if (TRUE) {
[10:25:38.976]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:38.976]                     {
[10:25:38.976]                       inherits <- base::inherits
[10:25:38.976]                       invokeRestart <- base::invokeRestart
[10:25:38.976]                       is.null <- base::is.null
[10:25:38.976]                       muffled <- FALSE
[10:25:38.976]                       if (inherits(cond, "message")) {
[10:25:38.976]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:38.976]                         if (muffled) 
[10:25:38.976]                           invokeRestart("muffleMessage")
[10:25:38.976]                       }
[10:25:38.976]                       else if (inherits(cond, "warning")) {
[10:25:38.976]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:38.976]                         if (muffled) 
[10:25:38.976]                           invokeRestart("muffleWarning")
[10:25:38.976]                       }
[10:25:38.976]                       else if (inherits(cond, "condition")) {
[10:25:38.976]                         if (!is.null(pattern)) {
[10:25:38.976]                           computeRestarts <- base::computeRestarts
[10:25:38.976]                           grepl <- base::grepl
[10:25:38.976]                           restarts <- computeRestarts(cond)
[10:25:38.976]                           for (restart in restarts) {
[10:25:38.976]                             name <- restart$name
[10:25:38.976]                             if (is.null(name)) 
[10:25:38.976]                               next
[10:25:38.976]                             if (!grepl(pattern, name)) 
[10:25:38.976]                               next
[10:25:38.976]                             invokeRestart(restart)
[10:25:38.976]                             muffled <- TRUE
[10:25:38.976]                             break
[10:25:38.976]                           }
[10:25:38.976]                         }
[10:25:38.976]                       }
[10:25:38.976]                       invisible(muffled)
[10:25:38.976]                     }
[10:25:38.976]                     muffleCondition(cond, pattern = "^muffle")
[10:25:38.976]                   }
[10:25:38.976]                 }
[10:25:38.976]             }
[10:25:38.976]         }))
[10:25:38.976]     }, error = function(ex) {
[10:25:38.976]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:38.976]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:38.976]                 ...future.rng), started = ...future.startTime, 
[10:25:38.976]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:38.976]             version = "1.8"), class = "FutureResult")
[10:25:38.976]     }, finally = {
[10:25:38.976]         if (!identical(...future.workdir, getwd())) 
[10:25:38.976]             setwd(...future.workdir)
[10:25:38.976]         {
[10:25:38.976]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:38.976]                 ...future.oldOptions$nwarnings <- NULL
[10:25:38.976]             }
[10:25:38.976]             base::options(...future.oldOptions)
[10:25:38.976]             if (.Platform$OS.type == "windows") {
[10:25:38.976]                 old_names <- names(...future.oldEnvVars)
[10:25:38.976]                 envs <- base::Sys.getenv()
[10:25:38.976]                 names <- names(envs)
[10:25:38.976]                 common <- intersect(names, old_names)
[10:25:38.976]                 added <- setdiff(names, old_names)
[10:25:38.976]                 removed <- setdiff(old_names, names)
[10:25:38.976]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:38.976]                   envs[common]]
[10:25:38.976]                 NAMES <- toupper(changed)
[10:25:38.976]                 args <- list()
[10:25:38.976]                 for (kk in seq_along(NAMES)) {
[10:25:38.976]                   name <- changed[[kk]]
[10:25:38.976]                   NAME <- NAMES[[kk]]
[10:25:38.976]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.976]                     next
[10:25:38.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.976]                 }
[10:25:38.976]                 NAMES <- toupper(added)
[10:25:38.976]                 for (kk in seq_along(NAMES)) {
[10:25:38.976]                   name <- added[[kk]]
[10:25:38.976]                   NAME <- NAMES[[kk]]
[10:25:38.976]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.976]                     next
[10:25:38.976]                   args[[name]] <- ""
[10:25:38.976]                 }
[10:25:38.976]                 NAMES <- toupper(removed)
[10:25:38.976]                 for (kk in seq_along(NAMES)) {
[10:25:38.976]                   name <- removed[[kk]]
[10:25:38.976]                   NAME <- NAMES[[kk]]
[10:25:38.976]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:38.976]                     next
[10:25:38.976]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:38.976]                 }
[10:25:38.976]                 if (length(args) > 0) 
[10:25:38.976]                   base::do.call(base::Sys.setenv, args = args)
[10:25:38.976]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:38.976]             }
[10:25:38.976]             else {
[10:25:38.976]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:38.976]             }
[10:25:38.976]             {
[10:25:38.976]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:38.976]                   0L) {
[10:25:38.976]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:38.976]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:38.976]                   base::options(opts)
[10:25:38.976]                 }
[10:25:38.976]                 {
[10:25:38.976]                   {
[10:25:38.976]                     NULL
[10:25:38.976]                     RNGkind("Mersenne-Twister")
[10:25:38.976]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[10:25:38.976]                       inherits = FALSE)
[10:25:38.976]                   }
[10:25:38.976]                   options(future.plan = NULL)
[10:25:38.976]                   if (is.na(NA_character_)) 
[10:25:38.976]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:38.976]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:38.976]                   future::plan(list(function (..., envir = parent.frame()) 
[10:25:38.976]                   {
[10:25:38.976]                     future <- SequentialFuture(..., envir = envir)
[10:25:38.976]                     if (!future$lazy) 
[10:25:38.976]                       future <- run(future)
[10:25:38.976]                     invisible(future)
[10:25:38.976]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:38.976]                 }
[10:25:38.976]             }
[10:25:38.976]         }
[10:25:38.976]     })
[10:25:38.976]     if (TRUE) {
[10:25:38.976]         base::sink(type = "output", split = FALSE)
[10:25:38.976]         if (TRUE) {
[10:25:38.976]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:38.976]         }
[10:25:38.976]         else {
[10:25:38.976]             ...future.result["stdout"] <- base::list(NULL)
[10:25:38.976]         }
[10:25:38.976]         base::close(...future.stdout)
[10:25:38.976]         ...future.stdout <- NULL
[10:25:38.976]     }
[10:25:38.976]     ...future.result$conditions <- ...future.conditions
[10:25:38.976]     ...future.result$finished <- base::Sys.time()
[10:25:38.976]     ...future.result
[10:25:38.976] }
[10:25:38.978] assign_globals() ...
[10:25:38.978] List of 1
[10:25:38.978]  $ a: num 1
[10:25:38.978]  - attr(*, "where")=List of 1
[10:25:38.978]   ..$ a:<environment: R_EmptyEnv> 
[10:25:38.978]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:38.978]  - attr(*, "resolved")= logi FALSE
[10:25:38.978]  - attr(*, "total_size")= num 56
[10:25:38.978]  - attr(*, "already-done")= logi TRUE
[10:25:38.980] - copied ‘a’ to environment
[10:25:38.980] assign_globals() ... done
[10:25:38.980] plan(): Setting new future strategy stack:
[10:25:38.981] List of future strategies:
[10:25:38.981] 1. sequential:
[10:25:38.981]    - args: function (..., envir = parent.frame())
[10:25:38.981]    - tweaked: FALSE
[10:25:38.981]    - call: NULL
[10:25:38.981] plan(): nbrOfWorkers() = 1
[10:25:38.982] plan(): Setting new future strategy stack:
[10:25:38.982] List of future strategies:
[10:25:38.982] 1. sequential:
[10:25:38.982]    - args: function (..., envir = parent.frame())
[10:25:38.982]    - tweaked: FALSE
[10:25:38.982]    - call: plan(strategy)
[10:25:38.982] plan(): nbrOfWorkers() = 1
[10:25:38.982] SequentialFuture started (and completed)
[10:25:38.982] - Launch lazy future ... done
[10:25:38.982] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[10:25:38.989] plan(): Setting new future strategy stack:
[10:25:38.989] List of future strategies:
[10:25:38.989] 1. multicore:
[10:25:38.989]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:38.989]    - tweaked: FALSE
[10:25:38.989]    - call: plan(strategy)
[10:25:38.993] plan(): nbrOfWorkers() = 2
[10:25:38.993] getGlobalsAndPackages() ...
[10:25:38.993] Searching for globals...
[10:25:38.994] - globals found: [1] ‘{’
[10:25:38.994] Searching for globals ... DONE
[10:25:38.994] Resolving globals: FALSE
[10:25:38.994] 
[10:25:38.994] 
[10:25:38.994] getGlobalsAndPackages() ... DONE
[10:25:38.995] run() for ‘Future’ ...
[10:25:38.995] - state: ‘created’
[10:25:38.995] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:38.998] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:38.998] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:38.999]   - Field: ‘label’
[10:25:38.999]   - Field: ‘local’
[10:25:38.999]   - Field: ‘owner’
[10:25:38.999]   - Field: ‘envir’
[10:25:38.999]   - Field: ‘workers’
[10:25:38.999]   - Field: ‘packages’
[10:25:38.999]   - Field: ‘gc’
[10:25:38.999]   - Field: ‘job’
[10:25:38.999]   - Field: ‘conditions’
[10:25:38.999]   - Field: ‘expr’
[10:25:39.000]   - Field: ‘uuid’
[10:25:39.000]   - Field: ‘seed’
[10:25:39.000]   - Field: ‘version’
[10:25:39.000]   - Field: ‘result’
[10:25:39.000]   - Field: ‘asynchronous’
[10:25:39.000]   - Field: ‘calls’
[10:25:39.000]   - Field: ‘globals’
[10:25:39.000]   - Field: ‘stdout’
[10:25:39.000]   - Field: ‘earlySignal’
[10:25:39.000]   - Field: ‘lazy’
[10:25:39.000]   - Field: ‘state’
[10:25:39.001] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.001] - Launch lazy future ...
[10:25:39.002] Packages needed by the future expression (n = 0): <none>
[10:25:39.002] Packages needed by future strategies (n = 0): <none>
[10:25:39.002] {
[10:25:39.002]     {
[10:25:39.002]         {
[10:25:39.002]             ...future.startTime <- base::Sys.time()
[10:25:39.002]             {
[10:25:39.002]                 {
[10:25:39.002]                   {
[10:25:39.002]                     {
[10:25:39.002]                       base::local({
[10:25:39.002]                         has_future <- base::requireNamespace("future", 
[10:25:39.002]                           quietly = TRUE)
[10:25:39.002]                         if (has_future) {
[10:25:39.002]                           ns <- base::getNamespace("future")
[10:25:39.002]                           version <- ns[[".package"]][["version"]]
[10:25:39.002]                           if (is.null(version)) 
[10:25:39.002]                             version <- utils::packageVersion("future")
[10:25:39.002]                         }
[10:25:39.002]                         else {
[10:25:39.002]                           version <- NULL
[10:25:39.002]                         }
[10:25:39.002]                         if (!has_future || version < "1.8.0") {
[10:25:39.002]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.002]                             "", base::R.version$version.string), 
[10:25:39.002]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.002]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.002]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.002]                               "release", "version")], collapse = " "), 
[10:25:39.002]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.002]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.002]                             info)
[10:25:39.002]                           info <- base::paste(info, collapse = "; ")
[10:25:39.002]                           if (!has_future) {
[10:25:39.002]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.002]                               info)
[10:25:39.002]                           }
[10:25:39.002]                           else {
[10:25:39.002]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.002]                               info, version)
[10:25:39.002]                           }
[10:25:39.002]                           base::stop(msg)
[10:25:39.002]                         }
[10:25:39.002]                       })
[10:25:39.002]                     }
[10:25:39.002]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.002]                     base::options(mc.cores = 1L)
[10:25:39.002]                   }
[10:25:39.002]                   options(future.plan = NULL)
[10:25:39.002]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.002]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.002]                 }
[10:25:39.002]                 ...future.workdir <- getwd()
[10:25:39.002]             }
[10:25:39.002]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.002]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.002]         }
[10:25:39.002]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.002]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.002]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.002]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.002]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.002]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.002]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.002]             base::names(...future.oldOptions))
[10:25:39.002]     }
[10:25:39.002]     if (FALSE) {
[10:25:39.002]     }
[10:25:39.002]     else {
[10:25:39.002]         if (TRUE) {
[10:25:39.002]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.002]                 open = "w")
[10:25:39.002]         }
[10:25:39.002]         else {
[10:25:39.002]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.002]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.002]         }
[10:25:39.002]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.002]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.002]             base::sink(type = "output", split = FALSE)
[10:25:39.002]             base::close(...future.stdout)
[10:25:39.002]         }, add = TRUE)
[10:25:39.002]     }
[10:25:39.002]     ...future.frame <- base::sys.nframe()
[10:25:39.002]     ...future.conditions <- base::list()
[10:25:39.002]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.002]     if (FALSE) {
[10:25:39.002]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.002]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.002]     }
[10:25:39.002]     ...future.result <- base::tryCatch({
[10:25:39.002]         base::withCallingHandlers({
[10:25:39.002]             ...future.value <- base::withVisible(base::local({
[10:25:39.002]                 withCallingHandlers({
[10:25:39.002]                   {
[10:25:39.002]                     2
[10:25:39.002]                   }
[10:25:39.002]                 }, immediateCondition = function(cond) {
[10:25:39.002]                   save_rds <- function (object, pathname, ...) 
[10:25:39.002]                   {
[10:25:39.002]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.002]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.002]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.002]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.002]                         fi_tmp[["mtime"]])
[10:25:39.002]                     }
[10:25:39.002]                     tryCatch({
[10:25:39.002]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.002]                     }, error = function(ex) {
[10:25:39.002]                       msg <- conditionMessage(ex)
[10:25:39.002]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.002]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.002]                         fi_tmp[["mtime"]], msg)
[10:25:39.002]                       ex$message <- msg
[10:25:39.002]                       stop(ex)
[10:25:39.002]                     })
[10:25:39.002]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.002]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.002]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.002]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.002]                       fi <- file.info(pathname)
[10:25:39.002]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.002]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.002]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.002]                         fi[["size"]], fi[["mtime"]])
[10:25:39.002]                       stop(msg)
[10:25:39.002]                     }
[10:25:39.002]                     invisible(pathname)
[10:25:39.002]                   }
[10:25:39.002]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.002]                     rootPath = tempdir()) 
[10:25:39.002]                   {
[10:25:39.002]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.002]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.002]                       tmpdir = path, fileext = ".rds")
[10:25:39.002]                     save_rds(obj, file)
[10:25:39.002]                   }
[10:25:39.002]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.002]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.002]                   {
[10:25:39.002]                     inherits <- base::inherits
[10:25:39.002]                     invokeRestart <- base::invokeRestart
[10:25:39.002]                     is.null <- base::is.null
[10:25:39.002]                     muffled <- FALSE
[10:25:39.002]                     if (inherits(cond, "message")) {
[10:25:39.002]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.002]                       if (muffled) 
[10:25:39.002]                         invokeRestart("muffleMessage")
[10:25:39.002]                     }
[10:25:39.002]                     else if (inherits(cond, "warning")) {
[10:25:39.002]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.002]                       if (muffled) 
[10:25:39.002]                         invokeRestart("muffleWarning")
[10:25:39.002]                     }
[10:25:39.002]                     else if (inherits(cond, "condition")) {
[10:25:39.002]                       if (!is.null(pattern)) {
[10:25:39.002]                         computeRestarts <- base::computeRestarts
[10:25:39.002]                         grepl <- base::grepl
[10:25:39.002]                         restarts <- computeRestarts(cond)
[10:25:39.002]                         for (restart in restarts) {
[10:25:39.002]                           name <- restart$name
[10:25:39.002]                           if (is.null(name)) 
[10:25:39.002]                             next
[10:25:39.002]                           if (!grepl(pattern, name)) 
[10:25:39.002]                             next
[10:25:39.002]                           invokeRestart(restart)
[10:25:39.002]                           muffled <- TRUE
[10:25:39.002]                           break
[10:25:39.002]                         }
[10:25:39.002]                       }
[10:25:39.002]                     }
[10:25:39.002]                     invisible(muffled)
[10:25:39.002]                   }
[10:25:39.002]                   muffleCondition(cond)
[10:25:39.002]                 })
[10:25:39.002]             }))
[10:25:39.002]             future::FutureResult(value = ...future.value$value, 
[10:25:39.002]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.002]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.002]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.002]                     ...future.globalenv.names))
[10:25:39.002]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.002]         }, condition = base::local({
[10:25:39.002]             c <- base::c
[10:25:39.002]             inherits <- base::inherits
[10:25:39.002]             invokeRestart <- base::invokeRestart
[10:25:39.002]             length <- base::length
[10:25:39.002]             list <- base::list
[10:25:39.002]             seq.int <- base::seq.int
[10:25:39.002]             signalCondition <- base::signalCondition
[10:25:39.002]             sys.calls <- base::sys.calls
[10:25:39.002]             `[[` <- base::`[[`
[10:25:39.002]             `+` <- base::`+`
[10:25:39.002]             `<<-` <- base::`<<-`
[10:25:39.002]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.002]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.002]                   3L)]
[10:25:39.002]             }
[10:25:39.002]             function(cond) {
[10:25:39.002]                 is_error <- inherits(cond, "error")
[10:25:39.002]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.002]                   NULL)
[10:25:39.002]                 if (is_error) {
[10:25:39.002]                   sessionInformation <- function() {
[10:25:39.002]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.002]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.002]                       search = base::search(), system = base::Sys.info())
[10:25:39.002]                   }
[10:25:39.002]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.002]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.002]                     cond$call), session = sessionInformation(), 
[10:25:39.002]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.002]                   signalCondition(cond)
[10:25:39.002]                 }
[10:25:39.002]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.002]                 "immediateCondition"))) {
[10:25:39.002]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.002]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.002]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.002]                   if (TRUE && !signal) {
[10:25:39.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.002]                     {
[10:25:39.002]                       inherits <- base::inherits
[10:25:39.002]                       invokeRestart <- base::invokeRestart
[10:25:39.002]                       is.null <- base::is.null
[10:25:39.002]                       muffled <- FALSE
[10:25:39.002]                       if (inherits(cond, "message")) {
[10:25:39.002]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.002]                         if (muffled) 
[10:25:39.002]                           invokeRestart("muffleMessage")
[10:25:39.002]                       }
[10:25:39.002]                       else if (inherits(cond, "warning")) {
[10:25:39.002]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.002]                         if (muffled) 
[10:25:39.002]                           invokeRestart("muffleWarning")
[10:25:39.002]                       }
[10:25:39.002]                       else if (inherits(cond, "condition")) {
[10:25:39.002]                         if (!is.null(pattern)) {
[10:25:39.002]                           computeRestarts <- base::computeRestarts
[10:25:39.002]                           grepl <- base::grepl
[10:25:39.002]                           restarts <- computeRestarts(cond)
[10:25:39.002]                           for (restart in restarts) {
[10:25:39.002]                             name <- restart$name
[10:25:39.002]                             if (is.null(name)) 
[10:25:39.002]                               next
[10:25:39.002]                             if (!grepl(pattern, name)) 
[10:25:39.002]                               next
[10:25:39.002]                             invokeRestart(restart)
[10:25:39.002]                             muffled <- TRUE
[10:25:39.002]                             break
[10:25:39.002]                           }
[10:25:39.002]                         }
[10:25:39.002]                       }
[10:25:39.002]                       invisible(muffled)
[10:25:39.002]                     }
[10:25:39.002]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.002]                   }
[10:25:39.002]                 }
[10:25:39.002]                 else {
[10:25:39.002]                   if (TRUE) {
[10:25:39.002]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.002]                     {
[10:25:39.002]                       inherits <- base::inherits
[10:25:39.002]                       invokeRestart <- base::invokeRestart
[10:25:39.002]                       is.null <- base::is.null
[10:25:39.002]                       muffled <- FALSE
[10:25:39.002]                       if (inherits(cond, "message")) {
[10:25:39.002]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.002]                         if (muffled) 
[10:25:39.002]                           invokeRestart("muffleMessage")
[10:25:39.002]                       }
[10:25:39.002]                       else if (inherits(cond, "warning")) {
[10:25:39.002]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.002]                         if (muffled) 
[10:25:39.002]                           invokeRestart("muffleWarning")
[10:25:39.002]                       }
[10:25:39.002]                       else if (inherits(cond, "condition")) {
[10:25:39.002]                         if (!is.null(pattern)) {
[10:25:39.002]                           computeRestarts <- base::computeRestarts
[10:25:39.002]                           grepl <- base::grepl
[10:25:39.002]                           restarts <- computeRestarts(cond)
[10:25:39.002]                           for (restart in restarts) {
[10:25:39.002]                             name <- restart$name
[10:25:39.002]                             if (is.null(name)) 
[10:25:39.002]                               next
[10:25:39.002]                             if (!grepl(pattern, name)) 
[10:25:39.002]                               next
[10:25:39.002]                             invokeRestart(restart)
[10:25:39.002]                             muffled <- TRUE
[10:25:39.002]                             break
[10:25:39.002]                           }
[10:25:39.002]                         }
[10:25:39.002]                       }
[10:25:39.002]                       invisible(muffled)
[10:25:39.002]                     }
[10:25:39.002]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.002]                   }
[10:25:39.002]                 }
[10:25:39.002]             }
[10:25:39.002]         }))
[10:25:39.002]     }, error = function(ex) {
[10:25:39.002]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.002]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.002]                 ...future.rng), started = ...future.startTime, 
[10:25:39.002]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.002]             version = "1.8"), class = "FutureResult")
[10:25:39.002]     }, finally = {
[10:25:39.002]         if (!identical(...future.workdir, getwd())) 
[10:25:39.002]             setwd(...future.workdir)
[10:25:39.002]         {
[10:25:39.002]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.002]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.002]             }
[10:25:39.002]             base::options(...future.oldOptions)
[10:25:39.002]             if (.Platform$OS.type == "windows") {
[10:25:39.002]                 old_names <- names(...future.oldEnvVars)
[10:25:39.002]                 envs <- base::Sys.getenv()
[10:25:39.002]                 names <- names(envs)
[10:25:39.002]                 common <- intersect(names, old_names)
[10:25:39.002]                 added <- setdiff(names, old_names)
[10:25:39.002]                 removed <- setdiff(old_names, names)
[10:25:39.002]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.002]                   envs[common]]
[10:25:39.002]                 NAMES <- toupper(changed)
[10:25:39.002]                 args <- list()
[10:25:39.002]                 for (kk in seq_along(NAMES)) {
[10:25:39.002]                   name <- changed[[kk]]
[10:25:39.002]                   NAME <- NAMES[[kk]]
[10:25:39.002]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.002]                     next
[10:25:39.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.002]                 }
[10:25:39.002]                 NAMES <- toupper(added)
[10:25:39.002]                 for (kk in seq_along(NAMES)) {
[10:25:39.002]                   name <- added[[kk]]
[10:25:39.002]                   NAME <- NAMES[[kk]]
[10:25:39.002]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.002]                     next
[10:25:39.002]                   args[[name]] <- ""
[10:25:39.002]                 }
[10:25:39.002]                 NAMES <- toupper(removed)
[10:25:39.002]                 for (kk in seq_along(NAMES)) {
[10:25:39.002]                   name <- removed[[kk]]
[10:25:39.002]                   NAME <- NAMES[[kk]]
[10:25:39.002]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.002]                     next
[10:25:39.002]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.002]                 }
[10:25:39.002]                 if (length(args) > 0) 
[10:25:39.002]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.002]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.002]             }
[10:25:39.002]             else {
[10:25:39.002]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.002]             }
[10:25:39.002]             {
[10:25:39.002]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.002]                   0L) {
[10:25:39.002]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.002]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.002]                   base::options(opts)
[10:25:39.002]                 }
[10:25:39.002]                 {
[10:25:39.002]                   {
[10:25:39.002]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.002]                     NULL
[10:25:39.002]                   }
[10:25:39.002]                   options(future.plan = NULL)
[10:25:39.002]                   if (is.na(NA_character_)) 
[10:25:39.002]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.002]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.002]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.002]                     envir = parent.frame()) 
[10:25:39.002]                   {
[10:25:39.002]                     default_workers <- missing(workers)
[10:25:39.002]                     if (is.function(workers)) 
[10:25:39.002]                       workers <- workers()
[10:25:39.002]                     workers <- structure(as.integer(workers), 
[10:25:39.002]                       class = class(workers))
[10:25:39.002]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.002]                       1L)
[10:25:39.002]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.002]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.002]                       if (default_workers) 
[10:25:39.002]                         supportsMulticore(warn = TRUE)
[10:25:39.002]                       return(sequential(..., envir = envir))
[10:25:39.002]                     }
[10:25:39.002]                     oopts <- options(mc.cores = workers)
[10:25:39.002]                     on.exit(options(oopts))
[10:25:39.002]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.002]                       envir = envir)
[10:25:39.002]                     if (!future$lazy) 
[10:25:39.002]                       future <- run(future)
[10:25:39.002]                     invisible(future)
[10:25:39.002]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.002]                 }
[10:25:39.002]             }
[10:25:39.002]         }
[10:25:39.002]     })
[10:25:39.002]     if (TRUE) {
[10:25:39.002]         base::sink(type = "output", split = FALSE)
[10:25:39.002]         if (TRUE) {
[10:25:39.002]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.002]         }
[10:25:39.002]         else {
[10:25:39.002]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.002]         }
[10:25:39.002]         base::close(...future.stdout)
[10:25:39.002]         ...future.stdout <- NULL
[10:25:39.002]     }
[10:25:39.002]     ...future.result$conditions <- ...future.conditions
[10:25:39.002]     ...future.result$finished <- base::Sys.time()
[10:25:39.002]     ...future.result
[10:25:39.002] }
[10:25:39.004] requestCore(): workers = 2
[10:25:39.007] MulticoreFuture started
[10:25:39.008] - Launch lazy future ... done
[10:25:39.008] run() for ‘MulticoreFuture’ ... done
[10:25:39.008] plan(): Setting new future strategy stack:
[10:25:39.009] getGlobalsAndPackages() ...
[10:25:39.009] Searching for globals...
[10:25:39.008] List of future strategies:
[10:25:39.008] 1. sequential:
[10:25:39.008]    - args: function (..., envir = parent.frame())
[10:25:39.008]    - tweaked: FALSE
[10:25:39.008]    - call: NULL
[10:25:39.009] plan(): nbrOfWorkers() = 1
[10:25:39.011] - globals found: [1] ‘{’
[10:25:39.011] Searching for globals ... DONE
[10:25:39.011] plan(): Setting new future strategy stack:
[10:25:39.011] Resolving globals: FALSE
[10:25:39.011] List of future strategies:
[10:25:39.011] 1. multicore:
[10:25:39.011]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.011]    - tweaked: FALSE
[10:25:39.011]    - call: plan(strategy)
[10:25:39.012] 
[10:25:39.012] 
[10:25:39.012] getGlobalsAndPackages() ... DONE
[10:25:39.013] run() for ‘Future’ ...
[10:25:39.013] - state: ‘created’
[10:25:39.013] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.016] plan(): nbrOfWorkers() = 2
[10:25:39.018] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.018] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.018]   - Field: ‘label’
[10:25:39.018]   - Field: ‘local’
[10:25:39.018]   - Field: ‘owner’
[10:25:39.019]   - Field: ‘envir’
[10:25:39.019]   - Field: ‘workers’
[10:25:39.019]   - Field: ‘packages’
[10:25:39.019]   - Field: ‘gc’
[10:25:39.019]   - Field: ‘job’
[10:25:39.019]   - Field: ‘conditions’
[10:25:39.019]   - Field: ‘expr’
[10:25:39.019]   - Field: ‘uuid’
[10:25:39.020]   - Field: ‘seed’
[10:25:39.020]   - Field: ‘version’
[10:25:39.020]   - Field: ‘result’
[10:25:39.020]   - Field: ‘asynchronous’
[10:25:39.020]   - Field: ‘calls’
[10:25:39.020]   - Field: ‘globals’
[10:25:39.020]   - Field: ‘stdout’
[10:25:39.021]   - Field: ‘earlySignal’
[10:25:39.021]   - Field: ‘lazy’
[10:25:39.021]   - Field: ‘state’
[10:25:39.021] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.021] - Launch lazy future ...
[10:25:39.022] Packages needed by the future expression (n = 0): <none>
[10:25:39.022] Packages needed by future strategies (n = 0): <none>
[10:25:39.022] {
[10:25:39.022]     {
[10:25:39.022]         {
[10:25:39.022]             ...future.startTime <- base::Sys.time()
[10:25:39.022]             {
[10:25:39.022]                 {
[10:25:39.022]                   {
[10:25:39.022]                     {
[10:25:39.022]                       base::local({
[10:25:39.022]                         has_future <- base::requireNamespace("future", 
[10:25:39.022]                           quietly = TRUE)
[10:25:39.022]                         if (has_future) {
[10:25:39.022]                           ns <- base::getNamespace("future")
[10:25:39.022]                           version <- ns[[".package"]][["version"]]
[10:25:39.022]                           if (is.null(version)) 
[10:25:39.022]                             version <- utils::packageVersion("future")
[10:25:39.022]                         }
[10:25:39.022]                         else {
[10:25:39.022]                           version <- NULL
[10:25:39.022]                         }
[10:25:39.022]                         if (!has_future || version < "1.8.0") {
[10:25:39.022]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.022]                             "", base::R.version$version.string), 
[10:25:39.022]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.022]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.022]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.022]                               "release", "version")], collapse = " "), 
[10:25:39.022]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.022]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.022]                             info)
[10:25:39.022]                           info <- base::paste(info, collapse = "; ")
[10:25:39.022]                           if (!has_future) {
[10:25:39.022]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.022]                               info)
[10:25:39.022]                           }
[10:25:39.022]                           else {
[10:25:39.022]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.022]                               info, version)
[10:25:39.022]                           }
[10:25:39.022]                           base::stop(msg)
[10:25:39.022]                         }
[10:25:39.022]                       })
[10:25:39.022]                     }
[10:25:39.022]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.022]                     base::options(mc.cores = 1L)
[10:25:39.022]                   }
[10:25:39.022]                   options(future.plan = NULL)
[10:25:39.022]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.022]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.022]                 }
[10:25:39.022]                 ...future.workdir <- getwd()
[10:25:39.022]             }
[10:25:39.022]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.022]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.022]         }
[10:25:39.022]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.022]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.022]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.022]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.022]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.022]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.022]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.022]             base::names(...future.oldOptions))
[10:25:39.022]     }
[10:25:39.022]     if (FALSE) {
[10:25:39.022]     }
[10:25:39.022]     else {
[10:25:39.022]         if (TRUE) {
[10:25:39.022]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.022]                 open = "w")
[10:25:39.022]         }
[10:25:39.022]         else {
[10:25:39.022]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.022]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.022]         }
[10:25:39.022]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.022]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.022]             base::sink(type = "output", split = FALSE)
[10:25:39.022]             base::close(...future.stdout)
[10:25:39.022]         }, add = TRUE)
[10:25:39.022]     }
[10:25:39.022]     ...future.frame <- base::sys.nframe()
[10:25:39.022]     ...future.conditions <- base::list()
[10:25:39.022]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.022]     if (FALSE) {
[10:25:39.022]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.022]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.022]     }
[10:25:39.022]     ...future.result <- base::tryCatch({
[10:25:39.022]         base::withCallingHandlers({
[10:25:39.022]             ...future.value <- base::withVisible(base::local({
[10:25:39.022]                 withCallingHandlers({
[10:25:39.022]                   {
[10:25:39.022]                     4
[10:25:39.022]                   }
[10:25:39.022]                 }, immediateCondition = function(cond) {
[10:25:39.022]                   save_rds <- function (object, pathname, ...) 
[10:25:39.022]                   {
[10:25:39.022]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.022]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.022]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.022]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.022]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.022]                         fi_tmp[["mtime"]])
[10:25:39.022]                     }
[10:25:39.022]                     tryCatch({
[10:25:39.022]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.022]                     }, error = function(ex) {
[10:25:39.022]                       msg <- conditionMessage(ex)
[10:25:39.022]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.022]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.022]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.022]                         fi_tmp[["mtime"]], msg)
[10:25:39.022]                       ex$message <- msg
[10:25:39.022]                       stop(ex)
[10:25:39.022]                     })
[10:25:39.022]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.022]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.022]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.022]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.022]                       fi <- file.info(pathname)
[10:25:39.022]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.022]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.022]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.022]                         fi[["size"]], fi[["mtime"]])
[10:25:39.022]                       stop(msg)
[10:25:39.022]                     }
[10:25:39.022]                     invisible(pathname)
[10:25:39.022]                   }
[10:25:39.022]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.022]                     rootPath = tempdir()) 
[10:25:39.022]                   {
[10:25:39.022]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.022]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.022]                       tmpdir = path, fileext = ".rds")
[10:25:39.022]                     save_rds(obj, file)
[10:25:39.022]                   }
[10:25:39.022]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.022]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.022]                   {
[10:25:39.022]                     inherits <- base::inherits
[10:25:39.022]                     invokeRestart <- base::invokeRestart
[10:25:39.022]                     is.null <- base::is.null
[10:25:39.022]                     muffled <- FALSE
[10:25:39.022]                     if (inherits(cond, "message")) {
[10:25:39.022]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.022]                       if (muffled) 
[10:25:39.022]                         invokeRestart("muffleMessage")
[10:25:39.022]                     }
[10:25:39.022]                     else if (inherits(cond, "warning")) {
[10:25:39.022]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.022]                       if (muffled) 
[10:25:39.022]                         invokeRestart("muffleWarning")
[10:25:39.022]                     }
[10:25:39.022]                     else if (inherits(cond, "condition")) {
[10:25:39.022]                       if (!is.null(pattern)) {
[10:25:39.022]                         computeRestarts <- base::computeRestarts
[10:25:39.022]                         grepl <- base::grepl
[10:25:39.022]                         restarts <- computeRestarts(cond)
[10:25:39.022]                         for (restart in restarts) {
[10:25:39.022]                           name <- restart$name
[10:25:39.022]                           if (is.null(name)) 
[10:25:39.022]                             next
[10:25:39.022]                           if (!grepl(pattern, name)) 
[10:25:39.022]                             next
[10:25:39.022]                           invokeRestart(restart)
[10:25:39.022]                           muffled <- TRUE
[10:25:39.022]                           break
[10:25:39.022]                         }
[10:25:39.022]                       }
[10:25:39.022]                     }
[10:25:39.022]                     invisible(muffled)
[10:25:39.022]                   }
[10:25:39.022]                   muffleCondition(cond)
[10:25:39.022]                 })
[10:25:39.022]             }))
[10:25:39.022]             future::FutureResult(value = ...future.value$value, 
[10:25:39.022]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.022]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.022]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.022]                     ...future.globalenv.names))
[10:25:39.022]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.022]         }, condition = base::local({
[10:25:39.022]             c <- base::c
[10:25:39.022]             inherits <- base::inherits
[10:25:39.022]             invokeRestart <- base::invokeRestart
[10:25:39.022]             length <- base::length
[10:25:39.022]             list <- base::list
[10:25:39.022]             seq.int <- base::seq.int
[10:25:39.022]             signalCondition <- base::signalCondition
[10:25:39.022]             sys.calls <- base::sys.calls
[10:25:39.022]             `[[` <- base::`[[`
[10:25:39.022]             `+` <- base::`+`
[10:25:39.022]             `<<-` <- base::`<<-`
[10:25:39.022]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.022]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.022]                   3L)]
[10:25:39.022]             }
[10:25:39.022]             function(cond) {
[10:25:39.022]                 is_error <- inherits(cond, "error")
[10:25:39.022]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.022]                   NULL)
[10:25:39.022]                 if (is_error) {
[10:25:39.022]                   sessionInformation <- function() {
[10:25:39.022]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.022]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.022]                       search = base::search(), system = base::Sys.info())
[10:25:39.022]                   }
[10:25:39.022]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.022]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.022]                     cond$call), session = sessionInformation(), 
[10:25:39.022]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.022]                   signalCondition(cond)
[10:25:39.022]                 }
[10:25:39.022]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.022]                 "immediateCondition"))) {
[10:25:39.022]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.022]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.022]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.022]                   if (TRUE && !signal) {
[10:25:39.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.022]                     {
[10:25:39.022]                       inherits <- base::inherits
[10:25:39.022]                       invokeRestart <- base::invokeRestart
[10:25:39.022]                       is.null <- base::is.null
[10:25:39.022]                       muffled <- FALSE
[10:25:39.022]                       if (inherits(cond, "message")) {
[10:25:39.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.022]                         if (muffled) 
[10:25:39.022]                           invokeRestart("muffleMessage")
[10:25:39.022]                       }
[10:25:39.022]                       else if (inherits(cond, "warning")) {
[10:25:39.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.022]                         if (muffled) 
[10:25:39.022]                           invokeRestart("muffleWarning")
[10:25:39.022]                       }
[10:25:39.022]                       else if (inherits(cond, "condition")) {
[10:25:39.022]                         if (!is.null(pattern)) {
[10:25:39.022]                           computeRestarts <- base::computeRestarts
[10:25:39.022]                           grepl <- base::grepl
[10:25:39.022]                           restarts <- computeRestarts(cond)
[10:25:39.022]                           for (restart in restarts) {
[10:25:39.022]                             name <- restart$name
[10:25:39.022]                             if (is.null(name)) 
[10:25:39.022]                               next
[10:25:39.022]                             if (!grepl(pattern, name)) 
[10:25:39.022]                               next
[10:25:39.022]                             invokeRestart(restart)
[10:25:39.022]                             muffled <- TRUE
[10:25:39.022]                             break
[10:25:39.022]                           }
[10:25:39.022]                         }
[10:25:39.022]                       }
[10:25:39.022]                       invisible(muffled)
[10:25:39.022]                     }
[10:25:39.022]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.022]                   }
[10:25:39.022]                 }
[10:25:39.022]                 else {
[10:25:39.022]                   if (TRUE) {
[10:25:39.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.022]                     {
[10:25:39.022]                       inherits <- base::inherits
[10:25:39.022]                       invokeRestart <- base::invokeRestart
[10:25:39.022]                       is.null <- base::is.null
[10:25:39.022]                       muffled <- FALSE
[10:25:39.022]                       if (inherits(cond, "message")) {
[10:25:39.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.022]                         if (muffled) 
[10:25:39.022]                           invokeRestart("muffleMessage")
[10:25:39.022]                       }
[10:25:39.022]                       else if (inherits(cond, "warning")) {
[10:25:39.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.022]                         if (muffled) 
[10:25:39.022]                           invokeRestart("muffleWarning")
[10:25:39.022]                       }
[10:25:39.022]                       else if (inherits(cond, "condition")) {
[10:25:39.022]                         if (!is.null(pattern)) {
[10:25:39.022]                           computeRestarts <- base::computeRestarts
[10:25:39.022]                           grepl <- base::grepl
[10:25:39.022]                           restarts <- computeRestarts(cond)
[10:25:39.022]                           for (restart in restarts) {
[10:25:39.022]                             name <- restart$name
[10:25:39.022]                             if (is.null(name)) 
[10:25:39.022]                               next
[10:25:39.022]                             if (!grepl(pattern, name)) 
[10:25:39.022]                               next
[10:25:39.022]                             invokeRestart(restart)
[10:25:39.022]                             muffled <- TRUE
[10:25:39.022]                             break
[10:25:39.022]                           }
[10:25:39.022]                         }
[10:25:39.022]                       }
[10:25:39.022]                       invisible(muffled)
[10:25:39.022]                     }
[10:25:39.022]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.022]                   }
[10:25:39.022]                 }
[10:25:39.022]             }
[10:25:39.022]         }))
[10:25:39.022]     }, error = function(ex) {
[10:25:39.022]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.022]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.022]                 ...future.rng), started = ...future.startTime, 
[10:25:39.022]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.022]             version = "1.8"), class = "FutureResult")
[10:25:39.022]     }, finally = {
[10:25:39.022]         if (!identical(...future.workdir, getwd())) 
[10:25:39.022]             setwd(...future.workdir)
[10:25:39.022]         {
[10:25:39.022]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.022]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.022]             }
[10:25:39.022]             base::options(...future.oldOptions)
[10:25:39.022]             if (.Platform$OS.type == "windows") {
[10:25:39.022]                 old_names <- names(...future.oldEnvVars)
[10:25:39.022]                 envs <- base::Sys.getenv()
[10:25:39.022]                 names <- names(envs)
[10:25:39.022]                 common <- intersect(names, old_names)
[10:25:39.022]                 added <- setdiff(names, old_names)
[10:25:39.022]                 removed <- setdiff(old_names, names)
[10:25:39.022]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.022]                   envs[common]]
[10:25:39.022]                 NAMES <- toupper(changed)
[10:25:39.022]                 args <- list()
[10:25:39.022]                 for (kk in seq_along(NAMES)) {
[10:25:39.022]                   name <- changed[[kk]]
[10:25:39.022]                   NAME <- NAMES[[kk]]
[10:25:39.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.022]                     next
[10:25:39.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.022]                 }
[10:25:39.022]                 NAMES <- toupper(added)
[10:25:39.022]                 for (kk in seq_along(NAMES)) {
[10:25:39.022]                   name <- added[[kk]]
[10:25:39.022]                   NAME <- NAMES[[kk]]
[10:25:39.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.022]                     next
[10:25:39.022]                   args[[name]] <- ""
[10:25:39.022]                 }
[10:25:39.022]                 NAMES <- toupper(removed)
[10:25:39.022]                 for (kk in seq_along(NAMES)) {
[10:25:39.022]                   name <- removed[[kk]]
[10:25:39.022]                   NAME <- NAMES[[kk]]
[10:25:39.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.022]                     next
[10:25:39.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.022]                 }
[10:25:39.022]                 if (length(args) > 0) 
[10:25:39.022]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.022]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.022]             }
[10:25:39.022]             else {
[10:25:39.022]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.022]             }
[10:25:39.022]             {
[10:25:39.022]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.022]                   0L) {
[10:25:39.022]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.022]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.022]                   base::options(opts)
[10:25:39.022]                 }
[10:25:39.022]                 {
[10:25:39.022]                   {
[10:25:39.022]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.022]                     NULL
[10:25:39.022]                   }
[10:25:39.022]                   options(future.plan = NULL)
[10:25:39.022]                   if (is.na(NA_character_)) 
[10:25:39.022]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.022]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.022]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.022]                     envir = parent.frame()) 
[10:25:39.022]                   {
[10:25:39.022]                     default_workers <- missing(workers)
[10:25:39.022]                     if (is.function(workers)) 
[10:25:39.022]                       workers <- workers()
[10:25:39.022]                     workers <- structure(as.integer(workers), 
[10:25:39.022]                       class = class(workers))
[10:25:39.022]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.022]                       1L)
[10:25:39.022]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.022]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.022]                       if (default_workers) 
[10:25:39.022]                         supportsMulticore(warn = TRUE)
[10:25:39.022]                       return(sequential(..., envir = envir))
[10:25:39.022]                     }
[10:25:39.022]                     oopts <- options(mc.cores = workers)
[10:25:39.022]                     on.exit(options(oopts))
[10:25:39.022]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.022]                       envir = envir)
[10:25:39.022]                     if (!future$lazy) 
[10:25:39.022]                       future <- run(future)
[10:25:39.022]                     invisible(future)
[10:25:39.022]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.022]                 }
[10:25:39.022]             }
[10:25:39.022]         }
[10:25:39.022]     })
[10:25:39.022]     if (TRUE) {
[10:25:39.022]         base::sink(type = "output", split = FALSE)
[10:25:39.022]         if (TRUE) {
[10:25:39.022]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.022]         }
[10:25:39.022]         else {
[10:25:39.022]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.022]         }
[10:25:39.022]         base::close(...future.stdout)
[10:25:39.022]         ...future.stdout <- NULL
[10:25:39.022]     }
[10:25:39.022]     ...future.result$conditions <- ...future.conditions
[10:25:39.022]     ...future.result$finished <- base::Sys.time()
[10:25:39.022]     ...future.result
[10:25:39.022] }
[10:25:39.026] requestCore(): workers = 2
[10:25:39.032] MulticoreFuture started
[10:25:39.032] - Launch lazy future ... done
[10:25:39.032] run() for ‘MulticoreFuture’ ... done
[10:25:39.033] plan(): Setting new future strategy stack:
[10:25:39.034] result() for MulticoreFuture ...
[10:25:39.033] List of future strategies:
[10:25:39.033] 1. sequential:
[10:25:39.033]    - args: function (..., envir = parent.frame())
[10:25:39.033]    - tweaked: FALSE
[10:25:39.033]    - call: NULL
[10:25:39.034] plan(): nbrOfWorkers() = 1
[10:25:39.036] plan(): Setting new future strategy stack:
[10:25:39.036] result() for MulticoreFuture ...
[10:25:39.037] result() for MulticoreFuture ... done
[10:25:39.036] List of future strategies:
[10:25:39.036] 1. multicore:
[10:25:39.036]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.036]    - tweaked: FALSE
[10:25:39.036]    - call: plan(strategy)
[10:25:39.037] result() for MulticoreFuture ... done
[10:25:39.037] result() for MulticoreFuture ...
[10:25:39.037] result() for MulticoreFuture ... done
u$a = 2
[10:25:39.038] result() for MulticoreFuture ...
[10:25:39.046] plan(): nbrOfWorkers() = 2
[10:25:39.047] result() for MulticoreFuture ...
[10:25:39.047] result() for MulticoreFuture ... done
[10:25:39.050] result() for MulticoreFuture ... done
[10:25:39.050] result() for MulticoreFuture ...
[10:25:39.050] result() for MulticoreFuture ... done
v$a = 4
[10:25:39.051] getGlobalsAndPackages() ...
[10:25:39.051] Searching for globals...
[10:25:39.052] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:39.052] Searching for globals ... DONE
[10:25:39.053] Resolving globals: FALSE
[10:25:39.053] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:39.054] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:39.054] - globals: [1] ‘a’
[10:25:39.054] 
[10:25:39.054] getGlobalsAndPackages() ... DONE
[10:25:39.054] run() for ‘Future’ ...
[10:25:39.055] - state: ‘created’
[10:25:39.055] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.059] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.059] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.059]   - Field: ‘label’
[10:25:39.059]   - Field: ‘local’
[10:25:39.059]   - Field: ‘owner’
[10:25:39.059]   - Field: ‘envir’
[10:25:39.059]   - Field: ‘workers’
[10:25:39.060]   - Field: ‘packages’
[10:25:39.060]   - Field: ‘gc’
[10:25:39.060]   - Field: ‘job’
[10:25:39.060]   - Field: ‘conditions’
[10:25:39.060]   - Field: ‘expr’
[10:25:39.060]   - Field: ‘uuid’
[10:25:39.060]   - Field: ‘seed’
[10:25:39.060]   - Field: ‘version’
[10:25:39.061]   - Field: ‘result’
[10:25:39.061]   - Field: ‘asynchronous’
[10:25:39.061]   - Field: ‘calls’
[10:25:39.061]   - Field: ‘globals’
[10:25:39.061]   - Field: ‘stdout’
[10:25:39.061]   - Field: ‘earlySignal’
[10:25:39.061]   - Field: ‘lazy’
[10:25:39.061]   - Field: ‘state’
[10:25:39.062] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.062] - Launch lazy future ...
[10:25:39.062] Packages needed by the future expression (n = 0): <none>
[10:25:39.062] Packages needed by future strategies (n = 0): <none>
[10:25:39.063] {
[10:25:39.063]     {
[10:25:39.063]         {
[10:25:39.063]             ...future.startTime <- base::Sys.time()
[10:25:39.063]             {
[10:25:39.063]                 {
[10:25:39.063]                   {
[10:25:39.063]                     {
[10:25:39.063]                       base::local({
[10:25:39.063]                         has_future <- base::requireNamespace("future", 
[10:25:39.063]                           quietly = TRUE)
[10:25:39.063]                         if (has_future) {
[10:25:39.063]                           ns <- base::getNamespace("future")
[10:25:39.063]                           version <- ns[[".package"]][["version"]]
[10:25:39.063]                           if (is.null(version)) 
[10:25:39.063]                             version <- utils::packageVersion("future")
[10:25:39.063]                         }
[10:25:39.063]                         else {
[10:25:39.063]                           version <- NULL
[10:25:39.063]                         }
[10:25:39.063]                         if (!has_future || version < "1.8.0") {
[10:25:39.063]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.063]                             "", base::R.version$version.string), 
[10:25:39.063]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.063]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.063]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.063]                               "release", "version")], collapse = " "), 
[10:25:39.063]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.063]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.063]                             info)
[10:25:39.063]                           info <- base::paste(info, collapse = "; ")
[10:25:39.063]                           if (!has_future) {
[10:25:39.063]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.063]                               info)
[10:25:39.063]                           }
[10:25:39.063]                           else {
[10:25:39.063]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.063]                               info, version)
[10:25:39.063]                           }
[10:25:39.063]                           base::stop(msg)
[10:25:39.063]                         }
[10:25:39.063]                       })
[10:25:39.063]                     }
[10:25:39.063]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.063]                     base::options(mc.cores = 1L)
[10:25:39.063]                   }
[10:25:39.063]                   options(future.plan = NULL)
[10:25:39.063]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.063]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.063]                 }
[10:25:39.063]                 ...future.workdir <- getwd()
[10:25:39.063]             }
[10:25:39.063]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.063]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.063]         }
[10:25:39.063]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.063]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.063]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.063]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.063]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.063]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.063]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.063]             base::names(...future.oldOptions))
[10:25:39.063]     }
[10:25:39.063]     if (FALSE) {
[10:25:39.063]     }
[10:25:39.063]     else {
[10:25:39.063]         if (TRUE) {
[10:25:39.063]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.063]                 open = "w")
[10:25:39.063]         }
[10:25:39.063]         else {
[10:25:39.063]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.063]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.063]         }
[10:25:39.063]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.063]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.063]             base::sink(type = "output", split = FALSE)
[10:25:39.063]             base::close(...future.stdout)
[10:25:39.063]         }, add = TRUE)
[10:25:39.063]     }
[10:25:39.063]     ...future.frame <- base::sys.nframe()
[10:25:39.063]     ...future.conditions <- base::list()
[10:25:39.063]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.063]     if (FALSE) {
[10:25:39.063]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.063]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.063]     }
[10:25:39.063]     ...future.result <- base::tryCatch({
[10:25:39.063]         base::withCallingHandlers({
[10:25:39.063]             ...future.value <- base::withVisible(base::local({
[10:25:39.063]                 withCallingHandlers({
[10:25:39.063]                   {
[10:25:39.063]                     2 * a
[10:25:39.063]                   }
[10:25:39.063]                 }, immediateCondition = function(cond) {
[10:25:39.063]                   save_rds <- function (object, pathname, ...) 
[10:25:39.063]                   {
[10:25:39.063]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.063]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.063]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.063]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.063]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.063]                         fi_tmp[["mtime"]])
[10:25:39.063]                     }
[10:25:39.063]                     tryCatch({
[10:25:39.063]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.063]                     }, error = function(ex) {
[10:25:39.063]                       msg <- conditionMessage(ex)
[10:25:39.063]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.063]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.063]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.063]                         fi_tmp[["mtime"]], msg)
[10:25:39.063]                       ex$message <- msg
[10:25:39.063]                       stop(ex)
[10:25:39.063]                     })
[10:25:39.063]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.063]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.063]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.063]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.063]                       fi <- file.info(pathname)
[10:25:39.063]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.063]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.063]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.063]                         fi[["size"]], fi[["mtime"]])
[10:25:39.063]                       stop(msg)
[10:25:39.063]                     }
[10:25:39.063]                     invisible(pathname)
[10:25:39.063]                   }
[10:25:39.063]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.063]                     rootPath = tempdir()) 
[10:25:39.063]                   {
[10:25:39.063]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.063]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.063]                       tmpdir = path, fileext = ".rds")
[10:25:39.063]                     save_rds(obj, file)
[10:25:39.063]                   }
[10:25:39.063]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.063]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.063]                   {
[10:25:39.063]                     inherits <- base::inherits
[10:25:39.063]                     invokeRestart <- base::invokeRestart
[10:25:39.063]                     is.null <- base::is.null
[10:25:39.063]                     muffled <- FALSE
[10:25:39.063]                     if (inherits(cond, "message")) {
[10:25:39.063]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.063]                       if (muffled) 
[10:25:39.063]                         invokeRestart("muffleMessage")
[10:25:39.063]                     }
[10:25:39.063]                     else if (inherits(cond, "warning")) {
[10:25:39.063]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.063]                       if (muffled) 
[10:25:39.063]                         invokeRestart("muffleWarning")
[10:25:39.063]                     }
[10:25:39.063]                     else if (inherits(cond, "condition")) {
[10:25:39.063]                       if (!is.null(pattern)) {
[10:25:39.063]                         computeRestarts <- base::computeRestarts
[10:25:39.063]                         grepl <- base::grepl
[10:25:39.063]                         restarts <- computeRestarts(cond)
[10:25:39.063]                         for (restart in restarts) {
[10:25:39.063]                           name <- restart$name
[10:25:39.063]                           if (is.null(name)) 
[10:25:39.063]                             next
[10:25:39.063]                           if (!grepl(pattern, name)) 
[10:25:39.063]                             next
[10:25:39.063]                           invokeRestart(restart)
[10:25:39.063]                           muffled <- TRUE
[10:25:39.063]                           break
[10:25:39.063]                         }
[10:25:39.063]                       }
[10:25:39.063]                     }
[10:25:39.063]                     invisible(muffled)
[10:25:39.063]                   }
[10:25:39.063]                   muffleCondition(cond)
[10:25:39.063]                 })
[10:25:39.063]             }))
[10:25:39.063]             future::FutureResult(value = ...future.value$value, 
[10:25:39.063]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.063]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.063]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.063]                     ...future.globalenv.names))
[10:25:39.063]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.063]         }, condition = base::local({
[10:25:39.063]             c <- base::c
[10:25:39.063]             inherits <- base::inherits
[10:25:39.063]             invokeRestart <- base::invokeRestart
[10:25:39.063]             length <- base::length
[10:25:39.063]             list <- base::list
[10:25:39.063]             seq.int <- base::seq.int
[10:25:39.063]             signalCondition <- base::signalCondition
[10:25:39.063]             sys.calls <- base::sys.calls
[10:25:39.063]             `[[` <- base::`[[`
[10:25:39.063]             `+` <- base::`+`
[10:25:39.063]             `<<-` <- base::`<<-`
[10:25:39.063]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.063]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.063]                   3L)]
[10:25:39.063]             }
[10:25:39.063]             function(cond) {
[10:25:39.063]                 is_error <- inherits(cond, "error")
[10:25:39.063]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.063]                   NULL)
[10:25:39.063]                 if (is_error) {
[10:25:39.063]                   sessionInformation <- function() {
[10:25:39.063]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.063]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.063]                       search = base::search(), system = base::Sys.info())
[10:25:39.063]                   }
[10:25:39.063]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.063]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.063]                     cond$call), session = sessionInformation(), 
[10:25:39.063]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.063]                   signalCondition(cond)
[10:25:39.063]                 }
[10:25:39.063]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.063]                 "immediateCondition"))) {
[10:25:39.063]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.063]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.063]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.063]                   if (TRUE && !signal) {
[10:25:39.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.063]                     {
[10:25:39.063]                       inherits <- base::inherits
[10:25:39.063]                       invokeRestart <- base::invokeRestart
[10:25:39.063]                       is.null <- base::is.null
[10:25:39.063]                       muffled <- FALSE
[10:25:39.063]                       if (inherits(cond, "message")) {
[10:25:39.063]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.063]                         if (muffled) 
[10:25:39.063]                           invokeRestart("muffleMessage")
[10:25:39.063]                       }
[10:25:39.063]                       else if (inherits(cond, "warning")) {
[10:25:39.063]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.063]                         if (muffled) 
[10:25:39.063]                           invokeRestart("muffleWarning")
[10:25:39.063]                       }
[10:25:39.063]                       else if (inherits(cond, "condition")) {
[10:25:39.063]                         if (!is.null(pattern)) {
[10:25:39.063]                           computeRestarts <- base::computeRestarts
[10:25:39.063]                           grepl <- base::grepl
[10:25:39.063]                           restarts <- computeRestarts(cond)
[10:25:39.063]                           for (restart in restarts) {
[10:25:39.063]                             name <- restart$name
[10:25:39.063]                             if (is.null(name)) 
[10:25:39.063]                               next
[10:25:39.063]                             if (!grepl(pattern, name)) 
[10:25:39.063]                               next
[10:25:39.063]                             invokeRestart(restart)
[10:25:39.063]                             muffled <- TRUE
[10:25:39.063]                             break
[10:25:39.063]                           }
[10:25:39.063]                         }
[10:25:39.063]                       }
[10:25:39.063]                       invisible(muffled)
[10:25:39.063]                     }
[10:25:39.063]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.063]                   }
[10:25:39.063]                 }
[10:25:39.063]                 else {
[10:25:39.063]                   if (TRUE) {
[10:25:39.063]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.063]                     {
[10:25:39.063]                       inherits <- base::inherits
[10:25:39.063]                       invokeRestart <- base::invokeRestart
[10:25:39.063]                       is.null <- base::is.null
[10:25:39.063]                       muffled <- FALSE
[10:25:39.063]                       if (inherits(cond, "message")) {
[10:25:39.063]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.063]                         if (muffled) 
[10:25:39.063]                           invokeRestart("muffleMessage")
[10:25:39.063]                       }
[10:25:39.063]                       else if (inherits(cond, "warning")) {
[10:25:39.063]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.063]                         if (muffled) 
[10:25:39.063]                           invokeRestart("muffleWarning")
[10:25:39.063]                       }
[10:25:39.063]                       else if (inherits(cond, "condition")) {
[10:25:39.063]                         if (!is.null(pattern)) {
[10:25:39.063]                           computeRestarts <- base::computeRestarts
[10:25:39.063]                           grepl <- base::grepl
[10:25:39.063]                           restarts <- computeRestarts(cond)
[10:25:39.063]                           for (restart in restarts) {
[10:25:39.063]                             name <- restart$name
[10:25:39.063]                             if (is.null(name)) 
[10:25:39.063]                               next
[10:25:39.063]                             if (!grepl(pattern, name)) 
[10:25:39.063]                               next
[10:25:39.063]                             invokeRestart(restart)
[10:25:39.063]                             muffled <- TRUE
[10:25:39.063]                             break
[10:25:39.063]                           }
[10:25:39.063]                         }
[10:25:39.063]                       }
[10:25:39.063]                       invisible(muffled)
[10:25:39.063]                     }
[10:25:39.063]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.063]                   }
[10:25:39.063]                 }
[10:25:39.063]             }
[10:25:39.063]         }))
[10:25:39.063]     }, error = function(ex) {
[10:25:39.063]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.063]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.063]                 ...future.rng), started = ...future.startTime, 
[10:25:39.063]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.063]             version = "1.8"), class = "FutureResult")
[10:25:39.063]     }, finally = {
[10:25:39.063]         if (!identical(...future.workdir, getwd())) 
[10:25:39.063]             setwd(...future.workdir)
[10:25:39.063]         {
[10:25:39.063]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.063]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.063]             }
[10:25:39.063]             base::options(...future.oldOptions)
[10:25:39.063]             if (.Platform$OS.type == "windows") {
[10:25:39.063]                 old_names <- names(...future.oldEnvVars)
[10:25:39.063]                 envs <- base::Sys.getenv()
[10:25:39.063]                 names <- names(envs)
[10:25:39.063]                 common <- intersect(names, old_names)
[10:25:39.063]                 added <- setdiff(names, old_names)
[10:25:39.063]                 removed <- setdiff(old_names, names)
[10:25:39.063]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.063]                   envs[common]]
[10:25:39.063]                 NAMES <- toupper(changed)
[10:25:39.063]                 args <- list()
[10:25:39.063]                 for (kk in seq_along(NAMES)) {
[10:25:39.063]                   name <- changed[[kk]]
[10:25:39.063]                   NAME <- NAMES[[kk]]
[10:25:39.063]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.063]                     next
[10:25:39.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.063]                 }
[10:25:39.063]                 NAMES <- toupper(added)
[10:25:39.063]                 for (kk in seq_along(NAMES)) {
[10:25:39.063]                   name <- added[[kk]]
[10:25:39.063]                   NAME <- NAMES[[kk]]
[10:25:39.063]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.063]                     next
[10:25:39.063]                   args[[name]] <- ""
[10:25:39.063]                 }
[10:25:39.063]                 NAMES <- toupper(removed)
[10:25:39.063]                 for (kk in seq_along(NAMES)) {
[10:25:39.063]                   name <- removed[[kk]]
[10:25:39.063]                   NAME <- NAMES[[kk]]
[10:25:39.063]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.063]                     next
[10:25:39.063]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.063]                 }
[10:25:39.063]                 if (length(args) > 0) 
[10:25:39.063]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.063]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.063]             }
[10:25:39.063]             else {
[10:25:39.063]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.063]             }
[10:25:39.063]             {
[10:25:39.063]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.063]                   0L) {
[10:25:39.063]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.063]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.063]                   base::options(opts)
[10:25:39.063]                 }
[10:25:39.063]                 {
[10:25:39.063]                   {
[10:25:39.063]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.063]                     NULL
[10:25:39.063]                   }
[10:25:39.063]                   options(future.plan = NULL)
[10:25:39.063]                   if (is.na(NA_character_)) 
[10:25:39.063]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.063]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.063]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.063]                     envir = parent.frame()) 
[10:25:39.063]                   {
[10:25:39.063]                     default_workers <- missing(workers)
[10:25:39.063]                     if (is.function(workers)) 
[10:25:39.063]                       workers <- workers()
[10:25:39.063]                     workers <- structure(as.integer(workers), 
[10:25:39.063]                       class = class(workers))
[10:25:39.063]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.063]                       1L)
[10:25:39.063]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.063]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.063]                       if (default_workers) 
[10:25:39.063]                         supportsMulticore(warn = TRUE)
[10:25:39.063]                       return(sequential(..., envir = envir))
[10:25:39.063]                     }
[10:25:39.063]                     oopts <- options(mc.cores = workers)
[10:25:39.063]                     on.exit(options(oopts))
[10:25:39.063]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.063]                       envir = envir)
[10:25:39.063]                     if (!future$lazy) 
[10:25:39.063]                       future <- run(future)
[10:25:39.063]                     invisible(future)
[10:25:39.063]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.063]                 }
[10:25:39.063]             }
[10:25:39.063]         }
[10:25:39.063]     })
[10:25:39.063]     if (TRUE) {
[10:25:39.063]         base::sink(type = "output", split = FALSE)
[10:25:39.063]         if (TRUE) {
[10:25:39.063]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.063]         }
[10:25:39.063]         else {
[10:25:39.063]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.063]         }
[10:25:39.063]         base::close(...future.stdout)
[10:25:39.063]         ...future.stdout <- NULL
[10:25:39.063]     }
[10:25:39.063]     ...future.result$conditions <- ...future.conditions
[10:25:39.063]     ...future.result$finished <- base::Sys.time()
[10:25:39.063]     ...future.result
[10:25:39.063] }
[10:25:39.065] assign_globals() ...
[10:25:39.065] List of 1
[10:25:39.065]  $ a: num 1
[10:25:39.065]  - attr(*, "where")=List of 1
[10:25:39.065]   ..$ a:<environment: R_EmptyEnv> 
[10:25:39.065]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:39.065]  - attr(*, "resolved")= logi FALSE
[10:25:39.065]  - attr(*, "total_size")= num 56
[10:25:39.065]  - attr(*, "already-done")= logi TRUE
[10:25:39.068] - copied ‘a’ to environment
[10:25:39.068] assign_globals() ... done
[10:25:39.069] requestCore(): workers = 2
[10:25:39.071] MulticoreFuture started
[10:25:39.071] - Launch lazy future ... done
[10:25:39.071] run() for ‘MulticoreFuture’ ... done
[10:25:39.072] result() for MulticoreFuture ...
[10:25:39.072] plan(): Setting new future strategy stack:
[10:25:39.072] List of future strategies:
[10:25:39.072] 1. sequential:
[10:25:39.072]    - args: function (..., envir = parent.frame())
[10:25:39.072]    - tweaked: FALSE
[10:25:39.072]    - call: NULL
[10:25:39.073] plan(): nbrOfWorkers() = 1
[10:25:39.075] plan(): Setting new future strategy stack:
[10:25:39.075] List of future strategies:
[10:25:39.075] 1. multicore:
[10:25:39.075]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.075]    - tweaked: FALSE
[10:25:39.075]    - call: plan(strategy)
[10:25:39.080] plan(): nbrOfWorkers() = 2
[10:25:39.081] result() for MulticoreFuture ...
[10:25:39.081] result() for MulticoreFuture ... done
[10:25:39.081] result() for MulticoreFuture ... done
[10:25:39.081] result() for MulticoreFuture ...
[10:25:39.081] result() for MulticoreFuture ... done
[10:25:39.082] getGlobalsAndPackages() ...
[10:25:39.082] Searching for globals...
[10:25:39.083] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:39.083] Searching for globals ... DONE
[10:25:39.084] Resolving globals: FALSE
[10:25:39.084] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:39.085] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:39.085] - globals: [1] ‘a’
[10:25:39.085] 
[10:25:39.085] getGlobalsAndPackages() ... DONE
[10:25:39.085] run() for ‘Future’ ...
[10:25:39.085] - state: ‘created’
[10:25:39.086] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.090] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.090] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.090]   - Field: ‘label’
[10:25:39.090]   - Field: ‘local’
[10:25:39.090]   - Field: ‘owner’
[10:25:39.090]   - Field: ‘envir’
[10:25:39.090]   - Field: ‘workers’
[10:25:39.090]   - Field: ‘packages’
[10:25:39.091]   - Field: ‘gc’
[10:25:39.091]   - Field: ‘job’
[10:25:39.091]   - Field: ‘conditions’
[10:25:39.091]   - Field: ‘expr’
[10:25:39.091]   - Field: ‘uuid’
[10:25:39.091]   - Field: ‘seed’
[10:25:39.091]   - Field: ‘version’
[10:25:39.091]   - Field: ‘result’
[10:25:39.091]   - Field: ‘asynchronous’
[10:25:39.092]   - Field: ‘calls’
[10:25:39.092]   - Field: ‘globals’
[10:25:39.092]   - Field: ‘stdout’
[10:25:39.092]   - Field: ‘earlySignal’
[10:25:39.092]   - Field: ‘lazy’
[10:25:39.092]   - Field: ‘state’
[10:25:39.092] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.092] - Launch lazy future ...
[10:25:39.093] Packages needed by the future expression (n = 0): <none>
[10:25:39.093] Packages needed by future strategies (n = 0): <none>
[10:25:39.093] {
[10:25:39.093]     {
[10:25:39.093]         {
[10:25:39.093]             ...future.startTime <- base::Sys.time()
[10:25:39.093]             {
[10:25:39.093]                 {
[10:25:39.093]                   {
[10:25:39.093]                     {
[10:25:39.093]                       base::local({
[10:25:39.093]                         has_future <- base::requireNamespace("future", 
[10:25:39.093]                           quietly = TRUE)
[10:25:39.093]                         if (has_future) {
[10:25:39.093]                           ns <- base::getNamespace("future")
[10:25:39.093]                           version <- ns[[".package"]][["version"]]
[10:25:39.093]                           if (is.null(version)) 
[10:25:39.093]                             version <- utils::packageVersion("future")
[10:25:39.093]                         }
[10:25:39.093]                         else {
[10:25:39.093]                           version <- NULL
[10:25:39.093]                         }
[10:25:39.093]                         if (!has_future || version < "1.8.0") {
[10:25:39.093]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.093]                             "", base::R.version$version.string), 
[10:25:39.093]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.093]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.093]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.093]                               "release", "version")], collapse = " "), 
[10:25:39.093]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.093]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.093]                             info)
[10:25:39.093]                           info <- base::paste(info, collapse = "; ")
[10:25:39.093]                           if (!has_future) {
[10:25:39.093]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.093]                               info)
[10:25:39.093]                           }
[10:25:39.093]                           else {
[10:25:39.093]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.093]                               info, version)
[10:25:39.093]                           }
[10:25:39.093]                           base::stop(msg)
[10:25:39.093]                         }
[10:25:39.093]                       })
[10:25:39.093]                     }
[10:25:39.093]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.093]                     base::options(mc.cores = 1L)
[10:25:39.093]                   }
[10:25:39.093]                   options(future.plan = NULL)
[10:25:39.093]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.093]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.093]                 }
[10:25:39.093]                 ...future.workdir <- getwd()
[10:25:39.093]             }
[10:25:39.093]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.093]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.093]         }
[10:25:39.093]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.093]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.093]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.093]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.093]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.093]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.093]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.093]             base::names(...future.oldOptions))
[10:25:39.093]     }
[10:25:39.093]     if (FALSE) {
[10:25:39.093]     }
[10:25:39.093]     else {
[10:25:39.093]         if (TRUE) {
[10:25:39.093]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.093]                 open = "w")
[10:25:39.093]         }
[10:25:39.093]         else {
[10:25:39.093]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.093]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.093]         }
[10:25:39.093]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.093]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.093]             base::sink(type = "output", split = FALSE)
[10:25:39.093]             base::close(...future.stdout)
[10:25:39.093]         }, add = TRUE)
[10:25:39.093]     }
[10:25:39.093]     ...future.frame <- base::sys.nframe()
[10:25:39.093]     ...future.conditions <- base::list()
[10:25:39.093]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.093]     if (FALSE) {
[10:25:39.093]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.093]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.093]     }
[10:25:39.093]     ...future.result <- base::tryCatch({
[10:25:39.093]         base::withCallingHandlers({
[10:25:39.093]             ...future.value <- base::withVisible(base::local({
[10:25:39.093]                 withCallingHandlers({
[10:25:39.093]                   {
[10:25:39.093]                     2 * a
[10:25:39.093]                   }
[10:25:39.093]                 }, immediateCondition = function(cond) {
[10:25:39.093]                   save_rds <- function (object, pathname, ...) 
[10:25:39.093]                   {
[10:25:39.093]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.093]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.093]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.093]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.093]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.093]                         fi_tmp[["mtime"]])
[10:25:39.093]                     }
[10:25:39.093]                     tryCatch({
[10:25:39.093]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.093]                     }, error = function(ex) {
[10:25:39.093]                       msg <- conditionMessage(ex)
[10:25:39.093]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.093]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.093]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.093]                         fi_tmp[["mtime"]], msg)
[10:25:39.093]                       ex$message <- msg
[10:25:39.093]                       stop(ex)
[10:25:39.093]                     })
[10:25:39.093]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.093]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.093]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.093]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.093]                       fi <- file.info(pathname)
[10:25:39.093]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.093]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.093]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.093]                         fi[["size"]], fi[["mtime"]])
[10:25:39.093]                       stop(msg)
[10:25:39.093]                     }
[10:25:39.093]                     invisible(pathname)
[10:25:39.093]                   }
[10:25:39.093]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.093]                     rootPath = tempdir()) 
[10:25:39.093]                   {
[10:25:39.093]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.093]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.093]                       tmpdir = path, fileext = ".rds")
[10:25:39.093]                     save_rds(obj, file)
[10:25:39.093]                   }
[10:25:39.093]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.093]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.093]                   {
[10:25:39.093]                     inherits <- base::inherits
[10:25:39.093]                     invokeRestart <- base::invokeRestart
[10:25:39.093]                     is.null <- base::is.null
[10:25:39.093]                     muffled <- FALSE
[10:25:39.093]                     if (inherits(cond, "message")) {
[10:25:39.093]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.093]                       if (muffled) 
[10:25:39.093]                         invokeRestart("muffleMessage")
[10:25:39.093]                     }
[10:25:39.093]                     else if (inherits(cond, "warning")) {
[10:25:39.093]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.093]                       if (muffled) 
[10:25:39.093]                         invokeRestart("muffleWarning")
[10:25:39.093]                     }
[10:25:39.093]                     else if (inherits(cond, "condition")) {
[10:25:39.093]                       if (!is.null(pattern)) {
[10:25:39.093]                         computeRestarts <- base::computeRestarts
[10:25:39.093]                         grepl <- base::grepl
[10:25:39.093]                         restarts <- computeRestarts(cond)
[10:25:39.093]                         for (restart in restarts) {
[10:25:39.093]                           name <- restart$name
[10:25:39.093]                           if (is.null(name)) 
[10:25:39.093]                             next
[10:25:39.093]                           if (!grepl(pattern, name)) 
[10:25:39.093]                             next
[10:25:39.093]                           invokeRestart(restart)
[10:25:39.093]                           muffled <- TRUE
[10:25:39.093]                           break
[10:25:39.093]                         }
[10:25:39.093]                       }
[10:25:39.093]                     }
[10:25:39.093]                     invisible(muffled)
[10:25:39.093]                   }
[10:25:39.093]                   muffleCondition(cond)
[10:25:39.093]                 })
[10:25:39.093]             }))
[10:25:39.093]             future::FutureResult(value = ...future.value$value, 
[10:25:39.093]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.093]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.093]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.093]                     ...future.globalenv.names))
[10:25:39.093]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.093]         }, condition = base::local({
[10:25:39.093]             c <- base::c
[10:25:39.093]             inherits <- base::inherits
[10:25:39.093]             invokeRestart <- base::invokeRestart
[10:25:39.093]             length <- base::length
[10:25:39.093]             list <- base::list
[10:25:39.093]             seq.int <- base::seq.int
[10:25:39.093]             signalCondition <- base::signalCondition
[10:25:39.093]             sys.calls <- base::sys.calls
[10:25:39.093]             `[[` <- base::`[[`
[10:25:39.093]             `+` <- base::`+`
[10:25:39.093]             `<<-` <- base::`<<-`
[10:25:39.093]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.093]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.093]                   3L)]
[10:25:39.093]             }
[10:25:39.093]             function(cond) {
[10:25:39.093]                 is_error <- inherits(cond, "error")
[10:25:39.093]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.093]                   NULL)
[10:25:39.093]                 if (is_error) {
[10:25:39.093]                   sessionInformation <- function() {
[10:25:39.093]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.093]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.093]                       search = base::search(), system = base::Sys.info())
[10:25:39.093]                   }
[10:25:39.093]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.093]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.093]                     cond$call), session = sessionInformation(), 
[10:25:39.093]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.093]                   signalCondition(cond)
[10:25:39.093]                 }
[10:25:39.093]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.093]                 "immediateCondition"))) {
[10:25:39.093]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.093]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.093]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.093]                   if (TRUE && !signal) {
[10:25:39.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.093]                     {
[10:25:39.093]                       inherits <- base::inherits
[10:25:39.093]                       invokeRestart <- base::invokeRestart
[10:25:39.093]                       is.null <- base::is.null
[10:25:39.093]                       muffled <- FALSE
[10:25:39.093]                       if (inherits(cond, "message")) {
[10:25:39.093]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.093]                         if (muffled) 
[10:25:39.093]                           invokeRestart("muffleMessage")
[10:25:39.093]                       }
[10:25:39.093]                       else if (inherits(cond, "warning")) {
[10:25:39.093]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.093]                         if (muffled) 
[10:25:39.093]                           invokeRestart("muffleWarning")
[10:25:39.093]                       }
[10:25:39.093]                       else if (inherits(cond, "condition")) {
[10:25:39.093]                         if (!is.null(pattern)) {
[10:25:39.093]                           computeRestarts <- base::computeRestarts
[10:25:39.093]                           grepl <- base::grepl
[10:25:39.093]                           restarts <- computeRestarts(cond)
[10:25:39.093]                           for (restart in restarts) {
[10:25:39.093]                             name <- restart$name
[10:25:39.093]                             if (is.null(name)) 
[10:25:39.093]                               next
[10:25:39.093]                             if (!grepl(pattern, name)) 
[10:25:39.093]                               next
[10:25:39.093]                             invokeRestart(restart)
[10:25:39.093]                             muffled <- TRUE
[10:25:39.093]                             break
[10:25:39.093]                           }
[10:25:39.093]                         }
[10:25:39.093]                       }
[10:25:39.093]                       invisible(muffled)
[10:25:39.093]                     }
[10:25:39.093]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.093]                   }
[10:25:39.093]                 }
[10:25:39.093]                 else {
[10:25:39.093]                   if (TRUE) {
[10:25:39.093]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.093]                     {
[10:25:39.093]                       inherits <- base::inherits
[10:25:39.093]                       invokeRestart <- base::invokeRestart
[10:25:39.093]                       is.null <- base::is.null
[10:25:39.093]                       muffled <- FALSE
[10:25:39.093]                       if (inherits(cond, "message")) {
[10:25:39.093]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.093]                         if (muffled) 
[10:25:39.093]                           invokeRestart("muffleMessage")
[10:25:39.093]                       }
[10:25:39.093]                       else if (inherits(cond, "warning")) {
[10:25:39.093]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.093]                         if (muffled) 
[10:25:39.093]                           invokeRestart("muffleWarning")
[10:25:39.093]                       }
[10:25:39.093]                       else if (inherits(cond, "condition")) {
[10:25:39.093]                         if (!is.null(pattern)) {
[10:25:39.093]                           computeRestarts <- base::computeRestarts
[10:25:39.093]                           grepl <- base::grepl
[10:25:39.093]                           restarts <- computeRestarts(cond)
[10:25:39.093]                           for (restart in restarts) {
[10:25:39.093]                             name <- restart$name
[10:25:39.093]                             if (is.null(name)) 
[10:25:39.093]                               next
[10:25:39.093]                             if (!grepl(pattern, name)) 
[10:25:39.093]                               next
[10:25:39.093]                             invokeRestart(restart)
[10:25:39.093]                             muffled <- TRUE
[10:25:39.093]                             break
[10:25:39.093]                           }
[10:25:39.093]                         }
[10:25:39.093]                       }
[10:25:39.093]                       invisible(muffled)
[10:25:39.093]                     }
[10:25:39.093]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.093]                   }
[10:25:39.093]                 }
[10:25:39.093]             }
[10:25:39.093]         }))
[10:25:39.093]     }, error = function(ex) {
[10:25:39.093]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.093]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.093]                 ...future.rng), started = ...future.startTime, 
[10:25:39.093]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.093]             version = "1.8"), class = "FutureResult")
[10:25:39.093]     }, finally = {
[10:25:39.093]         if (!identical(...future.workdir, getwd())) 
[10:25:39.093]             setwd(...future.workdir)
[10:25:39.093]         {
[10:25:39.093]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.093]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.093]             }
[10:25:39.093]             base::options(...future.oldOptions)
[10:25:39.093]             if (.Platform$OS.type == "windows") {
[10:25:39.093]                 old_names <- names(...future.oldEnvVars)
[10:25:39.093]                 envs <- base::Sys.getenv()
[10:25:39.093]                 names <- names(envs)
[10:25:39.093]                 common <- intersect(names, old_names)
[10:25:39.093]                 added <- setdiff(names, old_names)
[10:25:39.093]                 removed <- setdiff(old_names, names)
[10:25:39.093]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.093]                   envs[common]]
[10:25:39.093]                 NAMES <- toupper(changed)
[10:25:39.093]                 args <- list()
[10:25:39.093]                 for (kk in seq_along(NAMES)) {
[10:25:39.093]                   name <- changed[[kk]]
[10:25:39.093]                   NAME <- NAMES[[kk]]
[10:25:39.093]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.093]                     next
[10:25:39.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.093]                 }
[10:25:39.093]                 NAMES <- toupper(added)
[10:25:39.093]                 for (kk in seq_along(NAMES)) {
[10:25:39.093]                   name <- added[[kk]]
[10:25:39.093]                   NAME <- NAMES[[kk]]
[10:25:39.093]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.093]                     next
[10:25:39.093]                   args[[name]] <- ""
[10:25:39.093]                 }
[10:25:39.093]                 NAMES <- toupper(removed)
[10:25:39.093]                 for (kk in seq_along(NAMES)) {
[10:25:39.093]                   name <- removed[[kk]]
[10:25:39.093]                   NAME <- NAMES[[kk]]
[10:25:39.093]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.093]                     next
[10:25:39.093]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.093]                 }
[10:25:39.093]                 if (length(args) > 0) 
[10:25:39.093]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.093]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.093]             }
[10:25:39.093]             else {
[10:25:39.093]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.093]             }
[10:25:39.093]             {
[10:25:39.093]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.093]                   0L) {
[10:25:39.093]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.093]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.093]                   base::options(opts)
[10:25:39.093]                 }
[10:25:39.093]                 {
[10:25:39.093]                   {
[10:25:39.093]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.093]                     NULL
[10:25:39.093]                   }
[10:25:39.093]                   options(future.plan = NULL)
[10:25:39.093]                   if (is.na(NA_character_)) 
[10:25:39.093]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.093]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.093]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.093]                     envir = parent.frame()) 
[10:25:39.093]                   {
[10:25:39.093]                     default_workers <- missing(workers)
[10:25:39.093]                     if (is.function(workers)) 
[10:25:39.093]                       workers <- workers()
[10:25:39.093]                     workers <- structure(as.integer(workers), 
[10:25:39.093]                       class = class(workers))
[10:25:39.093]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.093]                       1L)
[10:25:39.093]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.093]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.093]                       if (default_workers) 
[10:25:39.093]                         supportsMulticore(warn = TRUE)
[10:25:39.093]                       return(sequential(..., envir = envir))
[10:25:39.093]                     }
[10:25:39.093]                     oopts <- options(mc.cores = workers)
[10:25:39.093]                     on.exit(options(oopts))
[10:25:39.093]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.093]                       envir = envir)
[10:25:39.093]                     if (!future$lazy) 
[10:25:39.093]                       future <- run(future)
[10:25:39.093]                     invisible(future)
[10:25:39.093]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.093]                 }
[10:25:39.093]             }
[10:25:39.093]         }
[10:25:39.093]     })
[10:25:39.093]     if (TRUE) {
[10:25:39.093]         base::sink(type = "output", split = FALSE)
[10:25:39.093]         if (TRUE) {
[10:25:39.093]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.093]         }
[10:25:39.093]         else {
[10:25:39.093]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.093]         }
[10:25:39.093]         base::close(...future.stdout)
[10:25:39.093]         ...future.stdout <- NULL
[10:25:39.093]     }
[10:25:39.093]     ...future.result$conditions <- ...future.conditions
[10:25:39.093]     ...future.result$finished <- base::Sys.time()
[10:25:39.093]     ...future.result
[10:25:39.093] }
[10:25:39.096] assign_globals() ...
[10:25:39.096] List of 1
[10:25:39.096]  $ a: num 1
[10:25:39.096]  - attr(*, "where")=List of 1
[10:25:39.096]   ..$ a:<environment: R_EmptyEnv> 
[10:25:39.096]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:39.096]  - attr(*, "resolved")= logi FALSE
[10:25:39.096]  - attr(*, "total_size")= num 56
[10:25:39.096]  - attr(*, "already-done")= logi TRUE
[10:25:39.099] - copied ‘a’ to environment
[10:25:39.099] assign_globals() ... done
[10:25:39.100] requestCore(): workers = 2
[10:25:39.101] MulticoreFuture started
[10:25:39.102] - Launch lazy future ... done
[10:25:39.102] run() for ‘MulticoreFuture’ ... done
[10:25:39.102] result() for MulticoreFuture ...
[10:25:39.102] plan(): Setting new future strategy stack:
[10:25:39.103] List of future strategies:
[10:25:39.103] 1. sequential:
[10:25:39.103]    - args: function (..., envir = parent.frame())
[10:25:39.103]    - tweaked: FALSE
[10:25:39.103]    - call: NULL
[10:25:39.104] plan(): nbrOfWorkers() = 1
[10:25:39.106] plan(): Setting new future strategy stack:
[10:25:39.106] List of future strategies:
[10:25:39.106] 1. multicore:
[10:25:39.106]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.106]    - tweaked: FALSE
[10:25:39.106]    - call: plan(strategy)
[10:25:39.115] plan(): nbrOfWorkers() = 2
[10:25:39.116] result() for MulticoreFuture ...
[10:25:39.116] result() for MulticoreFuture ... done
[10:25:39.117] result() for MulticoreFuture ... done
[10:25:39.117] result() for MulticoreFuture ...
[10:25:39.117] result() for MulticoreFuture ... done
[10:25:39.117] getGlobalsAndPackages() ...
[10:25:39.117] Searching for globals...
[10:25:39.121] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:39.121] Searching for globals ... DONE
[10:25:39.122] Resolving globals: FALSE
[10:25:39.122] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:39.123] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:39.123] - globals: [1] ‘a’
[10:25:39.123] 
[10:25:39.123] getGlobalsAndPackages() ... DONE
[10:25:39.124] run() for ‘Future’ ...
[10:25:39.124] - state: ‘created’
[10:25:39.124] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.128] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.128] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.128]   - Field: ‘label’
[10:25:39.128]   - Field: ‘local’
[10:25:39.128]   - Field: ‘owner’
[10:25:39.129]   - Field: ‘envir’
[10:25:39.129]   - Field: ‘workers’
[10:25:39.129]   - Field: ‘packages’
[10:25:39.129]   - Field: ‘gc’
[10:25:39.129]   - Field: ‘job’
[10:25:39.129]   - Field: ‘conditions’
[10:25:39.129]   - Field: ‘expr’
[10:25:39.129]   - Field: ‘uuid’
[10:25:39.130]   - Field: ‘seed’
[10:25:39.130]   - Field: ‘version’
[10:25:39.130]   - Field: ‘result’
[10:25:39.130]   - Field: ‘asynchronous’
[10:25:39.130]   - Field: ‘calls’
[10:25:39.130]   - Field: ‘globals’
[10:25:39.130]   - Field: ‘stdout’
[10:25:39.130]   - Field: ‘earlySignal’
[10:25:39.131]   - Field: ‘lazy’
[10:25:39.131]   - Field: ‘state’
[10:25:39.131] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.131] - Launch lazy future ...
[10:25:39.131] Packages needed by the future expression (n = 0): <none>
[10:25:39.131] Packages needed by future strategies (n = 0): <none>
[10:25:39.132] {
[10:25:39.132]     {
[10:25:39.132]         {
[10:25:39.132]             ...future.startTime <- base::Sys.time()
[10:25:39.132]             {
[10:25:39.132]                 {
[10:25:39.132]                   {
[10:25:39.132]                     {
[10:25:39.132]                       base::local({
[10:25:39.132]                         has_future <- base::requireNamespace("future", 
[10:25:39.132]                           quietly = TRUE)
[10:25:39.132]                         if (has_future) {
[10:25:39.132]                           ns <- base::getNamespace("future")
[10:25:39.132]                           version <- ns[[".package"]][["version"]]
[10:25:39.132]                           if (is.null(version)) 
[10:25:39.132]                             version <- utils::packageVersion("future")
[10:25:39.132]                         }
[10:25:39.132]                         else {
[10:25:39.132]                           version <- NULL
[10:25:39.132]                         }
[10:25:39.132]                         if (!has_future || version < "1.8.0") {
[10:25:39.132]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.132]                             "", base::R.version$version.string), 
[10:25:39.132]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.132]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.132]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.132]                               "release", "version")], collapse = " "), 
[10:25:39.132]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.132]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.132]                             info)
[10:25:39.132]                           info <- base::paste(info, collapse = "; ")
[10:25:39.132]                           if (!has_future) {
[10:25:39.132]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.132]                               info)
[10:25:39.132]                           }
[10:25:39.132]                           else {
[10:25:39.132]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.132]                               info, version)
[10:25:39.132]                           }
[10:25:39.132]                           base::stop(msg)
[10:25:39.132]                         }
[10:25:39.132]                       })
[10:25:39.132]                     }
[10:25:39.132]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.132]                     base::options(mc.cores = 1L)
[10:25:39.132]                   }
[10:25:39.132]                   options(future.plan = NULL)
[10:25:39.132]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.132]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.132]                 }
[10:25:39.132]                 ...future.workdir <- getwd()
[10:25:39.132]             }
[10:25:39.132]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.132]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.132]         }
[10:25:39.132]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.132]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.132]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.132]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.132]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.132]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.132]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.132]             base::names(...future.oldOptions))
[10:25:39.132]     }
[10:25:39.132]     if (FALSE) {
[10:25:39.132]     }
[10:25:39.132]     else {
[10:25:39.132]         if (TRUE) {
[10:25:39.132]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.132]                 open = "w")
[10:25:39.132]         }
[10:25:39.132]         else {
[10:25:39.132]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.132]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.132]         }
[10:25:39.132]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.132]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.132]             base::sink(type = "output", split = FALSE)
[10:25:39.132]             base::close(...future.stdout)
[10:25:39.132]         }, add = TRUE)
[10:25:39.132]     }
[10:25:39.132]     ...future.frame <- base::sys.nframe()
[10:25:39.132]     ...future.conditions <- base::list()
[10:25:39.132]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.132]     if (FALSE) {
[10:25:39.132]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.132]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.132]     }
[10:25:39.132]     ...future.result <- base::tryCatch({
[10:25:39.132]         base::withCallingHandlers({
[10:25:39.132]             ...future.value <- base::withVisible(base::local({
[10:25:39.132]                 withCallingHandlers({
[10:25:39.132]                   {
[10:25:39.132]                     2 * a
[10:25:39.132]                   }
[10:25:39.132]                 }, immediateCondition = function(cond) {
[10:25:39.132]                   save_rds <- function (object, pathname, ...) 
[10:25:39.132]                   {
[10:25:39.132]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.132]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.132]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.132]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.132]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.132]                         fi_tmp[["mtime"]])
[10:25:39.132]                     }
[10:25:39.132]                     tryCatch({
[10:25:39.132]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.132]                     }, error = function(ex) {
[10:25:39.132]                       msg <- conditionMessage(ex)
[10:25:39.132]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.132]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.132]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.132]                         fi_tmp[["mtime"]], msg)
[10:25:39.132]                       ex$message <- msg
[10:25:39.132]                       stop(ex)
[10:25:39.132]                     })
[10:25:39.132]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.132]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.132]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.132]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.132]                       fi <- file.info(pathname)
[10:25:39.132]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.132]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.132]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.132]                         fi[["size"]], fi[["mtime"]])
[10:25:39.132]                       stop(msg)
[10:25:39.132]                     }
[10:25:39.132]                     invisible(pathname)
[10:25:39.132]                   }
[10:25:39.132]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.132]                     rootPath = tempdir()) 
[10:25:39.132]                   {
[10:25:39.132]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.132]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.132]                       tmpdir = path, fileext = ".rds")
[10:25:39.132]                     save_rds(obj, file)
[10:25:39.132]                   }
[10:25:39.132]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.132]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.132]                   {
[10:25:39.132]                     inherits <- base::inherits
[10:25:39.132]                     invokeRestart <- base::invokeRestart
[10:25:39.132]                     is.null <- base::is.null
[10:25:39.132]                     muffled <- FALSE
[10:25:39.132]                     if (inherits(cond, "message")) {
[10:25:39.132]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.132]                       if (muffled) 
[10:25:39.132]                         invokeRestart("muffleMessage")
[10:25:39.132]                     }
[10:25:39.132]                     else if (inherits(cond, "warning")) {
[10:25:39.132]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.132]                       if (muffled) 
[10:25:39.132]                         invokeRestart("muffleWarning")
[10:25:39.132]                     }
[10:25:39.132]                     else if (inherits(cond, "condition")) {
[10:25:39.132]                       if (!is.null(pattern)) {
[10:25:39.132]                         computeRestarts <- base::computeRestarts
[10:25:39.132]                         grepl <- base::grepl
[10:25:39.132]                         restarts <- computeRestarts(cond)
[10:25:39.132]                         for (restart in restarts) {
[10:25:39.132]                           name <- restart$name
[10:25:39.132]                           if (is.null(name)) 
[10:25:39.132]                             next
[10:25:39.132]                           if (!grepl(pattern, name)) 
[10:25:39.132]                             next
[10:25:39.132]                           invokeRestart(restart)
[10:25:39.132]                           muffled <- TRUE
[10:25:39.132]                           break
[10:25:39.132]                         }
[10:25:39.132]                       }
[10:25:39.132]                     }
[10:25:39.132]                     invisible(muffled)
[10:25:39.132]                   }
[10:25:39.132]                   muffleCondition(cond)
[10:25:39.132]                 })
[10:25:39.132]             }))
[10:25:39.132]             future::FutureResult(value = ...future.value$value, 
[10:25:39.132]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.132]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.132]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.132]                     ...future.globalenv.names))
[10:25:39.132]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.132]         }, condition = base::local({
[10:25:39.132]             c <- base::c
[10:25:39.132]             inherits <- base::inherits
[10:25:39.132]             invokeRestart <- base::invokeRestart
[10:25:39.132]             length <- base::length
[10:25:39.132]             list <- base::list
[10:25:39.132]             seq.int <- base::seq.int
[10:25:39.132]             signalCondition <- base::signalCondition
[10:25:39.132]             sys.calls <- base::sys.calls
[10:25:39.132]             `[[` <- base::`[[`
[10:25:39.132]             `+` <- base::`+`
[10:25:39.132]             `<<-` <- base::`<<-`
[10:25:39.132]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.132]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.132]                   3L)]
[10:25:39.132]             }
[10:25:39.132]             function(cond) {
[10:25:39.132]                 is_error <- inherits(cond, "error")
[10:25:39.132]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.132]                   NULL)
[10:25:39.132]                 if (is_error) {
[10:25:39.132]                   sessionInformation <- function() {
[10:25:39.132]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.132]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.132]                       search = base::search(), system = base::Sys.info())
[10:25:39.132]                   }
[10:25:39.132]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.132]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.132]                     cond$call), session = sessionInformation(), 
[10:25:39.132]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.132]                   signalCondition(cond)
[10:25:39.132]                 }
[10:25:39.132]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.132]                 "immediateCondition"))) {
[10:25:39.132]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.132]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.132]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.132]                   if (TRUE && !signal) {
[10:25:39.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.132]                     {
[10:25:39.132]                       inherits <- base::inherits
[10:25:39.132]                       invokeRestart <- base::invokeRestart
[10:25:39.132]                       is.null <- base::is.null
[10:25:39.132]                       muffled <- FALSE
[10:25:39.132]                       if (inherits(cond, "message")) {
[10:25:39.132]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.132]                         if (muffled) 
[10:25:39.132]                           invokeRestart("muffleMessage")
[10:25:39.132]                       }
[10:25:39.132]                       else if (inherits(cond, "warning")) {
[10:25:39.132]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.132]                         if (muffled) 
[10:25:39.132]                           invokeRestart("muffleWarning")
[10:25:39.132]                       }
[10:25:39.132]                       else if (inherits(cond, "condition")) {
[10:25:39.132]                         if (!is.null(pattern)) {
[10:25:39.132]                           computeRestarts <- base::computeRestarts
[10:25:39.132]                           grepl <- base::grepl
[10:25:39.132]                           restarts <- computeRestarts(cond)
[10:25:39.132]                           for (restart in restarts) {
[10:25:39.132]                             name <- restart$name
[10:25:39.132]                             if (is.null(name)) 
[10:25:39.132]                               next
[10:25:39.132]                             if (!grepl(pattern, name)) 
[10:25:39.132]                               next
[10:25:39.132]                             invokeRestart(restart)
[10:25:39.132]                             muffled <- TRUE
[10:25:39.132]                             break
[10:25:39.132]                           }
[10:25:39.132]                         }
[10:25:39.132]                       }
[10:25:39.132]                       invisible(muffled)
[10:25:39.132]                     }
[10:25:39.132]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.132]                   }
[10:25:39.132]                 }
[10:25:39.132]                 else {
[10:25:39.132]                   if (TRUE) {
[10:25:39.132]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.132]                     {
[10:25:39.132]                       inherits <- base::inherits
[10:25:39.132]                       invokeRestart <- base::invokeRestart
[10:25:39.132]                       is.null <- base::is.null
[10:25:39.132]                       muffled <- FALSE
[10:25:39.132]                       if (inherits(cond, "message")) {
[10:25:39.132]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.132]                         if (muffled) 
[10:25:39.132]                           invokeRestart("muffleMessage")
[10:25:39.132]                       }
[10:25:39.132]                       else if (inherits(cond, "warning")) {
[10:25:39.132]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.132]                         if (muffled) 
[10:25:39.132]                           invokeRestart("muffleWarning")
[10:25:39.132]                       }
[10:25:39.132]                       else if (inherits(cond, "condition")) {
[10:25:39.132]                         if (!is.null(pattern)) {
[10:25:39.132]                           computeRestarts <- base::computeRestarts
[10:25:39.132]                           grepl <- base::grepl
[10:25:39.132]                           restarts <- computeRestarts(cond)
[10:25:39.132]                           for (restart in restarts) {
[10:25:39.132]                             name <- restart$name
[10:25:39.132]                             if (is.null(name)) 
[10:25:39.132]                               next
[10:25:39.132]                             if (!grepl(pattern, name)) 
[10:25:39.132]                               next
[10:25:39.132]                             invokeRestart(restart)
[10:25:39.132]                             muffled <- TRUE
[10:25:39.132]                             break
[10:25:39.132]                           }
[10:25:39.132]                         }
[10:25:39.132]                       }
[10:25:39.132]                       invisible(muffled)
[10:25:39.132]                     }
[10:25:39.132]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.132]                   }
[10:25:39.132]                 }
[10:25:39.132]             }
[10:25:39.132]         }))
[10:25:39.132]     }, error = function(ex) {
[10:25:39.132]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.132]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.132]                 ...future.rng), started = ...future.startTime, 
[10:25:39.132]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.132]             version = "1.8"), class = "FutureResult")
[10:25:39.132]     }, finally = {
[10:25:39.132]         if (!identical(...future.workdir, getwd())) 
[10:25:39.132]             setwd(...future.workdir)
[10:25:39.132]         {
[10:25:39.132]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.132]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.132]             }
[10:25:39.132]             base::options(...future.oldOptions)
[10:25:39.132]             if (.Platform$OS.type == "windows") {
[10:25:39.132]                 old_names <- names(...future.oldEnvVars)
[10:25:39.132]                 envs <- base::Sys.getenv()
[10:25:39.132]                 names <- names(envs)
[10:25:39.132]                 common <- intersect(names, old_names)
[10:25:39.132]                 added <- setdiff(names, old_names)
[10:25:39.132]                 removed <- setdiff(old_names, names)
[10:25:39.132]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.132]                   envs[common]]
[10:25:39.132]                 NAMES <- toupper(changed)
[10:25:39.132]                 args <- list()
[10:25:39.132]                 for (kk in seq_along(NAMES)) {
[10:25:39.132]                   name <- changed[[kk]]
[10:25:39.132]                   NAME <- NAMES[[kk]]
[10:25:39.132]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.132]                     next
[10:25:39.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.132]                 }
[10:25:39.132]                 NAMES <- toupper(added)
[10:25:39.132]                 for (kk in seq_along(NAMES)) {
[10:25:39.132]                   name <- added[[kk]]
[10:25:39.132]                   NAME <- NAMES[[kk]]
[10:25:39.132]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.132]                     next
[10:25:39.132]                   args[[name]] <- ""
[10:25:39.132]                 }
[10:25:39.132]                 NAMES <- toupper(removed)
[10:25:39.132]                 for (kk in seq_along(NAMES)) {
[10:25:39.132]                   name <- removed[[kk]]
[10:25:39.132]                   NAME <- NAMES[[kk]]
[10:25:39.132]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.132]                     next
[10:25:39.132]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.132]                 }
[10:25:39.132]                 if (length(args) > 0) 
[10:25:39.132]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.132]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.132]             }
[10:25:39.132]             else {
[10:25:39.132]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.132]             }
[10:25:39.132]             {
[10:25:39.132]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.132]                   0L) {
[10:25:39.132]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.132]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.132]                   base::options(opts)
[10:25:39.132]                 }
[10:25:39.132]                 {
[10:25:39.132]                   {
[10:25:39.132]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.132]                     NULL
[10:25:39.132]                   }
[10:25:39.132]                   options(future.plan = NULL)
[10:25:39.132]                   if (is.na(NA_character_)) 
[10:25:39.132]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.132]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.132]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.132]                     envir = parent.frame()) 
[10:25:39.132]                   {
[10:25:39.132]                     default_workers <- missing(workers)
[10:25:39.132]                     if (is.function(workers)) 
[10:25:39.132]                       workers <- workers()
[10:25:39.132]                     workers <- structure(as.integer(workers), 
[10:25:39.132]                       class = class(workers))
[10:25:39.132]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.132]                       1L)
[10:25:39.132]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.132]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.132]                       if (default_workers) 
[10:25:39.132]                         supportsMulticore(warn = TRUE)
[10:25:39.132]                       return(sequential(..., envir = envir))
[10:25:39.132]                     }
[10:25:39.132]                     oopts <- options(mc.cores = workers)
[10:25:39.132]                     on.exit(options(oopts))
[10:25:39.132]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.132]                       envir = envir)
[10:25:39.132]                     if (!future$lazy) 
[10:25:39.132]                       future <- run(future)
[10:25:39.132]                     invisible(future)
[10:25:39.132]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.132]                 }
[10:25:39.132]             }
[10:25:39.132]         }
[10:25:39.132]     })
[10:25:39.132]     if (TRUE) {
[10:25:39.132]         base::sink(type = "output", split = FALSE)
[10:25:39.132]         if (TRUE) {
[10:25:39.132]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.132]         }
[10:25:39.132]         else {
[10:25:39.132]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.132]         }
[10:25:39.132]         base::close(...future.stdout)
[10:25:39.132]         ...future.stdout <- NULL
[10:25:39.132]     }
[10:25:39.132]     ...future.result$conditions <- ...future.conditions
[10:25:39.132]     ...future.result$finished <- base::Sys.time()
[10:25:39.132]     ...future.result
[10:25:39.132] }
[10:25:39.134] assign_globals() ...
[10:25:39.134] List of 1
[10:25:39.134]  $ a: num 1
[10:25:39.134]  - attr(*, "where")=List of 1
[10:25:39.134]   ..$ a:<environment: R_EmptyEnv> 
[10:25:39.134]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:39.134]  - attr(*, "resolved")= logi FALSE
[10:25:39.134]  - attr(*, "total_size")= num 56
[10:25:39.134]  - attr(*, "already-done")= logi TRUE
[10:25:39.137] - copied ‘a’ to environment
[10:25:39.138] assign_globals() ... done
[10:25:39.138] requestCore(): workers = 2
[10:25:39.139] MulticoreFuture started
[10:25:39.140] - Launch lazy future ... done
[10:25:39.140] run() for ‘MulticoreFuture’ ... done
[10:25:39.141] result() for MulticoreFuture ...
[10:25:39.140] plan(): Setting new future strategy stack:
[10:25:39.141] List of future strategies:
[10:25:39.141] 1. sequential:
[10:25:39.141]    - args: function (..., envir = parent.frame())
[10:25:39.141]    - tweaked: FALSE
[10:25:39.141]    - call: NULL
[10:25:39.142] plan(): nbrOfWorkers() = 1
[10:25:39.143] plan(): Setting new future strategy stack:
[10:25:39.144] List of future strategies:
[10:25:39.144] 1. multicore:
[10:25:39.144]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.144]    - tweaked: FALSE
[10:25:39.144]    - call: plan(strategy)
[10:25:39.149] plan(): nbrOfWorkers() = 2
[10:25:39.150] result() for MulticoreFuture ...
[10:25:39.150] result() for MulticoreFuture ... done
[10:25:39.150] result() for MulticoreFuture ... done
[10:25:39.150] result() for MulticoreFuture ...
[10:25:39.151] result() for MulticoreFuture ... done
[10:25:39.151] getGlobalsAndPackages() ...
[10:25:39.151] Searching for globals...
[10:25:39.152] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:39.152] Searching for globals ... DONE
[10:25:39.153] Resolving globals: FALSE
[10:25:39.153] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:39.154] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:39.154] - globals: [1] ‘a’
[10:25:39.154] 
[10:25:39.154] getGlobalsAndPackages() ... DONE
[10:25:39.154] run() for ‘Future’ ...
[10:25:39.154] - state: ‘created’
[10:25:39.155] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.159] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.159] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.159]   - Field: ‘label’
[10:25:39.159]   - Field: ‘local’
[10:25:39.159]   - Field: ‘owner’
[10:25:39.159]   - Field: ‘envir’
[10:25:39.159]   - Field: ‘workers’
[10:25:39.160]   - Field: ‘packages’
[10:25:39.160]   - Field: ‘gc’
[10:25:39.160]   - Field: ‘job’
[10:25:39.160]   - Field: ‘conditions’
[10:25:39.160]   - Field: ‘expr’
[10:25:39.160]   - Field: ‘uuid’
[10:25:39.160]   - Field: ‘seed’
[10:25:39.160]   - Field: ‘version’
[10:25:39.161]   - Field: ‘result’
[10:25:39.161]   - Field: ‘asynchronous’
[10:25:39.161]   - Field: ‘calls’
[10:25:39.161]   - Field: ‘globals’
[10:25:39.161]   - Field: ‘stdout’
[10:25:39.161]   - Field: ‘earlySignal’
[10:25:39.161]   - Field: ‘lazy’
[10:25:39.161]   - Field: ‘state’
[10:25:39.161] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.162] - Launch lazy future ...
[10:25:39.162] Packages needed by the future expression (n = 0): <none>
[10:25:39.162] Packages needed by future strategies (n = 0): <none>
[10:25:39.163] {
[10:25:39.163]     {
[10:25:39.163]         {
[10:25:39.163]             ...future.startTime <- base::Sys.time()
[10:25:39.163]             {
[10:25:39.163]                 {
[10:25:39.163]                   {
[10:25:39.163]                     {
[10:25:39.163]                       base::local({
[10:25:39.163]                         has_future <- base::requireNamespace("future", 
[10:25:39.163]                           quietly = TRUE)
[10:25:39.163]                         if (has_future) {
[10:25:39.163]                           ns <- base::getNamespace("future")
[10:25:39.163]                           version <- ns[[".package"]][["version"]]
[10:25:39.163]                           if (is.null(version)) 
[10:25:39.163]                             version <- utils::packageVersion("future")
[10:25:39.163]                         }
[10:25:39.163]                         else {
[10:25:39.163]                           version <- NULL
[10:25:39.163]                         }
[10:25:39.163]                         if (!has_future || version < "1.8.0") {
[10:25:39.163]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.163]                             "", base::R.version$version.string), 
[10:25:39.163]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.163]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.163]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.163]                               "release", "version")], collapse = " "), 
[10:25:39.163]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.163]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.163]                             info)
[10:25:39.163]                           info <- base::paste(info, collapse = "; ")
[10:25:39.163]                           if (!has_future) {
[10:25:39.163]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.163]                               info)
[10:25:39.163]                           }
[10:25:39.163]                           else {
[10:25:39.163]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.163]                               info, version)
[10:25:39.163]                           }
[10:25:39.163]                           base::stop(msg)
[10:25:39.163]                         }
[10:25:39.163]                       })
[10:25:39.163]                     }
[10:25:39.163]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.163]                     base::options(mc.cores = 1L)
[10:25:39.163]                   }
[10:25:39.163]                   options(future.plan = NULL)
[10:25:39.163]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.163]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.163]                 }
[10:25:39.163]                 ...future.workdir <- getwd()
[10:25:39.163]             }
[10:25:39.163]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.163]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.163]         }
[10:25:39.163]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.163]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.163]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.163]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.163]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.163]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.163]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.163]             base::names(...future.oldOptions))
[10:25:39.163]     }
[10:25:39.163]     if (FALSE) {
[10:25:39.163]     }
[10:25:39.163]     else {
[10:25:39.163]         if (TRUE) {
[10:25:39.163]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.163]                 open = "w")
[10:25:39.163]         }
[10:25:39.163]         else {
[10:25:39.163]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.163]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.163]         }
[10:25:39.163]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.163]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.163]             base::sink(type = "output", split = FALSE)
[10:25:39.163]             base::close(...future.stdout)
[10:25:39.163]         }, add = TRUE)
[10:25:39.163]     }
[10:25:39.163]     ...future.frame <- base::sys.nframe()
[10:25:39.163]     ...future.conditions <- base::list()
[10:25:39.163]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.163]     if (FALSE) {
[10:25:39.163]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.163]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.163]     }
[10:25:39.163]     ...future.result <- base::tryCatch({
[10:25:39.163]         base::withCallingHandlers({
[10:25:39.163]             ...future.value <- base::withVisible(base::local({
[10:25:39.163]                 withCallingHandlers({
[10:25:39.163]                   {
[10:25:39.163]                     2 * a
[10:25:39.163]                   }
[10:25:39.163]                 }, immediateCondition = function(cond) {
[10:25:39.163]                   save_rds <- function (object, pathname, ...) 
[10:25:39.163]                   {
[10:25:39.163]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.163]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.163]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.163]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.163]                         fi_tmp[["mtime"]])
[10:25:39.163]                     }
[10:25:39.163]                     tryCatch({
[10:25:39.163]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.163]                     }, error = function(ex) {
[10:25:39.163]                       msg <- conditionMessage(ex)
[10:25:39.163]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.163]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.163]                         fi_tmp[["mtime"]], msg)
[10:25:39.163]                       ex$message <- msg
[10:25:39.163]                       stop(ex)
[10:25:39.163]                     })
[10:25:39.163]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.163]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.163]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.163]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.163]                       fi <- file.info(pathname)
[10:25:39.163]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.163]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.163]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.163]                         fi[["size"]], fi[["mtime"]])
[10:25:39.163]                       stop(msg)
[10:25:39.163]                     }
[10:25:39.163]                     invisible(pathname)
[10:25:39.163]                   }
[10:25:39.163]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.163]                     rootPath = tempdir()) 
[10:25:39.163]                   {
[10:25:39.163]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.163]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.163]                       tmpdir = path, fileext = ".rds")
[10:25:39.163]                     save_rds(obj, file)
[10:25:39.163]                   }
[10:25:39.163]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.163]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.163]                   {
[10:25:39.163]                     inherits <- base::inherits
[10:25:39.163]                     invokeRestart <- base::invokeRestart
[10:25:39.163]                     is.null <- base::is.null
[10:25:39.163]                     muffled <- FALSE
[10:25:39.163]                     if (inherits(cond, "message")) {
[10:25:39.163]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.163]                       if (muffled) 
[10:25:39.163]                         invokeRestart("muffleMessage")
[10:25:39.163]                     }
[10:25:39.163]                     else if (inherits(cond, "warning")) {
[10:25:39.163]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.163]                       if (muffled) 
[10:25:39.163]                         invokeRestart("muffleWarning")
[10:25:39.163]                     }
[10:25:39.163]                     else if (inherits(cond, "condition")) {
[10:25:39.163]                       if (!is.null(pattern)) {
[10:25:39.163]                         computeRestarts <- base::computeRestarts
[10:25:39.163]                         grepl <- base::grepl
[10:25:39.163]                         restarts <- computeRestarts(cond)
[10:25:39.163]                         for (restart in restarts) {
[10:25:39.163]                           name <- restart$name
[10:25:39.163]                           if (is.null(name)) 
[10:25:39.163]                             next
[10:25:39.163]                           if (!grepl(pattern, name)) 
[10:25:39.163]                             next
[10:25:39.163]                           invokeRestart(restart)
[10:25:39.163]                           muffled <- TRUE
[10:25:39.163]                           break
[10:25:39.163]                         }
[10:25:39.163]                       }
[10:25:39.163]                     }
[10:25:39.163]                     invisible(muffled)
[10:25:39.163]                   }
[10:25:39.163]                   muffleCondition(cond)
[10:25:39.163]                 })
[10:25:39.163]             }))
[10:25:39.163]             future::FutureResult(value = ...future.value$value, 
[10:25:39.163]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.163]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.163]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.163]                     ...future.globalenv.names))
[10:25:39.163]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.163]         }, condition = base::local({
[10:25:39.163]             c <- base::c
[10:25:39.163]             inherits <- base::inherits
[10:25:39.163]             invokeRestart <- base::invokeRestart
[10:25:39.163]             length <- base::length
[10:25:39.163]             list <- base::list
[10:25:39.163]             seq.int <- base::seq.int
[10:25:39.163]             signalCondition <- base::signalCondition
[10:25:39.163]             sys.calls <- base::sys.calls
[10:25:39.163]             `[[` <- base::`[[`
[10:25:39.163]             `+` <- base::`+`
[10:25:39.163]             `<<-` <- base::`<<-`
[10:25:39.163]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.163]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.163]                   3L)]
[10:25:39.163]             }
[10:25:39.163]             function(cond) {
[10:25:39.163]                 is_error <- inherits(cond, "error")
[10:25:39.163]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.163]                   NULL)
[10:25:39.163]                 if (is_error) {
[10:25:39.163]                   sessionInformation <- function() {
[10:25:39.163]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.163]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.163]                       search = base::search(), system = base::Sys.info())
[10:25:39.163]                   }
[10:25:39.163]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.163]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.163]                     cond$call), session = sessionInformation(), 
[10:25:39.163]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.163]                   signalCondition(cond)
[10:25:39.163]                 }
[10:25:39.163]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.163]                 "immediateCondition"))) {
[10:25:39.163]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.163]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.163]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.163]                   if (TRUE && !signal) {
[10:25:39.163]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.163]                     {
[10:25:39.163]                       inherits <- base::inherits
[10:25:39.163]                       invokeRestart <- base::invokeRestart
[10:25:39.163]                       is.null <- base::is.null
[10:25:39.163]                       muffled <- FALSE
[10:25:39.163]                       if (inherits(cond, "message")) {
[10:25:39.163]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.163]                         if (muffled) 
[10:25:39.163]                           invokeRestart("muffleMessage")
[10:25:39.163]                       }
[10:25:39.163]                       else if (inherits(cond, "warning")) {
[10:25:39.163]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.163]                         if (muffled) 
[10:25:39.163]                           invokeRestart("muffleWarning")
[10:25:39.163]                       }
[10:25:39.163]                       else if (inherits(cond, "condition")) {
[10:25:39.163]                         if (!is.null(pattern)) {
[10:25:39.163]                           computeRestarts <- base::computeRestarts
[10:25:39.163]                           grepl <- base::grepl
[10:25:39.163]                           restarts <- computeRestarts(cond)
[10:25:39.163]                           for (restart in restarts) {
[10:25:39.163]                             name <- restart$name
[10:25:39.163]                             if (is.null(name)) 
[10:25:39.163]                               next
[10:25:39.163]                             if (!grepl(pattern, name)) 
[10:25:39.163]                               next
[10:25:39.163]                             invokeRestart(restart)
[10:25:39.163]                             muffled <- TRUE
[10:25:39.163]                             break
[10:25:39.163]                           }
[10:25:39.163]                         }
[10:25:39.163]                       }
[10:25:39.163]                       invisible(muffled)
[10:25:39.163]                     }
[10:25:39.163]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.163]                   }
[10:25:39.163]                 }
[10:25:39.163]                 else {
[10:25:39.163]                   if (TRUE) {
[10:25:39.163]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.163]                     {
[10:25:39.163]                       inherits <- base::inherits
[10:25:39.163]                       invokeRestart <- base::invokeRestart
[10:25:39.163]                       is.null <- base::is.null
[10:25:39.163]                       muffled <- FALSE
[10:25:39.163]                       if (inherits(cond, "message")) {
[10:25:39.163]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.163]                         if (muffled) 
[10:25:39.163]                           invokeRestart("muffleMessage")
[10:25:39.163]                       }
[10:25:39.163]                       else if (inherits(cond, "warning")) {
[10:25:39.163]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.163]                         if (muffled) 
[10:25:39.163]                           invokeRestart("muffleWarning")
[10:25:39.163]                       }
[10:25:39.163]                       else if (inherits(cond, "condition")) {
[10:25:39.163]                         if (!is.null(pattern)) {
[10:25:39.163]                           computeRestarts <- base::computeRestarts
[10:25:39.163]                           grepl <- base::grepl
[10:25:39.163]                           restarts <- computeRestarts(cond)
[10:25:39.163]                           for (restart in restarts) {
[10:25:39.163]                             name <- restart$name
[10:25:39.163]                             if (is.null(name)) 
[10:25:39.163]                               next
[10:25:39.163]                             if (!grepl(pattern, name)) 
[10:25:39.163]                               next
[10:25:39.163]                             invokeRestart(restart)
[10:25:39.163]                             muffled <- TRUE
[10:25:39.163]                             break
[10:25:39.163]                           }
[10:25:39.163]                         }
[10:25:39.163]                       }
[10:25:39.163]                       invisible(muffled)
[10:25:39.163]                     }
[10:25:39.163]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.163]                   }
[10:25:39.163]                 }
[10:25:39.163]             }
[10:25:39.163]         }))
[10:25:39.163]     }, error = function(ex) {
[10:25:39.163]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.163]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.163]                 ...future.rng), started = ...future.startTime, 
[10:25:39.163]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.163]             version = "1.8"), class = "FutureResult")
[10:25:39.163]     }, finally = {
[10:25:39.163]         if (!identical(...future.workdir, getwd())) 
[10:25:39.163]             setwd(...future.workdir)
[10:25:39.163]         {
[10:25:39.163]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.163]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.163]             }
[10:25:39.163]             base::options(...future.oldOptions)
[10:25:39.163]             if (.Platform$OS.type == "windows") {
[10:25:39.163]                 old_names <- names(...future.oldEnvVars)
[10:25:39.163]                 envs <- base::Sys.getenv()
[10:25:39.163]                 names <- names(envs)
[10:25:39.163]                 common <- intersect(names, old_names)
[10:25:39.163]                 added <- setdiff(names, old_names)
[10:25:39.163]                 removed <- setdiff(old_names, names)
[10:25:39.163]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.163]                   envs[common]]
[10:25:39.163]                 NAMES <- toupper(changed)
[10:25:39.163]                 args <- list()
[10:25:39.163]                 for (kk in seq_along(NAMES)) {
[10:25:39.163]                   name <- changed[[kk]]
[10:25:39.163]                   NAME <- NAMES[[kk]]
[10:25:39.163]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.163]                     next
[10:25:39.163]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.163]                 }
[10:25:39.163]                 NAMES <- toupper(added)
[10:25:39.163]                 for (kk in seq_along(NAMES)) {
[10:25:39.163]                   name <- added[[kk]]
[10:25:39.163]                   NAME <- NAMES[[kk]]
[10:25:39.163]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.163]                     next
[10:25:39.163]                   args[[name]] <- ""
[10:25:39.163]                 }
[10:25:39.163]                 NAMES <- toupper(removed)
[10:25:39.163]                 for (kk in seq_along(NAMES)) {
[10:25:39.163]                   name <- removed[[kk]]
[10:25:39.163]                   NAME <- NAMES[[kk]]
[10:25:39.163]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.163]                     next
[10:25:39.163]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.163]                 }
[10:25:39.163]                 if (length(args) > 0) 
[10:25:39.163]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.163]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.163]             }
[10:25:39.163]             else {
[10:25:39.163]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.163]             }
[10:25:39.163]             {
[10:25:39.163]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.163]                   0L) {
[10:25:39.163]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.163]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.163]                   base::options(opts)
[10:25:39.163]                 }
[10:25:39.163]                 {
[10:25:39.163]                   {
[10:25:39.163]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.163]                     NULL
[10:25:39.163]                   }
[10:25:39.163]                   options(future.plan = NULL)
[10:25:39.163]                   if (is.na(NA_character_)) 
[10:25:39.163]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.163]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.163]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.163]                     envir = parent.frame()) 
[10:25:39.163]                   {
[10:25:39.163]                     default_workers <- missing(workers)
[10:25:39.163]                     if (is.function(workers)) 
[10:25:39.163]                       workers <- workers()
[10:25:39.163]                     workers <- structure(as.integer(workers), 
[10:25:39.163]                       class = class(workers))
[10:25:39.163]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.163]                       1L)
[10:25:39.163]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.163]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.163]                       if (default_workers) 
[10:25:39.163]                         supportsMulticore(warn = TRUE)
[10:25:39.163]                       return(sequential(..., envir = envir))
[10:25:39.163]                     }
[10:25:39.163]                     oopts <- options(mc.cores = workers)
[10:25:39.163]                     on.exit(options(oopts))
[10:25:39.163]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.163]                       envir = envir)
[10:25:39.163]                     if (!future$lazy) 
[10:25:39.163]                       future <- run(future)
[10:25:39.163]                     invisible(future)
[10:25:39.163]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.163]                 }
[10:25:39.163]             }
[10:25:39.163]         }
[10:25:39.163]     })
[10:25:39.163]     if (TRUE) {
[10:25:39.163]         base::sink(type = "output", split = FALSE)
[10:25:39.163]         if (TRUE) {
[10:25:39.163]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.163]         }
[10:25:39.163]         else {
[10:25:39.163]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.163]         }
[10:25:39.163]         base::close(...future.stdout)
[10:25:39.163]         ...future.stdout <- NULL
[10:25:39.163]     }
[10:25:39.163]     ...future.result$conditions <- ...future.conditions
[10:25:39.163]     ...future.result$finished <- base::Sys.time()
[10:25:39.163]     ...future.result
[10:25:39.163] }
[10:25:39.165] assign_globals() ...
[10:25:39.165] List of 1
[10:25:39.165]  $ a: num 1
[10:25:39.165]  - attr(*, "where")=List of 1
[10:25:39.165]   ..$ a:<environment: R_EmptyEnv> 
[10:25:39.165]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:39.165]  - attr(*, "resolved")= logi FALSE
[10:25:39.165]  - attr(*, "total_size")= num 56
[10:25:39.165]  - attr(*, "already-done")= logi TRUE
[10:25:39.169] - copied ‘a’ to environment
[10:25:39.169] assign_globals() ... done
[10:25:39.169] requestCore(): workers = 2
[10:25:39.171] MulticoreFuture started
[10:25:39.171] - Launch lazy future ... done
[10:25:39.171] run() for ‘MulticoreFuture’ ... done
[10:25:39.171] result() for MulticoreFuture ...
[10:25:39.172] plan(): Setting new future strategy stack:
[10:25:39.172] List of future strategies:
[10:25:39.172] 1. sequential:
[10:25:39.172]    - args: function (..., envir = parent.frame())
[10:25:39.172]    - tweaked: FALSE
[10:25:39.172]    - call: NULL
[10:25:39.173] plan(): nbrOfWorkers() = 1
[10:25:39.175] plan(): Setting new future strategy stack:
[10:25:39.175] List of future strategies:
[10:25:39.175] 1. multicore:
[10:25:39.175]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.175]    - tweaked: FALSE
[10:25:39.175]    - call: plan(strategy)
[10:25:39.184] plan(): nbrOfWorkers() = 2
[10:25:39.185] result() for MulticoreFuture ...
[10:25:39.185] result() for MulticoreFuture ... done
[10:25:39.185] result() for MulticoreFuture ... done
[10:25:39.186] result() for MulticoreFuture ...
[10:25:39.186] result() for MulticoreFuture ... done
[10:25:39.186] getGlobalsAndPackages() ...
[10:25:39.186] Searching for globals...
[10:25:39.190] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:39.190] Searching for globals ... DONE
[10:25:39.190] Resolving globals: FALSE
[10:25:39.191] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:39.192] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:39.192] - globals: [1] ‘a’
[10:25:39.192] 
[10:25:39.192] getGlobalsAndPackages() ... DONE
[10:25:39.192] run() for ‘Future’ ...
[10:25:39.193] - state: ‘created’
[10:25:39.193] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.197] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.197] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[10:25:39.197]   - Field: ‘label’
[10:25:39.197]   - Field: ‘local’
[10:25:39.198]   - Field: ‘owner’
[10:25:39.198]   - Field: ‘envir’
[10:25:39.198]   - Field: ‘workers’
[10:25:39.198]   - Field: ‘packages’
[10:25:39.198]   - Field: ‘gc’
[10:25:39.198]   - Field: ‘job’
[10:25:39.198]   - Field: ‘conditions’
[10:25:39.198]   - Field: ‘expr’
[10:25:39.198]   - Field: ‘uuid’
[10:25:39.199]   - Field: ‘seed’
[10:25:39.199]   - Field: ‘version’
[10:25:39.199]   - Field: ‘result’
[10:25:39.199]   - Field: ‘asynchronous’
[10:25:39.199]   - Field: ‘calls’
[10:25:39.199]   - Field: ‘globals’
[10:25:39.199]   - Field: ‘stdout’
[10:25:39.199]   - Field: ‘earlySignal’
[10:25:39.200]   - Field: ‘lazy’
[10:25:39.200]   - Field: ‘state’
[10:25:39.200] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[10:25:39.200] - Launch lazy future ...
[10:25:39.200] Packages needed by the future expression (n = 0): <none>
[10:25:39.200] Packages needed by future strategies (n = 0): <none>
[10:25:39.201] {
[10:25:39.201]     {
[10:25:39.201]         {
[10:25:39.201]             ...future.startTime <- base::Sys.time()
[10:25:39.201]             {
[10:25:39.201]                 {
[10:25:39.201]                   {
[10:25:39.201]                     {
[10:25:39.201]                       base::local({
[10:25:39.201]                         has_future <- base::requireNamespace("future", 
[10:25:39.201]                           quietly = TRUE)
[10:25:39.201]                         if (has_future) {
[10:25:39.201]                           ns <- base::getNamespace("future")
[10:25:39.201]                           version <- ns[[".package"]][["version"]]
[10:25:39.201]                           if (is.null(version)) 
[10:25:39.201]                             version <- utils::packageVersion("future")
[10:25:39.201]                         }
[10:25:39.201]                         else {
[10:25:39.201]                           version <- NULL
[10:25:39.201]                         }
[10:25:39.201]                         if (!has_future || version < "1.8.0") {
[10:25:39.201]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.201]                             "", base::R.version$version.string), 
[10:25:39.201]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.201]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.201]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.201]                               "release", "version")], collapse = " "), 
[10:25:39.201]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.201]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.201]                             info)
[10:25:39.201]                           info <- base::paste(info, collapse = "; ")
[10:25:39.201]                           if (!has_future) {
[10:25:39.201]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.201]                               info)
[10:25:39.201]                           }
[10:25:39.201]                           else {
[10:25:39.201]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.201]                               info, version)
[10:25:39.201]                           }
[10:25:39.201]                           base::stop(msg)
[10:25:39.201]                         }
[10:25:39.201]                       })
[10:25:39.201]                     }
[10:25:39.201]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.201]                     base::options(mc.cores = 1L)
[10:25:39.201]                   }
[10:25:39.201]                   options(future.plan = NULL)
[10:25:39.201]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.201]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.201]                 }
[10:25:39.201]                 ...future.workdir <- getwd()
[10:25:39.201]             }
[10:25:39.201]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.201]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.201]         }
[10:25:39.201]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.201]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.201]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.201]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.201]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.201]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.201]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.201]             base::names(...future.oldOptions))
[10:25:39.201]     }
[10:25:39.201]     if (FALSE) {
[10:25:39.201]     }
[10:25:39.201]     else {
[10:25:39.201]         if (TRUE) {
[10:25:39.201]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.201]                 open = "w")
[10:25:39.201]         }
[10:25:39.201]         else {
[10:25:39.201]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.201]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.201]         }
[10:25:39.201]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.201]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.201]             base::sink(type = "output", split = FALSE)
[10:25:39.201]             base::close(...future.stdout)
[10:25:39.201]         }, add = TRUE)
[10:25:39.201]     }
[10:25:39.201]     ...future.frame <- base::sys.nframe()
[10:25:39.201]     ...future.conditions <- base::list()
[10:25:39.201]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.201]     if (FALSE) {
[10:25:39.201]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.201]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.201]     }
[10:25:39.201]     ...future.result <- base::tryCatch({
[10:25:39.201]         base::withCallingHandlers({
[10:25:39.201]             ...future.value <- base::withVisible(base::local({
[10:25:39.201]                 withCallingHandlers({
[10:25:39.201]                   {
[10:25:39.201]                     2 * a
[10:25:39.201]                   }
[10:25:39.201]                 }, immediateCondition = function(cond) {
[10:25:39.201]                   save_rds <- function (object, pathname, ...) 
[10:25:39.201]                   {
[10:25:39.201]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[10:25:39.201]                     if (file_test("-f", pathname_tmp)) {
[10:25:39.201]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.201]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[10:25:39.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.201]                         fi_tmp[["mtime"]])
[10:25:39.201]                     }
[10:25:39.201]                     tryCatch({
[10:25:39.201]                       saveRDS(object, file = pathname_tmp, ...)
[10:25:39.201]                     }, error = function(ex) {
[10:25:39.201]                       msg <- conditionMessage(ex)
[10:25:39.201]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.201]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[10:25:39.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.201]                         fi_tmp[["mtime"]], msg)
[10:25:39.201]                       ex$message <- msg
[10:25:39.201]                       stop(ex)
[10:25:39.201]                     })
[10:25:39.201]                     stopifnot(file_test("-f", pathname_tmp))
[10:25:39.201]                     res <- file.rename(from = pathname_tmp, to = pathname)
[10:25:39.201]                     if (!res || file_test("-f", pathname_tmp)) {
[10:25:39.201]                       fi_tmp <- file.info(pathname_tmp)
[10:25:39.201]                       fi <- file.info(pathname)
[10:25:39.201]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[10:25:39.201]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[10:25:39.201]                         fi_tmp[["mtime"]], sQuote(pathname), 
[10:25:39.201]                         fi[["size"]], fi[["mtime"]])
[10:25:39.201]                       stop(msg)
[10:25:39.201]                     }
[10:25:39.201]                     invisible(pathname)
[10:25:39.201]                   }
[10:25:39.201]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[10:25:39.201]                     rootPath = tempdir()) 
[10:25:39.201]                   {
[10:25:39.201]                     obj <- list(time = Sys.time(), condition = cond)
[10:25:39.201]                     file <- tempfile(pattern = class(cond)[1], 
[10:25:39.201]                       tmpdir = path, fileext = ".rds")
[10:25:39.201]                     save_rds(obj, file)
[10:25:39.201]                   }
[10:25:39.201]                   saveImmediateCondition(cond, path = "/tmp/RtmpDoKeJo/.future/immediateConditions")
[10:25:39.201]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.201]                   {
[10:25:39.201]                     inherits <- base::inherits
[10:25:39.201]                     invokeRestart <- base::invokeRestart
[10:25:39.201]                     is.null <- base::is.null
[10:25:39.201]                     muffled <- FALSE
[10:25:39.201]                     if (inherits(cond, "message")) {
[10:25:39.201]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.201]                       if (muffled) 
[10:25:39.201]                         invokeRestart("muffleMessage")
[10:25:39.201]                     }
[10:25:39.201]                     else if (inherits(cond, "warning")) {
[10:25:39.201]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.201]                       if (muffled) 
[10:25:39.201]                         invokeRestart("muffleWarning")
[10:25:39.201]                     }
[10:25:39.201]                     else if (inherits(cond, "condition")) {
[10:25:39.201]                       if (!is.null(pattern)) {
[10:25:39.201]                         computeRestarts <- base::computeRestarts
[10:25:39.201]                         grepl <- base::grepl
[10:25:39.201]                         restarts <- computeRestarts(cond)
[10:25:39.201]                         for (restart in restarts) {
[10:25:39.201]                           name <- restart$name
[10:25:39.201]                           if (is.null(name)) 
[10:25:39.201]                             next
[10:25:39.201]                           if (!grepl(pattern, name)) 
[10:25:39.201]                             next
[10:25:39.201]                           invokeRestart(restart)
[10:25:39.201]                           muffled <- TRUE
[10:25:39.201]                           break
[10:25:39.201]                         }
[10:25:39.201]                       }
[10:25:39.201]                     }
[10:25:39.201]                     invisible(muffled)
[10:25:39.201]                   }
[10:25:39.201]                   muffleCondition(cond)
[10:25:39.201]                 })
[10:25:39.201]             }))
[10:25:39.201]             future::FutureResult(value = ...future.value$value, 
[10:25:39.201]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.201]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.201]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.201]                     ...future.globalenv.names))
[10:25:39.201]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.201]         }, condition = base::local({
[10:25:39.201]             c <- base::c
[10:25:39.201]             inherits <- base::inherits
[10:25:39.201]             invokeRestart <- base::invokeRestart
[10:25:39.201]             length <- base::length
[10:25:39.201]             list <- base::list
[10:25:39.201]             seq.int <- base::seq.int
[10:25:39.201]             signalCondition <- base::signalCondition
[10:25:39.201]             sys.calls <- base::sys.calls
[10:25:39.201]             `[[` <- base::`[[`
[10:25:39.201]             `+` <- base::`+`
[10:25:39.201]             `<<-` <- base::`<<-`
[10:25:39.201]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.201]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.201]                   3L)]
[10:25:39.201]             }
[10:25:39.201]             function(cond) {
[10:25:39.201]                 is_error <- inherits(cond, "error")
[10:25:39.201]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.201]                   NULL)
[10:25:39.201]                 if (is_error) {
[10:25:39.201]                   sessionInformation <- function() {
[10:25:39.201]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.201]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.201]                       search = base::search(), system = base::Sys.info())
[10:25:39.201]                   }
[10:25:39.201]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.201]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.201]                     cond$call), session = sessionInformation(), 
[10:25:39.201]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.201]                   signalCondition(cond)
[10:25:39.201]                 }
[10:25:39.201]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.201]                 "immediateCondition"))) {
[10:25:39.201]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.201]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.201]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.201]                   if (TRUE && !signal) {
[10:25:39.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.201]                     {
[10:25:39.201]                       inherits <- base::inherits
[10:25:39.201]                       invokeRestart <- base::invokeRestart
[10:25:39.201]                       is.null <- base::is.null
[10:25:39.201]                       muffled <- FALSE
[10:25:39.201]                       if (inherits(cond, "message")) {
[10:25:39.201]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.201]                         if (muffled) 
[10:25:39.201]                           invokeRestart("muffleMessage")
[10:25:39.201]                       }
[10:25:39.201]                       else if (inherits(cond, "warning")) {
[10:25:39.201]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.201]                         if (muffled) 
[10:25:39.201]                           invokeRestart("muffleWarning")
[10:25:39.201]                       }
[10:25:39.201]                       else if (inherits(cond, "condition")) {
[10:25:39.201]                         if (!is.null(pattern)) {
[10:25:39.201]                           computeRestarts <- base::computeRestarts
[10:25:39.201]                           grepl <- base::grepl
[10:25:39.201]                           restarts <- computeRestarts(cond)
[10:25:39.201]                           for (restart in restarts) {
[10:25:39.201]                             name <- restart$name
[10:25:39.201]                             if (is.null(name)) 
[10:25:39.201]                               next
[10:25:39.201]                             if (!grepl(pattern, name)) 
[10:25:39.201]                               next
[10:25:39.201]                             invokeRestart(restart)
[10:25:39.201]                             muffled <- TRUE
[10:25:39.201]                             break
[10:25:39.201]                           }
[10:25:39.201]                         }
[10:25:39.201]                       }
[10:25:39.201]                       invisible(muffled)
[10:25:39.201]                     }
[10:25:39.201]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.201]                   }
[10:25:39.201]                 }
[10:25:39.201]                 else {
[10:25:39.201]                   if (TRUE) {
[10:25:39.201]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.201]                     {
[10:25:39.201]                       inherits <- base::inherits
[10:25:39.201]                       invokeRestart <- base::invokeRestart
[10:25:39.201]                       is.null <- base::is.null
[10:25:39.201]                       muffled <- FALSE
[10:25:39.201]                       if (inherits(cond, "message")) {
[10:25:39.201]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.201]                         if (muffled) 
[10:25:39.201]                           invokeRestart("muffleMessage")
[10:25:39.201]                       }
[10:25:39.201]                       else if (inherits(cond, "warning")) {
[10:25:39.201]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.201]                         if (muffled) 
[10:25:39.201]                           invokeRestart("muffleWarning")
[10:25:39.201]                       }
[10:25:39.201]                       else if (inherits(cond, "condition")) {
[10:25:39.201]                         if (!is.null(pattern)) {
[10:25:39.201]                           computeRestarts <- base::computeRestarts
[10:25:39.201]                           grepl <- base::grepl
[10:25:39.201]                           restarts <- computeRestarts(cond)
[10:25:39.201]                           for (restart in restarts) {
[10:25:39.201]                             name <- restart$name
[10:25:39.201]                             if (is.null(name)) 
[10:25:39.201]                               next
[10:25:39.201]                             if (!grepl(pattern, name)) 
[10:25:39.201]                               next
[10:25:39.201]                             invokeRestart(restart)
[10:25:39.201]                             muffled <- TRUE
[10:25:39.201]                             break
[10:25:39.201]                           }
[10:25:39.201]                         }
[10:25:39.201]                       }
[10:25:39.201]                       invisible(muffled)
[10:25:39.201]                     }
[10:25:39.201]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.201]                   }
[10:25:39.201]                 }
[10:25:39.201]             }
[10:25:39.201]         }))
[10:25:39.201]     }, error = function(ex) {
[10:25:39.201]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.201]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.201]                 ...future.rng), started = ...future.startTime, 
[10:25:39.201]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.201]             version = "1.8"), class = "FutureResult")
[10:25:39.201]     }, finally = {
[10:25:39.201]         if (!identical(...future.workdir, getwd())) 
[10:25:39.201]             setwd(...future.workdir)
[10:25:39.201]         {
[10:25:39.201]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.201]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.201]             }
[10:25:39.201]             base::options(...future.oldOptions)
[10:25:39.201]             if (.Platform$OS.type == "windows") {
[10:25:39.201]                 old_names <- names(...future.oldEnvVars)
[10:25:39.201]                 envs <- base::Sys.getenv()
[10:25:39.201]                 names <- names(envs)
[10:25:39.201]                 common <- intersect(names, old_names)
[10:25:39.201]                 added <- setdiff(names, old_names)
[10:25:39.201]                 removed <- setdiff(old_names, names)
[10:25:39.201]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.201]                   envs[common]]
[10:25:39.201]                 NAMES <- toupper(changed)
[10:25:39.201]                 args <- list()
[10:25:39.201]                 for (kk in seq_along(NAMES)) {
[10:25:39.201]                   name <- changed[[kk]]
[10:25:39.201]                   NAME <- NAMES[[kk]]
[10:25:39.201]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.201]                     next
[10:25:39.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.201]                 }
[10:25:39.201]                 NAMES <- toupper(added)
[10:25:39.201]                 for (kk in seq_along(NAMES)) {
[10:25:39.201]                   name <- added[[kk]]
[10:25:39.201]                   NAME <- NAMES[[kk]]
[10:25:39.201]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.201]                     next
[10:25:39.201]                   args[[name]] <- ""
[10:25:39.201]                 }
[10:25:39.201]                 NAMES <- toupper(removed)
[10:25:39.201]                 for (kk in seq_along(NAMES)) {
[10:25:39.201]                   name <- removed[[kk]]
[10:25:39.201]                   NAME <- NAMES[[kk]]
[10:25:39.201]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.201]                     next
[10:25:39.201]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.201]                 }
[10:25:39.201]                 if (length(args) > 0) 
[10:25:39.201]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.201]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.201]             }
[10:25:39.201]             else {
[10:25:39.201]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.201]             }
[10:25:39.201]             {
[10:25:39.201]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.201]                   0L) {
[10:25:39.201]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.201]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.201]                   base::options(opts)
[10:25:39.201]                 }
[10:25:39.201]                 {
[10:25:39.201]                   {
[10:25:39.201]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.201]                     NULL
[10:25:39.201]                   }
[10:25:39.201]                   options(future.plan = NULL)
[10:25:39.201]                   if (is.na(NA_character_)) 
[10:25:39.201]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.201]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.201]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[10:25:39.201]                     envir = parent.frame()) 
[10:25:39.201]                   {
[10:25:39.201]                     default_workers <- missing(workers)
[10:25:39.201]                     if (is.function(workers)) 
[10:25:39.201]                       workers <- workers()
[10:25:39.201]                     workers <- structure(as.integer(workers), 
[10:25:39.201]                       class = class(workers))
[10:25:39.201]                     stop_if_not(is.finite(workers), workers >= 
[10:25:39.201]                       1L)
[10:25:39.201]                     if ((workers == 1L && !inherits(workers, 
[10:25:39.201]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[10:25:39.201]                       if (default_workers) 
[10:25:39.201]                         supportsMulticore(warn = TRUE)
[10:25:39.201]                       return(sequential(..., envir = envir))
[10:25:39.201]                     }
[10:25:39.201]                     oopts <- options(mc.cores = workers)
[10:25:39.201]                     on.exit(options(oopts))
[10:25:39.201]                     future <- MulticoreFuture(..., workers = workers, 
[10:25:39.201]                       envir = envir)
[10:25:39.201]                     if (!future$lazy) 
[10:25:39.201]                       future <- run(future)
[10:25:39.201]                     invisible(future)
[10:25:39.201]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.201]                 }
[10:25:39.201]             }
[10:25:39.201]         }
[10:25:39.201]     })
[10:25:39.201]     if (TRUE) {
[10:25:39.201]         base::sink(type = "output", split = FALSE)
[10:25:39.201]         if (TRUE) {
[10:25:39.201]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.201]         }
[10:25:39.201]         else {
[10:25:39.201]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.201]         }
[10:25:39.201]         base::close(...future.stdout)
[10:25:39.201]         ...future.stdout <- NULL
[10:25:39.201]     }
[10:25:39.201]     ...future.result$conditions <- ...future.conditions
[10:25:39.201]     ...future.result$finished <- base::Sys.time()
[10:25:39.201]     ...future.result
[10:25:39.201] }
[10:25:39.203] assign_globals() ...
[10:25:39.203] List of 1
[10:25:39.203]  $ a: num 1
[10:25:39.203]  - attr(*, "where")=List of 1
[10:25:39.203]   ..$ a:<environment: R_EmptyEnv> 
[10:25:39.203]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[10:25:39.203]  - attr(*, "resolved")= logi FALSE
[10:25:39.203]  - attr(*, "total_size")= num 56
[10:25:39.203]  - attr(*, "already-done")= logi TRUE
[10:25:39.207] - copied ‘a’ to environment
[10:25:39.207] assign_globals() ... done
[10:25:39.207] requestCore(): workers = 2
[10:25:39.209] MulticoreFuture started
[10:25:39.209] - Launch lazy future ... done
[10:25:39.209] run() for ‘MulticoreFuture’ ... done
[10:25:39.209] result() for MulticoreFuture ...
[10:25:39.210] plan(): Setting new future strategy stack:
[10:25:39.210] List of future strategies:
[10:25:39.210] 1. sequential:
[10:25:39.210]    - args: function (..., envir = parent.frame())
[10:25:39.210]    - tweaked: FALSE
[10:25:39.210]    - call: NULL
[10:25:39.211] plan(): nbrOfWorkers() = 1
[10:25:39.213] plan(): Setting new future strategy stack:
[10:25:39.213] List of future strategies:
[10:25:39.213] 1. multicore:
[10:25:39.213]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[10:25:39.213]    - tweaked: FALSE
[10:25:39.213]    - call: plan(strategy)
[10:25:39.218] plan(): nbrOfWorkers() = 2
[10:25:39.219] result() for MulticoreFuture ...
[10:25:39.219] result() for MulticoreFuture ... done
[10:25:39.219] result() for MulticoreFuture ... done
[10:25:39.219] result() for MulticoreFuture ...
[10:25:39.219] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[10:25:39.220] plan(): Setting new future strategy stack:
[10:25:39.220] List of future strategies:
[10:25:39.220] 1. multisession:
[10:25:39.220]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:39.220]    - tweaked: FALSE
[10:25:39.220]    - call: plan(strategy)
[10:25:39.221] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[10:25:39.221] multisession:
[10:25:39.221] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[10:25:39.221] - tweaked: FALSE
[10:25:39.221] - call: plan(strategy)
[10:25:39.228] getGlobalsAndPackages() ...
[10:25:39.228] Not searching for globals
[10:25:39.228] - globals: [0] <none>
[10:25:39.229] getGlobalsAndPackages() ... DONE
[10:25:39.229] [local output] makeClusterPSOCK() ...
[10:25:39.273] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[10:25:39.274] [local output] Base port: 11206
[10:25:39.274] [local output] Getting setup options for 2 cluster nodes ...
[10:25:39.274] [local output]  - Node 1 of 2 ...
[10:25:39.275] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:39.275] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDoKeJo/worker.rank=1.parallelly.parent=82802.14372a879f95.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpDoKeJo/worker.rank=1.parallelly.parent=82802.14372a879f95.pid")'’
[10:25:39.462] - Possible to infer worker's PID: TRUE
[10:25:39.463] [local output] Rscript port: 11206

[10:25:39.463] [local output]  - Node 2 of 2 ...
[10:25:39.463] [local output] localMachine=TRUE => revtunnel=FALSE

[10:25:39.464] [local output] Rscript port: 11206

[10:25:39.464] [local output] Getting setup options for 2 cluster nodes ... done
[10:25:39.464] [local output]  - Parallel setup requested for some PSOCK nodes
[10:25:39.465] [local output] Setting up PSOCK nodes in parallel
[10:25:39.465] List of 36
[10:25:39.465]  $ worker          : chr "localhost"
[10:25:39.465]   ..- attr(*, "localhost")= logi TRUE
[10:25:39.465]  $ master          : chr "localhost"
[10:25:39.465]  $ port            : int 11206
[10:25:39.465]  $ connectTimeout  : num 120
[10:25:39.465]  $ timeout         : num 2592000
[10:25:39.465]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[10:25:39.465]  $ homogeneous     : logi TRUE
[10:25:39.465]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[10:25:39.465]  $ rscript_envs    : NULL
[10:25:39.465]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:39.465]  $ rscript_startup : NULL
[10:25:39.465]  $ rscript_sh      : chr "sh"
[10:25:39.465]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:39.465]  $ methods         : logi TRUE
[10:25:39.465]  $ socketOptions   : chr "no-delay"
[10:25:39.465]  $ useXDR          : logi FALSE
[10:25:39.465]  $ outfile         : chr "/dev/null"
[10:25:39.465]  $ renice          : int NA
[10:25:39.465]  $ rshcmd          : NULL
[10:25:39.465]  $ user            : chr(0) 
[10:25:39.465]  $ revtunnel       : logi FALSE
[10:25:39.465]  $ rshlogfile      : NULL
[10:25:39.465]  $ rshopts         : chr(0) 
[10:25:39.465]  $ rank            : int 1
[10:25:39.465]  $ manual          : logi FALSE
[10:25:39.465]  $ dryrun          : logi FALSE
[10:25:39.465]  $ quiet           : logi FALSE
[10:25:39.465]  $ setup_strategy  : chr "parallel"
[10:25:39.465]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:39.465]  $ pidfile         : chr "/tmp/RtmpDoKeJo/worker.rank=1.parallelly.parent=82802.14372a879f95.pid"
[10:25:39.465]  $ rshcmd_label    : NULL
[10:25:39.465]  $ rsh_call        : NULL
[10:25:39.465]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[10:25:39.465]  $ localMachine    : logi TRUE
[10:25:39.465]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[10:25:39.465]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[10:25:39.465]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[10:25:39.465]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[10:25:39.465]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[10:25:39.465]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[10:25:39.465]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[10:25:39.465]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[10:25:39.465]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[10:25:39.465]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[10:25:39.465]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[10:25:39.465]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[10:25:39.465]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[10:25:39.465]  $ arguments       :List of 28
[10:25:39.465]   ..$ worker          : chr "localhost"
[10:25:39.465]   ..$ master          : NULL
[10:25:39.465]   ..$ port            : int 11206
[10:25:39.465]   ..$ connectTimeout  : num 120
[10:25:39.465]   ..$ timeout         : num 2592000
[10:25:39.465]   ..$ rscript         : NULL
[10:25:39.465]   ..$ homogeneous     : NULL
[10:25:39.465]   ..$ rscript_args    : NULL
[10:25:39.465]   ..$ rscript_envs    : NULL
[10:25:39.465]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[10:25:39.465]   ..$ rscript_startup : NULL
[10:25:39.465]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[10:25:39.465]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[10:25:39.465]   ..$ methods         : logi TRUE
[10:25:39.465]   ..$ socketOptions   : chr "no-delay"
[10:25:39.465]   ..$ useXDR          : logi FALSE
[10:25:39.465]   ..$ outfile         : chr "/dev/null"
[10:25:39.465]   ..$ renice          : int NA
[10:25:39.465]   ..$ rshcmd          : NULL
[10:25:39.465]   ..$ user            : NULL
[10:25:39.465]   ..$ revtunnel       : logi NA
[10:25:39.465]   ..$ rshlogfile      : NULL
[10:25:39.465]   ..$ rshopts         : NULL
[10:25:39.465]   ..$ rank            : int 1
[10:25:39.465]   ..$ manual          : logi FALSE
[10:25:39.465]   ..$ dryrun          : logi FALSE
[10:25:39.465]   ..$ quiet           : logi FALSE
[10:25:39.465]   ..$ setup_strategy  : chr "parallel"
[10:25:39.465]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[10:25:39.482] [local output] System call to launch all workers:
[10:25:39.482] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpDoKeJo/worker.rank=1.parallelly.parent=82802.14372a879f95.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11206 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[10:25:39.482] [local output] Starting PSOCK main server
[10:25:39.487] [local output] Workers launched
[10:25:39.488] [local output] Waiting for workers to connect back
[10:25:39.488]  - [local output] 0 workers out of 2 ready
[10:25:39.731]  - [local output] 0 workers out of 2 ready
[10:25:39.731]  - [local output] 1 workers out of 2 ready
[10:25:39.732]  - [local output] 2 workers out of 2 ready
[10:25:39.732] [local output] Launching of workers completed
[10:25:39.732] [local output] Collecting session information from workers
[10:25:39.733] [local output]  - Worker #1 of 2
[10:25:39.733] [local output]  - Worker #2 of 2
[10:25:39.734] [local output] makeClusterPSOCK() ... done
[10:25:39.747] Packages needed by the future expression (n = 0): <none>
[10:25:39.747] Packages needed by future strategies (n = 0): <none>
[10:25:39.747] {
[10:25:39.747]     {
[10:25:39.747]         {
[10:25:39.747]             ...future.startTime <- base::Sys.time()
[10:25:39.747]             {
[10:25:39.747]                 {
[10:25:39.747]                   {
[10:25:39.747]                     {
[10:25:39.747]                       base::local({
[10:25:39.747]                         has_future <- base::requireNamespace("future", 
[10:25:39.747]                           quietly = TRUE)
[10:25:39.747]                         if (has_future) {
[10:25:39.747]                           ns <- base::getNamespace("future")
[10:25:39.747]                           version <- ns[[".package"]][["version"]]
[10:25:39.747]                           if (is.null(version)) 
[10:25:39.747]                             version <- utils::packageVersion("future")
[10:25:39.747]                         }
[10:25:39.747]                         else {
[10:25:39.747]                           version <- NULL
[10:25:39.747]                         }
[10:25:39.747]                         if (!has_future || version < "1.8.0") {
[10:25:39.747]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.747]                             "", base::R.version$version.string), 
[10:25:39.747]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.747]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.747]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.747]                               "release", "version")], collapse = " "), 
[10:25:39.747]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.747]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.747]                             info)
[10:25:39.747]                           info <- base::paste(info, collapse = "; ")
[10:25:39.747]                           if (!has_future) {
[10:25:39.747]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.747]                               info)
[10:25:39.747]                           }
[10:25:39.747]                           else {
[10:25:39.747]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.747]                               info, version)
[10:25:39.747]                           }
[10:25:39.747]                           base::stop(msg)
[10:25:39.747]                         }
[10:25:39.747]                       })
[10:25:39.747]                     }
[10:25:39.747]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.747]                     base::options(mc.cores = 1L)
[10:25:39.747]                   }
[10:25:39.747]                   options(future.plan = NULL)
[10:25:39.747]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.747]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.747]                 }
[10:25:39.747]                 ...future.workdir <- getwd()
[10:25:39.747]             }
[10:25:39.747]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.747]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.747]         }
[10:25:39.747]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.747]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.747]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.747]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.747]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.747]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.747]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.747]             base::names(...future.oldOptions))
[10:25:39.747]     }
[10:25:39.747]     if (FALSE) {
[10:25:39.747]     }
[10:25:39.747]     else {
[10:25:39.747]         if (TRUE) {
[10:25:39.747]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.747]                 open = "w")
[10:25:39.747]         }
[10:25:39.747]         else {
[10:25:39.747]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.747]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.747]         }
[10:25:39.747]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.747]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.747]             base::sink(type = "output", split = FALSE)
[10:25:39.747]             base::close(...future.stdout)
[10:25:39.747]         }, add = TRUE)
[10:25:39.747]     }
[10:25:39.747]     ...future.frame <- base::sys.nframe()
[10:25:39.747]     ...future.conditions <- base::list()
[10:25:39.747]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.747]     if (FALSE) {
[10:25:39.747]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.747]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.747]     }
[10:25:39.747]     ...future.result <- base::tryCatch({
[10:25:39.747]         base::withCallingHandlers({
[10:25:39.747]             ...future.value <- base::withVisible(base::local({
[10:25:39.747]                 ...future.makeSendCondition <- base::local({
[10:25:39.747]                   sendCondition <- NULL
[10:25:39.747]                   function(frame = 1L) {
[10:25:39.747]                     if (is.function(sendCondition)) 
[10:25:39.747]                       return(sendCondition)
[10:25:39.747]                     ns <- getNamespace("parallel")
[10:25:39.747]                     if (exists("sendData", mode = "function", 
[10:25:39.747]                       envir = ns)) {
[10:25:39.747]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:39.747]                         envir = ns)
[10:25:39.747]                       envir <- sys.frame(frame)
[10:25:39.747]                       master <- NULL
[10:25:39.747]                       while (!identical(envir, .GlobalEnv) && 
[10:25:39.747]                         !identical(envir, emptyenv())) {
[10:25:39.747]                         if (exists("master", mode = "list", envir = envir, 
[10:25:39.747]                           inherits = FALSE)) {
[10:25:39.747]                           master <- get("master", mode = "list", 
[10:25:39.747]                             envir = envir, inherits = FALSE)
[10:25:39.747]                           if (inherits(master, c("SOCKnode", 
[10:25:39.747]                             "SOCK0node"))) {
[10:25:39.747]                             sendCondition <<- function(cond) {
[10:25:39.747]                               data <- list(type = "VALUE", value = cond, 
[10:25:39.747]                                 success = TRUE)
[10:25:39.747]                               parallel_sendData(master, data)
[10:25:39.747]                             }
[10:25:39.747]                             return(sendCondition)
[10:25:39.747]                           }
[10:25:39.747]                         }
[10:25:39.747]                         frame <- frame + 1L
[10:25:39.747]                         envir <- sys.frame(frame)
[10:25:39.747]                       }
[10:25:39.747]                     }
[10:25:39.747]                     sendCondition <<- function(cond) NULL
[10:25:39.747]                   }
[10:25:39.747]                 })
[10:25:39.747]                 withCallingHandlers({
[10:25:39.747]                   NA
[10:25:39.747]                 }, immediateCondition = function(cond) {
[10:25:39.747]                   sendCondition <- ...future.makeSendCondition()
[10:25:39.747]                   sendCondition(cond)
[10:25:39.747]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.747]                   {
[10:25:39.747]                     inherits <- base::inherits
[10:25:39.747]                     invokeRestart <- base::invokeRestart
[10:25:39.747]                     is.null <- base::is.null
[10:25:39.747]                     muffled <- FALSE
[10:25:39.747]                     if (inherits(cond, "message")) {
[10:25:39.747]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.747]                       if (muffled) 
[10:25:39.747]                         invokeRestart("muffleMessage")
[10:25:39.747]                     }
[10:25:39.747]                     else if (inherits(cond, "warning")) {
[10:25:39.747]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.747]                       if (muffled) 
[10:25:39.747]                         invokeRestart("muffleWarning")
[10:25:39.747]                     }
[10:25:39.747]                     else if (inherits(cond, "condition")) {
[10:25:39.747]                       if (!is.null(pattern)) {
[10:25:39.747]                         computeRestarts <- base::computeRestarts
[10:25:39.747]                         grepl <- base::grepl
[10:25:39.747]                         restarts <- computeRestarts(cond)
[10:25:39.747]                         for (restart in restarts) {
[10:25:39.747]                           name <- restart$name
[10:25:39.747]                           if (is.null(name)) 
[10:25:39.747]                             next
[10:25:39.747]                           if (!grepl(pattern, name)) 
[10:25:39.747]                             next
[10:25:39.747]                           invokeRestart(restart)
[10:25:39.747]                           muffled <- TRUE
[10:25:39.747]                           break
[10:25:39.747]                         }
[10:25:39.747]                       }
[10:25:39.747]                     }
[10:25:39.747]                     invisible(muffled)
[10:25:39.747]                   }
[10:25:39.747]                   muffleCondition(cond)
[10:25:39.747]                 })
[10:25:39.747]             }))
[10:25:39.747]             future::FutureResult(value = ...future.value$value, 
[10:25:39.747]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.747]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.747]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.747]                     ...future.globalenv.names))
[10:25:39.747]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.747]         }, condition = base::local({
[10:25:39.747]             c <- base::c
[10:25:39.747]             inherits <- base::inherits
[10:25:39.747]             invokeRestart <- base::invokeRestart
[10:25:39.747]             length <- base::length
[10:25:39.747]             list <- base::list
[10:25:39.747]             seq.int <- base::seq.int
[10:25:39.747]             signalCondition <- base::signalCondition
[10:25:39.747]             sys.calls <- base::sys.calls
[10:25:39.747]             `[[` <- base::`[[`
[10:25:39.747]             `+` <- base::`+`
[10:25:39.747]             `<<-` <- base::`<<-`
[10:25:39.747]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.747]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.747]                   3L)]
[10:25:39.747]             }
[10:25:39.747]             function(cond) {
[10:25:39.747]                 is_error <- inherits(cond, "error")
[10:25:39.747]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.747]                   NULL)
[10:25:39.747]                 if (is_error) {
[10:25:39.747]                   sessionInformation <- function() {
[10:25:39.747]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.747]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.747]                       search = base::search(), system = base::Sys.info())
[10:25:39.747]                   }
[10:25:39.747]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.747]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.747]                     cond$call), session = sessionInformation(), 
[10:25:39.747]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.747]                   signalCondition(cond)
[10:25:39.747]                 }
[10:25:39.747]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.747]                 "immediateCondition"))) {
[10:25:39.747]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.747]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.747]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.747]                   if (TRUE && !signal) {
[10:25:39.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.747]                     {
[10:25:39.747]                       inherits <- base::inherits
[10:25:39.747]                       invokeRestart <- base::invokeRestart
[10:25:39.747]                       is.null <- base::is.null
[10:25:39.747]                       muffled <- FALSE
[10:25:39.747]                       if (inherits(cond, "message")) {
[10:25:39.747]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.747]                         if (muffled) 
[10:25:39.747]                           invokeRestart("muffleMessage")
[10:25:39.747]                       }
[10:25:39.747]                       else if (inherits(cond, "warning")) {
[10:25:39.747]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.747]                         if (muffled) 
[10:25:39.747]                           invokeRestart("muffleWarning")
[10:25:39.747]                       }
[10:25:39.747]                       else if (inherits(cond, "condition")) {
[10:25:39.747]                         if (!is.null(pattern)) {
[10:25:39.747]                           computeRestarts <- base::computeRestarts
[10:25:39.747]                           grepl <- base::grepl
[10:25:39.747]                           restarts <- computeRestarts(cond)
[10:25:39.747]                           for (restart in restarts) {
[10:25:39.747]                             name <- restart$name
[10:25:39.747]                             if (is.null(name)) 
[10:25:39.747]                               next
[10:25:39.747]                             if (!grepl(pattern, name)) 
[10:25:39.747]                               next
[10:25:39.747]                             invokeRestart(restart)
[10:25:39.747]                             muffled <- TRUE
[10:25:39.747]                             break
[10:25:39.747]                           }
[10:25:39.747]                         }
[10:25:39.747]                       }
[10:25:39.747]                       invisible(muffled)
[10:25:39.747]                     }
[10:25:39.747]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.747]                   }
[10:25:39.747]                 }
[10:25:39.747]                 else {
[10:25:39.747]                   if (TRUE) {
[10:25:39.747]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.747]                     {
[10:25:39.747]                       inherits <- base::inherits
[10:25:39.747]                       invokeRestart <- base::invokeRestart
[10:25:39.747]                       is.null <- base::is.null
[10:25:39.747]                       muffled <- FALSE
[10:25:39.747]                       if (inherits(cond, "message")) {
[10:25:39.747]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.747]                         if (muffled) 
[10:25:39.747]                           invokeRestart("muffleMessage")
[10:25:39.747]                       }
[10:25:39.747]                       else if (inherits(cond, "warning")) {
[10:25:39.747]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.747]                         if (muffled) 
[10:25:39.747]                           invokeRestart("muffleWarning")
[10:25:39.747]                       }
[10:25:39.747]                       else if (inherits(cond, "condition")) {
[10:25:39.747]                         if (!is.null(pattern)) {
[10:25:39.747]                           computeRestarts <- base::computeRestarts
[10:25:39.747]                           grepl <- base::grepl
[10:25:39.747]                           restarts <- computeRestarts(cond)
[10:25:39.747]                           for (restart in restarts) {
[10:25:39.747]                             name <- restart$name
[10:25:39.747]                             if (is.null(name)) 
[10:25:39.747]                               next
[10:25:39.747]                             if (!grepl(pattern, name)) 
[10:25:39.747]                               next
[10:25:39.747]                             invokeRestart(restart)
[10:25:39.747]                             muffled <- TRUE
[10:25:39.747]                             break
[10:25:39.747]                           }
[10:25:39.747]                         }
[10:25:39.747]                       }
[10:25:39.747]                       invisible(muffled)
[10:25:39.747]                     }
[10:25:39.747]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.747]                   }
[10:25:39.747]                 }
[10:25:39.747]             }
[10:25:39.747]         }))
[10:25:39.747]     }, error = function(ex) {
[10:25:39.747]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.747]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.747]                 ...future.rng), started = ...future.startTime, 
[10:25:39.747]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.747]             version = "1.8"), class = "FutureResult")
[10:25:39.747]     }, finally = {
[10:25:39.747]         if (!identical(...future.workdir, getwd())) 
[10:25:39.747]             setwd(...future.workdir)
[10:25:39.747]         {
[10:25:39.747]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.747]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.747]             }
[10:25:39.747]             base::options(...future.oldOptions)
[10:25:39.747]             if (.Platform$OS.type == "windows") {
[10:25:39.747]                 old_names <- names(...future.oldEnvVars)
[10:25:39.747]                 envs <- base::Sys.getenv()
[10:25:39.747]                 names <- names(envs)
[10:25:39.747]                 common <- intersect(names, old_names)
[10:25:39.747]                 added <- setdiff(names, old_names)
[10:25:39.747]                 removed <- setdiff(old_names, names)
[10:25:39.747]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.747]                   envs[common]]
[10:25:39.747]                 NAMES <- toupper(changed)
[10:25:39.747]                 args <- list()
[10:25:39.747]                 for (kk in seq_along(NAMES)) {
[10:25:39.747]                   name <- changed[[kk]]
[10:25:39.747]                   NAME <- NAMES[[kk]]
[10:25:39.747]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.747]                     next
[10:25:39.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.747]                 }
[10:25:39.747]                 NAMES <- toupper(added)
[10:25:39.747]                 for (kk in seq_along(NAMES)) {
[10:25:39.747]                   name <- added[[kk]]
[10:25:39.747]                   NAME <- NAMES[[kk]]
[10:25:39.747]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.747]                     next
[10:25:39.747]                   args[[name]] <- ""
[10:25:39.747]                 }
[10:25:39.747]                 NAMES <- toupper(removed)
[10:25:39.747]                 for (kk in seq_along(NAMES)) {
[10:25:39.747]                   name <- removed[[kk]]
[10:25:39.747]                   NAME <- NAMES[[kk]]
[10:25:39.747]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.747]                     next
[10:25:39.747]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.747]                 }
[10:25:39.747]                 if (length(args) > 0) 
[10:25:39.747]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.747]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.747]             }
[10:25:39.747]             else {
[10:25:39.747]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.747]             }
[10:25:39.747]             {
[10:25:39.747]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.747]                   0L) {
[10:25:39.747]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.747]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.747]                   base::options(opts)
[10:25:39.747]                 }
[10:25:39.747]                 {
[10:25:39.747]                   {
[10:25:39.747]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.747]                     NULL
[10:25:39.747]                   }
[10:25:39.747]                   options(future.plan = NULL)
[10:25:39.747]                   if (is.na(NA_character_)) 
[10:25:39.747]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.747]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.747]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:39.747]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:39.747]                     envir = parent.frame()) 
[10:25:39.747]                   {
[10:25:39.747]                     if (is.function(workers)) 
[10:25:39.747]                       workers <- workers()
[10:25:39.747]                     workers <- structure(as.integer(workers), 
[10:25:39.747]                       class = class(workers))
[10:25:39.747]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:39.747]                       workers >= 1)
[10:25:39.747]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:39.747]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:39.747]                     }
[10:25:39.747]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:39.747]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:39.747]                       envir = envir)
[10:25:39.747]                     if (!future$lazy) 
[10:25:39.747]                       future <- run(future)
[10:25:39.747]                     invisible(future)
[10:25:39.747]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.747]                 }
[10:25:39.747]             }
[10:25:39.747]         }
[10:25:39.747]     })
[10:25:39.747]     if (TRUE) {
[10:25:39.747]         base::sink(type = "output", split = FALSE)
[10:25:39.747]         if (TRUE) {
[10:25:39.747]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.747]         }
[10:25:39.747]         else {
[10:25:39.747]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.747]         }
[10:25:39.747]         base::close(...future.stdout)
[10:25:39.747]         ...future.stdout <- NULL
[10:25:39.747]     }
[10:25:39.747]     ...future.result$conditions <- ...future.conditions
[10:25:39.747]     ...future.result$finished <- base::Sys.time()
[10:25:39.747]     ...future.result
[10:25:39.747] }
[10:25:39.801] MultisessionFuture started
[10:25:39.801] result() for ClusterFuture ...
[10:25:39.802] receiveMessageFromWorker() for ClusterFuture ...
[10:25:39.802] - Validating connection of MultisessionFuture
[10:25:39.846] - received message: FutureResult
[10:25:39.847] - Received FutureResult
[10:25:39.847] - Erased future from FutureRegistry
[10:25:39.847] result() for ClusterFuture ...
[10:25:39.847] - result already collected: FutureResult
[10:25:39.847] result() for ClusterFuture ... done
[10:25:39.847] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:39.847] result() for ClusterFuture ... done
[10:25:39.848] result() for ClusterFuture ...
[10:25:39.848] - result already collected: FutureResult
[10:25:39.848] result() for ClusterFuture ... done
[10:25:39.848] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[10:25:39.852] plan(): nbrOfWorkers() = 2
[10:25:39.852] getGlobalsAndPackages() ...
[10:25:39.852] Searching for globals...
[10:25:39.853] - globals found: [1] ‘{’
[10:25:39.853] Searching for globals ... DONE
[10:25:39.853] Resolving globals: FALSE
[10:25:39.854] 
[10:25:39.854] 
[10:25:39.854] getGlobalsAndPackages() ... DONE
[10:25:39.854] run() for ‘Future’ ...
[10:25:39.854] - state: ‘created’
[10:25:39.855] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.869] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.869] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:39.870]   - Field: ‘node’
[10:25:39.870]   - Field: ‘label’
[10:25:39.870]   - Field: ‘local’
[10:25:39.870]   - Field: ‘owner’
[10:25:39.870]   - Field: ‘envir’
[10:25:39.870]   - Field: ‘workers’
[10:25:39.870]   - Field: ‘packages’
[10:25:39.870]   - Field: ‘gc’
[10:25:39.870]   - Field: ‘conditions’
[10:25:39.870]   - Field: ‘persistent’
[10:25:39.871]   - Field: ‘expr’
[10:25:39.871]   - Field: ‘uuid’
[10:25:39.871]   - Field: ‘seed’
[10:25:39.871]   - Field: ‘version’
[10:25:39.871]   - Field: ‘result’
[10:25:39.871]   - Field: ‘asynchronous’
[10:25:39.871]   - Field: ‘calls’
[10:25:39.871]   - Field: ‘globals’
[10:25:39.872]   - Field: ‘stdout’
[10:25:39.872]   - Field: ‘earlySignal’
[10:25:39.872]   - Field: ‘lazy’
[10:25:39.872]   - Field: ‘state’
[10:25:39.872] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:39.872] - Launch lazy future ...
[10:25:39.872] Packages needed by the future expression (n = 0): <none>
[10:25:39.873] Packages needed by future strategies (n = 0): <none>
[10:25:39.873] {
[10:25:39.873]     {
[10:25:39.873]         {
[10:25:39.873]             ...future.startTime <- base::Sys.time()
[10:25:39.873]             {
[10:25:39.873]                 {
[10:25:39.873]                   {
[10:25:39.873]                     {
[10:25:39.873]                       base::local({
[10:25:39.873]                         has_future <- base::requireNamespace("future", 
[10:25:39.873]                           quietly = TRUE)
[10:25:39.873]                         if (has_future) {
[10:25:39.873]                           ns <- base::getNamespace("future")
[10:25:39.873]                           version <- ns[[".package"]][["version"]]
[10:25:39.873]                           if (is.null(version)) 
[10:25:39.873]                             version <- utils::packageVersion("future")
[10:25:39.873]                         }
[10:25:39.873]                         else {
[10:25:39.873]                           version <- NULL
[10:25:39.873]                         }
[10:25:39.873]                         if (!has_future || version < "1.8.0") {
[10:25:39.873]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.873]                             "", base::R.version$version.string), 
[10:25:39.873]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.873]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.873]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.873]                               "release", "version")], collapse = " "), 
[10:25:39.873]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.873]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.873]                             info)
[10:25:39.873]                           info <- base::paste(info, collapse = "; ")
[10:25:39.873]                           if (!has_future) {
[10:25:39.873]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.873]                               info)
[10:25:39.873]                           }
[10:25:39.873]                           else {
[10:25:39.873]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.873]                               info, version)
[10:25:39.873]                           }
[10:25:39.873]                           base::stop(msg)
[10:25:39.873]                         }
[10:25:39.873]                       })
[10:25:39.873]                     }
[10:25:39.873]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.873]                     base::options(mc.cores = 1L)
[10:25:39.873]                   }
[10:25:39.873]                   options(future.plan = NULL)
[10:25:39.873]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.873]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.873]                 }
[10:25:39.873]                 ...future.workdir <- getwd()
[10:25:39.873]             }
[10:25:39.873]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.873]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.873]         }
[10:25:39.873]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.873]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.873]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.873]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.873]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.873]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.873]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.873]             base::names(...future.oldOptions))
[10:25:39.873]     }
[10:25:39.873]     if (FALSE) {
[10:25:39.873]     }
[10:25:39.873]     else {
[10:25:39.873]         if (TRUE) {
[10:25:39.873]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.873]                 open = "w")
[10:25:39.873]         }
[10:25:39.873]         else {
[10:25:39.873]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.873]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.873]         }
[10:25:39.873]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.873]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.873]             base::sink(type = "output", split = FALSE)
[10:25:39.873]             base::close(...future.stdout)
[10:25:39.873]         }, add = TRUE)
[10:25:39.873]     }
[10:25:39.873]     ...future.frame <- base::sys.nframe()
[10:25:39.873]     ...future.conditions <- base::list()
[10:25:39.873]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.873]     if (FALSE) {
[10:25:39.873]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.873]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.873]     }
[10:25:39.873]     ...future.result <- base::tryCatch({
[10:25:39.873]         base::withCallingHandlers({
[10:25:39.873]             ...future.value <- base::withVisible(base::local({
[10:25:39.873]                 ...future.makeSendCondition <- base::local({
[10:25:39.873]                   sendCondition <- NULL
[10:25:39.873]                   function(frame = 1L) {
[10:25:39.873]                     if (is.function(sendCondition)) 
[10:25:39.873]                       return(sendCondition)
[10:25:39.873]                     ns <- getNamespace("parallel")
[10:25:39.873]                     if (exists("sendData", mode = "function", 
[10:25:39.873]                       envir = ns)) {
[10:25:39.873]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:39.873]                         envir = ns)
[10:25:39.873]                       envir <- sys.frame(frame)
[10:25:39.873]                       master <- NULL
[10:25:39.873]                       while (!identical(envir, .GlobalEnv) && 
[10:25:39.873]                         !identical(envir, emptyenv())) {
[10:25:39.873]                         if (exists("master", mode = "list", envir = envir, 
[10:25:39.873]                           inherits = FALSE)) {
[10:25:39.873]                           master <- get("master", mode = "list", 
[10:25:39.873]                             envir = envir, inherits = FALSE)
[10:25:39.873]                           if (inherits(master, c("SOCKnode", 
[10:25:39.873]                             "SOCK0node"))) {
[10:25:39.873]                             sendCondition <<- function(cond) {
[10:25:39.873]                               data <- list(type = "VALUE", value = cond, 
[10:25:39.873]                                 success = TRUE)
[10:25:39.873]                               parallel_sendData(master, data)
[10:25:39.873]                             }
[10:25:39.873]                             return(sendCondition)
[10:25:39.873]                           }
[10:25:39.873]                         }
[10:25:39.873]                         frame <- frame + 1L
[10:25:39.873]                         envir <- sys.frame(frame)
[10:25:39.873]                       }
[10:25:39.873]                     }
[10:25:39.873]                     sendCondition <<- function(cond) NULL
[10:25:39.873]                   }
[10:25:39.873]                 })
[10:25:39.873]                 withCallingHandlers({
[10:25:39.873]                   {
[10:25:39.873]                     2
[10:25:39.873]                   }
[10:25:39.873]                 }, immediateCondition = function(cond) {
[10:25:39.873]                   sendCondition <- ...future.makeSendCondition()
[10:25:39.873]                   sendCondition(cond)
[10:25:39.873]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.873]                   {
[10:25:39.873]                     inherits <- base::inherits
[10:25:39.873]                     invokeRestart <- base::invokeRestart
[10:25:39.873]                     is.null <- base::is.null
[10:25:39.873]                     muffled <- FALSE
[10:25:39.873]                     if (inherits(cond, "message")) {
[10:25:39.873]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.873]                       if (muffled) 
[10:25:39.873]                         invokeRestart("muffleMessage")
[10:25:39.873]                     }
[10:25:39.873]                     else if (inherits(cond, "warning")) {
[10:25:39.873]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.873]                       if (muffled) 
[10:25:39.873]                         invokeRestart("muffleWarning")
[10:25:39.873]                     }
[10:25:39.873]                     else if (inherits(cond, "condition")) {
[10:25:39.873]                       if (!is.null(pattern)) {
[10:25:39.873]                         computeRestarts <- base::computeRestarts
[10:25:39.873]                         grepl <- base::grepl
[10:25:39.873]                         restarts <- computeRestarts(cond)
[10:25:39.873]                         for (restart in restarts) {
[10:25:39.873]                           name <- restart$name
[10:25:39.873]                           if (is.null(name)) 
[10:25:39.873]                             next
[10:25:39.873]                           if (!grepl(pattern, name)) 
[10:25:39.873]                             next
[10:25:39.873]                           invokeRestart(restart)
[10:25:39.873]                           muffled <- TRUE
[10:25:39.873]                           break
[10:25:39.873]                         }
[10:25:39.873]                       }
[10:25:39.873]                     }
[10:25:39.873]                     invisible(muffled)
[10:25:39.873]                   }
[10:25:39.873]                   muffleCondition(cond)
[10:25:39.873]                 })
[10:25:39.873]             }))
[10:25:39.873]             future::FutureResult(value = ...future.value$value, 
[10:25:39.873]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.873]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.873]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.873]                     ...future.globalenv.names))
[10:25:39.873]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.873]         }, condition = base::local({
[10:25:39.873]             c <- base::c
[10:25:39.873]             inherits <- base::inherits
[10:25:39.873]             invokeRestart <- base::invokeRestart
[10:25:39.873]             length <- base::length
[10:25:39.873]             list <- base::list
[10:25:39.873]             seq.int <- base::seq.int
[10:25:39.873]             signalCondition <- base::signalCondition
[10:25:39.873]             sys.calls <- base::sys.calls
[10:25:39.873]             `[[` <- base::`[[`
[10:25:39.873]             `+` <- base::`+`
[10:25:39.873]             `<<-` <- base::`<<-`
[10:25:39.873]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.873]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.873]                   3L)]
[10:25:39.873]             }
[10:25:39.873]             function(cond) {
[10:25:39.873]                 is_error <- inherits(cond, "error")
[10:25:39.873]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.873]                   NULL)
[10:25:39.873]                 if (is_error) {
[10:25:39.873]                   sessionInformation <- function() {
[10:25:39.873]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.873]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.873]                       search = base::search(), system = base::Sys.info())
[10:25:39.873]                   }
[10:25:39.873]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.873]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.873]                     cond$call), session = sessionInformation(), 
[10:25:39.873]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.873]                   signalCondition(cond)
[10:25:39.873]                 }
[10:25:39.873]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.873]                 "immediateCondition"))) {
[10:25:39.873]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.873]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.873]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.873]                   if (TRUE && !signal) {
[10:25:39.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.873]                     {
[10:25:39.873]                       inherits <- base::inherits
[10:25:39.873]                       invokeRestart <- base::invokeRestart
[10:25:39.873]                       is.null <- base::is.null
[10:25:39.873]                       muffled <- FALSE
[10:25:39.873]                       if (inherits(cond, "message")) {
[10:25:39.873]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.873]                         if (muffled) 
[10:25:39.873]                           invokeRestart("muffleMessage")
[10:25:39.873]                       }
[10:25:39.873]                       else if (inherits(cond, "warning")) {
[10:25:39.873]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.873]                         if (muffled) 
[10:25:39.873]                           invokeRestart("muffleWarning")
[10:25:39.873]                       }
[10:25:39.873]                       else if (inherits(cond, "condition")) {
[10:25:39.873]                         if (!is.null(pattern)) {
[10:25:39.873]                           computeRestarts <- base::computeRestarts
[10:25:39.873]                           grepl <- base::grepl
[10:25:39.873]                           restarts <- computeRestarts(cond)
[10:25:39.873]                           for (restart in restarts) {
[10:25:39.873]                             name <- restart$name
[10:25:39.873]                             if (is.null(name)) 
[10:25:39.873]                               next
[10:25:39.873]                             if (!grepl(pattern, name)) 
[10:25:39.873]                               next
[10:25:39.873]                             invokeRestart(restart)
[10:25:39.873]                             muffled <- TRUE
[10:25:39.873]                             break
[10:25:39.873]                           }
[10:25:39.873]                         }
[10:25:39.873]                       }
[10:25:39.873]                       invisible(muffled)
[10:25:39.873]                     }
[10:25:39.873]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.873]                   }
[10:25:39.873]                 }
[10:25:39.873]                 else {
[10:25:39.873]                   if (TRUE) {
[10:25:39.873]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.873]                     {
[10:25:39.873]                       inherits <- base::inherits
[10:25:39.873]                       invokeRestart <- base::invokeRestart
[10:25:39.873]                       is.null <- base::is.null
[10:25:39.873]                       muffled <- FALSE
[10:25:39.873]                       if (inherits(cond, "message")) {
[10:25:39.873]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.873]                         if (muffled) 
[10:25:39.873]                           invokeRestart("muffleMessage")
[10:25:39.873]                       }
[10:25:39.873]                       else if (inherits(cond, "warning")) {
[10:25:39.873]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.873]                         if (muffled) 
[10:25:39.873]                           invokeRestart("muffleWarning")
[10:25:39.873]                       }
[10:25:39.873]                       else if (inherits(cond, "condition")) {
[10:25:39.873]                         if (!is.null(pattern)) {
[10:25:39.873]                           computeRestarts <- base::computeRestarts
[10:25:39.873]                           grepl <- base::grepl
[10:25:39.873]                           restarts <- computeRestarts(cond)
[10:25:39.873]                           for (restart in restarts) {
[10:25:39.873]                             name <- restart$name
[10:25:39.873]                             if (is.null(name)) 
[10:25:39.873]                               next
[10:25:39.873]                             if (!grepl(pattern, name)) 
[10:25:39.873]                               next
[10:25:39.873]                             invokeRestart(restart)
[10:25:39.873]                             muffled <- TRUE
[10:25:39.873]                             break
[10:25:39.873]                           }
[10:25:39.873]                         }
[10:25:39.873]                       }
[10:25:39.873]                       invisible(muffled)
[10:25:39.873]                     }
[10:25:39.873]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.873]                   }
[10:25:39.873]                 }
[10:25:39.873]             }
[10:25:39.873]         }))
[10:25:39.873]     }, error = function(ex) {
[10:25:39.873]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.873]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.873]                 ...future.rng), started = ...future.startTime, 
[10:25:39.873]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.873]             version = "1.8"), class = "FutureResult")
[10:25:39.873]     }, finally = {
[10:25:39.873]         if (!identical(...future.workdir, getwd())) 
[10:25:39.873]             setwd(...future.workdir)
[10:25:39.873]         {
[10:25:39.873]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.873]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.873]             }
[10:25:39.873]             base::options(...future.oldOptions)
[10:25:39.873]             if (.Platform$OS.type == "windows") {
[10:25:39.873]                 old_names <- names(...future.oldEnvVars)
[10:25:39.873]                 envs <- base::Sys.getenv()
[10:25:39.873]                 names <- names(envs)
[10:25:39.873]                 common <- intersect(names, old_names)
[10:25:39.873]                 added <- setdiff(names, old_names)
[10:25:39.873]                 removed <- setdiff(old_names, names)
[10:25:39.873]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.873]                   envs[common]]
[10:25:39.873]                 NAMES <- toupper(changed)
[10:25:39.873]                 args <- list()
[10:25:39.873]                 for (kk in seq_along(NAMES)) {
[10:25:39.873]                   name <- changed[[kk]]
[10:25:39.873]                   NAME <- NAMES[[kk]]
[10:25:39.873]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.873]                     next
[10:25:39.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.873]                 }
[10:25:39.873]                 NAMES <- toupper(added)
[10:25:39.873]                 for (kk in seq_along(NAMES)) {
[10:25:39.873]                   name <- added[[kk]]
[10:25:39.873]                   NAME <- NAMES[[kk]]
[10:25:39.873]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.873]                     next
[10:25:39.873]                   args[[name]] <- ""
[10:25:39.873]                 }
[10:25:39.873]                 NAMES <- toupper(removed)
[10:25:39.873]                 for (kk in seq_along(NAMES)) {
[10:25:39.873]                   name <- removed[[kk]]
[10:25:39.873]                   NAME <- NAMES[[kk]]
[10:25:39.873]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.873]                     next
[10:25:39.873]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.873]                 }
[10:25:39.873]                 if (length(args) > 0) 
[10:25:39.873]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.873]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.873]             }
[10:25:39.873]             else {
[10:25:39.873]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.873]             }
[10:25:39.873]             {
[10:25:39.873]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.873]                   0L) {
[10:25:39.873]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.873]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.873]                   base::options(opts)
[10:25:39.873]                 }
[10:25:39.873]                 {
[10:25:39.873]                   {
[10:25:39.873]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.873]                     NULL
[10:25:39.873]                   }
[10:25:39.873]                   options(future.plan = NULL)
[10:25:39.873]                   if (is.na(NA_character_)) 
[10:25:39.873]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.873]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.873]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:39.873]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:39.873]                     envir = parent.frame()) 
[10:25:39.873]                   {
[10:25:39.873]                     if (is.function(workers)) 
[10:25:39.873]                       workers <- workers()
[10:25:39.873]                     workers <- structure(as.integer(workers), 
[10:25:39.873]                       class = class(workers))
[10:25:39.873]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:39.873]                       workers >= 1)
[10:25:39.873]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:39.873]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:39.873]                     }
[10:25:39.873]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:39.873]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:39.873]                       envir = envir)
[10:25:39.873]                     if (!future$lazy) 
[10:25:39.873]                       future <- run(future)
[10:25:39.873]                     invisible(future)
[10:25:39.873]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.873]                 }
[10:25:39.873]             }
[10:25:39.873]         }
[10:25:39.873]     })
[10:25:39.873]     if (TRUE) {
[10:25:39.873]         base::sink(type = "output", split = FALSE)
[10:25:39.873]         if (TRUE) {
[10:25:39.873]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.873]         }
[10:25:39.873]         else {
[10:25:39.873]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.873]         }
[10:25:39.873]         base::close(...future.stdout)
[10:25:39.873]         ...future.stdout <- NULL
[10:25:39.873]     }
[10:25:39.873]     ...future.result$conditions <- ...future.conditions
[10:25:39.873]     ...future.result$finished <- base::Sys.time()
[10:25:39.873]     ...future.result
[10:25:39.873] }
[10:25:39.877] MultisessionFuture started
[10:25:39.877] - Launch lazy future ... done
[10:25:39.877] run() for ‘MultisessionFuture’ ... done
[10:25:39.877] getGlobalsAndPackages() ...
[10:25:39.878] Searching for globals...
[10:25:39.878] - globals found: [1] ‘{’
[10:25:39.878] Searching for globals ... DONE
[10:25:39.879] Resolving globals: FALSE
[10:25:39.879] 
[10:25:39.879] 
[10:25:39.879] getGlobalsAndPackages() ... DONE
[10:25:39.879] run() for ‘Future’ ...
[10:25:39.880] - state: ‘created’
[10:25:39.880] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:39.894] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:39.894] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:39.895]   - Field: ‘node’
[10:25:39.895]   - Field: ‘label’
[10:25:39.895]   - Field: ‘local’
[10:25:39.895]   - Field: ‘owner’
[10:25:39.895]   - Field: ‘envir’
[10:25:39.895]   - Field: ‘workers’
[10:25:39.895]   - Field: ‘packages’
[10:25:39.895]   - Field: ‘gc’
[10:25:39.895]   - Field: ‘conditions’
[10:25:39.895]   - Field: ‘persistent’
[10:25:39.896]   - Field: ‘expr’
[10:25:39.896]   - Field: ‘uuid’
[10:25:39.896]   - Field: ‘seed’
[10:25:39.896]   - Field: ‘version’
[10:25:39.896]   - Field: ‘result’
[10:25:39.896]   - Field: ‘asynchronous’
[10:25:39.896]   - Field: ‘calls’
[10:25:39.896]   - Field: ‘globals’
[10:25:39.896]   - Field: ‘stdout’
[10:25:39.897]   - Field: ‘earlySignal’
[10:25:39.897]   - Field: ‘lazy’
[10:25:39.897]   - Field: ‘state’
[10:25:39.897] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:39.897] - Launch lazy future ...
[10:25:39.897] Packages needed by the future expression (n = 0): <none>
[10:25:39.898] Packages needed by future strategies (n = 0): <none>
[10:25:39.898] {
[10:25:39.898]     {
[10:25:39.898]         {
[10:25:39.898]             ...future.startTime <- base::Sys.time()
[10:25:39.898]             {
[10:25:39.898]                 {
[10:25:39.898]                   {
[10:25:39.898]                     {
[10:25:39.898]                       base::local({
[10:25:39.898]                         has_future <- base::requireNamespace("future", 
[10:25:39.898]                           quietly = TRUE)
[10:25:39.898]                         if (has_future) {
[10:25:39.898]                           ns <- base::getNamespace("future")
[10:25:39.898]                           version <- ns[[".package"]][["version"]]
[10:25:39.898]                           if (is.null(version)) 
[10:25:39.898]                             version <- utils::packageVersion("future")
[10:25:39.898]                         }
[10:25:39.898]                         else {
[10:25:39.898]                           version <- NULL
[10:25:39.898]                         }
[10:25:39.898]                         if (!has_future || version < "1.8.0") {
[10:25:39.898]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:39.898]                             "", base::R.version$version.string), 
[10:25:39.898]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:39.898]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:39.898]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:39.898]                               "release", "version")], collapse = " "), 
[10:25:39.898]                             hostname = base::Sys.info()[["nodename"]])
[10:25:39.898]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:39.898]                             info)
[10:25:39.898]                           info <- base::paste(info, collapse = "; ")
[10:25:39.898]                           if (!has_future) {
[10:25:39.898]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:39.898]                               info)
[10:25:39.898]                           }
[10:25:39.898]                           else {
[10:25:39.898]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:39.898]                               info, version)
[10:25:39.898]                           }
[10:25:39.898]                           base::stop(msg)
[10:25:39.898]                         }
[10:25:39.898]                       })
[10:25:39.898]                     }
[10:25:39.898]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:39.898]                     base::options(mc.cores = 1L)
[10:25:39.898]                   }
[10:25:39.898]                   options(future.plan = NULL)
[10:25:39.898]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.898]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:39.898]                 }
[10:25:39.898]                 ...future.workdir <- getwd()
[10:25:39.898]             }
[10:25:39.898]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:39.898]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:39.898]         }
[10:25:39.898]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:39.898]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:39.898]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:39.898]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:39.898]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:39.898]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:39.898]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:39.898]             base::names(...future.oldOptions))
[10:25:39.898]     }
[10:25:39.898]     if (FALSE) {
[10:25:39.898]     }
[10:25:39.898]     else {
[10:25:39.898]         if (TRUE) {
[10:25:39.898]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:39.898]                 open = "w")
[10:25:39.898]         }
[10:25:39.898]         else {
[10:25:39.898]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:39.898]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:39.898]         }
[10:25:39.898]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:39.898]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:39.898]             base::sink(type = "output", split = FALSE)
[10:25:39.898]             base::close(...future.stdout)
[10:25:39.898]         }, add = TRUE)
[10:25:39.898]     }
[10:25:39.898]     ...future.frame <- base::sys.nframe()
[10:25:39.898]     ...future.conditions <- base::list()
[10:25:39.898]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:39.898]     if (FALSE) {
[10:25:39.898]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:39.898]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:39.898]     }
[10:25:39.898]     ...future.result <- base::tryCatch({
[10:25:39.898]         base::withCallingHandlers({
[10:25:39.898]             ...future.value <- base::withVisible(base::local({
[10:25:39.898]                 ...future.makeSendCondition <- base::local({
[10:25:39.898]                   sendCondition <- NULL
[10:25:39.898]                   function(frame = 1L) {
[10:25:39.898]                     if (is.function(sendCondition)) 
[10:25:39.898]                       return(sendCondition)
[10:25:39.898]                     ns <- getNamespace("parallel")
[10:25:39.898]                     if (exists("sendData", mode = "function", 
[10:25:39.898]                       envir = ns)) {
[10:25:39.898]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:39.898]                         envir = ns)
[10:25:39.898]                       envir <- sys.frame(frame)
[10:25:39.898]                       master <- NULL
[10:25:39.898]                       while (!identical(envir, .GlobalEnv) && 
[10:25:39.898]                         !identical(envir, emptyenv())) {
[10:25:39.898]                         if (exists("master", mode = "list", envir = envir, 
[10:25:39.898]                           inherits = FALSE)) {
[10:25:39.898]                           master <- get("master", mode = "list", 
[10:25:39.898]                             envir = envir, inherits = FALSE)
[10:25:39.898]                           if (inherits(master, c("SOCKnode", 
[10:25:39.898]                             "SOCK0node"))) {
[10:25:39.898]                             sendCondition <<- function(cond) {
[10:25:39.898]                               data <- list(type = "VALUE", value = cond, 
[10:25:39.898]                                 success = TRUE)
[10:25:39.898]                               parallel_sendData(master, data)
[10:25:39.898]                             }
[10:25:39.898]                             return(sendCondition)
[10:25:39.898]                           }
[10:25:39.898]                         }
[10:25:39.898]                         frame <- frame + 1L
[10:25:39.898]                         envir <- sys.frame(frame)
[10:25:39.898]                       }
[10:25:39.898]                     }
[10:25:39.898]                     sendCondition <<- function(cond) NULL
[10:25:39.898]                   }
[10:25:39.898]                 })
[10:25:39.898]                 withCallingHandlers({
[10:25:39.898]                   {
[10:25:39.898]                     4
[10:25:39.898]                   }
[10:25:39.898]                 }, immediateCondition = function(cond) {
[10:25:39.898]                   sendCondition <- ...future.makeSendCondition()
[10:25:39.898]                   sendCondition(cond)
[10:25:39.898]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.898]                   {
[10:25:39.898]                     inherits <- base::inherits
[10:25:39.898]                     invokeRestart <- base::invokeRestart
[10:25:39.898]                     is.null <- base::is.null
[10:25:39.898]                     muffled <- FALSE
[10:25:39.898]                     if (inherits(cond, "message")) {
[10:25:39.898]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:39.898]                       if (muffled) 
[10:25:39.898]                         invokeRestart("muffleMessage")
[10:25:39.898]                     }
[10:25:39.898]                     else if (inherits(cond, "warning")) {
[10:25:39.898]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:39.898]                       if (muffled) 
[10:25:39.898]                         invokeRestart("muffleWarning")
[10:25:39.898]                     }
[10:25:39.898]                     else if (inherits(cond, "condition")) {
[10:25:39.898]                       if (!is.null(pattern)) {
[10:25:39.898]                         computeRestarts <- base::computeRestarts
[10:25:39.898]                         grepl <- base::grepl
[10:25:39.898]                         restarts <- computeRestarts(cond)
[10:25:39.898]                         for (restart in restarts) {
[10:25:39.898]                           name <- restart$name
[10:25:39.898]                           if (is.null(name)) 
[10:25:39.898]                             next
[10:25:39.898]                           if (!grepl(pattern, name)) 
[10:25:39.898]                             next
[10:25:39.898]                           invokeRestart(restart)
[10:25:39.898]                           muffled <- TRUE
[10:25:39.898]                           break
[10:25:39.898]                         }
[10:25:39.898]                       }
[10:25:39.898]                     }
[10:25:39.898]                     invisible(muffled)
[10:25:39.898]                   }
[10:25:39.898]                   muffleCondition(cond)
[10:25:39.898]                 })
[10:25:39.898]             }))
[10:25:39.898]             future::FutureResult(value = ...future.value$value, 
[10:25:39.898]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.898]                   ...future.rng), globalenv = if (FALSE) 
[10:25:39.898]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:39.898]                     ...future.globalenv.names))
[10:25:39.898]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:39.898]         }, condition = base::local({
[10:25:39.898]             c <- base::c
[10:25:39.898]             inherits <- base::inherits
[10:25:39.898]             invokeRestart <- base::invokeRestart
[10:25:39.898]             length <- base::length
[10:25:39.898]             list <- base::list
[10:25:39.898]             seq.int <- base::seq.int
[10:25:39.898]             signalCondition <- base::signalCondition
[10:25:39.898]             sys.calls <- base::sys.calls
[10:25:39.898]             `[[` <- base::`[[`
[10:25:39.898]             `+` <- base::`+`
[10:25:39.898]             `<<-` <- base::`<<-`
[10:25:39.898]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:39.898]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:39.898]                   3L)]
[10:25:39.898]             }
[10:25:39.898]             function(cond) {
[10:25:39.898]                 is_error <- inherits(cond, "error")
[10:25:39.898]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:39.898]                   NULL)
[10:25:39.898]                 if (is_error) {
[10:25:39.898]                   sessionInformation <- function() {
[10:25:39.898]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:39.898]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:39.898]                       search = base::search(), system = base::Sys.info())
[10:25:39.898]                   }
[10:25:39.898]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.898]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:39.898]                     cond$call), session = sessionInformation(), 
[10:25:39.898]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:39.898]                   signalCondition(cond)
[10:25:39.898]                 }
[10:25:39.898]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:39.898]                 "immediateCondition"))) {
[10:25:39.898]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:39.898]                   ...future.conditions[[length(...future.conditions) + 
[10:25:39.898]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:39.898]                   if (TRUE && !signal) {
[10:25:39.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.898]                     {
[10:25:39.898]                       inherits <- base::inherits
[10:25:39.898]                       invokeRestart <- base::invokeRestart
[10:25:39.898]                       is.null <- base::is.null
[10:25:39.898]                       muffled <- FALSE
[10:25:39.898]                       if (inherits(cond, "message")) {
[10:25:39.898]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.898]                         if (muffled) 
[10:25:39.898]                           invokeRestart("muffleMessage")
[10:25:39.898]                       }
[10:25:39.898]                       else if (inherits(cond, "warning")) {
[10:25:39.898]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.898]                         if (muffled) 
[10:25:39.898]                           invokeRestart("muffleWarning")
[10:25:39.898]                       }
[10:25:39.898]                       else if (inherits(cond, "condition")) {
[10:25:39.898]                         if (!is.null(pattern)) {
[10:25:39.898]                           computeRestarts <- base::computeRestarts
[10:25:39.898]                           grepl <- base::grepl
[10:25:39.898]                           restarts <- computeRestarts(cond)
[10:25:39.898]                           for (restart in restarts) {
[10:25:39.898]                             name <- restart$name
[10:25:39.898]                             if (is.null(name)) 
[10:25:39.898]                               next
[10:25:39.898]                             if (!grepl(pattern, name)) 
[10:25:39.898]                               next
[10:25:39.898]                             invokeRestart(restart)
[10:25:39.898]                             muffled <- TRUE
[10:25:39.898]                             break
[10:25:39.898]                           }
[10:25:39.898]                         }
[10:25:39.898]                       }
[10:25:39.898]                       invisible(muffled)
[10:25:39.898]                     }
[10:25:39.898]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.898]                   }
[10:25:39.898]                 }
[10:25:39.898]                 else {
[10:25:39.898]                   if (TRUE) {
[10:25:39.898]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:39.898]                     {
[10:25:39.898]                       inherits <- base::inherits
[10:25:39.898]                       invokeRestart <- base::invokeRestart
[10:25:39.898]                       is.null <- base::is.null
[10:25:39.898]                       muffled <- FALSE
[10:25:39.898]                       if (inherits(cond, "message")) {
[10:25:39.898]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:39.898]                         if (muffled) 
[10:25:39.898]                           invokeRestart("muffleMessage")
[10:25:39.898]                       }
[10:25:39.898]                       else if (inherits(cond, "warning")) {
[10:25:39.898]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:39.898]                         if (muffled) 
[10:25:39.898]                           invokeRestart("muffleWarning")
[10:25:39.898]                       }
[10:25:39.898]                       else if (inherits(cond, "condition")) {
[10:25:39.898]                         if (!is.null(pattern)) {
[10:25:39.898]                           computeRestarts <- base::computeRestarts
[10:25:39.898]                           grepl <- base::grepl
[10:25:39.898]                           restarts <- computeRestarts(cond)
[10:25:39.898]                           for (restart in restarts) {
[10:25:39.898]                             name <- restart$name
[10:25:39.898]                             if (is.null(name)) 
[10:25:39.898]                               next
[10:25:39.898]                             if (!grepl(pattern, name)) 
[10:25:39.898]                               next
[10:25:39.898]                             invokeRestart(restart)
[10:25:39.898]                             muffled <- TRUE
[10:25:39.898]                             break
[10:25:39.898]                           }
[10:25:39.898]                         }
[10:25:39.898]                       }
[10:25:39.898]                       invisible(muffled)
[10:25:39.898]                     }
[10:25:39.898]                     muffleCondition(cond, pattern = "^muffle")
[10:25:39.898]                   }
[10:25:39.898]                 }
[10:25:39.898]             }
[10:25:39.898]         }))
[10:25:39.898]     }, error = function(ex) {
[10:25:39.898]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:39.898]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:39.898]                 ...future.rng), started = ...future.startTime, 
[10:25:39.898]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:39.898]             version = "1.8"), class = "FutureResult")
[10:25:39.898]     }, finally = {
[10:25:39.898]         if (!identical(...future.workdir, getwd())) 
[10:25:39.898]             setwd(...future.workdir)
[10:25:39.898]         {
[10:25:39.898]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:39.898]                 ...future.oldOptions$nwarnings <- NULL
[10:25:39.898]             }
[10:25:39.898]             base::options(...future.oldOptions)
[10:25:39.898]             if (.Platform$OS.type == "windows") {
[10:25:39.898]                 old_names <- names(...future.oldEnvVars)
[10:25:39.898]                 envs <- base::Sys.getenv()
[10:25:39.898]                 names <- names(envs)
[10:25:39.898]                 common <- intersect(names, old_names)
[10:25:39.898]                 added <- setdiff(names, old_names)
[10:25:39.898]                 removed <- setdiff(old_names, names)
[10:25:39.898]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:39.898]                   envs[common]]
[10:25:39.898]                 NAMES <- toupper(changed)
[10:25:39.898]                 args <- list()
[10:25:39.898]                 for (kk in seq_along(NAMES)) {
[10:25:39.898]                   name <- changed[[kk]]
[10:25:39.898]                   NAME <- NAMES[[kk]]
[10:25:39.898]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.898]                     next
[10:25:39.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.898]                 }
[10:25:39.898]                 NAMES <- toupper(added)
[10:25:39.898]                 for (kk in seq_along(NAMES)) {
[10:25:39.898]                   name <- added[[kk]]
[10:25:39.898]                   NAME <- NAMES[[kk]]
[10:25:39.898]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.898]                     next
[10:25:39.898]                   args[[name]] <- ""
[10:25:39.898]                 }
[10:25:39.898]                 NAMES <- toupper(removed)
[10:25:39.898]                 for (kk in seq_along(NAMES)) {
[10:25:39.898]                   name <- removed[[kk]]
[10:25:39.898]                   NAME <- NAMES[[kk]]
[10:25:39.898]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:39.898]                     next
[10:25:39.898]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:39.898]                 }
[10:25:39.898]                 if (length(args) > 0) 
[10:25:39.898]                   base::do.call(base::Sys.setenv, args = args)
[10:25:39.898]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:39.898]             }
[10:25:39.898]             else {
[10:25:39.898]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:39.898]             }
[10:25:39.898]             {
[10:25:39.898]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:39.898]                   0L) {
[10:25:39.898]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:39.898]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:39.898]                   base::options(opts)
[10:25:39.898]                 }
[10:25:39.898]                 {
[10:25:39.898]                   {
[10:25:39.898]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:39.898]                     NULL
[10:25:39.898]                   }
[10:25:39.898]                   options(future.plan = NULL)
[10:25:39.898]                   if (is.na(NA_character_)) 
[10:25:39.898]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:39.898]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:39.898]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:39.898]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:39.898]                     envir = parent.frame()) 
[10:25:39.898]                   {
[10:25:39.898]                     if (is.function(workers)) 
[10:25:39.898]                       workers <- workers()
[10:25:39.898]                     workers <- structure(as.integer(workers), 
[10:25:39.898]                       class = class(workers))
[10:25:39.898]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:39.898]                       workers >= 1)
[10:25:39.898]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:39.898]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:39.898]                     }
[10:25:39.898]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:39.898]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:39.898]                       envir = envir)
[10:25:39.898]                     if (!future$lazy) 
[10:25:39.898]                       future <- run(future)
[10:25:39.898]                     invisible(future)
[10:25:39.898]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:39.898]                 }
[10:25:39.898]             }
[10:25:39.898]         }
[10:25:39.898]     })
[10:25:39.898]     if (TRUE) {
[10:25:39.898]         base::sink(type = "output", split = FALSE)
[10:25:39.898]         if (TRUE) {
[10:25:39.898]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:39.898]         }
[10:25:39.898]         else {
[10:25:39.898]             ...future.result["stdout"] <- base::list(NULL)
[10:25:39.898]         }
[10:25:39.898]         base::close(...future.stdout)
[10:25:39.898]         ...future.stdout <- NULL
[10:25:39.898]     }
[10:25:39.898]     ...future.result$conditions <- ...future.conditions
[10:25:39.898]     ...future.result$finished <- base::Sys.time()
[10:25:39.898]     ...future.result
[10:25:39.898] }
[10:25:39.954] MultisessionFuture started
[10:25:39.954] - Launch lazy future ... done
[10:25:39.954] run() for ‘MultisessionFuture’ ... done
[10:25:39.955] result() for ClusterFuture ...
[10:25:39.955] receiveMessageFromWorker() for ClusterFuture ...
[10:25:39.955] - Validating connection of MultisessionFuture
[10:25:39.955] - received message: FutureResult
[10:25:39.955] - Received FutureResult
[10:25:39.955] - Erased future from FutureRegistry
[10:25:39.956] result() for ClusterFuture ...
[10:25:39.956] - result already collected: FutureResult
[10:25:39.956] result() for ClusterFuture ... done
[10:25:39.956] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:39.956] result() for ClusterFuture ... done
[10:25:39.956] result() for ClusterFuture ...
[10:25:39.956] - result already collected: FutureResult
[10:25:39.956] result() for ClusterFuture ... done
u$a = 2
[10:25:39.957] result() for ClusterFuture ...
[10:25:39.957] receiveMessageFromWorker() for ClusterFuture ...
[10:25:39.957] - Validating connection of MultisessionFuture
[10:25:39.998] - received message: FutureResult
[10:25:39.999] - Received FutureResult
[10:25:39.999] - Erased future from FutureRegistry
[10:25:39.999] result() for ClusterFuture ...
[10:25:39.999] - result already collected: FutureResult
[10:25:39.999] result() for ClusterFuture ... done
[10:25:39.999] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:39.999] result() for ClusterFuture ... done
[10:25:39.999] result() for ClusterFuture ...
[10:25:40.000] - result already collected: FutureResult
[10:25:40.000] result() for ClusterFuture ... done
v$a = 4
[10:25:40.000] getGlobalsAndPackages() ...
[10:25:40.000] Searching for globals...
[10:25:40.001] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:40.001] Searching for globals ... DONE
[10:25:40.002] Resolving globals: FALSE
[10:25:40.002] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:40.002] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:40.003] - globals: [1] ‘a’
[10:25:40.003] 
[10:25:40.003] getGlobalsAndPackages() ... DONE
[10:25:40.003] run() for ‘Future’ ...
[10:25:40.003] - state: ‘created’
[10:25:40.004] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:40.018] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:40.018] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:40.018]   - Field: ‘node’
[10:25:40.018]   - Field: ‘label’
[10:25:40.018]   - Field: ‘local’
[10:25:40.019]   - Field: ‘owner’
[10:25:40.019]   - Field: ‘envir’
[10:25:40.019]   - Field: ‘workers’
[10:25:40.019]   - Field: ‘packages’
[10:25:40.019]   - Field: ‘gc’
[10:25:40.019]   - Field: ‘conditions’
[10:25:40.019]   - Field: ‘persistent’
[10:25:40.019]   - Field: ‘expr’
[10:25:40.019]   - Field: ‘uuid’
[10:25:40.020]   - Field: ‘seed’
[10:25:40.020]   - Field: ‘version’
[10:25:40.020]   - Field: ‘result’
[10:25:40.020]   - Field: ‘asynchronous’
[10:25:40.020]   - Field: ‘calls’
[10:25:40.020]   - Field: ‘globals’
[10:25:40.020]   - Field: ‘stdout’
[10:25:40.020]   - Field: ‘earlySignal’
[10:25:40.020]   - Field: ‘lazy’
[10:25:40.021]   - Field: ‘state’
[10:25:40.021] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:40.021] - Launch lazy future ...
[10:25:40.021] Packages needed by the future expression (n = 0): <none>
[10:25:40.021] Packages needed by future strategies (n = 0): <none>
[10:25:40.022] {
[10:25:40.022]     {
[10:25:40.022]         {
[10:25:40.022]             ...future.startTime <- base::Sys.time()
[10:25:40.022]             {
[10:25:40.022]                 {
[10:25:40.022]                   {
[10:25:40.022]                     {
[10:25:40.022]                       base::local({
[10:25:40.022]                         has_future <- base::requireNamespace("future", 
[10:25:40.022]                           quietly = TRUE)
[10:25:40.022]                         if (has_future) {
[10:25:40.022]                           ns <- base::getNamespace("future")
[10:25:40.022]                           version <- ns[[".package"]][["version"]]
[10:25:40.022]                           if (is.null(version)) 
[10:25:40.022]                             version <- utils::packageVersion("future")
[10:25:40.022]                         }
[10:25:40.022]                         else {
[10:25:40.022]                           version <- NULL
[10:25:40.022]                         }
[10:25:40.022]                         if (!has_future || version < "1.8.0") {
[10:25:40.022]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:40.022]                             "", base::R.version$version.string), 
[10:25:40.022]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:40.022]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:40.022]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:40.022]                               "release", "version")], collapse = " "), 
[10:25:40.022]                             hostname = base::Sys.info()[["nodename"]])
[10:25:40.022]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:40.022]                             info)
[10:25:40.022]                           info <- base::paste(info, collapse = "; ")
[10:25:40.022]                           if (!has_future) {
[10:25:40.022]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:40.022]                               info)
[10:25:40.022]                           }
[10:25:40.022]                           else {
[10:25:40.022]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:40.022]                               info, version)
[10:25:40.022]                           }
[10:25:40.022]                           base::stop(msg)
[10:25:40.022]                         }
[10:25:40.022]                       })
[10:25:40.022]                     }
[10:25:40.022]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:40.022]                     base::options(mc.cores = 1L)
[10:25:40.022]                   }
[10:25:40.022]                   options(future.plan = NULL)
[10:25:40.022]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.022]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:40.022]                 }
[10:25:40.022]                 ...future.workdir <- getwd()
[10:25:40.022]             }
[10:25:40.022]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:40.022]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:40.022]         }
[10:25:40.022]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:40.022]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:40.022]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:40.022]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:40.022]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:40.022]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:40.022]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:40.022]             base::names(...future.oldOptions))
[10:25:40.022]     }
[10:25:40.022]     if (FALSE) {
[10:25:40.022]     }
[10:25:40.022]     else {
[10:25:40.022]         if (TRUE) {
[10:25:40.022]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:40.022]                 open = "w")
[10:25:40.022]         }
[10:25:40.022]         else {
[10:25:40.022]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:40.022]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:40.022]         }
[10:25:40.022]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:40.022]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:40.022]             base::sink(type = "output", split = FALSE)
[10:25:40.022]             base::close(...future.stdout)
[10:25:40.022]         }, add = TRUE)
[10:25:40.022]     }
[10:25:40.022]     ...future.frame <- base::sys.nframe()
[10:25:40.022]     ...future.conditions <- base::list()
[10:25:40.022]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:40.022]     if (FALSE) {
[10:25:40.022]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:40.022]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:40.022]     }
[10:25:40.022]     ...future.result <- base::tryCatch({
[10:25:40.022]         base::withCallingHandlers({
[10:25:40.022]             ...future.value <- base::withVisible(base::local({
[10:25:40.022]                 ...future.makeSendCondition <- base::local({
[10:25:40.022]                   sendCondition <- NULL
[10:25:40.022]                   function(frame = 1L) {
[10:25:40.022]                     if (is.function(sendCondition)) 
[10:25:40.022]                       return(sendCondition)
[10:25:40.022]                     ns <- getNamespace("parallel")
[10:25:40.022]                     if (exists("sendData", mode = "function", 
[10:25:40.022]                       envir = ns)) {
[10:25:40.022]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:40.022]                         envir = ns)
[10:25:40.022]                       envir <- sys.frame(frame)
[10:25:40.022]                       master <- NULL
[10:25:40.022]                       while (!identical(envir, .GlobalEnv) && 
[10:25:40.022]                         !identical(envir, emptyenv())) {
[10:25:40.022]                         if (exists("master", mode = "list", envir = envir, 
[10:25:40.022]                           inherits = FALSE)) {
[10:25:40.022]                           master <- get("master", mode = "list", 
[10:25:40.022]                             envir = envir, inherits = FALSE)
[10:25:40.022]                           if (inherits(master, c("SOCKnode", 
[10:25:40.022]                             "SOCK0node"))) {
[10:25:40.022]                             sendCondition <<- function(cond) {
[10:25:40.022]                               data <- list(type = "VALUE", value = cond, 
[10:25:40.022]                                 success = TRUE)
[10:25:40.022]                               parallel_sendData(master, data)
[10:25:40.022]                             }
[10:25:40.022]                             return(sendCondition)
[10:25:40.022]                           }
[10:25:40.022]                         }
[10:25:40.022]                         frame <- frame + 1L
[10:25:40.022]                         envir <- sys.frame(frame)
[10:25:40.022]                       }
[10:25:40.022]                     }
[10:25:40.022]                     sendCondition <<- function(cond) NULL
[10:25:40.022]                   }
[10:25:40.022]                 })
[10:25:40.022]                 withCallingHandlers({
[10:25:40.022]                   {
[10:25:40.022]                     2 * a
[10:25:40.022]                   }
[10:25:40.022]                 }, immediateCondition = function(cond) {
[10:25:40.022]                   sendCondition <- ...future.makeSendCondition()
[10:25:40.022]                   sendCondition(cond)
[10:25:40.022]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.022]                   {
[10:25:40.022]                     inherits <- base::inherits
[10:25:40.022]                     invokeRestart <- base::invokeRestart
[10:25:40.022]                     is.null <- base::is.null
[10:25:40.022]                     muffled <- FALSE
[10:25:40.022]                     if (inherits(cond, "message")) {
[10:25:40.022]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:40.022]                       if (muffled) 
[10:25:40.022]                         invokeRestart("muffleMessage")
[10:25:40.022]                     }
[10:25:40.022]                     else if (inherits(cond, "warning")) {
[10:25:40.022]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:40.022]                       if (muffled) 
[10:25:40.022]                         invokeRestart("muffleWarning")
[10:25:40.022]                     }
[10:25:40.022]                     else if (inherits(cond, "condition")) {
[10:25:40.022]                       if (!is.null(pattern)) {
[10:25:40.022]                         computeRestarts <- base::computeRestarts
[10:25:40.022]                         grepl <- base::grepl
[10:25:40.022]                         restarts <- computeRestarts(cond)
[10:25:40.022]                         for (restart in restarts) {
[10:25:40.022]                           name <- restart$name
[10:25:40.022]                           if (is.null(name)) 
[10:25:40.022]                             next
[10:25:40.022]                           if (!grepl(pattern, name)) 
[10:25:40.022]                             next
[10:25:40.022]                           invokeRestart(restart)
[10:25:40.022]                           muffled <- TRUE
[10:25:40.022]                           break
[10:25:40.022]                         }
[10:25:40.022]                       }
[10:25:40.022]                     }
[10:25:40.022]                     invisible(muffled)
[10:25:40.022]                   }
[10:25:40.022]                   muffleCondition(cond)
[10:25:40.022]                 })
[10:25:40.022]             }))
[10:25:40.022]             future::FutureResult(value = ...future.value$value, 
[10:25:40.022]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.022]                   ...future.rng), globalenv = if (FALSE) 
[10:25:40.022]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:40.022]                     ...future.globalenv.names))
[10:25:40.022]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:40.022]         }, condition = base::local({
[10:25:40.022]             c <- base::c
[10:25:40.022]             inherits <- base::inherits
[10:25:40.022]             invokeRestart <- base::invokeRestart
[10:25:40.022]             length <- base::length
[10:25:40.022]             list <- base::list
[10:25:40.022]             seq.int <- base::seq.int
[10:25:40.022]             signalCondition <- base::signalCondition
[10:25:40.022]             sys.calls <- base::sys.calls
[10:25:40.022]             `[[` <- base::`[[`
[10:25:40.022]             `+` <- base::`+`
[10:25:40.022]             `<<-` <- base::`<<-`
[10:25:40.022]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:40.022]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:40.022]                   3L)]
[10:25:40.022]             }
[10:25:40.022]             function(cond) {
[10:25:40.022]                 is_error <- inherits(cond, "error")
[10:25:40.022]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:40.022]                   NULL)
[10:25:40.022]                 if (is_error) {
[10:25:40.022]                   sessionInformation <- function() {
[10:25:40.022]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:40.022]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:40.022]                       search = base::search(), system = base::Sys.info())
[10:25:40.022]                   }
[10:25:40.022]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.022]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:40.022]                     cond$call), session = sessionInformation(), 
[10:25:40.022]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:40.022]                   signalCondition(cond)
[10:25:40.022]                 }
[10:25:40.022]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:40.022]                 "immediateCondition"))) {
[10:25:40.022]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:40.022]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.022]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:40.022]                   if (TRUE && !signal) {
[10:25:40.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.022]                     {
[10:25:40.022]                       inherits <- base::inherits
[10:25:40.022]                       invokeRestart <- base::invokeRestart
[10:25:40.022]                       is.null <- base::is.null
[10:25:40.022]                       muffled <- FALSE
[10:25:40.022]                       if (inherits(cond, "message")) {
[10:25:40.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.022]                         if (muffled) 
[10:25:40.022]                           invokeRestart("muffleMessage")
[10:25:40.022]                       }
[10:25:40.022]                       else if (inherits(cond, "warning")) {
[10:25:40.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.022]                         if (muffled) 
[10:25:40.022]                           invokeRestart("muffleWarning")
[10:25:40.022]                       }
[10:25:40.022]                       else if (inherits(cond, "condition")) {
[10:25:40.022]                         if (!is.null(pattern)) {
[10:25:40.022]                           computeRestarts <- base::computeRestarts
[10:25:40.022]                           grepl <- base::grepl
[10:25:40.022]                           restarts <- computeRestarts(cond)
[10:25:40.022]                           for (restart in restarts) {
[10:25:40.022]                             name <- restart$name
[10:25:40.022]                             if (is.null(name)) 
[10:25:40.022]                               next
[10:25:40.022]                             if (!grepl(pattern, name)) 
[10:25:40.022]                               next
[10:25:40.022]                             invokeRestart(restart)
[10:25:40.022]                             muffled <- TRUE
[10:25:40.022]                             break
[10:25:40.022]                           }
[10:25:40.022]                         }
[10:25:40.022]                       }
[10:25:40.022]                       invisible(muffled)
[10:25:40.022]                     }
[10:25:40.022]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.022]                   }
[10:25:40.022]                 }
[10:25:40.022]                 else {
[10:25:40.022]                   if (TRUE) {
[10:25:40.022]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.022]                     {
[10:25:40.022]                       inherits <- base::inherits
[10:25:40.022]                       invokeRestart <- base::invokeRestart
[10:25:40.022]                       is.null <- base::is.null
[10:25:40.022]                       muffled <- FALSE
[10:25:40.022]                       if (inherits(cond, "message")) {
[10:25:40.022]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.022]                         if (muffled) 
[10:25:40.022]                           invokeRestart("muffleMessage")
[10:25:40.022]                       }
[10:25:40.022]                       else if (inherits(cond, "warning")) {
[10:25:40.022]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.022]                         if (muffled) 
[10:25:40.022]                           invokeRestart("muffleWarning")
[10:25:40.022]                       }
[10:25:40.022]                       else if (inherits(cond, "condition")) {
[10:25:40.022]                         if (!is.null(pattern)) {
[10:25:40.022]                           computeRestarts <- base::computeRestarts
[10:25:40.022]                           grepl <- base::grepl
[10:25:40.022]                           restarts <- computeRestarts(cond)
[10:25:40.022]                           for (restart in restarts) {
[10:25:40.022]                             name <- restart$name
[10:25:40.022]                             if (is.null(name)) 
[10:25:40.022]                               next
[10:25:40.022]                             if (!grepl(pattern, name)) 
[10:25:40.022]                               next
[10:25:40.022]                             invokeRestart(restart)
[10:25:40.022]                             muffled <- TRUE
[10:25:40.022]                             break
[10:25:40.022]                           }
[10:25:40.022]                         }
[10:25:40.022]                       }
[10:25:40.022]                       invisible(muffled)
[10:25:40.022]                     }
[10:25:40.022]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.022]                   }
[10:25:40.022]                 }
[10:25:40.022]             }
[10:25:40.022]         }))
[10:25:40.022]     }, error = function(ex) {
[10:25:40.022]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:40.022]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.022]                 ...future.rng), started = ...future.startTime, 
[10:25:40.022]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:40.022]             version = "1.8"), class = "FutureResult")
[10:25:40.022]     }, finally = {
[10:25:40.022]         if (!identical(...future.workdir, getwd())) 
[10:25:40.022]             setwd(...future.workdir)
[10:25:40.022]         {
[10:25:40.022]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:40.022]                 ...future.oldOptions$nwarnings <- NULL
[10:25:40.022]             }
[10:25:40.022]             base::options(...future.oldOptions)
[10:25:40.022]             if (.Platform$OS.type == "windows") {
[10:25:40.022]                 old_names <- names(...future.oldEnvVars)
[10:25:40.022]                 envs <- base::Sys.getenv()
[10:25:40.022]                 names <- names(envs)
[10:25:40.022]                 common <- intersect(names, old_names)
[10:25:40.022]                 added <- setdiff(names, old_names)
[10:25:40.022]                 removed <- setdiff(old_names, names)
[10:25:40.022]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:40.022]                   envs[common]]
[10:25:40.022]                 NAMES <- toupper(changed)
[10:25:40.022]                 args <- list()
[10:25:40.022]                 for (kk in seq_along(NAMES)) {
[10:25:40.022]                   name <- changed[[kk]]
[10:25:40.022]                   NAME <- NAMES[[kk]]
[10:25:40.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.022]                     next
[10:25:40.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.022]                 }
[10:25:40.022]                 NAMES <- toupper(added)
[10:25:40.022]                 for (kk in seq_along(NAMES)) {
[10:25:40.022]                   name <- added[[kk]]
[10:25:40.022]                   NAME <- NAMES[[kk]]
[10:25:40.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.022]                     next
[10:25:40.022]                   args[[name]] <- ""
[10:25:40.022]                 }
[10:25:40.022]                 NAMES <- toupper(removed)
[10:25:40.022]                 for (kk in seq_along(NAMES)) {
[10:25:40.022]                   name <- removed[[kk]]
[10:25:40.022]                   NAME <- NAMES[[kk]]
[10:25:40.022]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.022]                     next
[10:25:40.022]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.022]                 }
[10:25:40.022]                 if (length(args) > 0) 
[10:25:40.022]                   base::do.call(base::Sys.setenv, args = args)
[10:25:40.022]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:40.022]             }
[10:25:40.022]             else {
[10:25:40.022]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:40.022]             }
[10:25:40.022]             {
[10:25:40.022]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:40.022]                   0L) {
[10:25:40.022]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:40.022]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:40.022]                   base::options(opts)
[10:25:40.022]                 }
[10:25:40.022]                 {
[10:25:40.022]                   {
[10:25:40.022]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:40.022]                     NULL
[10:25:40.022]                   }
[10:25:40.022]                   options(future.plan = NULL)
[10:25:40.022]                   if (is.na(NA_character_)) 
[10:25:40.022]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.022]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:40.022]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:40.022]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:40.022]                     envir = parent.frame()) 
[10:25:40.022]                   {
[10:25:40.022]                     if (is.function(workers)) 
[10:25:40.022]                       workers <- workers()
[10:25:40.022]                     workers <- structure(as.integer(workers), 
[10:25:40.022]                       class = class(workers))
[10:25:40.022]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:40.022]                       workers >= 1)
[10:25:40.022]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:40.022]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:40.022]                     }
[10:25:40.022]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:40.022]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:40.022]                       envir = envir)
[10:25:40.022]                     if (!future$lazy) 
[10:25:40.022]                       future <- run(future)
[10:25:40.022]                     invisible(future)
[10:25:40.022]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:40.022]                 }
[10:25:40.022]             }
[10:25:40.022]         }
[10:25:40.022]     })
[10:25:40.022]     if (TRUE) {
[10:25:40.022]         base::sink(type = "output", split = FALSE)
[10:25:40.022]         if (TRUE) {
[10:25:40.022]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:40.022]         }
[10:25:40.022]         else {
[10:25:40.022]             ...future.result["stdout"] <- base::list(NULL)
[10:25:40.022]         }
[10:25:40.022]         base::close(...future.stdout)
[10:25:40.022]         ...future.stdout <- NULL
[10:25:40.022]     }
[10:25:40.022]     ...future.result$conditions <- ...future.conditions
[10:25:40.022]     ...future.result$finished <- base::Sys.time()
[10:25:40.022]     ...future.result
[10:25:40.022] }
[10:25:40.025] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:40.025] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:40.026] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:40.026] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:40.026] MultisessionFuture started
[10:25:40.026] - Launch lazy future ... done
[10:25:40.027] run() for ‘MultisessionFuture’ ... done
[10:25:40.027] result() for ClusterFuture ...
[10:25:40.027] receiveMessageFromWorker() for ClusterFuture ...
[10:25:40.027] - Validating connection of MultisessionFuture
[10:25:40.075] - received message: FutureResult
[10:25:40.075] - Received FutureResult
[10:25:40.075] - Erased future from FutureRegistry
[10:25:40.075] result() for ClusterFuture ...
[10:25:40.075] - result already collected: FutureResult
[10:25:40.075] result() for ClusterFuture ... done
[10:25:40.075] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:40.076] result() for ClusterFuture ... done
[10:25:40.076] result() for ClusterFuture ...
[10:25:40.076] - result already collected: FutureResult
[10:25:40.076] result() for ClusterFuture ... done
[10:25:40.076] getGlobalsAndPackages() ...
[10:25:40.076] Searching for globals...
[10:25:40.077] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:40.078] Searching for globals ... DONE
[10:25:40.078] Resolving globals: FALSE
[10:25:40.078] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:40.079] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:40.079] - globals: [1] ‘a’
[10:25:40.079] 
[10:25:40.079] getGlobalsAndPackages() ... DONE
[10:25:40.079] run() for ‘Future’ ...
[10:25:40.080] - state: ‘created’
[10:25:40.080] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:40.097] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:40.097] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:40.097]   - Field: ‘node’
[10:25:40.097]   - Field: ‘label’
[10:25:40.097]   - Field: ‘local’
[10:25:40.097]   - Field: ‘owner’
[10:25:40.097]   - Field: ‘envir’
[10:25:40.097]   - Field: ‘workers’
[10:25:40.098]   - Field: ‘packages’
[10:25:40.098]   - Field: ‘gc’
[10:25:40.098]   - Field: ‘conditions’
[10:25:40.098]   - Field: ‘persistent’
[10:25:40.098]   - Field: ‘expr’
[10:25:40.098]   - Field: ‘uuid’
[10:25:40.098]   - Field: ‘seed’
[10:25:40.098]   - Field: ‘version’
[10:25:40.098]   - Field: ‘result’
[10:25:40.098]   - Field: ‘asynchronous’
[10:25:40.098]   - Field: ‘calls’
[10:25:40.099]   - Field: ‘globals’
[10:25:40.099]   - Field: ‘stdout’
[10:25:40.099]   - Field: ‘earlySignal’
[10:25:40.099]   - Field: ‘lazy’
[10:25:40.099]   - Field: ‘state’
[10:25:40.099] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:40.099] - Launch lazy future ...
[10:25:40.099] Packages needed by the future expression (n = 0): <none>
[10:25:40.099] Packages needed by future strategies (n = 0): <none>
[10:25:40.100] {
[10:25:40.100]     {
[10:25:40.100]         {
[10:25:40.100]             ...future.startTime <- base::Sys.time()
[10:25:40.100]             {
[10:25:40.100]                 {
[10:25:40.100]                   {
[10:25:40.100]                     {
[10:25:40.100]                       base::local({
[10:25:40.100]                         has_future <- base::requireNamespace("future", 
[10:25:40.100]                           quietly = TRUE)
[10:25:40.100]                         if (has_future) {
[10:25:40.100]                           ns <- base::getNamespace("future")
[10:25:40.100]                           version <- ns[[".package"]][["version"]]
[10:25:40.100]                           if (is.null(version)) 
[10:25:40.100]                             version <- utils::packageVersion("future")
[10:25:40.100]                         }
[10:25:40.100]                         else {
[10:25:40.100]                           version <- NULL
[10:25:40.100]                         }
[10:25:40.100]                         if (!has_future || version < "1.8.0") {
[10:25:40.100]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:40.100]                             "", base::R.version$version.string), 
[10:25:40.100]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:40.100]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:40.100]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:40.100]                               "release", "version")], collapse = " "), 
[10:25:40.100]                             hostname = base::Sys.info()[["nodename"]])
[10:25:40.100]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:40.100]                             info)
[10:25:40.100]                           info <- base::paste(info, collapse = "; ")
[10:25:40.100]                           if (!has_future) {
[10:25:40.100]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:40.100]                               info)
[10:25:40.100]                           }
[10:25:40.100]                           else {
[10:25:40.100]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:40.100]                               info, version)
[10:25:40.100]                           }
[10:25:40.100]                           base::stop(msg)
[10:25:40.100]                         }
[10:25:40.100]                       })
[10:25:40.100]                     }
[10:25:40.100]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:40.100]                     base::options(mc.cores = 1L)
[10:25:40.100]                   }
[10:25:40.100]                   options(future.plan = NULL)
[10:25:40.100]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.100]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:40.100]                 }
[10:25:40.100]                 ...future.workdir <- getwd()
[10:25:40.100]             }
[10:25:40.100]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:40.100]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:40.100]         }
[10:25:40.100]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:40.100]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:40.100]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:40.100]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:40.100]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:40.100]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:40.100]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:40.100]             base::names(...future.oldOptions))
[10:25:40.100]     }
[10:25:40.100]     if (FALSE) {
[10:25:40.100]     }
[10:25:40.100]     else {
[10:25:40.100]         if (TRUE) {
[10:25:40.100]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:40.100]                 open = "w")
[10:25:40.100]         }
[10:25:40.100]         else {
[10:25:40.100]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:40.100]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:40.100]         }
[10:25:40.100]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:40.100]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:40.100]             base::sink(type = "output", split = FALSE)
[10:25:40.100]             base::close(...future.stdout)
[10:25:40.100]         }, add = TRUE)
[10:25:40.100]     }
[10:25:40.100]     ...future.frame <- base::sys.nframe()
[10:25:40.100]     ...future.conditions <- base::list()
[10:25:40.100]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:40.100]     if (FALSE) {
[10:25:40.100]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:40.100]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:40.100]     }
[10:25:40.100]     ...future.result <- base::tryCatch({
[10:25:40.100]         base::withCallingHandlers({
[10:25:40.100]             ...future.value <- base::withVisible(base::local({
[10:25:40.100]                 ...future.makeSendCondition <- base::local({
[10:25:40.100]                   sendCondition <- NULL
[10:25:40.100]                   function(frame = 1L) {
[10:25:40.100]                     if (is.function(sendCondition)) 
[10:25:40.100]                       return(sendCondition)
[10:25:40.100]                     ns <- getNamespace("parallel")
[10:25:40.100]                     if (exists("sendData", mode = "function", 
[10:25:40.100]                       envir = ns)) {
[10:25:40.100]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:40.100]                         envir = ns)
[10:25:40.100]                       envir <- sys.frame(frame)
[10:25:40.100]                       master <- NULL
[10:25:40.100]                       while (!identical(envir, .GlobalEnv) && 
[10:25:40.100]                         !identical(envir, emptyenv())) {
[10:25:40.100]                         if (exists("master", mode = "list", envir = envir, 
[10:25:40.100]                           inherits = FALSE)) {
[10:25:40.100]                           master <- get("master", mode = "list", 
[10:25:40.100]                             envir = envir, inherits = FALSE)
[10:25:40.100]                           if (inherits(master, c("SOCKnode", 
[10:25:40.100]                             "SOCK0node"))) {
[10:25:40.100]                             sendCondition <<- function(cond) {
[10:25:40.100]                               data <- list(type = "VALUE", value = cond, 
[10:25:40.100]                                 success = TRUE)
[10:25:40.100]                               parallel_sendData(master, data)
[10:25:40.100]                             }
[10:25:40.100]                             return(sendCondition)
[10:25:40.100]                           }
[10:25:40.100]                         }
[10:25:40.100]                         frame <- frame + 1L
[10:25:40.100]                         envir <- sys.frame(frame)
[10:25:40.100]                       }
[10:25:40.100]                     }
[10:25:40.100]                     sendCondition <<- function(cond) NULL
[10:25:40.100]                   }
[10:25:40.100]                 })
[10:25:40.100]                 withCallingHandlers({
[10:25:40.100]                   {
[10:25:40.100]                     2 * a
[10:25:40.100]                   }
[10:25:40.100]                 }, immediateCondition = function(cond) {
[10:25:40.100]                   sendCondition <- ...future.makeSendCondition()
[10:25:40.100]                   sendCondition(cond)
[10:25:40.100]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.100]                   {
[10:25:40.100]                     inherits <- base::inherits
[10:25:40.100]                     invokeRestart <- base::invokeRestart
[10:25:40.100]                     is.null <- base::is.null
[10:25:40.100]                     muffled <- FALSE
[10:25:40.100]                     if (inherits(cond, "message")) {
[10:25:40.100]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:40.100]                       if (muffled) 
[10:25:40.100]                         invokeRestart("muffleMessage")
[10:25:40.100]                     }
[10:25:40.100]                     else if (inherits(cond, "warning")) {
[10:25:40.100]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:40.100]                       if (muffled) 
[10:25:40.100]                         invokeRestart("muffleWarning")
[10:25:40.100]                     }
[10:25:40.100]                     else if (inherits(cond, "condition")) {
[10:25:40.100]                       if (!is.null(pattern)) {
[10:25:40.100]                         computeRestarts <- base::computeRestarts
[10:25:40.100]                         grepl <- base::grepl
[10:25:40.100]                         restarts <- computeRestarts(cond)
[10:25:40.100]                         for (restart in restarts) {
[10:25:40.100]                           name <- restart$name
[10:25:40.100]                           if (is.null(name)) 
[10:25:40.100]                             next
[10:25:40.100]                           if (!grepl(pattern, name)) 
[10:25:40.100]                             next
[10:25:40.100]                           invokeRestart(restart)
[10:25:40.100]                           muffled <- TRUE
[10:25:40.100]                           break
[10:25:40.100]                         }
[10:25:40.100]                       }
[10:25:40.100]                     }
[10:25:40.100]                     invisible(muffled)
[10:25:40.100]                   }
[10:25:40.100]                   muffleCondition(cond)
[10:25:40.100]                 })
[10:25:40.100]             }))
[10:25:40.100]             future::FutureResult(value = ...future.value$value, 
[10:25:40.100]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.100]                   ...future.rng), globalenv = if (FALSE) 
[10:25:40.100]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:40.100]                     ...future.globalenv.names))
[10:25:40.100]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:40.100]         }, condition = base::local({
[10:25:40.100]             c <- base::c
[10:25:40.100]             inherits <- base::inherits
[10:25:40.100]             invokeRestart <- base::invokeRestart
[10:25:40.100]             length <- base::length
[10:25:40.100]             list <- base::list
[10:25:40.100]             seq.int <- base::seq.int
[10:25:40.100]             signalCondition <- base::signalCondition
[10:25:40.100]             sys.calls <- base::sys.calls
[10:25:40.100]             `[[` <- base::`[[`
[10:25:40.100]             `+` <- base::`+`
[10:25:40.100]             `<<-` <- base::`<<-`
[10:25:40.100]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:40.100]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:40.100]                   3L)]
[10:25:40.100]             }
[10:25:40.100]             function(cond) {
[10:25:40.100]                 is_error <- inherits(cond, "error")
[10:25:40.100]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:40.100]                   NULL)
[10:25:40.100]                 if (is_error) {
[10:25:40.100]                   sessionInformation <- function() {
[10:25:40.100]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:40.100]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:40.100]                       search = base::search(), system = base::Sys.info())
[10:25:40.100]                   }
[10:25:40.100]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.100]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:40.100]                     cond$call), session = sessionInformation(), 
[10:25:40.100]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:40.100]                   signalCondition(cond)
[10:25:40.100]                 }
[10:25:40.100]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:40.100]                 "immediateCondition"))) {
[10:25:40.100]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:40.100]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.100]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:40.100]                   if (TRUE && !signal) {
[10:25:40.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.100]                     {
[10:25:40.100]                       inherits <- base::inherits
[10:25:40.100]                       invokeRestart <- base::invokeRestart
[10:25:40.100]                       is.null <- base::is.null
[10:25:40.100]                       muffled <- FALSE
[10:25:40.100]                       if (inherits(cond, "message")) {
[10:25:40.100]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.100]                         if (muffled) 
[10:25:40.100]                           invokeRestart("muffleMessage")
[10:25:40.100]                       }
[10:25:40.100]                       else if (inherits(cond, "warning")) {
[10:25:40.100]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.100]                         if (muffled) 
[10:25:40.100]                           invokeRestart("muffleWarning")
[10:25:40.100]                       }
[10:25:40.100]                       else if (inherits(cond, "condition")) {
[10:25:40.100]                         if (!is.null(pattern)) {
[10:25:40.100]                           computeRestarts <- base::computeRestarts
[10:25:40.100]                           grepl <- base::grepl
[10:25:40.100]                           restarts <- computeRestarts(cond)
[10:25:40.100]                           for (restart in restarts) {
[10:25:40.100]                             name <- restart$name
[10:25:40.100]                             if (is.null(name)) 
[10:25:40.100]                               next
[10:25:40.100]                             if (!grepl(pattern, name)) 
[10:25:40.100]                               next
[10:25:40.100]                             invokeRestart(restart)
[10:25:40.100]                             muffled <- TRUE
[10:25:40.100]                             break
[10:25:40.100]                           }
[10:25:40.100]                         }
[10:25:40.100]                       }
[10:25:40.100]                       invisible(muffled)
[10:25:40.100]                     }
[10:25:40.100]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.100]                   }
[10:25:40.100]                 }
[10:25:40.100]                 else {
[10:25:40.100]                   if (TRUE) {
[10:25:40.100]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.100]                     {
[10:25:40.100]                       inherits <- base::inherits
[10:25:40.100]                       invokeRestart <- base::invokeRestart
[10:25:40.100]                       is.null <- base::is.null
[10:25:40.100]                       muffled <- FALSE
[10:25:40.100]                       if (inherits(cond, "message")) {
[10:25:40.100]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.100]                         if (muffled) 
[10:25:40.100]                           invokeRestart("muffleMessage")
[10:25:40.100]                       }
[10:25:40.100]                       else if (inherits(cond, "warning")) {
[10:25:40.100]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.100]                         if (muffled) 
[10:25:40.100]                           invokeRestart("muffleWarning")
[10:25:40.100]                       }
[10:25:40.100]                       else if (inherits(cond, "condition")) {
[10:25:40.100]                         if (!is.null(pattern)) {
[10:25:40.100]                           computeRestarts <- base::computeRestarts
[10:25:40.100]                           grepl <- base::grepl
[10:25:40.100]                           restarts <- computeRestarts(cond)
[10:25:40.100]                           for (restart in restarts) {
[10:25:40.100]                             name <- restart$name
[10:25:40.100]                             if (is.null(name)) 
[10:25:40.100]                               next
[10:25:40.100]                             if (!grepl(pattern, name)) 
[10:25:40.100]                               next
[10:25:40.100]                             invokeRestart(restart)
[10:25:40.100]                             muffled <- TRUE
[10:25:40.100]                             break
[10:25:40.100]                           }
[10:25:40.100]                         }
[10:25:40.100]                       }
[10:25:40.100]                       invisible(muffled)
[10:25:40.100]                     }
[10:25:40.100]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.100]                   }
[10:25:40.100]                 }
[10:25:40.100]             }
[10:25:40.100]         }))
[10:25:40.100]     }, error = function(ex) {
[10:25:40.100]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:40.100]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.100]                 ...future.rng), started = ...future.startTime, 
[10:25:40.100]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:40.100]             version = "1.8"), class = "FutureResult")
[10:25:40.100]     }, finally = {
[10:25:40.100]         if (!identical(...future.workdir, getwd())) 
[10:25:40.100]             setwd(...future.workdir)
[10:25:40.100]         {
[10:25:40.100]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:40.100]                 ...future.oldOptions$nwarnings <- NULL
[10:25:40.100]             }
[10:25:40.100]             base::options(...future.oldOptions)
[10:25:40.100]             if (.Platform$OS.type == "windows") {
[10:25:40.100]                 old_names <- names(...future.oldEnvVars)
[10:25:40.100]                 envs <- base::Sys.getenv()
[10:25:40.100]                 names <- names(envs)
[10:25:40.100]                 common <- intersect(names, old_names)
[10:25:40.100]                 added <- setdiff(names, old_names)
[10:25:40.100]                 removed <- setdiff(old_names, names)
[10:25:40.100]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:40.100]                   envs[common]]
[10:25:40.100]                 NAMES <- toupper(changed)
[10:25:40.100]                 args <- list()
[10:25:40.100]                 for (kk in seq_along(NAMES)) {
[10:25:40.100]                   name <- changed[[kk]]
[10:25:40.100]                   NAME <- NAMES[[kk]]
[10:25:40.100]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.100]                     next
[10:25:40.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.100]                 }
[10:25:40.100]                 NAMES <- toupper(added)
[10:25:40.100]                 for (kk in seq_along(NAMES)) {
[10:25:40.100]                   name <- added[[kk]]
[10:25:40.100]                   NAME <- NAMES[[kk]]
[10:25:40.100]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.100]                     next
[10:25:40.100]                   args[[name]] <- ""
[10:25:40.100]                 }
[10:25:40.100]                 NAMES <- toupper(removed)
[10:25:40.100]                 for (kk in seq_along(NAMES)) {
[10:25:40.100]                   name <- removed[[kk]]
[10:25:40.100]                   NAME <- NAMES[[kk]]
[10:25:40.100]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.100]                     next
[10:25:40.100]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.100]                 }
[10:25:40.100]                 if (length(args) > 0) 
[10:25:40.100]                   base::do.call(base::Sys.setenv, args = args)
[10:25:40.100]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:40.100]             }
[10:25:40.100]             else {
[10:25:40.100]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:40.100]             }
[10:25:40.100]             {
[10:25:40.100]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:40.100]                   0L) {
[10:25:40.100]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:40.100]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:40.100]                   base::options(opts)
[10:25:40.100]                 }
[10:25:40.100]                 {
[10:25:40.100]                   {
[10:25:40.100]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:40.100]                     NULL
[10:25:40.100]                   }
[10:25:40.100]                   options(future.plan = NULL)
[10:25:40.100]                   if (is.na(NA_character_)) 
[10:25:40.100]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.100]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:40.100]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:40.100]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:40.100]                     envir = parent.frame()) 
[10:25:40.100]                   {
[10:25:40.100]                     if (is.function(workers)) 
[10:25:40.100]                       workers <- workers()
[10:25:40.100]                     workers <- structure(as.integer(workers), 
[10:25:40.100]                       class = class(workers))
[10:25:40.100]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:40.100]                       workers >= 1)
[10:25:40.100]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:40.100]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:40.100]                     }
[10:25:40.100]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:40.100]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:40.100]                       envir = envir)
[10:25:40.100]                     if (!future$lazy) 
[10:25:40.100]                       future <- run(future)
[10:25:40.100]                     invisible(future)
[10:25:40.100]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:40.100]                 }
[10:25:40.100]             }
[10:25:40.100]         }
[10:25:40.100]     })
[10:25:40.100]     if (TRUE) {
[10:25:40.100]         base::sink(type = "output", split = FALSE)
[10:25:40.100]         if (TRUE) {
[10:25:40.100]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:40.100]         }
[10:25:40.100]         else {
[10:25:40.100]             ...future.result["stdout"] <- base::list(NULL)
[10:25:40.100]         }
[10:25:40.100]         base::close(...future.stdout)
[10:25:40.100]         ...future.stdout <- NULL
[10:25:40.100]     }
[10:25:40.100]     ...future.result$conditions <- ...future.conditions
[10:25:40.100]     ...future.result$finished <- base::Sys.time()
[10:25:40.100]     ...future.result
[10:25:40.100] }
[10:25:40.103] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:40.103] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:40.103] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:40.103] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:40.104] MultisessionFuture started
[10:25:40.104] - Launch lazy future ... done
[10:25:40.104] run() for ‘MultisessionFuture’ ... done
[10:25:40.104] result() for ClusterFuture ...
[10:25:40.104] receiveMessageFromWorker() for ClusterFuture ...
[10:25:40.104] - Validating connection of MultisessionFuture
[10:25:40.151] - received message: FutureResult
[10:25:40.151] - Received FutureResult
[10:25:40.151] - Erased future from FutureRegistry
[10:25:40.151] result() for ClusterFuture ...
[10:25:40.151] - result already collected: FutureResult
[10:25:40.151] result() for ClusterFuture ... done
[10:25:40.151] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:40.151] result() for ClusterFuture ... done
[10:25:40.152] result() for ClusterFuture ...
[10:25:40.152] - result already collected: FutureResult
[10:25:40.152] result() for ClusterFuture ... done
[10:25:40.152] getGlobalsAndPackages() ...
[10:25:40.152] Searching for globals...
[10:25:40.153] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:40.153] Searching for globals ... DONE
[10:25:40.153] Resolving globals: FALSE
[10:25:40.154] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:40.154] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:40.154] - globals: [1] ‘a’
[10:25:40.154] 
[10:25:40.154] getGlobalsAndPackages() ... DONE
[10:25:40.155] run() for ‘Future’ ...
[10:25:40.155] - state: ‘created’
[10:25:40.155] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:40.169] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:40.169] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:40.169]   - Field: ‘node’
[10:25:40.169]   - Field: ‘label’
[10:25:40.169]   - Field: ‘local’
[10:25:40.169]   - Field: ‘owner’
[10:25:40.169]   - Field: ‘envir’
[10:25:40.170]   - Field: ‘workers’
[10:25:40.170]   - Field: ‘packages’
[10:25:40.170]   - Field: ‘gc’
[10:25:40.170]   - Field: ‘conditions’
[10:25:40.170]   - Field: ‘persistent’
[10:25:40.170]   - Field: ‘expr’
[10:25:40.170]   - Field: ‘uuid’
[10:25:40.170]   - Field: ‘seed’
[10:25:40.170]   - Field: ‘version’
[10:25:40.170]   - Field: ‘result’
[10:25:40.170]   - Field: ‘asynchronous’
[10:25:40.171]   - Field: ‘calls’
[10:25:40.171]   - Field: ‘globals’
[10:25:40.171]   - Field: ‘stdout’
[10:25:40.171]   - Field: ‘earlySignal’
[10:25:40.171]   - Field: ‘lazy’
[10:25:40.171]   - Field: ‘state’
[10:25:40.171] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:40.171] - Launch lazy future ...
[10:25:40.171] Packages needed by the future expression (n = 0): <none>
[10:25:40.172] Packages needed by future strategies (n = 0): <none>
[10:25:40.172] {
[10:25:40.172]     {
[10:25:40.172]         {
[10:25:40.172]             ...future.startTime <- base::Sys.time()
[10:25:40.172]             {
[10:25:40.172]                 {
[10:25:40.172]                   {
[10:25:40.172]                     {
[10:25:40.172]                       base::local({
[10:25:40.172]                         has_future <- base::requireNamespace("future", 
[10:25:40.172]                           quietly = TRUE)
[10:25:40.172]                         if (has_future) {
[10:25:40.172]                           ns <- base::getNamespace("future")
[10:25:40.172]                           version <- ns[[".package"]][["version"]]
[10:25:40.172]                           if (is.null(version)) 
[10:25:40.172]                             version <- utils::packageVersion("future")
[10:25:40.172]                         }
[10:25:40.172]                         else {
[10:25:40.172]                           version <- NULL
[10:25:40.172]                         }
[10:25:40.172]                         if (!has_future || version < "1.8.0") {
[10:25:40.172]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:40.172]                             "", base::R.version$version.string), 
[10:25:40.172]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:40.172]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:40.172]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:40.172]                               "release", "version")], collapse = " "), 
[10:25:40.172]                             hostname = base::Sys.info()[["nodename"]])
[10:25:40.172]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:40.172]                             info)
[10:25:40.172]                           info <- base::paste(info, collapse = "; ")
[10:25:40.172]                           if (!has_future) {
[10:25:40.172]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:40.172]                               info)
[10:25:40.172]                           }
[10:25:40.172]                           else {
[10:25:40.172]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:40.172]                               info, version)
[10:25:40.172]                           }
[10:25:40.172]                           base::stop(msg)
[10:25:40.172]                         }
[10:25:40.172]                       })
[10:25:40.172]                     }
[10:25:40.172]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:40.172]                     base::options(mc.cores = 1L)
[10:25:40.172]                   }
[10:25:40.172]                   options(future.plan = NULL)
[10:25:40.172]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.172]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:40.172]                 }
[10:25:40.172]                 ...future.workdir <- getwd()
[10:25:40.172]             }
[10:25:40.172]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:40.172]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:40.172]         }
[10:25:40.172]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:40.172]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:40.172]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:40.172]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:40.172]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:40.172]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:40.172]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:40.172]             base::names(...future.oldOptions))
[10:25:40.172]     }
[10:25:40.172]     if (FALSE) {
[10:25:40.172]     }
[10:25:40.172]     else {
[10:25:40.172]         if (TRUE) {
[10:25:40.172]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:40.172]                 open = "w")
[10:25:40.172]         }
[10:25:40.172]         else {
[10:25:40.172]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:40.172]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:40.172]         }
[10:25:40.172]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:40.172]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:40.172]             base::sink(type = "output", split = FALSE)
[10:25:40.172]             base::close(...future.stdout)
[10:25:40.172]         }, add = TRUE)
[10:25:40.172]     }
[10:25:40.172]     ...future.frame <- base::sys.nframe()
[10:25:40.172]     ...future.conditions <- base::list()
[10:25:40.172]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:40.172]     if (FALSE) {
[10:25:40.172]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:40.172]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:40.172]     }
[10:25:40.172]     ...future.result <- base::tryCatch({
[10:25:40.172]         base::withCallingHandlers({
[10:25:40.172]             ...future.value <- base::withVisible(base::local({
[10:25:40.172]                 ...future.makeSendCondition <- base::local({
[10:25:40.172]                   sendCondition <- NULL
[10:25:40.172]                   function(frame = 1L) {
[10:25:40.172]                     if (is.function(sendCondition)) 
[10:25:40.172]                       return(sendCondition)
[10:25:40.172]                     ns <- getNamespace("parallel")
[10:25:40.172]                     if (exists("sendData", mode = "function", 
[10:25:40.172]                       envir = ns)) {
[10:25:40.172]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:40.172]                         envir = ns)
[10:25:40.172]                       envir <- sys.frame(frame)
[10:25:40.172]                       master <- NULL
[10:25:40.172]                       while (!identical(envir, .GlobalEnv) && 
[10:25:40.172]                         !identical(envir, emptyenv())) {
[10:25:40.172]                         if (exists("master", mode = "list", envir = envir, 
[10:25:40.172]                           inherits = FALSE)) {
[10:25:40.172]                           master <- get("master", mode = "list", 
[10:25:40.172]                             envir = envir, inherits = FALSE)
[10:25:40.172]                           if (inherits(master, c("SOCKnode", 
[10:25:40.172]                             "SOCK0node"))) {
[10:25:40.172]                             sendCondition <<- function(cond) {
[10:25:40.172]                               data <- list(type = "VALUE", value = cond, 
[10:25:40.172]                                 success = TRUE)
[10:25:40.172]                               parallel_sendData(master, data)
[10:25:40.172]                             }
[10:25:40.172]                             return(sendCondition)
[10:25:40.172]                           }
[10:25:40.172]                         }
[10:25:40.172]                         frame <- frame + 1L
[10:25:40.172]                         envir <- sys.frame(frame)
[10:25:40.172]                       }
[10:25:40.172]                     }
[10:25:40.172]                     sendCondition <<- function(cond) NULL
[10:25:40.172]                   }
[10:25:40.172]                 })
[10:25:40.172]                 withCallingHandlers({
[10:25:40.172]                   {
[10:25:40.172]                     2 * a
[10:25:40.172]                   }
[10:25:40.172]                 }, immediateCondition = function(cond) {
[10:25:40.172]                   sendCondition <- ...future.makeSendCondition()
[10:25:40.172]                   sendCondition(cond)
[10:25:40.172]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.172]                   {
[10:25:40.172]                     inherits <- base::inherits
[10:25:40.172]                     invokeRestart <- base::invokeRestart
[10:25:40.172]                     is.null <- base::is.null
[10:25:40.172]                     muffled <- FALSE
[10:25:40.172]                     if (inherits(cond, "message")) {
[10:25:40.172]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:40.172]                       if (muffled) 
[10:25:40.172]                         invokeRestart("muffleMessage")
[10:25:40.172]                     }
[10:25:40.172]                     else if (inherits(cond, "warning")) {
[10:25:40.172]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:40.172]                       if (muffled) 
[10:25:40.172]                         invokeRestart("muffleWarning")
[10:25:40.172]                     }
[10:25:40.172]                     else if (inherits(cond, "condition")) {
[10:25:40.172]                       if (!is.null(pattern)) {
[10:25:40.172]                         computeRestarts <- base::computeRestarts
[10:25:40.172]                         grepl <- base::grepl
[10:25:40.172]                         restarts <- computeRestarts(cond)
[10:25:40.172]                         for (restart in restarts) {
[10:25:40.172]                           name <- restart$name
[10:25:40.172]                           if (is.null(name)) 
[10:25:40.172]                             next
[10:25:40.172]                           if (!grepl(pattern, name)) 
[10:25:40.172]                             next
[10:25:40.172]                           invokeRestart(restart)
[10:25:40.172]                           muffled <- TRUE
[10:25:40.172]                           break
[10:25:40.172]                         }
[10:25:40.172]                       }
[10:25:40.172]                     }
[10:25:40.172]                     invisible(muffled)
[10:25:40.172]                   }
[10:25:40.172]                   muffleCondition(cond)
[10:25:40.172]                 })
[10:25:40.172]             }))
[10:25:40.172]             future::FutureResult(value = ...future.value$value, 
[10:25:40.172]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.172]                   ...future.rng), globalenv = if (FALSE) 
[10:25:40.172]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:40.172]                     ...future.globalenv.names))
[10:25:40.172]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:40.172]         }, condition = base::local({
[10:25:40.172]             c <- base::c
[10:25:40.172]             inherits <- base::inherits
[10:25:40.172]             invokeRestart <- base::invokeRestart
[10:25:40.172]             length <- base::length
[10:25:40.172]             list <- base::list
[10:25:40.172]             seq.int <- base::seq.int
[10:25:40.172]             signalCondition <- base::signalCondition
[10:25:40.172]             sys.calls <- base::sys.calls
[10:25:40.172]             `[[` <- base::`[[`
[10:25:40.172]             `+` <- base::`+`
[10:25:40.172]             `<<-` <- base::`<<-`
[10:25:40.172]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:40.172]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:40.172]                   3L)]
[10:25:40.172]             }
[10:25:40.172]             function(cond) {
[10:25:40.172]                 is_error <- inherits(cond, "error")
[10:25:40.172]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:40.172]                   NULL)
[10:25:40.172]                 if (is_error) {
[10:25:40.172]                   sessionInformation <- function() {
[10:25:40.172]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:40.172]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:40.172]                       search = base::search(), system = base::Sys.info())
[10:25:40.172]                   }
[10:25:40.172]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.172]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:40.172]                     cond$call), session = sessionInformation(), 
[10:25:40.172]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:40.172]                   signalCondition(cond)
[10:25:40.172]                 }
[10:25:40.172]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:40.172]                 "immediateCondition"))) {
[10:25:40.172]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:40.172]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.172]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:40.172]                   if (TRUE && !signal) {
[10:25:40.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.172]                     {
[10:25:40.172]                       inherits <- base::inherits
[10:25:40.172]                       invokeRestart <- base::invokeRestart
[10:25:40.172]                       is.null <- base::is.null
[10:25:40.172]                       muffled <- FALSE
[10:25:40.172]                       if (inherits(cond, "message")) {
[10:25:40.172]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.172]                         if (muffled) 
[10:25:40.172]                           invokeRestart("muffleMessage")
[10:25:40.172]                       }
[10:25:40.172]                       else if (inherits(cond, "warning")) {
[10:25:40.172]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.172]                         if (muffled) 
[10:25:40.172]                           invokeRestart("muffleWarning")
[10:25:40.172]                       }
[10:25:40.172]                       else if (inherits(cond, "condition")) {
[10:25:40.172]                         if (!is.null(pattern)) {
[10:25:40.172]                           computeRestarts <- base::computeRestarts
[10:25:40.172]                           grepl <- base::grepl
[10:25:40.172]                           restarts <- computeRestarts(cond)
[10:25:40.172]                           for (restart in restarts) {
[10:25:40.172]                             name <- restart$name
[10:25:40.172]                             if (is.null(name)) 
[10:25:40.172]                               next
[10:25:40.172]                             if (!grepl(pattern, name)) 
[10:25:40.172]                               next
[10:25:40.172]                             invokeRestart(restart)
[10:25:40.172]                             muffled <- TRUE
[10:25:40.172]                             break
[10:25:40.172]                           }
[10:25:40.172]                         }
[10:25:40.172]                       }
[10:25:40.172]                       invisible(muffled)
[10:25:40.172]                     }
[10:25:40.172]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.172]                   }
[10:25:40.172]                 }
[10:25:40.172]                 else {
[10:25:40.172]                   if (TRUE) {
[10:25:40.172]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.172]                     {
[10:25:40.172]                       inherits <- base::inherits
[10:25:40.172]                       invokeRestart <- base::invokeRestart
[10:25:40.172]                       is.null <- base::is.null
[10:25:40.172]                       muffled <- FALSE
[10:25:40.172]                       if (inherits(cond, "message")) {
[10:25:40.172]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.172]                         if (muffled) 
[10:25:40.172]                           invokeRestart("muffleMessage")
[10:25:40.172]                       }
[10:25:40.172]                       else if (inherits(cond, "warning")) {
[10:25:40.172]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.172]                         if (muffled) 
[10:25:40.172]                           invokeRestart("muffleWarning")
[10:25:40.172]                       }
[10:25:40.172]                       else if (inherits(cond, "condition")) {
[10:25:40.172]                         if (!is.null(pattern)) {
[10:25:40.172]                           computeRestarts <- base::computeRestarts
[10:25:40.172]                           grepl <- base::grepl
[10:25:40.172]                           restarts <- computeRestarts(cond)
[10:25:40.172]                           for (restart in restarts) {
[10:25:40.172]                             name <- restart$name
[10:25:40.172]                             if (is.null(name)) 
[10:25:40.172]                               next
[10:25:40.172]                             if (!grepl(pattern, name)) 
[10:25:40.172]                               next
[10:25:40.172]                             invokeRestart(restart)
[10:25:40.172]                             muffled <- TRUE
[10:25:40.172]                             break
[10:25:40.172]                           }
[10:25:40.172]                         }
[10:25:40.172]                       }
[10:25:40.172]                       invisible(muffled)
[10:25:40.172]                     }
[10:25:40.172]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.172]                   }
[10:25:40.172]                 }
[10:25:40.172]             }
[10:25:40.172]         }))
[10:25:40.172]     }, error = function(ex) {
[10:25:40.172]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:40.172]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.172]                 ...future.rng), started = ...future.startTime, 
[10:25:40.172]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:40.172]             version = "1.8"), class = "FutureResult")
[10:25:40.172]     }, finally = {
[10:25:40.172]         if (!identical(...future.workdir, getwd())) 
[10:25:40.172]             setwd(...future.workdir)
[10:25:40.172]         {
[10:25:40.172]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:40.172]                 ...future.oldOptions$nwarnings <- NULL
[10:25:40.172]             }
[10:25:40.172]             base::options(...future.oldOptions)
[10:25:40.172]             if (.Platform$OS.type == "windows") {
[10:25:40.172]                 old_names <- names(...future.oldEnvVars)
[10:25:40.172]                 envs <- base::Sys.getenv()
[10:25:40.172]                 names <- names(envs)
[10:25:40.172]                 common <- intersect(names, old_names)
[10:25:40.172]                 added <- setdiff(names, old_names)
[10:25:40.172]                 removed <- setdiff(old_names, names)
[10:25:40.172]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:40.172]                   envs[common]]
[10:25:40.172]                 NAMES <- toupper(changed)
[10:25:40.172]                 args <- list()
[10:25:40.172]                 for (kk in seq_along(NAMES)) {
[10:25:40.172]                   name <- changed[[kk]]
[10:25:40.172]                   NAME <- NAMES[[kk]]
[10:25:40.172]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.172]                     next
[10:25:40.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.172]                 }
[10:25:40.172]                 NAMES <- toupper(added)
[10:25:40.172]                 for (kk in seq_along(NAMES)) {
[10:25:40.172]                   name <- added[[kk]]
[10:25:40.172]                   NAME <- NAMES[[kk]]
[10:25:40.172]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.172]                     next
[10:25:40.172]                   args[[name]] <- ""
[10:25:40.172]                 }
[10:25:40.172]                 NAMES <- toupper(removed)
[10:25:40.172]                 for (kk in seq_along(NAMES)) {
[10:25:40.172]                   name <- removed[[kk]]
[10:25:40.172]                   NAME <- NAMES[[kk]]
[10:25:40.172]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.172]                     next
[10:25:40.172]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.172]                 }
[10:25:40.172]                 if (length(args) > 0) 
[10:25:40.172]                   base::do.call(base::Sys.setenv, args = args)
[10:25:40.172]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:40.172]             }
[10:25:40.172]             else {
[10:25:40.172]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:40.172]             }
[10:25:40.172]             {
[10:25:40.172]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:40.172]                   0L) {
[10:25:40.172]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:40.172]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:40.172]                   base::options(opts)
[10:25:40.172]                 }
[10:25:40.172]                 {
[10:25:40.172]                   {
[10:25:40.172]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:40.172]                     NULL
[10:25:40.172]                   }
[10:25:40.172]                   options(future.plan = NULL)
[10:25:40.172]                   if (is.na(NA_character_)) 
[10:25:40.172]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.172]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:40.172]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:40.172]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:40.172]                     envir = parent.frame()) 
[10:25:40.172]                   {
[10:25:40.172]                     if (is.function(workers)) 
[10:25:40.172]                       workers <- workers()
[10:25:40.172]                     workers <- structure(as.integer(workers), 
[10:25:40.172]                       class = class(workers))
[10:25:40.172]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:40.172]                       workers >= 1)
[10:25:40.172]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:40.172]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:40.172]                     }
[10:25:40.172]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:40.172]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:40.172]                       envir = envir)
[10:25:40.172]                     if (!future$lazy) 
[10:25:40.172]                       future <- run(future)
[10:25:40.172]                     invisible(future)
[10:25:40.172]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:40.172]                 }
[10:25:40.172]             }
[10:25:40.172]         }
[10:25:40.172]     })
[10:25:40.172]     if (TRUE) {
[10:25:40.172]         base::sink(type = "output", split = FALSE)
[10:25:40.172]         if (TRUE) {
[10:25:40.172]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:40.172]         }
[10:25:40.172]         else {
[10:25:40.172]             ...future.result["stdout"] <- base::list(NULL)
[10:25:40.172]         }
[10:25:40.172]         base::close(...future.stdout)
[10:25:40.172]         ...future.stdout <- NULL
[10:25:40.172]     }
[10:25:40.172]     ...future.result$conditions <- ...future.conditions
[10:25:40.172]     ...future.result$finished <- base::Sys.time()
[10:25:40.172]     ...future.result
[10:25:40.172] }
[10:25:40.175] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:40.175] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:40.175] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:40.175] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:40.176] MultisessionFuture started
[10:25:40.176] - Launch lazy future ... done
[10:25:40.176] run() for ‘MultisessionFuture’ ... done
[10:25:40.176] result() for ClusterFuture ...
[10:25:40.176] receiveMessageFromWorker() for ClusterFuture ...
[10:25:40.177] - Validating connection of MultisessionFuture
[10:25:40.222] - received message: FutureResult
[10:25:40.223] - Received FutureResult
[10:25:40.223] - Erased future from FutureRegistry
[10:25:40.223] result() for ClusterFuture ...
[10:25:40.223] - result already collected: FutureResult
[10:25:40.223] result() for ClusterFuture ... done
[10:25:40.223] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:40.223] result() for ClusterFuture ... done
[10:25:40.223] result() for ClusterFuture ...
[10:25:40.223] - result already collected: FutureResult
[10:25:40.223] result() for ClusterFuture ... done
[10:25:40.224] getGlobalsAndPackages() ...
[10:25:40.224] Searching for globals...
[10:25:40.225] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:40.225] Searching for globals ... DONE
[10:25:40.225] Resolving globals: FALSE
[10:25:40.225] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:40.226] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:40.226] - globals: [1] ‘a’
[10:25:40.226] 
[10:25:40.226] getGlobalsAndPackages() ... DONE
[10:25:40.226] run() for ‘Future’ ...
[10:25:40.227] - state: ‘created’
[10:25:40.227] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:40.241] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:40.241] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:40.242]   - Field: ‘node’
[10:25:40.242]   - Field: ‘label’
[10:25:40.242]   - Field: ‘local’
[10:25:40.242]   - Field: ‘owner’
[10:25:40.242]   - Field: ‘envir’
[10:25:40.242]   - Field: ‘workers’
[10:25:40.242]   - Field: ‘packages’
[10:25:40.242]   - Field: ‘gc’
[10:25:40.242]   - Field: ‘conditions’
[10:25:40.242]   - Field: ‘persistent’
[10:25:40.243]   - Field: ‘expr’
[10:25:40.243]   - Field: ‘uuid’
[10:25:40.243]   - Field: ‘seed’
[10:25:40.243]   - Field: ‘version’
[10:25:40.243]   - Field: ‘result’
[10:25:40.243]   - Field: ‘asynchronous’
[10:25:40.243]   - Field: ‘calls’
[10:25:40.243]   - Field: ‘globals’
[10:25:40.243]   - Field: ‘stdout’
[10:25:40.243]   - Field: ‘earlySignal’
[10:25:40.244]   - Field: ‘lazy’
[10:25:40.244]   - Field: ‘state’
[10:25:40.244] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:40.244] - Launch lazy future ...
[10:25:40.244] Packages needed by the future expression (n = 0): <none>
[10:25:40.244] Packages needed by future strategies (n = 0): <none>
[10:25:40.245] {
[10:25:40.245]     {
[10:25:40.245]         {
[10:25:40.245]             ...future.startTime <- base::Sys.time()
[10:25:40.245]             {
[10:25:40.245]                 {
[10:25:40.245]                   {
[10:25:40.245]                     {
[10:25:40.245]                       base::local({
[10:25:40.245]                         has_future <- base::requireNamespace("future", 
[10:25:40.245]                           quietly = TRUE)
[10:25:40.245]                         if (has_future) {
[10:25:40.245]                           ns <- base::getNamespace("future")
[10:25:40.245]                           version <- ns[[".package"]][["version"]]
[10:25:40.245]                           if (is.null(version)) 
[10:25:40.245]                             version <- utils::packageVersion("future")
[10:25:40.245]                         }
[10:25:40.245]                         else {
[10:25:40.245]                           version <- NULL
[10:25:40.245]                         }
[10:25:40.245]                         if (!has_future || version < "1.8.0") {
[10:25:40.245]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:40.245]                             "", base::R.version$version.string), 
[10:25:40.245]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:40.245]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:40.245]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:40.245]                               "release", "version")], collapse = " "), 
[10:25:40.245]                             hostname = base::Sys.info()[["nodename"]])
[10:25:40.245]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:40.245]                             info)
[10:25:40.245]                           info <- base::paste(info, collapse = "; ")
[10:25:40.245]                           if (!has_future) {
[10:25:40.245]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:40.245]                               info)
[10:25:40.245]                           }
[10:25:40.245]                           else {
[10:25:40.245]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:40.245]                               info, version)
[10:25:40.245]                           }
[10:25:40.245]                           base::stop(msg)
[10:25:40.245]                         }
[10:25:40.245]                       })
[10:25:40.245]                     }
[10:25:40.245]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:40.245]                     base::options(mc.cores = 1L)
[10:25:40.245]                   }
[10:25:40.245]                   options(future.plan = NULL)
[10:25:40.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:40.245]                 }
[10:25:40.245]                 ...future.workdir <- getwd()
[10:25:40.245]             }
[10:25:40.245]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:40.245]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:40.245]         }
[10:25:40.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:40.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:40.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:40.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:40.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:40.245]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:40.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:40.245]             base::names(...future.oldOptions))
[10:25:40.245]     }
[10:25:40.245]     if (FALSE) {
[10:25:40.245]     }
[10:25:40.245]     else {
[10:25:40.245]         if (TRUE) {
[10:25:40.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:40.245]                 open = "w")
[10:25:40.245]         }
[10:25:40.245]         else {
[10:25:40.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:40.245]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:40.245]         }
[10:25:40.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:40.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:40.245]             base::sink(type = "output", split = FALSE)
[10:25:40.245]             base::close(...future.stdout)
[10:25:40.245]         }, add = TRUE)
[10:25:40.245]     }
[10:25:40.245]     ...future.frame <- base::sys.nframe()
[10:25:40.245]     ...future.conditions <- base::list()
[10:25:40.245]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:40.245]     if (FALSE) {
[10:25:40.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:40.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:40.245]     }
[10:25:40.245]     ...future.result <- base::tryCatch({
[10:25:40.245]         base::withCallingHandlers({
[10:25:40.245]             ...future.value <- base::withVisible(base::local({
[10:25:40.245]                 ...future.makeSendCondition <- base::local({
[10:25:40.245]                   sendCondition <- NULL
[10:25:40.245]                   function(frame = 1L) {
[10:25:40.245]                     if (is.function(sendCondition)) 
[10:25:40.245]                       return(sendCondition)
[10:25:40.245]                     ns <- getNamespace("parallel")
[10:25:40.245]                     if (exists("sendData", mode = "function", 
[10:25:40.245]                       envir = ns)) {
[10:25:40.245]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:40.245]                         envir = ns)
[10:25:40.245]                       envir <- sys.frame(frame)
[10:25:40.245]                       master <- NULL
[10:25:40.245]                       while (!identical(envir, .GlobalEnv) && 
[10:25:40.245]                         !identical(envir, emptyenv())) {
[10:25:40.245]                         if (exists("master", mode = "list", envir = envir, 
[10:25:40.245]                           inherits = FALSE)) {
[10:25:40.245]                           master <- get("master", mode = "list", 
[10:25:40.245]                             envir = envir, inherits = FALSE)
[10:25:40.245]                           if (inherits(master, c("SOCKnode", 
[10:25:40.245]                             "SOCK0node"))) {
[10:25:40.245]                             sendCondition <<- function(cond) {
[10:25:40.245]                               data <- list(type = "VALUE", value = cond, 
[10:25:40.245]                                 success = TRUE)
[10:25:40.245]                               parallel_sendData(master, data)
[10:25:40.245]                             }
[10:25:40.245]                             return(sendCondition)
[10:25:40.245]                           }
[10:25:40.245]                         }
[10:25:40.245]                         frame <- frame + 1L
[10:25:40.245]                         envir <- sys.frame(frame)
[10:25:40.245]                       }
[10:25:40.245]                     }
[10:25:40.245]                     sendCondition <<- function(cond) NULL
[10:25:40.245]                   }
[10:25:40.245]                 })
[10:25:40.245]                 withCallingHandlers({
[10:25:40.245]                   {
[10:25:40.245]                     2 * a
[10:25:40.245]                   }
[10:25:40.245]                 }, immediateCondition = function(cond) {
[10:25:40.245]                   sendCondition <- ...future.makeSendCondition()
[10:25:40.245]                   sendCondition(cond)
[10:25:40.245]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.245]                   {
[10:25:40.245]                     inherits <- base::inherits
[10:25:40.245]                     invokeRestart <- base::invokeRestart
[10:25:40.245]                     is.null <- base::is.null
[10:25:40.245]                     muffled <- FALSE
[10:25:40.245]                     if (inherits(cond, "message")) {
[10:25:40.245]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:40.245]                       if (muffled) 
[10:25:40.245]                         invokeRestart("muffleMessage")
[10:25:40.245]                     }
[10:25:40.245]                     else if (inherits(cond, "warning")) {
[10:25:40.245]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:40.245]                       if (muffled) 
[10:25:40.245]                         invokeRestart("muffleWarning")
[10:25:40.245]                     }
[10:25:40.245]                     else if (inherits(cond, "condition")) {
[10:25:40.245]                       if (!is.null(pattern)) {
[10:25:40.245]                         computeRestarts <- base::computeRestarts
[10:25:40.245]                         grepl <- base::grepl
[10:25:40.245]                         restarts <- computeRestarts(cond)
[10:25:40.245]                         for (restart in restarts) {
[10:25:40.245]                           name <- restart$name
[10:25:40.245]                           if (is.null(name)) 
[10:25:40.245]                             next
[10:25:40.245]                           if (!grepl(pattern, name)) 
[10:25:40.245]                             next
[10:25:40.245]                           invokeRestart(restart)
[10:25:40.245]                           muffled <- TRUE
[10:25:40.245]                           break
[10:25:40.245]                         }
[10:25:40.245]                       }
[10:25:40.245]                     }
[10:25:40.245]                     invisible(muffled)
[10:25:40.245]                   }
[10:25:40.245]                   muffleCondition(cond)
[10:25:40.245]                 })
[10:25:40.245]             }))
[10:25:40.245]             future::FutureResult(value = ...future.value$value, 
[10:25:40.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.245]                   ...future.rng), globalenv = if (FALSE) 
[10:25:40.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:40.245]                     ...future.globalenv.names))
[10:25:40.245]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:40.245]         }, condition = base::local({
[10:25:40.245]             c <- base::c
[10:25:40.245]             inherits <- base::inherits
[10:25:40.245]             invokeRestart <- base::invokeRestart
[10:25:40.245]             length <- base::length
[10:25:40.245]             list <- base::list
[10:25:40.245]             seq.int <- base::seq.int
[10:25:40.245]             signalCondition <- base::signalCondition
[10:25:40.245]             sys.calls <- base::sys.calls
[10:25:40.245]             `[[` <- base::`[[`
[10:25:40.245]             `+` <- base::`+`
[10:25:40.245]             `<<-` <- base::`<<-`
[10:25:40.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:40.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:40.245]                   3L)]
[10:25:40.245]             }
[10:25:40.245]             function(cond) {
[10:25:40.245]                 is_error <- inherits(cond, "error")
[10:25:40.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:40.245]                   NULL)
[10:25:40.245]                 if (is_error) {
[10:25:40.245]                   sessionInformation <- function() {
[10:25:40.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:40.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:40.245]                       search = base::search(), system = base::Sys.info())
[10:25:40.245]                   }
[10:25:40.245]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:40.245]                     cond$call), session = sessionInformation(), 
[10:25:40.245]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:40.245]                   signalCondition(cond)
[10:25:40.245]                 }
[10:25:40.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:40.245]                 "immediateCondition"))) {
[10:25:40.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:40.245]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:40.245]                   if (TRUE && !signal) {
[10:25:40.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.245]                     {
[10:25:40.245]                       inherits <- base::inherits
[10:25:40.245]                       invokeRestart <- base::invokeRestart
[10:25:40.245]                       is.null <- base::is.null
[10:25:40.245]                       muffled <- FALSE
[10:25:40.245]                       if (inherits(cond, "message")) {
[10:25:40.245]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.245]                         if (muffled) 
[10:25:40.245]                           invokeRestart("muffleMessage")
[10:25:40.245]                       }
[10:25:40.245]                       else if (inherits(cond, "warning")) {
[10:25:40.245]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.245]                         if (muffled) 
[10:25:40.245]                           invokeRestart("muffleWarning")
[10:25:40.245]                       }
[10:25:40.245]                       else if (inherits(cond, "condition")) {
[10:25:40.245]                         if (!is.null(pattern)) {
[10:25:40.245]                           computeRestarts <- base::computeRestarts
[10:25:40.245]                           grepl <- base::grepl
[10:25:40.245]                           restarts <- computeRestarts(cond)
[10:25:40.245]                           for (restart in restarts) {
[10:25:40.245]                             name <- restart$name
[10:25:40.245]                             if (is.null(name)) 
[10:25:40.245]                               next
[10:25:40.245]                             if (!grepl(pattern, name)) 
[10:25:40.245]                               next
[10:25:40.245]                             invokeRestart(restart)
[10:25:40.245]                             muffled <- TRUE
[10:25:40.245]                             break
[10:25:40.245]                           }
[10:25:40.245]                         }
[10:25:40.245]                       }
[10:25:40.245]                       invisible(muffled)
[10:25:40.245]                     }
[10:25:40.245]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.245]                   }
[10:25:40.245]                 }
[10:25:40.245]                 else {
[10:25:40.245]                   if (TRUE) {
[10:25:40.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.245]                     {
[10:25:40.245]                       inherits <- base::inherits
[10:25:40.245]                       invokeRestart <- base::invokeRestart
[10:25:40.245]                       is.null <- base::is.null
[10:25:40.245]                       muffled <- FALSE
[10:25:40.245]                       if (inherits(cond, "message")) {
[10:25:40.245]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.245]                         if (muffled) 
[10:25:40.245]                           invokeRestart("muffleMessage")
[10:25:40.245]                       }
[10:25:40.245]                       else if (inherits(cond, "warning")) {
[10:25:40.245]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.245]                         if (muffled) 
[10:25:40.245]                           invokeRestart("muffleWarning")
[10:25:40.245]                       }
[10:25:40.245]                       else if (inherits(cond, "condition")) {
[10:25:40.245]                         if (!is.null(pattern)) {
[10:25:40.245]                           computeRestarts <- base::computeRestarts
[10:25:40.245]                           grepl <- base::grepl
[10:25:40.245]                           restarts <- computeRestarts(cond)
[10:25:40.245]                           for (restart in restarts) {
[10:25:40.245]                             name <- restart$name
[10:25:40.245]                             if (is.null(name)) 
[10:25:40.245]                               next
[10:25:40.245]                             if (!grepl(pattern, name)) 
[10:25:40.245]                               next
[10:25:40.245]                             invokeRestart(restart)
[10:25:40.245]                             muffled <- TRUE
[10:25:40.245]                             break
[10:25:40.245]                           }
[10:25:40.245]                         }
[10:25:40.245]                       }
[10:25:40.245]                       invisible(muffled)
[10:25:40.245]                     }
[10:25:40.245]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.245]                   }
[10:25:40.245]                 }
[10:25:40.245]             }
[10:25:40.245]         }))
[10:25:40.245]     }, error = function(ex) {
[10:25:40.245]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:40.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.245]                 ...future.rng), started = ...future.startTime, 
[10:25:40.245]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:40.245]             version = "1.8"), class = "FutureResult")
[10:25:40.245]     }, finally = {
[10:25:40.245]         if (!identical(...future.workdir, getwd())) 
[10:25:40.245]             setwd(...future.workdir)
[10:25:40.245]         {
[10:25:40.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:40.245]                 ...future.oldOptions$nwarnings <- NULL
[10:25:40.245]             }
[10:25:40.245]             base::options(...future.oldOptions)
[10:25:40.245]             if (.Platform$OS.type == "windows") {
[10:25:40.245]                 old_names <- names(...future.oldEnvVars)
[10:25:40.245]                 envs <- base::Sys.getenv()
[10:25:40.245]                 names <- names(envs)
[10:25:40.245]                 common <- intersect(names, old_names)
[10:25:40.245]                 added <- setdiff(names, old_names)
[10:25:40.245]                 removed <- setdiff(old_names, names)
[10:25:40.245]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:40.245]                   envs[common]]
[10:25:40.245]                 NAMES <- toupper(changed)
[10:25:40.245]                 args <- list()
[10:25:40.245]                 for (kk in seq_along(NAMES)) {
[10:25:40.245]                   name <- changed[[kk]]
[10:25:40.245]                   NAME <- NAMES[[kk]]
[10:25:40.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.245]                     next
[10:25:40.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.245]                 }
[10:25:40.245]                 NAMES <- toupper(added)
[10:25:40.245]                 for (kk in seq_along(NAMES)) {
[10:25:40.245]                   name <- added[[kk]]
[10:25:40.245]                   NAME <- NAMES[[kk]]
[10:25:40.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.245]                     next
[10:25:40.245]                   args[[name]] <- ""
[10:25:40.245]                 }
[10:25:40.245]                 NAMES <- toupper(removed)
[10:25:40.245]                 for (kk in seq_along(NAMES)) {
[10:25:40.245]                   name <- removed[[kk]]
[10:25:40.245]                   NAME <- NAMES[[kk]]
[10:25:40.245]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.245]                     next
[10:25:40.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.245]                 }
[10:25:40.245]                 if (length(args) > 0) 
[10:25:40.245]                   base::do.call(base::Sys.setenv, args = args)
[10:25:40.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:40.245]             }
[10:25:40.245]             else {
[10:25:40.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:40.245]             }
[10:25:40.245]             {
[10:25:40.245]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:40.245]                   0L) {
[10:25:40.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:40.245]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:40.245]                   base::options(opts)
[10:25:40.245]                 }
[10:25:40.245]                 {
[10:25:40.245]                   {
[10:25:40.245]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:40.245]                     NULL
[10:25:40.245]                   }
[10:25:40.245]                   options(future.plan = NULL)
[10:25:40.245]                   if (is.na(NA_character_)) 
[10:25:40.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:40.245]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:40.245]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:40.245]                     envir = parent.frame()) 
[10:25:40.245]                   {
[10:25:40.245]                     if (is.function(workers)) 
[10:25:40.245]                       workers <- workers()
[10:25:40.245]                     workers <- structure(as.integer(workers), 
[10:25:40.245]                       class = class(workers))
[10:25:40.245]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:40.245]                       workers >= 1)
[10:25:40.245]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:40.245]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:40.245]                     }
[10:25:40.245]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:40.245]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:40.245]                       envir = envir)
[10:25:40.245]                     if (!future$lazy) 
[10:25:40.245]                       future <- run(future)
[10:25:40.245]                     invisible(future)
[10:25:40.245]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:40.245]                 }
[10:25:40.245]             }
[10:25:40.245]         }
[10:25:40.245]     })
[10:25:40.245]     if (TRUE) {
[10:25:40.245]         base::sink(type = "output", split = FALSE)
[10:25:40.245]         if (TRUE) {
[10:25:40.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:40.245]         }
[10:25:40.245]         else {
[10:25:40.245]             ...future.result["stdout"] <- base::list(NULL)
[10:25:40.245]         }
[10:25:40.245]         base::close(...future.stdout)
[10:25:40.245]         ...future.stdout <- NULL
[10:25:40.245]     }
[10:25:40.245]     ...future.result$conditions <- ...future.conditions
[10:25:40.245]     ...future.result$finished <- base::Sys.time()
[10:25:40.245]     ...future.result
[10:25:40.245] }
[10:25:40.247] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:40.248] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:40.248] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:40.248] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:40.249] MultisessionFuture started
[10:25:40.249] - Launch lazy future ... done
[10:25:40.249] run() for ‘MultisessionFuture’ ... done
[10:25:40.249] result() for ClusterFuture ...
[10:25:40.249] receiveMessageFromWorker() for ClusterFuture ...
[10:25:40.249] - Validating connection of MultisessionFuture
[10:25:40.294] - received message: FutureResult
[10:25:40.295] - Received FutureResult
[10:25:40.295] - Erased future from FutureRegistry
[10:25:40.295] result() for ClusterFuture ...
[10:25:40.295] - result already collected: FutureResult
[10:25:40.295] result() for ClusterFuture ... done
[10:25:40.295] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:40.295] result() for ClusterFuture ... done
[10:25:40.295] result() for ClusterFuture ...
[10:25:40.295] - result already collected: FutureResult
[10:25:40.295] result() for ClusterFuture ... done
[10:25:40.296] getGlobalsAndPackages() ...
[10:25:40.296] Searching for globals...
[10:25:40.297] - globals found: [3] ‘{’, ‘*’, ‘a’
[10:25:40.297] Searching for globals ... DONE
[10:25:40.297] Resolving globals: FALSE
[10:25:40.297] The total size of the 1 globals is 56 bytes (56 bytes)
[10:25:40.298] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 56 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (56 bytes of class ‘numeric’)
[10:25:40.298] - globals: [1] ‘a’
[10:25:40.298] 
[10:25:40.298] getGlobalsAndPackages() ... DONE
[10:25:40.298] run() for ‘Future’ ...
[10:25:40.298] - state: ‘created’
[10:25:40.299] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[10:25:40.312] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[10:25:40.312] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[10:25:40.312]   - Field: ‘node’
[10:25:40.312]   - Field: ‘label’
[10:25:40.312]   - Field: ‘local’
[10:25:40.313]   - Field: ‘owner’
[10:25:40.313]   - Field: ‘envir’
[10:25:40.313]   - Field: ‘workers’
[10:25:40.313]   - Field: ‘packages’
[10:25:40.313]   - Field: ‘gc’
[10:25:40.313]   - Field: ‘conditions’
[10:25:40.313]   - Field: ‘persistent’
[10:25:40.313]   - Field: ‘expr’
[10:25:40.313]   - Field: ‘uuid’
[10:25:40.313]   - Field: ‘seed’
[10:25:40.314]   - Field: ‘version’
[10:25:40.314]   - Field: ‘result’
[10:25:40.314]   - Field: ‘asynchronous’
[10:25:40.314]   - Field: ‘calls’
[10:25:40.314]   - Field: ‘globals’
[10:25:40.314]   - Field: ‘stdout’
[10:25:40.314]   - Field: ‘earlySignal’
[10:25:40.314]   - Field: ‘lazy’
[10:25:40.314]   - Field: ‘state’
[10:25:40.314] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[10:25:40.314] - Launch lazy future ...
[10:25:40.315] Packages needed by the future expression (n = 0): <none>
[10:25:40.315] Packages needed by future strategies (n = 0): <none>
[10:25:40.315] {
[10:25:40.315]     {
[10:25:40.315]         {
[10:25:40.315]             ...future.startTime <- base::Sys.time()
[10:25:40.315]             {
[10:25:40.315]                 {
[10:25:40.315]                   {
[10:25:40.315]                     {
[10:25:40.315]                       base::local({
[10:25:40.315]                         has_future <- base::requireNamespace("future", 
[10:25:40.315]                           quietly = TRUE)
[10:25:40.315]                         if (has_future) {
[10:25:40.315]                           ns <- base::getNamespace("future")
[10:25:40.315]                           version <- ns[[".package"]][["version"]]
[10:25:40.315]                           if (is.null(version)) 
[10:25:40.315]                             version <- utils::packageVersion("future")
[10:25:40.315]                         }
[10:25:40.315]                         else {
[10:25:40.315]                           version <- NULL
[10:25:40.315]                         }
[10:25:40.315]                         if (!has_future || version < "1.8.0") {
[10:25:40.315]                           info <- base::c(r_version = base::gsub("R version ", 
[10:25:40.315]                             "", base::R.version$version.string), 
[10:25:40.315]                             platform = base::sprintf("%s (%s-bit)", 
[10:25:40.315]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[10:25:40.315]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[10:25:40.315]                               "release", "version")], collapse = " "), 
[10:25:40.315]                             hostname = base::Sys.info()[["nodename"]])
[10:25:40.315]                           info <- base::sprintf("%s: %s", base::names(info), 
[10:25:40.315]                             info)
[10:25:40.315]                           info <- base::paste(info, collapse = "; ")
[10:25:40.315]                           if (!has_future) {
[10:25:40.315]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[10:25:40.315]                               info)
[10:25:40.315]                           }
[10:25:40.315]                           else {
[10:25:40.315]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[10:25:40.315]                               info, version)
[10:25:40.315]                           }
[10:25:40.315]                           base::stop(msg)
[10:25:40.315]                         }
[10:25:40.315]                       })
[10:25:40.315]                     }
[10:25:40.315]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[10:25:40.315]                     base::options(mc.cores = 1L)
[10:25:40.315]                   }
[10:25:40.315]                   options(future.plan = NULL)
[10:25:40.315]                   Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.315]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[10:25:40.315]                 }
[10:25:40.315]                 ...future.workdir <- getwd()
[10:25:40.315]             }
[10:25:40.315]             ...future.oldOptions <- base::as.list(base::.Options)
[10:25:40.315]             ...future.oldEnvVars <- base::Sys.getenv()
[10:25:40.315]         }
[10:25:40.315]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[10:25:40.315]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[10:25:40.315]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[10:25:40.315]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[10:25:40.315]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[10:25:40.315]             future.stdout.windows.reencode = NULL, width = 80L)
[10:25:40.315]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[10:25:40.315]             base::names(...future.oldOptions))
[10:25:40.315]     }
[10:25:40.315]     if (FALSE) {
[10:25:40.315]     }
[10:25:40.315]     else {
[10:25:40.315]         if (TRUE) {
[10:25:40.315]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[10:25:40.315]                 open = "w")
[10:25:40.315]         }
[10:25:40.315]         else {
[10:25:40.315]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[10:25:40.315]                 windows = "NUL", "/dev/null"), open = "w")
[10:25:40.315]         }
[10:25:40.315]         base::sink(...future.stdout, type = "output", split = FALSE)
[10:25:40.315]         base::on.exit(if (!base::is.null(...future.stdout)) {
[10:25:40.315]             base::sink(type = "output", split = FALSE)
[10:25:40.315]             base::close(...future.stdout)
[10:25:40.315]         }, add = TRUE)
[10:25:40.315]     }
[10:25:40.315]     ...future.frame <- base::sys.nframe()
[10:25:40.315]     ...future.conditions <- base::list()
[10:25:40.315]     ...future.rng <- base::globalenv()$.Random.seed
[10:25:40.315]     if (FALSE) {
[10:25:40.315]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[10:25:40.315]             "...future.value", "...future.globalenv.names", ".Random.seed")
[10:25:40.315]     }
[10:25:40.315]     ...future.result <- base::tryCatch({
[10:25:40.315]         base::withCallingHandlers({
[10:25:40.315]             ...future.value <- base::withVisible(base::local({
[10:25:40.315]                 ...future.makeSendCondition <- base::local({
[10:25:40.315]                   sendCondition <- NULL
[10:25:40.315]                   function(frame = 1L) {
[10:25:40.315]                     if (is.function(sendCondition)) 
[10:25:40.315]                       return(sendCondition)
[10:25:40.315]                     ns <- getNamespace("parallel")
[10:25:40.315]                     if (exists("sendData", mode = "function", 
[10:25:40.315]                       envir = ns)) {
[10:25:40.315]                       parallel_sendData <- get("sendData", mode = "function", 
[10:25:40.315]                         envir = ns)
[10:25:40.315]                       envir <- sys.frame(frame)
[10:25:40.315]                       master <- NULL
[10:25:40.315]                       while (!identical(envir, .GlobalEnv) && 
[10:25:40.315]                         !identical(envir, emptyenv())) {
[10:25:40.315]                         if (exists("master", mode = "list", envir = envir, 
[10:25:40.315]                           inherits = FALSE)) {
[10:25:40.315]                           master <- get("master", mode = "list", 
[10:25:40.315]                             envir = envir, inherits = FALSE)
[10:25:40.315]                           if (inherits(master, c("SOCKnode", 
[10:25:40.315]                             "SOCK0node"))) {
[10:25:40.315]                             sendCondition <<- function(cond) {
[10:25:40.315]                               data <- list(type = "VALUE", value = cond, 
[10:25:40.315]                                 success = TRUE)
[10:25:40.315]                               parallel_sendData(master, data)
[10:25:40.315]                             }
[10:25:40.315]                             return(sendCondition)
[10:25:40.315]                           }
[10:25:40.315]                         }
[10:25:40.315]                         frame <- frame + 1L
[10:25:40.315]                         envir <- sys.frame(frame)
[10:25:40.315]                       }
[10:25:40.315]                     }
[10:25:40.315]                     sendCondition <<- function(cond) NULL
[10:25:40.315]                   }
[10:25:40.315]                 })
[10:25:40.315]                 withCallingHandlers({
[10:25:40.315]                   {
[10:25:40.315]                     2 * a
[10:25:40.315]                   }
[10:25:40.315]                 }, immediateCondition = function(cond) {
[10:25:40.315]                   sendCondition <- ...future.makeSendCondition()
[10:25:40.315]                   sendCondition(cond)
[10:25:40.315]                   muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.315]                   {
[10:25:40.315]                     inherits <- base::inherits
[10:25:40.315]                     invokeRestart <- base::invokeRestart
[10:25:40.315]                     is.null <- base::is.null
[10:25:40.315]                     muffled <- FALSE
[10:25:40.315]                     if (inherits(cond, "message")) {
[10:25:40.315]                       muffled <- grepl(pattern, "muffleMessage")
[10:25:40.315]                       if (muffled) 
[10:25:40.315]                         invokeRestart("muffleMessage")
[10:25:40.315]                     }
[10:25:40.315]                     else if (inherits(cond, "warning")) {
[10:25:40.315]                       muffled <- grepl(pattern, "muffleWarning")
[10:25:40.315]                       if (muffled) 
[10:25:40.315]                         invokeRestart("muffleWarning")
[10:25:40.315]                     }
[10:25:40.315]                     else if (inherits(cond, "condition")) {
[10:25:40.315]                       if (!is.null(pattern)) {
[10:25:40.315]                         computeRestarts <- base::computeRestarts
[10:25:40.315]                         grepl <- base::grepl
[10:25:40.315]                         restarts <- computeRestarts(cond)
[10:25:40.315]                         for (restart in restarts) {
[10:25:40.315]                           name <- restart$name
[10:25:40.315]                           if (is.null(name)) 
[10:25:40.315]                             next
[10:25:40.315]                           if (!grepl(pattern, name)) 
[10:25:40.315]                             next
[10:25:40.315]                           invokeRestart(restart)
[10:25:40.315]                           muffled <- TRUE
[10:25:40.315]                           break
[10:25:40.315]                         }
[10:25:40.315]                       }
[10:25:40.315]                     }
[10:25:40.315]                     invisible(muffled)
[10:25:40.315]                   }
[10:25:40.315]                   muffleCondition(cond)
[10:25:40.315]                 })
[10:25:40.315]             }))
[10:25:40.315]             future::FutureResult(value = ...future.value$value, 
[10:25:40.315]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.315]                   ...future.rng), globalenv = if (FALSE) 
[10:25:40.315]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[10:25:40.315]                     ...future.globalenv.names))
[10:25:40.315]                 else NULL, started = ...future.startTime, version = "1.8")
[10:25:40.315]         }, condition = base::local({
[10:25:40.315]             c <- base::c
[10:25:40.315]             inherits <- base::inherits
[10:25:40.315]             invokeRestart <- base::invokeRestart
[10:25:40.315]             length <- base::length
[10:25:40.315]             list <- base::list
[10:25:40.315]             seq.int <- base::seq.int
[10:25:40.315]             signalCondition <- base::signalCondition
[10:25:40.315]             sys.calls <- base::sys.calls
[10:25:40.315]             `[[` <- base::`[[`
[10:25:40.315]             `+` <- base::`+`
[10:25:40.315]             `<<-` <- base::`<<-`
[10:25:40.315]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[10:25:40.315]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[10:25:40.315]                   3L)]
[10:25:40.315]             }
[10:25:40.315]             function(cond) {
[10:25:40.315]                 is_error <- inherits(cond, "error")
[10:25:40.315]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[10:25:40.315]                   NULL)
[10:25:40.315]                 if (is_error) {
[10:25:40.315]                   sessionInformation <- function() {
[10:25:40.315]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[10:25:40.315]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[10:25:40.315]                       search = base::search(), system = base::Sys.info())
[10:25:40.315]                   }
[10:25:40.315]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.315]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[10:25:40.315]                     cond$call), session = sessionInformation(), 
[10:25:40.315]                     timestamp = base::Sys.time(), signaled = 0L)
[10:25:40.315]                   signalCondition(cond)
[10:25:40.315]                 }
[10:25:40.315]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[10:25:40.315]                 "immediateCondition"))) {
[10:25:40.315]                   signal <- TRUE && inherits(cond, "immediateCondition")
[10:25:40.315]                   ...future.conditions[[length(...future.conditions) + 
[10:25:40.315]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[10:25:40.315]                   if (TRUE && !signal) {
[10:25:40.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.315]                     {
[10:25:40.315]                       inherits <- base::inherits
[10:25:40.315]                       invokeRestart <- base::invokeRestart
[10:25:40.315]                       is.null <- base::is.null
[10:25:40.315]                       muffled <- FALSE
[10:25:40.315]                       if (inherits(cond, "message")) {
[10:25:40.315]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.315]                         if (muffled) 
[10:25:40.315]                           invokeRestart("muffleMessage")
[10:25:40.315]                       }
[10:25:40.315]                       else if (inherits(cond, "warning")) {
[10:25:40.315]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.315]                         if (muffled) 
[10:25:40.315]                           invokeRestart("muffleWarning")
[10:25:40.315]                       }
[10:25:40.315]                       else if (inherits(cond, "condition")) {
[10:25:40.315]                         if (!is.null(pattern)) {
[10:25:40.315]                           computeRestarts <- base::computeRestarts
[10:25:40.315]                           grepl <- base::grepl
[10:25:40.315]                           restarts <- computeRestarts(cond)
[10:25:40.315]                           for (restart in restarts) {
[10:25:40.315]                             name <- restart$name
[10:25:40.315]                             if (is.null(name)) 
[10:25:40.315]                               next
[10:25:40.315]                             if (!grepl(pattern, name)) 
[10:25:40.315]                               next
[10:25:40.315]                             invokeRestart(restart)
[10:25:40.315]                             muffled <- TRUE
[10:25:40.315]                             break
[10:25:40.315]                           }
[10:25:40.315]                         }
[10:25:40.315]                       }
[10:25:40.315]                       invisible(muffled)
[10:25:40.315]                     }
[10:25:40.315]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.315]                   }
[10:25:40.315]                 }
[10:25:40.315]                 else {
[10:25:40.315]                   if (TRUE) {
[10:25:40.315]                     muffleCondition <- function (cond, pattern = "^muffle") 
[10:25:40.315]                     {
[10:25:40.315]                       inherits <- base::inherits
[10:25:40.315]                       invokeRestart <- base::invokeRestart
[10:25:40.315]                       is.null <- base::is.null
[10:25:40.315]                       muffled <- FALSE
[10:25:40.315]                       if (inherits(cond, "message")) {
[10:25:40.315]                         muffled <- grepl(pattern, "muffleMessage")
[10:25:40.315]                         if (muffled) 
[10:25:40.315]                           invokeRestart("muffleMessage")
[10:25:40.315]                       }
[10:25:40.315]                       else if (inherits(cond, "warning")) {
[10:25:40.315]                         muffled <- grepl(pattern, "muffleWarning")
[10:25:40.315]                         if (muffled) 
[10:25:40.315]                           invokeRestart("muffleWarning")
[10:25:40.315]                       }
[10:25:40.315]                       else if (inherits(cond, "condition")) {
[10:25:40.315]                         if (!is.null(pattern)) {
[10:25:40.315]                           computeRestarts <- base::computeRestarts
[10:25:40.315]                           grepl <- base::grepl
[10:25:40.315]                           restarts <- computeRestarts(cond)
[10:25:40.315]                           for (restart in restarts) {
[10:25:40.315]                             name <- restart$name
[10:25:40.315]                             if (is.null(name)) 
[10:25:40.315]                               next
[10:25:40.315]                             if (!grepl(pattern, name)) 
[10:25:40.315]                               next
[10:25:40.315]                             invokeRestart(restart)
[10:25:40.315]                             muffled <- TRUE
[10:25:40.315]                             break
[10:25:40.315]                           }
[10:25:40.315]                         }
[10:25:40.315]                       }
[10:25:40.315]                       invisible(muffled)
[10:25:40.315]                     }
[10:25:40.315]                     muffleCondition(cond, pattern = "^muffle")
[10:25:40.315]                   }
[10:25:40.315]                 }
[10:25:40.315]             }
[10:25:40.315]         }))
[10:25:40.315]     }, error = function(ex) {
[10:25:40.315]         base::structure(base::list(value = NULL, visible = NULL, 
[10:25:40.315]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[10:25:40.315]                 ...future.rng), started = ...future.startTime, 
[10:25:40.315]             finished = Sys.time(), session_uuid = NA_character_, 
[10:25:40.315]             version = "1.8"), class = "FutureResult")
[10:25:40.315]     }, finally = {
[10:25:40.315]         if (!identical(...future.workdir, getwd())) 
[10:25:40.315]             setwd(...future.workdir)
[10:25:40.315]         {
[10:25:40.315]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[10:25:40.315]                 ...future.oldOptions$nwarnings <- NULL
[10:25:40.315]             }
[10:25:40.315]             base::options(...future.oldOptions)
[10:25:40.315]             if (.Platform$OS.type == "windows") {
[10:25:40.315]                 old_names <- names(...future.oldEnvVars)
[10:25:40.315]                 envs <- base::Sys.getenv()
[10:25:40.315]                 names <- names(envs)
[10:25:40.315]                 common <- intersect(names, old_names)
[10:25:40.315]                 added <- setdiff(names, old_names)
[10:25:40.315]                 removed <- setdiff(old_names, names)
[10:25:40.315]                 changed <- common[...future.oldEnvVars[common] != 
[10:25:40.315]                   envs[common]]
[10:25:40.315]                 NAMES <- toupper(changed)
[10:25:40.315]                 args <- list()
[10:25:40.315]                 for (kk in seq_along(NAMES)) {
[10:25:40.315]                   name <- changed[[kk]]
[10:25:40.315]                   NAME <- NAMES[[kk]]
[10:25:40.315]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.315]                     next
[10:25:40.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.315]                 }
[10:25:40.315]                 NAMES <- toupper(added)
[10:25:40.315]                 for (kk in seq_along(NAMES)) {
[10:25:40.315]                   name <- added[[kk]]
[10:25:40.315]                   NAME <- NAMES[[kk]]
[10:25:40.315]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.315]                     next
[10:25:40.315]                   args[[name]] <- ""
[10:25:40.315]                 }
[10:25:40.315]                 NAMES <- toupper(removed)
[10:25:40.315]                 for (kk in seq_along(NAMES)) {
[10:25:40.315]                   name <- removed[[kk]]
[10:25:40.315]                   NAME <- NAMES[[kk]]
[10:25:40.315]                   if (name != NAME && is.element(NAME, old_names)) 
[10:25:40.315]                     next
[10:25:40.315]                   args[[name]] <- ...future.oldEnvVars[[name]]
[10:25:40.315]                 }
[10:25:40.315]                 if (length(args) > 0) 
[10:25:40.315]                   base::do.call(base::Sys.setenv, args = args)
[10:25:40.315]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[10:25:40.315]             }
[10:25:40.315]             else {
[10:25:40.315]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[10:25:40.315]             }
[10:25:40.315]             {
[10:25:40.315]                 if (base::length(...future.futureOptionsAdded) > 
[10:25:40.315]                   0L) {
[10:25:40.315]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[10:25:40.315]                   base::names(opts) <- ...future.futureOptionsAdded
[10:25:40.315]                   base::options(opts)
[10:25:40.315]                 }
[10:25:40.315]                 {
[10:25:40.315]                   {
[10:25:40.315]                     base::options(mc.cores = ...future.mc.cores.old)
[10:25:40.315]                     NULL
[10:25:40.315]                   }
[10:25:40.315]                   options(future.plan = NULL)
[10:25:40.315]                   if (is.na(NA_character_)) 
[10:25:40.315]                     Sys.unsetenv("R_FUTURE_PLAN")
[10:25:40.315]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[10:25:40.315]                   future::plan(list(function (..., workers = availableCores(), 
[10:25:40.315]                     lazy = FALSE, rscript_libs = .libPaths(), 
[10:25:40.315]                     envir = parent.frame()) 
[10:25:40.315]                   {
[10:25:40.315]                     if (is.function(workers)) 
[10:25:40.315]                       workers <- workers()
[10:25:40.315]                     workers <- structure(as.integer(workers), 
[10:25:40.315]                       class = class(workers))
[10:25:40.315]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[10:25:40.315]                       workers >= 1)
[10:25:40.315]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[10:25:40.315]                       return(sequential(..., lazy = TRUE, envir = envir))
[10:25:40.315]                     }
[10:25:40.315]                     future <- MultisessionFuture(..., workers = workers, 
[10:25:40.315]                       lazy = lazy, rscript_libs = rscript_libs, 
[10:25:40.315]                       envir = envir)
[10:25:40.315]                     if (!future$lazy) 
[10:25:40.315]                       future <- run(future)
[10:25:40.315]                     invisible(future)
[10:25:40.315]                   }), .cleanup = FALSE, .init = FALSE)
[10:25:40.315]                 }
[10:25:40.315]             }
[10:25:40.315]         }
[10:25:40.315]     })
[10:25:40.315]     if (TRUE) {
[10:25:40.315]         base::sink(type = "output", split = FALSE)
[10:25:40.315]         if (TRUE) {
[10:25:40.315]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[10:25:40.315]         }
[10:25:40.315]         else {
[10:25:40.315]             ...future.result["stdout"] <- base::list(NULL)
[10:25:40.315]         }
[10:25:40.315]         base::close(...future.stdout)
[10:25:40.315]         ...future.stdout <- NULL
[10:25:40.315]     }
[10:25:40.315]     ...future.result$conditions <- ...future.conditions
[10:25:40.315]     ...future.result$finished <- base::Sys.time()
[10:25:40.315]     ...future.result
[10:25:40.315] }
[10:25:40.318] Exporting 1 global objects (56 bytes) to cluster node #1 ...
[10:25:40.318] Exporting ‘a’ (56 bytes) to cluster node #1 ...
[10:25:40.318] Exporting ‘a’ (56 bytes) to cluster node #1 ... DONE
[10:25:40.318] Exporting 1 global objects (56 bytes) to cluster node #1 ... DONE
[10:25:40.319] MultisessionFuture started
[10:25:40.319] - Launch lazy future ... done
[10:25:40.319] run() for ‘MultisessionFuture’ ... done
[10:25:40.319] result() for ClusterFuture ...
[10:25:40.319] receiveMessageFromWorker() for ClusterFuture ...
[10:25:40.319] - Validating connection of MultisessionFuture
[10:25:40.366] - received message: FutureResult
[10:25:40.366] - Received FutureResult
[10:25:40.366] - Erased future from FutureRegistry
[10:25:40.366] result() for ClusterFuture ...
[10:25:40.366] - result already collected: FutureResult
[10:25:40.366] result() for ClusterFuture ... done
[10:25:40.367] receiveMessageFromWorker() for ClusterFuture ... done
[10:25:40.367] result() for ClusterFuture ... done
[10:25:40.367] result() for ClusterFuture ...
[10:25:40.367] - result already collected: FutureResult
[10:25:40.367] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[10:25:40.368] plan(): Setting new future strategy stack:
[10:25:40.368] List of future strategies:
[10:25:40.368] 1. FutureStrategy:
[10:25:40.368]    - args: function (..., envir = parent.frame())
[10:25:40.368]    - tweaked: FALSE
[10:25:40.368]    - call: future::plan(oplan)
[10:25:40.369] plan(): nbrOfWorkers() = 1
> 
