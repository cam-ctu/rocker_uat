
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[13:22:38.476] plan(): Setting new future strategy stack:
[13:22:38.476] List of future strategies:
[13:22:38.476] 1. sequential:
[13:22:38.476]    - args: function (..., envir = parent.frame())
[13:22:38.476]    - tweaked: FALSE
[13:22:38.476]    - call: future::plan("sequential")
[13:22:38.491] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   message("*** Global argument '...' ...")
+ 
+   sum_fcns <- list()
+ 
+   sum_fcns$A <- function(x, ...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, ...) }
+     y
+   }
+ 
+ 
+   sum_fcns$B <- function(x, ...) {
+     sumt <- function(x) {
+       message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+       y %<-% { sum(x, ...) }
+       y
+     }
+     sumt(x)
+   }
+ 
+   sum_fcns$C <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y) }
+     y
+   }
+ 
+   sum_fcns$D <- function(x, y) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+     y %<-% { sum(x, y, ...) }
+     y
+   }
+ 
+   ## Issue/PR #400: Emulate how '...' may be used by the 'rlang' package
+   sum_fcns$E <- function(...) {
+     message("Arguments '...' exists: ", exists("...", inherits = TRUE))
+ 
+     ## Grab '...' into a Globals object
+     globals <- globals::globalsByName("...", envir=environment())
+ 
+     ## Evaluate an expression with '...' in an environment that does not
+     ## have an '...' object - hence the parent.frame().  This will produce
+     ## an error unless we pass 'globals' which contains '...'
+     f <- future({
+       fcn <- function() sum(...)
+       fcn()
+     }, envir = parent.frame(), globals = globals)
+     y <- value(f)
+     y
+   }
+ 
+   ## Issue: https://github.com/HenrikBengtsson/globals/issues/72
+   sum_fcns$F <- function(x, y) {
+     message("Using '...' in a formula")
+ 
+     fcn <- function(x, y) {
+       z = ~ list(...)
+       sum(x, y)
+     }
+     
+     f <- future(fcn(x, y))
+     y <- value(f)
+     y
+   }
+ 
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("- plan('%s') ...", strategy))
+     plan(strategy, substitute = FALSE)
+ 
+     for (name in names(sum_fcns)) {
+       message(sprintf("** Sum function '%s' with plan('%s') ...", name, strategy))
+       sum_fcn <- sum_fcns[[name]]
+       print(sum_fcn)
+       y <- try(sum_fcn(1:2, 3))
+       print(y)
+       if (name %in% c("D")) {
+         stopifnot(inherits(y, "try-error"))
+       } else {
+         stopifnot(y == 6)
+       }
+     }
+   }
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** Global argument '...' ...
- plan('sequential') ...
[13:22:38.541] plan(): Setting new future strategy stack:
[13:22:38.541] List of future strategies:
[13:22:38.541] 1. sequential:
[13:22:38.541]    - args: function (..., envir = parent.frame())
[13:22:38.541]    - tweaked: FALSE
[13:22:38.541]    - call: plan(strategy, substitute = FALSE)
[13:22:38.552] plan(): nbrOfWorkers() = 1
** Sum function 'A' with plan('sequential') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5638923bfab8>
Arguments '...' exists: TRUE
[13:22:38.554] getGlobalsAndPackages() ...
[13:22:38.554] Searching for globals...
[13:22:38.564] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:38.564] Searching for globals ... DONE
[13:22:38.564] Resolving globals: FALSE
[13:22:38.564] Tweak future expression to call with '...' arguments ...
[13:22:38.564] {
[13:22:38.564]     do.call(function(...) {
[13:22:38.564]         sum(x, ...)
[13:22:38.564]     }, args = future.call.arguments)
[13:22:38.564] }
[13:22:38.565] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.566] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.567] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:38.567] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:38.567] 
[13:22:38.567] getGlobalsAndPackages() ... DONE
[13:22:38.568] run() for ‘Future’ ...
[13:22:38.568] - state: ‘created’
[13:22:38.568] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.568] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.569]   - Field: ‘label’
[13:22:38.569]   - Field: ‘local’
[13:22:38.569]   - Field: ‘owner’
[13:22:38.569]   - Field: ‘envir’
[13:22:38.569]   - Field: ‘packages’
[13:22:38.569]   - Field: ‘gc’
[13:22:38.569]   - Field: ‘conditions’
[13:22:38.569]   - Field: ‘expr’
[13:22:38.569]   - Field: ‘uuid’
[13:22:38.570]   - Field: ‘seed’
[13:22:38.570]   - Field: ‘version’
[13:22:38.570]   - Field: ‘result’
[13:22:38.570]   - Field: ‘asynchronous’
[13:22:38.570]   - Field: ‘calls’
[13:22:38.570]   - Field: ‘globals’
[13:22:38.570]   - Field: ‘stdout’
[13:22:38.570]   - Field: ‘earlySignal’
[13:22:38.570]   - Field: ‘lazy’
[13:22:38.570]   - Field: ‘state’
[13:22:38.570] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.571] - Launch lazy future ...
[13:22:38.571] Packages needed by the future expression (n = 0): <none>
[13:22:38.572] Packages needed by future strategies (n = 0): <none>
[13:22:38.572] {
[13:22:38.572]     {
[13:22:38.572]         {
[13:22:38.572]             ...future.startTime <- base::Sys.time()
[13:22:38.572]             {
[13:22:38.572]                 {
[13:22:38.572]                   {
[13:22:38.572]                     base::local({
[13:22:38.572]                       has_future <- base::requireNamespace("future", 
[13:22:38.572]                         quietly = TRUE)
[13:22:38.572]                       if (has_future) {
[13:22:38.572]                         ns <- base::getNamespace("future")
[13:22:38.572]                         version <- ns[[".package"]][["version"]]
[13:22:38.572]                         if (is.null(version)) 
[13:22:38.572]                           version <- utils::packageVersion("future")
[13:22:38.572]                       }
[13:22:38.572]                       else {
[13:22:38.572]                         version <- NULL
[13:22:38.572]                       }
[13:22:38.572]                       if (!has_future || version < "1.8.0") {
[13:22:38.572]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.572]                           "", base::R.version$version.string), 
[13:22:38.572]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.572]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.572]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.572]                             "release", "version")], collapse = " "), 
[13:22:38.572]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.572]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.572]                           info)
[13:22:38.572]                         info <- base::paste(info, collapse = "; ")
[13:22:38.572]                         if (!has_future) {
[13:22:38.572]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.572]                             info)
[13:22:38.572]                         }
[13:22:38.572]                         else {
[13:22:38.572]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.572]                             info, version)
[13:22:38.572]                         }
[13:22:38.572]                         base::stop(msg)
[13:22:38.572]                       }
[13:22:38.572]                     })
[13:22:38.572]                   }
[13:22:38.572]                   options(future.plan = NULL)
[13:22:38.572]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.572]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.572]                 }
[13:22:38.572]                 ...future.workdir <- getwd()
[13:22:38.572]             }
[13:22:38.572]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.572]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.572]         }
[13:22:38.572]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.572]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.572]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.572]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.572]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.572]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.572]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.572]             base::names(...future.oldOptions))
[13:22:38.572]     }
[13:22:38.572]     if (FALSE) {
[13:22:38.572]     }
[13:22:38.572]     else {
[13:22:38.572]         if (TRUE) {
[13:22:38.572]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.572]                 open = "w")
[13:22:38.572]         }
[13:22:38.572]         else {
[13:22:38.572]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.572]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.572]         }
[13:22:38.572]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.572]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.572]             base::sink(type = "output", split = FALSE)
[13:22:38.572]             base::close(...future.stdout)
[13:22:38.572]         }, add = TRUE)
[13:22:38.572]     }
[13:22:38.572]     ...future.frame <- base::sys.nframe()
[13:22:38.572]     ...future.conditions <- base::list()
[13:22:38.572]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.572]     if (FALSE) {
[13:22:38.572]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.572]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.572]     }
[13:22:38.572]     ...future.result <- base::tryCatch({
[13:22:38.572]         base::withCallingHandlers({
[13:22:38.572]             ...future.value <- base::withVisible(base::local({
[13:22:38.572]                 do.call(function(...) {
[13:22:38.572]                   sum(x, ...)
[13:22:38.572]                 }, args = future.call.arguments)
[13:22:38.572]             }))
[13:22:38.572]             future::FutureResult(value = ...future.value$value, 
[13:22:38.572]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.572]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.572]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.572]                     ...future.globalenv.names))
[13:22:38.572]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.572]         }, condition = base::local({
[13:22:38.572]             c <- base::c
[13:22:38.572]             inherits <- base::inherits
[13:22:38.572]             invokeRestart <- base::invokeRestart
[13:22:38.572]             length <- base::length
[13:22:38.572]             list <- base::list
[13:22:38.572]             seq.int <- base::seq.int
[13:22:38.572]             signalCondition <- base::signalCondition
[13:22:38.572]             sys.calls <- base::sys.calls
[13:22:38.572]             `[[` <- base::`[[`
[13:22:38.572]             `+` <- base::`+`
[13:22:38.572]             `<<-` <- base::`<<-`
[13:22:38.572]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.572]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.572]                   3L)]
[13:22:38.572]             }
[13:22:38.572]             function(cond) {
[13:22:38.572]                 is_error <- inherits(cond, "error")
[13:22:38.572]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.572]                   NULL)
[13:22:38.572]                 if (is_error) {
[13:22:38.572]                   sessionInformation <- function() {
[13:22:38.572]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.572]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.572]                       search = base::search(), system = base::Sys.info())
[13:22:38.572]                   }
[13:22:38.572]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.572]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.572]                     cond$call), session = sessionInformation(), 
[13:22:38.572]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.572]                   signalCondition(cond)
[13:22:38.572]                 }
[13:22:38.572]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.572]                 "immediateCondition"))) {
[13:22:38.572]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.572]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.572]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.572]                   if (TRUE && !signal) {
[13:22:38.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.572]                     {
[13:22:38.572]                       inherits <- base::inherits
[13:22:38.572]                       invokeRestart <- base::invokeRestart
[13:22:38.572]                       is.null <- base::is.null
[13:22:38.572]                       muffled <- FALSE
[13:22:38.572]                       if (inherits(cond, "message")) {
[13:22:38.572]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.572]                         if (muffled) 
[13:22:38.572]                           invokeRestart("muffleMessage")
[13:22:38.572]                       }
[13:22:38.572]                       else if (inherits(cond, "warning")) {
[13:22:38.572]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.572]                         if (muffled) 
[13:22:38.572]                           invokeRestart("muffleWarning")
[13:22:38.572]                       }
[13:22:38.572]                       else if (inherits(cond, "condition")) {
[13:22:38.572]                         if (!is.null(pattern)) {
[13:22:38.572]                           computeRestarts <- base::computeRestarts
[13:22:38.572]                           grepl <- base::grepl
[13:22:38.572]                           restarts <- computeRestarts(cond)
[13:22:38.572]                           for (restart in restarts) {
[13:22:38.572]                             name <- restart$name
[13:22:38.572]                             if (is.null(name)) 
[13:22:38.572]                               next
[13:22:38.572]                             if (!grepl(pattern, name)) 
[13:22:38.572]                               next
[13:22:38.572]                             invokeRestart(restart)
[13:22:38.572]                             muffled <- TRUE
[13:22:38.572]                             break
[13:22:38.572]                           }
[13:22:38.572]                         }
[13:22:38.572]                       }
[13:22:38.572]                       invisible(muffled)
[13:22:38.572]                     }
[13:22:38.572]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.572]                   }
[13:22:38.572]                 }
[13:22:38.572]                 else {
[13:22:38.572]                   if (TRUE) {
[13:22:38.572]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.572]                     {
[13:22:38.572]                       inherits <- base::inherits
[13:22:38.572]                       invokeRestart <- base::invokeRestart
[13:22:38.572]                       is.null <- base::is.null
[13:22:38.572]                       muffled <- FALSE
[13:22:38.572]                       if (inherits(cond, "message")) {
[13:22:38.572]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.572]                         if (muffled) 
[13:22:38.572]                           invokeRestart("muffleMessage")
[13:22:38.572]                       }
[13:22:38.572]                       else if (inherits(cond, "warning")) {
[13:22:38.572]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.572]                         if (muffled) 
[13:22:38.572]                           invokeRestart("muffleWarning")
[13:22:38.572]                       }
[13:22:38.572]                       else if (inherits(cond, "condition")) {
[13:22:38.572]                         if (!is.null(pattern)) {
[13:22:38.572]                           computeRestarts <- base::computeRestarts
[13:22:38.572]                           grepl <- base::grepl
[13:22:38.572]                           restarts <- computeRestarts(cond)
[13:22:38.572]                           for (restart in restarts) {
[13:22:38.572]                             name <- restart$name
[13:22:38.572]                             if (is.null(name)) 
[13:22:38.572]                               next
[13:22:38.572]                             if (!grepl(pattern, name)) 
[13:22:38.572]                               next
[13:22:38.572]                             invokeRestart(restart)
[13:22:38.572]                             muffled <- TRUE
[13:22:38.572]                             break
[13:22:38.572]                           }
[13:22:38.572]                         }
[13:22:38.572]                       }
[13:22:38.572]                       invisible(muffled)
[13:22:38.572]                     }
[13:22:38.572]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.572]                   }
[13:22:38.572]                 }
[13:22:38.572]             }
[13:22:38.572]         }))
[13:22:38.572]     }, error = function(ex) {
[13:22:38.572]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.572]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.572]                 ...future.rng), started = ...future.startTime, 
[13:22:38.572]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.572]             version = "1.8"), class = "FutureResult")
[13:22:38.572]     }, finally = {
[13:22:38.572]         if (!identical(...future.workdir, getwd())) 
[13:22:38.572]             setwd(...future.workdir)
[13:22:38.572]         {
[13:22:38.572]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.572]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.572]             }
[13:22:38.572]             base::options(...future.oldOptions)
[13:22:38.572]             if (.Platform$OS.type == "windows") {
[13:22:38.572]                 old_names <- names(...future.oldEnvVars)
[13:22:38.572]                 envs <- base::Sys.getenv()
[13:22:38.572]                 names <- names(envs)
[13:22:38.572]                 common <- intersect(names, old_names)
[13:22:38.572]                 added <- setdiff(names, old_names)
[13:22:38.572]                 removed <- setdiff(old_names, names)
[13:22:38.572]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.572]                   envs[common]]
[13:22:38.572]                 NAMES <- toupper(changed)
[13:22:38.572]                 args <- list()
[13:22:38.572]                 for (kk in seq_along(NAMES)) {
[13:22:38.572]                   name <- changed[[kk]]
[13:22:38.572]                   NAME <- NAMES[[kk]]
[13:22:38.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.572]                     next
[13:22:38.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.572]                 }
[13:22:38.572]                 NAMES <- toupper(added)
[13:22:38.572]                 for (kk in seq_along(NAMES)) {
[13:22:38.572]                   name <- added[[kk]]
[13:22:38.572]                   NAME <- NAMES[[kk]]
[13:22:38.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.572]                     next
[13:22:38.572]                   args[[name]] <- ""
[13:22:38.572]                 }
[13:22:38.572]                 NAMES <- toupper(removed)
[13:22:38.572]                 for (kk in seq_along(NAMES)) {
[13:22:38.572]                   name <- removed[[kk]]
[13:22:38.572]                   NAME <- NAMES[[kk]]
[13:22:38.572]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.572]                     next
[13:22:38.572]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.572]                 }
[13:22:38.572]                 if (length(args) > 0) 
[13:22:38.572]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.572]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.572]             }
[13:22:38.572]             else {
[13:22:38.572]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.572]             }
[13:22:38.572]             {
[13:22:38.572]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.572]                   0L) {
[13:22:38.572]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.572]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.572]                   base::options(opts)
[13:22:38.572]                 }
[13:22:38.572]                 {
[13:22:38.572]                   {
[13:22:38.572]                     NULL
[13:22:38.572]                     RNGkind("Mersenne-Twister")
[13:22:38.572]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.572]                       inherits = FALSE)
[13:22:38.572]                   }
[13:22:38.572]                   options(future.plan = NULL)
[13:22:38.572]                   if (is.na(NA_character_)) 
[13:22:38.572]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.572]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.572]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.572]                   {
[13:22:38.572]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.572]                     if (!future$lazy) 
[13:22:38.572]                       future <- run(future)
[13:22:38.572]                     invisible(future)
[13:22:38.572]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.572]                 }
[13:22:38.572]             }
[13:22:38.572]         }
[13:22:38.572]     })
[13:22:38.572]     if (TRUE) {
[13:22:38.572]         base::sink(type = "output", split = FALSE)
[13:22:38.572]         if (TRUE) {
[13:22:38.572]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.572]         }
[13:22:38.572]         else {
[13:22:38.572]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.572]         }
[13:22:38.572]         base::close(...future.stdout)
[13:22:38.572]         ...future.stdout <- NULL
[13:22:38.572]     }
[13:22:38.572]     ...future.result$conditions <- ...future.conditions
[13:22:38.572]     ...future.result$finished <- base::Sys.time()
[13:22:38.572]     ...future.result
[13:22:38.572] }
[13:22:38.574] assign_globals() ...
[13:22:38.574] List of 2
[13:22:38.574]  $ x                    : int [1:2] 1 2
[13:22:38.574]  $ future.call.arguments:List of 1
[13:22:38.574]   ..$ : num 3
[13:22:38.574]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.574]  - attr(*, "where")=List of 2
[13:22:38.574]   ..$ x                    :<environment: R_EmptyEnv> 
[13:22:38.574]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.574]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.574]  - attr(*, "resolved")= logi FALSE
[13:22:38.574]  - attr(*, "total_size")= num 112
[13:22:38.574]  - attr(*, "already-done")= logi TRUE
[13:22:38.580] - copied ‘x’ to environment
[13:22:38.581] - copied ‘future.call.arguments’ to environment
[13:22:38.581] assign_globals() ... done
[13:22:38.581] plan(): Setting new future strategy stack:
[13:22:38.581] List of future strategies:
[13:22:38.581] 1. sequential:
[13:22:38.581]    - args: function (..., envir = parent.frame())
[13:22:38.581]    - tweaked: FALSE
[13:22:38.581]    - call: NULL
[13:22:38.581] plan(): nbrOfWorkers() = 1
[13:22:38.583] plan(): Setting new future strategy stack:
[13:22:38.583] List of future strategies:
[13:22:38.583] 1. sequential:
[13:22:38.583]    - args: function (..., envir = parent.frame())
[13:22:38.583]    - tweaked: FALSE
[13:22:38.583]    - call: plan(strategy, substitute = FALSE)
[13:22:38.583] plan(): nbrOfWorkers() = 1
[13:22:38.583] SequentialFuture started (and completed)
[13:22:38.584] - Launch lazy future ... done
[13:22:38.584] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'B' with plan('sequential') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x563892679f00>
Arguments '...' exists: TRUE
[13:22:38.585] getGlobalsAndPackages() ...
[13:22:38.585] Searching for globals...
[13:22:38.587] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:38.587] Searching for globals ... DONE
[13:22:38.587] Resolving globals: FALSE
[13:22:38.587] Tweak future expression to call with '...' arguments ...
[13:22:38.587] {
[13:22:38.587]     do.call(function(...) {
[13:22:38.587]         sum(x, ...)
[13:22:38.587]     }, args = future.call.arguments)
[13:22:38.587] }
[13:22:38.587] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.588] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.588] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:38.588] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:38.588] 
[13:22:38.588] getGlobalsAndPackages() ... DONE
[13:22:38.589] run() for ‘Future’ ...
[13:22:38.589] - state: ‘created’
[13:22:38.589] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.589] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.589] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.589]   - Field: ‘label’
[13:22:38.590]   - Field: ‘local’
[13:22:38.590]   - Field: ‘owner’
[13:22:38.590]   - Field: ‘envir’
[13:22:38.590]   - Field: ‘packages’
[13:22:38.590]   - Field: ‘gc’
[13:22:38.590]   - Field: ‘conditions’
[13:22:38.590]   - Field: ‘expr’
[13:22:38.590]   - Field: ‘uuid’
[13:22:38.590]   - Field: ‘seed’
[13:22:38.590]   - Field: ‘version’
[13:22:38.590]   - Field: ‘result’
[13:22:38.591]   - Field: ‘asynchronous’
[13:22:38.591]   - Field: ‘calls’
[13:22:38.591]   - Field: ‘globals’
[13:22:38.591]   - Field: ‘stdout’
[13:22:38.591]   - Field: ‘earlySignal’
[13:22:38.591]   - Field: ‘lazy’
[13:22:38.591]   - Field: ‘state’
[13:22:38.591] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.591] - Launch lazy future ...
[13:22:38.591] Packages needed by the future expression (n = 0): <none>
[13:22:38.592] Packages needed by future strategies (n = 0): <none>
[13:22:38.592] {
[13:22:38.592]     {
[13:22:38.592]         {
[13:22:38.592]             ...future.startTime <- base::Sys.time()
[13:22:38.592]             {
[13:22:38.592]                 {
[13:22:38.592]                   {
[13:22:38.592]                     base::local({
[13:22:38.592]                       has_future <- base::requireNamespace("future", 
[13:22:38.592]                         quietly = TRUE)
[13:22:38.592]                       if (has_future) {
[13:22:38.592]                         ns <- base::getNamespace("future")
[13:22:38.592]                         version <- ns[[".package"]][["version"]]
[13:22:38.592]                         if (is.null(version)) 
[13:22:38.592]                           version <- utils::packageVersion("future")
[13:22:38.592]                       }
[13:22:38.592]                       else {
[13:22:38.592]                         version <- NULL
[13:22:38.592]                       }
[13:22:38.592]                       if (!has_future || version < "1.8.0") {
[13:22:38.592]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.592]                           "", base::R.version$version.string), 
[13:22:38.592]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.592]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.592]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.592]                             "release", "version")], collapse = " "), 
[13:22:38.592]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.592]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.592]                           info)
[13:22:38.592]                         info <- base::paste(info, collapse = "; ")
[13:22:38.592]                         if (!has_future) {
[13:22:38.592]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.592]                             info)
[13:22:38.592]                         }
[13:22:38.592]                         else {
[13:22:38.592]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.592]                             info, version)
[13:22:38.592]                         }
[13:22:38.592]                         base::stop(msg)
[13:22:38.592]                       }
[13:22:38.592]                     })
[13:22:38.592]                   }
[13:22:38.592]                   options(future.plan = NULL)
[13:22:38.592]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.592]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.592]                 }
[13:22:38.592]                 ...future.workdir <- getwd()
[13:22:38.592]             }
[13:22:38.592]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.592]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.592]         }
[13:22:38.592]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.592]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.592]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.592]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.592]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.592]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.592]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.592]             base::names(...future.oldOptions))
[13:22:38.592]     }
[13:22:38.592]     if (FALSE) {
[13:22:38.592]     }
[13:22:38.592]     else {
[13:22:38.592]         if (TRUE) {
[13:22:38.592]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.592]                 open = "w")
[13:22:38.592]         }
[13:22:38.592]         else {
[13:22:38.592]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.592]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.592]         }
[13:22:38.592]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.592]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.592]             base::sink(type = "output", split = FALSE)
[13:22:38.592]             base::close(...future.stdout)
[13:22:38.592]         }, add = TRUE)
[13:22:38.592]     }
[13:22:38.592]     ...future.frame <- base::sys.nframe()
[13:22:38.592]     ...future.conditions <- base::list()
[13:22:38.592]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.592]     if (FALSE) {
[13:22:38.592]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.592]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.592]     }
[13:22:38.592]     ...future.result <- base::tryCatch({
[13:22:38.592]         base::withCallingHandlers({
[13:22:38.592]             ...future.value <- base::withVisible(base::local({
[13:22:38.592]                 do.call(function(...) {
[13:22:38.592]                   sum(x, ...)
[13:22:38.592]                 }, args = future.call.arguments)
[13:22:38.592]             }))
[13:22:38.592]             future::FutureResult(value = ...future.value$value, 
[13:22:38.592]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.592]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.592]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.592]                     ...future.globalenv.names))
[13:22:38.592]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.592]         }, condition = base::local({
[13:22:38.592]             c <- base::c
[13:22:38.592]             inherits <- base::inherits
[13:22:38.592]             invokeRestart <- base::invokeRestart
[13:22:38.592]             length <- base::length
[13:22:38.592]             list <- base::list
[13:22:38.592]             seq.int <- base::seq.int
[13:22:38.592]             signalCondition <- base::signalCondition
[13:22:38.592]             sys.calls <- base::sys.calls
[13:22:38.592]             `[[` <- base::`[[`
[13:22:38.592]             `+` <- base::`+`
[13:22:38.592]             `<<-` <- base::`<<-`
[13:22:38.592]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.592]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.592]                   3L)]
[13:22:38.592]             }
[13:22:38.592]             function(cond) {
[13:22:38.592]                 is_error <- inherits(cond, "error")
[13:22:38.592]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.592]                   NULL)
[13:22:38.592]                 if (is_error) {
[13:22:38.592]                   sessionInformation <- function() {
[13:22:38.592]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.592]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.592]                       search = base::search(), system = base::Sys.info())
[13:22:38.592]                   }
[13:22:38.592]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.592]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.592]                     cond$call), session = sessionInformation(), 
[13:22:38.592]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.592]                   signalCondition(cond)
[13:22:38.592]                 }
[13:22:38.592]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.592]                 "immediateCondition"))) {
[13:22:38.592]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.592]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.592]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.592]                   if (TRUE && !signal) {
[13:22:38.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.592]                     {
[13:22:38.592]                       inherits <- base::inherits
[13:22:38.592]                       invokeRestart <- base::invokeRestart
[13:22:38.592]                       is.null <- base::is.null
[13:22:38.592]                       muffled <- FALSE
[13:22:38.592]                       if (inherits(cond, "message")) {
[13:22:38.592]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.592]                         if (muffled) 
[13:22:38.592]                           invokeRestart("muffleMessage")
[13:22:38.592]                       }
[13:22:38.592]                       else if (inherits(cond, "warning")) {
[13:22:38.592]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.592]                         if (muffled) 
[13:22:38.592]                           invokeRestart("muffleWarning")
[13:22:38.592]                       }
[13:22:38.592]                       else if (inherits(cond, "condition")) {
[13:22:38.592]                         if (!is.null(pattern)) {
[13:22:38.592]                           computeRestarts <- base::computeRestarts
[13:22:38.592]                           grepl <- base::grepl
[13:22:38.592]                           restarts <- computeRestarts(cond)
[13:22:38.592]                           for (restart in restarts) {
[13:22:38.592]                             name <- restart$name
[13:22:38.592]                             if (is.null(name)) 
[13:22:38.592]                               next
[13:22:38.592]                             if (!grepl(pattern, name)) 
[13:22:38.592]                               next
[13:22:38.592]                             invokeRestart(restart)
[13:22:38.592]                             muffled <- TRUE
[13:22:38.592]                             break
[13:22:38.592]                           }
[13:22:38.592]                         }
[13:22:38.592]                       }
[13:22:38.592]                       invisible(muffled)
[13:22:38.592]                     }
[13:22:38.592]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.592]                   }
[13:22:38.592]                 }
[13:22:38.592]                 else {
[13:22:38.592]                   if (TRUE) {
[13:22:38.592]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.592]                     {
[13:22:38.592]                       inherits <- base::inherits
[13:22:38.592]                       invokeRestart <- base::invokeRestart
[13:22:38.592]                       is.null <- base::is.null
[13:22:38.592]                       muffled <- FALSE
[13:22:38.592]                       if (inherits(cond, "message")) {
[13:22:38.592]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.592]                         if (muffled) 
[13:22:38.592]                           invokeRestart("muffleMessage")
[13:22:38.592]                       }
[13:22:38.592]                       else if (inherits(cond, "warning")) {
[13:22:38.592]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.592]                         if (muffled) 
[13:22:38.592]                           invokeRestart("muffleWarning")
[13:22:38.592]                       }
[13:22:38.592]                       else if (inherits(cond, "condition")) {
[13:22:38.592]                         if (!is.null(pattern)) {
[13:22:38.592]                           computeRestarts <- base::computeRestarts
[13:22:38.592]                           grepl <- base::grepl
[13:22:38.592]                           restarts <- computeRestarts(cond)
[13:22:38.592]                           for (restart in restarts) {
[13:22:38.592]                             name <- restart$name
[13:22:38.592]                             if (is.null(name)) 
[13:22:38.592]                               next
[13:22:38.592]                             if (!grepl(pattern, name)) 
[13:22:38.592]                               next
[13:22:38.592]                             invokeRestart(restart)
[13:22:38.592]                             muffled <- TRUE
[13:22:38.592]                             break
[13:22:38.592]                           }
[13:22:38.592]                         }
[13:22:38.592]                       }
[13:22:38.592]                       invisible(muffled)
[13:22:38.592]                     }
[13:22:38.592]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.592]                   }
[13:22:38.592]                 }
[13:22:38.592]             }
[13:22:38.592]         }))
[13:22:38.592]     }, error = function(ex) {
[13:22:38.592]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.592]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.592]                 ...future.rng), started = ...future.startTime, 
[13:22:38.592]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.592]             version = "1.8"), class = "FutureResult")
[13:22:38.592]     }, finally = {
[13:22:38.592]         if (!identical(...future.workdir, getwd())) 
[13:22:38.592]             setwd(...future.workdir)
[13:22:38.592]         {
[13:22:38.592]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.592]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.592]             }
[13:22:38.592]             base::options(...future.oldOptions)
[13:22:38.592]             if (.Platform$OS.type == "windows") {
[13:22:38.592]                 old_names <- names(...future.oldEnvVars)
[13:22:38.592]                 envs <- base::Sys.getenv()
[13:22:38.592]                 names <- names(envs)
[13:22:38.592]                 common <- intersect(names, old_names)
[13:22:38.592]                 added <- setdiff(names, old_names)
[13:22:38.592]                 removed <- setdiff(old_names, names)
[13:22:38.592]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.592]                   envs[common]]
[13:22:38.592]                 NAMES <- toupper(changed)
[13:22:38.592]                 args <- list()
[13:22:38.592]                 for (kk in seq_along(NAMES)) {
[13:22:38.592]                   name <- changed[[kk]]
[13:22:38.592]                   NAME <- NAMES[[kk]]
[13:22:38.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.592]                     next
[13:22:38.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.592]                 }
[13:22:38.592]                 NAMES <- toupper(added)
[13:22:38.592]                 for (kk in seq_along(NAMES)) {
[13:22:38.592]                   name <- added[[kk]]
[13:22:38.592]                   NAME <- NAMES[[kk]]
[13:22:38.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.592]                     next
[13:22:38.592]                   args[[name]] <- ""
[13:22:38.592]                 }
[13:22:38.592]                 NAMES <- toupper(removed)
[13:22:38.592]                 for (kk in seq_along(NAMES)) {
[13:22:38.592]                   name <- removed[[kk]]
[13:22:38.592]                   NAME <- NAMES[[kk]]
[13:22:38.592]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.592]                     next
[13:22:38.592]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.592]                 }
[13:22:38.592]                 if (length(args) > 0) 
[13:22:38.592]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.592]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.592]             }
[13:22:38.592]             else {
[13:22:38.592]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.592]             }
[13:22:38.592]             {
[13:22:38.592]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.592]                   0L) {
[13:22:38.592]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.592]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.592]                   base::options(opts)
[13:22:38.592]                 }
[13:22:38.592]                 {
[13:22:38.592]                   {
[13:22:38.592]                     NULL
[13:22:38.592]                     RNGkind("Mersenne-Twister")
[13:22:38.592]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.592]                       inherits = FALSE)
[13:22:38.592]                   }
[13:22:38.592]                   options(future.plan = NULL)
[13:22:38.592]                   if (is.na(NA_character_)) 
[13:22:38.592]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.592]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.592]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.592]                   {
[13:22:38.592]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.592]                     if (!future$lazy) 
[13:22:38.592]                       future <- run(future)
[13:22:38.592]                     invisible(future)
[13:22:38.592]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.592]                 }
[13:22:38.592]             }
[13:22:38.592]         }
[13:22:38.592]     })
[13:22:38.592]     if (TRUE) {
[13:22:38.592]         base::sink(type = "output", split = FALSE)
[13:22:38.592]         if (TRUE) {
[13:22:38.592]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.592]         }
[13:22:38.592]         else {
[13:22:38.592]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.592]         }
[13:22:38.592]         base::close(...future.stdout)
[13:22:38.592]         ...future.stdout <- NULL
[13:22:38.592]     }
[13:22:38.592]     ...future.result$conditions <- ...future.conditions
[13:22:38.592]     ...future.result$finished <- base::Sys.time()
[13:22:38.592]     ...future.result
[13:22:38.592] }
[13:22:38.594] assign_globals() ...
[13:22:38.594] List of 2
[13:22:38.594]  $ x                    : int [1:2] 1 2
[13:22:38.594]  $ future.call.arguments:List of 1
[13:22:38.594]   ..$ : num 3
[13:22:38.594]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.594]  - attr(*, "where")=List of 2
[13:22:38.594]   ..$ x                    :<environment: R_EmptyEnv> 
[13:22:38.594]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.594]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.594]  - attr(*, "resolved")= logi FALSE
[13:22:38.594]  - attr(*, "total_size")= num 112
[13:22:38.594]  - attr(*, "already-done")= logi TRUE
[13:22:38.600] - copied ‘x’ to environment
[13:22:38.600] - copied ‘future.call.arguments’ to environment
[13:22:38.601] assign_globals() ... done
[13:22:38.601] plan(): Setting new future strategy stack:
[13:22:38.601] List of future strategies:
[13:22:38.601] 1. sequential:
[13:22:38.601]    - args: function (..., envir = parent.frame())
[13:22:38.601]    - tweaked: FALSE
[13:22:38.601]    - call: NULL
[13:22:38.601] plan(): nbrOfWorkers() = 1
[13:22:38.602] plan(): Setting new future strategy stack:
[13:22:38.602] List of future strategies:
[13:22:38.602] 1. sequential:
[13:22:38.602]    - args: function (..., envir = parent.frame())
[13:22:38.602]    - tweaked: FALSE
[13:22:38.602]    - call: plan(strategy, substitute = FALSE)
[13:22:38.603] plan(): nbrOfWorkers() = 1
[13:22:38.603] SequentialFuture started (and completed)
[13:22:38.603] - Launch lazy future ... done
[13:22:38.603] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'C' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5638927daf00>
Arguments '...' exists: FALSE
[13:22:38.604] getGlobalsAndPackages() ...
[13:22:38.604] Searching for globals...
[13:22:38.605] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:22:38.605] Searching for globals ... DONE
[13:22:38.605] Resolving globals: FALSE
[13:22:38.606] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.606] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.606] - globals: [2] ‘x’, ‘y’
[13:22:38.606] 
[13:22:38.606] getGlobalsAndPackages() ... DONE
[13:22:38.607] run() for ‘Future’ ...
[13:22:38.607] - state: ‘created’
[13:22:38.607] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.607] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.607] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.607]   - Field: ‘label’
[13:22:38.607]   - Field: ‘local’
[13:22:38.607]   - Field: ‘owner’
[13:22:38.608]   - Field: ‘envir’
[13:22:38.608]   - Field: ‘packages’
[13:22:38.608]   - Field: ‘gc’
[13:22:38.608]   - Field: ‘conditions’
[13:22:38.608]   - Field: ‘expr’
[13:22:38.608]   - Field: ‘uuid’
[13:22:38.608]   - Field: ‘seed’
[13:22:38.608]   - Field: ‘version’
[13:22:38.608]   - Field: ‘result’
[13:22:38.608]   - Field: ‘asynchronous’
[13:22:38.609]   - Field: ‘calls’
[13:22:38.609]   - Field: ‘globals’
[13:22:38.609]   - Field: ‘stdout’
[13:22:38.609]   - Field: ‘earlySignal’
[13:22:38.609]   - Field: ‘lazy’
[13:22:38.609]   - Field: ‘state’
[13:22:38.609] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.609] - Launch lazy future ...
[13:22:38.609] Packages needed by the future expression (n = 0): <none>
[13:22:38.610] Packages needed by future strategies (n = 0): <none>
[13:22:38.610] {
[13:22:38.610]     {
[13:22:38.610]         {
[13:22:38.610]             ...future.startTime <- base::Sys.time()
[13:22:38.610]             {
[13:22:38.610]                 {
[13:22:38.610]                   {
[13:22:38.610]                     base::local({
[13:22:38.610]                       has_future <- base::requireNamespace("future", 
[13:22:38.610]                         quietly = TRUE)
[13:22:38.610]                       if (has_future) {
[13:22:38.610]                         ns <- base::getNamespace("future")
[13:22:38.610]                         version <- ns[[".package"]][["version"]]
[13:22:38.610]                         if (is.null(version)) 
[13:22:38.610]                           version <- utils::packageVersion("future")
[13:22:38.610]                       }
[13:22:38.610]                       else {
[13:22:38.610]                         version <- NULL
[13:22:38.610]                       }
[13:22:38.610]                       if (!has_future || version < "1.8.0") {
[13:22:38.610]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.610]                           "", base::R.version$version.string), 
[13:22:38.610]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.610]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.610]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.610]                             "release", "version")], collapse = " "), 
[13:22:38.610]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.610]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.610]                           info)
[13:22:38.610]                         info <- base::paste(info, collapse = "; ")
[13:22:38.610]                         if (!has_future) {
[13:22:38.610]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.610]                             info)
[13:22:38.610]                         }
[13:22:38.610]                         else {
[13:22:38.610]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.610]                             info, version)
[13:22:38.610]                         }
[13:22:38.610]                         base::stop(msg)
[13:22:38.610]                       }
[13:22:38.610]                     })
[13:22:38.610]                   }
[13:22:38.610]                   options(future.plan = NULL)
[13:22:38.610]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.610]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.610]                 }
[13:22:38.610]                 ...future.workdir <- getwd()
[13:22:38.610]             }
[13:22:38.610]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.610]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.610]         }
[13:22:38.610]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.610]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.610]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.610]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.610]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.610]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.610]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.610]             base::names(...future.oldOptions))
[13:22:38.610]     }
[13:22:38.610]     if (FALSE) {
[13:22:38.610]     }
[13:22:38.610]     else {
[13:22:38.610]         if (TRUE) {
[13:22:38.610]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.610]                 open = "w")
[13:22:38.610]         }
[13:22:38.610]         else {
[13:22:38.610]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.610]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.610]         }
[13:22:38.610]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.610]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.610]             base::sink(type = "output", split = FALSE)
[13:22:38.610]             base::close(...future.stdout)
[13:22:38.610]         }, add = TRUE)
[13:22:38.610]     }
[13:22:38.610]     ...future.frame <- base::sys.nframe()
[13:22:38.610]     ...future.conditions <- base::list()
[13:22:38.610]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.610]     if (FALSE) {
[13:22:38.610]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.610]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.610]     }
[13:22:38.610]     ...future.result <- base::tryCatch({
[13:22:38.610]         base::withCallingHandlers({
[13:22:38.610]             ...future.value <- base::withVisible(base::local({
[13:22:38.610]                 sum(x, y)
[13:22:38.610]             }))
[13:22:38.610]             future::FutureResult(value = ...future.value$value, 
[13:22:38.610]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.610]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.610]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.610]                     ...future.globalenv.names))
[13:22:38.610]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.610]         }, condition = base::local({
[13:22:38.610]             c <- base::c
[13:22:38.610]             inherits <- base::inherits
[13:22:38.610]             invokeRestart <- base::invokeRestart
[13:22:38.610]             length <- base::length
[13:22:38.610]             list <- base::list
[13:22:38.610]             seq.int <- base::seq.int
[13:22:38.610]             signalCondition <- base::signalCondition
[13:22:38.610]             sys.calls <- base::sys.calls
[13:22:38.610]             `[[` <- base::`[[`
[13:22:38.610]             `+` <- base::`+`
[13:22:38.610]             `<<-` <- base::`<<-`
[13:22:38.610]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.610]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.610]                   3L)]
[13:22:38.610]             }
[13:22:38.610]             function(cond) {
[13:22:38.610]                 is_error <- inherits(cond, "error")
[13:22:38.610]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.610]                   NULL)
[13:22:38.610]                 if (is_error) {
[13:22:38.610]                   sessionInformation <- function() {
[13:22:38.610]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.610]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.610]                       search = base::search(), system = base::Sys.info())
[13:22:38.610]                   }
[13:22:38.610]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.610]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.610]                     cond$call), session = sessionInformation(), 
[13:22:38.610]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.610]                   signalCondition(cond)
[13:22:38.610]                 }
[13:22:38.610]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.610]                 "immediateCondition"))) {
[13:22:38.610]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.610]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.610]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.610]                   if (TRUE && !signal) {
[13:22:38.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.610]                     {
[13:22:38.610]                       inherits <- base::inherits
[13:22:38.610]                       invokeRestart <- base::invokeRestart
[13:22:38.610]                       is.null <- base::is.null
[13:22:38.610]                       muffled <- FALSE
[13:22:38.610]                       if (inherits(cond, "message")) {
[13:22:38.610]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.610]                         if (muffled) 
[13:22:38.610]                           invokeRestart("muffleMessage")
[13:22:38.610]                       }
[13:22:38.610]                       else if (inherits(cond, "warning")) {
[13:22:38.610]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.610]                         if (muffled) 
[13:22:38.610]                           invokeRestart("muffleWarning")
[13:22:38.610]                       }
[13:22:38.610]                       else if (inherits(cond, "condition")) {
[13:22:38.610]                         if (!is.null(pattern)) {
[13:22:38.610]                           computeRestarts <- base::computeRestarts
[13:22:38.610]                           grepl <- base::grepl
[13:22:38.610]                           restarts <- computeRestarts(cond)
[13:22:38.610]                           for (restart in restarts) {
[13:22:38.610]                             name <- restart$name
[13:22:38.610]                             if (is.null(name)) 
[13:22:38.610]                               next
[13:22:38.610]                             if (!grepl(pattern, name)) 
[13:22:38.610]                               next
[13:22:38.610]                             invokeRestart(restart)
[13:22:38.610]                             muffled <- TRUE
[13:22:38.610]                             break
[13:22:38.610]                           }
[13:22:38.610]                         }
[13:22:38.610]                       }
[13:22:38.610]                       invisible(muffled)
[13:22:38.610]                     }
[13:22:38.610]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.610]                   }
[13:22:38.610]                 }
[13:22:38.610]                 else {
[13:22:38.610]                   if (TRUE) {
[13:22:38.610]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.610]                     {
[13:22:38.610]                       inherits <- base::inherits
[13:22:38.610]                       invokeRestart <- base::invokeRestart
[13:22:38.610]                       is.null <- base::is.null
[13:22:38.610]                       muffled <- FALSE
[13:22:38.610]                       if (inherits(cond, "message")) {
[13:22:38.610]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.610]                         if (muffled) 
[13:22:38.610]                           invokeRestart("muffleMessage")
[13:22:38.610]                       }
[13:22:38.610]                       else if (inherits(cond, "warning")) {
[13:22:38.610]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.610]                         if (muffled) 
[13:22:38.610]                           invokeRestart("muffleWarning")
[13:22:38.610]                       }
[13:22:38.610]                       else if (inherits(cond, "condition")) {
[13:22:38.610]                         if (!is.null(pattern)) {
[13:22:38.610]                           computeRestarts <- base::computeRestarts
[13:22:38.610]                           grepl <- base::grepl
[13:22:38.610]                           restarts <- computeRestarts(cond)
[13:22:38.610]                           for (restart in restarts) {
[13:22:38.610]                             name <- restart$name
[13:22:38.610]                             if (is.null(name)) 
[13:22:38.610]                               next
[13:22:38.610]                             if (!grepl(pattern, name)) 
[13:22:38.610]                               next
[13:22:38.610]                             invokeRestart(restart)
[13:22:38.610]                             muffled <- TRUE
[13:22:38.610]                             break
[13:22:38.610]                           }
[13:22:38.610]                         }
[13:22:38.610]                       }
[13:22:38.610]                       invisible(muffled)
[13:22:38.610]                     }
[13:22:38.610]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.610]                   }
[13:22:38.610]                 }
[13:22:38.610]             }
[13:22:38.610]         }))
[13:22:38.610]     }, error = function(ex) {
[13:22:38.610]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.610]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.610]                 ...future.rng), started = ...future.startTime, 
[13:22:38.610]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.610]             version = "1.8"), class = "FutureResult")
[13:22:38.610]     }, finally = {
[13:22:38.610]         if (!identical(...future.workdir, getwd())) 
[13:22:38.610]             setwd(...future.workdir)
[13:22:38.610]         {
[13:22:38.610]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.610]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.610]             }
[13:22:38.610]             base::options(...future.oldOptions)
[13:22:38.610]             if (.Platform$OS.type == "windows") {
[13:22:38.610]                 old_names <- names(...future.oldEnvVars)
[13:22:38.610]                 envs <- base::Sys.getenv()
[13:22:38.610]                 names <- names(envs)
[13:22:38.610]                 common <- intersect(names, old_names)
[13:22:38.610]                 added <- setdiff(names, old_names)
[13:22:38.610]                 removed <- setdiff(old_names, names)
[13:22:38.610]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.610]                   envs[common]]
[13:22:38.610]                 NAMES <- toupper(changed)
[13:22:38.610]                 args <- list()
[13:22:38.610]                 for (kk in seq_along(NAMES)) {
[13:22:38.610]                   name <- changed[[kk]]
[13:22:38.610]                   NAME <- NAMES[[kk]]
[13:22:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.610]                     next
[13:22:38.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.610]                 }
[13:22:38.610]                 NAMES <- toupper(added)
[13:22:38.610]                 for (kk in seq_along(NAMES)) {
[13:22:38.610]                   name <- added[[kk]]
[13:22:38.610]                   NAME <- NAMES[[kk]]
[13:22:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.610]                     next
[13:22:38.610]                   args[[name]] <- ""
[13:22:38.610]                 }
[13:22:38.610]                 NAMES <- toupper(removed)
[13:22:38.610]                 for (kk in seq_along(NAMES)) {
[13:22:38.610]                   name <- removed[[kk]]
[13:22:38.610]                   NAME <- NAMES[[kk]]
[13:22:38.610]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.610]                     next
[13:22:38.610]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.610]                 }
[13:22:38.610]                 if (length(args) > 0) 
[13:22:38.610]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.610]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.610]             }
[13:22:38.610]             else {
[13:22:38.610]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.610]             }
[13:22:38.610]             {
[13:22:38.610]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.610]                   0L) {
[13:22:38.610]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.610]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.610]                   base::options(opts)
[13:22:38.610]                 }
[13:22:38.610]                 {
[13:22:38.610]                   {
[13:22:38.610]                     NULL
[13:22:38.610]                     RNGkind("Mersenne-Twister")
[13:22:38.610]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.610]                       inherits = FALSE)
[13:22:38.610]                   }
[13:22:38.610]                   options(future.plan = NULL)
[13:22:38.610]                   if (is.na(NA_character_)) 
[13:22:38.610]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.610]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.610]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.610]                   {
[13:22:38.610]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.610]                     if (!future$lazy) 
[13:22:38.610]                       future <- run(future)
[13:22:38.610]                     invisible(future)
[13:22:38.610]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.610]                 }
[13:22:38.610]             }
[13:22:38.610]         }
[13:22:38.610]     })
[13:22:38.610]     if (TRUE) {
[13:22:38.610]         base::sink(type = "output", split = FALSE)
[13:22:38.610]         if (TRUE) {
[13:22:38.610]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.610]         }
[13:22:38.610]         else {
[13:22:38.610]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.610]         }
[13:22:38.610]         base::close(...future.stdout)
[13:22:38.610]         ...future.stdout <- NULL
[13:22:38.610]     }
[13:22:38.610]     ...future.result$conditions <- ...future.conditions
[13:22:38.610]     ...future.result$finished <- base::Sys.time()
[13:22:38.610]     ...future.result
[13:22:38.610] }
[13:22:38.612] assign_globals() ...
[13:22:38.612] List of 2
[13:22:38.612]  $ x: int [1:2] 1 2
[13:22:38.612]  $ y: num 3
[13:22:38.612]  - attr(*, "where")=List of 2
[13:22:38.612]   ..$ x:<environment: R_EmptyEnv> 
[13:22:38.612]   ..$ y:<environment: R_EmptyEnv> 
[13:22:38.612]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.612]  - attr(*, "resolved")= logi FALSE
[13:22:38.612]  - attr(*, "total_size")= num 112
[13:22:38.612]  - attr(*, "already-done")= logi TRUE
[13:22:38.615] - copied ‘x’ to environment
[13:22:38.615] - copied ‘y’ to environment
[13:22:38.615] assign_globals() ... done
[13:22:38.615] plan(): Setting new future strategy stack:
[13:22:38.615] List of future strategies:
[13:22:38.615] 1. sequential:
[13:22:38.615]    - args: function (..., envir = parent.frame())
[13:22:38.615]    - tweaked: FALSE
[13:22:38.615]    - call: NULL
[13:22:38.616] plan(): nbrOfWorkers() = 1
[13:22:38.617] plan(): Setting new future strategy stack:
[13:22:38.617] List of future strategies:
[13:22:38.617] 1. sequential:
[13:22:38.617]    - args: function (..., envir = parent.frame())
[13:22:38.617]    - tweaked: FALSE
[13:22:38.617]    - call: plan(strategy, substitute = FALSE)
[13:22:38.617] plan(): nbrOfWorkers() = 1
[13:22:38.617] SequentialFuture started (and completed)
[13:22:38.617] - Launch lazy future ... done
[13:22:38.617] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'D' with plan('sequential') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5638929c45d8>
Arguments '...' exists: FALSE
[13:22:38.618] getGlobalsAndPackages() ...
[13:22:38.618] Searching for globals...
[13:22:38.620] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:22:38.620] Searching for globals ... DONE
[13:22:38.620] Resolving globals: FALSE
[13:22:38.620] Tweak future expression to call with '...' arguments ...
[13:22:38.620] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.621] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.621] - globals: [2] ‘x’, ‘y’
[13:22:38.621] 
[13:22:38.621] getGlobalsAndPackages() ... DONE
[13:22:38.621] run() for ‘Future’ ...
[13:22:38.622] - state: ‘created’
[13:22:38.622] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.622] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.622] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.622]   - Field: ‘label’
[13:22:38.622]   - Field: ‘local’
[13:22:38.622]   - Field: ‘owner’
[13:22:38.622]   - Field: ‘envir’
[13:22:38.623]   - Field: ‘packages’
[13:22:38.623]   - Field: ‘gc’
[13:22:38.623]   - Field: ‘conditions’
[13:22:38.623]   - Field: ‘expr’
[13:22:38.623]   - Field: ‘uuid’
[13:22:38.623]   - Field: ‘seed’
[13:22:38.623]   - Field: ‘version’
[13:22:38.623]   - Field: ‘result’
[13:22:38.623]   - Field: ‘asynchronous’
[13:22:38.623]   - Field: ‘calls’
[13:22:38.623]   - Field: ‘globals’
[13:22:38.624]   - Field: ‘stdout’
[13:22:38.624]   - Field: ‘earlySignal’
[13:22:38.624]   - Field: ‘lazy’
[13:22:38.624]   - Field: ‘state’
[13:22:38.624] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.624] - Launch lazy future ...
[13:22:38.624] Packages needed by the future expression (n = 0): <none>
[13:22:38.624] Packages needed by future strategies (n = 0): <none>
[13:22:38.625] {
[13:22:38.625]     {
[13:22:38.625]         {
[13:22:38.625]             ...future.startTime <- base::Sys.time()
[13:22:38.625]             {
[13:22:38.625]                 {
[13:22:38.625]                   {
[13:22:38.625]                     base::local({
[13:22:38.625]                       has_future <- base::requireNamespace("future", 
[13:22:38.625]                         quietly = TRUE)
[13:22:38.625]                       if (has_future) {
[13:22:38.625]                         ns <- base::getNamespace("future")
[13:22:38.625]                         version <- ns[[".package"]][["version"]]
[13:22:38.625]                         if (is.null(version)) 
[13:22:38.625]                           version <- utils::packageVersion("future")
[13:22:38.625]                       }
[13:22:38.625]                       else {
[13:22:38.625]                         version <- NULL
[13:22:38.625]                       }
[13:22:38.625]                       if (!has_future || version < "1.8.0") {
[13:22:38.625]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.625]                           "", base::R.version$version.string), 
[13:22:38.625]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.625]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.625]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.625]                             "release", "version")], collapse = " "), 
[13:22:38.625]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.625]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.625]                           info)
[13:22:38.625]                         info <- base::paste(info, collapse = "; ")
[13:22:38.625]                         if (!has_future) {
[13:22:38.625]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.625]                             info)
[13:22:38.625]                         }
[13:22:38.625]                         else {
[13:22:38.625]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.625]                             info, version)
[13:22:38.625]                         }
[13:22:38.625]                         base::stop(msg)
[13:22:38.625]                       }
[13:22:38.625]                     })
[13:22:38.625]                   }
[13:22:38.625]                   options(future.plan = NULL)
[13:22:38.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.625]                 }
[13:22:38.625]                 ...future.workdir <- getwd()
[13:22:38.625]             }
[13:22:38.625]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.625]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.625]         }
[13:22:38.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.625]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.625]             base::names(...future.oldOptions))
[13:22:38.625]     }
[13:22:38.625]     if (FALSE) {
[13:22:38.625]     }
[13:22:38.625]     else {
[13:22:38.625]         if (TRUE) {
[13:22:38.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.625]                 open = "w")
[13:22:38.625]         }
[13:22:38.625]         else {
[13:22:38.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.625]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.625]         }
[13:22:38.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.625]             base::sink(type = "output", split = FALSE)
[13:22:38.625]             base::close(...future.stdout)
[13:22:38.625]         }, add = TRUE)
[13:22:38.625]     }
[13:22:38.625]     ...future.frame <- base::sys.nframe()
[13:22:38.625]     ...future.conditions <- base::list()
[13:22:38.625]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.625]     if (FALSE) {
[13:22:38.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.625]     }
[13:22:38.625]     ...future.result <- base::tryCatch({
[13:22:38.625]         base::withCallingHandlers({
[13:22:38.625]             ...future.value <- base::withVisible(base::local({
[13:22:38.625]                 sum(x, y, ...)
[13:22:38.625]             }))
[13:22:38.625]             future::FutureResult(value = ...future.value$value, 
[13:22:38.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.625]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.625]                     ...future.globalenv.names))
[13:22:38.625]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.625]         }, condition = base::local({
[13:22:38.625]             c <- base::c
[13:22:38.625]             inherits <- base::inherits
[13:22:38.625]             invokeRestart <- base::invokeRestart
[13:22:38.625]             length <- base::length
[13:22:38.625]             list <- base::list
[13:22:38.625]             seq.int <- base::seq.int
[13:22:38.625]             signalCondition <- base::signalCondition
[13:22:38.625]             sys.calls <- base::sys.calls
[13:22:38.625]             `[[` <- base::`[[`
[13:22:38.625]             `+` <- base::`+`
[13:22:38.625]             `<<-` <- base::`<<-`
[13:22:38.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.625]                   3L)]
[13:22:38.625]             }
[13:22:38.625]             function(cond) {
[13:22:38.625]                 is_error <- inherits(cond, "error")
[13:22:38.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.625]                   NULL)
[13:22:38.625]                 if (is_error) {
[13:22:38.625]                   sessionInformation <- function() {
[13:22:38.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.625]                       search = base::search(), system = base::Sys.info())
[13:22:38.625]                   }
[13:22:38.625]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.625]                     cond$call), session = sessionInformation(), 
[13:22:38.625]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.625]                   signalCondition(cond)
[13:22:38.625]                 }
[13:22:38.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.625]                 "immediateCondition"))) {
[13:22:38.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.625]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.625]                   if (TRUE && !signal) {
[13:22:38.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.625]                     {
[13:22:38.625]                       inherits <- base::inherits
[13:22:38.625]                       invokeRestart <- base::invokeRestart
[13:22:38.625]                       is.null <- base::is.null
[13:22:38.625]                       muffled <- FALSE
[13:22:38.625]                       if (inherits(cond, "message")) {
[13:22:38.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.625]                         if (muffled) 
[13:22:38.625]                           invokeRestart("muffleMessage")
[13:22:38.625]                       }
[13:22:38.625]                       else if (inherits(cond, "warning")) {
[13:22:38.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.625]                         if (muffled) 
[13:22:38.625]                           invokeRestart("muffleWarning")
[13:22:38.625]                       }
[13:22:38.625]                       else if (inherits(cond, "condition")) {
[13:22:38.625]                         if (!is.null(pattern)) {
[13:22:38.625]                           computeRestarts <- base::computeRestarts
[13:22:38.625]                           grepl <- base::grepl
[13:22:38.625]                           restarts <- computeRestarts(cond)
[13:22:38.625]                           for (restart in restarts) {
[13:22:38.625]                             name <- restart$name
[13:22:38.625]                             if (is.null(name)) 
[13:22:38.625]                               next
[13:22:38.625]                             if (!grepl(pattern, name)) 
[13:22:38.625]                               next
[13:22:38.625]                             invokeRestart(restart)
[13:22:38.625]                             muffled <- TRUE
[13:22:38.625]                             break
[13:22:38.625]                           }
[13:22:38.625]                         }
[13:22:38.625]                       }
[13:22:38.625]                       invisible(muffled)
[13:22:38.625]                     }
[13:22:38.625]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.625]                   }
[13:22:38.625]                 }
[13:22:38.625]                 else {
[13:22:38.625]                   if (TRUE) {
[13:22:38.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.625]                     {
[13:22:38.625]                       inherits <- base::inherits
[13:22:38.625]                       invokeRestart <- base::invokeRestart
[13:22:38.625]                       is.null <- base::is.null
[13:22:38.625]                       muffled <- FALSE
[13:22:38.625]                       if (inherits(cond, "message")) {
[13:22:38.625]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.625]                         if (muffled) 
[13:22:38.625]                           invokeRestart("muffleMessage")
[13:22:38.625]                       }
[13:22:38.625]                       else if (inherits(cond, "warning")) {
[13:22:38.625]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.625]                         if (muffled) 
[13:22:38.625]                           invokeRestart("muffleWarning")
[13:22:38.625]                       }
[13:22:38.625]                       else if (inherits(cond, "condition")) {
[13:22:38.625]                         if (!is.null(pattern)) {
[13:22:38.625]                           computeRestarts <- base::computeRestarts
[13:22:38.625]                           grepl <- base::grepl
[13:22:38.625]                           restarts <- computeRestarts(cond)
[13:22:38.625]                           for (restart in restarts) {
[13:22:38.625]                             name <- restart$name
[13:22:38.625]                             if (is.null(name)) 
[13:22:38.625]                               next
[13:22:38.625]                             if (!grepl(pattern, name)) 
[13:22:38.625]                               next
[13:22:38.625]                             invokeRestart(restart)
[13:22:38.625]                             muffled <- TRUE
[13:22:38.625]                             break
[13:22:38.625]                           }
[13:22:38.625]                         }
[13:22:38.625]                       }
[13:22:38.625]                       invisible(muffled)
[13:22:38.625]                     }
[13:22:38.625]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.625]                   }
[13:22:38.625]                 }
[13:22:38.625]             }
[13:22:38.625]         }))
[13:22:38.625]     }, error = function(ex) {
[13:22:38.625]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.625]                 ...future.rng), started = ...future.startTime, 
[13:22:38.625]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.625]             version = "1.8"), class = "FutureResult")
[13:22:38.625]     }, finally = {
[13:22:38.625]         if (!identical(...future.workdir, getwd())) 
[13:22:38.625]             setwd(...future.workdir)
[13:22:38.625]         {
[13:22:38.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.625]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.625]             }
[13:22:38.625]             base::options(...future.oldOptions)
[13:22:38.625]             if (.Platform$OS.type == "windows") {
[13:22:38.625]                 old_names <- names(...future.oldEnvVars)
[13:22:38.625]                 envs <- base::Sys.getenv()
[13:22:38.625]                 names <- names(envs)
[13:22:38.625]                 common <- intersect(names, old_names)
[13:22:38.625]                 added <- setdiff(names, old_names)
[13:22:38.625]                 removed <- setdiff(old_names, names)
[13:22:38.625]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.625]                   envs[common]]
[13:22:38.625]                 NAMES <- toupper(changed)
[13:22:38.625]                 args <- list()
[13:22:38.625]                 for (kk in seq_along(NAMES)) {
[13:22:38.625]                   name <- changed[[kk]]
[13:22:38.625]                   NAME <- NAMES[[kk]]
[13:22:38.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.625]                     next
[13:22:38.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.625]                 }
[13:22:38.625]                 NAMES <- toupper(added)
[13:22:38.625]                 for (kk in seq_along(NAMES)) {
[13:22:38.625]                   name <- added[[kk]]
[13:22:38.625]                   NAME <- NAMES[[kk]]
[13:22:38.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.625]                     next
[13:22:38.625]                   args[[name]] <- ""
[13:22:38.625]                 }
[13:22:38.625]                 NAMES <- toupper(removed)
[13:22:38.625]                 for (kk in seq_along(NAMES)) {
[13:22:38.625]                   name <- removed[[kk]]
[13:22:38.625]                   NAME <- NAMES[[kk]]
[13:22:38.625]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.625]                     next
[13:22:38.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.625]                 }
[13:22:38.625]                 if (length(args) > 0) 
[13:22:38.625]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.625]             }
[13:22:38.625]             else {
[13:22:38.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.625]             }
[13:22:38.625]             {
[13:22:38.625]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.625]                   0L) {
[13:22:38.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.625]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.625]                   base::options(opts)
[13:22:38.625]                 }
[13:22:38.625]                 {
[13:22:38.625]                   {
[13:22:38.625]                     NULL
[13:22:38.625]                     RNGkind("Mersenne-Twister")
[13:22:38.625]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.625]                       inherits = FALSE)
[13:22:38.625]                   }
[13:22:38.625]                   options(future.plan = NULL)
[13:22:38.625]                   if (is.na(NA_character_)) 
[13:22:38.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.625]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.625]                   {
[13:22:38.625]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.625]                     if (!future$lazy) 
[13:22:38.625]                       future <- run(future)
[13:22:38.625]                     invisible(future)
[13:22:38.625]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.625]                 }
[13:22:38.625]             }
[13:22:38.625]         }
[13:22:38.625]     })
[13:22:38.625]     if (TRUE) {
[13:22:38.625]         base::sink(type = "output", split = FALSE)
[13:22:38.625]         if (TRUE) {
[13:22:38.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.625]         }
[13:22:38.625]         else {
[13:22:38.625]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.625]         }
[13:22:38.625]         base::close(...future.stdout)
[13:22:38.625]         ...future.stdout <- NULL
[13:22:38.625]     }
[13:22:38.625]     ...future.result$conditions <- ...future.conditions
[13:22:38.625]     ...future.result$finished <- base::Sys.time()
[13:22:38.625]     ...future.result
[13:22:38.625] }
[13:22:38.627] assign_globals() ...
[13:22:38.627] List of 2
[13:22:38.627]  $ x: int [1:2] 1 2
[13:22:38.627]  $ y: num 3
[13:22:38.627]  - attr(*, "where")=List of 2
[13:22:38.627]   ..$ x:<environment: R_EmptyEnv> 
[13:22:38.627]   ..$ y:<environment: R_EmptyEnv> 
[13:22:38.627]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.627]  - attr(*, "resolved")= logi FALSE
[13:22:38.627]  - attr(*, "total_size")= num 112
[13:22:38.627]  - attr(*, "already-done")= logi TRUE
[13:22:38.631] - copied ‘x’ to environment
[13:22:38.631] - copied ‘y’ to environment
[13:22:38.632] assign_globals() ... done
[13:22:38.632] plan(): Setting new future strategy stack:
[13:22:38.632] List of future strategies:
[13:22:38.632] 1. sequential:
[13:22:38.632]    - args: function (..., envir = parent.frame())
[13:22:38.632]    - tweaked: FALSE
[13:22:38.632]    - call: NULL
[13:22:38.632] plan(): nbrOfWorkers() = 1
[13:22:38.633] plan(): Setting new future strategy stack:
[13:22:38.633] List of future strategies:
[13:22:38.633] 1. sequential:
[13:22:38.633]    - args: function (..., envir = parent.frame())
[13:22:38.633]    - tweaked: FALSE
[13:22:38.633]    - call: plan(strategy, substitute = FALSE)
[13:22:38.634] plan(): nbrOfWorkers() = 1
[13:22:38.634] SequentialFuture started (and completed)
[13:22:38.634] signalConditions() ...
[13:22:38.634]  - include = ‘immediateCondition’
[13:22:38.634]  - exclude = 
[13:22:38.634]  - resignal = FALSE
[13:22:38.634]  - Number of conditions: 1
[13:22:38.634] signalConditions() ... done
[13:22:38.635] - Launch lazy future ... done
[13:22:38.635] run() for ‘SequentialFuture’ ... done
[13:22:38.635] signalConditions() ...
[13:22:38.635]  - include = ‘immediateCondition’
[13:22:38.635]  - exclude = 
[13:22:38.635]  - resignal = FALSE
[13:22:38.635]  - Number of conditions: 1
[13:22:38.635] signalConditions() ... done
[13:22:38.635] Future state: ‘finished’
[13:22:38.636] signalConditions() ...
[13:22:38.636]  - include = ‘condition’
[13:22:38.636]  - exclude = ‘immediateCondition’
[13:22:38.636]  - resignal = TRUE
[13:22:38.636]  - Number of conditions: 1
[13:22:38.636]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:22:38.636] signalConditions() ... done
Error in eval(quote({ : '...' used in an incorrect context
[1] "Error in eval(quote({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    sum(x, y, ...)}), new.env()): '...' used in an incorrect context>
** Sum function 'E' with plan('sequential') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x563891bc6568>
Arguments '...' exists: TRUE
[13:22:38.637] getGlobalsAndPackages() ...
[13:22:38.637] - globals passed as-is: [1] ‘...’
[13:22:38.637] Resolving globals: FALSE
[13:22:38.637] Tweak future expression to call with '...' arguments ...
[13:22:38.637] {
[13:22:38.637]     do.call(function(...) {
[13:22:38.637]         fcn <- function() sum(...)
[13:22:38.637]         fcn()
[13:22:38.637]     }, args = future.call.arguments)
[13:22:38.637] }
[13:22:38.638] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.638] The total size of the 1 globals is 112 bytes (112 bytes)
[13:22:38.638] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:22:38.638] - globals: [1] ‘future.call.arguments’
[13:22:38.639] 
[13:22:38.639] getGlobalsAndPackages() ... DONE
[13:22:38.639] run() for ‘Future’ ...
[13:22:38.639] - state: ‘created’
[13:22:38.639] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.639] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.639] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.640]   - Field: ‘label’
[13:22:38.640]   - Field: ‘local’
[13:22:38.640]   - Field: ‘owner’
[13:22:38.640]   - Field: ‘envir’
[13:22:38.640]   - Field: ‘packages’
[13:22:38.640]   - Field: ‘gc’
[13:22:38.640]   - Field: ‘conditions’
[13:22:38.640]   - Field: ‘expr’
[13:22:38.640]   - Field: ‘uuid’
[13:22:38.640]   - Field: ‘seed’
[13:22:38.641]   - Field: ‘version’
[13:22:38.641]   - Field: ‘result’
[13:22:38.641]   - Field: ‘asynchronous’
[13:22:38.641]   - Field: ‘calls’
[13:22:38.641]   - Field: ‘globals’
[13:22:38.641]   - Field: ‘stdout’
[13:22:38.641]   - Field: ‘earlySignal’
[13:22:38.641]   - Field: ‘lazy’
[13:22:38.641]   - Field: ‘state’
[13:22:38.641] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.641] - Launch lazy future ...
[13:22:38.642] Packages needed by the future expression (n = 0): <none>
[13:22:38.642] Packages needed by future strategies (n = 0): <none>
[13:22:38.642] {
[13:22:38.642]     {
[13:22:38.642]         {
[13:22:38.642]             ...future.startTime <- base::Sys.time()
[13:22:38.642]             {
[13:22:38.642]                 {
[13:22:38.642]                   {
[13:22:38.642]                     base::local({
[13:22:38.642]                       has_future <- base::requireNamespace("future", 
[13:22:38.642]                         quietly = TRUE)
[13:22:38.642]                       if (has_future) {
[13:22:38.642]                         ns <- base::getNamespace("future")
[13:22:38.642]                         version <- ns[[".package"]][["version"]]
[13:22:38.642]                         if (is.null(version)) 
[13:22:38.642]                           version <- utils::packageVersion("future")
[13:22:38.642]                       }
[13:22:38.642]                       else {
[13:22:38.642]                         version <- NULL
[13:22:38.642]                       }
[13:22:38.642]                       if (!has_future || version < "1.8.0") {
[13:22:38.642]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.642]                           "", base::R.version$version.string), 
[13:22:38.642]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.642]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.642]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.642]                             "release", "version")], collapse = " "), 
[13:22:38.642]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.642]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.642]                           info)
[13:22:38.642]                         info <- base::paste(info, collapse = "; ")
[13:22:38.642]                         if (!has_future) {
[13:22:38.642]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.642]                             info)
[13:22:38.642]                         }
[13:22:38.642]                         else {
[13:22:38.642]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.642]                             info, version)
[13:22:38.642]                         }
[13:22:38.642]                         base::stop(msg)
[13:22:38.642]                       }
[13:22:38.642]                     })
[13:22:38.642]                   }
[13:22:38.642]                   options(future.plan = NULL)
[13:22:38.642]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.642]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.642]                 }
[13:22:38.642]                 ...future.workdir <- getwd()
[13:22:38.642]             }
[13:22:38.642]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.642]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.642]         }
[13:22:38.642]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.642]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.642]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.642]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.642]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.642]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.642]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.642]             base::names(...future.oldOptions))
[13:22:38.642]     }
[13:22:38.642]     if (FALSE) {
[13:22:38.642]     }
[13:22:38.642]     else {
[13:22:38.642]         if (TRUE) {
[13:22:38.642]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.642]                 open = "w")
[13:22:38.642]         }
[13:22:38.642]         else {
[13:22:38.642]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.642]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.642]         }
[13:22:38.642]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.642]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.642]             base::sink(type = "output", split = FALSE)
[13:22:38.642]             base::close(...future.stdout)
[13:22:38.642]         }, add = TRUE)
[13:22:38.642]     }
[13:22:38.642]     ...future.frame <- base::sys.nframe()
[13:22:38.642]     ...future.conditions <- base::list()
[13:22:38.642]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.642]     if (FALSE) {
[13:22:38.642]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.642]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.642]     }
[13:22:38.642]     ...future.result <- base::tryCatch({
[13:22:38.642]         base::withCallingHandlers({
[13:22:38.642]             ...future.value <- base::withVisible(base::local({
[13:22:38.642]                 do.call(function(...) {
[13:22:38.642]                   fcn <- function() sum(...)
[13:22:38.642]                   fcn()
[13:22:38.642]                 }, args = future.call.arguments)
[13:22:38.642]             }))
[13:22:38.642]             future::FutureResult(value = ...future.value$value, 
[13:22:38.642]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.642]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.642]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.642]                     ...future.globalenv.names))
[13:22:38.642]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.642]         }, condition = base::local({
[13:22:38.642]             c <- base::c
[13:22:38.642]             inherits <- base::inherits
[13:22:38.642]             invokeRestart <- base::invokeRestart
[13:22:38.642]             length <- base::length
[13:22:38.642]             list <- base::list
[13:22:38.642]             seq.int <- base::seq.int
[13:22:38.642]             signalCondition <- base::signalCondition
[13:22:38.642]             sys.calls <- base::sys.calls
[13:22:38.642]             `[[` <- base::`[[`
[13:22:38.642]             `+` <- base::`+`
[13:22:38.642]             `<<-` <- base::`<<-`
[13:22:38.642]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.642]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.642]                   3L)]
[13:22:38.642]             }
[13:22:38.642]             function(cond) {
[13:22:38.642]                 is_error <- inherits(cond, "error")
[13:22:38.642]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.642]                   NULL)
[13:22:38.642]                 if (is_error) {
[13:22:38.642]                   sessionInformation <- function() {
[13:22:38.642]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.642]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.642]                       search = base::search(), system = base::Sys.info())
[13:22:38.642]                   }
[13:22:38.642]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.642]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.642]                     cond$call), session = sessionInformation(), 
[13:22:38.642]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.642]                   signalCondition(cond)
[13:22:38.642]                 }
[13:22:38.642]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.642]                 "immediateCondition"))) {
[13:22:38.642]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.642]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.642]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.642]                   if (TRUE && !signal) {
[13:22:38.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.642]                     {
[13:22:38.642]                       inherits <- base::inherits
[13:22:38.642]                       invokeRestart <- base::invokeRestart
[13:22:38.642]                       is.null <- base::is.null
[13:22:38.642]                       muffled <- FALSE
[13:22:38.642]                       if (inherits(cond, "message")) {
[13:22:38.642]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.642]                         if (muffled) 
[13:22:38.642]                           invokeRestart("muffleMessage")
[13:22:38.642]                       }
[13:22:38.642]                       else if (inherits(cond, "warning")) {
[13:22:38.642]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.642]                         if (muffled) 
[13:22:38.642]                           invokeRestart("muffleWarning")
[13:22:38.642]                       }
[13:22:38.642]                       else if (inherits(cond, "condition")) {
[13:22:38.642]                         if (!is.null(pattern)) {
[13:22:38.642]                           computeRestarts <- base::computeRestarts
[13:22:38.642]                           grepl <- base::grepl
[13:22:38.642]                           restarts <- computeRestarts(cond)
[13:22:38.642]                           for (restart in restarts) {
[13:22:38.642]                             name <- restart$name
[13:22:38.642]                             if (is.null(name)) 
[13:22:38.642]                               next
[13:22:38.642]                             if (!grepl(pattern, name)) 
[13:22:38.642]                               next
[13:22:38.642]                             invokeRestart(restart)
[13:22:38.642]                             muffled <- TRUE
[13:22:38.642]                             break
[13:22:38.642]                           }
[13:22:38.642]                         }
[13:22:38.642]                       }
[13:22:38.642]                       invisible(muffled)
[13:22:38.642]                     }
[13:22:38.642]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.642]                   }
[13:22:38.642]                 }
[13:22:38.642]                 else {
[13:22:38.642]                   if (TRUE) {
[13:22:38.642]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.642]                     {
[13:22:38.642]                       inherits <- base::inherits
[13:22:38.642]                       invokeRestart <- base::invokeRestart
[13:22:38.642]                       is.null <- base::is.null
[13:22:38.642]                       muffled <- FALSE
[13:22:38.642]                       if (inherits(cond, "message")) {
[13:22:38.642]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.642]                         if (muffled) 
[13:22:38.642]                           invokeRestart("muffleMessage")
[13:22:38.642]                       }
[13:22:38.642]                       else if (inherits(cond, "warning")) {
[13:22:38.642]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.642]                         if (muffled) 
[13:22:38.642]                           invokeRestart("muffleWarning")
[13:22:38.642]                       }
[13:22:38.642]                       else if (inherits(cond, "condition")) {
[13:22:38.642]                         if (!is.null(pattern)) {
[13:22:38.642]                           computeRestarts <- base::computeRestarts
[13:22:38.642]                           grepl <- base::grepl
[13:22:38.642]                           restarts <- computeRestarts(cond)
[13:22:38.642]                           for (restart in restarts) {
[13:22:38.642]                             name <- restart$name
[13:22:38.642]                             if (is.null(name)) 
[13:22:38.642]                               next
[13:22:38.642]                             if (!grepl(pattern, name)) 
[13:22:38.642]                               next
[13:22:38.642]                             invokeRestart(restart)
[13:22:38.642]                             muffled <- TRUE
[13:22:38.642]                             break
[13:22:38.642]                           }
[13:22:38.642]                         }
[13:22:38.642]                       }
[13:22:38.642]                       invisible(muffled)
[13:22:38.642]                     }
[13:22:38.642]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.642]                   }
[13:22:38.642]                 }
[13:22:38.642]             }
[13:22:38.642]         }))
[13:22:38.642]     }, error = function(ex) {
[13:22:38.642]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.642]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.642]                 ...future.rng), started = ...future.startTime, 
[13:22:38.642]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.642]             version = "1.8"), class = "FutureResult")
[13:22:38.642]     }, finally = {
[13:22:38.642]         if (!identical(...future.workdir, getwd())) 
[13:22:38.642]             setwd(...future.workdir)
[13:22:38.642]         {
[13:22:38.642]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.642]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.642]             }
[13:22:38.642]             base::options(...future.oldOptions)
[13:22:38.642]             if (.Platform$OS.type == "windows") {
[13:22:38.642]                 old_names <- names(...future.oldEnvVars)
[13:22:38.642]                 envs <- base::Sys.getenv()
[13:22:38.642]                 names <- names(envs)
[13:22:38.642]                 common <- intersect(names, old_names)
[13:22:38.642]                 added <- setdiff(names, old_names)
[13:22:38.642]                 removed <- setdiff(old_names, names)
[13:22:38.642]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.642]                   envs[common]]
[13:22:38.642]                 NAMES <- toupper(changed)
[13:22:38.642]                 args <- list()
[13:22:38.642]                 for (kk in seq_along(NAMES)) {
[13:22:38.642]                   name <- changed[[kk]]
[13:22:38.642]                   NAME <- NAMES[[kk]]
[13:22:38.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.642]                     next
[13:22:38.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.642]                 }
[13:22:38.642]                 NAMES <- toupper(added)
[13:22:38.642]                 for (kk in seq_along(NAMES)) {
[13:22:38.642]                   name <- added[[kk]]
[13:22:38.642]                   NAME <- NAMES[[kk]]
[13:22:38.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.642]                     next
[13:22:38.642]                   args[[name]] <- ""
[13:22:38.642]                 }
[13:22:38.642]                 NAMES <- toupper(removed)
[13:22:38.642]                 for (kk in seq_along(NAMES)) {
[13:22:38.642]                   name <- removed[[kk]]
[13:22:38.642]                   NAME <- NAMES[[kk]]
[13:22:38.642]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.642]                     next
[13:22:38.642]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.642]                 }
[13:22:38.642]                 if (length(args) > 0) 
[13:22:38.642]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.642]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.642]             }
[13:22:38.642]             else {
[13:22:38.642]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.642]             }
[13:22:38.642]             {
[13:22:38.642]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.642]                   0L) {
[13:22:38.642]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.642]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.642]                   base::options(opts)
[13:22:38.642]                 }
[13:22:38.642]                 {
[13:22:38.642]                   {
[13:22:38.642]                     NULL
[13:22:38.642]                     RNGkind("Mersenne-Twister")
[13:22:38.642]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.642]                       inherits = FALSE)
[13:22:38.642]                   }
[13:22:38.642]                   options(future.plan = NULL)
[13:22:38.642]                   if (is.na(NA_character_)) 
[13:22:38.642]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.642]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.642]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.642]                   {
[13:22:38.642]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.642]                     if (!future$lazy) 
[13:22:38.642]                       future <- run(future)
[13:22:38.642]                     invisible(future)
[13:22:38.642]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.642]                 }
[13:22:38.642]             }
[13:22:38.642]         }
[13:22:38.642]     })
[13:22:38.642]     if (TRUE) {
[13:22:38.642]         base::sink(type = "output", split = FALSE)
[13:22:38.642]         if (TRUE) {
[13:22:38.642]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.642]         }
[13:22:38.642]         else {
[13:22:38.642]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.642]         }
[13:22:38.642]         base::close(...future.stdout)
[13:22:38.642]         ...future.stdout <- NULL
[13:22:38.642]     }
[13:22:38.642]     ...future.result$conditions <- ...future.conditions
[13:22:38.642]     ...future.result$finished <- base::Sys.time()
[13:22:38.642]     ...future.result
[13:22:38.642] }
[13:22:38.644] assign_globals() ...
[13:22:38.644] List of 1
[13:22:38.644]  $ future.call.arguments:List of 2
[13:22:38.644]   ..$ : int [1:2] 1 2
[13:22:38.644]   ..$ : num 3
[13:22:38.644]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.644]  - attr(*, "where")=List of 1
[13:22:38.644]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.644]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.644]  - attr(*, "resolved")= logi FALSE
[13:22:38.644]  - attr(*, "total_size")= num 112
[13:22:38.644]  - attr(*, "already-done")= logi TRUE
[13:22:38.647] - copied ‘future.call.arguments’ to environment
[13:22:38.648] assign_globals() ... done
[13:22:38.648] plan(): Setting new future strategy stack:
[13:22:38.648] List of future strategies:
[13:22:38.648] 1. sequential:
[13:22:38.648]    - args: function (..., envir = parent.frame())
[13:22:38.648]    - tweaked: FALSE
[13:22:38.648]    - call: NULL
[13:22:38.648] plan(): nbrOfWorkers() = 1
[13:22:38.649] plan(): Setting new future strategy stack:
[13:22:38.649] List of future strategies:
[13:22:38.649] 1. sequential:
[13:22:38.649]    - args: function (..., envir = parent.frame())
[13:22:38.649]    - tweaked: FALSE
[13:22:38.649]    - call: plan(strategy, substitute = FALSE)
[13:22:38.650] plan(): nbrOfWorkers() = 1
[13:22:38.650] SequentialFuture started (and completed)
[13:22:38.650] - Launch lazy future ... done
[13:22:38.650] run() for ‘SequentialFuture’ ... done
[1] 6
** Sum function 'F' with plan('sequential') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x563890497800>
Using '...' in a formula
[13:22:38.651] getGlobalsAndPackages() ...
[13:22:38.651] Searching for globals...
[13:22:38.654] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[13:22:38.654] Searching for globals ... DONE
[13:22:38.654] Resolving globals: FALSE
[13:22:38.654] Tweak future expression to call with '...' arguments ...
[13:22:38.655] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:22:38.655] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.655] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:22:38.655] 
[13:22:38.656] getGlobalsAndPackages() ... DONE
[13:22:38.656] run() for ‘Future’ ...
[13:22:38.656] - state: ‘created’
[13:22:38.656] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[13:22:38.656] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[13:22:38.657] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[13:22:38.657]   - Field: ‘label’
[13:22:38.657]   - Field: ‘local’
[13:22:38.657]   - Field: ‘owner’
[13:22:38.657]   - Field: ‘envir’
[13:22:38.657]   - Field: ‘packages’
[13:22:38.657]   - Field: ‘gc’
[13:22:38.659]   - Field: ‘conditions’
[13:22:38.659]   - Field: ‘expr’
[13:22:38.659]   - Field: ‘uuid’
[13:22:38.659]   - Field: ‘seed’
[13:22:38.659]   - Field: ‘version’
[13:22:38.660]   - Field: ‘result’
[13:22:38.660]   - Field: ‘asynchronous’
[13:22:38.660]   - Field: ‘calls’
[13:22:38.660]   - Field: ‘globals’
[13:22:38.660]   - Field: ‘stdout’
[13:22:38.660]   - Field: ‘earlySignal’
[13:22:38.660]   - Field: ‘lazy’
[13:22:38.660]   - Field: ‘state’
[13:22:38.660] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[13:22:38.660] - Launch lazy future ...
[13:22:38.661] Packages needed by the future expression (n = 0): <none>
[13:22:38.661] Packages needed by future strategies (n = 0): <none>
[13:22:38.661] {
[13:22:38.661]     {
[13:22:38.661]         {
[13:22:38.661]             ...future.startTime <- base::Sys.time()
[13:22:38.661]             {
[13:22:38.661]                 {
[13:22:38.661]                   {
[13:22:38.661]                     base::local({
[13:22:38.661]                       has_future <- base::requireNamespace("future", 
[13:22:38.661]                         quietly = TRUE)
[13:22:38.661]                       if (has_future) {
[13:22:38.661]                         ns <- base::getNamespace("future")
[13:22:38.661]                         version <- ns[[".package"]][["version"]]
[13:22:38.661]                         if (is.null(version)) 
[13:22:38.661]                           version <- utils::packageVersion("future")
[13:22:38.661]                       }
[13:22:38.661]                       else {
[13:22:38.661]                         version <- NULL
[13:22:38.661]                       }
[13:22:38.661]                       if (!has_future || version < "1.8.0") {
[13:22:38.661]                         info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.661]                           "", base::R.version$version.string), 
[13:22:38.661]                           platform = base::sprintf("%s (%s-bit)", 
[13:22:38.661]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.661]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.661]                             "release", "version")], collapse = " "), 
[13:22:38.661]                           hostname = base::Sys.info()[["nodename"]])
[13:22:38.661]                         info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.661]                           info)
[13:22:38.661]                         info <- base::paste(info, collapse = "; ")
[13:22:38.661]                         if (!has_future) {
[13:22:38.661]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.661]                             info)
[13:22:38.661]                         }
[13:22:38.661]                         else {
[13:22:38.661]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.661]                             info, version)
[13:22:38.661]                         }
[13:22:38.661]                         base::stop(msg)
[13:22:38.661]                       }
[13:22:38.661]                     })
[13:22:38.661]                   }
[13:22:38.661]                   options(future.plan = NULL)
[13:22:38.661]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.661]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.661]                 }
[13:22:38.661]                 ...future.workdir <- getwd()
[13:22:38.661]             }
[13:22:38.661]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.661]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.661]         }
[13:22:38.661]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.661]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.661]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.661]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.661]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.661]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.661]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.661]             base::names(...future.oldOptions))
[13:22:38.661]     }
[13:22:38.661]     if (FALSE) {
[13:22:38.661]     }
[13:22:38.661]     else {
[13:22:38.661]         if (TRUE) {
[13:22:38.661]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.661]                 open = "w")
[13:22:38.661]         }
[13:22:38.661]         else {
[13:22:38.661]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.661]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.661]         }
[13:22:38.661]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.661]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.661]             base::sink(type = "output", split = FALSE)
[13:22:38.661]             base::close(...future.stdout)
[13:22:38.661]         }, add = TRUE)
[13:22:38.661]     }
[13:22:38.661]     ...future.frame <- base::sys.nframe()
[13:22:38.661]     ...future.conditions <- base::list()
[13:22:38.661]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.661]     if (FALSE) {
[13:22:38.661]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.661]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.661]     }
[13:22:38.661]     ...future.result <- base::tryCatch({
[13:22:38.661]         base::withCallingHandlers({
[13:22:38.661]             ...future.value <- base::withVisible(base::local(fcn(x, 
[13:22:38.661]                 y)))
[13:22:38.661]             future::FutureResult(value = ...future.value$value, 
[13:22:38.661]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.661]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.661]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.661]                     ...future.globalenv.names))
[13:22:38.661]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.661]         }, condition = base::local({
[13:22:38.661]             c <- base::c
[13:22:38.661]             inherits <- base::inherits
[13:22:38.661]             invokeRestart <- base::invokeRestart
[13:22:38.661]             length <- base::length
[13:22:38.661]             list <- base::list
[13:22:38.661]             seq.int <- base::seq.int
[13:22:38.661]             signalCondition <- base::signalCondition
[13:22:38.661]             sys.calls <- base::sys.calls
[13:22:38.661]             `[[` <- base::`[[`
[13:22:38.661]             `+` <- base::`+`
[13:22:38.661]             `<<-` <- base::`<<-`
[13:22:38.661]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.661]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.661]                   3L)]
[13:22:38.661]             }
[13:22:38.661]             function(cond) {
[13:22:38.661]                 is_error <- inherits(cond, "error")
[13:22:38.661]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.661]                   NULL)
[13:22:38.661]                 if (is_error) {
[13:22:38.661]                   sessionInformation <- function() {
[13:22:38.661]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.661]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.661]                       search = base::search(), system = base::Sys.info())
[13:22:38.661]                   }
[13:22:38.661]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.661]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.661]                     cond$call), session = sessionInformation(), 
[13:22:38.661]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.661]                   signalCondition(cond)
[13:22:38.661]                 }
[13:22:38.661]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.661]                 "immediateCondition"))) {
[13:22:38.661]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.661]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.661]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.661]                   if (TRUE && !signal) {
[13:22:38.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.661]                     {
[13:22:38.661]                       inherits <- base::inherits
[13:22:38.661]                       invokeRestart <- base::invokeRestart
[13:22:38.661]                       is.null <- base::is.null
[13:22:38.661]                       muffled <- FALSE
[13:22:38.661]                       if (inherits(cond, "message")) {
[13:22:38.661]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.661]                         if (muffled) 
[13:22:38.661]                           invokeRestart("muffleMessage")
[13:22:38.661]                       }
[13:22:38.661]                       else if (inherits(cond, "warning")) {
[13:22:38.661]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.661]                         if (muffled) 
[13:22:38.661]                           invokeRestart("muffleWarning")
[13:22:38.661]                       }
[13:22:38.661]                       else if (inherits(cond, "condition")) {
[13:22:38.661]                         if (!is.null(pattern)) {
[13:22:38.661]                           computeRestarts <- base::computeRestarts
[13:22:38.661]                           grepl <- base::grepl
[13:22:38.661]                           restarts <- computeRestarts(cond)
[13:22:38.661]                           for (restart in restarts) {
[13:22:38.661]                             name <- restart$name
[13:22:38.661]                             if (is.null(name)) 
[13:22:38.661]                               next
[13:22:38.661]                             if (!grepl(pattern, name)) 
[13:22:38.661]                               next
[13:22:38.661]                             invokeRestart(restart)
[13:22:38.661]                             muffled <- TRUE
[13:22:38.661]                             break
[13:22:38.661]                           }
[13:22:38.661]                         }
[13:22:38.661]                       }
[13:22:38.661]                       invisible(muffled)
[13:22:38.661]                     }
[13:22:38.661]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.661]                   }
[13:22:38.661]                 }
[13:22:38.661]                 else {
[13:22:38.661]                   if (TRUE) {
[13:22:38.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.661]                     {
[13:22:38.661]                       inherits <- base::inherits
[13:22:38.661]                       invokeRestart <- base::invokeRestart
[13:22:38.661]                       is.null <- base::is.null
[13:22:38.661]                       muffled <- FALSE
[13:22:38.661]                       if (inherits(cond, "message")) {
[13:22:38.661]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.661]                         if (muffled) 
[13:22:38.661]                           invokeRestart("muffleMessage")
[13:22:38.661]                       }
[13:22:38.661]                       else if (inherits(cond, "warning")) {
[13:22:38.661]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.661]                         if (muffled) 
[13:22:38.661]                           invokeRestart("muffleWarning")
[13:22:38.661]                       }
[13:22:38.661]                       else if (inherits(cond, "condition")) {
[13:22:38.661]                         if (!is.null(pattern)) {
[13:22:38.661]                           computeRestarts <- base::computeRestarts
[13:22:38.661]                           grepl <- base::grepl
[13:22:38.661]                           restarts <- computeRestarts(cond)
[13:22:38.661]                           for (restart in restarts) {
[13:22:38.661]                             name <- restart$name
[13:22:38.661]                             if (is.null(name)) 
[13:22:38.661]                               next
[13:22:38.661]                             if (!grepl(pattern, name)) 
[13:22:38.661]                               next
[13:22:38.661]                             invokeRestart(restart)
[13:22:38.661]                             muffled <- TRUE
[13:22:38.661]                             break
[13:22:38.661]                           }
[13:22:38.661]                         }
[13:22:38.661]                       }
[13:22:38.661]                       invisible(muffled)
[13:22:38.661]                     }
[13:22:38.661]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.661]                   }
[13:22:38.661]                 }
[13:22:38.661]             }
[13:22:38.661]         }))
[13:22:38.661]     }, error = function(ex) {
[13:22:38.661]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.661]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.661]                 ...future.rng), started = ...future.startTime, 
[13:22:38.661]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.661]             version = "1.8"), class = "FutureResult")
[13:22:38.661]     }, finally = {
[13:22:38.661]         if (!identical(...future.workdir, getwd())) 
[13:22:38.661]             setwd(...future.workdir)
[13:22:38.661]         {
[13:22:38.661]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.661]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.661]             }
[13:22:38.661]             base::options(...future.oldOptions)
[13:22:38.661]             if (.Platform$OS.type == "windows") {
[13:22:38.661]                 old_names <- names(...future.oldEnvVars)
[13:22:38.661]                 envs <- base::Sys.getenv()
[13:22:38.661]                 names <- names(envs)
[13:22:38.661]                 common <- intersect(names, old_names)
[13:22:38.661]                 added <- setdiff(names, old_names)
[13:22:38.661]                 removed <- setdiff(old_names, names)
[13:22:38.661]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.661]                   envs[common]]
[13:22:38.661]                 NAMES <- toupper(changed)
[13:22:38.661]                 args <- list()
[13:22:38.661]                 for (kk in seq_along(NAMES)) {
[13:22:38.661]                   name <- changed[[kk]]
[13:22:38.661]                   NAME <- NAMES[[kk]]
[13:22:38.661]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.661]                     next
[13:22:38.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.661]                 }
[13:22:38.661]                 NAMES <- toupper(added)
[13:22:38.661]                 for (kk in seq_along(NAMES)) {
[13:22:38.661]                   name <- added[[kk]]
[13:22:38.661]                   NAME <- NAMES[[kk]]
[13:22:38.661]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.661]                     next
[13:22:38.661]                   args[[name]] <- ""
[13:22:38.661]                 }
[13:22:38.661]                 NAMES <- toupper(removed)
[13:22:38.661]                 for (kk in seq_along(NAMES)) {
[13:22:38.661]                   name <- removed[[kk]]
[13:22:38.661]                   NAME <- NAMES[[kk]]
[13:22:38.661]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.661]                     next
[13:22:38.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.661]                 }
[13:22:38.661]                 if (length(args) > 0) 
[13:22:38.661]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.661]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.661]             }
[13:22:38.661]             else {
[13:22:38.661]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.661]             }
[13:22:38.661]             {
[13:22:38.661]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.661]                   0L) {
[13:22:38.661]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.661]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.661]                   base::options(opts)
[13:22:38.661]                 }
[13:22:38.661]                 {
[13:22:38.661]                   {
[13:22:38.661]                     NULL
[13:22:38.661]                     RNGkind("Mersenne-Twister")
[13:22:38.661]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[13:22:38.661]                       inherits = FALSE)
[13:22:38.661]                   }
[13:22:38.661]                   options(future.plan = NULL)
[13:22:38.661]                   if (is.na(NA_character_)) 
[13:22:38.661]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.661]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.661]                   future::plan(list(function (..., envir = parent.frame()) 
[13:22:38.661]                   {
[13:22:38.661]                     future <- SequentialFuture(..., envir = envir)
[13:22:38.661]                     if (!future$lazy) 
[13:22:38.661]                       future <- run(future)
[13:22:38.661]                     invisible(future)
[13:22:38.661]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.661]                 }
[13:22:38.661]             }
[13:22:38.661]         }
[13:22:38.661]     })
[13:22:38.661]     if (TRUE) {
[13:22:38.661]         base::sink(type = "output", split = FALSE)
[13:22:38.661]         if (TRUE) {
[13:22:38.661]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.661]         }
[13:22:38.661]         else {
[13:22:38.661]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.661]         }
[13:22:38.661]         base::close(...future.stdout)
[13:22:38.661]         ...future.stdout <- NULL
[13:22:38.661]     }
[13:22:38.661]     ...future.result$conditions <- ...future.conditions
[13:22:38.661]     ...future.result$finished <- base::Sys.time()
[13:22:38.661]     ...future.result
[13:22:38.661] }
[13:22:38.663] assign_globals() ...
[13:22:38.663] List of 3
[13:22:38.663]  $ fcn:function (x, y)  
[13:22:38.663]  $ x  : int [1:2] 1 2
[13:22:38.663]  $ y  : num 3
[13:22:38.663]  - attr(*, "where")=List of 3
[13:22:38.663]   ..$ fcn:<environment: R_EmptyEnv> 
[13:22:38.663]   ..$ x  :<environment: R_EmptyEnv> 
[13:22:38.663]   ..$ y  :<environment: R_EmptyEnv> 
[13:22:38.663]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.663]  - attr(*, "resolved")= logi FALSE
[13:22:38.663]  - attr(*, "total_size")= num 4280
[13:22:38.663]  - attr(*, "already-done")= logi TRUE
[13:22:38.667] - reassign environment for ‘fcn’
[13:22:38.667] - copied ‘fcn’ to environment
[13:22:38.667] - copied ‘x’ to environment
[13:22:38.667] - copied ‘y’ to environment
[13:22:38.667] assign_globals() ... done
[13:22:38.667] plan(): Setting new future strategy stack:
[13:22:38.668] List of future strategies:
[13:22:38.668] 1. sequential:
[13:22:38.668]    - args: function (..., envir = parent.frame())
[13:22:38.668]    - tweaked: FALSE
[13:22:38.668]    - call: NULL
[13:22:38.668] plan(): nbrOfWorkers() = 1
[13:22:38.669] plan(): Setting new future strategy stack:
[13:22:38.669] List of future strategies:
[13:22:38.669] 1. sequential:
[13:22:38.669]    - args: function (..., envir = parent.frame())
[13:22:38.669]    - tweaked: FALSE
[13:22:38.669]    - call: plan(strategy, substitute = FALSE)
[13:22:38.669] plan(): nbrOfWorkers() = 1
[13:22:38.669] SequentialFuture started (and completed)
[13:22:38.669] - Launch lazy future ... done
[13:22:38.670] run() for ‘SequentialFuture’ ... done
[1] 6
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** Global argument '...' ...
- plan('multicore') ...
[13:22:38.675] plan(): Setting new future strategy stack:
[13:22:38.675] List of future strategies:
[13:22:38.675] 1. multicore:
[13:22:38.675]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.675]    - tweaked: FALSE
[13:22:38.675]    - call: plan(strategy, substitute = FALSE)
[13:22:38.679] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multicore') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5638923bfab8>
Arguments '...' exists: TRUE
[13:22:38.680] getGlobalsAndPackages() ...
[13:22:38.680] Searching for globals...
[13:22:38.682] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:38.682] Searching for globals ... DONE
[13:22:38.682] Resolving globals: FALSE
[13:22:38.682] Tweak future expression to call with '...' arguments ...
[13:22:38.682] {
[13:22:38.682]     do.call(function(...) {
[13:22:38.682]         sum(x, ...)
[13:22:38.682]     }, args = future.call.arguments)
[13:22:38.682] }
[13:22:38.682] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.683] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.683] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:38.683] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:38.683] 
[13:22:38.683] getGlobalsAndPackages() ... DONE
[13:22:38.684] run() for ‘Future’ ...
[13:22:38.684] - state: ‘created’
[13:22:38.684] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.688] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.688] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.688]   - Field: ‘label’
[13:22:38.688]   - Field: ‘local’
[13:22:38.688]   - Field: ‘owner’
[13:22:38.689]   - Field: ‘envir’
[13:22:38.689]   - Field: ‘workers’
[13:22:38.689]   - Field: ‘packages’
[13:22:38.689]   - Field: ‘gc’
[13:22:38.689]   - Field: ‘job’
[13:22:38.689]   - Field: ‘conditions’
[13:22:38.689]   - Field: ‘expr’
[13:22:38.689]   - Field: ‘uuid’
[13:22:38.689]   - Field: ‘seed’
[13:22:38.689]   - Field: ‘version’
[13:22:38.690]   - Field: ‘result’
[13:22:38.690]   - Field: ‘asynchronous’
[13:22:38.690]   - Field: ‘calls’
[13:22:38.692]   - Field: ‘globals’
[13:22:38.692]   - Field: ‘stdout’
[13:22:38.692]   - Field: ‘earlySignal’
[13:22:38.692]   - Field: ‘lazy’
[13:22:38.692]   - Field: ‘state’
[13:22:38.692] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.692] - Launch lazy future ...
[13:22:38.693] Packages needed by the future expression (n = 0): <none>
[13:22:38.694] Packages needed by future strategies (n = 0): <none>
[13:22:38.694] {
[13:22:38.694]     {
[13:22:38.694]         {
[13:22:38.694]             ...future.startTime <- base::Sys.time()
[13:22:38.694]             {
[13:22:38.694]                 {
[13:22:38.694]                   {
[13:22:38.694]                     {
[13:22:38.694]                       base::local({
[13:22:38.694]                         has_future <- base::requireNamespace("future", 
[13:22:38.694]                           quietly = TRUE)
[13:22:38.694]                         if (has_future) {
[13:22:38.694]                           ns <- base::getNamespace("future")
[13:22:38.694]                           version <- ns[[".package"]][["version"]]
[13:22:38.694]                           if (is.null(version)) 
[13:22:38.694]                             version <- utils::packageVersion("future")
[13:22:38.694]                         }
[13:22:38.694]                         else {
[13:22:38.694]                           version <- NULL
[13:22:38.694]                         }
[13:22:38.694]                         if (!has_future || version < "1.8.0") {
[13:22:38.694]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.694]                             "", base::R.version$version.string), 
[13:22:38.694]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.694]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.694]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.694]                               "release", "version")], collapse = " "), 
[13:22:38.694]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.694]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.694]                             info)
[13:22:38.694]                           info <- base::paste(info, collapse = "; ")
[13:22:38.694]                           if (!has_future) {
[13:22:38.694]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.694]                               info)
[13:22:38.694]                           }
[13:22:38.694]                           else {
[13:22:38.694]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.694]                               info, version)
[13:22:38.694]                           }
[13:22:38.694]                           base::stop(msg)
[13:22:38.694]                         }
[13:22:38.694]                       })
[13:22:38.694]                     }
[13:22:38.694]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.694]                     base::options(mc.cores = 1L)
[13:22:38.694]                   }
[13:22:38.694]                   options(future.plan = NULL)
[13:22:38.694]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.694]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.694]                 }
[13:22:38.694]                 ...future.workdir <- getwd()
[13:22:38.694]             }
[13:22:38.694]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.694]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.694]         }
[13:22:38.694]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.694]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.694]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.694]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.694]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.694]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.694]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.694]             base::names(...future.oldOptions))
[13:22:38.694]     }
[13:22:38.694]     if (FALSE) {
[13:22:38.694]     }
[13:22:38.694]     else {
[13:22:38.694]         if (TRUE) {
[13:22:38.694]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.694]                 open = "w")
[13:22:38.694]         }
[13:22:38.694]         else {
[13:22:38.694]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.694]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.694]         }
[13:22:38.694]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.694]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.694]             base::sink(type = "output", split = FALSE)
[13:22:38.694]             base::close(...future.stdout)
[13:22:38.694]         }, add = TRUE)
[13:22:38.694]     }
[13:22:38.694]     ...future.frame <- base::sys.nframe()
[13:22:38.694]     ...future.conditions <- base::list()
[13:22:38.694]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.694]     if (FALSE) {
[13:22:38.694]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.694]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.694]     }
[13:22:38.694]     ...future.result <- base::tryCatch({
[13:22:38.694]         base::withCallingHandlers({
[13:22:38.694]             ...future.value <- base::withVisible(base::local({
[13:22:38.694]                 withCallingHandlers({
[13:22:38.694]                   {
[13:22:38.694]                     do.call(function(...) {
[13:22:38.694]                       sum(x, ...)
[13:22:38.694]                     }, args = future.call.arguments)
[13:22:38.694]                   }
[13:22:38.694]                 }, immediateCondition = function(cond) {
[13:22:38.694]                   save_rds <- function (object, pathname, ...) 
[13:22:38.694]                   {
[13:22:38.694]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.694]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.694]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.694]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.694]                         fi_tmp[["mtime"]])
[13:22:38.694]                     }
[13:22:38.694]                     tryCatch({
[13:22:38.694]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.694]                     }, error = function(ex) {
[13:22:38.694]                       msg <- conditionMessage(ex)
[13:22:38.694]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.694]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.694]                         fi_tmp[["mtime"]], msg)
[13:22:38.694]                       ex$message <- msg
[13:22:38.694]                       stop(ex)
[13:22:38.694]                     })
[13:22:38.694]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.694]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.694]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.694]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.694]                       fi <- file.info(pathname)
[13:22:38.694]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.694]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.694]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.694]                         fi[["size"]], fi[["mtime"]])
[13:22:38.694]                       stop(msg)
[13:22:38.694]                     }
[13:22:38.694]                     invisible(pathname)
[13:22:38.694]                   }
[13:22:38.694]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.694]                     rootPath = tempdir()) 
[13:22:38.694]                   {
[13:22:38.694]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.694]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.694]                       tmpdir = path, fileext = ".rds")
[13:22:38.694]                     save_rds(obj, file)
[13:22:38.694]                   }
[13:22:38.694]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.694]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.694]                   {
[13:22:38.694]                     inherits <- base::inherits
[13:22:38.694]                     invokeRestart <- base::invokeRestart
[13:22:38.694]                     is.null <- base::is.null
[13:22:38.694]                     muffled <- FALSE
[13:22:38.694]                     if (inherits(cond, "message")) {
[13:22:38.694]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.694]                       if (muffled) 
[13:22:38.694]                         invokeRestart("muffleMessage")
[13:22:38.694]                     }
[13:22:38.694]                     else if (inherits(cond, "warning")) {
[13:22:38.694]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.694]                       if (muffled) 
[13:22:38.694]                         invokeRestart("muffleWarning")
[13:22:38.694]                     }
[13:22:38.694]                     else if (inherits(cond, "condition")) {
[13:22:38.694]                       if (!is.null(pattern)) {
[13:22:38.694]                         computeRestarts <- base::computeRestarts
[13:22:38.694]                         grepl <- base::grepl
[13:22:38.694]                         restarts <- computeRestarts(cond)
[13:22:38.694]                         for (restart in restarts) {
[13:22:38.694]                           name <- restart$name
[13:22:38.694]                           if (is.null(name)) 
[13:22:38.694]                             next
[13:22:38.694]                           if (!grepl(pattern, name)) 
[13:22:38.694]                             next
[13:22:38.694]                           invokeRestart(restart)
[13:22:38.694]                           muffled <- TRUE
[13:22:38.694]                           break
[13:22:38.694]                         }
[13:22:38.694]                       }
[13:22:38.694]                     }
[13:22:38.694]                     invisible(muffled)
[13:22:38.694]                   }
[13:22:38.694]                   muffleCondition(cond)
[13:22:38.694]                 })
[13:22:38.694]             }))
[13:22:38.694]             future::FutureResult(value = ...future.value$value, 
[13:22:38.694]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.694]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.694]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.694]                     ...future.globalenv.names))
[13:22:38.694]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.694]         }, condition = base::local({
[13:22:38.694]             c <- base::c
[13:22:38.694]             inherits <- base::inherits
[13:22:38.694]             invokeRestart <- base::invokeRestart
[13:22:38.694]             length <- base::length
[13:22:38.694]             list <- base::list
[13:22:38.694]             seq.int <- base::seq.int
[13:22:38.694]             signalCondition <- base::signalCondition
[13:22:38.694]             sys.calls <- base::sys.calls
[13:22:38.694]             `[[` <- base::`[[`
[13:22:38.694]             `+` <- base::`+`
[13:22:38.694]             `<<-` <- base::`<<-`
[13:22:38.694]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.694]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.694]                   3L)]
[13:22:38.694]             }
[13:22:38.694]             function(cond) {
[13:22:38.694]                 is_error <- inherits(cond, "error")
[13:22:38.694]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.694]                   NULL)
[13:22:38.694]                 if (is_error) {
[13:22:38.694]                   sessionInformation <- function() {
[13:22:38.694]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.694]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.694]                       search = base::search(), system = base::Sys.info())
[13:22:38.694]                   }
[13:22:38.694]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.694]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.694]                     cond$call), session = sessionInformation(), 
[13:22:38.694]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.694]                   signalCondition(cond)
[13:22:38.694]                 }
[13:22:38.694]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.694]                 "immediateCondition"))) {
[13:22:38.694]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.694]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.694]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.694]                   if (TRUE && !signal) {
[13:22:38.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.694]                     {
[13:22:38.694]                       inherits <- base::inherits
[13:22:38.694]                       invokeRestart <- base::invokeRestart
[13:22:38.694]                       is.null <- base::is.null
[13:22:38.694]                       muffled <- FALSE
[13:22:38.694]                       if (inherits(cond, "message")) {
[13:22:38.694]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.694]                         if (muffled) 
[13:22:38.694]                           invokeRestart("muffleMessage")
[13:22:38.694]                       }
[13:22:38.694]                       else if (inherits(cond, "warning")) {
[13:22:38.694]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.694]                         if (muffled) 
[13:22:38.694]                           invokeRestart("muffleWarning")
[13:22:38.694]                       }
[13:22:38.694]                       else if (inherits(cond, "condition")) {
[13:22:38.694]                         if (!is.null(pattern)) {
[13:22:38.694]                           computeRestarts <- base::computeRestarts
[13:22:38.694]                           grepl <- base::grepl
[13:22:38.694]                           restarts <- computeRestarts(cond)
[13:22:38.694]                           for (restart in restarts) {
[13:22:38.694]                             name <- restart$name
[13:22:38.694]                             if (is.null(name)) 
[13:22:38.694]                               next
[13:22:38.694]                             if (!grepl(pattern, name)) 
[13:22:38.694]                               next
[13:22:38.694]                             invokeRestart(restart)
[13:22:38.694]                             muffled <- TRUE
[13:22:38.694]                             break
[13:22:38.694]                           }
[13:22:38.694]                         }
[13:22:38.694]                       }
[13:22:38.694]                       invisible(muffled)
[13:22:38.694]                     }
[13:22:38.694]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.694]                   }
[13:22:38.694]                 }
[13:22:38.694]                 else {
[13:22:38.694]                   if (TRUE) {
[13:22:38.694]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.694]                     {
[13:22:38.694]                       inherits <- base::inherits
[13:22:38.694]                       invokeRestart <- base::invokeRestart
[13:22:38.694]                       is.null <- base::is.null
[13:22:38.694]                       muffled <- FALSE
[13:22:38.694]                       if (inherits(cond, "message")) {
[13:22:38.694]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.694]                         if (muffled) 
[13:22:38.694]                           invokeRestart("muffleMessage")
[13:22:38.694]                       }
[13:22:38.694]                       else if (inherits(cond, "warning")) {
[13:22:38.694]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.694]                         if (muffled) 
[13:22:38.694]                           invokeRestart("muffleWarning")
[13:22:38.694]                       }
[13:22:38.694]                       else if (inherits(cond, "condition")) {
[13:22:38.694]                         if (!is.null(pattern)) {
[13:22:38.694]                           computeRestarts <- base::computeRestarts
[13:22:38.694]                           grepl <- base::grepl
[13:22:38.694]                           restarts <- computeRestarts(cond)
[13:22:38.694]                           for (restart in restarts) {
[13:22:38.694]                             name <- restart$name
[13:22:38.694]                             if (is.null(name)) 
[13:22:38.694]                               next
[13:22:38.694]                             if (!grepl(pattern, name)) 
[13:22:38.694]                               next
[13:22:38.694]                             invokeRestart(restart)
[13:22:38.694]                             muffled <- TRUE
[13:22:38.694]                             break
[13:22:38.694]                           }
[13:22:38.694]                         }
[13:22:38.694]                       }
[13:22:38.694]                       invisible(muffled)
[13:22:38.694]                     }
[13:22:38.694]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.694]                   }
[13:22:38.694]                 }
[13:22:38.694]             }
[13:22:38.694]         }))
[13:22:38.694]     }, error = function(ex) {
[13:22:38.694]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.694]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.694]                 ...future.rng), started = ...future.startTime, 
[13:22:38.694]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.694]             version = "1.8"), class = "FutureResult")
[13:22:38.694]     }, finally = {
[13:22:38.694]         if (!identical(...future.workdir, getwd())) 
[13:22:38.694]             setwd(...future.workdir)
[13:22:38.694]         {
[13:22:38.694]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.694]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.694]             }
[13:22:38.694]             base::options(...future.oldOptions)
[13:22:38.694]             if (.Platform$OS.type == "windows") {
[13:22:38.694]                 old_names <- names(...future.oldEnvVars)
[13:22:38.694]                 envs <- base::Sys.getenv()
[13:22:38.694]                 names <- names(envs)
[13:22:38.694]                 common <- intersect(names, old_names)
[13:22:38.694]                 added <- setdiff(names, old_names)
[13:22:38.694]                 removed <- setdiff(old_names, names)
[13:22:38.694]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.694]                   envs[common]]
[13:22:38.694]                 NAMES <- toupper(changed)
[13:22:38.694]                 args <- list()
[13:22:38.694]                 for (kk in seq_along(NAMES)) {
[13:22:38.694]                   name <- changed[[kk]]
[13:22:38.694]                   NAME <- NAMES[[kk]]
[13:22:38.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.694]                     next
[13:22:38.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.694]                 }
[13:22:38.694]                 NAMES <- toupper(added)
[13:22:38.694]                 for (kk in seq_along(NAMES)) {
[13:22:38.694]                   name <- added[[kk]]
[13:22:38.694]                   NAME <- NAMES[[kk]]
[13:22:38.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.694]                     next
[13:22:38.694]                   args[[name]] <- ""
[13:22:38.694]                 }
[13:22:38.694]                 NAMES <- toupper(removed)
[13:22:38.694]                 for (kk in seq_along(NAMES)) {
[13:22:38.694]                   name <- removed[[kk]]
[13:22:38.694]                   NAME <- NAMES[[kk]]
[13:22:38.694]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.694]                     next
[13:22:38.694]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.694]                 }
[13:22:38.694]                 if (length(args) > 0) 
[13:22:38.694]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.694]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.694]             }
[13:22:38.694]             else {
[13:22:38.694]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.694]             }
[13:22:38.694]             {
[13:22:38.694]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.694]                   0L) {
[13:22:38.694]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.694]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.694]                   base::options(opts)
[13:22:38.694]                 }
[13:22:38.694]                 {
[13:22:38.694]                   {
[13:22:38.694]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.694]                     NULL
[13:22:38.694]                   }
[13:22:38.694]                   options(future.plan = NULL)
[13:22:38.694]                   if (is.na(NA_character_)) 
[13:22:38.694]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.694]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.694]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.694]                     envir = parent.frame()) 
[13:22:38.694]                   {
[13:22:38.694]                     default_workers <- missing(workers)
[13:22:38.694]                     if (is.function(workers)) 
[13:22:38.694]                       workers <- workers()
[13:22:38.694]                     workers <- structure(as.integer(workers), 
[13:22:38.694]                       class = class(workers))
[13:22:38.694]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.694]                       1L)
[13:22:38.694]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.694]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.694]                       if (default_workers) 
[13:22:38.694]                         supportsMulticore(warn = TRUE)
[13:22:38.694]                       return(sequential(..., envir = envir))
[13:22:38.694]                     }
[13:22:38.694]                     oopts <- options(mc.cores = workers)
[13:22:38.694]                     on.exit(options(oopts))
[13:22:38.694]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.694]                       envir = envir)
[13:22:38.694]                     if (!future$lazy) 
[13:22:38.694]                       future <- run(future)
[13:22:38.694]                     invisible(future)
[13:22:38.694]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.694]                 }
[13:22:38.694]             }
[13:22:38.694]         }
[13:22:38.694]     })
[13:22:38.694]     if (TRUE) {
[13:22:38.694]         base::sink(type = "output", split = FALSE)
[13:22:38.694]         if (TRUE) {
[13:22:38.694]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.694]         }
[13:22:38.694]         else {
[13:22:38.694]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.694]         }
[13:22:38.694]         base::close(...future.stdout)
[13:22:38.694]         ...future.stdout <- NULL
[13:22:38.694]     }
[13:22:38.694]     ...future.result$conditions <- ...future.conditions
[13:22:38.694]     ...future.result$finished <- base::Sys.time()
[13:22:38.694]     ...future.result
[13:22:38.694] }
[13:22:38.696] assign_globals() ...
[13:22:38.697] List of 2
[13:22:38.697]  $ x                    : int [1:2] 1 2
[13:22:38.697]  $ future.call.arguments:List of 1
[13:22:38.697]   ..$ : num 3
[13:22:38.697]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.697]  - attr(*, "where")=List of 2
[13:22:38.697]   ..$ x                    :<environment: R_EmptyEnv> 
[13:22:38.697]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.697]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.697]  - attr(*, "resolved")= logi FALSE
[13:22:38.697]  - attr(*, "total_size")= num 112
[13:22:38.697]  - attr(*, "already-done")= logi TRUE
[13:22:38.700] - copied ‘x’ to environment
[13:22:38.700] - copied ‘future.call.arguments’ to environment
[13:22:38.701] assign_globals() ... done
[13:22:38.701] requestCore(): workers = 2
[13:22:38.704] MulticoreFuture started
[13:22:38.704] - Launch lazy future ... done
[13:22:38.705] run() for ‘MulticoreFuture’ ... done
[13:22:38.705] plan(): Setting new future strategy stack:
[13:22:38.705] List of future strategies:
[13:22:38.705] 1. sequential:
[13:22:38.705]    - args: function (..., envir = parent.frame())
[13:22:38.705]    - tweaked: FALSE
[13:22:38.705]    - call: NULL
[13:22:38.706] plan(): nbrOfWorkers() = 1
[13:22:38.706] result() for MulticoreFuture ...
[13:22:38.708] plan(): Setting new future strategy stack:
[13:22:38.708] List of future strategies:
[13:22:38.708] 1. multicore:
[13:22:38.708]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.708]    - tweaked: FALSE
[13:22:38.708]    - call: plan(strategy, substitute = FALSE)
[13:22:38.714] plan(): nbrOfWorkers() = 2
[13:22:38.718] result() for MulticoreFuture ...
[13:22:38.719] result() for MulticoreFuture ... done
[13:22:38.719] result() for MulticoreFuture ... done
[13:22:38.719] result() for MulticoreFuture ...
[13:22:38.719] result() for MulticoreFuture ... done
[1] 6
** Sum function 'B' with plan('multicore') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x563892679f00>
Arguments '...' exists: TRUE
[13:22:38.720] getGlobalsAndPackages() ...
[13:22:38.720] Searching for globals...
[13:22:38.722] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:38.722] Searching for globals ... DONE
[13:22:38.722] Resolving globals: FALSE
[13:22:38.722] Tweak future expression to call with '...' arguments ...
[13:22:38.722] {
[13:22:38.722]     do.call(function(...) {
[13:22:38.722]         sum(x, ...)
[13:22:38.722]     }, args = future.call.arguments)
[13:22:38.722] }
[13:22:38.723] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.723] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.724] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:38.724] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:38.724] 
[13:22:38.724] getGlobalsAndPackages() ... DONE
[13:22:38.725] run() for ‘Future’ ...
[13:22:38.725] - state: ‘created’
[13:22:38.725] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.729] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.729] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.729]   - Field: ‘label’
[13:22:38.730]   - Field: ‘local’
[13:22:38.730]   - Field: ‘owner’
[13:22:38.730]   - Field: ‘envir’
[13:22:38.730]   - Field: ‘workers’
[13:22:38.730]   - Field: ‘packages’
[13:22:38.730]   - Field: ‘gc’
[13:22:38.730]   - Field: ‘job’
[13:22:38.730]   - Field: ‘conditions’
[13:22:38.731]   - Field: ‘expr’
[13:22:38.731]   - Field: ‘uuid’
[13:22:38.731]   - Field: ‘seed’
[13:22:38.731]   - Field: ‘version’
[13:22:38.731]   - Field: ‘result’
[13:22:38.731]   - Field: ‘asynchronous’
[13:22:38.731]   - Field: ‘calls’
[13:22:38.731]   - Field: ‘globals’
[13:22:38.731]   - Field: ‘stdout’
[13:22:38.732]   - Field: ‘earlySignal’
[13:22:38.732]   - Field: ‘lazy’
[13:22:38.732]   - Field: ‘state’
[13:22:38.732] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.732] - Launch lazy future ...
[13:22:38.732] Packages needed by the future expression (n = 0): <none>
[13:22:38.733] Packages needed by future strategies (n = 0): <none>
[13:22:38.733] {
[13:22:38.733]     {
[13:22:38.733]         {
[13:22:38.733]             ...future.startTime <- base::Sys.time()
[13:22:38.733]             {
[13:22:38.733]                 {
[13:22:38.733]                   {
[13:22:38.733]                     {
[13:22:38.733]                       base::local({
[13:22:38.733]                         has_future <- base::requireNamespace("future", 
[13:22:38.733]                           quietly = TRUE)
[13:22:38.733]                         if (has_future) {
[13:22:38.733]                           ns <- base::getNamespace("future")
[13:22:38.733]                           version <- ns[[".package"]][["version"]]
[13:22:38.733]                           if (is.null(version)) 
[13:22:38.733]                             version <- utils::packageVersion("future")
[13:22:38.733]                         }
[13:22:38.733]                         else {
[13:22:38.733]                           version <- NULL
[13:22:38.733]                         }
[13:22:38.733]                         if (!has_future || version < "1.8.0") {
[13:22:38.733]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.733]                             "", base::R.version$version.string), 
[13:22:38.733]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.733]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.733]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.733]                               "release", "version")], collapse = " "), 
[13:22:38.733]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.733]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.733]                             info)
[13:22:38.733]                           info <- base::paste(info, collapse = "; ")
[13:22:38.733]                           if (!has_future) {
[13:22:38.733]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.733]                               info)
[13:22:38.733]                           }
[13:22:38.733]                           else {
[13:22:38.733]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.733]                               info, version)
[13:22:38.733]                           }
[13:22:38.733]                           base::stop(msg)
[13:22:38.733]                         }
[13:22:38.733]                       })
[13:22:38.733]                     }
[13:22:38.733]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.733]                     base::options(mc.cores = 1L)
[13:22:38.733]                   }
[13:22:38.733]                   options(future.plan = NULL)
[13:22:38.733]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.733]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.733]                 }
[13:22:38.733]                 ...future.workdir <- getwd()
[13:22:38.733]             }
[13:22:38.733]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.733]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.733]         }
[13:22:38.733]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.733]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.733]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.733]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.733]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.733]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.733]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.733]             base::names(...future.oldOptions))
[13:22:38.733]     }
[13:22:38.733]     if (FALSE) {
[13:22:38.733]     }
[13:22:38.733]     else {
[13:22:38.733]         if (TRUE) {
[13:22:38.733]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.733]                 open = "w")
[13:22:38.733]         }
[13:22:38.733]         else {
[13:22:38.733]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.733]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.733]         }
[13:22:38.733]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.733]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.733]             base::sink(type = "output", split = FALSE)
[13:22:38.733]             base::close(...future.stdout)
[13:22:38.733]         }, add = TRUE)
[13:22:38.733]     }
[13:22:38.733]     ...future.frame <- base::sys.nframe()
[13:22:38.733]     ...future.conditions <- base::list()
[13:22:38.733]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.733]     if (FALSE) {
[13:22:38.733]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.733]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.733]     }
[13:22:38.733]     ...future.result <- base::tryCatch({
[13:22:38.733]         base::withCallingHandlers({
[13:22:38.733]             ...future.value <- base::withVisible(base::local({
[13:22:38.733]                 withCallingHandlers({
[13:22:38.733]                   {
[13:22:38.733]                     do.call(function(...) {
[13:22:38.733]                       sum(x, ...)
[13:22:38.733]                     }, args = future.call.arguments)
[13:22:38.733]                   }
[13:22:38.733]                 }, immediateCondition = function(cond) {
[13:22:38.733]                   save_rds <- function (object, pathname, ...) 
[13:22:38.733]                   {
[13:22:38.733]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.733]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.733]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.733]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.733]                         fi_tmp[["mtime"]])
[13:22:38.733]                     }
[13:22:38.733]                     tryCatch({
[13:22:38.733]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.733]                     }, error = function(ex) {
[13:22:38.733]                       msg <- conditionMessage(ex)
[13:22:38.733]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.733]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.733]                         fi_tmp[["mtime"]], msg)
[13:22:38.733]                       ex$message <- msg
[13:22:38.733]                       stop(ex)
[13:22:38.733]                     })
[13:22:38.733]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.733]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.733]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.733]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.733]                       fi <- file.info(pathname)
[13:22:38.733]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.733]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.733]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.733]                         fi[["size"]], fi[["mtime"]])
[13:22:38.733]                       stop(msg)
[13:22:38.733]                     }
[13:22:38.733]                     invisible(pathname)
[13:22:38.733]                   }
[13:22:38.733]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.733]                     rootPath = tempdir()) 
[13:22:38.733]                   {
[13:22:38.733]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.733]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.733]                       tmpdir = path, fileext = ".rds")
[13:22:38.733]                     save_rds(obj, file)
[13:22:38.733]                   }
[13:22:38.733]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.733]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.733]                   {
[13:22:38.733]                     inherits <- base::inherits
[13:22:38.733]                     invokeRestart <- base::invokeRestart
[13:22:38.733]                     is.null <- base::is.null
[13:22:38.733]                     muffled <- FALSE
[13:22:38.733]                     if (inherits(cond, "message")) {
[13:22:38.733]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.733]                       if (muffled) 
[13:22:38.733]                         invokeRestart("muffleMessage")
[13:22:38.733]                     }
[13:22:38.733]                     else if (inherits(cond, "warning")) {
[13:22:38.733]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.733]                       if (muffled) 
[13:22:38.733]                         invokeRestart("muffleWarning")
[13:22:38.733]                     }
[13:22:38.733]                     else if (inherits(cond, "condition")) {
[13:22:38.733]                       if (!is.null(pattern)) {
[13:22:38.733]                         computeRestarts <- base::computeRestarts
[13:22:38.733]                         grepl <- base::grepl
[13:22:38.733]                         restarts <- computeRestarts(cond)
[13:22:38.733]                         for (restart in restarts) {
[13:22:38.733]                           name <- restart$name
[13:22:38.733]                           if (is.null(name)) 
[13:22:38.733]                             next
[13:22:38.733]                           if (!grepl(pattern, name)) 
[13:22:38.733]                             next
[13:22:38.733]                           invokeRestart(restart)
[13:22:38.733]                           muffled <- TRUE
[13:22:38.733]                           break
[13:22:38.733]                         }
[13:22:38.733]                       }
[13:22:38.733]                     }
[13:22:38.733]                     invisible(muffled)
[13:22:38.733]                   }
[13:22:38.733]                   muffleCondition(cond)
[13:22:38.733]                 })
[13:22:38.733]             }))
[13:22:38.733]             future::FutureResult(value = ...future.value$value, 
[13:22:38.733]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.733]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.733]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.733]                     ...future.globalenv.names))
[13:22:38.733]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.733]         }, condition = base::local({
[13:22:38.733]             c <- base::c
[13:22:38.733]             inherits <- base::inherits
[13:22:38.733]             invokeRestart <- base::invokeRestart
[13:22:38.733]             length <- base::length
[13:22:38.733]             list <- base::list
[13:22:38.733]             seq.int <- base::seq.int
[13:22:38.733]             signalCondition <- base::signalCondition
[13:22:38.733]             sys.calls <- base::sys.calls
[13:22:38.733]             `[[` <- base::`[[`
[13:22:38.733]             `+` <- base::`+`
[13:22:38.733]             `<<-` <- base::`<<-`
[13:22:38.733]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.733]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.733]                   3L)]
[13:22:38.733]             }
[13:22:38.733]             function(cond) {
[13:22:38.733]                 is_error <- inherits(cond, "error")
[13:22:38.733]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.733]                   NULL)
[13:22:38.733]                 if (is_error) {
[13:22:38.733]                   sessionInformation <- function() {
[13:22:38.733]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.733]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.733]                       search = base::search(), system = base::Sys.info())
[13:22:38.733]                   }
[13:22:38.733]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.733]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.733]                     cond$call), session = sessionInformation(), 
[13:22:38.733]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.733]                   signalCondition(cond)
[13:22:38.733]                 }
[13:22:38.733]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.733]                 "immediateCondition"))) {
[13:22:38.733]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.733]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.733]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.733]                   if (TRUE && !signal) {
[13:22:38.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.733]                     {
[13:22:38.733]                       inherits <- base::inherits
[13:22:38.733]                       invokeRestart <- base::invokeRestart
[13:22:38.733]                       is.null <- base::is.null
[13:22:38.733]                       muffled <- FALSE
[13:22:38.733]                       if (inherits(cond, "message")) {
[13:22:38.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.733]                         if (muffled) 
[13:22:38.733]                           invokeRestart("muffleMessage")
[13:22:38.733]                       }
[13:22:38.733]                       else if (inherits(cond, "warning")) {
[13:22:38.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.733]                         if (muffled) 
[13:22:38.733]                           invokeRestart("muffleWarning")
[13:22:38.733]                       }
[13:22:38.733]                       else if (inherits(cond, "condition")) {
[13:22:38.733]                         if (!is.null(pattern)) {
[13:22:38.733]                           computeRestarts <- base::computeRestarts
[13:22:38.733]                           grepl <- base::grepl
[13:22:38.733]                           restarts <- computeRestarts(cond)
[13:22:38.733]                           for (restart in restarts) {
[13:22:38.733]                             name <- restart$name
[13:22:38.733]                             if (is.null(name)) 
[13:22:38.733]                               next
[13:22:38.733]                             if (!grepl(pattern, name)) 
[13:22:38.733]                               next
[13:22:38.733]                             invokeRestart(restart)
[13:22:38.733]                             muffled <- TRUE
[13:22:38.733]                             break
[13:22:38.733]                           }
[13:22:38.733]                         }
[13:22:38.733]                       }
[13:22:38.733]                       invisible(muffled)
[13:22:38.733]                     }
[13:22:38.733]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.733]                   }
[13:22:38.733]                 }
[13:22:38.733]                 else {
[13:22:38.733]                   if (TRUE) {
[13:22:38.733]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.733]                     {
[13:22:38.733]                       inherits <- base::inherits
[13:22:38.733]                       invokeRestart <- base::invokeRestart
[13:22:38.733]                       is.null <- base::is.null
[13:22:38.733]                       muffled <- FALSE
[13:22:38.733]                       if (inherits(cond, "message")) {
[13:22:38.733]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.733]                         if (muffled) 
[13:22:38.733]                           invokeRestart("muffleMessage")
[13:22:38.733]                       }
[13:22:38.733]                       else if (inherits(cond, "warning")) {
[13:22:38.733]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.733]                         if (muffled) 
[13:22:38.733]                           invokeRestart("muffleWarning")
[13:22:38.733]                       }
[13:22:38.733]                       else if (inherits(cond, "condition")) {
[13:22:38.733]                         if (!is.null(pattern)) {
[13:22:38.733]                           computeRestarts <- base::computeRestarts
[13:22:38.733]                           grepl <- base::grepl
[13:22:38.733]                           restarts <- computeRestarts(cond)
[13:22:38.733]                           for (restart in restarts) {
[13:22:38.733]                             name <- restart$name
[13:22:38.733]                             if (is.null(name)) 
[13:22:38.733]                               next
[13:22:38.733]                             if (!grepl(pattern, name)) 
[13:22:38.733]                               next
[13:22:38.733]                             invokeRestart(restart)
[13:22:38.733]                             muffled <- TRUE
[13:22:38.733]                             break
[13:22:38.733]                           }
[13:22:38.733]                         }
[13:22:38.733]                       }
[13:22:38.733]                       invisible(muffled)
[13:22:38.733]                     }
[13:22:38.733]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.733]                   }
[13:22:38.733]                 }
[13:22:38.733]             }
[13:22:38.733]         }))
[13:22:38.733]     }, error = function(ex) {
[13:22:38.733]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.733]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.733]                 ...future.rng), started = ...future.startTime, 
[13:22:38.733]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.733]             version = "1.8"), class = "FutureResult")
[13:22:38.733]     }, finally = {
[13:22:38.733]         if (!identical(...future.workdir, getwd())) 
[13:22:38.733]             setwd(...future.workdir)
[13:22:38.733]         {
[13:22:38.733]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.733]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.733]             }
[13:22:38.733]             base::options(...future.oldOptions)
[13:22:38.733]             if (.Platform$OS.type == "windows") {
[13:22:38.733]                 old_names <- names(...future.oldEnvVars)
[13:22:38.733]                 envs <- base::Sys.getenv()
[13:22:38.733]                 names <- names(envs)
[13:22:38.733]                 common <- intersect(names, old_names)
[13:22:38.733]                 added <- setdiff(names, old_names)
[13:22:38.733]                 removed <- setdiff(old_names, names)
[13:22:38.733]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.733]                   envs[common]]
[13:22:38.733]                 NAMES <- toupper(changed)
[13:22:38.733]                 args <- list()
[13:22:38.733]                 for (kk in seq_along(NAMES)) {
[13:22:38.733]                   name <- changed[[kk]]
[13:22:38.733]                   NAME <- NAMES[[kk]]
[13:22:38.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.733]                     next
[13:22:38.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.733]                 }
[13:22:38.733]                 NAMES <- toupper(added)
[13:22:38.733]                 for (kk in seq_along(NAMES)) {
[13:22:38.733]                   name <- added[[kk]]
[13:22:38.733]                   NAME <- NAMES[[kk]]
[13:22:38.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.733]                     next
[13:22:38.733]                   args[[name]] <- ""
[13:22:38.733]                 }
[13:22:38.733]                 NAMES <- toupper(removed)
[13:22:38.733]                 for (kk in seq_along(NAMES)) {
[13:22:38.733]                   name <- removed[[kk]]
[13:22:38.733]                   NAME <- NAMES[[kk]]
[13:22:38.733]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.733]                     next
[13:22:38.733]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.733]                 }
[13:22:38.733]                 if (length(args) > 0) 
[13:22:38.733]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.733]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.733]             }
[13:22:38.733]             else {
[13:22:38.733]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.733]             }
[13:22:38.733]             {
[13:22:38.733]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.733]                   0L) {
[13:22:38.733]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.733]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.733]                   base::options(opts)
[13:22:38.733]                 }
[13:22:38.733]                 {
[13:22:38.733]                   {
[13:22:38.733]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.733]                     NULL
[13:22:38.733]                   }
[13:22:38.733]                   options(future.plan = NULL)
[13:22:38.733]                   if (is.na(NA_character_)) 
[13:22:38.733]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.733]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.733]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.733]                     envir = parent.frame()) 
[13:22:38.733]                   {
[13:22:38.733]                     default_workers <- missing(workers)
[13:22:38.733]                     if (is.function(workers)) 
[13:22:38.733]                       workers <- workers()
[13:22:38.733]                     workers <- structure(as.integer(workers), 
[13:22:38.733]                       class = class(workers))
[13:22:38.733]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.733]                       1L)
[13:22:38.733]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.733]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.733]                       if (default_workers) 
[13:22:38.733]                         supportsMulticore(warn = TRUE)
[13:22:38.733]                       return(sequential(..., envir = envir))
[13:22:38.733]                     }
[13:22:38.733]                     oopts <- options(mc.cores = workers)
[13:22:38.733]                     on.exit(options(oopts))
[13:22:38.733]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.733]                       envir = envir)
[13:22:38.733]                     if (!future$lazy) 
[13:22:38.733]                       future <- run(future)
[13:22:38.733]                     invisible(future)
[13:22:38.733]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.733]                 }
[13:22:38.733]             }
[13:22:38.733]         }
[13:22:38.733]     })
[13:22:38.733]     if (TRUE) {
[13:22:38.733]         base::sink(type = "output", split = FALSE)
[13:22:38.733]         if (TRUE) {
[13:22:38.733]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.733]         }
[13:22:38.733]         else {
[13:22:38.733]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.733]         }
[13:22:38.733]         base::close(...future.stdout)
[13:22:38.733]         ...future.stdout <- NULL
[13:22:38.733]     }
[13:22:38.733]     ...future.result$conditions <- ...future.conditions
[13:22:38.733]     ...future.result$finished <- base::Sys.time()
[13:22:38.733]     ...future.result
[13:22:38.733] }
[13:22:38.736] assign_globals() ...
[13:22:38.736] List of 2
[13:22:38.736]  $ x                    : int [1:2] 1 2
[13:22:38.736]  $ future.call.arguments:List of 1
[13:22:38.736]   ..$ : num 3
[13:22:38.736]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.736]  - attr(*, "where")=List of 2
[13:22:38.736]   ..$ x                    :<environment: R_EmptyEnv> 
[13:22:38.736]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.736]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.736]  - attr(*, "resolved")= logi FALSE
[13:22:38.736]  - attr(*, "total_size")= num 112
[13:22:38.736]  - attr(*, "already-done")= logi TRUE
[13:22:38.740] - copied ‘x’ to environment
[13:22:38.740] - copied ‘future.call.arguments’ to environment
[13:22:38.740] assign_globals() ... done
[13:22:38.743] requestCore(): workers = 2
[13:22:38.746] MulticoreFuture started
[13:22:38.746] - Launch lazy future ... done
[13:22:38.747] plan(): Setting new future strategy stack:
[13:22:38.747] run() for ‘MulticoreFuture’ ... done
[13:22:38.747] result() for MulticoreFuture ...
[13:22:38.747] List of future strategies:
[13:22:38.747] 1. sequential:
[13:22:38.747]    - args: function (..., envir = parent.frame())
[13:22:38.747]    - tweaked: FALSE
[13:22:38.747]    - call: NULL
[13:22:38.748] plan(): nbrOfWorkers() = 1
[13:22:38.750] plan(): Setting new future strategy stack:
[13:22:38.751] List of future strategies:
[13:22:38.751] 1. multicore:
[13:22:38.751]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.751]    - tweaked: FALSE
[13:22:38.751]    - call: plan(strategy, substitute = FALSE)
[13:22:38.756] plan(): nbrOfWorkers() = 2
[13:22:38.757] result() for MulticoreFuture ...
[13:22:38.758] result() for MulticoreFuture ... done
[13:22:38.758] result() for MulticoreFuture ... done
[13:22:38.758] result() for MulticoreFuture ...
[13:22:38.758] result() for MulticoreFuture ... done
[1] 6
** Sum function 'C' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5638927daf00>
Arguments '...' exists: FALSE
[13:22:38.759] getGlobalsAndPackages() ...
[13:22:38.759] Searching for globals...
[13:22:38.761] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:22:38.761] Searching for globals ... DONE
[13:22:38.762] Resolving globals: FALSE
[13:22:38.762] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.763] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.763] - globals: [2] ‘x’, ‘y’
[13:22:38.763] 
[13:22:38.763] getGlobalsAndPackages() ... DONE
[13:22:38.763] run() for ‘Future’ ...
[13:22:38.764] - state: ‘created’
[13:22:38.764] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.768] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.768] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.768]   - Field: ‘label’
[13:22:38.768]   - Field: ‘local’
[13:22:38.769]   - Field: ‘owner’
[13:22:38.769]   - Field: ‘envir’
[13:22:38.769]   - Field: ‘workers’
[13:22:38.769]   - Field: ‘packages’
[13:22:38.769]   - Field: ‘gc’
[13:22:38.769]   - Field: ‘job’
[13:22:38.769]   - Field: ‘conditions’
[13:22:38.769]   - Field: ‘expr’
[13:22:38.769]   - Field: ‘uuid’
[13:22:38.770]   - Field: ‘seed’
[13:22:38.770]   - Field: ‘version’
[13:22:38.770]   - Field: ‘result’
[13:22:38.770]   - Field: ‘asynchronous’
[13:22:38.770]   - Field: ‘calls’
[13:22:38.770]   - Field: ‘globals’
[13:22:38.770]   - Field: ‘stdout’
[13:22:38.770]   - Field: ‘earlySignal’
[13:22:38.771]   - Field: ‘lazy’
[13:22:38.771]   - Field: ‘state’
[13:22:38.771] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.771] - Launch lazy future ...
[13:22:38.771] Packages needed by the future expression (n = 0): <none>
[13:22:38.771] Packages needed by future strategies (n = 0): <none>
[13:22:38.772] {
[13:22:38.772]     {
[13:22:38.772]         {
[13:22:38.772]             ...future.startTime <- base::Sys.time()
[13:22:38.772]             {
[13:22:38.772]                 {
[13:22:38.772]                   {
[13:22:38.772]                     {
[13:22:38.772]                       base::local({
[13:22:38.772]                         has_future <- base::requireNamespace("future", 
[13:22:38.772]                           quietly = TRUE)
[13:22:38.772]                         if (has_future) {
[13:22:38.772]                           ns <- base::getNamespace("future")
[13:22:38.772]                           version <- ns[[".package"]][["version"]]
[13:22:38.772]                           if (is.null(version)) 
[13:22:38.772]                             version <- utils::packageVersion("future")
[13:22:38.772]                         }
[13:22:38.772]                         else {
[13:22:38.772]                           version <- NULL
[13:22:38.772]                         }
[13:22:38.772]                         if (!has_future || version < "1.8.0") {
[13:22:38.772]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.772]                             "", base::R.version$version.string), 
[13:22:38.772]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.772]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.772]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.772]                               "release", "version")], collapse = " "), 
[13:22:38.772]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.772]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.772]                             info)
[13:22:38.772]                           info <- base::paste(info, collapse = "; ")
[13:22:38.772]                           if (!has_future) {
[13:22:38.772]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.772]                               info)
[13:22:38.772]                           }
[13:22:38.772]                           else {
[13:22:38.772]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.772]                               info, version)
[13:22:38.772]                           }
[13:22:38.772]                           base::stop(msg)
[13:22:38.772]                         }
[13:22:38.772]                       })
[13:22:38.772]                     }
[13:22:38.772]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.772]                     base::options(mc.cores = 1L)
[13:22:38.772]                   }
[13:22:38.772]                   options(future.plan = NULL)
[13:22:38.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.772]                 }
[13:22:38.772]                 ...future.workdir <- getwd()
[13:22:38.772]             }
[13:22:38.772]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.772]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.772]         }
[13:22:38.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.772]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.772]             base::names(...future.oldOptions))
[13:22:38.772]     }
[13:22:38.772]     if (FALSE) {
[13:22:38.772]     }
[13:22:38.772]     else {
[13:22:38.772]         if (TRUE) {
[13:22:38.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.772]                 open = "w")
[13:22:38.772]         }
[13:22:38.772]         else {
[13:22:38.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.772]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.772]         }
[13:22:38.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.772]             base::sink(type = "output", split = FALSE)
[13:22:38.772]             base::close(...future.stdout)
[13:22:38.772]         }, add = TRUE)
[13:22:38.772]     }
[13:22:38.772]     ...future.frame <- base::sys.nframe()
[13:22:38.772]     ...future.conditions <- base::list()
[13:22:38.772]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.772]     if (FALSE) {
[13:22:38.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.772]     }
[13:22:38.772]     ...future.result <- base::tryCatch({
[13:22:38.772]         base::withCallingHandlers({
[13:22:38.772]             ...future.value <- base::withVisible(base::local({
[13:22:38.772]                 withCallingHandlers({
[13:22:38.772]                   {
[13:22:38.772]                     sum(x, y)
[13:22:38.772]                   }
[13:22:38.772]                 }, immediateCondition = function(cond) {
[13:22:38.772]                   save_rds <- function (object, pathname, ...) 
[13:22:38.772]                   {
[13:22:38.772]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.772]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.772]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.772]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.772]                         fi_tmp[["mtime"]])
[13:22:38.772]                     }
[13:22:38.772]                     tryCatch({
[13:22:38.772]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.772]                     }, error = function(ex) {
[13:22:38.772]                       msg <- conditionMessage(ex)
[13:22:38.772]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.772]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.772]                         fi_tmp[["mtime"]], msg)
[13:22:38.772]                       ex$message <- msg
[13:22:38.772]                       stop(ex)
[13:22:38.772]                     })
[13:22:38.772]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.772]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.772]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.772]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.772]                       fi <- file.info(pathname)
[13:22:38.772]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.772]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.772]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.772]                         fi[["size"]], fi[["mtime"]])
[13:22:38.772]                       stop(msg)
[13:22:38.772]                     }
[13:22:38.772]                     invisible(pathname)
[13:22:38.772]                   }
[13:22:38.772]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.772]                     rootPath = tempdir()) 
[13:22:38.772]                   {
[13:22:38.772]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.772]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.772]                       tmpdir = path, fileext = ".rds")
[13:22:38.772]                     save_rds(obj, file)
[13:22:38.772]                   }
[13:22:38.772]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.772]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.772]                   {
[13:22:38.772]                     inherits <- base::inherits
[13:22:38.772]                     invokeRestart <- base::invokeRestart
[13:22:38.772]                     is.null <- base::is.null
[13:22:38.772]                     muffled <- FALSE
[13:22:38.772]                     if (inherits(cond, "message")) {
[13:22:38.772]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.772]                       if (muffled) 
[13:22:38.772]                         invokeRestart("muffleMessage")
[13:22:38.772]                     }
[13:22:38.772]                     else if (inherits(cond, "warning")) {
[13:22:38.772]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.772]                       if (muffled) 
[13:22:38.772]                         invokeRestart("muffleWarning")
[13:22:38.772]                     }
[13:22:38.772]                     else if (inherits(cond, "condition")) {
[13:22:38.772]                       if (!is.null(pattern)) {
[13:22:38.772]                         computeRestarts <- base::computeRestarts
[13:22:38.772]                         grepl <- base::grepl
[13:22:38.772]                         restarts <- computeRestarts(cond)
[13:22:38.772]                         for (restart in restarts) {
[13:22:38.772]                           name <- restart$name
[13:22:38.772]                           if (is.null(name)) 
[13:22:38.772]                             next
[13:22:38.772]                           if (!grepl(pattern, name)) 
[13:22:38.772]                             next
[13:22:38.772]                           invokeRestart(restart)
[13:22:38.772]                           muffled <- TRUE
[13:22:38.772]                           break
[13:22:38.772]                         }
[13:22:38.772]                       }
[13:22:38.772]                     }
[13:22:38.772]                     invisible(muffled)
[13:22:38.772]                   }
[13:22:38.772]                   muffleCondition(cond)
[13:22:38.772]                 })
[13:22:38.772]             }))
[13:22:38.772]             future::FutureResult(value = ...future.value$value, 
[13:22:38.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.772]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.772]                     ...future.globalenv.names))
[13:22:38.772]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.772]         }, condition = base::local({
[13:22:38.772]             c <- base::c
[13:22:38.772]             inherits <- base::inherits
[13:22:38.772]             invokeRestart <- base::invokeRestart
[13:22:38.772]             length <- base::length
[13:22:38.772]             list <- base::list
[13:22:38.772]             seq.int <- base::seq.int
[13:22:38.772]             signalCondition <- base::signalCondition
[13:22:38.772]             sys.calls <- base::sys.calls
[13:22:38.772]             `[[` <- base::`[[`
[13:22:38.772]             `+` <- base::`+`
[13:22:38.772]             `<<-` <- base::`<<-`
[13:22:38.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.772]                   3L)]
[13:22:38.772]             }
[13:22:38.772]             function(cond) {
[13:22:38.772]                 is_error <- inherits(cond, "error")
[13:22:38.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.772]                   NULL)
[13:22:38.772]                 if (is_error) {
[13:22:38.772]                   sessionInformation <- function() {
[13:22:38.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.772]                       search = base::search(), system = base::Sys.info())
[13:22:38.772]                   }
[13:22:38.772]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.772]                     cond$call), session = sessionInformation(), 
[13:22:38.772]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.772]                   signalCondition(cond)
[13:22:38.772]                 }
[13:22:38.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.772]                 "immediateCondition"))) {
[13:22:38.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.772]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.772]                   if (TRUE && !signal) {
[13:22:38.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.772]                     {
[13:22:38.772]                       inherits <- base::inherits
[13:22:38.772]                       invokeRestart <- base::invokeRestart
[13:22:38.772]                       is.null <- base::is.null
[13:22:38.772]                       muffled <- FALSE
[13:22:38.772]                       if (inherits(cond, "message")) {
[13:22:38.772]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.772]                         if (muffled) 
[13:22:38.772]                           invokeRestart("muffleMessage")
[13:22:38.772]                       }
[13:22:38.772]                       else if (inherits(cond, "warning")) {
[13:22:38.772]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.772]                         if (muffled) 
[13:22:38.772]                           invokeRestart("muffleWarning")
[13:22:38.772]                       }
[13:22:38.772]                       else if (inherits(cond, "condition")) {
[13:22:38.772]                         if (!is.null(pattern)) {
[13:22:38.772]                           computeRestarts <- base::computeRestarts
[13:22:38.772]                           grepl <- base::grepl
[13:22:38.772]                           restarts <- computeRestarts(cond)
[13:22:38.772]                           for (restart in restarts) {
[13:22:38.772]                             name <- restart$name
[13:22:38.772]                             if (is.null(name)) 
[13:22:38.772]                               next
[13:22:38.772]                             if (!grepl(pattern, name)) 
[13:22:38.772]                               next
[13:22:38.772]                             invokeRestart(restart)
[13:22:38.772]                             muffled <- TRUE
[13:22:38.772]                             break
[13:22:38.772]                           }
[13:22:38.772]                         }
[13:22:38.772]                       }
[13:22:38.772]                       invisible(muffled)
[13:22:38.772]                     }
[13:22:38.772]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.772]                   }
[13:22:38.772]                 }
[13:22:38.772]                 else {
[13:22:38.772]                   if (TRUE) {
[13:22:38.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.772]                     {
[13:22:38.772]                       inherits <- base::inherits
[13:22:38.772]                       invokeRestart <- base::invokeRestart
[13:22:38.772]                       is.null <- base::is.null
[13:22:38.772]                       muffled <- FALSE
[13:22:38.772]                       if (inherits(cond, "message")) {
[13:22:38.772]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.772]                         if (muffled) 
[13:22:38.772]                           invokeRestart("muffleMessage")
[13:22:38.772]                       }
[13:22:38.772]                       else if (inherits(cond, "warning")) {
[13:22:38.772]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.772]                         if (muffled) 
[13:22:38.772]                           invokeRestart("muffleWarning")
[13:22:38.772]                       }
[13:22:38.772]                       else if (inherits(cond, "condition")) {
[13:22:38.772]                         if (!is.null(pattern)) {
[13:22:38.772]                           computeRestarts <- base::computeRestarts
[13:22:38.772]                           grepl <- base::grepl
[13:22:38.772]                           restarts <- computeRestarts(cond)
[13:22:38.772]                           for (restart in restarts) {
[13:22:38.772]                             name <- restart$name
[13:22:38.772]                             if (is.null(name)) 
[13:22:38.772]                               next
[13:22:38.772]                             if (!grepl(pattern, name)) 
[13:22:38.772]                               next
[13:22:38.772]                             invokeRestart(restart)
[13:22:38.772]                             muffled <- TRUE
[13:22:38.772]                             break
[13:22:38.772]                           }
[13:22:38.772]                         }
[13:22:38.772]                       }
[13:22:38.772]                       invisible(muffled)
[13:22:38.772]                     }
[13:22:38.772]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.772]                   }
[13:22:38.772]                 }
[13:22:38.772]             }
[13:22:38.772]         }))
[13:22:38.772]     }, error = function(ex) {
[13:22:38.772]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.772]                 ...future.rng), started = ...future.startTime, 
[13:22:38.772]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.772]             version = "1.8"), class = "FutureResult")
[13:22:38.772]     }, finally = {
[13:22:38.772]         if (!identical(...future.workdir, getwd())) 
[13:22:38.772]             setwd(...future.workdir)
[13:22:38.772]         {
[13:22:38.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.772]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.772]             }
[13:22:38.772]             base::options(...future.oldOptions)
[13:22:38.772]             if (.Platform$OS.type == "windows") {
[13:22:38.772]                 old_names <- names(...future.oldEnvVars)
[13:22:38.772]                 envs <- base::Sys.getenv()
[13:22:38.772]                 names <- names(envs)
[13:22:38.772]                 common <- intersect(names, old_names)
[13:22:38.772]                 added <- setdiff(names, old_names)
[13:22:38.772]                 removed <- setdiff(old_names, names)
[13:22:38.772]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.772]                   envs[common]]
[13:22:38.772]                 NAMES <- toupper(changed)
[13:22:38.772]                 args <- list()
[13:22:38.772]                 for (kk in seq_along(NAMES)) {
[13:22:38.772]                   name <- changed[[kk]]
[13:22:38.772]                   NAME <- NAMES[[kk]]
[13:22:38.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.772]                     next
[13:22:38.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.772]                 }
[13:22:38.772]                 NAMES <- toupper(added)
[13:22:38.772]                 for (kk in seq_along(NAMES)) {
[13:22:38.772]                   name <- added[[kk]]
[13:22:38.772]                   NAME <- NAMES[[kk]]
[13:22:38.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.772]                     next
[13:22:38.772]                   args[[name]] <- ""
[13:22:38.772]                 }
[13:22:38.772]                 NAMES <- toupper(removed)
[13:22:38.772]                 for (kk in seq_along(NAMES)) {
[13:22:38.772]                   name <- removed[[kk]]
[13:22:38.772]                   NAME <- NAMES[[kk]]
[13:22:38.772]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.772]                     next
[13:22:38.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.772]                 }
[13:22:38.772]                 if (length(args) > 0) 
[13:22:38.772]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.772]             }
[13:22:38.772]             else {
[13:22:38.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.772]             }
[13:22:38.772]             {
[13:22:38.772]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.772]                   0L) {
[13:22:38.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.772]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.772]                   base::options(opts)
[13:22:38.772]                 }
[13:22:38.772]                 {
[13:22:38.772]                   {
[13:22:38.772]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.772]                     NULL
[13:22:38.772]                   }
[13:22:38.772]                   options(future.plan = NULL)
[13:22:38.772]                   if (is.na(NA_character_)) 
[13:22:38.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.772]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.772]                     envir = parent.frame()) 
[13:22:38.772]                   {
[13:22:38.772]                     default_workers <- missing(workers)
[13:22:38.772]                     if (is.function(workers)) 
[13:22:38.772]                       workers <- workers()
[13:22:38.772]                     workers <- structure(as.integer(workers), 
[13:22:38.772]                       class = class(workers))
[13:22:38.772]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.772]                       1L)
[13:22:38.772]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.772]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.772]                       if (default_workers) 
[13:22:38.772]                         supportsMulticore(warn = TRUE)
[13:22:38.772]                       return(sequential(..., envir = envir))
[13:22:38.772]                     }
[13:22:38.772]                     oopts <- options(mc.cores = workers)
[13:22:38.772]                     on.exit(options(oopts))
[13:22:38.772]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.772]                       envir = envir)
[13:22:38.772]                     if (!future$lazy) 
[13:22:38.772]                       future <- run(future)
[13:22:38.772]                     invisible(future)
[13:22:38.772]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.772]                 }
[13:22:38.772]             }
[13:22:38.772]         }
[13:22:38.772]     })
[13:22:38.772]     if (TRUE) {
[13:22:38.772]         base::sink(type = "output", split = FALSE)
[13:22:38.772]         if (TRUE) {
[13:22:38.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.772]         }
[13:22:38.772]         else {
[13:22:38.772]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.772]         }
[13:22:38.772]         base::close(...future.stdout)
[13:22:38.772]         ...future.stdout <- NULL
[13:22:38.772]     }
[13:22:38.772]     ...future.result$conditions <- ...future.conditions
[13:22:38.772]     ...future.result$finished <- base::Sys.time()
[13:22:38.772]     ...future.result
[13:22:38.772] }
[13:22:38.775] assign_globals() ...
[13:22:38.775] List of 2
[13:22:38.775]  $ x: int [1:2] 1 2
[13:22:38.775]  $ y: num 3
[13:22:38.775]  - attr(*, "where")=List of 2
[13:22:38.775]   ..$ x:<environment: R_EmptyEnv> 
[13:22:38.775]   ..$ y:<environment: R_EmptyEnv> 
[13:22:38.775]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.775]  - attr(*, "resolved")= logi FALSE
[13:22:38.775]  - attr(*, "total_size")= num 112
[13:22:38.775]  - attr(*, "already-done")= logi TRUE
[13:22:38.779] - copied ‘x’ to environment
[13:22:38.779] - copied ‘y’ to environment
[13:22:38.779] assign_globals() ... done
[13:22:38.779] requestCore(): workers = 2
[13:22:38.781] MulticoreFuture started
[13:22:38.782] - Launch lazy future ... done
[13:22:38.782] run() for ‘MulticoreFuture’ ... done
[13:22:38.782] result() for MulticoreFuture ...
[13:22:38.783] plan(): Setting new future strategy stack:
[13:22:38.783] List of future strategies:
[13:22:38.783] 1. sequential:
[13:22:38.783]    - args: function (..., envir = parent.frame())
[13:22:38.783]    - tweaked: FALSE
[13:22:38.783]    - call: NULL
[13:22:38.784] plan(): nbrOfWorkers() = 1
[13:22:38.786] plan(): Setting new future strategy stack:
[13:22:38.786] List of future strategies:
[13:22:38.786] 1. multicore:
[13:22:38.786]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.786]    - tweaked: FALSE
[13:22:38.786]    - call: plan(strategy, substitute = FALSE)
[13:22:38.791] plan(): nbrOfWorkers() = 2
[13:22:38.792] result() for MulticoreFuture ...
[13:22:38.792] result() for MulticoreFuture ... done
[13:22:38.793] result() for MulticoreFuture ... done
[13:22:38.793] result() for MulticoreFuture ...
[13:22:38.793] result() for MulticoreFuture ... done
[1] 6
** Sum function 'D' with plan('multicore') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5638929c45d8>
Arguments '...' exists: FALSE
[13:22:38.794] getGlobalsAndPackages() ...
[13:22:38.794] Searching for globals...
[13:22:38.797] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:22:38.797] Searching for globals ... DONE
[13:22:38.797] Resolving globals: FALSE
[13:22:38.797] Tweak future expression to call with '...' arguments ...
[13:22:38.798] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:38.798] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.798] - globals: [2] ‘x’, ‘y’
[13:22:38.799] 
[13:22:38.799] getGlobalsAndPackages() ... DONE
[13:22:38.799] run() for ‘Future’ ...
[13:22:38.799] - state: ‘created’
[13:22:38.799] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.804] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.804] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.804]   - Field: ‘label’
[13:22:38.804]   - Field: ‘local’
[13:22:38.804]   - Field: ‘owner’
[13:22:38.804]   - Field: ‘envir’
[13:22:38.804]   - Field: ‘workers’
[13:22:38.805]   - Field: ‘packages’
[13:22:38.805]   - Field: ‘gc’
[13:22:38.805]   - Field: ‘job’
[13:22:38.805]   - Field: ‘conditions’
[13:22:38.805]   - Field: ‘expr’
[13:22:38.805]   - Field: ‘uuid’
[13:22:38.805]   - Field: ‘seed’
[13:22:38.805]   - Field: ‘version’
[13:22:38.805]   - Field: ‘result’
[13:22:38.806]   - Field: ‘asynchronous’
[13:22:38.806]   - Field: ‘calls’
[13:22:38.806]   - Field: ‘globals’
[13:22:38.806]   - Field: ‘stdout’
[13:22:38.806]   - Field: ‘earlySignal’
[13:22:38.806]   - Field: ‘lazy’
[13:22:38.806]   - Field: ‘state’
[13:22:38.806] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.807] - Launch lazy future ...
[13:22:38.807] Packages needed by the future expression (n = 0): <none>
[13:22:38.807] Packages needed by future strategies (n = 0): <none>
[13:22:38.808] {
[13:22:38.808]     {
[13:22:38.808]         {
[13:22:38.808]             ...future.startTime <- base::Sys.time()
[13:22:38.808]             {
[13:22:38.808]                 {
[13:22:38.808]                   {
[13:22:38.808]                     {
[13:22:38.808]                       base::local({
[13:22:38.808]                         has_future <- base::requireNamespace("future", 
[13:22:38.808]                           quietly = TRUE)
[13:22:38.808]                         if (has_future) {
[13:22:38.808]                           ns <- base::getNamespace("future")
[13:22:38.808]                           version <- ns[[".package"]][["version"]]
[13:22:38.808]                           if (is.null(version)) 
[13:22:38.808]                             version <- utils::packageVersion("future")
[13:22:38.808]                         }
[13:22:38.808]                         else {
[13:22:38.808]                           version <- NULL
[13:22:38.808]                         }
[13:22:38.808]                         if (!has_future || version < "1.8.0") {
[13:22:38.808]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.808]                             "", base::R.version$version.string), 
[13:22:38.808]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.808]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.808]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.808]                               "release", "version")], collapse = " "), 
[13:22:38.808]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.808]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.808]                             info)
[13:22:38.808]                           info <- base::paste(info, collapse = "; ")
[13:22:38.808]                           if (!has_future) {
[13:22:38.808]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.808]                               info)
[13:22:38.808]                           }
[13:22:38.808]                           else {
[13:22:38.808]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.808]                               info, version)
[13:22:38.808]                           }
[13:22:38.808]                           base::stop(msg)
[13:22:38.808]                         }
[13:22:38.808]                       })
[13:22:38.808]                     }
[13:22:38.808]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.808]                     base::options(mc.cores = 1L)
[13:22:38.808]                   }
[13:22:38.808]                   options(future.plan = NULL)
[13:22:38.808]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.808]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.808]                 }
[13:22:38.808]                 ...future.workdir <- getwd()
[13:22:38.808]             }
[13:22:38.808]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.808]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.808]         }
[13:22:38.808]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.808]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.808]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.808]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.808]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.808]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.808]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.808]             base::names(...future.oldOptions))
[13:22:38.808]     }
[13:22:38.808]     if (FALSE) {
[13:22:38.808]     }
[13:22:38.808]     else {
[13:22:38.808]         if (TRUE) {
[13:22:38.808]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.808]                 open = "w")
[13:22:38.808]         }
[13:22:38.808]         else {
[13:22:38.808]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.808]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.808]         }
[13:22:38.808]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.808]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.808]             base::sink(type = "output", split = FALSE)
[13:22:38.808]             base::close(...future.stdout)
[13:22:38.808]         }, add = TRUE)
[13:22:38.808]     }
[13:22:38.808]     ...future.frame <- base::sys.nframe()
[13:22:38.808]     ...future.conditions <- base::list()
[13:22:38.808]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.808]     if (FALSE) {
[13:22:38.808]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.808]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.808]     }
[13:22:38.808]     ...future.result <- base::tryCatch({
[13:22:38.808]         base::withCallingHandlers({
[13:22:38.808]             ...future.value <- base::withVisible(base::local({
[13:22:38.808]                 withCallingHandlers({
[13:22:38.808]                   {
[13:22:38.808]                     sum(x, y, ...)
[13:22:38.808]                   }
[13:22:38.808]                 }, immediateCondition = function(cond) {
[13:22:38.808]                   save_rds <- function (object, pathname, ...) 
[13:22:38.808]                   {
[13:22:38.808]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.808]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.808]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.808]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.808]                         fi_tmp[["mtime"]])
[13:22:38.808]                     }
[13:22:38.808]                     tryCatch({
[13:22:38.808]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.808]                     }, error = function(ex) {
[13:22:38.808]                       msg <- conditionMessage(ex)
[13:22:38.808]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.808]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.808]                         fi_tmp[["mtime"]], msg)
[13:22:38.808]                       ex$message <- msg
[13:22:38.808]                       stop(ex)
[13:22:38.808]                     })
[13:22:38.808]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.808]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.808]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.808]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.808]                       fi <- file.info(pathname)
[13:22:38.808]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.808]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.808]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.808]                         fi[["size"]], fi[["mtime"]])
[13:22:38.808]                       stop(msg)
[13:22:38.808]                     }
[13:22:38.808]                     invisible(pathname)
[13:22:38.808]                   }
[13:22:38.808]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.808]                     rootPath = tempdir()) 
[13:22:38.808]                   {
[13:22:38.808]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.808]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.808]                       tmpdir = path, fileext = ".rds")
[13:22:38.808]                     save_rds(obj, file)
[13:22:38.808]                   }
[13:22:38.808]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.808]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.808]                   {
[13:22:38.808]                     inherits <- base::inherits
[13:22:38.808]                     invokeRestart <- base::invokeRestart
[13:22:38.808]                     is.null <- base::is.null
[13:22:38.808]                     muffled <- FALSE
[13:22:38.808]                     if (inherits(cond, "message")) {
[13:22:38.808]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.808]                       if (muffled) 
[13:22:38.808]                         invokeRestart("muffleMessage")
[13:22:38.808]                     }
[13:22:38.808]                     else if (inherits(cond, "warning")) {
[13:22:38.808]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.808]                       if (muffled) 
[13:22:38.808]                         invokeRestart("muffleWarning")
[13:22:38.808]                     }
[13:22:38.808]                     else if (inherits(cond, "condition")) {
[13:22:38.808]                       if (!is.null(pattern)) {
[13:22:38.808]                         computeRestarts <- base::computeRestarts
[13:22:38.808]                         grepl <- base::grepl
[13:22:38.808]                         restarts <- computeRestarts(cond)
[13:22:38.808]                         for (restart in restarts) {
[13:22:38.808]                           name <- restart$name
[13:22:38.808]                           if (is.null(name)) 
[13:22:38.808]                             next
[13:22:38.808]                           if (!grepl(pattern, name)) 
[13:22:38.808]                             next
[13:22:38.808]                           invokeRestart(restart)
[13:22:38.808]                           muffled <- TRUE
[13:22:38.808]                           break
[13:22:38.808]                         }
[13:22:38.808]                       }
[13:22:38.808]                     }
[13:22:38.808]                     invisible(muffled)
[13:22:38.808]                   }
[13:22:38.808]                   muffleCondition(cond)
[13:22:38.808]                 })
[13:22:38.808]             }))
[13:22:38.808]             future::FutureResult(value = ...future.value$value, 
[13:22:38.808]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.808]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.808]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.808]                     ...future.globalenv.names))
[13:22:38.808]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.808]         }, condition = base::local({
[13:22:38.808]             c <- base::c
[13:22:38.808]             inherits <- base::inherits
[13:22:38.808]             invokeRestart <- base::invokeRestart
[13:22:38.808]             length <- base::length
[13:22:38.808]             list <- base::list
[13:22:38.808]             seq.int <- base::seq.int
[13:22:38.808]             signalCondition <- base::signalCondition
[13:22:38.808]             sys.calls <- base::sys.calls
[13:22:38.808]             `[[` <- base::`[[`
[13:22:38.808]             `+` <- base::`+`
[13:22:38.808]             `<<-` <- base::`<<-`
[13:22:38.808]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.808]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.808]                   3L)]
[13:22:38.808]             }
[13:22:38.808]             function(cond) {
[13:22:38.808]                 is_error <- inherits(cond, "error")
[13:22:38.808]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.808]                   NULL)
[13:22:38.808]                 if (is_error) {
[13:22:38.808]                   sessionInformation <- function() {
[13:22:38.808]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.808]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.808]                       search = base::search(), system = base::Sys.info())
[13:22:38.808]                   }
[13:22:38.808]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.808]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.808]                     cond$call), session = sessionInformation(), 
[13:22:38.808]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.808]                   signalCondition(cond)
[13:22:38.808]                 }
[13:22:38.808]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.808]                 "immediateCondition"))) {
[13:22:38.808]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.808]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.808]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.808]                   if (TRUE && !signal) {
[13:22:38.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.808]                     {
[13:22:38.808]                       inherits <- base::inherits
[13:22:38.808]                       invokeRestart <- base::invokeRestart
[13:22:38.808]                       is.null <- base::is.null
[13:22:38.808]                       muffled <- FALSE
[13:22:38.808]                       if (inherits(cond, "message")) {
[13:22:38.808]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.808]                         if (muffled) 
[13:22:38.808]                           invokeRestart("muffleMessage")
[13:22:38.808]                       }
[13:22:38.808]                       else if (inherits(cond, "warning")) {
[13:22:38.808]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.808]                         if (muffled) 
[13:22:38.808]                           invokeRestart("muffleWarning")
[13:22:38.808]                       }
[13:22:38.808]                       else if (inherits(cond, "condition")) {
[13:22:38.808]                         if (!is.null(pattern)) {
[13:22:38.808]                           computeRestarts <- base::computeRestarts
[13:22:38.808]                           grepl <- base::grepl
[13:22:38.808]                           restarts <- computeRestarts(cond)
[13:22:38.808]                           for (restart in restarts) {
[13:22:38.808]                             name <- restart$name
[13:22:38.808]                             if (is.null(name)) 
[13:22:38.808]                               next
[13:22:38.808]                             if (!grepl(pattern, name)) 
[13:22:38.808]                               next
[13:22:38.808]                             invokeRestart(restart)
[13:22:38.808]                             muffled <- TRUE
[13:22:38.808]                             break
[13:22:38.808]                           }
[13:22:38.808]                         }
[13:22:38.808]                       }
[13:22:38.808]                       invisible(muffled)
[13:22:38.808]                     }
[13:22:38.808]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.808]                   }
[13:22:38.808]                 }
[13:22:38.808]                 else {
[13:22:38.808]                   if (TRUE) {
[13:22:38.808]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.808]                     {
[13:22:38.808]                       inherits <- base::inherits
[13:22:38.808]                       invokeRestart <- base::invokeRestart
[13:22:38.808]                       is.null <- base::is.null
[13:22:38.808]                       muffled <- FALSE
[13:22:38.808]                       if (inherits(cond, "message")) {
[13:22:38.808]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.808]                         if (muffled) 
[13:22:38.808]                           invokeRestart("muffleMessage")
[13:22:38.808]                       }
[13:22:38.808]                       else if (inherits(cond, "warning")) {
[13:22:38.808]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.808]                         if (muffled) 
[13:22:38.808]                           invokeRestart("muffleWarning")
[13:22:38.808]                       }
[13:22:38.808]                       else if (inherits(cond, "condition")) {
[13:22:38.808]                         if (!is.null(pattern)) {
[13:22:38.808]                           computeRestarts <- base::computeRestarts
[13:22:38.808]                           grepl <- base::grepl
[13:22:38.808]                           restarts <- computeRestarts(cond)
[13:22:38.808]                           for (restart in restarts) {
[13:22:38.808]                             name <- restart$name
[13:22:38.808]                             if (is.null(name)) 
[13:22:38.808]                               next
[13:22:38.808]                             if (!grepl(pattern, name)) 
[13:22:38.808]                               next
[13:22:38.808]                             invokeRestart(restart)
[13:22:38.808]                             muffled <- TRUE
[13:22:38.808]                             break
[13:22:38.808]                           }
[13:22:38.808]                         }
[13:22:38.808]                       }
[13:22:38.808]                       invisible(muffled)
[13:22:38.808]                     }
[13:22:38.808]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.808]                   }
[13:22:38.808]                 }
[13:22:38.808]             }
[13:22:38.808]         }))
[13:22:38.808]     }, error = function(ex) {
[13:22:38.808]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.808]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.808]                 ...future.rng), started = ...future.startTime, 
[13:22:38.808]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.808]             version = "1.8"), class = "FutureResult")
[13:22:38.808]     }, finally = {
[13:22:38.808]         if (!identical(...future.workdir, getwd())) 
[13:22:38.808]             setwd(...future.workdir)
[13:22:38.808]         {
[13:22:38.808]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.808]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.808]             }
[13:22:38.808]             base::options(...future.oldOptions)
[13:22:38.808]             if (.Platform$OS.type == "windows") {
[13:22:38.808]                 old_names <- names(...future.oldEnvVars)
[13:22:38.808]                 envs <- base::Sys.getenv()
[13:22:38.808]                 names <- names(envs)
[13:22:38.808]                 common <- intersect(names, old_names)
[13:22:38.808]                 added <- setdiff(names, old_names)
[13:22:38.808]                 removed <- setdiff(old_names, names)
[13:22:38.808]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.808]                   envs[common]]
[13:22:38.808]                 NAMES <- toupper(changed)
[13:22:38.808]                 args <- list()
[13:22:38.808]                 for (kk in seq_along(NAMES)) {
[13:22:38.808]                   name <- changed[[kk]]
[13:22:38.808]                   NAME <- NAMES[[kk]]
[13:22:38.808]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.808]                     next
[13:22:38.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.808]                 }
[13:22:38.808]                 NAMES <- toupper(added)
[13:22:38.808]                 for (kk in seq_along(NAMES)) {
[13:22:38.808]                   name <- added[[kk]]
[13:22:38.808]                   NAME <- NAMES[[kk]]
[13:22:38.808]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.808]                     next
[13:22:38.808]                   args[[name]] <- ""
[13:22:38.808]                 }
[13:22:38.808]                 NAMES <- toupper(removed)
[13:22:38.808]                 for (kk in seq_along(NAMES)) {
[13:22:38.808]                   name <- removed[[kk]]
[13:22:38.808]                   NAME <- NAMES[[kk]]
[13:22:38.808]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.808]                     next
[13:22:38.808]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.808]                 }
[13:22:38.808]                 if (length(args) > 0) 
[13:22:38.808]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.808]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.808]             }
[13:22:38.808]             else {
[13:22:38.808]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.808]             }
[13:22:38.808]             {
[13:22:38.808]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.808]                   0L) {
[13:22:38.808]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.808]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.808]                   base::options(opts)
[13:22:38.808]                 }
[13:22:38.808]                 {
[13:22:38.808]                   {
[13:22:38.808]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.808]                     NULL
[13:22:38.808]                   }
[13:22:38.808]                   options(future.plan = NULL)
[13:22:38.808]                   if (is.na(NA_character_)) 
[13:22:38.808]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.808]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.808]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.808]                     envir = parent.frame()) 
[13:22:38.808]                   {
[13:22:38.808]                     default_workers <- missing(workers)
[13:22:38.808]                     if (is.function(workers)) 
[13:22:38.808]                       workers <- workers()
[13:22:38.808]                     workers <- structure(as.integer(workers), 
[13:22:38.808]                       class = class(workers))
[13:22:38.808]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.808]                       1L)
[13:22:38.808]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.808]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.808]                       if (default_workers) 
[13:22:38.808]                         supportsMulticore(warn = TRUE)
[13:22:38.808]                       return(sequential(..., envir = envir))
[13:22:38.808]                     }
[13:22:38.808]                     oopts <- options(mc.cores = workers)
[13:22:38.808]                     on.exit(options(oopts))
[13:22:38.808]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.808]                       envir = envir)
[13:22:38.808]                     if (!future$lazy) 
[13:22:38.808]                       future <- run(future)
[13:22:38.808]                     invisible(future)
[13:22:38.808]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.808]                 }
[13:22:38.808]             }
[13:22:38.808]         }
[13:22:38.808]     })
[13:22:38.808]     if (TRUE) {
[13:22:38.808]         base::sink(type = "output", split = FALSE)
[13:22:38.808]         if (TRUE) {
[13:22:38.808]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.808]         }
[13:22:38.808]         else {
[13:22:38.808]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.808]         }
[13:22:38.808]         base::close(...future.stdout)
[13:22:38.808]         ...future.stdout <- NULL
[13:22:38.808]     }
[13:22:38.808]     ...future.result$conditions <- ...future.conditions
[13:22:38.808]     ...future.result$finished <- base::Sys.time()
[13:22:38.808]     ...future.result
[13:22:38.808] }
[13:22:38.810] assign_globals() ...
[13:22:38.811] List of 2
[13:22:38.811]  $ x: int [1:2] 1 2
[13:22:38.811]  $ y: num 3
[13:22:38.811]  - attr(*, "where")=List of 2
[13:22:38.811]   ..$ x:<environment: R_EmptyEnv> 
[13:22:38.811]   ..$ y:<environment: R_EmptyEnv> 
[13:22:38.811]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.811]  - attr(*, "resolved")= logi FALSE
[13:22:38.811]  - attr(*, "total_size")= num 112
[13:22:38.811]  - attr(*, "already-done")= logi TRUE
[13:22:38.817] - copied ‘x’ to environment
[13:22:38.817] - copied ‘y’ to environment
[13:22:38.817] assign_globals() ... done
[13:22:38.818] requestCore(): workers = 2
[13:22:38.820] MulticoreFuture started
[13:22:38.820] - Launch lazy future ... done
[13:22:38.820] run() for ‘MulticoreFuture’ ... done
[13:22:38.821] result() for MulticoreFuture ...
[13:22:38.821] plan(): Setting new future strategy stack:
[13:22:38.821] List of future strategies:
[13:22:38.821] 1. sequential:
[13:22:38.821]    - args: function (..., envir = parent.frame())
[13:22:38.821]    - tweaked: FALSE
[13:22:38.821]    - call: NULL
[13:22:38.822] plan(): nbrOfWorkers() = 1
[13:22:38.824] plan(): Setting new future strategy stack:
[13:22:38.825] List of future strategies:
[13:22:38.825] 1. multicore:
[13:22:38.825]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.825]    - tweaked: FALSE
[13:22:38.825]    - call: plan(strategy, substitute = FALSE)
[13:22:38.830] plan(): nbrOfWorkers() = 2
[13:22:38.837] result() for MulticoreFuture ...
[13:22:38.837] result() for MulticoreFuture ... done
[13:22:38.837] signalConditions() ...
[13:22:38.837]  - include = ‘immediateCondition’
[13:22:38.837]  - exclude = 
[13:22:38.838]  - resignal = FALSE
[13:22:38.838]  - Number of conditions: 1
[13:22:38.838] signalConditions() ... done
[13:22:38.838] result() for MulticoreFuture ... done
[13:22:38.838] result() for MulticoreFuture ...
[13:22:38.838] result() for MulticoreFuture ... done
[13:22:38.838] signalConditions() ...
[13:22:38.838]  - include = ‘immediateCondition’
[13:22:38.839]  - exclude = 
[13:22:38.839]  - resignal = FALSE
[13:22:38.839]  - Number of conditions: 1
[13:22:38.839] signalConditions() ... done
[13:22:38.839] Future state: ‘finished’
[13:22:38.839] result() for MulticoreFuture ...
[13:22:38.839] result() for MulticoreFuture ... done
[13:22:38.839] signalConditions() ...
[13:22:38.840]  - include = ‘condition’
[13:22:38.840]  - exclude = ‘immediateCondition’
[13:22:38.840]  - resignal = TRUE
[13:22:38.840]  - Number of conditions: 1
[13:22:38.840]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:22:38.840] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multicore') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x563891bc6568>
Arguments '...' exists: TRUE
[13:22:38.842] getGlobalsAndPackages() ...
[13:22:38.842] - globals passed as-is: [1] ‘...’
[13:22:38.842] Resolving globals: FALSE
[13:22:38.842] Tweak future expression to call with '...' arguments ...
[13:22:38.842] {
[13:22:38.842]     do.call(function(...) {
[13:22:38.842]         fcn <- function() sum(...)
[13:22:38.842]         fcn()
[13:22:38.842]     }, args = future.call.arguments)
[13:22:38.842] }
[13:22:38.843] Tweak future expression to call with '...' arguments ... DONE
[13:22:38.843] The total size of the 1 globals is 112 bytes (112 bytes)
[13:22:38.844] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:22:38.844] - globals: [1] ‘future.call.arguments’
[13:22:38.844] 
[13:22:38.844] getGlobalsAndPackages() ... DONE
[13:22:38.844] run() for ‘Future’ ...
[13:22:38.845] - state: ‘created’
[13:22:38.845] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.849] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.849] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.849]   - Field: ‘label’
[13:22:38.850]   - Field: ‘local’
[13:22:38.850]   - Field: ‘owner’
[13:22:38.850]   - Field: ‘envir’
[13:22:38.850]   - Field: ‘workers’
[13:22:38.850]   - Field: ‘packages’
[13:22:38.850]   - Field: ‘gc’
[13:22:38.850]   - Field: ‘job’
[13:22:38.850]   - Field: ‘conditions’
[13:22:38.850]   - Field: ‘expr’
[13:22:38.851]   - Field: ‘uuid’
[13:22:38.851]   - Field: ‘seed’
[13:22:38.851]   - Field: ‘version’
[13:22:38.851]   - Field: ‘result’
[13:22:38.851]   - Field: ‘asynchronous’
[13:22:38.851]   - Field: ‘calls’
[13:22:38.851]   - Field: ‘globals’
[13:22:38.851]   - Field: ‘stdout’
[13:22:38.851]   - Field: ‘earlySignal’
[13:22:38.852]   - Field: ‘lazy’
[13:22:38.852]   - Field: ‘state’
[13:22:38.852] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.852] - Launch lazy future ...
[13:22:38.852] Packages needed by the future expression (n = 0): <none>
[13:22:38.852] Packages needed by future strategies (n = 0): <none>
[13:22:38.853] {
[13:22:38.853]     {
[13:22:38.853]         {
[13:22:38.853]             ...future.startTime <- base::Sys.time()
[13:22:38.853]             {
[13:22:38.853]                 {
[13:22:38.853]                   {
[13:22:38.853]                     {
[13:22:38.853]                       base::local({
[13:22:38.853]                         has_future <- base::requireNamespace("future", 
[13:22:38.853]                           quietly = TRUE)
[13:22:38.853]                         if (has_future) {
[13:22:38.853]                           ns <- base::getNamespace("future")
[13:22:38.853]                           version <- ns[[".package"]][["version"]]
[13:22:38.853]                           if (is.null(version)) 
[13:22:38.853]                             version <- utils::packageVersion("future")
[13:22:38.853]                         }
[13:22:38.853]                         else {
[13:22:38.853]                           version <- NULL
[13:22:38.853]                         }
[13:22:38.853]                         if (!has_future || version < "1.8.0") {
[13:22:38.853]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.853]                             "", base::R.version$version.string), 
[13:22:38.853]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.853]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.853]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.853]                               "release", "version")], collapse = " "), 
[13:22:38.853]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.853]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.853]                             info)
[13:22:38.853]                           info <- base::paste(info, collapse = "; ")
[13:22:38.853]                           if (!has_future) {
[13:22:38.853]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.853]                               info)
[13:22:38.853]                           }
[13:22:38.853]                           else {
[13:22:38.853]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.853]                               info, version)
[13:22:38.853]                           }
[13:22:38.853]                           base::stop(msg)
[13:22:38.853]                         }
[13:22:38.853]                       })
[13:22:38.853]                     }
[13:22:38.853]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.853]                     base::options(mc.cores = 1L)
[13:22:38.853]                   }
[13:22:38.853]                   options(future.plan = NULL)
[13:22:38.853]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.853]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.853]                 }
[13:22:38.853]                 ...future.workdir <- getwd()
[13:22:38.853]             }
[13:22:38.853]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.853]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.853]         }
[13:22:38.853]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.853]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.853]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.853]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.853]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.853]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.853]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.853]             base::names(...future.oldOptions))
[13:22:38.853]     }
[13:22:38.853]     if (FALSE) {
[13:22:38.853]     }
[13:22:38.853]     else {
[13:22:38.853]         if (TRUE) {
[13:22:38.853]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.853]                 open = "w")
[13:22:38.853]         }
[13:22:38.853]         else {
[13:22:38.853]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.853]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.853]         }
[13:22:38.853]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.853]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.853]             base::sink(type = "output", split = FALSE)
[13:22:38.853]             base::close(...future.stdout)
[13:22:38.853]         }, add = TRUE)
[13:22:38.853]     }
[13:22:38.853]     ...future.frame <- base::sys.nframe()
[13:22:38.853]     ...future.conditions <- base::list()
[13:22:38.853]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.853]     if (FALSE) {
[13:22:38.853]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.853]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.853]     }
[13:22:38.853]     ...future.result <- base::tryCatch({
[13:22:38.853]         base::withCallingHandlers({
[13:22:38.853]             ...future.value <- base::withVisible(base::local({
[13:22:38.853]                 withCallingHandlers({
[13:22:38.853]                   {
[13:22:38.853]                     do.call(function(...) {
[13:22:38.853]                       fcn <- function() sum(...)
[13:22:38.853]                       fcn()
[13:22:38.853]                     }, args = future.call.arguments)
[13:22:38.853]                   }
[13:22:38.853]                 }, immediateCondition = function(cond) {
[13:22:38.853]                   save_rds <- function (object, pathname, ...) 
[13:22:38.853]                   {
[13:22:38.853]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.853]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.853]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.853]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.853]                         fi_tmp[["mtime"]])
[13:22:38.853]                     }
[13:22:38.853]                     tryCatch({
[13:22:38.853]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.853]                     }, error = function(ex) {
[13:22:38.853]                       msg <- conditionMessage(ex)
[13:22:38.853]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.853]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.853]                         fi_tmp[["mtime"]], msg)
[13:22:38.853]                       ex$message <- msg
[13:22:38.853]                       stop(ex)
[13:22:38.853]                     })
[13:22:38.853]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.853]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.853]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.853]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.853]                       fi <- file.info(pathname)
[13:22:38.853]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.853]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.853]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.853]                         fi[["size"]], fi[["mtime"]])
[13:22:38.853]                       stop(msg)
[13:22:38.853]                     }
[13:22:38.853]                     invisible(pathname)
[13:22:38.853]                   }
[13:22:38.853]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.853]                     rootPath = tempdir()) 
[13:22:38.853]                   {
[13:22:38.853]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.853]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.853]                       tmpdir = path, fileext = ".rds")
[13:22:38.853]                     save_rds(obj, file)
[13:22:38.853]                   }
[13:22:38.853]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.853]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.853]                   {
[13:22:38.853]                     inherits <- base::inherits
[13:22:38.853]                     invokeRestart <- base::invokeRestart
[13:22:38.853]                     is.null <- base::is.null
[13:22:38.853]                     muffled <- FALSE
[13:22:38.853]                     if (inherits(cond, "message")) {
[13:22:38.853]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.853]                       if (muffled) 
[13:22:38.853]                         invokeRestart("muffleMessage")
[13:22:38.853]                     }
[13:22:38.853]                     else if (inherits(cond, "warning")) {
[13:22:38.853]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.853]                       if (muffled) 
[13:22:38.853]                         invokeRestart("muffleWarning")
[13:22:38.853]                     }
[13:22:38.853]                     else if (inherits(cond, "condition")) {
[13:22:38.853]                       if (!is.null(pattern)) {
[13:22:38.853]                         computeRestarts <- base::computeRestarts
[13:22:38.853]                         grepl <- base::grepl
[13:22:38.853]                         restarts <- computeRestarts(cond)
[13:22:38.853]                         for (restart in restarts) {
[13:22:38.853]                           name <- restart$name
[13:22:38.853]                           if (is.null(name)) 
[13:22:38.853]                             next
[13:22:38.853]                           if (!grepl(pattern, name)) 
[13:22:38.853]                             next
[13:22:38.853]                           invokeRestart(restart)
[13:22:38.853]                           muffled <- TRUE
[13:22:38.853]                           break
[13:22:38.853]                         }
[13:22:38.853]                       }
[13:22:38.853]                     }
[13:22:38.853]                     invisible(muffled)
[13:22:38.853]                   }
[13:22:38.853]                   muffleCondition(cond)
[13:22:38.853]                 })
[13:22:38.853]             }))
[13:22:38.853]             future::FutureResult(value = ...future.value$value, 
[13:22:38.853]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.853]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.853]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.853]                     ...future.globalenv.names))
[13:22:38.853]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.853]         }, condition = base::local({
[13:22:38.853]             c <- base::c
[13:22:38.853]             inherits <- base::inherits
[13:22:38.853]             invokeRestart <- base::invokeRestart
[13:22:38.853]             length <- base::length
[13:22:38.853]             list <- base::list
[13:22:38.853]             seq.int <- base::seq.int
[13:22:38.853]             signalCondition <- base::signalCondition
[13:22:38.853]             sys.calls <- base::sys.calls
[13:22:38.853]             `[[` <- base::`[[`
[13:22:38.853]             `+` <- base::`+`
[13:22:38.853]             `<<-` <- base::`<<-`
[13:22:38.853]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.853]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.853]                   3L)]
[13:22:38.853]             }
[13:22:38.853]             function(cond) {
[13:22:38.853]                 is_error <- inherits(cond, "error")
[13:22:38.853]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.853]                   NULL)
[13:22:38.853]                 if (is_error) {
[13:22:38.853]                   sessionInformation <- function() {
[13:22:38.853]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.853]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.853]                       search = base::search(), system = base::Sys.info())
[13:22:38.853]                   }
[13:22:38.853]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.853]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.853]                     cond$call), session = sessionInformation(), 
[13:22:38.853]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.853]                   signalCondition(cond)
[13:22:38.853]                 }
[13:22:38.853]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.853]                 "immediateCondition"))) {
[13:22:38.853]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.853]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.853]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.853]                   if (TRUE && !signal) {
[13:22:38.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.853]                     {
[13:22:38.853]                       inherits <- base::inherits
[13:22:38.853]                       invokeRestart <- base::invokeRestart
[13:22:38.853]                       is.null <- base::is.null
[13:22:38.853]                       muffled <- FALSE
[13:22:38.853]                       if (inherits(cond, "message")) {
[13:22:38.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.853]                         if (muffled) 
[13:22:38.853]                           invokeRestart("muffleMessage")
[13:22:38.853]                       }
[13:22:38.853]                       else if (inherits(cond, "warning")) {
[13:22:38.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.853]                         if (muffled) 
[13:22:38.853]                           invokeRestart("muffleWarning")
[13:22:38.853]                       }
[13:22:38.853]                       else if (inherits(cond, "condition")) {
[13:22:38.853]                         if (!is.null(pattern)) {
[13:22:38.853]                           computeRestarts <- base::computeRestarts
[13:22:38.853]                           grepl <- base::grepl
[13:22:38.853]                           restarts <- computeRestarts(cond)
[13:22:38.853]                           for (restart in restarts) {
[13:22:38.853]                             name <- restart$name
[13:22:38.853]                             if (is.null(name)) 
[13:22:38.853]                               next
[13:22:38.853]                             if (!grepl(pattern, name)) 
[13:22:38.853]                               next
[13:22:38.853]                             invokeRestart(restart)
[13:22:38.853]                             muffled <- TRUE
[13:22:38.853]                             break
[13:22:38.853]                           }
[13:22:38.853]                         }
[13:22:38.853]                       }
[13:22:38.853]                       invisible(muffled)
[13:22:38.853]                     }
[13:22:38.853]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.853]                   }
[13:22:38.853]                 }
[13:22:38.853]                 else {
[13:22:38.853]                   if (TRUE) {
[13:22:38.853]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.853]                     {
[13:22:38.853]                       inherits <- base::inherits
[13:22:38.853]                       invokeRestart <- base::invokeRestart
[13:22:38.853]                       is.null <- base::is.null
[13:22:38.853]                       muffled <- FALSE
[13:22:38.853]                       if (inherits(cond, "message")) {
[13:22:38.853]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.853]                         if (muffled) 
[13:22:38.853]                           invokeRestart("muffleMessage")
[13:22:38.853]                       }
[13:22:38.853]                       else if (inherits(cond, "warning")) {
[13:22:38.853]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.853]                         if (muffled) 
[13:22:38.853]                           invokeRestart("muffleWarning")
[13:22:38.853]                       }
[13:22:38.853]                       else if (inherits(cond, "condition")) {
[13:22:38.853]                         if (!is.null(pattern)) {
[13:22:38.853]                           computeRestarts <- base::computeRestarts
[13:22:38.853]                           grepl <- base::grepl
[13:22:38.853]                           restarts <- computeRestarts(cond)
[13:22:38.853]                           for (restart in restarts) {
[13:22:38.853]                             name <- restart$name
[13:22:38.853]                             if (is.null(name)) 
[13:22:38.853]                               next
[13:22:38.853]                             if (!grepl(pattern, name)) 
[13:22:38.853]                               next
[13:22:38.853]                             invokeRestart(restart)
[13:22:38.853]                             muffled <- TRUE
[13:22:38.853]                             break
[13:22:38.853]                           }
[13:22:38.853]                         }
[13:22:38.853]                       }
[13:22:38.853]                       invisible(muffled)
[13:22:38.853]                     }
[13:22:38.853]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.853]                   }
[13:22:38.853]                 }
[13:22:38.853]             }
[13:22:38.853]         }))
[13:22:38.853]     }, error = function(ex) {
[13:22:38.853]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.853]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.853]                 ...future.rng), started = ...future.startTime, 
[13:22:38.853]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.853]             version = "1.8"), class = "FutureResult")
[13:22:38.853]     }, finally = {
[13:22:38.853]         if (!identical(...future.workdir, getwd())) 
[13:22:38.853]             setwd(...future.workdir)
[13:22:38.853]         {
[13:22:38.853]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.853]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.853]             }
[13:22:38.853]             base::options(...future.oldOptions)
[13:22:38.853]             if (.Platform$OS.type == "windows") {
[13:22:38.853]                 old_names <- names(...future.oldEnvVars)
[13:22:38.853]                 envs <- base::Sys.getenv()
[13:22:38.853]                 names <- names(envs)
[13:22:38.853]                 common <- intersect(names, old_names)
[13:22:38.853]                 added <- setdiff(names, old_names)
[13:22:38.853]                 removed <- setdiff(old_names, names)
[13:22:38.853]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.853]                   envs[common]]
[13:22:38.853]                 NAMES <- toupper(changed)
[13:22:38.853]                 args <- list()
[13:22:38.853]                 for (kk in seq_along(NAMES)) {
[13:22:38.853]                   name <- changed[[kk]]
[13:22:38.853]                   NAME <- NAMES[[kk]]
[13:22:38.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.853]                     next
[13:22:38.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.853]                 }
[13:22:38.853]                 NAMES <- toupper(added)
[13:22:38.853]                 for (kk in seq_along(NAMES)) {
[13:22:38.853]                   name <- added[[kk]]
[13:22:38.853]                   NAME <- NAMES[[kk]]
[13:22:38.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.853]                     next
[13:22:38.853]                   args[[name]] <- ""
[13:22:38.853]                 }
[13:22:38.853]                 NAMES <- toupper(removed)
[13:22:38.853]                 for (kk in seq_along(NAMES)) {
[13:22:38.853]                   name <- removed[[kk]]
[13:22:38.853]                   NAME <- NAMES[[kk]]
[13:22:38.853]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.853]                     next
[13:22:38.853]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.853]                 }
[13:22:38.853]                 if (length(args) > 0) 
[13:22:38.853]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.853]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.853]             }
[13:22:38.853]             else {
[13:22:38.853]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.853]             }
[13:22:38.853]             {
[13:22:38.853]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.853]                   0L) {
[13:22:38.853]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.853]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.853]                   base::options(opts)
[13:22:38.853]                 }
[13:22:38.853]                 {
[13:22:38.853]                   {
[13:22:38.853]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.853]                     NULL
[13:22:38.853]                   }
[13:22:38.853]                   options(future.plan = NULL)
[13:22:38.853]                   if (is.na(NA_character_)) 
[13:22:38.853]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.853]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.853]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.853]                     envir = parent.frame()) 
[13:22:38.853]                   {
[13:22:38.853]                     default_workers <- missing(workers)
[13:22:38.853]                     if (is.function(workers)) 
[13:22:38.853]                       workers <- workers()
[13:22:38.853]                     workers <- structure(as.integer(workers), 
[13:22:38.853]                       class = class(workers))
[13:22:38.853]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.853]                       1L)
[13:22:38.853]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.853]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.853]                       if (default_workers) 
[13:22:38.853]                         supportsMulticore(warn = TRUE)
[13:22:38.853]                       return(sequential(..., envir = envir))
[13:22:38.853]                     }
[13:22:38.853]                     oopts <- options(mc.cores = workers)
[13:22:38.853]                     on.exit(options(oopts))
[13:22:38.853]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.853]                       envir = envir)
[13:22:38.853]                     if (!future$lazy) 
[13:22:38.853]                       future <- run(future)
[13:22:38.853]                     invisible(future)
[13:22:38.853]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.853]                 }
[13:22:38.853]             }
[13:22:38.853]         }
[13:22:38.853]     })
[13:22:38.853]     if (TRUE) {
[13:22:38.853]         base::sink(type = "output", split = FALSE)
[13:22:38.853]         if (TRUE) {
[13:22:38.853]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.853]         }
[13:22:38.853]         else {
[13:22:38.853]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.853]         }
[13:22:38.853]         base::close(...future.stdout)
[13:22:38.853]         ...future.stdout <- NULL
[13:22:38.853]     }
[13:22:38.853]     ...future.result$conditions <- ...future.conditions
[13:22:38.853]     ...future.result$finished <- base::Sys.time()
[13:22:38.853]     ...future.result
[13:22:38.853] }
[13:22:38.856] assign_globals() ...
[13:22:38.856] List of 1
[13:22:38.856]  $ future.call.arguments:List of 2
[13:22:38.856]   ..$ : int [1:2] 1 2
[13:22:38.856]   ..$ : num 3
[13:22:38.856]   ..- attr(*, "class")= chr [1:2] "DotDotDotList" "list"
[13:22:38.856]  - attr(*, "where")=List of 1
[13:22:38.856]   ..$ future.call.arguments:<environment: R_EmptyEnv> 
[13:22:38.856]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.856]  - attr(*, "resolved")= logi FALSE
[13:22:38.856]  - attr(*, "total_size")= num 112
[13:22:38.856]  - attr(*, "already-done")= logi TRUE
[13:22:38.860] - copied ‘future.call.arguments’ to environment
[13:22:38.860] assign_globals() ... done
[13:22:38.860] requestCore(): workers = 2
[13:22:38.863] MulticoreFuture started
[13:22:38.863] - Launch lazy future ... done
[13:22:38.863] run() for ‘MulticoreFuture’ ... done
[13:22:38.864] result() for MulticoreFuture ...
[13:22:38.864] plan(): Setting new future strategy stack:
[13:22:38.864] List of future strategies:
[13:22:38.864] 1. sequential:
[13:22:38.864]    - args: function (..., envir = parent.frame())
[13:22:38.864]    - tweaked: FALSE
[13:22:38.864]    - call: NULL
[13:22:38.865] plan(): nbrOfWorkers() = 1
[13:22:38.867] plan(): Setting new future strategy stack:
[13:22:38.867] List of future strategies:
[13:22:38.867] 1. multicore:
[13:22:38.867]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.867]    - tweaked: FALSE
[13:22:38.867]    - call: plan(strategy, substitute = FALSE)
[13:22:38.872] plan(): nbrOfWorkers() = 2
[13:22:38.873] result() for MulticoreFuture ...
[13:22:38.873] result() for MulticoreFuture ... done
[13:22:38.873] result() for MulticoreFuture ... done
[13:22:38.874] result() for MulticoreFuture ...
[13:22:38.874] result() for MulticoreFuture ... done
[1] 6
** Sum function 'F' with plan('multicore') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x563890497800>
Using '...' in a formula
[13:22:38.874] getGlobalsAndPackages() ...
[13:22:38.875] Searching for globals...
[13:22:38.882] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[13:22:38.882] Searching for globals ... DONE
[13:22:38.882] Resolving globals: FALSE
[13:22:38.882] Tweak future expression to call with '...' arguments ...
[13:22:38.883] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:22:38.883] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:38.884] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:22:38.884] 
[13:22:38.884] getGlobalsAndPackages() ... DONE
[13:22:38.884] run() for ‘Future’ ...
[13:22:38.885] - state: ‘created’
[13:22:38.885] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[13:22:38.889] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:38.889] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[13:22:38.889]   - Field: ‘label’
[13:22:38.889]   - Field: ‘local’
[13:22:38.890]   - Field: ‘owner’
[13:22:38.890]   - Field: ‘envir’
[13:22:38.890]   - Field: ‘workers’
[13:22:38.890]   - Field: ‘packages’
[13:22:38.890]   - Field: ‘gc’
[13:22:38.890]   - Field: ‘job’
[13:22:38.890]   - Field: ‘conditions’
[13:22:38.890]   - Field: ‘expr’
[13:22:38.890]   - Field: ‘uuid’
[13:22:38.891]   - Field: ‘seed’
[13:22:38.891]   - Field: ‘version’
[13:22:38.891]   - Field: ‘result’
[13:22:38.891]   - Field: ‘asynchronous’
[13:22:38.891]   - Field: ‘calls’
[13:22:38.891]   - Field: ‘globals’
[13:22:38.891]   - Field: ‘stdout’
[13:22:38.891]   - Field: ‘earlySignal’
[13:22:38.891]   - Field: ‘lazy’
[13:22:38.892]   - Field: ‘state’
[13:22:38.892] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[13:22:38.892] - Launch lazy future ...
[13:22:38.892] Packages needed by the future expression (n = 0): <none>
[13:22:38.892] Packages needed by future strategies (n = 0): <none>
[13:22:38.893] {
[13:22:38.893]     {
[13:22:38.893]         {
[13:22:38.893]             ...future.startTime <- base::Sys.time()
[13:22:38.893]             {
[13:22:38.893]                 {
[13:22:38.893]                   {
[13:22:38.893]                     {
[13:22:38.893]                       base::local({
[13:22:38.893]                         has_future <- base::requireNamespace("future", 
[13:22:38.893]                           quietly = TRUE)
[13:22:38.893]                         if (has_future) {
[13:22:38.893]                           ns <- base::getNamespace("future")
[13:22:38.893]                           version <- ns[[".package"]][["version"]]
[13:22:38.893]                           if (is.null(version)) 
[13:22:38.893]                             version <- utils::packageVersion("future")
[13:22:38.893]                         }
[13:22:38.893]                         else {
[13:22:38.893]                           version <- NULL
[13:22:38.893]                         }
[13:22:38.893]                         if (!has_future || version < "1.8.0") {
[13:22:38.893]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:38.893]                             "", base::R.version$version.string), 
[13:22:38.893]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:38.893]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:38.893]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:38.893]                               "release", "version")], collapse = " "), 
[13:22:38.893]                             hostname = base::Sys.info()[["nodename"]])
[13:22:38.893]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:38.893]                             info)
[13:22:38.893]                           info <- base::paste(info, collapse = "; ")
[13:22:38.893]                           if (!has_future) {
[13:22:38.893]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:38.893]                               info)
[13:22:38.893]                           }
[13:22:38.893]                           else {
[13:22:38.893]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:38.893]                               info, version)
[13:22:38.893]                           }
[13:22:38.893]                           base::stop(msg)
[13:22:38.893]                         }
[13:22:38.893]                       })
[13:22:38.893]                     }
[13:22:38.893]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:38.893]                     base::options(mc.cores = 1L)
[13:22:38.893]                   }
[13:22:38.893]                   options(future.plan = NULL)
[13:22:38.893]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.893]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:38.893]                 }
[13:22:38.893]                 ...future.workdir <- getwd()
[13:22:38.893]             }
[13:22:38.893]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:38.893]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:38.893]         }
[13:22:38.893]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:38.893]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:38.893]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:38.893]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:38.893]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:38.893]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:38.893]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:38.893]             base::names(...future.oldOptions))
[13:22:38.893]     }
[13:22:38.893]     if (FALSE) {
[13:22:38.893]     }
[13:22:38.893]     else {
[13:22:38.893]         if (TRUE) {
[13:22:38.893]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:38.893]                 open = "w")
[13:22:38.893]         }
[13:22:38.893]         else {
[13:22:38.893]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:38.893]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:38.893]         }
[13:22:38.893]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:38.893]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:38.893]             base::sink(type = "output", split = FALSE)
[13:22:38.893]             base::close(...future.stdout)
[13:22:38.893]         }, add = TRUE)
[13:22:38.893]     }
[13:22:38.893]     ...future.frame <- base::sys.nframe()
[13:22:38.893]     ...future.conditions <- base::list()
[13:22:38.893]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:38.893]     if (FALSE) {
[13:22:38.893]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:38.893]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:38.893]     }
[13:22:38.893]     ...future.result <- base::tryCatch({
[13:22:38.893]         base::withCallingHandlers({
[13:22:38.893]             ...future.value <- base::withVisible(base::local({
[13:22:38.893]                 withCallingHandlers({
[13:22:38.893]                   fcn(x, y)
[13:22:38.893]                 }, immediateCondition = function(cond) {
[13:22:38.893]                   save_rds <- function (object, pathname, ...) 
[13:22:38.893]                   {
[13:22:38.893]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[13:22:38.893]                     if (file_test("-f", pathname_tmp)) {
[13:22:38.893]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.893]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[13:22:38.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.893]                         fi_tmp[["mtime"]])
[13:22:38.893]                     }
[13:22:38.893]                     tryCatch({
[13:22:38.893]                       saveRDS(object, file = pathname_tmp, ...)
[13:22:38.893]                     }, error = function(ex) {
[13:22:38.893]                       msg <- conditionMessage(ex)
[13:22:38.893]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.893]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[13:22:38.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.893]                         fi_tmp[["mtime"]], msg)
[13:22:38.893]                       ex$message <- msg
[13:22:38.893]                       stop(ex)
[13:22:38.893]                     })
[13:22:38.893]                     stopifnot(file_test("-f", pathname_tmp))
[13:22:38.893]                     res <- file.rename(from = pathname_tmp, to = pathname)
[13:22:38.893]                     if (!res || file_test("-f", pathname_tmp)) {
[13:22:38.893]                       fi_tmp <- file.info(pathname_tmp)
[13:22:38.893]                       fi <- file.info(pathname)
[13:22:38.893]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[13:22:38.893]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[13:22:38.893]                         fi_tmp[["mtime"]], sQuote(pathname), 
[13:22:38.893]                         fi[["size"]], fi[["mtime"]])
[13:22:38.893]                       stop(msg)
[13:22:38.893]                     }
[13:22:38.893]                     invisible(pathname)
[13:22:38.893]                   }
[13:22:38.893]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[13:22:38.893]                     rootPath = tempdir()) 
[13:22:38.893]                   {
[13:22:38.893]                     obj <- list(time = Sys.time(), condition = cond)
[13:22:38.893]                     file <- tempfile(pattern = class(cond)[1], 
[13:22:38.893]                       tmpdir = path, fileext = ".rds")
[13:22:38.893]                     save_rds(obj, file)
[13:22:38.893]                   }
[13:22:38.893]                   saveImmediateCondition(cond, path = "/tmp/RtmpScBco4/.future/immediateConditions")
[13:22:38.893]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.893]                   {
[13:22:38.893]                     inherits <- base::inherits
[13:22:38.893]                     invokeRestart <- base::invokeRestart
[13:22:38.893]                     is.null <- base::is.null
[13:22:38.893]                     muffled <- FALSE
[13:22:38.893]                     if (inherits(cond, "message")) {
[13:22:38.893]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:38.893]                       if (muffled) 
[13:22:38.893]                         invokeRestart("muffleMessage")
[13:22:38.893]                     }
[13:22:38.893]                     else if (inherits(cond, "warning")) {
[13:22:38.893]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:38.893]                       if (muffled) 
[13:22:38.893]                         invokeRestart("muffleWarning")
[13:22:38.893]                     }
[13:22:38.893]                     else if (inherits(cond, "condition")) {
[13:22:38.893]                       if (!is.null(pattern)) {
[13:22:38.893]                         computeRestarts <- base::computeRestarts
[13:22:38.893]                         grepl <- base::grepl
[13:22:38.893]                         restarts <- computeRestarts(cond)
[13:22:38.893]                         for (restart in restarts) {
[13:22:38.893]                           name <- restart$name
[13:22:38.893]                           if (is.null(name)) 
[13:22:38.893]                             next
[13:22:38.893]                           if (!grepl(pattern, name)) 
[13:22:38.893]                             next
[13:22:38.893]                           invokeRestart(restart)
[13:22:38.893]                           muffled <- TRUE
[13:22:38.893]                           break
[13:22:38.893]                         }
[13:22:38.893]                       }
[13:22:38.893]                     }
[13:22:38.893]                     invisible(muffled)
[13:22:38.893]                   }
[13:22:38.893]                   muffleCondition(cond)
[13:22:38.893]                 })
[13:22:38.893]             }))
[13:22:38.893]             future::FutureResult(value = ...future.value$value, 
[13:22:38.893]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.893]                   ...future.rng), globalenv = if (FALSE) 
[13:22:38.893]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:38.893]                     ...future.globalenv.names))
[13:22:38.893]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:38.893]         }, condition = base::local({
[13:22:38.893]             c <- base::c
[13:22:38.893]             inherits <- base::inherits
[13:22:38.893]             invokeRestart <- base::invokeRestart
[13:22:38.893]             length <- base::length
[13:22:38.893]             list <- base::list
[13:22:38.893]             seq.int <- base::seq.int
[13:22:38.893]             signalCondition <- base::signalCondition
[13:22:38.893]             sys.calls <- base::sys.calls
[13:22:38.893]             `[[` <- base::`[[`
[13:22:38.893]             `+` <- base::`+`
[13:22:38.893]             `<<-` <- base::`<<-`
[13:22:38.893]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:38.893]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:38.893]                   3L)]
[13:22:38.893]             }
[13:22:38.893]             function(cond) {
[13:22:38.893]                 is_error <- inherits(cond, "error")
[13:22:38.893]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:38.893]                   NULL)
[13:22:38.893]                 if (is_error) {
[13:22:38.893]                   sessionInformation <- function() {
[13:22:38.893]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:38.893]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:38.893]                       search = base::search(), system = base::Sys.info())
[13:22:38.893]                   }
[13:22:38.893]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.893]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:38.893]                     cond$call), session = sessionInformation(), 
[13:22:38.893]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:38.893]                   signalCondition(cond)
[13:22:38.893]                 }
[13:22:38.893]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:38.893]                 "immediateCondition"))) {
[13:22:38.893]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:38.893]                   ...future.conditions[[length(...future.conditions) + 
[13:22:38.893]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:38.893]                   if (TRUE && !signal) {
[13:22:38.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.893]                     {
[13:22:38.893]                       inherits <- base::inherits
[13:22:38.893]                       invokeRestart <- base::invokeRestart
[13:22:38.893]                       is.null <- base::is.null
[13:22:38.893]                       muffled <- FALSE
[13:22:38.893]                       if (inherits(cond, "message")) {
[13:22:38.893]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.893]                         if (muffled) 
[13:22:38.893]                           invokeRestart("muffleMessage")
[13:22:38.893]                       }
[13:22:38.893]                       else if (inherits(cond, "warning")) {
[13:22:38.893]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.893]                         if (muffled) 
[13:22:38.893]                           invokeRestart("muffleWarning")
[13:22:38.893]                       }
[13:22:38.893]                       else if (inherits(cond, "condition")) {
[13:22:38.893]                         if (!is.null(pattern)) {
[13:22:38.893]                           computeRestarts <- base::computeRestarts
[13:22:38.893]                           grepl <- base::grepl
[13:22:38.893]                           restarts <- computeRestarts(cond)
[13:22:38.893]                           for (restart in restarts) {
[13:22:38.893]                             name <- restart$name
[13:22:38.893]                             if (is.null(name)) 
[13:22:38.893]                               next
[13:22:38.893]                             if (!grepl(pattern, name)) 
[13:22:38.893]                               next
[13:22:38.893]                             invokeRestart(restart)
[13:22:38.893]                             muffled <- TRUE
[13:22:38.893]                             break
[13:22:38.893]                           }
[13:22:38.893]                         }
[13:22:38.893]                       }
[13:22:38.893]                       invisible(muffled)
[13:22:38.893]                     }
[13:22:38.893]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.893]                   }
[13:22:38.893]                 }
[13:22:38.893]                 else {
[13:22:38.893]                   if (TRUE) {
[13:22:38.893]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:38.893]                     {
[13:22:38.893]                       inherits <- base::inherits
[13:22:38.893]                       invokeRestart <- base::invokeRestart
[13:22:38.893]                       is.null <- base::is.null
[13:22:38.893]                       muffled <- FALSE
[13:22:38.893]                       if (inherits(cond, "message")) {
[13:22:38.893]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:38.893]                         if (muffled) 
[13:22:38.893]                           invokeRestart("muffleMessage")
[13:22:38.893]                       }
[13:22:38.893]                       else if (inherits(cond, "warning")) {
[13:22:38.893]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:38.893]                         if (muffled) 
[13:22:38.893]                           invokeRestart("muffleWarning")
[13:22:38.893]                       }
[13:22:38.893]                       else if (inherits(cond, "condition")) {
[13:22:38.893]                         if (!is.null(pattern)) {
[13:22:38.893]                           computeRestarts <- base::computeRestarts
[13:22:38.893]                           grepl <- base::grepl
[13:22:38.893]                           restarts <- computeRestarts(cond)
[13:22:38.893]                           for (restart in restarts) {
[13:22:38.893]                             name <- restart$name
[13:22:38.893]                             if (is.null(name)) 
[13:22:38.893]                               next
[13:22:38.893]                             if (!grepl(pattern, name)) 
[13:22:38.893]                               next
[13:22:38.893]                             invokeRestart(restart)
[13:22:38.893]                             muffled <- TRUE
[13:22:38.893]                             break
[13:22:38.893]                           }
[13:22:38.893]                         }
[13:22:38.893]                       }
[13:22:38.893]                       invisible(muffled)
[13:22:38.893]                     }
[13:22:38.893]                     muffleCondition(cond, pattern = "^muffle")
[13:22:38.893]                   }
[13:22:38.893]                 }
[13:22:38.893]             }
[13:22:38.893]         }))
[13:22:38.893]     }, error = function(ex) {
[13:22:38.893]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:38.893]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:38.893]                 ...future.rng), started = ...future.startTime, 
[13:22:38.893]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:38.893]             version = "1.8"), class = "FutureResult")
[13:22:38.893]     }, finally = {
[13:22:38.893]         if (!identical(...future.workdir, getwd())) 
[13:22:38.893]             setwd(...future.workdir)
[13:22:38.893]         {
[13:22:38.893]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:38.893]                 ...future.oldOptions$nwarnings <- NULL
[13:22:38.893]             }
[13:22:38.893]             base::options(...future.oldOptions)
[13:22:38.893]             if (.Platform$OS.type == "windows") {
[13:22:38.893]                 old_names <- names(...future.oldEnvVars)
[13:22:38.893]                 envs <- base::Sys.getenv()
[13:22:38.893]                 names <- names(envs)
[13:22:38.893]                 common <- intersect(names, old_names)
[13:22:38.893]                 added <- setdiff(names, old_names)
[13:22:38.893]                 removed <- setdiff(old_names, names)
[13:22:38.893]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:38.893]                   envs[common]]
[13:22:38.893]                 NAMES <- toupper(changed)
[13:22:38.893]                 args <- list()
[13:22:38.893]                 for (kk in seq_along(NAMES)) {
[13:22:38.893]                   name <- changed[[kk]]
[13:22:38.893]                   NAME <- NAMES[[kk]]
[13:22:38.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.893]                     next
[13:22:38.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.893]                 }
[13:22:38.893]                 NAMES <- toupper(added)
[13:22:38.893]                 for (kk in seq_along(NAMES)) {
[13:22:38.893]                   name <- added[[kk]]
[13:22:38.893]                   NAME <- NAMES[[kk]]
[13:22:38.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.893]                     next
[13:22:38.893]                   args[[name]] <- ""
[13:22:38.893]                 }
[13:22:38.893]                 NAMES <- toupper(removed)
[13:22:38.893]                 for (kk in seq_along(NAMES)) {
[13:22:38.893]                   name <- removed[[kk]]
[13:22:38.893]                   NAME <- NAMES[[kk]]
[13:22:38.893]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:38.893]                     next
[13:22:38.893]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:38.893]                 }
[13:22:38.893]                 if (length(args) > 0) 
[13:22:38.893]                   base::do.call(base::Sys.setenv, args = args)
[13:22:38.893]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:38.893]             }
[13:22:38.893]             else {
[13:22:38.893]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:38.893]             }
[13:22:38.893]             {
[13:22:38.893]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:38.893]                   0L) {
[13:22:38.893]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:38.893]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:38.893]                   base::options(opts)
[13:22:38.893]                 }
[13:22:38.893]                 {
[13:22:38.893]                   {
[13:22:38.893]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:38.893]                     NULL
[13:22:38.893]                   }
[13:22:38.893]                   options(future.plan = NULL)
[13:22:38.893]                   if (is.na(NA_character_)) 
[13:22:38.893]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:38.893]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:38.893]                   future::plan(list(function (..., workers = availableCores(constraints = "multicore"), 
[13:22:38.893]                     envir = parent.frame()) 
[13:22:38.893]                   {
[13:22:38.893]                     default_workers <- missing(workers)
[13:22:38.893]                     if (is.function(workers)) 
[13:22:38.893]                       workers <- workers()
[13:22:38.893]                     workers <- structure(as.integer(workers), 
[13:22:38.893]                       class = class(workers))
[13:22:38.893]                     stop_if_not(is.finite(workers), workers >= 
[13:22:38.893]                       1L)
[13:22:38.893]                     if ((workers == 1L && !inherits(workers, 
[13:22:38.893]                       "AsIs")) || !supportsMulticore(warn = TRUE)) {
[13:22:38.893]                       if (default_workers) 
[13:22:38.893]                         supportsMulticore(warn = TRUE)
[13:22:38.893]                       return(sequential(..., envir = envir))
[13:22:38.893]                     }
[13:22:38.893]                     oopts <- options(mc.cores = workers)
[13:22:38.893]                     on.exit(options(oopts))
[13:22:38.893]                     future <- MulticoreFuture(..., workers = workers, 
[13:22:38.893]                       envir = envir)
[13:22:38.893]                     if (!future$lazy) 
[13:22:38.893]                       future <- run(future)
[13:22:38.893]                     invisible(future)
[13:22:38.893]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:38.893]                 }
[13:22:38.893]             }
[13:22:38.893]         }
[13:22:38.893]     })
[13:22:38.893]     if (TRUE) {
[13:22:38.893]         base::sink(type = "output", split = FALSE)
[13:22:38.893]         if (TRUE) {
[13:22:38.893]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:38.893]         }
[13:22:38.893]         else {
[13:22:38.893]             ...future.result["stdout"] <- base::list(NULL)
[13:22:38.893]         }
[13:22:38.893]         base::close(...future.stdout)
[13:22:38.893]         ...future.stdout <- NULL
[13:22:38.893]     }
[13:22:38.893]     ...future.result$conditions <- ...future.conditions
[13:22:38.893]     ...future.result$finished <- base::Sys.time()
[13:22:38.893]     ...future.result
[13:22:38.893] }
[13:22:38.895] assign_globals() ...
[13:22:38.895] List of 3
[13:22:38.895]  $ fcn:function (x, y)  
[13:22:38.895]  $ x  : int [1:2] 1 2
[13:22:38.895]  $ y  : num 3
[13:22:38.895]  - attr(*, "where")=List of 3
[13:22:38.895]   ..$ fcn:<environment: R_EmptyEnv> 
[13:22:38.895]   ..$ x  :<environment: R_EmptyEnv> 
[13:22:38.895]   ..$ y  :<environment: R_EmptyEnv> 
[13:22:38.895]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[13:22:38.895]  - attr(*, "resolved")= logi FALSE
[13:22:38.895]  - attr(*, "total_size")= num 4280
[13:22:38.895]  - attr(*, "already-done")= logi TRUE
[13:22:38.900] - reassign environment for ‘fcn’
[13:22:38.900] - copied ‘fcn’ to environment
[13:22:38.900] - copied ‘x’ to environment
[13:22:38.900] - copied ‘y’ to environment
[13:22:38.900] assign_globals() ... done
[13:22:38.900] requestCore(): workers = 2
[13:22:38.903] MulticoreFuture started
[13:22:38.903] - Launch lazy future ... done
[13:22:38.903] run() for ‘MulticoreFuture’ ... done
[13:22:38.903] result() for MulticoreFuture ...
[13:22:38.904] plan(): Setting new future strategy stack:
[13:22:38.904] List of future strategies:
[13:22:38.904] 1. sequential:
[13:22:38.904]    - args: function (..., envir = parent.frame())
[13:22:38.904]    - tweaked: FALSE
[13:22:38.904]    - call: NULL
[13:22:38.905] plan(): nbrOfWorkers() = 1
[13:22:38.907] plan(): Setting new future strategy stack:
[13:22:38.907] List of future strategies:
[13:22:38.907] 1. multicore:
[13:22:38.907]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[13:22:38.907]    - tweaked: FALSE
[13:22:38.907]    - call: plan(strategy, substitute = FALSE)
[13:22:38.912] plan(): nbrOfWorkers() = 2
[13:22:38.913] result() for MulticoreFuture ...
[13:22:38.914] result() for MulticoreFuture ... done
[13:22:38.914] result() for MulticoreFuture ... done
[13:22:38.914] result() for MulticoreFuture ...
[13:22:38.914] result() for MulticoreFuture ... done
[1] 6
- plan('multisession') ...
[13:22:38.915] plan(): Setting new future strategy stack:
[13:22:38.915] List of future strategies:
[13:22:38.915] 1. multisession:
[13:22:38.915]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:38.915]    - tweaked: FALSE
[13:22:38.915]    - call: plan(strategy, substitute = FALSE)
[13:22:38.915] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[13:22:38.916] multisession:
[13:22:38.916] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[13:22:38.916] - tweaked: FALSE
[13:22:38.916] - call: plan(strategy, substitute = FALSE)
[13:22:38.922] getGlobalsAndPackages() ...
[13:22:38.923] Not searching for globals
[13:22:38.923] - globals: [0] <none>
[13:22:38.923] getGlobalsAndPackages() ... DONE
[13:22:38.924] [local output] makeClusterPSOCK() ...
[13:22:38.974] [local output] Workers: [n = 2] ‘localhost’, ‘localhost’
[13:22:38.975] [local output] Base port: 11987
[13:22:38.975] [local output] Getting setup options for 2 cluster nodes ...
[13:22:38.975] [local output]  - Node 1 of 2 ...
[13:22:38.976] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:38.976] Testing if worker's PID can be inferred: ‘'/usr/local/lib/R/bin/Rscript' -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpScBco4/worker.rank=1.parallelly.parent=82284.1416c2ae6d717.pid")), silent = TRUE)' -e 'file.exists("/tmp/RtmpScBco4/worker.rank=1.parallelly.parent=82284.1416c2ae6d717.pid")'’
[13:22:39.171] - Possible to infer worker's PID: TRUE
[13:22:39.172] [local output] Rscript port: 11987

[13:22:39.172] [local output]  - Node 2 of 2 ...
[13:22:39.173] [local output] localMachine=TRUE => revtunnel=FALSE

[13:22:39.173] [local output] Rscript port: 11987

[13:22:39.174] [local output] Getting setup options for 2 cluster nodes ... done
[13:22:39.174] [local output]  - Parallel setup requested for some PSOCK nodes
[13:22:39.174] [local output] Setting up PSOCK nodes in parallel
[13:22:39.174] List of 36
[13:22:39.174]  $ worker          : chr "localhost"
[13:22:39.174]   ..- attr(*, "localhost")= logi TRUE
[13:22:39.174]  $ master          : chr "localhost"
[13:22:39.174]  $ port            : int 11987
[13:22:39.174]  $ connectTimeout  : num 120
[13:22:39.174]  $ timeout         : num 2592000
[13:22:39.174]  $ rscript         : chr "'/usr/local/lib/R/bin/Rscript'"
[13:22:39.174]  $ homogeneous     : logi TRUE
[13:22:39.174]  $ rscript_args    : chr "--default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),fi"| __truncated__
[13:22:39.174]  $ rscript_envs    : NULL
[13:22:39.174]  $ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:39.174]  $ rscript_startup : NULL
[13:22:39.174]  $ rscript_sh      : chr "sh"
[13:22:39.174]  $ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:39.174]  $ methods         : logi TRUE
[13:22:39.174]  $ socketOptions   : chr "no-delay"
[13:22:39.174]  $ useXDR          : logi FALSE
[13:22:39.174]  $ outfile         : chr "/dev/null"
[13:22:39.174]  $ renice          : int NA
[13:22:39.174]  $ rshcmd          : NULL
[13:22:39.174]  $ user            : chr(0) 
[13:22:39.174]  $ revtunnel       : logi FALSE
[13:22:39.174]  $ rshlogfile      : NULL
[13:22:39.174]  $ rshopts         : chr(0) 
[13:22:39.174]  $ rank            : int 1
[13:22:39.174]  $ manual          : logi FALSE
[13:22:39.174]  $ dryrun          : logi FALSE
[13:22:39.174]  $ quiet           : logi FALSE
[13:22:39.174]  $ setup_strategy  : chr "parallel"
[13:22:39.174]  $ local_cmd       : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:39.174]  $ pidfile         : chr "/tmp/RtmpScBco4/worker.rank=1.parallelly.parent=82284.1416c2ae6d717.pid"
[13:22:39.174]  $ rshcmd_label    : NULL
[13:22:39.174]  $ rsh_call        : NULL
[13:22:39.174]  $ cmd             : chr "'/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppr"| __truncated__
[13:22:39.174]  $ localMachine    : logi TRUE
[13:22:39.174]  $ make_fcn        :function (worker = getOption2("parallelly.localhost.hostname", "localhost"), 
[13:22:39.174]     master = NULL, port, connectTimeout = getOption2("parallelly.makeNodePSOCK.connectTimeout", 
[13:22:39.174]         2 * 60), timeout = getOption2("parallelly.makeNodePSOCK.timeout", 
[13:22:39.174]         30 * 24 * 60 * 60), rscript = NULL, homogeneous = NULL, rscript_args = NULL, 
[13:22:39.174]     rscript_envs = NULL, rscript_libs = NULL, rscript_startup = NULL, rscript_sh = c("auto", 
[13:22:39.174]         "cmd", "sh"), default_packages = c("datasets", "utils", "grDevices", 
[13:22:39.174]         "graphics", "stats", if (methods) "methods"), methods = TRUE, socketOptions = getOption2("parallelly.makeNodePSOCK.socketOptions", 
[13:22:39.174]         "no-delay"), useXDR = getOption2("parallelly.makeNodePSOCK.useXDR", 
[13:22:39.174]         FALSE), outfile = "/dev/null", renice = NA_integer_, rshcmd = getOption2("parallelly.makeNodePSOCK.rshcmd", 
[13:22:39.174]         NULL), user = NULL, revtunnel = NA, rshlogfile = NULL, rshopts = getOption2("parallelly.makeNodePSOCK.rshopts", 
[13:22:39.174]         NULL), rank = 1L, manual = FALSE, dryrun = FALSE, quiet = FALSE, 
[13:22:39.174]     setup_strategy = getOption2("parallelly.makeNodePSOCK.setup_strategy", 
[13:22:39.174]         "parallel"), action = c("launch", "options"), verbose = FALSE)  
[13:22:39.174]  $ arguments       :List of 28
[13:22:39.174]   ..$ worker          : chr "localhost"
[13:22:39.174]   ..$ master          : NULL
[13:22:39.174]   ..$ port            : int 11987
[13:22:39.174]   ..$ connectTimeout  : num 120
[13:22:39.174]   ..$ timeout         : num 2592000
[13:22:39.174]   ..$ rscript         : NULL
[13:22:39.174]   ..$ homogeneous     : NULL
[13:22:39.174]   ..$ rscript_args    : NULL
[13:22:39.174]   ..$ rscript_envs    : NULL
[13:22:39.174]   ..$ rscript_libs    : chr [1:2] "/usr/local/lib/R/site-library" "/usr/local/lib/R/library"
[13:22:39.174]   ..$ rscript_startup : NULL
[13:22:39.174]   ..$ rscript_sh      : chr [1:3] "auto" "cmd" "sh"
[13:22:39.174]   ..$ default_packages: chr [1:6] "datasets" "utils" "grDevices" "graphics" ...
[13:22:39.174]   ..$ methods         : logi TRUE
[13:22:39.174]   ..$ socketOptions   : chr "no-delay"
[13:22:39.174]   ..$ useXDR          : logi FALSE
[13:22:39.174]   ..$ outfile         : chr "/dev/null"
[13:22:39.174]   ..$ renice          : int NA
[13:22:39.174]   ..$ rshcmd          : NULL
[13:22:39.174]   ..$ user            : NULL
[13:22:39.174]   ..$ revtunnel       : logi NA
[13:22:39.174]   ..$ rshlogfile      : NULL
[13:22:39.174]   ..$ rshopts         : NULL
[13:22:39.174]   ..$ rank            : int 1
[13:22:39.174]   ..$ manual          : logi FALSE
[13:22:39.174]   ..$ dryrun          : logi FALSE
[13:22:39.174]   ..$ quiet           : logi FALSE
[13:22:39.174]   ..$ setup_strategy  : chr "parallel"
[13:22:39.174]  - attr(*, "class")= chr [1:2] "makeNodePSOCKOptions" "makeNodeOptions"
[13:22:39.191] [local output] System call to launch all workers:
[13:22:39.192] [local output] '/usr/local/lib/R/bin/Rscript' --default-packages=datasets,utils,grDevices,graphics,stats,methods -e 'try(suppressWarnings(cat(Sys.getpid(),file="/tmp/RtmpScBco4/worker.rank=1.parallelly.parent=82284.1416c2ae6d717.pid")), silent = TRUE)' -e 'options(socketOptions = "no-delay")' -e '.libPaths(c("/usr/local/lib/R/site-library","/usr/local/lib/R/library"))' -e 'workRSOCK <- tryCatch(parallel:::.workRSOCK, error=function(e) parallel:::.slaveRSOCK); workRSOCK()' MASTER=localhost PORT=11987 OUT=/dev/null TIMEOUT=2592000 XDR=FALSE SETUPTIMEOUT=120 SETUPSTRATEGY=parallel
[13:22:39.192] [local output] Starting PSOCK main server
[13:22:39.197] [local output] Workers launched
[13:22:39.198] [local output] Waiting for workers to connect back
[13:22:39.198]  - [local output] 0 workers out of 2 ready
[13:22:39.448]  - [local output] 0 workers out of 2 ready
[13:22:39.449]  - [local output] 1 workers out of 2 ready
[13:22:39.449]  - [local output] 2 workers out of 2 ready
[13:22:39.449] [local output] Launching of workers completed
[13:22:39.450] [local output] Collecting session information from workers
[13:22:39.450] [local output]  - Worker #1 of 2
[13:22:39.451] [local output]  - Worker #2 of 2
[13:22:39.451] [local output] makeClusterPSOCK() ... done
[13:22:39.463] Packages needed by the future expression (n = 0): <none>
[13:22:39.463] Packages needed by future strategies (n = 0): <none>
[13:22:39.463] {
[13:22:39.463]     {
[13:22:39.463]         {
[13:22:39.463]             ...future.startTime <- base::Sys.time()
[13:22:39.463]             {
[13:22:39.463]                 {
[13:22:39.463]                   {
[13:22:39.463]                     {
[13:22:39.463]                       base::local({
[13:22:39.463]                         has_future <- base::requireNamespace("future", 
[13:22:39.463]                           quietly = TRUE)
[13:22:39.463]                         if (has_future) {
[13:22:39.463]                           ns <- base::getNamespace("future")
[13:22:39.463]                           version <- ns[[".package"]][["version"]]
[13:22:39.463]                           if (is.null(version)) 
[13:22:39.463]                             version <- utils::packageVersion("future")
[13:22:39.463]                         }
[13:22:39.463]                         else {
[13:22:39.463]                           version <- NULL
[13:22:39.463]                         }
[13:22:39.463]                         if (!has_future || version < "1.8.0") {
[13:22:39.463]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.463]                             "", base::R.version$version.string), 
[13:22:39.463]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.463]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.463]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.463]                               "release", "version")], collapse = " "), 
[13:22:39.463]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.463]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.463]                             info)
[13:22:39.463]                           info <- base::paste(info, collapse = "; ")
[13:22:39.463]                           if (!has_future) {
[13:22:39.463]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.463]                               info)
[13:22:39.463]                           }
[13:22:39.463]                           else {
[13:22:39.463]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.463]                               info, version)
[13:22:39.463]                           }
[13:22:39.463]                           base::stop(msg)
[13:22:39.463]                         }
[13:22:39.463]                       })
[13:22:39.463]                     }
[13:22:39.463]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.463]                     base::options(mc.cores = 1L)
[13:22:39.463]                   }
[13:22:39.463]                   options(future.plan = NULL)
[13:22:39.463]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.463]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.463]                 }
[13:22:39.463]                 ...future.workdir <- getwd()
[13:22:39.463]             }
[13:22:39.463]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.463]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.463]         }
[13:22:39.463]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.463]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.463]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.463]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.463]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.463]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.463]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.463]             base::names(...future.oldOptions))
[13:22:39.463]     }
[13:22:39.463]     if (FALSE) {
[13:22:39.463]     }
[13:22:39.463]     else {
[13:22:39.463]         if (TRUE) {
[13:22:39.463]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.463]                 open = "w")
[13:22:39.463]         }
[13:22:39.463]         else {
[13:22:39.463]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.463]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.463]         }
[13:22:39.463]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.463]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.463]             base::sink(type = "output", split = FALSE)
[13:22:39.463]             base::close(...future.stdout)
[13:22:39.463]         }, add = TRUE)
[13:22:39.463]     }
[13:22:39.463]     ...future.frame <- base::sys.nframe()
[13:22:39.463]     ...future.conditions <- base::list()
[13:22:39.463]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.463]     if (FALSE) {
[13:22:39.463]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.463]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.463]     }
[13:22:39.463]     ...future.result <- base::tryCatch({
[13:22:39.463]         base::withCallingHandlers({
[13:22:39.463]             ...future.value <- base::withVisible(base::local({
[13:22:39.463]                 ...future.makeSendCondition <- base::local({
[13:22:39.463]                   sendCondition <- NULL
[13:22:39.463]                   function(frame = 1L) {
[13:22:39.463]                     if (is.function(sendCondition)) 
[13:22:39.463]                       return(sendCondition)
[13:22:39.463]                     ns <- getNamespace("parallel")
[13:22:39.463]                     if (exists("sendData", mode = "function", 
[13:22:39.463]                       envir = ns)) {
[13:22:39.463]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.463]                         envir = ns)
[13:22:39.463]                       envir <- sys.frame(frame)
[13:22:39.463]                       master <- NULL
[13:22:39.463]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.463]                         !identical(envir, emptyenv())) {
[13:22:39.463]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.463]                           inherits = FALSE)) {
[13:22:39.463]                           master <- get("master", mode = "list", 
[13:22:39.463]                             envir = envir, inherits = FALSE)
[13:22:39.463]                           if (inherits(master, c("SOCKnode", 
[13:22:39.463]                             "SOCK0node"))) {
[13:22:39.463]                             sendCondition <<- function(cond) {
[13:22:39.463]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.463]                                 success = TRUE)
[13:22:39.463]                               parallel_sendData(master, data)
[13:22:39.463]                             }
[13:22:39.463]                             return(sendCondition)
[13:22:39.463]                           }
[13:22:39.463]                         }
[13:22:39.463]                         frame <- frame + 1L
[13:22:39.463]                         envir <- sys.frame(frame)
[13:22:39.463]                       }
[13:22:39.463]                     }
[13:22:39.463]                     sendCondition <<- function(cond) NULL
[13:22:39.463]                   }
[13:22:39.463]                 })
[13:22:39.463]                 withCallingHandlers({
[13:22:39.463]                   NA
[13:22:39.463]                 }, immediateCondition = function(cond) {
[13:22:39.463]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.463]                   sendCondition(cond)
[13:22:39.463]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.463]                   {
[13:22:39.463]                     inherits <- base::inherits
[13:22:39.463]                     invokeRestart <- base::invokeRestart
[13:22:39.463]                     is.null <- base::is.null
[13:22:39.463]                     muffled <- FALSE
[13:22:39.463]                     if (inherits(cond, "message")) {
[13:22:39.463]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.463]                       if (muffled) 
[13:22:39.463]                         invokeRestart("muffleMessage")
[13:22:39.463]                     }
[13:22:39.463]                     else if (inherits(cond, "warning")) {
[13:22:39.463]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.463]                       if (muffled) 
[13:22:39.463]                         invokeRestart("muffleWarning")
[13:22:39.463]                     }
[13:22:39.463]                     else if (inherits(cond, "condition")) {
[13:22:39.463]                       if (!is.null(pattern)) {
[13:22:39.463]                         computeRestarts <- base::computeRestarts
[13:22:39.463]                         grepl <- base::grepl
[13:22:39.463]                         restarts <- computeRestarts(cond)
[13:22:39.463]                         for (restart in restarts) {
[13:22:39.463]                           name <- restart$name
[13:22:39.463]                           if (is.null(name)) 
[13:22:39.463]                             next
[13:22:39.463]                           if (!grepl(pattern, name)) 
[13:22:39.463]                             next
[13:22:39.463]                           invokeRestart(restart)
[13:22:39.463]                           muffled <- TRUE
[13:22:39.463]                           break
[13:22:39.463]                         }
[13:22:39.463]                       }
[13:22:39.463]                     }
[13:22:39.463]                     invisible(muffled)
[13:22:39.463]                   }
[13:22:39.463]                   muffleCondition(cond)
[13:22:39.463]                 })
[13:22:39.463]             }))
[13:22:39.463]             future::FutureResult(value = ...future.value$value, 
[13:22:39.463]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.463]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.463]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.463]                     ...future.globalenv.names))
[13:22:39.463]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.463]         }, condition = base::local({
[13:22:39.463]             c <- base::c
[13:22:39.463]             inherits <- base::inherits
[13:22:39.463]             invokeRestart <- base::invokeRestart
[13:22:39.463]             length <- base::length
[13:22:39.463]             list <- base::list
[13:22:39.463]             seq.int <- base::seq.int
[13:22:39.463]             signalCondition <- base::signalCondition
[13:22:39.463]             sys.calls <- base::sys.calls
[13:22:39.463]             `[[` <- base::`[[`
[13:22:39.463]             `+` <- base::`+`
[13:22:39.463]             `<<-` <- base::`<<-`
[13:22:39.463]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.463]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.463]                   3L)]
[13:22:39.463]             }
[13:22:39.463]             function(cond) {
[13:22:39.463]                 is_error <- inherits(cond, "error")
[13:22:39.463]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.463]                   NULL)
[13:22:39.463]                 if (is_error) {
[13:22:39.463]                   sessionInformation <- function() {
[13:22:39.463]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.463]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.463]                       search = base::search(), system = base::Sys.info())
[13:22:39.463]                   }
[13:22:39.463]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.463]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.463]                     cond$call), session = sessionInformation(), 
[13:22:39.463]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.463]                   signalCondition(cond)
[13:22:39.463]                 }
[13:22:39.463]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.463]                 "immediateCondition"))) {
[13:22:39.463]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.463]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.463]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.463]                   if (TRUE && !signal) {
[13:22:39.463]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.463]                     {
[13:22:39.463]                       inherits <- base::inherits
[13:22:39.463]                       invokeRestart <- base::invokeRestart
[13:22:39.463]                       is.null <- base::is.null
[13:22:39.463]                       muffled <- FALSE
[13:22:39.463]                       if (inherits(cond, "message")) {
[13:22:39.463]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.463]                         if (muffled) 
[13:22:39.463]                           invokeRestart("muffleMessage")
[13:22:39.463]                       }
[13:22:39.463]                       else if (inherits(cond, "warning")) {
[13:22:39.463]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.463]                         if (muffled) 
[13:22:39.463]                           invokeRestart("muffleWarning")
[13:22:39.463]                       }
[13:22:39.463]                       else if (inherits(cond, "condition")) {
[13:22:39.463]                         if (!is.null(pattern)) {
[13:22:39.463]                           computeRestarts <- base::computeRestarts
[13:22:39.463]                           grepl <- base::grepl
[13:22:39.463]                           restarts <- computeRestarts(cond)
[13:22:39.463]                           for (restart in restarts) {
[13:22:39.463]                             name <- restart$name
[13:22:39.463]                             if (is.null(name)) 
[13:22:39.463]                               next
[13:22:39.463]                             if (!grepl(pattern, name)) 
[13:22:39.463]                               next
[13:22:39.463]                             invokeRestart(restart)
[13:22:39.463]                             muffled <- TRUE
[13:22:39.463]                             break
[13:22:39.463]                           }
[13:22:39.463]                         }
[13:22:39.463]                       }
[13:22:39.463]                       invisible(muffled)
[13:22:39.463]                     }
[13:22:39.463]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.463]                   }
[13:22:39.463]                 }
[13:22:39.463]                 else {
[13:22:39.463]                   if (TRUE) {
[13:22:39.463]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.463]                     {
[13:22:39.463]                       inherits <- base::inherits
[13:22:39.463]                       invokeRestart <- base::invokeRestart
[13:22:39.463]                       is.null <- base::is.null
[13:22:39.463]                       muffled <- FALSE
[13:22:39.463]                       if (inherits(cond, "message")) {
[13:22:39.463]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.463]                         if (muffled) 
[13:22:39.463]                           invokeRestart("muffleMessage")
[13:22:39.463]                       }
[13:22:39.463]                       else if (inherits(cond, "warning")) {
[13:22:39.463]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.463]                         if (muffled) 
[13:22:39.463]                           invokeRestart("muffleWarning")
[13:22:39.463]                       }
[13:22:39.463]                       else if (inherits(cond, "condition")) {
[13:22:39.463]                         if (!is.null(pattern)) {
[13:22:39.463]                           computeRestarts <- base::computeRestarts
[13:22:39.463]                           grepl <- base::grepl
[13:22:39.463]                           restarts <- computeRestarts(cond)
[13:22:39.463]                           for (restart in restarts) {
[13:22:39.463]                             name <- restart$name
[13:22:39.463]                             if (is.null(name)) 
[13:22:39.463]                               next
[13:22:39.463]                             if (!grepl(pattern, name)) 
[13:22:39.463]                               next
[13:22:39.463]                             invokeRestart(restart)
[13:22:39.463]                             muffled <- TRUE
[13:22:39.463]                             break
[13:22:39.463]                           }
[13:22:39.463]                         }
[13:22:39.463]                       }
[13:22:39.463]                       invisible(muffled)
[13:22:39.463]                     }
[13:22:39.463]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.463]                   }
[13:22:39.463]                 }
[13:22:39.463]             }
[13:22:39.463]         }))
[13:22:39.463]     }, error = function(ex) {
[13:22:39.463]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.463]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.463]                 ...future.rng), started = ...future.startTime, 
[13:22:39.463]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.463]             version = "1.8"), class = "FutureResult")
[13:22:39.463]     }, finally = {
[13:22:39.463]         if (!identical(...future.workdir, getwd())) 
[13:22:39.463]             setwd(...future.workdir)
[13:22:39.463]         {
[13:22:39.463]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.463]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.463]             }
[13:22:39.463]             base::options(...future.oldOptions)
[13:22:39.463]             if (.Platform$OS.type == "windows") {
[13:22:39.463]                 old_names <- names(...future.oldEnvVars)
[13:22:39.463]                 envs <- base::Sys.getenv()
[13:22:39.463]                 names <- names(envs)
[13:22:39.463]                 common <- intersect(names, old_names)
[13:22:39.463]                 added <- setdiff(names, old_names)
[13:22:39.463]                 removed <- setdiff(old_names, names)
[13:22:39.463]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.463]                   envs[common]]
[13:22:39.463]                 NAMES <- toupper(changed)
[13:22:39.463]                 args <- list()
[13:22:39.463]                 for (kk in seq_along(NAMES)) {
[13:22:39.463]                   name <- changed[[kk]]
[13:22:39.463]                   NAME <- NAMES[[kk]]
[13:22:39.463]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.463]                     next
[13:22:39.463]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.463]                 }
[13:22:39.463]                 NAMES <- toupper(added)
[13:22:39.463]                 for (kk in seq_along(NAMES)) {
[13:22:39.463]                   name <- added[[kk]]
[13:22:39.463]                   NAME <- NAMES[[kk]]
[13:22:39.463]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.463]                     next
[13:22:39.463]                   args[[name]] <- ""
[13:22:39.463]                 }
[13:22:39.463]                 NAMES <- toupper(removed)
[13:22:39.463]                 for (kk in seq_along(NAMES)) {
[13:22:39.463]                   name <- removed[[kk]]
[13:22:39.463]                   NAME <- NAMES[[kk]]
[13:22:39.463]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.463]                     next
[13:22:39.463]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.463]                 }
[13:22:39.463]                 if (length(args) > 0) 
[13:22:39.463]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.463]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.463]             }
[13:22:39.463]             else {
[13:22:39.463]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.463]             }
[13:22:39.463]             {
[13:22:39.463]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.463]                   0L) {
[13:22:39.463]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.463]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.463]                   base::options(opts)
[13:22:39.463]                 }
[13:22:39.463]                 {
[13:22:39.463]                   {
[13:22:39.463]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.463]                     NULL
[13:22:39.463]                   }
[13:22:39.463]                   options(future.plan = NULL)
[13:22:39.463]                   if (is.na(NA_character_)) 
[13:22:39.463]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.463]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.463]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.463]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.463]                     envir = parent.frame()) 
[13:22:39.463]                   {
[13:22:39.463]                     if (is.function(workers)) 
[13:22:39.463]                       workers <- workers()
[13:22:39.463]                     workers <- structure(as.integer(workers), 
[13:22:39.463]                       class = class(workers))
[13:22:39.463]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.463]                       workers >= 1)
[13:22:39.463]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.463]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.463]                     }
[13:22:39.463]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.463]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.463]                       envir = envir)
[13:22:39.463]                     if (!future$lazy) 
[13:22:39.463]                       future <- run(future)
[13:22:39.463]                     invisible(future)
[13:22:39.463]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.463]                 }
[13:22:39.463]             }
[13:22:39.463]         }
[13:22:39.463]     })
[13:22:39.463]     if (TRUE) {
[13:22:39.463]         base::sink(type = "output", split = FALSE)
[13:22:39.463]         if (TRUE) {
[13:22:39.463]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.463]         }
[13:22:39.463]         else {
[13:22:39.463]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.463]         }
[13:22:39.463]         base::close(...future.stdout)
[13:22:39.463]         ...future.stdout <- NULL
[13:22:39.463]     }
[13:22:39.463]     ...future.result$conditions <- ...future.conditions
[13:22:39.463]     ...future.result$finished <- base::Sys.time()
[13:22:39.463]     ...future.result
[13:22:39.463] }
[13:22:39.519] MultisessionFuture started
[13:22:39.520] result() for ClusterFuture ...
[13:22:39.521] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.521] - Validating connection of MultisessionFuture
[13:22:39.566] - received message: FutureResult
[13:22:39.566] - Received FutureResult
[13:22:39.566] - Erased future from FutureRegistry
[13:22:39.566] result() for ClusterFuture ...
[13:22:39.566] - result already collected: FutureResult
[13:22:39.567] result() for ClusterFuture ... done
[13:22:39.567] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.567] result() for ClusterFuture ... done
[13:22:39.567] result() for ClusterFuture ...
[13:22:39.567] - result already collected: FutureResult
[13:22:39.567] result() for ClusterFuture ... done
[13:22:39.567] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[13:22:39.571] plan(): nbrOfWorkers() = 2
** Sum function 'A' with plan('multisession') ...
function (x, ...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, ...)
    }
    y
}
<bytecode: 0x5638923bfab8>
Arguments '...' exists: TRUE
[13:22:39.572] getGlobalsAndPackages() ...
[13:22:39.572] Searching for globals...
[13:22:39.574] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:39.574] Searching for globals ... DONE
[13:22:39.574] Resolving globals: FALSE
[13:22:39.574] Tweak future expression to call with '...' arguments ...
[13:22:39.574] {
[13:22:39.574]     do.call(function(...) {
[13:22:39.574]         sum(x, ...)
[13:22:39.574]     }, args = future.call.arguments)
[13:22:39.574] }
[13:22:39.575] Tweak future expression to call with '...' arguments ... DONE
[13:22:39.575] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:39.576] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:39.576] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:39.576] 
[13:22:39.576] getGlobalsAndPackages() ... DONE
[13:22:39.577] run() for ‘Future’ ...
[13:22:39.577] - state: ‘created’
[13:22:39.577] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.592] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.592] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.592]   - Field: ‘node’
[13:22:39.592]   - Field: ‘label’
[13:22:39.592]   - Field: ‘local’
[13:22:39.592]   - Field: ‘owner’
[13:22:39.592]   - Field: ‘envir’
[13:22:39.592]   - Field: ‘workers’
[13:22:39.593]   - Field: ‘packages’
[13:22:39.593]   - Field: ‘gc’
[13:22:39.593]   - Field: ‘conditions’
[13:22:39.593]   - Field: ‘persistent’
[13:22:39.593]   - Field: ‘expr’
[13:22:39.593]   - Field: ‘uuid’
[13:22:39.593]   - Field: ‘seed’
[13:22:39.593]   - Field: ‘version’
[13:22:39.593]   - Field: ‘result’
[13:22:39.594]   - Field: ‘asynchronous’
[13:22:39.594]   - Field: ‘calls’
[13:22:39.594]   - Field: ‘globals’
[13:22:39.594]   - Field: ‘stdout’
[13:22:39.594]   - Field: ‘earlySignal’
[13:22:39.594]   - Field: ‘lazy’
[13:22:39.594]   - Field: ‘state’
[13:22:39.594] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.595] - Launch lazy future ...
[13:22:39.595] Packages needed by the future expression (n = 0): <none>
[13:22:39.595] Packages needed by future strategies (n = 0): <none>
[13:22:39.596] {
[13:22:39.596]     {
[13:22:39.596]         {
[13:22:39.596]             ...future.startTime <- base::Sys.time()
[13:22:39.596]             {
[13:22:39.596]                 {
[13:22:39.596]                   {
[13:22:39.596]                     {
[13:22:39.596]                       base::local({
[13:22:39.596]                         has_future <- base::requireNamespace("future", 
[13:22:39.596]                           quietly = TRUE)
[13:22:39.596]                         if (has_future) {
[13:22:39.596]                           ns <- base::getNamespace("future")
[13:22:39.596]                           version <- ns[[".package"]][["version"]]
[13:22:39.596]                           if (is.null(version)) 
[13:22:39.596]                             version <- utils::packageVersion("future")
[13:22:39.596]                         }
[13:22:39.596]                         else {
[13:22:39.596]                           version <- NULL
[13:22:39.596]                         }
[13:22:39.596]                         if (!has_future || version < "1.8.0") {
[13:22:39.596]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.596]                             "", base::R.version$version.string), 
[13:22:39.596]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.596]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.596]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.596]                               "release", "version")], collapse = " "), 
[13:22:39.596]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.596]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.596]                             info)
[13:22:39.596]                           info <- base::paste(info, collapse = "; ")
[13:22:39.596]                           if (!has_future) {
[13:22:39.596]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.596]                               info)
[13:22:39.596]                           }
[13:22:39.596]                           else {
[13:22:39.596]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.596]                               info, version)
[13:22:39.596]                           }
[13:22:39.596]                           base::stop(msg)
[13:22:39.596]                         }
[13:22:39.596]                       })
[13:22:39.596]                     }
[13:22:39.596]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.596]                     base::options(mc.cores = 1L)
[13:22:39.596]                   }
[13:22:39.596]                   options(future.plan = NULL)
[13:22:39.596]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.596]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.596]                 }
[13:22:39.596]                 ...future.workdir <- getwd()
[13:22:39.596]             }
[13:22:39.596]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.596]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.596]         }
[13:22:39.596]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.596]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.596]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.596]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.596]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.596]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.596]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.596]             base::names(...future.oldOptions))
[13:22:39.596]     }
[13:22:39.596]     if (FALSE) {
[13:22:39.596]     }
[13:22:39.596]     else {
[13:22:39.596]         if (TRUE) {
[13:22:39.596]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.596]                 open = "w")
[13:22:39.596]         }
[13:22:39.596]         else {
[13:22:39.596]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.596]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.596]         }
[13:22:39.596]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.596]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.596]             base::sink(type = "output", split = FALSE)
[13:22:39.596]             base::close(...future.stdout)
[13:22:39.596]         }, add = TRUE)
[13:22:39.596]     }
[13:22:39.596]     ...future.frame <- base::sys.nframe()
[13:22:39.596]     ...future.conditions <- base::list()
[13:22:39.596]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.596]     if (FALSE) {
[13:22:39.596]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.596]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.596]     }
[13:22:39.596]     ...future.result <- base::tryCatch({
[13:22:39.596]         base::withCallingHandlers({
[13:22:39.596]             ...future.value <- base::withVisible(base::local({
[13:22:39.596]                 ...future.makeSendCondition <- base::local({
[13:22:39.596]                   sendCondition <- NULL
[13:22:39.596]                   function(frame = 1L) {
[13:22:39.596]                     if (is.function(sendCondition)) 
[13:22:39.596]                       return(sendCondition)
[13:22:39.596]                     ns <- getNamespace("parallel")
[13:22:39.596]                     if (exists("sendData", mode = "function", 
[13:22:39.596]                       envir = ns)) {
[13:22:39.596]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.596]                         envir = ns)
[13:22:39.596]                       envir <- sys.frame(frame)
[13:22:39.596]                       master <- NULL
[13:22:39.596]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.596]                         !identical(envir, emptyenv())) {
[13:22:39.596]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.596]                           inherits = FALSE)) {
[13:22:39.596]                           master <- get("master", mode = "list", 
[13:22:39.596]                             envir = envir, inherits = FALSE)
[13:22:39.596]                           if (inherits(master, c("SOCKnode", 
[13:22:39.596]                             "SOCK0node"))) {
[13:22:39.596]                             sendCondition <<- function(cond) {
[13:22:39.596]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.596]                                 success = TRUE)
[13:22:39.596]                               parallel_sendData(master, data)
[13:22:39.596]                             }
[13:22:39.596]                             return(sendCondition)
[13:22:39.596]                           }
[13:22:39.596]                         }
[13:22:39.596]                         frame <- frame + 1L
[13:22:39.596]                         envir <- sys.frame(frame)
[13:22:39.596]                       }
[13:22:39.596]                     }
[13:22:39.596]                     sendCondition <<- function(cond) NULL
[13:22:39.596]                   }
[13:22:39.596]                 })
[13:22:39.596]                 withCallingHandlers({
[13:22:39.596]                   {
[13:22:39.596]                     do.call(function(...) {
[13:22:39.596]                       sum(x, ...)
[13:22:39.596]                     }, args = future.call.arguments)
[13:22:39.596]                   }
[13:22:39.596]                 }, immediateCondition = function(cond) {
[13:22:39.596]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.596]                   sendCondition(cond)
[13:22:39.596]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.596]                   {
[13:22:39.596]                     inherits <- base::inherits
[13:22:39.596]                     invokeRestart <- base::invokeRestart
[13:22:39.596]                     is.null <- base::is.null
[13:22:39.596]                     muffled <- FALSE
[13:22:39.596]                     if (inherits(cond, "message")) {
[13:22:39.596]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.596]                       if (muffled) 
[13:22:39.596]                         invokeRestart("muffleMessage")
[13:22:39.596]                     }
[13:22:39.596]                     else if (inherits(cond, "warning")) {
[13:22:39.596]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.596]                       if (muffled) 
[13:22:39.596]                         invokeRestart("muffleWarning")
[13:22:39.596]                     }
[13:22:39.596]                     else if (inherits(cond, "condition")) {
[13:22:39.596]                       if (!is.null(pattern)) {
[13:22:39.596]                         computeRestarts <- base::computeRestarts
[13:22:39.596]                         grepl <- base::grepl
[13:22:39.596]                         restarts <- computeRestarts(cond)
[13:22:39.596]                         for (restart in restarts) {
[13:22:39.596]                           name <- restart$name
[13:22:39.596]                           if (is.null(name)) 
[13:22:39.596]                             next
[13:22:39.596]                           if (!grepl(pattern, name)) 
[13:22:39.596]                             next
[13:22:39.596]                           invokeRestart(restart)
[13:22:39.596]                           muffled <- TRUE
[13:22:39.596]                           break
[13:22:39.596]                         }
[13:22:39.596]                       }
[13:22:39.596]                     }
[13:22:39.596]                     invisible(muffled)
[13:22:39.596]                   }
[13:22:39.596]                   muffleCondition(cond)
[13:22:39.596]                 })
[13:22:39.596]             }))
[13:22:39.596]             future::FutureResult(value = ...future.value$value, 
[13:22:39.596]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.596]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.596]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.596]                     ...future.globalenv.names))
[13:22:39.596]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.596]         }, condition = base::local({
[13:22:39.596]             c <- base::c
[13:22:39.596]             inherits <- base::inherits
[13:22:39.596]             invokeRestart <- base::invokeRestart
[13:22:39.596]             length <- base::length
[13:22:39.596]             list <- base::list
[13:22:39.596]             seq.int <- base::seq.int
[13:22:39.596]             signalCondition <- base::signalCondition
[13:22:39.596]             sys.calls <- base::sys.calls
[13:22:39.596]             `[[` <- base::`[[`
[13:22:39.596]             `+` <- base::`+`
[13:22:39.596]             `<<-` <- base::`<<-`
[13:22:39.596]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.596]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.596]                   3L)]
[13:22:39.596]             }
[13:22:39.596]             function(cond) {
[13:22:39.596]                 is_error <- inherits(cond, "error")
[13:22:39.596]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.596]                   NULL)
[13:22:39.596]                 if (is_error) {
[13:22:39.596]                   sessionInformation <- function() {
[13:22:39.596]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.596]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.596]                       search = base::search(), system = base::Sys.info())
[13:22:39.596]                   }
[13:22:39.596]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.596]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.596]                     cond$call), session = sessionInformation(), 
[13:22:39.596]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.596]                   signalCondition(cond)
[13:22:39.596]                 }
[13:22:39.596]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.596]                 "immediateCondition"))) {
[13:22:39.596]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.596]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.596]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.596]                   if (TRUE && !signal) {
[13:22:39.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.596]                     {
[13:22:39.596]                       inherits <- base::inherits
[13:22:39.596]                       invokeRestart <- base::invokeRestart
[13:22:39.596]                       is.null <- base::is.null
[13:22:39.596]                       muffled <- FALSE
[13:22:39.596]                       if (inherits(cond, "message")) {
[13:22:39.596]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.596]                         if (muffled) 
[13:22:39.596]                           invokeRestart("muffleMessage")
[13:22:39.596]                       }
[13:22:39.596]                       else if (inherits(cond, "warning")) {
[13:22:39.596]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.596]                         if (muffled) 
[13:22:39.596]                           invokeRestart("muffleWarning")
[13:22:39.596]                       }
[13:22:39.596]                       else if (inherits(cond, "condition")) {
[13:22:39.596]                         if (!is.null(pattern)) {
[13:22:39.596]                           computeRestarts <- base::computeRestarts
[13:22:39.596]                           grepl <- base::grepl
[13:22:39.596]                           restarts <- computeRestarts(cond)
[13:22:39.596]                           for (restart in restarts) {
[13:22:39.596]                             name <- restart$name
[13:22:39.596]                             if (is.null(name)) 
[13:22:39.596]                               next
[13:22:39.596]                             if (!grepl(pattern, name)) 
[13:22:39.596]                               next
[13:22:39.596]                             invokeRestart(restart)
[13:22:39.596]                             muffled <- TRUE
[13:22:39.596]                             break
[13:22:39.596]                           }
[13:22:39.596]                         }
[13:22:39.596]                       }
[13:22:39.596]                       invisible(muffled)
[13:22:39.596]                     }
[13:22:39.596]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.596]                   }
[13:22:39.596]                 }
[13:22:39.596]                 else {
[13:22:39.596]                   if (TRUE) {
[13:22:39.596]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.596]                     {
[13:22:39.596]                       inherits <- base::inherits
[13:22:39.596]                       invokeRestart <- base::invokeRestart
[13:22:39.596]                       is.null <- base::is.null
[13:22:39.596]                       muffled <- FALSE
[13:22:39.596]                       if (inherits(cond, "message")) {
[13:22:39.596]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.596]                         if (muffled) 
[13:22:39.596]                           invokeRestart("muffleMessage")
[13:22:39.596]                       }
[13:22:39.596]                       else if (inherits(cond, "warning")) {
[13:22:39.596]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.596]                         if (muffled) 
[13:22:39.596]                           invokeRestart("muffleWarning")
[13:22:39.596]                       }
[13:22:39.596]                       else if (inherits(cond, "condition")) {
[13:22:39.596]                         if (!is.null(pattern)) {
[13:22:39.596]                           computeRestarts <- base::computeRestarts
[13:22:39.596]                           grepl <- base::grepl
[13:22:39.596]                           restarts <- computeRestarts(cond)
[13:22:39.596]                           for (restart in restarts) {
[13:22:39.596]                             name <- restart$name
[13:22:39.596]                             if (is.null(name)) 
[13:22:39.596]                               next
[13:22:39.596]                             if (!grepl(pattern, name)) 
[13:22:39.596]                               next
[13:22:39.596]                             invokeRestart(restart)
[13:22:39.596]                             muffled <- TRUE
[13:22:39.596]                             break
[13:22:39.596]                           }
[13:22:39.596]                         }
[13:22:39.596]                       }
[13:22:39.596]                       invisible(muffled)
[13:22:39.596]                     }
[13:22:39.596]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.596]                   }
[13:22:39.596]                 }
[13:22:39.596]             }
[13:22:39.596]         }))
[13:22:39.596]     }, error = function(ex) {
[13:22:39.596]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.596]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.596]                 ...future.rng), started = ...future.startTime, 
[13:22:39.596]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.596]             version = "1.8"), class = "FutureResult")
[13:22:39.596]     }, finally = {
[13:22:39.596]         if (!identical(...future.workdir, getwd())) 
[13:22:39.596]             setwd(...future.workdir)
[13:22:39.596]         {
[13:22:39.596]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.596]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.596]             }
[13:22:39.596]             base::options(...future.oldOptions)
[13:22:39.596]             if (.Platform$OS.type == "windows") {
[13:22:39.596]                 old_names <- names(...future.oldEnvVars)
[13:22:39.596]                 envs <- base::Sys.getenv()
[13:22:39.596]                 names <- names(envs)
[13:22:39.596]                 common <- intersect(names, old_names)
[13:22:39.596]                 added <- setdiff(names, old_names)
[13:22:39.596]                 removed <- setdiff(old_names, names)
[13:22:39.596]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.596]                   envs[common]]
[13:22:39.596]                 NAMES <- toupper(changed)
[13:22:39.596]                 args <- list()
[13:22:39.596]                 for (kk in seq_along(NAMES)) {
[13:22:39.596]                   name <- changed[[kk]]
[13:22:39.596]                   NAME <- NAMES[[kk]]
[13:22:39.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.596]                     next
[13:22:39.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.596]                 }
[13:22:39.596]                 NAMES <- toupper(added)
[13:22:39.596]                 for (kk in seq_along(NAMES)) {
[13:22:39.596]                   name <- added[[kk]]
[13:22:39.596]                   NAME <- NAMES[[kk]]
[13:22:39.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.596]                     next
[13:22:39.596]                   args[[name]] <- ""
[13:22:39.596]                 }
[13:22:39.596]                 NAMES <- toupper(removed)
[13:22:39.596]                 for (kk in seq_along(NAMES)) {
[13:22:39.596]                   name <- removed[[kk]]
[13:22:39.596]                   NAME <- NAMES[[kk]]
[13:22:39.596]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.596]                     next
[13:22:39.596]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.596]                 }
[13:22:39.596]                 if (length(args) > 0) 
[13:22:39.596]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.596]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.596]             }
[13:22:39.596]             else {
[13:22:39.596]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.596]             }
[13:22:39.596]             {
[13:22:39.596]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.596]                   0L) {
[13:22:39.596]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.596]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.596]                   base::options(opts)
[13:22:39.596]                 }
[13:22:39.596]                 {
[13:22:39.596]                   {
[13:22:39.596]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.596]                     NULL
[13:22:39.596]                   }
[13:22:39.596]                   options(future.plan = NULL)
[13:22:39.596]                   if (is.na(NA_character_)) 
[13:22:39.596]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.596]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.596]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.596]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.596]                     envir = parent.frame()) 
[13:22:39.596]                   {
[13:22:39.596]                     if (is.function(workers)) 
[13:22:39.596]                       workers <- workers()
[13:22:39.596]                     workers <- structure(as.integer(workers), 
[13:22:39.596]                       class = class(workers))
[13:22:39.596]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.596]                       workers >= 1)
[13:22:39.596]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.596]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.596]                     }
[13:22:39.596]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.596]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.596]                       envir = envir)
[13:22:39.596]                     if (!future$lazy) 
[13:22:39.596]                       future <- run(future)
[13:22:39.596]                     invisible(future)
[13:22:39.596]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.596]                 }
[13:22:39.596]             }
[13:22:39.596]         }
[13:22:39.596]     })
[13:22:39.596]     if (TRUE) {
[13:22:39.596]         base::sink(type = "output", split = FALSE)
[13:22:39.596]         if (TRUE) {
[13:22:39.596]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.596]         }
[13:22:39.596]         else {
[13:22:39.596]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.596]         }
[13:22:39.596]         base::close(...future.stdout)
[13:22:39.596]         ...future.stdout <- NULL
[13:22:39.596]     }
[13:22:39.596]     ...future.result$conditions <- ...future.conditions
[13:22:39.596]     ...future.result$finished <- base::Sys.time()
[13:22:39.596]     ...future.result
[13:22:39.596] }
[13:22:39.599] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:22:39.599] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:22:39.599] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.600] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[13:22:39.600] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.600] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:22:39.601] MultisessionFuture started
[13:22:39.601] - Launch lazy future ... done
[13:22:39.601] run() for ‘MultisessionFuture’ ... done
[13:22:39.602] result() for ClusterFuture ...
[13:22:39.602] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.602] - Validating connection of MultisessionFuture
[13:22:39.649] - received message: FutureResult
[13:22:39.650] - Received FutureResult
[13:22:39.650] - Erased future from FutureRegistry
[13:22:39.650] result() for ClusterFuture ...
[13:22:39.650] - result already collected: FutureResult
[13:22:39.650] result() for ClusterFuture ... done
[13:22:39.650] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.650] result() for ClusterFuture ... done
[13:22:39.651] result() for ClusterFuture ...
[13:22:39.651] - result already collected: FutureResult
[13:22:39.651] result() for ClusterFuture ... done
[1] 6
** Sum function 'B' with plan('multisession') ...
function (x, ...) 
{
    sumt <- function(x) {
        message("Arguments '...' exists: ", exists("...", inherits = TRUE))
        y %<-% {
            sum(x, ...)
        }
        y
    }
    sumt(x)
}
<bytecode: 0x563892679f00>
Arguments '...' exists: TRUE
[13:22:39.651] getGlobalsAndPackages() ...
[13:22:39.652] Searching for globals...
[13:22:39.653] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘...’
[13:22:39.654] Searching for globals ... DONE
[13:22:39.654] Resolving globals: FALSE
[13:22:39.654] Tweak future expression to call with '...' arguments ...
[13:22:39.654] {
[13:22:39.654]     do.call(function(...) {
[13:22:39.654]         sum(x, ...)
[13:22:39.654]     }, args = future.call.arguments)
[13:22:39.654] }
[13:22:39.654] Tweak future expression to call with '...' arguments ... DONE
[13:22:39.655] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:39.655] The total size of the 2 globals exported for future expression (‘{; sum(x, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘future.call.arguments’ (56 bytes of class ‘list’)
[13:22:39.655] - globals: [2] ‘x’, ‘future.call.arguments’
[13:22:39.656] 
[13:22:39.656] getGlobalsAndPackages() ... DONE
[13:22:39.656] run() for ‘Future’ ...
[13:22:39.656] - state: ‘created’
[13:22:39.656] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.671] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.671] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.671]   - Field: ‘node’
[13:22:39.672]   - Field: ‘label’
[13:22:39.672]   - Field: ‘local’
[13:22:39.672]   - Field: ‘owner’
[13:22:39.672]   - Field: ‘envir’
[13:22:39.672]   - Field: ‘workers’
[13:22:39.672]   - Field: ‘packages’
[13:22:39.672]   - Field: ‘gc’
[13:22:39.672]   - Field: ‘conditions’
[13:22:39.672]   - Field: ‘persistent’
[13:22:39.672]   - Field: ‘expr’
[13:22:39.673]   - Field: ‘uuid’
[13:22:39.673]   - Field: ‘seed’
[13:22:39.673]   - Field: ‘version’
[13:22:39.673]   - Field: ‘result’
[13:22:39.673]   - Field: ‘asynchronous’
[13:22:39.673]   - Field: ‘calls’
[13:22:39.673]   - Field: ‘globals’
[13:22:39.673]   - Field: ‘stdout’
[13:22:39.674]   - Field: ‘earlySignal’
[13:22:39.674]   - Field: ‘lazy’
[13:22:39.674]   - Field: ‘state’
[13:22:39.674] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.674] - Launch lazy future ...
[13:22:39.674] Packages needed by the future expression (n = 0): <none>
[13:22:39.675] Packages needed by future strategies (n = 0): <none>
[13:22:39.675] {
[13:22:39.675]     {
[13:22:39.675]         {
[13:22:39.675]             ...future.startTime <- base::Sys.time()
[13:22:39.675]             {
[13:22:39.675]                 {
[13:22:39.675]                   {
[13:22:39.675]                     {
[13:22:39.675]                       base::local({
[13:22:39.675]                         has_future <- base::requireNamespace("future", 
[13:22:39.675]                           quietly = TRUE)
[13:22:39.675]                         if (has_future) {
[13:22:39.675]                           ns <- base::getNamespace("future")
[13:22:39.675]                           version <- ns[[".package"]][["version"]]
[13:22:39.675]                           if (is.null(version)) 
[13:22:39.675]                             version <- utils::packageVersion("future")
[13:22:39.675]                         }
[13:22:39.675]                         else {
[13:22:39.675]                           version <- NULL
[13:22:39.675]                         }
[13:22:39.675]                         if (!has_future || version < "1.8.0") {
[13:22:39.675]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.675]                             "", base::R.version$version.string), 
[13:22:39.675]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.675]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.675]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.675]                               "release", "version")], collapse = " "), 
[13:22:39.675]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.675]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.675]                             info)
[13:22:39.675]                           info <- base::paste(info, collapse = "; ")
[13:22:39.675]                           if (!has_future) {
[13:22:39.675]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.675]                               info)
[13:22:39.675]                           }
[13:22:39.675]                           else {
[13:22:39.675]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.675]                               info, version)
[13:22:39.675]                           }
[13:22:39.675]                           base::stop(msg)
[13:22:39.675]                         }
[13:22:39.675]                       })
[13:22:39.675]                     }
[13:22:39.675]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.675]                     base::options(mc.cores = 1L)
[13:22:39.675]                   }
[13:22:39.675]                   options(future.plan = NULL)
[13:22:39.675]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.675]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.675]                 }
[13:22:39.675]                 ...future.workdir <- getwd()
[13:22:39.675]             }
[13:22:39.675]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.675]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.675]         }
[13:22:39.675]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.675]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.675]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.675]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.675]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.675]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.675]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.675]             base::names(...future.oldOptions))
[13:22:39.675]     }
[13:22:39.675]     if (FALSE) {
[13:22:39.675]     }
[13:22:39.675]     else {
[13:22:39.675]         if (TRUE) {
[13:22:39.675]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.675]                 open = "w")
[13:22:39.675]         }
[13:22:39.675]         else {
[13:22:39.675]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.675]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.675]         }
[13:22:39.675]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.675]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.675]             base::sink(type = "output", split = FALSE)
[13:22:39.675]             base::close(...future.stdout)
[13:22:39.675]         }, add = TRUE)
[13:22:39.675]     }
[13:22:39.675]     ...future.frame <- base::sys.nframe()
[13:22:39.675]     ...future.conditions <- base::list()
[13:22:39.675]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.675]     if (FALSE) {
[13:22:39.675]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.675]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.675]     }
[13:22:39.675]     ...future.result <- base::tryCatch({
[13:22:39.675]         base::withCallingHandlers({
[13:22:39.675]             ...future.value <- base::withVisible(base::local({
[13:22:39.675]                 ...future.makeSendCondition <- base::local({
[13:22:39.675]                   sendCondition <- NULL
[13:22:39.675]                   function(frame = 1L) {
[13:22:39.675]                     if (is.function(sendCondition)) 
[13:22:39.675]                       return(sendCondition)
[13:22:39.675]                     ns <- getNamespace("parallel")
[13:22:39.675]                     if (exists("sendData", mode = "function", 
[13:22:39.675]                       envir = ns)) {
[13:22:39.675]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.675]                         envir = ns)
[13:22:39.675]                       envir <- sys.frame(frame)
[13:22:39.675]                       master <- NULL
[13:22:39.675]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.675]                         !identical(envir, emptyenv())) {
[13:22:39.675]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.675]                           inherits = FALSE)) {
[13:22:39.675]                           master <- get("master", mode = "list", 
[13:22:39.675]                             envir = envir, inherits = FALSE)
[13:22:39.675]                           if (inherits(master, c("SOCKnode", 
[13:22:39.675]                             "SOCK0node"))) {
[13:22:39.675]                             sendCondition <<- function(cond) {
[13:22:39.675]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.675]                                 success = TRUE)
[13:22:39.675]                               parallel_sendData(master, data)
[13:22:39.675]                             }
[13:22:39.675]                             return(sendCondition)
[13:22:39.675]                           }
[13:22:39.675]                         }
[13:22:39.675]                         frame <- frame + 1L
[13:22:39.675]                         envir <- sys.frame(frame)
[13:22:39.675]                       }
[13:22:39.675]                     }
[13:22:39.675]                     sendCondition <<- function(cond) NULL
[13:22:39.675]                   }
[13:22:39.675]                 })
[13:22:39.675]                 withCallingHandlers({
[13:22:39.675]                   {
[13:22:39.675]                     do.call(function(...) {
[13:22:39.675]                       sum(x, ...)
[13:22:39.675]                     }, args = future.call.arguments)
[13:22:39.675]                   }
[13:22:39.675]                 }, immediateCondition = function(cond) {
[13:22:39.675]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.675]                   sendCondition(cond)
[13:22:39.675]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.675]                   {
[13:22:39.675]                     inherits <- base::inherits
[13:22:39.675]                     invokeRestart <- base::invokeRestart
[13:22:39.675]                     is.null <- base::is.null
[13:22:39.675]                     muffled <- FALSE
[13:22:39.675]                     if (inherits(cond, "message")) {
[13:22:39.675]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.675]                       if (muffled) 
[13:22:39.675]                         invokeRestart("muffleMessage")
[13:22:39.675]                     }
[13:22:39.675]                     else if (inherits(cond, "warning")) {
[13:22:39.675]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.675]                       if (muffled) 
[13:22:39.675]                         invokeRestart("muffleWarning")
[13:22:39.675]                     }
[13:22:39.675]                     else if (inherits(cond, "condition")) {
[13:22:39.675]                       if (!is.null(pattern)) {
[13:22:39.675]                         computeRestarts <- base::computeRestarts
[13:22:39.675]                         grepl <- base::grepl
[13:22:39.675]                         restarts <- computeRestarts(cond)
[13:22:39.675]                         for (restart in restarts) {
[13:22:39.675]                           name <- restart$name
[13:22:39.675]                           if (is.null(name)) 
[13:22:39.675]                             next
[13:22:39.675]                           if (!grepl(pattern, name)) 
[13:22:39.675]                             next
[13:22:39.675]                           invokeRestart(restart)
[13:22:39.675]                           muffled <- TRUE
[13:22:39.675]                           break
[13:22:39.675]                         }
[13:22:39.675]                       }
[13:22:39.675]                     }
[13:22:39.675]                     invisible(muffled)
[13:22:39.675]                   }
[13:22:39.675]                   muffleCondition(cond)
[13:22:39.675]                 })
[13:22:39.675]             }))
[13:22:39.675]             future::FutureResult(value = ...future.value$value, 
[13:22:39.675]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.675]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.675]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.675]                     ...future.globalenv.names))
[13:22:39.675]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.675]         }, condition = base::local({
[13:22:39.675]             c <- base::c
[13:22:39.675]             inherits <- base::inherits
[13:22:39.675]             invokeRestart <- base::invokeRestart
[13:22:39.675]             length <- base::length
[13:22:39.675]             list <- base::list
[13:22:39.675]             seq.int <- base::seq.int
[13:22:39.675]             signalCondition <- base::signalCondition
[13:22:39.675]             sys.calls <- base::sys.calls
[13:22:39.675]             `[[` <- base::`[[`
[13:22:39.675]             `+` <- base::`+`
[13:22:39.675]             `<<-` <- base::`<<-`
[13:22:39.675]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.675]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.675]                   3L)]
[13:22:39.675]             }
[13:22:39.675]             function(cond) {
[13:22:39.675]                 is_error <- inherits(cond, "error")
[13:22:39.675]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.675]                   NULL)
[13:22:39.675]                 if (is_error) {
[13:22:39.675]                   sessionInformation <- function() {
[13:22:39.675]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.675]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.675]                       search = base::search(), system = base::Sys.info())
[13:22:39.675]                   }
[13:22:39.675]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.675]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.675]                     cond$call), session = sessionInformation(), 
[13:22:39.675]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.675]                   signalCondition(cond)
[13:22:39.675]                 }
[13:22:39.675]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.675]                 "immediateCondition"))) {
[13:22:39.675]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.675]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.675]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.675]                   if (TRUE && !signal) {
[13:22:39.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.675]                     {
[13:22:39.675]                       inherits <- base::inherits
[13:22:39.675]                       invokeRestart <- base::invokeRestart
[13:22:39.675]                       is.null <- base::is.null
[13:22:39.675]                       muffled <- FALSE
[13:22:39.675]                       if (inherits(cond, "message")) {
[13:22:39.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.675]                         if (muffled) 
[13:22:39.675]                           invokeRestart("muffleMessage")
[13:22:39.675]                       }
[13:22:39.675]                       else if (inherits(cond, "warning")) {
[13:22:39.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.675]                         if (muffled) 
[13:22:39.675]                           invokeRestart("muffleWarning")
[13:22:39.675]                       }
[13:22:39.675]                       else if (inherits(cond, "condition")) {
[13:22:39.675]                         if (!is.null(pattern)) {
[13:22:39.675]                           computeRestarts <- base::computeRestarts
[13:22:39.675]                           grepl <- base::grepl
[13:22:39.675]                           restarts <- computeRestarts(cond)
[13:22:39.675]                           for (restart in restarts) {
[13:22:39.675]                             name <- restart$name
[13:22:39.675]                             if (is.null(name)) 
[13:22:39.675]                               next
[13:22:39.675]                             if (!grepl(pattern, name)) 
[13:22:39.675]                               next
[13:22:39.675]                             invokeRestart(restart)
[13:22:39.675]                             muffled <- TRUE
[13:22:39.675]                             break
[13:22:39.675]                           }
[13:22:39.675]                         }
[13:22:39.675]                       }
[13:22:39.675]                       invisible(muffled)
[13:22:39.675]                     }
[13:22:39.675]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.675]                   }
[13:22:39.675]                 }
[13:22:39.675]                 else {
[13:22:39.675]                   if (TRUE) {
[13:22:39.675]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.675]                     {
[13:22:39.675]                       inherits <- base::inherits
[13:22:39.675]                       invokeRestart <- base::invokeRestart
[13:22:39.675]                       is.null <- base::is.null
[13:22:39.675]                       muffled <- FALSE
[13:22:39.675]                       if (inherits(cond, "message")) {
[13:22:39.675]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.675]                         if (muffled) 
[13:22:39.675]                           invokeRestart("muffleMessage")
[13:22:39.675]                       }
[13:22:39.675]                       else if (inherits(cond, "warning")) {
[13:22:39.675]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.675]                         if (muffled) 
[13:22:39.675]                           invokeRestart("muffleWarning")
[13:22:39.675]                       }
[13:22:39.675]                       else if (inherits(cond, "condition")) {
[13:22:39.675]                         if (!is.null(pattern)) {
[13:22:39.675]                           computeRestarts <- base::computeRestarts
[13:22:39.675]                           grepl <- base::grepl
[13:22:39.675]                           restarts <- computeRestarts(cond)
[13:22:39.675]                           for (restart in restarts) {
[13:22:39.675]                             name <- restart$name
[13:22:39.675]                             if (is.null(name)) 
[13:22:39.675]                               next
[13:22:39.675]                             if (!grepl(pattern, name)) 
[13:22:39.675]                               next
[13:22:39.675]                             invokeRestart(restart)
[13:22:39.675]                             muffled <- TRUE
[13:22:39.675]                             break
[13:22:39.675]                           }
[13:22:39.675]                         }
[13:22:39.675]                       }
[13:22:39.675]                       invisible(muffled)
[13:22:39.675]                     }
[13:22:39.675]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.675]                   }
[13:22:39.675]                 }
[13:22:39.675]             }
[13:22:39.675]         }))
[13:22:39.675]     }, error = function(ex) {
[13:22:39.675]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.675]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.675]                 ...future.rng), started = ...future.startTime, 
[13:22:39.675]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.675]             version = "1.8"), class = "FutureResult")
[13:22:39.675]     }, finally = {
[13:22:39.675]         if (!identical(...future.workdir, getwd())) 
[13:22:39.675]             setwd(...future.workdir)
[13:22:39.675]         {
[13:22:39.675]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.675]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.675]             }
[13:22:39.675]             base::options(...future.oldOptions)
[13:22:39.675]             if (.Platform$OS.type == "windows") {
[13:22:39.675]                 old_names <- names(...future.oldEnvVars)
[13:22:39.675]                 envs <- base::Sys.getenv()
[13:22:39.675]                 names <- names(envs)
[13:22:39.675]                 common <- intersect(names, old_names)
[13:22:39.675]                 added <- setdiff(names, old_names)
[13:22:39.675]                 removed <- setdiff(old_names, names)
[13:22:39.675]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.675]                   envs[common]]
[13:22:39.675]                 NAMES <- toupper(changed)
[13:22:39.675]                 args <- list()
[13:22:39.675]                 for (kk in seq_along(NAMES)) {
[13:22:39.675]                   name <- changed[[kk]]
[13:22:39.675]                   NAME <- NAMES[[kk]]
[13:22:39.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.675]                     next
[13:22:39.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.675]                 }
[13:22:39.675]                 NAMES <- toupper(added)
[13:22:39.675]                 for (kk in seq_along(NAMES)) {
[13:22:39.675]                   name <- added[[kk]]
[13:22:39.675]                   NAME <- NAMES[[kk]]
[13:22:39.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.675]                     next
[13:22:39.675]                   args[[name]] <- ""
[13:22:39.675]                 }
[13:22:39.675]                 NAMES <- toupper(removed)
[13:22:39.675]                 for (kk in seq_along(NAMES)) {
[13:22:39.675]                   name <- removed[[kk]]
[13:22:39.675]                   NAME <- NAMES[[kk]]
[13:22:39.675]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.675]                     next
[13:22:39.675]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.675]                 }
[13:22:39.675]                 if (length(args) > 0) 
[13:22:39.675]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.675]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.675]             }
[13:22:39.675]             else {
[13:22:39.675]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.675]             }
[13:22:39.675]             {
[13:22:39.675]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.675]                   0L) {
[13:22:39.675]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.675]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.675]                   base::options(opts)
[13:22:39.675]                 }
[13:22:39.675]                 {
[13:22:39.675]                   {
[13:22:39.675]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.675]                     NULL
[13:22:39.675]                   }
[13:22:39.675]                   options(future.plan = NULL)
[13:22:39.675]                   if (is.na(NA_character_)) 
[13:22:39.675]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.675]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.675]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.675]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.675]                     envir = parent.frame()) 
[13:22:39.675]                   {
[13:22:39.675]                     if (is.function(workers)) 
[13:22:39.675]                       workers <- workers()
[13:22:39.675]                     workers <- structure(as.integer(workers), 
[13:22:39.675]                       class = class(workers))
[13:22:39.675]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.675]                       workers >= 1)
[13:22:39.675]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.675]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.675]                     }
[13:22:39.675]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.675]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.675]                       envir = envir)
[13:22:39.675]                     if (!future$lazy) 
[13:22:39.675]                       future <- run(future)
[13:22:39.675]                     invisible(future)
[13:22:39.675]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.675]                 }
[13:22:39.675]             }
[13:22:39.675]         }
[13:22:39.675]     })
[13:22:39.675]     if (TRUE) {
[13:22:39.675]         base::sink(type = "output", split = FALSE)
[13:22:39.675]         if (TRUE) {
[13:22:39.675]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.675]         }
[13:22:39.675]         else {
[13:22:39.675]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.675]         }
[13:22:39.675]         base::close(...future.stdout)
[13:22:39.675]         ...future.stdout <- NULL
[13:22:39.675]     }
[13:22:39.675]     ...future.result$conditions <- ...future.conditions
[13:22:39.675]     ...future.result$finished <- base::Sys.time()
[13:22:39.675]     ...future.result
[13:22:39.675] }
[13:22:39.678] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:22:39.678] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:22:39.679] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.679] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ...
[13:22:39.679] Exporting ‘future.call.arguments’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.680] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:22:39.680] MultisessionFuture started
[13:22:39.680] - Launch lazy future ... done
[13:22:39.680] run() for ‘MultisessionFuture’ ... done
[13:22:39.681] result() for ClusterFuture ...
[13:22:39.681] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.681] - Validating connection of MultisessionFuture
[13:22:39.729] - received message: FutureResult
[13:22:39.729] - Received FutureResult
[13:22:39.729] - Erased future from FutureRegistry
[13:22:39.729] result() for ClusterFuture ...
[13:22:39.730] - result already collected: FutureResult
[13:22:39.730] result() for ClusterFuture ... done
[13:22:39.730] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.730] result() for ClusterFuture ... done
[13:22:39.730] result() for ClusterFuture ...
[13:22:39.730] - result already collected: FutureResult
[13:22:39.730] result() for ClusterFuture ... done
[1] 6
** Sum function 'C' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y)
    }
    y
}
<bytecode: 0x5638927daf00>
Arguments '...' exists: FALSE
[13:22:39.731] getGlobalsAndPackages() ...
[13:22:39.731] Searching for globals...
[13:22:39.733] - globals found: [4] ‘{’, ‘sum’, ‘x’, ‘y’
[13:22:39.733] Searching for globals ... DONE
[13:22:39.733] Resolving globals: FALSE
[13:22:39.734] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:39.734] The total size of the 2 globals exported for future expression (‘{; sum(x, y); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:39.734] - globals: [2] ‘x’, ‘y’
[13:22:39.734] 
[13:22:39.734] getGlobalsAndPackages() ... DONE
[13:22:39.735] run() for ‘Future’ ...
[13:22:39.735] - state: ‘created’
[13:22:39.735] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.750] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.750] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.750]   - Field: ‘node’
[13:22:39.750]   - Field: ‘label’
[13:22:39.750]   - Field: ‘local’
[13:22:39.751]   - Field: ‘owner’
[13:22:39.751]   - Field: ‘envir’
[13:22:39.751]   - Field: ‘workers’
[13:22:39.751]   - Field: ‘packages’
[13:22:39.751]   - Field: ‘gc’
[13:22:39.751]   - Field: ‘conditions’
[13:22:39.751]   - Field: ‘persistent’
[13:22:39.751]   - Field: ‘expr’
[13:22:39.751]   - Field: ‘uuid’
[13:22:39.752]   - Field: ‘seed’
[13:22:39.752]   - Field: ‘version’
[13:22:39.752]   - Field: ‘result’
[13:22:39.752]   - Field: ‘asynchronous’
[13:22:39.752]   - Field: ‘calls’
[13:22:39.752]   - Field: ‘globals’
[13:22:39.752]   - Field: ‘stdout’
[13:22:39.752]   - Field: ‘earlySignal’
[13:22:39.753]   - Field: ‘lazy’
[13:22:39.753]   - Field: ‘state’
[13:22:39.753] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.753] - Launch lazy future ...
[13:22:39.753] Packages needed by the future expression (n = 0): <none>
[13:22:39.753] Packages needed by future strategies (n = 0): <none>
[13:22:39.754] {
[13:22:39.754]     {
[13:22:39.754]         {
[13:22:39.754]             ...future.startTime <- base::Sys.time()
[13:22:39.754]             {
[13:22:39.754]                 {
[13:22:39.754]                   {
[13:22:39.754]                     {
[13:22:39.754]                       base::local({
[13:22:39.754]                         has_future <- base::requireNamespace("future", 
[13:22:39.754]                           quietly = TRUE)
[13:22:39.754]                         if (has_future) {
[13:22:39.754]                           ns <- base::getNamespace("future")
[13:22:39.754]                           version <- ns[[".package"]][["version"]]
[13:22:39.754]                           if (is.null(version)) 
[13:22:39.754]                             version <- utils::packageVersion("future")
[13:22:39.754]                         }
[13:22:39.754]                         else {
[13:22:39.754]                           version <- NULL
[13:22:39.754]                         }
[13:22:39.754]                         if (!has_future || version < "1.8.0") {
[13:22:39.754]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.754]                             "", base::R.version$version.string), 
[13:22:39.754]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.754]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.754]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.754]                               "release", "version")], collapse = " "), 
[13:22:39.754]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.754]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.754]                             info)
[13:22:39.754]                           info <- base::paste(info, collapse = "; ")
[13:22:39.754]                           if (!has_future) {
[13:22:39.754]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.754]                               info)
[13:22:39.754]                           }
[13:22:39.754]                           else {
[13:22:39.754]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.754]                               info, version)
[13:22:39.754]                           }
[13:22:39.754]                           base::stop(msg)
[13:22:39.754]                         }
[13:22:39.754]                       })
[13:22:39.754]                     }
[13:22:39.754]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.754]                     base::options(mc.cores = 1L)
[13:22:39.754]                   }
[13:22:39.754]                   options(future.plan = NULL)
[13:22:39.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.754]                 }
[13:22:39.754]                 ...future.workdir <- getwd()
[13:22:39.754]             }
[13:22:39.754]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.754]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.754]         }
[13:22:39.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.754]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.754]             base::names(...future.oldOptions))
[13:22:39.754]     }
[13:22:39.754]     if (FALSE) {
[13:22:39.754]     }
[13:22:39.754]     else {
[13:22:39.754]         if (TRUE) {
[13:22:39.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.754]                 open = "w")
[13:22:39.754]         }
[13:22:39.754]         else {
[13:22:39.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.754]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.754]         }
[13:22:39.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.754]             base::sink(type = "output", split = FALSE)
[13:22:39.754]             base::close(...future.stdout)
[13:22:39.754]         }, add = TRUE)
[13:22:39.754]     }
[13:22:39.754]     ...future.frame <- base::sys.nframe()
[13:22:39.754]     ...future.conditions <- base::list()
[13:22:39.754]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.754]     if (FALSE) {
[13:22:39.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.754]     }
[13:22:39.754]     ...future.result <- base::tryCatch({
[13:22:39.754]         base::withCallingHandlers({
[13:22:39.754]             ...future.value <- base::withVisible(base::local({
[13:22:39.754]                 ...future.makeSendCondition <- base::local({
[13:22:39.754]                   sendCondition <- NULL
[13:22:39.754]                   function(frame = 1L) {
[13:22:39.754]                     if (is.function(sendCondition)) 
[13:22:39.754]                       return(sendCondition)
[13:22:39.754]                     ns <- getNamespace("parallel")
[13:22:39.754]                     if (exists("sendData", mode = "function", 
[13:22:39.754]                       envir = ns)) {
[13:22:39.754]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.754]                         envir = ns)
[13:22:39.754]                       envir <- sys.frame(frame)
[13:22:39.754]                       master <- NULL
[13:22:39.754]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.754]                         !identical(envir, emptyenv())) {
[13:22:39.754]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.754]                           inherits = FALSE)) {
[13:22:39.754]                           master <- get("master", mode = "list", 
[13:22:39.754]                             envir = envir, inherits = FALSE)
[13:22:39.754]                           if (inherits(master, c("SOCKnode", 
[13:22:39.754]                             "SOCK0node"))) {
[13:22:39.754]                             sendCondition <<- function(cond) {
[13:22:39.754]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.754]                                 success = TRUE)
[13:22:39.754]                               parallel_sendData(master, data)
[13:22:39.754]                             }
[13:22:39.754]                             return(sendCondition)
[13:22:39.754]                           }
[13:22:39.754]                         }
[13:22:39.754]                         frame <- frame + 1L
[13:22:39.754]                         envir <- sys.frame(frame)
[13:22:39.754]                       }
[13:22:39.754]                     }
[13:22:39.754]                     sendCondition <<- function(cond) NULL
[13:22:39.754]                   }
[13:22:39.754]                 })
[13:22:39.754]                 withCallingHandlers({
[13:22:39.754]                   {
[13:22:39.754]                     sum(x, y)
[13:22:39.754]                   }
[13:22:39.754]                 }, immediateCondition = function(cond) {
[13:22:39.754]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.754]                   sendCondition(cond)
[13:22:39.754]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.754]                   {
[13:22:39.754]                     inherits <- base::inherits
[13:22:39.754]                     invokeRestart <- base::invokeRestart
[13:22:39.754]                     is.null <- base::is.null
[13:22:39.754]                     muffled <- FALSE
[13:22:39.754]                     if (inherits(cond, "message")) {
[13:22:39.754]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.754]                       if (muffled) 
[13:22:39.754]                         invokeRestart("muffleMessage")
[13:22:39.754]                     }
[13:22:39.754]                     else if (inherits(cond, "warning")) {
[13:22:39.754]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.754]                       if (muffled) 
[13:22:39.754]                         invokeRestart("muffleWarning")
[13:22:39.754]                     }
[13:22:39.754]                     else if (inherits(cond, "condition")) {
[13:22:39.754]                       if (!is.null(pattern)) {
[13:22:39.754]                         computeRestarts <- base::computeRestarts
[13:22:39.754]                         grepl <- base::grepl
[13:22:39.754]                         restarts <- computeRestarts(cond)
[13:22:39.754]                         for (restart in restarts) {
[13:22:39.754]                           name <- restart$name
[13:22:39.754]                           if (is.null(name)) 
[13:22:39.754]                             next
[13:22:39.754]                           if (!grepl(pattern, name)) 
[13:22:39.754]                             next
[13:22:39.754]                           invokeRestart(restart)
[13:22:39.754]                           muffled <- TRUE
[13:22:39.754]                           break
[13:22:39.754]                         }
[13:22:39.754]                       }
[13:22:39.754]                     }
[13:22:39.754]                     invisible(muffled)
[13:22:39.754]                   }
[13:22:39.754]                   muffleCondition(cond)
[13:22:39.754]                 })
[13:22:39.754]             }))
[13:22:39.754]             future::FutureResult(value = ...future.value$value, 
[13:22:39.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.754]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.754]                     ...future.globalenv.names))
[13:22:39.754]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.754]         }, condition = base::local({
[13:22:39.754]             c <- base::c
[13:22:39.754]             inherits <- base::inherits
[13:22:39.754]             invokeRestart <- base::invokeRestart
[13:22:39.754]             length <- base::length
[13:22:39.754]             list <- base::list
[13:22:39.754]             seq.int <- base::seq.int
[13:22:39.754]             signalCondition <- base::signalCondition
[13:22:39.754]             sys.calls <- base::sys.calls
[13:22:39.754]             `[[` <- base::`[[`
[13:22:39.754]             `+` <- base::`+`
[13:22:39.754]             `<<-` <- base::`<<-`
[13:22:39.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.754]                   3L)]
[13:22:39.754]             }
[13:22:39.754]             function(cond) {
[13:22:39.754]                 is_error <- inherits(cond, "error")
[13:22:39.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.754]                   NULL)
[13:22:39.754]                 if (is_error) {
[13:22:39.754]                   sessionInformation <- function() {
[13:22:39.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.754]                       search = base::search(), system = base::Sys.info())
[13:22:39.754]                   }
[13:22:39.754]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.754]                     cond$call), session = sessionInformation(), 
[13:22:39.754]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.754]                   signalCondition(cond)
[13:22:39.754]                 }
[13:22:39.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.754]                 "immediateCondition"))) {
[13:22:39.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.754]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.754]                   if (TRUE && !signal) {
[13:22:39.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.754]                     {
[13:22:39.754]                       inherits <- base::inherits
[13:22:39.754]                       invokeRestart <- base::invokeRestart
[13:22:39.754]                       is.null <- base::is.null
[13:22:39.754]                       muffled <- FALSE
[13:22:39.754]                       if (inherits(cond, "message")) {
[13:22:39.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.754]                         if (muffled) 
[13:22:39.754]                           invokeRestart("muffleMessage")
[13:22:39.754]                       }
[13:22:39.754]                       else if (inherits(cond, "warning")) {
[13:22:39.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.754]                         if (muffled) 
[13:22:39.754]                           invokeRestart("muffleWarning")
[13:22:39.754]                       }
[13:22:39.754]                       else if (inherits(cond, "condition")) {
[13:22:39.754]                         if (!is.null(pattern)) {
[13:22:39.754]                           computeRestarts <- base::computeRestarts
[13:22:39.754]                           grepl <- base::grepl
[13:22:39.754]                           restarts <- computeRestarts(cond)
[13:22:39.754]                           for (restart in restarts) {
[13:22:39.754]                             name <- restart$name
[13:22:39.754]                             if (is.null(name)) 
[13:22:39.754]                               next
[13:22:39.754]                             if (!grepl(pattern, name)) 
[13:22:39.754]                               next
[13:22:39.754]                             invokeRestart(restart)
[13:22:39.754]                             muffled <- TRUE
[13:22:39.754]                             break
[13:22:39.754]                           }
[13:22:39.754]                         }
[13:22:39.754]                       }
[13:22:39.754]                       invisible(muffled)
[13:22:39.754]                     }
[13:22:39.754]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.754]                   }
[13:22:39.754]                 }
[13:22:39.754]                 else {
[13:22:39.754]                   if (TRUE) {
[13:22:39.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.754]                     {
[13:22:39.754]                       inherits <- base::inherits
[13:22:39.754]                       invokeRestart <- base::invokeRestart
[13:22:39.754]                       is.null <- base::is.null
[13:22:39.754]                       muffled <- FALSE
[13:22:39.754]                       if (inherits(cond, "message")) {
[13:22:39.754]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.754]                         if (muffled) 
[13:22:39.754]                           invokeRestart("muffleMessage")
[13:22:39.754]                       }
[13:22:39.754]                       else if (inherits(cond, "warning")) {
[13:22:39.754]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.754]                         if (muffled) 
[13:22:39.754]                           invokeRestart("muffleWarning")
[13:22:39.754]                       }
[13:22:39.754]                       else if (inherits(cond, "condition")) {
[13:22:39.754]                         if (!is.null(pattern)) {
[13:22:39.754]                           computeRestarts <- base::computeRestarts
[13:22:39.754]                           grepl <- base::grepl
[13:22:39.754]                           restarts <- computeRestarts(cond)
[13:22:39.754]                           for (restart in restarts) {
[13:22:39.754]                             name <- restart$name
[13:22:39.754]                             if (is.null(name)) 
[13:22:39.754]                               next
[13:22:39.754]                             if (!grepl(pattern, name)) 
[13:22:39.754]                               next
[13:22:39.754]                             invokeRestart(restart)
[13:22:39.754]                             muffled <- TRUE
[13:22:39.754]                             break
[13:22:39.754]                           }
[13:22:39.754]                         }
[13:22:39.754]                       }
[13:22:39.754]                       invisible(muffled)
[13:22:39.754]                     }
[13:22:39.754]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.754]                   }
[13:22:39.754]                 }
[13:22:39.754]             }
[13:22:39.754]         }))
[13:22:39.754]     }, error = function(ex) {
[13:22:39.754]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.754]                 ...future.rng), started = ...future.startTime, 
[13:22:39.754]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.754]             version = "1.8"), class = "FutureResult")
[13:22:39.754]     }, finally = {
[13:22:39.754]         if (!identical(...future.workdir, getwd())) 
[13:22:39.754]             setwd(...future.workdir)
[13:22:39.754]         {
[13:22:39.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.754]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.754]             }
[13:22:39.754]             base::options(...future.oldOptions)
[13:22:39.754]             if (.Platform$OS.type == "windows") {
[13:22:39.754]                 old_names <- names(...future.oldEnvVars)
[13:22:39.754]                 envs <- base::Sys.getenv()
[13:22:39.754]                 names <- names(envs)
[13:22:39.754]                 common <- intersect(names, old_names)
[13:22:39.754]                 added <- setdiff(names, old_names)
[13:22:39.754]                 removed <- setdiff(old_names, names)
[13:22:39.754]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.754]                   envs[common]]
[13:22:39.754]                 NAMES <- toupper(changed)
[13:22:39.754]                 args <- list()
[13:22:39.754]                 for (kk in seq_along(NAMES)) {
[13:22:39.754]                   name <- changed[[kk]]
[13:22:39.754]                   NAME <- NAMES[[kk]]
[13:22:39.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.754]                     next
[13:22:39.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.754]                 }
[13:22:39.754]                 NAMES <- toupper(added)
[13:22:39.754]                 for (kk in seq_along(NAMES)) {
[13:22:39.754]                   name <- added[[kk]]
[13:22:39.754]                   NAME <- NAMES[[kk]]
[13:22:39.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.754]                     next
[13:22:39.754]                   args[[name]] <- ""
[13:22:39.754]                 }
[13:22:39.754]                 NAMES <- toupper(removed)
[13:22:39.754]                 for (kk in seq_along(NAMES)) {
[13:22:39.754]                   name <- removed[[kk]]
[13:22:39.754]                   NAME <- NAMES[[kk]]
[13:22:39.754]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.754]                     next
[13:22:39.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.754]                 }
[13:22:39.754]                 if (length(args) > 0) 
[13:22:39.754]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.754]             }
[13:22:39.754]             else {
[13:22:39.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.754]             }
[13:22:39.754]             {
[13:22:39.754]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.754]                   0L) {
[13:22:39.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.754]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.754]                   base::options(opts)
[13:22:39.754]                 }
[13:22:39.754]                 {
[13:22:39.754]                   {
[13:22:39.754]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.754]                     NULL
[13:22:39.754]                   }
[13:22:39.754]                   options(future.plan = NULL)
[13:22:39.754]                   if (is.na(NA_character_)) 
[13:22:39.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.754]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.754]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.754]                     envir = parent.frame()) 
[13:22:39.754]                   {
[13:22:39.754]                     if (is.function(workers)) 
[13:22:39.754]                       workers <- workers()
[13:22:39.754]                     workers <- structure(as.integer(workers), 
[13:22:39.754]                       class = class(workers))
[13:22:39.754]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.754]                       workers >= 1)
[13:22:39.754]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.754]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.754]                     }
[13:22:39.754]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.754]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.754]                       envir = envir)
[13:22:39.754]                     if (!future$lazy) 
[13:22:39.754]                       future <- run(future)
[13:22:39.754]                     invisible(future)
[13:22:39.754]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.754]                 }
[13:22:39.754]             }
[13:22:39.754]         }
[13:22:39.754]     })
[13:22:39.754]     if (TRUE) {
[13:22:39.754]         base::sink(type = "output", split = FALSE)
[13:22:39.754]         if (TRUE) {
[13:22:39.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.754]         }
[13:22:39.754]         else {
[13:22:39.754]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.754]         }
[13:22:39.754]         base::close(...future.stdout)
[13:22:39.754]         ...future.stdout <- NULL
[13:22:39.754]     }
[13:22:39.754]     ...future.result$conditions <- ...future.conditions
[13:22:39.754]     ...future.result$finished <- base::Sys.time()
[13:22:39.754]     ...future.result
[13:22:39.754] }
[13:22:39.757] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:22:39.757] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:22:39.760] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.760] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:22:39.761] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.761] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:22:39.761] MultisessionFuture started
[13:22:39.761] - Launch lazy future ... done
[13:22:39.761] run() for ‘MultisessionFuture’ ... done
[13:22:39.762] result() for ClusterFuture ...
[13:22:39.762] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.762] - Validating connection of MultisessionFuture
[13:22:39.809] - received message: FutureResult
[13:22:39.809] - Received FutureResult
[13:22:39.810] - Erased future from FutureRegistry
[13:22:39.810] result() for ClusterFuture ...
[13:22:39.810] - result already collected: FutureResult
[13:22:39.810] result() for ClusterFuture ... done
[13:22:39.810] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.810] result() for ClusterFuture ... done
[13:22:39.811] result() for ClusterFuture ...
[13:22:39.811] - result already collected: FutureResult
[13:22:39.811] result() for ClusterFuture ... done
[1] 6
** Sum function 'D' with plan('multisession') ...
function (x, y) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    y %<-% {
        sum(x, y, ...)
    }
    y
}
<bytecode: 0x5638929c45d8>
Arguments '...' exists: FALSE
[13:22:39.811] getGlobalsAndPackages() ...
[13:22:39.812] Searching for globals...
[13:22:39.813] - globals found: [5] ‘{’, ‘sum’, ‘x’, ‘y’, ‘...’
[13:22:39.813] Searching for globals ... DONE
[13:22:39.813] Resolving globals: FALSE
[13:22:39.814] Tweak future expression to call with '...' arguments ...
[13:22:39.814] The total size of the 2 globals is 112 bytes (112 bytes)
[13:22:39.814] The total size of the 2 globals exported for future expression (‘{; sum(x, y, ...); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:39.815] - globals: [2] ‘x’, ‘y’
[13:22:39.815] 
[13:22:39.815] getGlobalsAndPackages() ... DONE
[13:22:39.815] run() for ‘Future’ ...
[13:22:39.815] - state: ‘created’
[13:22:39.815] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.830] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.830] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.830]   - Field: ‘node’
[13:22:39.830]   - Field: ‘label’
[13:22:39.830]   - Field: ‘local’
[13:22:39.830]   - Field: ‘owner’
[13:22:39.830]   - Field: ‘envir’
[13:22:39.830]   - Field: ‘workers’
[13:22:39.831]   - Field: ‘packages’
[13:22:39.831]   - Field: ‘gc’
[13:22:39.831]   - Field: ‘conditions’
[13:22:39.831]   - Field: ‘persistent’
[13:22:39.831]   - Field: ‘expr’
[13:22:39.831]   - Field: ‘uuid’
[13:22:39.831]   - Field: ‘seed’
[13:22:39.831]   - Field: ‘version’
[13:22:39.831]   - Field: ‘result’
[13:22:39.831]   - Field: ‘asynchronous’
[13:22:39.831]   - Field: ‘calls’
[13:22:39.832]   - Field: ‘globals’
[13:22:39.832]   - Field: ‘stdout’
[13:22:39.832]   - Field: ‘earlySignal’
[13:22:39.832]   - Field: ‘lazy’
[13:22:39.832]   - Field: ‘state’
[13:22:39.832] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.832] - Launch lazy future ...
[13:22:39.832] Packages needed by the future expression (n = 0): <none>
[13:22:39.833] Packages needed by future strategies (n = 0): <none>
[13:22:39.833] {
[13:22:39.833]     {
[13:22:39.833]         {
[13:22:39.833]             ...future.startTime <- base::Sys.time()
[13:22:39.833]             {
[13:22:39.833]                 {
[13:22:39.833]                   {
[13:22:39.833]                     {
[13:22:39.833]                       base::local({
[13:22:39.833]                         has_future <- base::requireNamespace("future", 
[13:22:39.833]                           quietly = TRUE)
[13:22:39.833]                         if (has_future) {
[13:22:39.833]                           ns <- base::getNamespace("future")
[13:22:39.833]                           version <- ns[[".package"]][["version"]]
[13:22:39.833]                           if (is.null(version)) 
[13:22:39.833]                             version <- utils::packageVersion("future")
[13:22:39.833]                         }
[13:22:39.833]                         else {
[13:22:39.833]                           version <- NULL
[13:22:39.833]                         }
[13:22:39.833]                         if (!has_future || version < "1.8.0") {
[13:22:39.833]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.833]                             "", base::R.version$version.string), 
[13:22:39.833]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.833]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.833]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.833]                               "release", "version")], collapse = " "), 
[13:22:39.833]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.833]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.833]                             info)
[13:22:39.833]                           info <- base::paste(info, collapse = "; ")
[13:22:39.833]                           if (!has_future) {
[13:22:39.833]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.833]                               info)
[13:22:39.833]                           }
[13:22:39.833]                           else {
[13:22:39.833]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.833]                               info, version)
[13:22:39.833]                           }
[13:22:39.833]                           base::stop(msg)
[13:22:39.833]                         }
[13:22:39.833]                       })
[13:22:39.833]                     }
[13:22:39.833]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.833]                     base::options(mc.cores = 1L)
[13:22:39.833]                   }
[13:22:39.833]                   options(future.plan = NULL)
[13:22:39.833]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.833]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.833]                 }
[13:22:39.833]                 ...future.workdir <- getwd()
[13:22:39.833]             }
[13:22:39.833]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.833]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.833]         }
[13:22:39.833]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.833]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.833]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.833]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.833]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.833]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.833]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.833]             base::names(...future.oldOptions))
[13:22:39.833]     }
[13:22:39.833]     if (FALSE) {
[13:22:39.833]     }
[13:22:39.833]     else {
[13:22:39.833]         if (TRUE) {
[13:22:39.833]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.833]                 open = "w")
[13:22:39.833]         }
[13:22:39.833]         else {
[13:22:39.833]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.833]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.833]         }
[13:22:39.833]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.833]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.833]             base::sink(type = "output", split = FALSE)
[13:22:39.833]             base::close(...future.stdout)
[13:22:39.833]         }, add = TRUE)
[13:22:39.833]     }
[13:22:39.833]     ...future.frame <- base::sys.nframe()
[13:22:39.833]     ...future.conditions <- base::list()
[13:22:39.833]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.833]     if (FALSE) {
[13:22:39.833]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.833]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.833]     }
[13:22:39.833]     ...future.result <- base::tryCatch({
[13:22:39.833]         base::withCallingHandlers({
[13:22:39.833]             ...future.value <- base::withVisible(base::local({
[13:22:39.833]                 ...future.makeSendCondition <- base::local({
[13:22:39.833]                   sendCondition <- NULL
[13:22:39.833]                   function(frame = 1L) {
[13:22:39.833]                     if (is.function(sendCondition)) 
[13:22:39.833]                       return(sendCondition)
[13:22:39.833]                     ns <- getNamespace("parallel")
[13:22:39.833]                     if (exists("sendData", mode = "function", 
[13:22:39.833]                       envir = ns)) {
[13:22:39.833]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.833]                         envir = ns)
[13:22:39.833]                       envir <- sys.frame(frame)
[13:22:39.833]                       master <- NULL
[13:22:39.833]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.833]                         !identical(envir, emptyenv())) {
[13:22:39.833]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.833]                           inherits = FALSE)) {
[13:22:39.833]                           master <- get("master", mode = "list", 
[13:22:39.833]                             envir = envir, inherits = FALSE)
[13:22:39.833]                           if (inherits(master, c("SOCKnode", 
[13:22:39.833]                             "SOCK0node"))) {
[13:22:39.833]                             sendCondition <<- function(cond) {
[13:22:39.833]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.833]                                 success = TRUE)
[13:22:39.833]                               parallel_sendData(master, data)
[13:22:39.833]                             }
[13:22:39.833]                             return(sendCondition)
[13:22:39.833]                           }
[13:22:39.833]                         }
[13:22:39.833]                         frame <- frame + 1L
[13:22:39.833]                         envir <- sys.frame(frame)
[13:22:39.833]                       }
[13:22:39.833]                     }
[13:22:39.833]                     sendCondition <<- function(cond) NULL
[13:22:39.833]                   }
[13:22:39.833]                 })
[13:22:39.833]                 withCallingHandlers({
[13:22:39.833]                   {
[13:22:39.833]                     sum(x, y, ...)
[13:22:39.833]                   }
[13:22:39.833]                 }, immediateCondition = function(cond) {
[13:22:39.833]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.833]                   sendCondition(cond)
[13:22:39.833]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.833]                   {
[13:22:39.833]                     inherits <- base::inherits
[13:22:39.833]                     invokeRestart <- base::invokeRestart
[13:22:39.833]                     is.null <- base::is.null
[13:22:39.833]                     muffled <- FALSE
[13:22:39.833]                     if (inherits(cond, "message")) {
[13:22:39.833]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.833]                       if (muffled) 
[13:22:39.833]                         invokeRestart("muffleMessage")
[13:22:39.833]                     }
[13:22:39.833]                     else if (inherits(cond, "warning")) {
[13:22:39.833]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.833]                       if (muffled) 
[13:22:39.833]                         invokeRestart("muffleWarning")
[13:22:39.833]                     }
[13:22:39.833]                     else if (inherits(cond, "condition")) {
[13:22:39.833]                       if (!is.null(pattern)) {
[13:22:39.833]                         computeRestarts <- base::computeRestarts
[13:22:39.833]                         grepl <- base::grepl
[13:22:39.833]                         restarts <- computeRestarts(cond)
[13:22:39.833]                         for (restart in restarts) {
[13:22:39.833]                           name <- restart$name
[13:22:39.833]                           if (is.null(name)) 
[13:22:39.833]                             next
[13:22:39.833]                           if (!grepl(pattern, name)) 
[13:22:39.833]                             next
[13:22:39.833]                           invokeRestart(restart)
[13:22:39.833]                           muffled <- TRUE
[13:22:39.833]                           break
[13:22:39.833]                         }
[13:22:39.833]                       }
[13:22:39.833]                     }
[13:22:39.833]                     invisible(muffled)
[13:22:39.833]                   }
[13:22:39.833]                   muffleCondition(cond)
[13:22:39.833]                 })
[13:22:39.833]             }))
[13:22:39.833]             future::FutureResult(value = ...future.value$value, 
[13:22:39.833]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.833]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.833]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.833]                     ...future.globalenv.names))
[13:22:39.833]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.833]         }, condition = base::local({
[13:22:39.833]             c <- base::c
[13:22:39.833]             inherits <- base::inherits
[13:22:39.833]             invokeRestart <- base::invokeRestart
[13:22:39.833]             length <- base::length
[13:22:39.833]             list <- base::list
[13:22:39.833]             seq.int <- base::seq.int
[13:22:39.833]             signalCondition <- base::signalCondition
[13:22:39.833]             sys.calls <- base::sys.calls
[13:22:39.833]             `[[` <- base::`[[`
[13:22:39.833]             `+` <- base::`+`
[13:22:39.833]             `<<-` <- base::`<<-`
[13:22:39.833]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.833]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.833]                   3L)]
[13:22:39.833]             }
[13:22:39.833]             function(cond) {
[13:22:39.833]                 is_error <- inherits(cond, "error")
[13:22:39.833]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.833]                   NULL)
[13:22:39.833]                 if (is_error) {
[13:22:39.833]                   sessionInformation <- function() {
[13:22:39.833]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.833]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.833]                       search = base::search(), system = base::Sys.info())
[13:22:39.833]                   }
[13:22:39.833]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.833]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.833]                     cond$call), session = sessionInformation(), 
[13:22:39.833]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.833]                   signalCondition(cond)
[13:22:39.833]                 }
[13:22:39.833]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.833]                 "immediateCondition"))) {
[13:22:39.833]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.833]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.833]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.833]                   if (TRUE && !signal) {
[13:22:39.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.833]                     {
[13:22:39.833]                       inherits <- base::inherits
[13:22:39.833]                       invokeRestart <- base::invokeRestart
[13:22:39.833]                       is.null <- base::is.null
[13:22:39.833]                       muffled <- FALSE
[13:22:39.833]                       if (inherits(cond, "message")) {
[13:22:39.833]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.833]                         if (muffled) 
[13:22:39.833]                           invokeRestart("muffleMessage")
[13:22:39.833]                       }
[13:22:39.833]                       else if (inherits(cond, "warning")) {
[13:22:39.833]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.833]                         if (muffled) 
[13:22:39.833]                           invokeRestart("muffleWarning")
[13:22:39.833]                       }
[13:22:39.833]                       else if (inherits(cond, "condition")) {
[13:22:39.833]                         if (!is.null(pattern)) {
[13:22:39.833]                           computeRestarts <- base::computeRestarts
[13:22:39.833]                           grepl <- base::grepl
[13:22:39.833]                           restarts <- computeRestarts(cond)
[13:22:39.833]                           for (restart in restarts) {
[13:22:39.833]                             name <- restart$name
[13:22:39.833]                             if (is.null(name)) 
[13:22:39.833]                               next
[13:22:39.833]                             if (!grepl(pattern, name)) 
[13:22:39.833]                               next
[13:22:39.833]                             invokeRestart(restart)
[13:22:39.833]                             muffled <- TRUE
[13:22:39.833]                             break
[13:22:39.833]                           }
[13:22:39.833]                         }
[13:22:39.833]                       }
[13:22:39.833]                       invisible(muffled)
[13:22:39.833]                     }
[13:22:39.833]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.833]                   }
[13:22:39.833]                 }
[13:22:39.833]                 else {
[13:22:39.833]                   if (TRUE) {
[13:22:39.833]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.833]                     {
[13:22:39.833]                       inherits <- base::inherits
[13:22:39.833]                       invokeRestart <- base::invokeRestart
[13:22:39.833]                       is.null <- base::is.null
[13:22:39.833]                       muffled <- FALSE
[13:22:39.833]                       if (inherits(cond, "message")) {
[13:22:39.833]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.833]                         if (muffled) 
[13:22:39.833]                           invokeRestart("muffleMessage")
[13:22:39.833]                       }
[13:22:39.833]                       else if (inherits(cond, "warning")) {
[13:22:39.833]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.833]                         if (muffled) 
[13:22:39.833]                           invokeRestart("muffleWarning")
[13:22:39.833]                       }
[13:22:39.833]                       else if (inherits(cond, "condition")) {
[13:22:39.833]                         if (!is.null(pattern)) {
[13:22:39.833]                           computeRestarts <- base::computeRestarts
[13:22:39.833]                           grepl <- base::grepl
[13:22:39.833]                           restarts <- computeRestarts(cond)
[13:22:39.833]                           for (restart in restarts) {
[13:22:39.833]                             name <- restart$name
[13:22:39.833]                             if (is.null(name)) 
[13:22:39.833]                               next
[13:22:39.833]                             if (!grepl(pattern, name)) 
[13:22:39.833]                               next
[13:22:39.833]                             invokeRestart(restart)
[13:22:39.833]                             muffled <- TRUE
[13:22:39.833]                             break
[13:22:39.833]                           }
[13:22:39.833]                         }
[13:22:39.833]                       }
[13:22:39.833]                       invisible(muffled)
[13:22:39.833]                     }
[13:22:39.833]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.833]                   }
[13:22:39.833]                 }
[13:22:39.833]             }
[13:22:39.833]         }))
[13:22:39.833]     }, error = function(ex) {
[13:22:39.833]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.833]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.833]                 ...future.rng), started = ...future.startTime, 
[13:22:39.833]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.833]             version = "1.8"), class = "FutureResult")
[13:22:39.833]     }, finally = {
[13:22:39.833]         if (!identical(...future.workdir, getwd())) 
[13:22:39.833]             setwd(...future.workdir)
[13:22:39.833]         {
[13:22:39.833]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.833]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.833]             }
[13:22:39.833]             base::options(...future.oldOptions)
[13:22:39.833]             if (.Platform$OS.type == "windows") {
[13:22:39.833]                 old_names <- names(...future.oldEnvVars)
[13:22:39.833]                 envs <- base::Sys.getenv()
[13:22:39.833]                 names <- names(envs)
[13:22:39.833]                 common <- intersect(names, old_names)
[13:22:39.833]                 added <- setdiff(names, old_names)
[13:22:39.833]                 removed <- setdiff(old_names, names)
[13:22:39.833]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.833]                   envs[common]]
[13:22:39.833]                 NAMES <- toupper(changed)
[13:22:39.833]                 args <- list()
[13:22:39.833]                 for (kk in seq_along(NAMES)) {
[13:22:39.833]                   name <- changed[[kk]]
[13:22:39.833]                   NAME <- NAMES[[kk]]
[13:22:39.833]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.833]                     next
[13:22:39.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.833]                 }
[13:22:39.833]                 NAMES <- toupper(added)
[13:22:39.833]                 for (kk in seq_along(NAMES)) {
[13:22:39.833]                   name <- added[[kk]]
[13:22:39.833]                   NAME <- NAMES[[kk]]
[13:22:39.833]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.833]                     next
[13:22:39.833]                   args[[name]] <- ""
[13:22:39.833]                 }
[13:22:39.833]                 NAMES <- toupper(removed)
[13:22:39.833]                 for (kk in seq_along(NAMES)) {
[13:22:39.833]                   name <- removed[[kk]]
[13:22:39.833]                   NAME <- NAMES[[kk]]
[13:22:39.833]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.833]                     next
[13:22:39.833]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.833]                 }
[13:22:39.833]                 if (length(args) > 0) 
[13:22:39.833]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.833]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.833]             }
[13:22:39.833]             else {
[13:22:39.833]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.833]             }
[13:22:39.833]             {
[13:22:39.833]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.833]                   0L) {
[13:22:39.833]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.833]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.833]                   base::options(opts)
[13:22:39.833]                 }
[13:22:39.833]                 {
[13:22:39.833]                   {
[13:22:39.833]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.833]                     NULL
[13:22:39.833]                   }
[13:22:39.833]                   options(future.plan = NULL)
[13:22:39.833]                   if (is.na(NA_character_)) 
[13:22:39.833]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.833]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.833]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.833]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.833]                     envir = parent.frame()) 
[13:22:39.833]                   {
[13:22:39.833]                     if (is.function(workers)) 
[13:22:39.833]                       workers <- workers()
[13:22:39.833]                     workers <- structure(as.integer(workers), 
[13:22:39.833]                       class = class(workers))
[13:22:39.833]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.833]                       workers >= 1)
[13:22:39.833]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.833]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.833]                     }
[13:22:39.833]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.833]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.833]                       envir = envir)
[13:22:39.833]                     if (!future$lazy) 
[13:22:39.833]                       future <- run(future)
[13:22:39.833]                     invisible(future)
[13:22:39.833]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.833]                 }
[13:22:39.833]             }
[13:22:39.833]         }
[13:22:39.833]     })
[13:22:39.833]     if (TRUE) {
[13:22:39.833]         base::sink(type = "output", split = FALSE)
[13:22:39.833]         if (TRUE) {
[13:22:39.833]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.833]         }
[13:22:39.833]         else {
[13:22:39.833]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.833]         }
[13:22:39.833]         base::close(...future.stdout)
[13:22:39.833]         ...future.stdout <- NULL
[13:22:39.833]     }
[13:22:39.833]     ...future.result$conditions <- ...future.conditions
[13:22:39.833]     ...future.result$finished <- base::Sys.time()
[13:22:39.833]     ...future.result
[13:22:39.833] }
[13:22:39.836] Exporting 2 global objects (112 bytes) to cluster node #1 ...
[13:22:39.836] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:22:39.836] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.837] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:22:39.837] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.837] Exporting 2 global objects (112 bytes) to cluster node #1 ... DONE
[13:22:39.837] MultisessionFuture started
[13:22:39.838] - Launch lazy future ... done
[13:22:39.838] run() for ‘MultisessionFuture’ ... done
[13:22:39.838] result() for ClusterFuture ...
[13:22:39.838] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.838] - Validating connection of MultisessionFuture
[13:22:39.886] - received message: FutureResult
[13:22:39.886] - Received FutureResult
[13:22:39.886] - Erased future from FutureRegistry
[13:22:39.886] result() for ClusterFuture ...
[13:22:39.886] - result already collected: FutureResult
[13:22:39.887] result() for ClusterFuture ... done
[13:22:39.887] signalConditions() ...
[13:22:39.887]  - include = ‘immediateCondition’
[13:22:39.887]  - exclude = 
[13:22:39.887]  - resignal = FALSE
[13:22:39.887]  - Number of conditions: 1
[13:22:39.887] signalConditions() ... done
[13:22:39.887] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.887] result() for ClusterFuture ... done
[13:22:39.887] result() for ClusterFuture ...
[13:22:39.887] - result already collected: FutureResult
[13:22:39.888] result() for ClusterFuture ... done
[13:22:39.888] signalConditions() ...
[13:22:39.888]  - include = ‘immediateCondition’
[13:22:39.888]  - exclude = 
[13:22:39.888]  - resignal = FALSE
[13:22:39.888]  - Number of conditions: 1
[13:22:39.888] signalConditions() ... done
[13:22:39.888] Future state: ‘finished’
[13:22:39.888] result() for ClusterFuture ...
[13:22:39.888] - result already collected: FutureResult
[13:22:39.889] result() for ClusterFuture ... done
[13:22:39.889] signalConditions() ...
[13:22:39.889]  - include = ‘condition’
[13:22:39.889]  - exclude = ‘immediateCondition’
[13:22:39.889]  - resignal = TRUE
[13:22:39.889]  - Number of conditions: 1
[13:22:39.889]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[13:22:39.889] signalConditions() ... done
Error in withCallingHandlers({ : '...' used in an incorrect context
[1] "Error in withCallingHandlers({ : '...' used in an incorrect context\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        sum(x, y, ...)    }}, immediateCondition = function(cond) {    sendCondition <- ...future.makeSendCondition()    sendCondition(cond)    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): '...' used in an incorrect context>
** Sum function 'E' with plan('multisession') ...
function (...) 
{
    message("Arguments '...' exists: ", exists("...", inherits = TRUE))
    globals <- globals::globalsByName("...", envir = environment())
    f <- future({
        fcn <- function() sum(...)
        fcn()
    }, envir = parent.frame(), globals = globals)
    y <- value(f)
    y
}
<bytecode: 0x563891bc6568>
Arguments '...' exists: TRUE
[13:22:39.890] getGlobalsAndPackages() ...
[13:22:39.890] - globals passed as-is: [1] ‘...’
[13:22:39.890] Resolving globals: FALSE
[13:22:39.891] Tweak future expression to call with '...' arguments ...
[13:22:39.891] {
[13:22:39.891]     do.call(function(...) {
[13:22:39.891]         fcn <- function() sum(...)
[13:22:39.891]         fcn()
[13:22:39.891]     }, args = future.call.arguments)
[13:22:39.891] }
[13:22:39.891] Tweak future expression to call with '...' arguments ... DONE
[13:22:39.891] The total size of the 1 globals is 112 bytes (112 bytes)
[13:22:39.892] The total size of the 1 globals exported for future expression (‘{; fcn <- function() sum(...); fcn(); }’) is 112 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘future.call.arguments’ (112 bytes of class ‘list’)
[13:22:39.892] - globals: [1] ‘future.call.arguments’
[13:22:39.892] 
[13:22:39.892] getGlobalsAndPackages() ... DONE
[13:22:39.892] run() for ‘Future’ ...
[13:22:39.892] - state: ‘created’
[13:22:39.893] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.907] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.907] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.907]   - Field: ‘node’
[13:22:39.907]   - Field: ‘label’
[13:22:39.907]   - Field: ‘local’
[13:22:39.907]   - Field: ‘owner’
[13:22:39.907]   - Field: ‘envir’
[13:22:39.908]   - Field: ‘workers’
[13:22:39.908]   - Field: ‘packages’
[13:22:39.908]   - Field: ‘gc’
[13:22:39.908]   - Field: ‘conditions’
[13:22:39.908]   - Field: ‘persistent’
[13:22:39.908]   - Field: ‘expr’
[13:22:39.908]   - Field: ‘uuid’
[13:22:39.908]   - Field: ‘seed’
[13:22:39.908]   - Field: ‘version’
[13:22:39.908]   - Field: ‘result’
[13:22:39.909]   - Field: ‘asynchronous’
[13:22:39.909]   - Field: ‘calls’
[13:22:39.909]   - Field: ‘globals’
[13:22:39.909]   - Field: ‘stdout’
[13:22:39.909]   - Field: ‘earlySignal’
[13:22:39.909]   - Field: ‘lazy’
[13:22:39.909]   - Field: ‘state’
[13:22:39.909] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.909] - Launch lazy future ...
[13:22:39.910] Packages needed by the future expression (n = 0): <none>
[13:22:39.910] Packages needed by future strategies (n = 0): <none>
[13:22:39.910] {
[13:22:39.910]     {
[13:22:39.910]         {
[13:22:39.910]             ...future.startTime <- base::Sys.time()
[13:22:39.910]             {
[13:22:39.910]                 {
[13:22:39.910]                   {
[13:22:39.910]                     {
[13:22:39.910]                       base::local({
[13:22:39.910]                         has_future <- base::requireNamespace("future", 
[13:22:39.910]                           quietly = TRUE)
[13:22:39.910]                         if (has_future) {
[13:22:39.910]                           ns <- base::getNamespace("future")
[13:22:39.910]                           version <- ns[[".package"]][["version"]]
[13:22:39.910]                           if (is.null(version)) 
[13:22:39.910]                             version <- utils::packageVersion("future")
[13:22:39.910]                         }
[13:22:39.910]                         else {
[13:22:39.910]                           version <- NULL
[13:22:39.910]                         }
[13:22:39.910]                         if (!has_future || version < "1.8.0") {
[13:22:39.910]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.910]                             "", base::R.version$version.string), 
[13:22:39.910]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.910]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.910]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.910]                               "release", "version")], collapse = " "), 
[13:22:39.910]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.910]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.910]                             info)
[13:22:39.910]                           info <- base::paste(info, collapse = "; ")
[13:22:39.910]                           if (!has_future) {
[13:22:39.910]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.910]                               info)
[13:22:39.910]                           }
[13:22:39.910]                           else {
[13:22:39.910]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.910]                               info, version)
[13:22:39.910]                           }
[13:22:39.910]                           base::stop(msg)
[13:22:39.910]                         }
[13:22:39.910]                       })
[13:22:39.910]                     }
[13:22:39.910]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.910]                     base::options(mc.cores = 1L)
[13:22:39.910]                   }
[13:22:39.910]                   options(future.plan = NULL)
[13:22:39.910]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.910]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.910]                 }
[13:22:39.910]                 ...future.workdir <- getwd()
[13:22:39.910]             }
[13:22:39.910]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.910]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.910]         }
[13:22:39.910]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.910]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.910]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.910]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.910]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.910]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.910]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.910]             base::names(...future.oldOptions))
[13:22:39.910]     }
[13:22:39.910]     if (FALSE) {
[13:22:39.910]     }
[13:22:39.910]     else {
[13:22:39.910]         if (TRUE) {
[13:22:39.910]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.910]                 open = "w")
[13:22:39.910]         }
[13:22:39.910]         else {
[13:22:39.910]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.910]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.910]         }
[13:22:39.910]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.910]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.910]             base::sink(type = "output", split = FALSE)
[13:22:39.910]             base::close(...future.stdout)
[13:22:39.910]         }, add = TRUE)
[13:22:39.910]     }
[13:22:39.910]     ...future.frame <- base::sys.nframe()
[13:22:39.910]     ...future.conditions <- base::list()
[13:22:39.910]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.910]     if (FALSE) {
[13:22:39.910]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.910]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.910]     }
[13:22:39.910]     ...future.result <- base::tryCatch({
[13:22:39.910]         base::withCallingHandlers({
[13:22:39.910]             ...future.value <- base::withVisible(base::local({
[13:22:39.910]                 ...future.makeSendCondition <- base::local({
[13:22:39.910]                   sendCondition <- NULL
[13:22:39.910]                   function(frame = 1L) {
[13:22:39.910]                     if (is.function(sendCondition)) 
[13:22:39.910]                       return(sendCondition)
[13:22:39.910]                     ns <- getNamespace("parallel")
[13:22:39.910]                     if (exists("sendData", mode = "function", 
[13:22:39.910]                       envir = ns)) {
[13:22:39.910]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.910]                         envir = ns)
[13:22:39.910]                       envir <- sys.frame(frame)
[13:22:39.910]                       master <- NULL
[13:22:39.910]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.910]                         !identical(envir, emptyenv())) {
[13:22:39.910]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.910]                           inherits = FALSE)) {
[13:22:39.910]                           master <- get("master", mode = "list", 
[13:22:39.910]                             envir = envir, inherits = FALSE)
[13:22:39.910]                           if (inherits(master, c("SOCKnode", 
[13:22:39.910]                             "SOCK0node"))) {
[13:22:39.910]                             sendCondition <<- function(cond) {
[13:22:39.910]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.910]                                 success = TRUE)
[13:22:39.910]                               parallel_sendData(master, data)
[13:22:39.910]                             }
[13:22:39.910]                             return(sendCondition)
[13:22:39.910]                           }
[13:22:39.910]                         }
[13:22:39.910]                         frame <- frame + 1L
[13:22:39.910]                         envir <- sys.frame(frame)
[13:22:39.910]                       }
[13:22:39.910]                     }
[13:22:39.910]                     sendCondition <<- function(cond) NULL
[13:22:39.910]                   }
[13:22:39.910]                 })
[13:22:39.910]                 withCallingHandlers({
[13:22:39.910]                   {
[13:22:39.910]                     do.call(function(...) {
[13:22:39.910]                       fcn <- function() sum(...)
[13:22:39.910]                       fcn()
[13:22:39.910]                     }, args = future.call.arguments)
[13:22:39.910]                   }
[13:22:39.910]                 }, immediateCondition = function(cond) {
[13:22:39.910]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.910]                   sendCondition(cond)
[13:22:39.910]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.910]                   {
[13:22:39.910]                     inherits <- base::inherits
[13:22:39.910]                     invokeRestart <- base::invokeRestart
[13:22:39.910]                     is.null <- base::is.null
[13:22:39.910]                     muffled <- FALSE
[13:22:39.910]                     if (inherits(cond, "message")) {
[13:22:39.910]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.910]                       if (muffled) 
[13:22:39.910]                         invokeRestart("muffleMessage")
[13:22:39.910]                     }
[13:22:39.910]                     else if (inherits(cond, "warning")) {
[13:22:39.910]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.910]                       if (muffled) 
[13:22:39.910]                         invokeRestart("muffleWarning")
[13:22:39.910]                     }
[13:22:39.910]                     else if (inherits(cond, "condition")) {
[13:22:39.910]                       if (!is.null(pattern)) {
[13:22:39.910]                         computeRestarts <- base::computeRestarts
[13:22:39.910]                         grepl <- base::grepl
[13:22:39.910]                         restarts <- computeRestarts(cond)
[13:22:39.910]                         for (restart in restarts) {
[13:22:39.910]                           name <- restart$name
[13:22:39.910]                           if (is.null(name)) 
[13:22:39.910]                             next
[13:22:39.910]                           if (!grepl(pattern, name)) 
[13:22:39.910]                             next
[13:22:39.910]                           invokeRestart(restart)
[13:22:39.910]                           muffled <- TRUE
[13:22:39.910]                           break
[13:22:39.910]                         }
[13:22:39.910]                       }
[13:22:39.910]                     }
[13:22:39.910]                     invisible(muffled)
[13:22:39.910]                   }
[13:22:39.910]                   muffleCondition(cond)
[13:22:39.910]                 })
[13:22:39.910]             }))
[13:22:39.910]             future::FutureResult(value = ...future.value$value, 
[13:22:39.910]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.910]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.910]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.910]                     ...future.globalenv.names))
[13:22:39.910]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.910]         }, condition = base::local({
[13:22:39.910]             c <- base::c
[13:22:39.910]             inherits <- base::inherits
[13:22:39.910]             invokeRestart <- base::invokeRestart
[13:22:39.910]             length <- base::length
[13:22:39.910]             list <- base::list
[13:22:39.910]             seq.int <- base::seq.int
[13:22:39.910]             signalCondition <- base::signalCondition
[13:22:39.910]             sys.calls <- base::sys.calls
[13:22:39.910]             `[[` <- base::`[[`
[13:22:39.910]             `+` <- base::`+`
[13:22:39.910]             `<<-` <- base::`<<-`
[13:22:39.910]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.910]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.910]                   3L)]
[13:22:39.910]             }
[13:22:39.910]             function(cond) {
[13:22:39.910]                 is_error <- inherits(cond, "error")
[13:22:39.910]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.910]                   NULL)
[13:22:39.910]                 if (is_error) {
[13:22:39.910]                   sessionInformation <- function() {
[13:22:39.910]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.910]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.910]                       search = base::search(), system = base::Sys.info())
[13:22:39.910]                   }
[13:22:39.910]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.910]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.910]                     cond$call), session = sessionInformation(), 
[13:22:39.910]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.910]                   signalCondition(cond)
[13:22:39.910]                 }
[13:22:39.910]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.910]                 "immediateCondition"))) {
[13:22:39.910]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.910]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.910]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.910]                   if (TRUE && !signal) {
[13:22:39.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.910]                     {
[13:22:39.910]                       inherits <- base::inherits
[13:22:39.910]                       invokeRestart <- base::invokeRestart
[13:22:39.910]                       is.null <- base::is.null
[13:22:39.910]                       muffled <- FALSE
[13:22:39.910]                       if (inherits(cond, "message")) {
[13:22:39.910]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.910]                         if (muffled) 
[13:22:39.910]                           invokeRestart("muffleMessage")
[13:22:39.910]                       }
[13:22:39.910]                       else if (inherits(cond, "warning")) {
[13:22:39.910]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.910]                         if (muffled) 
[13:22:39.910]                           invokeRestart("muffleWarning")
[13:22:39.910]                       }
[13:22:39.910]                       else if (inherits(cond, "condition")) {
[13:22:39.910]                         if (!is.null(pattern)) {
[13:22:39.910]                           computeRestarts <- base::computeRestarts
[13:22:39.910]                           grepl <- base::grepl
[13:22:39.910]                           restarts <- computeRestarts(cond)
[13:22:39.910]                           for (restart in restarts) {
[13:22:39.910]                             name <- restart$name
[13:22:39.910]                             if (is.null(name)) 
[13:22:39.910]                               next
[13:22:39.910]                             if (!grepl(pattern, name)) 
[13:22:39.910]                               next
[13:22:39.910]                             invokeRestart(restart)
[13:22:39.910]                             muffled <- TRUE
[13:22:39.910]                             break
[13:22:39.910]                           }
[13:22:39.910]                         }
[13:22:39.910]                       }
[13:22:39.910]                       invisible(muffled)
[13:22:39.910]                     }
[13:22:39.910]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.910]                   }
[13:22:39.910]                 }
[13:22:39.910]                 else {
[13:22:39.910]                   if (TRUE) {
[13:22:39.910]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.910]                     {
[13:22:39.910]                       inherits <- base::inherits
[13:22:39.910]                       invokeRestart <- base::invokeRestart
[13:22:39.910]                       is.null <- base::is.null
[13:22:39.910]                       muffled <- FALSE
[13:22:39.910]                       if (inherits(cond, "message")) {
[13:22:39.910]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.910]                         if (muffled) 
[13:22:39.910]                           invokeRestart("muffleMessage")
[13:22:39.910]                       }
[13:22:39.910]                       else if (inherits(cond, "warning")) {
[13:22:39.910]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.910]                         if (muffled) 
[13:22:39.910]                           invokeRestart("muffleWarning")
[13:22:39.910]                       }
[13:22:39.910]                       else if (inherits(cond, "condition")) {
[13:22:39.910]                         if (!is.null(pattern)) {
[13:22:39.910]                           computeRestarts <- base::computeRestarts
[13:22:39.910]                           grepl <- base::grepl
[13:22:39.910]                           restarts <- computeRestarts(cond)
[13:22:39.910]                           for (restart in restarts) {
[13:22:39.910]                             name <- restart$name
[13:22:39.910]                             if (is.null(name)) 
[13:22:39.910]                               next
[13:22:39.910]                             if (!grepl(pattern, name)) 
[13:22:39.910]                               next
[13:22:39.910]                             invokeRestart(restart)
[13:22:39.910]                             muffled <- TRUE
[13:22:39.910]                             break
[13:22:39.910]                           }
[13:22:39.910]                         }
[13:22:39.910]                       }
[13:22:39.910]                       invisible(muffled)
[13:22:39.910]                     }
[13:22:39.910]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.910]                   }
[13:22:39.910]                 }
[13:22:39.910]             }
[13:22:39.910]         }))
[13:22:39.910]     }, error = function(ex) {
[13:22:39.910]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.910]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.910]                 ...future.rng), started = ...future.startTime, 
[13:22:39.910]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.910]             version = "1.8"), class = "FutureResult")
[13:22:39.910]     }, finally = {
[13:22:39.910]         if (!identical(...future.workdir, getwd())) 
[13:22:39.910]             setwd(...future.workdir)
[13:22:39.910]         {
[13:22:39.910]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.910]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.910]             }
[13:22:39.910]             base::options(...future.oldOptions)
[13:22:39.910]             if (.Platform$OS.type == "windows") {
[13:22:39.910]                 old_names <- names(...future.oldEnvVars)
[13:22:39.910]                 envs <- base::Sys.getenv()
[13:22:39.910]                 names <- names(envs)
[13:22:39.910]                 common <- intersect(names, old_names)
[13:22:39.910]                 added <- setdiff(names, old_names)
[13:22:39.910]                 removed <- setdiff(old_names, names)
[13:22:39.910]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.910]                   envs[common]]
[13:22:39.910]                 NAMES <- toupper(changed)
[13:22:39.910]                 args <- list()
[13:22:39.910]                 for (kk in seq_along(NAMES)) {
[13:22:39.910]                   name <- changed[[kk]]
[13:22:39.910]                   NAME <- NAMES[[kk]]
[13:22:39.910]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.910]                     next
[13:22:39.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.910]                 }
[13:22:39.910]                 NAMES <- toupper(added)
[13:22:39.910]                 for (kk in seq_along(NAMES)) {
[13:22:39.910]                   name <- added[[kk]]
[13:22:39.910]                   NAME <- NAMES[[kk]]
[13:22:39.910]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.910]                     next
[13:22:39.910]                   args[[name]] <- ""
[13:22:39.910]                 }
[13:22:39.910]                 NAMES <- toupper(removed)
[13:22:39.910]                 for (kk in seq_along(NAMES)) {
[13:22:39.910]                   name <- removed[[kk]]
[13:22:39.910]                   NAME <- NAMES[[kk]]
[13:22:39.910]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.910]                     next
[13:22:39.910]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.910]                 }
[13:22:39.910]                 if (length(args) > 0) 
[13:22:39.910]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.910]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.910]             }
[13:22:39.910]             else {
[13:22:39.910]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.910]             }
[13:22:39.910]             {
[13:22:39.910]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.910]                   0L) {
[13:22:39.910]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.910]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.910]                   base::options(opts)
[13:22:39.910]                 }
[13:22:39.910]                 {
[13:22:39.910]                   {
[13:22:39.910]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.910]                     NULL
[13:22:39.910]                   }
[13:22:39.910]                   options(future.plan = NULL)
[13:22:39.910]                   if (is.na(NA_character_)) 
[13:22:39.910]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.910]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.910]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.910]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.910]                     envir = parent.frame()) 
[13:22:39.910]                   {
[13:22:39.910]                     if (is.function(workers)) 
[13:22:39.910]                       workers <- workers()
[13:22:39.910]                     workers <- structure(as.integer(workers), 
[13:22:39.910]                       class = class(workers))
[13:22:39.910]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.910]                       workers >= 1)
[13:22:39.910]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.910]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.910]                     }
[13:22:39.910]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.910]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.910]                       envir = envir)
[13:22:39.910]                     if (!future$lazy) 
[13:22:39.910]                       future <- run(future)
[13:22:39.910]                     invisible(future)
[13:22:39.910]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.910]                 }
[13:22:39.910]             }
[13:22:39.910]         }
[13:22:39.910]     })
[13:22:39.910]     if (TRUE) {
[13:22:39.910]         base::sink(type = "output", split = FALSE)
[13:22:39.910]         if (TRUE) {
[13:22:39.910]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.910]         }
[13:22:39.910]         else {
[13:22:39.910]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.910]         }
[13:22:39.910]         base::close(...future.stdout)
[13:22:39.910]         ...future.stdout <- NULL
[13:22:39.910]     }
[13:22:39.910]     ...future.result$conditions <- ...future.conditions
[13:22:39.910]     ...future.result$finished <- base::Sys.time()
[13:22:39.910]     ...future.result
[13:22:39.910] }
[13:22:39.913] Exporting 1 global objects (112 bytes) to cluster node #1 ...
[13:22:39.913] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ...
[13:22:39.914] Exporting ‘future.call.arguments’ (112 bytes) to cluster node #1 ... DONE
[13:22:39.914] Exporting 1 global objects (112 bytes) to cluster node #1 ... DONE
[13:22:39.915] MultisessionFuture started
[13:22:39.915] - Launch lazy future ... done
[13:22:39.915] run() for ‘MultisessionFuture’ ... done
[13:22:39.915] result() for ClusterFuture ...
[13:22:39.915] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.915] - Validating connection of MultisessionFuture
[13:22:39.961] - received message: FutureResult
[13:22:39.961] - Received FutureResult
[13:22:39.961] - Erased future from FutureRegistry
[13:22:39.962] result() for ClusterFuture ...
[13:22:39.962] - result already collected: FutureResult
[13:22:39.962] result() for ClusterFuture ... done
[13:22:39.962] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:39.962] result() for ClusterFuture ... done
[13:22:39.962] result() for ClusterFuture ...
[13:22:39.962] - result already collected: FutureResult
[13:22:39.962] result() for ClusterFuture ... done
[1] 6
** Sum function 'F' with plan('multisession') ...
function (x, y) 
{
    message("Using '...' in a formula")
    fcn <- function(x, y) {
        z = ~list(...)
        sum(x, y)
    }
    f <- future(fcn(x, y))
    y <- value(f)
    y
}
<bytecode: 0x563890497800>
Using '...' in a formula
[13:22:39.963] getGlobalsAndPackages() ...
[13:22:39.963] Searching for globals...
[13:22:39.966] - globals found: [9] ‘fcn’, ‘x’, ‘y’, ‘{’, ‘=’, ‘~’, ‘list’, ‘sum’, ‘...’
[13:22:39.966] Searching for globals ... DONE
[13:22:39.966] Resolving globals: FALSE
[13:22:39.966] Tweak future expression to call with '...' arguments ...
[13:22:39.966] The total size of the 3 globals is 4.18 KiB (4280 bytes)
[13:22:39.967] The total size of the 3 globals exported for future expression (‘fcn(x, y)’) is 4.18 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are three globals: ‘fcn’ (4.07 KiB of class ‘function’), ‘x’ (56 bytes of class ‘numeric’) and ‘y’ (56 bytes of class ‘numeric’)
[13:22:39.967] - globals: [3] ‘fcn’, ‘x’, ‘y’
[13:22:39.967] 
[13:22:39.967] getGlobalsAndPackages() ... DONE
[13:22:39.967] run() for ‘Future’ ...
[13:22:39.968] - state: ‘created’
[13:22:39.968] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[13:22:39.982] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[13:22:39.982] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[13:22:39.982]   - Field: ‘node’
[13:22:39.982]   - Field: ‘label’
[13:22:39.982]   - Field: ‘local’
[13:22:39.982]   - Field: ‘owner’
[13:22:39.982]   - Field: ‘envir’
[13:22:39.982]   - Field: ‘workers’
[13:22:39.982]   - Field: ‘packages’
[13:22:39.983]   - Field: ‘gc’
[13:22:39.983]   - Field: ‘conditions’
[13:22:39.983]   - Field: ‘persistent’
[13:22:39.983]   - Field: ‘expr’
[13:22:39.983]   - Field: ‘uuid’
[13:22:39.983]   - Field: ‘seed’
[13:22:39.983]   - Field: ‘version’
[13:22:39.983]   - Field: ‘result’
[13:22:39.983]   - Field: ‘asynchronous’
[13:22:39.983]   - Field: ‘calls’
[13:22:39.983]   - Field: ‘globals’
[13:22:39.984]   - Field: ‘stdout’
[13:22:39.984]   - Field: ‘earlySignal’
[13:22:39.984]   - Field: ‘lazy’
[13:22:39.984]   - Field: ‘state’
[13:22:39.984] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[13:22:39.984] - Launch lazy future ...
[13:22:39.984] Packages needed by the future expression (n = 0): <none>
[13:22:39.985] Packages needed by future strategies (n = 0): <none>
[13:22:39.985] {
[13:22:39.985]     {
[13:22:39.985]         {
[13:22:39.985]             ...future.startTime <- base::Sys.time()
[13:22:39.985]             {
[13:22:39.985]                 {
[13:22:39.985]                   {
[13:22:39.985]                     {
[13:22:39.985]                       base::local({
[13:22:39.985]                         has_future <- base::requireNamespace("future", 
[13:22:39.985]                           quietly = TRUE)
[13:22:39.985]                         if (has_future) {
[13:22:39.985]                           ns <- base::getNamespace("future")
[13:22:39.985]                           version <- ns[[".package"]][["version"]]
[13:22:39.985]                           if (is.null(version)) 
[13:22:39.985]                             version <- utils::packageVersion("future")
[13:22:39.985]                         }
[13:22:39.985]                         else {
[13:22:39.985]                           version <- NULL
[13:22:39.985]                         }
[13:22:39.985]                         if (!has_future || version < "1.8.0") {
[13:22:39.985]                           info <- base::c(r_version = base::gsub("R version ", 
[13:22:39.985]                             "", base::R.version$version.string), 
[13:22:39.985]                             platform = base::sprintf("%s (%s-bit)", 
[13:22:39.985]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[13:22:39.985]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[13:22:39.985]                               "release", "version")], collapse = " "), 
[13:22:39.985]                             hostname = base::Sys.info()[["nodename"]])
[13:22:39.985]                           info <- base::sprintf("%s: %s", base::names(info), 
[13:22:39.985]                             info)
[13:22:39.985]                           info <- base::paste(info, collapse = "; ")
[13:22:39.985]                           if (!has_future) {
[13:22:39.985]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[13:22:39.985]                               info)
[13:22:39.985]                           }
[13:22:39.985]                           else {
[13:22:39.985]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[13:22:39.985]                               info, version)
[13:22:39.985]                           }
[13:22:39.985]                           base::stop(msg)
[13:22:39.985]                         }
[13:22:39.985]                       })
[13:22:39.985]                     }
[13:22:39.985]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[13:22:39.985]                     base::options(mc.cores = 1L)
[13:22:39.985]                   }
[13:22:39.985]                   options(future.plan = NULL)
[13:22:39.985]                   Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.985]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[13:22:39.985]                 }
[13:22:39.985]                 ...future.workdir <- getwd()
[13:22:39.985]             }
[13:22:39.985]             ...future.oldOptions <- base::as.list(base::.Options)
[13:22:39.985]             ...future.oldEnvVars <- base::Sys.getenv()
[13:22:39.985]         }
[13:22:39.985]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[13:22:39.985]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[13:22:39.985]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[13:22:39.985]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[13:22:39.985]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[13:22:39.985]             future.stdout.windows.reencode = NULL, width = 80L)
[13:22:39.985]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[13:22:39.985]             base::names(...future.oldOptions))
[13:22:39.985]     }
[13:22:39.985]     if (FALSE) {
[13:22:39.985]     }
[13:22:39.985]     else {
[13:22:39.985]         if (TRUE) {
[13:22:39.985]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[13:22:39.985]                 open = "w")
[13:22:39.985]         }
[13:22:39.985]         else {
[13:22:39.985]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[13:22:39.985]                 windows = "NUL", "/dev/null"), open = "w")
[13:22:39.985]         }
[13:22:39.985]         base::sink(...future.stdout, type = "output", split = FALSE)
[13:22:39.985]         base::on.exit(if (!base::is.null(...future.stdout)) {
[13:22:39.985]             base::sink(type = "output", split = FALSE)
[13:22:39.985]             base::close(...future.stdout)
[13:22:39.985]         }, add = TRUE)
[13:22:39.985]     }
[13:22:39.985]     ...future.frame <- base::sys.nframe()
[13:22:39.985]     ...future.conditions <- base::list()
[13:22:39.985]     ...future.rng <- base::globalenv()$.Random.seed
[13:22:39.985]     if (FALSE) {
[13:22:39.985]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[13:22:39.985]             "...future.value", "...future.globalenv.names", ".Random.seed")
[13:22:39.985]     }
[13:22:39.985]     ...future.result <- base::tryCatch({
[13:22:39.985]         base::withCallingHandlers({
[13:22:39.985]             ...future.value <- base::withVisible(base::local({
[13:22:39.985]                 ...future.makeSendCondition <- base::local({
[13:22:39.985]                   sendCondition <- NULL
[13:22:39.985]                   function(frame = 1L) {
[13:22:39.985]                     if (is.function(sendCondition)) 
[13:22:39.985]                       return(sendCondition)
[13:22:39.985]                     ns <- getNamespace("parallel")
[13:22:39.985]                     if (exists("sendData", mode = "function", 
[13:22:39.985]                       envir = ns)) {
[13:22:39.985]                       parallel_sendData <- get("sendData", mode = "function", 
[13:22:39.985]                         envir = ns)
[13:22:39.985]                       envir <- sys.frame(frame)
[13:22:39.985]                       master <- NULL
[13:22:39.985]                       while (!identical(envir, .GlobalEnv) && 
[13:22:39.985]                         !identical(envir, emptyenv())) {
[13:22:39.985]                         if (exists("master", mode = "list", envir = envir, 
[13:22:39.985]                           inherits = FALSE)) {
[13:22:39.985]                           master <- get("master", mode = "list", 
[13:22:39.985]                             envir = envir, inherits = FALSE)
[13:22:39.985]                           if (inherits(master, c("SOCKnode", 
[13:22:39.985]                             "SOCK0node"))) {
[13:22:39.985]                             sendCondition <<- function(cond) {
[13:22:39.985]                               data <- list(type = "VALUE", value = cond, 
[13:22:39.985]                                 success = TRUE)
[13:22:39.985]                               parallel_sendData(master, data)
[13:22:39.985]                             }
[13:22:39.985]                             return(sendCondition)
[13:22:39.985]                           }
[13:22:39.985]                         }
[13:22:39.985]                         frame <- frame + 1L
[13:22:39.985]                         envir <- sys.frame(frame)
[13:22:39.985]                       }
[13:22:39.985]                     }
[13:22:39.985]                     sendCondition <<- function(cond) NULL
[13:22:39.985]                   }
[13:22:39.985]                 })
[13:22:39.985]                 withCallingHandlers({
[13:22:39.985]                   fcn(x, y)
[13:22:39.985]                 }, immediateCondition = function(cond) {
[13:22:39.985]                   sendCondition <- ...future.makeSendCondition()
[13:22:39.985]                   sendCondition(cond)
[13:22:39.985]                   muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.985]                   {
[13:22:39.985]                     inherits <- base::inherits
[13:22:39.985]                     invokeRestart <- base::invokeRestart
[13:22:39.985]                     is.null <- base::is.null
[13:22:39.985]                     muffled <- FALSE
[13:22:39.985]                     if (inherits(cond, "message")) {
[13:22:39.985]                       muffled <- grepl(pattern, "muffleMessage")
[13:22:39.985]                       if (muffled) 
[13:22:39.985]                         invokeRestart("muffleMessage")
[13:22:39.985]                     }
[13:22:39.985]                     else if (inherits(cond, "warning")) {
[13:22:39.985]                       muffled <- grepl(pattern, "muffleWarning")
[13:22:39.985]                       if (muffled) 
[13:22:39.985]                         invokeRestart("muffleWarning")
[13:22:39.985]                     }
[13:22:39.985]                     else if (inherits(cond, "condition")) {
[13:22:39.985]                       if (!is.null(pattern)) {
[13:22:39.985]                         computeRestarts <- base::computeRestarts
[13:22:39.985]                         grepl <- base::grepl
[13:22:39.985]                         restarts <- computeRestarts(cond)
[13:22:39.985]                         for (restart in restarts) {
[13:22:39.985]                           name <- restart$name
[13:22:39.985]                           if (is.null(name)) 
[13:22:39.985]                             next
[13:22:39.985]                           if (!grepl(pattern, name)) 
[13:22:39.985]                             next
[13:22:39.985]                           invokeRestart(restart)
[13:22:39.985]                           muffled <- TRUE
[13:22:39.985]                           break
[13:22:39.985]                         }
[13:22:39.985]                       }
[13:22:39.985]                     }
[13:22:39.985]                     invisible(muffled)
[13:22:39.985]                   }
[13:22:39.985]                   muffleCondition(cond)
[13:22:39.985]                 })
[13:22:39.985]             }))
[13:22:39.985]             future::FutureResult(value = ...future.value$value, 
[13:22:39.985]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.985]                   ...future.rng), globalenv = if (FALSE) 
[13:22:39.985]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[13:22:39.985]                     ...future.globalenv.names))
[13:22:39.985]                 else NULL, started = ...future.startTime, version = "1.8")
[13:22:39.985]         }, condition = base::local({
[13:22:39.985]             c <- base::c
[13:22:39.985]             inherits <- base::inherits
[13:22:39.985]             invokeRestart <- base::invokeRestart
[13:22:39.985]             length <- base::length
[13:22:39.985]             list <- base::list
[13:22:39.985]             seq.int <- base::seq.int
[13:22:39.985]             signalCondition <- base::signalCondition
[13:22:39.985]             sys.calls <- base::sys.calls
[13:22:39.985]             `[[` <- base::`[[`
[13:22:39.985]             `+` <- base::`+`
[13:22:39.985]             `<<-` <- base::`<<-`
[13:22:39.985]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[13:22:39.985]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[13:22:39.985]                   3L)]
[13:22:39.985]             }
[13:22:39.985]             function(cond) {
[13:22:39.985]                 is_error <- inherits(cond, "error")
[13:22:39.985]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[13:22:39.985]                   NULL)
[13:22:39.985]                 if (is_error) {
[13:22:39.985]                   sessionInformation <- function() {
[13:22:39.985]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[13:22:39.985]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[13:22:39.985]                       search = base::search(), system = base::Sys.info())
[13:22:39.985]                   }
[13:22:39.985]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.985]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[13:22:39.985]                     cond$call), session = sessionInformation(), 
[13:22:39.985]                     timestamp = base::Sys.time(), signaled = 0L)
[13:22:39.985]                   signalCondition(cond)
[13:22:39.985]                 }
[13:22:39.985]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[13:22:39.985]                 "immediateCondition"))) {
[13:22:39.985]                   signal <- TRUE && inherits(cond, "immediateCondition")
[13:22:39.985]                   ...future.conditions[[length(...future.conditions) + 
[13:22:39.985]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[13:22:39.985]                   if (TRUE && !signal) {
[13:22:39.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.985]                     {
[13:22:39.985]                       inherits <- base::inherits
[13:22:39.985]                       invokeRestart <- base::invokeRestart
[13:22:39.985]                       is.null <- base::is.null
[13:22:39.985]                       muffled <- FALSE
[13:22:39.985]                       if (inherits(cond, "message")) {
[13:22:39.985]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.985]                         if (muffled) 
[13:22:39.985]                           invokeRestart("muffleMessage")
[13:22:39.985]                       }
[13:22:39.985]                       else if (inherits(cond, "warning")) {
[13:22:39.985]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.985]                         if (muffled) 
[13:22:39.985]                           invokeRestart("muffleWarning")
[13:22:39.985]                       }
[13:22:39.985]                       else if (inherits(cond, "condition")) {
[13:22:39.985]                         if (!is.null(pattern)) {
[13:22:39.985]                           computeRestarts <- base::computeRestarts
[13:22:39.985]                           grepl <- base::grepl
[13:22:39.985]                           restarts <- computeRestarts(cond)
[13:22:39.985]                           for (restart in restarts) {
[13:22:39.985]                             name <- restart$name
[13:22:39.985]                             if (is.null(name)) 
[13:22:39.985]                               next
[13:22:39.985]                             if (!grepl(pattern, name)) 
[13:22:39.985]                               next
[13:22:39.985]                             invokeRestart(restart)
[13:22:39.985]                             muffled <- TRUE
[13:22:39.985]                             break
[13:22:39.985]                           }
[13:22:39.985]                         }
[13:22:39.985]                       }
[13:22:39.985]                       invisible(muffled)
[13:22:39.985]                     }
[13:22:39.985]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.985]                   }
[13:22:39.985]                 }
[13:22:39.985]                 else {
[13:22:39.985]                   if (TRUE) {
[13:22:39.985]                     muffleCondition <- function (cond, pattern = "^muffle") 
[13:22:39.985]                     {
[13:22:39.985]                       inherits <- base::inherits
[13:22:39.985]                       invokeRestart <- base::invokeRestart
[13:22:39.985]                       is.null <- base::is.null
[13:22:39.985]                       muffled <- FALSE
[13:22:39.985]                       if (inherits(cond, "message")) {
[13:22:39.985]                         muffled <- grepl(pattern, "muffleMessage")
[13:22:39.985]                         if (muffled) 
[13:22:39.985]                           invokeRestart("muffleMessage")
[13:22:39.985]                       }
[13:22:39.985]                       else if (inherits(cond, "warning")) {
[13:22:39.985]                         muffled <- grepl(pattern, "muffleWarning")
[13:22:39.985]                         if (muffled) 
[13:22:39.985]                           invokeRestart("muffleWarning")
[13:22:39.985]                       }
[13:22:39.985]                       else if (inherits(cond, "condition")) {
[13:22:39.985]                         if (!is.null(pattern)) {
[13:22:39.985]                           computeRestarts <- base::computeRestarts
[13:22:39.985]                           grepl <- base::grepl
[13:22:39.985]                           restarts <- computeRestarts(cond)
[13:22:39.985]                           for (restart in restarts) {
[13:22:39.985]                             name <- restart$name
[13:22:39.985]                             if (is.null(name)) 
[13:22:39.985]                               next
[13:22:39.985]                             if (!grepl(pattern, name)) 
[13:22:39.985]                               next
[13:22:39.985]                             invokeRestart(restart)
[13:22:39.985]                             muffled <- TRUE
[13:22:39.985]                             break
[13:22:39.985]                           }
[13:22:39.985]                         }
[13:22:39.985]                       }
[13:22:39.985]                       invisible(muffled)
[13:22:39.985]                     }
[13:22:39.985]                     muffleCondition(cond, pattern = "^muffle")
[13:22:39.985]                   }
[13:22:39.985]                 }
[13:22:39.985]             }
[13:22:39.985]         }))
[13:22:39.985]     }, error = function(ex) {
[13:22:39.985]         base::structure(base::list(value = NULL, visible = NULL, 
[13:22:39.985]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[13:22:39.985]                 ...future.rng), started = ...future.startTime, 
[13:22:39.985]             finished = Sys.time(), session_uuid = NA_character_, 
[13:22:39.985]             version = "1.8"), class = "FutureResult")
[13:22:39.985]     }, finally = {
[13:22:39.985]         if (!identical(...future.workdir, getwd())) 
[13:22:39.985]             setwd(...future.workdir)
[13:22:39.985]         {
[13:22:39.985]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[13:22:39.985]                 ...future.oldOptions$nwarnings <- NULL
[13:22:39.985]             }
[13:22:39.985]             base::options(...future.oldOptions)
[13:22:39.985]             if (.Platform$OS.type == "windows") {
[13:22:39.985]                 old_names <- names(...future.oldEnvVars)
[13:22:39.985]                 envs <- base::Sys.getenv()
[13:22:39.985]                 names <- names(envs)
[13:22:39.985]                 common <- intersect(names, old_names)
[13:22:39.985]                 added <- setdiff(names, old_names)
[13:22:39.985]                 removed <- setdiff(old_names, names)
[13:22:39.985]                 changed <- common[...future.oldEnvVars[common] != 
[13:22:39.985]                   envs[common]]
[13:22:39.985]                 NAMES <- toupper(changed)
[13:22:39.985]                 args <- list()
[13:22:39.985]                 for (kk in seq_along(NAMES)) {
[13:22:39.985]                   name <- changed[[kk]]
[13:22:39.985]                   NAME <- NAMES[[kk]]
[13:22:39.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.985]                     next
[13:22:39.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.985]                 }
[13:22:39.985]                 NAMES <- toupper(added)
[13:22:39.985]                 for (kk in seq_along(NAMES)) {
[13:22:39.985]                   name <- added[[kk]]
[13:22:39.985]                   NAME <- NAMES[[kk]]
[13:22:39.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.985]                     next
[13:22:39.985]                   args[[name]] <- ""
[13:22:39.985]                 }
[13:22:39.985]                 NAMES <- toupper(removed)
[13:22:39.985]                 for (kk in seq_along(NAMES)) {
[13:22:39.985]                   name <- removed[[kk]]
[13:22:39.985]                   NAME <- NAMES[[kk]]
[13:22:39.985]                   if (name != NAME && is.element(NAME, old_names)) 
[13:22:39.985]                     next
[13:22:39.985]                   args[[name]] <- ...future.oldEnvVars[[name]]
[13:22:39.985]                 }
[13:22:39.985]                 if (length(args) > 0) 
[13:22:39.985]                   base::do.call(base::Sys.setenv, args = args)
[13:22:39.985]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[13:22:39.985]             }
[13:22:39.985]             else {
[13:22:39.985]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[13:22:39.985]             }
[13:22:39.985]             {
[13:22:39.985]                 if (base::length(...future.futureOptionsAdded) > 
[13:22:39.985]                   0L) {
[13:22:39.985]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[13:22:39.985]                   base::names(opts) <- ...future.futureOptionsAdded
[13:22:39.985]                   base::options(opts)
[13:22:39.985]                 }
[13:22:39.985]                 {
[13:22:39.985]                   {
[13:22:39.985]                     base::options(mc.cores = ...future.mc.cores.old)
[13:22:39.985]                     NULL
[13:22:39.985]                   }
[13:22:39.985]                   options(future.plan = NULL)
[13:22:39.985]                   if (is.na(NA_character_)) 
[13:22:39.985]                     Sys.unsetenv("R_FUTURE_PLAN")
[13:22:39.985]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[13:22:39.985]                   future::plan(list(function (..., workers = availableCores(), 
[13:22:39.985]                     lazy = FALSE, rscript_libs = .libPaths(), 
[13:22:39.985]                     envir = parent.frame()) 
[13:22:39.985]                   {
[13:22:39.985]                     if (is.function(workers)) 
[13:22:39.985]                       workers <- workers()
[13:22:39.985]                     workers <- structure(as.integer(workers), 
[13:22:39.985]                       class = class(workers))
[13:22:39.985]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[13:22:39.985]                       workers >= 1)
[13:22:39.985]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[13:22:39.985]                       return(sequential(..., lazy = TRUE, envir = envir))
[13:22:39.985]                     }
[13:22:39.985]                     future <- MultisessionFuture(..., workers = workers, 
[13:22:39.985]                       lazy = lazy, rscript_libs = rscript_libs, 
[13:22:39.985]                       envir = envir)
[13:22:39.985]                     if (!future$lazy) 
[13:22:39.985]                       future <- run(future)
[13:22:39.985]                     invisible(future)
[13:22:39.985]                   }), .cleanup = FALSE, .init = FALSE)
[13:22:39.985]                 }
[13:22:39.985]             }
[13:22:39.985]         }
[13:22:39.985]     })
[13:22:39.985]     if (TRUE) {
[13:22:39.985]         base::sink(type = "output", split = FALSE)
[13:22:39.985]         if (TRUE) {
[13:22:39.985]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[13:22:39.985]         }
[13:22:39.985]         else {
[13:22:39.985]             ...future.result["stdout"] <- base::list(NULL)
[13:22:39.985]         }
[13:22:39.985]         base::close(...future.stdout)
[13:22:39.985]         ...future.stdout <- NULL
[13:22:39.985]     }
[13:22:39.985]     ...future.result$conditions <- ...future.conditions
[13:22:39.985]     ...future.result$finished <- base::Sys.time()
[13:22:39.985]     ...future.result
[13:22:39.985] }
[13:22:39.988] Exporting 3 global objects (4.18 KiB) to cluster node #1 ...
[13:22:39.988] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ...
[13:22:39.988] Exporting ‘fcn’ (4.07 KiB) to cluster node #1 ... DONE
[13:22:39.989] Exporting ‘x’ (56 bytes) to cluster node #1 ...
[13:22:39.989] Exporting ‘x’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.989] Exporting ‘y’ (56 bytes) to cluster node #1 ...
[13:22:39.989] Exporting ‘y’ (56 bytes) to cluster node #1 ... DONE
[13:22:39.989] Exporting 3 global objects (4.18 KiB) to cluster node #1 ... DONE
[13:22:39.990] MultisessionFuture started
[13:22:39.990] - Launch lazy future ... done
[13:22:39.990] run() for ‘MultisessionFuture’ ... done
[13:22:39.990] result() for ClusterFuture ...
[13:22:39.990] receiveMessageFromWorker() for ClusterFuture ...
[13:22:39.990] - Validating connection of MultisessionFuture
[13:22:40.037] - received message: FutureResult
[13:22:40.037] - Received FutureResult
[13:22:40.038] - Erased future from FutureRegistry
[13:22:40.038] result() for ClusterFuture ...
[13:22:40.038] - result already collected: FutureResult
[13:22:40.038] result() for ClusterFuture ... done
[13:22:40.038] receiveMessageFromWorker() for ClusterFuture ... done
[13:22:40.038] result() for ClusterFuture ... done
[13:22:40.038] result() for ClusterFuture ...
[13:22:40.039] - result already collected: FutureResult
[13:22:40.039] result() for ClusterFuture ... done
[1] 6
Testing with 2 cores ... DONE
> 
> message("*** Global argument '...' ... DONE")
*** Global argument '...' ... DONE
> 
> source("incl/end.R")
[13:22:40.040] plan(): Setting new future strategy stack:
[13:22:40.040] List of future strategies:
[13:22:40.040] 1. FutureStrategy:
[13:22:40.040]    - args: function (..., envir = parent.frame())
[13:22:40.040]    - tweaked: FALSE
[13:22:40.040]    - call: future::plan(oplan)
[13:22:40.041] plan(): nbrOfWorkers() = 1
> 
