
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "haven"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('haven')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_factor")
> ### * as_factor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_factor
> ### Title: Convert labelled vectors to factors
> ### Aliases: as_factor as_factor.data.frame as_factor.haven_labelled
> ###   as_factor.labelled
> 
> ### ** Examples
> 
> x <- labelled(sample(5, 10, replace = TRUE), c(Bad = 1, Good = 5))
> 
> # Default method uses values where available
> as_factor(x)
 [1] Bad  4    Bad  2    Good 3    2    3    3    Bad 
Levels: Bad 2 3 4 Good
> # You can also extract just the labels
> as_factor(x, levels = "labels")
 [1] Bad  <NA> Bad  <NA> Good <NA> <NA> <NA> <NA> Bad 
Levels: Bad Good
> # Or just the values
> as_factor(x, levels = "values")
 [1] 1 4 1 2 5 3 2 3 3 1
Levels: 1 2 3 4 5
> # Or combine value and label
> as_factor(x, levels = "both")
 [1] [1] Bad  4        [1] Bad  2        [5] Good 3        2        3       
 [9] 3        [1] Bad 
Levels: [1] Bad 2 3 4 [5] Good
> 
> # as_factor() will preserve SPSS missing values from values and ranges
> y <- labelled_spss(1:10, na_values = c(2, 4), na_range = c(8, 10))
> as_factor(y)
 [1] 1  2  3  4  5  6  7  8  9  10
Levels: 1 2 3 4 5 6 7 8 9 10
> # use zap_missing() first to convert to NAs
> zap_missing(y)
 [1]  1 NA  3 NA  5  6  7 NA NA NA
attr(,"class")
[1] "haven_labelled"
> as_factor(zap_missing(y))
 [1] 1    <NA> 3    <NA> 5    6    7    <NA> <NA> <NA>
Levels: 1 3 5 6 7
> 
> 
> 
> cleanEx()
> nameEx("labelled")
> ### * labelled
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labelled
> ### Title: Create a labelled vector.
> ### Aliases: labelled is.labelled
> 
> ### ** Examples
> 
> s1 <- labelled(c("M", "M", "F"), c(Male = "M", Female = "F"))
> s2 <- labelled(c(1, 1, 2), c(Male = 1, Female = 2))
> s3 <- labelled(
+   c(1, 1, 2),
+   c(Male = 1, Female = 2),
+   label = "Assigned sex at birth"
+ )
> 
> # Unfortunately it's not possible to make as.factor work for labelled objects
> # so instead use as_factor. This works for all types of labelled vectors.
> as_factor(s1)
[1] Male   Male   Female
Levels: Female Male
> as_factor(s1, levels = "values")
[1] M M F
Levels: M F
> as_factor(s2)
[1] Male   Male   Female
Levels: Male Female
> 
> # Other statistical software supports multiple types of missing values
> s3 <- labelled(
+   c("M", "M", "F", "X", "N/A"),
+   c(Male = "M", Female = "F", Refused = "X", "Not applicable" = "N/A")
+ )
> s3
<labelled<character>[5]>
[1] M   M   F   X   N/A

Labels:
 value          label
     M           Male
     F         Female
     X        Refused
   N/A Not applicable
> as_factor(s3)
[1] Male           Male           Female         Refused        Not applicable
Levels: Female Male Not applicable Refused
> 
> # Often when you have a partially labelled numeric vector, labelled values
> # are special types of missing. Use zap_labels to replace labels with missing
> # values
> x <- labelled(c(1, 2, 1, 2, 10, 9), c(Unknown = 9, Refused = 10))
> zap_labels(x)
[1]  1  2  1  2 10  9
> 
> 
> 
> cleanEx()
> nameEx("labelled_spss")
> ### * labelled_spss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: labelled_spss
> ### Title: Labelled vectors for SPSS
> ### Aliases: labelled_spss
> 
> ### ** Examples
> 
> x1 <- labelled_spss(1:10, c(Good = 1, Bad = 8), na_values = c(9, 10))
> is.na(x1)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE
> 
> x2 <- labelled_spss(
+   1:10,
+   c(Good = 1, Bad = 8),
+   na_range = c(9, Inf),
+   label = "Quality rating"
+ )
> is.na(x2)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE
> 
> # Print data and metadata
> x2
<labelled_spss<integer>[10]>: Quality rating
 [1]  1  2  3  4  5  6  7  8  9 10
Missing range:  [9, Inf]

Labels:
 value label
     1  Good
     8   Bad
> 
> 
> 
> cleanEx()
> nameEx("print_labels")
> ### * print_labels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print_labels
> ### Title: Print the labels of a labelled vector
> ### Aliases: print_labels
> 
> ### ** Examples
> 
> s1 <- labelled(c("M", "M", "F"), c(Male = "M", Female = "F"))
> s2 <- labelled(c(1, 1, 2), c(Male = 1, Female = 2))
> labelled_df <- tibble::tibble(s1, s2)
> 
> for (var in names(labelled_df)) {
+   print_labels(labelled_df[[var]], var)
+ }

Labels:s1
 value  label
     M   Male
     F Female

Labels:s2
 value  label
     1   Male
     2 Female
> 
> 
> 
> cleanEx()
> nameEx("read_dta")
> ### * read_dta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_dta
> ### Title: Read and write Stata DTA files
> ### Aliases: read_dta read_stata write_dta
> 
> ### ** Examples
> 
> path <- system.file("examples", "iris.dta", package = "haven")
> read_dta(path)
# A tibble: 150 × 5
   sepallength sepalwidth petallength petalwidth species
         <dbl>      <dbl>       <dbl>      <dbl> <chr>  
 1        5.10       3.5         1.40      0.200 setosa 
 2        4.90       3           1.40      0.200 setosa 
 3        4.70       3.20        1.30      0.200 setosa 
 4        4.60       3.10        1.5       0.200 setosa 
 5        5          3.60        1.40      0.200 setosa 
 6        5.40       3.90        1.70      0.400 setosa 
 7        4.60       3.40        1.40      0.300 setosa 
 8        5          3.40        1.5       0.200 setosa 
 9        4.40       2.90        1.40      0.200 setosa 
10        4.90       3.10        1.5       0.100 setosa 
# ℹ 140 more rows
> 
> tmp <- tempfile(fileext = ".dta")
> write_dta(mtcars, tmp)
> read_dta(tmp)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> read_stata(tmp)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> 
> 
> cleanEx()
> nameEx("read_sas")
> ### * read_sas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_sas
> ### Title: Read SAS files
> ### Aliases: read_sas
> 
> ### ** Examples
> 
> path <- system.file("examples", "iris.sas7bdat", package = "haven")
> read_sas(path)
# A tibble: 150 × 5
   Sepal_Length Sepal_Width Petal_Length Petal_Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <chr>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# ℹ 140 more rows
> 
> 
> 
> cleanEx()
> nameEx("read_spss")
> ### * read_spss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_spss
> ### Title: Read and write SPSS files
> ### Aliases: read_spss read_sav read_por write_sav
> 
> ### ** Examples
> 
> path <- system.file("examples", "iris.sav", package = "haven")
> read_sav(path)
# A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          <dbl>       <dbl>        <dbl>       <dbl> <dbl+lbl> 
 1          5.1         3.5          1.4         0.2 1 [setosa]
 2          4.9         3            1.4         0.2 1 [setosa]
 3          4.7         3.2          1.3         0.2 1 [setosa]
 4          4.6         3.1          1.5         0.2 1 [setosa]
 5          5           3.6          1.4         0.2 1 [setosa]
 6          5.4         3.9          1.7         0.4 1 [setosa]
 7          4.6         3.4          1.4         0.3 1 [setosa]
 8          5           3.4          1.5         0.2 1 [setosa]
 9          4.4         2.9          1.4         0.2 1 [setosa]
10          4.9         3.1          1.5         0.1 1 [setosa]
# ℹ 140 more rows
> 
> tmp <- tempfile(fileext = ".sav")
> write_sav(mtcars, tmp)
> read_sav(tmp)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> 
> 
> cleanEx()
> nameEx("read_xpt")
> ### * read_xpt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_xpt
> ### Title: Read and write SAS transport files
> ### Aliases: read_xpt write_xpt
> 
> ### ** Examples
> 
> tmp <- tempfile(fileext = ".xpt")
> write_xpt(mtcars, tmp)
> read_xpt(tmp)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# ℹ 22 more rows
> 
> 
> 
> cleanEx()
> nameEx("tagged_na")
> ### * tagged_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tagged_na
> ### Title: "Tagged" missing values
> ### Aliases: tagged_na na_tag is_tagged_na format_tagged_na print_tagged_na
> 
> ### ** Examples
> 
> x <- c(1:5, tagged_na("a"), tagged_na("z"), NA)
> 
> # Tagged NA's work identically to regular NAs
> x
[1]  1  2  3  4  5 NA NA NA
> is.na(x)
[1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
> 
> # To see that they're special, you need to use na_tag(),
> # is_tagged_na(), or print_tagged_na():
> is_tagged_na(x)
[1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE FALSE
> na_tag(x)
[1] NA  NA  NA  NA  NA  "a" "z" NA 
> print_tagged_na(x)
[1]     1     2     3     4     5 NA(a) NA(z)    NA
> 
> # You can test for specific tagged NAs with the second argument
> is_tagged_na(x, "a")
[1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE
> 
> # Because the support for tagged's NAs is somewhat tagged on to R,
> # the left-most NA will tend to be preserved in arithmetic operations.
> na_tag(tagged_na("a") + tagged_na("z"))
[1] "a"
> 
> 
> 
> cleanEx()
> nameEx("zap_empty")
> ### * zap_empty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zap_empty
> ### Title: Convert empty strings into missing values
> ### Aliases: zap_empty
> 
> ### ** Examples
> 
> x <- c("a", "", "c")
> zap_empty(x)
[1] "a" NA  "c"
> 
> 
> 
> cleanEx()
> nameEx("zap_label")
> ### * zap_label
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zap_label
> ### Title: Zap variable labels
> ### Aliases: zap_label
> 
> ### ** Examples
> 
> x1 <- labelled(1:5, c(good = 1, bad = 5), label = "rating")
> x1
<labelled<integer>[5]>: rating
[1] 1 2 3 4 5

Labels:
 value label
     1  good
     5   bad
> zap_label(x1)
<labelled<integer>[5]>
[1] 1 2 3 4 5

Labels:
 value label
     1  good
     5   bad
> 
> x2 <- labelled_spss(c(1:4, 9), label = "score", na_values = 9)
> x2
<labelled_spss<double>[5]>: score
[1] 1 2 3 4 9
Missing values: 9
> zap_label(x2)
<labelled_spss<double>[5]>
[1] 1 2 3 4 9
Missing values: 9
> 
> # zap_label also works with data frames
> df <- tibble::tibble(x1, x2)
> str(df)
tibble [5 × 2] (S3: tbl_df/tbl/data.frame)
 $ x1: int+lbl [1:5] 1, 2, 3, 4, 5
   ..@ labels: Named int [1:2] 1 5
   .. ..- attr(*, "names")= chr [1:2] "good" "bad"
   ..@ label : chr "rating"
 $ x2: dbl+lbl [1:5] 1, 2, 3, 4, 9
   ..@ label    : chr "score"
   ..@ na_values: num 9
> str(zap_label(df))
tibble [5 × 2] (S3: tbl_df/tbl/data.frame)
 $ x1: int+lbl [1:5] 1, 2, 3, 4, 5
   ..@ labels: Named int [1:2] 1 5
   .. ..- attr(*, "names")= chr [1:2] "good" "bad"
 $ x2: dbl+lbl [1:5] 1, 2, 3, 4, 9
   ..@ na_values: num 9
> 
> 
> 
> cleanEx()
> nameEx("zap_labels")
> ### * zap_labels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zap_labels
> ### Title: Zap value labels
> ### Aliases: zap_labels zap_labels.haven_labelled_spss
> 
> ### ** Examples
> 
> x1 <- labelled(1:5, c(good = 1, bad = 5))
> x1
<labelled<integer>[5]>
[1] 1 2 3 4 5

Labels:
 value label
     1  good
     5   bad
> zap_labels(x1)
[1] 1 2 3 4 5
> 
> x2 <- labelled_spss(c(1:4, 9), c(good = 1, bad = 5), na_values = 9)
> x2
<labelled_spss<double>[5]>
[1] 1 2 3 4 9
Missing values: 9

Labels:
 value label
     1  good
     5   bad
> zap_labels(x2)
[1]  1  2  3  4 NA
> 
> # Keep the user defined missing values
> zap_labels(x2, user_na = TRUE)
[1] 1 2 3 4 9
> 
> # zap_labels also works with data frames
> df <- tibble::tibble(x1, x2)
> df
# A tibble: 5 × 2
  x1        x2       
  <int+lbl> <dbl+lbl>
1 1 [good]  1 [good] 
2 2         2        
3 3         3        
4 4         4        
5 5 [bad]   9 (NA)   
> zap_labels(df)
# A tibble: 5 × 2
     x1    x2
  <int> <dbl>
1     1     1
2     2     2
3     3     3
4     4     4
5     5    NA
> 
> 
> 
> cleanEx()
> nameEx("zap_missing")
> ### * zap_missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zap_missing
> ### Title: Zap special missings to regular R missings
> ### Aliases: zap_missing
> 
> ### ** Examples
> 
> x1 <- labelled(
+   c(1, 5, tagged_na("a", "b")),
+   c(Unknown = tagged_na("a"), Refused = tagged_na("b"))
+ )
> x1
<labelled<double>[4]>
[1]     1     5 NA(a) NA(b)

Labels:
 value   label
 NA(a) Unknown
 NA(b) Refused
> zap_missing(x1)
<labelled<double>[4]>
[1]  1  5 NA NA
> 
> x2 <- labelled_spss(
+   c(1, 2, 1, 99),
+   c(missing = 99),
+   na_value = 99
+ )
> x2
<labelled_spss<double>[4]>
[1]  1  2  1 99
Missing values: 99

Labels:
 value   label
    99 missing
> zap_missing(x2)
[1]  1  2  1 NA
attr(,"labels")
missing 
     99 
attr(,"class")
[1] "haven_labelled"
> 
> # You can also apply to data frames
> df <- tibble::tibble(x1, x2, y = 4:1)
> df
# A tibble: 4 × 3
  x1              x2                    y
  <dbl+lbl>       <dbl+lbl>         <int>
1     1            1                    4
2     5            2                    3
3 NA(a) [Unknown]  1                    2
4 NA(b) [Refused] 99 (NA) [missing]     1
> zap_missing(df)
# A tibble: 4 × 3
  x1        x2            y
  <dbl+lbl> <dbl+lbl> <int>
1  1         1            4
2  5         2            3
3 NA         1            2
4 NA        NA            1
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.665 0.057 0.723 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
