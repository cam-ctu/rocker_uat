
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fst"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fst')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fst")
> ### * fst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fst
> ### Title: Access a fst file like a regular data frame
> ### Aliases: fst
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # generate a sample fst file
> ##D path <- paste0(tempfile(), ".fst")
> ##D write_fst(iris, path)
> ##D 
> ##D # create a fst_table object that can be used as a data frame
> ##D ft <- fst(path)
> ##D 
> ##D # print head and tail
> ##D print(ft)
> ##D 
> ##D # select columns and rows
> ##D x <- ft[10:14, c("Petal.Width", "Species")]
> ##D 
> ##D # use the common list interface
> ##D ft[TRUE]
> ##D ft[c(TRUE, FALSE)]
> ##D ft[["Sepal.Length"]]
> ##D ft$Petal.Length
> ##D 
> ##D # use data frame generics
> ##D nrow(ft)
> ##D ncol(ft)
> ##D dim(ft)
> ##D dimnames(ft)
> ##D colnames(ft)
> ##D rownames(ft)
> ##D names(ft)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("metadata_fst")
> ### * metadata_fst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metadata_fst
> ### Title: Read metadata from a fst file
> ### Aliases: metadata_fst fst.metadata
> 
> ### ** Examples
> 
> # Sample dataset
> x <- data.frame(
+   First = 1:10,
+   Second = sample(c(TRUE, FALSE, NA), 10, replace = TRUE),
+   Last = sample(LETTERS, 10))
> 
> # Write to fst file
> fst_file <- tempfile(fileext = ".fst")
> write_fst(x, fst_file)
> 
> # Display meta information
> metadata_fst(fst_file)
<fst file>
10 rows, 3 columns (filee6c829017737.fst)

* 'First' : integer
* 'Second': logical
* 'Last'  : character
> 
> 
> 
> cleanEx()

detaching ‘package:fstcore’

> nameEx("write_fst")
> ### * write_fst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_fst
> ### Title: Read and write fst files.
> ### Aliases: write_fst write.fst read_fst read.fst
> 
> ### ** Examples
> 
> # Sample dataset
> x <- data.frame(A = 1:10000, B = sample(c(TRUE, FALSE, NA), 10000, replace = TRUE))
> 
> # Default compression
> fst_file <- tempfile(fileext = ".fst")
> write_fst(x, fst_file)  # filesize: 17 KB
> y <- read_fst(fst_file) # read fst file
> # Maximum compression
> write_fst(x, fst_file, 100)  # fileSize: 4 KB
> y <- read_fst(fst_file) # read fst file
> 
> # Random access
> y <- read_fst(fst_file, "B") # read selection of columns
> y <- read_fst(fst_file, "A", 100, 200) # read selection of columns and rows
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:fstcore’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.227 0.003 0.218 0.003 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
