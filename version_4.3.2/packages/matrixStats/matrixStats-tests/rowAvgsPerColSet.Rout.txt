
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d           e          f
A  0.1547704 -0.13772404  0.32313012 -0.07665030 -0.40204783 -0.5279009
B -1.4877691 -2.30744683  0.84524657  0.46991408 -1.35452869 -1.3760268
C -1.5166188 -0.68780786 -1.14274066 -0.57822716 -1.64497349  0.4446730
D -0.6703017  1.21325725 -0.83008673 -0.32645184  0.98650760  1.2855645
E -0.2650895 -0.88526322 -1.31513351  0.89431597  1.42999758 -1.0963905
F -0.8969832  2.13362330 -0.62536011  0.86158524 -1.68766417 -0.5304327
G  0.5606461  0.38092179 -0.94765434 -0.63632971 -0.51252164 -1.0080100
H -0.1267193  0.24794417  1.07605449 -0.40374166  0.22365439  1.6049704
I -2.0200124  0.06830874 -2.08287591  0.51273170 -1.31615083  0.8041526
J  1.1255831 -0.49022804 -0.40800968 -0.80695934  1.29906813 -1.2149451
K  1.1858901  1.02686040  1.90347122 -0.49545235  0.16208305 -1.2861619
L -0.6814933  0.42413418 -1.71048914  0.85803331 -0.97987465 -1.4292675
M -0.9564661 -1.41977742 -3.98125456 -0.68954904 -0.05850912  0.7306079
N -0.4566972 -1.14689661  0.89570780 -0.01814072 -1.37714764 -1.7520746
O -2.8602927 -0.22234049 -0.85298150  1.00098164 -0.35329777 -0.6267263
P -1.7421680  1.62339764 -0.71889426 -0.64923219 -0.41027246 -0.3258989
Q  0.6346876 -0.73180176  0.60893205  0.34417235 -0.66323263  0.3152030
R  0.5181706 -0.14485044  2.14104692 -0.19274394 -0.58842544 -1.6675877
S -1.5007396 -0.09653659 -0.01554609 -0.02605777  1.00278150  2.3844174
T  0.1761736  0.35314001  0.79172443 -1.65468077  1.57195030  1.6271840
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
            s1          s2         s3
A  0.008523178  0.12323991 -0.4649744
B -1.897607974  0.65758033 -1.3652777
C -1.102213314 -0.86048391 -0.6001503
D  0.271477790 -0.57826928  1.1360361
E -0.575176374 -0.21040877  0.1668035
F  0.618320034  0.11811256 -1.1090484
G  0.470783946 -0.79199202 -0.7602658
H  0.060612451  0.33615642  0.9143124
I -0.975851839 -0.78507210 -0.2559991
J  0.317677522 -0.60748451  0.0420615
K  1.106375225  0.70400944 -0.5620394
L -0.128679540 -0.42622791 -1.2045711
M -1.188121766 -2.33540180  0.3360494
N -0.801796906  0.43878354 -1.5646111
O -1.541316570  0.07400007 -0.4900120
P -0.059385179 -0.68406322 -0.3680857
Q -0.048557080  0.47655220 -0.1740148
R  0.186660105  0.97415149 -1.1280066
S -0.798638100 -0.02080193  1.6935995
T  0.264656810 -0.43147817  1.5995671
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c           d          e           f
s1 -0.87997979 -0.4799304 -0.2011127 -0.12785381 -0.6037606 -0.04342255
s2 -0.18203648  0.4693065 -0.4530234  0.17895746 -0.1366335 -0.25746568
s3 -0.09750814  0.2572688 -0.5744759  0.01708833 -0.2087186 -0.78155548
s4 -1.50390599 -0.2914042 -1.1643556 -0.08898508 -0.5498067 -0.49352297
s5 -0.04292694 -0.1550122  0.8815393 -0.38232753  0.3307684  0.66480417
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.11107043
B -0.86843513
C -0.85428250
D  0.27641485
E -0.20626054
F -0.12420527
G -0.36049129
H  0.43702709
I -0.67230769
J -0.08258183
K  0.41611509
L -0.58649284
M -1.06249140
N -0.64254150
O -0.65244284
P -0.37051135
Q  0.08466010
R  0.01093501
S  0.29138648
T  0.47758192
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a           b          c           d          e          f
s1 -0.5412715 -0.03995429 -0.3022856 -0.08062412 -0.2336302 -0.1822325
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
            s1          s2         s3
A  0.008523178  0.12323991 -0.4649744
B -1.897607974  0.65758033 -1.3652777
C -1.102213314 -0.86048391 -0.6001503
D  0.271477790 -0.57826928  1.1360361
E -0.575176374 -0.21040877  0.1668035
F  0.618320034  0.11811256 -1.1090484
G  0.470783946 -0.79199202 -0.7602658
H  0.060612451  0.33615642  0.9143124
I -0.975851839 -0.78507210 -0.2559991
J  0.317677522 -0.60748451  0.0420615
K  1.106375225  0.70400944 -0.5620394
L -0.128679540 -0.42622791 -1.2045711
M -1.188121766 -2.33540180  0.3360494
N -0.801796906  0.43878354 -1.5646111
O -1.541316570  0.07400007 -0.4900120
P -0.059385179 -0.68406322 -0.3680857
Q -0.048557080  0.47655220 -0.1740148
R  0.186660105  0.97415149 -1.1280066
S -0.798638100 -0.02080193  1.6935995
T  0.264656810 -0.43147817  1.5995671
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e          f
s1 -0.6664994 -1.2225854  0.5841883  0.1966319 -0.8782883 -0.9519638
s2 -1.0934602  0.2627247 -0.9864137 -0.4523395 -0.3292329  0.8651187
s3 -0.5810364  0.6241800 -0.9702468  0.8779506 -0.1288333 -0.8134116
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
