
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a            b           c          d           e           f
A  1.76558008  0.385079350 -0.01429802  0.7268592 -0.49252442  0.74121655
B -0.95352553  2.382972101 -0.04469827 -0.6448311 -0.64692833 -1.35048353
C -0.95716663 -0.307376889 -0.41672223  3.0623709 -0.19893065 -0.03758266
D -0.93764182  0.371492162  1.12636047 -1.1776292  0.70012385 -1.15108382
E -2.30656145 -0.917305691  0.47809762 -0.1050677  1.05337618  0.31141464
F  0.15476435  2.634158055  1.49878604  0.2505298 -1.18046042 -1.67810887
G  0.56052770 -1.830260976  1.33379458 -1.2068757  0.09268138 -0.24688591
H  0.73360130 -1.780229571 -2.62184648 -0.2291556 -0.72373021  1.18619639
I  0.39936597  0.226627527  0.06865658 -0.5834605 -1.11035398  0.09585091
J  1.25525780 -0.078837921 -0.72729248  1.2861822  0.46630084 -1.71928124
K -0.72668803 -1.052197772 -0.73682195 -0.9597451 -0.82712683  2.17817293
L -0.30700746 -0.708755269 -1.81965565  0.9650927  1.42592366  0.99408323
M  0.20733912 -1.106030081  2.12257767  1.1673901 -1.92628242  1.05481126
N -0.03055192 -0.226304261  0.32565441  0.3703901  2.22320858  0.11929461
O -0.34703659 -0.952267618  0.70719839  0.7062698 -0.51911881 -0.89157585
P  0.51930514  0.303483711 -1.93772842 -0.2526844 -0.05373797 -0.27890484
Q -1.27942619  0.006540739  0.38217737 -0.3143942 -0.31818751  1.79965575
R  0.31255920 -0.025802450 -0.15365302  0.5586066  0.04026823 -0.50422955
S  0.74657440  0.276769399 -1.10007614 -1.3004479  0.17157708  1.01148083
T -1.79868246 -0.950279909 -0.88468547 -0.3649218  0.24473749 -1.90043978
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
          s1          s2          s3
A  1.0753297  0.35628057  0.12434607
B  0.7147233 -0.34476468 -0.99870593
C -0.6322718  1.32282431 -0.11825666
D -0.2830748 -0.02563439 -0.22547999
E -1.6119336  0.18651495  0.68239541
F  1.3944612  0.87465791 -1.42928465
G -0.6348666  0.06345942 -0.07710227
H -0.5233141 -1.42550101  0.23123309
I  0.3129967 -0.25740194 -0.50725153
J  0.5882099  0.27944489 -0.62649020
K -0.8894429 -0.84828355  0.67552305
L -0.5078814 -0.42728150  1.21000344
M -0.4493455  1.64498386 -0.43573558
N -0.1284281  0.34802227  1.17125160
O -0.6496521  0.70673410 -0.70534733
P  0.4113944 -1.09520643 -0.16632141
Q -0.6364427  0.03389158  0.74073412
R  0.1433784  0.20247681 -0.23198066
S  0.5116719 -1.20026200  0.59152896
T -1.3744812 -0.62480361 -0.82785115
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b          c          d           e            f
s1 -0.27068847  0.7080417  0.1626605  0.4916924 -0.15956489 -0.449483368
s2 -0.21441703 -0.4734095  0.1722079 -0.3226423 -0.18953327 -0.106845938
s3  0.15523207 -0.4032909 -0.8037784  0.1770173 -0.01131408  0.387206457
s4  0.08726394 -0.4952796  0.3044255  0.4978414 -0.06898266  0.000906297
s5 -0.50474376 -0.1731931 -0.4390593 -0.3552893  0.03459882  0.101616814
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.51865212
B -0.20958244
C  0.19076530
D -0.17806307
E -0.24767440
F  0.27994482
G -0.21616983
H -0.57252735
I -0.15055224
J  0.08038821
K -0.35406780
L  0.09161353
M  0.25330093
N  0.46361526
O -0.21608844
P -0.28337780
Q  0.04606099
R  0.03795817
S -0.03235371
T -0.94237865
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b          c          d           e           f
s1 -0.1494707 -0.1674263 -0.1207088 0.09772391 -0.07895921 -0.01331995
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
          s1          s2          s3
A  1.0753297  0.35628057  0.12434607
B  0.7147233 -0.34476468 -0.99870593
C -0.6322718  1.32282431 -0.11825666
D -0.2830748 -0.02563439 -0.22547999
E -1.6119336  0.18651495  0.68239541
F  1.3944612  0.87465791 -1.42928465
G -0.6348666  0.06345942 -0.07710227
H -0.5233141 -1.42550101  0.23123309
I  0.3129967 -0.25740194 -0.50725153
J  0.5882099  0.27944489 -0.62649020
K -0.8894429 -0.84828355  0.67552305
L -0.5078814 -0.42728150  1.21000344
M -0.4493455  1.64498386 -0.43573558
N -0.1284281  0.34802227  1.17125160
O -0.6496521  0.70673410 -0.70534733
P  0.4113944 -1.09520643 -0.16632141
Q -0.6364427  0.03389158  0.74073412
R  0.1433784  0.20247681 -0.23198066
S  0.5116719 -1.20026200  0.59152896
T -1.3744812 -0.62480361 -0.82785115
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c          d           e          f
s1  0.4060273 1.38402573 -0.02949815 0.04101404 -0.56972637 -0.3046335
s2 -0.9474042 0.03205764  0.35481912 0.94237080  0.25059660 -0.5943332
s3 -1.0758986 0.85842618  0.98844183 0.07273103 -0.06354212 -0.6833471
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
