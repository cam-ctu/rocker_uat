
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
             a            b           c           d          e          f
A -0.498443667 -0.308674038 -1.98266183  0.31313112  1.2383617 -1.1234270
B -0.001592697  0.957440416 -0.64371169  2.97224528 -0.2163116 -1.0735414
C  0.395795557 -0.289895006 -0.42991335 -0.09541677  0.2264365 -0.5129073
D  0.074112432 -0.935773208  0.23004137  0.55187375 -0.3512460 -0.4186141
E  1.261360890 -2.254972400  0.05421640 -1.93249180  1.5434791 -0.8967051
F -1.588939100 -1.186807215 -0.67811425  1.28839587  1.0739911  0.1817225
G -0.930667503 -0.173276158  0.02217314  0.75036283 -1.0350365  1.4788948
H  0.276968010 -0.007117637  0.39873002  0.06550954  0.5403196 -0.1007011
I  1.618209071 -0.086587272  0.09115809  0.40048242 -0.5149370 -0.3319513
J  1.613717541 -1.667899501 -0.69892741  0.03923489  1.0192698 -1.1750804
K  0.094293177  1.734183109 -0.77949308  2.02756811  1.3068594 -1.2078134
L  0.927322211 -0.976710458  0.13774691  0.15987814 -1.6974799 -1.5788011
M  0.903065968 -0.301073316 -0.91731969  0.29614589  2.1482166  0.4646643
N -0.360367177 -0.351677212 -0.07019395  0.45588479 -0.1207015 -1.2621480
O  0.306718782  0.410576607 -0.79657788  0.22799452 -0.5888226 -0.3286201
P  0.492564378 -0.875136838  0.81508596  2.27057876 -1.0589221  0.1305889
Q  0.623682827 -0.817768796  1.70727352 -2.30068807  0.9484193 -1.1089879
R -1.357343154 -0.325913082 -0.49645672 -0.34884095 -0.2180637  0.2837777
S -1.620025036  0.497060008  0.03783163  0.19383398 -0.4245919  0.7017744
T  0.253639394 -1.430408245  0.65029882 -0.66162665 -0.5656492  0.2603350
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1           s2          s3
A -0.40355885 -0.834765357  0.05746735
B  0.47792386  1.164266795 -0.64492650
C  0.05295028 -0.262665062 -0.14323544
D -0.43083039  0.390957557 -0.38493008
E -0.49680575 -0.939137702  0.32338698
F -1.38787316  0.305140810  0.62785678
G -0.55197183  0.386267987  0.22192911
H  0.13492519  0.232119779  0.21980923
I  0.76581090  0.245820255 -0.42344416
J -0.02709098 -0.329846258 -0.07790533
K  0.91423814  0.624037518  0.04952301
L -0.02469412  0.148812524 -1.63814051
M  0.30099633 -0.310586898  1.30644044
N -0.35602219  0.192845421 -0.69142471
O  0.35864769 -0.284291679 -0.45872132
P -0.19128623  1.542832362 -0.46416663
Q -0.09704298 -0.296707272 -0.08028430
R -0.84162812 -0.422648834  0.03285702
S -0.56148251  0.115832809  0.13859123
T -0.58838443 -0.005663915 -0.15265714
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
              a          b           c           d           e           f
s1 -0.007532094 -0.1442255 -0.70656138  0.93545834  0.22431011 -0.78212245
s2 -0.245319426 -0.9055434 -0.05074867  0.04294411  0.53068830  0.16580276
s3  1.063385500 -0.2492535 -0.31237887  0.65679089  0.02842808 -1.07341158
s4  0.335495487 -0.2793277 -0.24225139  0.81265099  0.09494260 -0.24887871
s5 -0.525011492 -0.5192575  0.47473681 -0.77933042 -0.06497138  0.03422479
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.39361895
B  0.33242138
C -0.11765008
D -0.14160097
E -0.37085216
F -0.15162519
G  0.01874176
H  0.19561807
I  0.19606233
J -0.14494752
K  0.52926622
L -0.50467404
M  0.43228329
N -0.28486716
O -0.12812177
P  0.29579317
Q -0.15801152
R -0.41047331
S -0.10235282
T -0.24890183
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a          b          c         d         e         f
s1 0.1242036 -0.4195215 -0.1674407 0.3337028 0.1626795 -0.380877
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1           s2          s3
A -0.40355885 -0.834765357  0.05746735
B  0.47792386  1.164266795 -0.64492650
C  0.05295028 -0.262665062 -0.14323544
D -0.43083039  0.390957557 -0.38493008
E -0.49680575 -0.939137702  0.32338698
F -1.38787316  0.305140810  0.62785678
G -0.55197183  0.386267987  0.22192911
H  0.13492519  0.232119779  0.21980923
I  0.76581090  0.245820255 -0.42344416
J -0.02709098 -0.329846258 -0.07790533
K  0.91423814  0.624037518  0.04952301
L -0.02469412  0.148812524 -1.63814051
M  0.30099633 -0.310586898  1.30644044
N -0.35602219  0.192845421 -0.69142471
O  0.35864769 -0.284291679 -0.45872132
P -0.19128623  1.542832362 -0.46416663
Q -0.09704298 -0.296707272 -0.08028430
R -0.84162812 -0.422648834  0.03285702
S -0.56148251  0.115832809  0.13859123
T -0.58838443 -0.005663915 -0.15265714
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b           c          d           e          f
s1 -0.2500182  0.3243832 -1.31318676  1.6426882  0.51102501 -1.0984842
s2  0.2349540 -0.6128341 -0.09993599  0.2282285 -0.06240479 -0.4657607
s3 -0.1637891 -1.7208898 -0.31194893 -0.3220480  1.30873508 -0.3574913
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
