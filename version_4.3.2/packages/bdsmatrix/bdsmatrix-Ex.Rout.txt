
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bdsmatrix"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bdsmatrix')

Attaching package: ‘bdsmatrix’

The following object is masked from ‘package:base’:

    backsolve

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bdsBlock")
> ### * bdsBlock
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdsBlock
> ### Title: Block diagonal matrices.
> ### Aliases: bdsBlock
> ### Keywords: array
> 
> ### ** Examples
> 
> id    <- letters[1:10]
> group <- c(1,1,3,2,3,3,2,3,2,4)
> bdsBlock(id, group)
  a b d g i c e f h j
a 1 1 0 0 0 0 0 0 0 0
b 1 1 0 0 0 0 0 0 0 0
d 0 0 1 1 1 0 0 0 0 0
g 0 0 1 1 1 0 0 0 0 0
i 0 0 1 1 1 0 0 0 0 0
c 0 0 0 0 0 1 1 1 1 0
e 0 0 0 0 0 1 1 1 1 0
f 0 0 0 0 0 1 1 1 1 0
h 0 0 0 0 0 1 1 1 1 0
j 0 0 0 0 0 0 0 0 0 1
> ## Not run: 
> ##D     a b d g i c e f h j 
> ##D   a 1 1 0 0 0 0 0 0 0 0
> ##D   b 1 1 0 0 0 0 0 0 0 0
> ##D   d 0 0 1 1 1 0 0 0 0 0
> ##D   g 0 0 1 1 1 0 0 0 0 0
> ##D   i 0 0 1 1 1 0 0 0 0 0
> ##D   c 0 0 0 0 0 1 1 1 1 0
> ##D   e 0 0 0 0 0 1 1 1 1 0
> ##D   f 0 0 0 0 0 1 1 1 1 0
> ##D   h 0 0 0 0 0 1 1 1 1 0
> ##D   j 0 0 0 0 0 0 0 0 0 1
> ##D 
> ##D # Create the matrices for a sparse nested fit of family within city
> ##D group <- paste(mydata$city, mydata$family, sep='/')
> ##D mat1 <- bdsI(group)
> ##D mat2 <- bdsBlock(group, mydata$city)
> ##D 
> ##D fit <- coxme(Surv(time, status) ~ age + sex + (1|group), data=mydata,
> ##D                varlist=list(mat1, mat2))
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("bdsI")
> ### * bdsI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdsI
> ### Title: Sparse identity matrices
> ### Aliases: bdsI
> ### Keywords: survival
> 
> ### ** Examples
> 
> imat <- bdsI(1:10)
> 
> 
> 
> cleanEx()
> nameEx("bdsmatrix-class")
> ### * bdsmatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdsmatrix-class
> ### Title: Class "bdsmatrix"
> ### Aliases: bdsmatrix-class %*%,matrix,bdsmatrix-method
> ###   %*%,numeric,bdsmatrix-method %*%,bdsmatrix,matrix-method
> ###   %*%,bdsmatrix,numeric-method Math2,bdsmatrix-method
> ###   Math,bdsmatrix-method Ops,bdsmatrix,numeric-method
> ###   Ops,bdsmatrix,bdsmatrix-method Ops,bdsmatrix,matrix-method
> ###   Ops,numeric,bdsmatrix-method Ops,matrix,bdsmatrix-method
> ###   [,bdsmatrix-method all,bdsmatrix-method any,bdsmatrix-method
> ###   coerce,bdsmatrix,matrix-method coerce,bdsmatrix,vector-method
> ###   diag,bdsmatrix-method diag<-,bdsmatrix-method dim,bdsmatrix-method
> ###   dimnames,bdsmatrix-method dimnames<-,bdsmatrix-method
> ###   gchol,bdsmatrix-method max,bdsmatrix-method min,bdsmatrix-method
> ###   prod,bdsmatrix-method range,bdsmatrix-method show,bdsmatrix-method
> ###   sum,bdsmatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("bdsmatrix")
Class "bdsmatrix" [package "bdsmatrix"]

Slots:
                                                                  
Name:  blocksize    blocks      rmat   offdiag       Dim  Dimnames
Class:   integer   numeric    matrix   numeric   integer      list
> 
> 
> 
> cleanEx()
> nameEx("bdsmatrix")
> ### * bdsmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdsmatrix
> ### Title: Create a sparse symmetric block diagonal matrix object
> ### Aliases: bdsmatrix
> ### Keywords: array
> 
> ### ** Examples
> 
> # The matrix shown above is created by
> tmat <- bdsmatrix(c(2,3), c(1,2,1, 3,1,2, 4,3, 5),
+                   rmat=matrix(c(4,6,8,1,2,7,6, 5,7,8,1,2,6,9), ncol=2))
> 
> # Note that only the lower part of the blocks is needed, however, the
> #  entire block set is also allowed, i.e., c(1,2,2,1, 3,1,2,1,4,3,2,3,5)
> 
> 
> 
> cleanEx()
> nameEx("bdsmatrix.ibd")
> ### * bdsmatrix.ibd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdsmatrix.ibd
> ### Title: Create a bdsmatrix from a list
> ### Aliases: bdsmatrix.ibd
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ibdmat <- bdsmatrix.ibd(i,j, ibdval, idlist=subject)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("gchol-class")
> ### * gchol-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gchol-class
> ### Title: Class "gchol"
> ### Aliases: gchol-class coerce,gchol,matrix-method diag,gchol-method
> ###   dim,gchol-method dimnames,gchol-method show,gchol-method
> ###   gchol,matrix-method [,gchol-method %*%,gchol,matrix-method
> ###   %*%,matrix,gchol-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("gchol")
Class "gchol" [package "bdsmatrix"]

Slots:
                                          
Name:     .Data      Dim Dimnames     rank
Class:  numeric  integer     list  integer
> 
> 
> 
> cleanEx()
> nameEx("gchol")
> ### * gchol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gchol
> ### Title: Generalized Cholesky decompostion
> ### Aliases: gchol
> ### Keywords: array
> 
> ### ** Examples
> 
> # Create a matrix that is symmetric, but not positive definite
> #   The matrix temp has column 6 redundant with cols 1-5
> smat <- matrix(1:64, ncol=8)
> smat <- smat + t(smat) + diag(rep(20,8))  #smat is 8 by 8 symmetric
> temp <-  smat[c(1:5, 5:8), c(1:5, 5:8)]
> ch1  <- gchol(temp)
> 
> print(as.matrix(ch1), digits=4)   # print out L
        [,1]   [,2]    [,3]    [,4]   [,5] [,6]  [,7]   [,8] [,9]
 [1,] 1.0000 0.0000 0.00000  0.0000   0.00    0 0.000 0.0000    0
 [2,] 0.5000 1.0000 0.00000  0.0000   0.00    0 0.000 0.0000    0
 [3,] 0.9091 0.5507 1.00000  0.0000   0.00    0 0.000 0.0000    0
 [4,] 1.3182 0.6812 0.26212  1.0000   0.00    0 0.000 0.0000    0
 [5,] 1.7273 0.8116 0.20557 -0.2909   1.00    0 0.000 0.0000    0
 [6,] 1.7273 0.8116 0.20557 -0.2909   1.00    1 0.000 0.0000    0
 [7,] 2.1364 0.9420 0.14901 -0.5691 -10.53    0 1.000 0.0000    0
 [8,] 2.5455 1.0725 0.09246 -0.8473 -14.73    0 1.481 1.0000    0
 [9,] 2.9545 1.2029 0.03591 -1.1255 -18.93    0 1.901 0.8764    1
> print(diag(ch1))        # Note the zero at position 6
[1]   22.000000   34.500000   29.354414   19.748654    2.727273    0.000000
[7] -328.666667   61.955375   42.996333
> 
> ginv <- solve(ch1)    # generalized inverse
> diag(ginv)            # also has column 6 marked as singular
[1] 0.01558236 0.02852096 0.03751218 0.04255604 0.04365253 0.00000000 0.04080166
[8] 0.03400341 0.02325780
> 
> 
> 
> cleanEx()
> nameEx("gchol.bdsmatrix-class")
> ### * gchol.bdsmatrix-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gchol.bdsmatrix-class
> ### Title: Class "gchol.bdsmatrix"
> ### Aliases: gchol.bdsmatrix-class %*%,gchol.bdsmatrix,matrix-method
> ###   %*%,gchol.bdsmatrix,numeric-method %*%,matrix,gchol.bdsmatrix-method
> ###   %*%,numeric,gchol.bdsmatrix-method [,gchol.bdsmatrix-method
> ###   coerce,gchol.bdsmatrix,matrix-method diag,gchol.bdsmatrix-method
> ###   dim,gchol.bdsmatrix-method show,gchol.bdsmatrix-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("gchol.bdsmatrix")
Class "gchol.bdsmatrix" [package "bdsmatrix"]

Slots:
                                                                  
Name:  blocksize    blocks      rmat      rank       Dim  Dimnames
Class:   integer   numeric    matrix   integer   integer      list
> 
> 
> 
> cleanEx()
> nameEx("solve.bdsmatrix")
> ### * solve.bdsmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solve.bdsmatrix
> ### Title: Solve a matrix equation using the generalized Cholesky
> ###   decompostion
> ### Aliases: solve.bdsmatrix
> ### Keywords: array
> 
> ### ** Examples
> 
> tmat <- bdsmatrix(c(3,2,2,4), 
+               c(22,1,2,21,3,20,19,4,18,17,5,16,15,6,7, 8,14,9,10,13,11,12),
+               matrix(c(1,0,1,1,0,0,1,1,0,1,0,10,0,
+                        0,1,1,0,1,1,0,1,1,0,1,0,10), ncol=2))
> dim(tmat)
[1] 13 13
> solve(tmat, cbind(1:13, rep(1,13)))
             [,1]        [,2]
 [1,] -0.01219425 0.037189721
 [2,]  0.03599769 0.037428728
 [3,]  0.02852513 0.032808664
 [4,]  0.10898346 0.039556695
 [5,]  0.18852216 0.042410678
 [6,]  0.19492085 0.041051839
 [7,]  0.30313564 0.044747545
 [8,] -0.10110693 0.026851076
 [9,] -0.07807923 0.031178493
[10,] -0.07959864 0.031045468
[11,]  1.02454712 0.004460442
[12,]  1.17522556 0.078780083
[13,]  1.17066732 0.078381008
> 
> 
> 
> cleanEx()
> nameEx("solve.gchol")
> ### * solve.gchol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solve.gchol
> ### Title: Solve a matrix equation using the generalized Cholesky
> ###   decompostion
> ### Aliases: solve.gchol
> ### Keywords: array
> 
> ### ** Examples
> 
> # Create a matrix that is symmetric, but not positive definite
> #   The matrix temp has column 6 redundant with cols 1-5
> smat <- matrix(1:64, ncol=8)
> smat <- smat + t(smat) + diag(rep(20,8))  #smat is 8 by 8 symmetric
> temp <-  smat[c(1:5, 5:8), c(1:5, 5:8)]
> ch1  <- gchol(temp)
> 
> ginv <- solve(ch1, full=FALSE)  # generalized inverse of ch1
> tinv <- solve(ch1, full=TRUE)   # generalized inverse of temp
> all.equal(temp %*% tinv %*% temp, temp)
[1] TRUE
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.202 0.022 0.224 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
