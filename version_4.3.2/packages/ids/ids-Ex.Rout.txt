
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ids"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ids')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("adjective_animal")
> ### * adjective_animal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adjective_animal
> ### Title: Ids based on a number of adjectives and an animal
> ### Aliases: adjective_animal
> 
> ### ** Examples
> 
> # Generate a random identifier:
> adjective_animal()
[1] "careful_gaur"
> 
> # Generate a bunch all at once:
> adjective_animal(5)
[1] "unterrestrial_vixen"     "illfated_africanwildcat"
[3] "wet_muntjac"             "classless_gourami"      
[5] "upstanding_illadopsis"  
> 
> # Control the style of punctuation with the style argument:
> adjective_animal(style = "lower")
[1] "waiting xiaosaurus"
> adjective_animal(style = "CONSTANT")
[1] "PREAGRICULTURAL_ICTERINEWARBLER"
> adjective_animal(style = "camel")
[1] "rhombohedralWalrus"
> adjective_animal(style = "kebab")
[1] "necessary-hen"
> 
> # Control the number of adjectives used
> adjective_animal(n_adjectives = 3)
[1] "ethnological_snobbish_locustal_slothbear"
> 
> # This can get out of hand quickly though:
> adjective_animal(n_adjectives = 7)
[1] "dermatic_geode_cynophobic_dynastic_concretionary_sticky_literalminded_canary"
> 
> # Limit the length of adjectives and animals used:
> adjective_animal(10, max_len = 6)
 [1] "cob_boa"       "stone_scoter"  "dozy_auklet"   "allied_godwit"
 [5] "excess_pupa"   "magic_wren"    "wilful_coyote" "torrid_nerka" 
 [9] "froggy_whelp"  "high_turaco"  
> 
> # The lengths can be controlled for adjectives and animals
> # separately, with Inf meaning no limit:
> adjective_animal(10, max_len = c(6, Inf), n_adjectives = 2)
 [1] "proper_unholy_firebelliedtoad"       "spinal_gauche_elephantseal"         
 [3] "velvet_crazy_labradorretriever"      "sinful_grubby_swift"                
 [5] "bare_snotty_llama"                   "rubbly_dark_mule"                   
 [7] "snippy_flashy_bluemorphobutterfly"   "cold_modest_mastiff"                
 [9] "lacy_miry_grayfox"                   "gutsy_moody_queenalexandrasbirdwing"
> 
> # Pass n = NULL to bind arguments to a function
> id <- adjective_animal(NULL, n_adjectives = 2, style = "dot", max_len = 6)
> id()
[1] "homey.boreal.macaw"
> id(10)
 [1] "snooty.large.pullet" "crawly.varve.thrip"  "salmon.venal.cobra" 
 [4] "floury.rutile.vireo" "footed.raw.newt"     "uber.aghast.piglet" 
 [7] "fruity.messy.bonobo" "itchy.cloddy.pony"   "potty.tweedy.mussel"
[10] "sudsy.giggly.jay"   
> 
> 
> 
> cleanEx()
> nameEx("ids")
> ### * ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ids
> ### Title: Generic id generating function
> ### Aliases: ids
> 
> ### ** Examples
> 
> # For an example, please see the vignette
> 
> 
> 
> cleanEx()
> nameEx("proquint")
> ### * proquint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proquint
> ### Title: Generate random proquint identifiers
> ### Aliases: proquint
> 
> ### ** Examples
> 
> # A single, two word, proquint
> proquint()
[1] "jutag-vofab"
> 
> # Longer identifier:
> proquint(n_words = 5)
[1] "vilus-pohop-buzid-fuhuf-kanih"
> 
> # More identifiers
> proquint(10)
 [1] "luton-zulot" "sisak-ginav" "faboh-karim" "kaloh-jisod" "nojut-fuvor"
 [6] "posob-dovof" "kojan-pikoj" "mukig-somig" "lomor-rajik" "tudum-gupor"
> 
> 
> 
> cleanEx()
> nameEx("random_id")
> ### * random_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: random_id
> ### Title: Cryptographically generated random identifiers
> ### Aliases: random_id
> 
> ### ** Examples
> 
> # Generate a random id:
> random_id()
[1] "3d2dab7450f380dd85544d4f4adacc6b"
> 
> # Generate 10 of them!
> random_id(10)
 [1] "54dede2ce58617ec2534f013dee5d940" "78eaf80a789142e60fa2532573e23409"
 [3] "0251ca4daec9fb8ca9c7bf041c7ba3e0" "578d9c70d01303bc685a98078dcc931d"
 [5] "86d9f500d16e1e2271b96e60769bd1df" "22a9af5414947cffbadfbb8e467863fa"
 [7] "b43c7e4d6e4d9ab2caf8f7a736f6a800" "f0fe458efec202876344e423be7168b3"
 [9] "0012c7a145b019777f00c61bb3b3c53d" "19729e8b913c89eb2a5e3cdc23bd8aed"
> 
> # Different length ids
> random_id(bytes = 8)
[1] "26084c101537ad97"
> # (note that the number of characters is twice the number of bytes)
> 
> # The ids are not affected by R's RNG state:
> set.seed(1)
> (id1 <- random_id())
[1] "284b6d9b239591ed5921e404fe8afc15"
> set.seed(1)
> (id2 <- random_id())
[1] "fbab47e28b015d99e6570f4f085d5e97"
> # The generated identifiers are different, despite the seed being the same:
> id1 == id2
[1] FALSE
> 
> # If you need these identifiers to be reproducible, pass use_openssl = FALSE
> set.seed(1)
> (id1 <- random_id(use_openssl = FALSE))
[1] "f843a680a1fcd62a0dd1ba32e0541469"
> set.seed(1)
> (id2 <- random_id(use_openssl = FALSE))
[1] "f843a680a1fcd62a0dd1ba32e0541469"
> # This time they are the same:
> id1 == id2
[1] TRUE
> 
> # Pass \code{n = NULL} to generate a function that binds your arguments:
> id8 <- random_id(NULL, bytes = 8)
> id8(10)
 [1] "0f1f162eac9a6a40" "c888c803c46f11be" "d5e151c7684bc04e" "e4f3e7464535efac"
 [5] "17734638e526d2d6" "3a3db28f16347739" "eb05c9ed6165f230" "2d6a19045b468961"
 [9] "4dc1e97688704014" "99920d1284c97676"
> 
> 
> 
> cleanEx()
> nameEx("sentence")
> ### * sentence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sentence
> ### Title: Sentence style identifiers
> ### Aliases: sentence
> 
> ### ** Examples
> 
> # Generate an identifier
> sentence()
[1] "26_gaudy_flamingos_ambling_effortlessly"
> 
> # Generate a bunch
> sentence(10)
 [1] "30_puzzled_phoenixes_racing_clumsily"        
 [2] "24_exotic_snakes_hurrying_vainly"            
 [3] "12_remarkable_reindeers_sailing_gladly"      
 [4] "15_gorgeous_elves_chewing_urgently"          
 [5] "19_astonishing_donkeys_creeping_purposefully"
 [6] "28_goofy_skunks_slurping_madly"              
 [7] "20_happy_woodchucks_scampering_urgently"     
 [8] "2_incredible_phoenixes_squirming_foolishly"  
 [9] "22_daffy_gnomes_hurrying_gladly"             
[10] "22_psychotic_newts_munching_curiously"       
> 
> # As with adjective_animal, use "style" to control punctuation
> sentence(style = "Camel")
[1] "24ThunderingLizardsWanderingFervently"
> sentence(style = "dot")
[1] "20.delightful.armadillos.jumping.drudgingly"
> sentence(style = "Title")
[1] "15 Adventurous Gnus Hobbling Colorfully"
> 
> # Change the tense of the verb:
> set.seed(1)
> sentence()
[1] "26_gaudy_flamingos_ambling_effortlessly"
> set.seed(1)
> sentence(past = TRUE)
[1] "26_gaudy_flamingos_ambled_effortlessly"
> 
> # Pass n = NULL to bind arguments to a function
> id <- sentence(NULL, past = TRUE, style = "dot")
> id()
[1] "30.jazzy.giraffes.flopped.owlishly"
> id(10)
 [1] "28.goofy.skunks.slurped.madly"            
 [2] "20.happy.woodchucks.scampered.urgently"   
 [3] "2.incredible.phoenixes.squirmed.foolishly"
 [4] "22.daffy.gnomes.hurried.gladly"           
 [5] "22.psychotic.newts.munched.curiously"     
 [6] "11.joyous.dogs.hurried.unabashedly"       
 [7] "23.remarkable.oxes.wandered.unaccountably"
 [8] "15.obnoxious.dragons.sprinted.madly"      
 [9] "11.daffy.lizards.wade.vainly"             
[10] "8.cuddly.moles.juggled.fervently"         
> 
> 
> 
> cleanEx()
> nameEx("uuid")
> ### * uuid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: uuid
> ### Title: Generate UUIDs
> ### Aliases: uuid
> 
> ### ** Examples
> 
> # Generate one id
> uuid()
[1] "7bf587bd-cc4d-4c98-8805-b33d84a35e45"
> 
> # Or a bunch
> uuid(10)
 [1] "88653c43-da61-46ce-b23e-1d06fb49415e"
 [2] "92566399-b8d9-4e94-9907-8875dc251ebc"
 [3] "22c59929-84e2-41c2-b0f0-ae041ca230f7"
 [4] "4c12b5c8-16dc-4541-b73c-21a408137cab"
 [5] "205fe239-63e4-4e89-b21f-a50415c5f863"
 [6] "a4a17d33-043f-4995-acec-29576852b8e6"
 [7] "d31a77bd-437c-4799-b584-74a281fc5a1e"
 [8] "b81eed35-23e5-4f14-a152-166839606bf4"
 [9] "61cd7b38-388b-4c15-911a-12d2e14b1127"
[10] "5d6f6eb2-dc12-4c78-be8d-f361bd676ca1"
> 
> # More in the style of random_id()
> uuid(drop_hyphens = TRUE)
[1] "22e03a8547d644b5a673dc63f8e6b74e"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.339 0.022 0.361 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
