
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(fs)
> 
> test_check("fs")
[ FAIL 9 | WARN 0 | SKIP 6 | PASS 3316 ]

══ Skipped tests (6) ═══════════════════════════════════════════════════════════
• need elevated permissions to change uid (1): 'test-file.R:164:7'
• On CRAN (1): 'test-tree.R:5:7'
• root user (4): 'test-list.R:110:5', 'test-list.R:144:5', 'test-list.R:195:5',
  'test-list.R:227:5'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-access.R:4:5'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("fs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::describe(...) at test-access.R:2:1
 25. │                     └─base::eval(substitute(code), describe_environment)
 26. │                       └─base::eval(substitute(code), describe_environment)
 27. │                         ├─fs:::with_dir_tree(...) at test-access.R:3:3
 28. │                         │ └─base::force(code) at fs-tests/testthat/helper.R:22:3
 29. │                         └─testthat::it(...) at test-access.R:4:5
 30. │                           └─testthat:::describe_it(description, code, describe_environment)
 31. │                             └─testthat:::test_code(...)
 32. │                               └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 33. │                                 └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 34. └─base::loadNamespace(x)
 35.   ├─base::namespaceImportFrom(...)
 36.   │ └─base::asNamespace(ns)
 37.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 38.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 39.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 40.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 41.           └─base::get(genname, envir = envir)
── Error ('test-copy.R:5:7'): file_copy: copies an empty file and returns the new path ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─fs:::with_dir_tree(...) at test-copy.R:4:5
  2. │ └─base::force(code) at fs-tests/testthat/helper.R:22:3
  3. ├─testthat::expect_true(file_exists("foo")) at test-copy.R:5:7
  4. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  5. │   └─testthat:::waldo_compare(...)
  6. └─base::loadNamespace(x)
  7.   ├─base::namespaceImportFrom(...)
  8.   │ └─base::asNamespace(ns)
  9.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 10.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 11.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 12.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 13.           └─base::get(genname, envir = envir)
── Error ('test-copy.R:3:3'): (code run outside of `test_that()`) ──────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("fs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::describe(...) at test-copy.R:2:1
 25. │                     └─base::eval(substitute(code), describe_environment)
 26. │                       └─base::eval(substitute(code), describe_environment)
 27. │                         └─testthat::it(...) at test-copy.R:3:3
 28. │                           └─testthat:::describe_it(description, code, describe_environment)
 29. │                             └─testthat:::test_code(...)
 30. │                               └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 31. │                                 └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 32. └─base::loadNamespace(x)
 33.   ├─base::namespaceImportFrom(...)
 34.   │ └─base::asNamespace(ns)
 35.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 36.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 37.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 38.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 39.           └─base::get(genname, envir = envir)
── Error ('test-create.R:5:3'): file_create works with new and existing files ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file_exists(x1)) at test-create.R:5:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-create.R:2:1'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("fs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-create.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)
── Error ('test-delete.R:5:7'): file_delete: returns the input path and deletes the file ──
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file_exists("foo/bar")) at test-delete.R:5:7
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-delete.R:4:5'): (code run outside of `test_that()`) ────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("fs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::describe(...) at test-delete.R:2:1
 25. │                     └─base::eval(substitute(code), describe_environment)
 26. │                       └─base::eval(substitute(code), describe_environment)
 27. │                         ├─fs:::with_dir_tree(...) at test-delete.R:3:3
 28. │                         │ └─base::force(code) at fs-tests/testthat/helper.R:22:3
 29. │                         └─testthat::it(...) at test-delete.R:4:5
 30. │                           └─testthat:::describe_it(description, code, describe_environment)
 31. │                             └─testthat:::test_code(...)
 32. │                               └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 33. │                                 └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 34. └─base::loadNamespace(x)
 35.   ├─base::namespaceImportFrom(...)
 36.   │ └─base::asNamespace(ns)
 37.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 38.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 39.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 40.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 41.           └─base::get(genname, envir = envir)
── Error ('test-file_exists.R:3:3'): basic behaviour is correct ────────────────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::expect_true(file_exists("test-file_exists.R")) at test-file_exists.R:3:3
  2. │ └─testthat:::expect_waldo_constant(act, TRUE, info = info)
  3. │   └─testthat:::waldo_compare(...)
  4. └─base::loadNamespace(x)
  5.   ├─base::namespaceImportFrom(...)
  6.   │ └─base::asNamespace(ns)
  7.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
  8.     └─base::registerS3methods(nsInfo$S3methods, package, env)
  9.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 10.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 11.           └─base::get(genname, envir = envir)
── Error ('test-file_exists.R:2:1'): (code run outside of `test_that()`) ───────
Error in `get(genname, envir = envir)`: object 'compare_proxy' not found
Backtrace:
     ▆
  1. ├─testthat::test_check("fs")
  2. │ └─testthat::test_dir(...)
  3. │   └─testthat:::test_files(...)
  4. │     └─testthat:::test_files_serial(...)
  5. │       ├─testthat::with_reporter(...)
  6. │       │ └─base::tryCatch(...)
  7. │       │   └─base (local) tryCatchList(expr, classes, parentenv, handlers)
  8. │       │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
  9. │       │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 10. │       └─base::lapply(...)
 11. │         └─testthat (local) FUN(X[[i]], ...)
 12. │           └─testthat::source_file(path, env = env(env), desc = desc, error_call = error_call)
 13. │             └─testthat:::test_code(test = NULL, code = exprs, env = env, default_reporter = StopReporter$new())
 14. │               ├─base::tryCatch(...)
 15. │               │ └─base (local) tryCatchList(expr, classes, parentenv, handlers)
 16. │               │   ├─base (local) tryCatchOne(...)
 17. │               │   │ └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 18. │               │   └─base (local) tryCatchList(expr, names[-nh], parentenv, handlers[-nh])
 19. │               │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]])
 20. │               │       └─base (local) doTryCatch(return(expr), name, parentenv, handler)
 21. │               ├─base::withCallingHandlers(...)
 22. │               └─base::eval(code, test_env)
 23. │                 └─base::eval(code, test_env)
 24. │                   └─testthat::test_that(...) at test-file_exists.R:2:1
 25. │                     └─testthat:::test_code(desc, code, env = parent.frame(), default_reporter = local_interactive_reporter())
 26. │                       └─testthat:::testthat_state_condition(before, after, call = sys.call(-1))
 27. │                         └─testthat:::waldo_compare(before, after, x_arg = "before", y_arg = "after")
 28. └─base::loadNamespace(x)
 29.   ├─base::namespaceImportFrom(...)
 30.   │ └─base::asNamespace(ns)
 31.   └─base::loadNamespace(j <- i[[1L]], c(lib.loc, .libPaths()), versionCheck = vI[[j]])
 32.     └─base::registerS3methods(nsInfo$S3methods, package, env)
 33.       └─base (local) register_S3_method_delayed(pkg, gen, cls, fun)
 34.         └─base::registerS3method(gen, cls, fun, envir = asNamespace(pkg))
 35.           └─base::get(genname, envir = envir)

[ FAIL 9 | WARN 0 | SKIP 6 | PASS 3316 ]
Error: Test failures
Execution halted
