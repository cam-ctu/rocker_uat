
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rex"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rex')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("capture")
> ### * capture
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: capture
> ### Title: Create a capture group
> ### Aliases: capture . capture_group
> 
> ### ** Examples
> 
> 
> # Match paired quotation marks
> re <- rex(
+   # first quotation mark
+   capture(quotes),
+ 
+   # match all non-matching quotation marks
+   zero_or_more(except(capture_group(1))),
+ 
+   # end quotation mark (matches first)
+   capture_group(1)
+ )
> 
> #named capture - don't match apples to oranges
> re <- rex(
+   capture(name = "fruit", or("apple", "orange")),
+   "=",
+   capture_group("fruit")
+ )
> 
> 
> 
> cleanEx()
> nameEx("character_class")
> ### * character_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: character_class
> ### Title: Create character classes
> ### Aliases: character_class one_of any_of some_of none_of except
> ###   except_any_of except_some_of range : exclude_range
> 
> ### ** Examples
> 
> # grey = gray
> re <- rex("gr", one_of("a", "e"), "y")
> grepl(re, c("grey", "gray")) # TRUE TRUE
[1] TRUE TRUE
> 
> # Match non-vowels
> re <- rex(none_of("a", "e", "i", "o", "u"))
> # They can also be in the same string
> re <- rex(none_of("aeiou"))
> grepl(re, c("k", "l", "e")) # TRUE TRUE FALSE
[1]  TRUE  TRUE FALSE
> 
> # Match range
> re <- rex(range("a", "e"))
> grepl(re, c("b", "d", "f")) # TRUE TRUE FALSE
[1]  TRUE  TRUE FALSE
> 
> # Explicit creation
> re <- rex(character_class("abcd\\["))
> grepl(re, c("a", "d", "[", "]")) # TRUE TRUE TRUE FALSE
[1]  TRUE  TRUE  TRUE FALSE
> 
> 
> 
> cleanEx()
> nameEx("lookarounds")
> ### * lookarounds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lookarounds
> ### Title: Lookarounds
> ### Aliases: lookarounds %if_next_is% %if_next_isnt% %if_prev_is%
> ###   %if_prev_isnt%
> 
> ### ** Examples
> 
> stopifnot(grepl(rex("crab" %if_next_is% "apple"), "crabapple", perl = TRUE))
> stopifnot(grepl(rex("crab" %if_prev_is% "apple"), "applecrab", perl = TRUE))
> stopifnot(grepl(rex(range("a", "e") %if_next_isnt% range("f", "g")),
+   "ah", perl = TRUE))
> stopifnot(grepl(rex(range("a", "e") %if_next_is% range("f", "i")),
+   "ah", perl = TRUE))
> 
> 
> 
> cleanEx()
> nameEx("re_matches")
> ### * re_matches
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_matches
> ### Title: Match function
> ### Aliases: re_matches matches m
> 
> ### ** Examples
> 
> string <- c("this is a", "test string")
> re_matches(string, rex("test")) # FALSE FALSE
[1] FALSE  TRUE
> 
> # named capture
> re_matches(string, rex(capture(alphas, name = "first_word"), space,
+   capture(alphas, name = "second_word")))
  first_word second_word
1       this          is
2       test      string
> #   first_word second_word
> # 1       this          is
> # 2       test      string
> 
> # capture returns NA when it fails to match
> re_matches(string, rex(capture("test")))
     1
1 <NA>
2 test
> #      1
> # 1 test
> # 2 <NA>
> 
> 
> 
> cleanEx()
> nameEx("re_substitutes")
> ### * re_substitutes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: re_substitutes
> ### Title: Substitute regular expressions in a string with another string.
> ### Aliases: re_substitutes substitutes s
> 
> ### ** Examples
> 
> string <- c("this is a Test", "string")
> re_substitutes(string, "test", "not a test", options = "insensitive")
[1] "this is a not a test" "string"              
> re_substitutes(string, "i", "x", global = TRUE)
[1] "thxs xs a Test" "strxng"        
> re_substitutes(string, "(test)", "not a \\1", options = "insensitive")
[1] "this is a not a Test" "string"              
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.077 0.004 0.08 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
