
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rstudioapi"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('rstudioapi')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("askForPassword")
> ### * askForPassword
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: askForPassword
> ### Title: Ask the user for a password interactively
> ### Aliases: askForPassword
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D rstudioapi::askForPassword("Please enter your password")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("callFun")
> ### * callFun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: callFun
> ### Title: Call an RStudio API function
> ### Aliases: callFun
> 
> ### ** Examples
> 
> 
> if (rstudioapi::isAvailable()) {
+   rstudioapi::callFun("versionInfo")
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("getDelegatedAzureToken")
> ### * getDelegatedAzureToken
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getDelegatedAzureToken
> ### Title: OAuth2 Tokens for Delegated Azure Resources
> ### Aliases: getDelegatedAzureToken
> 
> ### ** Examples
> 
> ## Not run: 
> ##D getDelegatedAzureToken("https://storage.azure.com")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getVersion")
> ### * getVersion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getVersion
> ### Title: Return the current version of the RStudio API
> ### Aliases: getVersion
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D if (rstudioapi::getVersion() < "0.98.100") {
> ##D   message("Your version of RStudio is quite old")
> ##D }
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("hasColorConsole")
> ### * hasColorConsole
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hasColorConsole
> ### Title: Check if console supports ANSI color escapes.
> ### Aliases: hasColorConsole
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D if (rstudioapi::hasColorConsole()) {
> ##D   message("RStudio console supports ANSI color sequences.")
> ##D }
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("hasFun")
> ### * hasFun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hasFun
> ### Title: Exists/get for RStudio functions
> ### Aliases: hasFun findFun
> 
> ### ** Examples
> 
> 
> rstudioapi::hasFun("viewer")
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("highlightUi")
> ### * highlightUi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: highlightUi
> ### Title: Highlight UI Elements within the RStudio IDE
> ### Aliases: highlightUi
> 
> ### ** Examples
> 
> 
> ## Not run: rstudioapi::highlightUi("#rstudio_workbench_panel_git")
> 
> # clear current highlights
> ## Not run: rstudioapi::highlightUi("")
> 
> # highlight within an RMD
> ## Not run: rstudioapi::highlightUi(".rstudio_chunk_setup .rstudio_run_chunk")
> 
> # Optionally provide a callback adjacent to 
> # the queries that will be executed when the 
> # highlighted element is clicked on.
> ## Not run: 
> ##D rstudioapi::highlightUi(
> ##D   list(
> ##D     list(
> ##D       query="#rstudio_workbench_panel_git", 
> ##D       callback="rstudioapi::highlightUi('')"
> ##D     )
> ##D   )
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("isAvailable")
> ### * isAvailable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isAvailable
> ### Title: Check if RStudio is running
> ### Aliases: isAvailable verifyAvailable
> 
> ### ** Examples
> 
> 
> rstudioapi::isAvailable()
[1] FALSE
> ## Not run: rstudioapi::verifyAvailable()
> 
> 
> 
> 
> cleanEx()
> nameEx("previewRd")
> ### * previewRd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: previewRd
> ### Title: Preview an Rd topic in the Help pane
> ### Aliases: previewRd
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D rstudioapi::previewRd("~/MyPackage/man/foo.Rd")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("readRStudioPreference")
> ### * readRStudioPreference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readRStudioPreference
> ### Title: Read RStudio Preference
> ### Aliases: readRStudioPreference
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Get indentation settings
> ##D spaces <- rstudioapi::readRStudioPreference("num_spaces_for_tab", FALSE)
> ##D message("Using ", spaces, " per tab.")
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("registerCommandCallback")
> ### * registerCommandCallback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: registerCommandCallback
> ### Title: Register Command Callback
> ### Aliases: registerCommandCallback
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Set up a callback to display an encouraging dialog whenever 
> ##D # the user knits a document
> ##D handle <- rstudioapi::registerCommandCallback(
> ##D   "knitDocument", 
> ##D   function() {
> ##D     rstudioapi::showDialog(
> ##D       "Achievement",
> ##D       "Congratulations, you have knitted a document. Well done."
> ##D     )
> ##D   })
> ##D 
> ##D # Knit the document interactively and observe the dialog
> ##D 
> ##D # Later: Unregister the callback
> ##D rstudioapi::unregisterCommandCallback(handle)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("registerCommandStreamCallback")
> ### * registerCommandStreamCallback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: registerCommandStreamCallback
> ### Title: Register Command Stream Callback
> ### Aliases: registerCommandStreamCallback
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Set up a callback to print the ID of commands executed to the console.
> ##D handle <- rstudioapi::registerCommandStreamCallback(function(id) {
> ##D   message("Command executed: ", id)
> ##D })
> ##D 
> ##D # Later: Unregister the callback
> ##D rstudioapi::unregisterCommandCallback(handle)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sendToConsole")
> ### * sendToConsole
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sendToConsole
> ### Title: Send code to the R console
> ### Aliases: sendToConsole
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D rstudioapi::sendToConsole(".Platform", execute = FALSE, animate = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalActivate")
> ### * terminalActivate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalActivate
> ### Title: Activate Terminal
> ### Aliases: terminalActivate
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # create a hidden terminal and run a lengthy command
> ##D termId = rstudioapi::terminalCreate(show = FALSE)
> ##D rstudioapi::terminalSend(termId, "sleep 5\n")
> ##D 
> ##D # wait until a busy terminal is finished
> ##D while (rstudioapi::terminalBusy(termId)) {
> ##D   Sys.sleep(0.1)
> ##D }
> ##D print("Terminal available")#'
> ##D 
> ##D rstudioapi::terminalActivate(termId)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalBusy")
> ### * terminalBusy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalBusy
> ### Title: Is Terminal Busy
> ### Aliases: terminalBusy
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # create a hidden terminal and run a lengthy command
> ##D termId <- rstudioapi::terminalCreate(show = FALSE)
> ##D rstudioapi::terminalSend(termId, "sleep 5\n")
> ##D 
> ##D # wait until a busy terminal is finished
> ##D while (rstudioapi::terminalBusy(termId)) {
> ##D   Sys.sleep(0.1)
> ##D }
> ##D print("Terminal available")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalClear")
> ### * terminalClear
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalClear
> ### Title: Clear Terminal Buffer
> ### Aliases: terminalClear
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D termId <- rstudioapi::terminalCreate()
> ##D rstudioapi::terminalSend(termId, 'ls -l\n')
> ##D Sys.sleep(3)
> ##D rstudioapi::terminalClear(termId)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalContext")
> ### * terminalContext
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalContext
> ### Title: Retrieve Information about RStudio Terminals
> ### Aliases: terminalContext
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D termId <- rstudioapi::terminalCreate("example", show = FALSE)
> ##D View(rstudioapi::terminalContext(termId))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalCreate")
> ### * terminalCreate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalCreate
> ### Title: Create a Terminal
> ### Aliases: terminalCreate
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D termId <- rstudioapi::terminalCreate('My Terminal')
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalExecute")
> ### * terminalExecute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalExecute
> ### Title: Execute Command
> ### Aliases: terminalExecute
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D termId <- rstudioapi::terminalExecute(
> ##D   command = 'echo $HELLO && echo $WORLD',
> ##D   workingDir = '/usr/local',
> ##D   env = c('HELLO=WORLD', 'WORLD=EARTH'),
> ##D   show = FALSE)
> ##D 
> ##D while (is.null(rstudioapi::terminalExitCode(termId))) {
> ##D   Sys.sleep(0.1)
> ##D }
> ##D 
> ##D result <- terminalBuffer(termId)
> ##D terminalKill(termId)
> ##D print(result)
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalRunning")
> ### * terminalRunning
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalRunning
> ### Title: Is Terminal Running
> ### Aliases: terminalRunning
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # termId has a handle to a previously created terminal
> ##D # make sure it is still running before we send it a command
> ##D if (!rstudioapi::terminalRunning(termId)) {
> ##D    rstudioapi::terminalActivate(termId))
> ##D 
> ##D    # wait for it to start
> ##D    while (!rstudioapi::terminalRunning(termId)) {
> ##D       Sys.sleep(0.1)
> ##D    }
> ##D 
> ##D    terminalSend(termId, "echo Hello\n")
> ##D }
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("terminalSend")
> ### * terminalSend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terminalSend
> ### Title: Send Text to a Terminal
> ### Aliases: terminalSend
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D termId <- rstudioapi::terminalCreate()
> ##D rstudioapi::terminalSend(termId, 'ls -l\n')
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("versionInfo")
> ### * versionInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: versionInfo
> ### Title: RStudio version information
> ### Aliases: versionInfo
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D info <- rstudioapi::versionInfo()
> ##D 
> ##D # check what version of RStudio is in use
> ##D if (info$version >= "1.4") {
> ##D   # code specific to versions of RStudio 1.4 and newer
> ##D }
> ##D 
> ##D # check whether RStudio Desktop or RStudio Server is being used
> ##D if (info$mode == "desktop") {
> ##D   # code specific to RStudio Desktop
> ##D }
> ##D 
> ##D # Get the citation
> ##D info$citation
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("viewer")
> ### * viewer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: viewer
> ### Title: View local web content within RStudio
> ### Aliases: viewer
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D 
> ##D # run an application inside the IDE
> ##D rstudioapi::viewer("http://localhost:8100")
> ##D 
> ##D # run an application and request a height of 500 pixels
> ##D rstudioapi::viewer("http://localhost:8100", height = 500)
> ##D 
> ##D # use 'viewer' option if set, or `utils::browseURL()` if unset
> ##D viewer <- getOption("viewer", default = utils::browseURL)
> ##D viewer("http://localhost:8100")
> ##D 
> ##D # generate a temporary html file and display it
> ##D dir <- tempfile()
> ##D dir.create(dir)
> ##D htmlFile <- file.path(dir, "index.html")
> ##D # (code to write some content to the file)
> ##D rstudioapi::viewer(htmlFile)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("writeRStudioPreference")
> ### * writeRStudioPreference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeRStudioPreference
> ### Title: Write RStudio Preference
> ### Aliases: writeRStudioPreference
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D # Hide RStudio's toolbar.
> ##D rstudioapi::writeRStudioPreference("toolbar_visible", FALSE)
> ## End(Not run)
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.068 0.005 0.072 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
