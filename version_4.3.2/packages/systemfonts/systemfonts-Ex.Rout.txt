
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "systemfonts"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('systemfonts')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("font_fallback")
> ### * font_fallback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_fallback
> ### Title: Get the fallback font for a given string
> ### Aliases: font_fallback
> 
> ### ** Examples
> 
> font_fallback("\U0001f604") # Smile emoji
                                         path index
1 /usr/share/fonts/type1/gsfonts/n019003l.pfb     0
> 
> 
> 
> 
> cleanEx()
> nameEx("font_feature")
> ### * font_feature
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_feature
> ### Title: Define OpenType font feature settings
> ### Aliases: font_feature
> 
> ### ** Examples
> 
> font_feature(letters = "stylistic", numbers = c("lining", "tabular"))
A list of OpenType font feature settings
- salt: 1
- lnum: 1
- tnum: 1> 
> # Use the tag directly to access additional stylistic variants
> font_feature(numbers = c("lining", "tabular"), salt = 2)
A list of OpenType font feature settings
- salt: 2
- lnum: 1
- tnum: 1> 
> 
> 
> 
> cleanEx()
> nameEx("font_info")
> ### * font_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_info
> ### Title: Query font-specific information
> ### Aliases: font_info
> 
> ### ** Examples
> 
> font_info('serif')
                                         path index             family   style
1 /usr/share/fonts/type1/gsfonts/n021003l.pfb     0 Nimbus Roman No9 L Regular
  italic  bold monospace weight width kerning color scalable vertical n_glyphs
1  FALSE FALSE     FALSE   <NA>  <NA>   FALSE FALSE     TRUE    FALSE      563
  n_sizes n_charmaps                                       bbox max_ascend
1       0          2 -2.015625, 12.375000, -3.375000, 11.093750   11.09375
  max_descend max_advance_width max_advance_height lineheight underline_pos
1      -3.375          12.64062           14.45312   14.45312     -1.203125
  underline_size
1        0.59375
> 
> # Avoid lookup if font file is already known
> sans <- match_font('sans')
> font_info(path = sans$path, index = sans$index)
                                         path index        family   style
1 /usr/share/fonts/type1/gsfonts/n019003l.pfb     0 Nimbus Sans L Regular
  italic  bold monospace weight width kerning color scalable vertical n_glyphs
1  FALSE FALSE     FALSE   <NA>  <NA>   FALSE FALSE     TRUE    FALSE      563
  n_sizes n_charmaps                                       bbox max_ascend
1       0          2 -2.093750, 12.265625, -3.421875, 11.437500    11.4375
  max_descend max_advance_width max_advance_height lineheight underline_pos
1   -3.421875          12.95312           14.85938   14.85938       -1.8125
  underline_size
1        0.59375
> 
> 
> 
> 
> cleanEx()
> nameEx("match_font")
> ### * match_font
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: match_font
> ### Title: Find a system font by name and style
> ### Aliases: match_font
> 
> ### ** Examples
> 
> # Get the system default sans-serif font in italic
> match_font('sans', italic = TRUE)
$path
[1] "/usr/share/fonts/type1/gsfonts/n019023l.pfb"

$index
[1] 0

$features
NULL

> 
> 
> 
> 
> cleanEx()
> nameEx("register_font")
> ### * register_font
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: register_font
> ### Title: Register font collections as families
> ### Aliases: register_font registry_fonts clear_registry
> 
> ### ** Examples
> 
> # Create a random font collection
> fonts <- system_fonts()
> plain <- sample(which(!fonts$italic & fonts$weight <= 'normal'), 1)
> bold <- sample(which(!fonts$italic & fonts$weight > 'normal'), 1)
> italic <- sample(which(fonts$italic & fonts$weight <= 'normal'), 1)
> bolditalic <- sample(which(fonts$italic & fonts$weight > 'normal'), 1)
> register_font(
+   'random', 
+   plain = list(fonts$path[plain], fonts$index[plain]), 
+   bold = list(fonts$path[bold], fonts$index[bold]), 
+   italic = list(fonts$path[italic], fonts$index[italic]),
+   bolditalic = list(fonts$path[bolditalic], fonts$index[bolditalic])
+ )
> 
> # Look at your creation
> registry_fonts()
                                                           path index family
1 /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf     0 random
2                /usr/share/fonts/type1/urw-base35/P052-Bold.t1     0 random
3                   /usr/share/fonts/type1/gsfonts/n021023l.pfb     0 random
4                   /usr/share/fonts/type1/gsfonts/b018035l.pfb     0 random
        style weight italic features
1     Regular normal  FALSE         
2        Bold   bold  FALSE         
3      Italic normal   TRUE         
4 Bold Italic   bold   TRUE         
> 
> # Reset
> clear_registry()
> 
> 
> 
> 
> cleanEx()
> nameEx("register_variant")
> ### * register_variant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: register_variant
> ### Title: Register a font as a variant as an existing one
> ### Aliases: register_variant
> 
> ### ** Examples
> 
> # Get the default "sans" family
> sans <- match_font("sans")$path
> sans <- system_fonts()$family[system_fonts()$path == sans][1]
> 
> # Register a variant of it:
> register_variant(
+   "sans_ligature", 
+   sans, 
+   features = font_feature(ligatures = "discretionary")
+ )
> 
> registry_fonts()
                                         path index        family       style
1 /usr/share/fonts/type1/gsfonts/n019003l.pfb     0 sans_ligature     Regular
2 /usr/share/fonts/type1/gsfonts/n019004l.pfb     0 sans_ligature        Bold
3 /usr/share/fonts/type1/gsfonts/n019023l.pfb     0 sans_ligature      Italic
4 /usr/share/fonts/type1/gsfonts/n019024l.pfb     0 sans_ligature Bold Italic
  weight italic features
1 normal  FALSE        1
2   bold  FALSE        1
3 normal   TRUE        1
4   bold   TRUE        1
> 
> # clean up
> clear_registry()
> 
> 
> 
> cleanEx()
> nameEx("reset_font_cache")
> ### * reset_font_cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reset_font_cache
> ### Title: Reset the system font cache
> ### Aliases: reset_font_cache
> 
> ### ** Examples
> 
> all_fonts <- system_fonts()
> 
> ##-- Install a new font on the system --##
> 
> all_fonts_new <- system_fonts()
> 
> ## all_fonts_new will be equal to all_fonts
> 
> reset_font_cache()
> 
> all_fonts_new <- system_fonts()
> 
> ## all_fonts_new will now contain the new font
> 
> 
> 
> 
> cleanEx()
> nameEx("shape_string")
> ### * shape_string
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shape_string
> ### Title: Calculate glyph positions for strings
> ### Aliases: shape_string
> 
> ### ** Examples
> 
> string <- "This is a long string\nLook; It spans multiple lines\nand all"
> 
> # Shape with default settings
> shape_string(string)
$shape
   glyph index metric_id string_id x_offset y_offset x_midpoint
1      T    53         0         1        0 29.71875        3.5
2      h    73         0         1        7 29.71875        3.5
3      i    74         0         1       14 29.71875        1.5
4      s    84         0         1       17 29.71875        3.0
5            1         0         1       23 29.71875        1.5
6      i    74         0         1       26 29.71875        1.5
7      s    84         0         1       29 29.71875        3.0
8            1         0         1       35 29.71875        1.5
9      a    66         0         1       38 29.71875        3.5
10           1         0         1       45 29.71875        1.5
11     l    77         0         1       48 29.71875        1.5
12     o    80         0         1       51 29.71875        3.5
13     n    79         0         1       58 29.71875        3.5
14     g    72         0         1       65 29.71875        3.5
15           1         0         1       72 29.71875        1.5
16     s    84         0         1       75 29.71875        3.0
17     t    85         0         1       81 29.71875        1.5
18     r    83         0         1       84 29.71875        2.0
19     i    74         0         1       88 29.71875        1.5
20     n    79         0         1       91 29.71875        3.5
21     g    72         0         1       98 29.71875        3.5
22    \n     0         0         1      105 29.71875        1.5
23     L    45         0         1        0 14.85938        3.5
24     o    80         0         1        7 14.85938        3.5
25     o    80         0         1       14 14.85938        3.5
26     k    76         0         1       21 14.85938        3.0
27     ;    28         0         1       27 14.85938        1.5
28           1         0         1       30 14.85938        1.5
29     I    42         0         1       33 14.85938        1.5
30     t    85         0         1       36 14.85938        1.5
31           1         0         1       39 14.85938        1.5
32     s    84         0         1       42 14.85938        3.0
33     p    81         0         1       48 14.85938        3.5
34     a    66         0         1       55 14.85938        3.5
35     n    79         0         1       62 14.85938        3.5
36     s    84         0         1       69 14.85938        3.0
37           1         0         1       75 14.85938        1.5
38     m    78         0         1       78 14.85938        5.0
39     u    86         0         1       88 14.85938        3.5
40     l    77         0         1       95 14.85938        1.5
41     t    85         0         1       98 14.85938        1.5
42     i    74         0         1      101 14.85938        1.5
43     p    81         0         1      104 14.85938        3.5
44     l    77         0         1      111 14.85938        1.5
45     e    70         0         1      114 14.85938        3.5
46           1         0         1      121 14.85938        1.5
47     l    77         0         1      124 14.85938        1.5
48     i    74         0         1      127 14.85938        1.5
49     n    79         0         1      130 14.85938        3.5
50     e    70         0         1      137 14.85938        3.5
51     s    84         0         1      144 14.85938        3.0
52    \n     0         0         1      150 14.85938        1.5
53     a    66         0         1        0  0.00000        3.5
54     n    79         0         1        7  0.00000        3.5
55     d    69         0         1       14  0.00000        3.5
56           1         0         1       21  0.00000        1.5
57     a    66         0         1       24  0.00000        3.5
58     l    77         0         1       31  0.00000        1.5
59     l    77         0         1       34  0.00000        1.5

$metrics
                                                         string width   height
1 This is a long string\nLook; It spans multiple lines\nand all   150 56.01562
  left_bearing right_bearing top_bearing bottom_bearing left_border top_border
1            0             0      2.4375       2.421875           0   41.15625
  pen_x pen_y
1    37     0

> 
> # Mix styles within the same string
> string <- c(
+   "This string will have\na ",
+   "very large",
+   " text style\nin the middle"
+ )
> 
> shape_string(string, id = c(1, 1, 1), size = c(12, 24, 12))
$shape
   glyph index metric_id string_id x_offset y_offset x_midpoint
1      T    53         0         1        0 44.57812        3.5
2      h    73         0         1        7 44.57812        3.5
3      i    74         0         1       14 44.57812        1.5
4      s    84         0         1       17 44.57812        3.0
5            1         0         1       23 44.57812        1.5
6      s    84         0         1       26 44.57812        3.0
7      t    85         0         1       32 44.57812        1.5
8      r    83         0         1       35 44.57812        2.0
9      i    74         0         1       39 44.57812        1.5
10     n    79         0         1       42 44.57812        3.5
11     g    72         0         1       49 44.57812        3.5
12           1         0         1       56 44.57812        1.5
13     w    88         0         1       59 44.57812        4.5
14     i    74         0         1       68 44.57812        1.5
15     l    77         0         1       71 44.57812        1.5
16     l    77         0         1       74 44.57812        1.5
17           1         0         1       77 44.57812        1.5
18     h    73         0         1       80 44.57812        3.5
19     a    66         0         1       87 44.57812        3.5
20     v    87         0         1       94 44.57812        3.0
21     e    70         0         1      100 44.57812        3.5
22    \n     0         0         1      107 44.57812        1.5
23     a    66         0         1        0 18.28125        3.5
24           1         0         1        7 18.28125        1.5
25     v    87         0         2       10 18.28125        6.0
26     e    70         0         2       22 18.28125        6.5
27     r    83         0         2       35 18.28125        4.0
28     y    90         0         2       43 18.28125        6.0
29           1         0         2       55 18.28125        3.5
30     l    77         0         2       62 18.28125        2.5
31     a    66         0         2       67 18.28125        6.5
32     r    83         0         2       80 18.28125        4.0
33     g    72         0         2       88 18.28125        6.5
34     e    70         0         2      101 18.28125        6.5
35           1         0         3      114 18.28125        1.5
36     t    85         0         3      117 18.28125        1.5
37     e    70         0         3      120 18.28125        3.5
38     x    89         0         3      127 18.28125        3.0
39     t    85         0         3      133 18.28125        1.5
40           1         0         3      136 18.28125        1.5
41     s    84         0         3      139 18.28125        3.0
42     t    85         0         3      145 18.28125        1.5
43     y    90         0         3      148 18.28125        3.0
44     l    77         0         3      154 18.28125        1.5
45     e    70         0         3      157 18.28125        3.5
46    \n     0         0         3      164 18.28125        1.5
47     i    74         0         3        0  0.00000        1.5
48     n    79         0         3        3  0.00000        3.5
49           1         0         3       10  0.00000        1.5
50     t    85         0         3       13  0.00000        1.5
51     h    73         0         3       16  0.00000        3.5
52     e    70         0         3       23  0.00000        3.5
53           1         0         3       30  0.00000        1.5
54     m    78         0         3       33  0.00000        5.0
55     i    74         0         3       43  0.00000        1.5
56     d    69         0         3       46  0.00000        3.5
57     d    69         0         3       53  0.00000        3.5
58     l    77         0         3       60  0.00000        1.5
59     e    70         0         3       63  0.00000        3.5

$metrics
                                                         string width height
1 This string will have\na very large text style\nin the middle   164 70.875
  left_bearing right_bearing top_bearing bottom_bearing left_border top_border
1            0             1      2.4375       2.421875           0   56.01562
  pen_x pen_y
1    70     0

> 
> 
> 
> 
> cleanEx()
> nameEx("str_split_emoji")
> ### * str_split_emoji
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str_split_emoji
> ### Title: Split a string into emoji and non-emoji glyph runs
> ### Aliases: str_split_emoji
> 
> ### ** Examples
> 
> emoji_string <- "This is a joke\U0001f642. It should be obvious from the smiley"
> str_split_emoji(emoji_string)
                                  string id emoji
1                         This is a joke  1 FALSE
2                                     🙂  1  TRUE
3 . It should be obvious from the smiley  1 FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("string_metrics_dev")
> ### * string_metrics_dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_metrics_dev
> ### Title: Get string metrics as measured by the current device
> ### Aliases: string_metrics_dev
> 
> ### ** Examples
> 
> # Get the metrics as measured in cm (default)
> string_metrics_dev(c('some text', 'a string with descenders'))
    width    ascent    descent
1 1.82245 0.2832100 0.00635000
2 4.57073 0.3039533 0.09313333
> 
> 
> 
> 
> cleanEx()
> nameEx("string_width")
> ### * string_width
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_width
> ### Title: Calculate the width of a string, ignoring new-lines
> ### Aliases: string_width
> 
> ### ** Examples
> 
> strings <- c('A short string', 'A very very looong string')
> string_width(strings)
[1]  71 134
> 
> 
> 
> 
> cleanEx()
> nameEx("string_widths_dev")
> ### * string_widths_dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_widths_dev
> ### Title: Get string widths as measured by the current device
> ### Aliases: string_widths_dev
> 
> ### ** Examples
> 
> # Get the widths as measured in cm (default)
> string_widths_dev(c('a string', 'an even longer string'))
[1] 1.394460 3.936153
> 
> 
> 
> 
> cleanEx()
> nameEx("system_fonts")
> ### * system_fonts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: system_fonts
> ### Title: List all fonts installed on your system
> ### Aliases: system_fonts
> 
> ### ** Examples
> 
> # See all monospace fonts
> fonts <- system_fonts()
> fonts[fonts$monospace, ]
                                                                path index
6       /usr/share/fonts/type1/urw-base35/NimbusMonoPS-BoldItalic.t1     0
15     /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf     0
61                       /usr/share/fonts/type1/gsfonts/n022004l.pfb     0
70         /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Regular.t1     0
83                       /usr/share/fonts/type1/gsfonts/n022003l.pfb     0
92  /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-BoldItalic.otf     0
97            /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Bold.t1     0
131       /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Bold.otf     0
135                      /usr/share/fonts/type1/gsfonts/n022023l.pfb     0
136     /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Italic.otf     0
144         /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Italic.t1     0
                       name         family           style weight  width italic
6   NimbusMonoPS-BoldItalic Nimbus Mono PS     Bold Italic   bold normal   TRUE
15     NimbusMonoPS-Regular Nimbus Mono PS         Regular normal normal  FALSE
61          NimbusMonL-Bold  Nimbus Mono L            Bold   bold normal  FALSE
70     NimbusMonoPS-Regular Nimbus Mono PS         Regular normal normal  FALSE
83          NimbusMonL-Regu  Nimbus Mono L         Regular normal normal  FALSE
92  NimbusMonoPS-BoldItalic Nimbus Mono PS     Bold Italic   bold normal   TRUE
97        NimbusMonoPS-Bold Nimbus Mono PS            Bold   bold normal  FALSE
131       NimbusMonoPS-Bold Nimbus Mono PS            Bold   bold normal  FALSE
135     NimbusMonL-ReguObli  Nimbus Mono L Regular Oblique normal normal  FALSE
136     NimbusMonoPS-Italic Nimbus Mono PS          Italic normal normal   TRUE
144     NimbusMonoPS-Italic Nimbus Mono PS          Italic normal normal   TRUE
    monospace
6        TRUE
15       TRUE
61       TRUE
70       TRUE
83       TRUE
92       TRUE
97       TRUE
131      TRUE
135      TRUE
136      TRUE
144      TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.081 0.033 0.114 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
