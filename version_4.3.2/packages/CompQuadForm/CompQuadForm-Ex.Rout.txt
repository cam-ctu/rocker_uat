
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CompQuadForm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('CompQuadForm')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("davies")
> ### * davies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: davies
> ### Title: Davies method
> ### Aliases: davies
> ### Keywords: distribution htest
> 
> ### ** Examples
> 
> # Some results from Table 3, p.327, Davies (1980)
> 
>  round(1 - davies(1, c(6, 3, 1), c(1, 1, 1))$Qq, 4)
[1] 0.0542
>  round(1 - davies(7, c(6, 3, 1), c(1, 1, 1))$Qq, 4)
[1] 0.4936
>  round(1 - davies(20, c(6, 3, 1), c(1, 1, 1))$Qq, 4)
[1] 0.876
>  
>  round(1 - davies(2, c(6, 3, 1), c(2, 2, 2))$Qq, 4)
[1] 0.0064
>  round(1 - davies(20, c(6, 3, 1), c(2, 2, 2))$Qq, 4)
[1] 0.6002
>  round(1 - davies(60, c(6, 3, 1), c(2, 2, 2))$Qq, 4)
[1] 0.9839
>  
>  round(1 - davies(10, c(6, 3, 1), c(6, 4, 2))$Qq, 4)
[1] 0.0027
>  round(1 - davies(50, c(6, 3, 1), c(6, 4, 2))$Qq, 4)
[1] 0.5648
>  round(1 - davies(120, c(6, 3, 1), c(6, 4, 2))$Qq, 4)
[1] 0.9912
> 
>  round(1 - davies(20, c(7, 3), c(6, 2), c(6, 2))$Qq, 4)
[1] 0.0061
>  round(1 - davies(100, c(7, 3), c(6, 2), c(6, 2))$Qq, 4)
[1] 0.5913
>  round(1 - davies(200, c(7, 3), c(6, 2), c(6, 2))$Qq, 4)
[1] 0.9779
> 
>  round(1 - davies(10, c(7, 3), c(1, 1), c(6, 2))$Qq, 4)
[1] 0.0451
>  round(1 - davies(60, c(7, 3), c(1, 1), c(6, 2))$Qq, 4)
[1] 0.5924
>  round(1 - davies(150, c(7, 3), c(1, 1), c(6, 2))$Qq, 4)
[1] 0.9776
> 
>  round(1 - davies(70, c(7, 3, 7, 3), c(6, 2, 1, 1), c(6, 2, 6, 2))$Qq, 4)
[1] 0.0437
>  round(1 - davies(160, c(7, 3, 7, 3), c(6, 2, 1, 1), c(6, 2, 6, 2))$Qq, 4)
[1] 0.5848
>  round(1 - davies(260, c(7, 3, 7, 3), c(6, 2, 1, 1), c(6, 2, 6, 2))$Qq, 4)
[1] 0.9538
> 
>  round(1 - davies(-40, c(7, 3, -7, -3), c(6, 2, 1, 1), c(6, 2, 6,
+  2))$Qq, 4)
[1] 0.0782
>  round(1 - davies(40, c(7, 3, -7, -3), c(6, 2, 1, 1), c(6, 2, 6, 2))$Qq,
+  4)
[1] 0.5221
>  round(1 - davies(140, c(7, 3, -7, -3), c(6, 2, 1, 1), c(6, 2, 6,
+  2))$Qq, 4)
[1] 0.9604
> 
> # You should sometimes play with the 'lim' parameter:
> davies(0.00001,lambda=0.2)
Warning in davies(1e-05, lambda = 0.2) :
  Consider playing with 'lim' or 'acc'.
$trace
[1] 0.000000e+00 7.114000e+03 6.000000e+00 0.000000e+00 2.042576e+07
[6] 8.126737e-08 1.620000e+02

$ifault
[1] 1

$Qq
[1] 2

> imhof(0.00001,lambda=0.2)$Qq
[1] 0.9943581
> davies(0.00001,lambda=0.2, lim=20000)
$trace
[1] 5.666113e-01 1.255900e+04 8.000000e+00 8.890969e-01 2.042576e+07
[6] 8.126737e-08 1.790000e+02

$ifault
[1] 0

$Qq
[1] 0.9943597

> 
> 
> 
> 
> cleanEx()
> nameEx("farebrother")
> ### * farebrother
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: farebrother
> ### Title: Ruben/Farebrother method
> ### Aliases: ruben farebrother
> ### Keywords: distribution htest
> 
> ### ** Examples
> 
> # Some results from Table 3, p.327, Davies (1980)
> 
>  1 - farebrother(1, c(6, 3, 1), c(1, 1, 1), c(0, 0, 0))$Qq
[1] 0.05421385
> 
> 
> 
> 
> cleanEx()
> nameEx("imhof")
> ### * imhof
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: imhof
> ### Title: Imhof method.
> ### Aliases: imhof
> ### Keywords: distribution htest
> 
> ### ** Examples
> 
> # Some results from Table 1, p.424, Imhof (1961)
> 
> # Q1 with x = 2
> round(imhof(2, c(0.6, 0.3, 0.1))$Qq, 4)
[1] 0.124
> 
> # Q2 with x = 6
> round(imhof(6, c(0.6, 0.3, 0.1), c(2, 2, 2))$Qq, 4)
[1] 0.0161
> 
> # Q6 with x = 15
> round(imhof(15, c(0.7, 0.3), c(1, 1), c(6, 2))$Qq, 4)
[1] 0.0223
> 
> 
> 
> 
> cleanEx()
> nameEx("liu")
> ### * liu
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: liu
> ### Title: Liu's method
> ### Aliases: liu
> ### Keywords: distribution htest
> 
> ### ** Examples
> 
> # Some results from Liu et al. (2009)
> # Q1 from Liu et al.
> round(liu(2, c(0.5, 0.4, 0.1), c(1, 2, 1), c(1, 0.6, 0.8)), 6)
[1] 0.457753
> round(liu(6, c(0.5, 0.4, 0.1), c(1, 2, 1), c(1, 0.6, 0.8)), 6)
[1] 0.031079
> round(liu(8, c(0.5, 0.4, 0.1), c(1, 2, 1), c(1, 0.6, 0.8)), 6)
[1] 0.006883
> 
> # Q2 from Liu et al.
> round(liu(1, c(0.7, 0.3), c(1, 1), c(6, 2)), 6)
[1] 0.955046
> round(liu(6, c(0.7, 0.3), c(1, 1), c(6, 2)), 6)
[1] 0.407587
> round(liu(15, c(0.7, 0.3), c(1, 1), c(6, 2)), 6)
[1] 0.02234
> 
> # Q3 from Liu et al.
> round(liu(2, c(0.995, 0.005), c(1, 2), c(1, 1)), 6)
[1] 0.347946
> round(liu(8, c(0.995, 0.005), c(1, 2), c(1, 1)), 6)
[1] 0.033475
> round(liu(12, c(0.995, 0.005), c(1, 2), c(1, 1)), 6)
[1] 0.006748
> 
> # Q4 from Liu et al.
> round(liu(3.5, c(0.35, 0.15, 0.35, 0.15), c(1, 1, 6, 2), c(6, 2, 6, 2)),
+ 6)
[1] 0.956315
> round(liu(8, c(0.35, 0.15, 0.35, 0.15), c(1, 1, 6, 2), c(6, 2, 6, 2)), 6)
[1] 0.415248
> round(liu(13, c(0.35, 0.15, 0.35, 0.15), c(1, 1, 6, 2), c(6, 2, 6, 2)), 6)
[1] 0.046228
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.075 0.013 0.087 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
