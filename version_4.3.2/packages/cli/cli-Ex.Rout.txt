
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cli"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cli')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ansi-styles")
> ### * ansi-styles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi-styles
> ### Title: ANSI colored text
> ### Aliases: ansi-styles bg_black bg_blue bg_cyan bg_green bg_magenta
> ###   bg_red bg_white bg_yellow bg_none bg_br_black bg_br_blue bg_br_cyan
> ###   bg_br_green bg_br_magenta bg_br_red bg_br_white bg_br_yellow
> ###   col_black col_blue col_cyan col_green col_magenta col_red col_white
> ###   col_yellow col_grey col_silver col_none col_br_black col_br_blue
> ###   col_br_cyan col_br_green col_br_magenta col_br_red col_br_white
> ###   col_br_yellow style_dim style_blurred style_bold style_hidden
> ###   style_inverse style_italic style_reset style_strikethrough
> ###   style_underline style_no_bold style_no_blurred style_no_dim
> ###   style_no_italic style_no_underline style_no_inverse style_no_hidden
> ###   style_no_strikethrough style_no_color style_no_bg_color
> 
> ### ** Examples
> 
> col_blue("Hello ", "world!")
<cli_ansi_string>
[1] Hello world!
> cat(col_blue("Hello ", "world!"))
Hello world!> 
> cat("... to highlight the", col_red("search term"),
+     "in a block of text\n")
... to highlight the search term in a block of text
> 
> ## Style stack properly
> cat(col_green(
+  "I am a green line ",
+  col_blue(style_underline(style_bold("with a blue substring"))),
+  " that becomes green again!"
+ ))
I am a green line with a blue substring that becomes green again!> 
> error <- combine_ansi_styles("red", "bold")
> warn <- combine_ansi_styles("magenta", "underline")
> note <- col_cyan
> cat(error("Error: subscript out of bounds!\n"))
Error: subscript out of bounds!
> cat(warn("Warning: shorter argument was recycled.\n"))
Warning: shorter argument was recycled.
> cat(note("Note: no such directory.\n"))
Note: no such directory.
> 
> # style_no_* functions, note that the color is not removed
> style_italic(col_green(paste0(
+   "italic before, ",
+   style_no_italic("normal here, "),
+   "italic after"
+ )))
<cli_ansi_string>
[1] italic before, normal here, italic after
> 
> # avoiding  color for substring
> style_italic(col_red(paste(
+   "red before",
+   col_none("not red between"),
+   "red after"
+ )))
<cli_ansi_string>
[1] red before not red between red after
> 
> 
> 
> cleanEx()
> nameEx("ansi_collapse")
> ### * ansi_collapse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_collapse
> ### Title: Collapse a vector into a string scalar
> ### Aliases: ansi_collapse
> 
> ### ** Examples
> 
> ansi_collapse(letters)
[1] "a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, and z"
> 
> # truncate
> ansi_collapse(letters, trunc = 5)
[1] "a, b, c, …, y, and z"
> 
> # head style
> ansi_collapse(letters, trunc = 5, style = "head")
[1] "a, b, c, d, e, …"
> 
> 
> 
> cleanEx()
> nameEx("ansi_grep")
> ### * ansi_grep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_grep
> ### Title: Like 'base::grep()' and 'base::grepl()', but for ANSI strings
> ### Aliases: ansi_grep ansi_grepl
> 
> ### ** Examples
> 
> red_needle <- col_red("needle")
> haystack <- c("foo", "needle", "foo")
> green_haystack <- col_green(haystack)
> ansi_grepl(red_needle, haystack)
[1] FALSE  TRUE FALSE
> ansi_grepl(red_needle, green_haystack)
[1] FALSE  TRUE FALSE
> 
> 
> 
> cleanEx()
> nameEx("ansi_has_any")
> ### * ansi_has_any
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_has_any
> ### Title: Check if a string has some ANSI styling
> ### Aliases: ansi_has_any
> 
> ### ** Examples
> 
> ## The second one has style if ANSI colors are supported
> ansi_has_any("foobar")
[1] FALSE
> ansi_has_any(col_red("foobar"))
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("ansi_html")
> ### * ansi_html
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_html
> ### Title: Convert ANSI styled text to HTML
> ### Aliases: ansi_html
> 
> ### ** Examples
> 
> ## Don't show: 
> if (cli:::has_packages(c("htmltools", "withr"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Syntax highlight the source code of an R function with ANSI tags,
+ ## and export it to a HTML file.
+ code <- withr::with_options(
+   list(ansi.num_colors = 256),
+   code_highlight(format(ansi_html))
+ )
+ hcode <- paste(ansi_html(code), collapse = "\n")
+ css <- paste(format(ansi_html_style()), collapse=  "\n")
+ page <- htmltools::tagList(
+   htmltools::tags$head(htmltools::tags$style(css)),
+   htmltools::tags$pre(htmltools::HTML(hcode))
+ )
+ 
+ if (interactive()) htmltools::html_print(page)
+ ## Don't show: 
+ }) # examplesIf
> code <- withr::with_options(list(ansi.num_colors = 256), code_highlight(format(ansi_html)))
> hcode <- paste(ansi_html(code), collapse = "\n")
> css <- paste(format(ansi_html_style()), collapse = "\n")
> page <- htmltools::tagList(htmltools::tags$head(htmltools::tags$style(css)), 
+     htmltools::tags$pre(htmltools::HTML(hcode)))
> if (interactive()) htmltools::html_print(page)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ansi_html_style")
> ### * ansi_html_style
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_html_style
> ### Title: CSS styles for the output of 'ansi_html()'
> ### Aliases: ansi_html_style
> 
> ### ** Examples
> 
> ansi_html_style(colors = FALSE)
.ansi-bold       { font-weight: bold;             }
.ansi-italic     { font-style: italic;            }
.ansi-underline  { text-decoration: underline;    }
.ansi-blink      { text-decoration: blink;        }
.ansi-hide       { visibility: hidden;            }
.ansi-crossedout { text-decoration: line-through; }
.ansi-link:hover { text-decoration: underline;    }
> ansi_html_style(colors = 8, palette = "iterm-snazzy")
.ansi-bold        { font-weight: bold;             }
.ansi-italic      { font-style: italic;            }
.ansi-underline   { text-decoration: underline;    }
.ansi-blink       { text-decoration: blink;        }
.ansi-hide        { visibility: hidden;            }
.ansi-crossedout  { text-decoration: line-through; }
.ansi-link:hover  { text-decoration: underline;    }
.ansi-color-0     { color: #000000 }
.ansi-color-1     { color: #ff5c57 }
.ansi-color-2     { color: #5af78e }
.ansi-color-3     { color: #f3f99d }
.ansi-color-4     { color: #57c7ff }
.ansi-color-5     { color: #ff6ac1 }
.ansi-color-6     { color: #9aedfe }
.ansi-color-7     { color: #f1f1f0 }
.ansi-color-8     { color: #686868 }
.ansi-color-9     { color: #ff5c57 }
.ansi-color-10    { color: #5af78e }
.ansi-color-11    { color: #f3f99d }
.ansi-color-12    { color: #57c7ff }
.ansi-color-13    { color: #ff6ac1 }
.ansi-color-14    { color: #9aedfe }
.ansi-color-15    { color: #f1f1f0 }
.ansi-bg-color-0  { background-color: #000000 }
.ansi-bg-color-1  { background-color: #ff5c57 }
.ansi-bg-color-2  { background-color: #5af78e }
.ansi-bg-color-3  { background-color: #f3f99d }
.ansi-bg-color-4  { background-color: #57c7ff }
.ansi-bg-color-5  { background-color: #ff6ac1 }
.ansi-bg-color-6  { background-color: #9aedfe }
.ansi-bg-color-7  { background-color: #f1f1f0 }
.ansi-bg-color-8  { background-color: #686868 }
.ansi-bg-color-9  { background-color: #ff5c57 }
.ansi-bg-color-10 { background-color: #5af78e }
.ansi-bg-color-11 { background-color: #f3f99d }
.ansi-bg-color-12 { background-color: #57c7ff }
.ansi-bg-color-13 { background-color: #ff6ac1 }
.ansi-bg-color-14 { background-color: #9aedfe }
.ansi-bg-color-15 { background-color: #f1f1f0 }
> 
> 
> 
> cleanEx()
> nameEx("ansi_nchar")
> ### * ansi_nchar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_nchar
> ### Title: Count number of characters in an ANSI colored string
> ### Aliases: ansi_nchar
> 
> ### ** Examples
> 
> str <- paste(
+   col_red("red"),
+   "default",
+   col_green("green")
+ )
> 
> cat(str, "\n")
red default green 
> nchar(str)
[1] 17
> ansi_nchar(str)
[1] 17
> nchar(ansi_strip(str))
[1] 17
> 
> 
> 
> cleanEx()
> nameEx("ansi_nzchar")
> ### * ansi_nzchar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_nzchar
> ### Title: Like 'base::nzchar()', but for ANSI strings
> ### Aliases: ansi_nzchar
> 
> ### ** Examples
> 
> ansi_nzchar("")
[1] FALSE
> ansi_nzchar(col_red(""))
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("ansi_palettes")
> ### * ansi_palettes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: truecolor
> ### Title: ANSI colors palettes
> ### Aliases: truecolor ansi_palettes ansi_palette_show
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ansi_palettes
                  black     red   green  yellow    blue magenta    cyan   white
dichro          #000000 #882255 #117733 #ddcc77 #332288 #aa4499 #88ccee #e5e5e5
vga             #000000 #aa0000 #00aa00 #aa5500 #0000aa #aa00aa #00aaaa #aaaaaa
winxp           #000000 #800000 #008000 #808000 #000080 #800080 #008080 #c0c0c0
vscode          #000000 #cd3131 #0dbc79 #e5e510 #2472c8 #bc3fbc #11a8cd #e5e5e5
win10           #0c0c0c #c50f1f #13a10e #c19c00 #0037da #881798 #3a96dd #cccccc
macos           #000000 #c23621 #25bc24 #adad27 #492ee1 #d338d3 #33bbc8 #cbcccd
putty           #000000 #bb0000 #00bb00 #bbbb00 #0000bb #bb00bb #00bbbb #bbbbbb
mirc            #000000 #7f0000 #009300 #fc7f00 #00007f #9c009c #009393 #d2d2d2
xterm           #000000 #cd0000 #00cd00 #cdcd00 #0000ee #cd00cd #00cdcd #e5e5e5
ubuntu          #010101 #de382b #39b54a #ffc706 #006fb8 #762671 #2cb5e9 #cccccc
eclipse         #000000 #cd0000 #00cd00 #cdcd00 #0000ee #cd00cd #00cdcd #e5e5e5
iterm           #000000 #c91b00 #00c200 #c7c400 #0225c7 #ca30c7 #00c5c7 #c7c7c7
iterm-pastel    #626262 #ff8373 #b4fb73 #fffdc3 #a5d5fe #ff90fe #d1d1fe #f1f1f1
iterm-smoooooth #14191e #b43c2a #00c200 #c7c400 #2744c7 #c040be #00c5c7 #c7c7c7
iterm-snazzy    #000000 #ff5c57 #5af78e #f3f99d #57c7ff #ff6ac1 #9aedfe #f1f1f0
iterm-solarized #073642 #dc322f #859900 #b58900 #268bd2 #d33682 #2aa198 #eee8d5
iterm-tango     #000000 #d81e00 #5ea702 #cfae00 #427ab3 #89658e #00a7aa #dbded8
                br_black  br_red br_green br_yellow br_blue br_magenta br_cyan
dichro           #000000 #cc6677  #999933   #ddcc77 #44aa99    #aa4499 #88ccee
vga              #555555 #ff5555  #55ff55   #ffff55 #5555ff    #ff55ff #55ffff
winxp            #808080 #ff0000  #00ff00   #ffff00 #0000ff    #ff00ff #00ffff
vscode           #666666 #f14c4c  #23d18b   #f5f543 #3b8eea    #d670d6 #29b8db
win10            #767676 #e74856  #16c60c   #f9f1a5 #3b78ff    #b4009e #61d6d6
macos            #818383 #fc391f  #31e722   #eaec23 #5833ff    #f935f8 #14f0f0
putty            #555555 #ff5555  #55ff55   #ffff55 #5555ff    #ff55ff #55ffff
mirc             #7f7f7f #ff0000  #00fc00   #ffff00 #0000fc    #ff00ff #00ffff
xterm            #7f7f7f #ff0000  #00ff00   #ffff00 #5c5cff    #ff00ff #00ffff
ubuntu           #808080 #ff0000  #00ff00   #ffff00 #0000ff    #ff00ff #00ffff
eclipse          #000000 #ff0000  #00ff00   #ffff00 #5c5cff    #ff00ff #00ffff
iterm            #686868 #ff6e67  #5ffa68   #fffc67 #6871ff    #ff77ff #60fdff
iterm-pastel     #8f8f8f #ffc4be  #d6fcba   #fffed5 #c2e3ff    #ffb2fe #e6e7fe
iterm-smoooooth  #686868 #dd7975  #58e790   #ece100 #a7abf2    #e17ee1 #60fdff
iterm-snazzy     #686868 #ff5c57  #5af78e   #f3f99d #57c7ff    #ff6ac1 #9aedfe
iterm-solarized  #002b36 #cb4b16  #586e75   #657b83 #839496    #6c71c4 #93a1a1
iterm-tango      #686a66 #f54235  #99e343   #fdeb61 #84b0d8    #bc94b7 #37e6e8
                br_white
dichro           #ffffff
vga              #ffffff
winxp            #ffffff
vscode           #e5e5e5
win10            #f2f2f2
macos            #e9ebeb
putty            #ffffff
mirc             #ffffff
xterm            #ffffff
ubuntu           #ffffff
eclipse          #ffffff
iterm            #ffffff
iterm-pastel     #ffffff
iterm-smoooooth  #ffffff
iterm-snazzy     #f1f1f0
iterm-solarized  #fdf6e3
iterm-tango      #f1f1f0
> ansi_palette_show("dichro", colors = truecolor)
                                                     bright variants
blck red  grn  yllw blue mgnt cyan whte  blck red  grn  yllw blue mgnt cyan whte

[38;2;0;0;0m████[39m [38;2;136;34;85m████[39m [38;2;17;119;51m████[39m [38;2;221;204;119m████[39m [38;2;51;34;136m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;229;229;229m████[39m  [38;2;0;0;0m████[39m [38;2;204;102;119m████[39m [38;2;153;153;51m████[39m [38;2;221;204;119m████[39m [38;2;68;170;153m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;255;255;255m████[39m
[38;2;0;0;0m████[39m [38;2;136;34;85m████[39m [38;2;17;119;51m████[39m [38;2;221;204;119m████[39m [38;2;51;34;136m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;229;229;229m████[39m  [38;2;0;0;0m████[39m [38;2;204;102;119m████[39m [38;2;153;153;51m████[39m [38;2;221;204;119m████[39m [38;2;68;170;153m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;255;255;255m████[39m
[38;2;0;0;0m████[39m [38;2;136;34;85m████[39m [38;2;17;119;51m████[39m [38;2;221;204;119m████[39m [38;2;51;34;136m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;229;229;229m████[39m  [38;2;0;0;0m████[39m [38;2;204;102;119m████[39m [38;2;153;153;51m████[39m [38;2;221;204;119m████[39m [38;2;68;170;153m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;255;255;255m████[39m
[38;2;0;0;0m████[39m [38;2;136;34;85m████[39m [38;2;17;119;51m████[39m [38;2;221;204;119m████[39m [38;2;51;34;136m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;229;229;229m████[39m  [38;2;0;0;0m████[39m [38;2;204;102;119m████[39m [38;2;153;153;51m████[39m [38;2;221;204;119m████[39m [38;2;68;170;153m████[39m [38;2;170;68;153m████[39m [38;2;136;204;238m████[39m [38;2;255;255;255m████[39m
> 
> 
> 
> cleanEx()
> nameEx("ansi_strip")
> ### * ansi_strip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_strip
> ### Title: Remove ANSI escape sequences from a string
> ### Aliases: ansi_strip
> 
> ### ** Examples
> 
> ansi_strip(col_red("foobar")) == "foobar"
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("ansi_strsplit")
> ### * ansi_strsplit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_strsplit
> ### Title: Split an ANSI colored string
> ### Aliases: ansi_strsplit
> 
> ### ** Examples
> 
> str <- paste0(
+   col_red("I am red---"),
+   col_green("and I am green-"),
+   style_underline("I underlined")
+ )
> 
> cat(str, "\n")
I am red---and I am green-I underlined 
> 
> # split at dashes, keep color
> cat(ansi_strsplit(str, "[-]+")[[1]], sep = "\n")
I am red
and I am green
I underlined
> strsplit(ansi_strip(str), "[-]+")
[[1]]
[1] "I am red"       "and I am green" "I underlined"  

> 
> # split to characters, keep color
> cat(ansi_strsplit(str, "")[[1]], "\n", sep = " ")
I   a m   r e d - - - a n d   I   a m   g r e e n - I   u n d e r l i n e d 
> strsplit(ansi_strip(str), "")
[[1]]
 [1] "I" " " "a" "m" " " "r" "e" "d" "-" "-" "-" "a" "n" "d" " " "I" " " "a" "m"
[20] " " "g" "r" "e" "e" "n" "-" "I" " " "u" "n" "d" "e" "r" "l" "i" "n" "e" "d"

> 
> 
> 
> cleanEx()
> nameEx("ansi_strtrim")
> ### * ansi_strtrim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_strtrim
> ### Title: Truncate an ANSI string
> ### Aliases: ansi_strtrim
> 
> ### ** Examples
> 
> text <- cli::col_red(cli:::lorem_ipsum())
> ansi_strtrim(c(text, "foobar"), 40)
<cli_ansi_string>
[1] Lorem ad ipsum veniam esse nisi deserun…
[2] foobar                                  
> 
> 
> 
> cleanEx()
> nameEx("ansi_strwrap")
> ### * ansi_strwrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_strwrap
> ### Title: Wrap an ANSI styled string to a certain width
> ### Aliases: ansi_strwrap
> 
> ### ** Examples
> 
> text <- cli:::lorem_ipsum()
> # Highlight some words, that start with 's'
> rexp <- gregexpr("\\b([sS][a-zA-Z]+)\\b", text)
> regmatches(text, rexp) <- lapply(regmatches(text, rexp), col_red)
> cat(text)
Lorem ad ipsum veniam esse nisi deserunt duis. Qui incididunt elit elit mollit sint nulla consectetur aute commodo do elit laboris minim et. Laboris ipsum mollit voluptate et non do incididunt eiusmod. Anim consectetur mollit laborum occaecat eiusmod excepteur. Ullamco non tempor esse anim tempor magna non.> 
> wrp <- ansi_strwrap(text, width = 40)
> cat(wrp, sep = "\n")
Lorem ad ipsum veniam esse nisi
deserunt duis. Qui incididunt elit elit
mollit sint nulla consectetur aute
commodo do elit laboris minim et.
Laboris ipsum mollit voluptate et non
do incididunt eiusmod. Anim consectetur
mollit laborum occaecat eiusmod
excepteur. Ullamco non tempor esse anim
tempor magna non.
> 
> 
> 
> cleanEx()
> nameEx("ansi_substr")
> ### * ansi_substr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_substr
> ### Title: Substring(s) of an ANSI colored string
> ### Aliases: ansi_substr
> 
> ### ** Examples
> 
> str <- paste(
+   col_red("red"),
+   "default",
+   col_green("green")
+ )
> 
> cat(str, "\n")
red default green 
> cat(ansi_substr(str, 1, 5), "\n")
red d 
> cat(ansi_substr(str, 1, 15), "\n")
red default gre 
> cat(ansi_substr(str, 3, 7), "\n")
d def 
> 
> substr(ansi_strip(str), 1, 5)
[1] "red d"
> substr(ansi_strip(str), 1, 15)
[1] "red default gre"
> substr(ansi_strip(str), 3, 7)
[1] "d def"
> 
> str2 <- paste(
+   "another",
+   col_red("multi-", style_underline("style")),
+   "text"
+ )
> 
> cat(str2, "\n")
another multi-style text 
> cat(ansi_substr(c(str, str2), c(3,5), c(7, 18)), sep = "\n")
d def
her multi-styl
> substr(ansi_strip(c(str, str2)), c(3,5), c(7, 18))
[1] "d def"          "her multi-styl"
> 
> 
> 
> cleanEx()
> nameEx("ansi_substring")
> ### * ansi_substring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_substring
> ### Title: Substring(s) of an ANSI colored string
> ### Aliases: ansi_substring
> 
> ### ** Examples
> 
> str <- paste(
+   col_red("red"),
+   "default",
+   col_green("green")
+ )
> 
> cat(str, "\n")
red default green 
> cat(ansi_substring(str, 1, 5), "\n")
red d 
> cat(ansi_substring(str, 1, 15), "\n")
red default gre 
> cat(ansi_substring(str, 3, 7), "\n")
d def 
> 
> substring(ansi_strip(str), 1, 5)
[1] "red d"
> substring(ansi_strip(str), 1, 15)
[1] "red default gre"
> substring(ansi_strip(str), 3, 7)
[1] "d def"
> 
> str2 <- paste(
+   "another",
+   col_red("multi-", style_underline("style")),
+   "text"
+ )
> 
> cat(str2, "\n")
another multi-style text 
> cat(ansi_substring(str2, c(3,5), c(7, 18)), sep = "\n")
other
her multi-styl
> substring(ansi_strip(str2), c(3,5), c(7, 18))
[1] "other"          "her multi-styl"
> 
> 
> 
> cleanEx()
> nameEx("ansi_toupper")
> ### * ansi_toupper
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_toupper
> ### Title: ANSI character translation and case folding
> ### Aliases: ansi_toupper ansi_tolower ansi_chartr
> 
> ### ** Examples
> 
> ansi_toupper(col_red("Uppercase"))
<cli_ansi_string>
[1] UPPERCASE
> 
> ansi_tolower(col_red("LowerCase"))
<cli_ansi_string>
[1] lowercase
> 
> x <- paste0(col_green("MiXeD"), col_red(" cAsE 123"))
> ansi_chartr("iXs", "why", x)
<cli_ansi_string>
[1] MwheD cAyE 123
> 
> 
> 
> cleanEx()
> nameEx("ansi_trimws")
> ### * ansi_trimws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ansi_trimws
> ### Title: Remove leading and/or trailing whitespace from an ANSI string
> ### Aliases: ansi_trimws
> 
> ### ** Examples
> 
> trimws(paste0("   ", col_red("I am red"), "   "))
[1] "I am red"
> ansi_trimws(paste0("   ", col_red("I am red"), "   "))
<cli_ansi_string>
[1] I am red
> trimws(col_red("   I am red   "))
<cli_ansi_string>
[1] I am red
> ansi_trimws(col_red("   I am red   "))
<cli_ansi_string>
[1] I am red
> 
> 
> 
> cleanEx()
> nameEx("cat_line")
> ### * cat_line
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cat_line
> ### Title: 'cat()' helpers
> ### Aliases: cat_line cat_bullet cat_boxx cat_rule cat_print
> 
> ### ** Examples
> 
> cat_line("This is ", "a ", "line of text.", col = "red")
This is a line of text.
> cat_bullet(letters[1:5])
• a
• b
• c
• d
• e
> cat_bullet(letters[1:5], bullet = "tick", bullet_col = "green")
✔ a
✔ b
✔ c
✔ d
✔ e
> cat_rule()
────────────────────────────────────────────────────────────────────────────────
> 
> 
> 
> cleanEx()
> nameEx("cli_debug_doc")
> ### * cli_debug_doc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cli_debug_doc
> ### Title: Debug cli internals
> ### Aliases: cli_debug_doc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D cli_debug_doc()
> ##D 
> ##D olid <- cli_ol()
> ##D cli_li()
> ##D cli_debug_doc()
> ##D cli_debug_doc()[]
> ##D 
> ##D cli_end(olid)
> ##D cli_debug_doc()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cli_fmt")
> ### * cli_fmt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cli_fmt
> ### Title: Capture the output of cli functions instead of printing it
> ### Aliases: cli_fmt
> 
> ### ** Examples
> 
> cli_fmt({
+   cli_alert_info("Loading data file")
+   cli_alert_success("Loaded data file")
+ })
[1] "ℹ Loading data file" "✔ Loaded data file" 
> 
> 
> 
> cleanEx()
> nameEx("cli_format_method")
> ### * cli_format_method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cli_format_method
> ### Title: Create a format method for an object using cli tools
> ### Aliases: cli_format_method
> 
> ### ** Examples
> 
> 
> # Let's create format and print methods for a new S3 class that
> # represents the an installed R package: `r_package`
> 
> # An `r_package` will contain the DESCRIPTION metadata of the package
> # and also its installation path.
> new_r_package <- function(pkg) {
+   tryCatch(
+     desc <- packageDescription(pkg),
+     warning = function(e) stop("Cannot find R package `", pkg, "`")
+   )
+   file <- dirname(attr(desc, "file"))
+   if (basename(file) != pkg) file <- dirname(file)
+   structure(
+     list(desc = unclass(desc), lib = dirname(file)),
+     class = "r_package"
+   )
+ }
> 
> format.r_package <- function(x, ...) {
+   cli_format_method({
+     cli_h1("{.pkg {x$desc$Package}} {cli::symbol$line} {x$desc$Title}")
+     cli_text("{x$desc$Description}")
+     cli_ul(c(
+       "Version: {x$desc$Version}",
+       if (!is.null(x$desc$Maintainer)) "Maintainer: {x$desc$Maintainer}",
+       "License: {x$desc$License}"
+     ))
+     if (!is.na(x$desc$URL)) cli_text("See more at {.url {x$desc$URL}}")
+   })
+ }
> 
> # Now the print method is easy:
> print.r_package <- function(x, ...) {
+   cat(format(x, ...), sep = "\n")
+ }
> 
> # Try it out
> new_r_package("cli")

── cli ─ Helpers for Developing Command Line Interfaces ────────────────────────
A suite of tools to build attractive command line interfaces ('CLIs'), from
semantic elements: headings, lists, alerts, paragraphs, etc. Supports custom
themes via a 'CSS'-like language. It also contains a number of lower level
'CLI' elements: rules, boxes, trees, and 'Unicode' symbols with 'ASCII'
alternatives. It support ANSI colors and text styles as well.
• Version: 3.6.2
• Maintainer: Gábor Csárdi <csardi.gabor@gmail.com>
• License: MIT + file LICENSE
See more at <https://cli.r-lib.org, https://github.com/r-lib/cli>
> 
> # The formatting of the output depends on the current theme:
> opt <- options(cli.theme = simple_theme())
> print(new_r_package("cli"))

── cli ─ Helpers for Developing Command Line Interfaces ────────────────────────
A suite of tools to build attractive command line interfaces ('CLIs'), from
semantic elements: headings, lists, alerts, paragraphs, etc. Supports custom
themes via a 'CSS'-like language. It also contains a number of lower level
'CLI' elements: rules, boxes, trees, and 'Unicode' symbols with 'ASCII'
alternatives. It support ANSI colors and text styles as well.
• Version: 3.6.2
• Maintainer: Gábor Csárdi <csardi.gabor@gmail.com>
• License: MIT + file LICENSE
See more at <https://cli.r-lib.org, https://github.com/r-lib/cli>
> options(opt)  # <- restore theme
> 
> 
> 
> cleanEx()
> nameEx("cli_process_start")
> ### * cli_process_start
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cli_process_start
> ### Title: Indicate the start and termination of some computation in the
> ###   status bar (superseded)
> ### Aliases: cli_process_start cli_process_done cli_process_failed
> 
> ### ** Examples
> 
> 
> ## Failure by default
> fun <- function() {
+   cli_process_start("Calculating")
+   if (interactive()) Sys.sleep(1)
+   if (runif(1) < 0.5) stop("Failed")
+   cli_process_done()
+ }
> tryCatch(fun(), error = function(err) err)
ℹ Calculating
✖ Calculating ... failed

<simpleError in fun(): Failed>
> 
> ## Success by default
> fun2 <- function() {
+   cli_process_start("Calculating", on_exit = "done")
+   tryCatch({
+     if (interactive()) Sys.sleep(1)
+     if (runif(1) < 0.5) stop("Failed")
+   }, error = function(err) cli_process_failed())
+ }
> fun2()
ℹ Calculating
✖ Calculating ... failed

> 
> 
> 
> cleanEx()
> nameEx("cli_sitrep")
> ### * cli_sitrep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cli_sitrep
> ### Title: cli situation report
> ### Aliases: cli_sitrep
> 
> ### ** Examples
> 
> cli_sitrep()
- cli_unicode_option : NULL
- symbol_charset     : UTF-8
- console_utf8       : TRUE
- latex_active       : FALSE
- num_colors         : 1
- console_width      : 80
> 
> 
> 
> cleanEx()
> nameEx("code_highlight")
> ### * code_highlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: code_highlight
> ### Title: Syntax highlight R code
> ### Aliases: code_highlight
> 
> ### ** Examples
> 
> code_highlight(deparse(ls))
 [1] "function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, "               
 [2] "    pattern, sorted = TRUE) "                                                              
 [3] "{"                                                                                         
 [4] "    if (!missing(name)) {"                                                                 
 [5] "        pos <- tryCatch(name, error = function(e) e)"                                      
 [6] "        if (inherits(pos, \"error\")) {"                                                   
 [7] "            name <- substitute(name)"                                                      
 [8] "            if (!is.character(name)) "                                                     
 [9] "                name <- deparse(name)"                                                     
[10] "            warning(gettextf(\"%s converted to character string\", "                       
[11] "                sQuote(name)), domain = NA)"                                               
[12] "            pos <- name"                                                                   
[13] "        }"                                                                                 
[14] "    }"                                                                                     
[15] "    all.names <- .Internal(ls(envir, all.names, sorted))"                                  
[16] "    if (!missing(pattern)) {"                                                              
[17] "        if ((ll <- length(grep(\"[\", pattern, fixed = TRUE))) && "                        
[18] "            ll != length(grep(\"]\", pattern, fixed = TRUE))) {"                           
[19] "            if (pattern == \"[\") {"                                                       
[20] "                pattern <- \"\\\\[\""                                                      
[21] "                warning(\"replaced regular expression pattern '[' by  '\\\\\\\\['\")"      
[22] "            }"                                                                             
[23] "            else if (length(grep(\"[^\\\\\\\\]\\\\[<-\", pattern))) {"                     
[24] "                pattern <- sub(\"\\\\[<-\", \"\\\\\\\\\\\\[<-\", pattern)"                 
[25] "                warning(\"replaced '[<-' by '\\\\\\\\[<-' in regular expression pattern\")"
[26] "            }"                                                                             
[27] "        }"                                                                                 
[28] "        grep(pattern, all.names, value = TRUE)"                                            
[29] "    }"                                                                                     
[30] "    else all.names"                                                                        
[31] "}"                                                                                         
> cat(code_highlight(deparse(ls)), sep = "\n")
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, 
    pattern, sorted = TRUE) 
{
    if (!missing(name)) {
        pos <- tryCatch(name, error = function(e) e)
        if (inherits(pos, "error")) {
            name <- substitute(name)
            if (!is.character(name)) 
                name <- deparse(name)
            warning(gettextf("%s converted to character string", 
                sQuote(name)), domain = NA)
            pos <- name
        }
    }
    all.names <- .Internal(ls(envir, all.names, sorted))
    if (!missing(pattern)) {
        if ((ll <- length(grep("[", pattern, fixed = TRUE))) && 
            ll != length(grep("]", pattern, fixed = TRUE))) {
            if (pattern == "[") {
                pattern <- "\\["
                warning("replaced regular expression pattern '[' by  '\\\\['")
            }
            else if (length(grep("[^\\\\]\\[<-", pattern))) {
                pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
                warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
            }
        }
        grep(pattern, all.names, value = TRUE)
    }
    else all.names
}
> 
> 
> 
> cleanEx()
> nameEx("code_theme_list")
> ### * code_theme_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: code_theme_list
> ### Title: Syntax highlighting themes
> ### Aliases: code_theme_list
> 
> ### ** Examples
> 
> code_theme_list()
 [1] "Ambiance"              "Chaos"                 "Chrome"               
 [4] "Clouds"                "Clouds Midnight"       "Cobalt"               
 [7] "Crimson Editor"        "Dawn"                  "Dracula"              
[10] "Dreamweaver"           "Eclipse"               "Idle Fingers"         
[13] "Katzenmilch"           "Kr Theme"              "Material"             
[16] "Merbivore"             "Merbivore Soft"        "Mono Industrial"      
[19] "Monokai"               "Pastel On Dark"        "Solarized Dark"       
[22] "Solarized Light"       "Textmate (default)"    "Tomorrow"             
[25] "Tomorrow Night"        "Tomorrow Night Blue"   "Tomorrow Night Bright"
[28] "Tomorrow Night 80s"    "Twilight"              "Vibrant Ink"          
[31] "Xcode"                
> code_highlight(deparse(get), code_theme = "Solarized Dark")
[1] "function (x, pos = -1L, envir = as.environment(pos), mode = \"any\", "
[2] "    inherits = TRUE) "                                                
[3] ".Internal(get(x, envir, mode, inherits))"                             
> 
> 
> 
> cleanEx()
> nameEx("combine_ansi_styles")
> ### * combine_ansi_styles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine_ansi_styles
> ### Title: Combine two or more ANSI styles
> ### Aliases: combine_ansi_styles
> 
> ### ** Examples
> 
> ## Use style names
> alert <- combine_ansi_styles("bold", "red4")
> cat(alert("Warning!"), "\n")
Warning! 
> 
> ## Or style functions
> alert <- combine_ansi_styles(style_bold, col_red, bg_cyan)
> cat(alert("Warning!"), "\n")
Warning! 
> 
> ## Combine a composite style
> alert <- combine_ansi_styles(
+   "bold",
+   combine_ansi_styles("red", bg_cyan))
> cat(alert("Warning!"), "\n")
Warning! 
> 
> 
> 
> cleanEx()
> nameEx("console_width")
> ### * console_width
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: console_width
> ### Title: Determine the width of the console
> ### Aliases: console_width
> 
> ### ** Examples
> 
> console_width()
[1] 80
> 
> 
> 
> cleanEx()
> nameEx("diff_chr")
> ### * diff_chr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diff_chr
> ### Title: Compare two character vectors elementwise
> ### Aliases: diff_chr
> 
> ### ** Examples
> 
> letters2 <- c("P", "R", "E", letters, "P", "O", "S", "T")
> letters2[11:16] <- c("M", "I", "D", "D", "L", "E")
> diff_chr(letters, letters2)
@@ -1,3 +1,6 @@
+P
+R
+E
 a
 b
 c
@@ -5,12 +8,12 @@
 e
 f
 g
-h
-i
-j
-k
-l
-m
+M
+I
+D
+D
+L
+E
 n
 o
 p
@@ -24,3 +27,7 @@
 x
 y
 z
+P
+O
+S
+T
> 
> 
> 
> cleanEx()
> nameEx("diff_str")
> ### * diff_str
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diff_str
> ### Title: Compare two character strings, character by character
> ### Aliases: diff_str
> 
> ### ** Examples
> 
> str1 <- "abcdefghijklmnopqrstuvwxyz"
> str2 <- "PREabcdefgMIDDLEnopqrstuvwxyzPOST"
> diff_str(str1, str2)
{+PRE+}abcdefg[-hijklm-]{+MIDDLE+}nopqrstuvwxyz{+POST+}
> 
> 
> 
> cleanEx()
> nameEx("format_inline")
> ### * format_inline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: format_inline
> ### Title: Format and returns a line of text
> ### Aliases: format_inline
> 
> ### ** Examples
> 
> format_inline("A message for {.emph later}, thanks {.fn format_inline}.")
[1] "A message for later, thanks `format_inline()`."
> 
> 
> 
> cleanEx()
> nameEx("has_keypress_support")
> ### * has_keypress_support
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_keypress_support
> ### Title: Check if the current platform/terminal supports reading single
> ###   keys.
> ### Aliases: has_keypress_support
> 
> ### ** Examples
> 
> has_keypress_support()
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("hash_animal")
> ### * hash_animal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hash_animal
> ### Title: Adjective-animal hash
> ### Aliases: hash_animal hash_raw_animal hash_obj_animal
> 
> ### ** Examples
> 
> hash_animal(c("foo", "bar"))
                                      hash        words
1                   sacrilegious diet lion sacrileg....
2 uncitizenly agricultural amethystgemclam uncitize....
> 
> # if you increase `n_adj`, the shorter hash is a suffix of the longer:
> hash_animal("cli package", 0)$hash
[1] "pullet"
> hash_animal("cli package", 1)$hash
[1] "pastyfaced pullet"
> hash_animal("cli package", 2)$hash
[1] "pregnant pastyfaced pullet"
> hash_animal("cli package", 3)$hash
[1] "unwelcome pregnant pastyfaced pullet"
> 
> 
> 
> cleanEx()
> nameEx("hash_emoji")
> ### * hash_emoji
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hash_emoji
> ### Title: Emoji hash
> ### Aliases: hash_emoji hash_raw_emoji hash_obj_emoji
> 
> ### ** Examples
> 
> hash_emoji(c("foo", NA, "bar", ""))$text
[1] "sun behind cloud, raised back of hand: dark skin tone, children crossing"
[2] NA                                                                        
[3] "man pilot: medium-light skin tone, flag: Afghanistan, keycap: *"         
[4] "teacup without handle, rhinoceros, flushed face"                         
> 
> # if you increase `size`, the shorter hash is a prefix of the longer:
> hash_emoji("foobar", 1)$text
[1] "fishing pole"
> hash_emoji("foobar", 2)$text
[1] "fishing pole, money with wings"
> hash_emoji("foobar", 3)$text
[1] "fishing pole, money with wings, eagle"
> hash_emoji("foobar", 4)$text
[1] "fishing pole, money with wings, eagle, dog face"
> 
> 
> 
> cleanEx()
> nameEx("hash_md5")
> ### * hash_md5
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hash_md5
> ### Title: MD5 hash
> ### Aliases: hash_md5 hash_raw_md5 hash_obj_md5 hash_file_md5
> 
> ### ** Examples
> 
> hash_md5(c("foo", NA, "bar", ""))
[1] "acbd18db4cc2f85cedef654fccc4a4d8" NA                                
[3] "37b51d194a7513e45b56f6524f2d51f2" "d41d8cd98f00b204e9800998ecf8427e"
> 
> 
> 
> cleanEx()
> nameEx("hash_sha1")
> ### * hash_sha1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hash_sha1
> ### Title: SHA-1 hash
> ### Aliases: hash_sha1 hash_raw_sha1 hash_obj_sha1 hash_file_sha1
> 
> ### ** Examples
> 
> hash_sha1(c("foo", NA, "bar", ""))
[1] "0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33"
[2] NA                                        
[3] "62cdb7020ff920e5aa642c3d4066950dd1f01f4d"
[4] "da39a3ee5e6b4b0d3255bfef95601890afd80709"
> 
> 
> 
> cleanEx()
> nameEx("hash_sha256")
> ### * hash_sha256
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hash_sha256
> ### Title: SHA-256 hash
> ### Aliases: hash_sha256 hash_raw_sha256 hash_obj_sha256 hash_file_sha256
> 
> ### ** Examples
> 
> hash_sha256(c("foo", NA, "bar", ""))
[1] "2c26b46b68ffc68ff99b453c1d30413413422d706483bfa0f98a5e886266e7ae"
[2] NA                                                                
[3] "fcde2b2edba56bf408601fb721fe9b5c338d10ee429ea04fae5511b68fbf8fb9"
[4] "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
> 
> 
> 
> cleanEx()
> nameEx("is_ansi_tty")
> ### * is_ansi_tty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_ansi_tty
> ### Title: Detect if a stream support ANSI escape characters
> ### Aliases: is_ansi_tty
> 
> ### ** Examples
> 
> is_ansi_tty()
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is_dynamic_tty")
> ### * is_dynamic_tty
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_dynamic_tty
> ### Title: Detect whether a stream supports \\r (Carriage return)
> ### Aliases: is_dynamic_tty
> 
> ### ** Examples
> 
> is_dynamic_tty()
[1] FALSE
> is_dynamic_tty(stdout())
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("keypress")
> ### * keypress
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keypress
> ### Title: Read a single keypress at the terminal
> ### Aliases: keypress
> 
> ### ** Examples
> 
> ## Don't show: 
> if (FALSE) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ x <- keypress()
+ cat("You pressed key", x, "\n")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("list_spinners")
> ### * list_spinners
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: list_spinners
> ### Title: List all available spinners
> ### Aliases: list_spinners
> 
> ### ** Examples
> 
> list_spinners()
 [1] "dots"                "dots2"               "dots3"              
 [4] "dots4"               "dots5"               "dots6"              
 [7] "dots7"               "dots8"               "dots9"              
[10] "dots10"              "dots11"              "dots12"             
[13] "dots13"              "dots8Bit"            "sand"               
[16] "line"                "line2"               "pipe"               
[19] "simpleDots"          "simpleDotsScrolling" "star"               
[22] "star2"               "flip"                "hamburger"          
[25] "growVertical"        "growHorizontal"      "balloon"            
[28] "balloon2"            "noise"               "bounce"             
[31] "boxBounce"           "boxBounce2"          "triangle"           
[34] "arc"                 "circle"              "squareCorners"      
[37] "circleQuarters"      "circleHalves"        "squish"             
[40] "toggle"              "toggle2"             "toggle3"            
[43] "toggle4"             "toggle5"             "toggle6"            
[46] "toggle7"             "toggle8"             "toggle9"            
[49] "toggle10"            "toggle11"            "toggle12"           
[52] "toggle13"            "arrow"               "arrow2"             
[55] "arrow3"              "bouncingBar"         "bouncingBall"       
[58] "smiley"              "monkey"              "hearts"             
[61] "clock"               "earth"               "material"           
[64] "moon"                "runner"              "pong"               
[67] "shark"               "dqpb"                "weather"            
[70] "christmas"           "grenade"             "point"              
[73] "layer"               "betaWave"            "fingerDance"        
[76] "fistBump"            "soccerHeader"        "mindblown"          
[79] "speaker"             "orangePulse"         "bluePulse"          
[82] "orangeBluePulse"     "timeTravel"          "aesthetic"          
[85] "growVeriticalDotsLR" "growVeriticalDotsRL" "growVeriticalDotsLL"
[88] "growVeriticalDotsRR"
> get_spinner(list_spinners()[1])
$name
[1] "dots"

$interval
[1] 80

$frames
 [1] "⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏"

> 
> 
> 
> cleanEx()
> nameEx("make_ansi_style")
> ### * make_ansi_style
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_ansi_style
> ### Title: Create a new ANSI style
> ### Aliases: make_ansi_style
> 
> ### ** Examples
> 
> make_ansi_style("orange")
<cli_ansi_style>
Example output
> make_ansi_style("#123456")
<cli_ansi_style>
Example output
> make_ansi_style("orange", bg = TRUE)
<cli_ansi_style>
Example output
> 
> orange <- make_ansi_style("orange")
> orange("foobar")
<cli_ansi_string>
[1] foobar
> cat(orange("foobar"))
foobar> 
> 
> 
> cleanEx()
> nameEx("num_ansi_colors")
> ### * num_ansi_colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: num_ansi_colors
> ### Title: Detect the number of ANSI colors to use
> ### Aliases: num_ansi_colors detect_tty_colors
> 
> ### ** Examples
> 
> num_ansi_colors()
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("pluralize")
> ### * pluralize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pluralize
> ### Title: String templating with pluralization
> ### Aliases: pluralize
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("glue", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Regular plurals
+ nfile <- 0; pluralize("Found {nfile} file{?s}.")
+ nfile <- 1; pluralize("Found {nfile} file{?s}.")
+ nfile <- 2; pluralize("Found {nfile} file{?s}.")
+ 
+ # Irregular plurals
+ ndir <- 1; pluralize("Found {ndir} director{?y/ies}.")
+ ndir <- 5; pluralize("Found {ndir} director{?y/ies}.")
+ 
+ # Use 'no' instead of zero
+ nfile <- 0; pluralize("Found {no(nfile)} file{?s}.")
+ nfile <- 1; pluralize("Found {no(nfile)} file{?s}.")
+ nfile <- 2; pluralize("Found {no(nfile)} file{?s}.")
+ 
+ # Use the length of character vectors
+ pkgs <- "pkg1"
+ pluralize("Will remove the {pkgs} package{?s}.")
+ pkgs <- c("pkg1", "pkg2", "pkg3")
+ pluralize("Will remove the {pkgs} package{?s}.")
+ 
+ pkgs <- character()
+ pluralize("Will remove {?no/the/the} {pkgs} package{?s}.")
+ pkgs <- c("pkg1", "pkg2", "pkg3")
+ pluralize("Will remove {?no/the/the} {pkgs} package{?s}.")
+ 
+ # Multiple quantities
+ nfiles <- 3; ndirs <- 1
+ pluralize("Found {nfiles} file{?s} and {ndirs} director{?y/ies}")
+ 
+ # Explicit quantities
+ nupd <- 3; ntotal <- 10
+ cli_text("{nupd}/{ntotal} {qty(nupd)} file{?s} {?needs/need} updates")
+ ## Don't show: 
+ }) # examplesIf
> nfile <- 0
> pluralize("Found {nfile} file{?s}.")
Found 0 files.
> nfile <- 1
> pluralize("Found {nfile} file{?s}.")
Found 1 file.
> nfile <- 2
> pluralize("Found {nfile} file{?s}.")
Found 2 files.
> ndir <- 1
> pluralize("Found {ndir} director{?y/ies}.")
Found 1 directory.
> ndir <- 5
> pluralize("Found {ndir} director{?y/ies}.")
Found 5 directories.
> nfile <- 0
> pluralize("Found {no(nfile)} file{?s}.")
Found no files.
> nfile <- 1
> pluralize("Found {no(nfile)} file{?s}.")
Found 1 file.
> nfile <- 2
> pluralize("Found {no(nfile)} file{?s}.")
Found 2 files.
> pkgs <- "pkg1"
> pluralize("Will remove the {pkgs} package{?s}.")
Will remove the pkg1 package.
> pkgs <- c("pkg1", "pkg2", "pkg3")
> pluralize("Will remove the {pkgs} package{?s}.")
Will remove the pkg1, pkg2, and pkg3 packages.
> pkgs <- character()
> pluralize("Will remove {?no/the/the} {pkgs} package{?s}.")
Will remove no  packages.
> pkgs <- c("pkg1", "pkg2", "pkg3")
> pluralize("Will remove {?no/the/the} {pkgs} package{?s}.")
Will remove the pkg1, pkg2, and pkg3 packages.
> nfiles <- 3
> ndirs <- 1
> pluralize("Found {nfiles} file{?s} and {ndirs} director{?y/ies}")
Found 3 files and 1 directory
> nupd <- 3
> ntotal <- 10
> cli_text("{nupd}/{ntotal} {qty(nupd)} file{?s} {?needs/need} updates")
3/10 files need updates
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ruler")
> ### * ruler
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ruler
> ### Title: Print the helpful ruler to the screen
> ### Aliases: ruler
> 
> ### ** Examples
> 
> ruler()
----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8
12345678901234567890123456789012345678901234567890123456789012345678901234567890
> 
> 
> 
> cleanEx()
> nameEx("style_hyperlink")
> ### * style_hyperlink
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: style_hyperlink
> ### Title: Terminal Hyperlinks
> ### Aliases: style_hyperlink ansi_has_hyperlink_support
> ###   ansi_hyperlink_types
> 
> ### ** Examples
> 
> cat("This is an", style_hyperlink("R", "https://r-project.org"), "link.\n")
This is an R link.
> ansi_has_hyperlink_support()
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("symbol")
> ### * symbol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: symbol
> ### Title: Various handy symbols to use in a command line UI
> ### Aliases: symbol list_symbols
> 
> ### ** Examples
> 
> cat(symbol$tick, " SUCCESS\n", symbol$cross, " FAILURE\n", sep = "")
✔ SUCCESS
✖ FAILURE
> 
> ## All symbols
> cat(paste(format(names(symbol), width = 20),
+   unlist(symbol)), sep = "\n")
tick                 ✔
cross                ✖
star                 ★
square               ▇
square_small         ◻
square_small_filled  ◼
circle               ◯
circle_filled        ◉
circle_dotted        ◌
circle_double        ◎
circle_circle        ⓞ
circle_cross         ⓧ
circle_pipe          Ⓘ
circle_question_mark ?⃝
bullet               •
dot                  ․
line                 ─
double_line          ═
ellipsis             …
continue             …
pointer              ❯
info                 ℹ
warning              ⚠
menu                 ☰
smiley               ☺
mustache             ෴
heart                ♥
arrow_up             ↑
arrow_down           ↓
arrow_left           ←
arrow_right          →
radio_on             ◉
radio_off            ◯
checkbox_on          ☒
checkbox_off         ☐
checkbox_circle_on   ⓧ
checkbox_circle_off  Ⓘ
fancy_question_mark  ❓
neq                  ≠
geq                  ≥
leq                  ≤
times                ×
upper_block_1        ▔
upper_block_4        ▀
lower_block_1        ▁
lower_block_2        ▂
lower_block_3        ▃
lower_block_4        ▄
lower_block_5        ▅
lower_block_6        ▆
lower_block_7        ▇
lower_block_8        █
full_block           █
sup_0                ⁰
sup_1                ¹
sup_2                ²
sup_3                ³
sup_4                ⁴
sup_5                ⁵
sup_6                ⁶
sup_7                ⁷
sup_8                ⁸
sup_9                ⁹
sup_minus            ⁻
sup_plus             ⁺
play                 ▶
stop                 ■
record               ●
figure_dash          ‒
en_dash              –
em_dash              —
dquote_left          “
dquote_right         ”
squote_left          ‘
squote_right         ’
> 
> 
> 
> cleanEx()
> nameEx("test_that_cli")
> ### * test_that_cli
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_that_cli
> ### Title: Test cli output with testthat
> ### Aliases: test_that_cli
> 
> ### ** Examples
> 
> # testthat cannot record or compare snapshots when you run these
> # examples interactively, so you might want to copy them into a test
> # file
> 
> # Default configurations
> cli::test_that_cli("success", {
+   testthat::local_edition(3)
+   testthat::expect_snapshot({
+     cli::cli_alert_success("wow")
+   })
+ })
Can't compare snapshot to reference when testing interactively.
i Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cli_alert_success("wow")
Message
  v wow
-- Skip: success [plain] -------------------------------------------------------
Reason: empty test

[1m[22m[1mCan't compare snapshot to reference when testing interactively.[22m
[36mi[39m Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cli_alert_success("wow")
Message
  [32mv[39m wow
-- Skip: success [ansi] --------------------------------------------------------
Reason: empty test

Can't compare snapshot to reference when testing interactively.
ℹ Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cli_alert_success("wow")
Message
  ✔ wow
-- Skip: success [unicode] -----------------------------------------------------
Reason: empty test

[1m[22m[1mCan't compare snapshot to reference when testing interactively.[22m
[36mℹ[39m Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cli_alert_success("wow")
Message
  [32m✔[39m wow
-- Skip: success [fancy] -------------------------------------------------------
Reason: empty test

[[1]]
[1] FALSE

[[2]]
[1] FALSE

[[3]]
[1] FALSE

[[4]]
[1] FALSE

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

> 
> # Only use two configurations, because this output does not have colors
> cli::test_that_cli(configs = c("plain", "unicode"), "cat_bullet", {
+   testthat::local_edition(3)
+   testthat::expect_snapshot({
+     cli::cat_bullet(letters[1:5])
+   })
+ })
Can't compare snapshot to reference when testing interactively.
i Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cat_bullet(letters[1:5])
Output
  * a
  * b
  * c
  * d
  * e
-- Skip: cat_bullet [plain] ----------------------------------------------------
Reason: empty test

Can't compare snapshot to reference when testing interactively.
ℹ Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  cli::cat_bullet(letters[1:5])
Output
  • a
  • b
  • c
  • d
  • e
-- Skip: cat_bullet [unicode] --------------------------------------------------
Reason: empty test

[[1]]
[1] FALSE

[[2]]
NULL

[[3]]
[1] FALSE

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

> 
> # You often need to evaluate all cli calls of a test case in the same
> # environment. Use `local()` to do that:
> cli::test_that_cli("theming", {
+   testthat::local_edition(3)
+   testthat::expect_snapshot(local({
+     cli::cli_div(theme = list(".alert" = list(before = "!!! ")))
+     cli::cli_alert("wow")
+   }))
+ })
Can't compare snapshot to reference when testing interactively.
i Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  local({
    cli::cli_div(theme = list(.alert = list(before = "!!! ")))
    cli::cli_alert("wow")
  })
Message
  !!! wow
-- Skip: theming [plain] -------------------------------------------------------
Reason: empty test

[1m[22m[1mCan't compare snapshot to reference when testing interactively.[22m
[36mi[39m Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  local({
    cli::cli_div(theme = list(.alert = list(before = "!!! ")))
    cli::cli_alert("wow")
  })
Message
  !!! wow
-- Skip: theming [ansi] --------------------------------------------------------
Reason: empty test

Can't compare snapshot to reference when testing interactively.
ℹ Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  local({
    cli::cli_div(theme = list(.alert = list(before = "!!! ")))
    cli::cli_alert("wow")
  })
Message
  !!! wow
-- Skip: theming [unicode] -----------------------------------------------------
Reason: empty test

[1m[22m[1mCan't compare snapshot to reference when testing interactively.[22m
[36mℹ[39m Run `devtools::test()` or `testthat::test_file()` to see changes.
Current value:
Code
  local({
    cli::cli_div(theme = list(.alert = list(before = "!!! ")))
    cli::cli_alert("wow")
  })
Message
  !!! wow
-- Skip: theming [fancy] -------------------------------------------------------
Reason: empty test

[[1]]
[1] FALSE

[[2]]
[1] FALSE

[[3]]
[1] FALSE

[[4]]
[1] FALSE

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

> 
> 
> 
> cleanEx()
> nameEx("utf8_graphemes")
> ### * utf8_graphemes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: utf8_graphemes
> ### Title: Break an UTF-8 character vector into grapheme clusters
> ### Aliases: utf8_graphemes
> 
> ### ** Examples
> 
> # Five grapheme clusters
> str <- paste0(
+   "\U0001f477\U0001f3ff\u200d\u2640\ufe0f",
+   "\U0001f477\U0001f3ff",
+   "\U0001f477\u200d\u2640\ufe0f",
+   "\U0001f477\U0001f3fb",
+   "\U0001f477\U0001f3ff")
> cat(str, "\n")
👷🏿‍♀️👷🏿👷‍♀️👷🏻👷🏿 
> chrs <- utf8_graphemes(str)
> 
> 
> 
> cleanEx()
> nameEx("utf8_nchar")
> ### * utf8_nchar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: utf8_nchar
> ### Title: Count the number of characters in a character vector
> ### Aliases: utf8_nchar
> 
> ### ** Examples
> 
> # Grapheme example, emoji with combining characters. This is a single
> # grapheme, consisting of five Unicode code points:
> # * `\U0001f477` is the construction worker emoji
> # * `\U0001f3fb` is emoji modifier that changes the skin color
> # * `\u200d` is the zero width joiner
> # * `\u2640` is the female sign
> # * `\ufe0f` is variation selector 16, requesting an emoji style glyph
> emo <- "\U0001f477\U0001f3fb\u200d\u2640\ufe0f"
> cat(emo)
👷🏻‍♀️> 
> utf8_nchar(emo, "chars") # = graphemes
[1] 1
> utf8_nchar(emo, "bytes")
[1] 17
> utf8_nchar(emo, "width")
[1] 2
> utf8_nchar(emo, "codepoints")
[1] 5
> 
> # For comparision, the output for width depends on the R version used:
> nchar(emo, "chars")
[1] 5
> nchar(emo, "bytes")
[1] 17
> nchar(emo, "width")
[1] 5
> 
> 
> 
> cleanEx()
> nameEx("utf8_substr")
> ### * utf8_substr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: utf8_substr
> ### Title: Substring of an UTF-8 string
> ### Aliases: utf8_substr
> 
> ### ** Examples
> 
> # Five grapheme clusters, select the middle three
> str <- paste0(
+   "\U0001f477\U0001f3ff\u200d\u2640\ufe0f",
+   "\U0001f477\U0001f3ff",
+   "\U0001f477\u200d\u2640\ufe0f",
+   "\U0001f477\U0001f3fb",
+   "\U0001f477\U0001f3ff")
> cat(str)
👷🏿‍♀️👷🏿👷‍♀️👷🏻👷🏿> str24 <- utf8_substr(str, 2, 4)
> cat(str24)
👷🏿👷‍♀️👷🏻> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.341 0.049 1.391 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
