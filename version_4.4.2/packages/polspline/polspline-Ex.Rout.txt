
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "polspline"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('polspline')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("beta.polyclass")
> ### * beta.polyclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: beta.polyclass
> ### Title: Polyclass: polychotomous regression and multiple classification
> ### Aliases: beta.polyclass
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(iris)
> fit.iris <- polyclass(iris[,5], iris[,1:4])
step half ouch...
step half ouch...
step half ouch...
step half ouch...
> beta.polyclass(fit.iris)
> 
> 
> 
> cleanEx()
> nameEx("clspec")
> ### * clspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clspec
> ### Title: Lspec: logspline estimation of a spectral distribution
> ### Aliases: clspec dlspec plspec rlspec
> ### Keywords: ts smooth
> 
> ### ** Examples
> 
> data(co2)
> co2.detrend <- lm(co2~c(1:length(co2)))$residuals
> fit <- lspec(co2.detrend)
> clspec(0:12,fit)
 [1]  6.7740484  6.0449205  4.2835383  2.1580552  0.3235132 -0.8406321
 [7] -1.2365536 -0.8699769  0.2598575  2.0581851  4.1462032  5.8521775
[13]  6.4977155
> plspec((0:314)/100, fit)
  [1] 3.387024 3.404149 4.470830 4.487145 4.502709 4.517339 4.530916 4.543352
  [9] 4.554617 4.564709 4.573664 4.581537 4.588407 4.594356 4.599476 4.603861
 [17] 4.607597 4.610771 4.613459 4.615733 4.617653 4.619276 4.620648 4.621811
 [25] 4.622798 4.623640 4.624361 4.624982 4.625520 4.625989 4.626402 4.626769
 [33] 4.627098 4.627396 4.627670 4.627924 4.628163 4.628391 4.628612 4.628831
 [41] 4.629049 4.629272 4.629505 4.629751 4.630018 4.630313 4.630648 4.631035
 [49] 4.631495 4.632056 4.632749 4.633600 4.634607 6.592240 6.593381 6.594476
 [57] 6.595485 6.596398 6.597223 6.597972 6.598654 6.599276 6.599845 6.600367
 [65] 6.600848 6.601292 6.601703 6.602084 6.602439 6.602770 6.603079 6.603369
 [73] 6.603642 6.603899 6.604141 6.604371 6.604589 6.604796 6.604994 6.605183
 [81] 6.605363 6.605537 6.605703 6.605864 6.606018 6.606168 6.606313 6.606454
 [89] 6.606591 6.606724 6.606854 6.606981 6.607105 6.607227 6.607347 6.607464
 [97] 6.607580 6.607695 6.607807 6.607919 6.608029 6.608139 6.608248 6.608355
[105] 6.608463 6.755869 6.755976 6.756082 6.756188 6.756294 6.756401 6.756507
[113] 6.756613 6.756720 6.756828 6.756935 6.757043 6.757152 6.757262 6.757372
[121] 6.757482 6.757594 6.757706 6.757820 6.757934 6.758049 6.758165 6.758282
[129] 6.758400 6.758519 6.758640 6.758761 6.758883 6.759006 6.759130 6.759256
[137] 6.759382 6.759509 6.759637 6.759766 6.759896 6.760026 6.760157 6.760289
[145] 6.760422 6.760554 6.760688 6.760821 6.760955 6.761089 6.761222 6.761356
[153] 6.761489 6.761622 6.761755 6.761887 6.762018 6.762149 6.762279 6.762408
[161] 6.762536 6.762663 6.762789 6.762914 6.763038 6.763161 6.763283 6.763403
[169] 6.763523 6.763641 6.763758 6.763873 6.763988 6.764101 6.764213 6.764324
[177] 6.764434 6.764543 6.764650 6.764757 6.764862 6.764967 6.765070 6.765172
[185] 6.765274 6.765374 6.765473 6.765572 6.765669 6.765766 6.765862 6.765957
[193] 6.766051 6.766144 6.766236 6.766327 6.766418 6.766508 6.766597 6.766685
[201] 6.766773 6.766860 6.766946 6.767031 6.767116 6.767200 6.767283 6.767366
[209] 6.767447 6.767529 6.767609 6.767689 6.767769 6.767848 6.767926 6.768004
[217] 6.768081 6.768157 6.768233 6.768309 6.768383 6.768458 6.768532 6.768605
[225] 6.768678 6.768750 6.768822 6.768894 6.768965 6.769035 6.769105 6.769175
[233] 6.769244 6.769313 6.769381 6.769449 6.769516 6.769584 6.769650 6.769717
[241] 6.769783 6.769848 6.769914 6.769979 6.770043 6.770107 6.770171 6.770235
[249] 6.770298 6.770361 6.770424 6.770486 6.770548 6.770610 6.770672 6.770733
[257] 6.770794 6.770854 6.770915 6.770975 6.771035 6.771095 6.771154 6.771213
[265] 6.771272 6.771331 6.771390 6.771448 6.771506 6.771564 6.771622 6.771680
[273] 6.771737 6.771794 6.771851 6.771908 6.771965 6.772021 6.772078 6.772134
[281] 6.772190 6.772246 6.772302 6.772357 6.772413 6.772468 6.772524 6.772579
[289] 6.772634 6.772689 6.772744 6.772798 6.772853 6.772908 6.772962 6.773016
[297] 6.773071 6.773125 6.773179 6.773233 6.773287 6.773341 6.773395 6.773449
[305] 6.773503 6.773557 6.773611 6.773664 6.773718 6.773772 6.773825 6.773879
[313] 6.773933 6.773986 6.774040
> dlspec((0:314)/100, fit)
$d
  [1] 1.717164412 1.703284170 1.662383569 1.597292095 1.512282983 1.412103909
  [7] 1.301590474 1.185346803 1.067503034 0.951556690 0.840294126 0.735780628
 [13] 0.639403458 0.551950933 0.473711656 0.404580574 0.344161740 0.291860959
 [19] 0.246964498 0.208702379 0.176296575 0.148995517 0.126096963 0.106961480
 [25] 0.091018731 0.077768549 0.066778447 0.057678900 0.050157424 0.043952170
 [31] 0.038845571 0.034658363 0.031244182 0.028484862 0.026286464 0.024576076
 [37] 0.023299388 0.022419056 0.021913927 0.021779225 0.022027907 0.022693520
 [43] 0.023835132 0.025545218 0.027961935 0.031288134 0.035820875 0.041997751
 [49] 0.050470598 0.062132532 0.076977179 0.093254252 0.107315175 0.114223062
 [55] 0.112740807 0.105580820 0.096024856 0.086737544 0.078569726 0.071385150
 [61] 0.065049889 0.059450130 0.054488911 0.050083429 0.046162795 0.042666180
 [67] 0.039541268 0.036742955 0.034232276 0.031975487 0.029943308 0.028110279
 [73] 0.026454209 0.024955725 0.023597875 0.022365799 0.021246445 0.020228328
 [79] 0.019301323 0.018456488 0.017685912 0.016982584 0.016340281 0.015753471
 [85] 0.015217225 0.014727149 0.014279316 0.013870215 0.013496697 0.013155941
 [91] 0.012845408 0.012562816 0.012306108 0.012073429 0.011863099 0.011673602
 [97] 0.011503562 0.011351728 0.011216965 0.011098238 0.010994601 0.010905189
[103] 0.010829209 0.010765931 0.010714683 0.010674841 0.010645826 0.010627100
[109] 0.010618155 0.010618515 0.010627730 0.010645368 0.010671018 0.010704282
[115] 0.010744774 0.010792115 0.010845932 0.010905858 0.010971522 0.011042554
[121] 0.011118580 0.011199221 0.011284088 0.011372784 0.011464902 0.011560022
[127] 0.011657709 0.011757515 0.011858975 0.011961608 0.012064916 0.012168384
[133] 0.012271477 0.012373646 0.012474321 0.012572918 0.012668835 0.012761456
[139] 0.012850151 0.012934279 0.013013190 0.013086223 0.013152715 0.013212000
[145] 0.013263413 0.013306295 0.013339993 0.013363869 0.013377300 0.013379686
[151] 0.013370615 0.013350416 0.013319632 0.013278828 0.013228586 0.013169502
[157] 0.013102181 0.013027235 0.012945279 0.012856925 0.012762785 0.012663464
[163] 0.012559559 0.012451656 0.012340331 0.012226145 0.012109644 0.011991359
[169] 0.011871804 0.011751474 0.011630849 0.011510389 0.011390536 0.011271715
[175] 0.011154332 0.011038770 0.010925209 0.010813624 0.010703976 0.010596230
[181] 0.010490351 0.010386305 0.010284057 0.010183576 0.010084828 0.009987783
[187] 0.009892409 0.009798676 0.009706556 0.009616019 0.009527037 0.009439582
[193] 0.009353627 0.009269146 0.009186114 0.009104504 0.009024292 0.008945454
[199] 0.008867966 0.008791805 0.008716948 0.008643373 0.008571058 0.008499982
[205] 0.008430124 0.008361464 0.008293981 0.008227657 0.008162472 0.008098407
[211] 0.008035444 0.007973565 0.007912753 0.007852990 0.007794260 0.007736546
[217] 0.007679833 0.007624103 0.007569342 0.007515535 0.007462668 0.007410724
[223] 0.007359691 0.007309555 0.007260301 0.007211918 0.007164391 0.007117708
[229] 0.007071856 0.007026824 0.006982600 0.006939171 0.006896526 0.006854655
[235] 0.006813546 0.006773189 0.006733573 0.006694688 0.006656524 0.006619071
[241] 0.006582320 0.006546261 0.006510885 0.006476183 0.006442146 0.006408767
[247] 0.006376035 0.006343944 0.006312485 0.006281651 0.006251434 0.006221825
[253] 0.006192819 0.006164408 0.006136585 0.006109343 0.006082675 0.006056576
[259] 0.006031038 0.006006056 0.005981624 0.005957735 0.005934384 0.005911565
[265] 0.005889274 0.005867504 0.005846250 0.005825508 0.005805272 0.005785538
[271] 0.005766301 0.005747557 0.005729301 0.005711529 0.005694237 0.005677420
[277] 0.005661075 0.005645199 0.005629786 0.005614835 0.005600340 0.005586300
[283] 0.005572711 0.005559569 0.005546872 0.005534616 0.005522800 0.005511419
[289] 0.005500473 0.005489957 0.005479870 0.005470210 0.005460974 0.005452160
[295] 0.005443767 0.005435791 0.005428233 0.005421088 0.005414358 0.005408038
[301] 0.005402129 0.005396629 0.005391537 0.005386851 0.005382570 0.005378694
[307] 0.005375222 0.005372153 0.005369485 0.005367220 0.005365355 0.005363891
[313] 0.005362827 0.005362164 0.005361900

$modfreq
  [1] 0.00000000 0.01342561 0.01342561 0.02685122 0.04027683 0.05370244
  [7] 0.05370244 0.06712805 0.08055366 0.09397927 0.09397927 0.10740488
 [13] 0.12083049 0.13425610 0.13425610 0.14768171 0.16110732 0.17453293
 [19] 0.17453293 0.18795853 0.20138414 0.21480975 0.21480975 0.22823536
 [25] 0.24166097 0.25508658 0.25508658 0.26851219 0.28193780 0.29536341
 [31] 0.29536341 0.30878902 0.32221463 0.33564024 0.33564024 0.34906585
 [37] 0.36249146 0.37591707 0.37591707 0.38934268 0.40276829 0.41619390
 [43] 0.41619390 0.42961951 0.44304512 0.45647073 0.45647073 0.46989634
 [49] 0.48332195 0.48332195 0.49674756 0.51017317 0.52359878 0.52359878
 [55] 0.53702439 0.55044999 0.56387560 0.56387560 0.57730121 0.59072682
 [61] 0.60415243 0.60415243 0.61757804 0.63100365 0.64442926 0.64442926
 [67] 0.65785487 0.67128048 0.68470609 0.68470609 0.69813170 0.71155731
 [73] 0.72498292 0.72498292 0.73840853 0.75183414 0.76525975 0.76525975
 [79] 0.77868536 0.79211097 0.80553658 0.80553658 0.81896219 0.83238780
 [85] 0.84581341 0.84581341 0.85923902 0.87266463 0.88609024 0.88609024
 [91] 0.89951585 0.91294145 0.92636706 0.92636706 0.93979267 0.95321828
 [97] 0.96664389 0.96664389 0.98006950 0.99349511 0.99349511 1.00692072
[103] 1.02034633 1.03377194 1.03377194 1.04719755 1.06062316 1.07404877
[109] 1.07404877 1.08747438 1.10089999 1.11432560 1.11432560 1.12775121
[115] 1.14117682 1.15460243 1.15460243 1.16802804 1.18145365 1.19487926
[121] 1.19487926 1.20830487 1.22173048 1.23515609 1.23515609 1.24858170
[127] 1.26200731 1.27543291 1.27543291 1.28885852 1.30228413 1.31570974
[133] 1.31570974 1.32913535 1.34256096 1.35598657 1.35598657 1.36941218
[139] 1.38283779 1.39626340 1.39626340 1.40968901 1.42311462 1.43654023
[145] 1.43654023 1.44996584 1.46339145 1.46339145 1.47681706 1.49024267
[151] 1.50366828 1.50366828 1.51709389 1.53051950 1.54394511 1.54394511
[157] 1.55737072 1.57079633 1.58422194 1.58422194 1.59764755 1.61107316
[163] 1.62449877 1.62449877 1.63792437 1.65134998 1.66477559 1.66477559
[169] 1.67820120 1.69162681 1.70505242 1.70505242 1.71847803 1.73190364
[175] 1.74532925 1.74532925 1.75875486 1.77218047 1.78560608 1.78560608
[181] 1.79903169 1.81245730 1.82588291 1.82588291 1.83930852 1.85273413
[187] 1.86615974 1.86615974 1.87958535 1.89301096 1.90643657 1.90643657
[193] 1.91986218 1.93328779 1.93328779 1.94671340 1.96013901 1.97356462
[199] 1.97356462 1.98699023 2.00041583 2.01384144 2.01384144 2.02726705
[205] 2.04069266 2.05411827 2.05411827 2.06754388 2.08096949 2.09439510
[211] 2.09439510 2.10782071 2.12124632 2.13467193 2.13467193 2.14809754
[217] 2.16152315 2.17494876 2.17494876 2.18837437 2.20179998 2.21522559
[223] 2.21522559 2.22865120 2.24207681 2.25550242 2.25550242 2.26892803
[229] 2.28235364 2.29577925 2.29577925 2.30920486 2.32263047 2.33605608
[235] 2.33605608 2.34948169 2.36290730 2.37633290 2.37633290 2.38975851
[241] 2.40318412 2.41660973 2.41660973 2.43003534 2.44346095 2.44346095
[247] 2.45688656 2.47031217 2.48373778 2.48373778 2.49716339 2.51058900
[253] 2.52401461 2.52401461 2.53744022 2.55086583 2.56429144 2.56429144
[259] 2.57771705 2.59114266 2.60456827 2.60456827 2.61799388 2.63141949
[265] 2.64484510 2.64484510 2.65827071 2.67169632 2.68512193 2.68512193
[271] 2.69854754 2.71197315 2.72539876 2.72539876 2.73882436 2.75224997
[277] 2.76567558 2.76567558 2.77910119 2.79252680 2.80595241 2.80595241
[283] 2.81937802 2.83280363 2.84622924 2.84622924 2.85965485 2.87308046
[289] 2.88650607 2.88650607 2.89993168 2.91335729 2.91335729 2.92678290
[295] 2.94020851 2.95363412 2.95363412 2.96705973 2.98048534 2.99391095
[301] 2.99391095 3.00733656 3.02076217 3.03418778 3.03418778 3.04761339
[307] 3.06103900 3.07446461 3.07446461 3.08789022 3.10131582 3.11474143
[313] 3.11474143 3.12816704 3.14159265

$m
  [1]        NA 1.0498298 1.0498298 0.0000000 0.0000000 0.0000000 0.0000000
  [8] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [15] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [22] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [29] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [36] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [43] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [50] 0.0000000 0.0000000 0.0000000 1.9565184 1.9565184 0.0000000 0.0000000
 [57] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [64] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [71] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [78] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [85] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [92] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
 [99] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[106] 0.1472991 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[113] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[120] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[127] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[134] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[141] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[148] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[155] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[162] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[169] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[176] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[183] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[190] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[197] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[204] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[211] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[218] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[225] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[232] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[239] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[246] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[253] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[260] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[267] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[274] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[281] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[288] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[295] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[302] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000
[309] 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000

> rlspec(length(co2),fit)
  [1] -2.05554769 -1.16563587 -0.76715161 -2.14159297 -4.14316371 -5.77734964
  [7] -6.30596956 -5.40709392 -3.75797630 -2.64621750 -2.36712527 -1.97763430
 [13] -2.28599696 -1.57197283 -1.74880016 -2.87797693 -4.38451683 -6.12443163
 [19] -6.42538520 -5.87483405 -3.96773548 -2.39335628 -2.51012561 -2.73062895
 [25] -2.08669679 -1.75972032 -1.25216162 -2.42627585 -4.88987681 -6.22954232
 [31] -6.39355113 -4.96696351 -2.89971597 -2.09199048 -1.75702000 -1.75285484
 [37] -2.09293002 -1.44665616 -1.44967130 -2.26572538 -4.17293367 -5.76887697
 [43] -6.02148166 -5.23899435 -4.16514900 -3.35636833 -3.02953552 -3.22087554
 [49] -3.21847535 -2.98882851 -2.76754258 -4.09753381 -6.06474741 -7.18436359
 [55] -7.62763242 -7.13283970 -5.01634904 -3.75666026 -3.40884552 -4.28768184
 [61] -4.01268026 -3.59350259 -3.44216315 -4.40878568 -5.96436056 -7.75276522
 [67] -7.37178360 -6.00921407 -4.62612007 -3.57796498 -3.22308130 -3.32687745
 [73] -3.37260566 -2.74119312 -2.61104970 -3.32014337 -5.01614750 -6.63523807
 [79] -6.50037521 -5.64325306 -4.05777649 -2.96305408 -3.09780863 -2.92303225
 [85] -2.91517859 -2.22152467 -1.86302411 -3.05297479 -4.38408686 -6.06840456
 [91] -6.12758816 -4.86576961 -3.16004037 -2.04329690 -1.83521821 -2.27754439
 [97] -2.27815359 -1.90137934 -1.29420667 -2.30276969 -3.81784134 -4.91335279
[103] -5.38497013 -4.83829375 -3.16941503 -2.67172482 -2.11071133 -2.84097393
[109] -2.34309706 -1.65280778 -0.78129426 -1.45857810 -3.31736820 -5.02563597
[115] -5.46249164 -4.45569029 -2.94403063 -1.70148529 -1.87223205 -2.15563971
[121] -1.99526056 -1.29749838 -0.97383050 -2.19759714 -3.71680243 -5.04277911
[127] -5.08923325 -4.09488777 -2.06707215 -0.96101376 -1.12926881 -1.59588604
[133] -1.11775262 -0.63870283  0.09502253 -0.64719362 -2.44569955 -3.80930141
[139] -4.19270158 -3.19884908 -1.14629820  0.01623589 -0.03951905 -0.70302089
[145] -0.42139881  0.84969973  0.96476535  0.23508994 -2.37312013 -3.67671170
[151] -3.64413525 -2.64937178 -1.05652805  0.11756760  0.31642429 -0.11780991
[157]  0.05493897  0.41337714  0.45311007 -0.49870747 -2.24943906 -3.90000444
[163] -4.02152343 -2.94731964 -1.16850376 -0.06698619 -0.48369958  0.21558001
[169] -0.06835032  0.70812454  1.58846213  0.92070301 -0.86699856 -2.49128249
[175] -2.79548512 -1.86720443 -0.08001487  0.64975976  1.19924896  1.12326716
[181]  1.15351775  2.47046152  2.79174681  1.91334157 -0.12128470 -1.69633587
[187] -2.01639316 -0.48560951  0.96854462  2.12302450  2.29576668  2.34410563
[193]  3.01117756  3.85667292  4.49243108  3.76510114  1.63146698  0.22609107
[199] -0.28482573  0.86484758  2.69559178  3.80358404  3.80621049  3.76070843
[205]  3.91437370  5.03595744  4.93718404  4.38003866  2.69460073  0.99872769
[211]  0.27783221  1.94437710  2.51395270  4.08697706  4.83221912  4.09927696
[217]  5.00146058  5.50488797  5.92437848  5.29577584  3.48688162  1.09580293
[223]  0.92276050  1.88014435  4.07893061  4.98896060  4.83213700  5.09176431
[229]  5.40796267  6.19274616  6.08106206  5.58993123  3.72108281  2.21245451
[235]  1.28912772  2.34229314  4.57997581  5.03850567  5.18891444  5.25411418
[241]  5.37287120  6.31125460  6.15014341  5.10404997  2.57932170  1.74162540
[247]  1.02129950  1.59179442  3.16054916  4.33827395  4.03525797  4.27652909
[253]  4.47833571  5.40561936  5.84269136  4.78125597  3.24349153  1.38302182
[259]  0.58168928  1.64102175  3.68744999  4.76128343  5.26385960  5.45834884
[265]  6.15177479  6.41505829  6.48863358  5.32356899  3.40012824  1.60730148
[271]  1.27717012  2.41141801  3.42671489  4.52472215  4.97532507  4.55538721
[277]  4.87150677  5.28118390  5.53893241  4.60097022  2.53744803  0.55093025
[283] -0.13283377  1.96905780  2.99923925  3.84923469  4.25605784  4.42474160
[289]  4.53321104  5.59056575  5.41175632  4.64320300  3.04577309  1.49685088
[295]  0.80949895  2.30491403  3.83371816  4.98997410  5.08648074  4.90129710
[301]  4.80565107  5.10528297  5.69743666  4.79651751  2.94738247  0.71551502
[307]  1.04069085  1.99278733  3.05467631  4.43038076  4.46064351  3.90961977
[313]  4.20252547  5.16847775  5.02212760  4.55369157  2.23169534  0.50124068
[319]  0.09808706  1.41947479  3.08493803  3.84527421  4.04563124  4.43385389
[325]  4.50303318  5.09471968  5.13246254  4.20048456  2.18352772  1.05287085
[331]  0.06978086  1.07996334  2.69221676  4.09837266  4.45452042  4.70531281
[337]  4.62988974  5.55038467  5.48688803  4.12567162  1.88773858  0.47356878
[343]  0.24683877  1.07654016  2.73393254  3.91884071  4.29763506  3.91257721
[349]  3.48225268  3.81778559  4.38823831  3.46025813  1.61649186 -0.30717308
[355] -1.45578240 -0.13908922  1.10205571  1.72157152  1.76756112  1.74316595
[361]  1.71439869  2.21019308  2.98295234  2.13972678 -0.40265680 -2.13093954
[367] -2.85051758 -1.49098132  0.05735579  0.89610006  0.90886567  1.06929629
[373]  1.50690782  2.10306871  2.74981116  1.77234298  0.14269391 -1.25696192
[379] -2.36410254 -1.25260087  0.34319615  1.34021338  1.57353692  1.53258191
[385]  1.77807638  1.97385104  2.09175709  1.30145361 -0.39192293 -2.14160103
[391] -2.14689473 -1.91980484 -0.23997843  0.47171555  0.98578999  0.39472376
[397]  0.85221739  1.45789500  1.96332257  0.55001148 -1.17798608 -3.45035066
[403] -3.23769880 -2.74953076 -1.32991814 -0.15441348 -0.33503155 -0.17279900
[409]  0.47194196  1.10220907  1.04673334  0.41580245 -1.95912269 -4.35703508
[415] -3.97528098 -3.75638344 -2.09960088 -0.73744176 -0.28510173 -0.01516999
[421] -0.20226682  0.14899861  0.23115973 -1.09596970 -2.53879316 -4.73078981
[427] -5.22110853 -3.42869320 -2.21248102 -1.45159833 -1.26591119 -1.80965773
[433] -1.92953231 -0.93637967 -0.53663316 -1.19682905 -2.49578228 -4.43338143
[439] -4.92051906 -3.96621054 -2.97285047 -2.40853059 -2.36065199 -2.37799902
[445] -2.25881542 -1.82253242 -1.11242362 -1.39595212 -3.34658635 -5.35232621
[451] -5.51723461 -5.13778602 -3.56566709 -2.64538407 -2.14757783 -2.48057456
[457] -2.12303527 -1.45777319 -1.23110928 -2.06013827 -4.22684571 -6.74531613
[463] -7.00306387 -5.61333466 -4.01625629 -3.29432875 -2.89024058 -3.06515840
> 
> 
> 
> cleanEx()
> nameEx("cpolyclass")
> ### * cpolyclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cpolyclass
> ### Title: Polyclass: polychotomous regression and multiple classification
> ### Aliases: cpolyclass ppolyclass rpolyclass
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(iris)
> fit.iris <- polyclass(iris[,5], iris[,1:4])
step half ouch...
step half ouch...
step half ouch...
step half ouch...
> class.iris <- cpolyclass(iris[,1:4], fit.iris)
> table(class.iris, iris[,5])
          
class.iris setosa versicolor virginica
         1     50          0         0
         2      0         47         3
         3      0          3        47
> prob.setosa <- ppolyclass(1, iris[,1:4], fit.iris)
> prob.correct <- ppolyclass(iris[,5], iris[,1:4], fit.iris) 
> rpolyclass(100, iris[64,1:4], fit.iris)
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> 
> 
> 
> cleanEx()
> nameEx("design.polymars")
> ### * design.polymars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: design.polymars
> ### Title: Polymars: multivariate adaptive polynomial spline regression
> ### Aliases: design.polymars
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(state)
> state.pm <- polymars(state.region, state.x77, knots = 15, classify = TRUE, gcv = 1)
> desmat <- design.polymars(state.pm, state.x77)
> # compute traditional summary of the fit for the first class
> summary(lm(((state.region=="Northeast")*1) ~ desmat -1))

Call:
lm(formula = ((state.region == "Northeast") * 1) ~ desmat - 1)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.48038 -0.15150 -0.03209  0.15423  0.61920 

Coefficients:
           Estimate Std. Error t value Pr(>|t|)    
desmat1  -1.126e+01  4.366e+00  -2.579 0.014016 *  
desmat2   2.856e-02  1.814e-02   1.574 0.124019    
desmat3   1.688e-02  2.078e-02   0.812 0.421796    
desmat4   9.753e-03  9.071e-03   1.075 0.289267    
desmat5   1.313e-01  6.662e-02   1.972 0.056167 .  
desmat6  -4.784e-01  1.599e-01  -2.992 0.004912 ** 
desmat7   5.156e-01  2.947e-01   1.749 0.088513 .  
desmat8  -7.859e-06  1.386e-06  -5.671 1.75e-06 ***
desmat9   7.083e-06  1.718e-06   4.124 0.000202 ***
desmat10 -8.877e-05  1.563e-04  -0.568 0.573379    
desmat11 -4.027e-05  3.176e-05  -1.268 0.212752    
desmat12  5.097e-05  2.429e-05   2.099 0.042741 *  
desmat13 -2.906e-01  4.068e-01  -0.714 0.479453    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.2528 on 37 degrees of freedom
Multiple R-squared:  0.7372,	Adjusted R-squared:  0.6449 
F-statistic: 7.984 on 13 and 37 DF,  p-value: 2.951e-07

> 
> 
> 
> cleanEx()
> nameEx("dhare")
> ### * dhare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dhare
> ### Title: Hare: hazard regression
> ### Aliases: dhare hhare phare qhare rhare
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit <- hare(testhare[,1], testhare[,2], testhare[,3:8])
> dhare(0:10, testhare[117,3:8], fit)
 [1] 0.002266272 0.152470629 0.287974746 0.129592312 0.059521788 0.029785596
 [7] 0.019564779 0.018506767 0.017505968 0.016559291 0.015663807
> hhare(0:10, testhare[1:11,3:8], fit)
 [1] 0.001552441 0.070309445 0.269493885 0.145167330 0.054224645 0.066780728
 [7] 0.046037322 0.070017965 0.040146964 0.021650719 0.093524484
> phare(10, testhare[1:25,3:8], fit)
 [1] 0.5123317 0.3576253 0.7043853 0.5752294 0.3917284 0.6544619 0.3770862
 [8] 0.4427595 0.4709139 0.2394673 0.7899024 0.3089936 0.2685960 0.8907437
[15] 0.5178234 0.7405306 0.8203810 0.5384936 0.6828870 0.3309411 0.4975142
[22] 0.2711855 0.6696873 0.4463595 0.4508892
> qhare((1:19)/20, testhare[117,3:8], fit)
 [1]  0.9111681  1.2177157  1.4661735  1.6823984  1.8757295  2.0522630
 [7]  2.2285926  2.4405426  2.7052796  3.0517090  3.5395492  4.3268016
[13]  6.0983534  8.8711194 12.1506055 16.1643721 21.3390173 28.6322700
[19] 41.1001679
> rhare(10, testhare[117,3:8], fit)
 [1]  1.932056  2.317089  3.844393 30.172758  1.689233 28.344924 39.279899
 [8]  6.662019  5.130468  0.995287
> 
> 
> 
> cleanEx()
> nameEx("dheft")
> ### * dheft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dheft
> ### Title: Heft: hazard estimation with flexible tails
> ### Aliases: dheft hheft pheft qheft rheft
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit <- heft(testhare[,1],testhare[,2])
> dheft(0:10,fit)
 [1] 0.00000000 0.11950647 0.13341915 0.08061400 0.04657502 0.03742625
 [7] 0.03376190 0.03045046 0.02745516 0.02479511 0.02245161
> hheft(0:10,fit)
 [1] 0.00000000 0.12882896 0.16789413 0.11758136 0.07449399 0.06406334
 [7] 0.06153308 0.05894438 0.05629845 0.05371861 0.05126222
> pheft(0:10,fit)
 [1] 0.00000000 0.07236336 0.20533766 0.31439809 0.37478149 0.41579301
 [7] 0.45132115 0.48340360 0.51232840 0.53842604 0.56202427
> qheft((1:19)/20,fit)
 [1]   0.8031157   1.2216211   1.5946163   1.9601486   2.3522512   2.8311603
 [7]   3.5203602   4.5900333   5.9750102   7.5837148   9.5526890  11.9731408
[13]  15.1415017  19.0423923  25.3238716  33.0818519  49.3013025  79.9747980
[19] 175.0957234
> rheft(10,fit)
 [1]   2.4875099   3.9436471  10.5267101  88.5843586   1.9726738  78.3688640
 [7] 155.9703421  15.8850430  13.7662233   0.9095447
> 
> 
> 
> cleanEx()
> nameEx("dlogspline")
> ### * dlogspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dlogspline
> ### Title: Logspline Density Estimation
> ### Aliases: dlogspline plogspline qlogspline rlogspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> x <- rnorm(100)
> fit <- logspline(x)
> qq <- qlogspline((1:99)/100, fit)
> plot(qnorm((1:99)/100), qq)                  # qq plot of the fitted density
> pp <- plogspline((-250:250)/100, fit)
> plot((-250:250)/100, pp, type = "l")
> lines((-250:250)/100,pnorm((-250:250)/100))  # asses the fit of the distribution
> dd <- dlogspline((-250:250)/100, fit)
> plot((-250:250)/100, dd, type = "l")
> lines((-250:250)/100, dnorm((-250:250)/100)) # asses the fit of the density
> rr <- rlogspline(100, fit)                   # random sample from fit
> 
> 
> 
> cleanEx()
> nameEx("doldlogspline")
> ### * doldlogspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: doldlogspline
> ### Title: Logspline Density Estimation - 1992 version
> ### Aliases: doldlogspline poldlogspline qoldlogspline roldlogspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> x <- rnorm(100)
> fit <- oldlogspline(x)
> qq <- qoldlogspline((1:99)/100, fit)
> plot(qnorm((1:99)/100), qq)                  # qq plot of the fitted density
> pp <- poldlogspline((-250:250)/100, fit)
> plot((-250:250)/100, pp, type = "l")
> lines((-250:250)/100, pnorm((-250:250)/100)) # asses the fit of the distribution
> dd <- doldlogspline((-250:250)/100, fit)
> plot((-250:250)/100, dd, type = "l")
> lines((-250:250)/100, dnorm((-250:250)/100)) # asses the fit of the density
> rr <- roldlogspline(100, fit)                # random sample from fit
> 
> 
> 
> cleanEx()
> nameEx("hare")
> ### * hare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hare
> ### Title: Hare: hazard regression
> ### Aliases: hare
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit <- hare(testhare[,1], testhare[,2], testhare[,3:8]) 
> 
> 
> 
> cleanEx()
> nameEx("heft")
> ### * heft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: heft
> ### Title: Heft: hazard estimation with flexible tails
> ### Aliases: heft
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit1 <- heft(testhare[,1], testhare[,2])
> # modify tail behavior
> fit2 <- heft(testhare[,1], testhare[,2], leftlog = FALSE, rightlog = FALSE, 
+           leftlin = TRUE)   
> fit3 <- heft(testhare[,1], testhare[,2], penalty = 0)   # select largest model
> 
> 
> 
> cleanEx()
> nameEx("logspline")
> ### * logspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logspline
> ### Title: Logspline Density Estimation
> ### Aliases: logspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> fit <- logspline(y)       
> plot(fit)
> #
> # as (4 == length(-2, -1, 0, 1, 2) -1), this forces these initial knots,
> # and does no knot selection
> fit <- logspline(y, knots = c(-2, -1, 0, 1, 2), maxknots = 4, penalty = 0)  
> #
> # the following example give one of the rare examples where logspline
> # crashes, and this shows the use of error.action = 2.
> #
> set.seed(118)
> zz <- rnorm(300)
> zz[151:300] <- zz[151:300]+5
> zz <- round(zz)
> fit <- logspline(zz)
Warning in logspline(zz) : too many knots beyond data
running with maximum degrees of freedom
Warning in logspline(zz) : re-ran with oldlogspline
> #
> # you could rerun this with 
> # fit <- logspline(zz, error.action=0)
> # or
> # fit <- logspline(zz, error.action=1)
> 
> 
> 
> cleanEx()
> nameEx("lspec")
> ### * lspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lspec
> ### Title: Lspec: logspline estimation of a spectral distribution
> ### Aliases: lspec
> ### Keywords: ts smooth
> 
> ### ** Examples
> 
> data(co2)
> co2.detrend <- unstrip(lm(co2~c(1:length(co2)))$residuals)
> fit <- lspec(co2.detrend)
> 
> 
> 
> cleanEx()
> nameEx("oldlogspline")
> ### * oldlogspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: oldlogspline
> ### Title: Logspline Density Estimation - 1992 version
> ### Aliases: oldlogspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> # A simple example
> y <- rnorm(100)
> fit <- oldlogspline(y)       
> plot(fit)
> # An example involving censoring and a lower bound
> y <- rlnorm(1000)
> censoring <- rexp(1000) * 4
> delta <- 1 * (y <= censoring)
> y[delta == 0] <- censoring[delta == 0]
> fit <- oldlogspline(y[delta == 1], y[delta == 0], lbound = 0)
> 
> 
> 
> cleanEx()
> nameEx("oldlogspline.to.logspline")
> ### * oldlogspline.to.logspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: oldlogspline.to.logspline
> ### Title: Logspline Density Estimation - 1992 to 1997 version
> ### Aliases: oldlogspline.to.logspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> x <- rnorm(100)
> fit.old <- oldlogspline(x)
> fit.translate <- oldlogspline.to.logspline(fit.old,x)
> fit.new <- logspline(x)
> plot(fit.new)
> plot(fit.old,add=TRUE,col=2)
> #
> # should look almost the same, the differences are the
> # different fitting routines
> #
> 
> 
> 
> cleanEx()
> nameEx("plot.hare")
> ### * plot.hare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.hare
> ### Title: Hare: hazard regression
> ### Aliases: plot.hare
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit <- hare(testhare[,1], testhare[,2], testhare[,3:8])       
> # hazard curve for covariates like case 1 
> plot(fit, testhare[1,3:8], what = "h") 
> # survival function as a function of covariate 2, for covariates as case 1 at t=3 
> plot(fit, testhare[1,3:8], which = 2, what = "s",  time = 3)  
> 
> 
> 
> cleanEx()
> nameEx("plot.heft")
> ### * plot.heft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.heft
> ### Title: Heft: hazard estimation with flexible tails
> ### Aliases: plot.heft
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit1 <- heft(testhare[,1], testhare[,2])
> plot(fit1, what = "h")
> # modify tail behavior
> fit2 <- heft(testhare[,1], testhare[,2], leftlog = FALSE, rightlog = FALSE, 
+     leftlin = TRUE)   
> plot(fit2, what = "h", add = TRUE,lty = 2)
> fit3 <- heft(testhare[,1], testhare[,2], penalty = 0)   # select largest model
> plot(fit3, what = "h", add = TRUE,lty = 3)
> 
> 
> 
> cleanEx()
> nameEx("plot.logspline")
> ### * plot.logspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.logspline
> ### Title: Logspline Density Estimation
> ### Aliases: plot.logspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> fit <- logspline(y)       
> plot(fit) 
> 
> 
> 
> cleanEx()
> nameEx("plot.lspec")
> ### * plot.lspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lspec
> ### Title: Lspec: logspline estimation of a spectral distribution
> ### Aliases: plot.lspec
> ### Keywords: ts smooth
> 
> ### ** Examples
> 
> data(co2)
> co2.detrend <- lm(co2~c(1:length(co2)))$residuals
> fit <- lspec(co2.detrend)
> plot(fit)
> 
> 
> 
> cleanEx()
> nameEx("plot.oldlogspline")
> ### * plot.oldlogspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.oldlogspline
> ### Title: Logspline Density Estimation - 1992 version
> ### Aliases: plot.oldlogspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> fit <- oldlogspline(y)       
> plot(fit) 
> 
> 
> 
> cleanEx()
> nameEx("plot.polyclass")
> ### * plot.polyclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.polyclass
> ### Title: Polyclass: polychotomous regression and multiple classification
> ### Aliases: plot.polyclass
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(iris)
> fit.iris <- polyclass(iris[,5], iris[,1:4])
step half ouch...
step half ouch...
step half ouch...
step half ouch...
> plot(fit.iris, iris[64,1:4], which=c(3,4), data=2, what=1) 
> plot(fit.iris,iris[64,1:4], which=c(3,4), what=5) 
> plot(fit.iris,iris[64,1:4], which=4, what=7) 
> 
> 
> 
> cleanEx()
> nameEx("plot.polymars")
> ### * plot.polymars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.polymars
> ### Title: Polymars: multivariate adaptive polynomial spline regression
> ### Aliases: plot.polymars
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(state)
> state.pm <- polymars(state.region, state.x77, knots = 15, classify = TRUE, gcv = 1)
> plot(state.pm, 3, 4)
> 
> 
> 
> cleanEx()
> nameEx("polyclass")
> ### * polyclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polyclass
> ### Title: Polyclass: polychotomous regression and multiple classification
> ### Aliases: polyclass
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(iris)
> fit.iris <- polyclass(iris[,5], iris[,1:4])
step half ouch...
step half ouch...
step half ouch...
step half ouch...
> 
> 
> 
> cleanEx()
> nameEx("polymars")
> ### * polymars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: polymars
> ### Title: Polymars: multivariate adaptive polynomial spline regression
> ### Aliases: polymars
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(state)
> state.pm <- polymars(state.region, state.x77, knots = 15, classify = TRUE)
> state.pm2 <- polymars(state.x77[, 2], state.x77[,-2], gcv = 2)
> plot(fitted(state.pm2), residuals(state.pm2))
> 
> 
> 
> cleanEx()
> nameEx("predict.polymars")
> ### * predict.polymars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.polymars
> ### Title: Polymars: multivariate adaptive polynomial spline regression
> ### Aliases: predict.polymars
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(state)
> state.pm <- polymars(state.region, state.x77, knots = 15, classify = TRUE, gcv = 1)
> table(predict(state.pm, x = state.x77, classify = TRUE), state.region)
               state.region
                Northeast South North Central West
  North Central         1     0            12    0
  Northeast             8     0             0    0
  South                 0    16             0    0
  West                  0     0             0   13
> 
> 
> 
> cleanEx()
> nameEx("summary.hare")
> ### * summary.hare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.hare
> ### Title: Hare: hazard regression
> ### Aliases: summary.hare print.hare
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit <- hare(testhare[,1], testhare[,2], testhare[,3:8]) 
> summary(fit) 
dim A/D   loglik       AIC        penalty 
                                min    max 
  1 Add  -3008.39   6024.39  159.71     Inf
  2 Add  -2928.54   5872.28   75.52  159.71
  3 Add  -2892.40   5807.61      NA      NA
  4 Add  -2853.02   5736.44   29.25   75.52
  5 Add  -2838.40   5714.80   28.65   29.25
  6 Add  -2825.40   5696.41      NA      NA
  7 Add  -2810.03   5673.26      NA      NA
  8 Add  -2795.43   5651.66   21.86   28.65
  9 Add  -2784.50   5637.41   17.77   21.86
 10 Add  -2775.72   5627.44      NA      NA
 11 Add  -2766.73   5617.07    9.48   17.77
 12 Add  -2763.38   5617.97      NA      NA
 13 Del  -2757.75   5614.31      NA      NA
 14 Del  -2756.19   5618.80      NA      NA
 15 Del  -2747.78   5609.57    9.37    9.48
 16 Del  -2743.09   5607.80    6.71    9.37
 17 Del  -2740.08   5609.38      NA      NA
 18 Del  -2736.38   5609.57    4.78    6.71
 19 Del  -2734.80   5614.01      NA      NA
 20 Del  -2731.85   5615.71      NA      NA
 21 Del  -2729.24   5618.09      NA      NA
 22 Del  -2726.82   5620.85    4.38    4.78
 23 Del  -2724.63   5624.08    4.15    4.38
 24 Del  -2722.55   5627.53    3.50    4.15
 25 Del  -2720.80   5631.63    2.20    3.50
 26 Del  -2719.70   5637.02    0.04    2.20
 27 Add  -2719.68   5644.58    0.00    0.04

the present optimal number of dimensions is 16.
penalty(AIC) was 7.60, the default (BIC), would have been 7.60.

  dim1           dim2           beta        SE         Wald
Constant                            -2.9       0.43   -6.71
Co-2  linear                        0.16      0.051    3.12
Time         1                      -1.1       0.37   -3.04
Time       5.6                     -0.46       0.14   -3.32
Time       2.1                       1.4        0.4    3.49
Co-3  linear                        0.03     0.0059    5.09
Co-6  linear                        0.49        0.1    4.76
Co-1  linear                      -0.094      0.087   -1.08
Time       2.1 Co-1  linear        -0.61       0.13   -4.87
Time       5.6 Co-2  linear        0.061      0.014    4.51
Co-2       4.5                     -0.29      0.068   -4.19
Time       5.6 Co-4  linear        0.011     0.0027    4.13
Co-4  linear                      -0.021     0.0077   -2.76
Time       2.1 Co-4  linear       -0.033     0.0076   -4.30
Co-4        62                     0.082       0.02    4.12
Time      0.35                      -6.6        2.1   -3.14
> 
> 
> 
> cleanEx()
> nameEx("summary.heft")
> ### * summary.heft
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.heft
> ### Title: Heft: hazard estimation with flexible tails
> ### Aliases: summary.heft print.heft
> ### Keywords: distribution smooth survival
> 
> ### ** Examples
> 
> fit1 <- heft(testhare[,1], testhare[,2])
> summary(fit1)
 knots A(0)/D(1)   loglik     AIC minimum penalty maximum penalty
     3         1 -2954.28 5931.37           82.52             Inf
     4         0 -2913.02 5856.45            2.73           82.52
     5         0 -2912.87 5863.75              NA              NA
     6         1 -2910.62 5866.85              NA              NA
     7         1 -2910.29 5873.79              NA              NA
     8         1 -2907.63 5876.06              NA              NA
     9         1 -2906.20 5880.80            2.40            2.73
    10         1 -2905.33 5886.67              NA              NA
    11         1 -2904.19 5891.98              NA              NA
    12         1 -2902.59 5896.39            2.34            2.40
    13         1 -2901.42 5901.66            0.67            2.34
    14         1 -2901.09 5908.59            0.61            0.67
    15         1 -2900.78 5915.58            0.30            0.61
    16         1 -2900.63 5922.88            0.02            0.30
    17         0 -2900.63 5930.47            0.00            0.02
the present optimal number of knots is  4 
penalty(AIC) was the default: BIC=log(samplesize): log( 2000 )= 7.6 
           theta   SE     t
left tail   1.01 0.09 11.01
right tail -1.00   NA    NA
> # modify tail behavior
> fit2 <- heft(testhare[,1], testhare[,2], leftlog = FALSE, rightlog = FALSE, 
+     leftlin = TRUE)   
> summary(fit2)
 knots A(0)/D(1)   loglik     AIC minimum penalty maximum penalty
     2         0 -3008.39 6024.39           86.12             Inf
     3         0 -2995.90 6007.00              NA              NA
     4         1 -2922.28 5867.36           13.67           86.12
     5         0 -2915.45 5861.29            4.55           13.67
     6         1 -2913.17 5864.34            4.55            4.55
     7         0 -2912.23 5870.07              NA              NA
     8         1 -2908.62 5870.45            3.23            4.55
     9         1 -2908.28 5877.37              NA              NA
    10         1 -2905.39 5879.18            3.04            3.23
    11         1 -2904.13 5884.26              NA              NA
    12         1 -2902.35 5888.30            1.94            3.04
    13         1 -2901.88 5894.97              NA              NA
    14         1 -2900.41 5899.63            1.25            1.94
    15         1 -2899.96 5906.33              NA              NA
    16         1 -2899.89 5913.80              NA              NA
    17         1 -2899.36 5920.32              NA              NA
    18         1 -2897.90 5925.02            0.85            1.25
    19         1 -2897.47 5931.77            0.23            0.85
    20         1 -2897.36 5939.14            0.03            0.23
    21         1 -2897.35 5946.71              NA              NA
    22         1 -2897.33 5954.27            0.02            0.03
    23         0 -2897.32 5961.85            0.00            0.02
the present optimal number of knots is  5 
penalty(AIC) was the default: BIC=log(samplesize): log( 2000 )= 7.6 
           theta SE  t
left tail      0 NA NA
right tail     0 NA NA
> fit3 <- heft(testhare[,1], testhare[,2], penalty = 0)   # select largest model
> summary(fit3)
 knots A(0)/D(1)   loglik     AIC minimum penalty maximum penalty
     3         0 -2954.28 5908.56           82.52             Inf
     4         0 -2913.02 5826.05            2.48           82.52
     5         0 -2912.87 5825.75              NA              NA
     6         0 -2912.36 5824.72              NA              NA
     7         0 -2911.57 5823.14              NA              NA
     8         0 -2909.73 5819.46              NA              NA
     9         0 -2907.57 5815.14              NA              NA
    10         0 -2906.92 5813.84              NA              NA
    11         0 -2904.50 5809.00              NA              NA
    12         0 -2903.10 5806.20            1.84            2.48
    13         0 -2902.18 5804.35            1.10            1.84
    14         0 -2901.63 5803.25            0.78            1.10
    15         0 -2901.24 5802.47            0.61            0.78
    16         0 -2900.95 5801.90              NA              NA
    17         0 -2900.63 5801.25            0.00            0.61
the present optimal number of knots is  17 
penalty(AIC) was  0 , the default (BIC)  would have been 7.6 
models with fewer than 3 knots can be fitted, but they are not optimal for the
present choice of penalty - choose penalty in heft larger to see these fits
           theta   SE    t
left tail   0.81 0.50 1.63
right tail -0.99 0.55 1.80
> 
> 
> 
> cleanEx()
> nameEx("summary.logspline")
> ### * summary.logspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.logspline
> ### Title: Logspline Density Estimation
> ### Aliases: summary.logspline print.logspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> fit <- logspline(y)       
> summary(fit) 
 knots A(1)/D(2)  loglik    AIC minimum penalty maximum penalty
     3         2 -132.83 274.87            2.11             Inf
     4         2 -132.63 279.08              NA              NA
     5         2 -130.72 279.85            1.21            2.11
     6         2 -130.54 284.11              NA              NA
     7         2 -129.68 286.99              NA              NA
     8         2 -129.58 291.40              NA              NA
     9         2 -128.30 293.44            0.47            1.21
    10         2 -128.25 297.94              NA              NA
    11         2 -127.82 301.70            0.06            0.47
    12         1 -127.80 306.25            0.00            0.06
the present optimal number of knots is  3 
penalty(AIC) was the default: BIC=log(samplesize): log( 100 )= 4.61 
> 
> 
> 
> cleanEx()
> nameEx("summary.lspec")
> ### * summary.lspec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lspec
> ### Title: Lspec: logspline estimation of a spectral distribution
> ### Aliases: summary.lspec print.lspec
> ### Keywords: ts smooth
> 
> ### ** Examples
> 
> data(co2)
> co2.detrend <- lm(co2~c(1:length(co2)))$residuals
> fit <- lspec(co2.detrend)
> summary(fit)
 Logspline Spectral Estimation
 =============================
 The fit was obtained by the command:
 lspec(data = co2.detrend)
 A spline with 6 knots, was fitted; there were also 3 lines in the model.
 The log-likelihood of the model was 722.75 which corresponds to an AIC
 value of -1396.4 .

 The program went though 2 updown cycles, and reached a stable solution.
 Both penalty (AIC) and minmass were the default values. For penalty this
 was log(n)=log( 234 )= 5.46  (as in BIC) and for minmass this was 0.1086 .
 The locations of the knots were: 0.013 0.483 0.524 0.564 1.49 1.745 
 The locations and the mass in each line were:
 angular frequency period    mass % of total mass
             0.013    468 1.04983           15.50
             0.524     12 1.95652           28.88
             1.047      6 0.14730            2.17
> 
> 
> 
> cleanEx()
> nameEx("summary.oldlogspline")
> ### * summary.oldlogspline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.oldlogspline
> ### Title: Logspline Density Estimation - 1992 version
> ### Aliases: summary.oldlogspline print.oldlogspline
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> y <- rnorm(100)
> fit <- oldlogspline(y)       
> summary(fit) 
 knots  loglik    AIC minimum penalty maximum penalty
     3 -130.97 275.76            0.37             Inf
     4 -130.97 280.35              NA              NA
     5 -130.70 284.43              NA              NA
     6 -130.51 288.65              NA              NA
     7 -130.23 292.69            0.31            0.37
     8 -130.14 297.12              NA              NA
     9 -129.92 301.28            0.03            0.31
    10 -129.90 305.86            0.01            0.03
    11 -129.90 310.45            0.00            0.01
the present optimal number of knots is  3 
penalty(AIC) was the default: BIC=log(samplesize): log( 100 )= 4.61 
> 
> 
> 
> cleanEx()
> nameEx("summary.polyclass")
> ### * summary.polyclass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.polyclass
> ### Title: Polyclass: polychotomous regression and multiple classification
> ### Aliases: summary.polyclass print.polyclass
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(iris)
> fit.iris <- polyclass(iris[,5], iris[,1:4])
step half ouch...
step half ouch...
step half ouch...
step half ouch...
> summary(fit.iris)
========================POLYCLASS summary=======================
The fit was obtained with
  polyclass(data = iris[, 5], cov = iris[, 1:4])
There were 3 classes and 4 covariates.
There were 150 cases.

The model selection was carried out using AIC.
The penalty was the default, log(150 )=5.01 .
The model had dimension 6 , log-likelihood -10.28 and AIC -50.63 .

The locations of the knots:
  Number
1      0
2      0
3      0
4      0

  There are 3 basis functions, summarized below:
  dim1 knot1 dim2 knot2 Class 1 Class 2 Class 3
1   NA    NA   NA    NA 109.970  45.275       0
2    3    NA   NA    NA -32.075  -5.755       0
3    4    NA   NA    NA -11.009 -10.448       0
The first basis function is the constant function. For all others,
the first column and the third column indicate on which covariates
that basis function depends. If the third column is NA, the basis
function depends on only one covariate.
For the nonconstant basis functions the second and the fourth column
indicate on which knot the function depend. If these columns are NA,
the basis function is linear in this covariate.
The remaining columns give the coefficients.

================================================================
The influence of the penalty parameter is summarized below:
 dim     AIC l-lik-trn loss-trn sq-err-trn A/D pen-min pen-max
   2 339.605    -1.099    0.667      0.444   1 148.081     Inf
   4  53.463    -0.111    0.040      0.033   0   6.429 148.081
   6  50.627    -0.069    0.040      0.023   1   3.649   6.429
   8  53.351    -0.044    0.020      0.015   1   1.658   3.649
  10  62.005    -0.040    0.013      0.013   0      NA      NA
  12  70.222    -0.034    0.013      0.011   0      NA      NA
  14  80.243    -0.034    0.013      0.011   0      NA      NA
  16  80.170     0.000    0.000      0.000   0   0.000   1.658
  18  90.192     0.000    0.000      0.000   0      NA      NA
  20 100.213     0.000    0.000      0.000   0      NA      NA
  22 110.316     0.000    0.000      0.000   0      NA      NA
  24 120.255     0.000    0.000      0.000   0   0.000   0.000
  26 130.277     0.000    0.000      0.000   0      NA      NA
  28 140.298     0.000    0.000      0.000   0      NA      NA
  30 150.319     0.000    0.000      0.000   1      NA      NA
  32 160.340     0.000    0.000      0.000   0   0.000   0.000
  34 170.362     0.000    0.000      0.000   0      NA      NA
  36 180.383     0.000    0.000      0.000   0      NA      NA
  38 190.404     0.000    0.000      0.000   0      NA   0.000
  40 200.425     0.000    0.000      0.000   0      NA      NA
  42 210.447     0.000    0.000      0.000   0      NA      NA
  44 220.468     0.000    0.000      0.000   1   0.000      NA
================================================================
The importance-anova decomposition is:
 Cov-1 Cov-2 Percentage
    NA    NA      25.51
     3    NA      72.71
     4    NA       1.78
================================================================
> 
> 
> 
> cleanEx()
> nameEx("summary.polymars")
> ### * summary.polymars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.polymars
> ### Title: Polymars: multivariate adaptive polynomial spline regression
> ### Aliases: summary.polymars print.polymars
> ### Keywords: smooth nonlinear
> 
> ### ** Examples
> 
> data(state)
> state.pm <- polymars(state.region, state.x77, knots = 15, classify = TRUE)
> summary(state.pm)
Call:
polymars(responses = state.region, predictors = state.x77, knots = 15, 
    classify = TRUE)

Model fitting

   0/1 size     RSS 1    RSS 2    RSS 3    RSS 4         GCV
1    1    1 10.880000 9.620000 7.380000 9.120000   0.8742911
2    1    2  4.728607 5.439872 7.361317 9.030611   0.7528460
3    1    3  4.249251 3.407904 6.639464 7.422262   0.7520388
4    1    4  3.643535 3.033199 6.353973 6.689362   0.8529441
5    1    5  3.396585 2.818353 6.341048 5.972349   1.0293520
6    1    6  3.391316 2.752116 5.949608 5.315560   1.2876184
7    1    7  3.332588 2.593224 5.525557 4.663557   1.6647652
8    1    8  3.312567 2.591668 4.520665 3.852843   2.2033552
9    1    9  3.262781 1.867988 3.022214 3.496976   2.9719283
10   1   10  2.740424 1.333166 3.021035 3.495135   5.2948804
11   1   11  2.542810 1.112874 2.650159 3.402174  13.4833582
12   1   12  2.377489 1.105779 2.397724 2.721891 107.5360370
13   1   13  1.924453 1.101098 2.365098 1.871584  99.0000000
14   0   12  2.285647 1.495495 2.385731 1.900707  99.0000000
15   0   11  2.581900 1.546766 2.434914 2.885754  99.0000000
16   0   10  3.008675 1.703315 2.650459 3.406872 134.6165178
17   0    9  3.262781 1.867988 3.022214 3.496976  16.1804983
18   0    8  3.880536 1.874898 3.854869 3.498859   6.5545812
19   0    7  3.883019 2.007287 4.570340 5.085272   3.9657952
20   0    6  4.045564 2.096548 4.574305 5.670350   2.5288220
21   0    5  4.191242 2.568143 4.589619 7.091592   1.9050203
22   0    4  4.211419 3.330597 6.233355 7.395129   1.5658654
23   0    3  4.249251 3.407904 6.639464 7.422262   1.2066045
24   0    2  4.728607 5.439872 7.361317 9.030611   1.1488066
25   0    1 10.880000 9.620000 7.380000 9.120000   1.2811634


Model produced

  pred1 knot1 pred2 knot2     Coefs 1       Coefs 2     Coefs 3     Coefs 4
1     0    NA     0    NA  3.47651598  0.0418565968 -0.96302069 -1.55535189
2     6    NA     0    NA -0.06191473 -0.0009962812  0.02456459  0.03834643
3     6  53.3     0    NA  0.04230451  0.0870995844 -0.05191371 -0.07749038
         SE 1        SE 2       SE 3       SE 4
1 0.458820454 0.410894414 0.57352596 0.60639375
2 0.009471801 0.008482425 0.01183976 0.01251828
3 0.018372360 0.016453277 0.02296547 0.02428158

RESPONSES : 4 

Rsquared : 0.609 0.646 0.1 0.186 
> 
> 
> 
> cleanEx()
> nameEx("testhare")
> ### * testhare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: testhare
> ### Title: Fake survival data for Hare and Heft
> ### Aliases: testhare
> ### Keywords: survival datasets
> 
> ### ** Examples
> 
> harefit <- hare(testhare[,1], testhare[,2], testhare[,3:8]) 
> heftfit <- heft(testhare[,1], testhare[,2])
> 
> 
> 
> cleanEx()
> nameEx("unstrip")
> ### * unstrip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unstrip
> ### Title: Reformat data as vector or matrix
> ### Aliases: unstrip
> ### Keywords: utilities classes
> 
> ### ** Examples
> 
> data(co2)
> unstrip(co2)
  [1] 315.42 316.31 316.50 317.56 318.13 318.00 316.39 314.65 313.68 313.18
 [11] 314.66 315.43 316.27 316.81 317.42 318.87 319.87 319.43 318.01 315.74
 [21] 314.00 313.68 314.84 316.03 316.73 317.54 318.38 319.31 320.42 319.61
 [31] 318.42 316.63 314.83 315.16 315.94 316.85 317.78 318.40 319.53 320.42
 [41] 320.85 320.45 319.45 317.25 316.11 315.27 316.53 317.53 318.58 318.92
 [51] 319.70 321.22 322.08 321.31 319.58 317.61 316.05 315.83 316.91 318.20
 [61] 319.41 320.07 320.74 321.40 322.06 321.73 320.27 318.54 316.54 316.71
 [71] 317.53 318.55 319.27 320.28 320.73 321.97 322.00 321.71 321.05 318.71
 [81] 317.66 317.14 318.70 319.25 320.46 321.43 322.23 323.54 323.91 323.59
 [91] 322.24 320.20 318.48 317.94 319.63 320.87 322.17 322.34 322.88 324.25
[101] 324.83 323.93 322.38 320.76 319.10 319.24 320.56 321.80 322.40 322.99
[111] 323.73 324.86 325.40 325.20 323.98 321.95 320.18 320.09 321.16 322.74
[121] 323.83 324.26 325.47 326.50 327.21 326.54 325.72 323.50 322.22 321.62
[131] 322.69 323.95 324.89 325.82 326.77 327.97 327.91 327.50 326.18 324.53
[141] 322.93 322.90 323.85 324.96 326.01 326.51 327.01 327.62 328.76 328.40
[151] 327.20 325.27 323.20 323.40 324.63 325.85 326.60 327.47 327.58 329.56
[161] 329.90 328.92 327.88 326.16 324.68 325.04 326.34 327.39 328.37 329.40
[171] 330.14 331.33 332.31 331.90 330.70 329.15 327.35 327.02 327.99 328.48
[181] 329.18 330.55 331.32 332.48 332.92 332.08 331.01 329.23 327.27 327.21
[191] 328.29 329.41 330.23 331.25 331.87 333.14 333.80 333.43 331.73 329.90
[201] 328.40 328.17 329.32 330.59 331.58 332.39 333.33 334.41 334.71 334.17
[211] 332.89 330.77 329.14 328.78 330.14 331.52 332.75 333.24 334.53 335.90
[221] 336.57 336.10 334.76 332.59 331.42 330.98 332.24 333.68 334.80 335.22
[231] 336.47 337.59 337.84 337.72 336.37 334.51 332.60 332.38 333.75 334.78
[241] 336.05 336.59 337.79 338.71 339.30 339.12 337.56 335.92 333.75 333.70
[251] 335.12 336.56 337.84 338.19 339.91 340.60 341.29 341.00 339.39 337.43
[261] 335.72 335.84 336.93 338.04 339.06 340.30 341.21 342.33 342.74 342.08
[271] 340.32 338.26 336.52 336.68 338.19 339.44 340.57 341.44 342.53 343.39
[281] 343.96 343.18 341.88 339.65 337.81 337.69 339.09 340.32 341.20 342.35
[291] 342.93 344.77 345.58 345.14 343.81 342.21 339.69 339.82 340.98 342.82
[301] 343.52 344.33 345.11 346.88 347.25 346.62 345.22 343.11 340.90 341.18
[311] 342.80 344.04 344.79 345.82 347.25 348.17 348.74 348.07 346.38 344.51
[321] 342.92 342.62 344.06 345.38 346.11 346.78 347.68 349.37 350.03 349.37
[331] 347.76 345.73 344.68 343.99 345.48 346.72 347.84 348.29 349.23 350.80
[341] 351.66 351.07 349.33 347.92 346.27 346.18 347.64 348.78 350.25 351.54
[351] 352.05 353.41 354.04 353.62 352.22 350.27 348.55 348.72 349.91 351.18
[361] 352.60 352.92 353.53 355.26 355.52 354.97 353.75 351.52 349.64 349.83
[371] 351.14 352.37 353.50 354.55 355.23 356.04 357.00 356.07 354.67 352.76
[381] 350.82 351.04 352.69 354.07 354.59 355.63 357.03 358.48 359.22 358.12
[391] 356.06 353.92 352.05 352.11 353.64 354.89 355.88 356.63 357.72 359.07
[401] 359.58 359.17 356.94 354.92 352.94 353.23 354.09 355.33 356.63 357.10
[411] 358.32 359.41 360.23 359.55 357.53 355.48 353.67 353.95 355.30 356.78
[421] 358.34 358.89 359.95 361.25 361.67 360.94 359.55 357.49 355.84 356.00
[431] 357.59 359.05 359.98 361.03 361.66 363.48 363.82 363.30 361.94 359.50
[441] 358.11 357.80 359.61 360.74 362.09 363.29 364.06 364.76 365.45 365.01
[451] 363.70 361.54 359.51 359.65 360.80 362.38 363.23 364.06 364.61 366.40
[461] 366.84 365.68 364.52 362.57 360.24 360.83 362.49 364.34
> data(iris)
> unstrip(iris)
       [,1] [,2] [,3] [,4] [,5]
  [1,]  5.1  3.5  1.4  0.2    1
  [2,]  4.9  3.0  1.4  0.2    1
  [3,]  4.7  3.2  1.3  0.2    1
  [4,]  4.6  3.1  1.5  0.2    1
  [5,]  5.0  3.6  1.4  0.2    1
  [6,]  5.4  3.9  1.7  0.4    1
  [7,]  4.6  3.4  1.4  0.3    1
  [8,]  5.0  3.4  1.5  0.2    1
  [9,]  4.4  2.9  1.4  0.2    1
 [10,]  4.9  3.1  1.5  0.1    1
 [11,]  5.4  3.7  1.5  0.2    1
 [12,]  4.8  3.4  1.6  0.2    1
 [13,]  4.8  3.0  1.4  0.1    1
 [14,]  4.3  3.0  1.1  0.1    1
 [15,]  5.8  4.0  1.2  0.2    1
 [16,]  5.7  4.4  1.5  0.4    1
 [17,]  5.4  3.9  1.3  0.4    1
 [18,]  5.1  3.5  1.4  0.3    1
 [19,]  5.7  3.8  1.7  0.3    1
 [20,]  5.1  3.8  1.5  0.3    1
 [21,]  5.4  3.4  1.7  0.2    1
 [22,]  5.1  3.7  1.5  0.4    1
 [23,]  4.6  3.6  1.0  0.2    1
 [24,]  5.1  3.3  1.7  0.5    1
 [25,]  4.8  3.4  1.9  0.2    1
 [26,]  5.0  3.0  1.6  0.2    1
 [27,]  5.0  3.4  1.6  0.4    1
 [28,]  5.2  3.5  1.5  0.2    1
 [29,]  5.2  3.4  1.4  0.2    1
 [30,]  4.7  3.2  1.6  0.2    1
 [31,]  4.8  3.1  1.6  0.2    1
 [32,]  5.4  3.4  1.5  0.4    1
 [33,]  5.2  4.1  1.5  0.1    1
 [34,]  5.5  4.2  1.4  0.2    1
 [35,]  4.9  3.1  1.5  0.2    1
 [36,]  5.0  3.2  1.2  0.2    1
 [37,]  5.5  3.5  1.3  0.2    1
 [38,]  4.9  3.6  1.4  0.1    1
 [39,]  4.4  3.0  1.3  0.2    1
 [40,]  5.1  3.4  1.5  0.2    1
 [41,]  5.0  3.5  1.3  0.3    1
 [42,]  4.5  2.3  1.3  0.3    1
 [43,]  4.4  3.2  1.3  0.2    1
 [44,]  5.0  3.5  1.6  0.6    1
 [45,]  5.1  3.8  1.9  0.4    1
 [46,]  4.8  3.0  1.4  0.3    1
 [47,]  5.1  3.8  1.6  0.2    1
 [48,]  4.6  3.2  1.4  0.2    1
 [49,]  5.3  3.7  1.5  0.2    1
 [50,]  5.0  3.3  1.4  0.2    1
 [51,]  7.0  3.2  4.7  1.4    2
 [52,]  6.4  3.2  4.5  1.5    2
 [53,]  6.9  3.1  4.9  1.5    2
 [54,]  5.5  2.3  4.0  1.3    2
 [55,]  6.5  2.8  4.6  1.5    2
 [56,]  5.7  2.8  4.5  1.3    2
 [57,]  6.3  3.3  4.7  1.6    2
 [58,]  4.9  2.4  3.3  1.0    2
 [59,]  6.6  2.9  4.6  1.3    2
 [60,]  5.2  2.7  3.9  1.4    2
 [61,]  5.0  2.0  3.5  1.0    2
 [62,]  5.9  3.0  4.2  1.5    2
 [63,]  6.0  2.2  4.0  1.0    2
 [64,]  6.1  2.9  4.7  1.4    2
 [65,]  5.6  2.9  3.6  1.3    2
 [66,]  6.7  3.1  4.4  1.4    2
 [67,]  5.6  3.0  4.5  1.5    2
 [68,]  5.8  2.7  4.1  1.0    2
 [69,]  6.2  2.2  4.5  1.5    2
 [70,]  5.6  2.5  3.9  1.1    2
 [71,]  5.9  3.2  4.8  1.8    2
 [72,]  6.1  2.8  4.0  1.3    2
 [73,]  6.3  2.5  4.9  1.5    2
 [74,]  6.1  2.8  4.7  1.2    2
 [75,]  6.4  2.9  4.3  1.3    2
 [76,]  6.6  3.0  4.4  1.4    2
 [77,]  6.8  2.8  4.8  1.4    2
 [78,]  6.7  3.0  5.0  1.7    2
 [79,]  6.0  2.9  4.5  1.5    2
 [80,]  5.7  2.6  3.5  1.0    2
 [81,]  5.5  2.4  3.8  1.1    2
 [82,]  5.5  2.4  3.7  1.0    2
 [83,]  5.8  2.7  3.9  1.2    2
 [84,]  6.0  2.7  5.1  1.6    2
 [85,]  5.4  3.0  4.5  1.5    2
 [86,]  6.0  3.4  4.5  1.6    2
 [87,]  6.7  3.1  4.7  1.5    2
 [88,]  6.3  2.3  4.4  1.3    2
 [89,]  5.6  3.0  4.1  1.3    2
 [90,]  5.5  2.5  4.0  1.3    2
 [91,]  5.5  2.6  4.4  1.2    2
 [92,]  6.1  3.0  4.6  1.4    2
 [93,]  5.8  2.6  4.0  1.2    2
 [94,]  5.0  2.3  3.3  1.0    2
 [95,]  5.6  2.7  4.2  1.3    2
 [96,]  5.7  3.0  4.2  1.2    2
 [97,]  5.7  2.9  4.2  1.3    2
 [98,]  6.2  2.9  4.3  1.3    2
 [99,]  5.1  2.5  3.0  1.1    2
[100,]  5.7  2.8  4.1  1.3    2
[101,]  6.3  3.3  6.0  2.5    3
[102,]  5.8  2.7  5.1  1.9    3
[103,]  7.1  3.0  5.9  2.1    3
[104,]  6.3  2.9  5.6  1.8    3
[105,]  6.5  3.0  5.8  2.2    3
[106,]  7.6  3.0  6.6  2.1    3
[107,]  4.9  2.5  4.5  1.7    3
[108,]  7.3  2.9  6.3  1.8    3
[109,]  6.7  2.5  5.8  1.8    3
[110,]  7.2  3.6  6.1  2.5    3
[111,]  6.5  3.2  5.1  2.0    3
[112,]  6.4  2.7  5.3  1.9    3
[113,]  6.8  3.0  5.5  2.1    3
[114,]  5.7  2.5  5.0  2.0    3
[115,]  5.8  2.8  5.1  2.4    3
[116,]  6.4  3.2  5.3  2.3    3
[117,]  6.5  3.0  5.5  1.8    3
[118,]  7.7  3.8  6.7  2.2    3
[119,]  7.7  2.6  6.9  2.3    3
[120,]  6.0  2.2  5.0  1.5    3
[121,]  6.9  3.2  5.7  2.3    3
[122,]  5.6  2.8  4.9  2.0    3
[123,]  7.7  2.8  6.7  2.0    3
[124,]  6.3  2.7  4.9  1.8    3
[125,]  6.7  3.3  5.7  2.1    3
[126,]  7.2  3.2  6.0  1.8    3
[127,]  6.2  2.8  4.8  1.8    3
[128,]  6.1  3.0  4.9  1.8    3
[129,]  6.4  2.8  5.6  2.1    3
[130,]  7.2  3.0  5.8  1.6    3
[131,]  7.4  2.8  6.1  1.9    3
[132,]  7.9  3.8  6.4  2.0    3
[133,]  6.4  2.8  5.6  2.2    3
[134,]  6.3  2.8  5.1  1.5    3
[135,]  6.1  2.6  5.6  1.4    3
[136,]  7.7  3.0  6.1  2.3    3
[137,]  6.3  3.4  5.6  2.4    3
[138,]  6.4  3.1  5.5  1.8    3
[139,]  6.0  3.0  4.8  1.8    3
[140,]  6.9  3.1  5.4  2.1    3
[141,]  6.7  3.1  5.6  2.4    3
[142,]  6.9  3.1  5.1  2.3    3
[143,]  5.8  2.7  5.1  1.9    3
[144,]  6.8  3.2  5.9  2.3    3
[145,]  6.7  3.3  5.7  2.5    3
[146,]  6.7  3.0  5.2  2.3    3
[147,]  6.3  2.5  5.0  1.9    3
[148,]  6.5  3.0  5.2  2.0    3
[149,]  6.2  3.4  5.4  2.3    3
[150,]  5.9  3.0  5.1  1.8    3
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.08 0.045 7.124 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
