
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RPostgres"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RPostgres')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Postgres")
> ### * Postgres
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Postgres
> ### Title: Postgres driver
> ### Aliases: Postgres dbConnect_PqDriver dbConnect,PqDriver-method
> ###   dbDisconnect_PqConnection dbDisconnect,PqConnection-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ # Pass more arguments as necessary to dbConnect()
+ con <- dbConnect(RPostgres::Postgres())
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("postgres-query")
> ### * postgres-query
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgres-query
> ### Title: Execute a SQL statement on a database connection
> ### Aliases: postgres-query dbBind_PqResult dbBind,PqResult-method
> ###   dbClearResult_PqResult dbClearResult,PqResult-method dbFetch_PqResult
> ###   dbFetch,PqResult-method dbHasCompleted_PqResult
> ###   dbHasCompleted,PqResult-method dbSendQuery_PqConnection
> ###   dbSendQuery,PqConnection-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ db <- dbConnect(RPostgres::Postgres())
+ dbWriteTable(db, "usarrests", datasets::USArrests, temporary = TRUE)
+ 
+ # Run query to get results as dataframe
+ dbGetQuery(db, "SELECT * FROM usarrests LIMIT 3")
+ 
+ # Send query to pull requests in batches
+ res <- dbSendQuery(db, "SELECT * FROM usarrests")
+ dbFetch(res, n = 2)
+ dbFetch(res, n = 2)
+ dbHasCompleted(res)
+ dbClearResult(res)
+ 
+ dbRemoveTable(db, "usarrests")
+ 
+ dbDisconnect(db)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("postgres-tables")
> ### * postgres-tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgres-tables
> ### Title: Convenience functions for reading/writing DBMS tables
> ### Aliases: postgres-tables dbAppendTable_PqConnection
> ###   dbAppendTable,PqConnection-method dbExistsTable_PqConnection_Id
> ###   dbExistsTable,PqConnection,Id-method
> ###   dbExistsTable_PqConnection_character
> ###   dbExistsTable,PqConnection,character-method
> ###   dbListFields_PqConnection_Id dbListFields,PqConnection,Id-method
> ###   dbListFields_PqConnection_character
> ###   dbListFields,PqConnection,character-method
> ###   dbListObjects_PqConnection_ANY dbListObjects,PqConnection-method
> ###   dbListTables_PqConnection dbListTables,PqConnection-method
> ###   dbReadTable_PqConnection_character
> ###   dbReadTable,PqConnection,character-method
> ###   dbRemoveTable_PqConnection_character
> ###   dbRemoveTable,PqConnection,character-method
> ###   dbWriteTable_PqConnection_character_data.frame
> ###   dbWriteTable,PqConnection,character,data.frame-method
> ###   sqlData_PqConnection sqlData,PqConnection-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ con <- dbConnect(RPostgres::Postgres())
+ dbListTables(con)
+ dbWriteTable(con, "mtcars", mtcars, temporary = TRUE)
+ dbReadTable(con, "mtcars")
+ 
+ dbListTables(con)
+ dbExistsTable(con, "mtcars")
+ 
+ # A zero row data frame just creates a table definition.
+ dbWriteTable(con, "mtcars2", mtcars[0, ], temporary = TRUE)
+ dbReadTable(con, "mtcars2")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("postgres-transactions")
> ### * postgres-transactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgres-transactions
> ### Title: Transaction management.
> ### Aliases: postgres-transactions dbBegin_PqConnection
> ###   dbBegin,PqConnection-method dbCommit_PqConnection
> ###   dbCommit,PqConnection-method dbRollback_PqConnection
> ###   dbRollback,PqConnection-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ con <- dbConnect(RPostgres::Postgres())
+ dbWriteTable(con, "USarrests", datasets::USArrests, temporary = TRUE)
+ dbGetQuery(con, 'SELECT count(*) from "USarrests"')
+ 
+ dbBegin(con)
+ dbExecute(con, 'DELETE from "USarrests" WHERE "Murder" > 1')
+ dbGetQuery(con, 'SELECT count(*) from "USarrests"')
+ dbRollback(con)
+ 
+ # Rolling back changes leads to original count
+ dbGetQuery(con, 'SELECT count(*) from "USarrests"')
+ 
+ dbRemoveTable(con, "USarrests")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("postgresHasDefault")
> ### * postgresHasDefault
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgresHasDefault
> ### Title: Check if default database is available.
> ### Aliases: postgresHasDefault postgresDefault
> 
> ### ** Examples
> 
> if (postgresHasDefault()) {
+   db <- postgresDefault()
+   print(dbListTables(db))
+   dbDisconnect(db)
+ } else {
+   message("No database connection.")
+ }
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
No database connection.
> 
> 
> 
> cleanEx()
> nameEx("postgresImportLargeObject")
> ### * postgresImportLargeObject
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgresImportLargeObject
> ### Title: Imports a large object from file
> ### Aliases: postgresImportLargeObject
> 
> ### ** Examples
> 
> ## Not run: 
> ##D con <- postgresDefault()
> ##D filepath <- 'your_image.png'
> ##D dbWithTransaction(con, {
> ##D   oid <- postgresImportLargeObject(con, filepath)
> ##D })
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("postgresWaitForNotify")
> ### * postgresWaitForNotify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postgresWaitForNotify
> ### Title: Wait for and return any notifications that return within timeout
> ### Aliases: postgresWaitForNotify
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ library(callr)
+ 
+ # listen for messages on the grapevine
+ db_listen <- dbConnect(RPostgres::Postgres())
+ dbExecute(db_listen, "LISTEN grapevine")
+ 
+ # Start another process, which sends a message after a delay
+ rp <- r_bg(function() {
+   library(DBI)
+   Sys.sleep(0.3)
+   db_notify <- dbConnect(RPostgres::Postgres())
+   dbExecute(db_notify, "NOTIFY grapevine, 'psst'")
+   dbDisconnect(db_notify)
+ })
+ 
+ # Sleep until we get the message
+ n <- NULL
+ while (is.null(n)) {
+   n <- RPostgres::postgresWaitForNotify(db_listen, 60)
+ }
+ stopifnot(n$payload == 'psst')
+ 
+ # Tidy up
+ rp$wait()
+ dbDisconnect(db_listen)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("quote")
> ### * quote
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quote
> ### Title: Quote postgres strings, identifiers, and literals
> ### Aliases: quote dbQuoteIdentifier_PqConnection_Id
> ###   dbQuoteIdentifier,PqConnection,Id-method
> ###   dbQuoteIdentifier_PqConnection_SQL
> ###   dbQuoteIdentifier,PqConnection,SQL-method
> ###   dbQuoteIdentifier_PqConnection_character
> ###   dbQuoteIdentifier,PqConnection,character-method
> ###   dbQuoteLiteral_PqConnection dbQuoteLiteral,PqConnection-method
> ###   dbQuoteString_PqConnection_SQL dbQuoteString,PqConnection,SQL-method
> ###   dbQuoteString_PqConnection_character
> ###   dbQuoteString,PqConnection,character-method
> ###   dbUnquoteIdentifier_PqConnection_SQL
> ###   dbUnquoteIdentifier,PqConnection,SQL-method
> 
> ### ** Examples
> 
> ## Don't show: 
> if (postgresHasDefault()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(DBI)
+ con <- dbConnect(RPostgres::Postgres())
+ 
+ x <- c("a", "b c", "d'e", "\\f")
+ dbQuoteString(con, x)
+ dbQuoteIdentifier(con, x)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
Could not initialise default postgres database. If postgres is running
check that the environment variables PGHOST, PGPORT, 
PGUSER, PGPASSWORD, and PGDATABASE, are defined and
point to your database.
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.373 0.022 0.397 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
