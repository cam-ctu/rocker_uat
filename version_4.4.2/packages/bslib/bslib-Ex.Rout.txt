
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bslib"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bslib')

Attaching package: ‘bslib’

The following object is masked from ‘package:utils’:

    page

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("accordion")
> ### * accordion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: accordion
> ### Title: Create a vertically collapsing accordion
> ### Aliases: accordion accordion_panel
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ items <- lapply(LETTERS, function(x) {
+   accordion_panel(paste("Section", x), paste("Some narrative for section", x))
+ })
+ 
+ # First shown by default
+ accordion(!!!items)
+ # Nothing shown by default
+ accordion(!!!items, open = FALSE)
+ # Everything shown by default
+ accordion(!!!items, open = TRUE)
+ 
+ # Show particular sections
+ accordion(!!!items, open = "Section B")
+ accordion(!!!items, open = c("Section A", "Section B"))
+ 
+ # Provide an id to create a shiny input binding
+ library(shiny)
+ 
+ ui <- page_fluid(
+   accordion(!!!items, id = "acc")
+ )
+ 
+ server <- function(input, output) {
+   observe(print(input$acc))
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("as_fill_carrier")
> ### * as_fill_carrier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_fill_carrier
> ### Title: Test and/or coerce fill behavior
> ### Aliases: as_fill_carrier as_fillable_container as_fill_item
> ###   remove_all_fill is_fill_carrier is_fillable_container is_fill_item
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(shiny)
+ shinyApp(
+   page_fillable(
+     # without `as_fill_carrier()`, the plot won't fill the page because
+     # `uiOutput()` is neither a fillable container nor a fill item by default.
+     as_fill_carrier(uiOutput("ui"))
+   ),
+   function(input, output) {
+     output$ui <- renderUI({
+       div(
+         class = "bg-info text-white",
+         as_fill_item(),
+         "A fill item"
+       )
+     })
+   }
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bind_task_button")
> ### * bind_task_button
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind_task_button
> ### Title: Bind 'input_task_button' to 'ExtendedTask'
> ### Aliases: bind_task_button bind_task_button.default
> ###   bind_task_button.ExtendedTask
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(shiny)
+ library(bslib)
+ library(future)
+ plan(multisession)
+ 
+ ui <- page_sidebar(
+   sidebar = sidebar(
+     input_task_button("recalc", "Recalculate")
+   ),
+   textOutput("outval")
+ )
+ 
+ server <- function(input, output) {
+   rand_task <- ExtendedTask$new(function() {
+     future({
+       # Slow operation goes here
+       Sys.sleep(2)
+       runif(1)
+     }, seed = TRUE)
+   })
+ 
+   # Make button state reflect task.
+   # If using R >=4.1, you can do this instead:
+   # rand_task <- ExtendedTask$new(...) |> bind_task_button("recalc")
+   bind_task_button(rand_task, "recalc")
+ 
+   observeEvent(input$recalc, {
+     rand_task$invoke()
+   })
+ 
+   output$outval <- renderText({
+     rand_task$result()
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("breakpoints")
> ### * breakpoints
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: breakpoints
> ### Title: Define breakpoint values
> ### Aliases: breakpoints
> 
> ### ** Examples
> 
> breakpoints(sm = c(4, 4, 4), md = c(3, 3, 6), lg = c(-2, 8, -2))
<breakpoints>
 sm:  4  4  4
 md:  3  3  6
 lg: -2  8 -2
> 
> 
> 
> 
> cleanEx()
> nameEx("bs_bundle")
> ### * bs_bundle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_add_variables
> ### Title: Add low-level theming customizations
> ### Aliases: bs_add_variables bs_add_rules bs_add_functions bs_add_mixins
> ###   bs_bundle
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Function to preview the styling a (primary) Bootstrap button
+ library(htmltools)
+ button <- tags$a(class = "btn btn-primary", href = "#", role = "button", "Hello")
+ preview_button <- function(theme) {
+   browsable(tags$body(bs_theme_dependencies(theme), button))
+ }
+ 
+ # Here we start with a theme based on a Bootswatch theme,
+ # then override some variable defaults
+ theme <- bs_add_variables(
+   bs_theme(bootswatch = "sketchy", primary = "orange"),
+   "body-bg" = "#EEEEEE",
+   "font-family-base" = "monospace",
+   "font-size-base" = "1.4rem",
+   "btn-padding-y" = ".16rem",
+   "btn-padding-x" = "2rem"
+ )
+ 
+ preview_button(theme)
+ 
+ # If you need to set a variable based on another Bootstrap variable
+ theme <- bs_add_variables(theme, "body-color" = "$success", .where = "declarations")
+ preview_button(theme)
+ 
+ # Start a new global theme and add some custom rules that
+ # use Bootstrap variables to define a custom styling for a
+ # 'person card'
+ person_rules <- system.file("custom", "person.scss", package = "bslib")
+ theme <- bs_add_rules(bs_theme(), sass::sass_file(person_rules))
+ 
+ # Include custom CSS that leverages bootstrap Sass variables
+ person <- function(name, title, company) {
+   tags$div(
+     class = "person",
+     h3(class = "name", name),
+     div(class = "title", title),
+     div(class = "company", company)
+   )
+ }
+ 
+ page_fluid(
+   theme = theme,
+   person("Andrew Carnegie", "Owner", "Carnegie Steel Company"),
+   person("John D. Rockefeller", "Chairman", "Standard Oil")
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bs_dependency")
> ### * bs_dependency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_dependency
> ### Title: Themeable HTML components
> ### Aliases: bs_dependency bs_dependency_defer
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ myWidgetVersion <- "1.2.3"
+ 
+ myWidgetDependency <- function() {
+   list(
+     bs_dependency_defer(myWidgetCss),
+     htmlDependency(
+       name = "mywidget-js",
+       version = myWidgetVersion,
+       src = system.file(package = "mypackage", "js"),
+       script = "mywidget.js"
+     )
+   )
+ }
+ 
+ myWidgetCSS <- function(theme) {
+   if (!is_bs_theme(theme)) {
+     return(
+       htmlDependency(
+         name = "mywidget-css",
+         version = myWidgetVersion,
+         src = system.file(package = "mypackage", "css"),
+         stylesheet = "mywidget.css"
+       )
+     )
+   }
+ 
+   # Compile mywidget.scss using the variables and defaults from the theme
+   # object.
+   sass_input <- sass::sass_file(system.file(package = "mypackage", "scss/mywidget.scss"))
+ 
+   bs_dependency(
+     input = sass_input,
+     theme = theme,
+     name = "mywidget",
+     version = myWidgetVersion,
+     cache_key_extra = utils::packageVersion("mypackage")
+   )
+ }
+ 
+ # Note that myWidgetDependency is not defined inside of myWidget. This is so
+ # that, if `myWidget()` is called multiple times, Shiny can tell that the
+ # function objects are identical and deduplicate them.
+ myWidget <- function(id) {
+   div(
+     id = id,
+     span("myWidget"),
+     myWidgetDependency()
+   )
+ }
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bs_get_variables")
> ### * bs_get_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_get_variables
> ### Title: Retrieve Sass variable values from the current theme
> ### Aliases: bs_get_variables bs_get_contrast
> 
> ### ** Examples
> 
> vars <- c("body-bg", "body-color", "primary", "border-radius")
> bs_get_variables(bs_theme(), varnames = vars)
      body-bg    body-color       primary border-radius 
    "#ffffff"     "#1D1F21"     "#007bc2"         "3px" 
> bs_get_variables(bs_theme(bootswatch = "darkly"), varnames = vars)
      body-bg    body-color       primary border-radius 
       "#222"        "#fff"     "#375a7f"    "0.375rem" 
> 
> bs_get_contrast(bs_theme(), c("primary", "dark", "light"))
  primary      dark     light 
"#FFFFFF" "#FFFFFF" "#000000" 
> 
> library(htmltools)
> div(
+   class = "bg-primary",
+   style = css(
+     color = bs_get_contrast(bs_theme(), "primary")
+   )
+ )
<div class="bg-primary" style="color:#FFFFFF;"></div>
> 
> 
> 
> 
> cleanEx()

detaching ‘package:htmltools’

> nameEx("bs_global_theme")
> ### * bs_global_theme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_global_theme
> ### Title: Global theming
> ### Aliases: bs_global_theme bs_global_set bs_global_get bs_global_clear
> ###   bs_global_add_variables bs_global_add_rules bs_global_bundle
> ###   bs_global_theme_update
> 
> ### ** Examples
> 
> # Remember the global state now (so we can restore later)
> theme <- bs_global_get()
> 
> # Use Bootstrap 3 (globally) with some theme customization
> bs_global_theme(3, bg = "#444", fg = "#e4e4e4", primary = "#e39777")
> if (rlang::is_interactive()) {
+   bs_theme_preview(with_themer = FALSE)
+ }
> 
> # If no global theme is active, bs_global_get() returns NULL
> bs_global_clear()
> bs_global_get()
NULL
> 
> # Restore the original state
> bs_global_set(theme)
> 
> 
> 
> 
> cleanEx()
> nameEx("bs_remove")
> ### * bs_remove
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_remove
> ### Title: Remove or retrieve Sass code from a theme
> ### Aliases: bs_remove bs_retrieve
> 
> ### ** Examples
> 
> bs4 <- bs_theme(version = 4)
> 
> # Retrieve sass bundle for print styles
> bs_retrieve(bs4, "_print", include_unnamed = FALSE)
/* Sass Bundle: _print */
@import "/usr/local/lib/R/site-library/bslib/lib/bs4/scss/_print.scss";
/* *** */
> 
> # Remove CSS rules for print and carousels
> bs4_no_print <- bs_remove(bs4, c("_print", "_carousel"))
> suppressWarnings(
+   bs_retrieve(bs4_no_print, "_print", include_unnamed = FALSE)
+ )
/* Sass Bundle: (empty) *** */
> 
> # Remove BS3 compatibility layer
> bs4_no_compat <- bs_remove(bs4, "bs3compat")
> 
> 
> 
> cleanEx()
> nameEx("bs_theme")
> ### * bs_theme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_theme
> ### Title: Create a Bootstrap theme
> ### Aliases: bs_theme bs_theme_update is_bs_theme
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ theme <- bs_theme(
+   # Controls the default grayscale palette
+   bg = "#202123", fg = "#B8BCC2",
+   # Controls the accent (e.g., hyperlink, button, etc) colors
+   primary = "#EA80FC", secondary = "#48DAC6",
+   base_font = c("Grandstander", "sans-serif"),
+   code_font = c("Courier", "monospace"),
+   heading_font = "'Helvetica Neue', Helvetica, sans-serif",
+   # Can also add lower-level customization
+   "input-border-color" = "#EA80FC"
+ )
+ 
+ bs_theme_preview(theme)
+ 
+ # Lower-level bs_add_*() functions allow you to work more
+ # directly with the underlying Sass code
+ theme <- bs_add_variables(theme, "my-class-color" = "red")
+ theme <- bs_add_rules(theme, ".my-class { color: $my-class-color }")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bs_theme_dependencies")
> ### * bs_theme_dependencies
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_theme_dependencies
> ### Title: Compile Bootstrap Sass with (optional) theming
> ### Aliases: bs_theme_dependencies
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Function to preview the styling a (primary) Bootstrap button
+ library(htmltools)
+ button <- tags$a(class = "btn btn-primary", href = "#", role = "button", "Hello")
+ preview_button <- function(theme) {
+   browsable(tags$body(bs_theme_dependencies(theme), button))
+ }
+ 
+ # Latest Bootstrap
+ preview_button(bs_theme())
+ # Bootstrap 3
+ preview_button(bs_theme(3))
+ # Bootswatch 4 minty theme
+ preview_button(bs_theme(4, bootswatch = "minty"))
+ # Bootswatch 4 sketchy theme
+ preview_button(bs_theme(4, bootswatch = "sketchy"))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("bs_theme_preview")
> ### * bs_theme_preview
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bs_theme_preview
> ### Title: Preview a Bootstrap theme
> ### Aliases: bs_theme_preview
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ theme <- bs_theme(bg = "#6c757d", fg = "white", primary = "orange")
+ bs_theme_preview(theme)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("card")
> ### * card
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: card
> ### Title: A Bootstrap card component
> ### Aliases: card
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(htmltools)
+ 
+ card(
+   full_screen = TRUE,
+   card_header(
+     "This is the header"
+   ),
+   card_body(
+     p("This is the body."),
+     p("This is still the body.")
+   ),
+   card_footer(
+     "This is the footer"
+   )
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("font_face")
> ### * font_face
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_face
> ### Title: Helpers for importing web fonts
> ### Aliases: font_face font_link font_google font_collection
> 
> ### ** Examples
> 
> 
> # If you have an internet connection, running the following code
> # will download, cache, and import the relevant Google Font files
> # for local use
> theme <- bs_theme(
+   base_font = font_google("Fira Sans"),
+   code_font = font_google("Fira Code"),
+   heading_font = font_google("Fredoka One")
+ )
> if (interactive()) {
+   bs_theme_preview(theme)
+ }
> 
> # Three different yet equivalent ways of importing a remotely-hosted Google Font
> a <- font_google("Crimson Pro", wght = "200..900", local = FALSE)
> b <- font_link(
+   "Crimson Pro",
+   href = "https://fonts.googleapis.com/css2?family=Crimson+Pro:wght@200..900"
+ )
> url <- "https://fonts.gstatic.com/s/crimsonpro/v13/q5uDsoa5M_tv7IihmnkabARboYF6CsKj.woff2"
> c <- font_face(
+   family = "Crimson Pro",
+   style = "normal",
+   weight = "200 900",
+   src = paste0("url(", url, ") format('woff2')")
+ )
> theme <- bs_theme(base_font = c)
> if (interactive()) {
+   bs_theme_preview(theme)
+ }
> 
> 
> 
> cleanEx()
> nameEx("input_switch")
> ### * input_switch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: input_switch
> ### Title: Switch input control
> ### Aliases: input_switch update_switch toggle_switch
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(shiny)
+ library(bslib)
+ 
+ ui <- page_fixed(
+   title = "Keyboard Settings",
+   h2("Keyboard Settings"),
+   input_switch("auto_capitalization", "Auto-Capitalization", TRUE),
+   input_switch("auto_correction", "Auto-Correction", TRUE),
+   input_switch("check_spelling", "Check Spelling", TRUE),
+   input_switch("smart_punctuation", "Smart Punctuation"),
+   h2("Preview"),
+   verbatimTextOutput("preview")
+ )
+ 
+ server <- function(input, output, session) {
+   output$preview <- renderPrint({
+     list(
+       auto_capitalization = input$auto_capitalization,
+       auto_correction = input$auto_correction,
+       check_spelling = input$check_spelling,
+       smart_punctuation = input$smart_punctuation
+     )
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("input_task_button")
> ### * input_task_button
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: input_task_button
> ### Title: Button for launching longer-running operations
> ### Aliases: input_task_button update_task_button
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(shiny)
+ library(bslib)
+ 
+ ui <- page_sidebar(
+   sidebar = sidebar(
+     open = "always",
+     input_task_button("resample", "Resample"),
+   ),
+   verbatimTextOutput("summary")
+ )
+ 
+ server <- function(input, output, session) {
+   sample <- eventReactive(input$resample, ignoreNULL=FALSE, {
+     Sys.sleep(2)  # Make this artificially slow
+     rnorm(100)
+   })
+ 
+   output$summary <- renderPrint({
+     summary(sample())
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("layout_column_wrap")
> ### * layout_column_wrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_column_wrap
> ### Title: Column-first uniform grid layouts
> ### Aliases: layout_column_wrap
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ x <- card("A simple card")
+ 
+ # Always has 2 columns (on non-mobile)
+ layout_column_wrap(width = 1/2, x, x, x)
+ 
+ # Automatically lays out three cards into columns
+ # such that each column is at least 200px wide:
+ layout_column_wrap(x, x, x)
+ 
+ # To use larger column widths by default, set `width`.
+ # This example has 3 columns when the screen is at least 900px wide:
+ layout_column_wrap(width = "300px", x, x, x)
+ 
+ # You can add a list of items, spliced with rlang's `!!!` operator
+ layout_column_wrap(!!!list(x, x, x))
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("layout_columns")
> ### * layout_columns
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_columns
> ### Title: Responsive 12-column grid layouts
> ### Aliases: layout_columns
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ x <- card("A simple card")
+ 
+ page_fillable(
+   layout_columns(x, x, x, x)
+ )
+ 
+ # Or add a list of items, spliced with rlang's `!!!` operator
+ page_fillable(
+  layout_columns(!!!list(x, x, x))
+ )
+ 
+ page_fillable(
+   layout_columns(
+     col_widths = c(6, 6, 12),
+     x, x, x
+   )
+ )
+ 
+ page_fillable(
+   layout_columns(
+     col_widths = c(6, 6, -2, 8),
+     row_heights = c(1, 3),
+     x, x, x
+   )
+ )
+ 
+ page_fillable(
+   fillable_mobile = TRUE,
+   layout_columns(
+     col_widths = breakpoints(
+       sm = c(12, 12, 12),
+       md = c(6, 6, 12),
+       lg = c(4, 4, 4)
+     ),
+     x, x, x
+   )
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("nav_select")
> ### * nav_select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nav_select
> ### Title: Dynamically update nav containers
> ### Aliases: nav_select nav_insert nav_remove nav_show nav_hide
> 
> ### ** Examples
> 
> 
> can_browse <- function() rlang::is_interactive() && require("shiny")
> 
> # Selecting a tab
> if (can_browse()) {
+   shinyApp(
+     page_fluid(
+       radioButtons("item", "Choose", c("A", "B")),
+       navset_hidden(
+         id = "container",
+         nav_panel_hidden("A", "a"),
+         nav_panel_hidden("B", "b")
+       )
+     ),
+     function(input, output) {
+       observe(nav_select("container", input$item))
+     }
+   )
+ }
> 
> # Inserting and removing
> if (can_browse()) {
+   ui <- page_fluid(
+     actionButton("add", "Add 'Dynamic' tab"),
+     actionButton("remove", "Remove 'Foo' tab"),
+     navset_tab(
+       id = "tabs",
+       nav_panel("Hello", "hello"),
+       nav_panel("Foo", "foo"),
+       nav_panel("Bar", "bar tab")
+     )
+   )
+   server <- function(input, output) {
+     observeEvent(input$add, {
+       nav_insert(
+         "tabs", target = "Bar", select = TRUE,
+         nav_panel("Dynamic", "Dynamically added content")
+       )
+     })
+     observeEvent(input$remove, {
+       nav_remove("tabs", target = "Foo")
+     })
+   }
+   shinyApp(ui, server)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("page_fillable")
> ### * page_fillable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: page_fillable
> ### Title: A screen-filling page layout
> ### Aliases: page_fillable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(shiny)
+ library(ggplot2)
+ 
+ ui <- page_fillable(
+   h1("Example", code("mtcars"), "dashboard"),
+   layout_columns(
+     card(
+       full_screen = TRUE,
+       card_header("Number of forward gears"),
+       plotOutput("gear")
+     ),
+     card(
+       full_screen = TRUE,
+       card_header("Number of carburetors"),
+       plotOutput("carb")
+     )
+   ),
+   card(
+     full_screen = TRUE,
+     card_header("Weight vs. Quarter Mile Time"),
+     layout_sidebar(
+       sidebar = sidebar(
+         varSelectInput("var_x", "Compare to qsec:", mtcars[-7], "wt"),
+         varSelectInput("color", "Color by:", mtcars[-7], "cyl"),
+         position = "right"
+       ),
+       plotOutput("var_vs_qsec")
+     )
+   )
+ )
+ 
+ server <- function(input, output) {
+   for (var in c("cyl", "vs", "am", "gear", "carb")) {
+     mtcars[[var]] <- as.factor(mtcars[[var]])
+   }
+ 
+   output$gear <- renderPlot({
+     ggplot(mtcars, aes(gear)) + geom_bar()
+   })
+ 
+   output$carb <- renderPlot({
+     ggplot(mtcars, aes(carb)) + geom_bar()
+   })
+ 
+   output$var_vs_qsec <- renderPlot({
+     req(input$var_x, input$color)
+ 
+     ggplot(mtcars) +
+       aes(y = qsec, x = !!input$var_x, color = !!input$color) +
+       geom_point()
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("page_navbar")
> ### * page_navbar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: page_navbar
> ### Title: Multi-page app with a top navigation bar
> ### Aliases: page_navbar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(shiny)
+ library(bslib)
+ 
+ link_shiny <- tags$a(
+   shiny::icon("github"), "Shiny",
+   href = "https://github.com/rstudio/shiny",
+   target = "_blank"
+ )
+ link_posit <- tags$a(
+   shiny::icon("r-project"), "Posit",
+   href = "https://posit.co",
+   target = "_blank"
+ )
+ 
+ ui <- page_navbar(
+   title = "My App",
+   nav_panel(title = "One", p("First page content.")),
+   nav_panel(title = "Two", p("Second page content.")),
+   nav_panel("Three", p("Third page content.")),
+   nav_spacer(),
+   nav_menu(
+     title = "Links",
+     align = "right",
+     nav_item(link_shiny),
+     nav_item(link_posit)
+   )
+ )
+ 
+ server <- function(...) { } # not used in this example
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("page_sidebar")
> ### * page_sidebar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: page_sidebar
> ### Title: A sidebar page (i.e., dashboard)
> ### Aliases: page_sidebar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ library(shiny)
+ library(ggplot2)
+ 
+ ui <- page_sidebar(
+   title = "Example dashboard",
+   sidebar = sidebar(
+     varSelectInput("var", "Select variable", mtcars)
+   ),
+   card(
+     full_screen = TRUE,
+     card_header("My plot"),
+     plotOutput("p")
+   )
+ )
+ 
+ server <- function(input, output) {
+   output$p <- renderPlot({
+     ggplot(mtcars) + geom_histogram(aes(!!input$var))
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("popover")
> ### * popover
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: popover
> ### Title: Add a popover to a UI element
> ### Aliases: popover toggle_popover update_popover
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ popover(
+   shiny::actionButton("btn", "A button"),
+   "Popover body content...",
+   title = "Popover title"
+ )
+ 
+ library(shiny)
+ 
+ ui <- page_fixed(
+   card(class = "mt-5",
+     card_header(
+       popover(
+         uiOutput("card_title", inline = TRUE),
+         title = "Provide a new title",
+         textInput("card_title", NULL, "An editable title")
+       )
+     ),
+     "The card body..."
+   )
+ )
+ 
+ server <- function(input, output) {
+   output$card_title <- renderUI({
+     list(input$card_title, bsicons::bs_icon("pencil-square"))
+   })
+ }
+ 
+ shinyApp(ui, server)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("run_with_themer")
> ### * run_with_themer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: run_with_themer
> ### Title: Theme customization UI
> ### Aliases: run_with_themer bs_themer
> 
> ### ** Examples
> 
> library(shiny)
> 
> ui <- fluidPage(
+   theme = bs_theme(bg = "black", fg = "white"),
+   h1("Heading 1"),
+   h2("Heading 2"),
+   p(
+     "Paragraph text;",
+     tags$a(href = "https://www.rstudio.com", "a link")
+   ),
+   p(
+     actionButton("cancel", "Cancel"),
+     actionButton("continue", "Continue", class = "btn-primary")
+   ),
+   tabsetPanel(
+     tabPanel("First tab",
+       "The contents of the first tab"
+     ),
+     tabPanel("Second tab",
+       "The contents of the second tab"
+     )
+   )
+ )
> 
> if (interactive()) {
+   run_with_themer(shinyApp(ui, function(input, output) {}))
+ }
> 
> 
> 
> 
> cleanEx()

detaching ‘package:shiny’

> nameEx("tooltip")
> ### * tooltip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tooltip
> ### Title: Add a tooltip to a UI element
> ### Aliases: tooltip toggle_tooltip update_tooltip
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ tooltip(
+   shiny::actionButton("btn", "A button"),
+   "A message"
+ )
+ 
+ card(
+   card_header(
+     tooltip(
+       span("Card title ", bsicons::bs_icon("question-circle-fill")),
+       "Additional info",
+       placement = "right"
+     )
+   ),
+   "Card body content..."
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("value_box")
> ### * value_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: value_box
> ### Title: Value box
> ### Aliases: value_box value_box_theme showcase_left_center
> ###   showcase_top_right showcase_bottom
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(htmltools)
+ 
+ value_box(
+   "KPI Title",
+   h1(HTML("$1 <i>Billion</i> Dollars")),
+   span(
+     bsicons::bs_icon("arrow-up"),
+     " 30% VS PREVIOUS 30 DAYS"
+   ),
+   showcase = bsicons::bs_icon("piggy-bank"),
+   theme = "success"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.699 0.078 0.778 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
