
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "patchwork"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('patchwork')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("area")
> ### * area
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: area
> ### Title: Specify a plotting area in a layout
> ### Aliases: area
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> 
> layout <- c(
+   area(1, 1),
+   area(1, 3, 3),
+   area(3, 1, 3, 2)
+ )
> 
> # Show the layout to make sure it looks as it should
> plot(layout)
> 
> # Apply it to a patchwork
> p1 + p2 + p3 + plot_layout(design = layout)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("free")
> ### * free
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: free
> ### Title: Free a plot from various alignments
> ### Aliases: free
> 
> ### ** Examples
> 
> # Sometimes you have a plot that defies good composition alginment, e.g. due
> # to long axis labels
> library(ggplot2)
> p1 <- ggplot(mtcars) +
+   geom_bar(aes(y = factor(gear), fill = factor(gear))) +
+   scale_y_discrete(
+     "",
+     labels = c("3 gears are often enough",
+                "But, you know, 4 is a nice number",
+                "I would def go with 5 gears in a modern car")
+   )
> 
> # When combined with other plots it ends up looking bad
> p2 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> 
> p1 / p2
> 
> # We can fix this be using free (here, with the default "panel" type)
> free(p1) / p2
> 
> # If we still want the panels to be aligned to the right, we can choose to
> # free only the left side
> free(p1, side = "l") / p2
> 
> # We can still collect guides like before
> free(p1) / p2 + plot_layout(guides = "collect")
> 
> # We could use "label" to fix the layout in a different way
> p1 / free(p2, "label")
> 
> # Another issue is that long labels are not using already available free
> # space.
> plot_spacer() + p1 + p2 + p2
> 
> # This can be fixed with the "space" type
> plot_spacer() + free(p1, "space", "l") + p2 + p2
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("guide_area")
> ### * guide_area
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: guide_area
> ### Title: Add an area to hold collected guides
> ### Aliases: guide_area
> 
> ### ** Examples
> 
> library(ggplot2)
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp, colour = factor(gear)))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> 
> # Guides are by default kept beeside their plot
> p1 + p2 + p3
> 
> # They can be collected and placed on the side (according to the patchwork
> # theme)
> p1 + p2 + p3 + plot_layout(guides = 'collect', ncol = 2)
> 
> # Using guide_area() you can also designate an empty area for this
> p1 + p2 + p3 + guide_area() + plot_layout(guides = 'collect')
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("inset_element")
> ### * inset_element
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inset_element
> ### Title: Create an inset to be added on top of the previous plot
> ### Aliases: inset_element
> 
> ### ** Examples
> 
> library(ggplot2)
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> 
> # Basic use
> p1 + inset_element(p2, 0.6, 0.6, 1, 1)
> 
> # Align to the full area instead
> p1 + inset_element(p2, 0, 0.6, 0.4, 1, align_to = 'full')
> 
> # Grobs and other objects can be added as insets as well
> p1 + inset_element(grid::circleGrob(), 0.4, 0.4, 0.6, 0.6)
> 
> if (requireNamespace('png', quietly = TRUE)) {
+   logo <- system.file('help', 'figures', 'logo.png', package = 'patchwork')
+   logo <- png::readPNG(logo, native = TRUE)
+   p1 + inset_element(logo, 0.8, 0.8, 1, 1, align_to = 'full')
+ }
> 
> # Just as expected insets are still amenable to changes after the fact
> p1 +
+   inset_element(p2, 0.6, 0.6, 1, 1) +
+   theme_classic()
> 
> # Tagging also continues to work as expected
> p1 +
+   inset_element(p2, 0.6, 0.6, 1, 1) +
+   plot_annotation(tag_levels = '1')
> 
> # but can be turned off, like for wrapped plots
> p1 +
+   inset_element(p2, 0.6, 0.6, 1, 1, ignore_tag = TRUE) +
+   plot_annotation(tag_levels = '1')
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("multipage_align")
> ### * multipage_align
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multipage_align
> ### Title: Align plots across multiple pages
> ### Aliases: multipage_align get_dim set_dim get_max_dim align_patches
> 
> ### ** Examples
> 
> library(ggplot2)
> p1 <- ggplot(mtcars) +
+   geom_point(aes(mpg, disp)) +
+   ggtitle('Plot 1')
> 
> p2 <- ggplot(mtcars) +
+   geom_boxplot(aes(gear, disp, group = gear)) +
+   ggtitle('Plot 2')
> 
> p3 <- ggplot(mtcars) +
+   geom_point(aes(hp, wt, colour = mpg)) +
+   ggtitle('Plot 3')
> 
> p4 <- ggplot(mtcars) +
+   geom_bar(aes(gear)) +
+   facet_wrap(~cyl) +
+   ggtitle('Plot 4')
> 
> # Align a plot to p4
> p4_dim <- get_dim(p4)
> set_dim(p1, p4_dim)
> 
> # Align a plot to the maximum dimensions of a list of plots
> max_dims <- get_max_dim(p1, p2, p3, p4)
> set_dim(p2, max_dims)
> 
> # Align a list of plots with each other
> aligned_plots <- align_patches(p1, p2, p3, p4)
> aligned_plots[[3]]
> 
> # Aligned plots still behave like regular ggplots
> aligned_plots[[3]] + theme_bw()
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("patchwork-package")
> ### * patchwork-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: patchwork-package
> ### Title: patchwork: The Composer of Plots
> ### Aliases: patchwork patchwork-package
> ### Keywords: internal
> 
> ### ** Examples
> 
> library(ggplot2)
> # You can add plots saved to variables
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> 
> p1 + p2
> 
> # Or build it up in one step
> ggplot(mtcars) +
+   geom_point(aes(mpg, disp)) +
+   ggplot(mtcars) +
+   geom_boxplot(aes(gear, disp, group = gear))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot_annotation")
> ### * plot_annotation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_annotation
> ### Title: Annotate the final patchwork
> ### Aliases: plot_annotation
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> 
> # Add title, etc. to a patchwork
> p1 + p2 + plot_annotation('This is a title', caption = 'made with patchwork')
> 
> # Change styling of patchwork elements
> p1 + p2 +
+   plot_annotation(
+     title = 'This is a title',
+     caption = 'made with patchwork',
+     theme = theme(plot.title = element_text(size = 16))
+   )
> 
> # Add tags to plots
> p1 / (p2 | p3) +
+   plot_annotation(tag_levels = 'A')
> 
> # Add multilevel tagging to nested layouts
> p1 / ((p2 | p3) + plot_layout(tag_level = 'new')) +
+   plot_annotation(tag_levels = c('A', '1'))
> 
> # Use a custom tag sequence (mixed with a standard one)
> p1 / ((p2 | p3) + plot_layout(tag_level = 'new')) +
+   plot_annotation(tag_levels = list(c('&', '%'), '1'))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot_arithmetic")
> ### * plot_arithmetic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_arithmetic
> ### Title: Plot arithmetic
> ### Aliases: plot_arithmetic -.ggplot /.ggplot |.ggplot *.gg &.gg
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> p4 <- ggplot(mtcars) + geom_bar(aes(carb))
> 
> # Standard addition vs division
> p1 + p2 + p3 + plot_layout(ncol = 1)
> p1 + p2 - p3 + plot_layout(ncol = 1)
> 
> # Stacking and packing
> (p1 | p2 | p3) /
+       p4
> 
> # Add elements to the same nesting level
> (p1 + (p2 + p3) + p4 + plot_layout(ncol = 1)) * theme_bw()
> 
> # Recurse into nested plots as well
> (p1 + (p2 + p3) + p4 + plot_layout(ncol = 1)) & theme_bw()
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot_layout")
> ### * plot_layout
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_layout
> ### Title: Define the grid to compose plots in
> ### Aliases: plot_layout
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> p4 <- ggplot(mtcars) + geom_bar(aes(carb))
> p5 <- ggplot(mtcars) + geom_violin(aes(cyl, mpg, group = cyl))
> 
> # The plots are layed out automatically by default
> p1 + p2 + p3 + p4 + p5
> 
> # Use byrow to change how the grid is filled out
> p1 + p2 + p3 + p4 + p5 + plot_layout(byrow = FALSE)
> 
> # Change the grid dimensions
> p1 + p2 + p3 + p4 + p5 + plot_layout(ncol = 2, widths = c(1, 2))
> 
> # Define layout at different nesting levels
> p1 +
+   p2 +
+   (p3 +
+      p4 +
+      plot_layout(ncol = 1)
+   ) +
+   p5 +
+   plot_layout(widths = c(2, 1))
> 
> # Complex layouts can be created with the `design` argument
> design <- c(
+   area(1, 1, 2),
+   area(1, 2, 1, 3),
+   area(2, 3, 3),
+   area(3, 1, 3, 2),
+   area(2, 2)
+ )
> p1 + p2 + p3 + p4 + p5 + plot_layout(design = design)
> 
> # Use guides="collect" to remove duplicate guides
> p6 <- ggplot(mtcars) + geom_point(aes(mpg, disp, color=cyl))
> p7 <- ggplot(mtcars) + geom_point(aes(mpg, hp, color=cyl))
> p6 + p7 + plot_layout(guides='collect')
> 
> # Guide position must be applied to entire patchwork
> p6 + p7 + plot_layout(guides='collect') &
+   theme(legend.position='bottom')
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot_spacer")
> ### * plot_spacer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_spacer
> ### Title: Add a completely blank area
> ### Aliases: plot_spacer
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> 
> p1 + plot_spacer() + p2
> 
> 
> # To have more control over spacing, you can use the `plot.margin`
> # parameter for `theme()` on each individual plot.
> 
> (p1 + theme(plot.margin = unit(c(0,30,0,0), "pt"))) +
+ (p2 + theme(plot.margin = unit(c(0,0,0,30), "pt")))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("wrap_elements")
> ### * wrap_elements
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap_elements
> ### Title: Wrap arbitrary graphics in a patchwork-compliant patch
> ### Aliases: wrap_elements
> 
> ### ** Examples
> 
> library(ggplot2)
> library(grid)
> 
> # Combine grobs with each other
> wrap_elements(panel = textGrob('Here are some text')) +
+   wrap_elements(
+     panel = rectGrob(gp = gpar(fill = 'steelblue')),
+     full = rectGrob(gp = gpar(fill = 'goldenrod'))
+   )
> 
> # wrapped elements can still get titles etc like ggplots
> wrap_elements(panel = textGrob('Here are some text')) +
+   wrap_elements(
+     panel = rectGrob(gp = gpar(fill = 'steelblue')),
+     full = rectGrob(gp = gpar(fill = 'goldenrod'))
+   ) +
+   ggtitle('Title for the amazing rectangles')
> 
> # You can also pass in ggplots or patchworks to e.g. have it fill out the
> # panel area
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p1 + wrap_elements(panel = p1 + ggtitle('Look at me shrink'))
> 
> # You can even add base graphics if you pass it as a formula (requires gridGraphics package)
> if (requireNamespace("gridGraphics", quietly = TRUE)) {
+   p1 + wrap_elements(full = ~ plot(mtcars$mpg, mtcars$disp))
+ 
+   # Adding a grob or formula directly is equivalent to placing it in `full`
+   p1 + ~ plot(mtcars$mpg, mtcars$disp)
+ }
> 
> 
> 
> 
> cleanEx()

detaching ‘package:grid’, ‘package:ggplot2’

> nameEx("wrap_ggplot_grob")
> ### * wrap_ggplot_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap_ggplot_grob
> ### Title: Make a gtable created from a ggplot object patchwork compliant
> ### Aliases: wrap_ggplot_grob
> 
> ### ** Examples
> 
> library(grid)
> library(gtable)
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) + ggtitle('disp and mpg seems connected')
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> 
> # Convert p2 so we can add new stuff to it
> p2_table <- ggplotGrob(p2)
> stamp <- textGrob('TOP SECRET', rot = 35,
+   gp = gpar(fontsize = 72, fontface = 'bold')
+ )
> p2_table <- gtable_add_grob(p2_table, stamp,
+   t = 1, l = 1, b = nrow(p2_table), r = ncol(p2_table)
+ )
> 
> # Adding it directly will loose alignment
> p1 + p2_table
> 
> # Use wrap_ggplot_grob to keep alignment
> p1 + wrap_ggplot_grob(p2_table)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:gtable’, ‘package:grid’

> nameEx("wrap_plots")
> ### * wrap_plots
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap_plots
> ### Title: Wrap plots into a patchwork
> ### Aliases: wrap_plots
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
> p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
> p3 <- ggplot(mtcars) + geom_bar(aes(gear)) + facet_wrap(~cyl)
> p4 <- ggplot(mtcars) + geom_bar(aes(carb))
> p5 <- ggplot(mtcars) + geom_violin(aes(cyl, mpg, group = cyl))
> 
> # Either add the plots as single arguments
> wrap_plots(p1, p2, p3, p4, p5)
> 
> # Or add them as a list...
> plots <- list(p1, p2, p3, p4, p5)
> wrap_plots(plots)
> 
> # Match plots to areas by name
> design <- "#BB
+            AA#"
> wrap_plots(B = p1, A = p2, design = design)
> 
> # Compare to not using named plot arguments
> wrap_plots(p1, p2, design = design)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("wrap_table")
> ### * wrap_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wrap_table
> ### Title: Wrap a table in a patchwork compliant patch
> ### Aliases: wrap_table
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("gt", quietly = TRUE) && packageVersion("gt") >= "0.11.0") (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(ggplot2)
+ library(gt)
+ 
+ p1 <- ggplot(airquality) +
+   geom_line(aes(x = Day, y = Temp, colour = month.name[Month])) +
+   labs(colour = "Month")
+ 
+ table <- data.frame(
+   Month = month.name[5:9],
+   "Mean temp." = tapply(airquality$Temp, airquality$Month, mean),
+   "Min temp." = tapply(airquality$Temp, airquality$Month, min),
+   "Max temp." = tapply(airquality$Temp, airquality$Month, max)
+ )
+ gt_tab <- gt(table, rowname_col = "Month")
+ 
+ # Default addition usees wrap_table
+ p1 + gt_tab
+ 
+ # Default places column and row headers outside panel area. Use wrap_table
+ # to control this
+ p1 + wrap_table(gt_tab, panel = "full")
+ 
+ # Tables generally have fixed dimensions and these can be used to control
+ # the size of the area they occupy
+ p2 <- ggplot(airquality) +
+   geom_boxplot(aes(y = month.name[Month], x = Temp)) +
+   scale_y_discrete(name = NULL, limits = month.name[9:5], guide = "none")
+ 
+ wrap_table(gt_tab, space = "fixed") + p2
+ ## Don't show: 
+ }) # examplesIf
> library(ggplot2)
> library(gt)
> p1 <- ggplot(airquality) + geom_line(aes(x = Day, y = Temp, colour = month.name[Month])) + 
+     labs(colour = "Month")
> table <- data.frame(Month = month.name[5:9], `Mean temp.` = tapply(airquality$Temp, 
+     airquality$Month, mean), `Min temp.` = tapply(airquality$Temp, airquality$Month, 
+     min), `Max temp.` = tapply(airquality$Temp, airquality$Month, max))
> gt_tab <- gt(table, rowname_col = "Month")
> p1 + gt_tab
> p1 + wrap_table(gt_tab, panel = "full")
> p2 <- ggplot(airquality) + geom_boxplot(aes(y = month.name[Month], x = Temp)) + 
+     scale_y_discrete(name = NULL, limits = month.name[9:5], guide = "none")
> wrap_table(gt_tab, space = "fixed") + p2
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:gt’, ‘package:ggplot2’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  15.455 0.089 15.546 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
