
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEpAIBAAKCAQEAq58pOIoHm/DcPeQUJx4F/h8M67bJ4s39EdGaHNSQmY/ir1va"
 [3] "cWW7/d+/N6E8UHr8q5aiwWhxqplkNpKODYAXdJ+UdBdv8kbNL8bW3WAP5lgt/Mn5"
 [4] "nWaDf/lNePfvWFaeh4GOiePkKOaE7Uw6ZoyIYBxuhg0HSx2O5M7eziSs8Zn4MYz3"
 [5] "x6RJXXzG6d8xA2X5QYKLvLrwczhnFNLql2MmEUChutBCrf9aR2QMw9juTvzU5IZK"
 [6] "vPZEjqlgRJYxlfYLJJImINEqzeCOQhcuw8PLPetqXqORslKxgY7akFR40V73LGFG"
 [7] "vtfx+OwnrvWS3Zu40/8hbrtWEpFiQQYV+g6O0wIDAQABAoIBACCR8Js7yszj7ZBL"
 [8] "WC3CS2XaU7PqOS8zY4s9qY8+IgEapu0bs/2gToiULXBrx4wIgyo3SMUGwsebG8Ml"
 [9] "lhLm08y8uko75nFm0Wr3Q/C4WdwfsP6QADDIcz1WvUavWvt7WNOjmT7/Al5mvSRh"
[10] "upWapwkCbFFBaLhvMB6pSex6Vl31SDZpwyynrv7qaReTmvj4PpYdpsSi6LOOn6Yd"
[11] "5I0Wl11e6CNfuF3r8oO5L5xibpPbqQUqH3nTIqaY3HSBiV57rMIjDkUhA3hihck/"
[12] "IlmR4w3WxYQWTbdXEDjaghaUhm2sWp34lY6VMQWWEttPIAgxlBhH2BVyAjIoMaKM"
[13] "v3X0EjUCgYEA4eB2w9O+gDctSebjAW1p1x11oE+6JgmblftM9RAzi9v7astBdpdH"
[14] "95hQA1kdwXdG2hYS5YC53aGe3ZT0tj6eRLbhIOT9ICUr3GFlZS8r4lBz8jULzlWa"
[15] "pd9v1CsU6frf14ASl6JkPm2vH3ww2AW5FkeyTHhqNxAR6qhTpsg0unUCgYEAwoJn"
[16] "ZpahCSPPxWwwy3gSzeXYEKomunOBmhjiZLzqKri1D90WacA9tf1fHcrkxiYDf1qO"
[17] "Q3hYl0KX/G/Np8I6opEOh9F10kDtS1lCsw78HYCDvWK+uGi7zPB/Bl+Dez0l5q6+"
[18] "BtemAPs9Bd1URKEKMx1zvIOV99OnSgK2M2hSqycCgYB1YfsWZZHYe9QzVaOe+EdK"
[19] "nWqldwlb/x414TTrHhJLmnSb2SkaAiBKUYMzWjqWcfAGIfaMAkuVHAq9SE2r7/q7"
[20] "5vYz7AyHigmzK4JQBSWfJQQ8WMjb36zQir9I2WKy/ccZ7Nq8po3Fy6Z4jEet27uG"
[21] "EphcGS/JkbZd5kAiqmSMiQKBgQC8XygejTBFtr3oF0AmPRIQ/1BBy1cYaPaRsxnF"
[22] "r8MkPp9zToz/O2NIVaoBI1Zto7DtbFisdOdvDdo9alWD6zF38P1egXcWeTSWLUrQ"
[23] "OGnndGehSPklhKCj+CE8ndGqz2xePMrhu4UUHDxb6p5KnJ9RI2vLnK/nQ74WigvE"
[24] "O3scLwKBgQCY3sIEJG+voy1cURLhA8z+wYh0AdI7MxZpgMnSjJGpqsYLjNdmCGQH"
[25] "0y/ldqp284U4mWPsV2qYHq7I6cr0TCojnrsRDSMxjdDwlPu4QvbUxCteVOpMLaSH"
[26] "P9R2rFvCwC6nqLxhc2lwL2Smcs+KctV8iv7CRnApXqXFwhl/kikanA=="        
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a4 02 01 00 02 82 01 01 00 ab 9f 29 38 8a 07 9b f0 dc 3d e4 14
  [25] 27 1e 05 fe 1f 0c eb b6 c9 e2 cd fd 11 d1 9a 1c d4 90 99 8f e2 af 5b da
  [49] 71 65 bb fd df bf 37 a1 3c 50 7a fc ab 96 a2 c1 68 71 aa 99 64 36 92 8e
  [73] 0d 80 17 74 9f 94 74 17 6f f2 46 cd 2f c6 d6 dd 60 0f e6 58 2d fc c9 f9
  [97] 9d 66 83 7f f9 4d 78 f7 ef 58 56 9e 87 81 8e 89 e3 e4 28 e6 84 ed 4c 3a
 [121] 66 8c 88 60 1c 6e 86 0d 07 4b 1d 8e e4 ce de ce 24 ac f1 99 f8 31 8c f7
 [145] c7 a4 49 5d 7c c6 e9 df 31 03 65 f9 41 82 8b bc ba f0 73 38 67 14 d2 ea
 [169] 97 63 26 11 40 a1 ba d0 42 ad ff 5a 47 64 0c c3 d8 ee 4e fc d4 e4 86 4a
 [193] bc f6 44 8e a9 60 44 96 31 95 f6 0b 24 92 26 20 d1 2a cd e0 8e 42 17 2e
 [217] c3 c3 cb 3d eb 6a 5e a3 91 b2 52 b1 81 8e da 90 54 78 d1 5e f7 2c 61 46
 [241] be d7 f1 f8 ec 27 ae f5 92 dd 9b b8 d3 ff 21 6e bb 56 12 91 62 41 06 15
 [265] fa 0e 8e d3 02 03 01 00 01 02 82 01 00 20 91 f0 9b 3b ca cc e3 ed 90 4b
 [289] 58 2d c2 4b 65 da 53 b3 ea 39 2f 33 63 8b 3d a9 8f 3e 22 01 1a a6 ed 1b
 [313] b3 fd a0 4e 88 94 2d 70 6b c7 8c 08 83 2a 37 48 c5 06 c2 c7 9b 1b c3 25
 [337] 96 12 e6 d3 cc bc ba 4a 3b e6 71 66 d1 6a f7 43 f0 b8 59 dc 1f b0 fe 90
 [361] 00 30 c8 73 3d 56 bd 46 af 5a fb 7b 58 d3 a3 99 3e ff 02 5e 66 bd 24 61
 [385] ba 95 9a a7 09 02 6c 51 41 68 b8 6f 30 1e a9 49 ec 7a 56 5d f5 48 36 69
 [409] c3 2c a7 ae fe ea 69 17 93 9a f8 f8 3e 96 1d a6 c4 a2 e8 b3 8e 9f a6 1d
 [433] e4 8d 16 97 5d 5e e8 23 5f b8 5d eb f2 83 b9 2f 9c 62 6e 93 db a9 05 2a
 [457] 1f 79 d3 22 a6 98 dc 74 81 89 5e 7b ac c2 23 0e 45 21 03 78 62 85 c9 3f
 [481] 22 59 91 e3 0d d6 c5 84 16 4d b7 57 10 38 da 82 16 94 86 6d ac 5a 9d f8
 [505] 95 8e 95 31 05 96 12 db 4f 20 08 31 94 18 47 d8 15 72 02 32 28 31 a2 8c
 [529] bf 75 f4 12 35 02 81 81 00 e1 e0 76 c3 d3 be 80 37 2d 49 e6 e3 01 6d 69
 [553] d7 1d 75 a0 4f ba 26 09 9b 95 fb 4c f5 10 33 8b db fb 6a cb 41 76 97 47
 [577] f7 98 50 03 59 1d c1 77 46 da 16 12 e5 80 b9 dd a1 9e dd 94 f4 b6 3e 9e
 [601] 44 b6 e1 20 e4 fd 20 25 2b dc 61 65 65 2f 2b e2 50 73 f2 35 0b ce 55 9a
 [625] a5 df 6f d4 2b 14 e9 fa df d7 80 12 97 a2 64 3e 6d af 1f 7c 30 d8 05 b9
 [649] 16 47 b2 4c 78 6a 37 10 11 ea a8 53 a6 c8 34 ba 75 02 81 81 00 c2 82 67
 [673] 66 96 a1 09 23 cf c5 6c 30 cb 78 12 cd e5 d8 10 aa 26 ba 73 81 9a 18 e2
 [697] 64 bc ea 2a b8 b5 0f dd 16 69 c0 3d b5 fd 5f 1d ca e4 c6 26 03 7f 5a 8e
 [721] 43 78 58 97 42 97 fc 6f cd a7 c2 3a a2 91 0e 87 d1 75 d2 40 ed 4b 59 42
 [745] b3 0e fc 1d 80 83 bd 62 be b8 68 bb cc f0 7f 06 5f 83 7b 3d 25 e6 ae be
 [769] 06 d7 a6 00 fb 3d 05 dd 54 44 a1 0a 33 1d 73 bc 83 95 f7 d3 a7 4a 02 b6
 [793] 33 68 52 ab 27 02 81 80 75 61 fb 16 65 91 d8 7b d4 33 55 a3 9e f8 47 4a
 [817] 9d 6a a5 77 09 5b ff 1e 35 e1 34 eb 1e 12 4b 9a 74 9b d9 29 1a 02 20 4a
 [841] 51 83 33 5a 3a 96 71 f0 06 21 f6 8c 02 4b 95 1c 0a bd 48 4d ab ef fa bb
 [865] e6 f6 33 ec 0c 87 8a 09 b3 2b 82 50 05 25 9f 25 04 3c 58 c8 db df ac d0
 [889] 8a bf 48 d9 62 b2 fd c7 19 ec da bc a6 8d c5 cb a6 78 8c 47 ad db bb 86
 [913] 12 98 5c 19 2f c9 91 b6 5d e6 40 22 aa 64 8c 89 02 81 81 00 bc 5f 28 1e
 [937] 8d 30 45 b6 bd e8 17 40 26 3d 12 10 ff 50 41 cb 57 18 68 f6 91 b3 19 c5
 [961] af c3 24 3e 9f 73 4e 8c ff 3b 63 48 55 aa 01 23 56 6d a3 b0 ed 6c 58 ac
 [985] 74 e7 6f 0d da 3d 6a 55 83 eb 31 77 f0 fd 5e 81 77 16 79 34 96 2d 4a d0
[1009] 38 69 e7 74 67 a1 48 f9 25 84 a0 a3 f8 21 3c 9d d1 aa cf 6c 5e 3c ca e1
[1033] bb 85 14 1c 3c 5b ea 9e 4a 9c 9f 51 23 6b cb 9c af e7 43 be 16 8a 0b c4
[1057] 3b 7b 1c 2f 02 81 81 00 98 de c2 04 24 6f af a3 2d 5c 51 12 e1 03 cc fe
[1081] c1 88 74 01 d2 3b 33 16 69 80 c9 d2 8c 91 a9 aa c6 0b 8c d7 66 08 64 07
[1105] d3 2f e5 76 aa 76 f3 85 38 99 63 ec 57 6a 98 1e ae c8 e9 ca f4 4c 2a 23
[1129] 9e bb 11 0d 23 31 8d d0 f0 94 fb b8 42 f6 d4 c4 2b 5e 54 ea 4c 2d a4 87
[1153] 3f d4 76 ac 5b c2 c0 2e a7 a8 bc 61 73 69 70 2f 64 a6 72 cf 8a 72 d5 7c
[1177] 8a fe c2 46 70 29 5e a5 c5 c2 19 7f 92 29 1a 9c
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55cae1787750>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55cae1780fc0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAq58pOIoHm/DcPeQUJx4F"
[3] "/h8M67bJ4s39EdGaHNSQmY/ir1vacWW7/d+/N6E8UHr8q5aiwWhxqplkNpKODYAX"
[4] "dJ+UdBdv8kbNL8bW3WAP5lgt/Mn5nWaDf/lNePfvWFaeh4GOiePkKOaE7Uw6ZoyI"
[5] "YBxuhg0HSx2O5M7eziSs8Zn4MYz3x6RJXXzG6d8xA2X5QYKLvLrwczhnFNLql2Mm"
[6] "EUChutBCrf9aR2QMw9juTvzU5IZKvPZEjqlgRJYxlfYLJJImINEqzeCOQhcuw8PL"
[7] "PetqXqORslKxgY7akFR40V73LGFGvtfx+OwnrvWS3Zu40/8hbrtWEpFiQQYV+g6O"
[8] "0wIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 ab 9f 29 38 8a 07 9b f0 dc 3d e4 14 27 1e 05 fe 1f
 [51] 0c eb b6 c9 e2 cd fd 11 d1 9a 1c d4 90 99 8f e2 af 5b da 71 65 bb fd df bf
 [76] 37 a1 3c 50 7a fc ab 96 a2 c1 68 71 aa 99 64 36 92 8e 0d 80 17 74 9f 94 74
[101] 17 6f f2 46 cd 2f c6 d6 dd 60 0f e6 58 2d fc c9 f9 9d 66 83 7f f9 4d 78 f7
[126] ef 58 56 9e 87 81 8e 89 e3 e4 28 e6 84 ed 4c 3a 66 8c 88 60 1c 6e 86 0d 07
[151] 4b 1d 8e e4 ce de ce 24 ac f1 99 f8 31 8c f7 c7 a4 49 5d 7c c6 e9 df 31 03
[176] 65 f9 41 82 8b bc ba f0 73 38 67 14 d2 ea 97 63 26 11 40 a1 ba d0 42 ad ff
[201] 5a 47 64 0c c3 d8 ee 4e fc d4 e4 86 4a bc f6 44 8e a9 60 44 96 31 95 f6 0b
[226] 24 92 26 20 d1 2a cd e0 8e 42 17 2e c3 c3 cb 3d eb 6a 5e a3 91 b2 52 b1 81
[251] 8e da 90 54 78 d1 5e f7 2c 61 46 be d7 f1 f8 ec 27 ae f5 92 dd 9b b8 d3 ff
[276] 21 6e bb 56 12 91 62 41 06 15 fa 0e 8e d3 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55cae16eda40>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55cae16ef450>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
