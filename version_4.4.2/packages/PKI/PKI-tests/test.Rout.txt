
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEArouCLfV89j5ExJlFHyVEK4retLBLn6SBqRQJi0bSAzVF+iY9"
 [3] "WMWu3W0VL07PCUI0eGMNRWkVqfwM3eEWN1UiZr4KDpXgVmysM25tsyOmseW8of+1"
 [4] "QfIpRjkG5MEt/m4SEIRIpTcPPqDbV94MPqX5uD3ZMkICBsxoao2p8daiTV5Oe55u"
 [5] "d6nycP/d9gpe8R/OuQwIB5aMy1j+OjigZ462DnJBiYsRzjPjx+olQEZkRE0Lncqo"
 [6] "EpgvXsaV/twffjN+Cna0JF9i+FmQh2g3ouE0IbOwmQmMzSbB0eKafyN37Gd1naQa"
 [7] "QNFNvQdtchNP8oMxsMh8XtdYh/aYaa9ZUQnxPQIDAQABAoIBADAhmExEHalpkl0E"
 [8] "RuNHy3yWVsNMug3Tt02AkQEvDkqELj/Eu7X3DTlSEz1wZfcPophv+ADj8W1ma8Xj"
 [9] "g9TOTSY30V4kRjCO1w13rhhwBE+aImIpuTnuJSOQJi5+dshqYeDcGYw1mqaShOm9"
[10] "+XJtImeD5pjNSvHE/CYl2m8t2KOsoTLVgRH15OQIW+eTd9qv6E4I5E4KKQEIvMpp"
[11] "u3mUY1TPCNGWflhoM0qikii7UVfmpw7WOT9DTJeSMeGBCqasnC2z07fPXM/AxrfB"
[12] "bZ62deiEVFer2wTk5Wlutmy6afANbzWj17nMtdykM3repKK3nPHM8wYideOtKbMW"
[13] "pCiLAaECgYEA08oG1anUudKGM/dG87IFtY39C1O8d8CSdzyvPEhtq1uR3PtORc0A"
[14] "ZdTAkjEB3WPQrCp8XkVo7XcrbfS6DbNibRW5mzgysv7+ynbcVk3LMex/DWBCWRJG"
[15] "LNMiR21DGIegRnMmhqvvIvqi4MPJTDKx/NkpQq5yrR4e59a+njtfMcMCgYEA0vso"
[16] "e8zw43wtSMOA59D0NJ8y/bzThd423NiAIN+OVJHAlQy3pD5NuxrbMwbq25kXal15"
[17] "AqtZeQ2WQ0xi8hC/kugL1naAB1wYKRpKTXEh9J+V6hsymHb/QqHESvmc9qWbypqG"
[18] "c/9Ye4phmfP0HyeP77G+qUUcT8KlTCo5ROYVIP8CgYALn8ICRiD71fcxsPe+9l1j"
[19] "2pgx3/WvKO2hB76ic2M5jXwTAeQI5riH3kZ3f6MXkJvqZyaOUgbxSaIjldQEXn0f"
[20] "eZrHTy1RL7eySxXK0tg9NDrA9DCQDPW3DhuKig+tr/v3AejyaUtlwxXfej95JCsq"
[21] "soyWMVbv84BEvz+VFbMi2wKBgG0U5g18HF/BaDhivFceteQvG1INOt/P0FXGqhhU"
[22] "/WXEJenqNVh5zf6bGBH91ZfMQ0r/IP28UfpAiBwrdkzpU+NEjjpH8lHbz7IQobIA"
[23] "eCneCMiNX09s1vVAZhjNjdYIMdBCrJl0v+6/0U6jzuf8sHKhV4506PpkDMqgWhPB"
[24] "UdNJAoGAPJ4IKFsi8WWUiIGjF397YZbJMUaPPyCzMkAzzEP/JrHQDPsWDemOWKM5"
[25] "LA+7jNSjfQ5DJ0hevz2iNZvE171584rCfPqH8mXxCKjO8wwtqRaNDs5qBLdwGkiL"
[26] "HR8lpynITyl9zb6CwmYFYYzI+16j5n0J0maeVsDoKpNpplw0np8="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 ae 8b 82 2d f5 7c f6 3e 44 c4 99 45
  [25] 1f 25 44 2b 8a de b4 b0 4b 9f a4 81 a9 14 09 8b 46 d2 03 35 45 fa 26 3d
  [49] 58 c5 ae dd 6d 15 2f 4e cf 09 42 34 78 63 0d 45 69 15 a9 fc 0c dd e1 16
  [73] 37 55 22 66 be 0a 0e 95 e0 56 6c ac 33 6e 6d b3 23 a6 b1 e5 bc a1 ff b5
  [97] 41 f2 29 46 39 06 e4 c1 2d fe 6e 12 10 84 48 a5 37 0f 3e a0 db 57 de 0c
 [121] 3e a5 f9 b8 3d d9 32 42 02 06 cc 68 6a 8d a9 f1 d6 a2 4d 5e 4e 7b 9e 6e
 [145] 77 a9 f2 70 ff dd f6 0a 5e f1 1f ce b9 0c 08 07 96 8c cb 58 fe 3a 38 a0
 [169] 67 8e b6 0e 72 41 89 8b 11 ce 33 e3 c7 ea 25 40 46 64 44 4d 0b 9d ca a8
 [193] 12 98 2f 5e c6 95 fe dc 1f 7e 33 7e 0a 76 b4 24 5f 62 f8 59 90 87 68 37
 [217] a2 e1 34 21 b3 b0 99 09 8c cd 26 c1 d1 e2 9a 7f 23 77 ec 67 75 9d a4 1a
 [241] 40 d1 4d bd 07 6d 72 13 4f f2 83 31 b0 c8 7c 5e d7 58 87 f6 98 69 af 59
 [265] 51 09 f1 3d 02 03 01 00 01 02 82 01 00 30 21 98 4c 44 1d a9 69 92 5d 04
 [289] 46 e3 47 cb 7c 96 56 c3 4c ba 0d d3 b7 4d 80 91 01 2f 0e 4a 84 2e 3f c4
 [313] bb b5 f7 0d 39 52 13 3d 70 65 f7 0f a2 98 6f f8 00 e3 f1 6d 66 6b c5 e3
 [337] 83 d4 ce 4d 26 37 d1 5e 24 46 30 8e d7 0d 77 ae 18 70 04 4f 9a 22 62 29
 [361] b9 39 ee 25 23 90 26 2e 7e 76 c8 6a 61 e0 dc 19 8c 35 9a a6 92 84 e9 bd
 [385] f9 72 6d 22 67 83 e6 98 cd 4a f1 c4 fc 26 25 da 6f 2d d8 a3 ac a1 32 d5
 [409] 81 11 f5 e4 e4 08 5b e7 93 77 da af e8 4e 08 e4 4e 0a 29 01 08 bc ca 69
 [433] bb 79 94 63 54 cf 08 d1 96 7e 58 68 33 4a a2 92 28 bb 51 57 e6 a7 0e d6
 [457] 39 3f 43 4c 97 92 31 e1 81 0a a6 ac 9c 2d b3 d3 b7 cf 5c cf c0 c6 b7 c1
 [481] 6d 9e b6 75 e8 84 54 57 ab db 04 e4 e5 69 6e b6 6c ba 69 f0 0d 6f 35 a3
 [505] d7 b9 cc b5 dc a4 33 7a de a4 a2 b7 9c f1 cc f3 06 22 75 e3 ad 29 b3 16
 [529] a4 28 8b 01 a1 02 81 81 00 d3 ca 06 d5 a9 d4 b9 d2 86 33 f7 46 f3 b2 05
 [553] b5 8d fd 0b 53 bc 77 c0 92 77 3c af 3c 48 6d ab 5b 91 dc fb 4e 45 cd 00
 [577] 65 d4 c0 92 31 01 dd 63 d0 ac 2a 7c 5e 45 68 ed 77 2b 6d f4 ba 0d b3 62
 [601] 6d 15 b9 9b 38 32 b2 fe fe ca 76 dc 56 4d cb 31 ec 7f 0d 60 42 59 12 46
 [625] 2c d3 22 47 6d 43 18 87 a0 46 73 26 86 ab ef 22 fa a2 e0 c3 c9 4c 32 b1
 [649] fc d9 29 42 ae 72 ad 1e 1e e7 d6 be 9e 3b 5f 31 c3 02 81 81 00 d2 fb 28
 [673] 7b cc f0 e3 7c 2d 48 c3 80 e7 d0 f4 34 9f 32 fd bc d3 85 de 36 dc d8 80
 [697] 20 df 8e 54 91 c0 95 0c b7 a4 3e 4d bb 1a db 33 06 ea db 99 17 6a 5d 79
 [721] 02 ab 59 79 0d 96 43 4c 62 f2 10 bf 92 e8 0b d6 76 80 07 5c 18 29 1a 4a
 [745] 4d 71 21 f4 9f 95 ea 1b 32 98 76 ff 42 a1 c4 4a f9 9c f6 a5 9b ca 9a 86
 [769] 73 ff 58 7b 8a 61 99 f3 f4 1f 27 8f ef b1 be a9 45 1c 4f c2 a5 4c 2a 39
 [793] 44 e6 15 20 ff 02 81 80 0b 9f c2 02 46 20 fb d5 f7 31 b0 f7 be f6 5d 63
 [817] da 98 31 df f5 af 28 ed a1 07 be a2 73 63 39 8d 7c 13 01 e4 08 e6 b8 87
 [841] de 46 77 7f a3 17 90 9b ea 67 26 8e 52 06 f1 49 a2 23 95 d4 04 5e 7d 1f
 [865] 79 9a c7 4f 2d 51 2f b7 b2 4b 15 ca d2 d8 3d 34 3a c0 f4 30 90 0c f5 b7
 [889] 0e 1b 8a 8a 0f ad af fb f7 01 e8 f2 69 4b 65 c3 15 df 7a 3f 79 24 2b 2a
 [913] b2 8c 96 31 56 ef f3 80 44 bf 3f 95 15 b3 22 db 02 81 80 6d 14 e6 0d 7c
 [937] 1c 5f c1 68 38 62 bc 57 1e b5 e4 2f 1b 52 0d 3a df cf d0 55 c6 aa 18 54
 [961] fd 65 c4 25 e9 ea 35 58 79 cd fe 9b 18 11 fd d5 97 cc 43 4a ff 20 fd bc
 [985] 51 fa 40 88 1c 2b 76 4c e9 53 e3 44 8e 3a 47 f2 51 db cf b2 10 a1 b2 00
[1009] 78 29 de 08 c8 8d 5f 4f 6c d6 f5 40 66 18 cd 8d d6 08 31 d0 42 ac 99 74
[1033] bf ee bf d1 4e a3 ce e7 fc b0 72 a1 57 8e 74 e8 fa 64 0c ca a0 5a 13 c1
[1057] 51 d3 49 02 81 80 3c 9e 08 28 5b 22 f1 65 94 88 81 a3 17 7f 7b 61 96 c9
[1081] 31 46 8f 3f 20 b3 32 40 33 cc 43 ff 26 b1 d0 0c fb 16 0d e9 8e 58 a3 39
[1105] 2c 0f bb 8c d4 a3 7d 0e 43 27 48 5e bf 3d a2 35 9b c4 d7 bd 79 f3 8a c2
[1129] 7c fa 87 f2 65 f1 08 a8 ce f3 0c 2d a9 16 8d 0e ce 6a 04 b7 70 1a 48 8b
[1153] 1d 1f 25 a7 29 c8 4f 29 7d cd be 82 c2 66 05 61 8c c8 fb 5e a3 e6 7d 09
[1177] d2 66 9e 56 c0 e8 2a 93 69 a6 5c 34 9e 9f
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x55d2993eb5d0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55d2993e4ea0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArouCLfV89j5ExJlFHyVE"
[3] "K4retLBLn6SBqRQJi0bSAzVF+iY9WMWu3W0VL07PCUI0eGMNRWkVqfwM3eEWN1Ui"
[4] "Zr4KDpXgVmysM25tsyOmseW8of+1QfIpRjkG5MEt/m4SEIRIpTcPPqDbV94MPqX5"
[5] "uD3ZMkICBsxoao2p8daiTV5Oe55ud6nycP/d9gpe8R/OuQwIB5aMy1j+OjigZ462"
[6] "DnJBiYsRzjPjx+olQEZkRE0LncqoEpgvXsaV/twffjN+Cna0JF9i+FmQh2g3ouE0"
[7] "IbOwmQmMzSbB0eKafyN37Gd1naQaQNFNvQdtchNP8oMxsMh8XtdYh/aYaa9ZUQnx"
[8] "PQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 ae 8b 82 2d f5 7c f6 3e 44 c4 99 45 1f 25 44 2b 8a
 [51] de b4 b0 4b 9f a4 81 a9 14 09 8b 46 d2 03 35 45 fa 26 3d 58 c5 ae dd 6d 15
 [76] 2f 4e cf 09 42 34 78 63 0d 45 69 15 a9 fc 0c dd e1 16 37 55 22 66 be 0a 0e
[101] 95 e0 56 6c ac 33 6e 6d b3 23 a6 b1 e5 bc a1 ff b5 41 f2 29 46 39 06 e4 c1
[126] 2d fe 6e 12 10 84 48 a5 37 0f 3e a0 db 57 de 0c 3e a5 f9 b8 3d d9 32 42 02
[151] 06 cc 68 6a 8d a9 f1 d6 a2 4d 5e 4e 7b 9e 6e 77 a9 f2 70 ff dd f6 0a 5e f1
[176] 1f ce b9 0c 08 07 96 8c cb 58 fe 3a 38 a0 67 8e b6 0e 72 41 89 8b 11 ce 33
[201] e3 c7 ea 25 40 46 64 44 4d 0b 9d ca a8 12 98 2f 5e c6 95 fe dc 1f 7e 33 7e
[226] 0a 76 b4 24 5f 62 f8 59 90 87 68 37 a2 e1 34 21 b3 b0 99 09 8c cd 26 c1 d1
[251] e2 9a 7f 23 77 ec 67 75 9d a4 1a 40 d1 4d bd 07 6d 72 13 4f f2 83 31 b0 c8
[276] 7c 5e d7 58 87 f6 98 69 af 59 51 09 f1 3d 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x55d2993519c0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x55d2993533d0>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
