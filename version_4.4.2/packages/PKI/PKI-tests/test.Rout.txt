
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEAvk4L+MS0sAUqy6QmdA/sGADoqB4YjvjbIbz8lsbEWM3GLW3K"
 [3] "Fhqg/46vr3tAxDZGPv8dSQL4XiLvJo7lE5KXzUKHl3SbeTQ3jEE3DyH33u167tSL"
 [4] "tkfXeUSniF5jcSjFtWaNK/8i53W3Zpd3jFs0ir3J2LEh9B+N82nbBhdVDLrlD9Qy"
 [5] "/PZ3sejUfZg9k9XtaWhzVo6W2ssy2hvNJ5iM3EzPqU4InLfe6NtSV926ES6dufeU"
 [6] "mQ6d2qgcRFxSfWkNr4tdP1c5uvgfRoiz/pwbA20dj93cRz0loajrLxQRUJkQOzD3"
 [7] "CgO5LEpCAqPFL1SoKiJXP/5JSJuommsrRvfbpwIDAQABAoIBAAzzasUnPdSsxVjO"
 [8] "dv93Be4sQakPQ0SXkvIc1mO8ayhP+KimzBXtAf/iSfp7PNEdkHJBElEhrp1Za0UI"
 [9] "fHZ0h3gkiu23tcztzMnytjiFa0T0jGUsecWR5gwOrAgPxFyzFaFetUTFPC7cR/rn"
[10] "W+9lVZILkGz6wQDIFPT3wzwK4nLXNulBsxVuO576ieI1HhrQqmxp6AGLtv2+RFkB"
[11] "XcA9dschTqLvCybsgqBjgkTHU69Cx9l9zxL7xMT5MlyZ6xIe/cHRDAzt5fINiUfZ"
[12] "yn9GBv7hO4z4fYPxRITHpqvhMY9+z0qtODncMXLNZ3HiMVD64cZBPslJg2+SnA04"
[13] "blbB2EECgYEA+/Ptj627VhNfQ47Tdg5LfqV5gYykLuCtbo+mbzYea3/fMrgWu9am"
[14] "0qHsIK+xECK9oeqColnL+MUH97xAXt5VXp0jOgJiHDRB+GiI64JvhZoCCPPZCpTJ"
[15] "IsP8DopooNIPnyDuEkbkb/SZngBBpfJZSZwjQkoXmhJHX6vLnIDHW88CgYEAwVyc"
[16] "sDeByWJ9HlI9wj6qgUz7xx2BOF3rIrJeBP9MRHSH6k1q1uC4GutusnGrJRN+lLS6"
[17] "e0VL18heSWS8OpB+dATt4purP/fuq7lRJ7Tat5HQbDBV9ByYuFvxiu8REWbeAL6f"
[18] "e+OzalZKzOsZnZBQZDq1jR+rovs0n0UnRkSvwKkCgYEAlOkQiRC3XiJI9ZbeqDG+"
[19] "sPWAIO9MwmAMYQIJ7kTgKc0Dz+g5l39ATdFhy9fLIKxHxADkgKvt//QDx4m9ydRC"
[20] "RI8/GLP75IuGShkOg5Mt8pqZhU0KBFT3o9KNkNKBEDvW+8fsrWS08u5wNJAWPMxF"
[21] "tVnRBQbheDBBeuwAhVkfesUCgYA0r4heF3G8rqJK3bvILo0E2DYORgLMmgKUnKcz"
[22] "k2BzkpDqDZgb3nUrmJS7+G7allo6KJhbOEF3FThjpRgImRBrimBLC4F415RnpAHx"
[23] "4LxrokZ5BB6Xeic+rIa/BW7QIAhDia0o850ST1roRPLg1M6i0MBhKIz6xpnK/+u4"
[24] "oMSGqQKBgHdpQYHsoeFC/XsBtjsPc5WSQzfZOWNqMxLcaONSzD+dZ46qbWc/k2Nv"
[25] "pLcFbh0GrvzRf6JkRC9GAsUHrqhNkXWvaKq1kA06gWfZ5j+CC7ht9orJpoTC2h/w"
[26] "sycZYWs7zibe+WMR86OcPPawkgcOItAR3MWXJ244aAFOqVEHf6DG"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 be 4e 0b f8 c4 b4 b0 05 2a cb a4 26
  [25] 74 0f ec 18 00 e8 a8 1e 18 8e f8 db 21 bc fc 96 c6 c4 58 cd c6 2d 6d ca
  [49] 16 1a a0 ff 8e af af 7b 40 c4 36 46 3e ff 1d 49 02 f8 5e 22 ef 26 8e e5
  [73] 13 92 97 cd 42 87 97 74 9b 79 34 37 8c 41 37 0f 21 f7 de ed 7a ee d4 8b
  [97] b6 47 d7 79 44 a7 88 5e 63 71 28 c5 b5 66 8d 2b ff 22 e7 75 b7 66 97 77
 [121] 8c 5b 34 8a bd c9 d8 b1 21 f4 1f 8d f3 69 db 06 17 55 0c ba e5 0f d4 32
 [145] fc f6 77 b1 e8 d4 7d 98 3d 93 d5 ed 69 68 73 56 8e 96 da cb 32 da 1b cd
 [169] 27 98 8c dc 4c cf a9 4e 08 9c b7 de e8 db 52 57 dd ba 11 2e 9d b9 f7 94
 [193] 99 0e 9d da a8 1c 44 5c 52 7d 69 0d af 8b 5d 3f 57 39 ba f8 1f 46 88 b3
 [217] fe 9c 1b 03 6d 1d 8f dd dc 47 3d 25 a1 a8 eb 2f 14 11 50 99 10 3b 30 f7
 [241] 0a 03 b9 2c 4a 42 02 a3 c5 2f 54 a8 2a 22 57 3f fe 49 48 9b a8 9a 6b 2b
 [265] 46 f7 db a7 02 03 01 00 01 02 82 01 00 0c f3 6a c5 27 3d d4 ac c5 58 ce
 [289] 76 ff 77 05 ee 2c 41 a9 0f 43 44 97 92 f2 1c d6 63 bc 6b 28 4f f8 a8 a6
 [313] cc 15 ed 01 ff e2 49 fa 7b 3c d1 1d 90 72 41 12 51 21 ae 9d 59 6b 45 08
 [337] 7c 76 74 87 78 24 8a ed b7 b5 cc ed cc c9 f2 b6 38 85 6b 44 f4 8c 65 2c
 [361] 79 c5 91 e6 0c 0e ac 08 0f c4 5c b3 15 a1 5e b5 44 c5 3c 2e dc 47 fa e7
 [385] 5b ef 65 55 92 0b 90 6c fa c1 00 c8 14 f4 f7 c3 3c 0a e2 72 d7 36 e9 41
 [409] b3 15 6e 3b 9e fa 89 e2 35 1e 1a d0 aa 6c 69 e8 01 8b b6 fd be 44 59 01
 [433] 5d c0 3d 76 c7 21 4e a2 ef 0b 26 ec 82 a0 63 82 44 c7 53 af 42 c7 d9 7d
 [457] cf 12 fb c4 c4 f9 32 5c 99 eb 12 1e fd c1 d1 0c 0c ed e5 f2 0d 89 47 d9
 [481] ca 7f 46 06 fe e1 3b 8c f8 7d 83 f1 44 84 c7 a6 ab e1 31 8f 7e cf 4a ad
 [505] 38 39 dc 31 72 cd 67 71 e2 31 50 fa e1 c6 41 3e c9 49 83 6f 92 9c 0d 38
 [529] 6e 56 c1 d8 41 02 81 81 00 fb f3 ed 8f ad bb 56 13 5f 43 8e d3 76 0e 4b
 [553] 7e a5 79 81 8c a4 2e e0 ad 6e 8f a6 6f 36 1e 6b 7f df 32 b8 16 bb d6 a6
 [577] d2 a1 ec 20 af b1 10 22 bd a1 ea 82 a2 59 cb f8 c5 07 f7 bc 40 5e de 55
 [601] 5e 9d 23 3a 02 62 1c 34 41 f8 68 88 eb 82 6f 85 9a 02 08 f3 d9 0a 94 c9
 [625] 22 c3 fc 0e 8a 68 a0 d2 0f 9f 20 ee 12 46 e4 6f f4 99 9e 00 41 a5 f2 59
 [649] 49 9c 23 42 4a 17 9a 12 47 5f ab cb 9c 80 c7 5b cf 02 81 81 00 c1 5c 9c
 [673] b0 37 81 c9 62 7d 1e 52 3d c2 3e aa 81 4c fb c7 1d 81 38 5d eb 22 b2 5e
 [697] 04 ff 4c 44 74 87 ea 4d 6a d6 e0 b8 1a eb 6e b2 71 ab 25 13 7e 94 b4 ba
 [721] 7b 45 4b d7 c8 5e 49 64 bc 3a 90 7e 74 04 ed e2 9b ab 3f f7 ee ab b9 51
 [745] 27 b4 da b7 91 d0 6c 30 55 f4 1c 98 b8 5b f1 8a ef 11 11 66 de 00 be 9f
 [769] 7b e3 b3 6a 56 4a cc eb 19 9d 90 50 64 3a b5 8d 1f ab a2 fb 34 9f 45 27
 [793] 46 44 af c0 a9 02 81 81 00 94 e9 10 89 10 b7 5e 22 48 f5 96 de a8 31 be
 [817] b0 f5 80 20 ef 4c c2 60 0c 61 02 09 ee 44 e0 29 cd 03 cf e8 39 97 7f 40
 [841] 4d d1 61 cb d7 cb 20 ac 47 c4 00 e4 80 ab ed ff f4 03 c7 89 bd c9 d4 42
 [865] 44 8f 3f 18 b3 fb e4 8b 86 4a 19 0e 83 93 2d f2 9a 99 85 4d 0a 04 54 f7
 [889] a3 d2 8d 90 d2 81 10 3b d6 fb c7 ec ad 64 b4 f2 ee 70 34 90 16 3c cc 45
 [913] b5 59 d1 05 06 e1 78 30 41 7a ec 00 85 59 1f 7a c5 02 81 80 34 af 88 5e
 [937] 17 71 bc ae a2 4a dd bb c8 2e 8d 04 d8 36 0e 46 02 cc 9a 02 94 9c a7 33
 [961] 93 60 73 92 90 ea 0d 98 1b de 75 2b 98 94 bb f8 6e da 96 5a 3a 28 98 5b
 [985] 38 41 77 15 38 63 a5 18 08 99 10 6b 8a 60 4b 0b 81 78 d7 94 67 a4 01 f1
[1009] e0 bc 6b a2 46 79 04 1e 97 7a 27 3e ac 86 bf 05 6e d0 20 08 43 89 ad 28
[1033] f3 9d 12 4f 5a e8 44 f2 e0 d4 ce a2 d0 c0 61 28 8c fa c6 99 ca ff eb b8
[1057] a0 c4 86 a9 02 81 80 77 69 41 81 ec a1 e1 42 fd 7b 01 b6 3b 0f 73 95 92
[1081] 43 37 d9 39 63 6a 33 12 dc 68 e3 52 cc 3f 9d 67 8e aa 6d 67 3f 93 63 6f
[1105] a4 b7 05 6e 1d 06 ae fc d1 7f a2 64 44 2f 46 02 c5 07 ae a8 4d 91 75 af
[1129] 68 aa b5 90 0d 3a 81 67 d9 e6 3f 82 0b b8 6d f6 8a c9 a6 84 c2 da 1f f0
[1153] b3 27 19 61 6b 3b ce 26 de f9 63 11 f3 a3 9c 3c f6 b0 92 07 0e 22 d0 11
[1177] dc c5 97 27 6e 38 68 01 4e a9 51 07 7f a0 c6
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x557c72f24740>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x557c72f1dfb0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvk4L+MS0sAUqy6QmdA/s"
[3] "GADoqB4YjvjbIbz8lsbEWM3GLW3KFhqg/46vr3tAxDZGPv8dSQL4XiLvJo7lE5KX"
[4] "zUKHl3SbeTQ3jEE3DyH33u167tSLtkfXeUSniF5jcSjFtWaNK/8i53W3Zpd3jFs0"
[5] "ir3J2LEh9B+N82nbBhdVDLrlD9Qy/PZ3sejUfZg9k9XtaWhzVo6W2ssy2hvNJ5iM"
[6] "3EzPqU4InLfe6NtSV926ES6dufeUmQ6d2qgcRFxSfWkNr4tdP1c5uvgfRoiz/pwb"
[7] "A20dj93cRz0loajrLxQRUJkQOzD3CgO5LEpCAqPFL1SoKiJXP/5JSJuommsrRvfb"
[8] "pwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 be 4e 0b f8 c4 b4 b0 05 2a cb a4 26 74 0f ec 18 00
 [51] e8 a8 1e 18 8e f8 db 21 bc fc 96 c6 c4 58 cd c6 2d 6d ca 16 1a a0 ff 8e af
 [76] af 7b 40 c4 36 46 3e ff 1d 49 02 f8 5e 22 ef 26 8e e5 13 92 97 cd 42 87 97
[101] 74 9b 79 34 37 8c 41 37 0f 21 f7 de ed 7a ee d4 8b b6 47 d7 79 44 a7 88 5e
[126] 63 71 28 c5 b5 66 8d 2b ff 22 e7 75 b7 66 97 77 8c 5b 34 8a bd c9 d8 b1 21
[151] f4 1f 8d f3 69 db 06 17 55 0c ba e5 0f d4 32 fc f6 77 b1 e8 d4 7d 98 3d 93
[176] d5 ed 69 68 73 56 8e 96 da cb 32 da 1b cd 27 98 8c dc 4c cf a9 4e 08 9c b7
[201] de e8 db 52 57 dd ba 11 2e 9d b9 f7 94 99 0e 9d da a8 1c 44 5c 52 7d 69 0d
[226] af 8b 5d 3f 57 39 ba f8 1f 46 88 b3 fe 9c 1b 03 6d 1d 8f dd dc 47 3d 25 a1
[251] a8 eb 2f 14 11 50 99 10 3b 30 f7 0a 03 b9 2c 4a 42 02 a3 c5 2f 54 a8 2a 22
[276] 57 3f fe 49 48 9b a8 9a 6b 2b 46 f7 db a7 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x557c72e8aa40>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x557c72e8c450>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
