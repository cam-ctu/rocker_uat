
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEAkfezXSIvFn3afPygjHAl/3V1dLq8WNx0bERoxtfcfI2QT3Rw"
 [3] "k3+9h5CWOEdq3USPRrJRociZEZ0qyG94Q2WuW2kCvT6n+KPmprQM+Xj8Af0PwRR8"
 [4] "7VfeMXDUclsIF8Sir/zSS0GZutF7//LPcSyyrRKuGlxm2Je1s6Vpm/+bSi3nYZIS"
 [5] "lmJZgVt6d45pGr4WKbu+ydZs7relWd4RVNNT/vmilz5ij9F9H9I83OGbIVdO1yCM"
 [6] "ZuM+nRUWymuoySqtNZ8zmYnfBFLGFRXj+CwCPFhgDkDgeE+N/e0qBt7luk370e8h"
 [7] "Yfs6JU5TrerRSNGMFJ/zdD3mTrim3qKoN42RrQIDAQABAoIBABgIo6MKUZv/sWWi"
 [8] "d/HftlXzWllTtNbhx5abBfB1kuN8MJ5wgue6YPPNCfruwWj41Kl0i23auF9W1DhH"
 [9] "6FKaj6ST7ARKaIBPRlc87qT193KBXyJws+glb1uPIx/IHtNBCHN3Ko4DGWOSAfuA"
[10] "2IifLjVCjeGfxLxVcHDJo9OweLp0CC5ObNDSYJLA190ED+JnwrbXPGOfILxwhzZf"
[11] "cscVMxnR/hd4S/74DjMOaLh9DydRHqAb0EG6Oat+ruWC5t7DIGIGyuBsEf6ccRyy"
[12] "JwYmb+UTSMhlxf3IqpiBFSMlkkcHpR55PNJzkVeyPy53Cwc4GEcsvrU6wLE72pjx"
[13] "y9EXogkCgYEAzWvPJQMposAnfhGOiTC/D6ThkIxftfHLcJsxsJ4Ov3lHef1Kx4DT"
[14] "hacF4T9tDLwDSz0tjkMqMdNu90svi6y7LLv+9/5uXYM126+DzV8Rd2Qo6YtQqnDe"
[15] "eD5wubz/x1r0Ib5Zzkesi+9Oe8qNEUzpuHYYzCpP8+4BCJgumSD53LkCgYEAtehj"
[16] "87IqOhf+U0p/zAWwx+KXzqXEGBU3Osp12z3pjj2n3U1d/a9UY6mhsIgdZZBT0di/"
[17] "hU5ij37zjg1h0GI5zJD3WAQonw3jCp9hPDwnZM8DBnhwaZFyUksoNAAYxRKlqhR5"
[18] "8i4Bv5aknAuStsdfKhrOQdSlEADlE9alAdvX6pUCgYEAts2W5FghKC0Zt+3Fyz5u"
[19] "+GwBM1JIJjDLmyTwnjy54Rj7S4rljg6NraWJ7P41fBygTcdej/gjR33hhP4KjKCl"
[20] "XNTbvDNWYa9PMXXKs+tDLt0aL2MD4PlacOUYCaIweGbvVEwBvTk5SromPLFuwhOQ"
[21] "9c9al+2bgvatQsmyxiB7WjkCgYB/sZuAdWAJGdCxPUnKuW/oUNsJ9/lYgoQbpAXp"
[22] "mmN6MzPEOMwzCcHumCRlnJcuNYtxcnq3JFgxrQdhf2lbc6hpPpYy1fCB/qiTS2Bh"
[23] "fUSWEm9oOmGG6c/bjuCw6CR7KuTaKLeV1s/pYuE4nTMnVXsrPlfthE0+l7I3I+T/"
[24] "EglWpQKBgCxdgMZQ9TeYUopDnWzSoCbqqVDwjmD3p9835GzzcLyycGIxFezlf3sF"
[25] "TPJ3WP/bXBGYsE7eL6c6pAjFFyPhEkILLhocoSbBzAeWIS5o7sT3sQmXoijglHUa"
[26] "a8b8GUGWngsbyR+AhI4ZQcKDNpJJytAlar1kOH+iDCDqZNiD8F5N"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 91 f7 b3 5d 22 2f 16 7d da 7c fc a0
  [25] 8c 70 25 ff 75 75 74 ba bc 58 dc 74 6c 44 68 c6 d7 dc 7c 8d 90 4f 74 70
  [49] 93 7f bd 87 90 96 38 47 6a dd 44 8f 46 b2 51 a1 c8 99 11 9d 2a c8 6f 78
  [73] 43 65 ae 5b 69 02 bd 3e a7 f8 a3 e6 a6 b4 0c f9 78 fc 01 fd 0f c1 14 7c
  [97] ed 57 de 31 70 d4 72 5b 08 17 c4 a2 af fc d2 4b 41 99 ba d1 7b ff f2 cf
 [121] 71 2c b2 ad 12 ae 1a 5c 66 d8 97 b5 b3 a5 69 9b ff 9b 4a 2d e7 61 92 12
 [145] 96 62 59 81 5b 7a 77 8e 69 1a be 16 29 bb be c9 d6 6c ee b7 a5 59 de 11
 [169] 54 d3 53 fe f9 a2 97 3e 62 8f d1 7d 1f d2 3c dc e1 9b 21 57 4e d7 20 8c
 [193] 66 e3 3e 9d 15 16 ca 6b a8 c9 2a ad 35 9f 33 99 89 df 04 52 c6 15 15 e3
 [217] f8 2c 02 3c 58 60 0e 40 e0 78 4f 8d fd ed 2a 06 de e5 ba 4d fb d1 ef 21
 [241] 61 fb 3a 25 4e 53 ad ea d1 48 d1 8c 14 9f f3 74 3d e6 4e b8 a6 de a2 a8
 [265] 37 8d 91 ad 02 03 01 00 01 02 82 01 00 18 08 a3 a3 0a 51 9b ff b1 65 a2
 [289] 77 f1 df b6 55 f3 5a 59 53 b4 d6 e1 c7 96 9b 05 f0 75 92 e3 7c 30 9e 70
 [313] 82 e7 ba 60 f3 cd 09 fa ee c1 68 f8 d4 a9 74 8b 6d da b8 5f 56 d4 38 47
 [337] e8 52 9a 8f a4 93 ec 04 4a 68 80 4f 46 57 3c ee a4 f5 f7 72 81 5f 22 70
 [361] b3 e8 25 6f 5b 8f 23 1f c8 1e d3 41 08 73 77 2a 8e 03 19 63 92 01 fb 80
 [385] d8 88 9f 2e 35 42 8d e1 9f c4 bc 55 70 70 c9 a3 d3 b0 78 ba 74 08 2e 4e
 [409] 6c d0 d2 60 92 c0 d7 dd 04 0f e2 67 c2 b6 d7 3c 63 9f 20 bc 70 87 36 5f
 [433] 72 c7 15 33 19 d1 fe 17 78 4b fe f8 0e 33 0e 68 b8 7d 0f 27 51 1e a0 1b
 [457] d0 41 ba 39 ab 7e ae e5 82 e6 de c3 20 62 06 ca e0 6c 11 fe 9c 71 1c b2
 [481] 27 06 26 6f e5 13 48 c8 65 c5 fd c8 aa 98 81 15 23 25 92 47 07 a5 1e 79
 [505] 3c d2 73 91 57 b2 3f 2e 77 0b 07 38 18 47 2c be b5 3a c0 b1 3b da 98 f1
 [529] cb d1 17 a2 09 02 81 81 00 cd 6b cf 25 03 29 a2 c0 27 7e 11 8e 89 30 bf
 [553] 0f a4 e1 90 8c 5f b5 f1 cb 70 9b 31 b0 9e 0e bf 79 47 79 fd 4a c7 80 d3
 [577] 85 a7 05 e1 3f 6d 0c bc 03 4b 3d 2d 8e 43 2a 31 d3 6e f7 4b 2f 8b ac bb
 [601] 2c bb fe f7 fe 6e 5d 83 35 db af 83 cd 5f 11 77 64 28 e9 8b 50 aa 70 de
 [625] 78 3e 70 b9 bc ff c7 5a f4 21 be 59 ce 47 ac 8b ef 4e 7b ca 8d 11 4c e9
 [649] b8 76 18 cc 2a 4f f3 ee 01 08 98 2e 99 20 f9 dc b9 02 81 81 00 b5 e8 63
 [673] f3 b2 2a 3a 17 fe 53 4a 7f cc 05 b0 c7 e2 97 ce a5 c4 18 15 37 3a ca 75
 [697] db 3d e9 8e 3d a7 dd 4d 5d fd af 54 63 a9 a1 b0 88 1d 65 90 53 d1 d8 bf
 [721] 85 4e 62 8f 7e f3 8e 0d 61 d0 62 39 cc 90 f7 58 04 28 9f 0d e3 0a 9f 61
 [745] 3c 3c 27 64 cf 03 06 78 70 69 91 72 52 4b 28 34 00 18 c5 12 a5 aa 14 79
 [769] f2 2e 01 bf 96 a4 9c 0b 92 b6 c7 5f 2a 1a ce 41 d4 a5 10 00 e5 13 d6 a5
 [793] 01 db d7 ea 95 02 81 81 00 b6 cd 96 e4 58 21 28 2d 19 b7 ed c5 cb 3e 6e
 [817] f8 6c 01 33 52 48 26 30 cb 9b 24 f0 9e 3c b9 e1 18 fb 4b 8a e5 8e 0e 8d
 [841] ad a5 89 ec fe 35 7c 1c a0 4d c7 5e 8f f8 23 47 7d e1 84 fe 0a 8c a0 a5
 [865] 5c d4 db bc 33 56 61 af 4f 31 75 ca b3 eb 43 2e dd 1a 2f 63 03 e0 f9 5a
 [889] 70 e5 18 09 a2 30 78 66 ef 54 4c 01 bd 39 39 4a ba 26 3c b1 6e c2 13 90
 [913] f5 cf 5a 97 ed 9b 82 f6 ad 42 c9 b2 c6 20 7b 5a 39 02 81 80 7f b1 9b 80
 [937] 75 60 09 19 d0 b1 3d 49 ca b9 6f e8 50 db 09 f7 f9 58 82 84 1b a4 05 e9
 [961] 9a 63 7a 33 33 c4 38 cc 33 09 c1 ee 98 24 65 9c 97 2e 35 8b 71 72 7a b7
 [985] 24 58 31 ad 07 61 7f 69 5b 73 a8 69 3e 96 32 d5 f0 81 fe a8 93 4b 60 61
[1009] 7d 44 96 12 6f 68 3a 61 86 e9 cf db 8e e0 b0 e8 24 7b 2a e4 da 28 b7 95
[1033] d6 cf e9 62 e1 38 9d 33 27 55 7b 2b 3e 57 ed 84 4d 3e 97 b2 37 23 e4 ff
[1057] 12 09 56 a5 02 81 80 2c 5d 80 c6 50 f5 37 98 52 8a 43 9d 6c d2 a0 26 ea
[1081] a9 50 f0 8e 60 f7 a7 df 37 e4 6c f3 70 bc b2 70 62 31 15 ec e5 7f 7b 05
[1105] 4c f2 77 58 ff db 5c 11 98 b0 4e de 2f a7 3a a4 08 c5 17 23 e1 12 42 0b
[1129] 2e 1a 1c a1 26 c1 cc 07 96 21 2e 68 ee c4 f7 b1 09 97 a2 28 e0 94 75 1a
[1153] 6b c6 fc 19 41 96 9e 0b 1b c9 1f 80 84 8e 19 41 c2 83 36 92 49 ca d0 25
[1177] 6a bd 64 38 7f a2 0c 20 ea 64 d8 83 f0 5e 4d
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x562c4d4be750>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x562c4d4b7fc0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkfezXSIvFn3afPygjHAl"
[3] "/3V1dLq8WNx0bERoxtfcfI2QT3Rwk3+9h5CWOEdq3USPRrJRociZEZ0qyG94Q2Wu"
[4] "W2kCvT6n+KPmprQM+Xj8Af0PwRR87VfeMXDUclsIF8Sir/zSS0GZutF7//LPcSyy"
[5] "rRKuGlxm2Je1s6Vpm/+bSi3nYZISlmJZgVt6d45pGr4WKbu+ydZs7relWd4RVNNT"
[6] "/vmilz5ij9F9H9I83OGbIVdO1yCMZuM+nRUWymuoySqtNZ8zmYnfBFLGFRXj+CwC"
[7] "PFhgDkDgeE+N/e0qBt7luk370e8hYfs6JU5TrerRSNGMFJ/zdD3mTrim3qKoN42R"
[8] "rQIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 91 f7 b3 5d 22 2f 16 7d da 7c fc a0 8c 70 25 ff 75
 [51] 75 74 ba bc 58 dc 74 6c 44 68 c6 d7 dc 7c 8d 90 4f 74 70 93 7f bd 87 90 96
 [76] 38 47 6a dd 44 8f 46 b2 51 a1 c8 99 11 9d 2a c8 6f 78 43 65 ae 5b 69 02 bd
[101] 3e a7 f8 a3 e6 a6 b4 0c f9 78 fc 01 fd 0f c1 14 7c ed 57 de 31 70 d4 72 5b
[126] 08 17 c4 a2 af fc d2 4b 41 99 ba d1 7b ff f2 cf 71 2c b2 ad 12 ae 1a 5c 66
[151] d8 97 b5 b3 a5 69 9b ff 9b 4a 2d e7 61 92 12 96 62 59 81 5b 7a 77 8e 69 1a
[176] be 16 29 bb be c9 d6 6c ee b7 a5 59 de 11 54 d3 53 fe f9 a2 97 3e 62 8f d1
[201] 7d 1f d2 3c dc e1 9b 21 57 4e d7 20 8c 66 e3 3e 9d 15 16 ca 6b a8 c9 2a ad
[226] 35 9f 33 99 89 df 04 52 c6 15 15 e3 f8 2c 02 3c 58 60 0e 40 e0 78 4f 8d fd
[251] ed 2a 06 de e5 ba 4d fb d1 ef 21 61 fb 3a 25 4e 53 ad ea d1 48 d1 8c 14 9f
[276] f3 74 3d e6 4e b8 a6 de a2 a8 37 8d 91 ad 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x562c4d424a40>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x562c4d426450>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
