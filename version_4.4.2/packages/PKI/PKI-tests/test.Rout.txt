
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEogIBAAKCAQEApvnayD0ZZffpielLN83svViGX/vzXMx0SFjOqqmX6ukrIfMQ"
 [3] "VlCNn7jI7vqMxRTqQZUaeBqStTGxheWlb+O1KLzEu6++h7bdKzdchVZRdXgVeNCw"
 [4] "B2XJJM9AmTsNjzIuiXQcF7W848+78klKwLVxIh0ByGTITRntWCFpX4W/JT99Om0j"
 [5] "wx8J7OObh5HT2ldcBPzaOs2REWkPBfLUN4ANqN6LsOeUga0OwcQhhjEe0s30hFFS"
 [6] "9Uj1VFhzkIgTRVXINWdFXgiCQ+UwTWGkcIU8x/UDgVWXaP+tB3fY4c3+h5TaWy0C"
 [7] "zshg6jLHqS1ZWNFREZ1VVDLgoSrPdPMTfPCDewIDAQABAoIBABBXd7ANOsUeBD85"
 [8] "E+F8R+UoGs6eC+1THTZParqNKo8VDuGdtkWcUKAHJ7Mr1kcbiumsPBDxGNae7G7c"
 [9] "UNqogHxiLSbpRk5l+TNXkbiDACns/Lz8P54ZuhveJMZaXzNah+9v66fuY3QwSoal"
[10] "4akGmPHrwNbp9iiFlxL/Ah8VKeXtLkiOn6UGYpgVcpcqIU/xTgPGObI80u7T+OMB"
[11] "fySe9MZphs4+VNZUDwjaePDQQA/qfnr2q5k/gmuX0GTZw48kxkzpKPd1usRgrznG"
[12] "7n2O1bWiqJMRyy+OOILT1Ae7Lq84jsMwNBYVeSYjsT25zEqe4OktXS9jKFL0i5iZ"
[13] "K9KzePECgYEA1bQW0E0bP1zZzzGYTylIHVzVtcyEG7+OytyAYSNxV1tyOyTuRW4g"
[14] "Fnr7zEVBhW+gFS36oNh2wvlcEzBlmLaztaqDY1Qjvmy2dnw23Qhc5+MkaFP26zh2"
[15] "bv67r925JIQVXbYCBK9QeuN424JdD0ZM5UZqNkeVW8CUhKnVRYvbIKcCgYEAyAYu"
[16] "Z8Ar4PmQ1fhj/IGyzwSUw4Ea35TKO5TgcWW3AhT5eiUdBwwrxJfTMo7gt3mWgfaV"
[17] "BFYC+7X6OMFvfm6wiwL4FWvkMnlo2sQ6p0wqb7JFTXArQT/i4jFusgON2a2i2abi"
[18] "syfJq5wLxKlJYj4ikuftBSfm491wbtQvlrUprQ0CgYAPVegZNJ9S8bfTrYxvidfZ"
[19] "+5J+hFmqoBmAJ0izL9bvXOmaovDSXK/CzTqKkyG7kKIdQvpsVnxXS4u2+M8hoWLO"
[20] "E5lwJFaYULbbU9igDfyUy3EOZ5AdmySsnG0dlry1iSD7Y5dLfMU6vF4s6nMBKJtW"
[21] "DLKMiKCIQA6oYoOihQHJmwKBgDwXp09iK4yOTZYK5rcQnBCXtr25hsJO6CbYRkmr"
[22] "Hj0Q4hZxGfRpEqkgV8HjrN1SOQZYd1JzKLhIZqEwc/eO95j7zl5ZKJiFYxv+QgTK"
[23] "3CDsdOeb4FLdB6Oe6Duw16fjA37SJV9ff7X/zoVJupM6SZbK+KlI4JPqjgGt25Iy"
[24] "YQ/tAoGAOb+6JYf7VOrNymDnvG1rDk6zGedk9hKa6U1EGbI5zS3tSjazmXPfcp0H"
[25] "p+X4JnthICbDMiq1P20rucsJxJ5Puumf/y+TXIYMZjdXejyt0NJTyeEc9ePz3y+3"
[26] "G30D1k/mzpbecFgqyLTMulNqBgUlnCPbWdEFUoOfAJtWJEyqx2w="            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a2 02 01 00 02 82 01 01 00 a6 f9 da c8 3d 19 65 f7 e9 89 e9 4b
  [25] 37 cd ec bd 58 86 5f fb f3 5c cc 74 48 58 ce aa a9 97 ea e9 2b 21 f3 10
  [49] 56 50 8d 9f b8 c8 ee fa 8c c5 14 ea 41 95 1a 78 1a 92 b5 31 b1 85 e5 a5
  [73] 6f e3 b5 28 bc c4 bb af be 87 b6 dd 2b 37 5c 85 56 51 75 78 15 78 d0 b0
  [97] 07 65 c9 24 cf 40 99 3b 0d 8f 32 2e 89 74 1c 17 b5 bc e3 cf bb f2 49 4a
 [121] c0 b5 71 22 1d 01 c8 64 c8 4d 19 ed 58 21 69 5f 85 bf 25 3f 7d 3a 6d 23
 [145] c3 1f 09 ec e3 9b 87 91 d3 da 57 5c 04 fc da 3a cd 91 11 69 0f 05 f2 d4
 [169] 37 80 0d a8 de 8b b0 e7 94 81 ad 0e c1 c4 21 86 31 1e d2 cd f4 84 51 52
 [193] f5 48 f5 54 58 73 90 88 13 45 55 c8 35 67 45 5e 08 82 43 e5 30 4d 61 a4
 [217] 70 85 3c c7 f5 03 81 55 97 68 ff ad 07 77 d8 e1 cd fe 87 94 da 5b 2d 02
 [241] ce c8 60 ea 32 c7 a9 2d 59 58 d1 51 11 9d 55 54 32 e0 a1 2a cf 74 f3 13
 [265] 7c f0 83 7b 02 03 01 00 01 02 82 01 00 10 57 77 b0 0d 3a c5 1e 04 3f 39
 [289] 13 e1 7c 47 e5 28 1a ce 9e 0b ed 53 1d 36 4f 6a ba 8d 2a 8f 15 0e e1 9d
 [313] b6 45 9c 50 a0 07 27 b3 2b d6 47 1b 8a e9 ac 3c 10 f1 18 d6 9e ec 6e dc
 [337] 50 da a8 80 7c 62 2d 26 e9 46 4e 65 f9 33 57 91 b8 83 00 29 ec fc bc fc
 [361] 3f 9e 19 ba 1b de 24 c6 5a 5f 33 5a 87 ef 6f eb a7 ee 63 74 30 4a 86 a5
 [385] e1 a9 06 98 f1 eb c0 d6 e9 f6 28 85 97 12 ff 02 1f 15 29 e5 ed 2e 48 8e
 [409] 9f a5 06 62 98 15 72 97 2a 21 4f f1 4e 03 c6 39 b2 3c d2 ee d3 f8 e3 01
 [433] 7f 24 9e f4 c6 69 86 ce 3e 54 d6 54 0f 08 da 78 f0 d0 40 0f ea 7e 7a f6
 [457] ab 99 3f 82 6b 97 d0 64 d9 c3 8f 24 c6 4c e9 28 f7 75 ba c4 60 af 39 c6
 [481] ee 7d 8e d5 b5 a2 a8 93 11 cb 2f 8e 38 82 d3 d4 07 bb 2e af 38 8e c3 30
 [505] 34 16 15 79 26 23 b1 3d b9 cc 4a 9e e0 e9 2d 5d 2f 63 28 52 f4 8b 98 99
 [529] 2b d2 b3 78 f1 02 81 81 00 d5 b4 16 d0 4d 1b 3f 5c d9 cf 31 98 4f 29 48
 [553] 1d 5c d5 b5 cc 84 1b bf 8e ca dc 80 61 23 71 57 5b 72 3b 24 ee 45 6e 20
 [577] 16 7a fb cc 45 41 85 6f a0 15 2d fa a0 d8 76 c2 f9 5c 13 30 65 98 b6 b3
 [601] b5 aa 83 63 54 23 be 6c b6 76 7c 36 dd 08 5c e7 e3 24 68 53 f6 eb 38 76
 [625] 6e fe bb af dd b9 24 84 15 5d b6 02 04 af 50 7a e3 78 db 82 5d 0f 46 4c
 [649] e5 46 6a 36 47 95 5b c0 94 84 a9 d5 45 8b db 20 a7 02 81 81 00 c8 06 2e
 [673] 67 c0 2b e0 f9 90 d5 f8 63 fc 81 b2 cf 04 94 c3 81 1a df 94 ca 3b 94 e0
 [697] 71 65 b7 02 14 f9 7a 25 1d 07 0c 2b c4 97 d3 32 8e e0 b7 79 96 81 f6 95
 [721] 04 56 02 fb b5 fa 38 c1 6f 7e 6e b0 8b 02 f8 15 6b e4 32 79 68 da c4 3a
 [745] a7 4c 2a 6f b2 45 4d 70 2b 41 3f e2 e2 31 6e b2 03 8d d9 ad a2 d9 a6 e2
 [769] b3 27 c9 ab 9c 0b c4 a9 49 62 3e 22 92 e7 ed 05 27 e6 e3 dd 70 6e d4 2f
 [793] 96 b5 29 ad 0d 02 81 80 0f 55 e8 19 34 9f 52 f1 b7 d3 ad 8c 6f 89 d7 d9
 [817] fb 92 7e 84 59 aa a0 19 80 27 48 b3 2f d6 ef 5c e9 9a a2 f0 d2 5c af c2
 [841] cd 3a 8a 93 21 bb 90 a2 1d 42 fa 6c 56 7c 57 4b 8b b6 f8 cf 21 a1 62 ce
 [865] 13 99 70 24 56 98 50 b6 db 53 d8 a0 0d fc 94 cb 71 0e 67 90 1d 9b 24 ac
 [889] 9c 6d 1d 96 bc b5 89 20 fb 63 97 4b 7c c5 3a bc 5e 2c ea 73 01 28 9b 56
 [913] 0c b2 8c 88 a0 88 40 0e a8 62 83 a2 85 01 c9 9b 02 81 80 3c 17 a7 4f 62
 [937] 2b 8c 8e 4d 96 0a e6 b7 10 9c 10 97 b6 bd b9 86 c2 4e e8 26 d8 46 49 ab
 [961] 1e 3d 10 e2 16 71 19 f4 69 12 a9 20 57 c1 e3 ac dd 52 39 06 58 77 52 73
 [985] 28 b8 48 66 a1 30 73 f7 8e f7 98 fb ce 5e 59 28 98 85 63 1b fe 42 04 ca
[1009] dc 20 ec 74 e7 9b e0 52 dd 07 a3 9e e8 3b b0 d7 a7 e3 03 7e d2 25 5f 5f
[1033] 7f b5 ff ce 85 49 ba 93 3a 49 96 ca f8 a9 48 e0 93 ea 8e 01 ad db 92 32
[1057] 61 0f ed 02 81 80 39 bf ba 25 87 fb 54 ea cd ca 60 e7 bc 6d 6b 0e 4e b3
[1081] 19 e7 64 f6 12 9a e9 4d 44 19 b2 39 cd 2d ed 4a 36 b3 99 73 df 72 9d 07
[1105] a7 e5 f8 26 7b 61 20 26 c3 32 2a b5 3f 6d 2b b9 cb 09 c4 9e 4f ba e9 9f
[1129] ff 2f 93 5c 86 0c 66 37 57 7a 3c ad d0 d2 53 c9 e1 1c f5 e3 f3 df 2f b7
[1153] 1b 7d 03 d6 4f e6 ce 96 de 70 58 2a c8 b4 cc ba 53 6a 06 05 25 9c 23 db
[1177] 59 d1 05 52 83 9f 00 9b 56 24 4c aa c7 6c
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x56114604a5d0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x561146043ea0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApvnayD0ZZffpielLN83s"
[3] "vViGX/vzXMx0SFjOqqmX6ukrIfMQVlCNn7jI7vqMxRTqQZUaeBqStTGxheWlb+O1"
[4] "KLzEu6++h7bdKzdchVZRdXgVeNCwB2XJJM9AmTsNjzIuiXQcF7W848+78klKwLVx"
[5] "Ih0ByGTITRntWCFpX4W/JT99Om0jwx8J7OObh5HT2ldcBPzaOs2REWkPBfLUN4AN"
[6] "qN6LsOeUga0OwcQhhjEe0s30hFFS9Uj1VFhzkIgTRVXINWdFXgiCQ+UwTWGkcIU8"
[7] "x/UDgVWXaP+tB3fY4c3+h5TaWy0Czshg6jLHqS1ZWNFREZ1VVDLgoSrPdPMTfPCD"
[8] "ewIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 a6 f9 da c8 3d 19 65 f7 e9 89 e9 4b 37 cd ec bd 58
 [51] 86 5f fb f3 5c cc 74 48 58 ce aa a9 97 ea e9 2b 21 f3 10 56 50 8d 9f b8 c8
 [76] ee fa 8c c5 14 ea 41 95 1a 78 1a 92 b5 31 b1 85 e5 a5 6f e3 b5 28 bc c4 bb
[101] af be 87 b6 dd 2b 37 5c 85 56 51 75 78 15 78 d0 b0 07 65 c9 24 cf 40 99 3b
[126] 0d 8f 32 2e 89 74 1c 17 b5 bc e3 cf bb f2 49 4a c0 b5 71 22 1d 01 c8 64 c8
[151] 4d 19 ed 58 21 69 5f 85 bf 25 3f 7d 3a 6d 23 c3 1f 09 ec e3 9b 87 91 d3 da
[176] 57 5c 04 fc da 3a cd 91 11 69 0f 05 f2 d4 37 80 0d a8 de 8b b0 e7 94 81 ad
[201] 0e c1 c4 21 86 31 1e d2 cd f4 84 51 52 f5 48 f5 54 58 73 90 88 13 45 55 c8
[226] 35 67 45 5e 08 82 43 e5 30 4d 61 a4 70 85 3c c7 f5 03 81 55 97 68 ff ad 07
[251] 77 d8 e1 cd fe 87 94 da 5b 2d 02 ce c8 60 ea 32 c7 a9 2d 59 58 d1 51 11 9d
[276] 55 54 32 e0 a1 2a cf 74 f3 13 7c f0 83 7b 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x561145fb09c0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x561145fb23d0>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
