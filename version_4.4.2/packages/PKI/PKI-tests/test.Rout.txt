
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEArdSQ8YBNOrUiKLjoXvE7BCV1J0GYYimCD0jfZReX4L3MvZk1"
 [3] "BgbGL/gNNJzXcv1h4w3Pl+21PvawJ768mi5hIq6iinCkNBvwSKGoxGfaXjxZUr6R"
 [4] "Wplu1gTRTKm16/fdBR0lTPWOm3AcpQGAHSlmTdDxUN8CjZnDNSmYJgxEWUNCgZUC"
 [5] "drMGYs5b6+TpPLDrJ2Lf8O8lRGAuOVYMFXID9DpUD6lU6Yo7z6KYCR2XsV8hJ1I1"
 [6] "IgREHYXZrgPWS9OqWo2LBopJvk4L/E18uwIdyB6yBnTnUIqCDXHnYVuUwXpWznZE"
 [7] "3Pz3Ajgmf5zeZxeJUZOFPKrBprUa3o67zAI/QwIDAQABAoIBAAGYp0ttyV0bJw5R"
 [8] "rbdFfCxsaE2CfDLr56kFRcvosg6Fyli0DKPFXHzkncEYbvVm30cVrDeHHs15DXgS"
 [9] "on/AokgOa36y9xxlZJ5Tdw3KrbDaLrB5qzMLn/7GJOKRLRMBf92ZUsDeARUWAVAA"
[10] "mgZqiBPPMeVzZCjHEImvRpmULkKAPZOUNLCzBfW++zsD6p02ViG7AeQ6L6nXGBXv"
[11] "1d4glb3SQcs4aoNpI6L9FGdZGBCKSlpt1ywQM8s16XVDUs18MThzojbGAHZazYch"
[12] "+xqkEsFTJcSCpuvj6OeR6wJ34Fpx17IWzkaPvS7P8WmXJ9QI+WDQuxx04OvwlMA8"
[13] "n9+8kBECgYEA29DsOu4dOETIAIAlFN2LSrocBZIbeFYfq4wOJNI8kDi3tJZ7ozcp"
[14] "Vz3MrkYd7jYEah5FrIhfEIPDvfp0Gy5z7zMtfHwpguUa0LC8eXuOeOrUg9fyVFuC"
[15] "QjfsPH272WWewdELeu3ocbKQywiefAr+BK0zJHWUmlVopmAYW/tuExECgYEAynHM"
[16] "Lt3+PGKs+Blg2MiEaHZvEbXIBj8anQlV4b+mFp3yqHyQI1fsUnkAWpXpJ53xDn8l"
[17] "zMVMgKELMxfUC5csPr5fIrbO2LQ44dqOkotyMw0dMajELjK2GVjSxFFYoTQ3HjMn"
[18] "kUZYVW+AsfEdrupl6I0ToWyzTr3EHV8JyaX/hRMCgYB59f876yWXNMJrVK4+V3WT"
[19] "bpNhm+FV8SL9QWYPk/46Xt2+esf6lP6BAy7vesPciWgFoOozgi6MsS8H11BYTHvS"
[20] "ueiA6zr0/zzTkVvhY2Z3PIPQ6x3vJB6vsuuF3JU/V5ywGNZvzFRt0Q95Nz0HwemS"
[21] "mq6Hih17S+wWc7bQQj6eoQKBgHfAbwa+PHid6jFsWbSCkIh2nmb8f9DqHSUNc6bx"
[22] "Rh8U2Yi+/khZ5yo193aePOg5bnGj1slVYFaqbMSRcNZWW07WL9KKDrtziD5ZmYKo"
[23] "SCpYtI8+hKXLS5qcxzhn4iShjYUov1wZH4GSTq9zsJpaf2Pbp+QSN9L5P/wbzt9g"
[24] "eVDPAoGBANUrg+de1eyP6CkAwnPc5OX5seaS+L8P4a24RJTB0/7x1ZKNUlO5O///"
[25] "VSiR8AODe00GKnGFqcRI9iTTttsVWxDRE7ljRxZqgFdPiDRfwwgCvItLPt+JHxI9"
[26] "07Xk1ZWc9JhAuIPbUHnG+uNEO33knsRmugC0wplx00HADkfC66VC"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 ad d4 90 f1 80 4d 3a b5 22 28 b8 e8
  [25] 5e f1 3b 04 25 75 27 41 98 62 29 82 0f 48 df 65 17 97 e0 bd cc bd 99 35
  [49] 06 06 c6 2f f8 0d 34 9c d7 72 fd 61 e3 0d cf 97 ed b5 3e f6 b0 27 be bc
  [73] 9a 2e 61 22 ae a2 8a 70 a4 34 1b f0 48 a1 a8 c4 67 da 5e 3c 59 52 be 91
  [97] 5a 99 6e d6 04 d1 4c a9 b5 eb f7 dd 05 1d 25 4c f5 8e 9b 70 1c a5 01 80
 [121] 1d 29 66 4d d0 f1 50 df 02 8d 99 c3 35 29 98 26 0c 44 59 43 42 81 95 02
 [145] 76 b3 06 62 ce 5b eb e4 e9 3c b0 eb 27 62 df f0 ef 25 44 60 2e 39 56 0c
 [169] 15 72 03 f4 3a 54 0f a9 54 e9 8a 3b cf a2 98 09 1d 97 b1 5f 21 27 52 35
 [193] 22 04 44 1d 85 d9 ae 03 d6 4b d3 aa 5a 8d 8b 06 8a 49 be 4e 0b fc 4d 7c
 [217] bb 02 1d c8 1e b2 06 74 e7 50 8a 82 0d 71 e7 61 5b 94 c1 7a 56 ce 76 44
 [241] dc fc f7 02 38 26 7f 9c de 67 17 89 51 93 85 3c aa c1 a6 b5 1a de 8e bb
 [265] cc 02 3f 43 02 03 01 00 01 02 82 01 00 01 98 a7 4b 6d c9 5d 1b 27 0e 51
 [289] ad b7 45 7c 2c 6c 68 4d 82 7c 32 eb e7 a9 05 45 cb e8 b2 0e 85 ca 58 b4
 [313] 0c a3 c5 5c 7c e4 9d c1 18 6e f5 66 df 47 15 ac 37 87 1e cd 79 0d 78 12
 [337] a2 7f c0 a2 48 0e 6b 7e b2 f7 1c 65 64 9e 53 77 0d ca ad b0 da 2e b0 79
 [361] ab 33 0b 9f fe c6 24 e2 91 2d 13 01 7f dd 99 52 c0 de 01 15 16 01 50 00
 [385] 9a 06 6a 88 13 cf 31 e5 73 64 28 c7 10 89 af 46 99 94 2e 42 80 3d 93 94
 [409] 34 b0 b3 05 f5 be fb 3b 03 ea 9d 36 56 21 bb 01 e4 3a 2f a9 d7 18 15 ef
 [433] d5 de 20 95 bd d2 41 cb 38 6a 83 69 23 a2 fd 14 67 59 18 10 8a 4a 5a 6d
 [457] d7 2c 10 33 cb 35 e9 75 43 52 cd 7c 31 38 73 a2 36 c6 00 76 5a cd 87 21
 [481] fb 1a a4 12 c1 53 25 c4 82 a6 eb e3 e8 e7 91 eb 02 77 e0 5a 71 d7 b2 16
 [505] ce 46 8f bd 2e cf f1 69 97 27 d4 08 f9 60 d0 bb 1c 74 e0 eb f0 94 c0 3c
 [529] 9f df bc 90 11 02 81 81 00 db d0 ec 3a ee 1d 38 44 c8 00 80 25 14 dd 8b
 [553] 4a ba 1c 05 92 1b 78 56 1f ab 8c 0e 24 d2 3c 90 38 b7 b4 96 7b a3 37 29
 [577] 57 3d cc ae 46 1d ee 36 04 6a 1e 45 ac 88 5f 10 83 c3 bd fa 74 1b 2e 73
 [601] ef 33 2d 7c 7c 29 82 e5 1a d0 b0 bc 79 7b 8e 78 ea d4 83 d7 f2 54 5b 82
 [625] 42 37 ec 3c 7d bb d9 65 9e c1 d1 0b 7a ed e8 71 b2 90 cb 08 9e 7c 0a fe
 [649] 04 ad 33 24 75 94 9a 55 68 a6 60 18 5b fb 6e 13 11 02 81 81 00 ca 71 cc
 [673] 2e dd fe 3c 62 ac f8 19 60 d8 c8 84 68 76 6f 11 b5 c8 06 3f 1a 9d 09 55
 [697] e1 bf a6 16 9d f2 a8 7c 90 23 57 ec 52 79 00 5a 95 e9 27 9d f1 0e 7f 25
 [721] cc c5 4c 80 a1 0b 33 17 d4 0b 97 2c 3e be 5f 22 b6 ce d8 b4 38 e1 da 8e
 [745] 92 8b 72 33 0d 1d 31 a8 c4 2e 32 b6 19 58 d2 c4 51 58 a1 34 37 1e 33 27
 [769] 91 46 58 55 6f 80 b1 f1 1d ae ea 65 e8 8d 13 a1 6c b3 4e bd c4 1d 5f 09
 [793] c9 a5 ff 85 13 02 81 80 79 f5 ff 3b eb 25 97 34 c2 6b 54 ae 3e 57 75 93
 [817] 6e 93 61 9b e1 55 f1 22 fd 41 66 0f 93 fe 3a 5e dd be 7a c7 fa 94 fe 81
 [841] 03 2e ef 7a c3 dc 89 68 05 a0 ea 33 82 2e 8c b1 2f 07 d7 50 58 4c 7b d2
 [865] b9 e8 80 eb 3a f4 ff 3c d3 91 5b e1 63 66 77 3c 83 d0 eb 1d ef 24 1e af
 [889] b2 eb 85 dc 95 3f 57 9c b0 18 d6 6f cc 54 6d d1 0f 79 37 3d 07 c1 e9 92
 [913] 9a ae 87 8a 1d 7b 4b ec 16 73 b6 d0 42 3e 9e a1 02 81 80 77 c0 6f 06 be
 [937] 3c 78 9d ea 31 6c 59 b4 82 90 88 76 9e 66 fc 7f d0 ea 1d 25 0d 73 a6 f1
 [961] 46 1f 14 d9 88 be fe 48 59 e7 2a 35 f7 76 9e 3c e8 39 6e 71 a3 d6 c9 55
 [985] 60 56 aa 6c c4 91 70 d6 56 5b 4e d6 2f d2 8a 0e bb 73 88 3e 59 99 82 a8
[1009] 48 2a 58 b4 8f 3e 84 a5 cb 4b 9a 9c c7 38 67 e2 24 a1 8d 85 28 bf 5c 19
[1033] 1f 81 92 4e af 73 b0 9a 5a 7f 63 db a7 e4 12 37 d2 f9 3f fc 1b ce df 60
[1057] 79 50 cf 02 81 81 00 d5 2b 83 e7 5e d5 ec 8f e8 29 00 c2 73 dc e4 e5 f9
[1081] b1 e6 92 f8 bf 0f e1 ad b8 44 94 c1 d3 fe f1 d5 92 8d 52 53 b9 3b ff ff
[1105] 55 28 91 f0 03 83 7b 4d 06 2a 71 85 a9 c4 48 f6 24 d3 b6 db 15 5b 10 d1
[1129] 13 b9 63 47 16 6a 80 57 4f 88 34 5f c3 08 02 bc 8b 4b 3e df 89 1f 12 3d
[1153] d3 b5 e4 d5 95 9c f4 98 40 b8 83 db 50 79 c6 fa e3 44 3b 7d e4 9e c4 66
[1177] ba 00 b4 c2 99 71 d3 41 c0 0e 47 c2 eb a5 42
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x556706631750>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x55670662afc0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArdSQ8YBNOrUiKLjoXvE7"
[3] "BCV1J0GYYimCD0jfZReX4L3MvZk1BgbGL/gNNJzXcv1h4w3Pl+21PvawJ768mi5h"
[4] "Iq6iinCkNBvwSKGoxGfaXjxZUr6RWplu1gTRTKm16/fdBR0lTPWOm3AcpQGAHSlm"
[5] "TdDxUN8CjZnDNSmYJgxEWUNCgZUCdrMGYs5b6+TpPLDrJ2Lf8O8lRGAuOVYMFXID"
[6] "9DpUD6lU6Yo7z6KYCR2XsV8hJ1I1IgREHYXZrgPWS9OqWo2LBopJvk4L/E18uwId"
[7] "yB6yBnTnUIqCDXHnYVuUwXpWznZE3Pz3Ajgmf5zeZxeJUZOFPKrBprUa3o67zAI/"
[8] "QwIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 ad d4 90 f1 80 4d 3a b5 22 28 b8 e8 5e f1 3b 04 25
 [51] 75 27 41 98 62 29 82 0f 48 df 65 17 97 e0 bd cc bd 99 35 06 06 c6 2f f8 0d
 [76] 34 9c d7 72 fd 61 e3 0d cf 97 ed b5 3e f6 b0 27 be bc 9a 2e 61 22 ae a2 8a
[101] 70 a4 34 1b f0 48 a1 a8 c4 67 da 5e 3c 59 52 be 91 5a 99 6e d6 04 d1 4c a9
[126] b5 eb f7 dd 05 1d 25 4c f5 8e 9b 70 1c a5 01 80 1d 29 66 4d d0 f1 50 df 02
[151] 8d 99 c3 35 29 98 26 0c 44 59 43 42 81 95 02 76 b3 06 62 ce 5b eb e4 e9 3c
[176] b0 eb 27 62 df f0 ef 25 44 60 2e 39 56 0c 15 72 03 f4 3a 54 0f a9 54 e9 8a
[201] 3b cf a2 98 09 1d 97 b1 5f 21 27 52 35 22 04 44 1d 85 d9 ae 03 d6 4b d3 aa
[226] 5a 8d 8b 06 8a 49 be 4e 0b fc 4d 7c bb 02 1d c8 1e b2 06 74 e7 50 8a 82 0d
[251] 71 e7 61 5b 94 c1 7a 56 ce 76 44 dc fc f7 02 38 26 7f 9c de 67 17 89 51 93
[276] 85 3c aa c1 a6 b5 1a de 8e bb cc 02 3f 43 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x556706597a40>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x556706599450>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
  [1] 30 81 9f 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 81 8d 00 30 81 89
 [26] 02 81 81 00 aa 18 ab a4 3b 50 de ef 38 59 8f af 87 d2 ab 63 4e 45 71 c1 30
 [51] a9 bc a7 b8 78 26 74 14 fa ab 8b 47 1b d8 96 5f 5c 9f c3 81 84 85 ea f5 29
 [76] c2 62 46 f3 05 50 64 a8 de 19 c8 c3 38 be 54 96 cb ae b0 59 dc 0b 35 81 43
[101] b4 4a 35 44 9e b2 64 11 31 21 a4 55 bd 7f de 3f ac 91 9e 94 b5 6f b9 bb 4f
[126] 65 1c db 23 ea d4 39 d6 cd 52 3e b0 81 91 e7 5b 35 fd 13 a7 41 9b 30 90 f2
[151] 47 87 bd 4f 4e 19 67 02 03 01 00 01
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
