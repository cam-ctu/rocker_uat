
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## simple test suite - avoid testthat! It has an insane amount of
> ## unnecessary dependencies. A test package should have exactly 0
> 
> assert <- function(msg, what) {
+     cat("   . ", msg,"\n")
+     stopifnot(what)
+     .GlobalEnv$ok <- .GlobalEnv$ok + 1L
+ }
> 
> xfail <- function(...) suppressWarnings(tryCatch({ ...; FALSE }, error=function(e) TRUE))
> 
> ## none of these are fatal
> info <- function(...) message(" -- ", ...)
> err  <- function(...) message(" ** ERROR: ", ...)
> warn <- function(...) message(" !! ", ...)
> 
> ## all warnings (unless suppressed) are errors
> options(warn=2)
> 
> library(PKI)
Loading required package: base64enc
> 
> .GlobalEnv$ok <- 0L
> 
> ## Majority of tests are in th3 examples,
> ## so we won't repeat those, but some special cases
> ## not covered there as well as expected failures
> 
> info("Checking failure paths")
 -- Checking failure paths
> xfail(PKI.load.cert(what="foo", file="bar")) ## set both what and file
[1] TRUE
> xfail(PKI.load.cert("foo", "DER")) ## binary format with text
[1] TRUE
> xfail(PKI.load.cert("nothing")) ## invalid content
[1] TRUE
> xfail(PKI.digest("foo", "bar")) ## invalid hash spec
[1] TRUE
> xfail(PKI.load.key(what="foo", file="bar"))
[1] TRUE
> xfail(PKI:::PKI.decode.SSH2(fn.priv.der)) ## try to load invalid content
[1] TRUE
> 
> info("Checking key paths via files/connections")
 -- Checking key paths via files/connections
> key <- PKI.genRSAkey(bits = 2048L)
> fn.priv.pem <- tempfile()
> PKI.save.key(key, target=fn.priv.pem)
 [1] "-----BEGIN RSA PRIVATE KEY-----"                                 
 [2] "MIIEowIBAAKCAQEA5AwgA/bWVRM8L43QzJ6Z01BmaYpupV3HV2OaOIARFQaaV9mq"
 [3] "l/E5aObkJJ7g7BRHuQv+/4zAlyMVTfjJhDNNoKl0eGU2Y6t7lBFmeTHVe8mOOWds"
 [4] "kWWUo/fg01XqftNZCZuPT3wawczt7V7Yyjy1Yg4QW0ktnWJrpaa/HPNIvAhbxRan"
 [5] "zMHd3f05Uu2uzx3gURQis1Hqrua8NPHI6cVVYxQo1GhfaG8ALdQ2VYQ4AFe13CMh"
 [6] "Aym046mngy8rL3HCHAZrCmAifmTH9d4bFu1/vU86YeJ8hzy7O6eMRwIB7IWyd8KD"
 [7] "4+CNPIm3J/sQDUp+i0Hm48LpOXU8vDoV6qM55QIDAQABAoIBAAHv0TnKl+MDFc8r"
 [8] "+8QxHwqHZuDdY+rHObeWFfifrDiq5LBIUSv9lXvWZV7WQDMt41B0BKEA/gW9yFZW"
 [9] "ly3zQMtThRscqPIxwgvtr4DqAAko56qFivHoYSaY8753vu6y0Gr5Ej+EXoNoDSen"
[10] "il0CJPw4zsGOHozbcCFpCCIXAtzt8e/hKakopZ91jjQAN5BlkO9HIfI1sB1jOAbh"
[11] "/SQenLJVC2Lan7pfyOimWl1I4iipWukPpsXP+jDgrO1WYa63FQhlJeLH3WCmQ2Zn"
[12] "5yDw2l19Pp6EAFb5sjvbthe4/zSF2c6KUktk4ljsyO1kzWGwX2BNetjC3xQ08STD"
[13] "Ukx38kUCgYEA+iow9X+x90aqFzq3XFi0vlo5CDhois96jWxYOoqDQbmVtDVoQGeR"
[14] "oGWAqIpZeoi7+CMo6AJW0HtS87v1xUB6dMp+H1ZSYLFOWb6VJfA7E+7+Ko4sfgpm"
[15] "vlTbDK7kIg0CFbrdp9Im+IkxpwwkWB1HQ25/pJCkFdm1Z7C51iFViEcCgYEA6V3d"
[16] "K0zUHho7dr4lx9Tp2qdwqdKPQwvKdnycfR7jgbRIlrP4CNXa2jOODRYdSjuUlDqa"
[17] "0QdJL6CyOipWFse0LOdL0q5fjX/70tFocoJqn1hifU9VA6ZONfRYnga8ZsNXH3Sg"
[18] "CYy4sBvHzZynLCrQPXgrDj25nxbiz2KsvhbT7nMCgYA/TrgPGJ6n7ikTMde/Ne+f"
[19] "kGOIcgX6wuDHs1hskCsBUf7RmQZl7g/LYIR7om9cdAfllrg+ZoEjx2HJrpJWtaeH"
[20] "sMrUEVtNfvFOAs3pyO6ab8vAZzRZPTadCgpZHlU7TMFvUFfRpXwZP1biaE82QUqM"
[21] "hQUmVzg/E1Y2BGIzD0J+9wKBgQCG5S4iiG+Y0vsKgZGfOJDRRraWQ9NyIw+ufAuN"
[22] "O9ywrgDDtFYs7Ulrlh+Hqv/VWCljoZi6OWbxtAcyHiTTWC7rQewPZaJwTcnILCoe"
[23] "/woY/+M2ojP3Pxu4jnznI+el00a6NRUJUCG2EujlDqeHnVvwHFVvDvkMYBNNY7GM"
[24] "0+8/xwKBgF+Ps4VG5R319ZPIAavMvKu20eOXQtDwZ9/B/RSN1J9v1LeYkzyFpPvf"
[25] "p9Qk7idtb6iy+ugsrcGZ06XN7re9hTd7bAbNwSeiJCXeBEu2O7nLoidXP4EVPMA5"
[26] "qjI4Ri499pV2ktfbLSiAXTJVlUvIDLW7fWF5Nsa8FLvq8MQYFF0Z"            
[27] "-----END RSA PRIVATE KEY-----"                                   
> fn.priv.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.priv.der)
   [1] 30 82 04 a3 02 01 00 02 82 01 01 00 e4 0c 20 03 f6 d6 55 13 3c 2f 8d d0
  [25] cc 9e 99 d3 50 66 69 8a 6e a5 5d c7 57 63 9a 38 80 11 15 06 9a 57 d9 aa
  [49] 97 f1 39 68 e6 e4 24 9e e0 ec 14 47 b9 0b fe ff 8c c0 97 23 15 4d f8 c9
  [73] 84 33 4d a0 a9 74 78 65 36 63 ab 7b 94 11 66 79 31 d5 7b c9 8e 39 67 6c
  [97] 91 65 94 a3 f7 e0 d3 55 ea 7e d3 59 09 9b 8f 4f 7c 1a c1 cc ed ed 5e d8
 [121] ca 3c b5 62 0e 10 5b 49 2d 9d 62 6b a5 a6 bf 1c f3 48 bc 08 5b c5 16 a7
 [145] cc c1 dd dd fd 39 52 ed ae cf 1d e0 51 14 22 b3 51 ea ae e6 bc 34 f1 c8
 [169] e9 c5 55 63 14 28 d4 68 5f 68 6f 00 2d d4 36 55 84 38 00 57 b5 dc 23 21
 [193] 03 29 b4 e3 a9 a7 83 2f 2b 2f 71 c2 1c 06 6b 0a 60 22 7e 64 c7 f5 de 1b
 [217] 16 ed 7f bd 4f 3a 61 e2 7c 87 3c bb 3b a7 8c 47 02 01 ec 85 b2 77 c2 83
 [241] e3 e0 8d 3c 89 b7 27 fb 10 0d 4a 7e 8b 41 e6 e3 c2 e9 39 75 3c bc 3a 15
 [265] ea a3 39 e5 02 03 01 00 01 02 82 01 00 01 ef d1 39 ca 97 e3 03 15 cf 2b
 [289] fb c4 31 1f 0a 87 66 e0 dd 63 ea c7 39 b7 96 15 f8 9f ac 38 aa e4 b0 48
 [313] 51 2b fd 95 7b d6 65 5e d6 40 33 2d e3 50 74 04 a1 00 fe 05 bd c8 56 56
 [337] 97 2d f3 40 cb 53 85 1b 1c a8 f2 31 c2 0b ed af 80 ea 00 09 28 e7 aa 85
 [361] 8a f1 e8 61 26 98 f3 be 77 be ee b2 d0 6a f9 12 3f 84 5e 83 68 0d 27 a7
 [385] 8a 5d 02 24 fc 38 ce c1 8e 1e 8c db 70 21 69 08 22 17 02 dc ed f1 ef e1
 [409] 29 a9 28 a5 9f 75 8e 34 00 37 90 65 90 ef 47 21 f2 35 b0 1d 63 38 06 e1
 [433] fd 24 1e 9c b2 55 0b 62 da 9f ba 5f c8 e8 a6 5a 5d 48 e2 28 a9 5a e9 0f
 [457] a6 c5 cf fa 30 e0 ac ed 56 61 ae b7 15 08 65 25 e2 c7 dd 60 a6 43 66 67
 [481] e7 20 f0 da 5d 7d 3e 9e 84 00 56 f9 b2 3b db b6 17 b8 ff 34 85 d9 ce 8a
 [505] 52 4b 64 e2 58 ec c8 ed 64 cd 61 b0 5f 60 4d 7a d8 c2 df 14 34 f1 24 c3
 [529] 52 4c 77 f2 45 02 81 81 00 fa 2a 30 f5 7f b1 f7 46 aa 17 3a b7 5c 58 b4
 [553] be 5a 39 08 38 68 8a cf 7a 8d 6c 58 3a 8a 83 41 b9 95 b4 35 68 40 67 91
 [577] a0 65 80 a8 8a 59 7a 88 bb f8 23 28 e8 02 56 d0 7b 52 f3 bb f5 c5 40 7a
 [601] 74 ca 7e 1f 56 52 60 b1 4e 59 be 95 25 f0 3b 13 ee fe 2a 8e 2c 7e 0a 66
 [625] be 54 db 0c ae e4 22 0d 02 15 ba dd a7 d2 26 f8 89 31 a7 0c 24 58 1d 47
 [649] 43 6e 7f a4 90 a4 15 d9 b5 67 b0 b9 d6 21 55 88 47 02 81 81 00 e9 5d dd
 [673] 2b 4c d4 1e 1a 3b 76 be 25 c7 d4 e9 da a7 70 a9 d2 8f 43 0b ca 76 7c 9c
 [697] 7d 1e e3 81 b4 48 96 b3 f8 08 d5 da da 33 8e 0d 16 1d 4a 3b 94 94 3a 9a
 [721] d1 07 49 2f a0 b2 3a 2a 56 16 c7 b4 2c e7 4b d2 ae 5f 8d 7f fb d2 d1 68
 [745] 72 82 6a 9f 58 62 7d 4f 55 03 a6 4e 35 f4 58 9e 06 bc 66 c3 57 1f 74 a0
 [769] 09 8c b8 b0 1b c7 cd 9c a7 2c 2a d0 3d 78 2b 0e 3d b9 9f 16 e2 cf 62 ac
 [793] be 16 d3 ee 73 02 81 80 3f 4e b8 0f 18 9e a7 ee 29 13 31 d7 bf 35 ef 9f
 [817] 90 63 88 72 05 fa c2 e0 c7 b3 58 6c 90 2b 01 51 fe d1 99 06 65 ee 0f cb
 [841] 60 84 7b a2 6f 5c 74 07 e5 96 b8 3e 66 81 23 c7 61 c9 ae 92 56 b5 a7 87
 [865] b0 ca d4 11 5b 4d 7e f1 4e 02 cd e9 c8 ee 9a 6f cb c0 67 34 59 3d 36 9d
 [889] 0a 0a 59 1e 55 3b 4c c1 6f 50 57 d1 a5 7c 19 3f 56 e2 68 4f 36 41 4a 8c
 [913] 85 05 26 57 38 3f 13 56 36 04 62 33 0f 42 7e f7 02 81 81 00 86 e5 2e 22
 [937] 88 6f 98 d2 fb 0a 81 91 9f 38 90 d1 46 b6 96 43 d3 72 23 0f ae 7c 0b 8d
 [961] 3b dc b0 ae 00 c3 b4 56 2c ed 49 6b 96 1f 87 aa ff d5 58 29 63 a1 98 ba
 [985] 39 66 f1 b4 07 32 1e 24 d3 58 2e eb 41 ec 0f 65 a2 70 4d c9 c8 2c 2a 1e
[1009] ff 0a 18 ff e3 36 a2 33 f7 3f 1b b8 8e 7c e7 23 e7 a5 d3 46 ba 35 15 09
[1033] 50 21 b6 12 e8 e5 0e a7 87 9d 5b f0 1c 55 6f 0e f9 0c 60 13 4d 63 b1 8c
[1057] d3 ef 3f c7 02 81 80 5f 8f b3 85 46 e5 1d f5 f5 93 c8 01 ab cc bc ab b6
[1081] d1 e3 97 42 d0 f0 67 df c1 fd 14 8d d4 9f 6f d4 b7 98 93 3c 85 a4 fb df
[1105] a7 d4 24 ee 27 6d 6f a8 b2 fa e8 2c ad c1 99 d3 a5 cd ee b7 bd 85 37 7b
[1129] 6c 06 cd c1 27 a2 24 25 de 04 4b b6 3b b9 cb a2 27 57 3f 81 15 3c c0 39
[1153] aa 32 38 46 2e 3d f6 95 76 92 d7 db 2d 28 80 5d 32 55 95 4b c8 0c b5 bb
[1177] 7d 61 79 36 c6 bc 14 bb ea f0 c4 18 14 5d 19
attr(,"class")
[1] "private.key.DER"
> PKI.load.key(file=fn.priv.pem)
<pointer: 0x5618417955d0>
attr(,"class")
[1] "private.key"
> PKI.load.key(file=fn.priv.der, format="DER", private=TRUE)
<pointer: 0x56184178eea0>
attr(,"class")
[1] "private.key"
> fn.pub.pem <- tempfile()
> PKI.save.key(key, target=fn.pub.pem, private=FALSE)
[1] "-----BEGIN PUBLIC KEY-----"                                      
[2] "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5AwgA/bWVRM8L43QzJ6Z"
[3] "01BmaYpupV3HV2OaOIARFQaaV9mql/E5aObkJJ7g7BRHuQv+/4zAlyMVTfjJhDNN"
[4] "oKl0eGU2Y6t7lBFmeTHVe8mOOWdskWWUo/fg01XqftNZCZuPT3wawczt7V7Yyjy1"
[5] "Yg4QW0ktnWJrpaa/HPNIvAhbxRanzMHd3f05Uu2uzx3gURQis1Hqrua8NPHI6cVV"
[6] "YxQo1GhfaG8ALdQ2VYQ4AFe13CMhAym046mngy8rL3HCHAZrCmAifmTH9d4bFu1/"
[7] "vU86YeJ8hzy7O6eMRwIB7IWyd8KD4+CNPIm3J/sQDUp+i0Hm48LpOXU8vDoV6qM5"
[8] "5QIDAQAB"                                                        
[9] "-----END PUBLIC KEY-----"                                        
> fn.pub.der <- tempfile()
> PKI.save.key(key, "DER", target=fn.pub.der, private=FALSE)
  [1] 30 82 01 22 30 0d 06 09 2a 86 48 86 f7 0d 01 01 01 05 00 03 82 01 0f 00 30
 [26] 82 01 0a 02 82 01 01 00 e4 0c 20 03 f6 d6 55 13 3c 2f 8d d0 cc 9e 99 d3 50
 [51] 66 69 8a 6e a5 5d c7 57 63 9a 38 80 11 15 06 9a 57 d9 aa 97 f1 39 68 e6 e4
 [76] 24 9e e0 ec 14 47 b9 0b fe ff 8c c0 97 23 15 4d f8 c9 84 33 4d a0 a9 74 78
[101] 65 36 63 ab 7b 94 11 66 79 31 d5 7b c9 8e 39 67 6c 91 65 94 a3 f7 e0 d3 55
[126] ea 7e d3 59 09 9b 8f 4f 7c 1a c1 cc ed ed 5e d8 ca 3c b5 62 0e 10 5b 49 2d
[151] 9d 62 6b a5 a6 bf 1c f3 48 bc 08 5b c5 16 a7 cc c1 dd dd fd 39 52 ed ae cf
[176] 1d e0 51 14 22 b3 51 ea ae e6 bc 34 f1 c8 e9 c5 55 63 14 28 d4 68 5f 68 6f
[201] 00 2d d4 36 55 84 38 00 57 b5 dc 23 21 03 29 b4 e3 a9 a7 83 2f 2b 2f 71 c2
[226] 1c 06 6b 0a 60 22 7e 64 c7 f5 de 1b 16 ed 7f bd 4f 3a 61 e2 7c 87 3c bb 3b
[251] a7 8c 47 02 01 ec 85 b2 77 c2 83 e3 e0 8d 3c 89 b7 27 fb 10 0d 4a 7e 8b 41
[276] e6 e3 c2 e9 39 75 3c bc 3a 15 ea a3 39 e5 02 03 01 00 01
attr(,"class")
[1] "public.key.DER"
> PKI.load.key(file=fn.pub.pem)
<pointer: 0x5618416fb9c0>
attr(,"class")
[1] "public.key"
> PKI.load.key(file=fn.pub.der, format="DER", private=FALSE)
<pointer: 0x5618416fd3d0>
attr(,"class")
[1] "public.key"
> 
> info("gmp")
 -- gmp
> if (requireNamespace("gmp", quietly=TRUE)) {
+     PKI.mkRSApubkey(gmp::as.bigz("119445732379544598056145200053932732877863846799652384989588303737527328743970559883211146487286317168142202446955508902936035124709397221178664495721428029984726868375359168203283442617134197706515425366188396513684446494070223079865755643116690165578452542158755074958452695530623055205290232290667934914919"))
+ } else {
+     warn("gmp not found, skipping bignum tests")
+ }
 !! gmp not found, skipping bignum tests
> 
> info("Ciphers")
 -- Ciphers
> skey <- PKI.random(256)
> for (cipher in c("aes256ecb", "aes256ofb", "bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(cipher, all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher), skey, cipher)[1:4] == charToRaw("foo!")))
   .  aes256ecb 
   .  aes256ofb 
   .  bfcbc 
   .  bfecb 
   .  bfofb 
   .  bfcfb 
> iv <- PKI.random(256)
> for (cipher in c("bfcbc", "bfecb", "bfofb", "bfcfb"))
+     assert(paste0(cipher, " (with IV)"),
+                   all(PKI.decrypt(PKI.encrypt(charToRaw("foo!"), skey, cipher, iv=iv), skey, cipher, iv=iv)[1:4] == charToRaw("foo!")))
   .  bfcbc (with IV) 
   .  bfecb (with IV) 
   .  bfofb (with IV) 
   .  bfcfb (with IV) 
> 
> info("ASN.1")
 -- ASN.1
> 
> assert("ASN.1 encode/decode", 
+ { d <- ASN1.decode(ASN1.encode(ASN1.item(0:255, 3L)))
+   ASN1.type(d) == 3L && all(d == as.raw(0:255)) })
   .  ASN.1 encode/decode 
> 
> info("Tar ball signing")
 -- Tar ball signing
> tmpfn <- c(fn.pub.der, fn.pub.pem, fn.priv.der, fn.priv.pem)
> fn <- tempfile()
> ## on some systems using abs paths can break 100 byte limit
> ## so we must do this in the tempdir
> wd <- getwd()
> td <- tempdir()
> setwd(td)
> tar(fn, basename(tmpfn), "none")
> PKI.sign.tar(fn, key)
> PKI.verify.tar(fn, key)
[1] TRUE
> setwd(wd)
> 
> unlink(c(fn, tmpfn))
> 
