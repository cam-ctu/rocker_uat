
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "bigD"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('bigD')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fdt_locales_vec")
> ### * fdt_locales_vec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdt_locales_vec
> ### Title: Get a vector of all supported locales
> ### Aliases: fdt_locales_vec
> 
> ### ** Examples
> 
> # Let's get all the `ar` locales that exist
> # in the vector produced by `fdt_locales_vec()`
> fdt_locales_vec()[grep("^ar", fdt_locales_vec())]
 [1] "ar"    "ar_AE" "ar_BH" "ar_DJ" "ar_DZ" "ar_EG" "ar_EH" "ar_ER" "ar_IL"
[10] "ar_IQ" "ar_JO" "ar_KM" "ar_KW" "ar_LB" "ar_LY" "ar_MA" "ar_MR" "ar_OM"
[19] "ar_PS" "ar_QA" "ar_SA" "ar_SD" "ar_SO" "ar_SS" "ar_SY" "ar_TD" "ar_TN"
[28] "ar_YE"
> 
> # Let's get all the locales that pertain to the
> # `CH` territory in the vector produced by
> # `fdt_locales_vec()`
> fdt_locales_vec()[grep("CH", fdt_locales_vec())]
[1] "de_CH" "en_CH" "fr_CH" "it_CH" "pt_CH"
> 
> 
> 
> 
> cleanEx()
> nameEx("first_day_of_week")
> ### * first_day_of_week
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: first_day_of_week
> ### Title: Get a named vector of all first-day-of-the-week names for
> ###   different regions
> ### Aliases: first_day_of_week
> 
> ### ** Examples
> 
> # Let's get a vector of regions where the
> # first day of the week is Saturday
> names(first_day_of_week()[first_day_of_week() == "sat"])
 [1] "AE" "AF" "BH" "DJ" "DZ" "EG" "IQ" "IR" "JO" "KW" "LY" "OM" "QA" "SD" "SY"
> 
> 
> 
> 
> cleanEx()
> nameEx("names_months")
> ### * names_months
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: names_months
> ### Title: Get a vector of all the short month names
> ### Aliases: names_months
> 
> ### ** Examples
> 
> # Let's get all the short month names with
> # the `names_months()` function
> names_months()
 [1] "jan" "feb" "mar" "apr" "may" "jun" "jul" "aug" "sep" "oct" "nov" "dec"
> 
> 
> 
> 
> cleanEx()
> nameEx("names_wkdays")
> ### * names_wkdays
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: names_wkdays
> ### Title: Get a vector of all the short weekday names
> ### Aliases: names_wkdays
> 
> ### ** Examples
> 
> # Let's get all the short weekday names with
> # the `names_wkdays()` function
> names_wkdays()
[1] "sun" "mon" "tue" "wed" "thu" "fri" "sat"
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.067 0 0.067 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
