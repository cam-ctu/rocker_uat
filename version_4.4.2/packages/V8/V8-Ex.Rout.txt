
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "V8"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('V8')
Using V8 engine 11.9.169.7
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("JS")
> ### * JS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: JS
> ### Title: Mark character strings as literal JavaScript code
> ### Aliases: JS
> 
> ### ** Examples
> 
> ct <- v8()
> ct$eval("1+1")
[1] "2"
> ct$eval(JS("1+1"))
[1] "2"
> ct$assign("test", JS("2+3"))
> ct$get("test")
[1] 5
> 
> 
> 
> cleanEx()
> nameEx("V8")
> ### * V8
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: V8
> ### Title: Run JavaScript in a V8 context
> ### Aliases: V8 v8 new_context engine_info
> 
> ### ** Examples
> 
> # Create a new context
> ctx <- v8();
> 
> # Evaluate some code
> ctx$eval("var foo = 123")
> ctx$eval("var bar = 456")
> ctx$eval("foo+bar")
[1] "579"
> 
> # Functions and closures
> ctx$eval("JSON.stringify({x:Math.random()})")
[1] "{\"x\":0.421855823356436}"
> ctx$eval("(function(x){return x+1;})(123)")
[1] "124"
> 
> # Objects (via JSON only)
> ctx$assign("mydata", mtcars)
> ctx$get("mydata")
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> outlist <- ctx$get("mydata", simplifyVector = FALSE)
> outlist[1]
[[1]]
[[1]]$mpg
[1] 21

[[1]]$cyl
[1] 6

[[1]]$disp
[1] 160

[[1]]$hp
[1] 110

[[1]]$drat
[1] 3.9

[[1]]$wt
[1] 2.62

[[1]]$qsec
[1] 16.46

[[1]]$vs
[1] 0

[[1]]$am
[1] 1

[[1]]$gear
[1] 4

[[1]]$carb
[1] 4

[[1]]$`_row`
[1] "Mazda RX4"


> 
> # Assign JavaScript
> ctx$assign("foo", JS("function(x){return x*x}"))
> ctx$assign("bar", JS("foo(9)"))
> ctx$get("bar")
[1] 81
> 
> # Validate script without evaluating
> ctx$validate("function foo(x){2*x}") #TRUE
[1] TRUE
> ctx$validate("foo = function(x){2*x}") #TRUE
[1] TRUE
> ctx$validate("function(x){2*x}") #FALSE
[1] FALSE
> 
> # Use a JavaScript library
> ctx$source("https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.13.6/underscore-min.js")
[1] "true"
> ctx$call("_.filter", mtcars, JS("function(x){return x.mpg < 15}"))
                     mpg cyl disp  hp drat    wt  qsec vs am gear carb
Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
> 
> # Example from underscore manual
> ctx$eval("_.templateSettings = {interpolate: /\\{\\{(.+?)\\}\\}/g}")
[1] "[object Object]"
> ctx$eval("var template = _.template('Hello {{ name }}!')")
> ctx$call("template", list(name = "Mustache"))
[1] "Hello Mustache!"
> 
> # Call anonymous function
> ctx$call("function(x, y){return x * y}", 123, 3)
[1] 369
> 
> ## Not run: 
> ##D #CoffeeScript
> ##D ct2 <- v8()
> ##D ct2$source("http://coffeescript.org/v1/browser-compiler/coffee-script.js")
> ##D jscode <- ct2$call("CoffeeScript.compile", "square = (x) -> x * x", list(bare = TRUE))
> ##D ct2$eval(jscode)
> ##D ct2$call("square", 9)
> ##D 
> ##D # Interactive console
> ##D ct3 <- v8()
> ##D ct3$console()
> ##D # //this is JavaScript
> ##D # var test = [1,2,3]
> ##D # JSON.stringify(test)
> ##D # exit
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("wasm")
> ### * wasm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wasm
> ### Title: Experimental WebAssembly
> ### Aliases: wasm wasm_features
> 
> ### ** Examples
> 
> # Load example wasm program
> instance <- wasm(system.file('wasm/add.wasm', package = 'V8'))
> instance$exports$add(12, 30)
[1] 42
> wasm_features()
$bigInt
[1] TRUE

$bulkMemory
[1] TRUE

$exceptions
[1] TRUE

$extendedConst
[1] TRUE

$gc
[1] FALSE

$memory64
[1] FALSE

$multiValue
[1] TRUE

$mutableGlobals
[1] TRUE

$referenceTypes
[1] TRUE

$relaxedSimd
[1] TRUE

$saturatedFloatToInt
[1] TRUE

$signExtensions
[1] TRUE

$simd
[1] TRUE

$streamingCompilation
[1] FALSE

$tailCall
[1] TRUE

$threads
[1] TRUE

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.239 0.029 0.293 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
