
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "RMariaDB"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('RMariaDB')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Client-flags")
> ### * Client-flags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Client-flags
> ### Title: Client flags
> ### Aliases: Client-flags CLIENT_LONG_PASSWORD CLIENT_FOUND_ROWS
> ###   CLIENT_LONG_FLAG CLIENT_CONNECT_WITH_DB CLIENT_NO_SCHEMA
> ###   CLIENT_COMPRESS CLIENT_ODBC CLIENT_LOCAL_FILES CLIENT_IGNORE_SPACE
> ###   CLIENT_PROTOCOL_41 CLIENT_INTERACTIVE CLIENT_SSL
> ###   CLIENT_IGNORE_SIGPIPE CLIENT_TRANSACTIONS CLIENT_RESERVED
> ###   CLIENT_RESERVED2 CLIENT_MULTI_STATEMENTS CLIENT_MULTI_RESULTS
> ###   CLIENT_SSL_VERIFY_SERVER_CERT
> 
> ### ** Examples
> 
> ## Not run: 
> ##D library(DBI)
> ##D library(RMariaDB)
> ##D con1 <- dbConnect(MariaDB(), client.flag = CLIENT_COMPRESS)
> ##D con2 <- dbConnect(
> ##D   MariaDB(),
> ##D   client.flag = bitwOr(CLIENT_COMPRESS, CLIENT_SSL)
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("dbConnect-MariaDBDriver-method")
> ### * dbConnect-MariaDBDriver-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MariaDB
> ### Title: Connect/disconnect to a MariaDB DBMS
> ### Aliases: MariaDB dbConnect_MariaDBDriver dbConnect,MariaDBDriver-method
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   # connect to a database and load some data
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   dbWriteTable(con, "USArrests", datasets::USArrests, temporary = TRUE)
+ 
+   # query
+   rs <- dbSendQuery(con, "SELECT * FROM USArrests")
+   d1 <- dbFetch(rs, n = 10)      # extract data in chunks of 10 rows
+   dbHasCompleted(rs)
+   d2 <- dbFetch(rs, n = -1)      # extract all remaining data
+   dbHasCompleted(rs)
+   dbClearResult(rs)
+   dbListTables(con)
+ 
+   # clean up
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> ## Not run: 
> ##D # Connect to a MariaDB database running locally
> ##D con <- dbConnect(RMariaDB::MariaDB(), dbname = "mydb")
> ##D # Connect to a remote database with username and password
> ##D con <- dbConnect(RMariaDB::MariaDB(),
> ##D   host = "mydb.mycompany.com",
> ##D   user = "abc", password = "def"
> ##D )
> ##D # But instead of supplying the username and password in code, it's usually
> ##D # better to set up a group in your .my.cnf (usually located in your home
> ##D # directory). Then it's less likely you'll inadvertently share them.
> ##D con <- dbConnect(RMariaDB::MariaDB(), group = "test")
> ##D 
> ##D # To connect to a remote database and require the use of SSL
> ##D (and an example of using environment variables for your sensitive info)
> ##D con <- dbConnect(RMariaDB::MariaDB(),
> ##D   dbname = Sys.getenv('DB_NAME'),
> ##D   host = Sys.getenv('DB_HOST'),
> ##D   user = Sys.getenv('DB_USER'),
> ##D   password = Sys.getenv('DB_PASSWORD'),
> ##D   client.flag = CLIENT_SSL
> ##D )
> ##D 
> ##D # Always cleanup by disconnecting the database
> ##D dbDisconnect(con)
> ## End(Not run)
> 
> # All examples use the rs-dbi group by default.
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   con
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> 
> cleanEx()
> nameEx("dbDataType")
> ### * dbDataType
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbDataType
> ### Title: Determine the SQL Data Type of an S object
> ### Aliases: dbDataType dbDataType_MariaDBConnection
> ###   dbDataType,MariaDBConnection-method dbDataType_MariaDBDriver
> ###   dbDataType,MariaDBDriver-method
> 
> ### ** Examples
> 
> dbDataType(RMariaDB::MariaDB(), "a")
[1] "VARCHAR(1)"
> dbDataType(RMariaDB::MariaDB(), 1:3)
[1] "INTEGER"
> dbDataType(RMariaDB::MariaDB(), 2.5)
[1] "DOUBLE"
> 
> 
> 
> cleanEx()
> nameEx("mariadb-quoting")
> ### * mariadb-quoting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mariadb-quoting
> ### Title: Quote MariaDB strings and identifiers.
> ### Aliases: mariadb-quoting dbQuoteIdentifier_MariaDBConnection_Id
> ###   dbQuoteIdentifier,MariaDBConnection,Id-method
> ###   dbQuoteIdentifier_MariaDBConnection_SQL
> ###   dbQuoteIdentifier,MariaDBConnection,SQL-method
> ###   dbQuoteIdentifier_MariaDBConnection_character
> ###   dbQuoteIdentifier,MariaDBConnection,character-method
> ###   dbQuoteLiteral_MariaDBConnection
> ###   dbQuoteLiteral,MariaDBConnection-method
> ###   dbQuoteString_MariaDBConnection_SQL
> ###   dbQuoteString,MariaDBConnection,SQL-method
> ###   dbQuoteString_MariaDBConnection_character
> ###   dbQuoteString,MariaDBConnection,character-method
> ###   dbUnquoteIdentifier_MariaDBConnection_SQL
> ###   dbUnquoteIdentifier,MariaDBConnection,SQL-method
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB())
+   dbQuoteIdentifier(con, c("a b", "a`b"))
+   dbQuoteString(con, c("a b", "a'b"))
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> cleanEx()
> nameEx("mariadb-tables")
> ### * mariadb-tables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mariadb-tables
> ### Title: Read and write MariaDB tables.
> ### Aliases: mariadb-tables dbAppendTable_MariaDBConnection
> ###   dbAppendTable,MariaDBConnection-method
> ###   dbExistsTable_MariaDBConnection_character
> ###   dbExistsTable,MariaDBConnection,character-method
> ###   dbListObjects_MariaDBConnection_ANY
> ###   dbListObjects,MariaDBConnection-method dbListTables_MariaDBConnection
> ###   dbListTables,MariaDBConnection-method
> ###   dbReadTable_MariaDBConnection_character
> ###   dbReadTable,MariaDBConnection,character-method
> ###   dbRemoveTable_MariaDBConnection_character
> ###   dbRemoveTable,MariaDBConnection,character-method
> ###   dbWriteTable_MariaDBConnection_character_character
> ###   dbWriteTable,MariaDBConnection,character,character-method
> ###   dbWriteTable_MariaDBConnection_character_data.frame
> ###   dbWriteTable,MariaDBConnection,character,data.frame-method
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+ 
+   # By default, row names are written in a column to row_names, and
+   # automatically read back into the row.names()
+   dbWriteTable(con, "mtcars", mtcars[1:5, ], temporary = TRUE)
+   dbReadTable(con, "mtcars")
+   dbReadTable(con, "mtcars", row.names = FALSE)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> cleanEx()
> nameEx("mariadbClientLibraryVersions")
> ### * mariadbClientLibraryVersions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mariadbClientLibraryVersions
> ### Title: MariaDB Check for Compiled Versus Loaded Client Library Versions
> ### Aliases: mariadbClientLibraryVersions
> 
> ### ** Examples
> 
> mariadbClientLibraryVersions()
8.0.41 8.0.41 
 80041  80041 
> 
> 
> 
> cleanEx()
> nameEx("mariadbHasDefault")
> ### * mariadbHasDefault
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mariadbHasDefault
> ### Title: Check if default database is available.
> ### Aliases: mariadbHasDefault mariadbDefault
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   db <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   dbListTables(db)
+   dbDisconnect(db)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> cleanEx()
> nameEx("query")
> ### * query
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: query
> ### Title: Execute a SQL statement on a database connection.
> ### Aliases: query dbBind_MariaDBResult dbBind,MariaDBResult-method
> ###   dbClearResult_MariaDBResult dbClearResult,MariaDBResult-method
> ###   dbFetch_MariaDBResult dbFetch,MariaDBResult-method
> ###   dbGetStatement_MariaDBResult dbGetStatement,MariaDBResult-method
> ###   dbSendQuery_MariaDBConnection_character
> ###   dbSendQuery,MariaDBConnection,character-method
> ###   dbSendStatement_MariaDBConnection_character
> ###   dbSendStatement,MariaDBConnection,character-method
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   dbWriteTable(con, "arrests", datasets::USArrests, temporary = TRUE)
+ 
+   # Run query to get results as dataframe
+   dbGetQuery(con, "SELECT * FROM arrests limit 3")
+ 
+   # Send query to pull requests in batches
+   res <- dbSendQuery(con, "SELECT * FROM arrests")
+   data <- dbFetch(res, n = 2)
+   data
+   dbHasCompleted(res)
+ 
+   dbClearResult(res)
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> cleanEx()
> nameEx("result-meta")
> ### * result-meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: result-meta
> ### Title: Database interface meta-data.
> ### Aliases: result-meta dbColumnInfo_MariaDBResult
> ###   dbColumnInfo,MariaDBResult-method dbGetRowCount_MariaDBResult
> ###   dbGetRowCount,MariaDBResult-method dbGetRowsAffected_MariaDBResult
> ###   dbGetRowsAffected,MariaDBResult-method dbHasCompleted_MariaDBResult
> ###   dbHasCompleted,MariaDBResult-method
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   dbWriteTable(con, "t1", datasets::USArrests, temporary = TRUE)
+ 
+   rs <- dbSendQuery(con, "SELECT * FROM t1 WHERE UrbanPop >= 80")
+   rs
+ 
+   dbGetStatement(rs)
+   dbHasCompleted(rs)
+   dbColumnInfo(rs)
+ 
+   dbFetch(rs)
+   rs
+ 
+   dbClearResult(rs)
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> cleanEx()
> nameEx("transactions")
> ### * transactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transactions
> ### Title: DBMS Transaction Management
> ### Aliases: transactions dbBegin_MariaDBConnection
> ###   dbBegin,MariaDBConnection-method dbCommit_MariaDBConnection
> ###   dbCommit,MariaDBConnection-method dbRollback_MariaDBConnection
> ###   dbRollback,MariaDBConnection-method
> 
> ### ** Examples
> 
> if (mariadbHasDefault()) {
+   con <- dbConnect(RMariaDB::MariaDB(), dbname = "test")
+   df <- data.frame(id = 1:5)
+ 
+   dbWriteTable(con, "df", df, temporary = TRUE)
+   dbBegin(con)
+   dbExecute(con, "UPDATE df SET id = id * 10")
+   dbGetQuery(con, "SELECT id FROM df")
+   dbRollback(con)
+ 
+   dbGetQuery(con, "SELECT id FROM df")
+ 
+   dbDisconnect(con)
+ }
Could not initialise default MariaDB database. If MariaDB is running
check that you have a ~/.my.cnf file that contains a [rs-dbi] section
describing how to connect to a test database.
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.357 0.036 0.403 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
