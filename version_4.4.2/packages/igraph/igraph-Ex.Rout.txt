
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "igraph"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('igraph')

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("E")
> ### * E
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: E
> ### Title: Edges of a graph
> ### Aliases: E
> 
> ### ** Examples
> 
> # Edges of an unnamed graph
> g <- make_ring(10)
> E(g)
+ 10/10 edges from fbaaca0:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> # Edges of a named graph
> g2 <- make_ring(10) %>%
+   set_vertex_attr("name", value = letters[1:10])
> E(g2)
+ 10/10 edges from 1324087 (vertex names):
 [1] a--b b--c c--d d--e e--f f--g g--h h--i i--j a--j
> 
> 
> 
> cleanEx()
> nameEx("V")
> ### * V
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: V
> ### Title: Vertices of a graph
> ### Aliases: V
> 
> ### ** Examples
> 
> # Vertex ids of an unnamed graph
> g <- make_ring(10)
> V(g)
+ 10/10 vertices, from 7cb3269:
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> # Vertex ids of a named graph
> g2 <- make_ring(10) %>%
+   set_vertex_attr("name", value = letters[1:10])
> V(g2)
+ 10/10 vertices, named, from f392066:
 [1] a b c d e f g h i j
> 
> 
> 
> cleanEx()
> nameEx("add_edges")
> ### * add_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_edges
> ### Title: Add edges to a graph
> ### Aliases: add_edges
> 
> ### ** Examples
> 
> g <- make_empty_graph(n = 5) %>%
+   add_edges(c(
+     1, 2,
+     2, 3,
+     3, 4,
+     4, 5
+   )) %>%
+   set_edge_attr("color", value = "red") %>%
+   add_edges(c(5, 1), color = "green")
> E(g)[[]]
+ 5/5 edges from 04b4c67:
  tail head tid hid color
1    1    2   1   2   red
2    2    3   2   3   red
3    3    4   3   4   red
4    4    5   4   5   red
5    5    1   5   1 green
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("add_layout_")
> ### * add_layout_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_layout_
> ### Title: Add layout to graph
> ### Aliases: add_layout_
> 
> ### ** Examples
> 
> (make_star(11) + make_star(11)) %>%
+   add_layout_(as_star(), component_wise()) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("add_vertices")
> ### * add_vertices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_vertices
> ### Title: Add vertices to a graph
> ### Aliases: add_vertices
> 
> ### ** Examples
> 
> g <- make_empty_graph() %>%
+   add_vertices(3, color = "red") %>%
+   add_vertices(2, color = "green") %>%
+   add_edges(c(
+     1, 2,
+     2, 3,
+     3, 4,
+     4, 5
+   ))
> g
IGRAPH 25379f0 D--- 5 4 -- 
+ attr: color (v/c)
+ edges from 25379f0:
[1] 1->2 2->3 3->4 4->5
> V(g)[[]]
+ 5/5 vertices, from 25379f0:
  color
1   red
2   red
3   red
4 green
5 green
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("adjacent_vertices")
> ### * adjacent_vertices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: adjacent_vertices
> ### Title: Adjacent vertices of multiple vertices in a graph
> ### Aliases: adjacent_vertices
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> adjacent_vertices(g, c(1, 34))
[[1]]
+ 16/34 vertices, from 6ab93c6:
 [1]  2  3  4  5  6  7  8  9 11 12 13 14 18 20 22 32

[[2]]
+ 17/34 vertices, from 6ab93c6:
 [1]  9 10 14 15 16 19 20 21 23 24 27 28 29 30 31 32 33

> 
> 
> 
> cleanEx()
> nameEx("all_simple_paths")
> ### * all_simple_paths
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all_simple_paths
> ### Title: List all simple paths from one source
> ### Aliases: all_simple_paths
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> all_simple_paths(g, 1, 5)
[[1]]
+ 5/10 vertices, from ebca0ad:
[1] 1 2 3 4 5

[[2]]
+ 7/10 vertices, from ebca0ad:
[1]  1 10  9  8  7  6  5

> all_simple_paths(g, 1, c(3, 5))
[[1]]
+ 3/10 vertices, from ebca0ad:
[1] 1 2 3

[[2]]
+ 5/10 vertices, from ebca0ad:
[1] 1 2 3 4 5

[[3]]
+ 7/10 vertices, from ebca0ad:
[1]  1 10  9  8  7  6  5

[[4]]
+ 9/10 vertices, from ebca0ad:
[1]  1 10  9  8  7  6  5  4  3

> 
> 
> 
> 
> cleanEx()
> nameEx("alpha_centrality")
> ### * alpha_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: alpha_centrality
> ### Title: Find Bonacich alpha centrality scores of network positions
> ### Aliases: alpha_centrality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # The examples from Bonacich's paper
> g.1 <- make_graph(c(1, 3, 2, 3, 3, 4, 4, 5))
> g.2 <- make_graph(c(2, 1, 3, 1, 4, 1, 5, 1))
> g.3 <- make_graph(c(1, 2, 2, 3, 3, 4, 4, 1, 5, 1))
> alpha_centrality(g.1)
[1] 1 1 3 4 5
> alpha_centrality(g.2)
[1] 5 1 1 1 1
> alpha_centrality(g.3, alpha = 0.5)
[1] 2.533333 2.266667 2.133333 2.066667 1.000000
> 
> 
> 
> 
> cleanEx()
> nameEx("are_adjacent")
> ### * are_adjacent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: are_adjacent
> ### Title: Are two vertices adjacent?
> ### Aliases: are_adjacent
> 
> ### ** Examples
> 
> ug <- make_ring(10)
> ug
IGRAPH d7f215a U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from d7f215a:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> are_adjacent(ug, 1, 2)
[1] TRUE
> are_adjacent(ug, 2, 1)
[1] TRUE
> 
> dg <- make_ring(10, directed = TRUE)
> dg
IGRAPH 3b2b0cd D--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 3b2b0cd:
 [1]  1-> 2  2-> 3  3-> 4  4-> 5  5-> 6  6-> 7  7-> 8  8-> 9  9->10 10-> 1
> are_adjacent(ug, 1, 2)
[1] TRUE
> are_adjacent(ug, 2, 1)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("arpack")
> ### * arpack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arpack_defaults
> ### Title: ARPACK eigenvector calculation
> ### Aliases: arpack_defaults arpack arpack-options arpack.unpack.complex
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Identity matrix
> f <- function(x, extra = NULL) x
> arpack(f, options = list(n = 10, nev = 2, ncv = 4), sym = TRUE)
$values
[1] 1 1

$vectors
             [,1]        [,2]
 [1,] -0.24403929  0.20548390
 [2,] -0.13308292 -0.01205712
 [3,]  0.07581979 -0.52564302
 [4,]  0.42482908 -0.48916037
 [5,] -0.31046490  0.03860961
 [6,]  0.41461120 -0.13389082
 [7,]  0.46278143  0.56555129
 [8,]  0.16734511 -0.12882603
 [9,]  0.13437127  0.20452422
[10,] -0.45605679 -0.21061937

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "XX"

$options$nev
[1] 2

$options$tol
[1] 0

$options$ncv
[1] 4

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 3000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 0

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 1

$options$nconv
[1] 2

$options$numop
[1] 4

$options$numopb
[1] 0

$options$numreo
[1] 4


> 
> # Graph laplacian of a star graph (undirected), n>=2
> # Note that this is a linear operation
> f <- function(x, extra = NULL) {
+   y <- x
+   y[1] <- (length(x) - 1) * x[1] - sum(x[-1])
+   for (i in 2:length(x)) {
+     y[i] <- x[i] - x[1]
+   }
+   y
+ }
> 
> arpack(f, options = list(n = 10, nev = 1, ncv = 3), sym = TRUE)
$values
[1] 10

$vectors
 [1]  0.9486833 -0.1054093 -0.1054093 -0.1054093 -0.1054093 -0.1054093
 [7] -0.1054093 -0.1054093 -0.1054093 -0.1054093

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "XX"

$options$nev
[1] 1

$options$tol
[1] 0

$options$ncv
[1] 3

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 3000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 0

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 1

$options$nconv
[1] 1

$options$numop
[1] 3

$options$numopb
[1] 0

$options$numreo
[1] 2


> 
> # double check
> eigen(laplacian_matrix(make_star(10, mode = "undirected")))
eigen() decomposition
$values
 [1] 1.000000e+01 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00
 [6] 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 3.552714e-15

$vectors
            [,1]          [,2]          [,3]        [,4]          [,5]
 [1,]  0.9486833  0.000000e+00  0.000000e+00  0.00000000  0.000000e+00
 [2,] -0.1054093 -3.700743e-17 -3.700743e-17  0.00000000 -3.700743e-17
 [3,] -0.1054093 -3.768958e-02  1.005977e-01  0.02684135  4.687454e-02
 [4,] -0.1054093  3.537753e-01 -1.012990e-01 -0.08701190 -6.664397e-02
 [5,] -0.1054093 -4.526060e-01 -4.556778e-01 -0.51370736 -3.394283e-01
 [6,] -0.1054093 -3.384853e-01 -1.777216e-03  0.02479089  8.481572e-01
 [7,] -0.1054093 -8.057222e-02 -1.154307e-02  0.01661573 -1.545983e-01
 [8,] -0.1054093  5.759880e-01 -4.900096e-01  0.30166795  6.743751e-02
 [9,] -0.1054093  3.180750e-01  6.685471e-01 -0.43654213 -4.340406e-02
[10,] -0.1054093 -3.384853e-01  2.911619e-01  0.66734547 -3.583947e-01
               [,6]          [,7]          [,8]       [,9]      [,10]
 [1,]  0.000000e+00  0.000000e+00  0.000000e+00  0.0000000 -0.3162278
 [2,]  3.238150e-17  7.401487e-17  3.700743e-17  0.9428090 -0.3162278
 [3,] -1.979763e-02  9.262957e-01  4.611153e-02 -0.1178511 -0.3162278
 [4,]  8.482088e-01 -8.673487e-02  2.424907e-02 -0.1178511 -0.3162278
 [5,] -1.084886e-01 -8.673487e-02  2.531916e-01 -0.1178511 -0.3162278
 [6,]  4.196770e-02 -1.931187e-01  3.719095e-02 -0.1178511 -0.3162278
 [7,] -1.084886e-01 -8.673487e-02 -9.082431e-01 -0.1178511 -0.3162278
 [8,] -4.229128e-01 -8.673487e-02  1.455981e-01 -0.1178511 -0.3162278
 [9,] -2.724565e-01 -1.931187e-01  1.513033e-01 -0.1178511 -0.3162278
[10,]  4.196770e-02 -1.931187e-01  2.505985e-01 -0.1178511 -0.3162278

> 
> ## First three eigenvalues of the adjacency matrix of a graph
> ## We need the 'Matrix' package for this
> if (require(Matrix)) {
+   set.seed(42)
+   g <- sample_gnp(1000, 5 / 1000)
+   M <- as_adjacency_matrix(g, sparse = TRUE)
+   f2 <- function(x, extra = NULL) {
+     cat(".")
+     as.vector(M %*% x)
+   }
+   baev <- arpack(f2, sym = TRUE, options = list(
+     n = vcount(g), nev = 3, ncv = 8,
+     which = "LM", maxiter = 2000
+   ))
+ }
Loading required package: Matrix

> 
> 
> cleanEx()

detaching ‘package:Matrix’

> nameEx("articulation_points")
> ### * articulation_points
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: articulation_points
> ### Title: Articulation points and bridges of a graph
> ### Aliases: articulation_points bridges
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- disjoint_union(make_full_graph(5), make_full_graph(5))
> clu <- components(g)$membership
> g <- add_edges(g, c(match(1, clu), match(2, clu)))
> articulation_points(g)
+ 2/10 vertices, from f552efb:
[1] 6 1
> 
> g <- make_graph("krackhardt_kite")
> bridges(g)
+ 2/18 edges from 3e6505b:
[1] 9--10 8-- 9
> 
> 
> 
> 
> cleanEx()
> nameEx("as.igraph")
> ### * as.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.igraph
> ### Title: Conversion to igraph
> ### Aliases: as.igraph as.igraph.igraphHRG
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) + make_full_graph(5)
> hrg <- fit_hrg(g)
> as.igraph(hrg)
IGRAPH ad1d7af DN-- 19 18 -- Fitted HRG
+ attr: name (g/c), name (v/c), prob (v/n)
+ edges from ad1d7af (vertex names):
 [1] g1->g2 g2->g3 g3->g5 g4->3  g5->1  g6->g9 g7->9  g8->7  g9->6  g1->g6
[11] g2->g4 g3->2  g4->5  g5->4  g6->g7 g7->10 g8->8  g9->g8
> 
> 
> 
> 
> cleanEx()
> nameEx("as.matrix.igraph")
> ### * as.matrix.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.matrix.igraph
> ### Title: Convert igraph objects to adjacency or edge list matrices
> ### Aliases: as.matrix.igraph
> 
> ### ** Examples
> 
> 
> g <- make_graph("zachary")
> as.matrix(g, "adjacency")
34 x 34 sparse Matrix of class "dgCMatrix"
                                                                         
 [1,] . 1 1 1 1 1 1 1 1 . 1 1 1 1 . . . 1 . 1 . 1 . . . . . . . . . 1 . .
 [2,] 1 . 1 1 . . . 1 . . . . . 1 . . . 1 . 1 . 1 . . . . . . . . 1 . . .
 [3,] 1 1 . 1 . . . 1 1 1 . . . 1 . . . . . . . . . . . . . 1 1 . . . 1 .
 [4,] 1 1 1 . . . . 1 . . . . 1 1 . . . . . . . . . . . . . . . . . . . .
 [5,] 1 . . . . . 1 . . . 1 . . . . . . . . . . . . . . . . . . . . . . .
 [6,] 1 . . . . . 1 . . . 1 . . . . . 1 . . . . . . . . . . . . . . . . .
 [7,] 1 . . . 1 1 . . . . . . . . . . 1 . . . . . . . . . . . . . . . . .
 [8,] 1 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 [9,] 1 . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 1
[10,] . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
[11,] 1 . . . 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[12,] 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[13,] 1 . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[14,] 1 1 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
[15,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1
[16,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1
[17,] . . . . . 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . .
[18,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[19,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1
[20,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
[21,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1
[22,] 1 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
[23,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1
[24,] . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 . 1 . . 1 1
[25,] . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1 . . . 1 . .
[26,] . . . . . . . . . . . . . . . . . . . . . . . 1 1 . . . . . . 1 . .
[27,] . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . . . 1
[28,] . . 1 . . . . . . . . . . . . . . . . . . . . 1 1 . . . . . . . . 1
[29,] . . 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 . 1
[30,] . . . . . . . . . . . . . . . . . . . . . . . 1 . . 1 . . . . . 1 1
[31,] . 1 . . . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . 1 1
[32,] 1 . . . . . . . . . . . . . . . . . . . . . . . 1 1 . . 1 . . . 1 1
[33,] . . 1 . . . . . 1 . . . . . 1 1 . . 1 . 1 . 1 1 . . . . . 1 1 1 . 1
[34,] . . . . . . . . 1 1 . . . 1 1 1 . . 1 1 1 . 1 1 . . 1 1 1 1 1 1 1 .
> as.matrix(g, "edgelist")
      [,1] [,2]
 [1,]    1    2
 [2,]    1    3
 [3,]    1    4
 [4,]    1    5
 [5,]    1    6
 [6,]    1    7
 [7,]    1    8
 [8,]    1    9
 [9,]    1   11
[10,]    1   12
[11,]    1   13
[12,]    1   14
[13,]    1   18
[14,]    1   20
[15,]    1   22
[16,]    1   32
[17,]    2    3
[18,]    2    4
[19,]    2    8
[20,]    2   14
[21,]    2   18
[22,]    2   20
[23,]    2   22
[24,]    2   31
[25,]    3    4
[26,]    3    8
[27,]    3   28
[28,]    3   29
[29,]    3   33
[30,]    3   10
[31,]    3    9
[32,]    3   14
[33,]    4    8
[34,]    4   13
[35,]    4   14
[36,]    5    7
[37,]    5   11
[38,]    6    7
[39,]    6   11
[40,]    6   17
[41,]    7   17
[42,]    9   31
[43,]    9   33
[44,]    9   34
[45,]   10   34
[46,]   14   34
[47,]   15   33
[48,]   15   34
[49,]   16   33
[50,]   16   34
[51,]   19   33
[52,]   19   34
[53,]   20   34
[54,]   21   33
[55,]   21   34
[56,]   23   33
[57,]   23   34
[58,]   24   26
[59,]   24   28
[60,]   24   33
[61,]   24   34
[62,]   24   30
[63,]   25   26
[64,]   25   28
[65,]   25   32
[66,]   26   32
[67,]   27   30
[68,]   27   34
[69,]   28   34
[70,]   29   32
[71,]   29   34
[72,]   30   33
[73,]   30   34
[74,]   31   33
[75,]   31   34
[76,]   32   33
[77,]   32   34
[78,]   33   34
> # use edge attribute "weight"
> E(g)$weight <- rep(1:10, length.out = ecount(g))
> as.matrix(g, "adjacency", sparse = FALSE, attr = "weight")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    0    1    2    3    4    5    6    7    8     0     9    10     1
 [2,]    1    0    7    8    0    0    0    9    0     0     0     0     0
 [3,]    2    7    0    5    0    0    0    6    1    10     0     0     0
 [4,]    3    8    5    0    0    0    0    3    0     0     0     0     4
 [5,]    4    0    0    0    0    0    6    0    0     0     7     0     0
 [6,]    5    0    0    0    0    0    8    0    0     0     9     0     0
 [7,]    6    0    0    0    6    8    0    0    0     0     0     0     0
 [8,]    7    9    6    3    0    0    0    0    0     0     0     0     0
 [9,]    8    0    1    0    0    0    0    0    0     0     0     0     0
[10,]    0    0   10    0    0    0    0    0    0     0     0     0     0
[11,]    9    0    0    0    7    9    0    0    0     0     0     0     0
[12,]   10    0    0    0    0    0    0    0    0     0     0     0     0
[13,]    1    0    0    4    0    0    0    0    0     0     0     0     0
[14,]    2   10    2    5    0    0    0    0    0     0     0     0     0
[15,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[16,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[17,]    0    0    0    0    0   10    1    0    0     0     0     0     0
[18,]    3    1    0    0    0    0    0    0    0     0     0     0     0
[19,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[20,]    4    2    0    0    0    0    0    0    0     0     0     0     0
[21,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[22,]    5    3    0    0    0    0    0    0    0     0     0     0     0
[23,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[24,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[25,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[26,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[27,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[28,]    0    0    7    0    0    0    0    0    0     0     0     0     0
[29,]    0    0    8    0    0    0    0    0    0     0     0     0     0
[30,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[31,]    0    4    0    0    0    0    0    0    2     0     0     0     0
[32,]    6    0    0    0    0    0    0    0    0     0     0     0     0
[33,]    0    0    9    0    0    0    0    0    3     0     0     0     0
[34,]    0    0    0    0    0    0    0    0    4     5     0     0     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]
 [1,]     2     0     0     0     3     0     4     0     5     0     0     0
 [2,]    10     0     0     0     1     0     2     0     3     0     0     0
 [3,]     2     0     0     0     0     0     0     0     0     0     0     0
 [4,]     5     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0    10     0     0     0     0     0     0     0     0
 [7,]     0     0     0     1     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     0     0     0     0     0     0     0
[11,]     0     0     0     0     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     0     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     0     0     0     0     0     0
[15,]     0     0     0     0     0     0     0     0     0     0     0     0
[16,]     0     0     0     0     0     0     0     0     0     0     0     0
[17,]     0     0     0     0     0     0     0     0     0     0     0     0
[18,]     0     0     0     0     0     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0     0     0     0     0
[22,]     0     0     0     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0     0
[25,]     0     0     0     0     0     0     0     0     0     0     0     0
[26,]     0     0     0     0     0     0     0     0     0     0     8     3
[27,]     0     0     0     0     0     0     0     0     0     0     0     0
[28,]     0     0     0     0     0     0     0     0     0     0     9     4
[29,]     0     0     0     0     0     0     0     0     0     0     0     0
[30,]     0     0     0     0     0     0     0     0     0     0     2     0
[31,]     0     0     0     0     0     0     0     0     0     0     0     0
[32,]     0     0     0     0     0     0     0     0     0     0     0     5
[33,]     0     7     9     0     0     1     0     4     0     6    10     0
[34,]     6     8    10     0     0     2     3     5     0     7     1     0
      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34]
 [1,]     0     0     0     0     0     0     6     0     0
 [2,]     0     0     0     0     0     4     0     0     0
 [3,]     0     0     7     8     0     0     0     9     0
 [4,]     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     2     0     3     4
[10,]     0     0     0     0     0     0     0     0     5
[11,]     0     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     0     0     6
[15,]     0     0     0     0     0     0     0     7     8
[16,]     0     0     0     0     0     0     0     9    10
[17,]     0     0     0     0     0     0     0     0     0
[18,]     0     0     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     0     1     2
[20,]     0     0     0     0     0     0     0     0     3
[21,]     0     0     0     0     0     0     0     4     5
[22,]     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     6     7
[24,]     8     0     9     0     2     0     0    10     1
[25,]     3     0     4     0     0     0     5     0     0
[26,]     0     0     0     0     0     0     6     0     0
[27,]     0     0     0     0     7     0     0     0     8
[28,]     0     0     0     0     0     0     0     0     9
[29,]     0     0     0     0     0     0    10     0     1
[30,]     0     7     0     0     0     0     0     2     3
[31,]     0     0     0     0     0     0     0     4     5
[32,]     6     0     0    10     0     0     0     6     7
[33,]     0     0     0     0     2     4     6     0     8
[34,]     0     8     9     1     3     5     7     8     0
> 
> 
> 
> 
> cleanEx()
> nameEx("as_adj_list")
> ### * as_adj_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_adj_list
> ### Title: Adjacency lists
> ### Aliases: as_adj_list as_adj_edge_list
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> as_adj_list(g)
[[1]]
+ 2/10 vertices, from 747c58f:
[1]  2 10

[[2]]
+ 2/10 vertices, from 747c58f:
[1] 1 3

[[3]]
+ 2/10 vertices, from 747c58f:
[1] 2 4

[[4]]
+ 2/10 vertices, from 747c58f:
[1] 3 5

[[5]]
+ 2/10 vertices, from 747c58f:
[1] 4 6

[[6]]
+ 2/10 vertices, from 747c58f:
[1] 5 7

[[7]]
+ 2/10 vertices, from 747c58f:
[1] 6 8

[[8]]
+ 2/10 vertices, from 747c58f:
[1] 7 9

[[9]]
+ 2/10 vertices, from 747c58f:
[1]  8 10

[[10]]
+ 2/10 vertices, from 747c58f:
[1] 1 9

> as_adj_edge_list(g)
[[1]]
+ 2/10 edges from 747c58f:
[1] 1-- 2 1--10

[[2]]
+ 2/10 edges from 747c58f:
[1] 1--2 2--3

[[3]]
+ 2/10 edges from 747c58f:
[1] 2--3 3--4

[[4]]
+ 2/10 edges from 747c58f:
[1] 3--4 4--5

[[5]]
+ 2/10 edges from 747c58f:
[1] 4--5 5--6

[[6]]
+ 2/10 edges from 747c58f:
[1] 5--6 6--7

[[7]]
+ 2/10 edges from 747c58f:
[1] 6--7 7--8

[[8]]
+ 2/10 edges from 747c58f:
[1] 7--8 8--9

[[9]]
+ 2/10 edges from 747c58f:
[1] 8-- 9 9--10

[[10]]
+ 2/10 edges from 747c58f:
[1] 1--10 9--10

> 
> 
> 
> 
> cleanEx()
> nameEx("as_adjacency_matrix")
> ### * as_adjacency_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_adjacency_matrix
> ### Title: Convert a graph to an adjacency matrix
> ### Aliases: as_adjacency_matrix
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(10, 2 / 10)
> as_adjacency_matrix(g)
10 x 10 sparse Matrix of class "dgCMatrix"
                         
 [1,] . . . . . . . . . .
 [2,] . . 1 . . . . . . 1
 [3,] . 1 . 1 . . . . 1 .
 [4,] . . 1 . . . 1 . . .
 [5,] . . . . . . 1 1 . .
 [6,] . . . . . . . . . .
 [7,] . . . 1 1 . . 1 . .
 [8,] . . . . 1 . 1 . . .
 [9,] . . 1 . . . . . . 1
[10,] . 1 . . . . . . 1 .
> V(g)$name <- letters[1:vcount(g)]
> as_adjacency_matrix(g)
10 x 10 sparse Matrix of class "dgCMatrix"
  [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]]
                     
a . . . . . . . . . .
b . . 1 . . . . . . 1
c . 1 . 1 . . . . 1 .
d . . 1 . . . 1 . . .
e . . . . . . 1 1 . .
f . . . . . . . . . .
g . . . 1 1 . . 1 . .
h . . . . 1 . 1 . . .
i . . 1 . . . . . . 1
j . 1 . . . . . . 1 .
> E(g)$weight <- runif(ecount(g))
> as_adjacency_matrix(g, attr = "weight")
10 x 10 sparse Matrix of class "dgCMatrix"
  [[ suppressing 10 column names ‘a’, ‘b’, ‘c’ ... ]]
                                                                             
a . .         .         .          .         . .          .         .        
b . .         0.2672207 .          .         . .          .         .        
c . 0.2672207 .         0.38611409 .         . .          .         0.4820801
d . .         0.3861141 .          .         . 0.01339033 .         .        
e . .         .         .          .         . 0.38238796 0.8696908 .        
f . .         .         .          .         . .          .         .        
g . .         .         0.01339033 0.3823880 . .          0.3403490 .        
h . .         .         .          0.8696908 . 0.34034900 .         .        
i . .         0.4820801 .          .         . .          .         .        
j . 0.5995658 .         .          .         . .          .         0.4935413
           
a .        
b 0.5995658
c .        
d .        
e .        
f .        
g .        
h .        
i 0.4935413
j .        
> 
> 
> 
> cleanEx()
> nameEx("as_biadjacency_matrix")
> ### * as_biadjacency_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_biadjacency_matrix
> ### Title: Bipartite adjacency matrix of a bipartite graph
> ### Aliases: as_biadjacency_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_bipartite_graph(c(0, 1, 0, 1, 0, 0), c(1, 2, 2, 3, 3, 4))
> as_biadjacency_matrix(g)
  2 4
1 1 0
3 1 1
5 0 0
6 0 0
> 
> 
> 
> 
> cleanEx()
> nameEx("as_directed")
> ### * as_directed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_directed
> ### Title: Convert between directed and undirected graphs
> ### Aliases: as_directed as_undirected
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> as_directed(g, "mutual")
IGRAPH d89c75e D--- 10 20 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from d89c75e:
 [1]  1-> 2  2-> 3  3-> 4  4-> 5  5-> 6  6-> 7  7-> 8  8-> 9  9->10  1->10
[11]  2-> 1  3-> 2  4-> 3  5-> 4  6-> 5  7-> 6  8-> 7  9-> 8 10-> 9 10-> 1
> g2 <- make_star(10)
> as_undirected(g)
IGRAPH 2eca4f7 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 2eca4f7:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> # Combining edge attributes
> g3 <- make_ring(10, directed = TRUE, mutual = TRUE)
> E(g3)$weight <- seq_len(ecount(g3))
> ug3 <- as_undirected(g3)
> print(ug3, e = TRUE)
IGRAPH 0f7e8ae U-W- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), weight (e/n)
+ edges from 0f7e8ae:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 1--10 9--10
> ## Don't show: 
> if (rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ x11(width = 10, height = 5)
+ layout(rbind(1:2))
+ plot(g3, layout = layout_in_circle, edge.label = E(g3)$weight)
+ plot(ug3, layout = layout_in_circle, edge.label = E(ug3)$weight)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> g4 <- make_graph(c(
+   1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 4,
+   6, 7, 7, 6, 7, 8, 7, 8, 8, 7, 8, 9, 8, 9,
+   9, 8, 9, 8, 9, 9, 10, 10, 10, 10
+ ))
> E(g4)$weight <- seq_len(ecount(g4))
> ug4 <- as_undirected(g4,
+   mode = "mutual",
+   edge.attr.comb = list(weight = length)
+ )
> print(ug4, e = TRUE)
IGRAPH 4a4fb78 U-W- 10 7 -- 
+ attr: weight (e/n)
+ edges from 4a4fb78:
[1]  6-- 7  7-- 8  8-- 9  8-- 9  9-- 9 10--10 10--10
> 
> 
> 
> 
> cleanEx()
> nameEx("as_edgelist")
> ### * as_edgelist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_edgelist
> ### Title: Convert a graph to an edge list
> ### Aliases: as_edgelist
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(10, 2 / 10)
> as_edgelist(g)
      [,1] [,2]
 [1,]    2    3
 [2,]    3    4
 [3,]    4    7
 [4,]    5    7
 [5,]    5    8
 [6,]    7    8
 [7,]    3    9
 [8,]    2   10
 [9,]    9   10
> 
> V(g)$name <- LETTERS[seq_len(gorder(g))]
> as_edgelist(g)
      [,1] [,2]
 [1,] "B"  "C" 
 [2,] "C"  "D" 
 [3,] "D"  "G" 
 [4,] "E"  "G" 
 [5,] "E"  "H" 
 [6,] "G"  "H" 
 [7,] "C"  "I" 
 [8,] "B"  "J" 
 [9,] "I"  "J" 
> 
> 
> 
> 
> cleanEx()
> nameEx("as_graphnel")
> ### * as_graphnel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_graphnel
> ### Title: Convert igraph graphs to graphNEL objects from the graph package
> ### Aliases: as_graphnel
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("graph")) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ ## Undirected
+ g <- make_ring(10)
+ V(g)$name <- letters[1:10]
+ GNEL <- as_graphnel(g)
+ g2 <- graph_from_graphnel(GNEL)
+ g2
+ 
+ ## Directed
+ g3 <- make_star(10, mode = "in")
+ V(g3)$name <- letters[1:10]
+ GNEL2 <- as_graphnel(g3)
+ g4 <- graph_from_graphnel(GNEL2)
+ g4
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("as_ids")
> ### * as_ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_ids
> ### Title: Convert a vertex or edge sequence to an ordinary vector
> ### Aliases: as_ids as_ids.igraph.vs as_ids.igraph.es
> 
> ### ** Examples
> 
> g <- make_ring(10)
> as_ids(V(g))
 [1]  1  2  3  4  5  6  7  8  9 10
> as_ids(E(g))
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> V(g)$name <- letters[1:10]
> as_ids(V(g))
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"
> as_ids(E(g))
 [1] "a|b" "b|c" "c|d" "d|e" "e|f" "f|g" "g|h" "h|i" "i|j" "a|j"
> 
> 
> 
> cleanEx()
> nameEx("as_long_data_frame")
> ### * as_long_data_frame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_long_data_frame
> ### Title: Convert a graph to a long data frame
> ### Aliases: as_long_data_frame
> 
> ### ** Examples
> 
> g <- make_(
+   ring(10),
+   with_vertex_(name = letters[1:10], color = "red"),
+   with_edge_(weight = 1:10, color = "green")
+ )
> as_long_data_frame(g)
   from to weight color from_name from_color to_name to_color
1     1  2      1 green         a        red       b      red
2     2  3      2 green         b        red       c      red
3     3  4      3 green         c        red       d      red
4     4  5      4 green         d        red       e      red
5     5  6      5 green         e        red       f      red
6     6  7      6 green         f        red       g      red
7     7  8      7 green         g        red       h      red
8     8  9      8 green         h        red       i      red
9     9 10      9 green         i        red       j      red
10    1 10     10 green         a        red       j      red
> 
> 
> 
> cleanEx()
> nameEx("as_membership")
> ### * as_membership
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_membership
> ### Title: Declare a numeric vector as a membership vector
> ### Aliases: as_membership
> 
> ### ** Examples
> 
> ## Compare to the correct clustering
> g <- (make_full_graph(10) + make_full_graph(10)) %>%
+   rewire(each_edge(p = 0.2))
> correct <- rep(1:2, each = 10) %>% as_membership()
> fc <- cluster_fast_greedy(g)
> compare(correct, fc)
[1] 0.3300913
> compare(correct, membership(fc))
[1] 0.3300913
> 
> 
> 
> cleanEx()
> nameEx("assortativity")
> ### * assortativity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assortativity
> ### Title: Assortativity coefficient
> ### Aliases: assortativity assortativity_nominal assortativity_degree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # random network, close to zero
> assortativity_degree(sample_gnp(10000, 3 / 10000))
[1] -0.001301647
> 
> # BA model, tends to be dissortative
> assortativity_degree(sample_pa(10000, m = 4))
[1] -0.02495471
> 
> 
> 
> cleanEx()
> nameEx("automorphism_group")
> ### * automorphism_group
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: automorphism_group
> ### Title: Generating set of the automorphism group of a graph
> ### Aliases: automorphism_group
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A ring has n*2 automorphisms, and a possible generating set is one that
> ## "turns" the ring by one vertex to the left or right
> g <- make_ring(10)
> automorphism_group(g)
[[1]]
+ 10/10 vertices, from ff2af29:
 [1]  1 10  9  8  7  6  5  4  3  2

[[2]]
+ 10/10 vertices, from ff2af29:
 [1]  2  3  4  5  6  7  8  9 10  1

> 
> 
> 
> cleanEx()
> nameEx("betweenness")
> ### * betweenness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: betweenness
> ### Title: Vertex and edge betweenness centrality
> ### Aliases: betweenness betweenness.estimate edge.betweenness.estimate
> ###   edge_betweenness
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(10, 3 / 10)
> betweenness(g)
 [1]  6.0000000  3.2500000 13.2500000  2.5833333  0.9166667  0.9166667
 [7] 13.2500000  2.5833333  3.2500000  6.0000000
> edge_betweenness(g)
 [1] 12.500000  8.500000  4.250000  6.583333  7.166667  9.250000  6.583333
 [8]  5.666667  4.083333  7.166667  4.250000 12.500000  8.500000
> 
> 
> 
> 
> cleanEx()
> nameEx("bfs")
> ### * bfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bfs
> ### Title: Breadth-first search
> ### Aliases: bfs
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Two rings
> bfs(make_ring(10) %du% make_ring(10),
+   root = 1, "out",
+   order = TRUE, rank = TRUE, father = TRUE, pred = TRUE,
+   succ = TRUE, dist = TRUE
+ )
$root
[1] 1

$mode
[1] "out"

$order
+ 20/20 vertices, from c58b2a8:
 [1]  1  2 10  3  9  4  8  5  7  6 11 12 20 13 19 14 18 15 17 16

$rank
 [1]  1  2  4  6  8 10  9  7  5  3 11 12 14 16 18 20 19 17 15 13

$father
+ 20/20 vertices, from c58b2a8:
 [1] NA  1  2  3  4  5  8  9 10  1 NA 11 12 13 14 15 18 19 20 11

$pred
+ 20/20 vertices, from c58b2a8:
 [1] NA  1 10  9  8  7  5  4  3  2 NA 11 20 19 18 17 15 14 13 12

$succ
+ 20/20 vertices, from c58b2a8:
 [1]  2 10  9  8  7 NA  6  5  4  3 12 20 19 18 17 NA 16 15 14 13

$dist
 [1] 0 1 2 3 4 5 4 3 2 1 0 1 2 3 4 5 4 3 2 1

$neimode
[1] "out"

> 
> ## How to use a callback
> f <- function(graph, data, extra) {
+   print(data)
+   FALSE
+ }
> tmp <- bfs(make_ring(10) %du% make_ring(10),
+   root = 1, "out",
+   callback = f
+ )
 vid pred succ rank dist 
   1    0    2    1    0 
 vid pred succ rank dist 
   2    1   10    2    1 
 vid pred succ rank dist 
  10    2    3    3    1 
 vid pred succ rank dist 
   3   10    9    4    2 
 vid pred succ rank dist 
   9    3    4    5    2 
 vid pred succ rank dist 
   4    9    8    6    3 
 vid pred succ rank dist 
   8    4    5    7    3 
 vid pred succ rank dist 
   5    8    7    8    4 
 vid pred succ rank dist 
   7    5    6    9    4 
 vid pred succ rank dist 
   6    7    0   10    5 
 vid pred succ rank dist 
  11    0   12   11    0 
 vid pred succ rank dist 
  12   11   20   12    1 
 vid pred succ rank dist 
  20   12   13   13    1 
 vid pred succ rank dist 
  13   20   19   14    2 
 vid pred succ rank dist 
  19   13   14   15    2 
 vid pred succ rank dist 
  14   19   18   16    3 
 vid pred succ rank dist 
  18   14   15   17    3 
 vid pred succ rank dist 
  15   18   17   18    4 
 vid pred succ rank dist 
  17   15   16   19    4 
 vid pred succ rank dist 
  16   17    0   20    5 
> 
> ## How to use a callback to stop the search
> ## We stop after visiting all vertices in the initial component
> f <- function(graph, data, extra) {
+   data["succ"] == -1
+ }
> bfs(make_ring(10) %du% make_ring(10), root = 1, callback = f)
$root
[1] 1

$mode
[1] "out"

$order
+ 20/20 vertices, from 965db20:
 [1]  1  2 10  3  9  4  8  5  7  6 11 12 20 13 19 14 18 15 17 16

$rank
NULL

$father
NULL

$pred
NULL

$succ
NULL

$dist
NULL

$neimode
[1] "out"

> 
> 
> 
> 
> cleanEx()
> nameEx("biconnected_components")
> ### * biconnected_components
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: biconnected_components
> ### Title: Biconnected components
> ### Aliases: biconnected_components
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- disjoint_union(make_full_graph(5), make_full_graph(5))
> clu <- components(g)$membership
> g <- add_edges(g, c(which(clu == 1), which(clu == 2)))
> bc <- biconnected_components(g)
> 
> 
> 
> cleanEx()
> nameEx("bipartite_mapping")
> ### * bipartite_mapping
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bipartite_mapping
> ### Title: Decide whether a graph is bipartite
> ### Aliases: bipartite_mapping
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Rings with an even number of vertices are bipartite
> g <- make_ring(10)
> bipartite_mapping(g)
$res
[1] TRUE

$type
 [1] FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE

> 
> ## All star graphs are bipartite
> g2 <- make_star(10)
> bipartite_mapping(g2)
$res
[1] TRUE

$type
 [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE

> 
> ## A graph containing a triangle is not bipartite
> g3 <- make_ring(10)
> g3 <- add_edges(g3, c(1, 3))
> bipartite_mapping(g3)
$res
[1] FALSE

$type
logical(0)

> 
> 
> 
> cleanEx()
> nameEx("bipartite_projection")
> ### * bipartite_projection
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bipartite_projection
> ### Title: Project a bipartite graph
> ### Aliases: bipartite_projection bipartite_projection_size
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Projection of a full bipartite graph is a full graph
> g <- make_full_bipartite_graph(10, 5)
> proj <- bipartite_projection(g)
> graph.isomorphic(proj[[1]], make_full_graph(10))
[1] TRUE
> graph.isomorphic(proj[[2]], make_full_graph(5))
[1] TRUE
> 
> ## The projection keeps the vertex attributes
> M <- matrix(0, nrow = 5, ncol = 3)
> rownames(M) <- c("Alice", "Bob", "Cecil", "Dan", "Ethel")
> colnames(M) <- c("Party", "Skiing", "Badminton")
> M[] <- sample(0:1, length(M), replace = TRUE)
> M
      Party Skiing Badminton
Alice     0      0         0
Bob       1      0         0
Cecil     0      0         0
Dan       0      1         0
Ethel     1      1         0
> g2 <- graph_from_biadjacency_matrix(M)
> g2$name <- "Event network"
> proj2 <- bipartite_projection(g2)
> print(proj2[[1]], g = TRUE, e = TRUE)
IGRAPH ec78f52 UNW- 5 2 -- Event network
+ attr: name (g/c), name (v/c), weight (e/n)
+ edges from ec78f52 (vertex names):
[1] Bob--Ethel Dan--Ethel
> print(proj2[[2]], g = TRUE, e = TRUE)
IGRAPH d23e3db UNW- 3 1 -- Event network
+ attr: name (g/c), name (v/c), weight (e/n)
+ edge from d23e3db (vertex names):
[1] Party--Skiing
> 
> 
> 
> 
> cleanEx()
> nameEx("c.igraph.es")
> ### * c.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c.igraph.es
> ### Title: Concatenate edge sequences
> ### Aliases: c.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> c(E(g)[1], E(g)["A|B"], E(g)[1:4])
+ 6/10 edges from 34d2615 (vertex names):
[1] A--B A--B A--B B--C C--D D--E
> 
> 
> 
> cleanEx()
> nameEx("c.igraph.vs")
> ### * c.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c.igraph.vs
> ### Title: Concatenate vertex sequences
> ### Aliases: c.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> c(V(g)[1], V(g)["A"], V(g)[1:4])
+ 6/10 vertices, named, from 2c2717b:
[1] A A A B C D
> 
> 
> 
> cleanEx()
> nameEx("canonical_permutation")
> ### * canonical_permutation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: canonical_permutation
> ### Title: Canonical permutation of a graph
> ### Aliases: canonical_permutation
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Calculate the canonical form of a random graph
> g1 <- sample_gnm(10, 20)
> cp1 <- canonical_permutation(g1)
> cf1 <- permute(g1, cp1$labeling)
> 
> ## Do the same with a random permutation of it
> g2 <- permute(g1, sample(vcount(g1)))
> cp2 <- canonical_permutation(g2)
> cf2 <- permute(g2, cp2$labeling)
> 
> ## Check that they are the same
> el1 <- as_edgelist(cf1)
> el2 <- as_edgelist(cf2)
> el1 <- el1[order(el1[, 1], el1[, 2]), ]
> el2 <- el2[order(el2[, 1], el2[, 2]), ]
> all(el1 == el2)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("centr_betw")
> ### * centr_betw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_betw
> ### Title: Centralize a graph according to the betweenness of vertices
> ### Aliases: centr_betw
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g)$centralization
[1] 0.1718535
> centr_clo(g, mode = "all")$centralization
[1] 0.4291303
> centr_betw(g, directed = FALSE)$centralization
[1] 0.2488561
> centr_eigen(g, directed = FALSE)$centralization
[1] 0.9429209
> 
> 
> 
> cleanEx()
> nameEx("centr_betw_tmax")
> ### * centr_betw_tmax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_betw_tmax
> ### Title: Theoretical maximum for betweenness centralization
> ### Aliases: centr_betw_tmax
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_betw(g, normalized = FALSE)$centralization %>%
+   `/`(centr_betw_tmax(g))
[1] 0.0006668531
> centr_betw(g, normalized = TRUE)$centralization
[1] 0.0006668531
> 
> 
> 
> cleanEx()
> nameEx("centr_clo")
> ### * centr_clo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_clo
> ### Title: Centralize a graph according to the closeness of vertices
> ### Aliases: centr_clo
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g)$centralization
[1] 0.1718535
> centr_clo(g, mode = "all")$centralization
[1] 0.4291303
> centr_betw(g, directed = FALSE)$centralization
[1] 0.2488561
> centr_eigen(g, directed = FALSE)$centralization
[1] 0.9429209
> 
> 
> 
> cleanEx()
> nameEx("centr_clo_tmax")
> ### * centr_clo_tmax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_clo_tmax
> ### Title: Theoretical maximum for closeness centralization
> ### Aliases: centr_clo_tmax
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_clo(g, normalized = FALSE)$centralization %>%
+   `/`(centr_clo_tmax(g))
[1] NaN
> centr_clo(g, normalized = TRUE)$centralization
[1] NaN
> 
> 
> 
> cleanEx()
> nameEx("centr_degree")
> ### * centr_degree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_degree
> ### Title: Centralize a graph according to the degrees of vertices
> ### Aliases: centr_degree
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g)$centralization
[1] 0.1718535
> centr_clo(g, mode = "all")$centralization
[1] 0.4291303
> centr_betw(g, directed = FALSE)$centralization
[1] 0.2488561
> centr_eigen(g, directed = FALSE)$centralization
[1] 0.9429209
> 
> 
> 
> cleanEx()
> nameEx("centr_degree_tmax")
> ### * centr_degree_tmax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_degree_tmax
> ### Title: Theoretical maximum for degree centralization
> ### Aliases: centr_degree_tmax
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g, normalized = FALSE)$centralization %>%
+   `/`(centr_degree_tmax(g, loops = FALSE))
[1] 0.1720257
> centr_degree(g, normalized = TRUE)$centralization
[1] 0.1718535
> 
> 
> 
> cleanEx()
> nameEx("centr_eigen")
> ### * centr_eigen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_eigen
> ### Title: Centralize a graph according to the eigenvector centrality of
> ###   vertices
> ### Aliases: centr_eigen
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g)$centralization
[1] 0.1718535
> centr_clo(g, mode = "all")$centralization
[1] 0.4291303
> centr_betw(g, directed = FALSE)$centralization
[1] 0.2488561
> centr_eigen(g, directed = FALSE)$centralization
[1] 0.9429209
> 
> # The most centralized graph according to eigenvector centrality
> g0 <- make_graph(c(2, 1), n = 10, dir = FALSE)
> g1 <- make_star(10, mode = "undirected")
> centr_eigen(g0)$centralization
[1] 1
> centr_eigen(g1)$centralization
[1] 0.75
> 
> 
> 
> cleanEx()
> nameEx("centr_eigen_tmax")
> ### * centr_eigen_tmax
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centr_eigen_tmax
> ### Title: Theoretical maximum for eigenvector centralization
> ### Aliases: centr_eigen_tmax
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_eigen(g, normalized = FALSE)$centralization %>%
+   `/`(centr_eigen_tmax(g))
[1] 0.9429209
> centr_eigen(g, normalized = TRUE)$centralization
[1] 0.9429209
> 
> 
> 
> cleanEx()
> nameEx("centralize")
> ### * centralize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: centralize
> ### Title: Centralization of a graph
> ### Aliases: centralize centralization
> 
> ### ** Examples
> 
> # A BA graph is quite centralized
> g <- sample_pa(1000, m = 4)
> centr_degree(g)$centralization
[1] 0.1718535
> centr_clo(g, mode = "all")$centralization
[1] 0.4291303
> centr_eigen(g, directed = FALSE)$centralization
[1] 0.9429209
> 
> # Calculate centralization from pre-computed scores
> deg <- degree(g)
> tmax <- centr_degree_tmax(g, loops = FALSE)
> centralize(deg, tmax)
[1] 0.1720257
> 
> # The most centralized graph according to eigenvector centrality
> g0 <- make_graph(c(2, 1), n = 10, dir = FALSE)
> g1 <- make_star(10, mode = "undirected")
> centr_eigen(g0)$centralization
[1] 1
> centr_eigen(g1)$centralization
[1] 0.75
> 
> 
> 
> cleanEx()
> nameEx("cliques")
> ### * cliques
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cliques
> ### Title: Functions to find cliques, i.e. complete subgraphs in a graph
> ### Aliases: cliques largest_cliques max_cliques count_max_cliques
> ###   clique_num largest_weighted_cliques weighted_clique_num
> ###   clique_size_counts
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # this usually contains cliques of size six
> g <- sample_gnp(100, 0.3)
> clique_num(g)
[1] 6
> cliques(g, min = 6)
[[1]]
+ 6/100 vertices, from d79e8c3:
[1]  3 13 62 78 88 91

[[2]]
+ 6/100 vertices, from d79e8c3:
[1]  3 13 19 49 78 80

[[3]]
+ 6/100 vertices, from d79e8c3:
[1] 11 42 51 70 84 92

[[4]]
+ 6/100 vertices, from d79e8c3:
[1]  1 36 51 56 62 93

[[5]]
+ 6/100 vertices, from d79e8c3:
[1] 45 75 79 81 82 99

[[6]]
+ 6/100 vertices, from d79e8c3:
[1] 19 36 80 93 94 98

[[7]]
+ 6/100 vertices, from d79e8c3:
[1] 19 20 21 80 94 98

[[8]]
+ 6/100 vertices, from d79e8c3:
[1]  3 13 19 49 80 98

[[9]]
+ 6/100 vertices, from d79e8c3:
[1] 13 31 35 51 78 90

[[10]]
+ 6/100 vertices, from d79e8c3:
[1] 31 35 41 51 78 90

[[11]]
+ 6/100 vertices, from d79e8c3:
[1] 13 31 35 51 78 80

[[12]]
+ 6/100 vertices, from d79e8c3:
[1] 31 35 41 51 78 80

[[13]]
+ 6/100 vertices, from d79e8c3:
[1] 13 19 20 31 78 80

[[14]]
+ 6/100 vertices, from d79e8c3:
[1] 11 30 42 70 84 92

> largest_cliques(g)
[[1]]
+ 6/100 vertices, from d79e8c3:
[1] 13 91 88 78 62  3

[[2]]
+ 6/100 vertices, from d79e8c3:
[1] 13 90 78 51 31 35

[[3]]
+ 6/100 vertices, from d79e8c3:
[1] 13 51 31 80 78 35

[[4]]
+ 6/100 vertices, from d79e8c3:
[1] 13 19 78 49  3 80

[[5]]
+ 6/100 vertices, from d79e8c3:
[1] 13 19 78 20 31 80

[[6]]
+ 6/100 vertices, from d79e8c3:
[1] 13 19 98 80  3 49

[[7]]
+ 6/100 vertices, from d79e8c3:
[1] 19 94 98 80 20 21

[[8]]
+ 6/100 vertices, from d79e8c3:
[1] 19 94 98 80 93 36

[[9]]
+ 6/100 vertices, from d79e8c3:
[1] 30 92 84 70 42 11

[[10]]
+ 6/100 vertices, from d79e8c3:
[1] 31 51 78 41 35 80

[[11]]
+ 6/100 vertices, from d79e8c3:
[1] 31 51 78 41 35 90

[[12]]
+ 6/100 vertices, from d79e8c3:
[1] 36 93 51 56 62  1

[[13]]
+ 6/100 vertices, from d79e8c3:
[1] 42 70 92 11 51 84

[[14]]
+ 6/100 vertices, from d79e8c3:
[1] 45 81 99 79 82 75

> 
> # To have a bit less maximal cliques, about 100-200 usually
> g <- sample_gnp(100, 0.03)
> max_cliques(g)
[[1]]
+ 1/100 vertex, from c2e70bd:
[1] 96

[[2]]
+ 1/100 vertex, from c2e70bd:
[1] 31

[[3]]
+ 1/100 vertex, from c2e70bd:
[1] 27

[[4]]
+ 1/100 vertex, from c2e70bd:
[1] 29

[[5]]
+ 1/100 vertex, from c2e70bd:
[1] 23

[[6]]
+ 2/100 vertices, from c2e70bd:
[1] 72 54

[[7]]
+ 2/100 vertices, from c2e70bd:
[1]  5 40

[[8]]
+ 2/100 vertices, from c2e70bd:
[1] 22 24

[[9]]
+ 2/100 vertices, from c2e70bd:
[1] 76 71

[[10]]
+ 2/100 vertices, from c2e70bd:
[1] 94 65

[[11]]
+ 2/100 vertices, from c2e70bd:
[1] 94 52

[[12]]
+ 2/100 vertices, from c2e70bd:
[1] 78 66

[[13]]
+ 2/100 vertices, from c2e70bd:
[1] 97 66

[[14]]
+ 2/100 vertices, from c2e70bd:
[1] 97 58

[[15]]
+ 2/100 vertices, from c2e70bd:
[1] 98 64

[[16]]
+ 2/100 vertices, from c2e70bd:
[1] 35 73

[[17]]
+ 2/100 vertices, from c2e70bd:
[1] 44 49

[[18]]
+ 2/100 vertices, from c2e70bd:
[1] 47 30

[[19]]
+ 2/100 vertices, from c2e70bd:
[1] 85 24

[[20]]
+ 2/100 vertices, from c2e70bd:
[1] 16 56

[[21]]
+ 2/100 vertices, from c2e70bd:
[1] 25 79

[[22]]
+ 2/100 vertices, from c2e70bd:
[1] 25 75

[[23]]
+ 2/100 vertices, from c2e70bd:
[1] 26 91

[[24]]
+ 2/100 vertices, from c2e70bd:
[1] 26 89

[[25]]
+ 2/100 vertices, from c2e70bd:
[1] 26 28

[[26]]
+ 2/100 vertices, from c2e70bd:
[1]  28 100

[[27]]
+ 2/100 vertices, from c2e70bd:
[1] 28 60

[[28]]
+ 2/100 vertices, from c2e70bd:
[1] 30 93

[[29]]
+ 2/100 vertices, from c2e70bd:
[1] 30 83

[[30]]
+ 2/100 vertices, from c2e70bd:
[1] 30  3

[[31]]
+ 2/100 vertices, from c2e70bd:
[1] 30  1

[[32]]
+ 2/100 vertices, from c2e70bd:
[1] 32 59

[[33]]
+ 2/100 vertices, from c2e70bd:
[1] 32 39

[[34]]
+ 2/100 vertices, from c2e70bd:
[1] 33 42

[[35]]
+ 2/100 vertices, from c2e70bd:
[1] 33 14

[[36]]
+ 2/100 vertices, from c2e70bd:
[1] 34 91

[[37]]
+ 2/100 vertices, from c2e70bd:
[1] 34 66

[[38]]
+ 2/100 vertices, from c2e70bd:
[1] 36 95

[[39]]
+ 2/100 vertices, from c2e70bd:
[1] 36 81

[[40]]
+ 2/100 vertices, from c2e70bd:
[1] 36 45

[[41]]
+ 2/100 vertices, from c2e70bd:
[1] 36 20

[[42]]
+ 3/100 vertices, from c2e70bd:
[1] 37 54 68

[[43]]
+ 2/100 vertices, from c2e70bd:
[1] 38 61

[[44]]
+ 2/100 vertices, from c2e70bd:
[1] 38  7

[[45]]
+ 2/100 vertices, from c2e70bd:
[1] 39 62

[[46]]
+ 2/100 vertices, from c2e70bd:
[1] 40 75

[[47]]
+ 2/100 vertices, from c2e70bd:
[1] 40 24

[[48]]
+ 2/100 vertices, from c2e70bd:
[1] 40  4

[[49]]
+ 2/100 vertices, from c2e70bd:
[1] 41 82

[[50]]
+ 2/100 vertices, from c2e70bd:
[1] 41 52

[[51]]
+ 2/100 vertices, from c2e70bd:
[1] 41 24

[[52]]
+ 2/100 vertices, from c2e70bd:
[1] 42 92

[[53]]
+ 2/100 vertices, from c2e70bd:
[1] 42 13

[[54]]
+ 2/100 vertices, from c2e70bd:
[1] 43 62

[[55]]
+ 2/100 vertices, from c2e70bd:
[1] 43 12

[[56]]
+ 2/100 vertices, from c2e70bd:
[1] 45 80

[[57]]
+ 2/100 vertices, from c2e70bd:
[1] 45 68

[[58]]
+ 2/100 vertices, from c2e70bd:
[1] 45 67

[[59]]
+ 2/100 vertices, from c2e70bd:
[1] 46 84

[[60]]
+ 2/100 vertices, from c2e70bd:
[1] 46 13

[[61]]
+ 2/100 vertices, from c2e70bd:
[1] 48 89

[[62]]
+ 2/100 vertices, from c2e70bd:
[1] 48 51

[[63]]
+ 2/100 vertices, from c2e70bd:
[1] 49 20

[[64]]
+ 2/100 vertices, from c2e70bd:
[1] 49 11

[[65]]
+ 2/100 vertices, from c2e70bd:
[1]  50 100

[[66]]
+ 2/100 vertices, from c2e70bd:
[1] 50 74

[[67]]
+ 2/100 vertices, from c2e70bd:
[1] 51  7

[[68]]
+ 2/100 vertices, from c2e70bd:
[1] 52 53

[[69]]
+ 2/100 vertices, from c2e70bd:
[1] 52 21

[[70]]
+ 2/100 vertices, from c2e70bd:
[1] 53 11

[[71]]
+ 2/100 vertices, from c2e70bd:
[1] 53  3

[[72]]
+ 2/100 vertices, from c2e70bd:
[1] 54 83

[[73]]
+ 2/100 vertices, from c2e70bd:
[1] 55 80

[[74]]
+ 2/100 vertices, from c2e70bd:
[1] 55 62

[[75]]
+ 2/100 vertices, from c2e70bd:
[1] 55  9

[[76]]
+ 2/100 vertices, from c2e70bd:
[1] 56 86

[[77]]
+ 2/100 vertices, from c2e70bd:
[1] 56 82

[[78]]
+ 2/100 vertices, from c2e70bd:
[1] 56 68

[[79]]
+ 2/100 vertices, from c2e70bd:
[1] 56  2

[[80]]
+ 2/100 vertices, from c2e70bd:
[1] 57 19

[[81]]
+ 2/100 vertices, from c2e70bd:
[1] 57 15

[[82]]
+ 2/100 vertices, from c2e70bd:
[1] 59  6

[[83]]
+ 2/100 vertices, from c2e70bd:
[1] 60 11

[[84]]
+ 2/100 vertices, from c2e70bd:
[1] 60  1

[[85]]
+ 2/100 vertices, from c2e70bd:
[1] 61 14

[[86]]
+ 2/100 vertices, from c2e70bd:
[1] 61 11

[[87]]
+ 2/100 vertices, from c2e70bd:
[1] 62 75

[[88]]
+ 2/100 vertices, from c2e70bd:
[1] 63 17

[[89]]
+ 2/100 vertices, from c2e70bd:
[1] 63  2

[[90]]
+ 2/100 vertices, from c2e70bd:
[1] 64 77

[[91]]
+ 2/100 vertices, from c2e70bd:
[1] 64 19

[[92]]
+ 2/100 vertices, from c2e70bd:
[1] 64 17

[[93]]
+ 2/100 vertices, from c2e70bd:
[1] 66 73

[[94]]
+ 2/100 vertices, from c2e70bd:
[1] 66 18

[[95]]
+ 2/100 vertices, from c2e70bd:
[1] 67 89

[[96]]
+ 2/100 vertices, from c2e70bd:
[1] 67 84

[[97]]
+ 2/100 vertices, from c2e70bd:
[1] 67 70

[[98]]
+ 2/100 vertices, from c2e70bd:
[1] 67 10

[[99]]
+ 2/100 vertices, from c2e70bd:
[1] 69 93

[[100]]
+ 2/100 vertices, from c2e70bd:
[1] 69 84

[[101]]
+ 2/100 vertices, from c2e70bd:
[1] 69 18

[[102]]
+ 2/100 vertices, from c2e70bd:
[1] 70 88

[[103]]
+ 2/100 vertices, from c2e70bd:
[1] 70 19

[[104]]
+ 2/100 vertices, from c2e70bd:
[1] 71 73

[[105]]
+ 2/100 vertices, from c2e70bd:
[1] 71  9

[[106]]
+ 2/100 vertices, from c2e70bd:
[1] 73 14

[[107]]
+ 2/100 vertices, from c2e70bd:
[1] 73 12

[[108]]
+ 2/100 vertices, from c2e70bd:
[1] 74 20

[[109]]
+ 2/100 vertices, from c2e70bd:
[1] 74 18

[[110]]
+ 2/100 vertices, from c2e70bd:
[1] 75 14

[[111]]
+ 2/100 vertices, from c2e70bd:
[1] 77  4

[[112]]
+ 2/100 vertices, from c2e70bd:
[1] 79 21

[[113]]
+ 2/100 vertices, from c2e70bd:
[1] 79 18

[[114]]
+ 2/100 vertices, from c2e70bd:
[1] 79 10

[[115]]
+ 2/100 vertices, from c2e70bd:
[1] 81 14

[[116]]
+ 2/100 vertices, from c2e70bd:
[1] 81 11

[[117]]
+ 2/100 vertices, from c2e70bd:
[1] 82 95

[[118]]
+ 2/100 vertices, from c2e70bd:
[1] 82 93

[[119]]
+ 2/100 vertices, from c2e70bd:
[1] 82 90

[[120]]
+ 2/100 vertices, from c2e70bd:
[1] 82 87

[[121]]
+ 2/100 vertices, from c2e70bd:
[1] 84 21

[[122]]
+ 2/100 vertices, from c2e70bd:
[1] 84 15

[[123]]
+ 2/100 vertices, from c2e70bd:
[1]  86 100

[[124]]
+ 2/100 vertices, from c2e70bd:
[1] 86 10

[[125]]
+ 2/100 vertices, from c2e70bd:
[1] 87  9

[[126]]
+ 2/100 vertices, from c2e70bd:
[1] 88 99

[[127]]
+ 2/100 vertices, from c2e70bd:
[1] 88  7

[[128]]
+ 2/100 vertices, from c2e70bd:
[1] 90 11

[[129]]
+ 2/100 vertices, from c2e70bd:
[1]  91 100

[[130]]
+ 2/100 vertices, from c2e70bd:
[1] 92 99

[[131]]
+ 2/100 vertices, from c2e70bd:
[1] 92  4

[[132]]
+ 2/100 vertices, from c2e70bd:
[1] 93 10

[[133]]
+ 2/100 vertices, from c2e70bd:
[1] 93  8

[[134]]
+ 2/100 vertices, from c2e70bd:
[1]  1 10

[[135]]
+ 2/100 vertices, from c2e70bd:
[1] 100   8

[[136]]
+ 2/100 vertices, from c2e70bd:
[1] 3 6

[[137]]
+ 2/100 vertices, from c2e70bd:
[1] 11 12

> 
> 
> 
> cleanEx()
> nameEx("closeness")
> ### * closeness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: closeness
> ### Title: Closeness centrality of vertices
> ### Aliases: closeness closeness.estimate
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g2 <- make_star(10)
> closeness(g)
 [1] 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04
> closeness(g2, mode = "in")
 [1] 0.1111111       NaN       NaN       NaN       NaN       NaN       NaN
 [8]       NaN       NaN       NaN
> closeness(g2, mode = "out")
 [1] NaN   1   1   1   1   1   1   1   1   1
> closeness(g2, mode = "all")
 [1] 0.11111111 0.05882353 0.05882353 0.05882353 0.05882353 0.05882353
 [7] 0.05882353 0.05882353 0.05882353 0.05882353
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_edge_betweenness")
> ### * cluster_edge_betweenness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_edge_betweenness
> ### Title: Community structure detection based on edge betweenness
> ### Aliases: cluster_edge_betweenness
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100, m = 2, directed = FALSE)
> eb <- cluster_edge_betweenness(g)
> 
> g <- make_full_graph(10) %du% make_full_graph(10)
> g <- add_edges(g, c(1, 11))
> eb <- cluster_edge_betweenness(g)
> eb
IGRAPH clustering edge betweenness, groups: 2, mod: 0.49
+ groups:
  $`1`
   [1]  1  2  3  4  5  6  7  8  9 10
  
  $`2`
   [1] 11 12 13 14 15 16 17 18 19 20
  
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_fast_greedy")
> ### * cluster_fast_greedy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_fast_greedy
> ### Title: Community structure via greedy optimization of modularity
> ### Aliases: cluster_fast_greedy
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> g <- add_edges(g, c(1, 6, 1, 11, 6, 11))
> fc <- cluster_fast_greedy(g)
> membership(fc)
 [1] 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2
> sizes(fc)
Community sizes
1 2 3 
5 5 5 
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_fluid_communities")
> ### * cluster_fluid_communities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_fluid_communities
> ### Title: Community detection algorithm based on interacting fluids
> ### Aliases: cluster_fluid_communities
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> comms <- cluster_fluid_communities(g, 2)
> 
> 
> 
> cleanEx()
> nameEx("cluster_infomap")
> ### * cluster_infomap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_infomap
> ### Title: Infomap community finding
> ### Aliases: cluster_infomap
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Zachary's karate club
> g <- make_graph("Zachary")
> 
> imc <- cluster_infomap(g)
> membership(imc)
 [1] 1 1 1 1 2 2 2 1 3 1 2 1 1 1 3 3 2 1 3 1 3 1 3 3 3 3 3 3 3 3 3 3 3 3
> communities(imc)
$`1`
 [1]  1  2  3  4  8 10 12 13 14 18 20 22

$`2`
[1]  5  6  7 11 17

$`3`
 [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34

> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_label_prop")
> ### * cluster_label_prop
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_label_prop
> ### Title: Finding communities based on propagating labels
> ### Aliases: cluster_label_prop
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(10, 5 / 10) %du% sample_gnp(9, 5 / 9)
> g <- add_edges(g, c(1, 12))
> cluster_label_prop(g)
IGRAPH clustering label propagation, groups: 2, mod: 0.48
+ groups:
  $`1`
   [1]  1  2  3  4  5  6  7  8  9 10
  
  $`2`
  [1] 11 12 13 14 15 16 17 18 19
  
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_leading_eigen")
> ### * cluster_leading_eigen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_leading_eigen
> ### Title: Community structure detecting based on the leading eigenvector
> ###   of the community matrix
> ### Aliases: cluster_leading_eigen
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> g <- add_edges(g, c(1, 6, 1, 11, 6, 11))
> lec <- cluster_leading_eigen(g)
> lec
IGRAPH clustering leading eigenvector, groups: 3, mod: 0.58
+ groups:
  $`1`
  [1] 1 2 3 4 5
  
  $`2`
  [1] 11 12 13 14 15
  
  $`3`
  [1]  6  7  8  9 10
  
> 
> cluster_leading_eigen(g, start = membership(lec))
IGRAPH clustering leading eigenvector, groups: 3, mod: 0.58
+ groups:
  $`1`
  [1] 1 2 3 4 5
  
  $`2`
  [1] 11 12 13 14 15
  
  $`3`
  [1]  6  7  8  9 10
  
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_leiden")
> ### * cluster_leiden
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_leiden
> ### Title: Finding community structure of a graph using the Leiden
> ###   algorithm of Traag, van Eck & Waltman.
> ### Aliases: cluster_leiden
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> # By default CPM is used
> r <- quantile(strength(g))[2] / (gorder(g) - 1)
> # Set seed for sake of reproducibility
> set.seed(1)
> ldc <- cluster_leiden(g, resolution = r)
> print(ldc)
IGRAPH clustering leiden, groups: 2, mod: NA
+ groups:
  $`1`
   [1]  1  2  3  4  5  6  7  8 10 11 12 13 14 17 18 20 22
  
  $`2`
   [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34
  
> plot(ldc, g)
> 
> 
> 
> cleanEx()
> nameEx("cluster_louvain")
> ### * cluster_louvain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_louvain
> ### Title: Finding community structure by multi-level optimization of
> ###   modularity
> ### Aliases: cluster_louvain
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # This is so simple that we will have only one level
> g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> g <- add_edges(g, c(1, 6, 1, 11, 6, 11))
> cluster_louvain(g)
IGRAPH clustering multi level, groups: 3, mod: 0.58
+ groups:
  $`1`
  [1] 1 2 3 4 5
  
  $`2`
  [1]  6  7  8  9 10
  
  $`3`
  [1] 11 12 13 14 15
  
> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_spinglass")
> ### * cluster_spinglass
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_spinglass
> ### Title: Finding communities in graphs based on statistical meachanics
> ### Aliases: cluster_spinglass
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(10, 5 / 10) %du% sample_gnp(9, 5 / 9)
> g <- add_edges(g, c(1, 12))
> g <- induced_subgraph(g, subcomponent(g, 1))
> cluster_spinglass(g, spins = 2)
IGRAPH clustering spinglass, groups: 2, mod: 0.48
+ groups:
  $`1`
  [1] 11 12 13 14 15 16 17 18 19
  
  $`2`
   [1]  1  2  3  4  5  6  7  8  9 10
  
> cluster_spinglass(g, vertex = 1)
$community
 [1]  1  2  6  8  9  3  5  7 10  4

$cohesion
[1] 11.25

$adhesion
[1] -22.5

$inner.links
[1] 23

$outer.links
[1] 1

> 
> 
> 
> 
> cleanEx()
> nameEx("cluster_walktrap")
> ### * cluster_walktrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cluster_walktrap
> ### Title: Community structure via short random walks
> ### Aliases: cluster_walktrap
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> g <- add_edges(g, c(1, 6, 1, 11, 6, 11))
> cluster_walktrap(g)
IGRAPH clustering walktrap, groups: 3, mod: 0.58
+ groups:
  $`1`
  [1] 11 12 13 14 15
  
  $`2`
  [1]  6  7  8  9 10
  
  $`3`
  [1] 1 2 3 4 5
  
> 
> 
> 
> 
> cleanEx()
> nameEx("cocitation")
> ### * cocitation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cocitation
> ### Title: Cocitation coupling
> ### Aliases: cocitation bibcoupling
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_kautz_graph(2, 3)
> cocitation(g)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    0    2    0    0    0    0    0    0    0     0     0     0     0
 [2,]    2    0    0    0    0    0    0    0    0     0     0     0     0
 [3,]    0    0    0    2    0    0    0    0    0     0     0     0     0
 [4,]    0    0    2    0    0    0    0    0    0     0     0     0     0
 [5,]    0    0    0    0    0    2    0    0    0     0     0     0     0
 [6,]    0    0    0    0    2    0    0    0    0     0     0     0     0
 [7,]    0    0    0    0    0    0    0    2    0     0     0     0     0
 [8,]    0    0    0    0    0    0    2    0    0     0     0     0     0
 [9,]    0    0    0    0    0    0    0    0    0     2     0     0     0
[10,]    0    0    0    0    0    0    0    0    2     0     0     0     0
[11,]    0    0    0    0    0    0    0    0    0     0     0     2     0
[12,]    0    0    0    0    0    0    0    0    0     0     2     0     0
[13,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[14,]    0    0    0    0    0    0    0    0    0     0     0     0     2
[15,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[16,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[17,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[18,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[19,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[20,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[21,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[22,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[23,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[24,]    0    0    0    0    0    0    0    0    0     0     0     0     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
 [1,]     0     0     0     0     0     0     0     0     0     0     0
 [2,]     0     0     0     0     0     0     0     0     0     0     0
 [3,]     0     0     0     0     0     0     0     0     0     0     0
 [4,]     0     0     0     0     0     0     0     0     0     0     0
 [5,]     0     0     0     0     0     0     0     0     0     0     0
 [6,]     0     0     0     0     0     0     0     0     0     0     0
 [7,]     0     0     0     0     0     0     0     0     0     0     0
 [8,]     0     0     0     0     0     0     0     0     0     0     0
 [9,]     0     0     0     0     0     0     0     0     0     0     0
[10,]     0     0     0     0     0     0     0     0     0     0     0
[11,]     0     0     0     0     0     0     0     0     0     0     0
[12,]     0     0     0     0     0     0     0     0     0     0     0
[13,]     2     0     0     0     0     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     0     0     0     0     0
[15,]     0     0     2     0     0     0     0     0     0     0     0
[16,]     0     2     0     0     0     0     0     0     0     0     0
[17,]     0     0     0     0     2     0     0     0     0     0     0
[18,]     0     0     0     2     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     2     0     0     0     0
[20,]     0     0     0     0     0     2     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0     2     0     0
[22,]     0     0     0     0     0     0     0     2     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     2
[24,]     0     0     0     0     0     0     0     0     0     2     0
> bibcoupling(g)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [2,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [3,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [4,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [5,]    0    0    0    0    0    0    0    0    0     0     0     0     2
 [6,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [7,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [8,]    0    0    0    0    0    0    0    0    0     0     0     0     0
 [9,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[10,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[11,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[12,]    0    0    0    0    0    0    0    0    0     0     0     0     0
[13,]    0    0    0    0    2    0    0    0    0     0     0     0     0
[14,]    0    0    0    0    0    2    0    0    0     0     0     0     0
[15,]    0    0    0    0    0    0    2    0    0     0     0     0     0
[16,]    0    0    0    0    0    0    0    2    0     0     0     0     0
[17,]    0    0    0    0    0    0    0    0    2     0     0     0     0
[18,]    0    0    0    0    0    0    0    0    0     2     0     0     0
[19,]    0    0    0    0    0    0    0    0    0     0     2     0     0
[20,]    0    0    0    0    0    0    0    0    0     0     0     2     0
[21,]    2    0    0    0    0    0    0    0    0     0     0     0     0
[22,]    0    2    0    0    0    0    0    0    0     0     0     0     0
[23,]    0    0    2    0    0    0    0    0    0     0     0     0     0
[24,]    0    0    0    2    0    0    0    0    0     0     0     0     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
 [1,]     0     0     0     0     0     0     0     2     0     0     0
 [2,]     0     0     0     0     0     0     0     0     2     0     0
 [3,]     0     0     0     0     0     0     0     0     0     2     0
 [4,]     0     0     0     0     0     0     0     0     0     0     2
 [5,]     0     0     0     0     0     0     0     0     0     0     0
 [6,]     2     0     0     0     0     0     0     0     0     0     0
 [7,]     0     2     0     0     0     0     0     0     0     0     0
 [8,]     0     0     2     0     0     0     0     0     0     0     0
 [9,]     0     0     0     2     0     0     0     0     0     0     0
[10,]     0     0     0     0     2     0     0     0     0     0     0
[11,]     0     0     0     0     0     2     0     0     0     0     0
[12,]     0     0     0     0     0     0     2     0     0     0     0
[13,]     0     0     0     0     0     0     0     0     0     0     0
[14,]     0     0     0     0     0     0     0     0     0     0     0
[15,]     0     0     0     0     0     0     0     0     0     0     0
[16,]     0     0     0     0     0     0     0     0     0     0     0
[17,]     0     0     0     0     0     0     0     0     0     0     0
[18,]     0     0     0     0     0     0     0     0     0     0     0
[19,]     0     0     0     0     0     0     0     0     0     0     0
[20,]     0     0     0     0     0     0     0     0     0     0     0
[21,]     0     0     0     0     0     0     0     0     0     0     0
[22,]     0     0     0     0     0     0     0     0     0     0     0
[23,]     0     0     0     0     0     0     0     0     0     0     0
[24,]     0     0     0     0     0     0     0     0     0     0     0
> 
> 
> 
> 
> cleanEx()
> nameEx("cohesive_blocks")
> ### * cohesive_blocks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cohesive_blocks
> ### Title: Calculate Cohesive Blocks
> ### Aliases: cohesive_blocks cohesiveBlocks blocks hierarchy parent
> ###   export_pajek plot.cohesiveBlocks summary.cohesiveBlocks
> ###   length.cohesiveBlocks print.cohesiveBlocks
> ###   graphs_from_cohesive_blocks cohesion.cohesiveBlocks plot_hierarchy
> ###   max_cohesion
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## The graph from the Moody-White paper
> mw <- graph_from_literal(
+   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,
+   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,
+   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,
+   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,
+   21 - 22:23, 22 - 23
+ )
> 
> mwBlocks <- cohesive_blocks(mw)
> 
> # Inspect block membership and cohesion
> mwBlocks
Cohesive block structure:
B-1         c 1, n 23
'- B-2      c 2, n 14   oooooooo.. .o......oo ooo 
   '- B-4   c 5, n  7   ooooooo... .......... ... 
'- B-3      c 2, n 10   ......o.oo o.oooooo.. ... 
   '- B-5   c 3, n  4   ......o.oo o......... ... 
> blocks(mwBlocks)
[[1]]
+ 23/23 vertices, named, from 5b10884:
 [1] 1  2  3  4  5  6  7  21 8  11 14 19 9  10 12 13 16 15 17 18 20 22 23

[[2]]
+ 14/23 vertices, named, from 5b10884:
 [1] 1  2  3  4  5  6  7  21 19 17 18 20 22 23

[[3]]
+ 10/23 vertices, named, from 5b10884:
 [1] 7  8  11 14 9  10 12 13 16 15

[[4]]
+ 7/23 vertices, named, from 5b10884:
[1] 1 2 3 4 5 6 7

[[5]]
+ 4/23 vertices, named, from 5b10884:
[1] 7  8  11 14

> cohesion(mwBlocks)
[1] 1 2 2 5 3
> 
> # Save results in a Pajek file
> file <- tempfile(fileext = ".paj")
> export_pajek(mwBlocks, mw, file = file)
> if (!interactive()) {
+   unlink(file)
+ }
> 
> # Plot the results
> plot(mwBlocks, mw)
> 
> ## The science camp network
> camp <- graph_from_literal(
+   Harry:Steve:Don:Bert - Harry:Steve:Don:Bert,
+   Pam:Brazey:Carol:Pat - Pam:Brazey:Carol:Pat,
+   Holly - Carol:Pat:Pam:Jennie:Bill,
+   Bill - Pauline:Michael:Lee:Holly,
+   Pauline - Bill:Jennie:Ann,
+   Jennie - Holly:Michael:Lee:Ann:Pauline,
+   Michael - Bill:Jennie:Ann:Lee:John,
+   Ann - Michael:Jennie:Pauline,
+   Lee - Michael:Bill:Jennie,
+   Gery - Pat:Steve:Russ:John,
+   Russ - Steve:Bert:Gery:John,
+   John - Gery:Russ:Michael
+ )
> campBlocks <- cohesive_blocks(camp)
> campBlocks
Cohesive block structure:
B-1      c 2, n 18
'- B-2   c 3, n  4   oooo...... ........ 
'- B-3   c 3, n  5   ....ooooo. ........ 
'- B-4   c 3, n  6   .........o ooooo... 
> 
> plot(campBlocks, camp,
+   vertex.label = V(camp)$name, margin = -0.2,
+   vertex.shape = "rectangle", vertex.size = 24, vertex.size2 = 8,
+   mark.border = 1, colbar = c(NA, NA, "cyan", "orange")
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("communities")
> ### * communities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: membership
> ### Title: Functions to deal with the result of network community detection
> ### Aliases: membership print.communities modularity.communities
> ###   length.communities sizes algorithm merges crossing code_len
> ###   is_hierarchical as.dendrogram.communities as.hclust.communities
> ###   cut_at show_trace plot.communities communities
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> karate <- make_graph("Zachary")
> wc <- cluster_walktrap(karate)
> modularity(wc)
[1] 0.3532216
> membership(wc)
 [1] 1 1 2 1 5 5 5 1 2 2 5 1 1 2 3 3 5 1 3 1 3 1 3 4 4 4 3 4 2 3 2 2 3 3
> plot(wc, karate)
> 
> 
> 
> 
> cleanEx()
> nameEx("compare")
> ### * compare
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare
> ### Title: Compares community structures using various metrics
> ### Aliases: compare compare.communities compare.membership
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph("Zachary")
> sg <- cluster_spinglass(g)
> le <- cluster_leading_eigen(g)
> compare(sg, le, method = "rand")
[1] 0.9500891
> compare(membership(sg), membership(le))
[1] 0.2765712
> 
> 
> 
> 
> cleanEx()
> nameEx("complementer")
> ### * complementer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complementer
> ### Title: Complementer of a graph
> ### Aliases: complementer
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Complementer of a ring
> g <- make_ring(10)
> complementer(g)
IGRAPH 5f924c3 U--- 10 35 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 5f924c3:
 [1] 1-- 9 1-- 8 1-- 7 1-- 6 1-- 5 1-- 4 1-- 3 2--10 2-- 9 2-- 8 2-- 7 2-- 6
[13] 2-- 5 2-- 4 3--10 3-- 9 3-- 8 3-- 7 3-- 6 3-- 5 4--10 4-- 9 4-- 8 4-- 7
[25] 4-- 6 5--10 5-- 9 5-- 8 5-- 7 6--10 6-- 9 6-- 8 7--10 7-- 9 8--10
> 
> ## A graph and its complementer give together the full graph
> g <- make_ring(10)
> gc <- complementer(g)
> gu <- union(g, gc)
> gu
IGRAPH 233a248 U--- 10 45 -- 
+ attr: name_1 (g/c), name_2 (g/c), mutual_1 (g/l), mutual_2 (g/l),
| circular_1 (g/l), circular_2 (g/l)
+ edges from 233a248:
 [1] 9--10 8--10 8-- 9 7--10 7-- 9 7-- 8 6--10 6-- 9 6-- 8 6-- 7 5--10 5-- 9
[13] 5-- 8 5-- 7 5-- 6 4--10 4-- 9 4-- 8 4-- 7 4-- 6 4-- 5 3--10 3-- 9 3-- 8
[25] 3-- 7 3-- 6 3-- 5 3-- 4 2--10 2-- 9 2-- 8 2-- 7 2-- 6 2-- 5 2-- 4 2-- 3
[37] 1--10 1-- 9 1-- 8 1-- 7 1-- 6 1-- 5 1-- 4 1-- 3 1-- 2
> graph.isomorphic(gu, make_full_graph(vcount(g)))
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("component_wise")
> ### * component_wise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: component_wise
> ### Title: Component-wise layout
> ### Aliases: component_wise
> 
> ### ** Examples
> 
> g <- make_ring(10) + make_ring(10)
> g %>%
+   add_layout_(in_circle(), component_wise()) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("components")
> ### * components
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: component_distribution
> ### Title: Connected components of a graph
> ### Aliases: component_distribution largest_component components
> ###   is_connected count_components
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(20, 1 / 20)
> clu <- components(g)
> groups(clu)
$`1`
[1] 1

$`2`
[1] 2

$`3`
[1]  3 14 18

$`4`
[1] 4 6

$`5`
[1]  5  7  8 15 17 20

$`6`
[1] 9

$`7`
[1] 10

$`8`
[1] 11

$`9`
[1] 12

$`10`
[1] 13

$`11`
[1] 16

$`12`
[1] 19

> largest_component(g)
IGRAPH cfb734f U--- 6 5 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edges from cfb734f:
[1] 1--2 2--3 2--4 1--5 3--6
> 
> 
> 
> cleanEx()
> nameEx("compose")
> ### * compose
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compose
> ### Title: Compose two graphs as binary relations
> ### Aliases: compose %c%
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g1 <- make_ring(10)
> g2 <- make_star(10, mode = "undirected")
> gc <- compose(g1, g2)
> print_all(gc)
IGRAPH 2959aa1 U--- 10 36 -- 
+ attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode
| (g/c), center (g/n)
+ edges:
 1 --  1  1  1  1  2  3  3  4  4  5  5  6  6  7  7  8  8  9  9 10
 2 --  1  2  2  3  4  5  6  7  8  9 10 10
 3 --  1  1  2 10
 4 --  1  1  2 10
 5 --  1  1  2 10
 6 --  1  1  2 10
 7 --  1  1  2 10
 8 --  1  1  2 10
 9 --  1  1  2 10
10 --  1  2  2  3  4  5  6  7  8  9 10 10
> print_all(simplify(gc))
IGRAPH 7c9886d U--- 10 24 -- 
+ attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode
| (g/c), center (g/n)
+ edges:
 1 --  2  3  4  5  6  7  8  9 10    2 --  1  3  4  5  6  7  8  9 10
 3 --  1  2 10                      4 --  1  2 10                  
 5 --  1  2 10                      6 --  1  2 10                  
 7 --  1  2 10                      8 --  1  2 10                  
 9 --  1  2 10                     10 --  1  2  3  4  5  6  7  8  9
> 
> 
> 
> 
> cleanEx()
> nameEx("constraint")
> ### * constraint
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constraint
> ### Title: Burt's constraint
> ### Aliases: constraint
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(20, 5 / 20)
> constraint(g)
 [1] 0.2455556 0.3232019 0.2655633 0.4329698 0.2951389 0.3568993 0.4253472
 [8] 0.2752149 0.2401000 0.2867635 0.6351726 0.4117361 0.2097653 0.4223457
[15] 0.3240195 0.2232584 0.2401000 0.3592889 0.1913659 0.2706011
> 
> 
> 
> 
> cleanEx()
> nameEx("contract")
> ### * contract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: contract
> ### Title: Contract several vertices into a single one
> ### Aliases: contract
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g$name <- "Ring"
> V(g)$name <- letters[1:vcount(g)]
> E(g)$weight <- runif(ecount(g))
> 
> g2 <- contract(g, rep(1:5, each = 2),
+   vertex.attr.comb = toString
+ )
> 
> ## graph and edge attributes are kept, vertex attributes are
> ## combined using the 'toString' function.
> print(g2, g = TRUE, v = TRUE, e = TRUE)
IGRAPH 37caaf5 UNW- 5 10 -- Ring
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c), weight
| (e/n)
+ edges from 37caaf5 (vertex names):
 [1] a, b--a, b a, b--c, d c, d--c, d c, d--e, f e, f--e, f e, f--g, h
 [7] g, h--g, h g, h--i, j i, j--i, j a, b--i, j
> 
> 
> 
> 
> cleanEx()
> nameEx("convex_hull")
> ### * convex_hull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convex_hull
> ### Title: Convex hull of a set of vertices
> ### Aliases: convex_hull
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> M <- cbind(runif(100), runif(100))
> convex_hull(M)
$resverts
[1] 16 47 27 69 11  4 21 80 18

$rescoords
            [,1]       [,2]
 [1,] 0.49769924 0.01307758
 [2,] 0.02333120 0.17512677
 [3,] 0.01339033 0.51116978
 [4,] 0.08424691 0.72372595
 [5,] 0.20597457 0.97617069
 [6,] 0.90820779 0.99268406
 [7,] 0.93470523 0.99183862
 [8,] 0.96061800 0.90308161
 [9,] 0.99190609 0.10318424

> 
> 
> 
> cleanEx()
> nameEx("coreness")
> ### * coreness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coreness
> ### Title: K-core decomposition of graphs
> ### Aliases: coreness
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g <- add_edges(g, c(1, 2, 2, 3, 1, 3))
> coreness(g) # small core triangle in a ring
 [1] 3 3 3 2 2 2 2 2 2 2
> 
> 
> 
> 
> cleanEx()
> nameEx("count_automorphisms")
> ### * count_automorphisms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_automorphisms
> ### Title: Number of automorphisms
> ### Aliases: count_automorphisms
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A ring has n*2 automorphisms, you can "turn" it by 0-9 vertices
> ## and each of these graphs can be "flipped"
> g <- make_ring(10)
> count_automorphisms(g)
$nof_nodes
[1] 6

$nof_leaf_nodes
[1] 4

$nof_bad_nodes
[1] 0

$nof_canupdates
[1] 1

$max_level
[1] 2

$group_size
[1] "20"

> 
> ## A full graph has n! automorphisms; however, we restrict the vertex
> ## matching by colors, leading to only 4 automorphisms
> g <- make_full_graph(4)
> count_automorphisms(g, colors = c(1, 2, 1, 2))
$nof_nodes
[1] 5

$nof_leaf_nodes
[1] 3

$nof_bad_nodes
[1] 0

$nof_canupdates
[1] 1

$max_level
[1] 2

$group_size
[1] "4"

> 
> 
> 
> cleanEx()
> nameEx("count_isomorphisms")
> ### * count_isomorphisms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_isomorphisms
> ### Title: Count the number of isomorphic mappings between two graphs
> ### Aliases: count_isomorphisms graph.count.isomorphisms.vf2
> 
> ### ** Examples
> 
> # colored graph isomorphism
> g1 <- make_ring(10)
> g2 <- make_ring(10)
> isomorphic(g1, g2)
[1] TRUE
> 
> V(g1)$color <- rep(1:2, length = vcount(g1))
> V(g2)$color <- rep(2:1, length = vcount(g2))
> # consider colors by default
> count_isomorphisms(g1, g2)
[1] 10
> # ignore colors
> count_isomorphisms(g1, g2,
+   vertex.color1 = NULL,
+   vertex.color2 = NULL
+ )
[1] 20
> 
> 
> 
> cleanEx()
> nameEx("count_motifs")
> ### * count_motifs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_motifs
> ### Title: Graph motifs
> ### Aliases: count_motifs
> 
> ### ** Examples
> 
> g <- sample_pa(100)
> motifs(g, 3)
 [1]  NA  NA 218  NA  84   0   0   0   0   0   0   0   0   0   0   0
> count_motifs(g, 3)
[1] 302
> sample_motifs(g, 3)
[1] 1630
> 
> 
> 
> cleanEx()
> nameEx("count_triangles")
> ### * count_triangles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: triangles
> ### Title: Find triangles in graphs
> ### Aliases: triangles count_triangles
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A small graph
> kite <- make_graph("Krackhardt_Kite")
> plot(kite)
> matrix(triangles(kite), nrow = 3)
     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11]
[1,]    4    4    4    4    4    4    4    4    6     6     7
[2,]    1    1    2    6    6    6    7    7    1     7     2
[3,]    2    3    5    1    3    7    2    5    3     8     5
> 
> ## Adjacenct triangles
> atri <- count_triangles(kite)
> plot(kite, vertex.label = atri)
> 
> ## Always true
> sum(count_triangles(kite)) == length(triangles(kite))
[1] TRUE
> 
> ## Should match, local transitivity is the
> ## number of adjacent triangles divided by the number
> ## of adjacency triples
> transitivity(kite, type = "local")
 [1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000 0.5000000
 [8] 0.3333333 0.0000000       NaN
> count_triangles(kite) / (degree(kite) * (degree(kite) - 1) / 2)
 [1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000 0.5000000
 [8] 0.3333333 0.0000000       NaN
> 
> 
> 
> cleanEx()
> nameEx("curve_multiple")
> ### * curve_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curve_multiple
> ### Title: Optimal edge curvature when plotting graphs
> ### Aliases: curve_multiple
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph(c(
+   0, 1, 1, 0, 1, 2, 1, 3, 1, 3, 1, 3,
+   2, 3, 2, 3, 2, 3, 2, 3, 0, 1
+ ) + 1)
> 
> curve_multiple(g)
 [1] -0.5000000  0.0000000  0.0000000 -0.5000000  0.0000000  0.5000000
 [7] -0.5000000 -0.1666667  0.1666667  0.5000000  0.5000000
> 
> set.seed(42)
> plot(g)
> 
> 
> 
> 
> cleanEx()
> nameEx("decompose")
> ### * decompose
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: decompose
> ### Title: Decompose a graph into components
> ### Aliases: decompose
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # the diameter of each component in a random graph
> g <- sample_gnp(1000, 1 / 1000)
> components <- decompose(g, min.vertices = 2)
> sapply(components, diameter)
  [1] 10  8  2  5  4 13  3 19  1 15  5  2  6  2  2  7  2  1  4  6  1  3  3  1  6
 [26]  1  3  5  2  1  1  1  1  4  1  8  4  4  2  2  1  3  2  2  2  3  2  1  1  2
 [51]  3  3  1  2  2  3  1  9  3  6  8  6  2  1  2  5  1  1  2  4  3  1  2  1  2
 [76]  1  2  1  1  1  1  1  1  1  1  1  1  2  2  2  1  2  1  1  1  2  1  1  2  1
[101]  1  3  1  1  1  1  2  1  1  1  1  2  2  1  2  1  1  1  1  1  2  1  2  1  2
[126]  1  1  2  1  1  3  1
> 
> 
> 
> 
> cleanEx()
> nameEx("degree")
> ### * degree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: degree
> ### Title: Degree and degree distribution of the vertices
> ### Aliases: degree max_degree degree_distribution
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> degree(g)
 [1] 2 2 2 2 2 2 2 2 2 2
> g2 <- sample_gnp(1000, 10 / 1000)
> max_degree(g2)
[1] 22
> degree_distribution(g2)
 [1] 0.000 0.000 0.005 0.006 0.017 0.051 0.044 0.090 0.102 0.130 0.142 0.115
[13] 0.079 0.068 0.054 0.038 0.029 0.014 0.008 0.003 0.002 0.001 0.002
> 
> 
> 
> 
> cleanEx()
> nameEx("delete_edge_attr")
> ### * delete_edge_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_edge_attr
> ### Title: Delete an edge attribute
> ### Aliases: delete_edge_attr
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_edge_attr("name", value = LETTERS[1:10])
> edge_attr_names(g)
[1] "name"
> g2 <- delete_edge_attr(g, "name")
> edge_attr_names(g2)
character(0)
> 
> 
> 
> cleanEx()
> nameEx("delete_edges")
> ### * delete_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_edges
> ### Title: Delete edges from a graph
> ### Aliases: delete_edges
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   delete_edges(seq(1, 9, by = 2))
> g
IGRAPH 4c49204 U--- 10 5 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 4c49204:
[1] 2-- 3 4-- 5 6-- 7 8-- 9 1--10
> 
> g <- make_ring(10) %>%
+   delete_edges("10|1")
> g
IGRAPH 49a672d U--- 10 9 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 49a672d:
[1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10
> 
> g <- make_ring(5)
> g <- delete_edges(g, get_edge_ids(g, c(1, 5, 4, 5)))
> g
IGRAPH 564545d U--- 5 3 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 564545d:
[1] 1--2 2--3 3--4
> 
> 
> 
> cleanEx()
> nameEx("delete_graph_attr")
> ### * delete_graph_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_graph_attr
> ### Title: Delete a graph attribute
> ### Aliases: delete_graph_attr
> 
> ### ** Examples
> 
> g <- make_ring(10)
> graph_attr_names(g)
[1] "name"     "mutual"   "circular"
> g2 <- delete_graph_attr(g, "name")
> graph_attr_names(g2)
[1] "mutual"   "circular"
> 
> 
> 
> cleanEx()
> nameEx("delete_vertex_attr")
> ### * delete_vertex_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_vertex_attr
> ### Title: Delete a vertex attribute
> ### Aliases: delete_vertex_attr
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10])
> vertex_attr_names(g)
[1] "name"
> g2 <- delete_vertex_attr(g, "name")
> vertex_attr_names(g2)
character(0)
> 
> 
> 
> cleanEx()
> nameEx("delete_vertices")
> ### * delete_vertices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: delete_vertices
> ### Title: Delete vertices from a graph
> ### Aliases: delete_vertices
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10])
> g
IGRAPH 016ad24 UN-- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from 016ad24 (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> V(g)
+ 10/10 vertices, named, from 016ad24:
 [1] A B C D E F G H I J
> 
> g2 <- delete_vertices(g, c(1, 5)) %>%
+   delete_vertices("B")
> g2
IGRAPH bf0a31d UN-- 7 5 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from bf0a31d (vertex names):
[1] C--D F--G G--H H--I I--J
> V(g2)
+ 7/7 vertices, named, from bf0a31d:
[1] C D F G H I J
> 
> 
> 
> cleanEx()
> nameEx("dfs")
> ### * dfs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dfs
> ### Title: Depth-first search
> ### Aliases: dfs
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A graph with two separate trees
> dfs(make_tree(10) %du% make_tree(10),
+   root = 1, "out",
+   TRUE, TRUE, TRUE, TRUE
+ )
$root
[1] 1

$mode
[1] "out"

$order
+ 20/20 vertices, from 6b4ed00:
 [1]  1  2  4  8  9  5 10  3  6  7 11 12 14 18 19 15 20 13 16 17

$order.out
+ 20/20 vertices, from 6b4ed00:
 [1]  8  9  4 10  5  2  6  7  3  1 18 19 14 20 15 12 16 17 13 11

$father
+ 20/20 vertices, from 6b4ed00:
 [1] NA  1  1  2  2  3  3  4  4  5 NA 11 11 12 12 13 13 14 14 15

$dist
NULL

$neimode
[1] "out"

> 
> ## How to use a callback
> f.in <- function(graph, data, extra) {
+   cat("in:", paste(collapse = ", ", data), "\n")
+   FALSE
+ }
> f.out <- function(graph, data, extra) {
+   cat("out:", paste(collapse = ", ", data), "\n")
+   FALSE
+ }
> tmp <- dfs(make_tree(10),
+   root = 1, "out",
+   in.callback = f.in, out.callback = f.out
+ )
in: 1, 0 
in: 2, 1 
in: 4, 2 
in: 8, 3 
out: 8, 2 
in: 9, 3 
out: 9, 2 
out: 4, 1 
in: 5, 2 
in: 10, 3 
out: 10, 2 
out: 5, 1 
out: 2, 0 
in: 3, 1 
in: 6, 2 
out: 6, 1 
in: 7, 2 
out: 7, 1 
out: 3, 0 
out: 1, -1 
> 
> ## Terminate after the first component, using a callback
> f.out <- function(graph, data, extra) {
+   data["vid"] == 1
+ }
> tmp <- dfs(make_tree(10) %du% make_tree(10),
+   root = 1,
+   out.callback = f.out
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("diameter")
> ### * diameter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diameter
> ### Title: Diameter of a graph
> ### Aliases: diameter get_diameter farthest_vertices
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g2 <- delete_edges(g, c(1, 2, 1, 10))
> diameter(g2, unconnected = TRUE)
[1] 7
> diameter(g2, unconnected = FALSE)
[1] Inf
> 
> ## Weighted diameter
> set.seed(1)
> g <- make_ring(10)
> E(g)$weight <- sample(seq_len(ecount(g)))
> diameter(g)
[1] 27
> get_diameter(g)
+ 5/10 vertices, from 3159e29:
[1]  1 10  9  8  7
> diameter(g, weights = NA)
[1] 5
> get_diameter(g, weights = NA)
+ 6/10 vertices, from 3159e29:
[1] 1 2 3 4 5 6
> 
> 
> 
> 
> cleanEx()
> nameEx("difference.igraph")
> ### * difference.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: difference.igraph
> ### Title: Difference of graphs
> ### Aliases: difference.igraph %m%
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Create a wheel graph
> wheel <- union(
+   make_ring(10),
+   make_star(11, center = 11, mode = "undirected")
+ )
> V(wheel)$name <- letters[seq_len(vcount(wheel))]
> 
> ## Subtract a star graph from it
> sstar <- make_star(6, center = 6, mode = "undirected")
> V(sstar)$name <- letters[c(1, 3, 5, 7, 9, 11)]
> G <- wheel %m% sstar
> print_all(G)
IGRAPH b21be90 UN-- 11 15 -- 
+ attr: name_1 (g/c), name_2 (g/c), mutual (g/l), circular (g/l), mode
| (g/c), center (g/n), name (v/c)
+ edges (vertex names):
a -- b, j
b -- a, c, k
c -- b, d
d -- c, e, k
e -- d, f
f -- e, g, k
g -- f, h
h -- g, i, k
i -- h, j
j -- a, i, k
k -- b, d, f, h, j
> plot(G, layout = layout_nicely(wheel))
> 
> 
> 
> cleanEx()
> nameEx("difference.igraph.es")
> ### * difference.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: difference.igraph.es
> ### Title: Difference of edge sequences
> ### Aliases: difference.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> difference(V(g), V(g)[6:10])
+ 5/10 vertices, named, from 07b5829:
[1] A B C D E
> 
> 
> 
> cleanEx()
> nameEx("difference.igraph.vs")
> ### * difference.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: difference.igraph.vs
> ### Title: Difference of vertex sequences
> ### Aliases: difference.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> difference(V(g), V(g)[6:10])
+ 5/10 vertices, named, from de1106e:
[1] A B C D E
> 
> 
> 
> cleanEx()
> nameEx("dim_select")
> ### * dim_select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dim_select
> ### Title: Dimensionality selection for singular values using profile
> ###   likelihood.
> ### Aliases: dim_select
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Generate the two groups of singular values with
> # Gaussian mixture of two components that have different means
> sing.vals <- c(rnorm(10, mean = 1, sd = 1), rnorm(10, mean = 3, sd = 1))
> dim.chosen <- dim_select(sing.vals)
> dim.chosen
[1] 10
> 
> # Sample random vectors with multivariate normal distribution
> # and normalize to unit length
> lpvs <- matrix(rnorm(200), 10, 20)
> lpvs <- apply(lpvs, 2, function(x) {
+   (abs(x) / sqrt(sum(x^2)))
+ })
> RDP.graph <- sample_dot_product(lpvs)
> dim_select(embed_adjacency_matrix(RDP.graph, 10)$D)
[1] 1
> 
> # Sample random vectors with the Dirichlet distribution
> lpvs.dir <- sample_dirichlet(n = 20, rep(1, 10))
> RDP.graph.2 <- sample_dot_product(lpvs.dir)
> dim_select(embed_adjacency_matrix(RDP.graph.2, 10)$D)
[1] 1
> 
> # Sample random vectors from hypersphere with radius 1.
> lpvs.sph <- sample_sphere_surface(dim = 10, n = 20, radius = 1)
> RDP.graph.3 <- sample_dot_product(lpvs.sph)
> dim_select(embed_adjacency_matrix(RDP.graph.3, 10)$D)
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("disjoint_union")
> ### * disjoint_union
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: disjoint_union
> ### Title: Disjoint union of graphs
> ### Aliases: disjoint_union %du%
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A star and a ring
> g1 <- make_star(10, mode = "undirected")
> V(g1)$name <- letters[1:10]
> g2 <- make_ring(10)
> V(g2)$name <- letters[11:20]
> print_all(g1 %du% g2)
IGRAPH 55f3dc5 UN-- 20 19 -- 
+ attr: name_1 (g/c), name_2 (g/c), mode (g/c), center (g/n), mutual
| (g/l), circular (g/l), name (v/c)
+ edges from 55f3dc5 (vertex names):
 [1] a--b a--c a--d a--e a--f a--g a--h a--i a--j k--l l--m m--n n--o o--p p--q
[16] q--r r--s s--t k--t
> 
> 
> 
> cleanEx()
> nameEx("distances")
> ### * distances
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distance_table
> ### Title: Shortest (directed or undirected) paths between vertices
> ### Aliases: distance_table mean_distance distances shortest_paths
> ###   all_shortest_paths
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> distances(g)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    1    2    3    4    5    4    3    2     1
 [2,]    1    0    1    2    3    4    5    4    3     2
 [3,]    2    1    0    1    2    3    4    5    4     3
 [4,]    3    2    1    0    1    2    3    4    5     4
 [5,]    4    3    2    1    0    1    2    3    4     5
 [6,]    5    4    3    2    1    0    1    2    3     4
 [7,]    4    5    4    3    2    1    0    1    2     3
 [8,]    3    4    5    4    3    2    1    0    1     2
 [9,]    2    3    4    5    4    3    2    1    0     1
[10,]    1    2    3    4    5    4    3    2    1     0
> shortest_paths(g, 5)
$vpath
$vpath[[1]]
+ 5/10 vertices, from 6a023ca:
[1] 5 4 3 2 1

$vpath[[2]]
+ 4/10 vertices, from 6a023ca:
[1] 5 4 3 2

$vpath[[3]]
+ 3/10 vertices, from 6a023ca:
[1] 5 4 3

$vpath[[4]]
+ 2/10 vertices, from 6a023ca:
[1] 5 4

$vpath[[5]]
+ 1/10 vertex, from 6a023ca:
[1] 5

$vpath[[6]]
+ 2/10 vertices, from 6a023ca:
[1] 5 6

$vpath[[7]]
+ 3/10 vertices, from 6a023ca:
[1] 5 6 7

$vpath[[8]]
+ 4/10 vertices, from 6a023ca:
[1] 5 6 7 8

$vpath[[9]]
+ 5/10 vertices, from 6a023ca:
[1] 5 6 7 8 9

$vpath[[10]]
+ 6/10 vertices, from 6a023ca:
[1]  5  4  3  2  1 10


$epath
NULL

$predecessors
NULL

$inbound_edges
NULL

> all_shortest_paths(g, 1, 6:8)
$vpaths
$vpaths[[1]]
+ 6/10 vertices, from 6a023ca:
[1]  1 10  9  8  7  6

$vpaths[[2]]
+ 6/10 vertices, from 6a023ca:
[1] 1 2 3 4 5 6

$vpaths[[3]]
+ 5/10 vertices, from 6a023ca:
[1]  1 10  9  8  7

$vpaths[[4]]
+ 4/10 vertices, from 6a023ca:
[1]  1 10  9  8


$epaths
$epaths[[1]]
[1] 10  9  8  7  6

$epaths[[2]]
[1] 1 2 3 4 5

$epaths[[3]]
[1] 10  9  8  7

$epaths[[4]]
[1] 10  9  8


$nrgeo
 [1] 1 1 1 1 1 2 1 1 1 1

$res
$res[[1]]
+ 6/10 vertices, from 6a023ca:
[1]  1 10  9  8  7  6

$res[[2]]
+ 6/10 vertices, from 6a023ca:
[1] 1 2 3 4 5 6

$res[[3]]
+ 5/10 vertices, from 6a023ca:
[1]  1 10  9  8  7

$res[[4]]
+ 4/10 vertices, from 6a023ca:
[1]  1 10  9  8


> mean_distance(g)
[1] 2.777778
> ## Weighted shortest paths
> el <- matrix(
+   ncol = 3, byrow = TRUE,
+   c(
+     1, 2, 0,
+     1, 3, 2,
+     1, 4, 1,
+     2, 3, 0,
+     2, 5, 5,
+     2, 6, 2,
+     3, 2, 1,
+     3, 4, 1,
+     3, 7, 1,
+     4, 3, 0,
+     4, 7, 2,
+     5, 6, 2,
+     5, 8, 8,
+     6, 3, 2,
+     6, 7, 1,
+     6, 9, 1,
+     6, 10, 3,
+     8, 6, 1,
+     8, 9, 1,
+     9, 10, 4
+   )
+ )
> g2 <- add_edges(make_empty_graph(10), t(el[, 1:2]), weight = el[, 3])
> distances(g2, mode = "out")
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    0    0    1    5    2    1   13    3     5
 [2,]  Inf    0    0    1    5    2    1   13    3     5
 [3,]  Inf    1    0    1    6    3    1   14    4     6
 [4,]  Inf    1    0    0    6    3    1   14    4     6
 [5,]  Inf    5    4    5    0    2    3    8    3     5
 [6,]  Inf    3    2    3    8    0    1   16    1     3
 [7,]  Inf  Inf  Inf  Inf  Inf  Inf    0  Inf  Inf   Inf
 [8,]  Inf    4    3    4    9    1    2    0    1     4
 [9,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf    0     4
[10,]  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf  Inf     0
> 
> 
> 
> 
> cleanEx()
> nameEx("diverging_pal")
> ### * diverging_pal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diverging_pal
> ### Title: Diverging palette
> ### Aliases: diverging_pal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("igraphdata", "scales"))) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(igraphdata)
+ data(foodwebs)
+ fw <- foodwebs[[1]] %>%
+   induced_subgraph(V(.)[ECO == 1]) %>%
+   add_layout_(with_fr()) %>%
+   set_vertex_attr("label", value = seq_len(gorder(.))) %>%
+   set_vertex_attr("size", value = 10) %>%
+   set_edge_attr("arrow.size", value = 0.3)
+ 
+ V(fw)$color <- scales::dscale(V(fw)$Biomass %>% cut(10), diverging_pal)
+ plot(fw)
+ 
+ data(karate)
+ karate <- karate %>%
+   add_layout_(with_kk()) %>%
+   set_vertex_attr("size", value = 10)
+ 
+ V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), diverging_pal)
+ plot(karate)
+ ## Don't show: 
+ }) # examplesIf
> library(igraphdata)
> data(foodwebs)
> fw <- foodwebs[[1]] %>% induced_subgraph(V(.)[ECO == 1]) %>% add_layout_(with_fr()) %>% 
+     set_vertex_attr("label", value = seq_len(gorder(.))) %>% set_vertex_attr("size", 
+     value = 10) %>% set_edge_attr("arrow.size", value = 0.3)
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> V(fw)$color <- scales::dscale(V(fw)$Biomass %>% cut(10), diverging_pal)
> plot(fw)
> data(karate)
> karate <- karate %>% add_layout_(with_kk()) %>% set_vertex_attr("size", 
+     value = 10)
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), diverging_pal)
> plot(karate)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:igraphdata’

> nameEx("diversity")
> ### * diversity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diversity
> ### Title: Graph diversity
> ### Aliases: diversity
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g1 <- sample_gnp(20, 2 / 20)
> g2 <- sample_gnp(20, 2 / 20)
> g3 <- sample_gnp(20, 5 / 20)
> E(g1)$weight <- 1
> E(g2)$weight <- runif(ecount(g2))
> E(g3)$weight <- runif(ecount(g3))
> diversity(g1)
 [1]   1   0   1   0   0   1   1 NaN   1   0   0   1   1   0   1   0   1   1 NaN
[20]   1
> diversity(g2)
 [1] 0.0000000 0.6520070 0.9341905 0.9773513 0.8161447       NaN 0.9913937
 [8] 0.0000000 0.6243097       NaN 0.0000000 0.0000000 0.7214704 0.2934265
[15] 0.0000000 0.0000000 0.9578964 0.9554682 0.9756994 0.7430860
> diversity(g3)
 [1] 0.9658493 0.9022217 0.7035801 0.8936993 0.8977253 0.8376490 0.9120477
 [8] 0.9444586 0.9255117 0.5996726 0.8803259 0.9390113 0.8735016 0.9615536
[15] 0.9240619 0.9175804 0.8227885 0.8900367 0.9598929 0.8971282
> 
> 
> 
> cleanEx()
> nameEx("dominator_tree")
> ### * dominator_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dominator_tree
> ### Title: Dominator tree
> ### Aliases: dominator_tree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## The example from the paper
> g <- graph_from_literal(
+   R -+ A:B:C, A -+ D, B -+ A:D:E, C -+ F:G, D -+ L,
+   E -+ H, F -+ I, G -+ I:J, H -+ E:K, I -+ K, J -+ I,
+   K -+ I:R, L -+ H
+ )
> dtree <- dominator_tree(g, root = "R")
> layout <- layout_as_tree(dtree$domtree, root = "R")
> layout[, 2] <- -layout[, 2]
> plot(dtree$domtree, layout = layout, vertex.label = V(dtree$domtree)$name)
> 
> 
> 
> cleanEx()
> nameEx("dyad_census")
> ### * dyad_census
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dyad_census
> ### Title: Dyad census of a graph
> ### Aliases: dyad_census
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100)
> dyad_census(g)
$mut
[1] 0

$asym
[1] 99

$null
[1] 4851

> 
> 
> 
> cleanEx()
> nameEx("each_edge")
> ### * each_edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: each_edge
> ### Title: Rewires the endpoints of the edges of a graph to a random vertex
> ### Aliases: each_edge
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Some random shortcuts shorten the distances on a lattice
> g <- make_lattice(length = 100, dim = 1, nei = 5)
> mean_distance(g)
[1] 7.141414
> g <- rewire(g, each_edge(prob = 0.05))
> mean_distance(g)
[1] 2.662222
> 
> # Rewiring the start of each directed edge preserves the in-degree distribution
> # but not the out-degree distribution
> g <- sample_pa(1000)
> g2 <- g %>% rewire(each_edge(mode = "in", multiple = TRUE, prob = 0.2))
> degree(g, mode = "in") == degree(g2, mode = "in")
   [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [15] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [29] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [43] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [57] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [71] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [85] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
  [99] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [113] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [127] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [141] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [155] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [169] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [183] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [197] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [211] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [225] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [239] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [253] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [267] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [281] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [295] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [309] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [323] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [337] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [351] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [365] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [379] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [393] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [407] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [421] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [435] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [449] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [463] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [477] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [491] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [505] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [519] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [533] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [547] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [561] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [575] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [589] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [603] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [617] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [631] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [645] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [659] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [673] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [687] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [701] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [715] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [729] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [743] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [757] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [771] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [785] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [799] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [813] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [827] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [841] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [855] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [869] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [883] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [897] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [911] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [925] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [939] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [953] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [967] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [981] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [995] TRUE TRUE TRUE TRUE TRUE TRUE
> 
> 
> 
> cleanEx()
> nameEx("eccentricity")
> ### * eccentricity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eccentricity
> ### Title: Eccentricity of the vertices in a graph
> ### Aliases: eccentricity
> 
> ### ** Examples
> 
> g <- make_star(10, mode = "undirected")
> eccentricity(g)
 [1] 1 2 2 2 2 2 2 2 2 2
> 
> 
> 
> cleanEx()
> nameEx("edge")
> ### * edge
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge
> ### Title: Helper function for adding and deleting edges
> ### Aliases: edge edges
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_edge_attr("color", value = "red")
> 
> g <- g + edge(1, 5, color = "green") +
+   edge(2, 6, color = "blue") -
+   edge("8|9")
> 
> E(g)[[]]
+ 11/11 edges from d524a02:
   tail head tid hid color
1     1    2   1   2   red
2     2    3   2   3   red
3     3    4   3   4   red
4     4    5   4   5   red
5     5    6   5   6   red
6     6    7   6   7   red
7     7    8   7   8   red
8     9   10   9  10   red
9     1   10   1  10   red
10    1    5   1   5 green
11    2    6   2   6  blue
> 
> g %>%
+   add_layout_(in_circle()) %>%
+   plot()
> 
> g <- make_ring(10) + edges(1:10)
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("edge_attr-set")
> ### * edge_attr-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_attr<-
> ### Title: Set one or more edge attributes
> ### Aliases: edge_attr<- edge.attributes<-
> 
> ### ** Examples
> 
> g <- make_ring(10)
> edge_attr(g) <- list(
+   name = LETTERS[1:10],
+   color = rep("green", gsize(g))
+ )
> edge_attr(g, "label") <- E(g)$name
> g
IGRAPH 1d918d7 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (e/c), color
| (e/c), label (e/c)
+ edges from 1d918d7:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("edge_attr")
> ### * edge_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_attr
> ### Title: Query edge attributes of a graph
> ### Aliases: edge_attr edge.attributes
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_edge_attr("weight", value = 1:10) %>%
+   set_edge_attr("color", value = "red")
> g
IGRAPH 2d074d2 U-W- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), weight (e/n), color
| (e/c)
+ edges from 2d074d2:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> plot(g, edge.width = E(g)$weight)
> 
> 
> 
> cleanEx()
> nameEx("edge_attr_names")
> ### * edge_attr_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_attr_names
> ### Title: List names of edge attributes
> ### Aliases: edge_attr_names
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_edge_attr("label", value = letters[1:10])
> edge_attr_names(g)
[1] "label"
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("edge_connectivity")
> ### * edge_connectivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_connectivity
> ### Title: Edge connectivity
> ### Aliases: edge_connectivity edge_disjoint_paths adhesion
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100, m = 1)
> g2 <- sample_pa(100, m = 5)
> edge_connectivity(g, 100, 1)
[1] 1
> edge_connectivity(g2, 100, 1)
[1] 5
> edge_disjoint_paths(g2, 100, 1)
[1] 5
> 
> g <- sample_gnp(50, 5 / 50)
> g <- as_directed(g)
> g <- induced_subgraph(g, subcomponent(g, 1))
> adhesion(g)
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("edge_density")
> ### * edge_density
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edge_density
> ### Title: Graph density
> ### Aliases: edge_density
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> edge_density(make_empty_graph(n = 10)) # empty graphs have density 0
[1] 0
> edge_density(make_full_graph(n = 10)) # complete graphs have density 1
[1] 1
> edge_density(sample_gnp(n = 100, p = 0.4)) # density will be close to p
[1] 0.3973737
> 
> # loop edges
> g <- make_graph(c(1, 2, 2, 2, 2, 3)) # graph with a self-loop
> edge_density(g, loops = FALSE) # this is wrong!!!
[1] 0.5
> edge_density(g, loops = TRUE) # this is right!!!
[1] 0.3333333
> edge_density(simplify(g), loops = FALSE) # this is also right, but different
[1] 0.3333333
> 
> 
> 
> 
> cleanEx()
> nameEx("ego")
> ### * ego
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: connect
> ### Title: Neighborhood of graph vertices
> ### Aliases: connect ego_size neighborhood_size ego neighborhood ego_graph
> ###   make_ego_graph make_neighborhood_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> 
> ego_size(g, order = 0, 1:3)
[1] 1 1 1
> ego_size(g, order = 1, 1:3)
[1] 3 3 3
> ego_size(g, order = 2, 1:3)
[1] 5 5 5
> 
> # neighborhood_size() is an alias of ego_size()
> neighborhood_size(g, order = 0, 1:3)
[1] 1 1 1
> neighborhood_size(g, order = 1, 1:3)
[1] 3 3 3
> neighborhood_size(g, order = 2, 1:3)
[1] 5 5 5
> 
> ego(g, order = 0, 1:3)
[[1]]
+ 1/10 vertex, from e02d337:
[1] 1

[[2]]
+ 1/10 vertex, from e02d337:
[1] 2

[[3]]
+ 1/10 vertex, from e02d337:
[1] 3

> ego(g, order = 1, 1:3)
[[1]]
+ 3/10 vertices, from e02d337:
[1]  1  2 10

[[2]]
+ 3/10 vertices, from e02d337:
[1] 2 1 3

[[3]]
+ 3/10 vertices, from e02d337:
[1] 3 2 4

> ego(g, order = 2, 1:3)
[[1]]
+ 5/10 vertices, from e02d337:
[1]  1  2 10  3  9

[[2]]
+ 5/10 vertices, from e02d337:
[1]  2  1  3 10  4

[[3]]
+ 5/10 vertices, from e02d337:
[1] 3 2 4 1 5

> 
> # neighborhood() is an alias of ego()
> neighborhood(g, order = 0, 1:3)
[[1]]
+ 1/10 vertex, from e02d337:
[1] 1

[[2]]
+ 1/10 vertex, from e02d337:
[1] 2

[[3]]
+ 1/10 vertex, from e02d337:
[1] 3

> neighborhood(g, order = 1, 1:3)
[[1]]
+ 3/10 vertices, from e02d337:
[1]  1  2 10

[[2]]
+ 3/10 vertices, from e02d337:
[1] 2 1 3

[[3]]
+ 3/10 vertices, from e02d337:
[1] 3 2 4

> neighborhood(g, order = 2, 1:3)
[[1]]
+ 5/10 vertices, from e02d337:
[1]  1  2 10  3  9

[[2]]
+ 5/10 vertices, from e02d337:
[1]  2  1  3 10  4

[[3]]
+ 5/10 vertices, from e02d337:
[1] 3 2 4 1 5

> 
> # attributes are preserved
> V(g)$name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
> make_ego_graph(g, order = 2, 1:3)
[[1]]
IGRAPH db0ca71 UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from db0ca71 (vertex names):
[1] a--b b--c a--j i--j

[[2]]
IGRAPH 777299c UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from 777299c (vertex names):
[1] a--b b--c c--d a--j

[[3]]
IGRAPH d31b8b1 UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from d31b8b1 (vertex names):
[1] a--b b--c c--d d--e

> # make_neighborhood_graph() is an alias of make_ego_graph()
> make_neighborhood_graph(g, order = 2, 1:3)
[[1]]
IGRAPH 4b1bb46 UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from 4b1bb46 (vertex names):
[1] a--b b--c a--j i--j

[[2]]
IGRAPH 52c9e3b UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from 52c9e3b (vertex names):
[1] a--b b--c c--d a--j

[[3]]
IGRAPH 2ac0073 UN-- 5 4 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from 2ac0073 (vertex names):
[1] a--b b--c c--d d--e

> 
> # connecting to the neighborhood
> g <- make_ring(10)
> g <- connect(g, 2)
> 
> 
> 
> 
> cleanEx()
> nameEx("eigen_centrality")
> ### * eigen_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eigen_centrality
> ### Title: Eigenvector centrality of vertices
> ### Aliases: eigen_centrality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Generate some test data
> g <- make_ring(10, directed = FALSE)
> # Compute eigenvector centrality scores
> eigen_centrality(g)
$vector
 [1] 1 1 1 1 1 1 1 1 1 1

$value
[1] 2

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "LA"

$options$nev
[1] 1

$options$tol
[1] 0

$options$ncv
[1] 0

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 3000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 1

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 1

$options$nconv
[1] 1

$options$numop
[1] 7

$options$numopb
[1] 0

$options$numreo
[1] 5


> 
> 
> 
> cleanEx()
> nameEx("embed_adjacency_matrix")
> ### * embed_adjacency_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: embed_adjacency_matrix
> ### Title: Spectral Embedding of Adjacency Matrices
> ### Aliases: embed_adjacency_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A small graph
> lpvs <- matrix(rnorm(200), 20, 10)
> lpvs <- apply(lpvs, 2, function(x) {
+   return(abs(x) / sqrt(sum(x^2)))
+ })
> RDP <- sample_dot_product(lpvs)
> embed <- embed_adjacency_matrix(RDP, 5)
> 
> 
> 
> cleanEx()
> nameEx("embed_laplacian_matrix")
> ### * embed_laplacian_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: embed_laplacian_matrix
> ### Title: Spectral Embedding of the Laplacian of a Graph
> ### Aliases: embed_laplacian_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A small graph
> lpvs <- matrix(rnorm(200), 20, 10)
> lpvs <- apply(lpvs, 2, function(x) {
+   return(abs(x) / sqrt(sum(x^2)))
+ })
> RDP <- sample_dot_product(lpvs)
> embed <- embed_laplacian_matrix(RDP, 5)
> 
> 
> 
> cleanEx()
> nameEx("ends")
> ### * ends
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ends
> ### Title: Incident vertices of some graph edges
> ### Aliases: ends get.edges
> 
> ### ** Examples
> 
> g <- make_ring(5)
> ends(g, E(g))
     [,1] [,2]
[1,]    1    2
[2,]    2    3
[3,]    3    4
[4,]    4    5
[5,]    1    5
> 
> 
> 
> cleanEx()
> nameEx("erdos.renyi.game")
> ### * erdos.renyi.game
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: erdos.renyi.game
> ### Title: Generate random graphs according to the Erdős-Rényi model
> ### Aliases: erdos.renyi.game random.graph.game
> ### Keywords: graphs internal
> 
> ### ** Examples
> 
> 
> g <- erdos.renyi.game(1000, 1 / 1000)
Warning: `erdos.renyi.game()` was deprecated in igraph 0.8.0.
ℹ Please use `sample_gnp()` instead.
> degree_distribution(g)
[1] 0.361 0.374 0.179 0.061 0.023 0.001 0.001
> 
> 
> 
> 
> cleanEx()
> nameEx("feedback_arc_set")
> ### * feedback_arc_set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: feedback_arc_set
> ### Title: Finding a feedback arc set in a graph
> ### Aliases: feedback_arc_set
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(20, 40, directed = TRUE)
> feedback_arc_set(g)
+ 4/40 edges from 5fe9e62:
[1]  8->5  9->8 12->3 16->7
> feedback_arc_set(g, algo = "approx_eades")
+ 4/40 edges from 5fe9e62:
[1]  8->5  9->8 12->3 16->7
> 
> 
> 
> cleanEx()
> nameEx("fit_hrg")
> ### * fit_hrg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_hrg
> ### Title: Fit a hierarchical random graph model
> ### Aliases: fit_hrg
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ 
+ ## A graph with two dense groups
+ g <- sample_gnp(10, p = 1 / 2) + sample_gnp(10, p = 1 / 2)
+ hrg <- fit_hrg(g)
+ hrg
+ summary(as.hclust(hrg))
+ 
+ ## The consensus tree for it
+ consensus_tree(g, hrg = hrg, start = TRUE)
+ 
+ ## Prediction of missing edges
+ g2 <- make_full_graph(4) + (make_full_graph(4) - path(1, 2))
+ predict_edges(g2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("fit_power_law")
> ### * fit_power_law
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fit_power_law
> ### Title: Fitting a power-law distribution function to discrete data
> ### Aliases: fit_power_law
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # This should approximately yield the correct exponent 3
> g <- sample_pa(1000) # increase this number to have a better estimate
> d <- degree(g, mode = "in")
> fit1 <- fit_power_law(d + 1, 10)
> fit2 <- fit_power_law(d + 1, 10, implementation = "R.mle")
> 
> fit1$alpha
[1] 3.243247
> stats4::coef(fit2)
   alpha 
3.243243 
> fit1$logLik
[1] -72.34899
> stats4::logLik(fit2)
'log Lik.' -72.34898 (df=1)
> 
> 
> 
> 
> cleanEx()
> nameEx("get_edge_ids")
> ### * get_edge_ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_edge_ids
> ### Title: Find the edge ids based on the incident vertices of the edges
> ### Aliases: get_edge_ids
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> ei <- get_edge_ids(g, c(1, 2, 4, 5))
> E(g)[ei]
+ 2/10 edges from 99859ea:
[1] 1--2 4--5
> 
> ## non-existant edge
> get_edge_ids(g, c(2, 1, 1, 4, 5, 4))
[1] 1 0 4
> 
> ## For multiple edges, a single edge id is returned,
> ## as many times as corresponding pairs in the vertex series.
> g <- make_graph(rep(c(1, 2), 5))
> eis <- get_edge_ids(g, c(1, 2, 1, 2))
> eis
[1] 5 5
> E(g)[eis]
+ 2/5 edges from 1bb8742:
[1] 1->2 1->2
> 
> 
> 
> 
> cleanEx()
> nameEx("girth")
> ### * girth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: girth
> ### Title: Girth of a graph
> ### Aliases: girth
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # No circle in a tree
> g <- make_tree(1000, 3)
> girth(g)
$girth
[1] Inf

$circle
+ 0/1000 vertices, from cc38e11:

> 
> # The worst case running time is for a ring
> g <- make_ring(100)
> girth(g)
$girth
[1] 100

$circle
+ 100/100 vertices, from 842d075:
  [1]  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68
 [19]  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86
 [37]  87  88  89  90  91  92  93  94  95  96  97  98  99 100   1   2   3   4
 [55]   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22
 [73]  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40
 [91]  41  42  43  44  45  46  47  48  49  50

> 
> # What about a random graph?
> g <- sample_gnp(1000, 1 / 1000)
> girth(g)
$girth
[1] 5

$circle
+ 5/1000 vertices, from 72d525d:
[1] 465 308  38 846 356

> 
> 
> 
> 
> cleanEx()
> nameEx("global_efficiency")
> ### * global_efficiency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: global_efficiency
> ### Title: Efficiency of a graph
> ### Aliases: global_efficiency local_efficiency average_local_efficiency
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph("zachary")
> global_efficiency(g)
[1] 0.4920083
> average_local_efficiency(g)
[1] 0.752932
> 
> 
> 
> cleanEx()
> nameEx("gorder")
> ### * gorder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gorder
> ### Title: Order (number of vertices) of a graph
> ### Aliases: gorder vcount
> 
> ### ** Examples
> 
> g <- make_ring(10)
> gorder(g)
[1] 10
> vcount(g)
[1] 10
> 
> 
> 
> cleanEx()
> nameEx("graph_")
> ### * graph_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_
> ### Title: Convert object to a graph
> ### Aliases: graph_
> 
> ### ** Examples
> 
> ## These are equivalent
> graph_(cbind(1:5, 2:6), from_edgelist(directed = FALSE))
Warning: `graph_()` was deprecated in igraph 2.1.0.
ℹ Please use constructors directly, for instance graph_from_edgelist().
ℹ graph_() will be removed in a future version of igraph.
IGRAPH 086ef8b U--- 6 5 -- 
+ edges from 086ef8b:
[1] 1--2 2--3 3--4 4--5 5--6
> graph_(cbind(1:5, 2:6), from_edgelist(), directed = FALSE)
IGRAPH 38c9482 U--- 6 5 -- 
+ edges from 38c9482:
[1] 1--2 2--3 3--4 4--5 5--6
> 
> 
> 
> cleanEx()
> nameEx("graph_attr-set")
> ### * graph_attr-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_attr<-
> ### Title: Set all or some graph attributes
> ### Aliases: graph_attr<- graph.attributes<-
> 
> ### ** Examples
> 
> g <- make_graph(~ A - B:C:D)
> graph_attr(g, "name") <- "4-star"
> g
IGRAPH 87d0105 UN-- 4 3 -- 4-star
+ attr: name (g/c), name (v/c)
+ edges from 87d0105 (vertex names):
[1] A--B A--C A--D
> 
> graph_attr(g) <- list(
+   layout = layout_with_fr(g),
+   name = "4-star layed out"
+ )
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("graph_attr")
> ### * graph_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_attr
> ### Title: Graph attributes of a graph
> ### Aliases: graph_attr graph.attributes
> 
> ### ** Examples
> 
> g <- make_ring(10)
> graph_attr(g)
$name
[1] "Ring graph"

$mutual
[1] FALSE

$circular
[1] TRUE

> graph_attr(g, "name")
[1] "Ring graph"
> 
> 
> 
> cleanEx()
> nameEx("graph_attr_names")
> ### * graph_attr_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_attr_names
> ### Title: List names of graph attributes
> ### Aliases: graph_attr_names attributes
> 
> ### ** Examples
> 
> g <- make_ring(10)
> graph_attr_names(g)
[1] "name"     "mutual"   "circular"
> 
> 
> 
> cleanEx()
> nameEx("graph_center")
> ### * graph_center
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_center
> ### Title: Central vertices of a graph
> ### Aliases: graph_center
> 
> ### ** Examples
> 
> tree <- make_tree(100, 7)
> graph_center(tree)
+ 2/100 vertices, from 7824279:
[1] 1 2
> graph_center(tree, mode = "in")
+ 1/100 vertex, from 7824279:
[1] 1
> graph_center(tree, mode = "out")
+ 85/100 vertices, from 7824279:
 [1]  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34
[20]  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53
[39]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
[58]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91
[77]  92  93  94  95  96  97  98  99 100
> 
> # Without and with weights
> ring <- make_ring(10)
> graph_center(ring)
+ 10/10 vertices, from b91e9fc:
 [1]  1  2  3  4  5  6  7  8  9 10
> # Add weights
> E(ring)$weight <- seq_len(ecount(ring))
> graph_center(ring)
+ 1/10 vertex, from b91e9fc:
[1] 7
> 
> 
> 
> 
> cleanEx()
> nameEx("graph_from_adj_list")
> ### * graph_from_adj_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_adj_list
> ### Title: Create graphs from adjacency lists
> ### Aliases: graph_from_adj_list
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Directed
> g <- make_ring(10, directed = TRUE)
> al <- as_adj_list(g, mode = "out")
> g2 <- graph_from_adj_list(al)
> graph.isomorphic(g, g2)
[1] TRUE
> 
> ## Undirected
> g <- make_ring(10)
> al <- as_adj_list(g)
> g2 <- graph_from_adj_list(al, mode = "all")
> graph.isomorphic(g, g2)
[1] TRUE
> ecount(g2)
[1] 10
> g3 <- graph_from_adj_list(al, mode = "all", duplicate = FALSE)
> ecount(g3)
[1] 20
> which_multiple(g3)
 [1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE FALSE
[13]  TRUE FALSE  TRUE FALSE  TRUE FALSE  TRUE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("graph_from_adjacency_matrix")
> ### * graph_from_adjacency_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_adjacency_matrix
> ### Title: Create graphs from adjacency matrices
> ### Aliases: graph_from_adjacency_matrix from_adjacency
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g1 <- sample(
+     x = 0:1, size = 100, replace = TRUE,
+     prob = c(0.9, 0.1)
+   ) %>%
+   matrix(ncol = 10) %>%
+   graph_from_adjacency_matrix()
> 
> g2 <- sample(
+     x = 0:5, size = 100, replace = TRUE,
+     prob = c(0.9, 0.02, 0.02, 0.02, 0.02, 0.02)
+ ) %>%
+   matrix(ncol = 10) %>%
+   graph_from_adjacency_matrix(weighted = TRUE)
> E(g2)$weight
[1] 5 1 1 3 3 3 1 4 2
> 
> ## various modes for weighted graphs, with some tests
> non_zero_sort <- function(x) sort(x[x != 0])
> adj_matrix <- matrix(runif(100), 10)
> adj_matrix[adj_matrix < 0.5] <- 0
> g3 <- graph_from_adjacency_matrix(
+   (adj_matrix + t(adj_matrix)) / 2,
+   weighted = TRUE,
+   mode = "undirected"
+ )
> 
> g4 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "max"
+ )
> expected_g4_weights <- non_zero_sort(
+   pmax(adj_matrix, t(adj_matrix))[upper.tri(adj_matrix, diag = TRUE)]
+ )
> actual_g4_weights <- sort(E(g4)$weight)
> all(expected_g4_weights == actual_g4_weights)
[1] TRUE
> 
> g5 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "min"
+ )
> expected_g5_weights <- non_zero_sort(
+   pmin(adj_matrix, t(adj_matrix))[upper.tri(adj_matrix, diag = TRUE)]
+ )
> actual_g5_weights <- sort(E(g5)$weight)
> all(expected_g5_weights == actual_g5_weights)
[1] TRUE
> 
> g6 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "upper"
+ )
> expected_g6_weights <- non_zero_sort(adj_matrix[upper.tri(adj_matrix, diag = TRUE)])
> actual_g6_weights <- sort(E(g6)$weight)
> all(expected_g6_weights == actual_g6_weights)
[1] TRUE
> 
> g7 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "lower"
+ )
> expected_g7_weights <- non_zero_sort(adj_matrix[lower.tri(adj_matrix, diag = TRUE)])
> actual_g7_weights <- sort(E(g7)$weight)
> all(expected_g7_weights == actual_g7_weights)
[1] TRUE
> 
> g8 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "plus"
+ )
> halve_diag <- function(x) {
+   diag(x) <- diag(x) / 2
+   x
+ }
> expected_g8_weights <- non_zero_sort(
+   halve_diag(adj_matrix + t(adj_matrix)
+ )[lower.tri(adj_matrix, diag = TRUE)])
> actual_g8_weights <- sort(E(g8)$weight)
> all(expected_g8_weights == actual_g8_weights)
[1] TRUE
> 
> g9 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   mode = "plus",
+   diag = FALSE
+ )
> zero_diag <- function(x) {
+   diag(x) <- 0
+ }
> expected_g9_weights <- non_zero_sort((zero_diag(adj_matrix + t(adj_matrix)))[lower.tri(adj_matrix)])
> actual_g9_weights <- sort(E(g9)$weight)
> all(expected_g9_weights == actual_g9_weights)
[1] TRUE
> 
> ## row/column names
> rownames(adj_matrix) <- sample(letters, nrow(adj_matrix))
> colnames(adj_matrix) <- seq(ncol(adj_matrix))
> g10 <- graph_from_adjacency_matrix(
+   adj_matrix,
+   weighted = TRUE,
+   add.rownames = "code"
+ )
> summary(g10)
IGRAPH 69de756 DNW- 10 38 -- 
+ attr: name (v/c), code (v/c), weight (e/n)
> 
> 
> 
> 
> cleanEx()
> nameEx("graph_from_atlas")
> ### * graph_from_atlas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_atlas
> ### Title: Create a graph from the Graph Atlas
> ### Aliases: graph_from_atlas atlas
> 
> ### ** Examples
> 
> ## Some randomly picked graphs from the atlas
> graph_from_atlas(sample(0:1252, 1))
IGRAPH 37af66e U--- 7 13 -- Graph from the Atlas #1016
+ attr: name (g/c), n (g/n)
+ edges from 37af66e:
 [1] 1--7 2--5 2--6 2--7 3--4 3--5 3--6 4--5 4--6 4--7 5--6 5--7 6--7
> graph_from_atlas(sample(0:1252, 1))
IGRAPH 831c8e4 U--- 7 10 -- Graph from the Atlas #678
+ attr: name (g/c), n (g/n)
+ edges from 831c8e4:
 [1] 1--3 1--6 5--6 3--5 2--3 2--6 6--7 4--7 3--4 3--7
> 
> 
> 
> cleanEx()
> nameEx("graph_from_biadjacency_matrix")
> ### * graph_from_biadjacency_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_biadjacency_matrix
> ### Title: Create graphs from a bipartite adjacency matrix
> ### Aliases: graph_from_biadjacency_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> inc <- matrix(sample(0:1, 15, repl = TRUE), 3, 5)
> colnames(inc) <- letters[1:5]
> rownames(inc) <- LETTERS[1:3]
> graph_from_biadjacency_matrix(inc)
IGRAPH 410fdeb UN-B 8 4 -- 
+ attr: type (v/l), name (v/c)
+ edges from 410fdeb (vertex names):
[1] A--d B--a B--b C--c
> 
> 
> 
> 
> cleanEx()
> nameEx("graph_from_data_frame")
> ### * graph_from_data_frame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_data_frame
> ### Title: Creating igraph graphs from data frames or vice-versa
> ### Aliases: as_data_frame graph_from_data_frame from_data_frame
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A simple example with a couple of actors
> ## The typical case is that these tables are read in from files....
> actors <- data.frame(
+   name = c(
+     "Alice", "Bob", "Cecil", "David",
+     "Esmeralda"
+   ),
+   age = c(48, 33, 45, 34, 21),
+   gender = c("F", "M", "F", "M", "F")
+ )
> relations <- data.frame(
+   from = c(
+     "Bob", "Cecil", "Cecil", "David",
+     "David", "Esmeralda"
+   ),
+   to = c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
+   same.dept = c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE),
+   friendship = c(4, 5, 5, 2, 1, 1), advice = c(4, 5, 5, 4, 2, 3)
+ )
> g <- graph_from_data_frame(relations, directed = TRUE, vertices = actors)
> print(g, e = TRUE, v = TRUE)
IGRAPH 51182ab DN-- 5 6 -- 
+ attr: name (v/c), age (v/n), gender (v/c), same.dept (e/l),
| friendship (e/n), advice (e/n)
+ edges from 51182ab (vertex names):
[1] Bob      ->Alice Cecil    ->Bob   Cecil    ->Alice David    ->Alice
[5] David    ->Bob   Esmeralda->Alice
> 
> ## The opposite operation
> as_data_frame(g, what = "vertices")
               name age gender
Alice         Alice  48      F
Bob             Bob  33      M
Cecil         Cecil  45      F
David         David  34      M
Esmeralda Esmeralda  21      F
> as_data_frame(g, what = "edges")
       from    to same.dept friendship advice
1       Bob Alice     FALSE          4      4
2     Cecil   Bob     FALSE          5      5
3     Cecil Alice      TRUE          5      5
4     David Alice     FALSE          2      4
5     David   Bob     FALSE          1      2
6 Esmeralda Alice      TRUE          1      3
> 
> 
> 
> 
> cleanEx()
> nameEx("graph_from_edgelist")
> ### * graph_from_edgelist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_edgelist
> ### Title: Create a graph from an edge list matrix
> ### Aliases: graph_from_edgelist from_edgelist
> 
> ### ** Examples
> 
> el <- matrix(c("foo", "bar", "bar", "foobar"), nc = 2, byrow = TRUE)
> graph_from_edgelist(el)
IGRAPH 4a059de DN-- 3 2 -- 
+ attr: name (v/c)
+ edges from 4a059de (vertex names):
[1] foo->bar    bar->foobar
> 
> # Create a ring by hand
> graph_from_edgelist(cbind(1:10, c(2:10, 1)))
IGRAPH 7bfcec1 D--- 10 10 -- 
+ edges from 7bfcec1:
 [1]  1-> 2  2-> 3  3-> 4  4-> 5  5-> 6  6-> 7  7-> 8  8-> 9  9->10 10-> 1
> 
> 
> 
> cleanEx()
> nameEx("graph_from_graphnel")
> ### * graph_from_graphnel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_graphnel
> ### Title: Convert graphNEL objects from the graph package to igraph
> ### Aliases: graph_from_graphnel
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed("graph")) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ ## Undirected
+ g <- make_ring(10)
+ V(g)$name <- letters[1:10]
+ GNEL <- as_graphnel(g)
+ g2 <- graph_from_graphnel(GNEL)
+ g2
+ 
+ ## Directed
+ g3 <- make_star(10, mode = "in")
+ V(g3)$name <- letters[1:10]
+ GNEL2 <- as_graphnel(g3)
+ g4 <- graph_from_graphnel(GNEL2)
+ g4
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("graph_from_lcf")
> ### * graph_from_lcf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_lcf
> ### Title: Creating a graph from LCF notation
> ### Aliases: graph_from_lcf
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # This is the Franklin graph:
> g1 <- graph_from_lcf(12, c(5, -5), 6)
> g2 <- make_graph("Franklin")
> isomorphic(g1, g2)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("graph_from_literal")
> ### * graph_from_literal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_from_literal
> ### Title: Creating (small) graphs via a simple interface
> ### Aliases: graph_from_literal from_literal
> 
> ### ** Examples
> 
> # A simple undirected graph
> g <- graph_from_literal(
+   Alice - Bob - Cecil - Alice,
+   Daniel - Cecil - Eugene,
+   Cecil - Gordon
+ )
> g
IGRAPH 9c64353 UN-- 6 6 -- 
+ attr: name (v/c)
+ edges from 9c64353 (vertex names):
[1] Alice--Bob    Alice--Cecil  Bob  --Cecil  Cecil--Daniel Cecil--Eugene
[6] Cecil--Gordon
> 
> # Another undirected graph, ":" notation
> g2 <- graph_from_literal(Alice - Bob:Cecil:Daniel, Cecil:Daniel - Eugene:Gordon)
> g2
IGRAPH d24b1b8 UN-- 6 7 -- 
+ attr: name (v/c)
+ edges from d24b1b8 (vertex names):
[1] Alice --Bob    Alice --Cecil  Alice --Daniel Cecil --Eugene Cecil --Gordon
[6] Daniel--Eugene Daniel--Gordon
> 
> # A directed graph
> g3 <- graph_from_literal(
+   Alice +-+ Bob --+ Cecil +-- Daniel,
+   Eugene --+ Gordon:Helen
+ )
> g3
IGRAPH bd9a758 DN-- 7 6 -- 
+ attr: name (v/c)
+ edges from bd9a758 (vertex names):
[1] Alice ->Bob    Bob   ->Alice  Bob   ->Cecil  Daniel->Cecil  Eugene->Gordon
[6] Eugene->Helen 
> 
> # A graph with isolate vertices
> g4 <- graph_from_literal(Alice -- Bob -- Daniel, Cecil:Gordon, Helen)
> g4
IGRAPH db2bef9 UN-- 6 2 -- 
+ attr: name (v/c)
+ edges from db2bef9 (vertex names):
[1] Alice--Bob    Bob  --Daniel
> V(g4)$name
[1] "Alice"  "Bob"    "Daniel" "Cecil"  "Gordon" "Helen" 
> 
> # "Arrows" can be arbitrarily long
> g5 <- graph_from_literal(Alice +---------+ Bob)
> g5
IGRAPH feb3145 DN-- 2 2 -- 
+ attr: name (v/c)
+ edges from feb3145 (vertex names):
[1] Alice->Bob   Bob  ->Alice
> 
> # Special vertex names
> g6 <- graph_from_literal("+" -- "-", "*" -- "/", "%%" -- "%/%")
> g6
IGRAPH ad9eea6 UN-- 6 3 -- 
+ attr: name (v/c)
+ edges from ad9eea6 (vertex names):
[1] + ---   * --/   %%--%/%
> 
> 
> 
> 
> cleanEx()
> nameEx("graph_id")
> ### * graph_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graph_id
> ### Title: Get the id of a graph
> ### Aliases: graph_id
> 
> ### ** Examples
> 
> g <- make_ring(10)
> graph_id(g)
[1] "96d5d770-51dd-4430-ac95-834b37ccd43e"
> graph_id(V(g))
[1] "96d5d770-51dd-4430-ac95-834b37ccd43e"
> graph_id(E(g))
[1] "96d5d770-51dd-4430-ac95-834b37ccd43e"
> 
> g2 <- g + 1
> graph_id(g2)
[1] "55b7d4e4-1ceb-470e-b357-15dbd7ed2e11"
> 
> 
> 
> cleanEx()
> nameEx("graphlet_basis")
> ### * graphlet_basis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: graphlet_basis
> ### Title: Graphlet decomposition of a graph
> ### Aliases: graphlet_basis graphlet_proj graphlets
> 
> ### ** Examples
> 
> 
> ## Create an example graph first
> D1 <- matrix(0, 5, 5)
> D2 <- matrix(0, 5, 5)
> D3 <- matrix(0, 5, 5)
> D1[1:3, 1:3] <- 2
> D2[3:5, 3:5] <- 3
> D3[2:5, 2:5] <- 1
> 
> g <- simplify(graph_from_adjacency_matrix(D1 + D2 + D3,
+   mode = "undirected", weighted = TRUE
+ ))
> V(g)$color <- "white"
> E(g)$label <- E(g)$weight
> E(g)$label.cex <- 2
> E(g)$color <- "black"
> layout(matrix(1:6, nrow = 2, byrow = TRUE))
> co <- layout_with_kk(g)
> par(mar = c(1, 1, 1, 1))
> plot(g, layout = co)
> 
> ## Calculate graphlets
> gl <- graphlets(g, niter = 1000)
> 
> ## Plot graphlets
> for (i in 1:length(gl$cliques)) {
+   sel <- gl$cliques[[i]]
+   V(g)$color <- "white"
+   V(g)[sel]$color <- "#E495A5"
+   E(g)$width <- 1
+   E(g)[V(g)[sel] %--% V(g)[sel]]$width <- 2
+   E(g)$label <- ""
+   E(g)[width == 2]$label <- round(gl$Mu[i], 2)
+   E(g)$color <- "black"
+   E(g)[width == 2]$color <- "#E495A5"
+   plot(g, layout = co)
+ }
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("greedy_vertex_coloring")
> ### * greedy_vertex_coloring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: greedy_vertex_coloring
> ### Title: Greedy vertex coloring
> ### Aliases: greedy_vertex_coloring
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph("petersen")
> col <- greedy_vertex_coloring(g)
> plot(g, vertex.color = col)
> 
> 
> 
> 
> cleanEx()
> nameEx("groups")
> ### * groups
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groups
> ### Title: Groups of a vertex partitioning
> ### Aliases: groups groups.default groups.communities
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> fgc <- cluster_fast_greedy(g)
> groups(fgc)
$`1`
[1]  1  5  6  7 11 12 17 20

$`2`
 [1]  9 15 16 19 21 23 24 25 26 27 28 29 30 31 32 33 34

$`3`
[1]  2  3  4  8 10 13 14 18 22

> 
> g2 <- make_ring(10) + make_full_graph(5)
> groups(components(g2))
$`1`
 [1]  1  2  3  4  5  6  7  8  9 10

$`2`
[1] 11 12 13 14 15

> 
> 
> 
> cleanEx()
> nameEx("gsize")
> ### * gsize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gsize
> ### Title: The size of the graph (number of edges)
> ### Aliases: gsize ecount
> 
> ### ** Examples
> 
> g <- sample_gnp(100, 2 / 100)
> gsize(g)
[1] 102
> ecount(g)
[1] 102
> 
> # Number of edges in a G(n,p) graph
> replicate(100, sample_gnp(10, 1 / 2), simplify = FALSE) %>%
+   vapply(gsize, 0) %>%
+   hist()
> 
> 
> 
> cleanEx()
> nameEx("harmonic_centrality")
> ### * harmonic_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: harmonic_centrality
> ### Title: Harmonic centrality of vertices
> ### Aliases: harmonic_centrality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g2 <- make_star(10)
> harmonic_centrality(g)
 [1] 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667
 [9] 4.366667 4.366667
> harmonic_centrality(g2, mode = "in")
 [1] 9 0 0 0 0 0 0 0 0 0
> harmonic_centrality(g2, mode = "out")
 [1] 0 1 1 1 1 1 1 1 1 1
> harmonic_centrality(g %du% make_full_graph(5), mode = "all")
 [1] 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667 4.366667
 [9] 4.366667 4.366667 4.000000 4.000000 4.000000 4.000000 4.000000
> 
> 
> 
> 
> cleanEx()
> nameEx("has_eulerian_path")
> ### * has_eulerian_path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_eulerian_path
> ### Title: Find Eulerian paths or cycles in a graph
> ### Aliases: has_eulerian_path has_eulerian_cycle eulerian_path
> ###   eulerian_cycle
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph(~ A - B - C - D - E - A - F - D - B - F - E)
> 
> has_eulerian_path(g)
[1] TRUE
> eulerian_path(g)
$epath
+ 10/10 edges from f8a0dce (vertex names):
 [1] A--B B--C C--D B--D B--F A--F A--E D--E D--F E--F

$vpath
+ 11/6 vertices, named, from f8a0dce:
 [1] A B C D B F A E D F E

> 
> has_eulerian_cycle(g)
[1] FALSE
> try(eulerian_cycle(g))
Error in eulerian_cycle(g) : 
  At vendor/cigraph/src/paths/eulerian.c:615 : The graph does not have an Eulerian cycle. Input problem has no solution
> 
> 
> 
> 
> cleanEx()
> nameEx("hits_scores")
> ### * hits_scores
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hits_scores
> ### Title: Kleinberg's hub and authority centrality scores.
> ### Aliases: hits_scores
> 
> ### ** Examples
> 
> ## An in-star
> g <- make_star(10)
> hits_scores(g)
$hub
 [1] 0 1 1 1 1 1 1 1 1 1

$authority
 [1] 1 0 0 0 0 0 0 0 0 0

$value
[1] 9

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "LA"

$options$nev
[1] 1

$options$tol
[1] 0

$options$ncv
[1] 0

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 3000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 1

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 1

$options$nconv
[1] 1

$options$numop
[1] 7

$options$numopb
[1] 0

$options$numreo
[1] 7


> 
> ## A ring
> g2 <- make_ring(10)
> hits_scores(g2)
$hub
 [1] 1 0 1 0 1 0 1 0 1 0

$authority
 [1] 0 1 0 1 0 1 0 1 0 1

$value
[1] 4

$options
$options$bmat
[1] "I"

$options$n
[1] 10

$options$which
[1] "LA"

$options$nev
[1] 1

$options$tol
[1] 0

$options$ncv
[1] 0

$options$ldv
[1] 0

$options$ishift
[1] 1

$options$maxiter
[1] 3000

$options$nb
[1] 1

$options$mode
[1] 1

$options$start
[1] 1

$options$sigma
[1] 0

$options$sigmai
[1] 0

$options$info
[1] 0

$options$iter
[1] 1

$options$nconv
[1] 1

$options$numop
[1] 7

$options$numopb
[1] 0

$options$numreo
[1] 7


> 
> 
> 
> cleanEx()
> nameEx("igraph-attribute-combination")
> ### * igraph-attribute-combination
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-attribute-combination
> ### Title: How igraph functions handle attributes when the graph changes
> ### Aliases: igraph-attribute-combination attribute.combination
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph(c(1, 2, 1, 2, 1, 2, 2, 3, 3, 4))
> E(g)$weight <- 1:5
> 
> ## print attribute values with the graph
> igraph_options(print.graph.attributes = TRUE)
> igraph_options(print.vertex.attributes = TRUE)
> igraph_options(print.edge.attributes = TRUE)
> 
> ## new attribute is the sum of the old ones
> simplify(g, edge.attr.comb = "sum")
IGRAPH c6072bc D-W- 4 3 -- 
+ attr: weight (e/n)
+ edges from c6072bc:
[1] 1->2 2->3 3->4
> 
> ## collect attributes into a string
> simplify(g, edge.attr.comb = toString)
IGRAPH eb781bc D-W- 4 3 -- 
+ attr: weight (e/c)
+ edges from eb781bc:
[1] 1->2 2->3 3->4
> 
> ## concatenate them into a vector, this creates a complex
> ## attribute
> simplify(g, edge.attr.comb = "concat")
IGRAPH adba215 D-W- 4 3 -- 
+ attr: weight (e/x)
+ edges from adba215:
[1] 1->2 2->3 3->4
> 
> E(g)$name <- letters[seq_len(ecount(g))]
> 
> ## both attributes are collected into strings
> simplify(g, edge.attr.comb = toString)
IGRAPH 178abfe D-W- 4 3 -- 
+ attr: weight (e/c), name (e/c)
+ edges from 178abfe:
[1] 1->2 2->3 3->4
> 
> ## harmonic average of weights, names are dropped
> simplify(g, edge.attr.comb = list(
+   weight = function(x) length(x) / sum(1 / x),
+   name = "ignore"
+ ))
IGRAPH 9efc4eb D-W- 4 3 -- 
+ attr: weight (e/n)
+ edges from 9efc4eb:
[1] 1->2 2->3 3->4
> 
> 
> 
> cleanEx()
> nameEx("igraph-dollar")
> ### * igraph-dollar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-dollar
> ### Title: Getting and setting graph attributes, shortcut
> ### Aliases: igraph-dollar $.igraph $<-.igraph
> 
> ### ** Examples
> 
> g <- make_ring(10)
> g$name
[1] "Ring graph"
> g$name <- "10-ring"
> g$name
[1] "10-ring"
> 
> 
> 
> cleanEx()
> nameEx("igraph-es-attributes")
> ### * igraph-es-attributes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-es-attributes
> ### Title: Query or set attributes of the edges in an edge sequence
> ### Aliases: igraph-es-attributes [[<-.igraph.es [<-.igraph.es $.igraph.es
> ###   $<-.igraph.es E<-
> 
> ### ** Examples
> 
> # color edges of the largest component
> largest_comp <- function(graph) {
+   cl <- components(graph)
+   V(graph)[which.max(cl$csize) == cl$membership]
+ }
> g <- sample_(
+   gnp(100, 1 / 100),
+   with_vertex_(size = 3, label = ""),
+   with_graph_(layout = layout_with_fr)
+ )
> giant_v <- largest_comp(g)
> E(g)$color <- "orange"
> E(g)[giant_v %--% giant_v]$color <- "blue"
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("igraph-es-indexing")
> ### * igraph-es-indexing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-es-indexing
> ### Title: Indexing edge sequences
> ### Aliases: igraph-es-indexing [.igraph.es %--% %<-% %->%
> 
> ### ** Examples
> 
> # -----------------------------------------------------------------
> # Special operators for indexing based on graph structure
> g <- sample_pa(100, power = 0.3)
> E(g)[1:3 %--% 2:6]
+ 4/99 edges from 9f1dd32:
[1] 2->1 3->1 4->1 5->2
> E(g)[1:5 %->% 1:6]
+ 4/99 edges from 9f1dd32:
[1] 2->1 3->1 4->1 5->2
> E(g)[1:3 %<-% 2:6]
+ 4/99 edges from 9f1dd32:
[1] 2->1 3->1 4->1 5->2
> 
> # -----------------------------------------------------------------
> # The edges along the diameter
> g <- sample_pa(100, directed = FALSE)
> d <- get_diameter(g)
> E(g, path = d)
+ 11/99 edges from 80b3622:
 [1] 25--45 24--25 12--24  4--12  2-- 4  2-- 7  7--14 14--15 15--72 72--87
[11] 87--98
> 
> # -----------------------------------------------------------------
> # Select edges based on attributes
> g <- sample_gnp(20, 3 / 20) %>%
+   set_edge_attr("weight", value = rnorm(gsize(.)))
> E(g)[[weight < 0]]
+ 18/28 edges from 091d305:
   tail head tid hid      weight
1     1    7   1   7 -1.91435943
3     3    8   3   8 -1.66497244
4     3    9   3   9 -0.46353040
5     2   10   2  10 -1.11592011
6     1   12   1  12 -0.75081900
9    11   12  11  12 -1.28630053
10    6   13   6  13 -1.64060553
12    7   14   7  14 -0.01855983
13   11   14  11  14 -0.31806837
14    6   15   6  15 -0.92936215
15    1   16   1  16 -1.48746031
16    4   16   4  16 -1.07519230
18   11   16  11  16 -0.62126669
19    5   17   5  17 -1.38442685
22   10   18  10  18 -0.23864710
25    9   19   9  19 -0.61924305
27    1   20   1  20 -0.25502703
28   12   20  12  20 -1.42449465
> 
> # Indexing with a variable whose name matches the name of an attribute
> # may fail; use .env to force the name lookup in the parent environment
> E(g)$x <- E(g)$weight
> x <- 2
> E(g)[.env$x]
+ 1/28 edge from 091d305:
[1] 2--8
> 
> 
> 
> 
> cleanEx()
> nameEx("igraph-es-indexing2")
> ### * igraph-es-indexing2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-es-indexing2
> ### Title: Select edges and show their metadata
> ### Aliases: igraph-es-indexing2 [[.igraph.es
> 
> ### ** Examples
> 
> g <- make_(
+   ring(10),
+   with_vertex_(name = LETTERS[1:10]),
+   with_edge_(weight = 1:10, color = "green")
+ )
> E(g)
+ 10/10 edges from c1d48fa (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> E(g)[[]]
+ 10/10 edges from c1d48fa (vertex names):
   tail head tid hid weight color
1     A    B   1   2      1 green
2     B    C   2   3      2 green
3     C    D   3   4      3 green
4     D    E   4   5      4 green
5     E    F   5   6      5 green
6     F    G   6   7      6 green
7     G    H   7   8      7 green
8     H    I   8   9      8 green
9     I    J   9  10      9 green
10    A    J   1  10     10 green
> E(g)[[.inc("A")]]
+ 2/10 edges from c1d48fa (vertex names):
   tail head tid hid weight color
1     A    B   1   2      1 green
10    A    J   1  10     10 green
> 
> 
> 
> cleanEx()
> nameEx("igraph-vs-attributes")
> ### * igraph-vs-attributes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-vs-attributes
> ### Title: Query or set attributes of the vertices in a vertex sequence
> ### Aliases: igraph-vs-attributes [[<-.igraph.vs [<-.igraph.vs $.igraph.vs
> ###   $<-.igraph.vs V<-
> 
> ### ** Examples
> 
> g <- make_(
+   ring(10),
+   with_vertex_(
+     name = LETTERS[1:10],
+     color = sample(1:2, 10, replace = TRUE)
+   )
+ )
> V(g)$name
 [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
> V(g)$color
 [1] 1 2 1 1 2 1 1 1 2 2
> V(g)$frame.color <- V(g)$color
> 
> # color vertices of the largest component
> largest_comp <- function(graph) {
+   cl <- components(graph)
+   V(graph)[which.max(cl$csize) == cl$membership]
+ }
> g <- sample_(
+   gnp(100, 2 / 100),
+   with_vertex_(size = 3, label = ""),
+   with_graph_(layout = layout_with_fr)
+ )
> giant_v <- largest_comp(g)
> V(g)$color <- "blue"
> V(g)[giant_v]$color <- "orange"
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("igraph-vs-indexing")
> ### * igraph-vs-indexing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-vs-indexing
> ### Title: Indexing vertex sequences
> ### Aliases: igraph-vs-indexing [.igraph.vs
> 
> ### ** Examples
> 
> # -----------------------------------------------------------------
> # Setting attributes for subsets of vertices
> largest_comp <- function(graph) {
+   cl <- components(graph)
+   V(graph)[which.max(cl$csize) == cl$membership]
+ }
> g <- sample_(
+   gnp(100, 2 / 100),
+   with_vertex_(size = 3, label = ""),
+   with_graph_(layout = layout_with_fr)
+ )
> giant_v <- largest_comp(g)
> V(g)$color <- "green"
> V(g)[giant_v]$color <- "red"
> plot(g)
> 
> # -----------------------------------------------------------------
> # nei() special function
> g <- make_graph(c(1, 2, 2, 3, 2, 4, 4, 2))
> V(g)[.nei(c(2, 4))]
+ 4/4 vertices, from c0f449b:
[1] 1 2 3 4
> V(g)[.nei(c(2, 4), "in")]
+ 3/4 vertices, from c0f449b:
[1] 1 2 4
> V(g)[.nei(c(2, 4), "out")]
+ 3/4 vertices, from c0f449b:
[1] 2 3 4
> 
> # -----------------------------------------------------------------
> # The same with vertex names
> g <- make_graph(~ A -+ B, B -+ C:D, D -+ B)
> V(g)[.nei(c("B", "D"))]
+ 4/4 vertices, named, from 46fc4f8:
[1] A B C D
> V(g)[.nei(c("B", "D"), "in")]
+ 3/4 vertices, named, from 46fc4f8:
[1] A B D
> V(g)[.nei(c("B", "D"), "out")]
+ 3/4 vertices, named, from 46fc4f8:
[1] B C D
> 
> # -----------------------------------------------------------------
> # Resolving attributes
> g <- make_graph(~ A -+ B, B -+ C:D, D -+ B)
> V(g)$color <- c("red", "red", "green", "green")
> V(g)[color == "red"]
+ 2/4 vertices, named, from 1278fb1:
[1] A B
> 
> # Indexing with a variable whose name matches the name of an attribute
> # may fail; use .env to force the name lookup in the parent environment
> V(g)$x <- 10:13
> x <- 2
> V(g)[.env$x]
+ 1/4 vertex, named, from 1278fb1:
[1] B
> 
> 
> 
> 
> cleanEx()
> nameEx("igraph-vs-indexing2")
> ### * igraph-vs-indexing2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph-vs-indexing2
> ### Title: Select vertices and show their metadata
> ### Aliases: igraph-vs-indexing2 [[.igraph.vs
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("color", value = "red") %>%
+   set_vertex_attr("name", value = LETTERS[1:10])
> V(g)
+ 10/10 vertices, named, from 68ec096:
 [1] A B C D E F G H I J
> V(g)[[]]
+ 10/10 vertices, named, from 68ec096:
   color name
1    red    A
2    red    B
3    red    C
4    red    D
5    red    E
6    red    F
7    red    G
8    red    H
9    red    I
10   red    J
> V(g)[1:5]
+ 5/10 vertices, named, from 68ec096:
[1] A B C D E
> V(g)[[1:5]]
+ 5/10 vertices, named, from 68ec096:
  color name
1   red    A
2   red    B
3   red    C
4   red    D
5   red    E
> 
> 
> 
> cleanEx()
> nameEx("igraph_demo")
> ### * igraph_demo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph_demo
> ### Title: Run igraph demos, step by step
> ### Aliases: igraph_demo
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> igraph_demo()
[1] "centrality" "cohesive"   "community"  "crashR"     "hrg"       
[6] "smallworld"
> if (interactive() && requireNamespace("tcltk", quietly = TRUE)) {
+   igraph_demo("centrality")
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("igraph_options")
> ### * igraph_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph_options
> ### Title: Parameters for the igraph package
> ### Aliases: igraph_options igraph_opt
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> oldval <- igraph_opt("verbose")
> igraph_options(verbose = TRUE)
> layout_with_kk(make_ring(10))
Make graph external pointer.
Materializing 'from' vector.
Materializing 'to' vector.
            [,1]         [,2]
 [1,]  1.1483519 -0.003216317
 [2,]  0.9291475  0.676715503
 [3,]  0.3521535  1.097946790
 [4,] -0.3622379  1.099581508
 [5,] -0.9411536  0.680995251
 [6,] -1.1634674  0.002073742
 [7,] -0.9442631 -0.677858079
 [8,] -0.3672691 -1.099089365
 [9,]  0.3471224 -1.100724083
[10,]  0.9260381 -0.682137826
> igraph_options(verbose = oldval)
> 
> oldval <- igraph_options(verbose = TRUE, sparsematrices = FALSE)
> make_ring(10)[]
Make graph external pointer.
Materializing 'from' vector.
Materializing 'to' vector.
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    1    0    0    0    0    0    0    0     1
 [2,]    1    0    1    0    0    0    0    0    0     0
 [3,]    0    1    0    1    0    0    0    0    0     0
 [4,]    0    0    1    0    1    0    0    0    0     0
 [5,]    0    0    0    1    0    1    0    0    0     0
 [6,]    0    0    0    0    1    0    1    0    0     0
 [7,]    0    0    0    0    0    1    0    1    0     0
 [8,]    0    0    0    0    0    0    1    0    1     0
 [9,]    0    0    0    0    0    0    0    1    0     1
[10,]    1    0    0    0    0    0    0    0    1     0
> igraph_options(oldval)
> igraph_opt("verbose")
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("igraph_version")
> ### * igraph_version
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: igraph_version
> ### Title: Query igraph's version string
> ### Aliases: igraph_version
> ### Keywords: graphs internal
> 
> ### ** Examples
> 
> 
> ## Compare to the package version
> packageDescription("igraph")$Version
[1] "2.1.2"
> igraph_version()
[1] "2.1.2"
> 
> 
> 
> 
> cleanEx()
> nameEx("incident")
> ### * incident
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: incident
> ### Title: Incident edges of a vertex in a graph
> ### Aliases: incident
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> incident(g, 1)
+ 16/78 edges from 7b8d2d7:
 [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--11 1--12 1--13 1--14
[13] 1--18 1--20 1--22 1--32
> incident(g, 34)
+ 17/78 edges from 7b8d2d7:
 [1]  9--34 10--34 14--34 15--34 16--34 19--34 20--34 21--34 23--34 24--34
[11] 27--34 28--34 29--34 30--34 31--34 32--34 33--34
> 
> 
> 
> cleanEx()
> nameEx("incident_edges")
> ### * incident_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: incident_edges
> ### Title: Incident edges of multiple vertices in a graph
> ### Aliases: incident_edges
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> incident_edges(g, c(1, 34))
[[1]]
+ 16/78 edges from c43d3df:
 [1] 1-- 2 1-- 3 1-- 4 1-- 5 1-- 6 1-- 7 1-- 8 1-- 9 1--11 1--12 1--13 1--14
[13] 1--18 1--20 1--22 1--32

[[2]]
+ 17/78 edges from c43d3df:
 [1]  9--34 10--34 14--34 15--34 16--34 19--34 20--34 21--34 23--34 24--34
[11] 27--34 28--34 29--34 30--34 31--34 32--34 33--34

> 
> 
> 
> cleanEx()
> nameEx("intersection.igraph")
> ### * intersection.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intersection.igraph
> ### Title: Intersection of graphs
> ### Aliases: intersection.igraph %s%
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Common part of two social networks
> net1 <- graph_from_literal(
+   D - A:B:F:G, A - C - F - A, B - E - G - B, A - B, F - G,
+   H - F:G, H - I - J
+ )
> net2 <- graph_from_literal(D - A:F:Y, B - A - X - F - H - Z, F - Y)
> print_all(net1 %s% net2)
IGRAPH 998e1d9 UN-- 13 4 -- 
+ attr: name (v/c)
+ vertex attributes:
|      name
| [1]     D
| [2]     A
| [3]     B
| [4]     F
| [5]     G
| [6]     C
| [7]     E
| [8]     H
| [9]     I
| [10]    J
| [11]    Y
| [12]    X
| [13]    Z
+ edges from 998e1d9 (vertex names):
[1] F--H A--B D--F D--A
> 
> 
> 
> cleanEx()
> nameEx("intersection.igraph.es")
> ### * intersection.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intersection.igraph.es
> ### Title: Intersection of edge sequences
> ### Aliases: intersection.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> intersection(E(g)[1:6], E(g)[5:9])
+ 2/10 edges from a4c0a33 (vertex names):
[1] E--F F--G
> 
> 
> 
> cleanEx()
> nameEx("intersection.igraph.vs")
> ### * intersection.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intersection.igraph.vs
> ### Title: Intersection of vertex sequences
> ### Aliases: intersection.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> intersection(E(g)[1:6], E(g)[5:9])
+ 2/10 edges from 6949051 (vertex names):
[1] E--F F--G
> 
> 
> 
> cleanEx()
> nameEx("is_acyclic")
> ### * is_acyclic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_acyclic
> ### Title: Acyclic graphs
> ### Aliases: is_acyclic
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph(c(1,2, 1,3, 2,4, 3,4), directed = TRUE)
> is_acyclic(g)
[1] TRUE
> is_acyclic(as_undirected(g))
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is_biconnected")
> ### * is_biconnected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_biconnected
> ### Title: Check biconnectedness
> ### Aliases: is_biconnected
> ### Keywords: graphs
> 
> ### ** Examples
> 
> is_biconnected(make_graph("bull"))
[1] FALSE
> is_biconnected(make_graph("dodecahedron"))
[1] TRUE
> is_biconnected(make_full_graph(1))
[1] FALSE
> is_biconnected(make_full_graph(2))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_chordal")
> ### * is_chordal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_chordal
> ### Title: Chordality of a graph
> ### Aliases: is_chordal
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## The examples from the Tarjan-Yannakakis paper
> g1 <- graph_from_literal(
+   A - B:C:I, B - A:C:D, C - A:B:E:H, D - B:E:F,
+   E - C:D:F:H, F - D:E:G, G - F:H, H - C:E:G:I,
+   I - A:H
+ )
> max_cardinality(g1)
$alpha
[1] 9 4 6 8 3 5 7 2 1

$alpham1
+ 9/9 vertices, named, from 6287329:
[1] G F D B E C H I A

> is_chordal(g1, fillin = TRUE)
$chordal
[1] FALSE

$fillin
 [1] 2 6 8 7 5 7 2 7 6 1 7 1

$newgraph
NULL

> 
> g2 <- graph_from_literal(
+   A - B:E, B - A:E:F:D, C - E:D:G, D - B:F:E:C:G,
+   E - A:B:C:D:F, F - B:D:E, G - C:D:H:I, H - G:I:J,
+   I - G:H:J, J - H:I
+ )
> max_cardinality(g2)
$alpha
 [1] 10  8  9  6  7  5  4  2  3  1

$alpham1
+ 10/10 vertices, named, from 18b59b5:
 [1] J H I G C F D B E A

> is_chordal(g2, fillin = TRUE)
$chordal
[1] TRUE

$fillin
numeric(0)

$newgraph
NULL

> 
> 
> 
> 
> cleanEx()
> nameEx("is_dag")
> ### * is_dag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_dag
> ### Title: Directed acyclic graphs
> ### Aliases: is_dag
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(10)
> is_dag(g)
[1] TRUE
> g2 <- g + edge(5, 1)
> is_dag(g2)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is_degseq")
> ### * is_degseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_degseq
> ### Title: Check if a degree sequence is valid for a multi-graph
> ### Aliases: is_degseq
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- sample_gnp(100, 2 / 100)
> is_degseq(degree(g))
[1] TRUE
> is_graphical(degree(g))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_directed")
> ### * is_directed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_directed
> ### Title: Check whether a graph is directed
> ### Aliases: is_directed
> 
> ### ** Examples
> 
> g <- make_ring(10)
> is_directed(g)
[1] FALSE
> 
> g2 <- make_ring(10, directed = TRUE)
> is_directed(g2)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_forest")
> ### * is_forest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_forest
> ### Title: Decide whether a graph is a forest.
> ### Aliases: is_forest
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(3) + make_tree(5,3)
> is_forest(g)
[1] TRUE
> is_forest(g, details = TRUE)
$res
[1] TRUE

$roots
+ 2/8 vertices, from 3e506d4:
[1] 1 4

> 
> 
> 
> 
> cleanEx()
> nameEx("is_graphical")
> ### * is_graphical
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_graphical
> ### Title: Is a degree sequence graphical?
> ### Aliases: is_graphical
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- sample_gnp(100, 2 / 100)
> is_degseq(degree(g))
[1] TRUE
> is_graphical(degree(g))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("is_igraph")
> ### * is_igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_igraph
> ### Title: Is this object an igraph graph?
> ### Aliases: is_igraph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> is_igraph(g)
[1] TRUE
> is_igraph(numeric(10))
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("is_min_separator")
> ### * is_min_separator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_min_separator
> ### Title: Minimal vertex separators
> ### Aliases: is_min_separator
> 
> ### ** Examples
> 
> # The graph from the Moody-White paper
> mw <- graph_from_literal(
+   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,
+   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,
+   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,
+   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,
+   21 - 22:23, 22 - 23
+ )
> 
> # Cohesive subgraphs
> mw1 <- induced_subgraph(mw, as.character(c(1:7, 17:23)))
> mw2 <- induced_subgraph(mw, as.character(7:16))
> mw3 <- induced_subgraph(mw, as.character(17:23))
> mw4 <- induced_subgraph(mw, as.character(c(7, 8, 11, 14)))
> mw5 <- induced_subgraph(mw, as.character(1:7))
> 
> check.sep <- function(G) {
+   sep <- min_separators(G)
+   sapply(sep, is_min_separator, graph = G)
+ }
> 
> check.sep(mw)
[1] TRUE
> check.sep(mw1)
[1] TRUE TRUE TRUE TRUE
> check.sep(mw2)
[1] TRUE TRUE TRUE
> check.sep(mw3)
[1] TRUE
> check.sep(mw4)
[1] FALSE FALSE FALSE FALSE
> check.sep(mw5)
[1] TRUE TRUE TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_named")
> ### * is_named
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_named
> ### Title: Named graphs
> ### Aliases: is_named
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> is_named(g)
[1] FALSE
> V(g)$name <- letters[1:10]
> is_named(g)
[1] TRUE
> neighbors(g, "a")
+ 2/10 vertices, named, from 22c033c:
[1] b j
> 
> 
> 
> 
> cleanEx()
> nameEx("is_separator")
> ### * is_separator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_separator
> ### Title: Check whether removing this set of vertices would disconnect the
> ###   graph.
> ### Aliases: is_separator
> 
> ### ** Examples
> 
> ring <- make_ring(4)
> min_st_separators(ring)
[[1]]
+ 2/4 vertices, from 9b8d91a:
[1] 2 4

[[2]]
+ 2/4 vertices, from 9b8d91a:
[1] 1 3

> is_separator(ring, 1)
[1] FALSE
> is_separator(ring, c(1, 3))
[1] TRUE
> is_separator(ring, c(2, 4))
[1] TRUE
> is_separator(ring, c(2, 3))
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("is_tree")
> ### * is_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_tree
> ### Title: Decide whether a graph is a tree.
> ### Aliases: is_tree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(7, 2)
> is_tree(g)
[1] TRUE
> is_tree(g, details = TRUE)
$res
[1] TRUE

$root
+ 1/7 vertex, from e7cd435:
[1] 1

> 
> 
> 
> 
> cleanEx()
> nameEx("is_weighted")
> ### * is_weighted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_weighted
> ### Title: Weighted graphs
> ### Aliases: is_weighted
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> shortest_paths(g, 8, 2)
$vpath
$vpath[[1]]
+ 5/10 vertices, from 9a5acc9:
[1]  8  9 10  1  2


$epath
NULL

$predecessors
NULL

$inbound_edges
NULL

> E(g)$weight <- seq_len(ecount(g))
> shortest_paths(g, 8, 2)
$vpath
$vpath[[1]]
+ 7/10 vertices, from 9a5acc9:
[1] 8 7 6 5 4 3 2


$epath
NULL

$predecessors
NULL

$inbound_edges
NULL

> 
> 
> 
> 
> cleanEx()
> nameEx("isomorphic")
> ### * isomorphic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isomorphic
> ### Title: Decide if two graphs are isomorphic
> ### Aliases: isomorphic graph.isomorphic graph.isomorphic.34
> ###   graph.isomorphic.vf2 graph.isomorphic.bliss is_isomorphic_to
> 
> ### ** Examples
> 
> # create some non-isomorphic graphs
> g1 <- graph_from_isomorphism_class(3, 10)
> g2 <- graph_from_isomorphism_class(3, 11)
> isomorphic(g1, g2)
[1] FALSE
> 
> # create two isomorphic graphs, by permuting the vertices of the first
> g1 <- sample_pa(30, m = 2, directed = FALSE)
> g2 <- permute(g1, sample(vcount(g1)))
> # should be TRUE
> isomorphic(g1, g2)
[1] TRUE
> isomorphic(g1, g2, method = "bliss")
[1] TRUE
> isomorphic(g1, g2, method = "vf2")
[1] TRUE
> 
> # colored graph isomorphism
> g1 <- make_ring(10)
> g2 <- make_ring(10)
> isomorphic(g1, g2)
[1] TRUE
> 
> V(g1)$color <- rep(1:2, length = vcount(g1))
> V(g2)$color <- rep(2:1, length = vcount(g2))
> # consider colors by default
> count_isomorphisms(g1, g2)
[1] 10
> # ignore colors
> count_isomorphisms(g1, g2,
+   vertex.color1 = NULL,
+   vertex.color2 = NULL
+ )
[1] 20
> 
> 
> 
> cleanEx()
> nameEx("isomorphism_class")
> ### * isomorphism_class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isomorphism_class
> ### Title: Isomorphism class of a graph
> ### Aliases: isomorphism_class graph.isoclass graph.isoclass.subgraph
> 
> ### ** Examples
> 
> # create some non-isomorphic graphs
> g1 <- graph_from_isomorphism_class(3, 10)
> g2 <- graph_from_isomorphism_class(3, 11)
> isomorphism_class(g1)
[1] 10
> isomorphism_class(g2)
[1] 11
> isomorphic(g1, g2)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("ivs")
> ### * ivs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ivs
> ### Title: Independent vertex sets
> ### Aliases: ivs largest_ivs max_ivs ivs_size independence_number
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Do not run, takes a couple of seconds
> 
> # A quite dense graph
> set.seed(42)
> g <- sample_gnp(100, 0.9)
> ivs_size(g)
[1] 4
> ivs(g, min = ivs_size(g))
[[1]]
+ 4/100 vertices, from 059eb14:
[1]  7 37 55 56

[[2]]
+ 4/100 vertices, from 059eb14:
[1]  7 55 56 69

[[3]]
+ 4/100 vertices, from 059eb14:
[1]  7 56 69 74

[[4]]
+ 4/100 vertices, from 059eb14:
[1]  8 15 73 80

[[5]]
+ 4/100 vertices, from 059eb14:
[1]  8 15 73 84

[[6]]
+ 4/100 vertices, from 059eb14:
[1] 13 16 37 40

[[7]]
+ 4/100 vertices, from 059eb14:
[1] 21 32 45 61

[[8]]
+ 4/100 vertices, from 059eb14:
[1] 22 55 56 64

[[9]]
+ 4/100 vertices, from 059eb14:
[1] 23 69 75 90

> largest_ivs(g)
[[1]]
+ 4/100 vertices, from 059eb14:
[1] 21 32 45 61

[[2]]
+ 4/100 vertices, from 059eb14:
[1]  7 37 55 56

[[3]]
+ 4/100 vertices, from 059eb14:
[1]  7 55 56 69

[[4]]
+ 4/100 vertices, from 059eb14:
[1]  7 56 69 74

[[5]]
+ 4/100 vertices, from 059eb14:
[1]  8 15 73 80

[[6]]
+ 4/100 vertices, from 059eb14:
[1]  8 15 73 84

[[7]]
+ 4/100 vertices, from 059eb14:
[1] 22 55 56 64

[[8]]
+ 4/100 vertices, from 059eb14:
[1] 23 69 75 90

[[9]]
+ 4/100 vertices, from 059eb14:
[1] 13 16 37 40

> # Empty graph
> induced_subgraph(g, largest_ivs(g)[[1]])
IGRAPH 6d3c082 U--- 4 0 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edges from 6d3c082:
> 
> length(max_ivs(g))
[1] 326
> 
> 
> 
> cleanEx()
> nameEx("keeping_degseq")
> ### * keeping_degseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keeping_degseq
> ### Title: Graph rewiring while preserving the degree distribution
> ### Aliases: keeping_degseq
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- make_ring(10)
> g %>%
+   rewire(keeping_degseq(niter = 20)) %>%
+   degree()
 [1] 2 2 2 2 2 2 2 2 2 2
> print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
IGRAPH f75d296 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ graph attributes:
| + name:
|   [1] "Ring graph"
| + mutual:
|   [1] FALSE
| + circular:
|   [1] TRUE
+ edges from f75d296:
 [1] 7-- 9 1-- 4 2-- 6 3-- 8 5--10 2-- 3 6-- 7 4--10 8-- 9 1-- 5
> 
> 
> 
> cleanEx()
> nameEx("knn")
> ### * knn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: knn
> ### Title: Average nearest neighbor degree
> ### Aliases: knn
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Some trivial ones
> g <- make_ring(10)
> knn(g)
$knn
 [1] 2 2 2 2 2 2 2 2 2 2

$knnk
[1] NaN   2

> g2 <- make_star(10)
> knn(g2)
$knn
 [1] 1 9 9 9 9 9 9 9 9 9

$knnk
[1]   9 NaN NaN NaN NaN NaN NaN NaN   1

> 
> # A scale-free one, try to plot 'knnk'
> g3 <- sample_pa(1000, m = 5)
> knn(g3)
$knn
   [1]  14.13429  13.38272  17.45522  14.71613  13.68362  17.65315  15.05804
   [8]  25.81395  15.88991  60.75862  30.48571 102.93750  30.10145 204.28571
  [15]  50.27273 210.00000  42.16279  42.00000  32.85106  37.72973 132.91667
  [22] 104.50000  40.65714  40.08333 208.20000  27.85455  90.50000 140.33333
  [29] 208.16667  91.33333  33.26190  53.24242  55.53571  89.78571  36.53488
  [36]  32.39535  38.66667  41.44444  49.70588 137.70000 113.37500  44.78261
  [43] 200.00000 108.88889  33.08889 194.20000  61.03571 111.41667  36.88235
  [50] 109.87500 258.00000 127.70000 101.42857  42.90625 194.50000  56.32000
  [57]  42.29630  78.44444  72.07692  54.00000  80.09091  47.48148 106.61538
  [64]  59.51724 117.90909 116.81818  72.36364  76.53333  86.35714  47.55556
  [71]  31.40000  63.00000  73.13333 109.54545 177.00000  88.33333  34.11765
  [78]  97.30000  66.42105 119.00000 252.80000 120.36364 135.12500 131.83333
  [85] 157.37500  75.90000 118.16667  44.38889  51.20000  49.76190 124.54545
  [92]  49.64706 268.40000  59.00000 233.80000 183.87500  73.66667 111.87500
  [99] 121.58333  69.81818 142.75000  83.50000  30.25000 219.00000 109.90909
 [106] 208.80000 122.00000  56.50000  56.38462  79.85714  60.22222  14.53333
 [113] 235.42857  87.33333 226.20000 162.00000 130.60000 194.33333 115.25000
 [120]  71.30000  97.07143  78.11111  97.25000  70.50000  41.83333  90.40000
 [127]  27.59091 103.80000  33.12500 277.20000 101.15385  64.90000 102.87500
 [134]  75.62500 107.50000  53.07143  63.25000 105.25000 167.66667  55.61538
 [141]  93.25000 170.88889 121.83333 167.42857 104.88889 128.42857  23.28571
 [148]  61.33333 184.00000  87.07692  96.62500  48.73913 100.57143 106.28571
 [155] 129.77778  59.18750  67.75000 133.87500 178.83333  72.00000  31.36000
 [162]  82.66667  40.88889 267.00000  56.23529 178.40000 108.14286 156.00000
 [169] 165.00000  58.60000  42.69231 252.00000  65.71429  97.00000 105.30000
 [176] 162.83333  69.36364 252.80000 204.71429 196.20000 148.40000 191.20000
 [183]  65.90000  50.70000 143.72727 238.16667  69.73333 337.40000 148.28571
 [190]  91.87500 107.14286  93.77778 140.00000 121.40000 157.16667  32.00000
 [197] 162.40000 105.40000 219.00000 114.40000 111.00000 124.14286  60.40000
 [204] 142.20000 181.50000 169.16667 131.62500 133.40000  90.30000 219.60000
 [211] 164.66667 186.80000  77.11111 100.40000 106.81818  58.06667 113.16667
 [218] 132.42857 157.20000 107.37500 126.50000 205.20000 193.40000  71.38462
 [225] 154.16667  35.78571 250.00000 110.12500  97.57143 137.71429 114.33333
 [232] 164.50000 161.50000 144.00000 179.00000  86.68750  78.83333 153.11111
 [239] 132.87500 218.00000  82.60000  79.93333 207.00000 194.00000 116.50000
 [246] 114.83333  38.84615  48.14286 113.81818  84.90000 141.00000  99.40000
 [253] 190.37500 138.66667 230.80000  74.33333 153.16667  95.60000 221.20000
 [260] 193.00000 116.20000  69.20000 131.20000 197.80000 168.66667 235.80000
 [267]  41.61538  89.00000 115.20000 200.40000  98.30000  52.40909  65.63636
 [274] 101.33333 206.33333  90.00000 238.00000 161.20000 164.60000 177.66667
 [281] 155.00000 102.40000 130.83333 119.00000  94.00000  61.80000  92.11111
 [288] 233.40000 215.80000  70.22222 119.20000 114.37500  99.57143  86.28571
 [295] 114.20000 259.60000 126.66667 127.85714 124.80000 110.60000 200.80000
 [302]  57.22222 230.00000  94.66667 142.37500  25.00000 176.16667 145.60000
 [309]  70.66667 143.71429 115.00000  45.42857 128.50000 131.33333 113.66667
 [316]  90.33333 181.66667  55.75000 132.12500  75.66667 113.00000 111.57143
 [323]  35.55556  64.33333 214.00000 277.40000 151.71429 253.00000 125.00000
 [330]  99.75000  87.33333  72.00000 189.00000 187.66667  67.37500 110.71429
 [337] 148.33333 130.00000  99.00000  96.62500  84.00000 147.14286  45.10000
 [344]  89.00000  54.00000 187.16667 152.20000  98.60000 312.20000 131.12500
 [351] 132.40000  70.28571  80.81818  41.64286  68.00000 211.40000  65.42857
 [358] 165.60000  71.83333  50.62500 118.42857 166.25000  84.80000 159.71429
 [365]  98.50000 290.80000 143.40000 173.20000 229.20000 125.20000 154.60000
 [372]  40.88889  93.66667 122.33333  19.20000 202.60000 216.20000  19.16667
 [379]  69.77778 131.66667  78.28571 188.85714 103.83333 192.28571  54.23077
 [386]  72.16667  68.25000 169.60000 140.20000 259.40000  77.50000 147.60000
 [393] 207.60000 140.80000 152.80000 193.28571 154.20000 154.14286 110.60000
 [400]  76.80000 133.60000 104.33333 134.71429  55.83333 205.00000 215.60000
 [407]  76.00000 145.83333 142.83333 202.16667 225.83333 177.20000 161.85714
 [414] 186.33333 168.83333 135.80000 192.80000 194.20000 176.00000  76.33333
 [421]  55.60000 151.40000 140.33333  49.50000  89.40000  90.33333 164.60000
 [428]  54.37500 131.83333  50.27273 144.00000 222.00000 175.80000 102.83333
 [435] 145.80000 151.40000 179.37500 148.20000 115.80000 144.40000 143.16667
 [442]  52.33333 104.60000 180.00000  78.20000 179.66667 103.60000 245.80000
 [449] 128.00000  87.28571  98.60000 176.00000 204.50000 183.00000 264.80000
 [456] 185.40000 268.40000 178.71429 202.00000 107.40000  96.33333  75.80000
 [463]  97.28571 104.80000 161.20000 106.33333  68.28571 144.50000 186.20000
 [470] 158.80000  89.00000 147.00000 213.00000 127.42857 138.20000  10.66667
 [477]  45.66667 132.00000  69.00000  81.20000  50.57143  61.12500  86.87500
 [484] 127.00000 126.85714 161.25000 176.50000 164.00000  59.50000  70.33333
 [491]  45.70000  90.57143  56.66667  19.80000  71.55556 106.20000  78.20000
 [498] 124.60000 134.00000 141.00000 107.33333 227.80000 172.00000 129.33333
 [505] 184.80000 174.00000  97.60000 191.40000  80.00000 143.40000 129.00000
 [512]  97.16667 121.20000 129.80000  87.16667 186.00000  66.60000 102.66667
 [519] 141.60000 128.20000 159.40000  59.85714  20.00000  71.60000 163.40000
 [526] 102.83333  82.12500 159.80000 128.16667 170.33333 112.88889  86.20000
 [533] 154.40000 182.00000 113.80000 215.00000 160.12500 227.80000 203.50000
 [540] 123.20000 100.60000  99.00000 256.60000 150.20000 207.60000 146.00000
 [547]  85.40000 153.00000 221.16667 153.20000 206.80000  51.50000 228.16667
 [554] 216.00000 133.80000 107.28571  92.80000 104.50000 199.33333  98.62500
 [561] 171.87500 131.40000 151.40000 119.60000 114.40000  70.20000 143.20000
 [568] 217.83333 187.80000 265.60000 100.16667  80.66667 104.83333  14.66667
 [575]  68.20000  84.00000 123.50000 125.85714 180.00000 139.80000  62.00000
 [582] 138.60000 101.00000 129.66667 167.50000  44.00000 175.00000 103.60000
 [589] 127.00000  17.40000  67.25000 124.16667 112.60000 178.66667 213.20000
 [596] 160.40000  84.50000 217.20000 111.16667 168.60000  87.40000 147.00000
 [603] 174.00000  56.25000  59.66667 165.37500 106.20000 105.20000 109.66667
 [610] 104.80000 217.33333 206.40000 105.40000 147.20000  89.50000 261.40000
 [617] 111.87500 239.60000  88.60000  49.66667 133.00000  16.80000 106.40000
 [624] 219.20000  87.60000  69.00000 178.40000  88.60000  92.40000 116.85714
 [631] 166.80000  82.14286  64.16667 102.66667  92.20000  65.83333  73.66667
 [638] 170.20000 218.00000 133.16667 202.00000  45.25000 122.66667 121.42857
 [645] 101.42857 122.80000  77.60000  76.00000  99.60000  68.80000 148.40000
 [652]  88.40000 188.60000  38.60000 133.60000  81.50000 140.80000 179.20000
 [659] 240.20000 188.00000  99.80000 162.60000  35.80000  11.66667 164.20000
 [666]  14.60000 145.00000  68.57143 144.20000  81.00000 123.20000 229.40000
 [673] 194.00000  66.71429 174.16667 240.60000 164.40000  99.00000  15.40000
 [680]  63.00000 262.00000  98.20000 238.00000 131.40000 276.80000  85.20000
 [687] 201.60000 113.42857  59.00000 227.66667  75.20000  78.80000 138.40000
 [694] 235.80000 156.40000  60.60000  41.60000  85.80000 232.80000  32.40000
 [701] 181.80000 130.20000  63.71429   9.80000  60.45455 135.20000  68.57143
 [708]  45.14286 259.40000 157.80000 128.60000  26.33333  53.80000 161.00000
 [715] 185.80000 144.20000 149.60000 131.00000 222.40000 136.00000 137.40000
 [722] 124.50000 272.20000 155.00000  95.40000 171.40000  88.80000 130.00000
 [729] 117.83333 184.20000  87.00000  98.00000  49.33333 117.33333  91.00000
 [736]  79.66667  20.16667 110.60000 328.20000 138.50000  43.33333 194.60000
 [743]  59.40000  72.80000  66.66667  95.00000  55.50000 165.00000 238.20000
 [750] 171.20000  95.60000 206.40000  51.80000 111.57143 267.40000 127.20000
 [757] 200.00000  99.00000  89.28571 169.66667 118.20000  87.25000 174.80000
 [764] 128.40000  89.80000 119.40000  88.60000 149.40000 160.50000 161.60000
 [771] 167.20000 163.40000 146.20000  97.16667 130.80000 162.60000  89.80000
 [778] 207.40000  20.40000 199.00000 103.66667 228.60000 208.60000 138.33333
 [785] 209.40000 155.20000 190.40000 165.60000  85.80000 112.40000 201.80000
 [792] 155.60000 157.80000 127.20000 162.00000 113.60000 162.33333  94.60000
 [799] 270.20000 223.60000  95.20000 148.20000  57.71429 169.60000 162.20000
 [806] 136.80000 121.83333  85.66667 165.80000 194.00000 170.40000  28.60000
 [813] 128.20000 100.80000 201.20000  16.40000 292.60000 209.80000 129.00000
 [820] 189.40000 155.80000  65.60000 114.80000 179.50000  59.60000  14.20000
 [827] 188.40000 153.00000 217.00000 146.40000  69.80000 195.60000 148.20000
 [834]  86.40000  94.80000 162.80000  41.37500  11.60000 122.20000  72.00000
 [841] 244.60000 112.83333 145.40000 189.40000 205.60000 163.80000 112.28571
 [848]  94.00000  89.60000 235.20000 137.00000 163.00000 130.40000  97.80000
 [855] 168.00000  57.00000 110.83333 105.20000 138.42857 143.66667 171.20000
 [862] 228.60000 188.60000  92.40000 159.80000 128.40000 128.40000  80.80000
 [869] 179.20000 197.40000 115.40000  79.40000 104.20000 122.80000 138.20000
 [876] 159.80000 144.20000 141.40000 199.80000 129.60000 219.40000 148.60000
 [883]  85.20000  71.33333   8.40000 131.20000 110.60000 165.40000  90.20000
 [890] 204.60000 248.20000 134.40000 225.40000  84.00000 129.57143  56.00000
 [897]  60.20000  98.60000 207.20000  59.71429  97.60000 127.60000 115.00000
 [904] 119.40000 130.00000 100.80000 196.20000 268.60000  68.20000 171.20000
 [911]  87.00000  99.40000  27.60000  85.00000 194.20000 244.40000 132.20000
 [918] 130.80000  56.00000  17.00000  73.20000  96.00000 167.40000  53.00000
 [925] 123.40000  99.00000 123.80000 159.80000  29.20000 230.40000  59.80000
 [932]  17.00000 198.80000 133.00000 212.40000 142.20000 143.60000 147.00000
 [939]  22.80000 217.40000 144.60000 222.40000  89.20000 107.20000  90.20000
 [946]  69.60000 104.40000 148.80000  76.60000 125.20000  75.40000  95.60000
 [953] 161.60000  15.20000 166.40000  57.40000 141.40000  32.80000 163.80000
 [960]  67.00000  61.20000  90.80000  96.40000 161.40000  87.80000 173.60000
 [967] 174.60000  99.00000  73.20000  58.20000 212.20000  90.20000  27.40000
 [974] 141.00000 152.80000 133.40000 214.60000 154.40000 154.00000 137.20000
 [981]  86.20000  10.20000  81.80000 110.00000  57.40000 138.40000 152.80000
 [988]  15.00000 250.00000 174.60000  13.00000  27.80000 129.20000 219.60000
 [995] 216.00000 132.40000  84.60000 126.60000  62.00000  83.80000

$knnk
  [1]       NaN       NaN       NaN       NaN 144.57553 128.43789 116.62454
  [8] 106.90625  87.02667  85.27931  97.32121  75.92262  68.64336  75.66883
 [15]  68.45000  81.10938  48.11765  68.59722  66.42105  68.15000  61.71429
 [22]  58.11364  46.76087  33.12500  43.84000  41.61538  47.83333  48.94048
 [29]  60.13793       NaN       NaN  42.90625  51.75758  34.11765  36.02857
 [36]       NaN  37.72973       NaN       NaN       NaN  42.00000  35.96429
 [43]  37.03101       NaN  37.26667       NaN  32.85106  40.08333       NaN
 [50]       NaN       NaN       NaN       NaN       NaN  27.85455       NaN
 [57]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
 [64]       NaN       NaN       NaN       NaN       NaN  30.10145  30.48571
 [71]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
 [78]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
 [85]       NaN  25.81395       NaN       NaN       NaN       NaN       NaN
 [92]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
 [99]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[106]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[113]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[120]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[127]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[134]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[141]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[148]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[155]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[162]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[169]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[176]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[183]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[190]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[197]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[204]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[211]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[218]  15.88991       NaN       NaN       NaN  17.65315       NaN  15.05804
[225]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[232]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[239]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[246]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[253]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[260]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[267]       NaN  17.45522       NaN       NaN       NaN       NaN       NaN
[274]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[281]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[288]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[295]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[302]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[309]       NaN  14.71613       NaN       NaN       NaN       NaN       NaN
[316]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[323]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[330]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[337]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[344]       NaN       NaN       NaN       NaN       NaN       NaN  14.13429
[351]       NaN       NaN       NaN  13.68362       NaN       NaN       NaN
[358]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[365]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[372]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[379]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[386]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[393]       NaN       NaN       NaN       NaN       NaN       NaN       NaN
[400]       NaN       NaN       NaN       NaN       NaN  13.38272

> 
> # A random graph
> g4 <- sample_gnp(1000, p = 5 / 1000)
> knn(g4)
$knn
   [1]  6.444444  6.200000  7.000000  6.500000  6.500000  6.500000  8.000000
   [8]  5.000000  6.500000  5.400000  6.666667  6.166667  4.400000  5.777778
  [15]  6.500000  7.333333  6.875000  6.200000  5.500000  4.750000  7.285714
  [22]  7.285714  5.200000  5.666667  3.000000  6.500000  2.750000  6.666667
  [29]  3.833333  6.200000  6.428571  6.200000  6.400000  5.666667  8.000000
  [36]  7.333333  7.375000  6.000000  6.000000  5.285714  4.800000  5.000000
  [43]  6.285714  7.200000  4.666667  7.000000  5.000000  5.166667  5.333333
  [50]  6.750000  6.750000  5.000000  6.200000  5.500000  5.750000  8.000000
  [57]  5.500000  6.166667  8.500000  7.200000  4.666667  4.333333  6.333333
  [64]  6.250000  5.500000  6.750000  7.166667  6.000000  6.000000  8.000000
  [71]  5.000000  5.333333  6.000000  6.000000  5.200000  4.750000  6.200000
  [78]  8.666667  6.000000  6.500000  4.500000  4.000000  4.666667  7.833333
  [85]  7.142857  5.285714  7.333333  7.500000  5.857143  6.714286  3.000000
  [92]  5.500000  6.166667  4.750000  7.000000  6.714286  5.428571  5.200000
  [99]  5.333333  6.333333  6.666667  3.000000  5.200000  8.000000  5.666667
 [106]  5.250000  5.666667  8.666667  6.666667  7.666667  3.000000  3.500000
 [113]  6.625000  6.750000       NaN  5.500000  6.428571  4.666667  6.400000
 [120]  3.500000  5.285714  6.636364  8.000000  6.500000  5.833333  6.625000
 [127]  6.500000  7.000000  4.600000  7.750000  5.500000  6.250000  9.800000
 [134]  4.000000  5.800000  5.777778  7.666667  4.400000  7.000000  7.750000
 [141]  5.857143  9.000000  4.500000  7.000000  5.333333  7.428571  5.714286
 [148]  6.500000  7.800000  6.666667  4.333333  6.000000  5.400000  6.000000
 [155]  6.500000  6.230769  5.500000  4.000000  6.000000  5.750000  7.000000
 [162]  5.666667  6.800000  7.500000  5.000000  7.428571  7.333333  6.500000
 [169]  6.000000  4.000000  7.571429  6.600000  6.000000  6.000000  6.666667
 [176]  6.285714  4.250000  5.000000  8.200000  5.666667  5.500000  5.333333
 [183]  6.200000  6.200000  8.000000  5.833333  7.500000  6.375000  6.000000
 [190]  5.666667  7.200000  6.400000  5.333333  5.625000  6.250000  7.333333
 [197]  4.600000  6.400000  6.125000  5.800000  6.750000  5.428571  7.125000
 [204]  5.200000  6.750000  5.000000  6.428571  6.500000  7.333333  5.333333
 [211]  6.272727  6.166667  4.500000  5.000000  6.333333  5.000000  6.333333
 [218]  8.000000  5.250000  5.500000  5.600000  4.555556  7.250000  7.400000
 [225]  6.400000  4.166667  6.250000  5.750000  7.500000  6.000000  5.000000
 [232]  6.857143  6.625000  7.000000  5.750000  4.000000  6.750000  6.750000
 [239]  5.000000  7.000000  4.000000  5.666667  6.400000  8.000000  6.285714
 [246]  5.166667  5.250000  6.333333  4.666667  8.000000  5.000000  5.166667
 [253]  4.500000  4.800000  6.333333  5.285714  5.666667  5.909091  6.000000
 [260]  5.333333  6.400000  6.750000  6.000000  6.750000  8.000000  6.333333
 [267]  5.125000  6.000000  6.800000  4.200000  7.400000  6.875000  7.250000
 [274]  4.800000  6.000000  6.166667  5.750000  6.166667  6.500000  8.166667
 [281]  8.000000  6.500000  6.666667  6.500000  8.500000  6.181818  7.000000
 [288]  6.600000  5.333333  5.714286  6.000000  7.000000  6.000000  7.400000
 [295]  6.714286  7.250000  5.400000  6.285714  5.600000  4.500000  5.500000
 [302]  4.000000  7.250000  6.166667  5.666667  5.428571  8.000000  5.333333
 [309]  7.333333  5.500000  6.750000  7.142857  5.600000  6.000000  5.833333
 [316]  5.571429  5.600000  4.200000  7.333333  5.800000  5.000000  8.000000
 [323]  5.000000  6.428571  6.000000  4.250000  7.000000  6.000000  6.500000
 [330]  5.750000  5.500000  6.250000  6.333333  6.400000  5.250000  4.666667
 [337]  4.500000  6.250000  7.166667  5.888889  5.600000  5.250000  6.666667
 [344]  5.333333  6.000000  6.250000  4.800000  6.375000  4.571429  5.833333
 [351]  6.000000  6.333333  7.666667  5.571429  6.166667  7.333333  5.400000
 [358]  6.000000  6.571429  6.833333  4.500000  5.666667  6.000000  5.166667
 [365]  5.500000  5.857143  6.250000  5.750000  6.428571  6.600000  8.250000
 [372]  5.833333  5.875000  6.857143  6.000000  4.666667  3.500000  7.200000
 [379]  7.000000  5.571429  7.666667  5.600000  6.250000  8.000000  5.000000
 [386]  7.000000  7.285714  7.000000  5.000000  6.000000  5.636364  6.250000
 [393]  7.000000  6.200000  5.333333  8.000000  8.000000  6.875000  7.500000
 [400]  6.750000  4.000000  5.500000  6.166667  6.000000  6.750000  7.428571
 [407]  6.333333  6.125000  5.800000  5.000000  6.000000  6.166667  8.000000
 [414]  5.750000  5.666667  5.500000  6.555556  6.666667  8.600000  7.333333
 [421]  6.375000  6.000000  6.100000  7.000000  4.000000  6.571429  6.714286
 [428]  4.875000  6.428571  6.333333  5.000000  7.000000  6.800000  5.125000
 [435]  4.000000  6.571429  6.375000  8.333333  5.500000  6.750000  5.857143
 [442]  6.000000  6.750000  5.600000  5.000000  5.000000  6.333333  6.600000
 [449]  7.666667  7.333333  7.200000  6.000000  5.333333  6.833333  4.800000
 [456]  7.750000  4.500000  7.500000  5.500000  7.000000  5.750000  5.333333
 [463]  6.750000  6.250000  6.166667  6.200000  5.833333  5.125000  5.625000
 [470]  5.714286  7.666667  5.250000  4.000000  5.000000  6.200000  6.000000
 [477]  7.000000  4.666667  5.625000  5.500000  5.600000  6.555556       NaN
 [484]  6.500000 10.666667  7.000000  6.400000  6.000000  3.500000  3.000000
 [491]  5.833333  5.750000  6.142857  4.000000  5.250000  6.833333  7.000000
 [498]  4.666667  4.600000  5.000000  7.000000  5.125000  6.285714  6.500000
 [505]       NaN  5.571429  7.714286  6.250000  5.500000  4.000000  9.000000
 [512]  7.375000  7.500000  5.200000  6.000000  4.333333  7.375000  4.800000
 [519]  7.000000  8.166667  6.875000  6.200000  6.857143  6.000000  7.500000
 [526]  7.000000  6.333333  7.400000  6.333333  6.500000  5.166667  5.000000
 [533]  5.125000  6.000000 10.000000       NaN  7.000000  5.750000  3.000000
 [540]  7.000000  3.000000  6.714286  4.666667  7.000000  6.333333  4.333333
 [547]  5.222222  5.428571  5.200000  7.666667  5.666667  6.000000  8.500000
 [554]  5.666667  6.555556  6.000000  5.000000  6.500000  7.666667  7.600000
 [561]  6.333333  5.800000  5.000000  6.400000  5.500000  5.333333  3.666667
 [568]  5.875000  6.250000  5.333333  6.000000  3.500000  6.333333  5.000000
 [575]  6.250000  5.875000  6.500000  6.000000  4.142857  6.666667  7.500000
 [582]  6.500000  6.400000  6.000000  6.500000  6.000000  6.250000  7.428571
 [589]  7.333333  5.571429  7.666667  5.500000  8.000000  5.857143  4.000000
 [596]  7.666667  7.200000  6.000000  4.600000  7.000000  6.500000  6.250000
 [603]  6.000000  6.333333  6.000000  6.428571  6.166667  4.600000  5.571429
 [610]  5.600000  5.777778  6.142857  5.666667  6.750000  7.200000  5.285714
 [617]  5.000000  7.500000  5.500000  7.000000  6.111111  5.500000  6.000000
 [624]  4.750000  5.000000  5.000000  8.125000  4.714286  6.428571  4.125000
 [631]  5.285714  5.500000  6.000000  8.200000  4.000000  5.166667  6.333333
 [638]  6.250000  5.250000  8.666667  5.714286  7.285714  6.666667  6.000000
 [645]  9.000000  6.857143  6.200000  5.428571  6.000000  5.000000  2.000000
 [652]  9.000000  6.571429  6.250000  3.500000  6.250000  5.400000  5.250000
 [659]  5.250000  6.833333  6.125000  6.285714  6.428571  7.750000  7.000000
 [666]  6.000000  7.500000  6.625000  5.800000  7.333333  5.000000  7.142857
 [673]  5.400000  7.250000  6.800000  6.571429  6.833333  6.750000  8.285714
 [680]  6.285714  5.000000  6.250000  3.500000  4.500000  4.000000  7.000000
 [687]  5.500000  6.000000  6.000000  8.750000  8.000000  7.000000  4.875000
 [694]  6.142857  5.500000  6.833333  5.000000  7.000000  5.571429  7.000000
 [701]  5.600000  4.500000  3.857143  5.777778  5.800000  5.000000  5.500000
 [708]  7.166667  6.400000  6.222222  6.000000  5.500000  6.000000  6.571429
 [715]  6.166667  7.200000  5.600000  6.500000  4.500000  8.000000  5.125000
 [722]  6.000000  5.428571  6.666667  5.714286  6.400000  6.000000  3.500000
 [729]  6.500000  3.750000  5.333333  6.142857  6.666667  8.000000  4.000000
 [736]  6.833333  5.000000  7.000000  4.800000  7.000000  5.400000  8.000000
 [743]  8.250000  5.363636  7.666667  6.666667  6.285714  7.400000  5.600000
 [750]  6.666667  6.500000  7.333333 10.333333  7.000000  7.000000  5.000000
 [757]  4.200000  5.500000  6.666667  6.142857  6.875000  5.000000  7.000000
 [764]  4.400000  3.750000  5.000000  9.400000  5.500000  5.285714  7.000000
 [771]  5.571429  7.000000  6.000000  8.000000  6.888889  7.000000  7.166667
 [778]  6.000000  6.636364  7.500000  6.800000  5.875000  7.600000  7.000000
 [785]  6.000000  8.500000  6.500000  6.111111  4.000000  6.750000  7.857143
 [792]  5.666667  7.375000  7.400000  6.750000  7.666667  5.000000  6.583333
 [799]  6.166667  6.600000  6.600000  5.125000  6.000000  5.750000  6.166667
 [806]  6.285714  4.600000  5.250000  5.250000  6.833333  7.500000  6.200000
 [813]  6.750000  7.375000  5.000000  5.800000  6.400000  6.200000  6.000000
 [820]  6.125000  8.000000  6.000000  5.500000  7.333333  5.000000  4.500000
 [827]  5.200000  6.500000  6.166667  6.333333  7.400000  7.875000  5.600000
 [834]  6.285714  6.000000  6.600000  5.666667  5.666667  6.000000  6.500000
 [841]  9.000000  7.166667  5.857143  7.250000  6.000000  6.600000  6.833333
 [848]  6.500000  5.833333  6.333333  5.500000  5.000000  5.000000  6.000000
 [855]  6.777778  5.818182  6.000000  4.250000  6.714286  6.000000  6.875000
 [862]  5.800000  4.833333  6.142857  6.000000  5.666667  7.250000  7.800000
 [869]  5.888889  6.666667  6.125000  6.000000  5.250000  6.800000  9.333333
 [876]  6.250000  7.666667  5.000000  5.857143  5.571429  5.888889  7.000000
 [883]  4.600000  5.428571  6.000000  4.750000  5.750000  5.666667  5.571429
 [890]  6.285714  5.428571  6.833333  7.400000  4.500000  5.666667  6.500000
 [897]  6.285714  4.666667  6.428571  4.666667  5.000000  5.000000  7.000000
 [904]  6.375000  6.666667  6.200000  4.000000  5.250000  8.000000  7.000000
 [911]  4.800000  6.666667  3.500000  4.000000  7.000000  6.000000  5.500000
 [918]  5.000000  5.333333  6.333333  6.000000  5.000000  4.000000  6.625000
 [925]  6.333333  6.428571  5.857143  6.000000  6.000000  6.900000  9.000000
 [932]  6.333333  5.714286  6.000000  7.500000  4.500000  7.200000  5.600000
 [939]  5.500000  6.750000  7.666667  5.500000  5.600000  7.000000  5.666667
 [946]  5.600000  8.250000  5.500000  3.500000  5.250000  5.166667  5.428571
 [953]  8.000000  6.428571  7.800000  5.800000  6.600000  4.000000  6.000000
 [960]  5.800000  6.153846  7.000000  8.000000  8.600000  6.000000  6.571429
 [967]  6.600000  5.454545  4.500000  7.800000  7.428571  6.666667  4.000000
 [974]  6.250000  4.000000  7.333333  6.500000  7.166667  6.000000  6.625000
 [981]  5.400000  8.200000  6.428571  6.666667  5.142857  6.142857  6.800000
 [988]  5.666667  7.333333  6.666667  5.666667  6.500000  5.600000  6.500000
 [995]  5.571429  7.500000  5.666667  6.000000  6.000000  5.600000

$knnk
 [1] 5.741935 6.013889 6.254453 6.070621 6.098837 6.252874 6.155329 6.108766
 [9] 5.892256 6.281818 5.809917 5.875000 6.192308

> 
> # A weighted graph
> g5 <- make_star(10)
> E(g5)$weight <- seq(ecount(g5))
> knn(g5)
$knn
 [1] 1 9 9 9 9 9 9 9 9 9

$knnk
[1]   9 NaN NaN NaN NaN NaN NaN NaN   1

> 
> 
> 
> cleanEx()
> nameEx("laplacian_matrix")
> ### * laplacian_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: laplacian_matrix
> ### Title: Graph Laplacian
> ### Aliases: laplacian_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> laplacian_matrix(g)
10 x 10 sparse Matrix of class "dgCMatrix"
                                   
 [1,]  2 -1  .  .  .  .  .  .  . -1
 [2,] -1  2 -1  .  .  .  .  .  .  .
 [3,]  . -1  2 -1  .  .  .  .  .  .
 [4,]  .  . -1  2 -1  .  .  .  .  .
 [5,]  .  .  . -1  2 -1  .  .  .  .
 [6,]  .  .  .  . -1  2 -1  .  .  .
 [7,]  .  .  .  .  . -1  2 -1  .  .
 [8,]  .  .  .  .  .  . -1  2 -1  .
 [9,]  .  .  .  .  .  .  . -1  2 -1
[10,] -1  .  .  .  .  .  .  . -1  2
> laplacian_matrix(g, normalization = "unnormalized")
10 x 10 sparse Matrix of class "dgCMatrix"
                                   
 [1,]  2 -1  .  .  .  .  .  .  . -1
 [2,] -1  2 -1  .  .  .  .  .  .  .
 [3,]  . -1  2 -1  .  .  .  .  .  .
 [4,]  .  . -1  2 -1  .  .  .  .  .
 [5,]  .  .  . -1  2 -1  .  .  .  .
 [6,]  .  .  .  . -1  2 -1  .  .  .
 [7,]  .  .  .  .  . -1  2 -1  .  .
 [8,]  .  .  .  .  .  . -1  2 -1  .
 [9,]  .  .  .  .  .  .  . -1  2 -1
[10,] -1  .  .  .  .  .  .  . -1  2
> laplacian_matrix(g, normalization = "unnormalized", sparse = FALSE)
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    2   -1    0    0    0    0    0    0    0    -1
 [2,]   -1    2   -1    0    0    0    0    0    0     0
 [3,]    0   -1    2   -1    0    0    0    0    0     0
 [4,]    0    0   -1    2   -1    0    0    0    0     0
 [5,]    0    0    0   -1    2   -1    0    0    0     0
 [6,]    0    0    0    0   -1    2   -1    0    0     0
 [7,]    0    0    0    0    0   -1    2   -1    0     0
 [8,]    0    0    0    0    0    0   -1    2   -1     0
 [9,]    0    0    0    0    0    0    0   -1    2    -1
[10,]   -1    0    0    0    0    0    0    0   -1     2
> 
> 
> 
> 
> cleanEx()
> nameEx("layout_")
> ### * layout_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_
> ### Title: Graph layouts
> ### Aliases: layout_ layout print.igraph_layout_spec
> ###   print.igraph_layout_modifier
> 
> ### ** Examples
> 
> g <- make_ring(10) + make_full_graph(5)
> coords <- layout_(g, as_star())
> plot(g, layout = coords)
> 
> 
> 
> cleanEx()
> nameEx("layout_as_bipartite")
> ### * layout_as_bipartite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_as_bipartite
> ### Title: Simple two-row layout for bipartite graphs
> ### Aliases: layout_as_bipartite as_bipartite
> ### Keywords: graphs
> 
> ### ** Examples
> 
> # Random bipartite graph
> inc <- matrix(sample(0:1, 50, replace = TRUE, prob = c(2, 1)), 10, 5)
> g <- graph_from_biadjacency_matrix(inc)
> plot(g,
+   layout = layout_as_bipartite,
+   vertex.color = c("green", "cyan")[V(g)$type + 1]
+ )
> 
> # Two columns
> g %>%
+   add_layout_(as_bipartite()) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("layout_as_star")
> ### * layout_as_star
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_as_star
> ### Title: Generate coordinates to place the vertices of a graph in a
> ###   star-shape
> ### Aliases: layout_as_star as_star
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_star(10)
> layout_as_star(g)
            [,1]       [,2]
 [1,]  0.0000000  0.0000000
 [2,]  1.0000000  0.0000000
 [3,]  0.7660444  0.6427876
 [4,]  0.1736482  0.9848078
 [5,] -0.5000000  0.8660254
 [6,] -0.9396926  0.3420201
 [7,] -0.9396926 -0.3420201
 [8,] -0.5000000 -0.8660254
 [9,]  0.1736482 -0.9848078
[10,]  0.7660444 -0.6427876
> 
> ## Alternative form
> layout_(g, as_star())
            [,1]       [,2]
 [1,]  0.0000000  0.0000000
 [2,]  1.0000000  0.0000000
 [3,]  0.7660444  0.6427876
 [4,]  0.1736482  0.9848078
 [5,] -0.5000000  0.8660254
 [6,] -0.9396926  0.3420201
 [7,] -0.9396926 -0.3420201
 [8,] -0.5000000 -0.8660254
 [9,]  0.1736482 -0.9848078
[10,]  0.7660444 -0.6427876
> 
> 
> 
> cleanEx()
> nameEx("layout_as_tree")
> ### * layout_as_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_as_tree
> ### Title: The Reingold-Tilford graph layout algorithm
> ### Aliases: layout_as_tree as_tree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> tree <- make_tree(20, 3)
> plot(tree, layout = layout_as_tree)
> plot(tree, layout = layout_as_tree(tree, flip.y = FALSE))
> plot(tree, layout = layout_as_tree(tree, circular = TRUE))
> 
> tree2 <- make_tree(10, 3) + make_tree(10, 2)
> plot(tree2, layout = layout_as_tree)
> plot(tree2, layout = layout_as_tree(tree2,
+   root = c(1, 11),
+   rootlevel = c(2, 1)
+ ))
> 
> 
> 
> cleanEx()
> nameEx("layout_in_circle")
> ### * layout_in_circle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_in_circle
> ### Title: Graph layout with vertices on a circle.
> ### Aliases: layout_in_circle in_circle
> ### Keywords: graphs
> 
> ### ** Examples
> 
> ## Don't show: 
> if (igraph:::has_glpk() && rlang::is_installed("igraphdata")) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Place vertices on a circle, order them according to their
+ ## community
+ library(igraphdata)
+ data(karate)
+ karate_groups <- cluster_optimal(karate)
+ coords <- layout_in_circle(karate,
+   order =
+     order(membership(karate_groups))
+ )
+ V(karate)$label <- sub("Actor ", "", V(karate)$name)
+ V(karate)$label.color <- membership(karate_groups)
+ V(karate)$shape <- "none"
+ plot(karate, layout = coords)
+ ## Don't show: 
+ }) # examplesIf
> library(igraphdata)
> data(karate)
> karate_groups <- cluster_optimal(karate)
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> coords <- layout_in_circle(karate, order = order(membership(karate_groups)))
> V(karate)$label <- sub("Actor ", "", V(karate)$name)
> V(karate)$label.color <- membership(karate_groups)
> V(karate)$shape <- "none"
> plot(karate, layout = coords)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:igraphdata’

> nameEx("layout_on_grid")
> ### * layout_on_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_on_grid
> ### Title: Simple grid layout
> ### Aliases: layout_on_grid on_grid
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_lattice(c(3, 3))
> layout_on_grid(g)
      [,1] [,2]
 [1,]    0    0
 [2,]    1    0
 [3,]    2    0
 [4,]    0    1
 [5,]    1    1
 [6,]    2    1
 [7,]    0    2
 [8,]    1    2
 [9,]    2    2
> 
> g2 <- make_lattice(c(3, 3, 3))
> layout_on_grid(g2, dim = 3)
      [,1] [,2] [,3]
 [1,]    0    0    0
 [2,]    1    0    0
 [3,]    2    0    0
 [4,]    0    1    0
 [5,]    1    1    0
 [6,]    2    1    0
 [7,]    0    2    0
 [8,]    1    2    0
 [9,]    2    2    0
[10,]    0    0    1
[11,]    1    0    1
[12,]    2    0    1
[13,]    0    1    1
[14,]    1    1    1
[15,]    2    1    1
[16,]    0    2    1
[17,]    1    2    1
[18,]    2    2    1
[19,]    0    0    2
[20,]    1    0    2
[21,]    2    0    2
[22,]    0    1    2
[23,]    1    1    2
[24,]    2    1    2
[25,]    0    2    2
[26,]    1    2    2
[27,]    2    2    2
> 
> plot(g, layout = layout_on_grid)
> if (interactive() && requireNamespace("rgl", quietly = TRUE)) {
+   rglplot(g, layout = layout_on_grid(g, dim = 3))
+ }
> 
> 
> 
> cleanEx()
> nameEx("layout_with_dh")
> ### * layout_with_dh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_dh
> ### Title: The Davidson-Harel layout algorithm
> ### Aliases: layout_with_dh with_dh
> 
> ### ** Examples
> 
> 
> set.seed(42)
> ## Figures from the paper
> g_1b <- make_star(19, mode = "undirected") + path(c(2:19, 2)) +
+   path(c(seq(2, 18, by = 2), 2))
> plot(g_1b, layout = layout_with_dh)
> 
> g_2 <- make_lattice(c(8, 3)) + edges(1, 8, 9, 16, 17, 24)
> plot(g_2, layout = layout_with_dh)
> 
> g_3 <- make_empty_graph(n = 70)
> plot(g_3, layout = layout_with_dh)
> 
> g_4 <- make_empty_graph(n = 70, directed = FALSE) + edges(1:70)
> plot(g_4, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_5a <- make_ring(24)
> plot(g_5a, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_5b <- make_ring(40)
> plot(g_5b, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_6 <- make_lattice(c(2, 2, 2))
> plot(g_6, layout = layout_with_dh)
> 
> g_7 <- graph_from_literal(1:3:5 -- 2:4:6)
> plot(g_7, layout = layout_with_dh, vertex.label = V(g_7)$name)
> 
> g_8 <- make_ring(5) + make_ring(10) + make_ring(5) +
+   edges(
+     1, 6, 2, 8, 3, 10, 4, 12, 5, 14,
+     7, 16, 9, 17, 11, 18, 13, 19, 15, 20
+   )
> plot(g_8, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_9 <- make_lattice(c(3, 2, 2))
> plot(g_9, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_10 <- make_lattice(c(6, 6))
> plot(g_10, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_11a <- make_tree(31, 2, mode = "undirected")
> plot(g_11a, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_11b <- make_tree(21, 4, mode = "undirected")
> plot(g_11b, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> g_12 <- make_empty_graph(n = 37, directed = FALSE) +
+   path(1:5, 10, 22, 31, 37:33, 27, 16, 6, 1) + path(6, 7, 11, 9, 10) + path(16:22) +
+   path(27:31) + path(2, 7, 18, 28, 34) + path(3, 8, 11, 19, 29, 32, 35) +
+   path(4, 9, 20, 30, 36) + path(1, 7, 12, 14, 19, 24, 26, 30, 37) +
+   path(5, 9, 13, 15, 19, 23, 25, 28, 33) + path(3, 12, 16, 25, 35, 26, 22, 13, 3)
> plot(g_12, layout = layout_with_dh, vertex.size = 5, vertex.label = NA)
> 
> 
> 
> cleanEx()
> nameEx("layout_with_drl")
> ### * layout_with_drl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_drl
> ### Title: The DrL graph layout generator
> ### Aliases: layout_with_drl drl_defaults igraph.drl.coarsen
> ###   igraph.drl.coarsest igraph.drl.default igraph.drl.final
> ###   igraph.drl.refine with_drl
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- as_undirected(sample_pa(100, m = 1))
> l <- layout_with_drl(g, options = list(simmer.attraction = 0))
> plot(g, layout = l, vertex.size = 3, vertex.label = NA)
> 
> 
> 
> 
> cleanEx()
> nameEx("layout_with_fr")
> ### * layout_with_fr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_fr
> ### Title: The Fruchterman-Reingold layout algorithm
> ### Aliases: layout_with_fr with_fr
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Fixing ego
> g <- sample_pa(20, m = 2)
> minC <- rep(-Inf, vcount(g))
> maxC <- rep(Inf, vcount(g))
> minC[1] <- maxC[1] <- 0
> co <- layout_with_fr(g,
+   minx = minC, maxx = maxC,
+   miny = minC, maxy = maxC
+ )
> co[1, ]
[1] 0 0
> plot(g,
+   layout = co, vertex.size = 30, edge.arrow.size = 0.2,
+   vertex.label = c("ego", rep("", vcount(g) - 1)), rescale = FALSE,
+   xlim = range(co[, 1]), ylim = range(co[, 2]), vertex.label.dist = 0,
+   vertex.label.color = "red"
+ )
> axis(1)
> axis(2)
> 
> 
> 
> 
> cleanEx()
> nameEx("layout_with_gem")
> ### * layout_with_gem
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_gem
> ### Title: The GEM layout algorithm
> ### Aliases: layout_with_gem with_gem
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> set.seed(42)
> g <- make_ring(10)
> plot(g, layout = layout_with_gem)
> 
> 
> 
> 
> cleanEx()
> nameEx("layout_with_kk")
> ### * layout_with_kk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_kk
> ### Title: The Kamada-Kawai layout algorithm
> ### Aliases: layout_with_kk with_kk
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> E(g)$weight <- rep(1:2, length.out = ecount(g))
> plot(g, layout = layout_with_kk, edge.label = E(g)$weight)
> 
> 
> 
> 
> cleanEx()
> nameEx("layout_with_mds")
> ### * layout_with_mds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_mds
> ### Title: Graph layout by multidimensional scaling
> ### Aliases: layout_with_mds with_mds
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(100, 2 / 100)
> l <- layout_with_mds(g)
> plot(g, layout = l, vertex.label = NA, vertex.size = 3)
> 
> 
> 
> cleanEx()
> nameEx("layout_with_sugiyama")
> ### * layout_with_sugiyama
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: layout_with_sugiyama
> ### Title: The Sugiyama graph layout generator
> ### Aliases: layout_with_sugiyama with_sugiyama
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Data taken from http://tehnick-8.narod.ru/dc_clients/
> DC <- graph_from_literal(
+   "DC++" -+ "LinuxDC++":"BCDC++":"EiskaltDC++":"StrongDC++":"DiCe!++",
+   "LinuxDC++" -+ "FreeDC++", "BCDC++" -+ "StrongDC++",
+   "FreeDC++" -+ "BMDC++":"EiskaltDC++",
+   "StrongDC++" -+ "AirDC++":"zK++":"ApexDC++":"TkDC++",
+   "StrongDC++" -+ "StrongDC++ SQLite":"RSX++",
+   "ApexDC++" -+ "FlylinkDC++ ver <= 4xx",
+   "ApexDC++" -+ "ApexDC++ Speed-Mod":"DiCe!++",
+   "StrongDC++ SQLite" -+ "FlylinkDC++ ver >= 5xx",
+   "ApexDC++ Speed-Mod" -+ "FlylinkDC++ ver <= 4xx",
+   "ApexDC++ Speed-Mod" -+ "GreylinkDC++",
+   "FlylinkDC++ ver <= 4xx" -+ "FlylinkDC++ ver >= 5xx",
+   "FlylinkDC++ ver <= 4xx" -+ AvaLink,
+   "GreylinkDC++" -+ AvaLink:"RayLinkDC++":"SparkDC++":PeLink
+ )
> 
> ## Use edge types
> E(DC)$lty <- 1
> E(DC)["BCDC++" %->% "StrongDC++"]$lty <- 2
> E(DC)["FreeDC++" %->% "EiskaltDC++"]$lty <- 2
> E(DC)["ApexDC++" %->% "FlylinkDC++ ver <= 4xx"]$lty <- 2
> E(DC)["ApexDC++" %->% "DiCe!++"]$lty <- 2
> E(DC)["StrongDC++ SQLite" %->% "FlylinkDC++ ver >= 5xx"]$lty <- 2
> E(DC)["GreylinkDC++" %->% "AvaLink"]$lty <- 2
> 
> ## Layers, as on the plot
> layers <- list(
+   c("DC++"),
+   c("LinuxDC++", "BCDC++"),
+   c("FreeDC++", "StrongDC++"),
+   c(
+     "BMDC++", "EiskaltDC++", "AirDC++", "zK++", "ApexDC++",
+     "TkDC++", "RSX++"
+   ),
+   c("StrongDC++ SQLite", "ApexDC++ Speed-Mod", "DiCe!++"),
+   c("FlylinkDC++ ver <= 4xx", "GreylinkDC++"),
+   c(
+     "FlylinkDC++ ver >= 5xx", "AvaLink", "RayLinkDC++",
+     "SparkDC++", "PeLink"
+   )
+ )
> 
> ## Check that we have all nodes
> all(sort(unlist(layers)) == sort(V(DC)$name))
[1] TRUE
> 
> ## Add some graphical parameters
> V(DC)$color <- "white"
> V(DC)$shape <- "rectangle"
> V(DC)$size <- 20
> V(DC)$size2 <- 10
> V(DC)$label <- lapply(V(DC)$name, function(x) {
+   paste(strwrap(x, 12), collapse = "\n")
+ })
> E(DC)$arrow.size <- 0.5
> 
> ## Create a similar layout using the predefined layers
> lay1 <- layout_with_sugiyama(DC, layers = apply(sapply(
+   layers,
+   function(x) V(DC)$name %in% x
+ ), 1, which))
> 
> ## Simple plot, not very nice
> par(mar = rep(.1, 4))
> plot(DC, layout = lay1$layout, vertex.label.cex = 0.5)
> 
> ## Sugiyama plot
> plot(lay1$extd_graph, vertex.label.cex = 0.5)
> 
> ## The same with automatic layer calculation
> ## Keep vertex/edge attributes in the extended graph
> lay2 <- layout_with_sugiyama(DC, attributes = "all")
> plot(lay2$extd_graph, vertex.label.cex = 0.5)
> 
> ## Another example, from the following paper:
> ## Markus Eiglsperger, Martin Siebenhaller, Michael Kaufmann:
> ## An Efficient Implementation of Sugiyama's Algorithm for
> ## Layered Graph Drawing, Journal of Graph Algorithms and
> ## Applications 9, 305--325 (2005).
> 
> ex <- graph_from_literal(
+   0 -+ 29:6:5:20:4,
+   1 -+ 12,
+   2 -+ 23:8,
+   3 -+ 4,
+   4,
+   5 -+ 2:10:14:26:4:3,
+   6 -+ 9:29:25:21:13,
+   7,
+   8 -+ 20:16,
+   9 -+ 28:4,
+   10 -+ 27,
+   11 -+ 9:16,
+   12 -+ 9:19,
+   13 -+ 20,
+   14 -+ 10,
+   15 -+ 16:27,
+   16 -+ 27,
+   17 -+ 3,
+   18 -+ 13,
+   19 -+ 9,
+   20 -+ 4,
+   21 -+ 22,
+   22 -+ 8:9,
+   23 -+ 9:24,
+   24 -+ 12:15:28,
+   25 -+ 11,
+   26 -+ 18,
+   27 -+ 13:19,
+   28 -+ 7,
+   29 -+ 25
+ )
> 
> layers <- list(
+   0, c(5, 17), c(2, 14, 26, 3), c(23, 10, 18), c(1, 24),
+   12, 6, c(29, 21), c(25, 22), c(11, 8, 15), 16, 27, c(13, 19),
+   c(9, 20), c(4, 28), 7
+ )
> 
> layex <- layout_with_sugiyama(ex, layers = apply(
+   sapply(
+     layers,
+     function(x) V(ex)$name %in% as.character(x)
+   ),
+   1, which
+ ))
> 
> origvert <- c(rep(TRUE, vcount(ex)), rep(FALSE, nrow(layex$layout.dummy)))
> realedge <- as_edgelist(layex$extd_graph)[, 2] <= vcount(ex)
> plot(layex$extd_graph,
+   vertex.label.cex = 0.5,
+   edge.arrow.size = .5,
+   vertex.size = ifelse(origvert, 5, 0),
+   vertex.shape = ifelse(origvert, "square", "none"),
+   vertex.label = ifelse(origvert, V(ex)$name, ""),
+   edge.arrow.mode = ifelse(realedge, 2, 0)
+ )
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("local_scan")
> ### * local_scan
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: local_scan
> ### Title: Compute local scan statistics on graphs
> ### Aliases: local_scan
> 
> ### ** Examples
> 
> pair <- sample_correlated_gnp_pair(n = 10^3, corr = 0.8, p = 0.1)
> local_0_us <- local_scan(graph.us = pair$graph1, k = 0)
> local_1_us <- local_scan(graph.us = pair$graph1, k = 1)
> 
> local_0_them <- local_scan(
+   graph.us = pair$graph1,
+   graph.them = pair$graph2, k = 0
+ )
> local_1_them <- local_scan(
+   graph.us = pair$graph1,
+   graph.them = pair$graph2, k = 1
+ )
> 
> Neigh_1 <- neighborhood(pair$graph1, order = 1)
> local_1_them_nhood <- local_scan(
+   graph.us = pair$graph1,
+   graph.them = pair$graph2,
+   neighborhoods = Neigh_1
+ )
> 
> 
> 
> cleanEx()
> nameEx("make_")
> ### * make_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_
> ### Title: Make a new graph
> ### Aliases: make_
> 
> ### ** Examples
> 
> r <- make_(ring(10))
> l <- make_(lattice(c(3, 3, 3)))
> 
> r2 <- make_(ring(10), with_vertex_(color = "red", name = LETTERS[1:10]))
> l2 <- make_(lattice(c(3, 3, 3)), with_edge_(weight = 2))
> 
> ran <- sample_(degseq(c(3, 3, 3, 3, 3, 3), method = "configuration"), simplified())
> degree(ran)
[1] 1 2 3 2 3 1
> is_simple(ran)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("make_bipartite_graph")
> ### * make_bipartite_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_bipartite_graph
> ### Title: Create a bipartite graph
> ### Aliases: make_bipartite_graph bipartite_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_bipartite_graph(rep(0:1, length.out = 10), c(1:10))
> print(g, v = TRUE)
IGRAPH 696a216 U--B 10 5 -- 
+ attr: type (v/l)
+ edges from 696a216:
[1] 1-- 2 3-- 4 5-- 6 7-- 8 9--10
> 
> 
> 
> 
> cleanEx()
> nameEx("make_chordal_ring")
> ### * make_chordal_ring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_chordal_ring
> ### Title: Create an extended chordal ring graph
> ### Aliases: make_chordal_ring chordal_ring
> 
> ### ** Examples
> 
> chord <- make_chordal_ring(
+   15,
+   matrix(c(3, 12, 4, 7, 8, 11), nr = 2)
+ )
> 
> 
> 
> cleanEx()
> nameEx("make_de_bruijn_graph")
> ### * make_de_bruijn_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_de_bruijn_graph
> ### Title: De Bruijn graphs
> ### Aliases: make_de_bruijn_graph de_bruijn_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # de Bruijn graphs can be created recursively by line graphs as well
> g <- make_de_bruijn_graph(2, 1)
> make_de_bruijn_graph(2, 2)
IGRAPH 276bd74 D--- 4 8 -- De-Bruijn graph 2-2
+ attr: name (g/c), m (g/n), n (g/n)
+ edges from 276bd74:
[1] 1->1 1->2 2->3 2->4 3->1 3->2 4->3 4->4
> make_line_graph(g)
IGRAPH 05884f9 D--- 4 8 -- Line graph
+ attr: name (g/c)
+ edges from 05884f9:
[1] 1->1 3->1 1->2 3->2 2->3 4->3 2->4 4->4
> 
> 
> 
> cleanEx()
> nameEx("make_empty_graph")
> ### * make_empty_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_empty_graph
> ### Title: A graph with no edges
> ### Aliases: make_empty_graph empty_graph
> 
> ### ** Examples
> 
> make_empty_graph(n = 10)
IGRAPH 6497a11 D--- 10 0 -- 
+ edges from 6497a11:
> make_empty_graph(n = 5, directed = FALSE)
IGRAPH f95e86e U--- 5 0 -- 
+ edges from f95e86e:
> 
> 
> 
> cleanEx()
> nameEx("make_from_prufer")
> ### * make_from_prufer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_from_prufer
> ### Title: Create an undirected tree graph from its Prüfer sequence
> ### Aliases: make_from_prufer from_prufer
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(13, 3)
> to_prufer(g)
 [1] 2 2 2 1 3 3 3 1 4 4 4
> 
> 
> 
> cleanEx()
> nameEx("make_full_bipartite_graph")
> ### * make_full_bipartite_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_full_bipartite_graph
> ### Title: Create a full bipartite graph
> ### Aliases: make_full_bipartite_graph full_bipartite_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_bipartite_graph(2, 3)
> g2 <- make_full_bipartite_graph(2, 3, directed = TRUE)
> g3 <- make_full_bipartite_graph(2, 3, directed = TRUE, mode = "in")
> g4 <- make_full_bipartite_graph(2, 3, directed = TRUE, mode = "all")
> 
> 
> 
> 
> cleanEx()
> nameEx("make_full_citation_graph")
> ### * make_full_citation_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_full_citation_graph
> ### Title: Create a complete (full) citation graph
> ### Aliases: make_full_citation_graph full_citation_graph
> 
> ### ** Examples
> 
> print_all(make_full_citation_graph(10))
IGRAPH 6ec8d66 D--- 10 45 -- Full citation graph
+ attr: name (g/c)
+ graph attributes:
| + name:
|   [1] "Full citation graph"
+ edges:
 1 ->                      2 -> 1                    3 -> 1 2              
 4 -> 1 2 3                5 -> 1 2 3 4              6 -> 1 2 3 4 5        
 7 -> 1 2 3 4 5 6          8 -> 1 2 3 4 5 6 7        9 -> 1 2 3 4 5 6 7 8  
10 -> 1 2 3 4 5 6 7 8 9
> 
> 
> 
> cleanEx()
> nameEx("make_full_graph")
> ### * make_full_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_full_graph
> ### Title: Create a full graph
> ### Aliases: make_full_graph full_graph
> 
> ### ** Examples
> 
> make_full_graph(5)
IGRAPH 8e57bad U--- 5 10 -- Full graph
+ attr: name (g/c), loops (g/l)
+ edges from 8e57bad:
 [1] 1--2 1--3 1--4 1--5 2--3 2--4 2--5 3--4 3--5 4--5
> print_all(make_full_graph(4, directed = TRUE))
IGRAPH 2222001 D--- 4 12 -- Full graph
+ attr: name (g/c), loops (g/l)
+ graph attributes:
| + name:
|   [1] "Full graph"
| + loops:
|   [1] FALSE
+ edges:
1 -> 2 3 4   2 -> 1 3 4   3 -> 1 2 4   4 -> 1 2 3
> 
> 
> 
> cleanEx()
> nameEx("make_graph")
> ### * make_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_graph
> ### Title: Create an igraph graph from a list of edges, or a notable graph
> ### Aliases: make_graph make_directed_graph make_undirected_graph
> ###   directed_graph undirected_graph
> 
> ### ** Examples
> 
> make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
IGRAPH ca53f5f U--- 6 4 -- 
+ edges from ca53f5f:
[1] 1--2 2--3 3--4 5--6
> make_graph(c("A", "B", "B", "C", "C", "D"), directed = FALSE)
IGRAPH 1c500f1 UN-- 4 3 -- 
+ attr: name (v/c)
+ edges from 1c500f1 (vertex names):
[1] A--B B--C C--D
> 
> solids <- list(
+   make_graph("Tetrahedron"),
+   make_graph("Cubical"),
+   make_graph("Octahedron"),
+   make_graph("Dodecahedron"),
+   make_graph("Icosahedron")
+ )
> 
> graph <- make_graph(
+   ~ A - B - C - D - A, E - A:B:C:D,
+   F - G - H - I - F, J - F:G:H:I,
+   K - L - M - N - K, O - K:L:M:N,
+   P - Q - R - S - P, T - P:Q:R:S,
+   B - F, E - J, C - I, L - T, O - T, M - S,
+   C - P, C - L, I - L, I - P
+ )
> 
> 
> 
> cleanEx()
> nameEx("make_kautz_graph")
> ### * make_kautz_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_kautz_graph
> ### Title: Kautz graphs
> ### Aliases: make_kautz_graph kautz_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> make_line_graph(make_kautz_graph(2, 1))
IGRAPH c36d265 D--- 12 24 -- Line graph
+ attr: name (g/c)
+ edges from c36d265:
 [1]  5-> 1  9-> 1  5-> 2  9-> 2  6-> 3 10-> 3  6-> 4 10-> 4  1-> 5 11-> 5
[11]  1-> 6 11-> 6  2-> 7 12-> 7  2-> 8 12-> 8  3-> 9  7-> 9  3->10  7->10
[21]  4->11  8->11  4->12  8->12
> make_kautz_graph(2, 2)
IGRAPH 9124ca9 D--- 12 24 -- Kautz graph 2-2
+ attr: name (g/c), m (g/n), n (g/n)
+ edges from 9124ca9:
 [1]  1-> 5  1-> 6  2-> 7  2-> 8  3-> 9  3->10  4->11  4->12  5-> 1  5-> 2
[11]  6-> 3  6-> 4  7-> 9  7->10  8->11  8->12  9-> 1  9-> 2 10-> 3 10-> 4
[21] 11-> 5 11-> 6 12-> 7 12-> 8
> 
> 
> 
> 
> cleanEx()
> nameEx("make_lattice")
> ### * make_lattice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_lattice
> ### Title: Create a lattice graph
> ### Aliases: make_lattice lattice
> 
> ### ** Examples
> 
> make_lattice(c(5, 5, 5))
IGRAPH 7f4e3f0 U--- 125 300 -- Lattice graph
+ attr: name (g/c), dimvector (g/n), nei (g/n), mutual (g/l), circular
| (g/l)
+ edges from 7f4e3f0:
 [1]  1-- 2  1-- 6  1--26  2-- 3  2-- 7  2--27  3-- 4  3-- 8  3--28  4-- 5
[11]  4-- 9  4--29  5--10  5--30  6-- 7  6--11  6--31  7-- 8  7--12  7--32
[21]  8-- 9  8--13  8--33  9--10  9--14  9--34 10--15 10--35 11--12 11--16
[31] 11--36 12--13 12--17 12--37 13--14 13--18 13--38 14--15 14--19 14--39
[41] 15--20 15--40 16--17 16--21 16--41 17--18 17--22 17--42 18--19 18--23
[51] 18--43 19--20 19--24 19--44 20--25 20--45 21--22 21--46 22--23 22--47
[61] 23--24 23--48 24--25 24--49 25--50 26--27 26--31 26--51 27--28 27--32
+ ... omitted several edges
> make_lattice(length = 5, dim = 3)
IGRAPH 685f3e3 U--- 125 300 -- Lattice graph
+ attr: name (g/c), dimvector (g/n), nei (g/n), mutual (g/l), circular
| (g/l)
+ edges from 685f3e3:
 [1]  1-- 2  1-- 6  1--26  2-- 3  2-- 7  2--27  3-- 4  3-- 8  3--28  4-- 5
[11]  4-- 9  4--29  5--10  5--30  6-- 7  6--11  6--31  7-- 8  7--12  7--32
[21]  8-- 9  8--13  8--33  9--10  9--14  9--34 10--15 10--35 11--12 11--16
[31] 11--36 12--13 12--17 12--37 13--14 13--18 13--38 14--15 14--19 14--39
[41] 15--20 15--40 16--17 16--21 16--41 17--18 17--22 17--42 18--19 18--23
[51] 18--43 19--20 19--24 19--44 20--25 20--45 21--22 21--46 22--23 22--47
[61] 23--24 23--48 24--25 24--49 25--50 26--27 26--31 26--51 27--28 27--32
+ ... omitted several edges
> 
> 
> 
> cleanEx()
> nameEx("make_line_graph")
> ### * make_line_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_line_graph
> ### Title: Line graph of a graph
> ### Aliases: make_line_graph line_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # generate the first De-Bruijn graphs
> g <- make_full_graph(2, directed = TRUE, loops = TRUE)
> make_line_graph(g)
IGRAPH f27e3cb D--- 4 8 -- Line graph
+ attr: name (g/c)
+ edges from f27e3cb:
[1] 1->1 3->1 1->2 3->2 2->3 4->3 2->4 4->4
> make_line_graph(make_line_graph(g))
IGRAPH b5276b5 D--- 8 16 -- Line graph
+ attr: name (g/c)
+ edges from b5276b5:
 [1] 1->1 2->1 5->2 6->2 1->3 2->3 5->4 6->4 3->5 4->5 7->6 8->6 3->7 4->7 7->8
[16] 8->8
> make_line_graph(make_line_graph(make_line_graph(g)))
IGRAPH 616436b D--- 16 32 -- Line graph
+ attr: name (g/c)
+ edges from 616436b:
 [1]  1-> 1  2-> 1  3-> 2  4-> 2  9-> 3 10-> 3 11-> 4 12-> 4  1-> 5  2-> 5
[11]  3-> 6  4-> 6  9-> 7 10-> 7 11-> 8 12-> 8  5-> 9  6-> 9  7->10  8->10
[21] 13->11 14->11 15->12 16->12  5->13  6->13  7->14  8->14 13->15 14->15
[31] 15->16 16->16
> 
> 
> 
> 
> cleanEx()
> nameEx("make_ring")
> ### * make_ring
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_ring
> ### Title: Create a ring graph
> ### Aliases: make_ring ring
> 
> ### ** Examples
> 
> print_all(make_ring(10))
IGRAPH d82223b U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ graph attributes:
| + name:
|   [1] "Ring graph"
| + mutual:
|   [1] FALSE
| + circular:
|   [1] TRUE
+ edges from d82223b:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> print_all(make_ring(10, directed = TRUE, mutual = TRUE))
IGRAPH 4795030 D--- 10 20 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ graph attributes:
| + name:
|   [1] "Ring graph"
| + mutual:
|   [1] TRUE
| + circular:
|   [1] TRUE
+ edges from 4795030:
 [1]  1-> 2  2-> 1  2-> 3  3-> 2  3-> 4  4-> 3  4-> 5  5-> 4  5-> 6  6-> 5
[11]  6-> 7  7-> 6  7-> 8  8-> 7  8-> 9  9-> 8  9->10 10-> 9 10-> 1  1->10
> 
> 
> 
> cleanEx()
> nameEx("make_star")
> ### * make_star
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_star
> ### Title: Create a star graph, a tree with n vertices and n - 1 leaves
> ### Aliases: make_star star
> 
> ### ** Examples
> 
> make_star(10, mode = "out")
IGRAPH b6c8011 D--- 10 9 -- Out-star
+ attr: name (g/c), mode (g/c), center (g/n)
+ edges from b6c8011:
[1] 1-> 2 1-> 3 1-> 4 1-> 5 1-> 6 1-> 7 1-> 8 1-> 9 1->10
> make_star(5, mode = "undirected")
IGRAPH f3e001c U--- 5 4 -- Star
+ attr: name (g/c), mode (g/c), center (g/n)
+ edges from f3e001c:
[1] 1--2 1--3 1--4 1--5
> 
> 
> 
> cleanEx()
> nameEx("make_tree")
> ### * make_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_tree
> ### Title: Create tree graphs
> ### Aliases: make_tree tree
> 
> ### ** Examples
> 
> make_tree(10, 2)
IGRAPH f25c7b1 D--- 10 9 -- Tree
+ attr: name (g/c), children (g/n), mode (g/c)
+ edges from f25c7b1:
[1] 1-> 2 1-> 3 2-> 4 2-> 5 3-> 6 3-> 7 4-> 8 4-> 9 5->10
> make_tree(10, 3, mode = "undirected")
IGRAPH 2ce7f5d U--- 10 9 -- Tree
+ attr: name (g/c), children (g/n), mode (g/c)
+ edges from 2ce7f5d:
[1] 1-- 2 1-- 3 1-- 4 2-- 5 2-- 6 2-- 7 3-- 8 3-- 9 3--10
> 
> 
> 
> cleanEx()
> nameEx("match_vertices")
> ### * match_vertices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: match_vertices
> ### Title: Match Graphs given a seeding of vertex correspondences
> ### Aliases: match_vertices seeded.graph.match
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # require(Matrix)
> g1 <- sample_gnp(10, 0.1)
> randperm <- c(1:3, 3 + sample(7))
> g2 <- sample_correlated_gnp(g1, corr = 1, p = g1$p, permutation = randperm)
> A <- as_adjacency_matrix(g1)
> B <- as_adjacency_matrix(g2)
> P <- match_vertices(A, B, m = 3, start = diag(rep(1, nrow(A) - 3)), 20)
> P
$corr
     [,1] [,2]
[1,]    4    4
[2,]    5    9
[3,]    6   10
[4,]    7    7
[5,]    8    5
[6,]    9    6
[7,]   10    8

$P
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    0    0    0    0    0    0    0    0     0
 [2,]    0    1    0    0    0    0    0    0    0     0
 [3,]    0    0    1    0    0    0    0    0    0     0
 [4,]    0    0    0    1    0    0    0    0    0     0
 [5,]    0    0    0    0    0    0    0    0    1     0
 [6,]    0    0    0    0    0    0    0    0    0     1
 [7,]    0    0    0    0    0    0    1    0    0     0
 [8,]    0    0    0    0    1    0    0    0    0     0
 [9,]    0    0    0    0    0    1    0    0    0     0
[10,]    0    0    0    0    0    0    0    1    0     0

$D
7 x 7 sparse Matrix of class "dgCMatrix"
                  
[1,] 1 . . . . . .
[2,] . . . . . 1 .
[3,] . . . . . . 1
[4,] . . . 1 . . .
[5,] . 1 . . . . .
[6,] . . 1 . . . .
[7,] . . . . 1 . .

> 
> 
> 
> cleanEx()
> nameEx("matching")
> ### * matching
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_matching
> ### Title: Matching
> ### Aliases: is_matching max_bipartite_match is_max_matching
> 
> ### ** Examples
> 
> g <- graph_from_literal(a - b - c - d - e - f)
> m1 <- c("b", "a", "d", "c", "f", "e") # maximal matching
> m2 <- c("b", "a", "d", "c", NA, NA) # non-maximal matching
> m3 <- c("b", "c", "d", "c", NA, NA) # not a matching
> is_matching(g, m1)
[1] TRUE
> is_matching(g, m2)
[1] TRUE
> is_matching(g, m3)
[1] FALSE
> is_max_matching(g, m1)
[1] TRUE
> is_max_matching(g, m2)
[1] FALSE
> is_max_matching(g, m3)
[1] FALSE
> 
> V(g)$type <- rep(c(FALSE, TRUE), 3)
> print_all(g, v = TRUE)
IGRAPH b0158a4 UN-B 6 5 -- 
+ attr: name (v/c), type (v/l)
+ vertex attributes:
|     name  type
| [1]    a FALSE
| [2]    b  TRUE
| [3]    c FALSE
| [4]    d  TRUE
| [5]    e FALSE
| [6]    f  TRUE
+ edges from b0158a4 (vertex names):
[1] a--b b--c c--d d--e e--f
> max_bipartite_match(g)
$matching_size
[1] 3

$matching_weight
[1] 3

$matching
  a   b   c   d   e   f 
"b" "a" "d" "c" "f" "e" 

> 
> g2 <- graph_from_literal(a - b - c - d - e - f - g)
> V(g2)$type <- rep(c(FALSE, TRUE), length.out = vcount(g2))
> print_all(g2, v = TRUE)
IGRAPH 4b958ea UN-B 7 6 -- 
+ attr: name (v/c), type (v/l)
+ vertex attributes:
|     name  type
| [1]    a FALSE
| [2]    b  TRUE
| [3]    c FALSE
| [4]    d  TRUE
| [5]    e FALSE
| [6]    f  TRUE
| [7]    g FALSE
+ edges from 4b958ea (vertex names):
[1] a--b b--c c--d d--e e--f f--g
> max_bipartite_match(g2)
$matching_size
[1] 3

$matching_weight
[1] 3

$matching
  a   b   c   d   e   f   g 
"b" "a" "d" "c" "f" "e"  NA 

> #' @keywords graphs
> 
> 
> 
> cleanEx()
> nameEx("max_cardinality")
> ### * max_cardinality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: max_cardinality
> ### Title: Maximum cardinality search
> ### Aliases: max_cardinality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## The examples from the Tarjan-Yannakakis paper
> g1 <- graph_from_literal(
+   A - B:C:I, B - A:C:D, C - A:B:E:H, D - B:E:F,
+   E - C:D:F:H, F - D:E:G, G - F:H, H - C:E:G:I,
+   I - A:H
+ )
> max_cardinality(g1)
$alpha
[1] 9 4 6 8 3 5 7 2 1

$alpham1
+ 9/9 vertices, named, from de0e89d:
[1] G F D B E C H I A

> is_chordal(g1, fillin = TRUE)
$chordal
[1] FALSE

$fillin
 [1] 2 6 8 7 5 7 2 7 6 1 7 1

$newgraph
NULL

> 
> g2 <- graph_from_literal(
+   A - B:E, B - A:E:F:D, C - E:D:G, D - B:F:E:C:G,
+   E - A:B:C:D:F, F - B:D:E, G - C:D:H:I, H - G:I:J,
+   I - G:H:J, J - H:I
+ )
> max_cardinality(g2)
$alpha
 [1] 10  8  9  6  7  5  4  2  3  1

$alpham1
+ 10/10 vertices, named, from 8dfb0d1:
 [1] J H I G C F D B E A

> is_chordal(g2, fillin = TRUE)
$chordal
[1] TRUE

$fillin
numeric(0)

$newgraph
NULL

> 
> 
> 
> cleanEx()
> nameEx("max_flow")
> ### * max_flow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: max_flow
> ### Title: Maximum flow in a graph
> ### Aliases: max_flow
> 
> ### ** Examples
> 
> 
> E <- rbind(c(1, 3, 3), c(3, 4, 1), c(4, 2, 2), c(1, 5, 1), c(5, 6, 2), c(6, 2, 10))
> colnames(E) <- c("from", "to", "capacity")
> g1 <- graph_from_data_frame(as.data.frame(E))
> max_flow(g1, source = V(g1)["1"], target = V(g1)["2"])
$value
[1] 2

$flow
[1] 1 1 1 1 1 1

$cut
+ 2/6 edges from 799febc (vertex names):
[1] 3->4 1->5

$partition1
+ 2/6 vertices, named, from 799febc:
[1] 1 3

$partition2
+ 4/6 vertices, named, from 799febc:
[1] 4 5 6 2

$stats
$stats$nopush
[1] 4

$stats$norelabel
[1] 1

$stats$nogap
[1] 0

$stats$nogapnodes
[1] 0

$stats$nobfs
[1] 1


> 
> 
> 
> cleanEx()
> nameEx("merge_coords")
> ### * merge_coords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_coords
> ### Title: Merging graph layouts
> ### Aliases: merge_coords layout_components
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # create 20 scale-free graphs and place them in a common layout
> graphs <- lapply(sample(5:20, 20, replace = TRUE),
+   barabasi.game,
+   directed = FALSE
+ )
> layouts <- lapply(graphs, layout_with_kk)
> lay <- merge_coords(graphs, layouts)
> g <- disjoint_union(graphs)
> plot(g, layout = lay, vertex.size = 3, labels = NA, edge.color = "black")
> 
> 
> 
> cleanEx()
> nameEx("min_cut")
> ### * min_cut
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min_cut
> ### Title: Minimum cut in a graph
> ### Aliases: min_cut
> 
> ### ** Examples
> 
> g <- make_ring(100)
> min_cut(g, capacity = rep(1, vcount(g)))
[1] 2
> min_cut(g, value.only = FALSE, capacity = rep(1, vcount(g)))
$value
[1] 2

$cut
+ 2/100 edges from 5469c24:
[1] 1--2 2--3

$partition1
+ 1/100 vertex, from 5469c24:
[1] 2

$partition2
+ 99/100 vertices, from 5469c24:
 [1]   1   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20
[20]  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39
[39]  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58
[58]  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77
[77]  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96
[96]  97  98  99 100

> 
> g2 <- make_graph(c(1, 2, 2, 3, 3, 4, 1, 6, 6, 5, 5, 4, 4, 1))
> E(g2)$capacity <- c(3, 1, 2, 10, 1, 3, 2)
> min_cut(g2, value.only = FALSE)
$value
[1] 1

$cut
+ 1/7 edge from 651da7a:
[1] 2->3

$partition1
+ 1/6 vertex, from 651da7a:
[1] 2

$partition2
+ 5/6 vertices, from 651da7a:
[1] 1 3 4 5 6

> 
> 
> 
> cleanEx()
> nameEx("min_separators")
> ### * min_separators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min_separators
> ### Title: Minimum size vertex separators
> ### Aliases: min_separators
> 
> ### ** Examples
> 
> # The graph from the Moody-White paper
> mw <- graph_from_literal(
+   1 - 2:3:4:5:6, 2 - 3:4:5:7, 3 - 4:6:7, 4 - 5:6:7,
+   5 - 6:7:21, 6 - 7, 7 - 8:11:14:19, 8 - 9:11:14, 9 - 10,
+   10 - 12:13, 11 - 12:14, 12 - 16, 13 - 16, 14 - 15, 15 - 16,
+   17 - 18:19:20, 18 - 20:21, 19 - 20:22:23, 20 - 21,
+   21 - 22:23, 22 - 23
+ )
> 
> # Cohesive subgraphs
> mw1 <- induced_subgraph(mw, as.character(c(1:7, 17:23)))
> mw2 <- induced_subgraph(mw, as.character(7:16))
> mw3 <- induced_subgraph(mw, as.character(17:23))
> mw4 <- induced_subgraph(mw, as.character(c(7, 8, 11, 14)))
> mw5 <- induced_subgraph(mw, as.character(1:7))
> 
> min_separators(mw)
[[1]]
+ 1/23 vertex, named, from 1b69ff6:
[1] 7

> min_separators(mw1)
[[1]]
+ 2/14 vertices, named, from 4e09f26:
[1] 5  19

[[2]]
+ 2/14 vertices, named, from 4e09f26:
[1] 5 7

[[3]]
+ 2/14 vertices, named, from 4e09f26:
[1] 7  21

[[4]]
+ 2/14 vertices, named, from 4e09f26:
[1] 21 19

> min_separators(mw2)
[[1]]
+ 2/10 vertices, named, from f003cd2:
[1] 10 16

[[2]]
+ 2/10 vertices, named, from f003cd2:
[1] 14 16

[[3]]
+ 2/10 vertices, named, from f003cd2:
[1] 8  10

> min_separators(mw3)
[[1]]
+ 2/7 vertices, named, from 4278930:
[1] 21 19

> min_separators(mw4)
[[1]]
+ 3/4 vertices, named, from f11e279:
[1] 8  11 14

[[2]]
+ 3/4 vertices, named, from f11e279:
[1] 7  11 14

[[3]]
+ 3/4 vertices, named, from f11e279:
[1] 7  8  14

[[4]]
+ 3/4 vertices, named, from f11e279:
[1] 7  8  11

> min_separators(mw5)
[[1]]
+ 5/7 vertices, named, from a7ee449:
[1] 2 3 4 5 6

[[2]]
+ 5/7 vertices, named, from a7ee449:
[1] 1 3 4 5 7

[[3]]
+ 5/7 vertices, named, from a7ee449:
[1] 1 2 4 6 7

> 
> # Another example, the science camp network
> camp <- graph_from_literal(
+   Harry:Steve:Don:Bert - Harry:Steve:Don:Bert,
+   Pam:Brazey:Carol:Pat - Pam:Brazey:Carol:Pat,
+   Holly - Carol:Pat:Pam:Jennie:Bill,
+   Bill - Pauline:Michael:Lee:Holly,
+   Pauline - Bill:Jennie:Ann,
+   Jennie - Holly:Michael:Lee:Ann:Pauline,
+   Michael - Bill:Jennie:Ann:Lee:John,
+   Ann - Michael:Jennie:Pauline,
+   Lee - Michael:Bill:Jennie,
+   Gery - Pat:Steve:Russ:John,
+   Russ - Steve:Bert:Gery:John,
+   John - Gery:Russ:Michael
+ )
> min_separators(camp)
[[1]]
+ 2/18 vertices, named, from 6546d9a:
[1] Pat   Holly

[[2]]
+ 2/18 vertices, named, from 6546d9a:
[1] Pat     Michael

[[3]]
+ 2/18 vertices, named, from 6546d9a:
[1] Pat  John

[[4]]
+ 2/18 vertices, named, from 6546d9a:
[1] Holly Gery 

[[5]]
+ 2/18 vertices, named, from 6546d9a:
[1] Michael Gery   

[[6]]
+ 2/18 vertices, named, from 6546d9a:
[1] John Gery

[[7]]
+ 2/18 vertices, named, from 6546d9a:
[1] Gery Russ

[[8]]
+ 2/18 vertices, named, from 6546d9a:
[1] Holly   Michael

[[9]]
+ 2/18 vertices, named, from 6546d9a:
[1] Holly John 

[[10]]
+ 2/18 vertices, named, from 6546d9a:
[1] Steve Bert 

[[11]]
+ 2/18 vertices, named, from 6546d9a:
[1] Steve Russ 

> 
> 
> 
> cleanEx()
> nameEx("min_st_separators")
> ### * min_st_separators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min_st_separators
> ### Title: Minimum size vertex separators
> ### Aliases: min_st_separators
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ring <- make_ring(4)
> min_st_separators(ring)
[[1]]
+ 2/4 vertices, from 838c803:
[1] 2 4

[[2]]
+ 2/4 vertices, from 838c803:
[1] 1 3

> 
> chvatal <- make_graph("chvatal")
> min_st_separators(chvatal)
[[1]]
+ 4/12 vertices, from ad7b135:
[1]  7 10 11 12

[[2]]
+ 4/12 vertices, from ad7b135:
[1]  3  6  8 11

[[3]]
+ 4/12 vertices, from ad7b135:
[1]  2  7  9 12

[[4]]
+ 4/12 vertices, from ad7b135:
[1]  8 10 11 12

[[5]]
+ 4/12 vertices, from ad7b135:
[1]  6  9 11 12

[[6]]
+ 4/12 vertices, from ad7b135:
[1]  2  5  7 10

[[7]]
+ 4/12 vertices, from ad7b135:
[1] 1 3 6 8

[[8]]
+ 4/12 vertices, from ad7b135:
[1] 2 4 7 9

[[9]]
+ 4/12 vertices, from ad7b135:
[1]  3  5  8 10

[[10]]
+ 4/12 vertices, from ad7b135:
[1] 1 4 6 9

[[11]]
+ 4/12 vertices, from ad7b135:
[1] 1 2 4 5

[[12]]
+ 4/12 vertices, from ad7b135:
[1] 1 3 4 5

[[13]]
+ 6/12 vertices, from ad7b135:
[1]  3  6  8 10 11 12

[[14]]
+ 6/12 vertices, from ad7b135:
[1]  4  6  7  9 11 12

[[15]]
+ 6/12 vertices, from ad7b135:
[1]  2  4  5  7 10 12

[[16]]
+ 6/12 vertices, from ad7b135:
[1]  3  4  5  7 10 11

[[17]]
+ 6/12 vertices, from ad7b135:
[1]  6  7  8  9 11 12

[[18]]
+ 6/12 vertices, from ad7b135:
[1]  3  5  7  8 10 11

[[19]]
+ 6/12 vertices, from ad7b135:
[1]  3  4  6  7  9 11

[[20]]
+ 6/12 vertices, from ad7b135:
[1] 1 3 4 5 6 8

[[21]]
+ 6/12 vertices, from ad7b135:
[1]  1  2  6  8  9 12

[[22]]
+ 6/12 vertices, from ad7b135:
[1]  2  5  7  8 10 12

[[23]]
+ 6/12 vertices, from ad7b135:
[1] 1 2 4 5 7 9

[[24]]
+ 6/12 vertices, from ad7b135:
[1]  2  7  9 10 11 12

[[25]]
+ 6/12 vertices, from ad7b135:
[1]  1  6  8  9 11 12

[[26]]
+ 6/12 vertices, from ad7b135:
[1]  1  2  5  8 10 12

[[27]]
+ 6/12 vertices, from ad7b135:
[1]  1  3  5  8 10 11

[[28]]
+ 6/12 vertices, from ad7b135:
[1]  1  2  4  6  9 12

[[29]]
+ 6/12 vertices, from ad7b135:
[1]  1  3  4  6  9 11

[[30]]
+ 6/12 vertices, from ad7b135:
[1]  1  2  3  5  8 10

[[31]]
+ 6/12 vertices, from ad7b135:
[1] 1 2 3 4 6 9

[[32]]
+ 6/12 vertices, from ad7b135:
[1]  2  3  4  5  7 10

> # https://github.com/r-lib/roxygen2/issues/1092
> 
> 
> 
> cleanEx()
> nameEx("modularity.igraph")
> ### * modularity.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modularity.igraph
> ### Title: Modularity of a community structure of a graph
> ### Aliases: modularity.igraph modularity modularity_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> g <- add_edges(g, c(1, 6, 1, 11, 6, 11))
> wtc <- cluster_walktrap(g)
> modularity(wtc)
[1] 0.5757576
> modularity(g, membership(wtc))
[1] 0.5757576
> 
> 
> 
> 
> cleanEx()
> nameEx("motifs")
> ### * motifs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: motifs
> ### Title: Graph motifs
> ### Aliases: motifs
> 
> ### ** Examples
> 
> g <- sample_pa(100)
> motifs(g, 3)
 [1]  NA  NA 218  NA  84   0   0   0   0   0   0   0   0   0   0   0
> count_motifs(g, 3)
[1] 302
> sample_motifs(g, 3)
[1] 1630
> 
> 
> 
> cleanEx()
> nameEx("mst")
> ### * mst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mst
> ### Title: Minimum spanning tree
> ### Aliases: mst
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(100, 3 / 100)
> g_mst <- mst(g)
> 
> 
> 
> 
> cleanEx()
> nameEx("neighbors")
> ### * neighbors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: neighbors
> ### Title: Neighboring (adjacent) vertices in a graph
> ### Aliases: neighbors
> 
> ### ** Examples
> 
> g <- make_graph("Zachary")
> n1 <- neighbors(g, 1)
> n34 <- neighbors(g, 34)
> intersection(n1, n34)
+ 4/34 vertices, from 3a55a84:
[1]  9 14 20 32
> 
> 
> 
> cleanEx()
> nameEx("normalize")
> ### * normalize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normalize
> ### Title: Normalize layout
> ### Aliases: normalize
> 
> ### ** Examples
> 
> layout_(make_ring(10), with_fr(), normalize())
            [,1]         [,2]
 [1,] -0.8207916  0.605688142
 [2,] -0.3270981  0.993814648
 [3,]  0.2924472  1.000000000
 [4,]  0.7977725  0.622276868
 [5,]  1.0000000  0.008990313
 [6,]  0.8178785 -0.612140844
 [7,]  0.3236786 -0.996088575
 [8,] -0.2938867 -1.000000000
 [9,] -0.7987417 -0.624198963
[10,] -1.0000000 -0.011248004
> 
> 
> 
> cleanEx()
> nameEx("page_rank")
> ### * page_rank
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: page_rank
> ### Title: The Page Rank algorithm
> ### Aliases: page_rank
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(20, 5 / 20, directed = TRUE)
> page_rank(g)$vector
 [1] 0.02415871 0.05906972 0.02427847 0.06119213 0.03425670 0.05436372
 [7] 0.04780245 0.04442453 0.05452045 0.07496065 0.04482404 0.05251776
[13] 0.05420101 0.08136596 0.02386370 0.05885514 0.04351802 0.05392778
[19] 0.04288540 0.06501368
> 
> g2 <- make_star(10)
> page_rank(g2)$vector
 [1] 0.49008499 0.05665722 0.05665722 0.05665722 0.05665722 0.05665722
 [7] 0.05665722 0.05665722 0.05665722 0.05665722
> 
> # Personalized PageRank
> g3 <- make_ring(10)
> page_rank(g3)$vector
 [1] 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1
> reset <- seq(vcount(g3))
> page_rank(g3, personalized = reset)$vector
 [1] 0.08305627 0.07206568 0.07367581 0.08203783 0.09368592 0.10631408
 [7] 0.11796217 0.12632419 0.12793432 0.11694373
> 
> 
> 
> cleanEx()
> nameEx("path")
> ### * path
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: path
> ### Title: Helper function to add or delete edges along a path
> ### Aliases: path
> 
> ### ** Examples
> 
> # Create a (directed) wheel
> g <- make_star(11, center = 1) + path(2:11, 2)
> plot(g)
> 
> g <- make_empty_graph(directed = FALSE, n = 10) %>%
+   set_vertex_attr("name", value = letters[1:10])
> 
> g2 <- g + path("a", "b", "c", "d")
> plot(g2)
> 
> g3 <- g2 + path("e", "f", "g", weight = 1:2, color = "red")
> E(g3)[[]]
+ 5/5 edges from 1750048 (vertex names):
  tail head tid hid weight color
1    a    b   1   2     NA  <NA>
2    b    c   2   3     NA  <NA>
3    c    d   3   4     NA  <NA>
4    e    f   5   6      1   red
5    f    g   6   7      2   red
> 
> g4 <- g3 + path(c("f", "c", "j", "d"), width = 1:3, color = "green")
> E(g4)[[]]
+ 8/8 edges from 15ea0d0 (vertex names):
  tail head tid hid weight color width
1    a    b   1   2     NA  <NA>    NA
2    b    c   2   3     NA  <NA>    NA
3    c    d   3   4     NA  <NA>    NA
4    e    f   5   6      1   red    NA
5    f    g   6   7      2   red    NA
6    c    f   3   6     NA green     1
7    c    j   3  10     NA green     2
8    d    j   4  10     NA green     3
> 
> 
> 
> cleanEx()
> nameEx("permute")
> ### * permute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: permute
> ### Title: Permute the vertices of a graph
> ### Aliases: permute
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Random permutation of a random graph
> g <- sample_gnm(20, 50)
> g2 <- permute(g, sample(vcount(g)))
> graph.isomorphic(g, g2)
[1] TRUE
> 
> # Permutation keeps all attributes
> g$name <- "Random graph, Gnm, 20, 50"
> V(g)$name <- letters[1:vcount(g)]
> E(g)$weight <- sample(1:5, ecount(g), replace = TRUE)
> g2 <- permute(g, sample(vcount(g)))
> graph.isomorphic(g, g2)
[1] TRUE
> g2$name
[1] "Random graph, Gnm, 20, 50"
> V(g2)$name
 [1] "h" "j" "a" "p" "s" "l" "c" "k" "i" "q" "n" "g" "m" "d" "o" "f" "r" "t" "e"
[20] "b"
> E(g2)$weight
 [1] 4 5 1 1 4 5 5 4 5 4 4 1 5 5 1 1 3 2 2 3 2 4 3 5 2 2 1 3 3 2 2 5 2 5 4 5 4 1
[39] 3 2 3 3 1 5 4 4 1 5 5 1
> all(sort(E(g2)$weight) == sort(E(g)$weight))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("pipe")
> ### * pipe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: %>%
> ### Title: Magrittr's pipes
> ### Aliases: %>%
> 
> ### ** Examples
> 
> make_ring(10) %>%
+   add_edges(c(1, 6)) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("plot.common")
> ### * plot.common
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Drawing graphs
> ### Title: Drawing graphs
> ### Aliases: igraph.plotting
> ### Keywords: graphs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # plotting a simple ring graph, all default parameters, except the layout
> ##D g <- make_ring(10)
> ##D g$layout <- layout_in_circle
> ##D plot(g)
> ##D tkplot(g)
> ##D rglplot(g)
> ##D 
> ##D # plotting a random graph, set the parameters in the command arguments
> ##D g <- barabasi.game(100)
> ##D plot(g, layout=layout_with_fr, vertex.size=4,
> ##D      vertex.label.dist=0.5, vertex.color="red", edge.arrow.size=0.5)
> ##D 
> ##D # plot a random graph, different color for each component
> ##D g <- sample_gnp(100, 1/100)
> ##D comps <- components(g)$membership
> ##D colbar <- rainbow(max(comps)+1)
> ##D V(g)$color <- colbar[comps+1]
> ##D plot(g, layout=layout_with_fr, vertex.size=5, vertex.label=NA)
> ##D 
> ##D # plot communities in a graph
> ##D g <- make_full_graph(5) %du% make_full_graph(5) %du% make_full_graph(5)
> ##D g <- add_edges(g, c(1,6, 1,11, 6,11))
> ##D com <- cluster_spinglass(g, spins=5)
> ##D V(g)$color <- com$membership+1
> ##D g <- set_graph_attr(g, "layout", layout_with_kk(g))
> ##D plot(g, vertex.label.dist=1.5)
> ##D 
> ##D # draw a bunch of trees, fix layout
> ##D igraph_options(plot.layout=layout_as_tree)
> ##D plot(make_tree(20, 2))
> ##D plot(make_tree(50, 3), vertex.size=3, vertex.label=NA)
> ##D tkplot(make_tree(50, 2, mode="undirected"), vertex.size=10,
> ##D vertex.color="green")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("plot.igraph")
> ### * plot.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.igraph
> ### Title: Plotting of graphs
> ### Aliases: plot.igraph plot.graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> plot(g, layout = layout_with_kk, vertex.color = "green")
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.sir")
> ### * plot.sir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.sir
> ### Title: Plotting the results on multiple SIR model runs
> ### Aliases: plot.sir
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(100, 100)
> sm <- sir(g, beta = 5, gamma = 1)
> plot(sm)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_dendrogram.communities")
> ### * plot_dendrogram.communities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dendrogram
> ### Title: Community structure dendrogram plots
> ### Aliases: plot_dendrogram plot_dendrogram.communities
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> karate <- make_graph("Zachary")
> fc <- cluster_fast_greedy(karate)
> plot_dendrogram(fc)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot_dendrogram.igraphHRG")
> ### * plot_dendrogram.igraphHRG
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dendrogram.igraphHRG
> ### Title: HRG dendrogram plot
> ### Aliases: plot_dendrogram.igraphHRG
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(5) + make_full_graph(5)
> hrg <- fit_hrg(g)
> plot_dendrogram(hrg)
> 
> 
> 
> 
> cleanEx()
> nameEx("plus-.igraph")
> ### * plus-.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: +.igraph
> ### Title: Add vertices, edges or another graph to a graph
> ### Aliases: +.igraph
> 
> ### ** Examples
> 
> # 10 vertices named a,b,c,... and no edges
> g <- make_empty_graph() + vertices(letters[1:10])
> 
> # Add edges to make it a ring
> g <- g + path(letters[1:10], letters[1], color = "grey")
> 
> # Add some extra random edges
> g <- g + edges(sample(V(g), 10, replace = TRUE), color = "red")
> g$layout <- layout_in_circle
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("power_centrality")
> ### * power_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power_centrality
> ### Title: Find Bonacich Power Centrality Scores of Network Positions
> ### Aliases: power_centrality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Generate some test data from Bonacich, 1987:
> g.c <- make_graph(c(1, 2, 1, 3, 2, 4, 3, 5), dir = FALSE)
> g.d <- make_graph(c(1, 2, 1, 3, 1, 4, 2, 5, 3, 6, 4, 7), dir = FALSE)
> g.e <- make_graph(c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 3, 7, 3, 8, 4, 9, 4, 10), dir = FALSE)
> g.f <- make_graph(
+   c(1, 2, 1, 3, 1, 4, 2, 5, 2, 6, 2, 7, 3, 8, 3, 9, 3, 10, 4, 11, 4, 12, 4, 13),
+   dir = FALSE
+ )
> # Compute power centrality scores
> for (e in seq(-0.5, .5, by = 0.1)) {
+   print(round(power_centrality(g.c, exp = e)[c(1, 2, 4)], 2))
+ }
[1] 0.00 1.58 0.00
[1] 0.73 1.45 0.36
[1] 0.97 1.34 0.49
[1] 1.09 1.27 0.54
[1] 1.15 1.23 0.58
[1] 1.2 1.2 0.6
[1] 1.22 1.17 0.61
[1] 1.25 1.16 0.62
[1] 1.26 1.14 0.63
[1] 1.27 1.13 0.64
[1] 1.28 1.12 0.64
> 
> for (e in seq(-0.4, .4, by = 0.1)) {
+   print(round(power_centrality(g.d, exp = e)[c(1, 2, 5)], 2))
+ }
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
[1] 1.62 1.08 0.54
> 
> for (e in seq(-0.4, .4, by = 0.1)) {
+   print(round(power_centrality(g.e, exp = e)[c(1, 2, 5)], 2))
+ }
[1] -1.00  1.67 -0.33
[1] 0.36 1.81 0.12
[1] 1.00 1.67 0.33
[1] 1.30 1.55 0.43
[1] 1.46 1.46 0.49
[1] 1.57 1.40 0.52
[1] 1.63 1.36 0.54
[1] 1.68 1.33 0.56
[1] 1.72 1.30 0.57
> 
> for (e in seq(-0.4, .4, by = 0.1)) {
+   print(round(power_centrality(g.f, exp = e)[c(1, 2, 5)], 2))
+ }
[1] -1.72  1.53 -0.57
[1] -0.55  2.03 -0.18
[1] 0.44 2.05 0.15
[1] 1.01 1.91 0.34
[1] 1.33 1.78 0.44
[1] 1.52 1.67 0.51
[1] 1.65 1.59 0.55
[1] 1.74 1.53 0.58
[1] 1.80 1.48 0.60
> 
> 
> 
> 
> cleanEx()
> nameEx("predict_edges")
> ### * predict_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict_edges
> ### Title: Predict edges based on a hierarchical random graph model
> ### Aliases: predict_edges
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ 
+ ## A graph with two dense groups
+ g <- sample_gnp(10, p = 1 / 2) + sample_gnp(10, p = 1 / 2)
+ hrg <- fit_hrg(g)
+ hrg
+ 
+ ## The consensus tree for it
+ consensus_tree(g, hrg = hrg, start = TRUE)
+ 
+ ## Prediction of missing edges
+ g2 <- make_full_graph(4) + (make_full_graph(4) - path(1, 2))
+ predict_edges(g2)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("print.igraph")
> ### * print.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.igraph
> ### Title: Print graphs to the terminal
> ### Aliases: print.igraph print_all summary.igraph str.igraph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g
IGRAPH 434612e U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 434612e:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> summary(g)
IGRAPH 434612e U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
> 
> 
> 
> 
> cleanEx()
> nameEx("print.igraph.es")
> ### * print.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.igraph.es
> ### Title: Print an edge sequence to the screen
> ### Aliases: print.igraph.es
> 
> ### ** Examples
> 
> # Unnamed graphs
> g <- make_ring(10)
> E(g)
+ 10/10 edges from 7dfe72d:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> # Named graphs
> g2 <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10])
> E(g2)
+ 10/10 edges from 9c3f3c2 (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> 
> # All edges in a long sequence
> g3 <- make_ring(200)
> E(g3)
+ 200/200 edges from 4fb95d7:
 [1]  1-- 2  2-- 3  3-- 4  4-- 5  5-- 6  6-- 7  7-- 8  8-- 9  9--10 10--11
[11] 11--12 12--13 13--14 14--15 15--16 16--17 17--18 18--19 19--20 20--21
[21] 21--22 22--23 23--24 24--25 25--26 26--27 27--28 28--29 29--30 30--31
[31] 31--32 32--33 33--34 34--35 35--36 36--37 37--38 38--39 39--40 40--41
[41] 41--42 42--43 43--44 44--45 45--46 46--47 47--48 48--49 49--50 50--51
[51] 51--52 52--53 53--54 54--55 55--56 56--57 57--58 58--59 59--60 60--61
[61] 61--62 62--63 63--64 64--65 65--66 66--67 67--68 68--69 69--70 70--71
[71] 71--72 72--73 73--74 74--75 75--76 76--77 77--78 78--79 79--80 80--81
[81] 81--82 82--83 83--84 84--85 85--86 86--87 87--88 88--89 89--90 90--91
[91] 91--92 92--93 93--94 94--95 95--96 96--97 97--98 98--99
+ ... omitted several edges
> E(g3) %>% print(full = TRUE)
+ 200/200 edges from 4fb95d7:
  [1]   1--  2   2--  3   3--  4   4--  5   5--  6   6--  7   7--  8   8--  9
  [9]   9-- 10  10-- 11  11-- 12  12-- 13  13-- 14  14-- 15  15-- 16  16-- 17
 [17]  17-- 18  18-- 19  19-- 20  20-- 21  21-- 22  22-- 23  23-- 24  24-- 25
 [25]  25-- 26  26-- 27  27-- 28  28-- 29  29-- 30  30-- 31  31-- 32  32-- 33
 [33]  33-- 34  34-- 35  35-- 36  36-- 37  37-- 38  38-- 39  39-- 40  40-- 41
 [41]  41-- 42  42-- 43  43-- 44  44-- 45  45-- 46  46-- 47  47-- 48  48-- 49
 [49]  49-- 50  50-- 51  51-- 52  52-- 53  53-- 54  54-- 55  55-- 56  56-- 57
 [57]  57-- 58  58-- 59  59-- 60  60-- 61  61-- 62  62-- 63  63-- 64  64-- 65
 [65]  65-- 66  66-- 67  67-- 68  68-- 69  69-- 70  70-- 71  71-- 72  72-- 73
 [73]  73-- 74  74-- 75  75-- 76  76-- 77  77-- 78  78-- 79  79-- 80  80-- 81
 [81]  81-- 82  82-- 83  83-- 84  84-- 85  85-- 86  86-- 87  87-- 88  88-- 89
 [89]  89-- 90  90-- 91  91-- 92  92-- 93  93-- 94  94-- 95  95-- 96  96-- 97
 [97]  97-- 98  98-- 99  99--100 100--101 101--102 102--103 103--104 104--105
[105] 105--106 106--107 107--108 108--109 109--110 110--111 111--112 112--113
[113] 113--114 114--115 115--116 116--117 117--118 118--119 119--120 120--121
[121] 121--122 122--123 123--124 124--125 125--126 126--127 127--128 128--129
[129] 129--130 130--131 131--132 132--133 133--134 134--135 135--136 136--137
[137] 137--138 138--139 139--140 140--141 141--142 142--143 143--144 144--145
[145] 145--146 146--147 147--148 148--149 149--150 150--151 151--152 152--153
[153] 153--154 154--155 155--156 156--157 157--158 158--159 159--160 160--161
[161] 161--162 162--163 163--164 164--165 165--166 166--167 167--168 168--169
[169] 169--170 170--171 171--172 172--173 173--174 174--175 175--176 176--177
[177] 177--178 178--179 179--180 180--181 181--182 182--183 183--184 184--185
[185] 185--186 186--187 187--188 188--189 189--190 190--191 191--192 192--193
[193] 193--194 194--195 195--196 196--197 197--198 198--199 199--200   1--200
> 
> # Metadata
> g4 <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10]) %>%
+   set_edge_attr("weight", value = 1:10) %>%
+   set_edge_attr("color", value = "green")
> E(g4)
+ 10/10 edges from e5b3125 (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> E(g4)[[]]
+ 10/10 edges from e5b3125 (vertex names):
   tail head tid hid weight color
1     A    B   1   2      1 green
2     B    C   2   3      2 green
3     C    D   3   4      3 green
4     D    E   4   5      4 green
5     E    F   5   6      5 green
6     F    G   6   7      6 green
7     G    H   7   8      7 green
8     H    I   8   9      8 green
9     I    J   9  10      9 green
10    A    J   1  10     10 green
> E(g4)[[1:5]]
+ 5/10 edges from e5b3125 (vertex names):
  tail head tid hid weight color
1    A    B   1   2      1 green
2    B    C   2   3      2 green
3    C    D   3   4      3 green
4    D    E   4   5      4 green
5    E    F   5   6      5 green
> 
> 
> 
> cleanEx()
> nameEx("print.igraph.vs")
> ### * print.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.igraph.vs
> ### Title: Show a vertex sequence on the screen
> ### Aliases: print.igraph.vs
> 
> ### ** Examples
> 
> # Unnamed graphs
> g <- make_ring(10)
> V(g)
+ 10/10 vertices, from 830c5d5:
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> # Named graphs
> g2 <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10])
> V(g2)
+ 10/10 vertices, named, from 8a5fe2a:
 [1] A B C D E F G H I J
> 
> # All vertices in the sequence
> g3 <- make_ring(1000)
> V(g3)
+ 1000/1000 vertices, from 8e383a3:
   [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14
  [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28
  [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42
  [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56
  [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70
  [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84
  [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98
  [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112
 [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126
 [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140
+ ... omitted several vertices
> print(V(g3), full = TRUE)
+ 1000/1000 vertices, from 8e383a3:
   [1]    1    2    3    4    5    6    7    8    9   10   11   12   13   14
  [15]   15   16   17   18   19   20   21   22   23   24   25   26   27   28
  [29]   29   30   31   32   33   34   35   36   37   38   39   40   41   42
  [43]   43   44   45   46   47   48   49   50   51   52   53   54   55   56
  [57]   57   58   59   60   61   62   63   64   65   66   67   68   69   70
  [71]   71   72   73   74   75   76   77   78   79   80   81   82   83   84
  [85]   85   86   87   88   89   90   91   92   93   94   95   96   97   98
  [99]   99  100  101  102  103  104  105  106  107  108  109  110  111  112
 [113]  113  114  115  116  117  118  119  120  121  122  123  124  125  126
 [127]  127  128  129  130  131  132  133  134  135  136  137  138  139  140
 [141]  141  142  143  144  145  146  147  148  149  150  151  152  153  154
 [155]  155  156  157  158  159  160  161  162  163  164  165  166  167  168
 [169]  169  170  171  172  173  174  175  176  177  178  179  180  181  182
 [183]  183  184  185  186  187  188  189  190  191  192  193  194  195  196
 [197]  197  198  199  200  201  202  203  204  205  206  207  208  209  210
 [211]  211  212  213  214  215  216  217  218  219  220  221  222  223  224
 [225]  225  226  227  228  229  230  231  232  233  234  235  236  237  238
 [239]  239  240  241  242  243  244  245  246  247  248  249  250  251  252
 [253]  253  254  255  256  257  258  259  260  261  262  263  264  265  266
 [267]  267  268  269  270  271  272  273  274  275  276  277  278  279  280
 [281]  281  282  283  284  285  286  287  288  289  290  291  292  293  294
 [295]  295  296  297  298  299  300  301  302  303  304  305  306  307  308
 [309]  309  310  311  312  313  314  315  316  317  318  319  320  321  322
 [323]  323  324  325  326  327  328  329  330  331  332  333  334  335  336
 [337]  337  338  339  340  341  342  343  344  345  346  347  348  349  350
 [351]  351  352  353  354  355  356  357  358  359  360  361  362  363  364
 [365]  365  366  367  368  369  370  371  372  373  374  375  376  377  378
 [379]  379  380  381  382  383  384  385  386  387  388  389  390  391  392
 [393]  393  394  395  396  397  398  399  400  401  402  403  404  405  406
 [407]  407  408  409  410  411  412  413  414  415  416  417  418  419  420
 [421]  421  422  423  424  425  426  427  428  429  430  431  432  433  434
 [435]  435  436  437  438  439  440  441  442  443  444  445  446  447  448
 [449]  449  450  451  452  453  454  455  456  457  458  459  460  461  462
 [463]  463  464  465  466  467  468  469  470  471  472  473  474  475  476
 [477]  477  478  479  480  481  482  483  484  485  486  487  488  489  490
 [491]  491  492  493  494  495  496  497  498  499  500  501  502  503  504
 [505]  505  506  507  508  509  510  511  512  513  514  515  516  517  518
 [519]  519  520  521  522  523  524  525  526  527  528  529  530  531  532
 [533]  533  534  535  536  537  538  539  540  541  542  543  544  545  546
 [547]  547  548  549  550  551  552  553  554  555  556  557  558  559  560
 [561]  561  562  563  564  565  566  567  568  569  570  571  572  573  574
 [575]  575  576  577  578  579  580  581  582  583  584  585  586  587  588
 [589]  589  590  591  592  593  594  595  596  597  598  599  600  601  602
 [603]  603  604  605  606  607  608  609  610  611  612  613  614  615  616
 [617]  617  618  619  620  621  622  623  624  625  626  627  628  629  630
 [631]  631  632  633  634  635  636  637  638  639  640  641  642  643  644
 [645]  645  646  647  648  649  650  651  652  653  654  655  656  657  658
 [659]  659  660  661  662  663  664  665  666  667  668  669  670  671  672
 [673]  673  674  675  676  677  678  679  680  681  682  683  684  685  686
 [687]  687  688  689  690  691  692  693  694  695  696  697  698  699  700
 [701]  701  702  703  704  705  706  707  708  709  710  711  712  713  714
 [715]  715  716  717  718  719  720  721  722  723  724  725  726  727  728
 [729]  729  730  731  732  733  734  735  736  737  738  739  740  741  742
 [743]  743  744  745  746  747  748  749  750  751  752  753  754  755  756
 [757]  757  758  759  760  761  762  763  764  765  766  767  768  769  770
 [771]  771  772  773  774  775  776  777  778  779  780  781  782  783  784
 [785]  785  786  787  788  789  790  791  792  793  794  795  796  797  798
 [799]  799  800  801  802  803  804  805  806  807  808  809  810  811  812
 [813]  813  814  815  816  817  818  819  820  821  822  823  824  825  826
 [827]  827  828  829  830  831  832  833  834  835  836  837  838  839  840
 [841]  841  842  843  844  845  846  847  848  849  850  851  852  853  854
 [855]  855  856  857  858  859  860  861  862  863  864  865  866  867  868
 [869]  869  870  871  872  873  874  875  876  877  878  879  880  881  882
 [883]  883  884  885  886  887  888  889  890  891  892  893  894  895  896
 [897]  897  898  899  900  901  902  903  904  905  906  907  908  909  910
 [911]  911  912  913  914  915  916  917  918  919  920  921  922  923  924
 [925]  925  926  927  928  929  930  931  932  933  934  935  936  937  938
 [939]  939  940  941  942  943  944  945  946  947  948  949  950  951  952
 [953]  953  954  955  956  957  958  959  960  961  962  963  964  965  966
 [967]  967  968  969  970  971  972  973  974  975  976  977  978  979  980
 [981]  981  982  983  984  985  986  987  988  989  990  991  992  993  994
 [995]  995  996  997  998  999 1000
> 
> # Metadata
> g4 <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10]) %>%
+   set_vertex_attr("color", value = "red")
> V(g4)[[]]
+ 10/10 vertices, named, from e983263:
   name color
1     A   red
2     B   red
3     C   red
4     D   red
5     E   red
6     F   red
7     G   red
8     H   red
9     I   red
10    J   red
> V(g4)[[2:5, 7:8]]
+ 6/10 vertices, named, from e983263:
  name color
2    B   red
3    C   red
4    D   red
5    E   red
7    G   red
8    H   red
> 
> 
> 
> cleanEx()
> nameEx("radius")
> ### * radius
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: radius
> ### Title: Radius of a graph
> ### Aliases: radius
> 
> ### ** Examples
> 
> g <- make_star(10, mode = "undirected")
> eccentricity(g)
 [1] 1 2 2 2 2 2 2 2 2 2
> radius(g)
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("random_walk")
> ### * random_walk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: random_walk
> ### Title: Random walk on a graph
> ### Aliases: random_walk random_edge_walk
> 
> ### ** Examples
> 
> ## Stationary distribution of a Markov chain
> g <- make_ring(10, directed = TRUE) %u%
+   make_star(11, center = 11) + edge(11, 1)
> 
> ec <- eigen_centrality(g, directed = TRUE)$vector
> pg <- page_rank(g, damping = 0.999)$vector
> w <- random_walk(g, start = 1, steps = 10000)
> 
> ## These are similar, but not exactly the same
> cor(table(w), ec)
[1] 0.9626783
> 
> ## But these are (almost) the same
> cor(table(w), pg)
[1] 0.9999176
> 
> 
> 
> cleanEx()
> nameEx("realize_bipartite_degseq")
> ### * realize_bipartite_degseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: realize_bipartite_degseq
> ### Title: Creating a bipartite graph from two degree sequences,
> ###   deterministically
> ### Aliases: realize_bipartite_degseq
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- realize_bipartite_degseq(c(3, 3, 2, 1, 1), c(2, 2, 2, 2, 2))
> degree(g)
 [1] 3 3 2 1 1 2 2 2 2 2
> 
> 
> 
> cleanEx()
> nameEx("realize_degseq")
> ### * realize_degseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: realize_degseq
> ### Title: Creating a graph from a given degree sequence, deterministically
> ### Aliases: realize_degseq
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- realize_degseq(rep(2, 100))
> degree(g)
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> is_simple(g)
[1] TRUE
> 
> ## Exponential degree distribution, with high positive assortativity.
> ## Loop and multiple edges are explicitly allowed.
> ## Note that we correct the degree sequence if its sum is odd.
> degs <- sample(1:100, 100, replace = TRUE, prob = exp(-0.5 * (1:100)))
> if (sum(degs) %% 2 != 0) {
+   degs[1] <- degs[1] + 1
+ }
> g4 <- realize_degseq(degs, method = "largest", allowed.edge.types = "all")
> all(degree(g4) == degs)
[1] TRUE
> 
> ## Power-law degree distribution, no loops allowed but multiple edges
> ## are okay.
> ## Note that we correct the degree sequence if its sum is odd.
> degs <- sample(1:100, 100, replace = TRUE, prob = (1:100)^-2)
> if (sum(degs) %% 2 != 0) {
+   degs[1] <- degs[1] + 1
+ }
> g5 <- realize_degseq(degs, allowed.edge.types = "multi")
> all(degree(g5) == degs)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("reciprocity")
> ### * reciprocity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reciprocity
> ### Title: Reciprocity of graphs
> ### Aliases: reciprocity
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(20, 5 / 20, directed = TRUE)
> reciprocity(g)
[1] 0.3809524
> 
> 
> 
> 
> cleanEx()
> nameEx("rep.igraph")
> ### * rep.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rep.igraph
> ### Title: Replicate a graph multiple times
> ### Aliases: rep.igraph *.igraph
> 
> ### ** Examples
> 
> rings <- make_ring(5) * 5
> 
> 
> 
> cleanEx()
> nameEx("rev.igraph.es")
> ### * rev.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rev.igraph.es
> ### Title: Reverse the order in an edge sequence
> ### Aliases: rev.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> E(g)
+ 10/10 edges from c990a2e (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> E(g) %>% rev()
+ 10/10 edges from c990a2e (vertex names):
 [1] A--J I--J H--I G--H F--G E--F D--E C--D B--C A--B
> 
> 
> 
> cleanEx()
> nameEx("rev.igraph.vs")
> ### * rev.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rev.igraph.vs
> ### Title: Reverse the order in a vertex sequence
> ### Aliases: rev.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> V(g) %>% rev()
+ 10/10 vertices, named, from eb5892c:
 [1] J I H G F E D C B A
> 
> 
> 
> cleanEx()
> nameEx("reverse_edges")
> ### * reverse_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reverse_edges
> ### Title: Reverse edges in a graph
> ### Aliases: reverse_edges t.igraph
> 
> ### ** Examples
> 
> 
> g <- make_graph(~ 1 -+ 2, 2 -+ 3, 3 -+ 4)
> reverse_edges(g, 2)
IGRAPH 15d4fbf DN-- 4 3 -- 
+ attr: name (v/c)
+ edges from 15d4fbf (vertex names):
[1] 1->2 3->2 3->4
> 
> 
> 
> cleanEx()
> nameEx("rewire")
> ### * rewire
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rewire
> ### Title: Rewiring edges of a graph
> ### Aliases: rewire
> 
> ### ** Examples
> 
> g <- make_ring(10)
> g %>%
+   rewire(each_edge(p = .1, loops = FALSE)) %>%
+   plot(layout = layout_in_circle)
> print_all(rewire(g, with = keeping_degseq(niter = vcount(g) * 10)))
IGRAPH e4c78d8 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ graph attributes:
| + name:
|   [1] "Ring graph"
| + mutual:
|   [1] FALSE
| + circular:
|   [1] TRUE
+ edges from e4c78d8:
 [1] 6--10 4-- 5 1-- 4 3-- 6 1--10 2-- 7 2-- 8 3-- 9 5-- 7 8-- 9
> 
> 
> 
> cleanEx()
> nameEx("rglplot")
> ### * rglplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rglplot
> ### Title: 3D plotting of graphs with OpenGL
> ### Aliases: rglplot rglplot.igraph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_lattice(c(5, 5, 5))
> coords <- layout_with_fr(g, dim = 3)
> if (interactive() && requireNamespace("rgl", quietly = TRUE)) {
+   rglplot(g, layout = coords)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("running_mean")
> ### * running_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: running_mean
> ### Title: Running mean of a time series
> ### Aliases: running_mean
> ### Keywords: manip
> 
> ### ** Examples
> 
> 
> running_mean(1:100, 10)
 [1]  5.5  6.5  7.5  8.5  9.5 10.5 11.5 12.5 13.5 14.5 15.5 16.5 17.5 18.5 19.5
[16] 20.5 21.5 22.5 23.5 24.5 25.5 26.5 27.5 28.5 29.5 30.5 31.5 32.5 33.5 34.5
[31] 35.5 36.5 37.5 38.5 39.5 40.5 41.5 42.5 43.5 44.5 45.5 46.5 47.5 48.5 49.5
[46] 50.5 51.5 52.5 53.5 54.5 55.5 56.5 57.5 58.5 59.5 60.5 61.5 62.5 63.5 64.5
[61] 65.5 66.5 67.5 68.5 69.5 70.5 71.5 72.5 73.5 74.5 75.5 76.5 77.5 78.5 79.5
[76] 80.5 81.5 82.5 83.5 84.5 85.5 86.5 87.5 88.5 89.5 90.5 91.5 92.5 93.5 94.5
[91] 95.5
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_")
> ### * sample_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_
> ### Title: Sample from a random graph model
> ### Aliases: sample_
> 
> ### ** Examples
> 
> pref_matrix <- cbind(c(0.8, 0.1), c(0.1, 0.7))
> blocky <- sample_(sbm(
+   n = 20, pref.matrix = pref_matrix,
+   block.sizes = c(10, 10)
+ ))
> 
> blocky2 <- pref_matrix %>%
+   sample_sbm(n = 20, block.sizes = c(10, 10))
> 
> ## Arguments are passed on from sample_ to sample_sbm
> blocky3 <- pref_matrix %>%
+   sample_(sbm(), n = 20, block.sizes = c(10, 10))
> 
> 
> 
> cleanEx()
> nameEx("sample_bipartite")
> ### * sample_bipartite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_bipartite
> ### Title: Bipartite random graphs
> ### Aliases: sample_bipartite bipartite
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## empty graph
> sample_bipartite(10, 5, p = 0)
IGRAPH c167145 U--B 15 0 -- Bipartite Gnp random graph
+ attr: name (g/c), p (g/n), type (v/l)
+ edges from c167145:
> 
> ## full graph
> sample_bipartite(10, 5, p = 1)
IGRAPH 58748e0 U--B 15 50 -- Bipartite Gnp random graph
+ attr: name (g/c), p (g/n), type (v/l)
+ edges from 58748e0:
 [1]  1--11  1--12  1--13  1--14  1--15  2--11  2--12  2--13  2--14  2--15
[11]  3--11  3--12  3--13  3--14  3--15  4--11  4--12  4--13  4--14  4--15
[21]  5--11  5--12  5--13  5--14  5--15  6--11  6--12  6--13  6--14  6--15
[31]  7--11  7--12  7--13  7--14  7--15  8--11  8--12  8--13  8--14  8--15
[41]  9--11  9--12  9--13  9--14  9--15 10--11 10--12 10--13 10--14 10--15
> 
> ## random bipartite graph
> sample_bipartite(10, 5, p = .1)
IGRAPH 54eb00a U--B 15 4 -- Bipartite Gnp random graph
+ attr: name (g/c), p (g/n), type (v/l)
+ edges from 54eb00a:
[1] 7--11 1--12 5--14 9--14
> 
> ## directed bipartite graph, G(n,m)
> sample_bipartite(10, 5, type = "Gnm", m = 20, directed = TRUE, mode = "all")
IGRAPH af2272b D--B 15 20 -- Bipartite Gnm random graph
+ attr: name (g/c), m (g/n), type (v/l)
+ edges from af2272b:
 [1]  2->11  3->11  8->11 10->11  1->12 10->12  3->13  4->14  1->15  6->15
[11] 14-> 3 13-> 4 14-> 4 13-> 5 11-> 6 14-> 6 13-> 7 15-> 8 11-> 9 13->10
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_chung_lu")
> ### * sample_chung_lu
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_chung_lu
> ### Title: Random graph with given expected degrees
> ### Aliases: sample_chung_lu chung_lu
> 
> ### ** Examples
> 
> 
> g <- sample_chung_lu(c(3, 3, 2, 2, 2, 1, 1))
> 
> rowMeans(replicate(
+   100,
+   degree(sample_chung_lu(c(1, 3, 2, 1), c(2, 1, 2, 2)), mode = "out")
+ ))
[1] 1.03 3.01 2.02 0.94
> 
> rowMeans(replicate(
+   100,
+   degree(sample_chung_lu(c(1, 3, 2, 1), c(2, 1, 2, 2), variant = "maxent"), mode='out')
+ ))
[1] 0.77 1.51 1.36 0.69
> 
> 
> 
> cleanEx()
> nameEx("sample_correlated_gnp")
> ### * sample_correlated_gnp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_correlated_gnp
> ### Title: Generate a new random graph from a given graph by randomly
> ###   adding/removing edges
> ### Aliases: sample_correlated_gnp
> 
> ### ** Examples
> 
> g <- sample_gnp(1000, .1)
> g2 <- sample_correlated_gnp(g, corr = 0.5)
> cor(as.vector(g[]), as.vector(g2[]))
[1] 0.4978102
> g
IGRAPH dc283ae U--- 1000 49716 -- Erdos-Renyi (gnp) graph
+ attr: name (g/c), type (g/c), loops (g/l), p (g/n)
+ edges from dc283ae:
 [1]  1-- 5  1-- 6  7-- 9  3--10  9--12 12--13  3--15  6--15 13--16  2--17
[11]  6--17 14--17  4--18  6--18  7--20 11--20 12--20 15--21 12--22 19--22
[21]  9--23 22--23  9--24 20--24 23--24 12--25  9--26 24--26  7--27 17--27
[31] 20--27  9--28 11--28 24--28  3--29  7--29 16--29 12--30 15--30 21--30
[41] 24--30  8--31 11--31 14--31 15--31 17--31 26--31  1--32  5--32 13--32
[51] 31--32  6--33 13--33 24--33  2--34 13--34 18--34 23--34 29--34 32--34
[61]  6--35 10--35  8--36  9--36 15--36 20--36 31--36  7--37 35--37  4--38
[71] 11--38 12--38 22--38 23--38  2--39 14--39 27--39 29--39  4--40 17--40
+ ... omitted several edges
> g2
IGRAPH e4d7c6e U--- 1000 49945 -- Correlated random graph
+ attr: name (g/c), corr (g/n), p (g/n)
+ edges from e4d7c6e:
 [1]  2-- 3  1-- 4  1-- 5  4-- 5  1-- 6  7-- 9  4--11  1--12  4--12  6--12
[11]  5--16  6--17 14--17  3--18  4--18  6--18 12--20 18--20  2--21 15--21
[21] 15--22 18--22 19--22  6--23  9--24 20--24 14--25 24--25 24--26  8--27
[31] 17--27 18--27 20--27  5--28  9--28 11--28 25--28 26--28  8--29  9--29
[41] 24--30 29--30 11--31 16--31 26--31  1--32  8--32  9--32 13--32 13--33
[51] 18--33 24--33  2--34 18--34 22--34 29--34 30--34 32--34  6--35  9--35
[61] 10--35 28--35  5--36  8--36 15--36 22--36 11--38 12--38 23--38 25--38
[71]  5--39 14--39  3--40 17--40 32--40 36--40  6--41 22--41 27--41 32--41
+ ... omitted several edges
> 
> 
> 
> cleanEx()
> nameEx("sample_correlated_gnp_pair")
> ### * sample_correlated_gnp_pair
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_correlated_gnp_pair
> ### Title: Sample a pair of correlated G(n,p) random graphs
> ### Aliases: sample_correlated_gnp_pair
> ### Keywords: graphs
> 
> ### ** Examples
> 
> gg <- sample_correlated_gnp_pair(
+   n = 10, corr = .8, p = .5,
+   directed = FALSE
+ )
> gg
$graph1
IGRAPH 2ec475e U--- 10 23 -- 
+ edges from 2ec475e:
 [1] 1-- 2 2-- 3 2-- 5 3-- 5 1-- 6 2-- 6 3-- 6 2-- 7 5-- 7 6-- 7 1-- 8 5-- 8
[13] 6-- 8 1-- 9 2-- 9 3-- 9 5-- 9 6-- 9 7-- 9 4--10 6--10 7--10 8--10

$graph2
IGRAPH b4b4836 U--- 10 21 -- 
+ edges from b4b4836:
 [1] 1-- 2 2-- 3 3-- 5 2-- 6 3-- 6 1-- 7 5-- 7 6-- 7 1-- 8 5-- 8 6-- 8 1-- 9
[13] 2-- 9 3-- 9 5-- 9 6-- 9 3--10 4--10 6--10 7--10 8--10

> cor(as.vector(gg[[1]][]), as.vector(gg[[2]][]))
[1] 0.7593857
> 
> 
> 
> cleanEx()
> nameEx("sample_degseq")
> ### * sample_degseq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_degseq
> ### Title: Generate random graphs with a given degree sequence
> ### Aliases: sample_degseq degseq
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## The simple generator
> undirected_graph <- sample_degseq(rep(2, 100))
> degree(undirected_graph)
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> is_simple(undirected_graph) # sometimes TRUE, but can be FALSE
[1] TRUE
> 
> 
> directed_graph <- sample_degseq(1:10, 10:1)
> degree(directed_graph, mode = "out")
 [1]  1  2  3  4  5  6  7  8  9 10
> degree(directed_graph, mode = "in")
 [1] 10  9  8  7  6  5  4  3  2  1
> 
> ## The vl generator
> vl_graph <- sample_degseq(rep(2, 100), method = "vl")
> degree(vl_graph)
  [1] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [38] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
> is_simple(vl_graph) # always TRUE
[1] TRUE
> 
> ## Exponential degree distribution
> ## We fix the seed as there's no guarantee
> ##  that randomly picked integers will form a graphical degree sequence
> ## (i.e. that there's a graph with these degrees)
> ## withr::with_seed(42, {
> ## exponential_degrees <- sample(1:100, 100, replace = TRUE, prob = exp(-0.5 * (1:100)))
> ## })
> exponential_degrees <- c(
+   5L, 6L, 1L, 4L, 3L, 2L, 3L, 1L, 3L, 3L, 2L, 3L, 6L, 1L, 2L,
+   6L, 8L, 1L, 2L, 2L, 5L, 1L, 10L, 6L, 1L, 2L, 1L, 5L, 2L, 4L,
+   3L, 4L, 1L, 3L, 1L, 4L, 1L, 1L, 5L, 2L, 1L, 2L, 1L, 8L, 2L, 7L,
+   5L, 3L, 8L, 2L, 1L, 1L, 2L, 4L, 1L, 3L, 3L, 1L, 1L, 2L, 3L, 9L,
+   3L, 2L, 4L, 1L, 1L, 4L, 3L, 1L, 1L, 1L, 1L, 2L, 1L, 3L, 1L, 1L,
+   2L, 1L, 2L, 1L, 1L, 3L, 3L, 2L, 1L, 1L, 1L, 1L, 3L, 1L, 1L, 6L,
+   6L, 3L, 1L, 2L, 3L, 2L
+ )
> ## Note, that we'd have to correct the degree sequence if its sum is odd
> is_exponential_degrees_sum_odd <- (sum(exponential_degrees) %% 2 != 0)
> if (is_exponential_degrees_sum_odd) {
+   exponential_degrees[1] <- exponential_degrees[1] + 1
+ }
> exp_vl_graph <- sample_degseq(exponential_degrees, method = "vl")
> all(degree(exp_vl_graph) == exponential_degrees)
[1] TRUE
> 
> ## An example that does not work
> ## Don't show: 
> if (rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ ## withr::with_seed(11, {
+ ## exponential_degrees <- sample(1:100, 100, replace = TRUE, prob = exp(-0.5 * (1:100)))
+ ## })
+ exponential_degrees <- c(
+   1L, 1L, 2L, 1L, 1L, 7L, 1L, 1L, 5L, 1L, 1L, 2L, 5L, 4L, 3L,
+   2L, 2L, 1L, 1L, 2L, 1L, 3L, 1L, 1L, 1L, 2L, 2L, 1L, 1L, 2L, 2L,
+   1L, 2L, 1L, 4L, 3L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 3L, 1L, 4L, 3L,
+   1L, 2L, 4L, 2L, 2L, 2L, 1L, 1L, 2L, 2L, 4L, 1L, 2L, 1L, 3L, 1L,
+   2L, 3L, 1L, 1L, 2L, 1L, 2L, 3L, 2L, 2L, 1L, 6L, 2L, 1L, 1L, 1L,
+   1L, 1L, 2L, 2L, 1L, 4L, 2L, 1L, 3L, 4L, 1L, 1L, 3L, 1L, 2L, 4L,
+   1L, 3L, 1L, 2L, 1L
+ )
+ ## Note, that we'd have to correct the degree sequence if its sum is odd
+ is_exponential_degrees_sum_odd <- (sum(exponential_degrees) %% 2 != 0)
+ if (is_exponential_degrees_sum_odd) {
+   exponential_degrees[1] <- exponential_degrees[1] + 1
+ }
+ exp_vl_graph <- sample_degseq(exponential_degrees, method = "vl")
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> ## Power-law degree distribution
> ## We fix the seed as there's no guarantee
> ##  that randomly picked integers will form a graphical degree sequence
> ## (i.e. that there's a graph with these degrees)
> ## withr::with_seed(1, {
> ##  powerlaw_degrees <- sample(1:100, 100, replace = TRUE, prob = (1:100)^-2)
> ## })
> powerlaw_degrees <- c(
+   1L, 1L, 1L, 6L, 1L, 6L, 10L, 2L, 2L, 1L, 1L, 1L, 2L, 1L, 3L,
+   1L, 2L, 43L, 1L, 3L, 9L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 4L, 1L,
+   1L, 1L, 1L, 1L, 3L, 2L, 3L, 1L, 2L, 1L, 3L, 2L, 3L, 1L, 1L, 3L,
+   1L, 1L, 2L, 2L, 1L, 4L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 1L, 7L, 1L,
+   1L, 1L, 2L, 1L, 1L, 3L, 1L, 5L, 1L, 4L, 1L, 1L, 1L, 5L, 4L, 1L,
+   3L, 13L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 1L, 1L, 1L, 1L, 2L,
+   5L, 3L, 3L, 1L, 1L, 3L, 1L
+ )
> ## Note, that we correct the degree sequence if its sum is odd
> is_exponential_degrees_sum_odd <- (sum(powerlaw_degrees) %% 2 != 0)
> if (is_exponential_degrees_sum_odd) {
+   powerlaw_degrees[1] <- powerlaw_degrees[1] + 1
+ }
> powerlaw_vl_graph <- sample_degseq(powerlaw_degrees, method = "vl")
> all(degree(powerlaw_vl_graph) == powerlaw_degrees)
[1] TRUE
> 
> ## An example that does not work
> ## Don't show: 
> if (rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ ## withr::with_seed(2, {
+ ##  powerlaw_degrees <- sample(1:100, 100, replace = TRUE, prob = (1:100)^-2)
+ ## })
+ powerlaw_degrees <- c(
+   1L, 2L, 1L, 1L, 10L, 10L, 1L, 4L, 1L, 1L, 1L, 1L, 2L, 1L, 1L,
+   4L, 21L, 1L, 1L, 1L, 2L, 1L, 4L, 1L, 1L, 1L, 1L, 1L, 14L, 1L,
+   1L, 1L, 3L, 4L, 1L, 2L, 4L, 1L, 2L, 1L, 25L, 1L, 1L, 1L, 10L,
+   3L, 19L, 1L, 1L, 3L, 1L, 1L, 2L, 8L, 1L, 3L, 3L, 36L, 2L, 2L,
+   3L, 5L, 2L, 1L, 4L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L,
+   1L, 4L, 1L, 1L, 1L, 2L, 1L, 1L, 1L, 4L, 18L, 1L, 2L, 1L, 21L,
+   1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L
+ )
+ ## Note, that we correct the degree sequence if its sum is odd
+ is_exponential_degrees_sum_odd <- (sum(powerlaw_degrees) %% 2 != 0)
+ if (is_exponential_degrees_sum_odd) {
+   powerlaw_degrees[1] <- powerlaw_degrees[1] + 1
+ }
+ powerlaw_vl_graph <- sample_degseq(powerlaw_degrees, method = "vl")
+ all(degree(powerlaw_vl_graph) == powerlaw_degrees)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sample_dirichlet")
> ### * sample_dirichlet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_dirichlet
> ### Title: Sample from a Dirichlet distribution
> ### Aliases: sample_dirichlet
> 
> ### ** Examples
> 
> lpvs.dir <- sample_dirichlet(n = 20, alpha = rep(1, 10))
> RDP.graph.2 <- sample_dot_product(lpvs.dir)
> colSums(lpvs.dir)
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("sample_dot_product")
> ### * sample_dot_product
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_dot_product
> ### Title: Generate random graphs according to the random dot product graph
> ###   model
> ### Aliases: sample_dot_product dot_product
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A randomly generated  graph
> lpvs <- matrix(rnorm(200), 20, 10)
> lpvs <- apply(lpvs, 2, function(x) {
+   return(abs(x) / sqrt(sum(x^2)))
+ })
> g <- sample_dot_product(lpvs)
> g
IGRAPH 719d1ff U--- 10 26 -- 
+ edges from 719d1ff:
 [1] 1-- 2 1-- 3 1-- 8 1--10 2-- 5 2-- 9 2--10 3-- 4 3-- 5 3-- 7 3-- 8 3--10
[13] 4-- 5 4-- 6 4-- 7 5-- 7 5-- 8 5-- 9 5--10 6-- 9 6--10 7-- 9 7--10 8-- 9
[25] 8--10 9--10
> 
> ## Sample latent vectors from the surface of the unit sphere
> lpvs2 <- sample_sphere_surface(dim = 5, n = 20)
> g2 <- sample_dot_product(lpvs2)
> g2
IGRAPH 1752d6e U--- 20 121 -- 
+ edges from 1752d6e:
 [1]  1-- 2  1-- 3  1-- 5  1-- 9  1--11  1--12  1--13  1--17  1--18  1--19
[11]  1--20  2-- 3  2-- 6  2-- 7  2--12  2--13  2--15  2--16  2--17  2--18
[21]  2--20  3-- 4  3-- 5  3-- 7  3-- 8  3-- 9  3--10  3--12  3--15  3--16
[31]  3--17  3--19  4-- 5  4-- 8  4-- 9  4--10  4--11  4--12  4--13  4--15
[41]  4--16  4--17  4--18  4--20  5-- 6  5-- 7  5-- 8  5-- 9  5--11  5--12
[51]  5--15  5--17  5--18  5--19  5--20  6-- 9  6--10  6--12  6--13  6--15
[61]  6--16  6--17  6--18  6--19  6--20  7-- 8  7-- 9  7--10  7--12  7--17
[71]  7--19  7--20  8-- 9  8--11  8--13  8--15  8--16  8--17  8--18  9--10
[81]  9--11  9--13  9--15  9--16  9--17  9--18  9--19 10--14 10--16 10--17
+ ... omitted several edges
> 
> 
> 
> cleanEx()
> nameEx("sample_fitness")
> ### * sample_fitness
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_fitness
> ### Title: Random graphs from vertex fitness scores
> ### Aliases: sample_fitness
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> N <- 10000
> g <- sample_fitness(5 * N, sample((1:50)^-2, N, replace = TRUE))
> degree_distribution(g)
  [1] 0.4526 0.2057 0.0861 0.0456 0.0281 0.0197 0.0131 0.0126 0.0088 0.0090
 [11] 0.0071 0.0055 0.0046 0.0048 0.0039 0.0038 0.0032 0.0029 0.0026 0.0028
 [21] 0.0025 0.0013 0.0029 0.0017 0.0019 0.0024 0.0016 0.0012 0.0017 0.0010
 [31] 0.0015 0.0006 0.0007 0.0012 0.0007 0.0006 0.0006 0.0009 0.0009 0.0009
 [41] 0.0012 0.0012 0.0008 0.0018 0.0008 0.0007 0.0008 0.0011 0.0014 0.0005
 [51] 0.0011 0.0004 0.0003 0.0004 0.0001 0.0000 0.0001 0.0001 0.0001 0.0000
 [61] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0000
 [71] 0.0000 0.0000 0.0000 0.0002 0.0000 0.0001 0.0002 0.0001 0.0005 0.0005
 [81] 0.0007 0.0005 0.0005 0.0006 0.0006 0.0006 0.0010 0.0011 0.0011 0.0009
 [91] 0.0008 0.0006 0.0008 0.0010 0.0006 0.0005 0.0004 0.0006 0.0004 0.0003
[101] 0.0009 0.0006 0.0003 0.0003 0.0001 0.0001 0.0004 0.0003 0.0002 0.0000
[111] 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0000 0.0001
[121] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[131] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[141] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[151] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[161] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[171] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[181] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[191] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[201] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[211] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[221] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[231] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[241] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[251] 0.0001 0.0000 0.0001 0.0001 0.0001 0.0000 0.0000 0.0001 0.0000 0.0001
[261] 0.0000 0.0003 0.0003 0.0001 0.0001 0.0003 0.0002 0.0000 0.0006 0.0005
[271] 0.0005 0.0005 0.0003 0.0003 0.0009 0.0009 0.0006 0.0006 0.0004 0.0006
[281] 0.0004 0.0008 0.0002 0.0004 0.0008 0.0006 0.0004 0.0003 0.0005 0.0004
[291] 0.0006 0.0004 0.0004 0.0004 0.0002 0.0006 0.0004 0.0006 0.0005 0.0006
[301] 0.0000 0.0003 0.0002 0.0001 0.0001 0.0001 0.0001 0.0000 0.0000 0.0001
> plot(degree_distribution(g, cumulative = TRUE), log = "xy")
> 
> 
> 
> cleanEx()
> nameEx("sample_fitness_pl")
> ### * sample_fitness_pl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_fitness_pl
> ### Title: Scale-free random graphs, from vertex fitness scores
> ### Aliases: sample_fitness_pl
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_fitness_pl(10000, 30000, 2.2, 2.3)
> plot(degree_distribution(g, cumulative = TRUE, mode = "out"), log = "xy")
> 
> 
> 
> cleanEx()
> nameEx("sample_forestfire")
> ### * sample_forestfire
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_forestfire
> ### Title: Forest Fire Network Model
> ### Aliases: sample_forestfire
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> fire <- sample_forestfire(50, fw.prob = 0.37, bw.factor = 0.32 / 0.37)
> plot(fire)
> 
> g <- sample_forestfire(10000, fw.prob = 0.37, bw.factor = 0.32 / 0.37)
> dd1 <- degree_distribution(g, mode = "in")
> dd2 <- degree_distribution(g, mode = "out")
> # The forest fire model produces graphs with a heavy tail degree distribution.
> # Note that some in- or out-degrees are zero which will be excluded from the logarithmic plot.
> plot(seq(along.with = dd1) - 1, dd1, log = "xy")
Warning in xy.coords(x, y, xlabel, ylabel, log) :
  1 x value <= 0 omitted from logarithmic plot
Warning in xy.coords(x, y, xlabel, ylabel, log) :
  678 y values <= 0 omitted from logarithmic plot
> points(seq(along.with = dd2) - 1, dd2, col = 2, pch = 2)
> 
> 
> 
> cleanEx()
> nameEx("sample_gnm")
> ### * sample_gnm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_gnm
> ### Title: Generate random graphs according to the G(n,m) Erdős-Rényi model
> ### Aliases: sample_gnm gnm
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(1000, 1000)
> degree_distribution(g)
[1] 0.136 0.272 0.270 0.176 0.088 0.043 0.012 0.003
> 
> 
> 
> cleanEx()
> nameEx("sample_gnp")
> ### * sample_gnp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_gnp
> ### Title: Generate random graphs according to the G(n,p) Erdős-Rényi model
> ### Aliases: sample_gnp gnp
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Random graph with expected mean degree of 2
> g <- sample_gnp(1000, 2 / 1000)
> mean(degree(g))
[1] 1.922
> degree_distribution(g)
[1] 0.159 0.271 0.266 0.174 0.077 0.036 0.011 0.005 0.001
> 
> # Pick a simple graph on 6 vertices uniformly at random
> plot(sample_gnp(6, 0.5))
> 
> 
> 
> cleanEx()
> nameEx("sample_grg")
> ### * sample_grg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_grg
> ### Title: Geometric random graphs
> ### Aliases: sample_grg grg
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_grg(1000, 0.05, torus = FALSE)
> g2 <- sample_grg(1000, 0.05, torus = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_growing")
> ### * sample_growing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_growing
> ### Title: Growing random graph generation
> ### Aliases: sample_growing growing
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_growing(500, citation = FALSE)
> g2 <- sample_growing(500, citation = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_hierarchical_sbm")
> ### * sample_hierarchical_sbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_hierarchical_sbm
> ### Title: Sample the hierarchical stochastic block model
> ### Aliases: sample_hierarchical_sbm hierarchical_sbm
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Ten blocks with three clusters each
> C <- matrix(c(
+   1, 3 / 4, 0,
+   3 / 4, 0, 3 / 4,
+   0, 3 / 4, 3 / 4
+ ), nrow = 3)
> g <- sample_hierarchical_sbm(100, 10, rho = c(3, 3, 4) / 10, C = C, p = 1 / 20)
> g
IGRAPH be32c5b U--- 100 452 -- Hierarchical stochastic block model
+ attr: name (g/c), m (g/n), rho (g/n), C (g/n), p (g/n)
+ edges from be32c5b:
 [1]  1-- 2  1-- 3  2-- 3  1-- 4  2-- 4  3-- 4  1-- 5  1-- 6  3-- 6  4-- 7
[11]  6-- 7  4-- 8  5-- 8  6-- 8  4-- 9  5-- 9  6-- 9  4--10  6--10  7-- 8
[21]  7-- 9  8-- 9  7--10  8--10  9--10 11--12 11--13 12--13 11--14 13--14
[31] 11--15 12--15 13--15 12--16 13--16 14--17 15--17 16--17 14--18 15--18
[41] 16--18 14--19 15--19 16--19 14--20 15--20 16--20 17--18 18--19 17--20
[51] 18--20 19--20 21--22 21--23 22--23 21--24 22--24 21--25 22--25 21--26
[61] 22--26 24--27 25--27 26--27 24--28 26--28 25--29 26--29 24--30 25--30
[71] 26--30 27--28 27--29 28--29 28--30 31--32 31--33 32--33 31--34 32--34
+ ... omitted several edges
> if (require(Matrix)) {
+   image(g[])
+ }
Loading required package: Matrix
> 
> 
> 
> cleanEx()

detaching ‘package:Matrix’

> nameEx("sample_k_regular")
> ### * sample_k_regular
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_k_regular
> ### Title: Create a random regular graph
> ### Aliases: sample_k_regular
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## A simple ring
> ring <- sample_k_regular(10, 2)
> plot(ring)
> 
> ## k-regular graphs on 10 vertices, with k=1:9
> k10 <- lapply(1:9, sample_k_regular, no.of.nodes = 10)
> 
> layout(matrix(1:9, nrow = 3, byrow = TRUE))
> sapply(k10, plot, vertex.label = NA)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

> 
> 
> 
> cleanEx()
> nameEx("sample_motifs")
> ### * sample_motifs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_motifs
> ### Title: Graph motifs
> ### Aliases: sample_motifs
> 
> ### ** Examples
> 
> g <- sample_pa(100)
> motifs(g, 3)
 [1]  NA  NA 218  NA  84   0   0   0   0   0   0   0   0   0   0   0
> count_motifs(g, 3)
[1] 302
> sample_motifs(g, 3)
[1] 1630
> 
> 
> 
> cleanEx()
> nameEx("sample_pa")
> ### * sample_pa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_pa
> ### Title: Generate random graphs using preferential attachment
> ### Aliases: sample_pa pa
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(10000)
> degree_distribution(g)
  [1] 0.0000 0.6648 0.1726 0.0643 0.0322 0.0177 0.0111 0.0092 0.0060 0.0038
 [11] 0.0030 0.0024 0.0020 0.0012 0.0008 0.0009 0.0007 0.0011 0.0009 0.0004
 [21] 0.0007 0.0002 0.0002 0.0002 0.0002 0.0002 0.0002 0.0004 0.0001 0.0002
 [31] 0.0001 0.0002 0.0000 0.0001 0.0001 0.0001 0.0001 0.0001 0.0001 0.0001
 [41] 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0001 0.0001 0.0000 0.0000
 [51] 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0001 0.0000 0.0001 0.0001
 [61] 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0001 0.0000
 [71] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [81] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [91] 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001
[101] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[111] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001 0.0000 0.0000
[121] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[131] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[141] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
[151] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0001
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_pa_age")
> ### * sample_pa_age
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_pa_age
> ### Title: Generate an evolving random graph with preferential attachment
> ###   and aging
> ### Aliases: sample_pa_age pa_age
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # The maximum degree for graph with different aging exponents
> g1 <- sample_pa_age(10000, pa.exp = 1, aging.exp = 0, aging.bin = 1000)
> g2 <- sample_pa_age(10000, pa.exp = 1, aging.exp = -1, aging.bin = 1000)
> g3 <- sample_pa_age(10000, pa.exp = 1, aging.exp = -3, aging.bin = 1000)
> max(degree(g1))
[1] 195
> max(degree(g2))
[1] 32
> max(degree(g3))
[1] 11
> 
> 
> 
> cleanEx()
> nameEx("sample_pref")
> ### * sample_pref
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_pref
> ### Title: Trait-based random generation
> ### Aliases: sample_pref pref sample_asym_pref asym_pref
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> pf <- matrix(c(1, 0, 0, 1), nrow = 2)
> g <- sample_pref(20, 2, pref.matrix = pf)
> ## Don't show: 
> if (rlang::is_installed("tcltk") && rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ # example code
+ 
+ tkplot(g, layout = layout_with_fr)
+ ## Don't show: 
+ }) # examplesIf
Warning: no DISPLAY variable so Tk is not available
> ## End(Don't show)
> 
> pf <- matrix(c(0, 1, 0, 0), nrow = 2)
> g <- sample_asym_pref(20, 2, pref.matrix = pf)
> ## Don't show: 
> if (rlang::is_installed("tcltk") && rlang::is_interactive()) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ tkplot(g, layout = layout_in_circle)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sample_sbm")
> ### * sample_sbm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_sbm
> ### Title: Sample stochastic block model
> ### Aliases: sample_sbm sbm
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Two groups with not only few connection between groups
> pm <- cbind(c(.1, .001), c(.001, .05))
> g <- sample_sbm(1000, pref.matrix = pm, block.sizes = c(300, 700))
> g
IGRAPH 20344f1 U--- 1000 16973 -- Stochastic block model
+ attr: name (g/c), loops (g/l)
+ edges from 20344f1:
 [1]  1-- 5  1-- 6  7-- 9  3--10  9--12 12--13  3--15  6--15 13--16  2--17
[11]  6--17 14--17  4--18  6--18  7--20 11--20 12--20 15--21 12--22 19--22
[21]  9--23 22--23  9--24 20--24 23--24 12--25  9--26 24--26  7--27 17--27
[31] 20--27  9--28 11--28 24--28  3--29  7--29 16--29 12--30 15--30 21--30
[41] 24--30  8--31 11--31 14--31 15--31 17--31 26--31  1--32  5--32 13--32
[51] 31--32  6--33 13--33 24--33  2--34 13--34 18--34 23--34 29--34 32--34
[61]  6--35 10--35  8--36  9--36 15--36 20--36 31--36  7--37 35--37  4--38
[71] 11--38 12--38 22--38 23--38  2--39 14--39 27--39 29--39  4--40 17--40
+ ... omitted several edges
> 
> 
> 
> cleanEx()
> nameEx("sample_seq")
> ### * sample_seq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_seq
> ### Title: Sampling a random integer sequence
> ### Aliases: sample_seq
> ### Keywords: datagen
> 
> ### ** Examples
> 
> 
> rs <- sample_seq(1, 100000000, 10)
> rs
 [1] 12419410 21529487 26808284 27808114 44715988 45888134 46652613 53533923
 [9] 63144636 65421792
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_smallworld")
> ### * sample_smallworld
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_smallworld
> ### Title: The Watts-Strogatz small-world model
> ### Aliases: sample_smallworld smallworld
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_smallworld(1, 100, 5, 0.05)
> mean_distance(g)
[1] 2.653333
> transitivity(g, type = "average")
[1] 0.481683
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_spanning_tree")
> ### * sample_spanning_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_spanning_tree
> ### Title: Samples from the spanning trees of a graph randomly and
> ###   uniformly
> ### Aliases: sample_spanning_tree
> ### Keywords: graph
> 
> ### ** Examples
> 
> 
> g <- make_full_graph(10) %du% make_full_graph(5)
> edges <- sample_spanning_tree(g)
> forest <- subgraph_from_edges(g, edges)
> 
> 
> 
> 
> cleanEx()
> nameEx("sample_sphere_surface")
> ### * sample_sphere_surface
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_sphere_surface
> ### Title: Sample vectors uniformly from the surface of a sphere
> ### Aliases: sample_sphere_surface
> 
> ### ** Examples
> 
> lpvs.sph <- sample_sphere_surface(dim = 10, n = 20, radius = 1)
> RDP.graph.3 <- sample_dot_product(lpvs.sph)
> vec.norm <- apply(lpvs.sph, 2, function(x) {
+   sum(x^2)
+ })
> vec.norm
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("sample_sphere_volume")
> ### * sample_sphere_volume
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_sphere_volume
> ### Title: Sample vectors uniformly from the volume of a sphere
> ### Aliases: sample_sphere_volume
> 
> ### ** Examples
> 
> lpvs.sph.vol <- sample_sphere_volume(dim = 10, n = 20, radius = 1)
> RDP.graph.4 <- sample_dot_product(lpvs.sph.vol)
> vec.norm <- apply(lpvs.sph.vol, 2, function(x) {
+   sum(x^2)
+ })
> vec.norm
 [1] 0.9199431 0.7136203 0.9907044 0.9786798 0.9884769 0.9373690 0.8198306
 [8] 0.9517703 0.4068658 0.9877660 0.9987467 0.8140148 0.9434914 0.9546511
[15] 0.9327035 0.8619647 0.8686811 0.7901780 0.9298192 0.9617410
> 
> 
> 
> cleanEx()
> nameEx("sample_traits_callaway")
> ### * sample_traits_callaway
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_traits_callaway
> ### Title: Graph generation based on different vertex types
> ### Aliases: sample_traits_callaway traits_callaway sample_traits traits
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # two types of vertices, they like only themselves
> g1 <- sample_traits_callaway(1000, 2, pref.matrix = matrix(c(1, 0, 0, 1), ncol = 2))
> g2 <- sample_traits(1000, 2, k = 2, pref.matrix = matrix(c(1, 0, 0, 1), ncol = 2))
> 
> 
> 
> cleanEx()
> nameEx("sample_tree")
> ### * sample_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sample_tree
> ### Title: Sample trees randomly and uniformly
> ### Aliases: sample_tree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_tree(100, method = "lerw")
> 
> 
> 
> 
> cleanEx()
> nameEx("scan_stat")
> ### * scan_stat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scan_stat
> ### Title: Scan statistics on a time series of graphs
> ### Aliases: scan_stat
> 
> ### ** Examples
> 
> ## Generate a bunch of SBMs, with the last one being different
> num_t <- 20
> block_sizes <- c(10, 5, 5)
> p_ij <- list(p = 0.1, h = 0.9, q = 0.9)
> 
> P0 <- matrix(p_ij$p, 3, 3)
> P0[2, 2] <- p_ij$h
> PA <- P0
> PA[3, 3] <- p_ij$q
> num_v <- sum(block_sizes)
> 
> tsg <- replicate(num_t - 1, P0, simplify = FALSE) %>%
+   append(list(PA)) %>%
+   lapply(sample_sbm, n = num_v, block.sizes = block_sizes, directed = TRUE)
> 
> scan_stat(graphs = tsg, k = 1, tau = 4, ell = 2)
$stat
 [1]          NA          NA          NA          NA          NA          NA
 [7] -0.26954758 -0.94449518 -1.31433695  0.67964302 -0.05157917 -1.13491778
[13]  1.90079222  5.77633720 -1.07946229  0.55230775  0.07004480 -1.37048202
[19] -0.80349031 17.09983516

$arg_max_v
 [1] NA NA NA NA NA NA 16  2  7 17  8 12  6 18  8  8  4  3  2 18

> scan_stat(graphs = tsg, locality = "them", k = 1, tau = 4, ell = 2)
$stat
 [1]         NA         NA         NA         NA         NA         NA
 [7]  0.7071068 -3.0000000 -0.4714045  2.2500000 -0.1767767 -0.1250000
[13] -0.7500000  1.1506378 -1.3496827  1.7965644  0.1247835 -1.3131983
[19] -1.4974425 12.3112212

$arg_max_v
 [1] NA NA NA NA NA NA 20 16  3  2  8 20  3 18  3 15  4  3  2 16

> 
> 
> 
> cleanEx()
> nameEx("sequential_pal")
> ### * sequential_pal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sequential_pal
> ### Title: Sequential palette
> ### Aliases: sequential_pal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (rlang::is_installed(c("igraphdata", "scales"))) withAutoprint({ # examplesIf
+ ## End(Don't show)
+ library(igraphdata)
+ data(karate)
+ karate <- karate %>%
+   add_layout_(with_kk()) %>%
+   set_vertex_attr("size", value = 10)
+ 
+ V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), sequential_pal)
+ plot(karate)
+ ## Don't show: 
+ }) # examplesIf
> library(igraphdata)
> data(karate)
> karate <- karate %>% add_layout_(with_kk()) %>% set_vertex_attr("size", 
+     value = 10)
This graph was created by an old(er) igraph version.
ℹ Call `igraph::upgrade_graph()` on it to use with the current igraph version.
For now we convert it on the fly...
> V(karate)$color <- scales::dscale(degree(karate) %>% cut(5), sequential_pal)
> plot(karate)
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:igraphdata’

> nameEx("set_edge_attr")
> ### * set_edge_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_edge_attr
> ### Title: Set edge attributes
> ### Aliases: set_edge_attr
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_edge_attr("label", value = LETTERS[1:10])
> g
IGRAPH 6f18ed5 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), label (e/c)
+ edges from 6f18ed5:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("set_graph_attr")
> ### * set_graph_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_graph_attr
> ### Title: Set a graph attribute
> ### Aliases: set_graph_attr
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_graph_attr("layout", layout_with_fr)
> g
IGRAPH 7e1205e U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), layout (g/x)
+ edges from 7e1205e:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("set_vertex_attr")
> ### * set_vertex_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_vertex_attr
> ### Title: Set vertex attributes
> ### Aliases: set_vertex_attr
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("label", value = LETTERS[1:10])
> g
IGRAPH fb1d01e U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), label (v/c)
+ edges from fb1d01e:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("shapes")
> ### * shapes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shapes
> ### Title: Various vertex shapes when plotting igraph graphs
> ### Aliases: shapes igraph.vertex.shapes shape_noclip shape_noplot
> ###   add_shape
> 
> ### ** Examples
> 
> # all vertex shapes, minus "raster", that might not be available
> shapes <- setdiff(shapes(), "")
> g <- make_ring(length(shapes))
> set.seed(42)
> plot(g,
+   vertex.shape = shapes, vertex.label = shapes, vertex.label.dist = 1,
+   vertex.size = 15, vertex.size2 = 15,
+   vertex.pie = lapply(shapes, function(x) if (x == "pie") 2:6 else 0),
+   vertex.pie.color = list(heat.colors(5))
+ )
> 
> # add new vertex shape, plot nothing with no clipping
> add_shape("nil")
> plot(g, vertex.shape = "nil")
> 
> #################################################################
> # triangle vertex shape
> mytriangle <- function(coords, v = NULL, params) {
+   vertex.color <- params("vertex", "color")
+   if (length(vertex.color) != 1 && !is.null(v)) {
+     vertex.color <- vertex.color[v]
+   }
+   vertex.size <- 1 / 200 * params("vertex", "size")
+   if (length(vertex.size) != 1 && !is.null(v)) {
+     vertex.size <- vertex.size[v]
+   }
+ 
+   symbols(
+     x = coords[, 1], y = coords[, 2], bg = vertex.color,
+     stars = cbind(vertex.size, vertex.size, vertex.size),
+     add = TRUE, inches = FALSE
+   )
+ }
> # clips as a circle
> add_shape("triangle",
+   clip = shapes("circle")$clip,
+   plot = mytriangle
+ )
> plot(g,
+   vertex.shape = "triangle", vertex.color = rainbow(vcount(g)),
+   vertex.size = seq(10, 20, length.out = vcount(g))
+ )
> 
> #################################################################
> # generic star vertex shape, with a parameter for number of rays
> mystar <- function(coords, v = NULL, params) {
+   vertex.color <- params("vertex", "color")
+   if (length(vertex.color) != 1 && !is.null(v)) {
+     vertex.color <- vertex.color[v]
+   }
+   vertex.size <- 1 / 200 * params("vertex", "size")
+   if (length(vertex.size) != 1 && !is.null(v)) {
+     vertex.size <- vertex.size[v]
+   }
+   norays <- params("vertex", "norays")
+   if (length(norays) != 1 && !is.null(v)) {
+     norays <- norays[v]
+   }
+ 
+   mapply(coords[, 1], coords[, 2], vertex.color, vertex.size, norays,
+     FUN = function(x, y, bg, size, nor) {
+       symbols(
+         x = x, y = y, bg = bg,
+         stars = matrix(c(size, size / 2), nrow = 1, ncol = nor * 2),
+         add = TRUE, inches = FALSE
+       )
+     }
+   )
+ }
> # no clipping, edges will be below the vertices anyway
> add_shape("star",
+   clip = shape_noclip,
+   plot = mystar, parameters = list(vertex.norays = 5)
+ )
> plot(g,
+   vertex.shape = "star", vertex.color = rainbow(vcount(g)),
+   vertex.size = seq(10, 20, length.out = vcount(g))
+ )
> plot(g,
+   vertex.shape = "star", vertex.color = rainbow(vcount(g)),
+   vertex.size = seq(10, 20, length.out = vcount(g)),
+   vertex.norays = rep(4:8, length.out = vcount(g))
+ )
> 
> 
> 
> cleanEx()
> nameEx("similarity")
> ### * similarity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: similarity
> ### Title: Similarity measures of two vertices
> ### Aliases: similarity
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(5)
> similarity(g, method = "dice")
     [,1] [,2] [,3] [,4] [,5]
[1,]  1.0  0.0  0.5  0.5  0.0
[2,]  0.0  1.0  0.0  0.5  0.5
[3,]  0.5  0.0  1.0  0.0  0.5
[4,]  0.5  0.5  0.0  1.0  0.0
[5,]  0.0  0.5  0.5  0.0  1.0
> similarity(g, method = "jaccard")
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 1.0000000 0.0000000 0.3333333 0.3333333 0.0000000
[2,] 0.0000000 1.0000000 0.0000000 0.3333333 0.3333333
[3,] 0.3333333 0.0000000 1.0000000 0.0000000 0.3333333
[4,] 0.3333333 0.3333333 0.0000000 1.0000000 0.0000000
[5,] 0.0000000 0.3333333 0.3333333 0.0000000 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("simplified")
> ### * simplified
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simplified
> ### Title: Constructor modifier to drop multiple and loop edges
> ### Aliases: simplified
> 
> ### ** Examples
> 
> sample_(pa(10, m = 3, algorithm = "bag"))
IGRAPH 5dd3b2b D--- 10 27 -- Barabasi graph
+ attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
| (g/c)
+ edges from 5dd3b2b:
 [1]  2->1  2->1  2->1  3->2  3->1  3->2  4->2  4->3  4->2  5->2  5->2  5->4
[13]  6->2  6->2  6->3  7->3  7->1  7->3  8->2  8->2  8->2  9->1  9->2  9->1
[25] 10->8 10->6 10->1
> sample_(pa(10, m = 3, algorithm = "bag"), simplified())
IGRAPH 173d5ad D--- 10 19 -- Barabasi graph
+ attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
| (g/c)
+ edges from 173d5ad:
 [1]  2->1  3->1  4->1  4->3  5->1  5->3  6->1  6->2  6->3  7->1  7->3  8->2
[13]  8->3  8->4  9->1  9->7 10->1 10->7 10->8
> 
> 
> 
> cleanEx()
> nameEx("simplify")
> ### * simplify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simplify
> ### Title: Simple graphs
> ### Aliases: simplify is_simple simplify_and_colorize
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph(c(1, 2, 1, 2, 3, 3))
> is_simple(g)
[1] FALSE
> is_simple(simplify(g, remove.loops = FALSE))
[1] FALSE
> is_simple(simplify(g, remove.multiple = FALSE))
[1] FALSE
> is_simple(simplify(g))
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("sir")
> ### * sir
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: time_bins
> ### Title: SIR model on graphs
> ### Aliases: time_bins time_bins.sir median.sir quantile.sir sir
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(100, 100)
> sm <- sir(g, beta = 5, gamma = 1)
> plot(sm)
> 
> 
> 
> cleanEx()
> nameEx("spectrum")
> ### * spectrum
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spectrum
> ### Title: Eigenvalues and eigenvectors of the adjacency matrix of a graph
> ### Aliases: spectrum igraph.eigen.default
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Small example graph, leading eigenvector by default
> kite <- make_graph("Krackhardt_kite")
> spectrum(kite)[c("values", "vectors")]
$values
[1] 4.306404

$vectors
             [,1]
 [1,] -0.35220940
 [2,] -0.35220940
 [3,] -0.28583499
 [4,] -0.48102086
 [5,] -0.28583499
 [6,] -0.39769064
 [7,] -0.39769064
 [8,] -0.19586058
 [9,] -0.04807349
[10,] -0.01116326

> 
> ## Double check
> eigen(as_adjacency_matrix(kite, sparse = FALSE))$vectors[, 1]
 [1] -0.35220940 -0.35220940 -0.28583499 -0.48102086 -0.28583499 -0.39769064
 [7] -0.39769064 -0.19586058 -0.04807349 -0.01116326
> 
> ## Should be the same as 'eigen_centrality' (but rescaled)
> cor(eigen_centrality(kite)$vector, spectrum(kite)$vectors)
     [,1]
[1,]   -1
> 
> ## Smallest eigenvalues
> spectrum(kite, which = list(pos = "SM", howmany = 2))$values
[1] -0.4043420  0.6403647
> 
> 
> 
> 
> cleanEx()
> nameEx("st_cuts")
> ### * st_cuts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: st_cuts
> ### Title: List all (s,t)-cuts of a graph
> ### Aliases: st_cuts
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # A very simple graph
> g <- graph_from_literal(a -+ b -+ c -+ d -+ e)
> st_cuts(g, source = "a", target = "e")
$cuts
$cuts[[1]]
+ 1/4 edge from 39a397f (vertex names):
[1] a->b

$cuts[[2]]
+ 1/4 edge from 39a397f (vertex names):
[1] b->c

$cuts[[3]]
+ 1/4 edge from 39a397f (vertex names):
[1] c->d

$cuts[[4]]
+ 1/4 edge from 39a397f (vertex names):
[1] d->e


$partition1s
$partition1s[[1]]
+ 1/5 vertex, named, from 39a397f:
[1] a

$partition1s[[2]]
+ 2/5 vertices, named, from 39a397f:
[1] a b

$partition1s[[3]]
+ 3/5 vertices, named, from 39a397f:
[1] a b c

$partition1s[[4]]
+ 4/5 vertices, named, from 39a397f:
[1] a b c d


> 
> # A somewhat more difficult graph
> g2 <- graph_from_literal(
+   s --+ a:b, a:b --+ t,
+   a --+ 1:2:3, 1:2:3 --+ b
+ )
> st_cuts(g2, source = "s", target = "t")
$cuts
$cuts[[1]]
+ 2/10 edges from d915043 (vertex names):
[1] s->a s->b

$cuts[[2]]
+ 2/10 edges from d915043 (vertex names):
[1] s->a b->t

$cuts[[3]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->1 a->2 a->3

$cuts[[4]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->1 a->2 3->b

$cuts[[5]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->1 a->3 2->b

$cuts[[6]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->1 2->b 3->b

$cuts[[7]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->2 a->3 1->b

$cuts[[8]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->2 1->b 3->b

$cuts[[9]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t a->3 1->b 2->b

$cuts[[10]]
+ 5/10 edges from d915043 (vertex names):
[1] s->b a->t 1->b 2->b 3->b

$cuts[[11]]
+ 2/10 edges from d915043 (vertex names):
[1] a->t b->t


$partition1s
$partition1s[[1]]
+ 1/7 vertex, named, from d915043:
[1] s

$partition1s[[2]]
+ 2/7 vertices, named, from d915043:
[1] s b

$partition1s[[3]]
+ 2/7 vertices, named, from d915043:
[1] s a

$partition1s[[4]]
+ 3/7 vertices, named, from d915043:
[1] s a 3

$partition1s[[5]]
+ 3/7 vertices, named, from d915043:
[1] s a 2

$partition1s[[6]]
+ 4/7 vertices, named, from d915043:
[1] s a 2 3

$partition1s[[7]]
+ 3/7 vertices, named, from d915043:
[1] s a 1

$partition1s[[8]]
+ 4/7 vertices, named, from d915043:
[1] s a 1 3

$partition1s[[9]]
+ 4/7 vertices, named, from d915043:
[1] s a 1 2

$partition1s[[10]]
+ 5/7 vertices, named, from d915043:
[1] s a 1 2 3

$partition1s[[11]]
+ 6/7 vertices, named, from d915043:
[1] s a 1 2 3 b


> 
> 
> 
> cleanEx()
> nameEx("st_min_cuts")
> ### * st_min_cuts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: st_min_cuts
> ### Title: List all minimum (s,t)-cuts of a graph
> ### Aliases: st_min_cuts
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # A difficult graph, from the Provan-Shier paper
> g <- graph_from_literal(
+   s --+ a:b, a:b --+ t,
+   a --+ 1:2:3:4:5, 1:2:3:4:5 --+ b
+ )
> st_min_cuts(g, source = "s", target = "t")
$value
[1] 2

$cuts
$cuts[[1]]
+ 2/14 edges from baeff6e (vertex names):
[1] s->a s->b

$cuts[[2]]
+ 2/14 edges from baeff6e (vertex names):
[1] s->a b->t

$cuts[[3]]
+ 2/14 edges from baeff6e (vertex names):
[1] a->t b->t


$partition1s
$partition1s[[1]]
+ 1/9 vertex, named, from baeff6e:
[1] s

$partition1s[[2]]
+ 2/9 vertices, named, from baeff6e:
[1] s b

$partition1s[[3]]
+ 8/9 vertices, named, from baeff6e:
[1] s b a 5 4 3 2 1


> 
> 
> 
> cleanEx()
> nameEx("stochastic_matrix")
> ### * stochastic_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stochastic_matrix
> ### Title: Stochastic matrix of a graph
> ### Aliases: stochastic_matrix
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> library(Matrix)
> ## g is a large sparse graph
> g <- sample_pa(n = 10^5, power = 2, directed = FALSE)
> W <- stochastic_matrix(g, sparse = TRUE)
> 
> ## a dense matrix here would probably not fit in the memory
> class(W)
[1] "dgCMatrix"
attr(,"package")
[1] "Matrix"
> 
> ## may not be exactly 1, due to numerical errors
> max(abs(rowSums(W)) - 1)
[1] 1.580958e-12
> 
> 
> 
> 
> cleanEx()

detaching ‘package:Matrix’

> nameEx("strength")
> ### * strength
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strength
> ### Title: Strength or weighted vertex degree
> ### Aliases: strength
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_star(10)
> E(g)$weight <- seq(ecount(g))
> strength(g)
 [1] 45  1  2  3  4  5  6  7  8  9
> strength(g, mode = "out")
 [1] 0 1 2 3 4 5 6 7 8 9
> strength(g, mode = "in")
 [1] 45  0  0  0  0  0  0  0  0  0
> 
> # No weights
> g <- make_ring(10)
> strength(g)
 [1] 2 2 2 2 2 2 2 2 2 2
> 
> 
> 
> cleanEx()
> nameEx("subcomponent")
> ### * subcomponent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subcomponent
> ### Title: In- or out- component of a vertex
> ### Aliases: subcomponent
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnp(100, 1 / 200)
> subcomponent(g, 1, "in")
+ 1/100 vertex, from 96df987:
[1] 1
> subcomponent(g, 1, "out")
+ 1/100 vertex, from 96df987:
[1] 1
> subcomponent(g, 1, "all")
+ 1/100 vertex, from 96df987:
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("subgraph")
> ### * subgraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subgraph
> ### Title: Subgraph of a graph
> ### Aliases: subgraph subgraph_from_edges induced_subgraph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> g2 <- induced_subgraph(g, 1:7)
> g3 <- subgraph_from_edges(g, 1:5)
> 
> 
> 
> 
> cleanEx()
> nameEx("subgraph_centrality")
> ### * subgraph_centrality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subgraph_centrality
> ### Title: Find subgraph centrality scores of network positions
> ### Aliases: subgraph_centrality
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100, m = 4, dir = FALSE)
> sc <- subgraph_centrality(g)
> cor(degree(g), sc)
[1] 0.9324443
> 
> 
> 
> 
> cleanEx()
> nameEx("subgraph_isomorphic")
> ### * subgraph_isomorphic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subgraph_isomorphic
> ### Title: Decide if a graph is subgraph isomorphic to another one
> ### Aliases: subgraph_isomorphic graph.subisomorphic.vf2
> ###   graph.subisomorphic.lad is_subgraph_isomorphic_to
> 
> ### ** Examples
> 
> # A LAD example
> pattern <- make_graph(
+   ~ 1:2:3:4:5,
+   1 - 2:5, 2 - 1:5:3, 3 - 2:4, 4 - 3:5, 5 - 4:2:1
+ )
> target <- make_graph(
+   ~ 1:2:3:4:5:6:7:8:9,
+   1 - 2:5:7, 2 - 1:5:3, 3 - 2:4, 4 - 3:5:6:8:9,
+   5 - 1:2:4:6:7, 6 - 7:5:4:9, 7 - 1:5:6,
+   8 - 4:9, 9 - 6:4:8
+ )
> domains <- list(
+   `1` = c(1, 3, 9), `2` = c(5, 6, 7, 8), `3` = c(2, 4, 6, 7, 8, 9),
+   `4` = c(1, 3, 9), `5` = c(2, 4, 8, 9)
+ )
> subgraph_isomorphisms(pattern, target)
[[1]]
+ 5/9 vertices, named, from 290467a:
[1] 2 1 7 6 5

[[2]]
+ 5/9 vertices, named, from 290467a:
[1] 1 2 3 4 5

[[3]]
+ 5/9 vertices, named, from 290467a:
[1] 6 4 3 2 5

[[4]]
+ 5/9 vertices, named, from 290467a:
[1] 8 4 5 6 9

[[5]]
+ 5/9 vertices, named, from 290467a:
[1] 5 4 8 9 6

[[6]]
+ 5/9 vertices, named, from 290467a:
[1] 9 4 5 7 6

[[7]]
+ 5/9 vertices, named, from 290467a:
[1] 1 5 4 6 7

[[8]]
+ 5/9 vertices, named, from 290467a:
[1] 1 5 4 3 2

[[9]]
+ 5/9 vertices, named, from 290467a:
[1] 4 5 1 7 6

[[10]]
+ 5/9 vertices, named, from 290467a:
[1] 7 5 4 9 6

[[11]]
+ 5/9 vertices, named, from 290467a:
[1] 6 5 2 3 4

[[12]]
+ 5/9 vertices, named, from 290467a:
[1] 6 5 2 1 7

[[13]]
+ 5/9 vertices, named, from 290467a:
[1] 2 5 6 7 1

[[14]]
+ 5/9 vertices, named, from 290467a:
[1] 9 6 7 5 4

[[15]]
+ 5/9 vertices, named, from 290467a:
[1] 5 6 9 8 4

[[16]]
+ 5/9 vertices, named, from 290467a:
[1] 4 6 7 1 5

[[17]]
+ 5/9 vertices, named, from 290467a:
[1] 7 6 9 4 5

[[18]]
+ 5/9 vertices, named, from 290467a:
[1] 1 7 6 4 5

[[19]]
+ 5/9 vertices, named, from 290467a:
[1] 6 7 1 2 5

[[20]]
+ 5/9 vertices, named, from 290467a:
[1] 8 9 6 5 4

> subgraph_isomorphisms(pattern, target, induced = TRUE)
[[1]]
+ 5/9 vertices, named, from 290467a:
[1] 1 2 3 4 5

[[2]]
+ 5/9 vertices, named, from 290467a:
[1] 6 4 3 2 5

[[3]]
+ 5/9 vertices, named, from 290467a:
[1] 6 5 2 3 4

[[4]]
+ 5/9 vertices, named, from 290467a:
[1] 1 5 4 3 2

> subgraph_isomorphisms(pattern, target, domains = domains)
[[1]]
+ 5/9 vertices, named, from 290467a:
[1] 1 5 4 3 2

> 
> # Directed LAD example
> pattern <- make_graph(~ 1:2:3, 1 -+ 2:3)
> dring <- make_ring(10, directed = TRUE)
> subgraph_isomorphic(pattern, dring)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("to_prufer")
> ### * to_prufer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: to_prufer
> ### Title: Convert a tree graph to its Prüfer sequence
> ### Aliases: to_prufer
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(13, 3)
> to_prufer(g)
 [1] 2 2 2 1 3 3 3 1 4 4 4
> 
> 
> 
> 
> cleanEx()
> nameEx("topo_sort")
> ### * topo_sort
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: topo_sort
> ### Title: Topological sorting of vertices in a graph
> ### Aliases: topo_sort
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100)
> topo_sort(g)
+ 100/100 vertices, from f39b869:
  [1]   3  18  21  26  29  30  31  32  33  34  35  36  37  38  40  41  42  44
 [19]  45  47  48  49  53  55  56  57  59  60  62  63  64  65  66  67  68  69
 [37]  70  71  72  74  76  77  78  79  80  81  82  83  84  85  86  87  88  89
 [55]  90  91  92  93  94  95  96  97  98  99 100  23  22  14  12  54  52  50
 [73]  75  43  15  51  46  73  58  61  17  20  39  13  10  28   7  27  16  25
 [91]  19  24   4  11   9   8   6   5   2   1
> 
> 
> 
> 
> cleanEx()
> nameEx("transitivity")
> ### * transitivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transitivity
> ### Title: Transitivity of a graph
> ### Aliases: transitivity
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> transitivity(g)
[1] 0
> g2 <- sample_gnp(1000, 10 / 1000)
> transitivity(g2) # this is about 10/1000
[1] 0.009699986
> 
> # Weighted version, the figure from the Barrat paper
> gw <- graph_from_literal(A - B:C:D:E, B - C:D, C - D)
> E(gw)$weight <- 1
> E(gw)[V(gw)[name == "A"] %--% V(gw)[name == "E"]]$weight <- 5
> transitivity(gw, vids = "A", type = "local")
  A 
0.5 
> transitivity(gw, vids = "A", type = "weighted")
   A 
0.25 
> 
> # Weighted reduces to "local" if weights are the same
> gw2 <- sample_gnp(1000, 10 / 1000)
> E(gw2)$weight <- 1
> t1 <- transitivity(gw2, type = "local")
> t2 <- transitivity(gw2, type = "weighted")
> all(is.na(t1) == is.na(t2))
[1] TRUE
> all(na.omit(t1 == t2))
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("triad_census")
> ### * triad_census
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: triad_census
> ### Title: Triad census, subgraphs with three vertices
> ### Aliases: triad_census
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(15, 45, directed = TRUE)
> triad_census(g)
 [1]  90 191  13  23  33  63   2   6  23   7   1   0   3   0   0   0
> 
> 
> 
> cleanEx()
> nameEx("unfold_tree")
> ### * unfold_tree
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unfold_tree
> ### Title: Convert a general graph into a forest
> ### Aliases: unfold_tree
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_tree(10) %du% make_tree(10)
> V(g)$id <- seq_len(vcount(g)) - 1
> roots <- sapply(decompose(g), function(x) {
+   V(x)$id[topo_sort(x)[1] + 1]
+ })
> tree <- unfold_tree(g, roots = roots)
> 
> 
> 
> 
> cleanEx()
> nameEx("union.igraph")
> ### * union.igraph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: union.igraph
> ### Title: Union of graphs
> ### Aliases: union.igraph %u%
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> ## Union of two social networks with overlapping sets of actors
> net1 <- graph_from_literal(
+   D - A:B:F:G, A - C - F - A, B - E - G - B, A - B, F - G,
+   H - F:G, H - I - J
+ )
> net2 <- graph_from_literal(D - A:F:Y, B - A - X - F - H - Z, F - Y)
> print_all(net1 %u% net2)
IGRAPH bdd1aca UN-- 13 21 -- 
+ attr: name (v/c)
+ vertex attributes:
|      name
| [1]     D
| [2]     A
| [3]     B
| [4]     F
| [5]     G
| [6]     C
| [7]     E
| [8]     H
| [9]     I
| [10]    J
| [11]    Y
| [12]    X
| [13]    Z
+ edges from bdd1aca (vertex names):
 [1] I--J H--Z H--I G--H G--E F--X F--Y F--H F--C F--G B--E B--G A--X A--C A--F
[16] A--B D--Y D--G D--F D--B D--A
> 
> 
> 
> cleanEx()
> nameEx("union.igraph.es")
> ### * union.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: union.igraph.es
> ### Title: Union of edge sequences
> ### Aliases: union.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> union(E(g)[1:6], E(g)[5:9], E(g)["A|J"])
+ 10/10 edges from 075ac6f (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> 
> 
> 
> cleanEx()
> nameEx("union.igraph.vs")
> ### * union.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: union.igraph.vs
> ### Title: Union of vertex sequences
> ### Aliases: union.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> union(V(g)[1:6], V(g)[5:10])
+ 10/10 vertices, named, from 165d9f8:
 [1] A B C D E F G H I J
> 
> 
> 
> cleanEx()
> nameEx("unique.igraph.es")
> ### * unique.igraph.es
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unique.igraph.es
> ### Title: Remove duplicate edges from an edge sequence
> ### Aliases: unique.igraph.es
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> E(g)[1, 1:5, 1:10, 5:10]
+ 22/10 edges from 80e839c (vertex names):
 [1] A--B A--B B--C C--D D--E E--F A--B B--C C--D D--E E--F F--G G--H H--I I--J
[16] A--J E--F F--G G--H H--I I--J A--J
> E(g)[1, 1:5, 1:10, 5:10] %>% unique()
+ 10/10 edges from 80e839c (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> 
> 
> 
> cleanEx()
> nameEx("unique.igraph.vs")
> ### * unique.igraph.vs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unique.igraph.vs
> ### Title: Remove duplicate vertices from a vertex sequence
> ### Aliases: unique.igraph.vs
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10]))
> V(g)[1, 1:5, 1:10, 5:10]
+ 22/10 vertices, named, from db77686:
 [1] A A B C D E A B C D E F G H I J E F G H I J
> V(g)[1, 1:5, 1:10, 5:10] %>% unique()
+ 10/10 vertices, named, from db77686:
 [1] A B C D E F G H I J
> 
> 
> 
> cleanEx()
> nameEx("vertex")
> ### * vertex
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vertex
> ### Title: Helper function for adding and deleting vertices
> ### Aliases: vertex vertices
> 
> ### ** Examples
> 
> g <- make_(ring(10), with_vertex_(name = LETTERS[1:10])) +
+   vertices("X", "Y")
> g
IGRAPH c481834 UN-- 12 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c)
+ edges from c481834 (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("vertex.shape.pie")
> ### * vertex.shape.pie
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pie charts as vertices
> ### Title: Using pie charts as vertices in graph plots
> ### Aliases: vertex.shape.pie
> ### Keywords: graphs
> 
> ### ** Examples
> 
> g <- make_ring(10)
> values <- lapply(1:10, function(x) sample(1:10,3))
> if (interactive()) {
+   plot(g, vertex.shape="pie", vertex.pie=values,
+        vertex.pie.color=list(heat.colors(5)),
+        vertex.size=seq(10,30,length.out=10), vertex.label=NA)
+ }
> 
> 
> 
> cleanEx()
> nameEx("vertex_attr-set")
> ### * vertex_attr-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vertex_attr<-
> ### Title: Set one or more vertex attributes
> ### Aliases: vertex_attr<- vertex.attributes<-
> 
> ### ** Examples
> 
> g <- make_ring(10)
> vertex_attr(g) <- list(
+   name = LETTERS[1:10],
+   color = rep("yellow", gorder(g))
+ )
> vertex_attr(g, "label") <- V(g)$name
> g
IGRAPH e89c49e UN-- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l), name (v/c), color
| (v/c), label (v/c)
+ edges from e89c49e (vertex names):
 [1] A--B B--C C--D D--E E--F F--G G--H H--I I--J A--J
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("vertex_attr")
> ### * vertex_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vertex_attr
> ### Title: Query vertex attributes of a graph
> ### Aliases: vertex_attr vertex.attributes
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("color", value = "red") %>%
+   set_vertex_attr("label", value = letters[1:10])
> vertex_attr(g, "label")
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"
> vertex_attr(g)
$color
 [1] "red" "red" "red" "red" "red" "red" "red" "red" "red" "red"

$label
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j"

> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("vertex_attr_names")
> ### * vertex_attr_names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vertex_attr_names
> ### Title: List names of vertex attributes
> ### Aliases: vertex_attr_names
> 
> ### ** Examples
> 
> g <- make_ring(10) %>%
+   set_vertex_attr("name", value = LETTERS[1:10]) %>%
+   set_vertex_attr("color", value = rep("green", 10))
> vertex_attr_names(g)
[1] "name"  "color"
> plot(g)
> 
> 
> 
> cleanEx()
> nameEx("vertex_connectivity")
> ### * vertex_connectivity
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vertex_connectivity
> ### Title: Vertex connectivity
> ### Aliases: vertex_connectivity cohesion vertex_disjoint_paths
> ###   cohesion.igraph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_pa(100, m = 1)
> g <- delete_edges(g, E(g)[100 %--% 1])
> g2 <- sample_pa(100, m = 5)
> g2 <- delete_edges(g2, E(g2)[100 %--% 1])
> vertex_connectivity(g, 100, 1)
[1] 1
> vertex_connectivity(g2, 100, 1)
[1] 5
> vertex_disjoint_paths(g2, 100, 1)
[1] 5
> 
> g <- sample_gnp(50, 5 / 50)
> g <- as_directed(g)
> g <- induced_subgraph(g, subcomponent(g, 1))
> cohesion(g)
[1] 2
> 
> 
> 
> 
> cleanEx()
> nameEx("voronoi_cells")
> ### * voronoi_cells
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: voronoi_cells
> ### Title: Voronoi partitioning of a graph
> ### Aliases: voronoi_cells
> 
> ### ** Examples
> 
> 
> g <- make_lattice(c(10,10))
> clu <- voronoi_cells(g, c(25, 43, 67))
> groups(clu)
$`0`
 [1]  1  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 24 25 26 27 28 29
[26] 30 35 36 45 46 55

$`1`
 [1]  2 21 22 23 31 32 33 34 41 42 43 44 51 52 53 54 61 62 63 64 71 72 73 74 81
[26] 82 83 91 92 93

$`2`
 [1]  37  38  39  40  47  48  49  50  56  57  58  59  60  65  66  67  68  69  70
[20]  75  76  77  78  79  80  84  85  86  87  88  89  90  94  95  96  97  98  99
[39] 100

> plot(g, vertex.color=clu$membership)
> 
> 
> 
> 
> cleanEx()
> nameEx("weighted_cliques")
> ### * weighted_cliques
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weighted_cliques
> ### Title: Functions to find weighted cliques, i.e. vertex-weighted
> ###   complete subgraphs in a graph
> ### Aliases: weighted_cliques
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_graph("zachary")
> V(g)$weight <- 1
> V(g)[c(1, 2, 3, 4, 14)]$weight <- 3
> weighted_cliques(g)
[[1]]
+ 1/34 vertex, from a50b44c:
[1] 34

[[2]]
+ 1/34 vertex, from a50b44c:
[1] 33

[[3]]
+ 2/34 vertices, from a50b44c:
[1] 33 34

[[4]]
+ 1/34 vertex, from a50b44c:
[1] 8

[[5]]
+ 1/34 vertex, from a50b44c:
[1] 9

[[6]]
+ 2/34 vertices, from a50b44c:
[1]  9 33

[[7]]
+ 3/34 vertices, from a50b44c:
[1]  9 33 34

[[8]]
+ 2/34 vertices, from a50b44c:
[1]  9 34

[[9]]
+ 1/34 vertex, from a50b44c:
[1] 32

[[10]]
+ 2/34 vertices, from a50b44c:
[1] 32 33

[[11]]
+ 3/34 vertices, from a50b44c:
[1] 32 33 34

[[12]]
+ 2/34 vertices, from a50b44c:
[1] 32 34

[[13]]
+ 1/34 vertex, from a50b44c:
[1] 22

[[14]]
+ 1/34 vertex, from a50b44c:
[1] 20

[[15]]
+ 2/34 vertices, from a50b44c:
[1] 20 34

[[16]]
+ 1/34 vertex, from a50b44c:
[1] 18

[[17]]
+ 1/34 vertex, from a50b44c:
[1] 13

[[18]]
+ 1/34 vertex, from a50b44c:
[1] 7

[[19]]
+ 1/34 vertex, from a50b44c:
[1] 28

[[20]]
+ 2/34 vertices, from a50b44c:
[1] 28 34

[[21]]
+ 1/34 vertex, from a50b44c:
[1] 11

[[22]]
+ 1/34 vertex, from a50b44c:
[1] 6

[[23]]
+ 2/34 vertices, from a50b44c:
[1]  6 11

[[24]]
+ 2/34 vertices, from a50b44c:
[1] 6 7

[[25]]
+ 1/34 vertex, from a50b44c:
[1] 31

[[26]]
+ 2/34 vertices, from a50b44c:
[1]  9 31

[[27]]
+ 3/34 vertices, from a50b44c:
[1]  9 31 33

[[28]]
+ 4/34 vertices, from a50b44c:
[1]  9 31 33 34

[[29]]
+ 3/34 vertices, from a50b44c:
[1]  9 31 34

[[30]]
+ 2/34 vertices, from a50b44c:
[1] 31 33

[[31]]
+ 3/34 vertices, from a50b44c:
[1] 31 33 34

[[32]]
+ 2/34 vertices, from a50b44c:
[1] 31 34

[[33]]
+ 1/34 vertex, from a50b44c:
[1] 29

[[34]]
+ 2/34 vertices, from a50b44c:
[1] 29 32

[[35]]
+ 3/34 vertices, from a50b44c:
[1] 29 32 34

[[36]]
+ 2/34 vertices, from a50b44c:
[1] 29 34

[[37]]
+ 1/34 vertex, from a50b44c:
[1] 12

[[38]]
+ 1/34 vertex, from a50b44c:
[1] 10

[[39]]
+ 2/34 vertices, from a50b44c:
[1] 10 34

[[40]]
+ 1/34 vertex, from a50b44c:
[1] 5

[[41]]
+ 2/34 vertices, from a50b44c:
[1]  5 11

[[42]]
+ 2/34 vertices, from a50b44c:
[1] 5 7

[[43]]
+ 1/34 vertex, from a50b44c:
[1] 30

[[44]]
+ 2/34 vertices, from a50b44c:
[1] 30 33

[[45]]
+ 3/34 vertices, from a50b44c:
[1] 30 33 34

[[46]]
+ 2/34 vertices, from a50b44c:
[1] 30 34

[[47]]
+ 1/34 vertex, from a50b44c:
[1] 26

[[48]]
+ 2/34 vertices, from a50b44c:
[1] 26 32

[[49]]
+ 1/34 vertex, from a50b44c:
[1] 27

[[50]]
+ 2/34 vertices, from a50b44c:
[1] 27 30

[[51]]
+ 3/34 vertices, from a50b44c:
[1] 27 30 34

[[52]]
+ 2/34 vertices, from a50b44c:
[1] 27 34

[[53]]
+ 1/34 vertex, from a50b44c:
[1] 25

[[54]]
+ 2/34 vertices, from a50b44c:
[1] 25 26

[[55]]
+ 3/34 vertices, from a50b44c:
[1] 25 26 32

[[56]]
+ 2/34 vertices, from a50b44c:
[1] 25 28

[[57]]
+ 2/34 vertices, from a50b44c:
[1] 25 32

[[58]]
+ 1/34 vertex, from a50b44c:
[1] 24

[[59]]
+ 2/34 vertices, from a50b44c:
[1] 24 26

[[60]]
+ 2/34 vertices, from a50b44c:
[1] 24 30

[[61]]
+ 3/34 vertices, from a50b44c:
[1] 24 30 33

[[62]]
+ 4/34 vertices, from a50b44c:
[1] 24 30 33 34

[[63]]
+ 3/34 vertices, from a50b44c:
[1] 24 30 34

[[64]]
+ 2/34 vertices, from a50b44c:
[1] 24 28

[[65]]
+ 3/34 vertices, from a50b44c:
[1] 24 28 34

[[66]]
+ 2/34 vertices, from a50b44c:
[1] 24 33

[[67]]
+ 3/34 vertices, from a50b44c:
[1] 24 33 34

[[68]]
+ 2/34 vertices, from a50b44c:
[1] 24 34

[[69]]
+ 1/34 vertex, from a50b44c:
[1] 23

[[70]]
+ 2/34 vertices, from a50b44c:
[1] 23 33

[[71]]
+ 3/34 vertices, from a50b44c:
[1] 23 33 34

[[72]]
+ 2/34 vertices, from a50b44c:
[1] 23 34

[[73]]
+ 1/34 vertex, from a50b44c:
[1] 21

[[74]]
+ 2/34 vertices, from a50b44c:
[1] 21 33

[[75]]
+ 3/34 vertices, from a50b44c:
[1] 21 33 34

[[76]]
+ 2/34 vertices, from a50b44c:
[1] 21 34

[[77]]
+ 1/34 vertex, from a50b44c:
[1] 19

[[78]]
+ 2/34 vertices, from a50b44c:
[1] 19 33

[[79]]
+ 3/34 vertices, from a50b44c:
[1] 19 33 34

[[80]]
+ 2/34 vertices, from a50b44c:
[1] 19 34

[[81]]
+ 1/34 vertex, from a50b44c:
[1] 17

[[82]]
+ 2/34 vertices, from a50b44c:
[1]  6 17

[[83]]
+ 3/34 vertices, from a50b44c:
[1]  6  7 17

[[84]]
+ 2/34 vertices, from a50b44c:
[1]  7 17

[[85]]
+ 1/34 vertex, from a50b44c:
[1] 16

[[86]]
+ 2/34 vertices, from a50b44c:
[1] 16 33

[[87]]
+ 3/34 vertices, from a50b44c:
[1] 16 33 34

[[88]]
+ 2/34 vertices, from a50b44c:
[1] 16 34

[[89]]
+ 1/34 vertex, from a50b44c:
[1] 15

[[90]]
+ 2/34 vertices, from a50b44c:
[1] 15 33

[[91]]
+ 3/34 vertices, from a50b44c:
[1] 15 33 34

[[92]]
+ 2/34 vertices, from a50b44c:
[1] 15 34

[[93]]
+ 1/34 vertex, from a50b44c:
[1] 14

[[94]]
+ 2/34 vertices, from a50b44c:
[1] 14 34

[[95]]
+ 1/34 vertex, from a50b44c:
[1] 4

[[96]]
+ 2/34 vertices, from a50b44c:
[1]  4 14

[[97]]
+ 2/34 vertices, from a50b44c:
[1]  4 13

[[98]]
+ 2/34 vertices, from a50b44c:
[1] 4 8

[[99]]
+ 1/34 vertex, from a50b44c:
[1] 3

[[100]]
+ 2/34 vertices, from a50b44c:
[1] 3 4

[[101]]
+ 3/34 vertices, from a50b44c:
[1]  3  4 14

[[102]]
+ 3/34 vertices, from a50b44c:
[1] 3 4 8

[[103]]
+ 2/34 vertices, from a50b44c:
[1]  3 14

[[104]]
+ 2/34 vertices, from a50b44c:
[1]  3 10

[[105]]
+ 2/34 vertices, from a50b44c:
[1]  3 29

[[106]]
+ 2/34 vertices, from a50b44c:
[1]  3 28

[[107]]
+ 2/34 vertices, from a50b44c:
[1] 3 9

[[108]]
+ 3/34 vertices, from a50b44c:
[1]  3  9 33

[[109]]
+ 2/34 vertices, from a50b44c:
[1] 3 8

[[110]]
+ 2/34 vertices, from a50b44c:
[1]  3 33

[[111]]
+ 1/34 vertex, from a50b44c:
[1] 2

[[112]]
+ 2/34 vertices, from a50b44c:
[1] 2 3

[[113]]
+ 3/34 vertices, from a50b44c:
[1] 2 3 4

[[114]]
+ 4/34 vertices, from a50b44c:
[1]  2  3  4 14

[[115]]
+ 4/34 vertices, from a50b44c:
[1] 2 3 4 8

[[116]]
+ 3/34 vertices, from a50b44c:
[1]  2  3 14

[[117]]
+ 3/34 vertices, from a50b44c:
[1] 2 3 8

[[118]]
+ 2/34 vertices, from a50b44c:
[1] 2 4

[[119]]
+ 3/34 vertices, from a50b44c:
[1]  2  4 14

[[120]]
+ 3/34 vertices, from a50b44c:
[1] 2 4 8

[[121]]
+ 2/34 vertices, from a50b44c:
[1]  2 14

[[122]]
+ 2/34 vertices, from a50b44c:
[1]  2 31

[[123]]
+ 2/34 vertices, from a50b44c:
[1]  2 18

[[124]]
+ 2/34 vertices, from a50b44c:
[1]  2 20

[[125]]
+ 2/34 vertices, from a50b44c:
[1]  2 22

[[126]]
+ 2/34 vertices, from a50b44c:
[1] 2 8

[[127]]
+ 1/34 vertex, from a50b44c:
[1] 1

[[128]]
+ 2/34 vertices, from a50b44c:
[1] 1 2

[[129]]
+ 3/34 vertices, from a50b44c:
[1] 1 2 3

[[130]]
+ 4/34 vertices, from a50b44c:
[1] 1 2 3 4

[[131]]
+ 5/34 vertices, from a50b44c:
[1]  1  2  3  4 14

[[132]]
+ 5/34 vertices, from a50b44c:
[1] 1 2 3 4 8

[[133]]
+ 4/34 vertices, from a50b44c:
[1]  1  2  3 14

[[134]]
+ 4/34 vertices, from a50b44c:
[1] 1 2 3 8

[[135]]
+ 3/34 vertices, from a50b44c:
[1] 1 2 4

[[136]]
+ 4/34 vertices, from a50b44c:
[1]  1  2  4 14

[[137]]
+ 4/34 vertices, from a50b44c:
[1] 1 2 4 8

[[138]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 14

[[139]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 18

[[140]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 20

[[141]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 22

[[142]]
+ 3/34 vertices, from a50b44c:
[1] 1 2 8

[[143]]
+ 2/34 vertices, from a50b44c:
[1] 1 3

[[144]]
+ 3/34 vertices, from a50b44c:
[1] 1 3 4

[[145]]
+ 4/34 vertices, from a50b44c:
[1]  1  3  4 14

[[146]]
+ 4/34 vertices, from a50b44c:
[1] 1 3 4 8

[[147]]
+ 3/34 vertices, from a50b44c:
[1]  1  3 14

[[148]]
+ 3/34 vertices, from a50b44c:
[1] 1 3 9

[[149]]
+ 3/34 vertices, from a50b44c:
[1] 1 3 8

[[150]]
+ 2/34 vertices, from a50b44c:
[1] 1 4

[[151]]
+ 3/34 vertices, from a50b44c:
[1]  1  4 14

[[152]]
+ 3/34 vertices, from a50b44c:
[1]  1  4 13

[[153]]
+ 3/34 vertices, from a50b44c:
[1] 1 4 8

[[154]]
+ 2/34 vertices, from a50b44c:
[1]  1 14

[[155]]
+ 2/34 vertices, from a50b44c:
[1] 1 5

[[156]]
+ 3/34 vertices, from a50b44c:
[1]  1  5 11

[[157]]
+ 3/34 vertices, from a50b44c:
[1] 1 5 7

[[158]]
+ 2/34 vertices, from a50b44c:
[1]  1 12

[[159]]
+ 2/34 vertices, from a50b44c:
[1] 1 6

[[160]]
+ 3/34 vertices, from a50b44c:
[1]  1  6 11

[[161]]
+ 3/34 vertices, from a50b44c:
[1] 1 6 7

[[162]]
+ 2/34 vertices, from a50b44c:
[1]  1 11

[[163]]
+ 2/34 vertices, from a50b44c:
[1] 1 7

[[164]]
+ 2/34 vertices, from a50b44c:
[1]  1 13

[[165]]
+ 2/34 vertices, from a50b44c:
[1]  1 18

[[166]]
+ 2/34 vertices, from a50b44c:
[1]  1 20

[[167]]
+ 2/34 vertices, from a50b44c:
[1]  1 22

[[168]]
+ 2/34 vertices, from a50b44c:
[1]  1 32

[[169]]
+ 2/34 vertices, from a50b44c:
[1] 1 9

[[170]]
+ 2/34 vertices, from a50b44c:
[1] 1 8

> weighted_cliques(g, maximal = TRUE)
[[1]]
+ 3/34 vertices, from a50b44c:
[1] 32 33 34

[[2]]
+ 2/34 vertices, from a50b44c:
[1] 20 34

[[3]]
+ 4/34 vertices, from a50b44c:
[1]  9 31 33 34

[[4]]
+ 3/34 vertices, from a50b44c:
[1] 29 32 34

[[5]]
+ 2/34 vertices, from a50b44c:
[1] 10 34

[[6]]
+ 3/34 vertices, from a50b44c:
[1] 27 30 34

[[7]]
+ 3/34 vertices, from a50b44c:
[1] 25 26 32

[[8]]
+ 2/34 vertices, from a50b44c:
[1] 25 28

[[9]]
+ 2/34 vertices, from a50b44c:
[1] 24 26

[[10]]
+ 4/34 vertices, from a50b44c:
[1] 24 30 33 34

[[11]]
+ 3/34 vertices, from a50b44c:
[1] 24 28 34

[[12]]
+ 3/34 vertices, from a50b44c:
[1] 23 33 34

[[13]]
+ 3/34 vertices, from a50b44c:
[1] 21 33 34

[[14]]
+ 3/34 vertices, from a50b44c:
[1] 19 33 34

[[15]]
+ 3/34 vertices, from a50b44c:
[1]  6  7 17

[[16]]
+ 3/34 vertices, from a50b44c:
[1] 16 33 34

[[17]]
+ 3/34 vertices, from a50b44c:
[1] 15 33 34

[[18]]
+ 2/34 vertices, from a50b44c:
[1] 14 34

[[19]]
+ 2/34 vertices, from a50b44c:
[1]  3 10

[[20]]
+ 2/34 vertices, from a50b44c:
[1]  3 29

[[21]]
+ 2/34 vertices, from a50b44c:
[1]  3 28

[[22]]
+ 3/34 vertices, from a50b44c:
[1]  3  9 33

[[23]]
+ 2/34 vertices, from a50b44c:
[1]  2 31

[[24]]
+ 5/34 vertices, from a50b44c:
[1]  1  2  3  4 14

[[25]]
+ 5/34 vertices, from a50b44c:
[1] 1 2 3 4 8

[[26]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 18

[[27]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 20

[[28]]
+ 3/34 vertices, from a50b44c:
[1]  1  2 22

[[29]]
+ 3/34 vertices, from a50b44c:
[1] 1 3 9

[[30]]
+ 3/34 vertices, from a50b44c:
[1]  1  4 13

[[31]]
+ 3/34 vertices, from a50b44c:
[1]  1  5 11

[[32]]
+ 3/34 vertices, from a50b44c:
[1] 1 5 7

[[33]]
+ 2/34 vertices, from a50b44c:
[1]  1 12

[[34]]
+ 3/34 vertices, from a50b44c:
[1]  1  6 11

[[35]]
+ 3/34 vertices, from a50b44c:
[1] 1 6 7

[[36]]
+ 2/34 vertices, from a50b44c:
[1]  1 32

> largest_weighted_cliques(g)
[[1]]
+ 5/34 vertices, from a50b44c:
[1]  1  2  3  4 14

> weighted_clique_num(g)
[1] 15
> 
> 
> 
> cleanEx()
> nameEx("which_multiple")
> ### * which_multiple
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: which_multiple
> ### Title: Find the multiple or loop edges in a graph
> ### Aliases: which_multiple any_multiple count_multiple which_loop any_loop
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> # Loops
> g <- make_graph(c(1, 1, 2, 2, 3, 3, 4, 5))
> any_loop(g)
[1] TRUE
> which_loop(g)
[1]  TRUE  TRUE  TRUE FALSE
> 
> # Multiple edges
> g <- sample_pa(10, m = 3, algorithm = "bag")
> any_multiple(g)
[1] TRUE
> which_multiple(g)
 [1] FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE
[13] FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE
[25] FALSE FALSE FALSE
> count_multiple(g)
 [1] 3 3 3 2 1 2 2 1 2 2 2 1 2 2 1 2 1 2 3 3 3 2 1 2 1 1 1
> which_multiple(simplify(g))
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[13] FALSE FALSE FALSE FALSE FALSE
> all(count_multiple(simplify(g)) == 1)
[1] TRUE
> 
> # Direction of the edge is important
> which_multiple(make_graph(c(1, 2, 2, 1)))
[1] FALSE FALSE
> which_multiple(make_graph(c(1, 2, 2, 1), dir = FALSE))
[1] FALSE  TRUE
> 
> # Remove multiple edges but keep multiplicity
> g <- sample_pa(10, m = 3, algorithm = "bag")
> E(g)$weight <- count_multiple(g)
> g <- simplify(g, edge.attr.comb = list(weight = "min"))
> any(which_multiple(g))
[1] FALSE
> E(g)$weight
 [1] 3 3 2 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1
> 
> 
> 
> 
> cleanEx()
> nameEx("which_mutual")
> ### * which_mutual
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: which_mutual
> ### Title: Find mutual edges in a directed graph
> ### Aliases: which_mutual
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- sample_gnm(10, 50, directed = TRUE)
> reciprocity(g)
[1] 0.48
> dyad_census(g)
$mut
[1] 12

$asym
[1] 26

$null
[1] 7

> which_mutual(g)
 [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE
[13] FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE FALSE
[25]  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE
[37]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE
[49] FALSE  TRUE
> sum(which_mutual(g)) / 2 == dyad_census(g)$mut
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("with_edge_")
> ### * with_edge_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_edge_
> ### Title: Constructor modifier to add edge attributes
> ### Aliases: with_edge_
> 
> ### ** Examples
> 
> make_(
+   ring(10),
+   with_edge_(
+     color = "red",
+     weight = rep(1:2, 5)
+   )
+ ) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("with_graph_")
> ### * with_graph_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_graph_
> ### Title: Constructor modifier to add graph attributes
> ### Aliases: with_graph_
> 
> ### ** Examples
> 
> make_(ring(10), with_graph_(name = "10-ring"))
IGRAPH 7257d5c U--- 10 10 -- 10-ring
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 7257d5c:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> 
> 
> cleanEx()
> nameEx("with_igraph_opt")
> ### * with_igraph_opt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_igraph_opt
> ### Title: Run code with a temporary igraph options setting
> ### Aliases: with_igraph_opt
> 
> ### ** Examples
> 
> with_igraph_opt(
+   list(sparsematrices = FALSE),
+   make_ring(10)[]
+ )
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    0    1    0    0    0    0    0    0    0     1
 [2,]    1    0    1    0    0    0    0    0    0     0
 [3,]    0    1    0    1    0    0    0    0    0     0
 [4,]    0    0    1    0    1    0    0    0    0     0
 [5,]    0    0    0    1    0    1    0    0    0     0
 [6,]    0    0    0    0    1    0    1    0    0     0
 [7,]    0    0    0    0    0    1    0    1    0     0
 [8,]    0    0    0    0    0    0    1    0    1     0
 [9,]    0    0    0    0    0    0    0    1    0     1
[10,]    1    0    0    0    0    0    0    0    1     0
> igraph_opt("sparsematrices")
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("with_vertex_")
> ### * with_vertex_
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: with_vertex_
> ### Title: Constructor modifier to add vertex attributes
> ### Aliases: with_vertex_
> 
> ### ** Examples
> 
> make_(
+   ring(10),
+   with_vertex_(
+     color = "#7fcdbb",
+     frame.color = "#7fcdbb",
+     name = LETTERS[1:10]
+   )
+ ) %>%
+   plot()
> 
> 
> 
> cleanEx()
> nameEx("without_attr")
> ### * without_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: without_attr
> ### Title: Construtor modifier to remove all attributes from a graph
> ### Aliases: without_attr
> 
> ### ** Examples
> 
> g1 <- make_ring(10)
> g1
IGRAPH 4d52a37 U--- 10 10 -- Ring graph
+ attr: name (g/c), mutual (g/l), circular (g/l)
+ edges from 4d52a37:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> g2 <- make_(ring(10), without_attr())
> g2
IGRAPH 9ed9e87 U--- 10 10 -- 
+ edges from 9ed9e87:
 [1] 1-- 2 2-- 3 3-- 4 4-- 5 5-- 6 6-- 7 7-- 8 8-- 9 9--10 1--10
> 
> 
> 
> cleanEx()
> nameEx("without_loops")
> ### * without_loops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: without_loops
> ### Title: Constructor modifier to drop loop edges
> ### Aliases: without_loops
> 
> ### ** Examples
> 
> # An artificial example
> make_(full_graph(5, loops = TRUE))
IGRAPH 16c12bd U--- 5 15 -- Full graph
+ attr: name (g/c), loops (g/l)
+ edges from 16c12bd:
 [1] 1--1 1--2 1--3 1--4 1--5 2--2 2--3 2--4 2--5 3--3 3--4 3--5 4--4 4--5 5--5
> make_(full_graph(5, loops = TRUE), without_loops())
IGRAPH a9ccf23 U--- 5 10 -- Full graph
+ attr: name (g/c), loops (g/l)
+ edges from a9ccf23:
 [1] 1--2 1--3 1--4 1--5 2--3 2--4 2--5 3--4 3--5 4--5
> 
> 
> 
> cleanEx()
> nameEx("without_multiples")
> ### * without_multiples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: without_multiples
> ### Title: Constructor modifier to drop multiple edges
> ### Aliases: without_multiples
> 
> ### ** Examples
> 
> sample_(pa(10, m = 3, algorithm = "bag"))
IGRAPH c8253cf D--- 10 27 -- Barabasi graph
+ attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
| (g/c)
+ edges from c8253cf:
 [1]  2->1  2->1  2->1  3->2  3->1  3->2  4->2  4->3  4->2  5->2  5->2  5->4
[13]  6->2  6->2  6->3  7->3  7->1  7->3  8->2  8->2  8->2  9->1  9->2  9->1
[25] 10->8 10->6 10->1
> sample_(pa(10, m = 3, algorithm = "bag"), without_multiples())
IGRAPH d7c560d D--- 10 19 -- Barabasi graph
+ attr: name (g/c), power (g/n), m (g/n), zero.appeal (g/n), algorithm
| (g/c)
+ edges from d7c560d:
 [1]  2->1  3->1  4->1  4->3  5->1  5->3  6->1  6->2  6->3  7->1  7->3  8->2
[13]  8->3  8->4  9->1  9->7 10->1 10->7 10->8
> 
> 
> 
> cleanEx()
> nameEx("write_graph")
> ### * write_graph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: write_graph
> ### Title: Writing the graph to a file in some format
> ### Aliases: write_graph
> ### Keywords: graphs
> 
> ### ** Examples
> 
> 
> g <- make_ring(10)
> file <- tempfile(fileext = ".txt")
> write_graph(g, file, "edgelist")
> if (!interactive()) {
+   unlink(file)
+ }
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  7.354 4.312 9.878 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
