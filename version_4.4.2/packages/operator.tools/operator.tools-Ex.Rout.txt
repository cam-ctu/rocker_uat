
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "operator.tools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('operator.tools')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("inverse")
> ### * inverse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inverse
> ### Title: Invert an R operator
> ### Aliases: inverse inverse.name inverse.function
> ### Keywords: methods symbolmath utilities
> 
> ### ** Examples
> 
>   ## Not run: 
> ##D     inverse( as.name( '!=' ) )
> ##D     inverse( `==` )
> ##D  
> ## End(Not run)
>  
> 
> 
> 
> cleanEx()
> nameEx("is.operator")
> ### * is.operator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.operator
> ### Title: Utilities for operators
> ### Aliases: is.operator
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
>  
> 
>  ## Not run: 
> ##D    is.operator( `+` )
> ##D    is.operator( 'xyzzy' )
> ##D    is.operator( `+`, types="arithmetic" )
> ##D    is.operator( `+`, types="relational" )
> ##D 
> ##D    can.operator( `+` )
> ##D    can.operator( 'xyzzy' )
> ##D    can.operator( `+`, types="arithmetic" )
> ##D    can.operator( `+`, types="relational" )
> ##D 
> ##D    as.operator( `+` )
> ##D    as.operator( '+' )
> ##D    as.operator( as.name('+') )  
> ##D  
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("operator.type")
> ### * operator.type
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: operator.type
> ### Title: Return the type for an operator.
> ### Aliases: operator.type operator.type.name operator.type.function
> ### Keywords: manip methods utilities
> 
> ### ** Examples
> 
> 
> 
>  ## Not run: 
> ##D   operator.type( `+` )
> ##D   operator.type( `<=` )
> ##D   
> ##D   e <- quote( A +B )
> ##D   operator.type( e[[1]] )
> ##D 
> ##D   operator.type( as.name('+') )
> ##D  
> ## End(Not run)
>  
> 
> 
> 
> cleanEx()
> nameEx("operators")
> ### * operators
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: operators
> ### Title: Return the _names_ of defined operators.
> ### Aliases: operators
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
>  ## Not run: 
> ##D  
> ##D   operators()
> ##D   operators( types="arithmetic" )
> ##D   operators( types=c("arithmetic","logical" ) )
> ##D   operators( types='ALL' )
> ##D   operators( types='REG' )
> ##D   operators( types='UNREG' )
> ##D   operators( types='SPECIAL' )
> ##D  
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("rel.type")
> ### * rel.type
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rel.type
> ### Title: Get the relational type of a relational operator.
> ### Aliases: rel.type rel.type.function rel.type.name rel.type.call
> ###   rel.type.expression
> ### Keywords: utilities
> 
> ### ** Examples
> 
>  ## Not run: 
> ##D   rel.type( `==` ) 
> ##D   rel.type( as.name('==') )
> ##D  
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("removeOperator")
> ### * removeOperator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: removeOperator
> ### Title: Unregister a an operator.
> ### Aliases: removeOperator
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
>   # Unregister ? as an operator.
>   ## Not run: 
> ##D     removeOperator( '?' )
> ##D   
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("setOperator")
> ### * setOperator
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setOperator
> ### Title: Registers an operator for use with operator.tools package.
> ### Aliases: setOperator setOperators setOperators
> ### Keywords: utilities
> 
> ### ** Examples
> 
> 
>   ## Not run: 
> ##D     setOperator( '%!in%', 'relational' )
> ##D     operators( type='relational' )
> ##D   
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.054 0.012 0.067 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
