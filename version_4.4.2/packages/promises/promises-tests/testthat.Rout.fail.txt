
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(testthat)
> library(promises)
> 
> test_check("promises")
[ FAIL 2 | WARN 0 | SKIP 1 | PASS 327 ]

══ Skipped tests (1) ═══════════════════════════════════════════════════════════
• On CRAN (1): 'test-zzz-future_promise.R:1:1'

══ Failed tests ════════════════════════════════════════════════════════════════
── Error ('test-methods.R:159:5'): future: is treated as promise when used as resolution ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called ‘future’
Backtrace:
    ▆
 1. ├─testthat::expect_identical(extract(p), 1) at test-methods.R:159:5
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. ├─global extract(p)
 5. │ └─... %>% wait_for_it()
 6. └─global wait_for_it(.)
 7.   └─base::withRestarts(stop(err), continue_test = function(e) NULL)
 8.     └─base (local) withOneRestart(expr, restarts[[1L]])
 9.       └─base (local) doWithOneRestart(return(expr), restart)
── Error ('test-methods.R:167:5'): future: is treated as promise when used as resolution ──
<packageNotFoundError/error/condition>
Error in `loadNamespace(x)`: there is no package called ‘future’
Backtrace:
    ▆
 1. ├─testthat::expect_identical(extract(p), 1) at test-methods.R:167:5
 2. │ └─testthat::quasi_label(enquo(object), label, arg = "object")
 3. │   └─rlang::eval_bare(expr, quo_get_env(quo))
 4. ├─global extract(p)
 5. │ └─... %>% wait_for_it()
 6. └─global wait_for_it(.)
 7.   └─base::withRestarts(stop(err), continue_test = function(e) NULL)
 8.     └─base (local) withOneRestart(expr, restarts[[1L]])
 9.       └─base (local) doWithOneRestart(return(expr), restart)

[ FAIL 2 | WARN 0 | SKIP 1 | PASS 327 ]
Error: Test failures
Execution halted
