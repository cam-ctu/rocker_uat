
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "roxygen2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('roxygen2')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("double_escape_md")
> ### * double_escape_md
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: double_escape_md
> ### Title: Check markdown escaping
> ### Aliases: double_escape_md
> ### Keywords: internal
> 
> ### ** Examples
> 
> "%" # percent
[1] "%"
> "\"" # double quote
[1] "\""
> '\'' # single quote
[1] "'"
> 
> 
> 
> cleanEx()
> nameEx("escape_examples")
> ### * escape_examples
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: escape_examples
> ### Title: Escape examples
> ### Aliases: escape_examples
> ### Keywords: internal
> 
> ### ** Examples
> 
> # In examples we automatically escape Rd comments (%):
> 100 %% 30
[1] 10
> # even if they are in strings
> "50%"
[1] "50%"
> 
> # and \ and \v inside of strings and symbols
> "\v" # vertical tab
[1] "\v"
> "\\"
[1] "\\"
> # but not comments: \l \v
> 
> # other string escapes are left as is
> "\""
[1] "\""
> "\n"
[1] "\n"
> 
> # Otherwise, backslashes and parentheses are left as is. This
> # means that you need to escape unbalanced parentheses, which typically only
> # occur in \dontshow{}:
> ## Don't show: 
> if (FALSE) { 
+ ## End(Don't show)
+ print("Hello")
+ ## Don't show: 
+  } 
> ## End(Don't show)
> 
> # You also need to escape backslashes in infix operators and comments
> # (this is generally rare)
> `%\\%` <- function(x, y) x + y
> 10 %% 20
[1] 10
> # \\ (renders as two backslashes)
> 
> 
> 
> cleanEx()
> nameEx("namespace_roclet")
> ### * namespace_roclet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: namespace_roclet
> ### Title: Roclet: make 'NAMESPACE'
> ### Aliases: namespace_roclet
> 
> ### ** Examples
> 
> # The most common namespace tag is @export, which declares that a function
> # is part of the external interface of your package
> #' @export
> foofy <- function(x, y, z) {
+ }
> 
> # You'll also often find global imports living in a file called
> # R/{package}-package.R.
> #' @importFrom magrittr %>%
> #' @import rlang
> NULL
NULL
> 
> 
> 
> cleanEx()
> nameEx("rd_roclet")
> ### * rd_roclet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rd_roclet
> ### Title: Roclet: make Rd files
> ### Aliases: rd_roclet
> 
> ### ** Examples
> 
> #' The length of a string (in characters)
> #'
> #' @param x A character vector.
> #' @returns An integer vector the same length as `x`.
> #'   `NA` strings have `NA` length.
> #' @seealso [nchar()]
> #' @export
> #' @examples
> #' str_length(letters)
> #' str_length(c("i", "like", "programming", NA))
> str_length <- function(x) {
+ }
> 
> 
> 
> cleanEx()
> nameEx("roclet_find")
> ### * roclet_find
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: roclet_find
> ### Title: Create a roclet from a string.
> ### Aliases: roclet_find
> ### Keywords: internal
> 
> ### ** Examples
> 
> # rd, namespace, and vignette work for backward compatibility
> roclet_find("rd")
list()
attr(,"class")
[1] "roclet_rd" "roclet"   
> 
> # But generally you should specify the name of a function that
> # returns a roclet
> roclet_find("rd_roclet")
list()
attr(,"class")
[1] "roclet_rd" "roclet"   
> 
> # If it lives in another package, you'll need to use ::
> roclet_find("roxygen2::rd_roclet")
list()
attr(,"class")
[1] "roclet_rd" "roclet"   
> 
> # If it takes parameters (which no roclet does currently), you'll need
> # to call the function
> roclet_find("roxygen2::rd_roclet()")
list()
attr(,"class")
[1] "roclet_rd" "roclet"   
> 
> 
> 
> cleanEx()
> nameEx("roxy_block")
> ### * roxy_block
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: roxy_block
> ### Title: Blocks
> ### Aliases: roxy_block block_has_tags block_get_tags block_get_tag
> ###   block_get_tag_value
> ### Keywords: internal
> 
> ### ** Examples
> 
> # The easiest way to see the structure of a roxy_block is to create one
> # using parse_text:
> text <- "
+   #' This is a title
+   #'
+   #' @param x,y A number
+   #' @export
+   f <- function(x, y) x + y
+ "
> 
> # parse_text() returns a list of blocks, so I extract the first
> block <- parse_text(text)[[1]]
> block
<roxy_block> [<text>:6]
  $tag
    [line:  2] @title 'This is a title' {parsed}
    [line:  4] @param 'x,y A number' {parsed}
    [line:  5] @export '' {parsed}
    [line:  6] @usage '<generated>' {parsed}
    [line:  6] @.formals '<generated>' {parsed}
    [line:  6] @backref '<generated>' {parsed}
  $call   f <- function(x, y) x + y
  $object <function> 
    $topic f
    $alias f
> 
> 
> 
> cleanEx()
> nameEx("update_collate")
> ### * update_collate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_collate
> ### Title: Update Collate field in DESCRIPTION
> ### Aliases: update_collate @include
> 
> ### ** Examples
> 
> #' If `example-a.R', `example-b.R' and `example-c.R' live in R/
> #' and we're in `example-a.R`, then the following @include statement
> #' ensures that example-b and example-c are sourced before example-a.
> #' @include example-b.R example-c.R
> NULL
NULL
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.281 0.022 0.303 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
