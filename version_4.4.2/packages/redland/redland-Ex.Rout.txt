
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "redland"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('redland')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Model-class")
> ### * Model-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Model-class
> ### Title: A Redland Model object
> ### Aliases: Model-class Model
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> 
> 
> 
> cleanEx()
> nameEx("Node-class")
> ### * Node-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Encoding: UTF-8
> ### Name: Node-class
> ### Title: A Redland Node, used to store one node in an RDF triple
> ###   statement.
> ### Aliases: Node-class Node
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> # a blank node is created with a unique identifier generated by librdf
> node <- new("Node", world)
> # a blank node is created with a unique identifier generated by librdf
> node <- new("Node", world, blank=NULL)
> # a blank node is created with the user specified identifier, i.e. "_:id1"
> node <- new("Node", world, blank="someid")
> # a node type of 'literal' is created
> node <- new("Node", world, literal="A Node Value")
> # a Node type of 'resource' is created
> node <- new("Node", world, uri="http://www.example.com")
> # Create a literal node, specifying a language encoding
> node <- new("Node", world, literal="Gérard de La Martinière", language="fr")
> 
> 
> 
> cleanEx()
> nameEx("Parser-class")
> ### * Parser-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Parser-class
> ### Title: An RDF Parser object
> ### Aliases: Parser-class Parser
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> # Create the default "rdfxml" parser
> parser <- new("Parser", world)
> filePath <- system.file("extdata/example.rdf", package="redland")
> parseFileIntoModel(parser, world, filePath, model)
> 
> 
> 
> cleanEx()
> nameEx("Query-class")
> ### * Query-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Query-class
> ### Title: Query an RDF model
> ### Aliases: Query-class Query
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> stmt <- new("Statement", world=world, 
+   subject="https://cn.dataone.org/cn/v1/resolve/urn:uuid:274a0c5c-3082-4562-bbd3-2b1288768cac",
+   predicate="http://www.w3.org/ns/prov#hadPlan",
+   object="https://cn.dataone.org/cn/v1/resolve/urn:uuid:01305f45-f22b-40c8-8d27-00357d01e4a5")
> status <- addStatement(model, stmt)
> stmt <- new("Statement", world=world, 
+            subject="https://orcid.org/0000-0002-2192-403X",
+            predicate="http://www.w3.org/ns/prov#Agent",
+            object="slaughter", 
+            objectType="literal", 
+            datatype_uri="http://www.w3.org/2001/XMLSchema#string")
> status <- addStatement(model, stmt)
> queryString <- 
+     paste("PREFIX orcid: <https://orcid.org/>",
+           "PREFIX dataone: <https://cn.dataone.org/cn/v1/resolve/>",
+           "PREFIX prov: <http://www.w3.org/ns/prov#>",
+           "SELECT ?a ?c WHERE { ?a prov:Agent ?c . }", sep=" ")
> query <- new("Query", world, queryString, base_uri=NULL, query_language="sparql", query_uri=NULL)
> # Return all results as a string
> results <- getResults(query, model, "rdfxml")
> 
> 
> 
> 
> cleanEx()
> nameEx("Serializer-class")
> ### * Serializer-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Serializer-class
> ### Title: An RDF Serializer object.
> ### Aliases: Serializer-class Serializer
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> filePath <- system.file("extdata/example.rdf", package="redland")
> parser <- new("Parser", world)
> parseFileIntoModel(parser, world, filePath, model)
> # Creat the default "rdfxml" serizlizer
> serializer <- new("Serializer", world)
> # Add a namespace definition to the serializer
> status <- setNameSpace(serializer, world, namespace="http://purl.org/dc/elements/1.1/", prefix="dc")
> rdf <- serializeToCharacter(serializer, world, model, baseUri="")
> 
> 
> 
> cleanEx()
> nameEx("Statement-class")
> ### * Statement-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Encoding: UTF-8
> ### Name: Statement-class
> ### Title: An RDF Statement object
> ### Aliases: Statement-class Statement
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> # Create nodes manually and add to the statment
> subject <- new("Node", blank="_:myid1", world)
> predicate <- new("Node", uri="http://www.example.com/isa", world)
> object <- new("Node", literal="thing", world)
> stmt <- new("Statement", world, subject, predicate, object)
> 
> # Create the statement specifying node values directly
> stmt <- new("Statement", world, subject="http://www.example.com/myevent",
+                                 predicate="http://example.com/occurredAt",
+                                 object="Tue Feb 17 14:05:13 PST 2015")
> stmt <- new("Statement", world, subject=NULL, 
+                                 predicate="http://www.example.com/hasAddr",
+                                 object="http://www.nothing.com", objectType="literal")
> stmt <- new("Statement", world, subject="http://www.example.com/BobSmith", 
+                                 predicate="http://www.example.com/says",
+                                 object="¡Hola, amigo! ¿Cómo estás?", 
+                                 objectType="literal",
+                                 language="es")
> 
> 
> 
> cleanEx()
> nameEx("Storage-class")
> ### * Storage-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Storage-class
> ### Title: A Redland Storage object
> ### Aliases: Storage-class Storage
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> 
> 
> 
> cleanEx()
> nameEx("Storage-initialize")
> ### * Storage-initialize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: initialize,Storage-method
> ### Title: Initialize a Storage object
> ### Aliases: initialize,Storage-method Storage-initialize
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> 
> 
> 
> cleanEx()
> nameEx("World-class")
> ### * World-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: World-class
> ### Title: A Redland World object, used to initialize the Redland RDF
> ###   library.
> ### Aliases: World-class World
> ### Keywords: classes
> 
> ### ** Examples
> 
> world <- new("World")
> 
> 
> 
> cleanEx()
> nameEx("addStatement")
> ### * addStatement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: addStatement
> ### Title: Add a Statement object to the Model
> ### Aliases: addStatement addStatement,Model,Statement-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> 
> 
> 
> cleanEx()
> nameEx("freeModel")
> ### * freeModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeModel
> ### Title: Free memory used by a librdf model.
> ### Aliases: freeModel freeModel,Model-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> # At this point, some operations would be performed with the model.
> # See '?redland' for a complete example.
> # When the Model object is no longer needed, the resources it has allocated can be freed.
> freeModel(model)
NULL
> rm(model)
> 
> 
> 
> cleanEx()
> nameEx("freeParser")
> ### * freeParser
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeParser
> ### Title: Free memory used by a librdf parser
> ### Aliases: freeParser freeParser,Parser-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> parser <- new("Parser", world)
> filePath <- system.file("extdata/example.rdf", package="redland")
> parseFileIntoModel(parser, world, filePath, model)
> # At this point, some operations would be performed with the Model that has been populated
> # with the parser.
> # See '?redland' for a complete example.
> # When the parser object is no longer needed, the resources it had allocated can be freed.
> freeParser(parser)
NULL
> rm(parser)
> 
> 
> 
> cleanEx()
> nameEx("freeQuery")
> ### * freeQuery
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeQuery
> ### Title: Free memory used by a librdf query
> ### Aliases: freeQuery freeQuery,Query-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> stmt <- new("Statement", world=world, 
+   subject="https://orcid.org/0000-0002-2192-403X",
+   predicate="http://www.w3.org/ns/prov#Agent",
+   object="slaughter", 
+   objectType="literal", datatype_uri="http://www.w3.org/2001/XMLSchema#string")
> status <- addStatement(model, stmt)
> queryString <- paste("PREFIX orcid: <https://orcid.org/>",
+                      "PREFIX dataone: <https://cn.dataone.org/cn/v1/resolve/>",
+                      "PREFIX prov: <http://www.w3.org/ns/prov#>",
+                      "SELECT ?a ?c WHERE { ?a prov:Agent ?c . }", sep=" ")
> query <- new("Query", world, queryString, base_uri=NULL, 
+   query_language="sparql", query_uri=NULL)
> # Return all results as a string
> results <- getResults(query, model, "rdfxml")
> 
> # When the query object is no longer needed, the resources it had allocated can be freed.
> freeQuery(query)
NULL
> rm(query)
> 
> 
> 
> cleanEx()
> nameEx("freeSerializer")
> ### * freeSerializer
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeSerializer
> ### Title: Free memory used by a librdf serializer.
> ### Aliases: freeSerializer freeSerializer,Serializer-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> filePath <- system.file("extdata/example.rdf", package="redland")
> parser <- new("Parser", world)
> parseFileIntoModel(parser, world, filePath, model)
> # Creat the default "rdfxml" serizlizer
> serializer <- new("Serializer", world)
> # At this point, some operations would be performed with the Serializer object. 
> # See '?Serializer' for a complete example.
> # When the serializer object is no longer needed, the resources it had allocated can be freed.
> freeSerializer(serializer)
NULL
> rm(serializer)
> 
> 
> 
> cleanEx()
> nameEx("freeStatement")
> ### * freeStatement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeStatement
> ### Title: Free memory used by a librdf statement
> ### Aliases: freeStatement freeStatement,Statement-method
> 
> ### ** Examples
> 
> world <- new("World")
> stmt <- new("Statement", world, subject="http://www.example.com/myevent",
+                                 predicate="http://example.com/occurredAt",
+                                 object="Tue Feb 17 14:05:13 PST 2015")
> # At this point, some operations would be performed with the Statement.
> # See '?redland' for a complete example.
> # When the Statement object is no longer needed, the resources it had allocated can be freed.
> freeStatement(stmt)                                
NULL
> rm(stmt)
> 
> 
> 
> cleanEx()
> nameEx("freeStorage")
> ### * freeStorage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeStorage
> ### Title: Free memory used by a librdf storage object
> ### Aliases: freeStorage freeStorage,Storage-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> # At this point we would perform some operations using the storage object.
> # See '?redland' for a complete example.
> # When the Storage object is no longer needed, the resources it had allocated can be freed.
> status <- freeStorage(storage)
> rm(storage)
> 
> 
> 
> cleanEx()
> nameEx("freeWorld")
> ### * freeWorld
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freeWorld
> ### Title: Free memory used by a librdf world object
> ### Aliases: freeWorld freeWorld,World-method
> 
> ### ** Examples
> 
> world <- new("World")
> # At this point we would perform some operations using the world object.
> # When the world object is no longer needed, we can free the resources it has allocated.
> result <- freeWorld(world)
> rm(world)
> 
> 
> 
> cleanEx()
> nameEx("getBlankNodeId")
> ### * getBlankNodeId
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getBlankNodeId
> ### Title: Get the blank identifier that has been assigned for a specified
> ###   Node object
> ### Aliases: getBlankNodeId getBlankNodeId,Node-method
> 
> ### ** Examples
> 
> world <- new("World")
> # a blank node is created with a unique identifier generated by librdf
> node <- new("Node", world, blank=NULL)
> nodeId <- getBlankNodeId(node)
> 
> 
> 
> cleanEx()
> nameEx("getNodeType")
> ### * getNodeType
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getNodeType
> ### Title: Determine the node type and return as a string
> ### Aliases: getNodeType getNodeType,Node-method
> 
> ### ** Examples
> 
> world <- new("World")
> node <- new("Node", world, uri="http://www.example.com")
> nodeType <- getNodeType(node)
> 
> 
> 
> cleanEx()
> nameEx("getNodeValue")
> ### * getNodeValue
> 
> flush(stderr()); flush(stdout())
> 
> ### Encoding: UTF-8
> ### Name: getNodeValue
> ### Title: Get the value of the node as a string
> ### Aliases: getNodeValue getNodeValue,Node-method
> 
> ### ** Examples
> 
> world <- new("World")
> node <- new("Node", world, literal="¡Hola, amigo! ¿Cómo estás?", language="es")
> value <- getNodeValue(node)
> 
> 
> 
> cleanEx()
> nameEx("getResults")
> ### * getResults
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getResults
> ### Title: Return all query results
> ### Aliases: getResults getResults,Query-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> stmt <- new("Statement", world=world, 
+   subject="https://orcid.org/0000-0002-2192-403X",
+   predicate="http://www.w3.org/ns/prov#Agent",
+   object="slaughter", 
+   objectType="literal", datatype_uri="http://www.w3.org/2001/XMLSchema#string")
>   #objectType="literal", language="en")
> status <- addStatement(model, stmt)
> queryString <- paste("PREFIX orcid: <https://orcid.org/>",
+                      "PREFIX dataone: <https://cn.dataone.org/cn/v1/resolve/>",
+                      "PREFIX prov: <http://www.w3.org/ns/prov#>",
+                      "SELECT ?a ?c WHERE { ?a prov:Agent ?c . }", sep=" ")
> query <- new("Query", world, queryString, base_uri=NULL, query_language="sparql", query_uri=NULL)
> # Return all results as a string
> results <- getResults(query, model, "rdfxml")
> results <- getResults(query, model, "turtle")
> results <- getResults(query, model, "json")
> 
> # When the query object is no longer needed, the resources it had allocated can be freed.
> freeQuery(query)
NULL
> rm(query)
> 
> 
> 
> cleanEx()
> nameEx("getTermType")
> ### * getTermType
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getTermType
> ### Title: Return the redland node type for the specified RDF term in a
> ###   statement
> ### Aliases: getTermType getTermType,Statement,character-method
> 
> ### ** Examples
> 
> world <- new("World")
> subject <- new("Node", blank="_:myid1", world)
> predicate <- new("Node", uri="http://www.example.com/isa", world)
> object <- new("Node", literal="thing", world)
> stmt <- new("Statement", world, subject, predicate, object, world)
> termType <- getTermType(stmt, "predicate")
> 
> 
> 
> cleanEx()
> nameEx("mergeNamespace_roclet")
> ### * mergeNamespace_roclet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mergeNamespace_roclet
> ### Title: A custom Roxygen roclet that adds Redland RDF functions to
> ###   NAMESPACE file generated by Roxygen.
> ### Aliases: mergeNamespace_roclet
> 
> ### ** Examples
> 
> ## Not run: 
> ##D roxygen2::roxygenize()
> ##D devtools::document()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("parseFileIntoModel")
> ### * parseFileIntoModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: parseFileIntoModel
> ### Title: Parse the contents of a file into a model
> ### Aliases: parseFileIntoModel
> ###   parseFileIntoModel,Parser,World,character,Model-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> # Create the default "rdfxml" parser
> parser <- new("Parser", world)
> filePath <- system.file("extdata/example.rdf", package="redland")
> parseFileIntoModel(parser, world, filePath, model)
> 
> 
> 
> cleanEx()
> nameEx("redland")
> ### * redland
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: redland
> ### Title: Create, query and write RDF graphs.
> ### Aliases: redland
> 
> ### ** Examples
> 
> # This example creates the necessary R objects to hold an RDF model and reads 
> # in a file that contains RDF/XML statements. This model is then queried for 
> # and the query results inspected.
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> filePath <- system.file("extdata/example.rdf", package="redland")
> parser <- new("Parser", world)
> parseFileIntoModel(parser, world, filePath, model)
> queryString <- paste("PREFIX dc: <http://purl.org/dc/elements/1.1/> ",
+                      "SELECT ?a ?c WHERE { ?a dc:description ?c . }", sep="")
> query <- new("Query", world, queryString, base_uri=NULL, 
+              query_language="sparql", query_uri=NULL)
> results <- getResults(query, model, "rdfxml")
> 
> # When the query object is no longer needed, the resources it had allocated can be freed.
> freeQuery(query)
NULL
> rm(query)
> 
> 
> 
> cleanEx()
> nameEx("writeResults")
> ### * writeResults
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeResults
> ### Title: Write query results to a file.
> ### Aliases: writeResults writeResults,Query-method
> 
> ### ** Examples
> 
> world <- new("World")
> storage <- new("Storage", world, "hashes", name="", options="hash-type='memory'")
> model <- new("Model", world, storage, options="")
> stmt <- new("Statement", world=world, 
+   subject="https://orcid.org/0000-0002-2192-403X",
+   predicate="http://www.w3.org/ns/prov#Agent",
+   object="slaughter", 
+   objectType="literal", datatype_uri="http://www.w3.org/2001/XMLSchema#string")
> status <- addStatement(model, stmt)
> queryString <- paste("PREFIX orcid: <https://orcid.org/>",
+                      "PREFIX dataone: <https://cn.dataone.org/cn/v1/resolve/>",
+                      "PREFIX prov: <http://www.w3.org/ns/prov#>",
+                      "SELECT ?a ?c WHERE { ?a prov:Agent ?c . }", sep=" ")
> query <- new("Query", world, queryString, base_uri=NULL, query_language="sparql", query_uri=NULL)
> # Return all results as a string
> tf <- tempfile()
> writeResults(query, model, file=tf, mimeType="application/x-turtle")
[1] 0
> 
> # When the query object is no longer needed, the resources it had allocated can be freed.
> freeQuery(query)
NULL
> rm(query)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.433 0.055 0.487 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
