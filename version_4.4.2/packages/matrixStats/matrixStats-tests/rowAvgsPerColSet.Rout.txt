
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b          c          d           e           f
A -0.39444568  0.99039604 -1.4391729 -0.3279364  0.43118161  1.35518395
B -0.23161357 -1.39831597 -0.8472153 -1.6167740 -1.37296066  2.10166561
C -0.23687222 -1.61587007  1.1687549 -2.6742808 -1.81591923 -2.13211705
D  1.74384996 -0.52049095  1.3414685  0.5369395  0.59544704  0.62352566
E  0.29968391  0.96465465 -0.3326527 -0.7318533  0.88633223  0.05713583
F -0.14322766  0.63257398 -0.8190335 -0.5479637 -0.15209161 -0.40169616
G -1.68077051 -0.39588554 -0.0499608  0.6310818  0.62739624  0.59500559
H -0.19255844 -1.08849749 -1.0218618  0.3919254  1.79330277  0.49740480
I -0.49782777  0.98557076 -0.0992617 -0.4301419 -0.63139799  2.79780123
J  1.22129585 -0.86315599  0.2602542 -0.8336849  0.04244671  0.34081494
K -1.31876236 -0.38044692 -0.0243832 -1.4310626 -1.04422609 -0.14178749
L  0.21198760 -0.48612220 -1.1071418  1.3886530 -0.50400650  1.96089649
M -0.53908772 -0.96978251 -1.0535525 -1.3889465 -2.70598313  0.51529426
N -0.97392996  1.43448662  2.6626571 -0.4877342 -1.00762991 -0.70604448
O  1.27423676 -1.43284805 -0.1779630  0.5074887  0.29754460  1.33577814
P -0.87028743 -0.04891987  0.1509590  0.3096668 -0.51285403  1.32547852
Q -0.47620978  0.11983509  1.5249157 -0.2907817 -0.20494662  0.40185246
R  2.26124239 -0.23142022 -0.7381992 -1.3745697 -0.54230241 -1.38068311
S  0.09016208  0.33051711  1.9815170 -1.0531557  0.32439014 -1.33821997
T  1.84530230 -1.18571342 -1.4743972  1.4542509  0.29371657  0.20940012
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.29797518 -0.88355467  0.89318278
B -0.81496477 -1.23199464  0.36435248
C -0.92637114 -0.75276295 -1.97401814
D  0.61167951  0.93920401  0.60948635
E  0.63216928 -0.53225303  0.47173403
F  0.24467316 -0.68349861 -0.27689388
G -1.03832802  0.29056050  0.61120091
H -0.64052796 -0.31496821  1.14535379
I  0.24387150 -0.26470181  1.08320162
J  0.17906993 -0.28671535  0.19163082
K -0.84960464 -0.72772288 -0.59300679
L -0.13706730  0.14075561  0.72844500
M -0.75443511 -1.22124947 -1.09534443
N  0.23027833  1.08746141 -0.85683720
O -0.07930565  0.16476282  0.81666137
P -0.45960365  0.23031288  0.40631224
Q -0.17818735  0.61706698  0.09845292
R  1.01491108 -1.05638446 -0.96149276
S  0.21033959  0.46418067 -0.50691492
T  0.32979444 -0.01007314  0.25155835
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a          b           c           d           e          f
s1  0.22022962 -0.6360702  0.05595881 -1.02051294 -0.54056281  0.4870645
s2 -0.42921818  0.0282114 -0.55587721 -0.06420247  0.78873491  0.1869625
s3 -0.09582667 -0.1860386 -0.24263312 -0.32655909 -0.53429597  1.2394313
s4 -0.27726709 -0.2542660  0.39552514 -0.26488132 -0.98223062  0.6176266
s5  0.93012425 -0.2416954  0.32345906 -0.31606404 -0.03228558 -0.5269126
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.10253443
B -0.56086898
C -1.21771741
D  0.72012329
E  0.19055009
F -0.23857311
G -0.04552220
H  0.06328587
I  0.35412377
J  0.02799514
K -0.72344477
L  0.24404443
M -1.02367634
N  0.15363418
O  0.30070618
P  0.05900716
Q  0.17911085
R -0.33432205
S  0.05586845
T  0.19042655
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b            c         d         e         f
s1 0.06960839 -0.2579717 -0.004713465 -0.398444 -0.260128 0.4008345
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.29797518 -0.88355467  0.89318278
B -0.81496477 -1.23199464  0.36435248
C -0.92637114 -0.75276295 -1.97401814
D  0.61167951  0.93920401  0.60948635
E  0.63216928 -0.53225303  0.47173403
F  0.24467316 -0.68349861 -0.27689388
G -1.03832802  0.29056050  0.61120091
H -0.64052796 -0.31496821  1.14535379
I  0.24387150 -0.26470181  1.08320162
J  0.17906993 -0.28671535  0.19163082
K -0.84960464 -0.72772288 -0.59300679
L -0.13706730  0.14075561  0.72844500
M -0.75443511 -1.22124947 -1.09534443
N  0.23027833  1.08746141 -0.85683720
O -0.07930565  0.16476282  0.81666137
P -0.45960365  0.23031288  0.40631224
Q -0.17818735  0.61706698  0.09845292
R  1.01491108 -1.05638446 -0.96149276
S  0.21033959  0.46418067 -0.50691492
T  0.32979444 -0.01007314  0.25155835
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
             a          b          c          d          e          f
s1 -0.31302963 -0.2039600 -1.1431941 -0.9723552 -0.4708895  1.7284248
s2  0.75348887 -1.0681805  1.2551117 -1.0686706 -0.6102361 -0.7542957
s3  0.07822812  0.7986143 -0.5758431 -0.6399085  0.3671203 -0.1722802
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
