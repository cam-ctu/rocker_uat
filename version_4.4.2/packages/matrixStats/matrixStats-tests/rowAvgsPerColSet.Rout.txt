
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d           e           f
A -1.6123278  1.48298010  2.08831478 -0.49122962 -0.06818558  0.67841154
B  0.1606093 -0.50860863 -0.07594027  1.04758432 -0.33943324 -0.31836843
C  1.0056682 -0.41505933  0.20396029 -0.86768921  0.85441929  0.44941871
D  0.1812493  0.57985923  1.40143741  0.42680436 -0.10876591  0.56842497
E  2.1997404  1.55528719 -0.96779306  0.37234019 -0.38202857 -0.33843559
F  0.7934480  0.04969698 -0.36537993 -1.50651568  0.77394775  0.26503706
G -0.9632280  1.48292317  0.30297929 -1.14425245  0.43598083 -1.23387790
H  0.0847853  1.66856131  0.50810825  0.72893167  0.40860633  0.07561037
I  1.1609444 -1.43708884  0.98598611  1.22505237  0.14235490  1.11138657
J  0.8486571  0.30849091 -0.44095311 -0.88519115 -1.61656189  1.22325399
K  0.3674052  1.08438887 -1.27114675 -1.14627349  0.89157472 -0.90463239
L  0.2093444  0.44330729 -0.19027233 -0.79408293  0.28679972  2.12469579
M -0.9719846 -0.44504663 -1.85418441 -0.81203684  0.22480842 -0.49638008
N  1.9073791 -1.20814020 -0.33464165 -1.30784307 -0.01368152 -0.61906721
O  1.2387233 -0.08394259 -1.09721008 -1.64498168  0.47082844 -0.78898937
P -2.4468122 -1.26350648 -0.30595320 -1.49218798 -1.53625785 -0.07283508
Q  1.1862665 -0.08816371 -2.61940806  0.24383423 -0.37490867 -0.97791135
R  1.6330149 -0.42949761 -1.25387067  0.06832083 -0.72495107  0.18408457
S  0.1287806 -1.12052564  2.06982271  0.42497417  0.59894206  0.11095183
T  0.2871134  0.96106515 -2.19257678 -1.09330640 -0.87053724  0.39341971
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1         s2           s3
A -0.06467383  0.7985426  0.305112978
B -0.17399965  0.4858220 -0.328900835
C  0.29530446 -0.3318645  0.651919000
D  0.38055426  0.9141209  0.229829532
E  1.87751381 -0.2977264 -0.360232077
F  0.42157249 -0.9359478  0.519492405
G  0.25984758 -0.4206366 -0.398948538
H  0.87667330  0.6185200  0.242108353
I -0.13807222  1.1055192  0.626870735
J  0.57857402 -0.6630721 -0.196653949
K  0.72589705 -1.2087101 -0.006528836
L  0.32632585 -0.4921776  1.205747753
M -0.70851563 -1.3331106 -0.135785834
N  0.34961943 -0.8212424 -0.316374363
O  0.57739037 -1.3710959 -0.159080464
P -1.85515932 -0.8990706 -0.804546460
Q  0.54905137 -1.1877869 -0.676410008
R  0.60175867 -0.5927749 -0.270433251
S -0.49587253  1.2473984  0.354946945
T  0.62408927 -1.6429416 -0.238558763
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
             a           b          c           d           e           f
s1 -0.06620022  0.28479284  0.9044431  0.02886746  0.08450864  0.34447170
s2  0.52868643  1.18911716 -0.1305214 -0.38737406  0.30912659 -0.30791652
s3  0.64658780  0.09977455 -0.2290965 -0.40012380 -0.07395814  0.88867599
s4 -0.06817360 -0.75015897 -0.8979973 -1.31426239 -0.21357563 -0.49431793
s5  0.80879384 -0.16928045 -0.9990082 -0.08904429 -0.34286373 -0.07236381
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
            s1
A  0.346327242
B -0.005692821
C  0.205119665
D  0.508168226
E  0.406518432
F  0.001705695
G -0.186579180
H  0.579100539
I  0.531439254
J -0.093717354
K -0.163113967
L  0.346631993
M -0.725804030
N -0.262665763
O -0.317595324
P -1.186258792
Q -0.438381850
R -0.087149834
S  0.368824284
T -0.419137028
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a        b          c          d           e          f
s1 0.3699388 0.130849 -0.2704361 -0.4323874 -0.04735245 0.07170989
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1         s2           s3
A -0.06467383  0.7985426  0.305112978
B -0.17399965  0.4858220 -0.328900835
C  0.29530446 -0.3318645  0.651919000
D  0.38055426  0.9141209  0.229829532
E  1.87751381 -0.2977264 -0.360232077
F  0.42157249 -0.9359478  0.519492405
G  0.25984758 -0.4206366 -0.398948538
H  0.87667330  0.6185200  0.242108353
I -0.13807222  1.1055192  0.626870735
J  0.57857402 -0.6630721 -0.196653949
K  0.72589705 -1.2087101 -0.006528836
L  0.32632585 -0.4921776  1.205747753
M -0.70851563 -1.3331106 -0.135785834
N  0.34961943 -0.8212424 -0.316374363
O  0.57739037 -1.3710959 -0.159080464
P -1.85515932 -0.8990706 -0.804546460
Q  0.54905137 -1.1877869 -0.676410008
R  0.60175867 -0.5927749 -0.270433251
S -0.49587253  1.2473984  0.354946945
T  0.62408927 -1.6429416 -0.238558763
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b          c          d          e           f
s1 -0.7258592 0.48718573  1.0061873  0.2781773 -0.2038094  0.18002155
s2  0.5934588 0.08239995  0.8026988 -0.2204424  0.3728267  0.50892184
s3  1.4965942 0.80249208 -0.6665865 -0.5670877  0.1959596 -0.03669926
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
