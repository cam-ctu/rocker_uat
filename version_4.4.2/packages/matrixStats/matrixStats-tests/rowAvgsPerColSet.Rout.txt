
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a           b           c           d           e            f
A -0.76135043 -0.80486176  1.41865257  0.18836542 -0.20169021 -1.152036470
B  0.10776918  0.59912171  0.03065660 -1.20436503 -1.15242781  0.461291152
C -0.71987025 -0.13484645  0.28052586  1.06578807 -0.29166253  0.901517938
D  0.70422312  1.77389943 -1.07860867  0.05094456 -0.16129574 -0.827349681
E  0.92010457 -0.80517800 -1.01263784 -1.01841224  0.44047011  0.109755438
F -1.27732639 -0.50362012  1.21068384 -0.07307599 -0.53015345 -0.125808778
G -1.07858171  0.61394805  2.87322174 -0.98915878 -0.40699808  0.400918513
H -1.58184360 -1.68697878 -1.09142120 -0.17103685  1.42543735 -0.289364627
I -1.71268270 -1.56472177 -1.40497928 -1.09148875  0.51801636  1.328522447
J -0.44660410  2.71972759  1.09965393  0.15474170  1.92606461 -0.016393053
K -1.60758048 -1.17903425  1.14800509  0.14084727 -1.76505237 -0.647275172
L  2.26799599 -1.79421824 -0.90921861  1.85891316  1.87423975  0.033684065
M -0.68315474 -0.78935273  0.07532433 -0.24206831 -1.32812917 -0.590555785
N  0.71055065  1.93995518 -0.80662050 -0.92997430 -1.12846232 -0.704685573
O  0.91186141  0.44201084  0.26998034 -0.24756085  0.30108215 -0.816588053
P -0.07630945 -0.03225136 -0.18691811  0.41426845 -1.21609511 -0.193837787
Q -0.93389423  0.69165716 -0.27034643  0.07615456  1.83459878  0.154673245
R  0.59435750  1.14615892  1.28885826  0.86048752  0.04301672 -1.292504820
S  1.29314700 -1.35181558 -0.83736384 -0.06882673 -0.79255919 -1.422361101
T -0.03098424 -0.70527578  0.66080000  0.47159055  0.56407637 -0.002458975
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2           s3
A -0.78310610  0.80350899 -0.676863337
B  0.35344545 -0.58685422 -0.345568328
C -0.42735835  0.67315696  0.304927703
D  1.23906127 -0.51383206 -0.494322711
E  0.05746328 -1.01552504  0.275112776
F -0.89047325  0.56880392 -0.327981116
G -0.23231683  0.94203148 -0.003039785
H -1.63441119 -0.63122903  0.568036363
I -1.63870224 -1.24823401  0.923269403
J  1.13656174  0.62719781  0.954835778
K -1.39330737  0.64442618 -1.206163772
L  0.23688888  0.47484727  0.953961907
M -0.73625374 -0.08337199 -0.959342476
N  1.32525292 -0.86829740 -0.916573945
O  0.67693613  0.01120974 -0.257752952
P -0.05428041  0.11367517 -0.704966448
Q -0.12111854 -0.09709594  0.994636011
R  0.87025821  1.07467289 -0.624744050
S -0.02933429 -0.45309528 -1.107460147
T -0.36813001  0.56619527  0.280808698
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a           b           c           d          e           f
s1 -0.1673071  0.35832823  0.16280659  0.02518325 -0.4517691 -0.15414427
s2 -0.7544118 -0.59545721  0.49496164 -0.56292097  0.2321890  0.02387514
s3 -0.3747178 -0.45456167 -0.01663472  0.26575335  0.6383171  0.17463457
s4  0.2157370  0.39009048 -0.16205848 -0.25133375 -0.8429011 -0.57641680
s5  0.2306565 -0.05481882  0.21048700  0.33485147  0.4122832 -0.64066291
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A -0.21882015
B -0.19299237
C  0.18357544
D  0.07696883
E -0.22764966
F -0.21655015
G  0.23555829
H -0.56586795
I -0.65455562
J  0.90619844
K -0.65168165
L  0.55523269
M -0.59298940
N -0.15320614
O  0.14346430
P -0.21519056
Q  0.25880718
R  0.44006235
S -0.52996324
T  0.15962465
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
            a          b         c           d            e          f
s1 -0.1700086 -0.0712838 0.1379124 -0.03769333 -0.002376189 -0.2345429
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2           s3
A -0.78310610  0.80350899 -0.676863337
B  0.35344545 -0.58685422 -0.345568328
C -0.42735835  0.67315696  0.304927703
D  1.23906127 -0.51383206 -0.494322711
E  0.05746328 -1.01552504  0.275112776
F -0.89047325  0.56880392 -0.327981116
G -0.23231683  0.94203148 -0.003039785
H -1.63441119 -0.63122903  0.568036363
I -1.63870224 -1.24823401  0.923269403
J  1.13656174  0.62719781  0.954835778
K -1.39330737  0.64442618 -1.206163772
L  0.23688888  0.47484727  0.953961907
M -0.73625374 -0.08337199 -0.959342476
N  1.32525292 -0.86829740 -0.916573945
O  0.67693613  0.01120974 -0.257752952
P -0.05428041  0.11367517 -0.704966448
Q -0.12111854 -0.09709594  0.994636011
R  0.87025821  1.07467289 -0.624744050
S -0.02933429 -0.45309528 -1.107460147
T -0.36813001  0.56619527  0.280808698
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
              a          b          c          d           e           f
s1 -0.326790627 -0.1028700  0.7246546 -0.5079998 -0.67705901 -0.34537266
s2 -0.007823565  0.8195265 -0.3990414  0.5583663 -0.22647914  0.03708413
s3 -0.178610913 -0.6543991  0.0990230 -0.5457441 -0.04484167 -0.00802667
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
