
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
            a          b           c           d           e           f
A  0.85761233 -0.5543880  1.42573421  1.00557435 -0.03768573 -0.65763395
B -0.58231957 -2.0747068  0.62486419 -0.41665085 -0.63829941 -0.66934590
C -0.24718858 -0.5260017  0.01218775  0.04814264  0.90962498  2.18013972
D -1.54117202 -0.7545037  1.54155318 -1.25749068  0.17951289  0.50562864
E  0.32664316  0.5109555  0.47382238 -0.99919317  0.89075661  0.45503276
F  0.89837292 -1.7649908  1.59154731  0.12084829 -0.25749538 -0.31225679
G  0.31718221 -0.4751969  0.46329782 -1.40487153  1.41609050  0.80204646
H -0.58701556  0.6606166 -2.61388919 -0.25981526 -0.23945673  1.02468038
I  0.12369096 -0.1740687 -0.33612422 -1.36685688 -1.01241057 -1.00905798
J  0.01303302 -0.1092265  1.01353478  0.78574835  0.10367302  0.78319679
K -0.23786483  0.7837976  0.07664886 -1.42669814  0.14409736 -0.80095888
L  1.32871321  2.5231235  1.27330066 -1.00917511  0.24285579  0.48008607
M -1.42937693  0.3161217 -1.14283448  0.58835293 -0.73397871 -1.05234157
N -1.99350661  0.7959047 -0.68094604 -0.58740761 -0.02472805 -0.29913632
O  0.60605311  1.1773501 -0.86496159 -0.71390283 -0.54458814  0.86487621
P  2.16463058  1.0667368  1.40211132 -0.02401507  1.27607233 -0.08400108
Q -0.55279756  0.3699631 -0.85859053  0.62046666  1.05711495 -1.61027932
R  1.16149879 -0.8325481  0.51467983 -0.38495343 -0.13351445  0.28035958
S  1.85812434 -1.6215991  0.25091601 -0.69623027  0.99081454 -1.37445682
T  0.91606949 -1.3570158  0.03911263 -0.11051789 -1.46790128 -1.04225251
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.15161219  1.21565428 -0.34765984
B -1.32851317  0.10410667 -0.65382265
C -0.38659515  0.03016520  1.54488235
D -1.14783788  0.14203125  0.34257077
E  0.41879932 -0.26268539  0.67289468
F -0.43330892  0.85619780 -0.28487609
G -0.07900733 -0.47078686  1.10906848
H  0.03680053 -1.43685223  0.39261182
I -0.02518885 -0.85149055 -1.01073427
J -0.04809673  0.89964157  0.44343490
K  0.27296639 -0.67502464 -0.32843076
L  1.92591836  0.13206277  0.36147093
M -0.55662763 -0.27724078 -0.89316014
N -0.59880097 -0.63417682 -0.16193219
O  0.89170162 -0.78943221  0.16014404
P  1.61568370  0.68904812  0.59603562
Q -0.09141725 -0.11906193 -0.27658218
R  0.16447533  0.06486320  0.07342257
S  0.11826263 -0.22265713 -0.19182114
T -0.22047317 -0.03570263 -1.25507689
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b           c          d            e          f
s1 -0.3782670 -0.9774000  0.90108483 -0.1551061  0.103288186  0.3396971
s2  0.2387957 -0.2671539 -0.02130542 -0.6357579  0.452473750  0.4923757
s3  0.3068931  0.7559065  0.50684002 -0.7542454 -0.130446100 -0.1366835
s4 -0.1630500  0.8390283 -0.32165770 -0.1842431 -0.006805643 -0.1426507
s5  0.8457238 -0.8603000 -0.01347051 -0.1428087  0.111628438 -0.9366573
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.33986888
B -0.62607638
C  0.39615080
D -0.22107862
E  0.27633620
F  0.04600426
G  0.18642477
H -0.33581329
I -0.62913789
J  0.43165991
K -0.24349634
L  0.80648402
M -0.57567618
N -0.46496999
O  0.08747115
P  0.96692248
Q -0.16235379
R  0.10092037
S -0.09873855
T -0.50375090
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a          b         c          d         e           f
s1 0.1700191 -0.1019838 0.2102982 -0.3744323 0.1060277 -0.07678373
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.15161219  1.21565428 -0.34765984
B -1.32851317  0.10410667 -0.65382265
C -0.38659515  0.03016520  1.54488235
D -1.14783788  0.14203125  0.34257077
E  0.41879932 -0.26268539  0.67289468
F -0.43330892  0.85619780 -0.28487609
G -0.07900733 -0.47078686  1.10906848
H  0.03680053 -1.43685223  0.39261182
I -0.02518885 -0.85149055 -1.01073427
J -0.04809673  0.89964157  0.44343490
K  0.27296639 -0.67502464 -0.32843076
L  1.92591836  0.13206277  0.36147093
M -0.55662763 -0.27724078 -0.89316014
N -0.59880097 -0.63417682 -0.16193219
O  0.89170162 -0.78943221  0.16014404
P  1.61568370  0.68904812  0.59603562
Q -0.09141725 -0.11906193 -0.27658218
R  0.16447533  0.06486320  0.07342257
S  0.11826263 -0.22265713 -0.19182114
T -0.22047317 -0.03570263 -1.25507689
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a          b         c          d          e           f
s1  0.1376464 -1.3145474 1.0252992  0.2944617 -0.3379926 -0.66348992
s2 -0.8941803 -0.6402527 0.7768705 -0.6046740  0.5445689  1.34288418
s3  0.6125080 -0.6270176 1.0326848 -0.4391724  0.3166306  0.07138798
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
