
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library("matrixStats")
> 
> X <- matrix(rnorm(20 * 6), nrow = 20, ncol = 6)
> rownames(X) <- LETTERS[1:nrow(X)]
> colnames(X) <- letters[1:ncol(X)]
> print(X)
           a           b           c           d            e          f
A  0.5204365  1.35126253 -0.82466596 -1.11452005  1.509204575  0.4940213
B -1.3804716  2.15547044 -1.16306890 -0.21968745 -0.489566233 -0.6069381
C -0.2785371 -0.17677632 -0.12325435  0.47337041 -0.128455344  0.4718851
D  1.6550253  0.15625108  0.19341114 -0.74711094  0.528119268  1.5211140
E  2.4637647 -0.06990696  0.49465450  1.70633353 -1.539684748 -0.4630248
F  0.8779502  1.65777100  1.01029625 -0.37620016  0.947851440 -0.3894795
G -1.8659101 -0.05969555  0.09998711 -1.63766777  1.543338373  0.5414916
H  0.9039250  2.44095643 -1.89737115  0.19689321 -0.612529371 -2.1328386
I  0.8770436 -0.95251301  1.12624919 -0.61972492  0.675163079  1.0877862
J -1.3641302  0.41813539  0.34495986 -1.73491045  0.407381841  1.6062650
K  0.1807202 -1.84770024 -0.03464952 -1.23950647 -0.934378138 -0.9197271
L  1.4755462  0.62811514  0.91695278 -1.28142395 -0.144555982 -0.9666428
M -1.4257208  0.50204930  0.72591169  0.68005858 -0.196415835  0.4454150
N  0.2276895 -0.28127603  1.37370607  0.33153316 -0.815746055  0.7028521
O -0.3087455  1.58061411  0.87917122  0.93881385 -0.970879126 -0.7555880
P -0.1428164  0.30966560  1.30157069 -1.12487927  2.060106055 -0.9957430
Q  0.6667455  0.78509808  1.53071188  0.27283218  0.406996906  1.6756584
R  0.2790979 -0.32887144  0.32801470 -0.74300223  0.109677370  0.6437235
S -1.7745387  0.83625025 -0.59333882 -0.28247604  0.005864304 -0.3016077
T -0.4300563 -0.38650277 -1.98669002 -0.03072111  1.642979387  0.4630672
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply rowMeans() for 3 sets of 2 columns
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> Z <- rowAvgsPerColSet(X, S = S)
> print(Z)
           s1          s2          s3
A  0.93584951 -0.96959301  1.00161295
B  0.38749942 -0.69137818 -0.54825217
C -0.22765672  0.17505803  0.17171488
D  0.90563818 -0.27684990  1.02461663
E  1.19692888  1.10049402 -1.00135479
F  1.26786060  0.31704805  0.27918599
G -0.96280283 -0.76884033  1.04241497
H  1.67244071 -0.85023897 -1.37268399
I -0.03773469  0.25326214  0.88147466
J -0.47299738 -0.69497530  1.00682340
K -0.83349000 -0.63707799 -0.92705263
L  1.05183068 -0.18223559 -0.55559940
M -0.46183575  0.70298514  0.12449957
N -0.02679327  0.85261962 -0.05644698
O  0.63593431  0.90899253 -0.86323357
P  0.08342459  0.08834571  0.53218151
Q  0.72592181  0.90177203  1.04132764
R -0.02488676 -0.20749377  0.37670041
S -0.46914425 -0.43790743 -0.14787169
T -0.40827955 -1.00870557  1.05302329
> 
> # Validation
> Z0 <- cbind(s1 = rowMeans(X[, 1:2]), s2 = rowMeans(X[, 3:4]),
+             s3 = rowMeans(X[, 5:6]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Apply colMeans() for 5 sets of 4 rows
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 5L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3 s4 s5
[1,]  1  5  9 13 17
[2,]  2  6 10 14 18
[3,]  3  7 11 15 19
[4,]  4  8 12 16 20
> 
> Z <- colAvgsPerRowSet(X, S = S)
> print(Z)
            a          b           c          d            e          f
s1  0.1291133  0.8715519 -0.47939452 -0.4019870 0.3548255667  0.4700206
s2  0.5949324  0.9922812 -0.07310832 -0.0276603 0.0847439233 -0.6109628
s3  0.2922950 -0.4384907  0.58837808 -1.2188914 0.0009026998  0.2019203
s4 -0.4123983  0.5277632  1.07008992  0.2063816 0.0192662597 -0.1507660
s5 -0.3146879  0.2264935 -0.18032557 -0.1958418 0.5413794917  0.6202103
> 
> # Validation
> Z0 <- rbind(s1 = colMeans(X[1:4, ]), s2 = colMeans(X[5:8, ]),
+             s3 = colMeans(X[9:12, ]), s4 = colMeans(X[13:16, ]),
+             s5 = colMeans(X[17:20, ]))
> stopifnot(identical(drop(Z), Z0))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # When there is only one "complete" set
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 1L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1
[1,]  1
[2,]  2
[3,]  3
[4,]  4
[5,]  5
[6,]  6
> 
> Z <- rowAvgsPerColSet(X, S = S, FUN = rowMeans)
> print(Z)
           s1
A  0.32262315
B -0.28404364
C  0.03970539
D  0.55113497
E  0.43202270
F  0.62136488
G -0.22974273
H -0.18349408
I  0.36566737
J -0.05371643
K -0.79920688
L  0.10466523
M  0.12188299
N  0.25645979
O  0.22723109
P  0.23465060
Q  0.88967382
R  0.04810663
S -0.35164112
T -0.12132061
> 
> Z0 <- rowMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> nbr_of_sets <- 1L
> S <- matrix(1:nrow(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
      s1
 [1,]  1
 [2,]  2
 [3,]  3
 [4,]  4
 [5,]  5
 [6,]  6
 [7,]  7
 [8,]  8
 [9,]  9
[10,] 10
[11,] 11
[12,] 12
[13,] 13
[14,] 14
[15,] 15
[16,] 16
[17,] 17
[18,] 18
[19,] 19
[20,] 20
> 
> Z <- colAvgsPerRowSet(X, S = S, FUN = colMeans)
> print(Z)
           a         b         c          d         e         f
s1 0.0578509 0.4359199 0.1851279 -0.3275998 0.2002236 0.1060845
> 
> Z0 <- colMeans(X)
> stopifnot(identical(drop(Z), Z0))
> 
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Use weights
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> nbr_of_sets <- 3L
> S <- matrix(1:ncol(X), ncol = nbr_of_sets)
> colnames(S) <- sprintf("s%d", 1:nbr_of_sets)
> print(S)
     s1 s2 s3
[1,]  1  3  5
[2,]  2  4  6
> 
> W <- matrix(runif(length(X)), nrow = nrow(X), ncol = ncol(X))
> Z1 <- rowAvgsPerColSet(X, W = W, S = S, FUN = rowWeightedMeans)
> print(Z1)
           s1          s2          s3
A  0.93584951 -0.96959301  1.00161295
B  0.38749942 -0.69137818 -0.54825217
C -0.22765672  0.17505803  0.17171488
D  0.90563818 -0.27684990  1.02461663
E  1.19692888  1.10049402 -1.00135479
F  1.26786060  0.31704805  0.27918599
G -0.96280283 -0.76884033  1.04241497
H  1.67244071 -0.85023897 -1.37268399
I -0.03773469  0.25326214  0.88147466
J -0.47299738 -0.69497530  1.00682340
K -0.83349000 -0.63707799 -0.92705263
L  1.05183068 -0.18223559 -0.55559940
M -0.46183575  0.70298514  0.12449957
N -0.02679327  0.85261962 -0.05644698
O  0.63593431  0.90899253 -0.86323357
P  0.08342459  0.08834571  0.53218151
Q  0.72592181  0.90177203  1.04132764
R -0.02488676 -0.20749377  0.37670041
S -0.46914425 -0.43790743 -0.14787169
T -0.40827955 -1.00870557  1.05302329
> Z2 <- colAvgsPerRowSet(X, W = W, S = S, FUN = colWeightedMeans)
> print(Z2)
            a           b          c          d          e           f
s1 -0.4300176  1.75336649 -0.9938674 -0.6671038  0.5098192 -0.05645839
s2  0.6882441 -0.01026262  0.0350784 -0.1368703  0.1998320  0.99649954
s3  1.6708575  0.79393202  0.7524754  0.6650667 -0.2959167 -0.42625214
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Result should always be a matrix, including when nrow(X) <= 1
> # (https://github.com/HenrikBengtsson/matrixStats/issues/108)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> X <- matrix(1:3, nrow = 1L, ncol = 3L)
> S <- matrix(1, nrow = 1L, ncol = 1L)
> Z1 <- rowAvgsPerColSet(X, S = S)
> stopifnot(is.matrix(Z1))
> Z2 <- rowAvgsPerColSet(X, S = S, rows = 0)
> stopifnot(is.matrix(Z2))
> 
> 
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> # Works with many, one or zero columns / rows
> # (https://github.com/HenrikBengtsson/matrixStats/issues/172)
> # - - - - - - - - - - - - - - - - - - - - - - - - - -
> S <- cbind(1:2, 3:4, 5:6)
> X <- matrix(rnorm(2 * 6), nrow = 6, ncol = 2)
> Z2 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z2_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(6), nrow = 6, ncol = 1)
> Z1 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z1_ref <- rbind(colSums2(X[S[,1], ,drop=FALSE]),
+                 colSums2(X[S[,2], ,drop=FALSE]),
+                 colSums2(X[S[,3], ,drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 6, ncol = 0)
> Z0 <- colAvgsPerRowSet(X, S = S, FUN = colSums2)
> Z0_ref <- matrix(numeric(0), nrow = ncol(S), ncol = 0)
> stopifnot(identical(Z0, unname(Z0_ref)))
> 
> 
> S <- rbind(1:4, 5:8)
> X <- matrix(rnorm(n = 2 * 8), nrow = 2, ncol = 8)
> Z2 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z2_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z2, Z2_ref))
> X <- matrix(rnorm(n = 8), nrow = 1, ncol = 8)
> Z1 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z1_ref <- cbind(rowMeans2(X[,S[,1],drop=FALSE]),
+                 rowMeans2(X[,S[,2],drop=FALSE]),
+                 rowMeans2(X[,S[,3],drop=FALSE]),
+                 rowMeans2(X[,S[,4],drop=FALSE]))
> stopifnot(identical(Z1, Z1_ref))
> X <- matrix(numeric(0), nrow = 0, ncol = 8)
> Z0 <- rowAvgsPerColSet(X, S = S, FUN = rowMeans2)
> Z0_ref <- matrix(numeric(0), nrow = 0, ncol = ncol(S))
> stopifnot(identical(Z0, Z0_ref))
> 
