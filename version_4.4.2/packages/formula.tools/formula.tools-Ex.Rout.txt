
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "formula.tools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('formula.tools')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.character.formula")
> ### * as.character.formula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.character.formula
> ### Title: Converts a formula to character
> ### Aliases: as.character.formula as.character
> ### Keywords: manip utilities
> 
> ### ** Examples
> 
> 
>   as.character( y ~ mx +  b )
[1] "y ~ mx + b"
> 
> ## The function is currently defined as
> function(x)
+   Reduce( paste, deparse(x) )
function (x) 
Reduce(paste, deparse(x))
>   
> 
> 
> 
> cleanEx()
> nameEx("env")
> ### * env
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: env
> ### Title: Get the environment
> ### Aliases: env env.formula
> 
> ### ** Examples
> 
> 
> env( lhs ~ rhs ) 
<environment: R_GlobalEnv>
> 
> 
> 
> 
> cleanEx()
> nameEx("formula.parts")
> ### * formula.parts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.parts
> ### Title: Manipulate the component parts of formulas, expressions, calls,
> ###   name/symbols and list and vectors of such objects.
> ### Aliases: formula.parts lhs lhs,call-method lhs,formula-method
> ###   lhs,<--method lhs,expression-method lhs,list-method lhs<- lhs<-
> ###   lhs<-,call-method lhs<- lhs<-,formula-method lhs<-,<--method
> ###   `lhs<-`,<--method .replace.lhs.plural lhs<- lhs<-,expression-method
> ###   lhs<- lhs<-,list-method op op,formula-method op,call-method
> ###   op,name-method op,expression-method op,list-method op,<--method op<-
> ###   op<- op<-,call-method op<- op<-,formula-method op<-,<--method
> ###   .replace.op.plural op<- op<-,expression-method op<- op<-,list-method
> ###   rhs .rhs.singular rhs,call-method rhs,formula-method rhs,<--method
> ###   rhs,expression-method rhs,list-method rhs<- .replace.rhs.singular
> ###   rhs<- rhs<-,call-method rhs<- rhs<-,formula-method rhs<-,<--method
> ###   .replace.rhs.plural .replace.ths.plural rhs<- rhs<-,expression-method
> ###   rhs<- rhs<-,list-method
> 
> ### ** Examples
> 
> 
>   # FORMULA
>   f <- A + B ~ C + D
>   lhs(f)
A + B
>   lhs(f) <- quote( E / F )
> 
>   rhs(f)
C + D
>   rhs(f) <- quote( G + H ) 
>   op(f)
`~`
>   op(rhs(f))
`+`
>   op( quote(A) )  # NULL: 
>   op.type(f)
[1] "tilde"
> 
>   # ONE-SIDED FORMULA
>   f <- ~ A   # 
>   lhs(f)     # NULL
NULL
>   rhs(f)     # A
A
> 
> 
>   # EXPRESSION
>   e <- expression( A + B == C + D )
>   lhs(e)
expression(A + B)
>   rhs(e)
expression(C + D)
>   op(e)
expression(`==`)
>   op.type(e)
[[1]]
[1] "relational"

> 
> 
>   # CALL
>   c <- quote( A + B > C + D )
>   lhs(c)
A + B
>   lhs(c) <- quote(E)
>   rhs(c)
C + D
> 
>   op(c)
`>`
>   op.type(c)
[1] "relational"
> 
>   # ASSIGNMENT 
>   a  <- quote( A <- B ) 
>   lhs(a)
A
>   rhs(a) 
B
>   op(a)
`<-`
>   op.type(a) 
[1] "assignment"
> 
> 
> 
> 
> cleanEx()
> nameEx("get.vars")
> ### * get.vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get.vars
> ### Title: Get variable (names) from various R objects
> ### Aliases: get.vars get.vars,formula,ANY-method get.vars,call,ANY-method
> ###   get.vars,expression,missing-method get.vars,name,ANY-method
> ###   get.vars,ANY,ANY-method get.vars,ANY,ANY-methods
> ###   get.vars,NULL,ANY-method get.vars,NULL,ANY-methods lhs.vars .lhs.vars
> ###   lhs.vars,formula-method lhs.vars,call-method
> ###   lhs.vars,expression-method rhs.vars .rhs.vars rhs.vars,formula-method
> ###   rhs.vars,call-method rhs.vars,expression-method
> 
> ### ** Examples
> 
>   get.vars( Species ~ ., iris )
[1] "Species"      "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width" 
>   get.vars( quote( Sepal.Length * Sepal.Width ), iris )
[1] "Sepal.Length" "Sepal.Width" 
>   
> 
> 
> 
> cleanEx()
> nameEx("invert-methods")
> ### * invert-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: invert
> ### Title: invert
> ### Aliases: invert invert,call-method invert,expression-method
> 
> ### ** Examples
> 
>   invert( quote( A >  5 ) )
A <= 5
>   invert( quote( A >= 5 ) )
A < 5
>   invert( quote( A <  5 ) )
A >= 5
>   invert( quote( A <= 5 ) )
A > 5
>   invert( quote( A == 5 ) )
A != 5
>   invert( quote( A != 5 ) )
A == 5
>   invert( quote( A %in% lettters[1:5] ) )
A %!in% lettters[1:5]
>   invert( quote( A %!in% letters[1:5] ) )
A %in% letters[1:5]
> 
> 
> 
> 
> cleanEx()
> nameEx("is.one.sided")
> ### * is.one.sided
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.one.sided
> ### Title: Determine if an object is one- or two-sided. Test whether a
> ###   object (typically formula, call or expression) is one- (e.g.  '~x')
> ###   or two-sided (e.g. 'x~y').
> ### Aliases: is.one.sided is.one.sided,formula-method
> ###   is.one.sided,call-method is.one.sided,<--method
> ###   is.one.sided,expression-method is.one.sided,list-method
> ###   is.one.sided,ANY-method is.two.sided is.two.sided,formula-method
> ###   is.two.sided,call-method is.two.sided,<--method
> ###   is.two.sided,expression-method is.two.sided,list-method
> ###   is.two.sided,ANY-method
> 
> ### ** Examples
> 
> 
> form <- y ~ x 
> 
> is.one.sided(form)
[1] FALSE
> # is.single.sided(form)
> # is.unary(form) 
> 
> is.two.sided(form)
[1] TRUE
> # is.double.sided(form)
> # is.binary(form)
>                 
> 
> 
> 
> cleanEx()
> nameEx("split_terms")
> ### * split_terms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_terms
> ### Title: Split object into terms
> ### Aliases: split_terms
> 
> ### ** Examples
> 
>   
>   split_terms(1)                   # 1
expression(1)
>   split_terms( quote(a) )          # a     
expression(a)
>   split_terms( quote(-a) )         # -a   
expression(-a)
>   split_terms( quote(a+1) )        # a, 1
expression(a + 1)
>   split_terms( quote(1+a) )        # 1, a
expression(1 + a)
>   split_terms( quote(-1+a) )       # -1, a
expression(-1 + a)
>   split_terms( quote(-1-a) )
expression(-1 - a)
>   
>   split_terms( quote(a+b+c) )      # a,b,c
expression(a + b + c)
>   split_terms( quote((a+b)+1) )    # (a+b),1
expression((a + b) + 1)
>   split_terms( quote((a+b)+1), recursive=TRUE )    # a,b,1
expression((a + b) + 1)
>   split_terms( quote((a-b)+1), recursive=TRUE )    # a,-b,1
expression((a - b) + 1)
>   split_terms( quote(-a) )         # -a
expression(-a)
>   
>   split_terms( quote(a-1) )        # a, -1
expression(a - 1)
>   split_terms( quote(-a-1))        # -a, -1
expression(-a - 1)
>   split_terms( quote( -(a+1) ) )   # -(a+1)
expression(-(a + 1))
>   split_terms( quote( -(a+1) ), recursive=TRUE )  # -a,-1
expression(-(a + 1))
>   
>   split_terms( quote( ---a ))
expression(---a)
>   split_terms( quote( -(a+(b-(c+d)))), recursive=TRUE )
expression(-(a + (b - (c + d))))
>   
> 
> 
> 
> cleanEx()
> nameEx("terms")
> ### * terms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: terms.call
> ### Title: terms
> ### Aliases: terms.call terms.expression terms
> ### Keywords: manip symbolmath utilities
> 
> ### ** Examples
> 
> 
>     terms( quote( A + B ) )
[1] "A" "B"
> 
>     data(iris) 
>     x <- terms( quote( . - Species ) , data=iris ) 
> 
> 
> 
> 
> cleanEx()
> nameEx("toggle.sign")
> ### * toggle.sign
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toggle.sign
> ### Title: toggle the sign of an expression
> ### Aliases: toggle.sign
> 
> ### ** Examples
> 
> 
>   toggle.sign(1:3)
[1] -1 -2 -3
>   toggle.sign( quote(a) )
-a
>   toggle.sign( quote(-a) )
a
>   
>   exp <- expression( a, -b, -(a-b) )
>   toggle.sign(exp)
expression(-a, b, (a - b))
>   
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.082 0.019 0.101 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
