
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "posterior"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('posterior')
This is posterior version 1.6.0

Attaching package: ‘posterior’

The following objects are masked from ‘package:stats’:

    mad, sd, var

The following objects are masked from ‘package:base’:

    %in%, match

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as_rvar")
> ### * as_rvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_rvar
> ### Title: Coerce to a random variable
> ### Aliases: as_rvar as_rvar_numeric as_rvar_integer as_rvar_logical
> 
> ### ** Examples
> 
> 
> # You can use as_rvar() to create "constant" rvars (having only one draw):
> x <- as_rvar(1)
> x
rvar<1>[1] mean ± sd:
[1] 1 ± NA 
> 
> # Such constants can be of arbitrary shape:
> as_rvar(1:4)
rvar<1>[4] mean ± sd:
[1] 1 ± NA  2 ± NA  3 ± NA  4 ± NA 
> as_rvar(matrix(1:10, nrow = 5))
rvar<1>[5,2] mean ± sd:
     [,1]     [,2]    
[1,]  1 ± NA   6 ± NA 
[2,]  2 ± NA   7 ± NA 
[3,]  3 ± NA   8 ± NA 
[4,]  4 ± NA   9 ± NA 
[5,]  5 ± NA  10 ± NA 
> as_rvar(array(1:12, dim = c(2, 3, 2)))
rvar<1>[2,3,2] mean ± sd:
, , 1

     [,1]     [,2]     [,3]    
[1,]  1 ± NA   3 ± NA   5 ± NA 
[2,]  2 ± NA   4 ± NA   6 ± NA 

, , 2

     [,1]     [,2]     [,3]    
[1,]  7 ± NA   9 ± NA  11 ± NA 
[2,]  8 ± NA  10 ± NA  12 ± NA 

> 
> # as_rvar_numeric() coerces subtypes of rvar to the base rvar type
> y <- as_rvar_factor(c("a", "b", "c"))
> y
rvar_factor<1>[3] mode <entropy>:
[1] a <0>  b <0>  c <0> 
3 levels: a b c
> as_rvar_numeric(y)
rvar<1>[3] mean ± sd:
[1] 1 ± NA  2 ± NA  3 ± NA 
> 
> 
> 
> 
> cleanEx()
> nameEx("as_rvar_factor")
> ### * as_rvar_factor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_rvar_factor
> ### Title: Coerce to a factor random variable
> ### Aliases: as_rvar_factor as_rvar_ordered
> 
> ### ** Examples
> 
> 
> # You can use as_rvar_factor() to create "constant" rvars (having only one draw):
> x <- as_rvar_factor("a")
> x
rvar_factor<1>[1] mode <entropy>:
[1] a <0> 
1 levels: a
> 
> # Such constants can be of arbitrary shape:
> as_rvar_factor(letters[1:4])
rvar_factor<1>[4] mode <entropy>:
[1] a <0>  b <0>  c <0>  d <0> 
4 levels: a b c d
> as_rvar_ordered(matrix(letters[1:10], nrow = 5))
rvar_ordered<1>[5,2] mode <dissent>:
     [,1]   [,2]  
[1,] a <0>  f <0> 
[2,] b <0>  g <0> 
[3,] c <0>  h <0> 
[4,] d <0>  i <0> 
[5,] e <0>  j <0> 
10 levels: a < b < c < d < e < f < g < h < i < j
> as_rvar_factor(array(letters[1:12], dim = c(2, 3, 2)))
rvar_factor<1>[2,3,2] mode <entropy>:
, , 1

     [,1]   [,2]   [,3]  
[1,] a <0>  c <0>  e <0> 
[2,] b <0>  d <0>  f <0> 

, , 2

     [,1]   [,2]   [,3]  
[1,] g <0>  i <0>  k <0> 
[2,] h <0>  j <0>  l <0> 

12 levels: a b c d e f g h i j k l
> 
> 
> 
> 
> cleanEx()
> nameEx("bind_draws")
> ### * bind_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind_draws
> ### Title: Bind 'draws' objects together
> ### Aliases: bind_draws bind_draws.draws_matrix bind_draws.draws_array
> ###   bind_draws.draws_df bind_draws.draws_list bind_draws.draws_rvars
> 
> ### ** Examples
> 
> x1 <- draws_matrix(alpha = rnorm(5), beta = rnorm(5))
> x2 <- draws_matrix(alpha = rnorm(5), beta = rnorm(5))
> ndraws(x1)
[1] 5
> ndraws(x2)
[1] 5
> x3 <- bind_draws(x1, x2, along = "draw")
> ndraws(x3)
[1] 10
> 
> x4 <- draws_matrix(theta = rexp(5))
> x5 <- bind_draws(x1, x4, along = "variable")
> variables(x5)
[1] "alpha" "beta"  "theta"
> 
> 
> 
> 
> cleanEx()
> nameEx("diag-rvar-method")
> ### * diag-rvar-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: diag,rvar-method
> ### Title: Matrix diagonals (including for random variables)
> ### Aliases: diag,rvar-method
> 
> ### ** Examples
> 
> 
> # Sigma is a 3x3 covariance matrix
> Sigma <- as_draws_rvars(example_draws("multi_normal"))$Sigma
> Sigma
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
[2,]  0.53 ± 0.20   3.67 ± 0.45  -2.10 ± 0.48 
[3,] -0.40 ± 0.28  -2.10 ± 0.48   8.12 ± 0.95 
> 
> diag(Sigma)
rvar<100,4>[3] mean ± sd:
[1] 1.3 ± 0.17  3.7 ± 0.45  8.1 ± 0.95 
> 
> diag(Sigma) <- 1:3
> Sigma
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.00 ± 0.00   0.53 ± 0.20  -0.40 ± 0.28 
[2,]  0.53 ± 0.20   2.00 ± 0.00  -2.10 ± 0.48 
[3,] -0.40 ± 0.28  -2.10 ± 0.48   3.00 ± 0.00 
> 
> diag(as_rvar(1:3))
rvar<1>[3,3] mean ± sd:
     [,1]    [,2]    [,3]   
[1,] 1 ± NA  0 ± NA  0 ± NA 
[2,] 0 ± NA  2 ± NA  0 ± NA 
[3,] 0 ± NA  0 ± NA  3 ± NA 
> 
> 
> 
> 
> cleanEx()
> nameEx("dissent")
> ### * dissent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dissent
> ### Title: Dissention
> ### Aliases: dissent dissent.default dissent.rvar
> 
> ### ** Examples
> 
> set.seed(1234)
> 
> levels <- c("lowest", "low", "neutral", "high", "highest")
> 
> # a bimodal distribution: high dissention
> x <- ordered(
+   sample(levels, 4000, replace = TRUE, prob = c(0.45, 0.04, 0.02, 0.04, 0.45)),
+   levels = levels
+ )
> dissent(x)
[1] 0.9303737
> 
> # a unimodal distribution: low dissention
> y <- ordered(
+   sample(levels, 4000, replace = TRUE, prob = c(0.95, 0.02, 0.015, 0.01, 0.005)),
+   levels = levels
+ )
> dissent(y)
[1] 0.1046236
> 
> # both together, as an rvar
> xy <- c(rvar(x), rvar(y))
> xy
rvar_ordered<4000>[2] mode <dissent>:
[1] highest <0.93>   lowest <0.10> 
5 levels: lowest < low < neutral < high < highest
> dissent(xy)
[1] 0.9303737 0.1046236
> 
> 
> 
> cleanEx()
> nameEx("draws-index")
> ### * draws-index
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws-index
> ### Title: Index 'draws' objects
> ### Aliases: draws-index iteration_ids chain_ids draw_ids niterations
> ###   nchains ndraws
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> iteration_ids(x)
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100
> niterations(x)
[1] 100
> 
> chain_ids(x)
[1] 1 2 3 4
> nchains(x)
[1] 4
> 
> draw_ids(x)
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216
[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234
[235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252
[253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270
[271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288
[289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306
[307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324
[325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342
[343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360
[361] 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378
[379] 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396
[397] 397 398 399 400
> ndraws(x)
[1] 400
> 
> 
> 
> 
> cleanEx()
> nameEx("draws")
> ### * draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws
> ### Title: Transform to 'draws' objects
> ### Aliases: draws as_draws is_draws
> 
> ### ** Examples
> 
> # create some random draws
> x <- matrix(rnorm(30), nrow = 10)
> colnames(x) <- c("a", "b", "c")
> str(x)
 num [1:10, 1:3] -0.626 0.184 -0.836 1.595 0.33 ...
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:3] "a" "b" "c"
> 
> # transform to a draws object
> y <- as_draws(x)
> str(y)
 'draws_matrix' num [1:10, 1:3] -0.626 0.184 -0.836 1.595 0.33 ...
 - attr(*, "dimnames")=List of 2
  ..$ draw    : chr [1:10] "1" "2" "3" "4" ...
  ..$ variable: chr [1:3] "a" "b" "c"
 - attr(*, "nchains")= int 1
> 
> # remove the draws classes from the object
> class(y) <- class(y)[-(1:2)]
> str(y)
 num [1:10, 1:3] -0.626 0.184 -0.836 1.595 0.33 ...
 - attr(*, "dimnames")=List of 2
  ..$ draw    : chr [1:10] "1" "2" "3" "4" ...
  ..$ variable: chr [1:3] "a" "b" "c"
 - attr(*, "nchains")= int 1
> 
> 
> 
> 
> cleanEx()
> nameEx("draws_array")
> ### * draws_array
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_array
> ### Title: The 'draws_array' format
> ### Aliases: draws_array as_draws_array as_draws_array.default
> ###   as_draws_array.draws_array as_draws_array.draws_matrix
> ###   as_draws_array.draws_df as_draws_array.draws_list
> ###   as_draws_array.draws_rvars as_draws_array.mcmc
> ###   as_draws_array.mcmc.list is_draws_array
> 
> ### ** Examples
> 
> x1 <- as_draws_array(example_draws())
> class(x1)
[1] "draws_array" "draws"       "array"      
> print(x1)
# A draws_array: 100 iterations, 4 chains, and 10 variables
, , variable = mu

         chain
iteration   1    2     3   4
        1 2.0  3.0  1.79 6.5
        2 1.5  8.2  5.99 9.1
        3 5.8 -1.2  2.56 0.2
        4 6.8 10.9  2.79 3.7
        5 1.8  9.8 -0.03 5.5

, , variable = tau

         chain
iteration   1    2    3   4
        1 2.8 2.80  8.7 3.8
        2 7.0 2.76  2.9 6.8
        3 9.7 0.57  8.4 5.3
        4 4.8 2.45  4.4 1.6
        5 2.8 2.80 11.0 3.0

, , variable = theta[1]

         chain
iteration     1     2    3     4
        1  3.96  6.26 13.3  5.78
        2  0.12  9.32  6.3  2.09
        3 21.25 -0.97 10.6 15.72
        4 14.70 12.45  5.4  2.69
        5  5.96  9.75  8.2 -0.91

, , variable = theta[2]

         chain
iteration      1    2   3   4
        1  0.271  1.0 2.1 5.0
        2 -0.069  9.4 7.3 8.2
        3 14.931 -1.2 5.7 6.0
        4  8.586 12.5 2.8 2.7
        5  1.156 11.9 3.2 3.2

# ... with 95 more iterations, and 6 more variables
> str(x1)
 'draws_array' num [1:100, 1:4, 1:10] 2.01 1.46 5.81 6.85 1.81 ...
 - attr(*, "dimnames")=List of 3
  ..$ iteration: chr [1:100] "1" "2" "3" "4" ...
  ..$ chain    : chr [1:4] "1" "2" "3" "4"
  ..$ variable : chr [1:10] "mu" "tau" "theta[1]" "theta[2]" ...
> 
> x2 <- draws_array(a = rnorm(10), b = rnorm(10), c = 1)
> class(x2)
[1] "draws_array" "draws"       "array"      
> print(x2)
# A draws_array: 10 iterations, 1 chains, and 3 variables
, , variable = a

         chain
iteration     1
        1 -0.63
        2  0.18
        3 -0.84
        4  1.60
        5  0.33

, , variable = b

         chain
iteration     1
        1  1.51
        2  0.39
        3 -0.62
        4 -2.21
        5  1.12

, , variable = c

         chain
iteration 1
        1 1
        2 1
        3 1
        4 1
        5 1

# ... with 5 more iterations
> str(x2)
 'draws_array' num [1:10, 1, 1:3] -0.626 0.184 -0.836 1.595 0.33 ...
 - attr(*, "dimnames")=List of 3
  ..$ iteration: chr [1:10] "1" "2" "3" "4" ...
  ..$ chain    : chr "1"
  ..$ variable : chr [1:3] "a" "b" "c"
> 
> 
> 
> cleanEx()
> nameEx("draws_df")
> ### * draws_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_df
> ### Title: The 'draws_df' format
> ### Aliases: draws_df as_draws_df as_draws_df.default
> ###   as_draws_df.data.frame as_draws_df.draws_df as_draws_df.draws_matrix
> ###   as_draws_df.draws_array as_draws_df.draws_list
> ###   as_draws_df.draws_rvars as_draws_df.mcmc as_draws_df.mcmc.list
> ###   is_draws_df
> 
> ### ** Examples
> 
> x1 <- as_draws_df(example_draws())
> class(x1)
[1] "draws_df"   "draws"      "tbl_df"     "tbl"        "data.frame"
> print(x1)
# A draws_df: 100 iterations, 4 chains, and 10 variables
     mu tau theta[1] theta[2] theta[3] theta[4] theta[5] theta[6]
1  2.01 2.8     3.96    0.271    -0.74      2.1    0.923      1.7
2  1.46 7.0     0.12   -0.069     0.95      7.3   -0.062     11.3
3  5.81 9.7    21.25   14.931     1.83      1.4    0.531      7.2
4  6.85 4.8    14.70    8.586     2.67      4.4    4.758      8.1
5  1.81 2.8     5.96    1.156     3.11      2.0    0.769      4.7
6  3.84 4.1     5.76    9.909    -1.00      5.3    5.889     -1.7
7  5.47 4.0     4.03    4.151    10.15      6.6    3.741     -2.2
8  1.20 1.5    -0.28    1.846     0.47      4.3    1.467      3.3
9  0.15 3.9     1.81    0.661     0.86      4.5   -1.025      1.1
10 7.17 1.8     6.08    8.102     7.68      5.6    7.106      8.5
# ... with 390 more draws, and 2 more variables
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> str(x1)
draws_df [400 × 13] (S3: draws_df/draws/tbl_df/tbl/data.frame)
 $ mu        : num [1:400] 2.01 1.46 5.81 6.85 1.81 ...
 $ tau       : num [1:400] 2.77 6.98 9.68 4.79 2.85 ...
 $ theta[1]  : num [1:400] 3.962 0.124 21.251 14.7 5.96 ...
 $ theta[2]  : num [1:400] 0.271 -0.069 14.931 8.586 1.156 ...
 $ theta[3]  : num [1:400] -0.743 0.952 1.829 2.675 3.109 ...
 $ theta[4]  : num [1:400] 2.1 7.28 1.38 4.39 1.99 ...
 $ theta[5]  : num [1:400] 0.923 -0.062 0.531 4.758 0.769 ...
 $ theta[6]  : num [1:400] 1.65 11.26 7.16 8.1 4.66 ...
 $ theta[7]  : num [1:400] 3.32 9.62 14.8 9.49 1.21 ...
 $ theta[8]  : num [1:400] 4.85 -8.64 -1.74 5.28 -4.54 ...
 $ .chain    : int [1:400] 1 1 1 1 1 1 1 1 1 1 ...
 $ .iteration: int [1:400] 1 2 3 4 5 6 7 8 9 10 ...
 $ .draw     : int [1:400] 1 2 3 4 5 6 7 8 9 10 ...
> 
> x2 <- draws_df(a = rnorm(10), b = rnorm(10), c = 1)
> class(x2)
[1] "draws_df"   "draws"      "tbl_df"     "tbl"        "data.frame"
> print(x2)
# A draws_df: 10 iterations, 1 chains, and 3 variables
       a      b c
1  -0.63  1.512 1
2   0.18  0.390 1
3  -0.84 -0.621 1
4   1.60 -2.215 1
5   0.33  1.125 1
6  -0.82 -0.045 1
7   0.49 -0.016 1
8   0.74  0.944 1
9   0.58  0.821 1
10 -0.31  0.594 1
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> str(x2)
draws_df [10 × 6] (S3: draws_df/draws/tbl_df/tbl/data.frame)
 $ a         : num [1:10] -0.626 0.184 -0.836 1.595 0.33 ...
 $ b         : num [1:10] 1.512 0.39 -0.621 -2.215 1.125 ...
 $ c         : num [1:10] 1 1 1 1 1 1 1 1 1 1
 $ .chain    : int [1:10] 1 1 1 1 1 1 1 1 1 1
 $ .iteration: int [1:10] 1 2 3 4 5 6 7 8 9 10
 $ .draw     : int [1:10] 1 2 3 4 5 6 7 8 9 10
> 
> # the difference between iteration and draw is clearer when contrasting
> # the head and tail of the data frame
> print(head(x1), reserved = TRUE, max_variables = 2)
# A draws_df: 6 iterations, 1 chains, and 10 variables
   mu tau .chain .iteration .draw
1 2.0 2.8      1          1     1
2 1.5 7.0      1          2     2
3 5.8 9.7      1          3     3
4 6.8 4.8      1          4     4
5 1.8 2.8      1          5     5
6 3.8 4.1      1          6     6
# ... with 8 more variables
> print(tail(x1), reserved = TRUE, max_variables = 2)
# A draws_df: 6 iterations, 1 chains, and 10 variables
    mu tau .chain .iteration .draw
1 5.69 2.2      4         95   395
2 3.28 3.3      4         96   396
3 5.04 3.6      4         97   397
4 2.73 6.8      4         98   398
5 0.48 1.8      4         99   399
6 7.05 4.8      4        100   400
# ... with 8 more variables
> 
> # manually supply chain information
> xnew <- data.frame(mu = rnorm(10), .chain = rep(1:2, each = 5))
> xnew <- as_draws_df(xnew)
> print(xnew)
# A draws_df: 5 iterations, 2 chains, and 1 variables
       mu
1   0.919
2   0.782
3   0.075
4  -1.989
5   0.620
6  -0.056
7  -0.156
8  -1.471
9  -0.478
10  0.418
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> 
> 
> 
> 
> cleanEx()
> nameEx("draws_list")
> ### * draws_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_list
> ### Title: The 'draws_list' format
> ### Aliases: draws_list as_draws_list as_draws_list.default
> ###   as_draws_list.draws_list as_draws_list.draws_matrix
> ###   as_draws_list.draws_array as_draws_list.draws_df
> ###   as_draws_list.draws_rvars as_draws_list.mcmc as_draws_list.mcmc.list
> ###   is_draws_list
> 
> ### ** Examples
> 
> x1 <- as_draws_list(example_draws())
> class(x1)
[1] "draws_list" "draws"      "list"      
> print(x1)
# A draws_list: 100 iterations, 4 chains, and 10 variables

[chain = 1]
$mu
 [1] 2.01 1.46 5.81 6.85 1.81 3.84 5.47 1.20 0.15 7.17

$tau
 [1] 2.8 7.0 9.7 4.8 2.8 4.1 4.0 1.5 3.9 1.8

$`theta[1]`
 [1]  3.96  0.12 21.25 14.70  5.96  5.76  4.03 -0.28  1.81  6.08

$`theta[2]`
 [1]  0.271 -0.069 14.931  8.586  1.156  9.909  4.151  1.846  0.661  8.102


[chain = 2]
$mu
 [1]   2.99   8.17  -1.15  10.93   9.82 -10.90  -9.26   1.79   5.35   0.87

$tau
 [1] 2.80 2.76 0.57 2.45 2.80 6.08 9.33 6.81 2.82 6.69

$`theta[1]`
 [1]  6.26  9.32 -0.97 12.45  9.75  2.56 11.92  9.89  4.31  9.26

$`theta[2]`
 [1]  1.0  9.4 -1.2 12.5 11.9 -8.8 -6.1 11.6  2.8  8.4

# ... with 90 more iterations, and 2 more chains, and 6 more variables
> str(x1)
List of 4
 $ 1:List of 10
  ..$ mu      : num [1:100] 2.01 1.46 5.81 6.85 1.81 ...
  ..$ tau     : num [1:100] 2.77 6.98 9.68 4.79 2.85 ...
  ..$ theta[1]: num [1:100] 3.962 0.124 21.251 14.7 5.96 ...
  ..$ theta[2]: num [1:100] 0.271 -0.069 14.931 8.586 1.156 ...
  ..$ theta[3]: num [1:100] -0.743 0.952 1.829 2.675 3.109 ...
  ..$ theta[4]: num [1:100] 2.1 7.28 1.38 4.39 1.99 ...
  ..$ theta[5]: num [1:100] 0.923 -0.062 0.531 4.758 0.769 ...
  ..$ theta[6]: num [1:100] 1.65 11.26 7.16 8.1 4.66 ...
  ..$ theta[7]: num [1:100] 3.32 9.62 14.8 9.49 1.21 ...
  ..$ theta[8]: num [1:100] 4.85 -8.64 -1.74 5.28 -4.54 ...
 $ 2:List of 10
  ..$ mu      : num [1:100] 2.99 8.17 -1.15 10.93 9.82 ...
  ..$ tau     : num [1:100] 2.804 2.757 0.569 2.453 2.798 ...
  ..$ theta[1]: num [1:100] 6.259 9.321 -0.972 12.455 9.751 ...
  ..$ theta[2]: num [1:100] 1.03 9.36 -1.19 12.53 11.94 ...
  ..$ theta[3]: num [1:100] 0.218 9.685 -1.373 11.155 12.718 ...
  ..$ theta[4]: num [1:100] -0.734 8.11 -0.794 10.476 9.698 ...
  ..$ theta[5]: num [1:100] 4.06 6.72 -0.787 10.595 9.946 ...
  ..$ theta[6]: num [1:100] 3.34 7.4 -1.18 10.51 8.35 ...
  ..$ theta[7]: num [1:100] 3.15 11.39 -1.43 15.54 12.91 ...
  ..$ theta[8]: num [1:100] -0.443 12.359 -1.775 14.45 15.171 ...
 $ 3:List of 10
  ..$ mu      : num [1:100] 1.7944 5.9864 2.5572 2.7944 -0.0296 ...
  ..$ tau     : num [1:100] 8.72 2.91 8.41 4.39 11.03 ...
  ..$ theta[1]: num [1:100] 13.32 6.31 10.56 5.37 8.2 ...
  ..$ theta[2]: num [1:100] 2.11 7.31 5.7 2.8 3.15 ...
  ..$ theta[3]: num [1:100] 1.38 4.11 -8.27 -10.77 -27.78 ...
  ..$ theta[4]: num [1:100] 7.82 4.7 6.8 6.8 12.32 ...
  ..$ theta[5]: num [1:100] -1.5 6.96 -3.15 -4.81 -14.91 ...
  ..$ theta[6]: num [1:100] 12.744 0.877 5.435 3.67 -0.246 ...
  ..$ theta[7]: num [1:100] 9.37 6.11 15.37 3.17 7.81 ...
  ..$ theta[8]: num [1:100] 11.98 2.26 4.27 2.91 3.52 ...
 $ 4:List of 10
  ..$ mu      : num [1:100] 6.459 9.145 0.203 3.693 5.48 ...
  ..$ tau     : num [1:100] 3.77 6.84 5.32 1.55 3 ...
  ..$ theta[1]: num [1:100] 5.776 2.086 15.719 2.689 -0.906 ...
  ..$ theta[2]: num [1:100] 4.96 8.19 6.04 2.67 3.19 ...
  ..$ theta[3]: num [1:100] 5.69 3.47 3.13 3.16 2.55 ...
  ..$ theta[4]: num [1:100] 4.84 7.78 6.06 7.92 11.27 ...
  ..$ theta[5]: num [1:100] 2.74 6.15 3.73 3.34 3.98 ...
  ..$ theta[6]: num [1:100] 0.607 1.227 1.538 0.26 -1.121 ...
  ..$ theta[7]: num [1:100] 9.54 10.12 7.11 2.11 7.31 ...
  ..$ theta[8]: num [1:100] 3.252 4.728 0.182 4.755 7.523 ...
 - attr(*, "class")= chr [1:3] "draws_list" "draws" "list"
> 
> x2 <- draws_list(a = rnorm(10), b = rnorm(10), c = 1)
> class(x2)
[1] "draws_list" "draws"      "list"      
> print(x2)
# A draws_list: 10 iterations, 1 chains, and 3 variables

[chain = 1]
$a
 [1] -0.63  0.18 -0.84  1.60  0.33 -0.82  0.49  0.74  0.58 -0.31

$b
 [1]  1.512  0.390 -0.621 -2.215  1.125 -0.045 -0.016  0.944  0.821  0.594

$c
 [1] 1 1 1 1 1 1 1 1 1 1

> str(x2)
List of 1
 $ 1:List of 3
  ..$ a: num [1:10] -0.626 0.184 -0.836 1.595 0.33 ...
  ..$ b: num [1:10] 1.512 0.39 -0.621 -2.215 1.125 ...
  ..$ c: num [1:10] 1 1 1 1 1 1 1 1 1 1
 - attr(*, "class")= chr [1:3] "draws_list" "draws" "list"
> 
> 
> 
> cleanEx()
> nameEx("draws_matrix")
> ### * draws_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_matrix
> ### Title: The 'draws_matrix' format
> ### Aliases: draws_matrix as_draws_matrix as_draws_matrix.default
> ###   as_draws_matrix.draws_matrix as_draws_matrix.draws_array
> ###   as_draws_matrix.draws_df as_draws_matrix.draws_list
> ###   as_draws_matrix.draws_rvars as_draws_matrix.mcmc
> ###   as_draws_matrix.mcmc.list is_draws_matrix
> 
> ### ** Examples
> 
> x1 <- as_draws_matrix(example_draws())
> class(x1)
[1] "draws_matrix" "draws"        "matrix"      
> print(x1)
# A draws_matrix: 100 iterations, 4 chains, and 10 variables
    variable
draw   mu tau theta[1] theta[2] theta[3] theta[4] theta[5] theta[6]
  1  2.01 2.8     3.96    0.271    -0.74      2.1    0.923      1.7
  2  1.46 7.0     0.12   -0.069     0.95      7.3   -0.062     11.3
  3  5.81 9.7    21.25   14.931     1.83      1.4    0.531      7.2
  4  6.85 4.8    14.70    8.586     2.67      4.4    4.758      8.1
  5  1.81 2.8     5.96    1.156     3.11      2.0    0.769      4.7
  6  3.84 4.1     5.76    9.909    -1.00      5.3    5.889     -1.7
  7  5.47 4.0     4.03    4.151    10.15      6.6    3.741     -2.2
  8  1.20 1.5    -0.28    1.846     0.47      4.3    1.467      3.3
  9  0.15 3.9     1.81    0.661     0.86      4.5   -1.025      1.1
  10 7.17 1.8     6.08    8.102     7.68      5.6    7.106      8.5
# ... with 390 more draws, and 2 more variables
> str(x1)
 'draws_matrix' num [1:400, 1:10] 2.01 1.46 5.81 6.85 1.81 ...
 - attr(*, "dimnames")=List of 2
  ..$ draw    : chr [1:400] "1" "2" "3" "4" ...
  ..$ variable: chr [1:10] "mu" "tau" "theta[1]" "theta[2]" ...
 - attr(*, "nchains")= int 4
> 
> x2 <- draws_matrix(a = rnorm(10), b = rnorm(10), c = 1)
> class(x2)
[1] "draws_matrix" "draws"        "matrix"      
> print(x2)
# A draws_matrix: 10 iterations, 1 chains, and 3 variables
    variable
draw     a      b c
  1  -0.63  1.512 1
  2   0.18  0.390 1
  3  -0.84 -0.621 1
  4   1.60 -2.215 1
  5   0.33  1.125 1
  6  -0.82 -0.045 1
  7   0.49 -0.016 1
  8   0.74  0.944 1
  9   0.58  0.821 1
  10 -0.31  0.594 1
> str(x2)
 'draws_matrix' num [1:10, 1:3] -0.626 0.184 -0.836 1.595 0.33 ...
 - attr(*, "dimnames")=List of 2
  ..$ draw    : chr [1:10] "1" "2" "3" "4" ...
  ..$ variable: chr [1:3] "a" "b" "c"
 - attr(*, "nchains")= int 1
> 
> 
> 
> cleanEx()
> nameEx("draws_of")
> ### * draws_of
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_of
> ### Title: Get/set array of draws underlying a random variable
> ### Aliases: draws_of draws_of<-
> 
> ### ** Examples
> 
> 
> x <- rvar(1:10, nchains = 2)
> x
rvar<5,2>[1] mean ± sd:
[1] 5.5 ± 3 
> 
> # draws_of() without arguments will return the array of draws without
> # chain information (first dimension is draw)
> draws_of(x)
   [,1]
1     1
2     2
3     3
4     4
5     5
6     6
7     7
8     8
9     9
10   10
> 
> # draws_of() with with_chains = TRUE will reshape the returned array to
> # include chain information in the second dimension
> draws_of(x, with_chains = TRUE)
, , 1

     [,1] [,2]
[1,]    1    6
[2,]    2    7
[3,]    3    8
[4,]    4    9
[5,]    5   10

> 
> # you can also set draws using draws_of(). When with_chains = FALSE the
> # existing chain information will be retained ...
> draws_of(x) <- 2:11
> x
rvar<5,2>[1] mean ± sd:
[1] 6.5 ± 3 
> 
> # when with_chains = TRUE the chain information will be set by the
> # second dimension of the assigned array
> draws_of(x, with_chains = TRUE) <- array(2:11, dim = c(2,5))
> x
rvar<2,5>[1] mean ± sd:
[1] 6.5 ± 3 
> 
> 
> 
> 
> cleanEx()
> nameEx("draws_rvars")
> ### * draws_rvars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_rvars
> ### Title: The 'draws_rvars' format
> ### Aliases: draws_rvars as_draws_rvars as_draws_rvars.default
> ###   as_draws_rvars.draws_rvars as_draws_rvars.list
> ###   as_draws_rvars.draws_matrix as_draws_rvars.draws_array
> ###   as_draws_rvars.draws_df as_draws_rvars.draws_list as_draws_rvars.mcmc
> ###   as_draws_rvars.mcmc.list is_draws_rvars
> 
> ### ** Examples
> 
> x1 <- as_draws_rvars(example_draws())
> class(x1)
[1] "draws_rvars" "draws"       "list"       
> print(x1)
# A draws_rvars: 100 iterations, 4 chains, and 3 variables
$mu: rvar<100,4>[1] mean ± sd:
[1] 4.2 ± 3.4 

$tau: rvar<100,4>[1] mean ± sd:
[1] 4.2 ± 3.6 

$theta: rvar<100,4>[8] mean ± sd:
[1] 6.7 ± 6.3  5.3 ± 4.6  3.0 ± 6.8  4.9 ± 4.9  3.2 ± 5.1  4.0 ± 5.2  6.5 ± 5.3 
[8] 4.6 ± 5.3 

> str(x1)
List of 3
 $ mu   : rvar<100,4>[1]  4.2 ± 3.4
 $ tau  : rvar<100,4>[1]  4.2 ± 3.6
 $ theta: rvar<100,4>[8]  6.7 ± 6.3  5.3 ± 4.6  3.0 ± 6.8  4.9 ± 4.9 ...
 - attr(*, "class")= chr [1:3] "draws_rvars" "draws" "list"
> 
> x2 <- draws_rvars(a = rnorm(10), b = rnorm(10), c = 1)
> class(x2)
[1] "draws_rvars" "draws"       "list"       
> print(x2)
# A draws_rvars: 10 iterations, 1 chains, and 3 variables
$a: rvar<10>[1] mean ± sd:
[1] 0.13 ± 0.78 

$b: rvar<10>[1] mean ± sd:
[1] 0.25 ± 1.1 

$c: rvar<10>[1] mean ± sd:
[1] 1 ± 0 

> str(x2)
List of 3
 $ a: rvar<10>[1]  0.13 ± 0.78
 $ b: rvar<10>[1]  0.25 ± 1.1
 $ c: rvar<10>[1]  1 ± 0
 - attr(*, "class")= chr [1:3] "draws_rvars" "draws" "list"
> 
> 
> 
> cleanEx()
> nameEx("draws_summary")
> ### * draws_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: draws_summary
> ### Title: Summaries of 'draws' objects
> ### Aliases: draws_summary summarise_draws summarize_draws
> ###   summarise_draws.draws summary.draws summarise_draws.rvar summary.rvar
> ###   default_summary_measures default_convergence_measures
> ###   default_mcse_measures
> 
> ### ** Examples
> 
> x <- example_draws("eight_schools")
> class(x)
[1] "draws_array" "draws"       "array"      
> str(x)
 'draws_array' num [1:100, 1:4, 1:10] 2.01 1.46 5.81 6.85 1.81 ...
 - attr(*, "dimnames")=List of 3
  ..$ iteration: chr [1:100] "1" "2" "3" "4" ...
  ..$ chain    : chr [1:4] "1" "2" "3" "4"
  ..$ variable : chr [1:10] "mu" "tau" "theta[1]" "theta[2]" ...
> 
> summarise_draws(x)
# A tibble: 10 × 10
   variable  mean median    sd   mad      q5   q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl>    <dbl>    <dbl>
 1 mu        4.18   4.16  3.40  3.57  -0.854  9.39  1.02     558.     322.
 2 tau       4.16   3.07  3.58  2.89   0.309 11.0   1.01     246.     202.
 3 theta[1]  6.75   5.97  6.30  4.87  -1.23  18.9   1.01     400.     254.
 4 theta[2]  5.25   5.13  4.63  4.25  -1.97  12.5   1.02     564.     372.
 5 theta[3]  3.04   3.99  6.80  4.94 -10.3   11.9   1.01     312.     205.
 6 theta[4]  4.86   4.99  4.92  4.51  -3.57  12.2   1.02     695.     252.
 7 theta[5]  3.22   3.72  5.08  4.38  -5.93  10.8   1.01     523.     306.
 8 theta[6]  3.99   4.14  5.16  4.81  -4.32  11.5   1.02     548.     205.
 9 theta[7]  6.50   5.90  5.26  4.54  -1.19  15.4   1.00     434.     308.
10 theta[8]  4.57   4.64  5.25  4.89  -3.79  12.2   1.02     355.     146.
> summarise_draws(x, "mean", "median")
# A tibble: 10 × 3
   variable  mean median
   <chr>    <dbl>  <dbl>
 1 mu        4.18   4.16
 2 tau       4.16   3.07
 3 theta[1]  6.75   5.97
 4 theta[2]  5.25   5.13
 5 theta[3]  3.04   3.99
 6 theta[4]  4.86   4.99
 7 theta[5]  3.22   3.72
 8 theta[6]  3.99   4.14
 9 theta[7]  6.50   5.90
10 theta[8]  4.57   4.64
> summarise_draws(x, mean, mcse = mcse_mean)
# A tibble: 10 × 3
   variable  mean  mcse
   <chr>    <dbl> <dbl>
 1 mu        4.18 0.150
 2 tau       4.16 0.213
 3 theta[1]  6.75 0.319
 4 theta[2]  5.25 0.202
 5 theta[3]  3.04 0.447
 6 theta[4]  4.86 0.189
 7 theta[5]  3.22 0.232
 8 theta[6]  3.99 0.222
 9 theta[7]  6.50 0.250
10 theta[8]  4.57 0.273
> summarise_draws(x, ~quantile(.x, probs = c(0.4, 0.6)))
# A tibble: 10 × 3
   variable `40%` `60%`
   <chr>    <dbl> <dbl>
 1 mu        3.41  5.35
 2 tau       2.47  3.96
 3 theta[1]  4.95  7.01
 4 theta[2]  4.32  6.13
 5 theta[3]  2.54  5.33
 6 theta[4]  3.78  6.11
 7 theta[5]  2.69  4.69
 8 theta[6]  2.92  5.47
 9 theta[7]  4.81  7.33
10 theta[8]  3.50  5.92
> 
> # using default_*_meaures()
> summarise_draws(x, default_summary_measures())
# A tibble: 10 × 7
   variable  mean median    sd   mad      q5   q95
   <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl> <dbl>
 1 mu        4.18   4.16  3.40  3.57  -0.854  9.39
 2 tau       4.16   3.07  3.58  2.89   0.309 11.0 
 3 theta[1]  6.75   5.97  6.30  4.87  -1.23  18.9 
 4 theta[2]  5.25   5.13  4.63  4.25  -1.97  12.5 
 5 theta[3]  3.04   3.99  6.80  4.94 -10.3   11.9 
 6 theta[4]  4.86   4.99  4.92  4.51  -3.57  12.2 
 7 theta[5]  3.22   3.72  5.08  4.38  -5.93  10.8 
 8 theta[6]  3.99   4.14  5.16  4.81  -4.32  11.5 
 9 theta[7]  6.50   5.90  5.26  4.54  -1.19  15.4 
10 theta[8]  4.57   4.64  5.25  4.89  -3.79  12.2 
> summarise_draws(x, default_convergence_measures())
# A tibble: 10 × 4
   variable  rhat ess_bulk ess_tail
   <chr>    <dbl>    <dbl>    <dbl>
 1 mu        1.02     558.     322.
 2 tau       1.01     246.     202.
 3 theta[1]  1.01     400.     254.
 4 theta[2]  1.02     564.     372.
 5 theta[3]  1.01     312.     205.
 6 theta[4]  1.02     695.     252.
 7 theta[5]  1.01     523.     306.
 8 theta[6]  1.02     548.     205.
 9 theta[7]  1.00     434.     308.
10 theta[8]  1.02     355.     146.
> summarise_draws(x, default_mcse_measures())
# A tibble: 10 × 6
   variable mcse_mean mcse_median mcse_sd mcse_q5 mcse_q95
   <chr>        <dbl>       <dbl>   <dbl>   <dbl>    <dbl>
 1 mu           0.150       0.319   0.249   0.551    0.415
 2 tau          0.213       0.250   0.236   0.114    0.964
 3 theta[1]     0.319       0.262   0.327   0.820    1.36 
 4 theta[2]     0.202       0.213   0.273   0.676    0.848
 5 theta[3]     0.447       0.346   0.611   2.18     0.623
 6 theta[4]     0.189       0.287   0.251   0.956    0.449
 7 theta[5]     0.232       0.139   0.328   1.62     0.736
 8 theta[6]     0.222       0.421   0.365   1.16     0.432
 9 theta[7]     0.250       0.270   0.260   0.458    0.622
10 theta[8]     0.273       0.372   0.322   0.997    1.29 
> 
> # compute variance of variables
> summarise_draws(x, var = distributional::variance)
# A tibble: 10 × 2
   variable   var
   <chr>    <dbl>
 1 mu        11.6
 2 tau       12.8
 3 theta[1]  39.7
 4 theta[2]  21.5
 5 theta[3]  46.2
 6 theta[4]  24.2
 7 theta[5]  25.9
 8 theta[6]  26.6
 9 theta[7]  27.7
10 theta[8]  27.6
> 
> # illustrate use of '.args'
> ws <- rexp(ndraws(x))
> summarise_draws(x, weighted.mean, .args = list(w = ws))
# A tibble: 10 × 2
   variable weighted.mean
   <chr>            <dbl>
 1 mu                4.02
 2 tau               4.31
 3 theta[1]          6.58
 4 theta[2]          5.07
 5 theta[3]          2.91
 6 theta[4]          4.94
 7 theta[5]          3.12
 8 theta[6]          3.50
 9 theta[7]          6.83
10 theta[8]          4.13
> 
> # adjust how numerical summaries are printed
> summarise_draws(x, .num_args = list(sigfig = 2, notation = "dec"))
# A tibble: 10 × 10
   variable  mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl>
 1 mu         4.2    4.2   3.4   3.6  -0.85   9.4   1.0     558.     322.
 2 tau        4.2    3.1   3.6   2.9   0.31  11.    1.0     246.     202.
 3 theta[1]   6.7    6.0   6.3   4.9  -1.2   19.    1.0     400.     254.
 4 theta[2]   5.3    5.1   4.6   4.3  -2.0   13.    1.0     564.     372.
 5 theta[3]   3.0    4.0   6.8   4.9 -10.    12.    1.0     312.     205.
 6 theta[4]   4.9    5.0   4.9   4.5  -3.6   12.    1.0     695.     252.
 7 theta[5]   3.2    3.7   5.1   4.4  -5.9   11.    1.0     523.     306.
 8 theta[6]   4.0    4.1   5.2   4.8  -4.3   12.    1.0     548.     205.
 9 theta[7]   6.5    5.9   5.3   4.5  -1.2   15.    1.0     434.     308.
10 theta[8]   4.6    4.6   5.3   4.9  -3.8   12.    1.0     355.     146.
> 
> 
> 
> 
> cleanEx()
> nameEx("drop-rvar-method")
> ### * drop-rvar-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: drop,rvar-method
> ### Title: Drop redundant dimensions
> ### Aliases: drop,rvar-method
> 
> ### ** Examples
> 
> # Sigma is a 3x3 covariance matrix
> Sigma <- as_draws_rvars(example_draws("multi_normal"))$Sigma
> Sigma
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
[2,]  0.53 ± 0.20   3.67 ± 0.45  -2.10 ± 0.48 
[3,] -0.40 ± 0.28  -2.10 ± 0.48   8.12 ± 0.95 
> 
> Sigma[1, ]
rvar<100,4>[1,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
> 
> drop(Sigma[1, ])
rvar<100,4>[3] mean ± sd:
[1]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
> 
> # equivalently ...
> Sigma[1, drop = TRUE]
rvar<100,4>[1] mean ± sd:
[1] 1.3 ± 0.17 
> 
> 
> 
> 
> cleanEx()
> nameEx("entropy")
> ### * entropy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: entropy
> ### Title: Normalized entropy
> ### Aliases: entropy entropy.default entropy.rvar
> 
> ### ** Examples
> 
> set.seed(1234)
> 
> levels <- c("a", "b", "c", "d", "e")
> 
> # a uniform distribution: high normalized entropy
> x <- factor(
+   sample(levels, 4000, replace = TRUE, prob = c(0.2, 0.2, 0.2, 0.2, 0.2)),
+   levels = levels
+ )
> entropy(x)
[1] 0.9999008
> 
> # a unimodal distribution: low normalized entropy
> y <- factor(
+   sample(levels, 4000, replace = TRUE, prob = c(0.95, 0.02, 0.015, 0.01, 0.005)),
+   levels = levels
+ )
> entropy(y)
[1] 0.1659647
> 
> # both together, as an rvar
> xy <- c(rvar(x), rvar(y))
> xy
rvar_factor<4000>[2] mode <entropy>:
[1] d <1.00>  a <0.17> 
5 levels: a b c d e
> entropy(xy)
[1] 0.9999008 0.1659647
> 
> 
> 
> cleanEx()
> nameEx("ess_basic")
> ### * ess_basic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_basic
> ### Title: Basic version of the effective sample size
> ### Aliases: ess_basic ess_basic.default ess_basic.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_basic(mu)
[1] 511.5225
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_basic(d$Sigma)
         [,1]     [,2]     [,3]
[1,] 680.2791 446.2236 481.9080
[2,] 446.2236 522.0755 418.0690
[3,] 481.9080 418.0690 636.2592
> 
> 
> 
> 
> cleanEx()
> nameEx("ess_bulk")
> ### * ess_bulk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_bulk
> ### Title: Bulk effective sample size (bulk-ESS)
> ### Aliases: ess_bulk ess_bulk.default ess_bulk.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_bulk(mu)
[1] 558.0173
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_bulk(d$Sigma)
         [,1]     [,2]     [,3]
[1,] 742.2907 454.0657 468.3890
[2,] 454.0657 528.7972 434.1141
[3,] 468.3890 434.1141 728.9440
> 
> 
> 
> 
> cleanEx()
> nameEx("ess_mean")
> ### * ess_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_mean
> ### Title: Effective sample size for the mean
> ### Aliases: ess_mean ess_mean.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_mean(mu)
[1] 511.5225
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_mean(d$Sigma)
         [,1]     [,2]     [,3]
[1,] 680.2791 446.2236 481.9080
[2,] 446.2236 522.0755 418.0690
[3,] 481.9080 418.0690 636.2592
> 
> 
> 
> 
> cleanEx()
> nameEx("ess_quantile")
> ### * ess_quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_quantile
> ### Title: Effective sample sizes for quantiles
> ### Aliases: ess_quantile ess_quantile.default ess_quantile.rvar ess_median
> ###   ess_mean.default
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_quantile(mu, probs = c(0.1, 0.9))
 ess_q10  ess_q90 
300.6674 325.0324 
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_quantile(d$mu, probs = c(0.1, 0.9))
            [,1]     [,2]     [,3]
ess_q10 383.4835 468.2163 340.6056
ess_q90 389.0418 419.6722 271.5482
> 
> 
> 
> 
> cleanEx()
> nameEx("ess_sd")
> ### * ess_sd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_sd
> ### Title: Effective sample size for the standard deviation
> ### Aliases: ess_sd ess_sd.default ess_sd.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_sd(mu)
[1] 125.744
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_sd(d$Sigma)
         [,1]     [,2]     [,3]
[1,] 219.9113 196.5978 256.7370
[2,] 196.5978 263.0422 213.1058
[3,] 256.7370 213.1058 273.2965
> 
> 
> 
> 
> cleanEx()
> nameEx("ess_tail")
> ### * ess_tail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ess_tail
> ### Title: Tail effective sample size (tail-ESS)
> ### Aliases: ess_tail ess_tail.default ess_tail.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> ess_tail(mu)
[1] 322.0955
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> ess_tail(d$Sigma)
         [,1]     [,2]     [,3]
[1,] 369.3083 238.6147 307.7817
[2,] 238.6147 363.2964 356.7673
[3,] 307.7817 356.7673 324.4500
> 
> 
> 
> 
> cleanEx()
> nameEx("example_draws")
> ### * example_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: example_draws
> ### Title: Example 'draws' objects
> ### Aliases: example_draws
> 
> ### ** Examples
> 
> draws_eight_schools <- example_draws("eight_schools")
> summarise_draws(draws_eight_schools)
# A tibble: 10 × 10
   variable  mean median    sd   mad      q5   q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl> <dbl> <dbl>    <dbl>    <dbl>
 1 mu        4.18   4.16  3.40  3.57  -0.854  9.39  1.02     558.     322.
 2 tau       4.16   3.07  3.58  2.89   0.309 11.0   1.01     246.     202.
 3 theta[1]  6.75   5.97  6.30  4.87  -1.23  18.9   1.01     400.     254.
 4 theta[2]  5.25   5.13  4.63  4.25  -1.97  12.5   1.02     564.     372.
 5 theta[3]  3.04   3.99  6.80  4.94 -10.3   11.9   1.01     312.     205.
 6 theta[4]  4.86   4.99  4.92  4.51  -3.57  12.2   1.02     695.     252.
 7 theta[5]  3.22   3.72  5.08  4.38  -5.93  10.8   1.01     523.     306.
 8 theta[6]  3.99   4.14  5.16  4.81  -4.32  11.5   1.02     548.     205.
 9 theta[7]  6.50   5.90  5.26  4.54  -1.19  15.4   1.00     434.     308.
10 theta[8]  4.57   4.64  5.25  4.89  -3.79  12.2   1.02     355.     146.
> 
> draws_multi_normal <- example_draws("multi_normal")
> summarise_draws(draws_multi_normal)
# A tibble: 12 × 10
   variable      mean  median    sd   mad     q5     q95  rhat ess_bulk ess_tail
   <chr>        <dbl>   <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl>    <dbl>    <dbl>
 1 mu[1]       0.0514  0.0575 0.112 0.131 -0.130  0.225  1.01      677.     356.
 2 mu[2]       0.111   0.104  0.199 0.198 -0.208  0.449  1.00      566.     426.
 3 mu[3]       0.186   0.184  0.314 0.315 -0.322  0.715  1.02      650.     334.
 4 Sigma[1,1]  1.28    1.26   0.165 0.173  1.03   1.56   1.00      742.     369.
 5 Sigma[2,1]  0.525   0.502  0.200 0.173  0.227  0.874  1.01      454.     239.
 6 Sigma[3,1] -0.403  -0.393  0.282 0.267 -0.874  0.0432 1.01      468.     308.
 7 Sigma[1,2]  0.525   0.502  0.200 0.173  0.227  0.874  1.01      454.     239.
 8 Sigma[2,2]  3.67    3.62   0.447 0.433  3.02   4.40   1.01      529.     363.
 9 Sigma[3,2] -2.10   -2.11   0.480 0.469 -2.87  -1.39   1.02      434.     357.
10 Sigma[1,3] -0.403  -0.393  0.282 0.267 -0.874  0.0432 1.01      468.     308.
11 Sigma[2,3] -2.10   -2.11   0.480 0.469 -2.87  -1.39   1.02      434.     357.
12 Sigma[3,3]  8.12    8.02   0.946 0.941  6.71   9.91   0.997     729.     324.
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_variable")
> ### * extract_variable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_variable
> ### Title: Extract draws of a single variable
> ### Aliases: extract_variable extract_variable.default
> ###   extract_variable.draws extract_variable.draws_df
> ###   extract_variable.draws_list extract_variable.draws_rvars
> 
> ### ** Examples
> 
> x <- example_draws()
> mu <- extract_variable(x, variable = "mu")
> str(mu)
 num [1:400] 2.01 1.46 5.81 6.85 1.81 ...
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_variable_array")
> ### * extract_variable_array
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_variable_array
> ### Title: Extract array of a single (possibly indexed) variable
> ### Aliases: extract_variable_array extract_variable_array.default
> ###   extract_variable_array.draws
> 
> ### ** Examples
> 
> x <- example_draws(example = "multi_normal")
> 
> mu <- extract_variable_array(x, variable = "mu")
> str(mu)
 num [1:100, 1:4, 1:3] 0.18119 -0.03419 -0.05875 -0.1536 0.00989 ...
 - attr(*, "dimnames")=List of 3
  ..$ : NULL
  ..$ : NULL
  ..$ : NULL
> 
> mu1 <- extract_variable_array(x, variable = "mu[1]")
> str(mu1)
 num [1:100, 1:4, 1] 0.18119 -0.03419 -0.05875 -0.1536 0.00989 ...
 - attr(*, "dimnames")=List of 3
  ..$ : NULL
  ..$ : NULL
  ..$ : NULL
> 
> Sigma <- extract_variable_array(x, variable = "Sigma")
> str(Sigma)
 num [1:100, 1:4, 1:3, 1:3] 1.2 1.14 1.12 1.14 1.19 ...
 - attr(*, "dimnames")=List of 4
  ..$ : NULL
  ..$ : NULL
  ..$ : NULL
  ..$ : NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("extract_variable_matrix")
> ### * extract_variable_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: extract_variable_matrix
> ### Title: Extract matrix of a single variable
> ### Aliases: extract_variable_matrix extract_variable_matrix.default
> ###   extract_variable_matrix.draws extract_variable_matrix.draws_df
> ###   extract_variable_matrix.draws_list
> ###   extract_variable_matrix.draws_rvars
> 
> ### ** Examples
> 
> x <- example_draws()
> mu <- extract_variable_matrix(x, variable = "mu")
> dim(mu)
[1] 100   4
> rhat(mu)
[1] 1.021923
> 
> 
> 
> 
> cleanEx()
> nameEx("for_each_draw")
> ### * for_each_draw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: for_each_draw
> ### Title: Loop over draws
> ### Aliases: for_each_draw
> 
> ### ** Examples
> 
> eight_schools <- as_draws_rvars(example_draws())
> 
> 
> # 1. A simple example --- looping over draws and printing each draw
> # NOTE: You probably don't want to do this in practice! This example is
> # just intended to show what for_each_draw() is doing. If you just want to
> # print the draws of an rvar, it is probably better to use draws_of()
> for_each_draw(eight_schools, {
+   print(mu)
+ })
[1] 2.005831
[1] 1.458316
[1] 5.814947
[1] 6.849586
[1] 1.805168
[1] 3.841243
[1] 5.474273
[1] 1.203062
[1] 0.1463805
[1] 7.17291
[1] 0.9910314
[1] -1.550489
[1] 0.5842059
[1] 5.447506
[1] 6.180503
[1] 8.188255
[1] 7.384924
[1] 5.065307
[1] 6.59501
[1] -5.56139
[1] 10.34668
[1] 8.732913
[1] 8.560648
[1] 9.382581
[1] 1.368601
[1] 6.328316
[1] 7.920994
[1] 5.504498
[1] 7.154337
[1] 7.154337
[1] 4.498041
[1] 3.972859
[1] 1.246672
[1] 6.715447
[1] 2.593476
[1] 4.150923
[1] 5.576988
[1] 6.479588
[1] 6.714915
[1] 3.092834
[1] 4.667634
[1] 0.3257462
[1] 7.78165
[1] 2.771024
[1] -2.159893
[1] 3.623976
[1] 4.177537
[1] 5.189134
[1] 3.700737
[1] 8.054184
[1] 2.589031
[1] 2.482616
[1] 0.9075757
[1] 0.27648
[1] 8.077656
[1] 2.332971
[1] 4.332468
[1] 1.729912
[1] 1.419623
[1] 6.577866
[1] 11.08855
[1] -2.140353
[1] -1.800176
[1] 12.28125
[1] -2.614854
[1] 12.24904
[1] 0.8886184
[1] 0.9028057
[1] 1.677317
[1] 7.796531
[1] 9.592966
[1] 5.919053
[1] 2.746375
[1] 6.479243
[1] 2.768363
[1] 7.426639
[1] 2.667748
[1] 5.528707
[1] 11.79623
[1] -0.6559906
[1] -0.2416307
[1] 5.276274
[1] -0.1637204
[1] 1.761676
[1] -0.8038231
[1] 5.327505
[1] 6.328764
[1] 2.452526
[1] 3.733484
[1] 2.7919
[1] 6.123445
[1] 3.651789
[1] 5.425331
[1] 4.815524
[1] 3.507938
[1] 6.775166
[1] 1.856798
[1] 6.172828
[1] 1.548535
[1] 7.516744
[1] 2.990381
[1] 8.172526
[1] -1.15365
[1] 10.93486
[1] 9.820921
[1] -10.90481
[1] -9.260446
[1] 1.791052
[1] 5.350254
[1] 0.8686961
[1] 9.831286
[1] 7.178421
[1] 7.303903
[1] 0.1740227
[1] 8.024494
[1] 13.71125
[1] -2.654716
[1] 9.164643
[1] 7.337641
[1] -0.4282678
[1] 4.826956
[1] -0.421578
[1] 0.8573548
[1] 0.2247874
[1] 8.471193
[1] 9.4772
[1] 0.1802919
[1] 3.526179
[1] 6.635041
[1] 4.873137
[1] 5.749479
[1] -0.2319217
[1] 9.551073
[1] 1.256314
[1] 4.600533
[1] 2.622144
[1] 7.089645
[1] 3.271309
[1] 10.1848
[1] -2.222072
[1] 5.777605
[1] 3.345942
[1] 4.580048
[1] 6.25215
[1] 3.036535
[1] 6.377873
[1] -0.8467208
[1] 10.17687
[1] 2.262151
[1] 1.947261
[1] 8.905462
[1] 6.451443
[1] 4.76286
[1] -2.212966
[1] 8.292972
[1] 6.414798
[1] 6.069405
[1] 3.430352
[1] 4.860967
[1] 6.715199
[1] 7.275805
[1] 6.428511
[1] 3.242366
[1] 9.293644
[1] -0.6929381
[1] 8.700848
[1] 3.719785
[1] 5.747341
[1] 6.778653
[1] 8.779596
[1] 0.3407823
[1] 9.734953
[1] -1.61732
[1] 10.80919
[1] 2.96836
[1] 7.013745
[1] 3.666725
[1] 1.410787
[1] 6.585366
[1] 3.456987
[1] 3.942221
[1] 5.830744
[1] 7.50853
[1] -0.9847083
[1] 7.009851
[1] 1.248523
[1] 1.869871
[1] 5.82212
[1] 3.379486
[1] 5.587379
[1] 5.892139
[1] 10.19627
[1] 3.957886
[1] 2.666729
[1] 7.741973
[1] 0.7657729
[1] 8.243569
[1] 1.519901
[1] 8.575984
[1] -1.241991
[1] 1.794368
[1] 5.986371
[1] 2.557202
[1] 2.794425
[1] -0.02958928
[1] 1.063617
[1] 3.673857
[1] 3.505838
[1] 8.853159
[1] 8.853159
[1] 1.896446
[1] 4.269309
[1] 0.3929587
[1] -0.3855215
[1] 0.4399129
[1] 6.107962
[1] 6.136167
[1] 0.9391723
[1] -0.3633222
[1] 4.018959
[1] 5.360394
[1] 0.4944048
[1] 2.182324
[1] -0.450423
[1] 2.371517
[1] 1.998246
[1] 3.006006
[1] 2.614495
[1] 4.054033
[1] 4.727055
[1] 2.077013
[1] 1.7171
[1] 5.676568
[1] 7.359798
[1] 3.347586
[1] 3.465405
[1] 7.734784
[1] 1.075762
[1] 0.8731733
[1] 8.382703
[1] 9.133231
[1] 7.911396
[1] 3.647458
[1] 4.021722
[1] 5.590273
[1] 3.771822
[1] 6.767269
[1] 6.73121
[1] -2.035578
[1] -0.6331069
[1] -2.500302
[1] 8.864541
[1] 9.813685
[1] 4.852993
[1] -0.1317092
[1] 5.444751
[1] 6.496114
[1] 2.082844
[1] 3.426155
[1] 3.866463
[1] 1.897673
[1] 6.787045
[1] 3.676815
[1] 2.801344
[1] 1.558138
[1] 5.079696
[1] 5.331685
[1] 4.058808
[1] 6.433192
[1] 6.149452
[1] 6.754594
[1] 5.755464
[1] 4.770074
[1] 4.443709
[1] 6.27212
[1] 3.151525
[1] 4.954608
[1] 5.294373
[1] 3.509907
[1] -0.5068128
[1] -0.5068128
[1] -0.5068128
[1] -0.5068128
[1] 1.006574
[1] 3.142413
[1] 6.640588
[1] 4.788217
[1] 2.894039
[1] 9.07924
[1] 0.2812174
[1] 6.380328
[1] 7.482811
[1] 8.413412
[1] 6.317088
[1] 1.339948
[1] 7.774194
[1] 3.926885
[1] 0.08176881
[1] 3.174703
[1] 3.575558
[1] 6.458979
[1] 9.145118
[1] 0.2030693
[1] 3.692529
[1] 5.480271
[1] 2.379514
[1] 11.82462
[1] 4.90456
[1] 0.8796356
[1] 3.813747
[1] 3.432436
[1] -4.296498
[1] -4.06038
[1] 7.379277
[1] 2.212441
[1] 6.090105
[1] 8.645111
[1] 10.29126
[1] 2.295806
[1] 8.158265
[1] 6.594462
[1] 4.773796
[1] -1.60865
[1] 8.442649
[1] 1.968831
[1] 5.527651
[1] 6.100609
[1] 5.13686
[1] 6.267986
[1] 6.21822
[1] 2.246441
[1] 1.015631
[1] 4.376825
[1] -0.2470492
[1] 6.855368
[1] 0.7892017
[1] 7.310153
[1] 0.5838083
[1] 3.452831
[1] 6.157008
[1] 6.945902
[1] 7.793461
[1] 5.713618
[1] 1.094745
[1] 4.14184
[1] 4.656109
[1] 4.835303
[1] 2.360251
[1] 5.1895
[1] 6.964457
[1] 0.7819602
[1] 4.921984
[1] 4.125013
[1] 4.381954
[1] 0.4576623
[1] 3.089239
[1] 5.613297
[1] 5.800871
[1] 2.689139
[1] 4.23484
[1] -0.1137887
[1] 6.758072
[1] 5.357305
[1] 3.36597
[1] 3.614427
[1] 3.357607
[1] 3.627169
[1] 0.8046778
[1] 7.199353
[1] -0.3494357
[1] 1.544988
[1] 8.613144
[1] 0.5170308
[1] 8.365525
[1] 0.9939937
[1] 2.543458
[1] 7.218512
[1] 5.124879
[1] 2.415208
[1] 3.815243
[1] 5.156247
[1] 3.742969
[1] 0.4044733
[1] 8.137713
[1] 8.008371
[1] 6.180301
[1] 5.815311
[1] 3.155752
[1] 3.224573
[1] 5.446791
[1] 1.068988
[1] 6.694287
[1] 5.169541
[1] 0.9799776
[1] 5.687312
[1] 3.280556
[1] 5.039586
[1] 2.726364
[1] 0.4754905
[1] 7.047233
> 
> 
> # 2. A more complex example --- building a parallel coordinates plot
> # First, construct the plot bounds
> plot(1, type = "n",
+   xlim = c(1, length(eight_schools$theta)),
+   ylim = range(range(eight_schools$theta)),
+   xlab = "school", ylab = "theta"
+ )
> 
> # Then, use for_each_draw() to make a parallel coordinates plot of all draws
> # of eight_schools$theta. Use resample_draws(eight_schools, n = ...)
> # in place of eight_schools if a smaller sample is desired for the plot.
> for_each_draw(eight_schools, {
+   lines(seq_along(theta), theta, col = rgb(1, 0, 0, 0.05))
+ })
> 
> # Finally, add means and 90% intervals
> lines(seq_along(eight_schools$theta), mean(eight_schools$theta))
> with(summarise_draws(eight_schools$theta),
+   segments(seq_along(eight_schools$theta), y0 = q5, y1 = q95)
+ )
> 
> 
> 
> cleanEx()
> nameEx("match")
> ### * match
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: match
> ### Title: Value Matching
> ### Aliases: match match.default match.rvar %in%
> 
> ### ** Examples
> 
> x <- rvar(c("a","b","b","c","d"))
> x %in% c("b","d")
rvar<5>[1] mean ± sd:
[1] 0.6 ± 0.55 
> 
> # for additional examples, see base::match()
> 
> 
> 
> cleanEx()
> nameEx("mcse_mean")
> ### * mcse_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcse_mean
> ### Title: Monte Carlo standard error for the mean
> ### Aliases: mcse_mean mcse_mean.default mcse_mean.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> mcse_mean(mu)
[1] 0.1504394
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> mcse_mean(d$Sigma)
            [,1]        [,2]       [,3]
[1,] 0.006331065 0.009478331 0.01283981
[2,] 0.009478331 0.019579138 0.02346471
[3,] 0.012839814 0.023464711 0.03748603
> 
> 
> 
> 
> cleanEx()
> nameEx("mcse_quantile")
> ### * mcse_quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcse_quantile
> ### Title: Monte Carlo standard error for quantiles
> ### Aliases: mcse_quantile mcse_quantile.default mcse_quantile.rvar
> ###   mcse_median
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> mcse_quantile(mu, probs = c(0.1, 0.9))
 mcse_q10  mcse_q90 
0.3199011 0.2677437 
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> mcse_quantile(d$mu)
                [,1]       [,2]       [,3]
mcse_q5  0.012675014 0.01279547 0.02331627
mcse_q95 0.008302994 0.02609606 0.05555146
> 
> 
> 
> 
> cleanEx()
> nameEx("mcse_sd")
> ### * mcse_sd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcse_sd
> ### Title: Monte Carlo standard error for the standard deviation
> ### Aliases: mcse_sd mcse_sd.default mcse_sd.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> mcse_sd(mu)
[1] 0.2487345
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> mcse_sd(d$Sigma)
            [,1]       [,2]       [,3]
[1,] 0.007911205 0.01281948 0.01365999
[2,] 0.012819476 0.01966138 0.02375922
[3,] 0.013659991 0.02375922 0.04301713
> 
> 
> 
> 
> cleanEx()
> nameEx("merge_chains")
> ### * merge_chains
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: merge_chains
> ### Title: Merge chains of 'draws' objects
> ### Aliases: merge_chains merge_chains.draws_matrix
> ###   merge_chains.draws_array merge_chains.draws_df
> ###   merge_chains.draws_list merge_chains.rvar merge_chains.draws_rvars
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> # draws_array with 4 chains, 100 iters each
> str(x)
 'draws_array' num [1:100, 1:4, 1:10] 2.01 1.46 5.81 6.85 1.81 ...
 - attr(*, "dimnames")=List of 3
  ..$ iteration: chr [1:100] "1" "2" "3" "4" ...
  ..$ chain    : chr [1:4] "1" "2" "3" "4"
  ..$ variable : chr [1:10] "mu" "tau" "theta[1]" "theta[2]" ...
> 
> # draws_array with 1 chain of 400 iterations
> str(merge_chains(x))
 'draws_array' num [1:400, 1, 1:10] 2.01 1.46 5.81 6.85 1.81 ...
 - attr(*, "dimnames")=List of 3
  ..$ iteration: chr [1:400] "1" "2" "3" "4" ...
  ..$ chain    : chr "1"
  ..$ variable : chr [1:10] "mu" "tau" "theta[1]" "theta[2]" ...
> 
> 
> 
> 
> cleanEx()
> nameEx("modal_category")
> ### * modal_category
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modal_category
> ### Title: Modal category
> ### Aliases: modal_category modal_category.default modal_category.rvar
> 
> ### ** Examples
> 
> x <- factor(c("a","b","b","c","d"))
> modal_category(x)
[1] "b"
> 
> # in the case of ties, the first tie is returned
> y <- factor(c("a","c","c","d","d"))
> modal_category(y)
[1] "c"
> 
> # both together, as an rvar
> xy <- c(rvar(x), rvar(y))
> xy
rvar_factor<5>[2] mode <entropy>:
[1] b <0.96>  c <0.76> 
4 levels: a b c d
> modal_category(xy)
[1] "b" "c"
> 
> 
> 
> cleanEx()
> nameEx("mutate_variables")
> ### * mutate_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mutate_variables
> ### Title: Mutate variables in 'draws' objects
> ### Aliases: mutate_variables mutate_variables.draws_matrix
> ###   mutate_variables.draws_array mutate_variables.draws_df
> ###   mutate_variables.draws_list mutate_variables.draws_rvars
> 
> ### ** Examples
> 
> x <- as_draws_df(example_draws())
> x <- subset(x, variable = c("mu", "tau"))
> 
> mutate_variables(x, tau2 = tau^2)
# A draws_df: 100 iterations, 4 chains, and 3 variables
     mu tau tau2
1  2.01 2.8  7.7
2  1.46 7.0 48.7
3  5.81 9.7 93.6
4  6.85 4.8 22.9
5  1.81 2.8  8.1
6  3.84 4.1 16.7
7  5.47 4.0 15.6
8  1.20 1.5  2.2
9  0.15 3.9 15.4
10 7.17 1.8  3.1
# ... with 390 more draws
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> mutate_variables(x, scale = 1.96 * tau, lower = mu - scale)
# A draws_df: 100 iterations, 4 chains, and 4 variables
     mu tau scale lower
1  2.01 2.8   5.4  -3.4
2  1.46 7.0  13.7 -12.2
3  5.81 9.7  19.0 -13.2
4  6.85 4.8   9.4  -2.5
5  1.81 2.8   5.6  -3.8
6  3.84 4.1   8.0  -4.2
7  5.47 4.0   7.7  -2.3
8  1.20 1.5   2.9  -1.7
9  0.15 3.9   7.7  -7.6
10 7.17 1.8   3.5   3.7
# ... with 390 more draws
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> 
> 
> 
> 
> cleanEx()
> nameEx("order_draws")
> ### * order_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: order_draws
> ### Title: Order 'draws' objects
> ### Aliases: order_draws order_draws.draws_matrix order_draws.draws_array
> ###   order_draws.draws_df order_draws.draws_list order_draws.draws_rvars
> ###   order_draws.rvar
> 
> ### ** Examples
> 
> x <- as_draws_array(example_draws())
> dimnames(x[10:5, 4:3, ])
$iteration
[1] "10" "9"  "8"  "7"  "6"  "5" 

$chain
[1] "4" "3"

$variable
 [1] "mu"       "tau"      "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"

> dimnames(order_draws(x[10:5, 4:3, ]))
$iteration
[1] "5"  "6"  "7"  "8"  "9"  "10"

$chain
[1] "3" "4"

$variable
 [1] "mu"       "tau"      "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"

> 
> 
> 
> 
> cleanEx()
> nameEx("pareto_diags")
> ### * pareto_diags
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pareto_diags
> ### Title: Pareto smoothing diagnostics
> ### Aliases: pareto_diags pareto_diags.default pareto_diags.rvar
> ###   pareto_khat_threshold pareto_khat_threshold.default
> ###   pareto_khat_threshold.rvar pareto_min_ss pareto_min_ss.default
> ###   pareto_min_ss.rvar pareto_convergence_rate
> ###   pareto_convergence_rate.default pareto_convergence_rate.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> pareto_diags(mu)
$khat
[1] 0.1979001

$min_ss
[1] 17.6493

$khat_threshold
[1] 0.6156891

$convergence_rate
[1] 0.9858796

> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> pareto_diags(d$Sigma)
$khat
           [,1]       [,2]        [,3]
[1,] 0.05601935 0.04156719  0.05091481
[2,] 0.04156719 0.10157218  0.06191862
[3,] 0.05091481 0.06191862 -0.08123058

$min_ss
         [,1]     [,2]     [,3]
[1,] 11.46420 11.05020 11.31478
[2,] 11.05020 12.97345 11.64141
[3,] 11.31478 11.64141 10.00000

$khat_threshold
          [,1]      [,2]      [,3]
[1,] 0.6156891 0.6156891 0.6156891
[2,] 0.6156891 0.6156891 0.6156891
[3,] 0.6156891 0.6156891 0.6156891

$convergence_rate
          [,1]      [,2]      [,3]
[1,] 0.9981412 0.9987187 0.9983542
[2,] 0.9987187 0.9957205 0.9978820
[3,] 0.9983542 0.9978820 1.0000000

> 
> 
> 
> cleanEx()
> nameEx("pareto_khat")
> ### * pareto_khat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pareto_khat
> ### Title: Pareto khat diagnostic
> ### Aliases: pareto_khat pareto_khat.default pareto_khat.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> pareto_khat(mu)
[1] 0.1979001
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> pareto_khat(d$Sigma)
           [,1]       [,2]        [,3]
[1,] 0.05601935 0.04156719  0.05091481
[2,] 0.04156719 0.10157218  0.06191862
[3,] 0.05091481 0.06191862 -0.08123058
> 
> 
> 
> cleanEx()
> nameEx("pareto_smooth")
> ### * pareto_smooth
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pareto_smooth
> ### Title: Pareto smoothing
> ### Aliases: pareto_smooth pareto_smooth.rvar pareto_smooth.default
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> pareto_smooth(mu)
Pareto k-hat = 0.2.
         chain
iteration          1            2           3           4
      1    2.0058311   2.99038071  1.79436801  6.45897880
      2    1.4583161   8.07284940  5.98637117  9.27304630
      3    5.8149473  -1.33971154  2.55720201  0.30130121
      4    6.8495862  11.42146271  2.79442522  3.69252884
      5    1.8051677  10.10811381  0.11457536  5.48027067
      6    3.8412425 -10.90481295  1.06361700  2.37951413
      7    5.4742729  -7.67893226  3.67385716 12.37474175
      8    1.2030617   1.79105196  3.50583836  4.90456023
      9    0.1923430   5.35025400  8.86764324  0.87963558
      10   7.1729098   0.86185525  8.92963703  3.81374732
      11   0.9910314  10.22878590  1.89644594  3.43243605
      12  -1.5650982   7.17842051  4.26930915 -5.18091530
      13   0.7175292   7.30390277  0.49592463 -4.51701690
      14   5.4475057   0.22963730 -0.30118385  7.38133431
      15   6.1805031   7.87716434  0.55494635  2.21244092
      16   8.1143336  13.71124994  6.10796214  6.09010450
      17   7.4109742  -4.01010957  6.13616693  8.63747217
      18   5.0653065   9.34967709  0.93917231 10.81154206
      19   6.5950099   7.33764114 -0.24854260  2.29580552
      20  -6.1230828  -0.41253795  4.01895927  8.03219045
      21  10.9923672   4.82695606  5.36039410  6.59446197
      22   8.7492153  -0.35580209  0.63877913  4.77379635
      23   8.4807964   0.83891018  2.18232401 -1.69043575
      24   9.5127659   0.33576205 -0.47154715  8.38276275
      25   1.3686009   8.43118203  2.37151659  1.96883059
      26   6.3283157   9.59984473  1.99824582  5.52765102
      27   7.8038181   0.26594097  3.00600558  6.10060909
      28   5.5044978   3.52617924  2.61449547  5.13685962
      29   7.1543373   6.63504133  4.05403279  6.26798609
      30   7.1543373   4.87313661  4.72705540  6.21822025
      31   4.4980414   5.74947888  2.07701271  2.24644098
      32   3.9728593  -0.05536469  1.71709968  1.01563071
      33   1.2466721   9.69110598  5.67656775  4.37682520
      34   6.7154469   1.25631396  7.35210528 -0.14869286
      35   2.5934765   4.60053327  3.34758639  6.85536829
      36   4.1509232   2.62214416  3.46540535  0.79173490
      37   5.5769881   7.08964546  7.56578659  7.31015271
      38   6.4795882   3.27130941  1.07576229  0.69180892
      39   6.7149149  10.49687754  0.87317333  3.45283097
      40   3.0928339  -2.97728532  8.28927887  6.15700804
      41   4.6676343   5.77760488  9.19934064  6.94590217
      42   0.4341460   3.34594153  7.76809799  7.69845246
      43   7.6644860   4.58004814  3.64745811  5.71361755
      44   2.7710241   6.25215016  4.02172175  1.09474532
      45  -2.5071234   3.03653496  5.59027281  4.14183957
      46   3.6239761   6.37787278  3.77182163  4.65610892
      47   4.1775368  -1.14178246  6.76726892  4.83530335
      48   5.1891338  10.35792448  6.73120973  2.36025147
      49   3.7007374   2.26215093 -2.13372165  5.18949994
      50   7.9148389   1.94726080 -0.80750891  6.96445721
      51   2.5890314   9.05983209 -3.26518724  0.76747482
      52   2.4826160   6.45144266  8.99365227  4.92198428
      53   0.9075757   4.76285987  9.99482330  4.12501340
      54   0.3693646  -2.72735886  4.85299318  4.38195376
      55   7.9532159   8.19992395  0.03218316  0.58349237
      56   2.3329707   6.41479763  5.44475101  3.08923892
      57   4.3324681   6.06940520  6.49611407  5.61329746
      58   1.7299121   3.43035241  2.08284445  5.80087096
      59   1.4196226   4.86096716  3.42615485  2.68913918
      60   6.5778662   6.71519862  3.86646326  4.23484000
      61  11.6837230   7.27580476  1.89767270  0.07398856
      62  -2.3106878   6.42851118  6.78704544  6.75807164
      63  -1.9729536   3.24236645  3.67681516  5.35730452
      64  13.6001013   9.42948716  2.80134400  3.36597040
      65  -3.6032069  -0.96573696  1.55813764  3.61442662
      66  12.8720357   8.69255780  5.07969585  3.35760729
      67   0.8886184   3.71978511  5.33168512  3.62716863
      68   0.9028057   5.74734105  4.05880826  0.81554158
      69   1.6773174   6.77865339  6.43319154  7.19935256
      70   7.7329831   8.80754168  6.14945199 -0.19775088
      71   9.7869937   0.46539458  6.75459412  1.54498835
      72   5.9190529   9.88802789  5.75546387  8.58386979
      73   2.7463754  -1.82585563  4.77007413  0.66556551
      74   6.4792428  11.19379834  4.44370854  8.24410926
      75   2.7683627   2.96836015  6.27212042  0.99399372
      76   7.4410372   7.01374501  3.15152477  2.54345797
      77   2.6677480   3.66672487  4.95460833  7.21851228
      78   5.5287068   1.41078743  5.29437266  5.12487891
      79  11.9938289   6.58536629  3.50990665  2.41520814
      80  -0.8846060   3.45698706 -0.53300259  3.81524258
      81  -0.1012630   3.94222115 -0.59709705  5.15624656
      82   5.2762736   5.83074377 -0.66404619  3.74296853
      83  -0.0109097   7.50248450 -0.73409233  0.52576589
      84   1.7616762  -1.23770609  1.00657412  7.99232314
      85  -1.0513068   7.00985107  3.14241272  7.84016569
      86   5.3275047   1.24852261  6.64058798  6.18030063
      87   6.3287644   1.86987051  4.78821655  5.81531118
      88   2.4525260   5.82211954  2.89403878  3.15575203
      89   3.7334839   3.37948604  9.12833565  3.22457344
      90   2.7919003   5.58737855  0.40214725  5.44679063
      91   6.1234455   5.89213877  6.38032817  1.06898827
      92   3.6517885  10.64734978  7.47153612  6.69428679
      93   5.4253306   3.95788604  8.33547985  5.16954115
      94   4.8155242   2.66672890  6.31708788  0.97997759
      95   3.5079380   7.59817058  1.33994762  5.68731206
      96   6.7751655   0.74274524  7.63106467  3.28055582
      97   1.8567982   8.15667906  3.92688491  5.03958552
      98   6.1728283   1.51990114  0.15400719  2.72636415
      99   1.5485347   8.53166943  3.17470254  0.61142881
      100  7.5338964  -1.44854601  3.57555760  7.04723309
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> pareto_smooth(d$Sigma)
Pareto k-hat = 0.06.
Pareto k-hat = 0.04.
Pareto k-hat = 0.05.
Pareto k-hat = 0.04.
Pareto k-hat = 0.1.
Pareto k-hat = 0.06.
Pareto k-hat = 0.05.
Pareto k-hat = 0.06.
Pareto k-hat = -0.08.
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.21  -0.40 ± 0.29 
[2,]  0.53 ± 0.21   3.66 ± 0.45  -2.10 ± 0.49 
[3,] -0.40 ± 0.29  -2.10 ± 0.49   8.12 ± 0.96 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_array")
> ### * print.draws_array
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_array
> ### Title: Print 'draws_array' objects
> ### Aliases: print.draws_array
> 
> ### ** Examples
> 
> x <- as_draws_array(example_draws())
> print(x)
# A draws_array: 100 iterations, 4 chains, and 10 variables
, , variable = mu

         chain
iteration   1    2     3   4
        1 2.0  3.0  1.79 6.5
        2 1.5  8.2  5.99 9.1
        3 5.8 -1.2  2.56 0.2
        4 6.8 10.9  2.79 3.7
        5 1.8  9.8 -0.03 5.5

, , variable = tau

         chain
iteration   1    2    3   4
        1 2.8 2.80  8.7 3.8
        2 7.0 2.76  2.9 6.8
        3 9.7 0.57  8.4 5.3
        4 4.8 2.45  4.4 1.6
        5 2.8 2.80 11.0 3.0

, , variable = theta[1]

         chain
iteration     1     2    3     4
        1  3.96  6.26 13.3  5.78
        2  0.12  9.32  6.3  2.09
        3 21.25 -0.97 10.6 15.72
        4 14.70 12.45  5.4  2.69
        5  5.96  9.75  8.2 -0.91

, , variable = theta[2]

         chain
iteration      1    2   3   4
        1  0.271  1.0 2.1 5.0
        2 -0.069  9.4 7.3 8.2
        3 14.931 -1.2 5.7 6.0
        4  8.586 12.5 2.8 2.7
        5  1.156 11.9 3.2 3.2

# ... with 95 more iterations, and 6 more variables
> 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_df")
> ### * print.draws_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_df
> ### Title: Print 'draws_df' objects
> ### Aliases: print.draws_df
> 
> ### ** Examples
> 
> x <- as_draws_df(example_draws())
> print(x)
# A draws_df: 100 iterations, 4 chains, and 10 variables
     mu tau theta[1] theta[2] theta[3] theta[4] theta[5] theta[6]
1  2.01 2.8     3.96    0.271    -0.74      2.1    0.923      1.7
2  1.46 7.0     0.12   -0.069     0.95      7.3   -0.062     11.3
3  5.81 9.7    21.25   14.931     1.83      1.4    0.531      7.2
4  6.85 4.8    14.70    8.586     2.67      4.4    4.758      8.1
5  1.81 2.8     5.96    1.156     3.11      2.0    0.769      4.7
6  3.84 4.1     5.76    9.909    -1.00      5.3    5.889     -1.7
7  5.47 4.0     4.03    4.151    10.15      6.6    3.741     -2.2
8  1.20 1.5    -0.28    1.846     0.47      4.3    1.467      3.3
9  0.15 3.9     1.81    0.661     0.86      4.5   -1.025      1.1
10 7.17 1.8     6.08    8.102     7.68      5.6    7.106      8.5
# ... with 390 more draws, and 2 more variables
# ... hidden reserved variables {'.chain', '.iteration', '.draw'}
> 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_list")
> ### * print.draws_list
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_list
> ### Title: Print 'draws_list' objects
> ### Aliases: print.draws_list
> 
> ### ** Examples
> 
> x <- as_draws_list(example_draws())
> print(x)
# A draws_list: 100 iterations, 4 chains, and 10 variables

[chain = 1]
$mu
 [1] 2.01 1.46 5.81 6.85 1.81 3.84 5.47 1.20 0.15 7.17

$tau
 [1] 2.8 7.0 9.7 4.8 2.8 4.1 4.0 1.5 3.9 1.8

$`theta[1]`
 [1]  3.96  0.12 21.25 14.70  5.96  5.76  4.03 -0.28  1.81  6.08

$`theta[2]`
 [1]  0.271 -0.069 14.931  8.586  1.156  9.909  4.151  1.846  0.661  8.102


[chain = 2]
$mu
 [1]   2.99   8.17  -1.15  10.93   9.82 -10.90  -9.26   1.79   5.35   0.87

$tau
 [1] 2.80 2.76 0.57 2.45 2.80 6.08 9.33 6.81 2.82 6.69

$`theta[1]`
 [1]  6.26  9.32 -0.97 12.45  9.75  2.56 11.92  9.89  4.31  9.26

$`theta[2]`
 [1]  1.0  9.4 -1.2 12.5 11.9 -8.8 -6.1 11.6  2.8  8.4

# ... with 90 more iterations, and 2 more chains, and 6 more variables
> 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_matrix")
> ### * print.draws_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_matrix
> ### Title: Print 'draws_matrix' objects
> ### Aliases: print.draws_matrix
> 
> ### ** Examples
> 
> x <- as_draws_matrix(example_draws())
> print(x)
# A draws_matrix: 100 iterations, 4 chains, and 10 variables
    variable
draw   mu tau theta[1] theta[2] theta[3] theta[4] theta[5] theta[6]
  1  2.01 2.8     3.96    0.271    -0.74      2.1    0.923      1.7
  2  1.46 7.0     0.12   -0.069     0.95      7.3   -0.062     11.3
  3  5.81 9.7    21.25   14.931     1.83      1.4    0.531      7.2
  4  6.85 4.8    14.70    8.586     2.67      4.4    4.758      8.1
  5  1.81 2.8     5.96    1.156     3.11      2.0    0.769      4.7
  6  3.84 4.1     5.76    9.909    -1.00      5.3    5.889     -1.7
  7  5.47 4.0     4.03    4.151    10.15      6.6    3.741     -2.2
  8  1.20 1.5    -0.28    1.846     0.47      4.3    1.467      3.3
  9  0.15 3.9     1.81    0.661     0.86      4.5   -1.025      1.1
  10 7.17 1.8     6.08    8.102     7.68      5.6    7.106      8.5
# ... with 390 more draws, and 2 more variables
> 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_rvars")
> ### * print.draws_rvars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_rvars
> ### Title: Print 'draws_rvars' objects
> ### Aliases: print.draws_rvars
> 
> ### ** Examples
> 
> x <- as_draws_rvars(example_draws())
> print(x)
# A draws_rvars: 100 iterations, 4 chains, and 3 variables
$mu: rvar<100,4>[1] mean ± sd:
[1] 4.2 ± 3.4 

$tau: rvar<100,4>[1] mean ± sd:
[1] 4.2 ± 3.6 

$theta: rvar<100,4>[8] mean ± sd:
[1] 6.7 ± 6.3  5.3 ± 4.6  3.0 ± 6.8  4.9 ± 4.9  3.2 ± 5.1  4.0 ± 5.2  6.5 ± 5.3 
[8] 4.6 ± 5.3 

> 
> 
> 
> 
> cleanEx()
> nameEx("print.draws_summary")
> ### * print.draws_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.draws_summary
> ### Title: Print summaries of 'draws' objects
> ### Aliases: print.draws_summary
> 
> ### ** Examples
> 
> x <- example_draws("eight_schools")
> 
> # adjust how summaries are printed when calling summarise_draws()...
> summarise_draws(x, .num_args = list(sigfig = 2, notation = "dec"))
# A tibble: 10 × 10
   variable  mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl>
 1 mu         4.2    4.2   3.4   3.6  -0.85   9.4   1.0     558.     322.
 2 tau        4.2    3.1   3.6   2.9   0.31  11.    1.0     246.     202.
 3 theta[1]   6.7    6.0   6.3   4.9  -1.2   19.    1.0     400.     254.
 4 theta[2]   5.3    5.1   4.6   4.3  -2.0   13.    1.0     564.     372.
 5 theta[3]   3.0    4.0   6.8   4.9 -10.    12.    1.0     312.     205.
 6 theta[4]   4.9    5.0   4.9   4.5  -3.6   12.    1.0     695.     252.
 7 theta[5]   3.2    3.7   5.1   4.4  -5.9   11.    1.0     523.     306.
 8 theta[6]   4.0    4.1   5.2   4.8  -4.3   12.    1.0     548.     205.
 9 theta[7]   6.5    5.9   5.3   4.5  -1.2   15.    1.0     434.     308.
10 theta[8]   4.6    4.6   5.3   4.9  -3.8   12.    1.0     355.     146.
> 
> # ... or when printing
> s <- summarise_draws(x)
> print(s, num_args = list(sigfig = 2, notation = "dec"))
Warning: `...` must be empty in `format.tbl()`
Caused by error in `format_tbl()`:
! `...` must be empty.
✖ Problematic argument:
• num_args = num_args
# A tibble: 10 × 10
   variable  mean median    sd   mad     q5   q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>    <dbl>    <dbl>
 1 mu         4.2    4.2   3.4   3.6  -0.85   9.4   1.0     558.     322.
 2 tau        4.2    3.1   3.6   2.9   0.31  11.    1.0     246.     202.
 3 theta[1]   6.7    6.0   6.3   4.9  -1.2   19.    1.0     400.     254.
 4 theta[2]   5.3    5.1   4.6   4.3  -2.0   13.    1.0     564.     372.
 5 theta[3]   3.0    4.0   6.8   4.9 -10.    12.    1.0     312.     205.
 6 theta[4]   4.9    5.0   4.9   4.5  -3.6   12.    1.0     695.     252.
 7 theta[5]   3.2    3.7   5.1   4.4  -5.9   11.    1.0     523.     306.
 8 theta[6]   4.0    4.1   5.2   4.8  -4.3   12.    1.0     548.     205.
 9 theta[7]   6.5    5.9   5.3   4.5  -1.2   15.    1.0     434.     308.
10 theta[8]   4.6    4.6   5.3   4.9  -3.8   12.    1.0     355.     146.
> print(s, num_args = list(digits = 3))
Warning: `...` must be empty in `format.tbl()`
Caused by error in `format_tbl()`:
! `...` must be empty.
✖ Problematic argument:
• num_args = num_args
# A tibble: 10 × 10
   variable  mean median    sd   mad      q5    q95  rhat ess_bulk ess_tail
   <chr>    <dbl>  <dbl> <dbl> <dbl>   <dbl>  <dbl> <dbl>    <dbl>    <dbl>
 1 mu       4.180  4.164 3.402 3.570  -0.854  9.387 1.022  558.017  322.096
 2 tau      4.164  3.072 3.576 2.892   0.309 11.038 1.015  246.373  202.023
 3 theta[1] 6.749  5.973 6.301 4.875  -1.231 18.874 1.014  400.180  253.919
 4 theta[2] 5.253  5.133 4.633 4.250  -1.967 12.536 1.015  564.254  371.803
 5 theta[3] 3.044  3.985 6.800 4.938 -10.313 11.877 1.014  312.057  205.244
 6 theta[4] 4.858  4.992 4.919 4.510  -3.569 12.200 1.023  694.771  251.894
 7 theta[5] 3.223  3.722 5.084 4.377  -5.930 10.822 1.005  522.883  305.761
 8 theta[6] 3.987  4.137 5.156 4.808  -4.323 11.535 1.020  548.162  204.756
 9 theta[7] 6.503  5.902 5.264 4.545  -1.190 15.375 1.004  434.005  308.006
10 theta[8] 4.565  4.637 5.252 4.889  -3.794 12.243 1.023  355.380  146.273
> 
> 
> 
> cleanEx()
> nameEx("print.rvar")
> ### * print.rvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.rvar
> ### Title: Print or format a random variable
> ### Aliases: print.rvar format.rvar str.rvar
> 
> ### ** Examples
> 
> 
> set.seed(5678)
> x = rbind(
+   cbind(rvar(rnorm(1000, 1)), rvar(rnorm(1000, 2))),
+   cbind(rvar(rnorm(1000, 3)), rvar(rnorm(1000, 4)))
+ )
> 
> print(x)
rvar<1000>[2,2] mean ± sd:
     [,1]      [,2]     
[1,] 1 ± 1.01  2 ± 0.99 
[2,] 3 ± 1.00  4 ± 1.03 
> print(x, summary = "median_mad")
rvar<1000>[2,2] median ± mad:
     [,1]        [,2]       
[1,] 1.0 ± 1.00  2.0 ± 0.98 
[2,] 3.0 ± 1.03  3.9 ± 1.02 
> 
> str(x)
 rvar<1000>[2,2]  1 ± 1.01  3 ± 1.00  2 ± 0.99  4 ± 1.03
> 
> format(x)
     [,1]       [,2]      
[1,] "1 ± 1.01" "2 ± 0.99"
[2,] "3 ± 1.00" "4 ± 1.03"
> 
> 
> 
> 
> cleanEx()
> nameEx("quantile2")
> ### * quantile2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quantile2
> ### Title: Compute Quantiles
> ### Aliases: quantile2 quantile2.default quantile2.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> quantile2(mu)
        q5        q95 
-0.8536202  9.3873124 
> 
> 
> 
> 
> cleanEx()
> nameEx("rdo")
> ### * rdo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rdo
> ### Title: Execute expressions of random variables
> ### Aliases: rdo
> 
> ### ** Examples
> 
> 
> mu <- rdo(rnorm(10, mean = 1:10, sd = 1))
> sigma <- rdo(rgamma(1, shape = 1, rate = 1))
> x <- rdo(rnorm(10, mu, sigma))
> x
rvar<4000>[10] mean ± sd:
 [1]  0.96 ± 1.7   2.02 ± 1.7   3.00 ± 1.8   4.00 ± 1.7   4.96 ± 1.7 
 [6]  6.00 ± 1.7   6.99 ± 1.9   8.00 ± 1.7   8.98 ± 1.6   9.99 ± 1.8 
> 
> 
> 
> 
> cleanEx()
> nameEx("rename_variables")
> ### * rename_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_variables
> ### Title: Rename variables in 'draws' objects
> ### Aliases: rename_variables rename_variables.draws
> 
> ### ** Examples
> 
> x <- as_draws_df(example_draws())
> variables(x)
 [1] "mu"       "tau"      "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"
> 
> x <- rename_variables(x, mean = mu, sigma = tau)
> variables(x)
 [1] "mean"     "sigma"    "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"
> 
> x <- rename_variables(x, b = `theta[1]`) # or b  = "theta[1]"
> variables(x)
 [1] "mean"     "sigma"    "b"        "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"
> 
> # rename all elements of 'theta' at once
> x <- rename_variables(x, alpha = theta)
> variables(x)
 [1] "mean"     "sigma"    "b"        "alpha[2]" "alpha[3]" "alpha[4]"
 [7] "alpha[5]" "alpha[6]" "alpha[7]" "alpha[8]"
> 
> 
> 
> 
> cleanEx()
> nameEx("repair_draws")
> ### * repair_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: repair_draws
> ### Title: Repair indices of 'draws' objects
> ### Aliases: repair_draws repair_draws.draws_matrix
> ###   repair_draws.draws_array repair_draws.draws_df
> ###   repair_draws.draws_list repair_draws.draws_rvars repair_draws.rvar
> 
> ### ** Examples
> 
> x <- as_draws_array(example_draws())
> (x <- x[10:5, 3:4, ])
# A draws_array: 6 iterations, 2 chains, and 10 variables
, , variable = mu

         chain
iteration   3     4
       10 8.9  3.81
       9  8.9  0.88
       8  3.5  4.90
       7  3.7 11.82
       6  1.1  2.38

, , variable = tau

         chain
iteration    3    4
       10 5.96  2.7
       9  5.96 15.8
       8  0.52  3.1
       7  1.68  4.3
       6  2.70  2.3

, , variable = theta[1]

         chain
iteration    3     4
       10 13.1  7.52
       9  13.1  9.07
       8   3.7  1.50
       7   5.2 18.87
       6   5.0  0.59

, , variable = theta[2]

         chain
iteration   3    4
       10 4.7  4.3
       9  4.7 11.6
       8  4.1  6.1
       7  4.1 13.0
       6  4.3  1.1

# ... with 1 more iterations, and 6 more variables
> repair_draws(x)
# A draws_array: 6 iterations, 2 chains, and 10 variables
, , variable = mu

         chain
iteration     1     2
        1 -0.03  5.48
        2  1.06  2.38
        3  3.67 11.82
        4  3.51  4.90
        5  8.85  0.88

, , variable = tau

         chain
iteration     1    2
        1 11.03  3.0
        2  2.70  2.3
        3  1.68  4.3
        4  0.52  3.1
        5  5.96 15.8

, , variable = theta[1]

         chain
iteration    1     2
        1  8.2 -0.91
        2  5.0  0.59
        3  5.2 18.87
        4  3.7  1.50
        5 13.1  9.07

, , variable = theta[2]

         chain
iteration   1    2
        1 3.2  3.2
        2 4.3  1.1
        3 4.1 13.0
        4 4.1  6.1
        5 4.7 11.6

# ... with 1 more iterations, and 6 more variables
> 
> 
> 
> 
> cleanEx()
> nameEx("resample_draws")
> ### * resample_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resample_draws
> ### Title: Resample 'draws' objects
> ### Aliases: resample_draws resample_draws.draws resample_draws.rvar
> 
> ### ** Examples
> 
> x <- as_draws_df(example_draws())
> 
> # random weights for justr for demonstration
> w <- runif(ndraws(x), 0, 10)
> 
> # use default stratified sampling
> x_rs <- resample_draws(x, weights = w)
Merging chains in order to subset via 'draw'.
> summarise_draws(x_rs, default_summary_measures())
# A tibble: 10 × 7
   variable  mean median    sd   mad     q5   q95
   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl>
 1 mu        4.17   4.25  3.32  3.49 -0.985  9.60
 2 tau       4.05   3.11  3.32  2.88  0.306 10.4 
 3 theta[1]  6.58   5.77  6.20  5.17 -1.77  17.8 
 4 theta[2]  5.14   5.13  4.52  4.20 -1.97  12.3 
 5 theta[3]  3.37   3.98  6.19  4.92 -7.87  11.5 
 6 theta[4]  4.95   5.24  4.98  4.51 -4.01  12.2 
 7 theta[5]  3.31   3.80  4.99  4.58 -6.11  10.6 
 8 theta[6]  3.98   4.66  5.45  4.84 -5.74  11.1 
 9 theta[7]  6.45   6.03  5.12  4.10 -1.28  14.7 
10 theta[8]  4.72   5.08  5.05  4.64 -3.44  12.1 
> 
> # use simple random sampling
> x_rs <- resample_draws(x, weights = w, method = "simple")
Merging chains in order to subset via 'draw'.
> summarise_draws(x_rs, default_summary_measures())
# A tibble: 10 × 7
   variable  mean median    sd   mad     q5   q95
   <chr>    <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl>
 1 mu        4.14   3.91  3.23  3.39 -0.634  9.74
 2 tau       4.02   3.07  3.44  2.70  0.263 10.9 
 3 theta[1]  6.63   5.83  6.06  5.09 -2.15  17.9 
 4 theta[2]  5.54   5.76  4.53  4.39 -2.27  12.3 
 5 theta[3]  3.27   4.14  6.19  4.64 -6.47  11.0 
 6 theta[4]  5.13   5.33  4.78  4.68 -2.66  13.1 
 7 theta[5]  3.22   3.66  5.00  4.58 -5.92  11.2 
 8 theta[6]  4.61   5.29  4.92  4.92 -3.40  11.5 
 9 theta[7]  6.44   6.14  4.78  4.42 -1.19  14.4 
10 theta[8]  5.23   5.51  5.11  4.53 -3.13  12.5 
> 
> 
> 
> 
> cleanEx()
> nameEx("reserved_variables")
> ### * reserved_variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reserved_variables
> ### Title: Reserved variables
> ### Aliases: reserved_variables reserved_variables.default
> ###   reserved_variables.draws_matrix reserved_variables.draws_array
> ###   reserved_variables.draws_df reserved_variables.draws_list
> ###   reserved_variables.draws_rvars
> 
> ### ** Examples
> 
> 
> x <- example_draws()
> reserved_variables(x)
character(0)
> 
> # if we add weights, the `.log_weight` reserved variable is used
> x <- weight_draws(x, rexp(ndraws(x)))
> reserved_variables(x)
[1] ".log_weight"
> 
> 
> 
> 
> cleanEx()
> nameEx("rfun")
> ### * rfun
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rfun
> ### Title: Create functions of random variables
> ### Aliases: rfun
> 
> ### ** Examples
> 
> 
> rvar_norm <- rfun(rnorm)
> rvar_gamma <- rfun(rgamma)
> 
> mu <- rvar_norm(10, mean = 1:10, sd = 1)
> sigma <- rvar_gamma(1, shape = 1, rate = 1)
> x <- rvar_norm(10, mu, sigma)
> x
rvar<4000>[10] mean ± sd:
 [1]  0.96 ± 1.7   2.02 ± 1.7   3.00 ± 1.8   4.00 ± 1.7   4.96 ± 1.7 
 [6]  6.00 ± 1.7   6.99 ± 1.9   8.00 ± 1.7   8.98 ± 1.6   9.99 ± 1.8 
> 
> 
> 
> 
> cleanEx()
> nameEx("rhat")
> ### * rhat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rhat
> ### Title: Rhat convergence diagnostic
> ### Aliases: rhat rhat.default rhat.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> rhat(mu)
[1] 1.021923
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> rhat(d$Sigma)
         [,1]     [,2]      [,3]
[1,] 1.001383 1.007945 1.0054123
[2,] 1.007912 1.005208 1.0193824
[3,] 1.005412 1.019382 0.9972943
> 
> 
> 
> 
> cleanEx()
> nameEx("rhat_basic")
> ### * rhat_basic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rhat_basic
> ### Title: Basic version of the Rhat convergence diagnostic
> ### Aliases: rhat_basic rhat_basic.default rhat_basic.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> rhat_basic(mu)
[1] 0.9979106
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> rhat_basic(d$Sigma)
          [,1]      [,2]      [,3]
[1,] 0.9967529 0.9967817 1.0033460
[2,] 0.9967817 0.9950557 0.9998587
[3,] 1.0033460 0.9998587 0.9947308
> 
> 
> 
> 
> cleanEx()
> nameEx("rhat_nested")
> ### * rhat_nested
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rhat_nested
> ### Title: Nested Rhat convergence diagnostic
> ### Aliases: rhat_nested rhat_nested.default rhat_nested.rvar
> 
> ### ** Examples
> 
> mu <- extract_variable_matrix(example_draws(), "mu")
> rhat_nested(mu, superchain_ids = c(1, 1, 2, 2))
[1] 1.002846
> 
> d <- as_draws_rvars(example_draws("multi_normal"))
> rhat_nested(d$Sigma, superchain_ids = c(1, 1, 2, 2))
         [,1]     [,2]     [,3]
[1,] 1.000511 1.001590 1.000154
[2,] 1.001590 1.001037 1.000071
[3,] 1.000154 1.000071 1.000469
> 
> 
> 
> 
> cleanEx()
> nameEx("rstar")
> ### * rstar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rstar
> ### Title: Calculate R* convergence diagnostic
> ### Aliases: rstar
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar-dist")
> ### * rvar-dist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar-dist
> ### Title: Density, CDF, and quantile functions of random variables
> ### Aliases: rvar-dist density.rvar density.rvar_factor cdf.rvar
> ###   cdf.rvar_factor cdf.rvar_ordered quantile.rvar quantile.rvar_factor
> ###   quantile.rvar_ordered
> 
> ### ** Examples
> 
> 
> set.seed(1234)
> x = rvar(rnorm(100))
> 
> density(x, seq(-2, 2, length.out = 10))
 [1] 0.05258808 0.15648102 0.33299057 0.42878621 0.38792329 0.27729220
 [7] 0.20773876 0.14704714 0.10377342 0.07004217
> cdf(x, seq(-2, 2, length.out = 10))
 [1] 0.02 0.04 0.15 0.34 0.54 0.68 0.81 0.89 0.92 0.96
> quantile(x, ppoints(10))
 [1] -1.371156446 -1.107797288 -0.877775358 -0.574614497 -0.476119783
 [6] -0.187048613 -0.007696628  0.448815321  0.902987295  1.646284259
> 
> x2 = c(rvar(rnorm(100, mean = -0.5)), rvar(rnorm(100, mean = 0.5)))
> density(x2, seq(-2, 2, length.out = 10))
            [,1]        [,2]
 [1,] 0.08835714 0.001630564
 [2,] 0.20312919 0.024267719
 [3,] 0.33416548 0.081561624
 [4,] 0.41908541 0.167585644
 [5,] 0.40299700 0.241650760
 [6,] 0.28262207 0.309646173
 [7,] 0.15825686 0.462297561
 [8,] 0.12739913 0.466521257
 [9,] 0.07744769 0.234440870
[10,] 0.02144551 0.109840500
> cdf(x2, seq(-2, 2, length.out = 10))
      [,1] [,2]
 [1,] 0.07 0.01
 [2,] 0.11 0.01
 [3,] 0.25 0.03
 [4,] 0.43 0.08
 [5,] 0.63 0.16
 [6,] 0.79 0.31
 [7,] 0.86 0.43
 [8,] 0.91 0.69
 [9,] 0.97 0.87
[10,] 0.99 0.93
> quantile(x2, ppoints(10))
            [,1]       [,2]
 [1,] -2.0034466 -0.6872996
 [2,] -1.3541896 -0.2346473
 [3,] -1.0276966  0.1308444
 [4,] -0.8207823  0.3500387
 [5,] -0.5789329  0.6861700
 [6,] -0.3647747  0.8192384
 [7,] -0.1451222  0.9367486
 [8,]  0.1230689  1.1749908
 [9,]  0.4371228  1.4569163
[10,]  1.1776442  2.1500961
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar-matmult")
> ### * rvar-matmult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar-matmult
> ### Title: Matrix multiplication of random variables
> ### Aliases: rvar-matmult %**% matrixOps.rvar
> 
> ### ** Examples
> 
> 
> # d has mu (mean vector of length 3) and Sigma (3x3 covariance matrix)
> d <- as_draws_rvars(example_draws("multi_normal"))
> d$Sigma
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
[2,]  0.53 ± 0.20   3.67 ± 0.45  -2.10 ± 0.48 
[3,] -0.40 ± 0.28  -2.10 ± 0.48   8.12 ± 0.95 
> 
> # trivial example: multiplication by a non-random matrix
> d$Sigma %**% diag(1:3)
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   1.05 ± 0.40  -1.21 ± 0.85 
[2,]  0.53 ± 0.20   7.33 ± 0.89  -6.30 ± 1.44 
[3,] -0.40 ± 0.28  -4.20 ± 0.96  24.35 ± 2.84 
> 
> # Decompose Sigma into R s.t. R'R = Sigma ...
> R <- chol(d$Sigma)
> # ... and recreate Sigma using matrix multiplication
> t(R) %**% R
rvar<100,4>[3,3] mean ± sd:
     [,1]          [,2]          [,3]         
[1,]  1.28 ± 0.17   0.53 ± 0.20  -0.40 ± 0.28 
[2,]  0.53 ± 0.20   3.67 ± 0.45  -2.10 ± 0.48 
[3,] -0.40 ± 0.28  -2.10 ± 0.48   8.12 ± 0.95 
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar-slice")
> ### * rvar-slice
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar-slice
> ### Title: Random variable slicing
> ### Aliases: rvar-slice [[.rvar [[<-.rvar [.rvar [<-.rvar
> 
> ### ** Examples
> 
> x <- rvar(array(1:24, dim = c(4,2,3)))
> dimnames(x) <- list(c("a","b"), c("d","e","f"))
> x
rvar<4>[2,3] mean ± sd:
  d           e           f          
a  2.5 ± 1.3  10.5 ± 1.3  18.5 ± 1.3 
b  6.5 ± 1.3  14.5 ± 1.3  22.5 ± 1.3 
> 
> ## Slicing single elements
> # x[[<numeric>]]
> x[[2]]
rvar<4>[1] mean ± sd:
[1] 6.5 ± 1.3 
> 
> # x[[<numeric rvar>]]
> # notice the draws of x[1:4]...
> draws_of(x[1:4])
  [,1] [,2] [,3] [,4]
1    1    5    9   13
2    2    6   10   14
3    3    7   11   15
4    4    8   12   16
> x[[rvar(c(1,3,4,4))]]
rvar<4>[1] mean ± sd:
[1] 10 ± 6.9 
> # ... x[[rvar(c(1,3,4,4))]] creates a mixures of those draws
> draws_of(x[[rvar(c(1,3,4,4))]])
  [,1]
1    1
2   10
3   15
4   16
> 
> # x[[i_1,i_2,...]]
> x[[2,"e"]]
rvar<4>[1] mean ± sd:
[1] 14 ± 1.3 
> 
> 
> ## Slicing multiple elements
> # x[<logical>]
> x[c(TRUE,TRUE,FALSE)]
rvar<4>[4] mean ± sd:
[1]  2.5 ± 1.3   6.5 ± 1.3  14.5 ± 1.3  18.5 ± 1.3 
> 
> # x[<logical rvar>]
> # select every other draw
> x[rvar(c(TRUE,FALSE,TRUE,FALSE))]
rvar<2>[2,3] mean ± sd:
  d         e         f        
a  2 ± 1.4  10 ± 1.4  18 ± 1.4 
b  6 ± 1.4  14 ± 1.4  22 ± 1.4 
> 
> # x[<numeric>]
> x[1:3]
rvar<4>[3] mean ± sd:
[1]  2.5 ± 1.3   6.5 ± 1.3  10.5 ± 1.3 
> 
> # x[<matrix>]
> x[rbind(
+   c(1,2),
+   c(1,3),
+   c(2,2)
+ )]
rvar<4>[3] mean ± sd:
[1] 10 ± 1.3  18 ± 1.3  14 ± 1.3 
> 
> # x[i_1,i_2,...,i_n]
> x[1,]
rvar<4>[1,3] mean ± sd:
  d           e           f          
a  2.5 ± 1.3  10.5 ± 1.3  18.5 ± 1.3 
> x[1,2:3]
rvar<4>[1,2] mean ± sd:
  e         f        
a 10 ± 1.3  18 ± 1.3 
> x[,2:3]
rvar<4>[2,2] mean ± sd:
  e         f        
a 10 ± 1.3  18 ± 1.3 
b 14 ± 1.3  22 ± 1.3 
> 
> 
> 
> cleanEx()
> nameEx("rvar-summaries-over-draws")
> ### * rvar-summaries-over-draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar-summaries-over-draws
> ### Title: Summaries of random variables within array elements, over draws
> ### Aliases: rvar-summaries-over-draws E mean.rvar Pr Pr.default Pr.logical
> ###   Pr.rvar median.rvar min.rvar max.rvar sum.rvar prod.rvar all.rvar
> ###   any.rvar Summary.rvar variance.rvar var var.default var.rvar sd
> ###   sd.default sd.rvar mad mad.default mad.rvar mad.rvar_ordered
> ###   range.rvar is.finite.rvar is.infinite.rvar is.nan.rvar is.na.rvar
> 
> ### ** Examples
> 
> 
> set.seed(5678)
> x = rvar_rng(rnorm, 4, mean = 1:4, sd = 2)
> 
> # These should all be ~= c(1, 2, 3, 4)
> E(x)
[1] 1.004952 1.955997 3.011070 3.963980
> mean(x)
[1] 1.004952 1.955997 3.011070 3.963980
> median(x)
[1] 0.9557178 1.9170014 3.0024683 3.9274693
> 
> # This ...
> Pr(x < 1.5)
[1] 0.59800 0.41100 0.22300 0.10775
> # ... should be about the same as this:
> pnorm(1.5, mean = 1:4, sd = 2)
[1] 0.5987063 0.4012937 0.2266274 0.1056498
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar-summaries-within-draws")
> ### * rvar-summaries-within-draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar-summaries-within-draws
> ### Title: Summaries of random variables over array elements, within draws
> ### Aliases: rvar-summaries-within-draws rvar_mean rvar_median rvar_sum
> ###   rvar_prod rvar_min rvar_max rvar_sd rvar_var rvar_mad rvar_range
> ###   rvar_quantile rvar_all rvar_any
> 
> ### ** Examples
> 
> 
> set.seed(5678)
> x = rvar_rng(rnorm, 4, mean = 1:4, sd = 2)
> 
> # These will give similar results to mean(1:4),
> # median(1:4), sum(1:4), prod(1:4), etc
> rvar_mean(x)
rvar<4000>[1] mean ± sd:
[1] 2.5 ± 1 
> rvar_median(x)
rvar<4000>[1] mean ± sd:
[1] 2.5 ± 1.1 
> rvar_sum(x)
rvar<4000>[1] mean ± sd:
[1] 9.9 ± 4 
> rvar_prod(x)
rvar<4000>[1] mean ± sd:
[1] 23 ± 103 
> rvar_range(x)
rvar<4000>[2] mean ± sd:
[1] 0.029 ± 1.5  4.935 ± 1.5 
> rvar_quantile(x, probs = c(0.25, 0.5, 0.75), names = TRUE)
rvar<4000>[3] mean ± sd:
       25%        50%        75% 
1.3 ± 1.2  2.5 ± 1.1  3.6 ± 1.2  
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar")
> ### * rvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar
> ### Title: Random variables of arbitrary dimension
> ### Aliases: rvar
> 
> ### ** Examples
> 
> 
> set.seed(1234)
> 
> # To create a "scalar" `rvar`, pass a one-dimensional array or a vector
> # whose length (here `4000`) is the desired number of draws:
> x <- rvar(rnorm(4000, mean = 1, sd = 1))
> x
rvar<4000>[1] mean ± sd:
[1] 1 ± 1 
> 
> # Create random vectors by adding an additional dimension:
> n <- 4   # length of output vector
> x <- rvar(array(rnorm(4000 * n, mean = rep(1:n, each = 4000), sd = 1), dim = c(4000, n)))
> x
rvar<4000>[4] mean ± sd:
[1] 1 ± 0.99  2 ± 0.99  3 ± 1.00  4 ± 1.02 
> 
> # Create a random matrix:
> rows <- 4
> cols <- 3
> x <- rvar(array(rnorm(4000 * rows * cols, mean = 1, sd = 1), dim = c(4000, rows, cols)))
> x
rvar<4000>[4,3] mean ± sd:
     [,1]         [,2]         [,3]        
[1,] 1.00 ± 0.98  1.00 ± 1.00  0.97 ± 1.00 
[2,] 1.00 ± 1.01  1.01 ± 1.02  0.99 ± 0.99 
[3,] 1.02 ± 1.01  0.99 ± 1.00  1.00 ± 0.99 
[4,] 1.01 ± 1.01  1.02 ± 1.00  1.00 ± 1.01 
> 
> # If the input sample comes from multiple chains, we can indicate that using the
> # nchains argument (here, 1000 draws each from 4 chains):
> x <- rvar(rnorm(4000, mean = 1, sd = 1), nchains = 4)
> x
rvar<1000,4>[1] mean ± sd:
[1] 0.97 ± 1 
> 
> # Or if the input sample has chain information as its second dimension, we can
> # use with_chains to create the rvar
> x <- rvar(array(rnorm(4000, mean = 1, sd = 1), dim = c(1000, 4)), with_chains = TRUE)
> x
rvar<1000,4>[1] mean ± sd:
[1] 1 ± 1 
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar_apply")
> ### * rvar_apply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar_apply
> ### Title: Random variable resulting from a function applied over margins
> ###   of an array or random variable
> ### Aliases: rvar_apply
> 
> ### ** Examples
> 
> 
> set.seed(3456)
> x <- rvar_rng(rnorm, 24, mean = 1:24)
> dim(x) <- c(2,3,4)
> 
> # we can find the distributions of marginal means of the above array
> # using rvar_mean along with rvar_apply
> rvar_apply(x, 1, rvar_mean)
rvar<4000>[2] mean ± sd:
[1] 12 ± 0.29  13 ± 0.29 
> rvar_apply(x, 2:3, rvar_mean)
rvar<4000>[3,4] mean ± sd:
     [,1]         [,2]         [,3]         [,4]        
[1,]  1.5 ± 0.70   7.5 ± 0.69  13.5 ± 0.71  19.5 ± 0.70 
[2,]  3.5 ± 0.70   9.5 ± 0.71  15.5 ± 0.72  21.5 ± 0.70 
[3,]  5.5 ± 0.71  11.5 ± 0.72  17.5 ± 0.71  23.5 ± 0.70 
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar_factor")
> ### * rvar_factor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar_factor
> ### Title: Factor random variables of arbitrary dimension
> ### Aliases: rvar_factor rvar_ordered
> 
> ### ** Examples
> 
> set.seed(1234)
> 
> # To create a "scalar" `rvar_factor`, pass a one-dimensional array or a vector
> # whose length (here `4000`) is the desired number of draws:
> x <- rvar(sample(c("a","a","a","b","c"), 4000, replace = TRUE))
> x
rvar_factor<4000>[1] mode <entropy>:
[1] a <0.87> 
3 levels: a b c
> 
> # Create random vectors by adding an additional dimension:
> x_array <- array(c(
+     sample(c("a","a","a","b","c"), 4000, replace = TRUE),
+     sample(c("a","a","b","c","c"), 4000, replace = TRUE),
+     sample(c("b","b","b","b","c"), 4000, replace = TRUE),
+     sample(c("d","d","b","b","c"), 4000, replace = TRUE)
+   ), dim = c(4000, 4))
> rvar_factor(x_array)
rvar_factor<4000>[4] mode <entropy>:
[1] a <0.68>  c <0.76>  b <0.36>  b <0.76> 
4 levels: a b c d
> 
> # You can also create ordered factors
> rvar_ordered(x_array)
rvar_ordered<4000>[4] mode <dissent>:
[1] a <0.41>  c <0.47>  b <0.17>  b <0.47> 
4 levels: a < b < c < d
> 
> # arguments of factor() and ordered() are passed down by the constructor
> # e.g. we can reorder levels of an ordered factor:
> rvar_ordered(x_array, levels = c("d","c","b","a"))
rvar_ordered<4000>[4] mode <dissent>:
[1] a <0.41>  c <0.47>  b <0.17>  b <0.47> 
4 levels: d < c < b < a
> 
> # Unlike base factors, rvar factors can be matrices or arrays:
> rvar_factor(x_array, dim = c(2, 2))
rvar_factor<4000>[2,2] mode <entropy>:
     [,1]      [,2]     
[1,] a <0.68>  b <0.36> 
[2,] c <0.76>  b <0.76> 
4 levels: a b c d
> 
> # If the input to rvar_factor() is an array with a `"levels"` attribute, it
> # will use those as the levels of the factor
> y_array <- t(array(rbinom(3000, 1, c(0.1, 0.5, 0.9)) + 1, dim = c(3, 1000)))
> rvar(y_array)
rvar<1000>[3] mean ± sd:
[1] 1.1 ± 0.30  1.5 ± 0.50  1.9 ± 0.29 
> # with levels
> attr(y_array, "levels") = c("a", "b")
> rvar_factor(y_array)
rvar_factor<1000>[3] mode <entropy>:
[1] a <0.46>  a <1.00>  b <0.45> 
2 levels: a b
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar_ifelse")
> ### * rvar_ifelse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar_ifelse
> ### Title: Random variable ifelse
> ### Aliases: rvar_ifelse
> 
> ### ** Examples
> 
> x <- rvar(1:4)
> y <- rvar(5:8)
> 
> i <- rvar(c(TRUE,FALSE,TRUE,FALSE))
> z <- rvar_ifelse(i, x, y)
> z
rvar<4>[1] mean ± sd:
[1] 4.5 ± 3.1 
> draws_of(z)
  [,1]
1    1
2    6
3    3
4    8
> 
> 
> 
> cleanEx()
> nameEx("rvar_is_finite")
> ### * rvar_is_finite
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar_is_finite
> ### Title: Special value predicates for random variables
> ### Aliases: rvar_is_finite rvar_is_infinite rvar_is_nan rvar_is_na
> 
> ### ** Examples
> 
> 
> x <- rvar(c(1, Inf, -Inf, NaN, NA))
> x
rvar<5>[1] mean ± sd:
[1] NA ± NA 
> 
> rvar_is_finite(x)
rvar<5>[1] mean ± sd:
[1] 0.2 ± 0.45 
> rvar_is_infinite(x)
rvar<5>[1] mean ± sd:
[1] 0.4 ± 0.55 
> rvar_is_nan(x)
rvar<5>[1] mean ± sd:
[1] 0.2 ± 0.45 
> rvar_is_na(x)
rvar<5>[1] mean ± sd:
[1] 0.4 ± 0.55 
> 
> 
> 
> 
> cleanEx()
> nameEx("rvar_rng")
> ### * rvar_rng
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rvar_rng
> ### Title: Create random variables from existing random number generators
> ### Aliases: rvar_rng
> 
> ### ** Examples
> 
> 
> mu <- rvar_rng(rnorm, 10, mean = 1:10, sd = 1)
> sigma <- rvar_rng(rgamma, 1, shape = 1, rate = 1)
> x <- rvar_rng(rnorm, 10, mu, sigma)
> x
rvar<4000>[10] mean ± sd:
 [1]  1 ± 1.8   2 ± 1.7   3 ± 1.7   4 ± 1.7   5 ± 1.7   6 ± 1.7   7 ± 1.7 
 [8]  8 ± 1.7   9 ± 1.7  10 ± 1.8 
> 
> 
> 
> 
> cleanEx()
> nameEx("split_chains")
> ### * split_chains
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_chains
> ### Title: Split Chains
> ### Aliases: split_chains
> 
> ### ** Examples
> 
> x <- example_draws()
> niterations(x)
[1] 100
> nchains(x)
[1] 4
> 
> x <- split_chains(x)
> niterations(x)
[1] 50
> nchains(x)
[1] 8
> 
> 
> 
> 
> cleanEx()
> nameEx("subset_draws")
> ### * subset_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subset_draws
> ### Title: Subset 'draws' objects
> ### Aliases: subset_draws subset_draws.draws_matrix
> ###   subset_draws.draws_array subset_draws.draws_df
> ###   subset_draws.draws_list subset_draws.draws_rvars subset_draws.rvar
> ###   subset.draws
> 
> ### ** Examples
> 
> x <- example_draws()
> subset_draws(x, variable = c("mu", "tau"))
# A draws_array: 100 iterations, 4 chains, and 2 variables
, , variable = mu

         chain
iteration   1    2     3   4
        1 2.0  3.0  1.79 6.5
        2 1.5  8.2  5.99 9.1
        3 5.8 -1.2  2.56 0.2
        4 6.8 10.9  2.79 3.7
        5 1.8  9.8 -0.03 5.5

, , variable = tau

         chain
iteration   1    2    3   4
        1 2.8 2.80  8.7 3.8
        2 7.0 2.76  2.9 6.8
        3 9.7 0.57  8.4 5.3
        4 4.8 2.45  4.4 1.6
        5 2.8 2.80 11.0 3.0

# ... with 95 more iterations
> subset_draws(x, chain = 2)
# A draws_array: 100 iterations, 1 chains, and 10 variables
, , variable = mu

         chain
iteration    1
        1  3.0
        2  8.2
        3 -1.2
        4 10.9
        5  9.8

, , variable = tau

         chain
iteration    1
        1 2.80
        2 2.76
        3 0.57
        4 2.45
        5 2.80

, , variable = theta[1]

         chain
iteration     1
        1  6.26
        2  9.32
        3 -0.97
        4 12.45
        5  9.75

, , variable = theta[2]

         chain
iteration    1
        1  1.0
        2  9.4
        3 -1.2
        4 12.5
        5 11.9

# ... with 95 more iterations, and 6 more variables
> subset_draws(x, iteration = 5:10, chain = 3:4)
# A draws_array: 6 iterations, 2 chains, and 10 variables
, , variable = mu

         chain
iteration     1     2
        1 -0.03  5.48
        2  1.06  2.38
        3  3.67 11.82
        4  3.51  4.90
        5  8.85  0.88

, , variable = tau

         chain
iteration     1    2
        1 11.03  3.0
        2  2.70  2.3
        3  1.68  4.3
        4  0.52  3.1
        5  5.96 15.8

, , variable = theta[1]

         chain
iteration    1     2
        1  8.2 -0.91
        2  5.0  0.59
        3  5.2 18.87
        4  3.7  1.50
        5 13.1  9.07

, , variable = theta[2]

         chain
iteration   1    2
        1 3.2  3.2
        2 4.3  1.1
        3 4.1 13.0
        4 4.1  6.1
        5 4.7 11.6

# ... with 1 more iterations, and 6 more variables
> 
> # extract the first chain twice
> subset_draws(x, chain = c(1, 1), unique = FALSE)
# A draws_array: 100 iterations, 2 chains, and 10 variables
, , variable = mu

         chain
iteration   1   2
        1 2.0 2.0
        2 1.5 1.5
        3 5.8 5.8
        4 6.8 6.8
        5 1.8 1.8

, , variable = tau

         chain
iteration   1   2
        1 2.8 2.8
        2 7.0 7.0
        3 9.7 9.7
        4 4.8 4.8
        5 2.8 2.8

, , variable = theta[1]

         chain
iteration     1     2
        1  3.96  3.96
        2  0.12  0.12
        3 21.25 21.25
        4 14.70 14.70
        5  5.96  5.96

, , variable = theta[2]

         chain
iteration      1      2
        1  0.271  0.271
        2 -0.069 -0.069
        3 14.931 14.931
        4  8.586  8.586
        5  1.156  1.156

# ... with 95 more iterations, and 6 more variables
> 
> # extract all elements of 'theta'
> subset_draws(x, variable = "theta")
# A draws_array: 100 iterations, 4 chains, and 8 variables
, , variable = theta[1]

         chain
iteration     1     2    3     4
        1  3.96  6.26 13.3  5.78
        2  0.12  9.32  6.3  2.09
        3 21.25 -0.97 10.6 15.72
        4 14.70 12.45  5.4  2.69
        5  5.96  9.75  8.2 -0.91

, , variable = theta[2]

         chain
iteration      1    2   3   4
        1  0.271  1.0 2.1 5.0
        2 -0.069  9.4 7.3 8.2
        3 14.931 -1.2 5.7 6.0
        4  8.586 12.5 2.8 2.7
        5  1.156 11.9 3.2 3.2

, , variable = theta[3]

         chain
iteration     1     2     3   4
        1 -0.74  0.22   1.4 5.7
        2  0.95  9.68   4.1 3.5
        3  1.83 -1.37  -8.3 3.1
        4  2.67 11.15 -10.8 3.2
        5  3.11 12.72 -27.8 2.6

, , variable = theta[4]

         chain
iteration   1     2    3    4
        1 2.1 -0.73  7.8  4.8
        2 7.3  8.11  4.7  7.8
        3 1.4 -0.79  6.8  6.1
        4 4.4 10.48  6.8  7.9
        5 2.0  9.70 12.3 11.3

# ... with 95 more iterations, and 4 more variables
> 
> # trying to extract only a scalar 'theta' will fail
> # subset_draws(x, variable = "theta", scalar = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("thin_draws")
> ### * thin_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thin_draws
> ### Title: Thin 'draws' objects
> ### Aliases: thin_draws thin thin_draws.draws thin_draws.rvar
> 
> ### ** Examples
> 
> x <- example_draws()
> niterations(x)
[1] 100
> 
> x <- thin_draws(x, thin = 5)
> niterations(x)
[1] 20
> 
> 
> 
> 
> cleanEx()
> nameEx("variables-set")
> ### * variables-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: variables<-
> ### Title: Set variable names in 'draws' objects
> ### Aliases: variables<- variables<-.draws_matrix variables<-.draws_array
> ###   variables<-.draws_df variables<-.draws_list variables<-.draws_rvars
> ###   set_variables
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> variables(x)
 [1] "mu"       "tau"      "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"
> nvariables(x)
[1] 10
> variables(x) <- letters[1:nvariables(x)]
> 
> # or equivalently...
> x <- set_variables(x, letters[1:nvariables(x)])
> 
> 
> 
> 
> cleanEx()
> nameEx("variables")
> ### * variables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: variables
> ### Title: Get variable names from 'draws' objects
> ### Aliases: variables variables.draws_matrix variables.draws_array
> ###   variables.draws_df variables.draws_list variables.draws_rvars
> ###   nvariables
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> variables(x)
 [1] "mu"       "tau"      "theta[1]" "theta[2]" "theta[3]" "theta[4]"
 [7] "theta[5]" "theta[6]" "theta[7]" "theta[8]"
> nvariables(x)
[1] 10
> variables(x) <- letters[1:nvariables(x)]
> 
> 
> 
> cleanEx()
> nameEx("weight_draws")
> ### * weight_draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weight_draws
> ### Title: Weight 'draws' objects
> ### Aliases: weight_draws weight_draws.draws_matrix
> ###   weight_draws.draws_array weight_draws.draws_df
> ###   weight_draws.draws_list weight_draws.draws_rvars
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> # sample some random weights for illustration
> wts <- rexp(ndraws(x))
> head(wts)
[1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686 2.8949685
> 
> # add weights
> x <- weight_draws(x, weights = wts)
> 
> # extract weights
> head(weights(x)) # defaults to normalized weights
[1] 0.0019400681 0.0030356497 0.0003743217 0.0003591351 0.0011202638
[6] 0.0074371971
> head(weights(x, normalize=FALSE)) # recover original weights
[1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686 2.8949685
> head(weights(x, log=TRUE)) # get normalized log-weights
[1] -6.245032 -5.797330 -7.890395 -7.931812 -6.794191 -4.901261
> 
> # add weights which are already on the log scale
> log_wts <- log(wts)
> head(log_wts)
[1] -0.2807967  0.1669057 -1.9261594 -1.9675763 -0.8299556  1.0629742
> 
> x <- weight_draws(x, weights = log_wts, log = TRUE)
> # extract weights
> head(weights(x))
[1] 0.0019400681 0.0030356497 0.0003743217 0.0003591351 0.0011202638
[6] 0.0074371971
> head(weights(x, log=TRUE, normalize = FALSE)) # recover original log_wts
[1] -0.2807967  0.1669057 -1.9261594 -1.9675763 -0.8299556  1.0629742
> 
> # add weights on log scale and Pareto smooth them
> x <- weight_draws(x, weights = log_wts, log = TRUE, pareto_smooth = TRUE)
Pareto k-hat = 0.1.
> 
> 
> 
> 
> cleanEx()
> nameEx("weights.draws")
> ### * weights.draws
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weights.draws
> ### Title: Extract Weights from Draws Objects
> ### Aliases: weights.draws
> 
> ### ** Examples
> 
> x <- example_draws()
> 
> # sample some random weights for illustration
> wts <- rexp(ndraws(x))
> head(wts)
[1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686 2.8949685
> 
> # add weights
> x <- weight_draws(x, weights = wts)
> 
> # extract weights
> head(weights(x)) # defaults to normalized weights
[1] 0.0019400681 0.0030356497 0.0003743217 0.0003591351 0.0011202638
[6] 0.0074371971
> head(weights(x, normalize=FALSE)) # recover original weights
[1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686 2.8949685
> head(weights(x, log=TRUE)) # get normalized log-weights
[1] -6.245032 -5.797330 -7.890395 -7.931812 -6.794191 -4.901261
> 
> # add weights which are already on the log scale
> log_wts <- log(wts)
> head(log_wts)
[1] -0.2807967  0.1669057 -1.9261594 -1.9675763 -0.8299556  1.0629742
> 
> x <- weight_draws(x, weights = log_wts, log = TRUE)
> # extract weights
> head(weights(x))
[1] 0.0019400681 0.0030356497 0.0003743217 0.0003591351 0.0011202638
[6] 0.0074371971
> head(weights(x, log=TRUE, normalize = FALSE)) # recover original log_wts
[1] -0.2807967  0.1669057 -1.9261594 -1.9675763 -0.8299556  1.0629742
> 
> # add weights on log scale and Pareto smooth them
> x <- weight_draws(x, weights = log_wts, log = TRUE, pareto_smooth = TRUE)
Pareto k-hat = 0.1.
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.425 0.084 2.51 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
