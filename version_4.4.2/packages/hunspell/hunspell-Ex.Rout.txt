
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "hunspell"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('hunspell')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("hunspell")
> ### * hunspell
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hunspell
> ### Title: Hunspell Spell Checking and Morphological Analysis
> ### Aliases: hunspell hunspell_find en_stats dicpath hunspell_parse
> ###   hunspell_check hunspell_suggest hunspell_analyze hunspell_stem
> ###   hunspell_info dictionary list_dictionaries
> 
> ### ** Examples
> 
> # Check individual words
> words <- c("beer", "wiskey", "wine")
> correct <- hunspell_check(words)
> print(correct)
[1]  TRUE FALSE  TRUE
> 
> # Find suggestions for incorrect words
> hunspell_suggest(words[!correct])
[[1]]
[1] "whiskey"  "whiskery"

> 
> # Extract incorrect from a piece of text
> bad <- hunspell("spell checkers are not neccessairy for langauge ninja's")
> print(bad[[1]])
[1] "neccessairy" "langauge"   
> hunspell_suggest(bad[[1]])
[[1]]
[1] "necessary"   "necessarily"

[[2]]
[1] "language" "melange" 

> 
> # Stemming
> words <- c("love", "loving", "lovingly", "loved", "lover", "lovely", "love")
> hunspell_stem(words)
[[1]]
[1] "love"

[[2]]
[1] "loving" "love"  

[[3]]
[1] "loving"

[[4]]
[1] "loved" "love" 

[[5]]
[1] "lover" "love" 

[[6]]
[1] "lovely" "love"  

[[7]]
[1] "love"

> hunspell_analyze(words)
[[1]]
[1] " st:love"

[[2]]
[1] " st:loving"    " st:love fl:G"

[[3]]
[1] " st:loving fl:Y"

[[4]]
[1] " st:loved"     " st:love fl:D"

[[5]]
[1] " st:lover"     " st:love fl:R"

[[6]]
[1] " st:lovely"    " st:love fl:Y"

[[7]]
[1] " st:love"

> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.182 0.016 0.197 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
