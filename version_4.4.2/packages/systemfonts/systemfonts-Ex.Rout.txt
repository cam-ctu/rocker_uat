
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "systemfonts"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('systemfonts')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_fonts")
> ### * add_fonts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_fonts
> ### Title: Add local font files to the search path
> ### Aliases: add_fonts scan_local_fonts clear_local_fonts
> 
> ### ** Examples
> 
> # example code
> empty_font <- system.file("unfont.ttf", package = "systemfonts")
> 
> add_fonts(empty_font)
> 
> clear_local_fonts()
Run `scan_local_fonts()` in order to re-add automatically added fonts
> 
> 
> 
> 
> cleanEx()
> nameEx("as_font_weight")
> ### * as_font_weight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_font_weight
> ### Title: Convert weight and width to numerics
> ### Aliases: as_font_weight as_font_width
> ### Keywords: internal
> 
> ### ** Examples
> 
> as_font_weight(
+   c("undefined", "thin", "ultralight", "light", "normal", "medium", "semibold",
+     "bold", "ultrabold", "heavy")
+ )
 [1]   0 100 200 300 400 500 600 700 800 900
> 
> as_font_width(
+   c("undefined", "ultracondensed", "extracondensed", "condensed", "semicondensed",
+   "normal", "semiexpanded", "expanded", "extraexpanded", "ultraexpanded")
+ )
 [1] 0 1 2 3 4 5 6 7 8 9
> 
> 
> 
> 
> cleanEx()
> nameEx("font_fallback")
> ### * font_fallback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_fallback
> ### Title: Get the fallback font for a given string
> ### Aliases: font_fallback
> 
> ### ** Examples
> 
> font_fallback("\U0001f604") # Smile emoji
                                                         path index
1 /usr/share/fonts/opentype/urw-base35/NimbusSans-Regular.otf     0
> 
> 
> 
> 
> cleanEx()
> nameEx("font_feature")
> ### * font_feature
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_feature
> ### Title: Define OpenType font feature settings
> ### Aliases: font_feature
> 
> ### ** Examples
> 
> font_feature(letters = "stylistic", numbers = c("lining", "tabular"))
A list of OpenType font feature settings
- salt: 1
- lnum: 1
- tnum: 1> 
> # Use the tag directly to access additional stylistic variants
> font_feature(numbers = c("lining", "tabular"), salt = 2)
A list of OpenType font feature settings
- salt: 2
- lnum: 1
- tnum: 1> 
> 
> 
> 
> cleanEx()
> nameEx("font_info")
> ### * font_info
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: font_info
> ### Title: Query font-specific information
> ### Aliases: font_info
> 
> ### ** Examples
> 
> font_info('serif')
                                                          path index
1 /usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf     0
        family   style italic  bold monospace weight  width kerning color
1 Nimbus Roman Regular  FALSE FALSE     FALSE normal normal   FALSE FALSE
  scalable vertical n_glyphs n_sizes n_charmaps
1     TRUE    FALSE      855       0          4
                                        bbox max_ascend max_descend
1 -2.015625, 12.000000, -3.375000, 12.640625   8.203125   -3.796875
  max_advance_width max_advance_height lineheight underline_pos underline_size
1          12.34375           14.40625   14.40625      -1.28125        0.59375
> 
> # Avoid lookup if font file is already known
> sans <- match_fonts('sans')
> font_info(path = sans$path, index = sans$index)
                                                         path index      family
1 /usr/share/fonts/opentype/urw-base35/NimbusSans-Regular.otf     0 Nimbus Sans
    style italic  bold monospace weight  width kerning color scalable vertical
1 Regular  FALSE FALSE     FALSE normal normal   FALSE FALSE     TRUE    FALSE
  n_glyphs n_sizes n_charmaps                                       bbox
1      855       0          4 -2.515625, 12.390625, -3.593750, 12.906250
  max_ascend max_descend max_advance_width max_advance_height lineheight
1       8.75       -3.25            13.125           14.40625   14.40625
  underline_pos underline_size
1       -1.8125        0.59375
> 
> 
> 
> 
> cleanEx()
> nameEx("glyph_outline")
> ### * glyph_outline
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glyph_outline
> ### Title: Get the outline of glyphs
> ### Aliases: glyph_outline
> 
> ### ** Examples
> 
> # Get the shape of s in the default font
> font <- font_info()
> glyph <- glyph_info("s", path = font$path, index = font$index)
> 
> s <- glyph_outline(glyph$index, font$path, font$index, size = 150)
> 
> plot(s$x, s$y, type = 'l')
> 
> 
> 
> 
> cleanEx()
> nameEx("glyph_raster")
> ### * glyph_raster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glyph_raster
> ### Title: Render glyphs to raster image
> ### Aliases: glyph_raster
> 
> ### ** Examples
> 
> font <- font_info()
> glyph <- glyph_info("R", path = font$path, index = font$index)
> 
> R <- glyph_raster(glyph$index, font$path, font$index, size = 150)
> 
> plot.new()
> plot.window(c(0,150), c(0, 150), asp = 1)
> rasterImage(R[[1]], 0, 0, attr(R[[1]], "size")[2], attr(R[[1]], "size")[1])
> 
> 
> 
> 
> cleanEx()
> nameEx("glyph_raster_grob")
> ### * glyph_raster_grob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glyph_raster_grob
> ### Title: Convert an extracted glyph raster to a grob
> ### Aliases: glyph_raster_grob
> 
> ### ** Examples
> 
> font <- font_info()
> glyph <- glyph_info("R", path = font$path, index = font$index)
> 
> R <- glyph_raster(glyph$index, font$path, font$index, size = 150)
> 
> grob <- glyph_raster_grob(R[[1]], 50, 50)
> 
> grid::grid.newpage()
> # Mark the baseline location
> grid::grid.points(50, 50, default.units = "bigpts")
> # Draw the glyph
> grid::grid.draw(grob)
> 
> 
> 
> 
> cleanEx()
> nameEx("match_fonts")
> ### * match_fonts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: match_fonts
> ### Title: Find a system font by name and style
> ### Aliases: match_fonts match_font
> 
> ### ** Examples
> 
> # Get the system default sans-serif font in italic
> match_fonts('sans', italic = TRUE)
                                                        path index features
1 /usr/share/fonts/opentype/urw-base35/NimbusSans-Italic.otf     0         
> 
> # Try to match it to a thin variant
> match_fonts(c('sans', 'serif'), weight = "thin")
                                                          path index features
1  /usr/share/fonts/opentype/urw-base35/NimbusSans-Regular.otf     0         
2 /usr/share/fonts/opentype/urw-base35/NimbusRoman-Regular.otf     0         
> 
> 
> 
> 
> cleanEx()
> nameEx("register_font")
> ### * register_font
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: register_font
> ### Title: Register font collections as families
> ### Aliases: register_font registry_fonts clear_registry
> 
> ### ** Examples
> 
> # Create a random font collection
> fonts <- system_fonts()
> plain <- sample(which(!fonts$italic & fonts$weight <= 'normal'), 1)
> bold <- sample(which(!fonts$italic & fonts$weight > 'normal'), 1)
> italic <- sample(which(fonts$italic & fonts$weight <= 'normal'), 1)
> bolditalic <- sample(which(fonts$italic & fonts$weight > 'normal'), 1)
> register_font(
+   'random',
+   plain = list(fonts$path[plain], fonts$index[plain]),
+   bold = list(fonts$path[bold], fonts$index[bold]),
+   italic = list(fonts$path[italic], fonts$index[italic]),
+   bolditalic = list(fonts$path[bolditalic], fonts$index[bolditalic])
+ )
> 
> # Look at your creation
> registry_fonts()
                                                                      path
1            /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf
2                     /usr/share/fonts/X11/Type1/URWGothic-DemiOblique.pfb
3 /usr/share/texmf/fonts/opentype/public/tex-gyre/texgyreschola-italic.otf
4               /usr/share/fonts/opentype/urw-base35/Z003-MediumItalic.otf
  index family       style weight italic features
1     0 random     Regular normal  FALSE         
2     0 random        Bold   bold  FALSE         
3     0 random      Italic normal   TRUE         
4     0 random Bold Italic   bold   TRUE         
> 
> # Reset
> clear_registry()
> 
> 
> 
> 
> cleanEx()
> nameEx("register_variant")
> ### * register_variant
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: register_variant
> ### Title: Register a font as a variant as an existing one
> ### Aliases: register_variant
> 
> ### ** Examples
> 
> # Get the default "sans" family
> sans <- match_fonts("sans")$path
> sans <- system_fonts()$family[system_fonts()$path == sans][1]
> 
> # Register a variant of it:
> register_variant(
+   "sans_ligature",
+   sans,
+   features = font_feature(ligatures = "discretionary")
+ )
> 
> registry_fonts()
                                                        path index
1          /usr/share/fonts/X11/Type1/NimbusSans-Regular.pfb     0
2   /usr/share/fonts/opentype/urw-base35/NimbusSans-Bold.otf     0
3 /usr/share/fonts/opentype/urw-base35/NimbusSans-Italic.otf     0
4       /usr/share/fonts/X11/Type1/NimbusSans-BoldItalic.pfb     0
         family       style weight italic features
1 sans_ligature     Regular normal  FALSE        1
2 sans_ligature        Bold   bold  FALSE        1
3 sans_ligature      Italic normal   TRUE        1
4 sans_ligature Bold Italic   bold   TRUE        1
> 
> # clean up
> clear_registry()
> 
> 
> 
> 
> cleanEx()
> nameEx("require_font")
> ### * require_font
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: require_font
> ### Title: Ensure font availability in a script
> ### Aliases: require_font
> 
> ### ** Examples
> 
> # Should always work
> require_font("sans")
> 
> 
> 
> 
> cleanEx()
> nameEx("reset_font_cache")
> ### * reset_font_cache
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reset_font_cache
> ### Title: Reset the system font cache
> ### Aliases: reset_font_cache
> 
> ### ** Examples
> 
> all_fonts <- system_fonts()
> 
> ##-- Install a new font on the system --##
> 
> all_fonts_new <- system_fonts()
> 
> ## all_fonts_new will be equal to all_fonts
> 
> reset_font_cache()
> 
> all_fonts_new <- system_fonts()
> 
> ## all_fonts_new will now contain the new font
> 
> 
> 
> 
> cleanEx()
> nameEx("search_web_fonts")
> ### * search_web_fonts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: search_web_fonts
> ### Title: Search font repositories for a font based on family name
> ### Aliases: search_web_fonts
> 
> ### ** Examples
> 
> # Requires an internet connection
> 
> # search_web_fonts("Spectral")
> 
> 
> 
> 
> cleanEx()
> nameEx("shape_string")
> ### * shape_string
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: shape_string
> ### Title: Calculate glyph positions for strings
> ### Aliases: shape_string
> 
> ### ** Examples
> 
> string <- "This is a long string\nLook; It spans multiple lines\nand all"
> 
> # Shape with default settings
> shape_string(string)
$shape
   glyph index metric_id string_id x_offset y_offset x_midpoint
1      T    53         0         1        0        0        3.5
2      h    73         0         1        7        0        3.5
3      i    74         0         1       14        0        1.5
4      s    84         0         1       17        0        3.0
5            1         0         1       23        0        1.5
6      i    74         0         1       26        0        1.5
7      s    84         0         1       29        0        3.0
8            1         0         1       35        0        1.5
9      a    66         0         1       38        0        3.5
10           1         0         1       45        0        1.5
11     l    77         0         1       48        0        1.5
12     o    80         0         1       51        0        3.5
13     n    79         0         1       58        0        3.5
14     g    72         0         1       65        0        3.5
15           1         0         1       72        0        1.5
16     s    84         0         1       75        0        3.0
17     t    85         0         1       81        0        1.5
18     r    83         0         1       84        0        2.0
19     i    74         0         1       88        0        1.5
20     n    79         0         1       91        0        3.5
21     g    72         0         1       98        0        3.5
22    \n     0         0         1      105        0        1.5
23     L    45         0         1        0      -12        3.5
24     o    80         0         1        7      -12        3.5
25     o    80         0         1       14      -12        3.5
26     k    76         0         1       21      -12        3.0
27     ;    28         0         1       27      -12        1.5
28           1         0         1       30      -12        1.5
29     I    42         0         1       33      -12        1.5
30     t    85         0         1       36      -12        1.5
31           1         0         1       39      -12        1.5
32     s    84         0         1       42      -12        3.0
33     p    81         0         1       48      -12        3.5
34     a    66         0         1       55      -12        3.5
35     n    79         0         1       62      -12        3.5
36     s    84         0         1       69      -12        3.0
37           1         0         1       75      -12        1.5
38     m    78         0         1       78      -12        5.0
39     u    86         0         1       88      -12        3.5
40     l    77         0         1       95      -12        1.5
41     t    85         0         1       98      -12        1.5
42     i    74         0         1      101      -12        1.5
43     p    81         0         1      104      -12        3.5
44     l    77         0         1      111      -12        1.5
45     e    70         0         1      114      -12        3.5
46           1         0         1      121      -12        1.5
47     l    77         0         1      124      -12        1.5
48     i    74         0         1      127      -12        1.5
49     n    79         0         1      130      -12        3.5
50     e    70         0         1      137      -12        3.5
51     s    84         0         1      144      -12        3.0
52    \n     0         0         1      150      -12        1.5
53     a    66         0         1        0      -24        3.5
54     n    79         0         1        7      -24        3.5
55     d    69         0         1       14      -24        3.5
56           1         0         1       21      -24        1.5
57     a    66         0         1       24      -24        3.5
58     l    77         0         1       31      -24        1.5
59     l    77         0         1       34      -24        1.5

$metrics
                                                         string width height
1 This is a long string\nLook; It spans multiple lines\nand all   150  44.75
  left_bearing right_bearing top_bearing bottom_bearing left_border top_border
1            0             0       -0.25           3.25           0       8.75
  pen_x pen_y
1    37   -24

> 
> # Mix styles within the same string
> string <- c(
+   "This string will have\na ",
+   "very large",
+   " text style\nin the middle"
+ )
> 
> shape_string(string, id = c(1, 1, 1), size = c(12, 24, 12))
$shape
   glyph index metric_id string_id x_offset y_offset x_midpoint
1      T    53         0         1        0     0.00        3.5
2      h    73         0         1        7     0.00        3.5
3      i    74         0         1       14     0.00        1.5
4      s    84         0         1       17     0.00        3.0
5            1         0         1       23     0.00        1.5
6      s    84         0         1       26     0.00        3.0
7      t    85         0         1       32     0.00        1.5
8      r    83         0         1       35     0.00        2.0
9      i    74         0         1       39     0.00        1.5
10     n    79         0         1       42     0.00        3.5
11     g    72         0         1       49     0.00        3.5
12           1         0         1       56     0.00        1.5
13     w    88         0         1       59     0.00        4.5
14     i    74         0         1       68     0.00        1.5
15     l    77         0         1       71     0.00        1.5
16     l    77         0         1       74     0.00        1.5
17           1         0         1       77     0.00        1.5
18     h    73         0         1       80     0.00        3.5
19     a    66         0         1       87     0.00        3.5
20     v    87         0         1       94     0.00        3.0
21     e    70         0         1      100     0.00        3.5
22    \n     0         0         1      107     0.00        1.5
23     a    66         0         1        0   -20.75        3.5
24           1         0         1        7   -20.75        1.5
25     v    87         0         2       10   -20.75        6.0
26     e    70         0         2       22   -20.75        6.5
27     r    83         0         2       35   -20.75        4.0
28     y    90         0         2       43   -20.75        6.0
29           1         0         2       55   -20.75        3.5
30     l    77         0         2       62   -20.75        2.5
31     a    66         0         2       67   -20.75        6.5
32     r    83         0         2       80   -20.75        4.0
33     g    72         0         2       88   -20.75        6.5
34     e    70         0         2      101   -20.75        6.5
35           1         0         3      114   -20.75        1.5
36     t    85         0         3      117   -20.75        1.5
37     e    70         0         3      120   -20.75        3.5
38     x    89         0         3      127   -20.75        3.0
39     t    85         0         3      133   -20.75        1.5
40           1         0         3      136   -20.75        1.5
41     s    84         0         3      139   -20.75        3.0
42     t    85         0         3      145   -20.75        1.5
43     y    90         0         3      148   -20.75        3.0
44     l    77         0         3      154   -20.75        1.5
45     e    70         0         3      157   -20.75        3.5
46    \n     0         0         3      164   -20.75        1.5
47     i    74         0         3        0   -36.00        1.5
48     n    79         0         3        3   -36.00        3.5
49           1         0         3       10   -36.00        1.5
50     t    85         0         3       13   -36.00        1.5
51     h    73         0         3       16   -36.00        3.5
52     e    70         0         3       23   -36.00        3.5
53           1         0         3       30   -36.00        1.5
54     m    78         0         3       33   -36.00        5.0
55     i    74         0         3       43   -36.00        1.5
56     d    69         0         3       46   -36.00        3.5
57     d    69         0         3       53   -36.00        3.5
58     l    77         0         3       60   -36.00        1.5
59     e    70         0         3       63   -36.00        3.5

$metrics
                                                         string width height
1 This string will have\na very large text style\nin the middle   164  56.75
  left_bearing right_bearing top_bearing bottom_bearing left_border top_border
1            0             1       -0.25           3.25           0       8.75
  pen_x pen_y
1    70   -36

> 
> 
> 
> 
> cleanEx()
> nameEx("str_split_emoji")
> ### * str_split_emoji
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: str_split_emoji
> ### Title: Split a string into emoji and non-emoji glyph runs
> ### Aliases: str_split_emoji
> 
> ### ** Examples
> 
> emoji_string <- "This is a joke\U0001f642. It should be obvious from the smiley"
> str_split_emoji(emoji_string)
                                  string id emoji
1                         This is a joke  1 FALSE
2                                     🙂  1  TRUE
3 . It should be obvious from the smiley  1 FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("string_metrics_dev")
> ### * string_metrics_dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_metrics_dev
> ### Title: Get string metrics as measured by the current device
> ### Aliases: string_metrics_dev
> 
> ### ** Examples
> 
> # Get the metrics as measured in cm (default)
> string_metrics_dev(c('some text', 'a string with descenders'))
    width    ascent    descent
1 1.82245 0.2832100 0.00635000
2 4.57073 0.3039533 0.09313333
> 
> 
> 
> 
> cleanEx()
> nameEx("string_width")
> ### * string_width
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_width
> ### Title: Calculate the width of a string, ignoring new-lines
> ### Aliases: string_width
> 
> ### ** Examples
> 
> strings <- c('A short string', 'A very very looong string')
> string_width(strings)
[1]  71 134
> 
> 
> 
> 
> cleanEx()
> nameEx("string_widths_dev")
> ### * string_widths_dev
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: string_widths_dev
> ### Title: Get string widths as measured by the current device
> ### Aliases: string_widths_dev
> 
> ### ** Examples
> 
> # Get the widths as measured in cm (default)
> string_widths_dev(c('a string', 'an even longer string'))
[1] 1.394460 3.936153
> 
> 
> 
> 
> cleanEx()
> nameEx("system_fonts")
> ### * system_fonts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: system_fonts
> ### Title: List all fonts installed on your system
> ### Aliases: system_fonts
> 
> ### ** Examples
> 
> # See all monospace fonts
> fonts <- system_fonts()
> fonts[fonts$monospace, ]
                                                                path index
4       /usr/share/fonts/type1/urw-base35/NimbusMonoPS-BoldItalic.t1     0
13     /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Regular.otf     0
52                /usr/share/fonts/X11/Type1/NimbusMonoPS-Italic.pfb     0
65            /usr/share/fonts/X11/Type1/NimbusMonoPS-BoldItalic.pfb     0
67         /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Regular.t1     0
82                  /usr/share/fonts/X11/Type1/NimbusMonoPS-Bold.pfb     0
91  /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-BoldItalic.otf     0
95            /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Bold.t1     0
128       /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Bold.otf     0
130              /usr/share/fonts/X11/Type1/NimbusMonoPS-Regular.pfb     0
134     /usr/share/fonts/opentype/urw-base35/NimbusMonoPS-Italic.otf     0
142         /usr/share/fonts/type1/urw-base35/NimbusMonoPS-Italic.t1     0
                       name         family       style weight  width italic
4   NimbusMonoPS-BoldItalic Nimbus Mono PS Bold Italic   bold normal   TRUE
13     NimbusMonoPS-Regular Nimbus Mono PS     Regular normal normal  FALSE
52      NimbusMonoPS-Italic Nimbus Mono PS      Italic normal normal   TRUE
65  NimbusMonoPS-BoldItalic Nimbus Mono PS Bold Italic   bold normal   TRUE
67     NimbusMonoPS-Regular Nimbus Mono PS     Regular normal normal  FALSE
82        NimbusMonoPS-Bold Nimbus Mono PS        Bold   bold normal  FALSE
91  NimbusMonoPS-BoldItalic Nimbus Mono PS Bold Italic   bold normal   TRUE
95        NimbusMonoPS-Bold Nimbus Mono PS        Bold   bold normal  FALSE
128       NimbusMonoPS-Bold Nimbus Mono PS        Bold   bold normal  FALSE
130    NimbusMonoPS-Regular Nimbus Mono PS     Regular normal normal  FALSE
134     NimbusMonoPS-Italic Nimbus Mono PS      Italic normal normal   TRUE
142     NimbusMonoPS-Italic Nimbus Mono PS      Italic normal normal   TRUE
    monospace
4        TRUE
13       TRUE
52       TRUE
65       TRUE
67       TRUE
82       TRUE
91       TRUE
95       TRUE
128      TRUE
130      TRUE
134      TRUE
142      TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.216 0.015 0.232 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
