
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DBI"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('DBI')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ANSI")
> ### * ANSI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ANSI
> ### Title: A dummy DBI connector that simulates ANSI-SQL compliance
> ### Aliases: ANSI
> ### Keywords: internal
> 
> ### ** Examples
> 
> ANSI()
<AnsiConnection>
> 
> 
> 
> cleanEx()
> nameEx("DBI-package")
> ### * DBI-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBI-package
> ### Title: DBI: R Database Interface
> ### Aliases: DBI DBI-package
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ RSQLite::SQLite()
+ ## Don't show: 
+ }) # examplesIf
> RSQLite::SQLite()
<SQLiteDriver>
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("DBIConnection-class")
> ### * DBIConnection-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBIConnection-class
> ### Title: DBIConnection class
> ### Aliases: DBIConnection-class
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ con
+ dbDisconnect(con)
+ ## Not run: 
+ ##D con <- dbConnect(RPostgreSQL::PostgreSQL(), "username", "password")
+ ##D con
+ ##D dbDisconnect(con)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> con
<SQLiteConnection>
  Path: :memory:
  Extensions: TRUE
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("DBIConnector-class")
> ### * DBIConnector-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBIConnector-class
> ### Title: DBIConnector class
> ### Aliases: DBIConnector-class
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Create a connector:
+ cnr <- new("DBIConnector",
+   .drv = RSQLite::SQLite(),
+   .conn_args = list(dbname = ":memory:")
+ )
+ cnr
+ 
+ # Establish a connection through this connector:
+ con <- dbConnect(cnr)
+ con
+ 
+ # Access the database through this connection:
+ dbGetQuery(con, "SELECT 1 AS a")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> cnr <- new("DBIConnector", .drv = RSQLite::SQLite(), .conn_args = list(dbname = ":memory:"))
> cnr
<DBIConnector><SQLiteDriver>
Arguments:
$dbname
[1] ":memory:"

> con <- dbConnect(cnr)
> con
<SQLiteConnection>
  Path: :memory:
  Extensions: TRUE
> dbGetQuery(con, "SELECT 1 AS a")
  a
1 1
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("DBIObject-class")
> ### * DBIObject-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: DBIObject-class
> ### Title: DBIObject class
> ### Aliases: DBIObject-class
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ drv <- RSQLite::SQLite()
+ con <- dbConnect(drv)
+ 
+ rs <- dbSendQuery(con, "SELECT 1")
+ is(drv, "DBIObject")   ## True
+ is(con, "DBIObject")   ## True
+ is(rs, "DBIObject")
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> drv <- RSQLite::SQLite()
> con <- dbConnect(drv)
> rs <- dbSendQuery(con, "SELECT 1")
> is(drv, "DBIObject")
[1] TRUE
> is(con, "DBIObject")
[1] TRUE
> is(rs, "DBIObject")
[1] TRUE
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("Id")
> ### * Id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Id-class
> ### Title: Refer to a table nested in a hierarchy (e.g. within a schema)
> ### Aliases: Id-class Id
> 
> ### ** Examples
> 
> # Identifies a table in a specific schema:
> Id("dbo", "Customer")
<Id> "dbo"."Customer"
> # You can name the components if you want, but it's not needed
> Id(table = "Customer", schema = "dbo")
<Id> "dbo"."Customer"
> 
> # Create a SQL expression for an identifier:
> dbQuoteIdentifier(ANSI(), Id("nycflights13", "flights"))
<SQL> "nycflights13"."flights"
> 
> # Write a table in a specific schema:
> ## Not run: 
> ##D dbWriteTable(con, Id("myschema", "mytable"), data.frame(a = 1))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("SQL")
> ### * SQL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: SQL
> ### Title: SQL quoting
> ### Aliases: SQL SQL-class
> 
> ### ** Examples
> 
> dbQuoteIdentifier(ANSI(), "SELECT")
<SQL> "SELECT"
> dbQuoteString(ANSI(), "SELECT")
<SQL> 'SELECT'
> 
> # SQL vectors are always passed through as is
> var_name <- SQL("SELECT")
> var_name
<SQL> SELECT
> 
> dbQuoteIdentifier(ANSI(), var_name)
<SQL> SELECT
> dbQuoteString(ANSI(), var_name)
<SQL> SELECT
> 
> # This mechanism is used to prevent double escaping
> dbQuoteString(ANSI(), dbQuoteString(ANSI(), "SELECT"))
<SQL> 'SELECT'
> 
> 
> 
> cleanEx()
> nameEx("dbAppendTable")
> ### * dbAppendTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbAppendTable
> ### Title: Insert rows into a table
> ### Aliases: dbAppendTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ dbCreateTable(con, "iris", iris)
+ dbAppendTable(con, "iris", iris)
+ dbReadTable(con, "iris")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbCreateTable(con, "iris", iris)
> dbAppendTable(con, "iris", iris)
Warning: Factors converted to character
[1] 150
> dbReadTable(con, "iris")
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            5.1         3.5          1.4         0.2     setosa
2            4.9         3.0          1.4         0.2     setosa
3            4.7         3.2          1.3         0.2     setosa
4            4.6         3.1          1.5         0.2     setosa
5            5.0         3.6          1.4         0.2     setosa
6            5.4         3.9          1.7         0.4     setosa
7            4.6         3.4          1.4         0.3     setosa
8            5.0         3.4          1.5         0.2     setosa
9            4.4         2.9          1.4         0.2     setosa
10           4.9         3.1          1.5         0.1     setosa
11           5.4         3.7          1.5         0.2     setosa
12           4.8         3.4          1.6         0.2     setosa
13           4.8         3.0          1.4         0.1     setosa
14           4.3         3.0          1.1         0.1     setosa
15           5.8         4.0          1.2         0.2     setosa
16           5.7         4.4          1.5         0.4     setosa
17           5.4         3.9          1.3         0.4     setosa
18           5.1         3.5          1.4         0.3     setosa
19           5.7         3.8          1.7         0.3     setosa
20           5.1         3.8          1.5         0.3     setosa
21           5.4         3.4          1.7         0.2     setosa
22           5.1         3.7          1.5         0.4     setosa
23           4.6         3.6          1.0         0.2     setosa
24           5.1         3.3          1.7         0.5     setosa
25           4.8         3.4          1.9         0.2     setosa
26           5.0         3.0          1.6         0.2     setosa
27           5.0         3.4          1.6         0.4     setosa
28           5.2         3.5          1.5         0.2     setosa
29           5.2         3.4          1.4         0.2     setosa
30           4.7         3.2          1.6         0.2     setosa
31           4.8         3.1          1.6         0.2     setosa
32           5.4         3.4          1.5         0.4     setosa
33           5.2         4.1          1.5         0.1     setosa
34           5.5         4.2          1.4         0.2     setosa
35           4.9         3.1          1.5         0.2     setosa
36           5.0         3.2          1.2         0.2     setosa
37           5.5         3.5          1.3         0.2     setosa
38           4.9         3.6          1.4         0.1     setosa
39           4.4         3.0          1.3         0.2     setosa
40           5.1         3.4          1.5         0.2     setosa
41           5.0         3.5          1.3         0.3     setosa
42           4.5         2.3          1.3         0.3     setosa
43           4.4         3.2          1.3         0.2     setosa
44           5.0         3.5          1.6         0.6     setosa
45           5.1         3.8          1.9         0.4     setosa
46           4.8         3.0          1.4         0.3     setosa
47           5.1         3.8          1.6         0.2     setosa
48           4.6         3.2          1.4         0.2     setosa
49           5.3         3.7          1.5         0.2     setosa
50           5.0         3.3          1.4         0.2     setosa
51           7.0         3.2          4.7         1.4 versicolor
52           6.4         3.2          4.5         1.5 versicolor
53           6.9         3.1          4.9         1.5 versicolor
54           5.5         2.3          4.0         1.3 versicolor
55           6.5         2.8          4.6         1.5 versicolor
56           5.7         2.8          4.5         1.3 versicolor
57           6.3         3.3          4.7         1.6 versicolor
58           4.9         2.4          3.3         1.0 versicolor
59           6.6         2.9          4.6         1.3 versicolor
60           5.2         2.7          3.9         1.4 versicolor
61           5.0         2.0          3.5         1.0 versicolor
62           5.9         3.0          4.2         1.5 versicolor
63           6.0         2.2          4.0         1.0 versicolor
64           6.1         2.9          4.7         1.4 versicolor
65           5.6         2.9          3.6         1.3 versicolor
66           6.7         3.1          4.4         1.4 versicolor
67           5.6         3.0          4.5         1.5 versicolor
68           5.8         2.7          4.1         1.0 versicolor
69           6.2         2.2          4.5         1.5 versicolor
70           5.6         2.5          3.9         1.1 versicolor
71           5.9         3.2          4.8         1.8 versicolor
72           6.1         2.8          4.0         1.3 versicolor
73           6.3         2.5          4.9         1.5 versicolor
74           6.1         2.8          4.7         1.2 versicolor
75           6.4         2.9          4.3         1.3 versicolor
76           6.6         3.0          4.4         1.4 versicolor
77           6.8         2.8          4.8         1.4 versicolor
78           6.7         3.0          5.0         1.7 versicolor
79           6.0         2.9          4.5         1.5 versicolor
80           5.7         2.6          3.5         1.0 versicolor
81           5.5         2.4          3.8         1.1 versicolor
82           5.5         2.4          3.7         1.0 versicolor
83           5.8         2.7          3.9         1.2 versicolor
84           6.0         2.7          5.1         1.6 versicolor
85           5.4         3.0          4.5         1.5 versicolor
86           6.0         3.4          4.5         1.6 versicolor
87           6.7         3.1          4.7         1.5 versicolor
88           6.3         2.3          4.4         1.3 versicolor
89           5.6         3.0          4.1         1.3 versicolor
90           5.5         2.5          4.0         1.3 versicolor
91           5.5         2.6          4.4         1.2 versicolor
92           6.1         3.0          4.6         1.4 versicolor
93           5.8         2.6          4.0         1.2 versicolor
94           5.0         2.3          3.3         1.0 versicolor
95           5.6         2.7          4.2         1.3 versicolor
96           5.7         3.0          4.2         1.2 versicolor
97           5.7         2.9          4.2         1.3 versicolor
98           6.2         2.9          4.3         1.3 versicolor
99           5.1         2.5          3.0         1.1 versicolor
100          5.7         2.8          4.1         1.3 versicolor
101          6.3         3.3          6.0         2.5  virginica
102          5.8         2.7          5.1         1.9  virginica
103          7.1         3.0          5.9         2.1  virginica
104          6.3         2.9          5.6         1.8  virginica
105          6.5         3.0          5.8         2.2  virginica
106          7.6         3.0          6.6         2.1  virginica
107          4.9         2.5          4.5         1.7  virginica
108          7.3         2.9          6.3         1.8  virginica
109          6.7         2.5          5.8         1.8  virginica
110          7.2         3.6          6.1         2.5  virginica
111          6.5         3.2          5.1         2.0  virginica
112          6.4         2.7          5.3         1.9  virginica
113          6.8         3.0          5.5         2.1  virginica
114          5.7         2.5          5.0         2.0  virginica
115          5.8         2.8          5.1         2.4  virginica
116          6.4         3.2          5.3         2.3  virginica
117          6.5         3.0          5.5         1.8  virginica
118          7.7         3.8          6.7         2.2  virginica
119          7.7         2.6          6.9         2.3  virginica
120          6.0         2.2          5.0         1.5  virginica
121          6.9         3.2          5.7         2.3  virginica
122          5.6         2.8          4.9         2.0  virginica
123          7.7         2.8          6.7         2.0  virginica
124          6.3         2.7          4.9         1.8  virginica
125          6.7         3.3          5.7         2.1  virginica
126          7.2         3.2          6.0         1.8  virginica
127          6.2         2.8          4.8         1.8  virginica
128          6.1         3.0          4.9         1.8  virginica
129          6.4         2.8          5.6         2.1  virginica
130          7.2         3.0          5.8         1.6  virginica
131          7.4         2.8          6.1         1.9  virginica
132          7.9         3.8          6.4         2.0  virginica
133          6.4         2.8          5.6         2.2  virginica
134          6.3         2.8          5.1         1.5  virginica
135          6.1         2.6          5.6         1.4  virginica
136          7.7         3.0          6.1         2.3  virginica
137          6.3         3.4          5.6         2.4  virginica
138          6.4         3.1          5.5         1.8  virginica
139          6.0         3.0          4.8         1.8  virginica
140          6.9         3.1          5.4         2.1  virginica
141          6.7         3.1          5.6         2.4  virginica
142          6.9         3.1          5.1         2.3  virginica
143          5.8         2.7          5.1         1.9  virginica
144          6.8         3.2          5.9         2.3  virginica
145          6.7         3.3          5.7         2.5  virginica
146          6.7         3.0          5.2         2.3  virginica
147          6.3         2.5          5.0         1.9  virginica
148          6.5         3.0          5.2         2.0  virginica
149          6.2         3.4          5.4         2.3  virginica
150          5.9         3.0          5.1         1.8  virginica
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbAppendTableArrow")
> ### * dbAppendTableArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbAppendTableArrow
> ### Title: Insert rows into a table from an Arrow stream
> ### Aliases: dbAppendTableArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ dbCreateTableArrow(con, "iris", iris[0, ])
+ dbAppendTableArrow(con, "iris", iris[1:5, ])
+ dbReadTable(con, "iris")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbBind")
> ### * dbBind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbBind
> ### Title: Bind values to a parameterized/prepared statement
> ### Aliases: dbBind dbBindArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Data frame flow:
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "iris", iris)
+ 
+ # Using the same query for different values
+ iris_result <- dbSendQuery(con, "SELECT * FROM iris WHERE [Petal.Width] > ?")
+ dbBind(iris_result, list(2.3))
+ dbFetch(iris_result)
+ dbBind(iris_result, list(3))
+ dbFetch(iris_result)
+ dbClearResult(iris_result)
+ 
+ # Executing the same statement with different values at once
+ iris_result <- dbSendStatement(con, "DELETE FROM iris WHERE [Species] = $species")
+ dbBind(iris_result, list(species = c("setosa", "versicolor", "unknown")))
+ dbGetRowsAffected(iris_result)
+ dbClearResult(iris_result)
+ 
+ nrow(dbReadTable(con, "iris"))
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "iris", iris)
> iris_result <- dbSendQuery(con, "SELECT * FROM iris WHERE [Petal.Width] > ?")
> dbBind(iris_result, list(2.3))
> dbFetch(iris_result)
  Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
1          6.3         3.3          6.0         2.5 virginica
2          7.2         3.6          6.1         2.5 virginica
3          5.8         2.8          5.1         2.4 virginica
4          6.3         3.4          5.6         2.4 virginica
5          6.7         3.1          5.6         2.4 virginica
6          6.7         3.3          5.7         2.5 virginica
> dbBind(iris_result, list(3))
> dbFetch(iris_result)
[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     
<0 rows> (or 0-length row.names)
> dbClearResult(iris_result)
> iris_result <- dbSendStatement(con, "DELETE FROM iris WHERE [Species] = $species")
> dbBind(iris_result, list(species = c("setosa", "versicolor", "unknown")))
> dbGetRowsAffected(iris_result)
[1] 100
> dbClearResult(iris_result)
> nrow(dbReadTable(con, "iris"))
[1] 50
> dbDisconnect(con)
> ## End(Don't show)
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Arrow flow:
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "iris", iris)
+ 
+ # Using the same query for different values
+ iris_result <- dbSendQueryArrow(con, "SELECT * FROM iris WHERE [Petal.Width] > ?")
+ dbBindArrow(
+   iris_result,
+   nanoarrow::as_nanoarrow_array_stream(data.frame(2.3, fix.empty.names = FALSE))
+ )
+ as.data.frame(dbFetchArrow(iris_result))
+ dbBindArrow(
+   iris_result,
+   nanoarrow::as_nanoarrow_array_stream(data.frame(3, fix.empty.names = FALSE))
+ )
+ as.data.frame(dbFetchArrow(iris_result))
+ dbClearResult(iris_result)
+ 
+ # Executing the same statement with different values at once
+ iris_result <- dbSendStatement(con, "DELETE FROM iris WHERE [Species] = $species")
+ dbBindArrow(iris_result, nanoarrow::as_nanoarrow_array_stream(data.frame(
+   species = c("setosa", "versicolor", "unknown")
+ )))
+ dbGetRowsAffected(iris_result)
+ dbClearResult(iris_result)
+ 
+ nrow(dbReadTable(con, "iris"))
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbCanConnect")
> ### * dbCanConnect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbCanConnect
> ### Title: Check if a connection to a DBMS can be established
> ### Aliases: dbCanConnect
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # SQLite only needs a path to the database. (Here, ":memory:" is a special
+ # path that creates an in-memory database.) Other database drivers
+ # will require more details (like user, password, host, port, etc.)
+ dbCanConnect(RSQLite::SQLite(), ":memory:")
+ ## Don't show: 
+ }) # examplesIf
> dbCanConnect(RSQLite::SQLite(), ":memory:")
[1] TRUE
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbClearResult")
> ### * dbClearResult
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbClearResult
> ### Title: Clear a result set
> ### Aliases: dbClearResult
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ rs <- dbSendQuery(con, "SELECT 1")
+ print(dbFetch(rs))
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> rs <- dbSendQuery(con, "SELECT 1")
> print(dbFetch(rs))
  1
1 1
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbColumnInfo")
> ### * dbColumnInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbColumnInfo
> ### Title: Information about result types
> ### Aliases: dbColumnInfo
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ rs <- dbSendQuery(con, "SELECT 1 AS a, 2 AS b")
+ dbColumnInfo(rs)
+ dbFetch(rs)
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> rs <- dbSendQuery(con, "SELECT 1 AS a, 2 AS b")
> dbColumnInfo(rs)
  name    type
1    a integer
2    b integer
> dbFetch(rs)
  a b
1 1 2
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbConnect")
> ### * dbConnect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbConnect
> ### Title: Create a connection to a DBMS
> ### Aliases: dbConnect
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # SQLite only needs a path to the database. (Here, ":memory:" is a special
+ # path that creates an in-memory database.) Other database drivers
+ # will require more details (like user, password, host, port, etc.)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ con
+ 
+ dbListTables(con)
+ 
+ dbDisconnect(con)
+ 
+ # Bad, for subtle reasons:
+ # This code fails when RSQLite isn't loaded yet,
+ # because dbConnect() doesn't know yet about RSQLite.
+ dbListTables(con <- dbConnect(RSQLite::SQLite(), ":memory:"))
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> con
<SQLiteConnection>
  Path: :memory:
  Extensions: TRUE
> dbListTables(con)
character(0)
> dbDisconnect(con)
> dbListTables(con <- dbConnect(RSQLite::SQLite(), ":memory:"))
character(0)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbCreateTable")
> ### * dbCreateTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbCreateTable
> ### Title: Create a table in the database
> ### Aliases: dbCreateTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ dbCreateTable(con, "iris", iris)
+ dbReadTable(con, "iris")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbCreateTable(con, "iris", iris)
> dbReadTable(con, "iris")
[1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species     
<0 rows> (or 0-length row.names)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbCreateTableArrow")
> ### * dbCreateTableArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbCreateTableArrow
> ### Title: Create a table in the database based on an Arrow object
> ### Aliases: dbCreateTableArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ ptype <- data.frame(a = numeric())
+ dbCreateTableArrow(con, "df", nanoarrow::infer_nanoarrow_schema(ptype))
+ dbReadTable(con, "df")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbDataType")
> ### * dbDataType
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbDataType
> ### Title: Determine the SQL data type of an object
> ### Aliases: dbDataType
> 
> ### ** Examples
> 
> dbDataType(ANSI(), 1:5)
[1] "INT"
> dbDataType(ANSI(), 1)
[1] "DOUBLE"
> dbDataType(ANSI(), TRUE)
[1] "SMALLINT"
> dbDataType(ANSI(), Sys.Date())
[1] "DATE"
> dbDataType(ANSI(), Sys.time())
[1] "TIMESTAMP"
> dbDataType(ANSI(), Sys.time() - as.POSIXct(Sys.Date()))
[1] "TIME"
> dbDataType(ANSI(), c("x", "abc"))
[1] "TEXT"
> dbDataType(ANSI(), list(raw(10), raw(20)))
[1] "BLOB"
> dbDataType(ANSI(), I(3))
[1] "DOUBLE"
> 
> dbDataType(ANSI(), iris)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
    "DOUBLE"     "DOUBLE"     "DOUBLE"     "DOUBLE"       "TEXT" 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbDataType(con, 1:5)
+ dbDataType(con, 1)
+ dbDataType(con, TRUE)
+ dbDataType(con, Sys.Date())
+ dbDataType(con, Sys.time())
+ dbDataType(con, Sys.time() - as.POSIXct(Sys.Date()))
+ dbDataType(con, c("x", "abc"))
+ dbDataType(con, list(raw(10), raw(20)))
+ dbDataType(con, I(3))
+ 
+ dbDataType(con, iris)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbDataType(con, 1:5)
[1] "INTEGER"
> dbDataType(con, 1)
[1] "REAL"
> dbDataType(con, TRUE)
[1] "INTEGER"
> dbDataType(con, Sys.Date())
[1] "REAL"
> dbDataType(con, Sys.time())
[1] "REAL"
> dbDataType(con, Sys.time() - as.POSIXct(Sys.Date()))
[1] "REAL"
> dbDataType(con, c("x", "abc"))
[1] "TEXT"
> dbDataType(con, list(raw(10), raw(20)))
[1] "BLOB"
> dbDataType(con, I(3))
[1] "REAL"
> dbDataType(con, iris)
Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species 
    "DOUBLE"     "DOUBLE"     "DOUBLE"     "DOUBLE"       "TEXT" 
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbDisconnect")
> ### * dbDisconnect
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbDisconnect
> ### Title: Disconnect (close) a connection
> ### Aliases: dbDisconnect
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbDriver")
> ### * dbDriver
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbDriver
> ### Title: Load and unload database drivers
> ### Aliases: dbDriver dbUnloadDriver
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Create a RSQLite driver with a string
+ d <- dbDriver("SQLite")
+ d
+ 
+ # But better, access the object directly
+ RSQLite::SQLite()
+ ## Don't show: 
+ }) # examplesIf
> d <- dbDriver("SQLite")
> d
<SQLiteDriver>
> RSQLite::SQLite()
<SQLiteDriver>
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbExecute")
> ### * dbExecute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbExecute
> ### Title: Change database state
> ### Aliases: dbExecute
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "cars", head(cars, 3))
+ dbReadTable(con, "cars")   # there are 3 rows
+ dbExecute(
+   con,
+   "INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)"
+ )
+ dbReadTable(con, "cars")   # there are now 6 rows
+ 
+ # Pass values using the param argument:
+ dbExecute(
+   con,
+   "INSERT INTO cars (speed, dist) VALUES (?, ?)",
+   params = list(4:7, 5:8)
+ )
+ dbReadTable(con, "cars")   # there are now 10 rows
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "cars", head(cars, 3))
> dbReadTable(con, "cars")
  speed dist
1     4    2
2     4   10
3     7    4
> dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)")
[1] 3
> dbReadTable(con, "cars")
  speed dist
1     4    2
2     4   10
3     7    4
4     1    1
5     2    2
6     3    3
> dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (?, ?)", params = list(4:7, 
+     5:8))
[1] 4
> dbReadTable(con, "cars")
   speed dist
1      4    2
2      4   10
3      7    4
4      1    1
5      2    2
6      3    3
7      4    5
8      5    6
9      6    7
10     7    8
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbExistsTable")
> ### * dbExistsTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbExistsTable
> ### Title: Does a table exist?
> ### Aliases: dbExistsTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbExistsTable(con, "iris")
+ dbWriteTable(con, "iris", iris)
+ dbExistsTable(con, "iris")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbExistsTable(con, "iris")
[1] FALSE
> dbWriteTable(con, "iris", iris)
Warning: call dbDisconnect() when finished working with a connection
> dbExistsTable(con, "iris")
[1] TRUE
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbFetch")
> ### * dbFetch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbFetch
> ### Title: Fetch records from a previously executed query
> ### Aliases: dbFetch fetch
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ 
+ # Fetch all results
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
+ dbFetch(rs)
+ dbClearResult(rs)
+ 
+ # Fetch in chunks
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars")
+ while (!dbHasCompleted(rs)) {
+   chunk <- dbFetch(rs, 10)
+   print(nrow(chunk))
+ }
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
> dbFetch(rs)
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbClearResult(rs)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars")
> while (!dbHasCompleted(rs)) {
+     chunk <- dbFetch(rs, 10)
+     print(nrow(chunk))
+ }
[1] 10
[1] 10
[1] 10
[1] 2
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbFetchArrow")
> ### * dbFetchArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbFetchArrow
> ### Title: Fetch records from a previously executed query as an Arrow
> ###   object
> ### Aliases: dbFetchArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ 
+ # Fetch all results
+ rs <- dbSendQueryArrow(con, "SELECT * FROM mtcars WHERE cyl = 4")
+ as.data.frame(dbFetchArrow(rs))
+ dbClearResult(rs)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbFetchArrowChunk")
> ### * dbFetchArrowChunk
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbFetchArrowChunk
> ### Title: Fetch the next batch of records from a previously executed query
> ###   as an Arrow object
> ### Aliases: dbFetchArrowChunk
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ 
+ # Fetch all results
+ rs <- dbSendQueryArrow(con, "SELECT * FROM mtcars WHERE cyl = 4")
+ dbHasCompleted(rs)
+ as.data.frame(dbFetchArrowChunk(rs))
+ dbHasCompleted(rs)
+ as.data.frame(dbFetchArrowChunk(rs))
+ dbClearResult(rs)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetConnectArgs")
> ### * dbGetConnectArgs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetConnectArgs
> ### Title: Get connection arguments
> ### Aliases: dbGetConnectArgs
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cnr <- new("DBIConnector",
+   .drv = RSQLite::SQLite(),
+   .conn_args = list(dbname = ":memory:", password = function() "supersecret")
+ )
+ dbGetConnectArgs(cnr)
+ dbGetConnectArgs(cnr, eval = FALSE)
+ ## Don't show: 
+ }) # examplesIf
> cnr <- new("DBIConnector", .drv = RSQLite::SQLite(), .conn_args = list(dbname = ":memory:", 
+     password = function() "supersecret"))
> dbGetConnectArgs(cnr)
$dbname
[1] ":memory:"

$password
[1] "supersecret"

> dbGetConnectArgs(cnr, eval = FALSE)
$dbname
[1] ":memory:"

$password
function () 
"supersecret"

> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetInfo")
> ### * dbGetInfo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetInfo
> ### Title: Get DBMS metadata
> ### Aliases: dbGetInfo
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ dbGetInfo(RSQLite::SQLite())
+ ## Don't show: 
+ }) # examplesIf
> dbGetInfo(RSQLite::SQLite())
$driver.version
[1] ‘2.3.9’

$client.version
[1] ‘3.47.1’

> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetQuery")
> ### * dbGetQuery
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetQuery
> ### Title: Retrieve results from a query
> ### Aliases: dbGetQuery
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ dbGetQuery(con, "SELECT * FROM mtcars")
+ dbGetQuery(con, "SELECT * FROM mtcars", n = 6)
+ 
+ # Pass values using the param argument:
+ # (This query runs eight times, once for each different
+ # parameter. The resulting rows are combined into a single
+ # data frame.)
+ dbGetQuery(
+   con,
+   "SELECT COUNT(*) FROM mtcars WHERE cyl = ?",
+   params = list(1:8)
+ )
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> dbGetQuery(con, "SELECT * FROM mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbGetQuery(con, "SELECT * FROM mtcars", n = 6)
   mpg cyl disp  hp drat    wt  qsec vs am gear carb
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> dbGetQuery(con, "SELECT COUNT(*) FROM mtcars WHERE cyl = ?", params = list(1:8))
  COUNT(*)
1        0
2        0
3        0
4       11
5        0
6        7
7        0
8       14
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetQueryArrow")
> ### * dbGetQueryArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetQueryArrow
> ### Title: Retrieve results from a query as an Arrow object
> ### Aliases: dbGetQueryArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Retrieve data as arrow table
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ dbGetQueryArrow(con, "SELECT * FROM mtcars")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetRowCount")
> ### * dbGetRowCount
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetRowCount
> ### Title: The number of rows fetched so far
> ### Aliases: dbGetRowCount
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars")
+ 
+ dbGetRowCount(rs)
+ ret1 <- dbFetch(rs, 10)
+ dbGetRowCount(rs)
+ ret2 <- dbFetch(rs)
+ dbGetRowCount(rs)
+ nrow(ret1) + nrow(ret2)
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars")
> dbGetRowCount(rs)
[1] 0
> ret1 <- dbFetch(rs, 10)
> dbGetRowCount(rs)
[1] 10
> ret2 <- dbFetch(rs)
> dbGetRowCount(rs)
[1] 32
> nrow(ret1) + nrow(ret2)
[1] 32
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetRowsAffected")
> ### * dbGetRowsAffected
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetRowsAffected
> ### Title: The number of rows affected
> ### Aliases: dbGetRowsAffected
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendStatement(con, "DELETE FROM mtcars")
+ dbGetRowsAffected(rs)
+ nrow(mtcars)
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendStatement(con, "DELETE FROM mtcars")
> dbGetRowsAffected(rs)
[1] 32
> nrow(mtcars)
[1] 32
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbGetStatement")
> ### * dbGetStatement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbGetStatement
> ### Title: Get the statement associated with a result set
> ### Aliases: dbGetStatement
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars")
+ dbGetStatement(rs)
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars")
> dbGetStatement(rs)
[1] "SELECT * FROM mtcars"
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbHasCompleted")
> ### * dbHasCompleted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbHasCompleted
> ### Title: Completion status
> ### Aliases: dbHasCompleted
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars")
+ 
+ dbHasCompleted(rs)
+ ret1 <- dbFetch(rs, 10)
+ dbHasCompleted(rs)
+ ret2 <- dbFetch(rs)
+ dbHasCompleted(rs)
+ 
+ dbClearResult(rs)
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars")
> dbHasCompleted(rs)
[1] FALSE
> ret1 <- dbFetch(rs, 10)
> dbHasCompleted(rs)
[1] FALSE
> ret2 <- dbFetch(rs)
> dbHasCompleted(rs)
[1] TRUE
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbIsReadOnly")
> ### * dbIsReadOnly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbIsReadOnly
> ### Title: Is this DBMS object read only?
> ### Aliases: dbIsReadOnly
> 
> ### ** Examples
> 
> dbIsReadOnly(ANSI())
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("dbIsValid")
> ### * dbIsValid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbIsValid
> ### Title: Is this DBMS object still valid?
> ### Aliases: dbIsValid
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ dbIsValid(RSQLite::SQLite())
+ 
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ dbIsValid(con)
+ 
+ rs <- dbSendQuery(con, "SELECT 1")
+ dbIsValid(rs)
+ 
+ dbClearResult(rs)
+ dbIsValid(rs)
+ 
+ dbDisconnect(con)
+ dbIsValid(con)
+ ## Don't show: 
+ }) # examplesIf
> dbIsValid(RSQLite::SQLite())
[1] TRUE
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbIsValid(con)
[1] TRUE
> rs <- dbSendQuery(con, "SELECT 1")
> dbIsValid(rs)
[1] TRUE
> dbClearResult(rs)
> dbIsValid(rs)
[1] FALSE
> dbDisconnect(con)
> dbIsValid(con)
[1] FALSE
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbListFields")
> ### * dbListFields
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbListFields
> ### Title: List field names of a remote table
> ### Aliases: dbListFields
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ dbListFields(con, "mtcars")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> dbListFields(con, "mtcars")
 [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbListObjects")
> ### * dbListObjects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbListObjects
> ### Title: List remote objects
> ### Aliases: dbListObjects
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbListObjects(con)
+ dbWriteTable(con, "mtcars", mtcars)
+ dbListObjects(con)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbListObjects(con)
[1] table     is_prefix
<0 rows> (or 0-length row.names)
> dbWriteTable(con, "mtcars", mtcars)
> dbListObjects(con)
          table is_prefix
1 <Id> "mtcars"     FALSE
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbListTables")
> ### * dbListTables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbListTables
> ### Title: List remote tables
> ### Aliases: dbListTables
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbListTables(con)
+ dbWriteTable(con, "mtcars", mtcars)
+ dbListTables(con)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbListTables(con)
character(0)
> dbWriteTable(con, "mtcars", mtcars)
> dbListTables(con)
[1] "mtcars"
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbQuoteIdentifier")
> ### * dbQuoteIdentifier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbQuoteIdentifier
> ### Title: Quote identifiers
> ### Aliases: dbQuoteIdentifier
> 
> ### ** Examples
> 
> # Quoting ensures that arbitrary input is safe for use in a query
> name <- "Robert'); DROP TABLE Students;--"
> dbQuoteIdentifier(ANSI(), name)
<SQL> "Robert'); DROP TABLE Students;--"
> 
> # Use Id() to specify other components such as the schema
> id_name <- Id(schema = "schema_name", table = "table_name")
> id_name
<Id> "schema_name"."table_name"
> dbQuoteIdentifier(ANSI(), id_name)
<SQL> "schema_name"."table_name"
> 
> # SQL vectors are always passed through as is
> var_name <- SQL("select")
> var_name
<SQL> select
> dbQuoteIdentifier(ANSI(), var_name)
<SQL> select
> 
> # This mechanism is used to prevent double escaping
> dbQuoteIdentifier(ANSI(), dbQuoteIdentifier(ANSI(), name))
<SQL> "Robert'); DROP TABLE Students;--"
> 
> 
> 
> cleanEx()
> nameEx("dbQuoteLiteral")
> ### * dbQuoteLiteral
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbQuoteLiteral
> ### Title: Quote literal values
> ### Aliases: dbQuoteLiteral
> 
> ### ** Examples
> 
> # Quoting ensures that arbitrary input is safe for use in a query
> name <- "Robert'); DROP TABLE Students;--"
> dbQuoteLiteral(ANSI(), name)
<SQL> 'Robert''); DROP TABLE Students;--'
> 
> # NAs become NULL
> dbQuoteLiteral(ANSI(), c(1:3, NA))
<SQL> 1
<SQL> 2
<SQL> 3
<SQL> NULL
> 
> # Logicals become integers by default
> dbQuoteLiteral(ANSI(), c(TRUE, FALSE, NA))
<SQL> 1
<SQL> 0
<SQL> NULL
> 
> # Raw vectors become hex strings by default
> dbQuoteLiteral(ANSI(), list(as.raw(1:3), NULL))
<SQL> X'010203'
<SQL> NULL
> 
> # SQL vectors are always passed through as is
> var_name <- SQL("select")
> var_name
<SQL> select
> dbQuoteLiteral(ANSI(), var_name)
<SQL> select
> 
> # This mechanism is used to prevent double escaping
> dbQuoteLiteral(ANSI(), dbQuoteLiteral(ANSI(), name))
<SQL> 'Robert''); DROP TABLE Students;--'
> 
> 
> 
> cleanEx()
> nameEx("dbQuoteString")
> ### * dbQuoteString
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbQuoteString
> ### Title: Quote literal strings
> ### Aliases: dbQuoteString
> 
> ### ** Examples
> 
> # Quoting ensures that arbitrary input is safe for use in a query
> name <- "Robert'); DROP TABLE Students;--"
> dbQuoteString(ANSI(), name)
<SQL> 'Robert''); DROP TABLE Students;--'
> 
> # NAs become NULL
> dbQuoteString(ANSI(), c("x", NA))
<SQL> 'x'
<SQL> NULL
> 
> # SQL vectors are always passed through as is
> var_name <- SQL("select")
> var_name
<SQL> select
> dbQuoteString(ANSI(), var_name)
<SQL> select
> 
> # This mechanism is used to prevent double escaping
> dbQuoteString(ANSI(), dbQuoteString(ANSI(), name))
<SQL> 'Robert''); DROP TABLE Students;--'
> 
> 
> 
> cleanEx()
> nameEx("dbReadTable")
> ### * dbReadTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbReadTable
> ### Title: Read database tables as data frames
> ### Aliases: dbReadTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars[1:10, ])
+ dbReadTable(con, "mtcars")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars[1:10, ])
> dbReadTable(con, "mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbReadTableArrow")
> ### * dbReadTableArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbReadTableArrow
> ### Title: Read database tables as Arrow objects
> ### Aliases: dbReadTableArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Read data as Arrow table
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars[1:10, ])
+ dbReadTableArrow(con, "mtcars")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbRemoveTable")
> ### * dbRemoveTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbRemoveTable
> ### Title: Remove a table from the database
> ### Aliases: dbRemoveTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbExistsTable(con, "iris")
+ dbWriteTable(con, "iris", iris)
+ dbExistsTable(con, "iris")
+ dbRemoveTable(con, "iris")
+ dbExistsTable(con, "iris")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbExistsTable(con, "iris")
[1] FALSE
> dbWriteTable(con, "iris", iris)
> dbExistsTable(con, "iris")
[1] TRUE
> dbRemoveTable(con, "iris")
> dbExistsTable(con, "iris")
[1] FALSE
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbSendQuery")
> ### * dbSendQuery
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbSendQuery
> ### Title: Execute a query on a given database connection
> ### Aliases: dbSendQuery
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
+ dbFetch(rs)
+ dbClearResult(rs)
+ 
+ # Pass one set of values with the param argument:
+ rs <- dbSendQuery(
+   con,
+   "SELECT * FROM mtcars WHERE cyl = ?",
+   params = list(4L)
+ )
+ dbFetch(rs)
+ dbClearResult(rs)
+ 
+ # Pass multiple sets of values with dbBind():
+ rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = ?")
+ dbBind(rs, list(6L))
+ dbFetch(rs)
+ dbBind(rs, list(8L))
+ dbFetch(rs)
+ dbClearResult(rs)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = 4")
> dbFetch(rs)
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbClearResult(rs)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = ?", params = list(4L))
> dbFetch(rs)
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> dbClearResult(rs)
> rs <- dbSendQuery(con, "SELECT * FROM mtcars WHERE cyl = ?")
> dbBind(rs, list(6L))
> dbFetch(rs)
   mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
5 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
6 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
7 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
> dbBind(rs, list(8L))
> dbFetch(rs)
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
13 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
14 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
> dbClearResult(rs)
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbSendQueryArrow")
> ### * dbSendQueryArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbSendQueryArrow
> ### Title: Execute a query on a given database connection for retrieval via
> ###   Arrow
> ### Aliases: dbSendQueryArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Retrieve data as arrow table
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars)
+ rs <- dbSendQueryArrow(con, "SELECT * FROM mtcars WHERE cyl = 4")
+ dbFetchArrow(rs)
+ dbClearResult(rs)
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbSendStatement")
> ### * dbSendStatement
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbSendStatement
> ### Title: Execute a data manipulation statement on a given database
> ###   connection
> ### Aliases: dbSendStatement
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "cars", head(cars, 3))
+ 
+ rs <- dbSendStatement(
+   con,
+   "INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)"
+ )
+ dbHasCompleted(rs)
+ dbGetRowsAffected(rs)
+ dbClearResult(rs)
+ dbReadTable(con, "cars")   # there are now 6 rows
+ 
+ # Pass one set of values directly using the param argument:
+ rs <- dbSendStatement(
+   con,
+   "INSERT INTO cars (speed, dist) VALUES (?, ?)",
+   params = list(4L, 5L)
+ )
+ dbClearResult(rs)
+ 
+ # Pass multiple sets of values using dbBind():
+ rs <- dbSendStatement(
+   con,
+   "INSERT INTO cars (speed, dist) VALUES (?, ?)"
+ )
+ dbBind(rs, list(5:6, 6:7))
+ dbBind(rs, list(7L, 8L))
+ dbClearResult(rs)
+ dbReadTable(con, "cars")   # there are now 10 rows
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "cars", head(cars, 3))
> rs <- dbSendStatement(con, "INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)")
> dbHasCompleted(rs)
[1] TRUE
> dbGetRowsAffected(rs)
[1] 3
> dbClearResult(rs)
> dbReadTable(con, "cars")
  speed dist
1     4    2
2     4   10
3     7    4
4     1    1
5     2    2
6     3    3
> rs <- dbSendStatement(con, "INSERT INTO cars (speed, dist) VALUES (?, ?)", 
+     params = list(4L, 5L))
> dbClearResult(rs)
> rs <- dbSendStatement(con, "INSERT INTO cars (speed, dist) VALUES (?, ?)")
> dbBind(rs, list(5:6, 6:7))
> dbBind(rs, list(7L, 8L))
> dbClearResult(rs)
> dbReadTable(con, "cars")
   speed dist
1      4    2
2      4   10
3      7    4
4      1    1
5      2    2
6      3    3
7      4    5
8      5    6
9      6    7
10     7    8
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbUnquoteIdentifier")
> ### * dbUnquoteIdentifier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbUnquoteIdentifier
> ### Title: Unquote identifiers
> ### Aliases: dbUnquoteIdentifier
> 
> ### ** Examples
> 
> # Unquoting allows to understand the structure of a
> # possibly complex quoted identifier
> dbUnquoteIdentifier(
+   ANSI(),
+   SQL(c('"Catalog"."Schema"."Table"', '"Schema"."Table"', '"UnqualifiedTable"'))
+ )
[[1]]
<Id> "Catalog"."Schema"."Table"

[[2]]
<Id> "Schema"."Table"

[[3]]
<Id> "UnqualifiedTable"

> 
> # The returned object is always a list,
> # also for Id objects
> dbUnquoteIdentifier(ANSI(), Id("Catalog", "Schema", "Table"))
[[1]]
<Id> "Catalog"."Schema"."Table"

> 
> # Quoting and unquoting are inverses
> dbQuoteIdentifier(
+   ANSI(),
+   dbUnquoteIdentifier(ANSI(), SQL("UnqualifiedTable"))[[1]]
+ )
<SQL> "UnqualifiedTable"
> 
> dbQuoteIdentifier(
+   ANSI(),
+   dbUnquoteIdentifier(ANSI(), Id("Schema", "Table"))[[1]]
+ )
<SQL> "Schema"."Table"
> 
> 
> 
> cleanEx()
> nameEx("dbWithTransaction")
> ### * dbWithTransaction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbWithTransaction
> ### Title: Self-contained SQL transactions
> ### Aliases: dbWithTransaction dbBreak
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "cash", data.frame(amount = 100))
+ dbWriteTable(con, "account", data.frame(amount = 2000))
+ 
+ # All operations are carried out as logical unit:
+ dbWithTransaction(
+   con,
+   {
+     withdrawal <- 300
+     dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+     dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+   }
+ )
+ 
+ # The code is executed as if in the current environment:
+ withdrawal
+ 
+ # The changes are committed to the database after successful execution:
+ dbReadTable(con, "cash")
+ dbReadTable(con, "account")
+ 
+ # Rolling back with dbBreak():
+ dbWithTransaction(
+   con,
+   {
+     withdrawal <- 5000
+     dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+     dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+     if (dbReadTable(con, "account")$amount < 0) {
+       dbBreak()
+     }
+   }
+ )
+ 
+ # These changes were not committed to the database:
+ dbReadTable(con, "cash")
+ dbReadTable(con, "account")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "cash", data.frame(amount = 100))
> dbWriteTable(con, "account", data.frame(amount = 2000))
> dbWithTransaction(con, {
+     withdrawal <- 300
+     dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+     dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+ })
[1] 1
> withdrawal
[1] 300
> dbReadTable(con, "cash")
  amount
1    400
> dbReadTable(con, "account")
  amount
1   1700
> dbWithTransaction(con, {
+     withdrawal <- 5000
+     dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+     dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+     if (dbReadTable(con, "account")$amount < 0) {
+         dbBreak()
+     }
+ })
> dbReadTable(con, "cash")
  amount
1    400
> dbReadTable(con, "account")
  amount
1   1700
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbWriteTable")
> ### * dbWriteTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbWriteTable
> ### Title: Copy data frames to database tables
> ### Aliases: dbWriteTable
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "mtcars", mtcars[1:5, ])
+ dbReadTable(con, "mtcars")
+ 
+ dbWriteTable(con, "mtcars", mtcars[6:10, ], append = TRUE)
+ dbReadTable(con, "mtcars")
+ 
+ dbWriteTable(con, "mtcars", mtcars[1:10, ], overwrite = TRUE)
+ dbReadTable(con, "mtcars")
+ 
+ # No row names
+ dbWriteTable(con, "mtcars", mtcars[1:10, ], overwrite = TRUE, row.names = FALSE)
+ dbReadTable(con, "mtcars")
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "mtcars", mtcars[1:5, ])
> dbReadTable(con, "mtcars")
   mpg cyl disp  hp drat    wt  qsec vs am gear carb
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
> dbWriteTable(con, "mtcars", mtcars[6:10, ], append = TRUE)
> dbReadTable(con, "mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
> dbWriteTable(con, "mtcars", mtcars[1:10, ], overwrite = TRUE)
> dbReadTable(con, "mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
> dbWriteTable(con, "mtcars", mtcars[1:10, ], overwrite = TRUE, row.names = FALSE)
> dbReadTable(con, "mtcars")
    mpg cyl  disp  hp drat    wt  qsec vs am gear carb
1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dbWriteTableArrow")
> ### * dbWriteTableArrow
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbWriteTableArrow
> ### Title: Copy Arrow objects to database tables
> ### Aliases: dbWriteTableArrow
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE) && requireNamespace("nanoarrow", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTableArrow(con, "mtcars", nanoarrow::as_nanoarrow_array_stream(mtcars[1:5, ]))
+ dbReadTable(con, "mtcars")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-SQL92Keywords")
> ### * dot-SQL92Keywords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .SQL92Keywords
> ### Title: Keywords according to the SQL-92 standard
> ### Aliases: .SQL92Keywords
> ### Keywords: datasets
> 
> ### ** Examples
> 
> "SELECT" %in% .SQL92Keywords
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("rownames")
> ### * rownames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rownames
> ### Title: Convert row names back and forth between columns
> ### Aliases: rownames sqlRownamesToColumn sqlColumnToRownames
> 
> ### ** Examples
> 
> # If have row names
> sqlRownamesToColumn(head(mtcars))
          row_names  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> sqlRownamesToColumn(head(mtcars), FALSE)
   mpg cyl disp  hp drat    wt  qsec vs am gear carb
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> sqlRownamesToColumn(head(mtcars), "ROWNAMES")
           ROWNAMES  mpg cyl disp  hp drat    wt  qsec vs am gear carb
1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> 
> # If don't have
> sqlRownamesToColumn(head(iris))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
> sqlRownamesToColumn(head(iris), TRUE)
  row_names Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1         1          5.1         3.5          1.4         0.2  setosa
2         2          4.9         3.0          1.4         0.2  setosa
3         3          4.7         3.2          1.3         0.2  setosa
4         4          4.6         3.1          1.5         0.2  setosa
5         5          5.0         3.6          1.4         0.2  setosa
6         6          5.4         3.9          1.7         0.4  setosa
> sqlRownamesToColumn(head(iris), "ROWNAMES")
  ROWNAMES Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1        1          5.1         3.5          1.4         0.2  setosa
2        2          4.9         3.0          1.4         0.2  setosa
3        3          4.7         3.2          1.3         0.2  setosa
4        4          4.6         3.1          1.5         0.2  setosa
5        5          5.0         3.6          1.4         0.2  setosa
6        6          5.4         3.9          1.7         0.4  setosa
> 
> 
> 
> cleanEx()
> nameEx("sqlAppendTable")
> ### * sqlAppendTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqlAppendTable
> ### Title: Compose query to insert rows into a table
> ### Aliases: sqlAppendTable sqlAppendTableTemplate
> 
> ### ** Examples
> 
> sqlAppendTable(ANSI(), "iris", head(iris))
Warning: Do not rely on the default value of the row.names argument for sqlAppendTable(), it will change in the future.
<SQL> INSERT INTO "iris"
  ("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
VALUES
  (5.1, 3.5, 1.4, 0.2, 'setosa'),
  (4.9, 3, 1.4, 0.2, 'setosa'),
  (4.7, 3.2, 1.3, 0.2, 'setosa'),
  (4.6, 3.1, 1.5, 0.2, 'setosa'),
  (5, 3.6, 1.4, 0.2, 'setosa'),
  (5.4, 3.9, 1.7, 0.4, 'setosa')
> 
> sqlAppendTable(ANSI(), "mtcars", head(mtcars))
Warning: Do not rely on the default value of the row.names argument for sqlAppendTable(), it will change in the future.
<SQL> INSERT INTO "mtcars"
  ("row_names", "mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
VALUES
  ('Mazda RX4', 21, 6, 160, 110, 3.9, 2.62, 16.46, 0, 1, 4, 4),
  ('Mazda RX4 Wag', 21, 6, 160, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4),
  ('Datsun 710', 22.8, 4, 108, 93, 3.85, 2.32, 18.61, 1, 1, 4, 1),
  ('Hornet 4 Drive', 21.4, 6, 258, 110, 3.08, 3.215, 19.44, 1, 0, 3, 1),
  ('Hornet Sportabout', 18.7, 8, 360, 175, 3.15, 3.44, 17.02, 0, 0, 3, 2),
  ('Valiant', 18.1, 6, 225, 105, 2.76, 3.46, 20.22, 1, 0, 3, 1)
> sqlAppendTable(ANSI(), "mtcars", head(mtcars), row.names = FALSE)
<SQL> INSERT INTO "mtcars"
  ("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
VALUES
  (21, 6, 160, 110, 3.9, 2.62, 16.46, 0, 1, 4, 4),
  (21, 6, 160, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4),
  (22.8, 4, 108, 93, 3.85, 2.32, 18.61, 1, 1, 4, 1),
  (21.4, 6, 258, 110, 3.08, 3.215, 19.44, 1, 0, 3, 1),
  (18.7, 8, 360, 175, 3.15, 3.44, 17.02, 0, 0, 3, 2),
  (18.1, 6, 225, 105, 2.76, 3.46, 20.22, 1, 0, 3, 1)
> sqlAppendTableTemplate(ANSI(), "iris", iris)
Warning: Do not rely on the default value of the `row.names` argument to `sqlAppendTableTemplate()`, it will change in the future.
<SQL> INSERT INTO "iris"
  ("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
VALUES
  (?, ?, ?, ?, ?)
> 
> sqlAppendTableTemplate(ANSI(), "mtcars", mtcars)
Warning: Do not rely on the default value of the `row.names` argument to `sqlAppendTableTemplate()`, it will change in the future.
<SQL> INSERT INTO "mtcars"
  ("row_names", "mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
> sqlAppendTableTemplate(ANSI(), "mtcars", mtcars, row.names = FALSE)
<SQL> INSERT INTO "mtcars"
  ("mpg", "cyl", "disp", "hp", "drat", "wt", "qsec", "vs", "am", "gear", "carb")
VALUES
  (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
> 
> 
> 
> cleanEx()
> nameEx("sqlCreateTable")
> ### * sqlCreateTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqlCreateTable
> ### Title: Compose query to create a simple table
> ### Aliases: sqlCreateTable
> 
> ### ** Examples
> 
> sqlCreateTable(ANSI(), "my-table", c(a = "integer", b = "text"))
Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future.
<SQL> CREATE TABLE "my-table" (
  "a" integer,
  "b" text
)

> sqlCreateTable(ANSI(), "my-table", iris)
Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future.
<SQL> CREATE TABLE "my-table" (
  "Sepal.Length" DOUBLE,
  "Sepal.Width" DOUBLE,
  "Petal.Length" DOUBLE,
  "Petal.Width" DOUBLE,
  "Species" TEXT
)

> 
> # By default, character row names are converted to a row_names colum
> sqlCreateTable(ANSI(), "mtcars", mtcars[, 1:5])
Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future.
<SQL> CREATE TABLE "mtcars" (
  "row_names" TEXT,
  "mpg" DOUBLE,
  "cyl" DOUBLE,
  "disp" DOUBLE,
  "hp" DOUBLE,
  "drat" DOUBLE
)

> sqlCreateTable(ANSI(), "mtcars", mtcars[, 1:5], row.names = FALSE)
<SQL> CREATE TABLE "mtcars" (
  "mpg" DOUBLE,
  "cyl" DOUBLE,
  "disp" DOUBLE,
  "hp" DOUBLE,
  "drat" DOUBLE
)

> 
> 
> 
> cleanEx()
> nameEx("sqlData")
> ### * sqlData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqlData
> ### Title: Convert a data frame into form suitable for upload to an SQL
> ###   database
> ### Aliases: sqlData
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ sqlData(con, head(iris))
+ sqlData(con, head(mtcars))
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> sqlData(con, head(iris))
  Sepal.Length Sepal.Width Petal.Length Petal.Width  Species
1          5.1         3.5          1.4         0.2 'setosa'
2          4.9         3.0          1.4         0.2 'setosa'
3          4.7         3.2          1.3         0.2 'setosa'
4          4.6         3.1          1.5         0.2 'setosa'
5          5.0         3.6          1.4         0.2 'setosa'
6          5.4         3.9          1.7         0.4 'setosa'
> sqlData(con, head(mtcars))
   mpg cyl disp  hp drat    wt  qsec vs am gear carb
1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("sqlInterpolate")
> ### * sqlInterpolate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqlInterpolate
> ### Title: Safely interpolate values into an SQL string
> ### Aliases: sqlInterpolate
> 
> ### ** Examples
> 
> sql <- "SELECT * FROM X WHERE name = ?name"
> sqlInterpolate(ANSI(), sql, name = "Hadley")
<SQL> SELECT * FROM X WHERE name = 'Hadley'
> 
> # This is safe because the single quote has been double escaped
> sqlInterpolate(ANSI(), sql, name = "H'); DROP TABLE--;")
<SQL> SELECT * FROM X WHERE name = 'H''); DROP TABLE--;'
> 
> # Using paste0() could lead to dangerous SQL with carefully crafted inputs
> # (SQL injection)
> name <- "H'); DROP TABLE--;"
> paste0("SELECT * FROM X WHERE name = '", name, "'")
[1] "SELECT * FROM X WHERE name = 'H'); DROP TABLE--;'"
> 
> # Use SQL() or dbQuoteIdentifier() to avoid escaping
> sql2 <- "SELECT * FROM ?table WHERE name in ?names"
> sqlInterpolate(ANSI(), sql2,
+   table = dbQuoteIdentifier(ANSI(), "X"),
+   names = SQL("('a', 'b')")
+ )
<SQL> SELECT * FROM "X" WHERE name in ('a', 'b')
> 
> # Don't use SQL() to escape identifiers to avoid SQL injection
> sqlInterpolate(ANSI(), sql2,
+   table = SQL("X; DELETE FROM X; SELECT * FROM X"),
+   names = SQL("('a', 'b')")
+ )
<SQL> SELECT * FROM X; DELETE FROM X; SELECT * FROM X WHERE name in ('a', 'b')
> 
> # Use dbGetQuery() or dbExecute() to process these queries:
> if (requireNamespace("RSQLite", quietly = TRUE)) {
+   con <- dbConnect(RSQLite::SQLite())
+   sql <- "SELECT ?value AS value"
+   query <- sqlInterpolate(con, sql, value = 3)
+   print(dbGetQuery(con, query))
+   dbDisconnect(con)
+ }
  value
1     3
> 
> 
> 
> cleanEx()
> nameEx("sqlParseVariables")
> ### * sqlParseVariables
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sqlCommentSpec
> ### Title: Parse interpolated variables from SQL.
> ### Aliases: sqlCommentSpec sqlQuoteSpec sqlParseVariablesImpl
> ###   sqlParseVariables
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Use [] for quoting and no comments
> sqlParseVariablesImpl("[?a]",
+   list(sqlQuoteSpec("[", "]", "\\", FALSE)),
+   list()
+ )
$start
integer(0)

$end
integer(0)

> 
> # Standard quotes, use # for commenting
> sqlParseVariablesImpl("# ?a\n?b",
+   list(sqlQuoteSpec("'", "'"), sqlQuoteSpec('"', '"')),
+   list(sqlCommentSpec("#", "\n", FALSE))
+ )
$start
[1] 6

$end
[1] 7

> 
> 
> 
> cleanEx()
> nameEx("transactions")
> ### * transactions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dbBegin
> ### Title: Begin/commit/rollback SQL transactions
> ### Aliases: dbBegin dbCommit dbRollback transactions
> 
> ### ** Examples
> 
> ## Don't show: 
> if (requireNamespace("RSQLite", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ con <- dbConnect(RSQLite::SQLite(), ":memory:")
+ 
+ dbWriteTable(con, "cash", data.frame(amount = 100))
+ dbWriteTable(con, "account", data.frame(amount = 2000))
+ 
+ # All operations are carried out as logical unit:
+ dbBegin(con)
+ withdrawal <- 300
+ dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+ dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+ dbCommit(con)
+ 
+ dbReadTable(con, "cash")
+ dbReadTable(con, "account")
+ 
+ # Rolling back after detecting negative value on account:
+ dbBegin(con)
+ withdrawal <- 5000
+ dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
+ dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
+ if (dbReadTable(con, "account")$amount >= 0) {
+   dbCommit(con)
+ } else {
+   dbRollback(con)
+ }
+ 
+ dbReadTable(con, "cash")
+ dbReadTable(con, "account")
+ 
+ dbDisconnect(con)
+ ## Don't show: 
+ }) # examplesIf
> con <- dbConnect(RSQLite::SQLite(), ":memory:")
> dbWriteTable(con, "cash", data.frame(amount = 100))
> dbWriteTable(con, "account", data.frame(amount = 2000))
> dbBegin(con)
> withdrawal <- 300
> dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
[1] 1
> dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
[1] 1
> dbCommit(con)
> dbReadTable(con, "cash")
  amount
1    400
> dbReadTable(con, "account")
  amount
1   1700
> dbBegin(con)
> withdrawal <- 5000
> dbExecute(con, "UPDATE cash SET amount = amount + ?", list(withdrawal))
[1] 1
> dbExecute(con, "UPDATE account SET amount = amount - ?", list(withdrawal))
[1] 1
> if (dbReadTable(con, "account")$amount >= 0) {
+     dbCommit(con)
+ } else {
+     dbRollback(con)
+ }
> dbReadTable(con, "cash")
  amount
1    400
> dbReadTable(con, "account")
  amount
1   1700
> dbDisconnect(con)
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.79 0.053 0.842 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
