
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "consort"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('consort')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_box")
> ### * add_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_box
> ### Title: Add nodes
> ### Aliases: add_box
> 
> ### ** Examples
> 
> txt1 <- "Population (n=300)"
> txt1_side <- "Excluded (n=15): \n
+               \u2022 MRI not collected (n=3)\n
+               \u2022 Tissues not collected (n=4)\n
+               \u2022 Other (n=8)"
> 
> g <- add_box(txt = txt1)
> 
> g <- add_side_box(g, txt = txt1_side)
> 
> g <- add_box(g, txt = "Randomized (n=200)")
> 
> g <- add_split(g, txt = c("Arm A (n=100)", "Arm B (n=100"))
> g <- add_side_box(g,
+   txt = c(
+     "Excluded (n=15):\n
+                   \u2022 MRI not collected (n=3)\n
+                   \u2022 Tissues not collected (n=4)\n
+                    \u2022 Other (n=8)",
+     "Excluded (n=15):\n
+                    \u2022 MRI not collected (n=3)\n
+                    \u2022 Tissues not collected (n=4)"
+   )
+ )
> 
> g <- add_box(g, txt = c("Final analysis (n=100)", "Final analysis (n=100"))
> g <- add_label_box(g, txt = c("1" = "Screening", "3" = "Randomized", "4" = "Final analysis"))
> 
> 
> 
> cleanEx()
> nameEx("add_label_box")
> ### * add_label_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_label_box
> ### Title: Add a vertically aligned label nodes on the left side.
> ### Aliases: add_label_box
> 
> ### ** Examples
> 
> txt1 <- "Population (n=300)"
> txt1_side <- "Excluded (n=15): \n
+               \u2022 MRI not collected (n=3)\n
+               \u2022 Tissues not collected (n=4)\n
+               \u2022 Other (n=8)"
> 
> g <- add_box(txt = txt1)
> 
> g <- add_side_box(g, txt = txt1_side)
> 
> g <- add_box(g, txt = "Randomized (n=200)")
> 
> g <- add_split(g, txt = c("Arm A (n=100)", "Arm B (n=100"))
> g <- add_side_box(g,
+   txt = c(
+     "Excluded (n=15):\n
+                   \u2022 MRI not collected (n=3)\n
+                   \u2022 Tissues not collected (n=4)\n
+                    \u2022 Other (n=8)",
+     "Excluded (n=15):\n
+                    \u2022 MRI not collected (n=3)\n
+                    \u2022 Tissues not collected (n=4)"
+   )
+ )
> 
> g <- add_box(g, txt = c("Final analysis (n=100)", "Final analysis (n=100"))
> g <- add_label_box(g, txt = c("1" = "Screening", "3" = "Randomized", "4" = "Final analysis"))
> 
> 
> 
> cleanEx()
> nameEx("add_side_box")
> ### * add_side_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_side_box
> ### Title: Add a side node
> ### Aliases: add_side_box
> 
> ### ** Examples
> 
> txt1 <- "Population (n=300)"
> txt1_side <- "Excluded (n=15): \n
+               \u2022 MRI not collected (n=3)\n
+               \u2022 Tissues not collected (n=4)\n
+               \u2022 Other (n=8)"
> 
> g <- add_box(txt = txt1)
> 
> g <- add_side_box(g, txt = txt1_side)
> 
> g <- add_box(g, txt = "Randomized (n=200)")
> 
> g <- add_split(g, txt = c("Arm A (n=100)", "Arm B (n=100"))
> g <- add_side_box(g,
+   txt = c(
+     "Excluded (n=15):\n
+                   \u2022 MRI not collected (n=3)\n
+                   \u2022 Tissues not collected (n=4)\n
+                    \u2022 Other (n=8)",
+     "Excluded (n=15):\n
+                    \u2022 MRI not collected (n=3)\n
+                    \u2022 Tissues not collected (n=4)"
+   )
+ )
> 
> g <- add_box(g, txt = c("Final analysis (n=100)", "Final analysis (n=100"))
> g <- add_label_box(g, txt = c("1" = "Screening", "3" = "Randomized", "4" = "Final analysis"))
> 
> 
> 
> cleanEx()
> nameEx("add_split")
> ### * add_split
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_split
> ### Title: Add a splitting box
> ### Aliases: add_split
> 
> ### ** Examples
> 
> txt1 <- "Population (n=300)"
> txt1_side <- "Excluded (n=15): \n
+               \u2022 MRI not collected (n=3)\n
+               \u2022 Tissues not collected (n=4)\n
+               \u2022 Other (n=8)"
> 
> g <- add_box(txt = txt1)
> 
> g <- add_side_box(g, txt = txt1_side)
> 
> g <- add_box(g, txt = "Randomized (n=200)")
> 
> g <- add_split(g, txt = c("Arm A (n=100)", "Arm B (n=100"))
> g <- add_side_box(g,
+   txt = c(
+     "Excluded (n=15):\n
+                   \u2022 MRI not collected (n=3)\n
+                   \u2022 Tissues not collected (n=4)\n
+                    \u2022 Other (n=8)",
+     "Excluded (n=15):\n
+                    \u2022 MRI not collected (n=3)\n
+                    \u2022 Tissues not collected (n=4)"
+   )
+ )
> 
> g <- add_box(g, txt = c("Final analysis (n=100)", "Final analysis (n=100"))
> g <- add_label_box(g, txt = c("1" = "Screening", "3" = "Randomized", "4" = "Final analysis"))
> 
> 
> 
> cleanEx()
> nameEx("build_grid")
> ### * build_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: build_grid
> ### Title: Build consort diagram
> ### Aliases: build_grid
> 
> ### ** Examples
> 
> ## Not run: 
> ##D txt1 <- "Population (n=300)"
> ##D txt1_side <- "Excluded (n=15): \n
> ##D               \u2022 MRI not collected (n=3)\n
> ##D               \u2022 Tissues not collected (n=4)\n
> ##D               \u2022 Other (n=8)"
> ##D 
> ##D g <- add_box(txt = txt1)
> ##D 
> ##D g <- add_side_box(g, txt = txt1_side)
> ##D 
> ##D g <- add_box(g, txt = "Randomized (n=200)")
> ##D # g <- ggsave("consort_diagram.pdf", plot = build_grid(g))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("build_grviz")
> ### * build_grviz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: build_grviz
> ### Title: Build consort diagram
> ### Aliases: build_grviz
> 
> ### ** Examples
> 
> ## Not run: 
> ##D txt1 <- "Population (n=300)"
> ##D txt1_side <- "Excluded (n=15): \n
> ##D               \u2022 MRI not collected (n=3)\n
> ##D               \u2022 Tissues not collected (n=4)\n
> ##D               \u2022 Other (n=8)"
> ##D 
> ##D g <- add_box(txt = txt1)
> ##D 
> ##D g <- add_side_box(g, txt = txt1_side)
> ##D 
> ##D g <- add_box(g, txt = "Randomized (n=200)")
> ##D # plot(g, grViz = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("connect_box")
> ### * connect_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: connect_box
> ### Title: Connect grob box with arrow.
> ### Aliases: connect_box
> 
> ### ** Examples
> 
> fg1 <- textbox(text = "This is a test")
> fg2 <- textbox(text = "This is an other test", 0.7, 0.2)
> grid::grid.draw(fg1)
> grid::grid.draw(fg2)
> connect_box(fg1, fg2, connect = "bl", type = "p")
lines[GRID.lines.1805] 
> 
> 
> 
> cleanEx()
> nameEx("consort_plot")
> ### * consort_plot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: consort_plot
> ### Title: Self generating consort diagram
> ### Aliases: consort_plot
> 
> ### ** Examples
> 
> 
> ## Prepare test data
> data(dispos.data)
> 
> df <- dispos.data[!dispos.data$arm3 %in% "Trt C", ]
> p <- consort_plot(data = df,
+                   orders = list(c(trialno = "Population"),
+                                 c(exclusion = "Excluded"),
+                                 c(arm     = "Randomized patient"),
+                                 c(arm3     = "", 
+                                   subjid_notdosed="Participants not treated"),
+                                 c(followup    = "Pariticpants planned for follow-up",
+                                   lost_followup = "Reason for tot followed"),
+                                 c(assessed = "Assessed for final outcome"),
+                                 c(no_value = "Reason for not assessed"),
+                                 c(mitt = "Included in the mITT analysis")),
+                   side_box = c("exclusion", "no_value"),
+                   allocation = c("arm", "arm3"),
+                   labels = c("1" = "Screening", "2" = "Randomization",
+                              "5" = "Follow-up", "7" = "Final analysis"),
+                   cex = 0.7)
> 
> 
> 
> cleanEx()
> nameEx("gen_text")
> ### * gen_text
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gen_text
> ### Title: Generate label and bullet points
> ### Aliases: gen_text
> 
> ### ** Examples
> 
> val <- data.frame(
+   am = factor(ifelse(mtcars$am == 1, "Automatic", "Manual"), ordered = TRUE),
+   vs = factor(ifelse(mtcars$vs == 1, "Straight", "V-shaped"), ordered = TRUE),
+   car = row.names(mtcars)
+ )
> 
> gen_text(val$car, label = "Cars in the data")
[1] "Cars in the data (n=32)"
> gen_text(val$car, label = "Cars in the data", bullet = FALSE)
[1] "Cars in the data (n=32)"
> gen_text(split(val$car, val$am), label = "Cars in the data")
[1] "Cars in the data (n=13)" "Cars in the data (n=19)"
> gen_text(split(val$car, val$am), label = "Cars in the data", bullet = FALSE)
[1] "Cars in the data (n=13)" "Cars in the data (n=19)"
> gen_text(split(val[,c("vs", "car")], val$am), label = "Cars in the data", bullet = FALSE)
[1] "Cars in the data (n=13)\nV-shaped (n=6)\n• Ferrari Dino (n=1)\n• Ford Pantera L (n=1)\n• Maserati Bora (n=1)\n• Mazda RX4 (n=1)\n• Mazda RX4 Wag (n=1)\n• Porsche 914-2 (n=1)\nStraight (n=7)\n• Datsun 710 (n=1)\n• Fiat 128 (n=1)\n• Fiat X1-9 (n=1)\n• Honda Civic (n=1)\n• Lotus Europa (n=1)\n• Toyota Corolla (n=1)\n• Volvo 142E (n=1)"                                                                                                                                                  
[2] "Cars in the data (n=19)\nStraight (n=7)\n• Hornet 4 Drive (n=1)\n• Merc 230 (n=1)\n• Merc 240D (n=1)\n• Merc 280 (n=1)\n• Merc 280C (n=1)\n• Toyota Corona (n=1)\n• Valiant (n=1)\nV-shaped (n=12)\n• AMC Javelin (n=1)\n• Cadillac Fleetwood (n=1)\n• Camaro Z28 (n=1)\n• Chrysler Imperial (n=1)\n• Dodge Challenger (n=1)\n• Duster 360 (n=1)\n• Hornet Sportabout (n=1)\n• Lincoln Continental (n=1)\n• Merc 450SE (n=1)\n• Merc 450SL (n=1)\n• Merc 450SLC (n=1)\n• Pontiac Firebird (n=1)"
> gen_text(val[,c("vs", "car")], label = "Cars in the data", bullet = FALSE)
[1] "Cars in the data (n=32)\nV-shaped (n=18)\n• AMC Javelin (n=1)\n• Cadillac Fleetwood (n=1)\n• Camaro Z28 (n=1)\n• Chrysler Imperial (n=1)\n• Dodge Challenger (n=1)\n• Duster 360 (n=1)\n• Ferrari Dino (n=1)\n• Ford Pantera L (n=1)\n• Hornet Sportabout (n=1)\n• Lincoln Continental (n=1)\n• Maserati Bora (n=1)\n• Mazda RX4 (n=1)\n• Mazda RX4 Wag (n=1)\n• Merc 450SE (n=1)\n• Merc 450SL (n=1)\n• Merc 450SLC (n=1)\n• Pontiac Firebird (n=1)\n• Porsche 914-2 (n=1)\nStraight (n=14)\n• Datsun 710 (n=1)\n• Fiat 128 (n=1)\n• Fiat X1-9 (n=1)\n• Honda Civic (n=1)\n• Hornet 4 Drive (n=1)\n• Lotus Europa (n=1)\n• Merc 230 (n=1)\n• Merc 240D (n=1)\n• Merc 280 (n=1)\n• Merc 280C (n=1)\n• Toyota Corolla (n=1)\n• Toyota Corona (n=1)\n• Valiant (n=1)\n• Volvo 142E (n=1)"
> 
> 
> 
> cleanEx()
> nameEx("get_coords")
> ### * get_coords
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_coords
> ### Title: Get the coordinates of the textbox object
> ### Aliases: get_coords
> 
> ### ** Examples
> 
> fg <- textbox(text = "This is a test")
> get_coords(fg)
$left
[1] sum(0.5npc, -3.3065char)

$right
[1] sum(0.5npc, 3.3065char)

$bottom
[1] sum(0.5npc, -0.859char)

$top
[1] sum(0.5npc, 0.859char)

$top.mid
[1] 90grobx 90groby

$left.mid
[1] 180grobx 180groby

$bottom.mid
[1] 90grobx  270groby

$right.mid
[1] 0grobx 0groby

$x
[1] 0.5npc

$y
[1] 0.5npc

$width
[1] 6.613

$height
[1] 1.718

$half_width
[1] 3.3065char

$half_height
[1] 0.859char

> 
> 
> 
> cleanEx()
> nameEx("move_box")
> ### * move_box
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: move_box
> ### Title: Move a box grob
> ### Aliases: move_box
> 
> ### ** Examples
> 
> fg <- textbox(text = "This is a test")
> fg2 <- move_box(fg, 0.3, 0.3)
> 
> 
> 
> cleanEx()
> nameEx("textbox")
> ### * textbox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: textbox
> ### Title: Create a box with text
> ### Aliases: textbox grid.textbox
> 
> ### ** Examples
> 
> fg <- textbox(text = "This is a test")
> grid::grid.draw(fg)
> grid.textbox(text = "This is a test")
> grid.textbox(text = "This is a test")
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.546 0.011 1.556 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
