
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "reactable"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('reactable')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("colDef")
> ### * colDef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colDef
> ### Title: Column definitions
> ### Aliases: colDef
> 
> ### ** Examples
> 
> reactable(
+   iris,
+   columns = list(
+     Sepal.Length = colDef(name = "Sepal Length"),
+     Sepal.Width = colDef(filterable = TRUE),
+     Petal.Length = colDef(show = FALSE),
+     Petal.Width = colDef(defaultSortOrder = "desc")
+   )
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("colFormat")
> ### * colFormat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colFormat
> ### Title: Column formatting options
> ### Aliases: colFormat
> 
> ### ** Examples
> 
> data <- data.frame(
+   price_USD = c(123456.56, 132, 5650.12),
+   price_INR = c(350, 23208.552, 1773156.4),
+   number_FR = c(123456.56, 132, 5650.12),
+   temp = c(22, NA, 31),
+   percent = c(0.9525556, 0.5, 0.112),
+   date = as.Date(c("2019-01-02", "2019-03-15", "2019-09-22"))
+ )
> 
> reactable(data, columns = list(
+   price_USD = colDef(format = colFormat(prefix = "$", separators = TRUE, digits = 2)),
+   price_INR = colDef(format = colFormat(currency = "INR", separators = TRUE, locales = "hi-IN")),
+   number_FR = colDef(format = colFormat(locales = "fr-FR")),
+   temp = colDef(format = colFormat(suffix = " \u00b0C")),
+   percent = colDef(format = colFormat(percent = TRUE, digits = 1)),
+   date = colDef(format = colFormat(date = TRUE, locales = "en-GB"))
+ ))
> 
> # Date formatting
> datetimes <- as.POSIXct(c("2019-01-02 3:22:15", "2019-03-15 09:15:55", "2019-09-22 14:20:00"))
> data <- data.frame(
+   datetime = datetimes,
+   date = datetimes,
+   time = datetimes,
+   time_24h = datetimes,
+   datetime_pt_BR = datetimes
+ )
> 
> reactable(data, columns = list(
+   datetime = colDef(format = colFormat(datetime = TRUE)),
+   date = colDef(format = colFormat(date = TRUE)),
+   time = colDef(format = colFormat(time = TRUE)),
+   time_24h = colDef(format = colFormat(time = TRUE, hour12 = FALSE)),
+   datetime_pt_BR = colDef(format = colFormat(datetime = TRUE, locales = "pt-BR"))
+ ))
> 
> # Currency formatting
> data <- data.frame(
+   USD = c(12.12, 2141.213, 0.42, 1.55, 34414),
+   EUR = c(10.68, 1884.27, 0.37, 1.36, 30284.32),
+   INR = c(861.07, 152122.48, 29.84, 110, 2444942.63),
+   JPY = c(1280, 226144, 44.36, 164, 3634634.61),
+   MAD = c(115.78, 20453.94, 4.01, 15, 328739.73)
+ )
> 
> reactable(data, columns = list(
+   USD = colDef(
+     format = colFormat(currency = "USD", separators = TRUE, locales = "en-US")
+   ),
+   EUR = colDef(
+     format = colFormat(currency = "EUR", separators = TRUE, locales = "de-DE")
+   ),
+   INR = colDef(
+     format = colFormat(currency = "INR", separators = TRUE, locales = "hi-IN")
+   ),
+   JPY = colDef(
+     format = colFormat(currency = "JPY", separators = TRUE, locales = "ja-JP")
+   ),
+   MAD = colDef(
+     format = colFormat(currency = "MAD", separators = TRUE, locales = "ar-MA")
+   )
+ ))
> 
> # Formatting aggregated cells
> data <- data.frame(
+   States = state.name,
+   Region = state.region,
+   Area = state.area
+ )
> 
> reactable(
+   data,
+   groupBy = "Region",
+   columns = list(
+     States = colDef(
+       aggregate = "count",
+       format = list(
+         aggregated = colFormat(suffix = " states")
+       )
+     ),
+     Area = colDef(
+       aggregate = "sum",
+       format = colFormat(suffix = " mi\u00b2", separators = TRUE)
+     )
+   )
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("colGroup")
> ### * colGroup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colGroup
> ### Title: Column group definitions
> ### Aliases: colGroup
> 
> ### ** Examples
> 
> reactable(
+   iris,
+   columns = list(
+     Sepal.Length = colDef(name = "Length"),
+     Sepal.Width = colDef(name = "Width"),
+     Petal.Length = colDef(name = "Length"),
+     Petal.Width = colDef(name = "Width")
+   ),
+   columnGroups = list(
+     colGroup(name = "Sepal", columns = c("Sepal.Length", "Sepal.Width")),
+     colGroup(name = "Petal", columns = c("Petal.Length", "Petal.Width"))
+   )
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("getReactableState")
> ### * getReactableState
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getReactableState
> ### Title: Get the state of a reactable instance
> ### Aliases: getReactableState
> 
> ### ** Examples
> 
> # Run in an interactive R session
> if (interactive()) {
+ 
+ library(shiny)
+ library(reactable)
+ library(htmltools)
+ 
+ ui <- fluidPage(
+   actionButton("prev_page_btn", "Previous page"),
+   actionButton("next_page_btn", "Next page"),
+   reactableOutput("table"),
+   verbatimTextOutput("table_state"),
+   uiOutput("selected_row_details")
+ )
+ 
+ server <- function(input, output) {
+   output$table <- renderReactable({
+     reactable(
+       MASS::Cars93[, 1:5],
+       showPageSizeOptions = TRUE,
+       selection = "multiple",
+       onClick = "select"
+     )
+   })
+ 
+   output$table_state <- renderPrint({
+     state <- req(getReactableState("table"))
+     print(state)
+   })
+ 
+   observeEvent(input$prev_page_btn, {
+     # Change to the previous page
+     page <- getReactableState("table", "page")
+     if (page > 1) {
+       updateReactable("table", page = page - 1)
+     }
+   })
+ 
+   observeEvent(input$next_page_btn, {
+     # Change to the next page
+     state <- getReactableState("table")
+     if (state$page < state$pages) {
+       updateReactable("table", page = state$page + 1)
+     }
+   })
+ 
+   output$selected_row_details <- renderUI({
+     selected <- getReactableState("table", "selected")
+     req(selected)
+     details <- MASS::Cars93[selected, -c(1:5)]
+     tagList(
+       h2("Selected row details"),
+       tags$pre(
+         paste(capture.output(print(details, width = 1200)), collapse = "\n")
+       )
+     )
+   })
+ }
+ 
+ shinyApp(ui, server)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("reactable-shiny")
> ### * reactable-shiny
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reactable-shiny
> ### Title: Shiny bindings for reactable
> ### Aliases: reactable-shiny reactableOutput renderReactable
> 
> ### ** Examples
> 
> # Run in an interactive R session
> if (interactive()) {
+ 
+ library(shiny)
+ library(reactable)
+ 
+ ui <- fluidPage(
+  titlePanel("reactable example"),
+  reactableOutput("table")
+ )
+ 
+ server <- function(input, output, session) {
+   output$table <- renderReactable({
+    reactable(iris)
+  })
+ }
+ 
+ shinyApp(ui, server)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("reactable")
> ### * reactable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reactable
> ### Title: Create an interactive data table
> ### Aliases: reactable
> 
> ### ** Examples
> 
> # Basic usage
> reactable(iris)
> 
> # Grouping and aggregation
> reactable(
+   iris,
+   groupBy = "Species",
+   columns = list(
+     Sepal.Length = colDef(aggregate = "count"),
+     Sepal.Width = colDef(aggregate = "mean"),
+     Petal.Length = colDef(aggregate = "sum"),
+     Petal.Width = colDef(aggregate = "max")
+   )
+ )
> 
> # Row details
> reactable(iris, details = function(index) {
+   htmltools::div(
+     "Details for row: ", index,
+     htmltools::tags$pre(paste(capture.output(iris[index, ]), collapse = "\n"))
+   )
+ })
> 
> # Conditional styling
> reactable(sleep, columns = list(
+   extra = colDef(style = function(value) {
+     if (value > 0) {
+       color <- "green"
+     } else if (value < 0) {
+       color <- "red"
+     } else {
+       color <- "#777"
+     }
+     list(color = color, fontWeight = "bold")
+   })
+ ))
> 
> 
> 
> 
> cleanEx()
> nameEx("reactableLang")
> ### * reactableLang
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reactableLang
> ### Title: Language options
> ### Aliases: reactableLang
> 
> ### ** Examples
> 
> reactable(
+   iris[1:30, ],
+   searchable = TRUE,
+   paginationType = "simple",
+   language = reactableLang(
+     searchPlaceholder = "Search...",
+     noData = "No entries found",
+     pageInfo = "{rowStart}\u2013{rowEnd} of {rows} entries",
+     pagePrevious = "\u276e",
+     pageNext = "\u276f",
+ 
+     # Accessible labels for assistive technology, such as screen readers
+     pagePreviousLabel = "Previous page",
+     pageNextLabel = "Next page"
+   )
+ )
> 
> # Set the default language for all tables
> options(reactable.language = reactableLang(
+   searchPlaceholder = "Search...",
+   noData = "No entries found",
+   pageInfo = "{rowStart} to {rowEnd} of {rows} entries"
+ ))
> 
> reactable(iris[1:30, ], searchable = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("reactableTheme")
> ### * reactableTheme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reactableTheme
> ### Title: Theme options
> ### Aliases: reactableTheme
> 
> ### ** Examples
> 
> reactable(
+   iris[1:30, ],
+   searchable = TRUE,
+   striped = TRUE,
+   highlight = TRUE,
+   bordered = TRUE,
+   theme = reactableTheme(
+     borderColor = "#dfe2e5",
+     stripedColor = "#f6f8fa",
+     highlightColor = "#f0f5f9",
+     cellPadding = "8px 12px",
+     style = list(
+       fontFamily = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif"
+     ),
+     searchInputStyle = list(width = "100%")
+   )
+ )
> 
> # Set the default theme for all tables
> options(reactable.theme = reactableTheme(
+   color = "hsl(233, 9%, 87%)",
+   backgroundColor = "hsl(233, 9%, 19%)",
+   borderColor = "hsl(233, 9%, 22%)",
+   stripedColor = "hsl(233, 12%, 22%)",
+   highlightColor = "hsl(233, 12%, 24%)",
+   inputStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
+   selectStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
+   pageButtonHoverStyle = list(backgroundColor = "hsl(233, 9%, 25%)"),
+   pageButtonActiveStyle = list(backgroundColor = "hsl(233, 9%, 28%)")
+ ))
> 
> reactable(
+   iris[1:30, ],
+   filterable = TRUE,
+   showPageSizeOptions = TRUE,
+   striped = TRUE,
+   highlight = TRUE,
+   details = function(index) paste("Details for row", index)
+ )
> 
> # Use nested selectors to highlight headers when sorting
> reactable(
+   iris[1:30, ],
+   columns = list(Sepal.Length = colDef(sortable = FALSE)),
+   showSortable = TRUE,
+   theme = reactableTheme(
+     headerStyle = list(
+       "&:hover[aria-sort]" = list(background = "hsl(0, 0%, 96%)"),
+       "&[aria-sort='ascending'], &[aria-sort='descending']" = list(background = "hsl(0, 0%, 96%)"),
+       borderColor = "#555"
+     )
+   )
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("updateReactable")
> ### * updateReactable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: updateReactable
> ### Title: Update a reactable instance
> ### Aliases: updateReactable
> 
> ### ** Examples
> 
> # Run in an interactive R session
> if (interactive()) {
+ 
+ library(shiny)
+ library(reactable)
+ 
+ data <- MASS::Cars93[, 1:7]
+ 
+ ui <- fluidPage(
+   actionButton("select_btn", "Select rows"),
+   actionButton("clear_btn", "Clear selection"),
+   actionButton("expand_btn", "Expand rows"),
+   actionButton("collapse_btn", "Collapse rows"),
+   actionButton("page_btn", "Change page"),
+   selectInput("filter_type", "Filter type", unique(data$Type), multiple = TRUE),
+   reactableOutput("table")
+ )
+ 
+ server <- function(input, output) {
+   output$table <- renderReactable({
+     reactable(
+       data,
+       filterable = TRUE,
+       searchable = TRUE,
+       selection = "multiple",
+       details = function(index) paste("Details for row:", index)
+     )
+   })
+ 
+   observeEvent(input$select_btn, {
+     # Select rows
+     updateReactable("table", selected = c(1, 3, 5))
+   })
+ 
+   observeEvent(input$clear_btn, {
+     # Clear row selection
+     updateReactable("table", selected = NA)
+   })
+ 
+   observeEvent(input$expand_btn, {
+     # Expand all rows
+     updateReactable("table", expanded = TRUE)
+   })
+ 
+   observeEvent(input$collapse_btn, {
+     # Collapse all rows
+     updateReactable("table", expanded = FALSE)
+   })
+ 
+   observeEvent(input$page_btn, {
+     # Change current page
+     updateReactable("table", page = 3)
+   })
+ 
+   observe({
+     # Filter data
+     filtered <- if (length(input$filter_type) > 0) {
+       data[data$Type %in% input$filter_type, ]
+     } else {
+       data
+     }
+     updateReactable("table", data = filtered)
+   })
+ }
+ 
+ shinyApp(ui, server)
+ }
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.721 0.106 0.828 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
