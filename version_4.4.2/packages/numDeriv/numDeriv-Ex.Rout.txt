
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "numDeriv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('numDeriv')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("genD")
> ### * genD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: genD
> ### Title: Generate Bates and Watts D Matrix
> ### Aliases: genD genD.default
> ### Keywords: multivariate
> 
> ### ** Examples
> 
>     func <- function(x){c(x[1], x[1], x[2]^2)}
>     z <- genD(func, c(2,2,5))
> 
> 
> 
> cleanEx()
> nameEx("grad")
> ### * grad
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: grad
> ### Title: Numerical Gradient of a Function
> ### Aliases: grad grad.default
> ### Keywords: multivariate
> 
> ### ** Examples
> 
>   grad(sin, pi)
[1] -1
>   grad(sin, (0:10)*2*pi/10)
 [1]  1.000000  0.809017  0.309017 -0.309017 -0.809017 -1.000000 -0.809017
 [8] -0.309017  0.309017  0.809017  1.000000
>   func0 <- function(x){ sum(sin(x))  }
>   grad(func0 , (0:10)*2*pi/10)
 [1]  1.000000  0.809017  0.309017 -0.309017 -0.809017 -1.000000 -0.809017
 [8] -0.309017  0.309017  0.809017  1.000000
> 
>   func1 <- function(x){ sin(10*x) - exp(-x) }
> 
>   curve(func1,from=0,to=5)
> 
>   x <- 2.04
>   numd1 <- grad(func1, x)
>   exact <- 10*cos(10*x) + exp(-x)
>   c(numd1, exact, (numd1 - exact)/exact)
[1] 3.335371e-01 3.335371e-01 8.469043e-12
> 
>   x <- c(1:10)
>   numd1 <- grad(func1, x)
>   numd2 <- grad(func1, x, "complex")
>   exact <- 10*cos(10*x) + exp(-x)
>   cbind(numd1, numd2, exact, (numd1 - exact)/exact, (numd2 - exact)/exact)
          numd1     numd2     exact                
 [1,] -8.022836 -8.022836 -8.022836  6.118294e-12 0
 [2,]  4.216156  4.216156  4.216156  6.271159e-12 0
 [3,]  1.592302  1.592302  1.592302 -3.506859e-12 0
 [4,] -6.651065 -6.651065 -6.651065  6.698464e-12 0
 [5,]  9.656398  9.656398  9.656398 -7.891732e-13 0
 [6,] -9.521651 -9.521651 -9.521651 -4.609705e-12 0
 [7,]  6.334104  6.334104  6.334104  1.243051e-11 0
 [8,] -1.103537 -1.103537 -1.103537  6.092893e-12 0
 [9,] -4.480613 -4.480613 -4.480613  1.524366e-12 0
[10,]  8.623234  8.623234  8.623234 -8.120386e-13 0
> 
>   sc2.f <- function(x){
+     n <- length(x)
+     sum((1:n) * (exp(x) - x)) / n
+     }
> 
>   sc2.g <- function(x){
+     n <- length(x)
+     (1:n) * (exp(x) - 1) / n
+     }
> 
>   x0 <- rnorm(100)
>   exact <- sc2.g(x0)
> 
>   g <- grad(func=sc2.f, x=x0)
>   max(abs(exact - g)/(1 + abs(exact)))
[1] 3.53167e-07
> 
>   gc <- grad(func=sc2.f, x=x0, method="complex")
>   max(abs(exact - gc)/(1 + abs(exact)))
[1] 0
> 
>   f <- function(x) if(x[1]<=0) sum(sin(x)) else  NA
>   grad(f, x=c(0,0), method="Richardson", side=c(-1,  1))
[1] 1 1
> 
> 
> 
> cleanEx()
> nameEx("hessian")
> ### * hessian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hessian
> ### Title: Calculate Hessian Matrix
> ### Aliases: hessian hessian.default
> ### Keywords: multivariate
> 
> ### ** Examples
> 
>   sc2.f <- function(x){
+     n <- length(x)
+     sum((1:n) * (exp(x) - x)) / n
+     }
> 
>   sc2.g <- function(x){
+     n <- length(x)
+     (1:n) * (exp(x) - 1) / n
+     }
> 
>   x0 <- rnorm(5)
>   hess <- hessian(func=sc2.f, x=x0)
>   hessc <- hessian(func=sc2.f, x=x0, "complex")
>   all.equal(hess, hessc, tolerance = .Machine$double.eps)
[1] "Mean relative difference: 7.298196e-11"
>   
> #  Hessian = Jacobian of the gradient
>   jac  <- jacobian(func=sc2.g, x=x0)
>   jacc <- jacobian(func=sc2.g, x=x0, "complex")
>   all.equal(hess, jac, tolerance = .Machine$double.eps)
[1] "Mean relative difference: 6.559322e-11"
>   all.equal(hessc, jacc, tolerance = .Machine$double.eps)
[1] "Mean relative difference: 4.602172e-15"
> 
> 
> 
> cleanEx()
> nameEx("jacobian")
> ### * jacobian
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jacobian
> ### Title: Gradient of a Vector Valued Function
> ### Aliases: jacobian jacobian.default
> ### Keywords: multivariate
> 
> ### ** Examples
> 
>    func2 <- function(x) c(sin(x), cos(x))
>    x <- (0:1)*2*pi
>    jacobian(func2, x)
     [,1] [,2]
[1,]    1    0
[2,]    0    1
[3,]    0    0
[4,]    0    0
>    jacobian(func2, x, "complex")
     [,1]         [,2]
[1,]    1 0.000000e+00
[2,]    0 1.000000e+00
[3,]    0 0.000000e+00
[4,]    0 2.449294e-16
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.089 0.01 0.099 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
