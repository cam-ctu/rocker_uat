
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "plotly"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('plotly')
Loading required package: ggplot2

Attaching package: ‘plotly’

The following object is masked from ‘package:ggplot2’:

    last_plot

The following object is masked from ‘package:stats’:

    filter

The following object is masked from ‘package:graphics’:

    layout

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("TeX")
> ### * TeX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: TeX
> ### Title: Render TeX in a plotly graph using MathJax
> ### Aliases: TeX
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>%
+   layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>%
+   config(mathjax = "cdn")
+ ## Don't show: 
+ }) # examplesIf
> plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>% layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>% 
+     config(mathjax = "cdn")
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("add_data")
> ### * add_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_data
> ### Title: Add data to a plotly visualization
> ### Aliases: add_data
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ plot_ly() %>% add_data(economics) %>% add_trace(x = ~date, y = ~pce)
+ ## Don't show: 
+ }) # examplesIf
> plot_ly() %>% add_data(economics) %>% add_trace(x = ~date, y = ~pce)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("add_trace")
> ### * add_trace
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_trace
> ### Title: Add trace(s) to a plotly visualization
> ### Aliases: add_trace add_markers add_text add_paths add_lines
> ###   add_segments add_polygons add_sf add_table add_ribbons add_image
> ###   add_area add_pie add_bars add_histogram add_histogram2d
> ###   add_histogram2dcontour add_heatmap add_contour add_boxplot
> ###   add_surface add_mesh add_scattergeo add_choropleth
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # the `plot_ly()` function initiates an object, and if no trace type
+ # is specified, it sets a sensible default
+ p <- plot_ly(economics, x = ~date, y = ~uempmed)
+ p
+ 
+ # some `add_*()` functions are a specific case of a trace type
+ # for example, `add_markers()` is a scatter trace with mode of markers
+ add_markers(p)
+ 
+ # scatter trace with mode of text
+ add_text(p, text = "%")
+ 
+ # scatter trace with mode of lines 
+ add_paths(p)
+ 
+ # like `add_paths()`, but ensures points are connected according to `x`
+ add_lines(p)
+ 
+ # if you prefer to work with plotly.js more directly, can always
+ # use `add_trace()` and specify the type yourself
+ add_trace(p, type = "scatter", mode = "markers+lines")
+ 
+ # mappings provided to `plot_ly()` are "global", but can be overwritten
+ plot_ly(economics, x = ~date, y = ~uempmed, color = I("red"), showlegend = FALSE) %>% 
+   add_lines() %>%
+   add_markers(color = ~pop)
+ 
+ # a number of `add_*()` functions are special cases of the scatter trace
+ plot_ly(economics, x = ~date) %>% 
+   add_ribbons(ymin = ~pce - 1e3, ymax = ~pce + 1e3)
+ 
+ # use `group_by()` (or `group2NA()`) to apply visual mapping
+ # once per group (e.g. one line per group)
+ txhousing %>% 
+   group_by(city) %>% 
+   plot_ly(x = ~date, y = ~median) %>%
+   add_lines(color = I("black"))
+ 
+ ## Not run: 
+ ##D # use `add_sf()` or `add_polygons()` to create geo-spatial maps
+ ##D # http://blog.cpsievert.me/2018/03/30/visualizing-geo-spatial-data-with-sf-and-plotly/
+ ##D if (requireNamespace("sf", quietly = TRUE)) {
+ ##D   nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
+ ##D   plot_ly() %>% add_sf(data = nc)
+ ##D }
+ ##D 
+ ##D # univariate summary statistics
+ ##D plot_ly(mtcars, x = ~factor(vs), y = ~mpg) %>% 
+ ##D   add_boxplot()
+ ##D plot_ly(mtcars, x = ~factor(vs), y = ~mpg) %>% 
+ ##D   add_trace(type = "violin")
+ ##D   
+ ##D # `add_histogram()` does binning for you...
+ ##D mtcars %>%
+ ##D   plot_ly(x = ~factor(vs)) %>%
+ ##D   add_histogram()
+ ##D   
+ ##D # ...but you can 'pre-compute' bar heights in R
+ ##D mtcars %>%
+ ##D   dplyr::count(vs) %>%
+ ##D   plot_ly(x = ~vs, y = ~n) %>%
+ ##D   add_bars()
+ ##D 
+ ##D # the 2d analogy of add_histogram() is add_histogram2d()/add_histogram2dcontour()
+ ##D library(MASS)
+ ##D (p <- plot_ly(geyser, x = ~waiting, y = ~duration))
+ ##D add_histogram2d(p)
+ ##D add_histogram2dcontour(p)
+ ##D 
+ ##D # the 2d analogy of add_bars() is add_heatmap()/add_contour()
+ ##D # (i.e., bin counts must be pre-specified)
+ ##D den <- kde2d(geyser$waiting, geyser$duration)
+ ##D p <- plot_ly(x = den$x, y = den$y, z = den$z)
+ ##D add_heatmap(p)
+ ##D add_contour(p)
+ ##D 
+ ##D # `add_table()` makes it easy to map a data frame to the table trace type
+ ##D plot_ly(economics) %>% 
+ ##D   add_table()
+ ##D 
+ ##D # pie charts!
+ ##D ds <- data.frame(labels = c("A", "B", "C"), values = c(10, 40, 60))
+ ##D plot_ly(ds, labels = ~labels, values = ~values) %>%
+ ##D   add_pie() %>%
+ ##D   layout(title = "Basic Pie Chart using Plotly")
+ ##D   
+ ##D data(wind)
+ ##D plot_ly(wind, r = ~r, theta = ~t) %>% 
+ ##D   add_area(color = ~nms) %>%
+ ##D   layout(
+ ##D     polar = list(
+ ##D       radialaxis = list(ticksuffix = "%"), 
+ ##D       angularaxis = list(rotation = 90)
+ ##D     )
+ ##D   )
+ ##D 
+ ##D # ------------------------------------------------------------
+ ##D # 3D chart types
+ ##D # ------------------------------------------------------------
+ ##D plot_ly(z = ~volcano) %>% 
+ ##D   add_surface()
+ ##D plot_ly(x = c(0, 0, 1), y = c(0, 1, 0), z = c(0, 0, 0)) %>% 
+ ##D   add_mesh()
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(economics, x = ~date, y = ~uempmed)
> p
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> add_markers(p)
> add_text(p, text = "%")
> add_paths(p)
> add_lines(p)
> add_trace(p, type = "scatter", mode = "markers+lines")
> plot_ly(economics, x = ~date, y = ~uempmed, color = I("red"), showlegend = FALSE) %>% 
+     add_lines() %>% add_markers(color = ~pop)
> plot_ly(economics, x = ~date) %>% add_ribbons(ymin = ~pce - 1000, ymax = ~pce + 
+     1000)
> txhousing %>% group_by(city) %>% plot_ly(x = ~date, y = ~median) %>% add_lines(color = I("black"))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("animation")
> ### * animation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: animation_opts
> ### Title: Animation configuration options
> ### Aliases: animation_opts animation animation_slider animation_button
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ df <- data.frame(
+   x = c(1, 2, 2, 1, 1, 2),
+   y = c(1, 2, 2, 1, 1, 2),
+   z = c(1, 1, 2, 2, 3, 3)
+ )
+ plot_ly(df) %>%
+   add_markers(x = 1.5, y = 1.5) %>%
+   add_markers(x = ~x, y = ~y, frame = ~z)
+ 
+ # it's a good idea to remove smooth transitions when there is
+ # no relationship between objects in each view
+ plot_ly(mtcars, x = ~wt, y = ~mpg, frame = ~cyl) %>%
+   animation_opts(transition = 0)
+ 
+ # works the same way with ggplotly
+ if (interactive()) {
+   p <- ggplot(txhousing, aes(month, median)) +
+     geom_line(aes(group = year), alpha = 0.3) +
+     geom_smooth() +
+     geom_line(aes(frame = year, ids = month), color = "red") +
+     facet_wrap(~ city)
+  
+   ggplotly(p, width = 1200, height = 900) %>%
+     animation_opts(1000)
+ }
+ 
+   
+ #' # for more, see https://plotly.com/r/animating-views.html
+ ## Don't show: 
+ }) # examplesIf
> df <- data.frame(x = c(1, 2, 2, 1, 1, 2), y = c(1, 2, 2, 1, 1, 2), z = c(1, 
+     1, 2, 2, 3, 3))
> plot_ly(df) %>% add_markers(x = 1.5, y = 1.5) %>% add_markers(x = ~x, 
+     y = ~y, frame = ~z)
> plot_ly(mtcars, x = ~wt, y = ~mpg, frame = ~cyl) %>% animation_opts(transition = 0)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> if (interactive()) {
+     p <- ggplot(txhousing, aes(month, median)) + geom_line(aes(group = year), alpha = 0.3) + 
+         geom_smooth() + geom_line(aes(frame = year, ids = month), color = "red") + 
+         facet_wrap(~city)
+     ggplotly(p, width = 1200, height = 900) %>% animation_opts(1000)
+ }
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("api")
> ### * api
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: api_create
> ### Title: Tools for working with plotly's REST API (v2)
> ### Aliases: api_create api_create.plotly api_create.ggplot
> ###   api_create.data.frame api_download_plot api_download_grid api
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D 
+ ##D # ------------------------------------------------------------
+ ##D # api_create() makes it easy to upload ggplot2/plotly objects
+ ##D # and/or data frames to your plotly account
+ ##D # ------------------------------------------------------------
+ ##D 
+ ##D # A data frame creates a plotly "grid". Printing one will take you 
+ ##D # to the it's web address so you can start creating!
+ ##D (m <- api_create(mtcars))
+ ##D 
+ ##D # A plotly/ggplot2 object create a plotly "plot".
+ ##D p <- plot_ly(mtcars, x = ~factor(vs))
+ ##D (r <- api_create(p))
+ ##D 
+ ##D # api_create() returns metadata about the remote "file". Here is
+ ##D # one way you could use that metadata to download a plot for local use:
+ ##D fileID <- strsplit(r$file$fid, ":")[[1]]
+ ##D layout(
+ ##D   api_download_plot(fileID[2], fileID[1]),
+ ##D   title = sprintf("Local version of <a href='%s'>this</a> plot", r$file$web_url)
+ ##D )
+ ##D 
+ ##D ------------------------------------------------------------
+ ##D # The api() function provides a low-level interface for performing 
+ ##D # any action at any endpoint! It always returns a list.
+ ##D # ------------------------------------------------------------
+ ##D 
+ ##D # list all the endpoints
+ ##D api()
+ ##D 
+ ##D # search the entire platform!
+ ##D # see https://api.plot.ly/v2/search
+ ##D api("search?q=overdose")
+ ##D api("search?q=plottype:pie trump fake")
+ ##D 
+ ##D # these examples will require a user account
+ ##D usr <- Sys.getenv("plotly_username", NA)
+ ##D if (!is.na(usr)) {
+ ##D   # your account info https://api.plot.ly/v2/#users
+ ##D   api(sprintf("users/%s", usr))
+ ##D   # your folders/files https://api.plot.ly/v2/folders#user
+ ##D   api(sprintf("folders/home?user=%s", usr))
+ ##D }
+ ##D 
+ ##D # Retrieve a specific file https://api.plot.ly/v2/files#retrieve
+ ##D api("files/cpsievert:14681")
+ ##D 
+ ##D # change the filename https://api.plot.ly/v2/files#update
+ ##D # (note: this won't work unless you have proper credentials to the relevant account)
+ ##D api("files/cpsievert:14681", "PATCH", list(filename = "toy file")) 
+ ##D 
+ ##D # Copy a file https://api.plot.ly/v2/files#lookup
+ ##D api("files/cpsievert:14681/copy", "POST")
+ ##D 
+ ##D # Create a folder https://api.plot.ly/v2/folders#create
+ ##D api("folders", "POST", list(path = "/starts/at/root/and/ends/here"))
+ ##D 
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("as_widget")
> ### * as_widget
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_widget
> ### Title: Convert a list to a plotly htmlwidget object
> ### Aliases: as_widget
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ trace <- list(x = 1, y = 1)
+ obj <- list(data = list(trace), layout = list(title = "my plot"))
+ as_widget(obj)
+ ## Don't show: 
+ }) # examplesIf
> trace <- list(x = 1, y = 1)
> obj <- list(data = list(trace), layout = list(title = "my plot"))
> as_widget(obj)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("colorbar")
> ### * colorbar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: colorbar
> ### Title: Modify the colorbar
> ### Aliases: colorbar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~mpg, color = ~cyl)
+ 
+ # pass any colorbar attribute -- 
+ # https://plotly.com/r/reference/#scatter-marker-colorbar
+ colorbar(p, len = 0.5)
+ 
+ # Expand the limits of the colorbar
+ colorbar(p, limits = c(0, 20))
+ # values outside the colorbar limits are considered "missing"
+ colorbar(p, limits = c(5, 6))
+ 
+ # also works on colorbars generated via a z value
+ corr <- cor(diamonds[vapply(diamonds, is.numeric, logical(1))])
+ plot_ly(x = rownames(corr), y = colnames(corr), z = corr) %>%
+  add_heatmap() %>%
+  colorbar(limits = c(-1, 1))
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~mpg, color = ~cyl)
> colorbar(p, len = 0.5)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> colorbar(p, limits = c(0, 20))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> colorbar(p, limits = c(5, 6))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> corr <- cor(diamonds[vapply(diamonds, is.numeric, logical(1))])
> plot_ly(x = rownames(corr), y = colnames(corr), z = corr) %>% add_heatmap() %>% 
+     colorbar(limits = c(-1, 1))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("config")
> ### * config
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: config
> ### Title: Set the default configuration for plotly
> ### Aliases: config
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # remove the plotly logo and collaborate button from modebar
+ config(plot_ly(), displaylogo = FALSE, collaborate = FALSE)
+ 
+ # enable mathjax
+ # see more examples at https://plotly.com/r/LaTeX/
+ plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>%
+   layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>%
+   config(mathjax = "cdn")
+ 
+ # change the language used to render date axes and on-graph text 
+ # (e.g., modebar buttons)
+ today <- Sys.Date()
+ x <- seq.Date(today, today + 360, by = "day")
+ p <- plot_ly(x = x, y = rnorm(length(x))) %>%
+   add_lines()
+ 
+ # japanese
+ config(p, locale = "ja")
+ # german
+ config(p, locale = "de")
+ # spanish
+ config(p, locale = "es")
+ # chinese
+ config(p, locale = "zh-CN")
+ ## Don't show: 
+ }) # examplesIf
> config(plot_ly(), displaylogo = FALSE, collaborate = FALSE)
Warning in config(plot_ly(), displaylogo = FALSE, collaborate = FALSE) :
  The collaborate button is no longer supported
Warning: No trace type specified and no positional attributes specified
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
Warning: 'config' objects don't have these attributes: 'collaborate'
Valid attributes include:
'autosizable', 'displaylogo', 'displayModeBar', 'doubleClick', 'doubleClickDelay', 'editable', 'edits', 'fillFrame', 'frameMargins', 'globalTransforms', 'linkText', 'locale', 'locales', 'logging', 'mapboxAccessToken', 'modeBarButtons', 'modeBarButtonsToAdd', 'modeBarButtonsToRemove', 'notifyOnLogging', 'plotGlPixelRatio', 'plotlyServerURL', 'queueLength', 'responsive', 'scrollZoom', 'sendData', 'setBackground', 'showAxisDragHandles', 'showAxisRangeEntryBoxes', 'showEditInChartStudio', 'showLink', 'showSendToCloud', 'showSources', 'showTips', 'staticPlot', 'toImageButtonOptions', 'topojsonURL', 'typesetMath', 'watermark'

> plot_ly(x = c(1, 2, 3, 4), y = c(1, 4, 9, 16)) %>% layout(title = TeX("\\text{Some mathjax: }\\alpha+\\beta x")) %>% 
+     config(mathjax = "cdn")
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> today <- Sys.Date()
> x <- seq.Date(today, today + 360, by = "day")
> p <- plot_ly(x = x, y = rnorm(length(x))) %>% add_lines()
> config(p, locale = "ja")
> config(p, locale = "de")
> config(p, locale = "es")
> config(p, locale = "zh-CN")
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("event_data")
> ### * event_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: event_data
> ### Title: Access plotly user input event data in shiny
> ### Aliases: event_data
> 
> ### ** Examples
> 
> ## Not run: 
> ##D plotly_example("shiny", "event_data")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggplotly")
> ### * ggplotly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggplotly
> ### Title: Convert ggplot2 to plotly
> ### Aliases: ggplotly
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simple example
> ##D ggpenguins <- qplot(bill_length_mm , body_mass_g, 
> ##D data = palmerpenguins::penguins, color = species)
> ##D ggplotly(ggpenguins)
> ##D 
> ##D data(canada.cities, package = "maps")
> ##D viz <- ggplot(canada.cities, aes(long, lat)) +
> ##D   borders(regions = "canada") +
> ##D   coord_equal() +
> ##D   geom_point(aes(text = name, size = pop), colour = "red", alpha = 1/2)
> ##D ggplotly(viz, tooltip = c("text", "size"))
> ##D 
> ##D # linked scatterplot brushing
> ##D d <- highlight_key(mtcars)
> ##D qplot(data = d, x = mpg, y = wt) %>%
> ##D   subplot(qplot(data = d, x = mpg, y = vs)) %>% 
> ##D   layout(title = "Click and drag to select points") %>%
> ##D   highlight("plotly_selected")
> ##D 
> ##D 
> ##D # more brushing (i.e. highlighting) examples
> ##D demo("crosstalk-highlight-ggplotly", package = "plotly")
> ##D 
> ##D # client-side linked brushing in a scatterplot matrix
> ##D highlight_key(palmerpenguins::penguins) %>%
> ##D   GGally::ggpairs(aes(colour = Species), columns = 1:4) %>%
> ##D   ggplotly(tooltip = c("x", "y", "colour")) %>%
> ##D   highlight("plotly_selected")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("group2NA")
> ### * group2NA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group2NA
> ### Title: Separate groups with missing values
> ### Aliases: group2NA
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # note the insertion of new rows with missing values 
+ group2NA(mtcars, "vs", "cyl")
+ 
+ # need to group lines by city somehow!
+ plot_ly(txhousing, x = ~date, y = ~median) %>% add_lines()
+ 
+ # instead of using group_by(), you could use group2NA()
+ tx <- group2NA(txhousing, "city")
+ plot_ly(tx, x = ~date, y = ~median) %>% add_lines()
+ 
+ # add_lines() will ensure paths are sorted by x, but this is equivalent
+ tx <- group2NA(txhousing, "city", ordered = "date")
+ plot_ly(tx, x = ~date, y = ~median) %>% add_paths()
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("hide_colorbar")
> ### * hide_colorbar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hide_colorbar
> ### Title: Hide color bar(s)
> ### Aliases: hide_colorbar
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~cyl)
+ hide_colorbar(p)
+   
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~cyl)
> hide_colorbar(p)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("hide_legend")
> ### * hide_legend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hide_legend
> ### Title: Hide legend
> ### Aliases: hide_legend
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~factor(cyl))
+ hide_legend(p)
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(mtcars, x = ~wt, y = ~cyl, color = ~factor(cyl))
> hide_legend(p)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("highlight")
> ### * highlight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: highlight
> ### Title: Query graphical elements in multiple linked views
> ### Aliases: highlight
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # These examples are designed to show you how to highlight/brush a *single*
+ # view. For examples of multiple linked views, see `demo(package = "plotly")` 
+ 
+ d <- highlight_key(txhousing, ~city)
+ p <- ggplot(d, aes(date, median, group = city)) + geom_line()
+ gg <- ggplotly(p, tooltip = "city") 
+ highlight(gg, dynamic = TRUE)
+ 
+ # supply custom colors to the brush 
+ cols <- toRGB(RColorBrewer::brewer.pal(3, "Dark2"), 0.5)
+ highlight(gg, on = "plotly_hover", color = cols, dynamic = TRUE)
+ 
+ # Use attrs_selected() for complete control over the selection appearance
+ # note any relevant colors you specify here should override the color argument
+ s <- attrs_selected(
+   showlegend = TRUE,
+   mode = "lines+markers",
+   marker = list(symbol = "x")
+ )
+ 
+ highlight(layout(gg, showlegend = TRUE), selected = s)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("orca")
> ### * orca
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orca
> ### Title: Static image exporting via orca
> ### Aliases: orca orca_serve
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D # NOTE: in a headless environment, you may need to set `more_args="--enable-webgl"`
+ ##D # to export webgl correctly
+ ##D p <- plot_ly(z = ~volcano) %>% add_surface()
+ ##D orca(p, "surface-plot.svg")
+ ##D 
+ ##D #' # launch the server
+ ##D server <- orca_serve()
+ ##D 
+ ##D # export as many graphs as you'd like
+ ##D server$export(qplot(1:10), "test1.pdf")
+ ##D server$export(plot_ly(x = 1:10, y = 1:10), "test2.pdf")
+ ##D 
+ ##D # the underlying process is exposed as a field, so you
+ ##D # have full control over the external process
+ ##D server$process$is_alive()
+ ##D 
+ ##D # convenience method for closing down the server
+ ##D server$close()
+ ##D 
+ ##D # remove the exported files from disk
+ ##D unlink("test1.pdf")
+ ##D unlink("test2.pdf")
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("partial_bundle")
> ### * partial_bundle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: partial_bundle
> ### Title: Use a partial bundle of plotly.js
> ### Aliases: partial_bundle
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # ----------------------------------------------------------------------
+ # This function is always safe to use when rendering a single 
+ # plotly graph. In this case, we get a 3x file reduction.
+ # ----------------------------------------------------------------------
+ 
+ ## Not run: 
+ ##D library(plotly)
+ ##D p <- plot_ly(x = 1:10, y = 1:10) %>% add_markers()
+ ##D save_widget <- function(p, f) {
+ ##D   owd <- setwd(dirname(f))
+ ##D   on.exit(setwd(owd))
+ ##D   htmlwidgets::saveWidget(p, f)
+ ##D   mb <- round(file.info(f)$size / 1e6, 3)
+ ##D   message("File is: ", mb," MB")
+ ##D }
+ ##D f1 <- tempfile(fileext = ".html")
+ ##D f2 <- tempfile(fileext = ".html")
+ ##D save_widget(p, f1)
+ ##D save_widget(partial_bundle(p), f2)
+ ##D 
+ ##D # ----------------------------------------------------------------------
+ ##D # But, since plotly.js bundles override one another, 
+ ##D # be careful when putting multiple graphs in a larger document!
+ ##D # Note how the surface (part of the gl3d bundle) renders, but the 
+ ##D # heatmap (part of the cartesian bundle) doesn't...
+ ##D # ----------------------------------------------------------------------
+ ##D 
+ ##D library(htmltools)
+ ##D p1 <- plot_ly(z = ~volcano) %>% 
+ ##D   add_heatmap() %>%
+ ##D   partial_bundle()
+ ##D p2 <- plot_ly(z = ~volcano) %>% 
+ ##D   add_surface() %>%
+ ##D   partial_bundle()
+ ##D browsable(tagList(p1, p2))
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_dendro")
> ### * plot_dendro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_dendro
> ### Title: Plot an interactive dendrogram
> ### Aliases: plot_dendro
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D hc <- hclust(dist(USArrests), "ave")
+ ##D dend1 <- as.dendrogram(hc)
+ ##D plot_dendro(dend1, height = 600) %>% 
+ ##D   hide_legend() %>% 
+ ##D   highlight(persistent = TRUE, dynamic = TRUE)
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_geo")
> ### * plot_geo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_geo
> ### Title: Initiate a plotly-geo object
> ### Aliases: plot_geo
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ map_data("world", "canada") %>%
+   group_by(group) %>%
+   plot_geo(x = ~long, y = ~lat) %>%
+   add_markers(size = I(1))
+ ## Don't show: 
+ }) # examplesIf
> map_data("world", "canada") %>% group_by(group) %>% plot_geo(x = ~long, 
+     y = ~lat) %>% add_markers(size = I(1))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_ly")
> ### * plot_ly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_ly
> ### Title: Initiate a plotly visualization
> ### Aliases: plot_ly
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ## Not run: 
+ ##D 
+ ##D # plot_ly() tries to create a sensible plot based on the information you 
+ ##D # give it. If you don't provide a trace type, plot_ly() will infer one.
+ ##D plot_ly(economics, x = ~pop)
+ ##D plot_ly(economics, x = ~date, y = ~pop)
+ ##D # plot_ly() doesn't require data frame(s), which allows one to take 
+ ##D # advantage of trace type(s) designed specifically for numeric matrices
+ ##D plot_ly(z = ~volcano)
+ ##D plot_ly(z = ~volcano, type = "surface")
+ ##D 
+ ##D # plotly has a functional interface: every plotly function takes a plotly
+ ##D # object as it's first input argument and returns a modified plotly object
+ ##D add_lines(plot_ly(economics, x = ~date, y = ~unemploy/pop))
+ ##D 
+ ##D # To make code more readable, plotly imports the pipe operator from magrittr
+ ##D economics %>% plot_ly(x = ~date, y = ~unemploy/pop) %>% add_lines()
+ ##D 
+ ##D # Attributes defined via plot_ly() set 'global' attributes that 
+ ##D # are carried onto subsequent traces, but those may be over-written
+ ##D plot_ly(economics, x = ~date, color = I("black")) %>%
+ ##D  add_lines(y = ~uempmed) %>%
+ ##D  add_lines(y = ~psavert, color = I("red"))
+ ##D 
+ ##D # Attributes are documented in the figure reference -> https://plotly.com/r/reference
+ ##D # You might notice plot_ly() has named arguments that aren't in this figure
+ ##D # reference. These arguments make it easier to map abstract data values to
+ ##D # visual attributes.
+ ##D p <- plot_ly(palmerpenguins::penguins, x = ~bill_length_mm, y = ~body_mass_g)
+ ##D add_markers(p, color = ~bill_depth_mm, size = ~bill_depth_mm)
+ ##D add_markers(p, color = ~species)
+ ##D add_markers(p, color = ~species, colors = "Set1")
+ ##D add_markers(p, symbol = ~species)
+ ##D add_paths(p, linetype = ~species)
+ ##D 
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plot_mapbox")
> ### * plot_mapbox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_mapbox
> ### Title: Initiate a plotly-mapbox object
> ### Aliases: plot_mapbox
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D plot_mapbox(res_mn)
> ##D plot_mapbox(res_mn, color = ~INDRESNAME)
> ##D 
> ##D map_data("world", "canada") %>%
> ##D   group_by(group) %>%
> ##D   plot_mapbox(x = ~long, y = ~lat) %>%
> ##D   add_polygons() %>%
> ##D   layout(
> ##D     mapbox = list(
> ##D       center = list(lat = ~median(lat), lon = ~median(long))
> ##D     )
> ##D   )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plotlyProxy")
> ### * plotlyProxy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotlyProxy
> ### Title: Modify a plotly object inside a shiny app
> ### Aliases: plotlyProxy plotlyProxyInvoke
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ 
+ if (require("shiny") && interactive()) {
+   plotly_example("shiny", "proxy_relayout")
+   plotly_example("shiny", "proxy_mapbox")
+ }
+ ## Don't show: 
+ }) # examplesIf
> if (require("shiny") && interactive()) {
+     plotly_example("shiny", "proxy_relayout")
+     plotly_example("shiny", "proxy_mapbox")
+ }
Loading required package: shiny
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:shiny’

> nameEx("plotly_IMAGE")
> ### * plotly_IMAGE
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotly_IMAGE
> ### Title: Create a static image
> ### Aliases: plotly_IMAGE
> 
> ### ** Examples
> 
> ## Not run: 
> ##D p <- plot_ly(x = 1:10)
> ##D Png <- plotly_IMAGE(p, out_file = "plotly-test-image.png")
> ##D Jpeg <- plotly_IMAGE(p, format = "jpeg", out_file = "plotly-test-image.jpeg")
> ##D Svg <- plotly_IMAGE(p, format = "svg",  out_file = "plotly-test-image.svg")
> ##D Pdf <- plotly_IMAGE(p, format = "pdf",  out_file = "plotly-test-image.pdf")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plotly_build")
> ### * plotly_build
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotly_build
> ### Title: 'Build' (i.e., evaluate) a plotly object
> ### Aliases: plotly_build
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ p <- plot_ly(economics, x = ~date, y = ~pce)
+ # the unevaluated plotly object
+ str(p)
+ # the evaluated data
+ str(plotly_build(p)$x$data)
+ ## Don't show: 
+ }) # examplesIf
> p <- plot_ly(economics, x = ~date, y = ~pce)
> str(p)
List of 8
 $ x            :List of 6
  ..$ visdat  :List of 1
  .. ..$ 11e66228e4bd1:function ()  
  ..$ cur_data: chr "11e66228e4bd1"
  ..$ attrs   :List of 1
  .. ..$ 11e66228e4bd1:List of 5
  .. .. ..$ x           :Class 'formula'  language ~date
  .. .. .. .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
  .. .. ..$ y           :Class 'formula'  language ~pce
  .. .. .. .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
  .. .. ..$ alpha_stroke: num 1
  .. .. ..$ sizes       : num [1:2] 10 100
  .. .. ..$ spans       : num [1:2] 1 20
  ..$ layout  :List of 3
  .. ..$ width : NULL
  .. ..$ height: NULL
  .. ..$ margin:List of 4
  .. .. ..$ b: num 40
  .. .. ..$ l: num 60
  .. .. ..$ t: num 25
  .. .. ..$ r: num 10
  ..$ source  : chr "A"
  ..$ config  :List of 2
  .. ..$ modeBarButtonsToAdd: chr [1:2] "hoverclosest" "hovercompare"
  .. ..$ showSendToCloud    : logi FALSE
  ..- attr(*, "TOJSON_FUNC")=function (x, ...)  
 $ width        : NULL
 $ height       : NULL
 $ sizingPolicy :List of 7
  ..$ defaultWidth : chr "100%"
  ..$ defaultHeight: num 400
  ..$ padding      : num 0
  ..$ fill         : NULL
  ..$ viewer       :List of 6
  .. ..$ defaultWidth : NULL
  .. ..$ defaultHeight: NULL
  .. ..$ padding      : NULL
  .. ..$ fill         : logi TRUE
  .. ..$ suppress     : logi FALSE
  .. ..$ paneHeight   : NULL
  ..$ browser      :List of 5
  .. ..$ defaultWidth : NULL
  .. ..$ defaultHeight: NULL
  .. ..$ padding      : NULL
  .. ..$ fill         : logi TRUE
  .. ..$ external     : logi FALSE
  ..$ knitr        :List of 3
  .. ..$ defaultWidth : NULL
  .. ..$ defaultHeight: NULL
  .. ..$ figure       : logi TRUE
 $ dependencies :List of 5
  ..$ :List of 10
  .. ..$ name      : chr "typedarray"
  .. ..$ version   : chr "0.1"
  .. ..$ src       :List of 1
  .. .. ..$ file: chr "htmlwidgets/lib/typedarray"
  .. ..$ meta      : NULL
  .. ..$ script    : chr "typedarray.min.js"
  .. ..$ stylesheet: NULL
  .. ..$ head      : NULL
  .. ..$ attachment: NULL
  .. ..$ package   : chr "plotly"
  .. ..$ all_files : logi FALSE
  .. ..- attr(*, "class")= chr "html_dependency"
  ..$ :List of 10
  .. ..$ name      : chr "jquery"
  .. ..$ version   : chr "3.5.1"
  .. ..$ src       :List of 1
  .. .. ..$ file: chr "lib/jquery"
  .. ..$ meta      : NULL
  .. ..$ script    : chr "jquery.min.js"
  .. ..$ stylesheet: NULL
  .. ..$ head      : NULL
  .. ..$ attachment: NULL
  .. ..$ package   : chr "crosstalk"
  .. ..$ all_files : logi TRUE
  .. ..- attr(*, "class")= chr "html_dependency"
  ..$ :List of 10
  .. ..$ name      : chr "crosstalk"
  .. ..$ version   : chr "1.2.1"
  .. ..$ src       :List of 1
  .. .. ..$ file: chr "www"
  .. ..$ meta      : NULL
  .. ..$ script    : chr "js/crosstalk.min.js"
  .. ..$ stylesheet: chr "css/crosstalk.min.css"
  .. ..$ head      : NULL
  .. ..$ attachment: NULL
  .. ..$ package   : chr "crosstalk"
  .. ..$ all_files : logi TRUE
  .. ..- attr(*, "class")= chr "html_dependency"
  ..$ :List of 10
  .. ..$ name      : chr "plotly-htmlwidgets-css"
  .. ..$ version   : chr "2.11.1"
  .. ..$ src       :List of 1
  .. .. ..$ file: chr "htmlwidgets/lib/plotlyjs"
  .. ..$ meta      : NULL
  .. ..$ script    : NULL
  .. ..$ stylesheet: chr "plotly-htmlwidgets.css"
  .. ..$ head      : NULL
  .. ..$ attachment: NULL
  .. ..$ package   : chr "plotly"
  .. ..$ all_files : logi FALSE
  .. ..- attr(*, "class")= chr "html_dependency"
  ..$ :List of 10
  .. ..$ name      : chr "plotly-main"
  .. ..$ version   : chr "2.11.1"
  .. ..$ src       :List of 1
  .. .. ..$ file: chr "htmlwidgets/lib/plotlyjs"
  .. ..$ meta      : NULL
  .. ..$ script    : chr "plotly-latest.min.js"
  .. ..$ stylesheet: NULL
  .. ..$ head      : NULL
  .. ..$ attachment: NULL
  .. ..$ package   : chr "plotly"
  .. ..$ all_files : logi FALSE
  .. ..- attr(*, "class")= chr "html_dependency"
 $ elementId    : NULL
 $ preRenderHook:function (p, registerFrames = TRUE)  
 $ jsHooks      : list()
 - attr(*, "class")= chr [1:2] "plotly" "htmlwidget"
 - attr(*, "package")= chr "plotly"
> str(plotly_build(p)$x$data)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
List of 1
 $ :List of 11
  ..$ x      : Date[1:574], format: "1967-07-01" "1967-08-01" ...
  ..$ y      : num [1:574] 507 510 516 512 517 ...
  .. ..- attr(*, "apiSrc")= logi TRUE
  ..$ type   : chr "scatter"
  ..$ mode   : chr "markers"
  ..$ marker :List of 2
  .. ..$ color: 'colorway' chr "rgba(31,119,180,1)"
  .. ..$ line :List of 1
  .. .. ..$ color: 'colorway' chr "rgba(31,119,180,1)"
  ..$ error_y:List of 1
  .. ..$ color: 'colorway' chr "rgba(31,119,180,1)"
  ..$ error_x:List of 1
  .. ..$ color: 'colorway' chr "rgba(31,119,180,1)"
  ..$ line   :List of 1
  .. ..$ color: 'colorway' chr "rgba(31,119,180,1)"
  ..$ xaxis  : chr "x"
  ..$ yaxis  : chr "y"
  ..$ frame  : chr NA
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plotly_data")
> ### * plotly_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotly_data
> ### Title: Obtain data associated with a plotly graph
> ### Aliases: plotly_data groups.plotly ungroup.plotly group_by.plotly
> ###   mutate.plotly do.plotly summarise.plotly arrange.plotly select.plotly
> ###   filter.plotly distinct.plotly slice.plotly rename.plotly
> ###   transmute.plotly group_by_.plotly mutate_.plotly do_.plotly
> ###   summarise_.plotly arrange_.plotly select_.plotly filter_.plotly
> ###   distinct_.plotly slice_.plotly rename_.plotly transmute_.plotly
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # use group_by() to define groups of visual markings
+ p <- txhousing %>%
+   group_by(city) %>%
+   plot_ly(x = ~date, y = ~sales)
+ p
+ 
+ # plotly objects preserve data groupings 
+ groups(p)
+ plotly_data(p)
+ 
+ # dplyr verbs operate on plotly objects as if they were data frames
+ p <- economics %>%
+   plot_ly(x = ~date, y = ~unemploy / pop) %>%
+   add_lines() %>%
+   mutate(rate = unemploy / pop) %>% 
+   filter(rate == max(rate))
+ plotly_data(p)
+ add_markers(p)
+ layout(p, annotations = list(x = ~date, y = ~rate, text = "peak"))
+ 
+ # use group_by() + do() + subplot() for trellis displays 
+ d <- group_by(mpg, drv)
+ plots <- do(d, p = plot_ly(., x = ~cty, name = ~drv))
+ subplot(plots[["p"]], nrows = 3, shareX = TRUE)
+ 
+ # arrange displays by their mean
+ means <- summarise(d, mn = mean(cty, na.rm = TRUE))
+ means %>%
+   dplyr::left_join(plots) %>%
+   arrange(mn) %>%
+   subplot(nrows = NROW(.), shareX = TRUE)
+   
+ # more dplyr verbs applied to plotly objects
+ p <- mtcars %>%
+   plot_ly(x = ~wt, y = ~mpg, name = "scatter trace") %>%
+   add_markers()
+ p %>% slice(1) %>% plotly_data()
+ p %>% slice(1) %>% add_markers(name = "first observation")
+ p %>% filter(cyl == 4) %>% plotly_data()
+ p %>% filter(cyl == 4) %>% add_markers(name = "four cylinders")
+ 
+ ## Don't show: 
+ }) # examplesIf
> p <- txhousing %>% group_by(city) %>% plot_ly(x = ~date, y = ~sales)
> p
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
Warning: Ignoring 568 observations
> groups(p)
[[1]]
city

> plotly_data(p)
# A tibble: 8,602 × 9
   city     year month sales   volume median listings inventory  date
   <chr>   <int> <int> <dbl>    <dbl>  <dbl>    <dbl>     <dbl> <dbl>
 1 Abilene  2000     1    72  5380000  71400      701       6.3 2000 
 2 Abilene  2000     2    98  6505000  58700      746       6.6 2000.
 3 Abilene  2000     3   130  9285000  58100      784       6.8 2000.
 4 Abilene  2000     4    98  9730000  68600      785       6.9 2000.
 5 Abilene  2000     5   141 10590000  67300      794       6.8 2000.
 6 Abilene  2000     6   156 13910000  66900      780       6.6 2000.
 7 Abilene  2000     7   152 12635000  73500      742       6.2 2000.
 8 Abilene  2000     8   131 10710000  75000      765       6.4 2001.
 9 Abilene  2000     9   104  7615000  64500      771       6.5 2001.
10 Abilene  2000    10   101  7040000  59300      764       6.6 2001.
# ℹ 8,592 more rows
> p <- economics %>% plot_ly(x = ~date, y = ~unemploy/pop) %>% add_lines() %>% 
+     mutate(rate = unemploy/pop) %>% filter(rate == max(rate))
> plotly_data(p)
# A tibble: 1 × 7
  date         pce    pop psavert uempmed unemploy   rate
  <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>  <dbl>
1 1982-12-01 2162. 233160    10.9    10.2    12051 0.0517
> add_markers(p)
> layout(p, annotations = list(x = ~date, y = ~rate, text = "peak"))
> d <- group_by(mpg, drv)
> plots <- do(d, p = plot_ly(., x = ~cty, name = ~drv))
> subplot(plots[["p"]], nrows = 3, shareX = TRUE)
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
> means <- summarise(d, mn = mean(cty, na.rm = TRUE))
> means %>% dplyr::left_join(plots) %>% arrange(mn) %>% subplot(nrows = NROW(.), 
+     shareX = TRUE)
Joining with `by = join_by(drv)`
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
No trace type specified:
  Based on info supplied, a 'histogram' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#histogram
> p <- mtcars %>% plot_ly(x = ~wt, y = ~mpg, name = "scatter trace") %>% 
+     add_markers()
> p %>% slice(1) %>% plotly_data()
# A tibble: 1 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1    21     6   160   110   3.9  2.62  16.5     0     1     4     4
> p %>% slice(1) %>% add_markers(name = "first observation")
> p %>% filter(cyl == 4) %>% plotly_data()
# A tibble: 11 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
 2  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 3  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 4  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 5  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 6  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 7  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 9  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
10  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
11  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2
> p %>% filter(cyl == 4) %>% add_markers(name = "four cylinders")
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("plotly_json")
> ### * plotly_json
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotly_json
> ### Title: Inspect JSON sent to plotly.js
> ### Aliases: plotly_json
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+   
+ plotly_json(plot_ly())
+ plotly_json(plot_ly(), FALSE)
+ ## Don't show: 
+ }) # examplesIf
> plotly_json(plot_ly())
Warning: No trace type specified and no positional attributes specified
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
{
  "visdat": {
    "11e663db206b9": ["function () ", "plotlyVisDat"]
  },
  "cur_data": "11e663db206b9",
  "attrs": {
    "11e663db206b9": {
      "alpha_stroke": 1,
      "sizes": [10, 100],
      "spans": [1, 20]
    }
  },
  "layout": {
    "margin": {
      "b": 40,
      "l": 60,
      "t": 25,
      "r": 10
    },
    "xaxis": {
      "domain": [0, 1],
      "automargin": true
    },
    "yaxis": {
      "domain": [0, 1],
      "automargin": true
    },
    "hovermode": "closest",
    "showlegend": false
  },
  "source": "A",
  "config": {
    "modeBarButtonsToAdd": ["hoverclosest", "hovercompare"],
    "showSendToCloud": false
  },
  "data": [
    {
      "type": "scatter",
      "mode": "markers",
      "marker": {
        "color": "rgba(31,119,180,1)",
        "line": {
          "color": "rgba(31,119,180,1)"
        }
      },
      "error_y": {
        "color": "rgba(31,119,180,1)"
      },
      "error_x": {
        "color": "rgba(31,119,180,1)"
      },
      "line": {
        "color": "rgba(31,119,180,1)"
      },
      "xaxis": "x",
      "yaxis": "y",
      "frame": null
    }
  ],
  "highlight": {
    "on": "plotly_click",
    "persistent": false,
    "dynamic": false,
    "selectize": false,
    "opacityDim": 0.20000000000000001,
    "selected": {
      "opacity": 1
    },
    "debounce": 0
  },
  "shinyEvents": ["plotly_hover", "plotly_click", "plotly_selected", "plotly_relayout", "plotly_brushed", "plotly_brushing", "plotly_clickannotation", "plotly_doubleclick", "plotly_deselect", "plotly_afterplot", "plotly_sunburstclick"],
  "base_url": "https://plot.ly"
} 
> plotly_json(plot_ly(), FALSE)
Warning: No trace type specified and no positional attributes specified
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
{
  "visdat": {
    "11e666fb11efb": ["function () ", "plotlyVisDat"]
  },
  "cur_data": "11e666fb11efb",
  "attrs": {
    "11e666fb11efb": {
      "alpha_stroke": 1,
      "sizes": [10, 100],
      "spans": [1, 20]
    }
  },
  "layout": {
    "margin": {
      "b": 40,
      "l": 60,
      "t": 25,
      "r": 10
    },
    "xaxis": {
      "domain": [0, 1],
      "automargin": true
    },
    "yaxis": {
      "domain": [0, 1],
      "automargin": true
    },
    "hovermode": "closest",
    "showlegend": false
  },
  "source": "A",
  "config": {
    "modeBarButtonsToAdd": ["hoverclosest", "hovercompare"],
    "showSendToCloud": false
  },
  "data": [
    {
      "type": "scatter",
      "mode": "markers",
      "marker": {
        "color": "rgba(31,119,180,1)",
        "line": {
          "color": "rgba(31,119,180,1)"
        }
      },
      "error_y": {
        "color": "rgba(31,119,180,1)"
      },
      "error_x": {
        "color": "rgba(31,119,180,1)"
      },
      "line": {
        "color": "rgba(31,119,180,1)"
      },
      "xaxis": "x",
      "yaxis": "y",
      "frame": null
    }
  ],
  "highlight": {
    "on": "plotly_click",
    "persistent": false,
    "dynamic": false,
    "selectize": false,
    "opacityDim": 0.20000000000000001,
    "selected": {
      "opacity": 1
    },
    "debounce": 0
  },
  "shinyEvents": ["plotly_hover", "plotly_click", "plotly_selected", "plotly_relayout", "plotly_brushed", "plotly_brushing", "plotly_clickannotation", "plotly_doubleclick", "plotly_deselect", "plotly_afterplot", "plotly_sunburstclick"],
  "base_url": "https://plot.ly"
} 
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("rangeslider")
> ### * rangeslider
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rangeslider
> ### Title: Add a range slider to the x-axis
> ### Aliases: rangeslider
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ plot_ly(x = time(USAccDeaths), y = USAccDeaths) %>% 
+   add_lines() %>%
+   rangeslider()
+   
+ d <- tibble::tibble(
+   time = seq(as.Date("2016-01-01"), as.Date("2016-08-31"), by = "days"),
+   y = rnorm(seq_along(time))
+  )
+  
+ plot_ly(d, x = ~time, y = ~y) %>%
+   add_lines() %>%
+   rangeslider(d$time[5], d$time[50])
+   
+ ## Don't show: 
+ }) # examplesIf
> plot_ly(x = time(USAccDeaths), y = USAccDeaths) %>% add_lines() %>% rangeslider()
> d <- tibble::tibble(time = seq(as.Date("2016-01-01"), as.Date("2016-08-31"), 
+     by = "days"), y = rnorm(seq_along(time)))
> plot_ly(d, x = ~time, y = ~y) %>% add_lines() %>% rangeslider(d$time[5], 
+     d$time[50])
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("raster2uri")
> ### * raster2uri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: raster2uri
> ### Title: Encode a raster object as a data URI
> ### Aliases: raster2uri
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # a red gradient (from ?as.raster)
+ r <- as.raster(matrix(hcl(0, 80, seq(50, 80, 10)), nrow = 4, ncol = 5))
+ plot(r)
+ 
+ # embed the raster as an image
+ plot_ly(x = 1, y = 1) %>% 
+   layout(
+     images = list(list(
+      source = raster2uri(r),
+      xref = "paper", 
+      yref = "paper", 
+      x = 0, y = 0, 
+      sizex = 0.5, sizey = 0.5, 
+      xanchor = "left", yanchor = "bottom"
+   ))
+  ) 
+ ## Don't show: 
+ }) # examplesIf
> r <- as.raster(matrix(hcl(0, 80, seq(50, 80, 10)), nrow = 4, ncol = 5))
> plot(r)
> plot_ly(x = 1, y = 1) %>% layout(images = list(list(source = raster2uri(r), 
+     xref = "paper", yref = "paper", x = 0, y = 0, sizex = 0.5, sizey = 0.5, xanchor = "left", 
+     yanchor = "bottom")))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("remove_typedarray_polyfill")
> ### * remove_typedarray_polyfill
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_typedarray_polyfill
> ### Title: Remove TypedArray polyfill
> ### Aliases: remove_typedarray_polyfill
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D p1 <- plot_ly()
+ ##D p2 <- remove_typedarray_polyfill(p1)
+ ##D t1 <- tempfile(fileext = ".html")
+ ##D htmlwidgets::saveWidget(p1, t1)
+ ##D file.info(t1)$size
+ ##D htmlwidgets::saveWidget(p2, t1)
+ ##D file.info(t1)$size
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("save_image")
> ### * save_image
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: save_image
> ### Title: Save plot as a static image
> ### Aliases: save_image kaleido
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ ## Not run: 
+ ##D   # Save a single image
+ ##D   p <- plot_ly(x = 1:10)
+ ##D   tmp <- tempfile(fileext = ".png")
+ ##D   save_image(p, tmp)
+ ##D   file.show(tmp)
+ ##D 
+ ##D   # Efficiently save multiple images
+ ##D   scope <- kaleido()
+ ##D   for (i in 1:5) {
+ ##D     scope$transform(p, tmp)
+ ##D   }
+ ##D   # Remove and garbage collect to remove 
+ ##D   # R/Python objects and shutdown subprocesses
+ ##D   rm(scope); gc()
+ ## End(Not run)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("schema")
> ### * schema
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: schema
> ### Title: Acquire (and optionally display) plotly's plot schema
> ### Aliases: schema
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ s <- schema()
+ 
+ # retrieve acceptable `layout.mapbox.style` values
+ if (!is.na(Sys.getenv('MAPBOX_TOKEN', NA))) {
+   styles <- s$layout$layoutAttributes$mapbox$style$values
+   subplot(
+     plot_mapbox() %>% layout(mapbox = list(style = styles[3])),
+     plot_mapbox() %>% layout(mapbox = list(style = styles[5]))
+   )
+ }
+ 
+ 
+ ## Don't show: 
+ }) # examplesIf
> s <- schema()
> if (!is.na(Sys.getenv("MAPBOX_TOKEN", NA))) {
+     styles <- s$layout$layoutAttributes$mapbox$style$values
+     subplot(plot_mapbox() %>% layout(mapbox = list(style = styles[3])), plot_mapbox() %>% 
+         layout(mapbox = list(style = styles[5])))
+ }
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("showRGB")
> ### * showRGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: showRGB
> ### Title: View colors already formatted by toRGB()
> ### Aliases: showRGB
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ showRGB(toRGB(colors()), labels = FALSE)
+ ## Don't show: 
+ }) # examplesIf
> showRGB(toRGB(colors()), labels = FALSE)
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("signup")
> ### * signup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: signup
> ### Title: Create a new plotly account.
> ### Aliases: signup
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # You need a plotly username and API key to communicate with the plotly API.
> ##D 
> ##D # If you don't already have an API key, you can obtain one with a valid
> ##D # username and email via signup().
> ##D s <- signup('anna.lyst', 'anna.lyst@plot.ly')
> ##D 
> ##D # If you already have a username and API key, please create the following
> ##D # environment variables:
> ##D Sys.setenv("plotly_username" = "me")
> ##D Sys.setenv("plotly_api_key" = "mykey")
> ##D # You can also change the default domain if you have a plotly server.
> ##D Sys.setenv("plotly_domain" = "http://mydomain.com")
> ##D 
> ##D # If you want to automatically load these environment variables when you
> ##D # start R, you can put them inside your ~/.Rprofile 
> ##D # (see help(.Rprofile) for more details)
> ##D 
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("style")
> ### * style
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: style
> ### Title: Modify trace(s)
> ### Aliases: style
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # style() is especially useful in conjunction with ggplotly()
+ # It allows you to leverage the underlying plotly.js library to change 
+ # the return result of ggplotly()
+ (p <- ggplotly(qplot(data = mtcars, wt, mpg, geom = c("point", "smooth"))))
+ 
+ # removes hoverinfo for the line/ribbon traces (use `plotly_json()` to verify!)
+ style(p, hoverinfo = "none", traces = c(2, 3))
+ 
+ # another example with plot_ly() instead of ggplotly()
+ marker <- list(
+   color = "red",
+   line = list(
+     width = 20, 
+     color = "black"
+  )
+ )
+ (p <- plot_ly(x = 1:10, y = 1:10, marker = marker))
+ 
+ # note how the entire (marker) object is replaced if a list is provided
+ style(p, marker = list(line = list(color = "blue")))
+ 
+ # similar to plotly.js, you can update a particular attribute like so 
+ # https://github.com/plotly/plotly.js/issues/1866#issuecomment-314115744
+ style(p, marker.line.color = "blue") 
+ # this clobbers the previously supplied marker.line.color
+ style(p, marker.line = list(width = 2.5), marker.size = 10)
+ ## Don't show: 
+ }) # examplesIf
> (p <- ggplotly(qplot(data = mtcars, wt, mpg, geom = c("point", "smooth"))))
Warning: `qplot()` was deprecated in ggplot2 3.4.0.
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
> style(p, hoverinfo = "none", traces = c(2, 3))
> marker <- list(color = "red", line = list(width = 20, color = "black"))
> (p <- plot_ly(x = 1:10, y = 1:10, marker = marker))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> style(p, marker = list(line = list(color = "blue")))
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> style(p, marker.line.color = "blue")
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> style(p, marker.line = list(width = 2.5), marker.size = 10)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("subplot")
> ### * subplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subplot
> ### Title: View multiple plots in a single view
> ### Aliases: subplot
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # pass any number of plotly objects to subplot()
+ p1 <- plot_ly(economics, x = ~date, y = ~uempmed)
+ p2 <- plot_ly(economics, x = ~date, y = ~unemploy)
+ subplot(p1, p2, p1, p2, nrows = 2, margin = 0.05)
+ 
+ #'  # anchor multiple traces on the same legend entry
+  p1 <- add_lines(p1, color = I("black"), name = "1st", legendgroup = "1st")
+  p2 <- add_lines(p2, color = I("red"), name = "2nd", legendgroup = "2nd")
+  
+  subplot(
+    p1, style(p1, showlegend = FALSE),
+    p2, style(p2, showlegend = FALSE),
+    nrows = 2, margin = 0.05
+  )
+ 
+ # or pass a list
+ economics_long %>%
+   split(.$variable) %>%
+   lapply(function(d) plot_ly(d, x = ~date, y = ~value)) %>%
+   subplot(nrows = NROW(.), shareX = TRUE)
+   
+ # or pass a tibble with a list-column of plotly objects
+ economics_long %>%
+   group_by(variable) %>%
+   do(p = plot_ly(., x = ~date, y = ~value)) %>%
+   subplot(nrows = NROW(.), shareX = TRUE)
+   
+ # learn more at https://plotly.com/r/subplots/
+ ## Don't show: 
+ }) # examplesIf
> p1 <- plot_ly(economics, x = ~date, y = ~uempmed)
> p2 <- plot_ly(economics, x = ~date, y = ~unemploy)
> subplot(p1, p2, p1, p2, nrows = 2, margin = 0.05)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> p1 <- add_lines(p1, color = I("black"), name = "1st", legendgroup = "1st")
> p2 <- add_lines(p2, color = I("red"), name = "2nd", legendgroup = "2nd")
> subplot(p1, style(p1, showlegend = FALSE), p2, style(p2, showlegend = FALSE), 
+     nrows = 2, margin = 0.05)
> economics_long %>% split(.$variable) %>% lapply(function(d) plot_ly(d, 
+     x = ~date, y = ~value)) %>% subplot(nrows = NROW(.), shareX = TRUE)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> economics_long %>% group_by(variable) %>% do(p = plot_ly(., x = ~date, 
+     y = ~value)) %>% subplot(nrows = NROW(.), shareX = TRUE)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("toRGB")
> ### * toRGB
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toRGB
> ### Title: Convert R colours to RGBA hexadecimal colour values
> ### Aliases: toRGB
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ toRGB("steelblue") 
+ # [1] "rgba(70,130,180,1)"
+ 
+ m <- list(
+   color = toRGB("red"),
+   line = list(
+     color = toRGB("black"), 
+     width = 19
+   )
+ )
+ 
+ plot_ly(x = 1, y = 1, marker = m)
+ ## Don't show: 
+ }) # examplesIf
> toRGB("steelblue")
[1] "rgba(70,130,180,1)"
> m <- list(color = toRGB("red"), line = list(color = toRGB("black"), width = 19))
> plot_ly(x = 1, y = 1, marker = m)
No trace type specified:
  Based on info supplied, a 'scatter' trace seems appropriate.
  Read more about this trace type -> https://plotly.com/r/reference/#scatter
No scatter mode specifed:
  Setting the mode to markers
  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("toWebGL")
> ### * toWebGL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toWebGL
> ### Title: Convert trace types to WebGL
> ### Aliases: toWebGL
> 
> ### ** Examples
> 
> ## Don't show: 
> if (interactive() || !identical(.Platform$OS.type, "windows")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # currently no bargl trace type
+ toWebGL(ggplot() + geom_bar(aes(1:10)))
+ toWebGL(qplot(1:10, 1:10))
+ ## Don't show: 
+ }) # examplesIf
> toWebGL(ggplot() + geom_bar(aes(1:10)))
Warning in verify_webgl(p) :
  The following traces don't have a WebGL equivalent: 1
> toWebGL(qplot(1:10, 1:10))
Warning: 'scattergl' objects don't have these attributes: 'hoveron'
Valid attributes include:
'connectgaps', 'customdata', 'customdatasrc', 'dx', 'dy', 'error_x', 'error_y', 'fill', 'fillcolor', 'hoverinfo', 'hoverinfosrc', 'hoverlabel', 'hovertemplate', 'hovertemplatesrc', 'hovertext', 'hovertextsrc', 'ids', 'idssrc', 'legendgroup', 'legendgrouptitle', 'legendrank', 'line', 'marker', 'meta', 'metasrc', 'mode', 'name', 'opacity', 'selected', 'selectedpoints', 'showlegend', 'stream', 'text', 'textfont', 'textposition', 'textpositionsrc', 'textsrc', 'texttemplate', 'texttemplatesrc', 'transforms', 'type', 'uid', 'uirevision', 'unselected', 'visible', 'x', 'x0', 'xaxis', 'xcalendar', 'xhoverformat', 'xperiod', 'xperiod0', 'xperiodalignment', 'xsrc', 'y', 'y0', 'yaxis', 'ycalendar', 'yhoverformat', 'yperiod', 'yperiod0', 'yperiodalignment', 'ysrc', 'key', 'set', 'frame', 'transforms', '_isNestedKey', '_isSimpleKey', '_isGraticule', '_bbox'

> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.808 0.448 4.239 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
