
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microbenchmark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('microbenchmark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.microbenchmark")
> ### * autoplot.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.microbenchmark
> ### Title: Autoplot method for microbenchmark objects: Prettier graphs for
> ###   microbenchmark using ggplot2
> ### Aliases: autoplot.microbenchmark
> 
> ### ** Examples
> 
> if (requireNamespace("ggplot2", quietly = TRUE)) {
+     tm <- microbenchmark(rchisq(100, 0),
+                          rchisq(100, 1),
+                          rchisq(100, 2),
+                          rchisq(100, 3),
+                          rchisq(100, 5), times=1000L)
+     ggplot2::autoplot(tm)
+ 
+     # add a custom title
+     ggplot2::autoplot(tm) + ggplot2::ggtitle("my timings")
+ }
> 
> 
> 
> cleanEx()
> nameEx("microbenchmark")
> ### * microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbenchmark
> ### Title: Sub-millisecond accurate timing of expression evaluation.
> ### Aliases: microbenchmark
> 
> ### ** Examples
> 
> ## Measure the time it takes to dispatch a simple function call
> ## compared to simply evaluating the constant \code{NULL}
> f <- function() NULL
> res <- microbenchmark(NULL, f(), times=1000L)
> 
> ## Print results:
> print(res)
Unit: nanoseconds
 expr min  lq    mean median  uq    max neval cld
 NULL   0  10  10.066     10  10     40  1000   a
  f() 100 120 594.480    121 130 467152  1000   a
> 
> ## Plot results:
> boxplot(res)
> 
> ## Pretty plot:
> if (requireNamespace("ggplot2")) {
+   ggplot2::autoplot(res)
+ }
Warning in ggplot2::scale_y_log10(name = y_label) :
  log-10 transformation introduced infinite values.
Warning: Removed 14 rows containing non-finite outside the scale range
(`stat_ydensity()`).
> 
> ## Example check usage
> my_check <- function(values) {
+   all(sapply(values[-1], function(x) identical(values[[1]], x)))
+ }
> 
> f <- function(a, b)
+   2 + 2
> 
> a <- 2
> ## Check passes
> microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
Unit: nanoseconds
    expr min  lq   mean median  uq  max neval cld
   2 + 2  40  60  75.20     70  70  802   100  a 
   2 + a  60  70  82.81     80  81  311   100  a 
 f(2, a) 250 270 310.50    280 291 1653   100   b
 f(2, 2) 251 270 291.06    281 291  611   100   b
> ## Not run: 
> ##D a <- 3
> ##D ## Check fails
> ##D microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
> ## End(Not run)
> ## Example setup usage
> set.seed(21)
> x <- rnorm(10)
> microbenchmark(x, rnorm(10), check=my_check, setup=set.seed(21))
Unit: nanoseconds
      expr  min   lq    mean median   uq  max neval cld
         x   20   30   41.80     40   50  171   100  a 
 rnorm(10) 1512 1543 1670.66   1583 1623 8817   100   b
> ## Will fail without setup
> ## Not run: 
> ##D microbenchmark(x, rnorm(10), check=my_check)
> ## End(Not run)
> ## using check
> a <- 2
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='identical')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  50  60  80.38     60  70 1082   100  a 
     2 + a  60  70  79.74     80  81  200   100  a 
 sum(2, a) 201 220 269.33    230 240 2985   100   b
 sum(2, 2) 180 200 219.51    210 220  451   100   b
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
Unit: nanoseconds
      expr min  lq   mean median    uq  max neval cld
     2 + 2  50  60  73.73     70  70.0  260   100  a 
     2 + a  60  70  95.30     80  90.0 1573   100  a 
 sum(2, a) 210 220 244.91    230 240.5  501   100   b
 sum(2, 2) 190 201 252.30    211 221.0 2705   100   b
> attr(a, 'abc') <- 123
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equivalent')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  50  60  98.46     70  70 1273   100  a 
     2 + a 140 160 204.67    161 171 2735   100   b
 sum(2, a) 210 220 287.03    231 241 4188   100   b
 sum(2, 2) 180 210 237.08    211 221  721   100   b
> ## check='equal' will fail due to difference in attribute
> ## Not run: 
> ##D microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.microbenchmark")
> ### * print.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.microbenchmark
> ### Title: Print 'microbenchmark' timings.
> ### Aliases: print.microbenchmark
> 
> ### ** Examples
> 
> a1 <- a2 <- a3 <- a4 <- numeric(0)
> 
> res <- microbenchmark(a1 <- c(a1, 1),
+                       a2 <- append(a2, 1),
+                       a3[length(a3) + 1] <- 1,
+                       a4[[length(a4) + 1]] <- 1,
+                       times=100L)
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  421.0  575.27  496.5  551  9407   100 a  
       a2 <- append(a2, 1) 1042 1262.0 1416.58 1352.5 1473  5811   100  b 
   a3[length(a3) + 1] <- 1  662  731.0  898.53  811.5  972  4769   100   c
 a4[[length(a4) + 1]] <- 1  621  706.5  933.10  806.0  922 11792   100   c
> ## Change default unit to relative runtime
> options(microbenchmark.unit="relative")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  421.0  575.27  496.5  551  9407   100 a  
       a2 <- append(a2, 1) 1042 1262.0 1416.58 1352.5 1473  5811   100  b 
   a3[length(a3) + 1] <- 1  662  731.0  898.53  811.5  972  4769   100   c
 a4[[length(a4) + 1]] <- 1  621  706.5  933.10  806.0  922 11792   100   c
> ## Change default unit to evaluations per second
> options(microbenchmark.unit="eps")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  230  421.0  575.27  496.5  551  9407   100 a  
       a2 <- append(a2, 1) 1042 1262.0 1416.58 1352.5 1473  5811   100  b 
   a3[length(a3) + 1] <- 1  662  731.0  898.53  811.5  972  4769   100   c
 a4[[length(a4) + 1]] <- 1  621  706.5  933.10  806.0  922 11792   100   c
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.622 0.081 3.704 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
