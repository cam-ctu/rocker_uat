
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "microbenchmark"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('microbenchmark')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("autoplot.microbenchmark")
> ### * autoplot.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.microbenchmark
> ### Title: Autoplot method for microbenchmark objects: Prettier graphs for
> ###   microbenchmark using ggplot2
> ### Aliases: autoplot.microbenchmark
> 
> ### ** Examples
> 
> if (requireNamespace("ggplot2", quietly = TRUE)) {
+     tm <- microbenchmark(rchisq(100, 0),
+                          rchisq(100, 1),
+                          rchisq(100, 2),
+                          rchisq(100, 3),
+                          rchisq(100, 5), times=1000L)
+     ggplot2::autoplot(tm)
+ 
+     # add a custom title
+     ggplot2::autoplot(tm) + ggplot2::ggtitle("my timings")
+ }
> 
> 
> 
> cleanEx()
> nameEx("microbenchmark")
> ### * microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: microbenchmark
> ### Title: Sub-millisecond accurate timing of expression evaluation.
> ### Aliases: microbenchmark
> 
> ### ** Examples
> 
> ## Measure the time it takes to dispatch a simple function call
> ## compared to simply evaluating the constant \code{NULL}
> f <- function() NULL
> res <- microbenchmark(NULL, f(), times=1000L)
> 
> ## Print results:
> print(res)
Unit: nanoseconds
 expr min  lq    mean median  uq    max neval cld
 NULL   0  10  10.097     10  10     80  1000   a
  f() 110 120 584.366    121 130 456331  1000   a
> 
> ## Plot results:
> boxplot(res)
> 
> ## Pretty plot:
> if (requireNamespace("ggplot2")) {
+   ggplot2::autoplot(res)
+ }
Warning in ggplot2::scale_y_log10(name = y_label) :
  log-10 transformation introduced infinite values.
Warning: Removed 13 rows containing non-finite outside the scale range
(`stat_ydensity()`).
> 
> ## Example check usage
> my_check <- function(values) {
+   all(sapply(values[-1], function(x) identical(values[[1]], x)))
+ }
> 
> f <- function(a, b)
+   2 + 2
> 
> a <- 2
> ## Check passes
> microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
Unit: nanoseconds
    expr min  lq   mean median  uq  max neval cld
   2 + 2  50  60  75.48     70  70  762   100  a 
   2 + a  60  70  81.80     71  80  301   100  a 
 f(2, a) 250 270 303.87    280 290 1734   100   b
 f(2, 2) 250 271 293.53    280 291  722   100   b
> ## Not run: 
> ##D a <- 3
> ##D ## Check fails
> ##D microbenchmark(2 + 2, 2 + a, f(2, a), f(2, 2), check=my_check)
> ## End(Not run)
> ## Example setup usage
> set.seed(21)
> x <- rnorm(10)
> microbenchmark(x, rnorm(10), check=my_check, setup=set.seed(21))
Unit: nanoseconds
      expr  min   lq    mean median   uq  max neval cld
         x   20   30   40.35     40   50  301   100  a 
 rnorm(10) 1513 1543 1672.44   1563 1628 8526   100   b
> ## Will fail without setup
> ## Not run: 
> ##D microbenchmark(x, rnorm(10), check=my_check)
> ## End(Not run)
> ## using check
> a <- 2
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='identical')
Unit: nanoseconds
      expr min    lq   mean median  uq  max neval cld
     2 + 2  50  60.0  73.22     60  70  561   100  a 
     2 + a  60  70.0  80.42     80  81  291   100  a 
 sum(2, a) 200 220.0 266.08    221 240 2676   100   b
 sum(2, 2) 180 200.5 218.57    211 220  401   100   b
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
Unit: nanoseconds
      expr min  lq   mean median  uq  max neval cld
     2 + 2  50  60  70.10   60.5  70  291   100  a 
     2 + a  60  71  92.98   80.0  90 1142   100  a 
 sum(2, a) 200 220 239.09  230.0 240  461   100   b
 sum(2, 2) 180 200 239.69  211.0 220 1883   100   b
> attr(a, 'abc') <- 123
> microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equivalent')
Unit: nanoseconds
      expr min  lq   mean median    uq  max neval cld
     2 + 2  50  60  74.98     70  71.0  331   100  a 
     2 + a 140 160 206.41    170 181.0 3086   100   b
 sum(2, a) 210 220 263.27    231 245.5 2214   100   b
 sum(2, 2) 190 210 224.78    211 230.5  401   100   b
> ## check='equal' will fail due to difference in attribute
> ## Not run: 
> ##D microbenchmark(2 + 2, 2 + a, sum(2, a), sum(2, 2), check='equal')
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("print.microbenchmark")
> ### * print.microbenchmark
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.microbenchmark
> ### Title: Print 'microbenchmark' timings.
> ### Aliases: print.microbenchmark
> 
> ### ** Examples
> 
> a1 <- a2 <- a3 <- a4 <- numeric(0)
> 
> res <- microbenchmark(a1 <- c(a1, 1),
+                       a2 <- append(a2, 1),
+                       a3[length(a3) + 1] <- 1,
+                       a4[[length(a4) + 1]] <- 1,
+                       times=100L)
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  220  440.5  500.83  501.0  556  1002   100 a  
       a2 <- append(a2, 1) 1032 1267.5 1387.51 1353.0 1433  5410   100  b 
   a3[length(a3) + 1] <- 1  651  707.0  988.46  811.5  922 10320   100   c
 a4[[length(a4) + 1]] <- 1  612  691.5  925.32  771.5  902 11762   100   c
> ## Change default unit to relative runtime
> options(microbenchmark.unit="relative")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  220  440.5  500.83  501.0  556  1002   100 a  
       a2 <- append(a2, 1) 1032 1267.5 1387.51 1353.0 1433  5410   100  b 
   a3[length(a3) + 1] <- 1  651  707.0  988.46  811.5  922 10320   100   c
 a4[[length(a4) + 1]] <- 1  612  691.5  925.32  771.5  902 11762   100   c
> ## Change default unit to evaluations per second
> options(microbenchmark.unit="eps")
> print(res)
Unit: nanoseconds
                      expr  min     lq    mean median   uq   max neval cld
            a1 <- c(a1, 1)  220  440.5  500.83  501.0  556  1002   100 a  
       a2 <- append(a2, 1) 1032 1267.5 1387.51 1353.0 1433  5410   100  b 
   a3[length(a3) + 1] <- 1  651  707.0  988.46  811.5  922 10320   100   c
 a4[[length(a4) + 1]] <- 1  612  691.5  925.32  771.5  902 11762   100   c
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.618 0.092 3.71 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
