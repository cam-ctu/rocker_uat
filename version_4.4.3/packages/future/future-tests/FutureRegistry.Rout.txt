
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:28.046] plan(): Setting new future strategy stack:
[11:01:28.046] List of future strategies:
[11:01:28.046] 1. sequential:
[11:01:28.046]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.046]    - tweaked: FALSE
[11:01:28.046]    - call: future::plan("sequential")
[11:01:28.059] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'list') ...
list()
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'add') ...
[11:01:28.098] getGlobalsAndPackages() ...
[11:01:28.099] Searching for globals...
[11:01:28.101] - globals found: [1] ‘{’
[11:01:28.101] Searching for globals ... DONE
[11:01:28.102] Resolving globals: FALSE
[11:01:28.102] 
[11:01:28.102] 
[11:01:28.102] getGlobalsAndPackages() ... DONE
[11:01:28.103] run() for ‘Future’ ...
[11:01:28.103] - state: ‘created’
[11:01:28.103] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.103] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.103] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.104]   - Field: ‘label’
[11:01:28.104]   - Field: ‘local’
[11:01:28.104]   - Field: ‘owner’
[11:01:28.104]   - Field: ‘envir’
[11:01:28.104]   - Field: ‘packages’
[11:01:28.104]   - Field: ‘gc’
[11:01:28.104]   - Field: ‘conditions’
[11:01:28.104]   - Field: ‘expr’
[11:01:28.104]   - Field: ‘uuid’
[11:01:28.104]   - Field: ‘seed’
[11:01:28.104]   - Field: ‘version’
[11:01:28.105]   - Field: ‘result’
[11:01:28.105]   - Field: ‘asynchronous’
[11:01:28.105]   - Field: ‘calls’
[11:01:28.105]   - Field: ‘globals’
[11:01:28.105]   - Field: ‘stdout’
[11:01:28.105]   - Field: ‘earlySignal’
[11:01:28.105]   - Field: ‘lazy’
[11:01:28.105]   - Field: ‘state’
[11:01:28.105] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.105] - Launch lazy future ...
[11:01:28.106] Packages needed by the future expression (n = 0): <none>
[11:01:28.106] Packages needed by future strategies (n = 0): <none>
[11:01:28.107] {
[11:01:28.107]     {
[11:01:28.107]         {
[11:01:28.107]             ...future.startTime <- base::Sys.time()
[11:01:28.107]             {
[11:01:28.107]                 {
[11:01:28.107]                   {
[11:01:28.107]                     base::local({
[11:01:28.107]                       has_future <- base::requireNamespace("future", 
[11:01:28.107]                         quietly = TRUE)
[11:01:28.107]                       if (has_future) {
[11:01:28.107]                         ns <- base::getNamespace("future")
[11:01:28.107]                         version <- ns[[".package"]][["version"]]
[11:01:28.107]                         if (is.null(version)) 
[11:01:28.107]                           version <- utils::packageVersion("future")
[11:01:28.107]                       }
[11:01:28.107]                       else {
[11:01:28.107]                         version <- NULL
[11:01:28.107]                       }
[11:01:28.107]                       if (!has_future || version < "1.8.0") {
[11:01:28.107]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.107]                           "", base::R.version$version.string), 
[11:01:28.107]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.107]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.107]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.107]                             "release", "version")], collapse = " "), 
[11:01:28.107]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.107]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.107]                           info)
[11:01:28.107]                         info <- base::paste(info, collapse = "; ")
[11:01:28.107]                         if (!has_future) {
[11:01:28.107]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.107]                             info)
[11:01:28.107]                         }
[11:01:28.107]                         else {
[11:01:28.107]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.107]                             info, version)
[11:01:28.107]                         }
[11:01:28.107]                         base::stop(msg)
[11:01:28.107]                       }
[11:01:28.107]                     })
[11:01:28.107]                   }
[11:01:28.107]                   ...future.strategy.old <- future::plan("list")
[11:01:28.107]                   options(future.plan = NULL)
[11:01:28.107]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.107]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.107]                 }
[11:01:28.107]                 ...future.workdir <- getwd()
[11:01:28.107]             }
[11:01:28.107]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.107]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.107]         }
[11:01:28.107]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.107]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.107]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.107]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.107]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.107]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.107]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.107]             base::names(...future.oldOptions))
[11:01:28.107]     }
[11:01:28.107]     if (FALSE) {
[11:01:28.107]     }
[11:01:28.107]     else {
[11:01:28.107]         if (TRUE) {
[11:01:28.107]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.107]                 open = "w")
[11:01:28.107]         }
[11:01:28.107]         else {
[11:01:28.107]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.107]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.107]         }
[11:01:28.107]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.107]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.107]             base::sink(type = "output", split = FALSE)
[11:01:28.107]             base::close(...future.stdout)
[11:01:28.107]         }, add = TRUE)
[11:01:28.107]     }
[11:01:28.107]     ...future.frame <- base::sys.nframe()
[11:01:28.107]     ...future.conditions <- base::list()
[11:01:28.107]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.107]     if (FALSE) {
[11:01:28.107]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.107]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.107]     }
[11:01:28.107]     ...future.result <- base::tryCatch({
[11:01:28.107]         base::withCallingHandlers({
[11:01:28.107]             ...future.value <- base::withVisible(base::local({
[11:01:28.107]                 1
[11:01:28.107]             }))
[11:01:28.107]             future::FutureResult(value = ...future.value$value, 
[11:01:28.107]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.107]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.107]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.107]                     ...future.globalenv.names))
[11:01:28.107]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.107]         }, condition = base::local({
[11:01:28.107]             c <- base::c
[11:01:28.107]             inherits <- base::inherits
[11:01:28.107]             invokeRestart <- base::invokeRestart
[11:01:28.107]             length <- base::length
[11:01:28.107]             list <- base::list
[11:01:28.107]             seq.int <- base::seq.int
[11:01:28.107]             signalCondition <- base::signalCondition
[11:01:28.107]             sys.calls <- base::sys.calls
[11:01:28.107]             `[[` <- base::`[[`
[11:01:28.107]             `+` <- base::`+`
[11:01:28.107]             `<<-` <- base::`<<-`
[11:01:28.107]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.107]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.107]                   3L)]
[11:01:28.107]             }
[11:01:28.107]             function(cond) {
[11:01:28.107]                 is_error <- inherits(cond, "error")
[11:01:28.107]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.107]                   NULL)
[11:01:28.107]                 if (is_error) {
[11:01:28.107]                   sessionInformation <- function() {
[11:01:28.107]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.107]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.107]                       search = base::search(), system = base::Sys.info())
[11:01:28.107]                   }
[11:01:28.107]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.107]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.107]                     cond$call), session = sessionInformation(), 
[11:01:28.107]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.107]                   signalCondition(cond)
[11:01:28.107]                 }
[11:01:28.107]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.107]                 "immediateCondition"))) {
[11:01:28.107]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.107]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.107]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.107]                   if (TRUE && !signal) {
[11:01:28.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.107]                     {
[11:01:28.107]                       inherits <- base::inherits
[11:01:28.107]                       invokeRestart <- base::invokeRestart
[11:01:28.107]                       is.null <- base::is.null
[11:01:28.107]                       muffled <- FALSE
[11:01:28.107]                       if (inherits(cond, "message")) {
[11:01:28.107]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.107]                         if (muffled) 
[11:01:28.107]                           invokeRestart("muffleMessage")
[11:01:28.107]                       }
[11:01:28.107]                       else if (inherits(cond, "warning")) {
[11:01:28.107]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.107]                         if (muffled) 
[11:01:28.107]                           invokeRestart("muffleWarning")
[11:01:28.107]                       }
[11:01:28.107]                       else if (inherits(cond, "condition")) {
[11:01:28.107]                         if (!is.null(pattern)) {
[11:01:28.107]                           computeRestarts <- base::computeRestarts
[11:01:28.107]                           grepl <- base::grepl
[11:01:28.107]                           restarts <- computeRestarts(cond)
[11:01:28.107]                           for (restart in restarts) {
[11:01:28.107]                             name <- restart$name
[11:01:28.107]                             if (is.null(name)) 
[11:01:28.107]                               next
[11:01:28.107]                             if (!grepl(pattern, name)) 
[11:01:28.107]                               next
[11:01:28.107]                             invokeRestart(restart)
[11:01:28.107]                             muffled <- TRUE
[11:01:28.107]                             break
[11:01:28.107]                           }
[11:01:28.107]                         }
[11:01:28.107]                       }
[11:01:28.107]                       invisible(muffled)
[11:01:28.107]                     }
[11:01:28.107]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.107]                   }
[11:01:28.107]                 }
[11:01:28.107]                 else {
[11:01:28.107]                   if (TRUE) {
[11:01:28.107]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.107]                     {
[11:01:28.107]                       inherits <- base::inherits
[11:01:28.107]                       invokeRestart <- base::invokeRestart
[11:01:28.107]                       is.null <- base::is.null
[11:01:28.107]                       muffled <- FALSE
[11:01:28.107]                       if (inherits(cond, "message")) {
[11:01:28.107]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.107]                         if (muffled) 
[11:01:28.107]                           invokeRestart("muffleMessage")
[11:01:28.107]                       }
[11:01:28.107]                       else if (inherits(cond, "warning")) {
[11:01:28.107]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.107]                         if (muffled) 
[11:01:28.107]                           invokeRestart("muffleWarning")
[11:01:28.107]                       }
[11:01:28.107]                       else if (inherits(cond, "condition")) {
[11:01:28.107]                         if (!is.null(pattern)) {
[11:01:28.107]                           computeRestarts <- base::computeRestarts
[11:01:28.107]                           grepl <- base::grepl
[11:01:28.107]                           restarts <- computeRestarts(cond)
[11:01:28.107]                           for (restart in restarts) {
[11:01:28.107]                             name <- restart$name
[11:01:28.107]                             if (is.null(name)) 
[11:01:28.107]                               next
[11:01:28.107]                             if (!grepl(pattern, name)) 
[11:01:28.107]                               next
[11:01:28.107]                             invokeRestart(restart)
[11:01:28.107]                             muffled <- TRUE
[11:01:28.107]                             break
[11:01:28.107]                           }
[11:01:28.107]                         }
[11:01:28.107]                       }
[11:01:28.107]                       invisible(muffled)
[11:01:28.107]                     }
[11:01:28.107]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.107]                   }
[11:01:28.107]                 }
[11:01:28.107]             }
[11:01:28.107]         }))
[11:01:28.107]     }, error = function(ex) {
[11:01:28.107]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.107]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.107]                 ...future.rng), started = ...future.startTime, 
[11:01:28.107]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.107]             version = "1.8"), class = "FutureResult")
[11:01:28.107]     }, finally = {
[11:01:28.107]         if (!identical(...future.workdir, getwd())) 
[11:01:28.107]             setwd(...future.workdir)
[11:01:28.107]         {
[11:01:28.107]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.107]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.107]             }
[11:01:28.107]             base::options(...future.oldOptions)
[11:01:28.107]             if (.Platform$OS.type == "windows") {
[11:01:28.107]                 old_names <- names(...future.oldEnvVars)
[11:01:28.107]                 envs <- base::Sys.getenv()
[11:01:28.107]                 names <- names(envs)
[11:01:28.107]                 common <- intersect(names, old_names)
[11:01:28.107]                 added <- setdiff(names, old_names)
[11:01:28.107]                 removed <- setdiff(old_names, names)
[11:01:28.107]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.107]                   envs[common]]
[11:01:28.107]                 NAMES <- toupper(changed)
[11:01:28.107]                 args <- list()
[11:01:28.107]                 for (kk in seq_along(NAMES)) {
[11:01:28.107]                   name <- changed[[kk]]
[11:01:28.107]                   NAME <- NAMES[[kk]]
[11:01:28.107]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.107]                     next
[11:01:28.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.107]                 }
[11:01:28.107]                 NAMES <- toupper(added)
[11:01:28.107]                 for (kk in seq_along(NAMES)) {
[11:01:28.107]                   name <- added[[kk]]
[11:01:28.107]                   NAME <- NAMES[[kk]]
[11:01:28.107]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.107]                     next
[11:01:28.107]                   args[[name]] <- ""
[11:01:28.107]                 }
[11:01:28.107]                 NAMES <- toupper(removed)
[11:01:28.107]                 for (kk in seq_along(NAMES)) {
[11:01:28.107]                   name <- removed[[kk]]
[11:01:28.107]                   NAME <- NAMES[[kk]]
[11:01:28.107]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.107]                     next
[11:01:28.107]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.107]                 }
[11:01:28.107]                 if (length(args) > 0) 
[11:01:28.107]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.107]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.107]             }
[11:01:28.107]             else {
[11:01:28.107]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.107]             }
[11:01:28.107]             {
[11:01:28.107]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.107]                   0L) {
[11:01:28.107]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.107]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.107]                   base::options(opts)
[11:01:28.107]                 }
[11:01:28.107]                 {
[11:01:28.107]                   {
[11:01:28.107]                     NULL
[11:01:28.107]                     RNGkind("Mersenne-Twister")
[11:01:28.107]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.107]                       inherits = FALSE)
[11:01:28.107]                   }
[11:01:28.107]                   options(future.plan = NULL)
[11:01:28.107]                   if (is.na(NA_character_)) 
[11:01:28.107]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.107]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.107]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.107]                     .init = FALSE)
[11:01:28.107]                 }
[11:01:28.107]             }
[11:01:28.107]         }
[11:01:28.107]     })
[11:01:28.107]     if (TRUE) {
[11:01:28.107]         base::sink(type = "output", split = FALSE)
[11:01:28.107]         if (TRUE) {
[11:01:28.107]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.107]         }
[11:01:28.107]         else {
[11:01:28.107]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.107]         }
[11:01:28.107]         base::close(...future.stdout)
[11:01:28.107]         ...future.stdout <- NULL
[11:01:28.107]     }
[11:01:28.107]     ...future.result$conditions <- ...future.conditions
[11:01:28.107]     ...future.result$finished <- base::Sys.time()
[11:01:28.107]     ...future.result
[11:01:28.107] }
[11:01:28.109] plan(): Setting new future strategy stack:
[11:01:28.109] List of future strategies:
[11:01:28.109] 1. sequential:
[11:01:28.109]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.109]    - tweaked: FALSE
[11:01:28.109]    - call: NULL
[11:01:28.109] plan(): nbrOfWorkers() = 1
[11:01:28.110] plan(): Setting new future strategy stack:
[11:01:28.110] List of future strategies:
[11:01:28.110] 1. sequential:
[11:01:28.110]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.110]    - tweaked: FALSE
[11:01:28.110]    - call: future::plan("sequential")
[11:01:28.111] plan(): nbrOfWorkers() = 1
[11:01:28.111] SequentialFuture started (and completed)
[11:01:28.111] - Launch lazy future ... done
[11:01:28.111] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'remove') ...
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'list') ...
list()
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'add') ...
[11:01:28.115] getGlobalsAndPackages() ...
[11:01:28.115] Searching for globals...
[11:01:28.115] - globals found: [1] ‘{’
[11:01:28.115] Searching for globals ... DONE
[11:01:28.115] Resolving globals: FALSE
[11:01:28.116] 
[11:01:28.116] 
[11:01:28.116] getGlobalsAndPackages() ... DONE
[11:01:28.116] run() for ‘Future’ ...
[11:01:28.116] - state: ‘created’
[11:01:28.116] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.117] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.117] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.117]   - Field: ‘label’
[11:01:28.117]   - Field: ‘local’
[11:01:28.117]   - Field: ‘owner’
[11:01:28.117]   - Field: ‘envir’
[11:01:28.117]   - Field: ‘packages’
[11:01:28.117]   - Field: ‘gc’
[11:01:28.117]   - Field: ‘conditions’
[11:01:28.117]   - Field: ‘expr’
[11:01:28.117]   - Field: ‘uuid’
[11:01:28.118]   - Field: ‘seed’
[11:01:28.118]   - Field: ‘version’
[11:01:28.118]   - Field: ‘result’
[11:01:28.118]   - Field: ‘asynchronous’
[11:01:28.118]   - Field: ‘calls’
[11:01:28.118]   - Field: ‘globals’
[11:01:28.118]   - Field: ‘stdout’
[11:01:28.118]   - Field: ‘earlySignal’
[11:01:28.118]   - Field: ‘lazy’
[11:01:28.118]   - Field: ‘state’
[11:01:28.118] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.118] - Launch lazy future ...
[11:01:28.119] Packages needed by the future expression (n = 0): <none>
[11:01:28.119] Packages needed by future strategies (n = 0): <none>
[11:01:28.119] {
[11:01:28.119]     {
[11:01:28.119]         {
[11:01:28.119]             ...future.startTime <- base::Sys.time()
[11:01:28.119]             {
[11:01:28.119]                 {
[11:01:28.119]                   {
[11:01:28.119]                     base::local({
[11:01:28.119]                       has_future <- base::requireNamespace("future", 
[11:01:28.119]                         quietly = TRUE)
[11:01:28.119]                       if (has_future) {
[11:01:28.119]                         ns <- base::getNamespace("future")
[11:01:28.119]                         version <- ns[[".package"]][["version"]]
[11:01:28.119]                         if (is.null(version)) 
[11:01:28.119]                           version <- utils::packageVersion("future")
[11:01:28.119]                       }
[11:01:28.119]                       else {
[11:01:28.119]                         version <- NULL
[11:01:28.119]                       }
[11:01:28.119]                       if (!has_future || version < "1.8.0") {
[11:01:28.119]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.119]                           "", base::R.version$version.string), 
[11:01:28.119]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.119]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.119]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.119]                             "release", "version")], collapse = " "), 
[11:01:28.119]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.119]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.119]                           info)
[11:01:28.119]                         info <- base::paste(info, collapse = "; ")
[11:01:28.119]                         if (!has_future) {
[11:01:28.119]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.119]                             info)
[11:01:28.119]                         }
[11:01:28.119]                         else {
[11:01:28.119]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.119]                             info, version)
[11:01:28.119]                         }
[11:01:28.119]                         base::stop(msg)
[11:01:28.119]                       }
[11:01:28.119]                     })
[11:01:28.119]                   }
[11:01:28.119]                   ...future.strategy.old <- future::plan("list")
[11:01:28.119]                   options(future.plan = NULL)
[11:01:28.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.119]                 }
[11:01:28.119]                 ...future.workdir <- getwd()
[11:01:28.119]             }
[11:01:28.119]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.119]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.119]         }
[11:01:28.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.119]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.119]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.119]             base::names(...future.oldOptions))
[11:01:28.119]     }
[11:01:28.119]     if (FALSE) {
[11:01:28.119]     }
[11:01:28.119]     else {
[11:01:28.119]         if (TRUE) {
[11:01:28.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.119]                 open = "w")
[11:01:28.119]         }
[11:01:28.119]         else {
[11:01:28.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.119]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.119]         }
[11:01:28.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.119]             base::sink(type = "output", split = FALSE)
[11:01:28.119]             base::close(...future.stdout)
[11:01:28.119]         }, add = TRUE)
[11:01:28.119]     }
[11:01:28.119]     ...future.frame <- base::sys.nframe()
[11:01:28.119]     ...future.conditions <- base::list()
[11:01:28.119]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.119]     if (FALSE) {
[11:01:28.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.119]     }
[11:01:28.119]     ...future.result <- base::tryCatch({
[11:01:28.119]         base::withCallingHandlers({
[11:01:28.119]             ...future.value <- base::withVisible(base::local({
[11:01:28.119]                 2
[11:01:28.119]             }))
[11:01:28.119]             future::FutureResult(value = ...future.value$value, 
[11:01:28.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.119]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.119]                     ...future.globalenv.names))
[11:01:28.119]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.119]         }, condition = base::local({
[11:01:28.119]             c <- base::c
[11:01:28.119]             inherits <- base::inherits
[11:01:28.119]             invokeRestart <- base::invokeRestart
[11:01:28.119]             length <- base::length
[11:01:28.119]             list <- base::list
[11:01:28.119]             seq.int <- base::seq.int
[11:01:28.119]             signalCondition <- base::signalCondition
[11:01:28.119]             sys.calls <- base::sys.calls
[11:01:28.119]             `[[` <- base::`[[`
[11:01:28.119]             `+` <- base::`+`
[11:01:28.119]             `<<-` <- base::`<<-`
[11:01:28.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.119]                   3L)]
[11:01:28.119]             }
[11:01:28.119]             function(cond) {
[11:01:28.119]                 is_error <- inherits(cond, "error")
[11:01:28.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.119]                   NULL)
[11:01:28.119]                 if (is_error) {
[11:01:28.119]                   sessionInformation <- function() {
[11:01:28.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.119]                       search = base::search(), system = base::Sys.info())
[11:01:28.119]                   }
[11:01:28.119]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.119]                     cond$call), session = sessionInformation(), 
[11:01:28.119]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.119]                   signalCondition(cond)
[11:01:28.119]                 }
[11:01:28.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.119]                 "immediateCondition"))) {
[11:01:28.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.119]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.119]                   if (TRUE && !signal) {
[11:01:28.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.119]                     {
[11:01:28.119]                       inherits <- base::inherits
[11:01:28.119]                       invokeRestart <- base::invokeRestart
[11:01:28.119]                       is.null <- base::is.null
[11:01:28.119]                       muffled <- FALSE
[11:01:28.119]                       if (inherits(cond, "message")) {
[11:01:28.119]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.119]                         if (muffled) 
[11:01:28.119]                           invokeRestart("muffleMessage")
[11:01:28.119]                       }
[11:01:28.119]                       else if (inherits(cond, "warning")) {
[11:01:28.119]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.119]                         if (muffled) 
[11:01:28.119]                           invokeRestart("muffleWarning")
[11:01:28.119]                       }
[11:01:28.119]                       else if (inherits(cond, "condition")) {
[11:01:28.119]                         if (!is.null(pattern)) {
[11:01:28.119]                           computeRestarts <- base::computeRestarts
[11:01:28.119]                           grepl <- base::grepl
[11:01:28.119]                           restarts <- computeRestarts(cond)
[11:01:28.119]                           for (restart in restarts) {
[11:01:28.119]                             name <- restart$name
[11:01:28.119]                             if (is.null(name)) 
[11:01:28.119]                               next
[11:01:28.119]                             if (!grepl(pattern, name)) 
[11:01:28.119]                               next
[11:01:28.119]                             invokeRestart(restart)
[11:01:28.119]                             muffled <- TRUE
[11:01:28.119]                             break
[11:01:28.119]                           }
[11:01:28.119]                         }
[11:01:28.119]                       }
[11:01:28.119]                       invisible(muffled)
[11:01:28.119]                     }
[11:01:28.119]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.119]                   }
[11:01:28.119]                 }
[11:01:28.119]                 else {
[11:01:28.119]                   if (TRUE) {
[11:01:28.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.119]                     {
[11:01:28.119]                       inherits <- base::inherits
[11:01:28.119]                       invokeRestart <- base::invokeRestart
[11:01:28.119]                       is.null <- base::is.null
[11:01:28.119]                       muffled <- FALSE
[11:01:28.119]                       if (inherits(cond, "message")) {
[11:01:28.119]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.119]                         if (muffled) 
[11:01:28.119]                           invokeRestart("muffleMessage")
[11:01:28.119]                       }
[11:01:28.119]                       else if (inherits(cond, "warning")) {
[11:01:28.119]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.119]                         if (muffled) 
[11:01:28.119]                           invokeRestart("muffleWarning")
[11:01:28.119]                       }
[11:01:28.119]                       else if (inherits(cond, "condition")) {
[11:01:28.119]                         if (!is.null(pattern)) {
[11:01:28.119]                           computeRestarts <- base::computeRestarts
[11:01:28.119]                           grepl <- base::grepl
[11:01:28.119]                           restarts <- computeRestarts(cond)
[11:01:28.119]                           for (restart in restarts) {
[11:01:28.119]                             name <- restart$name
[11:01:28.119]                             if (is.null(name)) 
[11:01:28.119]                               next
[11:01:28.119]                             if (!grepl(pattern, name)) 
[11:01:28.119]                               next
[11:01:28.119]                             invokeRestart(restart)
[11:01:28.119]                             muffled <- TRUE
[11:01:28.119]                             break
[11:01:28.119]                           }
[11:01:28.119]                         }
[11:01:28.119]                       }
[11:01:28.119]                       invisible(muffled)
[11:01:28.119]                     }
[11:01:28.119]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.119]                   }
[11:01:28.119]                 }
[11:01:28.119]             }
[11:01:28.119]         }))
[11:01:28.119]     }, error = function(ex) {
[11:01:28.119]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.119]                 ...future.rng), started = ...future.startTime, 
[11:01:28.119]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.119]             version = "1.8"), class = "FutureResult")
[11:01:28.119]     }, finally = {
[11:01:28.119]         if (!identical(...future.workdir, getwd())) 
[11:01:28.119]             setwd(...future.workdir)
[11:01:28.119]         {
[11:01:28.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.119]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.119]             }
[11:01:28.119]             base::options(...future.oldOptions)
[11:01:28.119]             if (.Platform$OS.type == "windows") {
[11:01:28.119]                 old_names <- names(...future.oldEnvVars)
[11:01:28.119]                 envs <- base::Sys.getenv()
[11:01:28.119]                 names <- names(envs)
[11:01:28.119]                 common <- intersect(names, old_names)
[11:01:28.119]                 added <- setdiff(names, old_names)
[11:01:28.119]                 removed <- setdiff(old_names, names)
[11:01:28.119]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.119]                   envs[common]]
[11:01:28.119]                 NAMES <- toupper(changed)
[11:01:28.119]                 args <- list()
[11:01:28.119]                 for (kk in seq_along(NAMES)) {
[11:01:28.119]                   name <- changed[[kk]]
[11:01:28.119]                   NAME <- NAMES[[kk]]
[11:01:28.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.119]                     next
[11:01:28.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.119]                 }
[11:01:28.119]                 NAMES <- toupper(added)
[11:01:28.119]                 for (kk in seq_along(NAMES)) {
[11:01:28.119]                   name <- added[[kk]]
[11:01:28.119]                   NAME <- NAMES[[kk]]
[11:01:28.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.119]                     next
[11:01:28.119]                   args[[name]] <- ""
[11:01:28.119]                 }
[11:01:28.119]                 NAMES <- toupper(removed)
[11:01:28.119]                 for (kk in seq_along(NAMES)) {
[11:01:28.119]                   name <- removed[[kk]]
[11:01:28.119]                   NAME <- NAMES[[kk]]
[11:01:28.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.119]                     next
[11:01:28.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.119]                 }
[11:01:28.119]                 if (length(args) > 0) 
[11:01:28.119]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.119]             }
[11:01:28.119]             else {
[11:01:28.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.119]             }
[11:01:28.119]             {
[11:01:28.119]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.119]                   0L) {
[11:01:28.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.119]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.119]                   base::options(opts)
[11:01:28.119]                 }
[11:01:28.119]                 {
[11:01:28.119]                   {
[11:01:28.119]                     NULL
[11:01:28.119]                     RNGkind("Mersenne-Twister")
[11:01:28.119]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.119]                       inherits = FALSE)
[11:01:28.119]                   }
[11:01:28.119]                   options(future.plan = NULL)
[11:01:28.119]                   if (is.na(NA_character_)) 
[11:01:28.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.119]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.119]                     .init = FALSE)
[11:01:28.119]                 }
[11:01:28.119]             }
[11:01:28.119]         }
[11:01:28.119]     })
[11:01:28.119]     if (TRUE) {
[11:01:28.119]         base::sink(type = "output", split = FALSE)
[11:01:28.119]         if (TRUE) {
[11:01:28.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.119]         }
[11:01:28.119]         else {
[11:01:28.119]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.119]         }
[11:01:28.119]         base::close(...future.stdout)
[11:01:28.119]         ...future.stdout <- NULL
[11:01:28.119]     }
[11:01:28.119]     ...future.result$conditions <- ...future.conditions
[11:01:28.119]     ...future.result$finished <- base::Sys.time()
[11:01:28.119]     ...future.result
[11:01:28.119] }
[11:01:28.121] plan(): Setting new future strategy stack:
[11:01:28.121] List of future strategies:
[11:01:28.121] 1. sequential:
[11:01:28.121]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.121]    - tweaked: FALSE
[11:01:28.121]    - call: NULL
[11:01:28.121] plan(): nbrOfWorkers() = 1
[11:01:28.122] plan(): Setting new future strategy stack:
[11:01:28.122] List of future strategies:
[11:01:28.122] 1. sequential:
[11:01:28.122]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.122]    - tweaked: FALSE
[11:01:28.122]    - call: future::plan("sequential")
[11:01:28.122] plan(): nbrOfWorkers() = 1
[11:01:28.123] SequentialFuture started (and completed)
[11:01:28.123] - Launch lazy future ... done
[11:01:28.123] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'collect-first') ...
[11:01:28.124] resolved() for ‘SequentialFuture’ ...
[11:01:28.124] - state: ‘finished’
[11:01:28.124] - run: FALSE
[11:01:28.124] - result: ‘FutureResult’
[11:01:28.124] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'add') ...
[11:01:28.125] getGlobalsAndPackages() ...
[11:01:28.125] Searching for globals...
[11:01:28.125] - globals found: [1] ‘{’
[11:01:28.125] Searching for globals ... DONE
[11:01:28.125] Resolving globals: FALSE
[11:01:28.126] 
[11:01:28.126] 
[11:01:28.126] getGlobalsAndPackages() ... DONE
[11:01:28.126] run() for ‘Future’ ...
[11:01:28.126] - state: ‘created’
[11:01:28.126] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.126] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.127] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.127]   - Field: ‘label’
[11:01:28.127]   - Field: ‘local’
[11:01:28.127]   - Field: ‘owner’
[11:01:28.127]   - Field: ‘envir’
[11:01:28.127]   - Field: ‘packages’
[11:01:28.127]   - Field: ‘gc’
[11:01:28.127]   - Field: ‘conditions’
[11:01:28.127]   - Field: ‘expr’
[11:01:28.127]   - Field: ‘uuid’
[11:01:28.127]   - Field: ‘seed’
[11:01:28.127]   - Field: ‘version’
[11:01:28.128]   - Field: ‘result’
[11:01:28.128]   - Field: ‘asynchronous’
[11:01:28.128]   - Field: ‘calls’
[11:01:28.128]   - Field: ‘globals’
[11:01:28.128]   - Field: ‘stdout’
[11:01:28.128]   - Field: ‘earlySignal’
[11:01:28.128]   - Field: ‘lazy’
[11:01:28.128]   - Field: ‘state’
[11:01:28.128] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.128] - Launch lazy future ...
[11:01:28.128] Packages needed by the future expression (n = 0): <none>
[11:01:28.129] Packages needed by future strategies (n = 0): <none>
[11:01:28.129] {
[11:01:28.129]     {
[11:01:28.129]         {
[11:01:28.129]             ...future.startTime <- base::Sys.time()
[11:01:28.129]             {
[11:01:28.129]                 {
[11:01:28.129]                   {
[11:01:28.129]                     base::local({
[11:01:28.129]                       has_future <- base::requireNamespace("future", 
[11:01:28.129]                         quietly = TRUE)
[11:01:28.129]                       if (has_future) {
[11:01:28.129]                         ns <- base::getNamespace("future")
[11:01:28.129]                         version <- ns[[".package"]][["version"]]
[11:01:28.129]                         if (is.null(version)) 
[11:01:28.129]                           version <- utils::packageVersion("future")
[11:01:28.129]                       }
[11:01:28.129]                       else {
[11:01:28.129]                         version <- NULL
[11:01:28.129]                       }
[11:01:28.129]                       if (!has_future || version < "1.8.0") {
[11:01:28.129]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.129]                           "", base::R.version$version.string), 
[11:01:28.129]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.129]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.129]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.129]                             "release", "version")], collapse = " "), 
[11:01:28.129]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.129]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.129]                           info)
[11:01:28.129]                         info <- base::paste(info, collapse = "; ")
[11:01:28.129]                         if (!has_future) {
[11:01:28.129]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.129]                             info)
[11:01:28.129]                         }
[11:01:28.129]                         else {
[11:01:28.129]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.129]                             info, version)
[11:01:28.129]                         }
[11:01:28.129]                         base::stop(msg)
[11:01:28.129]                       }
[11:01:28.129]                     })
[11:01:28.129]                   }
[11:01:28.129]                   ...future.strategy.old <- future::plan("list")
[11:01:28.129]                   options(future.plan = NULL)
[11:01:28.129]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.129]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.129]                 }
[11:01:28.129]                 ...future.workdir <- getwd()
[11:01:28.129]             }
[11:01:28.129]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.129]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.129]         }
[11:01:28.129]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.129]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.129]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.129]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.129]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.129]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.129]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.129]             base::names(...future.oldOptions))
[11:01:28.129]     }
[11:01:28.129]     if (FALSE) {
[11:01:28.129]     }
[11:01:28.129]     else {
[11:01:28.129]         if (TRUE) {
[11:01:28.129]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.129]                 open = "w")
[11:01:28.129]         }
[11:01:28.129]         else {
[11:01:28.129]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.129]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.129]         }
[11:01:28.129]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.129]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.129]             base::sink(type = "output", split = FALSE)
[11:01:28.129]             base::close(...future.stdout)
[11:01:28.129]         }, add = TRUE)
[11:01:28.129]     }
[11:01:28.129]     ...future.frame <- base::sys.nframe()
[11:01:28.129]     ...future.conditions <- base::list()
[11:01:28.129]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.129]     if (FALSE) {
[11:01:28.129]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.129]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.129]     }
[11:01:28.129]     ...future.result <- base::tryCatch({
[11:01:28.129]         base::withCallingHandlers({
[11:01:28.129]             ...future.value <- base::withVisible(base::local({
[11:01:28.129]                 2
[11:01:28.129]             }))
[11:01:28.129]             future::FutureResult(value = ...future.value$value, 
[11:01:28.129]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.129]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.129]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.129]                     ...future.globalenv.names))
[11:01:28.129]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.129]         }, condition = base::local({
[11:01:28.129]             c <- base::c
[11:01:28.129]             inherits <- base::inherits
[11:01:28.129]             invokeRestart <- base::invokeRestart
[11:01:28.129]             length <- base::length
[11:01:28.129]             list <- base::list
[11:01:28.129]             seq.int <- base::seq.int
[11:01:28.129]             signalCondition <- base::signalCondition
[11:01:28.129]             sys.calls <- base::sys.calls
[11:01:28.129]             `[[` <- base::`[[`
[11:01:28.129]             `+` <- base::`+`
[11:01:28.129]             `<<-` <- base::`<<-`
[11:01:28.129]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.129]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.129]                   3L)]
[11:01:28.129]             }
[11:01:28.129]             function(cond) {
[11:01:28.129]                 is_error <- inherits(cond, "error")
[11:01:28.129]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.129]                   NULL)
[11:01:28.129]                 if (is_error) {
[11:01:28.129]                   sessionInformation <- function() {
[11:01:28.129]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.129]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.129]                       search = base::search(), system = base::Sys.info())
[11:01:28.129]                   }
[11:01:28.129]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.129]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.129]                     cond$call), session = sessionInformation(), 
[11:01:28.129]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.129]                   signalCondition(cond)
[11:01:28.129]                 }
[11:01:28.129]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.129]                 "immediateCondition"))) {
[11:01:28.129]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.129]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.129]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.129]                   if (TRUE && !signal) {
[11:01:28.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.129]                     {
[11:01:28.129]                       inherits <- base::inherits
[11:01:28.129]                       invokeRestart <- base::invokeRestart
[11:01:28.129]                       is.null <- base::is.null
[11:01:28.129]                       muffled <- FALSE
[11:01:28.129]                       if (inherits(cond, "message")) {
[11:01:28.129]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.129]                         if (muffled) 
[11:01:28.129]                           invokeRestart("muffleMessage")
[11:01:28.129]                       }
[11:01:28.129]                       else if (inherits(cond, "warning")) {
[11:01:28.129]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.129]                         if (muffled) 
[11:01:28.129]                           invokeRestart("muffleWarning")
[11:01:28.129]                       }
[11:01:28.129]                       else if (inherits(cond, "condition")) {
[11:01:28.129]                         if (!is.null(pattern)) {
[11:01:28.129]                           computeRestarts <- base::computeRestarts
[11:01:28.129]                           grepl <- base::grepl
[11:01:28.129]                           restarts <- computeRestarts(cond)
[11:01:28.129]                           for (restart in restarts) {
[11:01:28.129]                             name <- restart$name
[11:01:28.129]                             if (is.null(name)) 
[11:01:28.129]                               next
[11:01:28.129]                             if (!grepl(pattern, name)) 
[11:01:28.129]                               next
[11:01:28.129]                             invokeRestart(restart)
[11:01:28.129]                             muffled <- TRUE
[11:01:28.129]                             break
[11:01:28.129]                           }
[11:01:28.129]                         }
[11:01:28.129]                       }
[11:01:28.129]                       invisible(muffled)
[11:01:28.129]                     }
[11:01:28.129]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.129]                   }
[11:01:28.129]                 }
[11:01:28.129]                 else {
[11:01:28.129]                   if (TRUE) {
[11:01:28.129]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.129]                     {
[11:01:28.129]                       inherits <- base::inherits
[11:01:28.129]                       invokeRestart <- base::invokeRestart
[11:01:28.129]                       is.null <- base::is.null
[11:01:28.129]                       muffled <- FALSE
[11:01:28.129]                       if (inherits(cond, "message")) {
[11:01:28.129]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.129]                         if (muffled) 
[11:01:28.129]                           invokeRestart("muffleMessage")
[11:01:28.129]                       }
[11:01:28.129]                       else if (inherits(cond, "warning")) {
[11:01:28.129]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.129]                         if (muffled) 
[11:01:28.129]                           invokeRestart("muffleWarning")
[11:01:28.129]                       }
[11:01:28.129]                       else if (inherits(cond, "condition")) {
[11:01:28.129]                         if (!is.null(pattern)) {
[11:01:28.129]                           computeRestarts <- base::computeRestarts
[11:01:28.129]                           grepl <- base::grepl
[11:01:28.129]                           restarts <- computeRestarts(cond)
[11:01:28.129]                           for (restart in restarts) {
[11:01:28.129]                             name <- restart$name
[11:01:28.129]                             if (is.null(name)) 
[11:01:28.129]                               next
[11:01:28.129]                             if (!grepl(pattern, name)) 
[11:01:28.129]                               next
[11:01:28.129]                             invokeRestart(restart)
[11:01:28.129]                             muffled <- TRUE
[11:01:28.129]                             break
[11:01:28.129]                           }
[11:01:28.129]                         }
[11:01:28.129]                       }
[11:01:28.129]                       invisible(muffled)
[11:01:28.129]                     }
[11:01:28.129]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.129]                   }
[11:01:28.129]                 }
[11:01:28.129]             }
[11:01:28.129]         }))
[11:01:28.129]     }, error = function(ex) {
[11:01:28.129]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.129]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.129]                 ...future.rng), started = ...future.startTime, 
[11:01:28.129]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.129]             version = "1.8"), class = "FutureResult")
[11:01:28.129]     }, finally = {
[11:01:28.129]         if (!identical(...future.workdir, getwd())) 
[11:01:28.129]             setwd(...future.workdir)
[11:01:28.129]         {
[11:01:28.129]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.129]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.129]             }
[11:01:28.129]             base::options(...future.oldOptions)
[11:01:28.129]             if (.Platform$OS.type == "windows") {
[11:01:28.129]                 old_names <- names(...future.oldEnvVars)
[11:01:28.129]                 envs <- base::Sys.getenv()
[11:01:28.129]                 names <- names(envs)
[11:01:28.129]                 common <- intersect(names, old_names)
[11:01:28.129]                 added <- setdiff(names, old_names)
[11:01:28.129]                 removed <- setdiff(old_names, names)
[11:01:28.129]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.129]                   envs[common]]
[11:01:28.129]                 NAMES <- toupper(changed)
[11:01:28.129]                 args <- list()
[11:01:28.129]                 for (kk in seq_along(NAMES)) {
[11:01:28.129]                   name <- changed[[kk]]
[11:01:28.129]                   NAME <- NAMES[[kk]]
[11:01:28.129]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.129]                     next
[11:01:28.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.129]                 }
[11:01:28.129]                 NAMES <- toupper(added)
[11:01:28.129]                 for (kk in seq_along(NAMES)) {
[11:01:28.129]                   name <- added[[kk]]
[11:01:28.129]                   NAME <- NAMES[[kk]]
[11:01:28.129]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.129]                     next
[11:01:28.129]                   args[[name]] <- ""
[11:01:28.129]                 }
[11:01:28.129]                 NAMES <- toupper(removed)
[11:01:28.129]                 for (kk in seq_along(NAMES)) {
[11:01:28.129]                   name <- removed[[kk]]
[11:01:28.129]                   NAME <- NAMES[[kk]]
[11:01:28.129]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.129]                     next
[11:01:28.129]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.129]                 }
[11:01:28.129]                 if (length(args) > 0) 
[11:01:28.129]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.129]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.129]             }
[11:01:28.129]             else {
[11:01:28.129]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.129]             }
[11:01:28.129]             {
[11:01:28.129]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.129]                   0L) {
[11:01:28.129]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.129]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.129]                   base::options(opts)
[11:01:28.129]                 }
[11:01:28.129]                 {
[11:01:28.129]                   {
[11:01:28.129]                     NULL
[11:01:28.129]                     RNGkind("Mersenne-Twister")
[11:01:28.129]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.129]                       inherits = FALSE)
[11:01:28.129]                   }
[11:01:28.129]                   options(future.plan = NULL)
[11:01:28.129]                   if (is.na(NA_character_)) 
[11:01:28.129]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.129]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.129]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.129]                     .init = FALSE)
[11:01:28.129]                 }
[11:01:28.129]             }
[11:01:28.129]         }
[11:01:28.129]     })
[11:01:28.129]     if (TRUE) {
[11:01:28.129]         base::sink(type = "output", split = FALSE)
[11:01:28.129]         if (TRUE) {
[11:01:28.129]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.129]         }
[11:01:28.129]         else {
[11:01:28.129]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.129]         }
[11:01:28.129]         base::close(...future.stdout)
[11:01:28.129]         ...future.stdout <- NULL
[11:01:28.129]     }
[11:01:28.129]     ...future.result$conditions <- ...future.conditions
[11:01:28.129]     ...future.result$finished <- base::Sys.time()
[11:01:28.129]     ...future.result
[11:01:28.129] }
[11:01:28.131] plan(): Setting new future strategy stack:
[11:01:28.131] List of future strategies:
[11:01:28.131] 1. sequential:
[11:01:28.131]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.131]    - tweaked: FALSE
[11:01:28.131]    - call: NULL
[11:01:28.131] plan(): nbrOfWorkers() = 1
[11:01:28.133] plan(): Setting new future strategy stack:
[11:01:28.133] List of future strategies:
[11:01:28.133] 1. sequential:
[11:01:28.133]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.133]    - tweaked: FALSE
[11:01:28.133]    - call: future::plan("sequential")
[11:01:28.134] plan(): nbrOfWorkers() = 1
[11:01:28.134] SequentialFuture started (and completed)
[11:01:28.134] - Launch lazy future ... done
[11:01:28.134] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'reset') ...
*** FutureRegistry('multicore-972838e4-79fb-8874-7206-3ff6930a6cb7', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[11:01:28.135] getGlobalsAndPackages() ...
[11:01:28.135] Searching for globals...
[11:01:28.135] - globals found: [1] ‘{’
[11:01:28.136] Searching for globals ... DONE
[11:01:28.136] Resolving globals: FALSE
[11:01:28.136] 
[11:01:28.136] 
[11:01:28.136] getGlobalsAndPackages() ... DONE
[11:01:28.136] run() for ‘Future’ ...
[11:01:28.136] - state: ‘created’
[11:01:28.136] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.137] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.137] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.137]   - Field: ‘label’
[11:01:28.137]   - Field: ‘local’
[11:01:28.137]   - Field: ‘owner’
[11:01:28.137]   - Field: ‘envir’
[11:01:28.137]   - Field: ‘packages’
[11:01:28.137]   - Field: ‘gc’
[11:01:28.137]   - Field: ‘conditions’
[11:01:28.137]   - Field: ‘expr’
[11:01:28.137]   - Field: ‘uuid’
[11:01:28.138]   - Field: ‘seed’
[11:01:28.138]   - Field: ‘version’
[11:01:28.138]   - Field: ‘result’
[11:01:28.138]   - Field: ‘asynchronous’
[11:01:28.138]   - Field: ‘calls’
[11:01:28.138]   - Field: ‘globals’
[11:01:28.138]   - Field: ‘stdout’
[11:01:28.138]   - Field: ‘earlySignal’
[11:01:28.138]   - Field: ‘lazy’
[11:01:28.138]   - Field: ‘state’
[11:01:28.138] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.138] - Launch lazy future ...
[11:01:28.139] Packages needed by the future expression (n = 0): <none>
[11:01:28.139] Packages needed by future strategies (n = 0): <none>
[11:01:28.139] {
[11:01:28.139]     {
[11:01:28.139]         {
[11:01:28.139]             ...future.startTime <- base::Sys.time()
[11:01:28.139]             {
[11:01:28.139]                 {
[11:01:28.139]                   {
[11:01:28.139]                     base::local({
[11:01:28.139]                       has_future <- base::requireNamespace("future", 
[11:01:28.139]                         quietly = TRUE)
[11:01:28.139]                       if (has_future) {
[11:01:28.139]                         ns <- base::getNamespace("future")
[11:01:28.139]                         version <- ns[[".package"]][["version"]]
[11:01:28.139]                         if (is.null(version)) 
[11:01:28.139]                           version <- utils::packageVersion("future")
[11:01:28.139]                       }
[11:01:28.139]                       else {
[11:01:28.139]                         version <- NULL
[11:01:28.139]                       }
[11:01:28.139]                       if (!has_future || version < "1.8.0") {
[11:01:28.139]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.139]                           "", base::R.version$version.string), 
[11:01:28.139]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.139]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.139]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.139]                             "release", "version")], collapse = " "), 
[11:01:28.139]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.139]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.139]                           info)
[11:01:28.139]                         info <- base::paste(info, collapse = "; ")
[11:01:28.139]                         if (!has_future) {
[11:01:28.139]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.139]                             info)
[11:01:28.139]                         }
[11:01:28.139]                         else {
[11:01:28.139]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.139]                             info, version)
[11:01:28.139]                         }
[11:01:28.139]                         base::stop(msg)
[11:01:28.139]                       }
[11:01:28.139]                     })
[11:01:28.139]                   }
[11:01:28.139]                   ...future.strategy.old <- future::plan("list")
[11:01:28.139]                   options(future.plan = NULL)
[11:01:28.139]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.139]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.139]                 }
[11:01:28.139]                 ...future.workdir <- getwd()
[11:01:28.139]             }
[11:01:28.139]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.139]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.139]         }
[11:01:28.139]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.139]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.139]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.139]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.139]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.139]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.139]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.139]             base::names(...future.oldOptions))
[11:01:28.139]     }
[11:01:28.139]     if (FALSE) {
[11:01:28.139]     }
[11:01:28.139]     else {
[11:01:28.139]         if (TRUE) {
[11:01:28.139]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.139]                 open = "w")
[11:01:28.139]         }
[11:01:28.139]         else {
[11:01:28.139]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.139]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.139]         }
[11:01:28.139]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.139]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.139]             base::sink(type = "output", split = FALSE)
[11:01:28.139]             base::close(...future.stdout)
[11:01:28.139]         }, add = TRUE)
[11:01:28.139]     }
[11:01:28.139]     ...future.frame <- base::sys.nframe()
[11:01:28.139]     ...future.conditions <- base::list()
[11:01:28.139]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.139]     if (FALSE) {
[11:01:28.139]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.139]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.139]     }
[11:01:28.139]     ...future.result <- base::tryCatch({
[11:01:28.139]         base::withCallingHandlers({
[11:01:28.139]             ...future.value <- base::withVisible(base::local({
[11:01:28.139]                 1
[11:01:28.139]             }))
[11:01:28.139]             future::FutureResult(value = ...future.value$value, 
[11:01:28.139]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.139]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.139]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.139]                     ...future.globalenv.names))
[11:01:28.139]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.139]         }, condition = base::local({
[11:01:28.139]             c <- base::c
[11:01:28.139]             inherits <- base::inherits
[11:01:28.139]             invokeRestart <- base::invokeRestart
[11:01:28.139]             length <- base::length
[11:01:28.139]             list <- base::list
[11:01:28.139]             seq.int <- base::seq.int
[11:01:28.139]             signalCondition <- base::signalCondition
[11:01:28.139]             sys.calls <- base::sys.calls
[11:01:28.139]             `[[` <- base::`[[`
[11:01:28.139]             `+` <- base::`+`
[11:01:28.139]             `<<-` <- base::`<<-`
[11:01:28.139]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.139]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.139]                   3L)]
[11:01:28.139]             }
[11:01:28.139]             function(cond) {
[11:01:28.139]                 is_error <- inherits(cond, "error")
[11:01:28.139]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.139]                   NULL)
[11:01:28.139]                 if (is_error) {
[11:01:28.139]                   sessionInformation <- function() {
[11:01:28.139]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.139]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.139]                       search = base::search(), system = base::Sys.info())
[11:01:28.139]                   }
[11:01:28.139]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.139]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.139]                     cond$call), session = sessionInformation(), 
[11:01:28.139]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.139]                   signalCondition(cond)
[11:01:28.139]                 }
[11:01:28.139]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.139]                 "immediateCondition"))) {
[11:01:28.139]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.139]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.139]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.139]                   if (TRUE && !signal) {
[11:01:28.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.139]                     {
[11:01:28.139]                       inherits <- base::inherits
[11:01:28.139]                       invokeRestart <- base::invokeRestart
[11:01:28.139]                       is.null <- base::is.null
[11:01:28.139]                       muffled <- FALSE
[11:01:28.139]                       if (inherits(cond, "message")) {
[11:01:28.139]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.139]                         if (muffled) 
[11:01:28.139]                           invokeRestart("muffleMessage")
[11:01:28.139]                       }
[11:01:28.139]                       else if (inherits(cond, "warning")) {
[11:01:28.139]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.139]                         if (muffled) 
[11:01:28.139]                           invokeRestart("muffleWarning")
[11:01:28.139]                       }
[11:01:28.139]                       else if (inherits(cond, "condition")) {
[11:01:28.139]                         if (!is.null(pattern)) {
[11:01:28.139]                           computeRestarts <- base::computeRestarts
[11:01:28.139]                           grepl <- base::grepl
[11:01:28.139]                           restarts <- computeRestarts(cond)
[11:01:28.139]                           for (restart in restarts) {
[11:01:28.139]                             name <- restart$name
[11:01:28.139]                             if (is.null(name)) 
[11:01:28.139]                               next
[11:01:28.139]                             if (!grepl(pattern, name)) 
[11:01:28.139]                               next
[11:01:28.139]                             invokeRestart(restart)
[11:01:28.139]                             muffled <- TRUE
[11:01:28.139]                             break
[11:01:28.139]                           }
[11:01:28.139]                         }
[11:01:28.139]                       }
[11:01:28.139]                       invisible(muffled)
[11:01:28.139]                     }
[11:01:28.139]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.139]                   }
[11:01:28.139]                 }
[11:01:28.139]                 else {
[11:01:28.139]                   if (TRUE) {
[11:01:28.139]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.139]                     {
[11:01:28.139]                       inherits <- base::inherits
[11:01:28.139]                       invokeRestart <- base::invokeRestart
[11:01:28.139]                       is.null <- base::is.null
[11:01:28.139]                       muffled <- FALSE
[11:01:28.139]                       if (inherits(cond, "message")) {
[11:01:28.139]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.139]                         if (muffled) 
[11:01:28.139]                           invokeRestart("muffleMessage")
[11:01:28.139]                       }
[11:01:28.139]                       else if (inherits(cond, "warning")) {
[11:01:28.139]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.139]                         if (muffled) 
[11:01:28.139]                           invokeRestart("muffleWarning")
[11:01:28.139]                       }
[11:01:28.139]                       else if (inherits(cond, "condition")) {
[11:01:28.139]                         if (!is.null(pattern)) {
[11:01:28.139]                           computeRestarts <- base::computeRestarts
[11:01:28.139]                           grepl <- base::grepl
[11:01:28.139]                           restarts <- computeRestarts(cond)
[11:01:28.139]                           for (restart in restarts) {
[11:01:28.139]                             name <- restart$name
[11:01:28.139]                             if (is.null(name)) 
[11:01:28.139]                               next
[11:01:28.139]                             if (!grepl(pattern, name)) 
[11:01:28.139]                               next
[11:01:28.139]                             invokeRestart(restart)
[11:01:28.139]                             muffled <- TRUE
[11:01:28.139]                             break
[11:01:28.139]                           }
[11:01:28.139]                         }
[11:01:28.139]                       }
[11:01:28.139]                       invisible(muffled)
[11:01:28.139]                     }
[11:01:28.139]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.139]                   }
[11:01:28.139]                 }
[11:01:28.139]             }
[11:01:28.139]         }))
[11:01:28.139]     }, error = function(ex) {
[11:01:28.139]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.139]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.139]                 ...future.rng), started = ...future.startTime, 
[11:01:28.139]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.139]             version = "1.8"), class = "FutureResult")
[11:01:28.139]     }, finally = {
[11:01:28.139]         if (!identical(...future.workdir, getwd())) 
[11:01:28.139]             setwd(...future.workdir)
[11:01:28.139]         {
[11:01:28.139]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.139]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.139]             }
[11:01:28.139]             base::options(...future.oldOptions)
[11:01:28.139]             if (.Platform$OS.type == "windows") {
[11:01:28.139]                 old_names <- names(...future.oldEnvVars)
[11:01:28.139]                 envs <- base::Sys.getenv()
[11:01:28.139]                 names <- names(envs)
[11:01:28.139]                 common <- intersect(names, old_names)
[11:01:28.139]                 added <- setdiff(names, old_names)
[11:01:28.139]                 removed <- setdiff(old_names, names)
[11:01:28.139]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.139]                   envs[common]]
[11:01:28.139]                 NAMES <- toupper(changed)
[11:01:28.139]                 args <- list()
[11:01:28.139]                 for (kk in seq_along(NAMES)) {
[11:01:28.139]                   name <- changed[[kk]]
[11:01:28.139]                   NAME <- NAMES[[kk]]
[11:01:28.139]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.139]                     next
[11:01:28.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.139]                 }
[11:01:28.139]                 NAMES <- toupper(added)
[11:01:28.139]                 for (kk in seq_along(NAMES)) {
[11:01:28.139]                   name <- added[[kk]]
[11:01:28.139]                   NAME <- NAMES[[kk]]
[11:01:28.139]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.139]                     next
[11:01:28.139]                   args[[name]] <- ""
[11:01:28.139]                 }
[11:01:28.139]                 NAMES <- toupper(removed)
[11:01:28.139]                 for (kk in seq_along(NAMES)) {
[11:01:28.139]                   name <- removed[[kk]]
[11:01:28.139]                   NAME <- NAMES[[kk]]
[11:01:28.139]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.139]                     next
[11:01:28.139]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.139]                 }
[11:01:28.139]                 if (length(args) > 0) 
[11:01:28.139]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.139]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.139]             }
[11:01:28.139]             else {
[11:01:28.139]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.139]             }
[11:01:28.139]             {
[11:01:28.139]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.139]                   0L) {
[11:01:28.139]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.139]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.139]                   base::options(opts)
[11:01:28.139]                 }
[11:01:28.139]                 {
[11:01:28.139]                   {
[11:01:28.139]                     NULL
[11:01:28.139]                     RNGkind("Mersenne-Twister")
[11:01:28.139]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.139]                       inherits = FALSE)
[11:01:28.139]                   }
[11:01:28.139]                   options(future.plan = NULL)
[11:01:28.139]                   if (is.na(NA_character_)) 
[11:01:28.139]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.139]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.139]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.139]                     .init = FALSE)
[11:01:28.139]                 }
[11:01:28.139]             }
[11:01:28.139]         }
[11:01:28.139]     })
[11:01:28.139]     if (TRUE) {
[11:01:28.139]         base::sink(type = "output", split = FALSE)
[11:01:28.139]         if (TRUE) {
[11:01:28.139]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.139]         }
[11:01:28.139]         else {
[11:01:28.139]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.139]         }
[11:01:28.139]         base::close(...future.stdout)
[11:01:28.139]         ...future.stdout <- NULL
[11:01:28.139]     }
[11:01:28.139]     ...future.result$conditions <- ...future.conditions
[11:01:28.139]     ...future.result$finished <- base::Sys.time()
[11:01:28.139]     ...future.result
[11:01:28.139] }
[11:01:28.141] plan(): Setting new future strategy stack:
[11:01:28.141] List of future strategies:
[11:01:28.141] 1. sequential:
[11:01:28.141]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.141]    - tweaked: FALSE
[11:01:28.141]    - call: NULL
[11:01:28.141] plan(): nbrOfWorkers() = 1
[11:01:28.142] plan(): Setting new future strategy stack:
[11:01:28.142] List of future strategies:
[11:01:28.142] 1. sequential:
[11:01:28.142]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.142]    - tweaked: FALSE
[11:01:28.142]    - call: future::plan("sequential")
[11:01:28.142] plan(): nbrOfWorkers() = 1
[11:01:28.143] SequentialFuture started (and completed)
[11:01:28.143] - Launch lazy future ... done
[11:01:28.143] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[11:01:28.144] getGlobalsAndPackages() ...
[11:01:28.144] Searching for globals...
[11:01:28.144] - globals found: [1] ‘{’
[11:01:28.144] Searching for globals ... DONE
[11:01:28.145] Resolving globals: FALSE
[11:01:28.145] 
[11:01:28.145] 
[11:01:28.145] getGlobalsAndPackages() ... DONE
[11:01:28.145] run() for ‘Future’ ...
[11:01:28.145] - state: ‘created’
[11:01:28.145] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.146] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.146] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.146]   - Field: ‘label’
[11:01:28.146]   - Field: ‘local’
[11:01:28.146]   - Field: ‘owner’
[11:01:28.146]   - Field: ‘envir’
[11:01:28.146]   - Field: ‘packages’
[11:01:28.146]   - Field: ‘gc’
[11:01:28.146]   - Field: ‘conditions’
[11:01:28.146]   - Field: ‘expr’
[11:01:28.146]   - Field: ‘uuid’
[11:01:28.146]   - Field: ‘seed’
[11:01:28.147]   - Field: ‘version’
[11:01:28.147]   - Field: ‘result’
[11:01:28.147]   - Field: ‘asynchronous’
[11:01:28.147]   - Field: ‘calls’
[11:01:28.147]   - Field: ‘globals’
[11:01:28.147]   - Field: ‘stdout’
[11:01:28.147]   - Field: ‘earlySignal’
[11:01:28.147]   - Field: ‘lazy’
[11:01:28.147]   - Field: ‘state’
[11:01:28.147] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.147] - Launch lazy future ...
[11:01:28.148] Packages needed by the future expression (n = 0): <none>
[11:01:28.148] Packages needed by future strategies (n = 0): <none>
[11:01:28.148] {
[11:01:28.148]     {
[11:01:28.148]         {
[11:01:28.148]             ...future.startTime <- base::Sys.time()
[11:01:28.148]             {
[11:01:28.148]                 {
[11:01:28.148]                   {
[11:01:28.148]                     base::local({
[11:01:28.148]                       has_future <- base::requireNamespace("future", 
[11:01:28.148]                         quietly = TRUE)
[11:01:28.148]                       if (has_future) {
[11:01:28.148]                         ns <- base::getNamespace("future")
[11:01:28.148]                         version <- ns[[".package"]][["version"]]
[11:01:28.148]                         if (is.null(version)) 
[11:01:28.148]                           version <- utils::packageVersion("future")
[11:01:28.148]                       }
[11:01:28.148]                       else {
[11:01:28.148]                         version <- NULL
[11:01:28.148]                       }
[11:01:28.148]                       if (!has_future || version < "1.8.0") {
[11:01:28.148]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.148]                           "", base::R.version$version.string), 
[11:01:28.148]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.148]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.148]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.148]                             "release", "version")], collapse = " "), 
[11:01:28.148]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.148]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.148]                           info)
[11:01:28.148]                         info <- base::paste(info, collapse = "; ")
[11:01:28.148]                         if (!has_future) {
[11:01:28.148]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.148]                             info)
[11:01:28.148]                         }
[11:01:28.148]                         else {
[11:01:28.148]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.148]                             info, version)
[11:01:28.148]                         }
[11:01:28.148]                         base::stop(msg)
[11:01:28.148]                       }
[11:01:28.148]                     })
[11:01:28.148]                   }
[11:01:28.148]                   ...future.strategy.old <- future::plan("list")
[11:01:28.148]                   options(future.plan = NULL)
[11:01:28.148]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.148]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.148]                 }
[11:01:28.148]                 ...future.workdir <- getwd()
[11:01:28.148]             }
[11:01:28.148]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.148]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.148]         }
[11:01:28.148]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.148]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.148]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.148]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.148]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.148]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.148]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.148]             base::names(...future.oldOptions))
[11:01:28.148]     }
[11:01:28.148]     if (FALSE) {
[11:01:28.148]     }
[11:01:28.148]     else {
[11:01:28.148]         if (TRUE) {
[11:01:28.148]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.148]                 open = "w")
[11:01:28.148]         }
[11:01:28.148]         else {
[11:01:28.148]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.148]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.148]         }
[11:01:28.148]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.148]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.148]             base::sink(type = "output", split = FALSE)
[11:01:28.148]             base::close(...future.stdout)
[11:01:28.148]         }, add = TRUE)
[11:01:28.148]     }
[11:01:28.148]     ...future.frame <- base::sys.nframe()
[11:01:28.148]     ...future.conditions <- base::list()
[11:01:28.148]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.148]     if (FALSE) {
[11:01:28.148]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.148]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.148]     }
[11:01:28.148]     ...future.result <- base::tryCatch({
[11:01:28.148]         base::withCallingHandlers({
[11:01:28.148]             ...future.value <- base::withVisible(base::local({
[11:01:28.148]                 2
[11:01:28.148]             }))
[11:01:28.148]             future::FutureResult(value = ...future.value$value, 
[11:01:28.148]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.148]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.148]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.148]                     ...future.globalenv.names))
[11:01:28.148]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.148]         }, condition = base::local({
[11:01:28.148]             c <- base::c
[11:01:28.148]             inherits <- base::inherits
[11:01:28.148]             invokeRestart <- base::invokeRestart
[11:01:28.148]             length <- base::length
[11:01:28.148]             list <- base::list
[11:01:28.148]             seq.int <- base::seq.int
[11:01:28.148]             signalCondition <- base::signalCondition
[11:01:28.148]             sys.calls <- base::sys.calls
[11:01:28.148]             `[[` <- base::`[[`
[11:01:28.148]             `+` <- base::`+`
[11:01:28.148]             `<<-` <- base::`<<-`
[11:01:28.148]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.148]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.148]                   3L)]
[11:01:28.148]             }
[11:01:28.148]             function(cond) {
[11:01:28.148]                 is_error <- inherits(cond, "error")
[11:01:28.148]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.148]                   NULL)
[11:01:28.148]                 if (is_error) {
[11:01:28.148]                   sessionInformation <- function() {
[11:01:28.148]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.148]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.148]                       search = base::search(), system = base::Sys.info())
[11:01:28.148]                   }
[11:01:28.148]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.148]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.148]                     cond$call), session = sessionInformation(), 
[11:01:28.148]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.148]                   signalCondition(cond)
[11:01:28.148]                 }
[11:01:28.148]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.148]                 "immediateCondition"))) {
[11:01:28.148]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.148]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.148]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.148]                   if (TRUE && !signal) {
[11:01:28.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.148]                     {
[11:01:28.148]                       inherits <- base::inherits
[11:01:28.148]                       invokeRestart <- base::invokeRestart
[11:01:28.148]                       is.null <- base::is.null
[11:01:28.148]                       muffled <- FALSE
[11:01:28.148]                       if (inherits(cond, "message")) {
[11:01:28.148]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.148]                         if (muffled) 
[11:01:28.148]                           invokeRestart("muffleMessage")
[11:01:28.148]                       }
[11:01:28.148]                       else if (inherits(cond, "warning")) {
[11:01:28.148]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.148]                         if (muffled) 
[11:01:28.148]                           invokeRestart("muffleWarning")
[11:01:28.148]                       }
[11:01:28.148]                       else if (inherits(cond, "condition")) {
[11:01:28.148]                         if (!is.null(pattern)) {
[11:01:28.148]                           computeRestarts <- base::computeRestarts
[11:01:28.148]                           grepl <- base::grepl
[11:01:28.148]                           restarts <- computeRestarts(cond)
[11:01:28.148]                           for (restart in restarts) {
[11:01:28.148]                             name <- restart$name
[11:01:28.148]                             if (is.null(name)) 
[11:01:28.148]                               next
[11:01:28.148]                             if (!grepl(pattern, name)) 
[11:01:28.148]                               next
[11:01:28.148]                             invokeRestart(restart)
[11:01:28.148]                             muffled <- TRUE
[11:01:28.148]                             break
[11:01:28.148]                           }
[11:01:28.148]                         }
[11:01:28.148]                       }
[11:01:28.148]                       invisible(muffled)
[11:01:28.148]                     }
[11:01:28.148]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.148]                   }
[11:01:28.148]                 }
[11:01:28.148]                 else {
[11:01:28.148]                   if (TRUE) {
[11:01:28.148]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.148]                     {
[11:01:28.148]                       inherits <- base::inherits
[11:01:28.148]                       invokeRestart <- base::invokeRestart
[11:01:28.148]                       is.null <- base::is.null
[11:01:28.148]                       muffled <- FALSE
[11:01:28.148]                       if (inherits(cond, "message")) {
[11:01:28.148]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.148]                         if (muffled) 
[11:01:28.148]                           invokeRestart("muffleMessage")
[11:01:28.148]                       }
[11:01:28.148]                       else if (inherits(cond, "warning")) {
[11:01:28.148]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.148]                         if (muffled) 
[11:01:28.148]                           invokeRestart("muffleWarning")
[11:01:28.148]                       }
[11:01:28.148]                       else if (inherits(cond, "condition")) {
[11:01:28.148]                         if (!is.null(pattern)) {
[11:01:28.148]                           computeRestarts <- base::computeRestarts
[11:01:28.148]                           grepl <- base::grepl
[11:01:28.148]                           restarts <- computeRestarts(cond)
[11:01:28.148]                           for (restart in restarts) {
[11:01:28.148]                             name <- restart$name
[11:01:28.148]                             if (is.null(name)) 
[11:01:28.148]                               next
[11:01:28.148]                             if (!grepl(pattern, name)) 
[11:01:28.148]                               next
[11:01:28.148]                             invokeRestart(restart)
[11:01:28.148]                             muffled <- TRUE
[11:01:28.148]                             break
[11:01:28.148]                           }
[11:01:28.148]                         }
[11:01:28.148]                       }
[11:01:28.148]                       invisible(muffled)
[11:01:28.148]                     }
[11:01:28.148]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.148]                   }
[11:01:28.148]                 }
[11:01:28.148]             }
[11:01:28.148]         }))
[11:01:28.148]     }, error = function(ex) {
[11:01:28.148]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.148]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.148]                 ...future.rng), started = ...future.startTime, 
[11:01:28.148]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.148]             version = "1.8"), class = "FutureResult")
[11:01:28.148]     }, finally = {
[11:01:28.148]         if (!identical(...future.workdir, getwd())) 
[11:01:28.148]             setwd(...future.workdir)
[11:01:28.148]         {
[11:01:28.148]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.148]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.148]             }
[11:01:28.148]             base::options(...future.oldOptions)
[11:01:28.148]             if (.Platform$OS.type == "windows") {
[11:01:28.148]                 old_names <- names(...future.oldEnvVars)
[11:01:28.148]                 envs <- base::Sys.getenv()
[11:01:28.148]                 names <- names(envs)
[11:01:28.148]                 common <- intersect(names, old_names)
[11:01:28.148]                 added <- setdiff(names, old_names)
[11:01:28.148]                 removed <- setdiff(old_names, names)
[11:01:28.148]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.148]                   envs[common]]
[11:01:28.148]                 NAMES <- toupper(changed)
[11:01:28.148]                 args <- list()
[11:01:28.148]                 for (kk in seq_along(NAMES)) {
[11:01:28.148]                   name <- changed[[kk]]
[11:01:28.148]                   NAME <- NAMES[[kk]]
[11:01:28.148]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.148]                     next
[11:01:28.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.148]                 }
[11:01:28.148]                 NAMES <- toupper(added)
[11:01:28.148]                 for (kk in seq_along(NAMES)) {
[11:01:28.148]                   name <- added[[kk]]
[11:01:28.148]                   NAME <- NAMES[[kk]]
[11:01:28.148]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.148]                     next
[11:01:28.148]                   args[[name]] <- ""
[11:01:28.148]                 }
[11:01:28.148]                 NAMES <- toupper(removed)
[11:01:28.148]                 for (kk in seq_along(NAMES)) {
[11:01:28.148]                   name <- removed[[kk]]
[11:01:28.148]                   NAME <- NAMES[[kk]]
[11:01:28.148]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.148]                     next
[11:01:28.148]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.148]                 }
[11:01:28.148]                 if (length(args) > 0) 
[11:01:28.148]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.148]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.148]             }
[11:01:28.148]             else {
[11:01:28.148]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.148]             }
[11:01:28.148]             {
[11:01:28.148]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.148]                   0L) {
[11:01:28.148]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.148]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.148]                   base::options(opts)
[11:01:28.148]                 }
[11:01:28.148]                 {
[11:01:28.148]                   {
[11:01:28.148]                     NULL
[11:01:28.148]                     RNGkind("Mersenne-Twister")
[11:01:28.148]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.148]                       inherits = FALSE)
[11:01:28.148]                   }
[11:01:28.148]                   options(future.plan = NULL)
[11:01:28.148]                   if (is.na(NA_character_)) 
[11:01:28.148]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.148]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.148]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.148]                     .init = FALSE)
[11:01:28.148]                 }
[11:01:28.148]             }
[11:01:28.148]         }
[11:01:28.148]     })
[11:01:28.148]     if (TRUE) {
[11:01:28.148]         base::sink(type = "output", split = FALSE)
[11:01:28.148]         if (TRUE) {
[11:01:28.148]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.148]         }
[11:01:28.148]         else {
[11:01:28.148]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.148]         }
[11:01:28.148]         base::close(...future.stdout)
[11:01:28.148]         ...future.stdout <- NULL
[11:01:28.148]     }
[11:01:28.148]     ...future.result$conditions <- ...future.conditions
[11:01:28.148]     ...future.result$finished <- base::Sys.time()
[11:01:28.148]     ...future.result
[11:01:28.148] }
[11:01:28.150] plan(): Setting new future strategy stack:
[11:01:28.150] List of future strategies:
[11:01:28.150] 1. sequential:
[11:01:28.150]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.150]    - tweaked: FALSE
[11:01:28.150]    - call: NULL
[11:01:28.150] plan(): nbrOfWorkers() = 1
[11:01:28.151] plan(): Setting new future strategy stack:
[11:01:28.151] List of future strategies:
[11:01:28.151] 1. sequential:
[11:01:28.151]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.151]    - tweaked: FALSE
[11:01:28.151]    - call: future::plan("sequential")
[11:01:28.151] plan(): nbrOfWorkers() = 1
[11:01:28.152] SequentialFuture started (and completed)
[11:01:28.152] - Launch lazy future ... done
[11:01:28.152] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[11:01:28.161] resolved() for ‘SequentialFuture’ ...
[11:01:28.161] - state: ‘finished’
[11:01:28.161] - run: FALSE
[11:01:28.161] - result: ‘FutureResult’
[11:01:28.161] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[11:01:28.162] getGlobalsAndPackages() ...
[11:01:28.162] Searching for globals...
[11:01:28.162] - globals found: [1] ‘{’
[11:01:28.162] Searching for globals ... DONE
[11:01:28.162] Resolving globals: FALSE
[11:01:28.163] 
[11:01:28.163] 
[11:01:28.163] getGlobalsAndPackages() ... DONE
[11:01:28.163] run() for ‘Future’ ...
[11:01:28.163] - state: ‘created’
[11:01:28.163] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.163] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.163] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.164]   - Field: ‘label’
[11:01:28.164]   - Field: ‘local’
[11:01:28.164]   - Field: ‘owner’
[11:01:28.164]   - Field: ‘envir’
[11:01:28.164]   - Field: ‘packages’
[11:01:28.164]   - Field: ‘gc’
[11:01:28.164]   - Field: ‘conditions’
[11:01:28.164]   - Field: ‘expr’
[11:01:28.164]   - Field: ‘uuid’
[11:01:28.164]   - Field: ‘seed’
[11:01:28.164]   - Field: ‘version’
[11:01:28.164]   - Field: ‘result’
[11:01:28.165]   - Field: ‘asynchronous’
[11:01:28.165]   - Field: ‘calls’
[11:01:28.165]   - Field: ‘globals’
[11:01:28.165]   - Field: ‘stdout’
[11:01:28.165]   - Field: ‘earlySignal’
[11:01:28.165]   - Field: ‘lazy’
[11:01:28.165]   - Field: ‘state’
[11:01:28.165] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.165] - Launch lazy future ...
[11:01:28.165] Packages needed by the future expression (n = 0): <none>
[11:01:28.165] Packages needed by future strategies (n = 0): <none>
[11:01:28.166] {
[11:01:28.166]     {
[11:01:28.166]         {
[11:01:28.166]             ...future.startTime <- base::Sys.time()
[11:01:28.166]             {
[11:01:28.166]                 {
[11:01:28.166]                   {
[11:01:28.166]                     base::local({
[11:01:28.166]                       has_future <- base::requireNamespace("future", 
[11:01:28.166]                         quietly = TRUE)
[11:01:28.166]                       if (has_future) {
[11:01:28.166]                         ns <- base::getNamespace("future")
[11:01:28.166]                         version <- ns[[".package"]][["version"]]
[11:01:28.166]                         if (is.null(version)) 
[11:01:28.166]                           version <- utils::packageVersion("future")
[11:01:28.166]                       }
[11:01:28.166]                       else {
[11:01:28.166]                         version <- NULL
[11:01:28.166]                       }
[11:01:28.166]                       if (!has_future || version < "1.8.0") {
[11:01:28.166]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.166]                           "", base::R.version$version.string), 
[11:01:28.166]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.166]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.166]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.166]                             "release", "version")], collapse = " "), 
[11:01:28.166]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.166]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.166]                           info)
[11:01:28.166]                         info <- base::paste(info, collapse = "; ")
[11:01:28.166]                         if (!has_future) {
[11:01:28.166]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.166]                             info)
[11:01:28.166]                         }
[11:01:28.166]                         else {
[11:01:28.166]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.166]                             info, version)
[11:01:28.166]                         }
[11:01:28.166]                         base::stop(msg)
[11:01:28.166]                       }
[11:01:28.166]                     })
[11:01:28.166]                   }
[11:01:28.166]                   ...future.strategy.old <- future::plan("list")
[11:01:28.166]                   options(future.plan = NULL)
[11:01:28.166]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.166]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.166]                 }
[11:01:28.166]                 ...future.workdir <- getwd()
[11:01:28.166]             }
[11:01:28.166]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.166]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.166]         }
[11:01:28.166]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.166]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.166]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.166]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.166]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.166]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.166]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.166]             base::names(...future.oldOptions))
[11:01:28.166]     }
[11:01:28.166]     if (FALSE) {
[11:01:28.166]     }
[11:01:28.166]     else {
[11:01:28.166]         if (TRUE) {
[11:01:28.166]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.166]                 open = "w")
[11:01:28.166]         }
[11:01:28.166]         else {
[11:01:28.166]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.166]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.166]         }
[11:01:28.166]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.166]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.166]             base::sink(type = "output", split = FALSE)
[11:01:28.166]             base::close(...future.stdout)
[11:01:28.166]         }, add = TRUE)
[11:01:28.166]     }
[11:01:28.166]     ...future.frame <- base::sys.nframe()
[11:01:28.166]     ...future.conditions <- base::list()
[11:01:28.166]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.166]     if (FALSE) {
[11:01:28.166]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.166]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.166]     }
[11:01:28.166]     ...future.result <- base::tryCatch({
[11:01:28.166]         base::withCallingHandlers({
[11:01:28.166]             ...future.value <- base::withVisible(base::local({
[11:01:28.166]                 2
[11:01:28.166]             }))
[11:01:28.166]             future::FutureResult(value = ...future.value$value, 
[11:01:28.166]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.166]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.166]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.166]                     ...future.globalenv.names))
[11:01:28.166]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.166]         }, condition = base::local({
[11:01:28.166]             c <- base::c
[11:01:28.166]             inherits <- base::inherits
[11:01:28.166]             invokeRestart <- base::invokeRestart
[11:01:28.166]             length <- base::length
[11:01:28.166]             list <- base::list
[11:01:28.166]             seq.int <- base::seq.int
[11:01:28.166]             signalCondition <- base::signalCondition
[11:01:28.166]             sys.calls <- base::sys.calls
[11:01:28.166]             `[[` <- base::`[[`
[11:01:28.166]             `+` <- base::`+`
[11:01:28.166]             `<<-` <- base::`<<-`
[11:01:28.166]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.166]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.166]                   3L)]
[11:01:28.166]             }
[11:01:28.166]             function(cond) {
[11:01:28.166]                 is_error <- inherits(cond, "error")
[11:01:28.166]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.166]                   NULL)
[11:01:28.166]                 if (is_error) {
[11:01:28.166]                   sessionInformation <- function() {
[11:01:28.166]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.166]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.166]                       search = base::search(), system = base::Sys.info())
[11:01:28.166]                   }
[11:01:28.166]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.166]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.166]                     cond$call), session = sessionInformation(), 
[11:01:28.166]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.166]                   signalCondition(cond)
[11:01:28.166]                 }
[11:01:28.166]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.166]                 "immediateCondition"))) {
[11:01:28.166]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.166]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.166]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.166]                   if (TRUE && !signal) {
[11:01:28.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.166]                     {
[11:01:28.166]                       inherits <- base::inherits
[11:01:28.166]                       invokeRestart <- base::invokeRestart
[11:01:28.166]                       is.null <- base::is.null
[11:01:28.166]                       muffled <- FALSE
[11:01:28.166]                       if (inherits(cond, "message")) {
[11:01:28.166]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.166]                         if (muffled) 
[11:01:28.166]                           invokeRestart("muffleMessage")
[11:01:28.166]                       }
[11:01:28.166]                       else if (inherits(cond, "warning")) {
[11:01:28.166]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.166]                         if (muffled) 
[11:01:28.166]                           invokeRestart("muffleWarning")
[11:01:28.166]                       }
[11:01:28.166]                       else if (inherits(cond, "condition")) {
[11:01:28.166]                         if (!is.null(pattern)) {
[11:01:28.166]                           computeRestarts <- base::computeRestarts
[11:01:28.166]                           grepl <- base::grepl
[11:01:28.166]                           restarts <- computeRestarts(cond)
[11:01:28.166]                           for (restart in restarts) {
[11:01:28.166]                             name <- restart$name
[11:01:28.166]                             if (is.null(name)) 
[11:01:28.166]                               next
[11:01:28.166]                             if (!grepl(pattern, name)) 
[11:01:28.166]                               next
[11:01:28.166]                             invokeRestart(restart)
[11:01:28.166]                             muffled <- TRUE
[11:01:28.166]                             break
[11:01:28.166]                           }
[11:01:28.166]                         }
[11:01:28.166]                       }
[11:01:28.166]                       invisible(muffled)
[11:01:28.166]                     }
[11:01:28.166]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.166]                   }
[11:01:28.166]                 }
[11:01:28.166]                 else {
[11:01:28.166]                   if (TRUE) {
[11:01:28.166]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.166]                     {
[11:01:28.166]                       inherits <- base::inherits
[11:01:28.166]                       invokeRestart <- base::invokeRestart
[11:01:28.166]                       is.null <- base::is.null
[11:01:28.166]                       muffled <- FALSE
[11:01:28.166]                       if (inherits(cond, "message")) {
[11:01:28.166]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.166]                         if (muffled) 
[11:01:28.166]                           invokeRestart("muffleMessage")
[11:01:28.166]                       }
[11:01:28.166]                       else if (inherits(cond, "warning")) {
[11:01:28.166]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.166]                         if (muffled) 
[11:01:28.166]                           invokeRestart("muffleWarning")
[11:01:28.166]                       }
[11:01:28.166]                       else if (inherits(cond, "condition")) {
[11:01:28.166]                         if (!is.null(pattern)) {
[11:01:28.166]                           computeRestarts <- base::computeRestarts
[11:01:28.166]                           grepl <- base::grepl
[11:01:28.166]                           restarts <- computeRestarts(cond)
[11:01:28.166]                           for (restart in restarts) {
[11:01:28.166]                             name <- restart$name
[11:01:28.166]                             if (is.null(name)) 
[11:01:28.166]                               next
[11:01:28.166]                             if (!grepl(pattern, name)) 
[11:01:28.166]                               next
[11:01:28.166]                             invokeRestart(restart)
[11:01:28.166]                             muffled <- TRUE
[11:01:28.166]                             break
[11:01:28.166]                           }
[11:01:28.166]                         }
[11:01:28.166]                       }
[11:01:28.166]                       invisible(muffled)
[11:01:28.166]                     }
[11:01:28.166]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.166]                   }
[11:01:28.166]                 }
[11:01:28.166]             }
[11:01:28.166]         }))
[11:01:28.166]     }, error = function(ex) {
[11:01:28.166]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.166]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.166]                 ...future.rng), started = ...future.startTime, 
[11:01:28.166]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.166]             version = "1.8"), class = "FutureResult")
[11:01:28.166]     }, finally = {
[11:01:28.166]         if (!identical(...future.workdir, getwd())) 
[11:01:28.166]             setwd(...future.workdir)
[11:01:28.166]         {
[11:01:28.166]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.166]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.166]             }
[11:01:28.166]             base::options(...future.oldOptions)
[11:01:28.166]             if (.Platform$OS.type == "windows") {
[11:01:28.166]                 old_names <- names(...future.oldEnvVars)
[11:01:28.166]                 envs <- base::Sys.getenv()
[11:01:28.166]                 names <- names(envs)
[11:01:28.166]                 common <- intersect(names, old_names)
[11:01:28.166]                 added <- setdiff(names, old_names)
[11:01:28.166]                 removed <- setdiff(old_names, names)
[11:01:28.166]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.166]                   envs[common]]
[11:01:28.166]                 NAMES <- toupper(changed)
[11:01:28.166]                 args <- list()
[11:01:28.166]                 for (kk in seq_along(NAMES)) {
[11:01:28.166]                   name <- changed[[kk]]
[11:01:28.166]                   NAME <- NAMES[[kk]]
[11:01:28.166]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.166]                     next
[11:01:28.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.166]                 }
[11:01:28.166]                 NAMES <- toupper(added)
[11:01:28.166]                 for (kk in seq_along(NAMES)) {
[11:01:28.166]                   name <- added[[kk]]
[11:01:28.166]                   NAME <- NAMES[[kk]]
[11:01:28.166]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.166]                     next
[11:01:28.166]                   args[[name]] <- ""
[11:01:28.166]                 }
[11:01:28.166]                 NAMES <- toupper(removed)
[11:01:28.166]                 for (kk in seq_along(NAMES)) {
[11:01:28.166]                   name <- removed[[kk]]
[11:01:28.166]                   NAME <- NAMES[[kk]]
[11:01:28.166]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.166]                     next
[11:01:28.166]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.166]                 }
[11:01:28.166]                 if (length(args) > 0) 
[11:01:28.166]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.166]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.166]             }
[11:01:28.166]             else {
[11:01:28.166]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.166]             }
[11:01:28.166]             {
[11:01:28.166]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.166]                   0L) {
[11:01:28.166]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.166]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.166]                   base::options(opts)
[11:01:28.166]                 }
[11:01:28.166]                 {
[11:01:28.166]                   {
[11:01:28.166]                     NULL
[11:01:28.166]                     RNGkind("Mersenne-Twister")
[11:01:28.166]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.166]                       inherits = FALSE)
[11:01:28.166]                   }
[11:01:28.166]                   options(future.plan = NULL)
[11:01:28.166]                   if (is.na(NA_character_)) 
[11:01:28.166]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.166]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.166]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.166]                     .init = FALSE)
[11:01:28.166]                 }
[11:01:28.166]             }
[11:01:28.166]         }
[11:01:28.166]     })
[11:01:28.166]     if (TRUE) {
[11:01:28.166]         base::sink(type = "output", split = FALSE)
[11:01:28.166]         if (TRUE) {
[11:01:28.166]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.166]         }
[11:01:28.166]         else {
[11:01:28.166]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.166]         }
[11:01:28.166]         base::close(...future.stdout)
[11:01:28.166]         ...future.stdout <- NULL
[11:01:28.166]     }
[11:01:28.166]     ...future.result$conditions <- ...future.conditions
[11:01:28.166]     ...future.result$finished <- base::Sys.time()
[11:01:28.166]     ...future.result
[11:01:28.166] }
[11:01:28.168] plan(): Setting new future strategy stack:
[11:01:28.168] List of future strategies:
[11:01:28.168] 1. sequential:
[11:01:28.168]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.168]    - tweaked: FALSE
[11:01:28.168]    - call: NULL
[11:01:28.168] plan(): nbrOfWorkers() = 1
[11:01:28.169] plan(): Setting new future strategy stack:
[11:01:28.169] List of future strategies:
[11:01:28.169] 1. sequential:
[11:01:28.169]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.169]    - tweaked: FALSE
[11:01:28.169]    - call: future::plan("sequential")
[11:01:28.169] plan(): nbrOfWorkers() = 1
[11:01:28.169] SequentialFuture started (and completed)
[11:01:28.169] - Launch lazy future ... done
[11:01:28.169] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[11:01:28.170] getGlobalsAndPackages() ...
[11:01:28.170] Searching for globals...
[11:01:28.171] 
[11:01:28.171] Searching for globals ... DONE
[11:01:28.171] - globals: [0] <none>
[11:01:28.171] getGlobalsAndPackages() ... DONE
[11:01:28.171] run() for ‘Future’ ...
[11:01:28.171] - state: ‘created’
[11:01:28.171] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:28.171] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:28.172] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:28.172]   - Field: ‘label’
[11:01:28.172]   - Field: ‘local’
[11:01:28.172]   - Field: ‘owner’
[11:01:28.172]   - Field: ‘envir’
[11:01:28.172]   - Field: ‘packages’
[11:01:28.172]   - Field: ‘gc’
[11:01:28.172]   - Field: ‘conditions’
[11:01:28.172]   - Field: ‘expr’
[11:01:28.172]   - Field: ‘uuid’
[11:01:28.172]   - Field: ‘seed’
[11:01:28.172]   - Field: ‘version’
[11:01:28.172]   - Field: ‘result’
[11:01:28.173]   - Field: ‘asynchronous’
[11:01:28.173]   - Field: ‘calls’
[11:01:28.173]   - Field: ‘globals’
[11:01:28.173]   - Field: ‘stdout’
[11:01:28.173]   - Field: ‘earlySignal’
[11:01:28.173]   - Field: ‘lazy’
[11:01:28.173]   - Field: ‘state’
[11:01:28.173] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:28.173] - Launch lazy future ...
[11:01:28.173] Packages needed by the future expression (n = 0): <none>
[11:01:28.173] Packages needed by future strategies (n = 0): <none>
[11:01:28.174] {
[11:01:28.174]     {
[11:01:28.174]         {
[11:01:28.174]             ...future.startTime <- base::Sys.time()
[11:01:28.174]             {
[11:01:28.174]                 {
[11:01:28.174]                   {
[11:01:28.174]                     base::local({
[11:01:28.174]                       has_future <- base::requireNamespace("future", 
[11:01:28.174]                         quietly = TRUE)
[11:01:28.174]                       if (has_future) {
[11:01:28.174]                         ns <- base::getNamespace("future")
[11:01:28.174]                         version <- ns[[".package"]][["version"]]
[11:01:28.174]                         if (is.null(version)) 
[11:01:28.174]                           version <- utils::packageVersion("future")
[11:01:28.174]                       }
[11:01:28.174]                       else {
[11:01:28.174]                         version <- NULL
[11:01:28.174]                       }
[11:01:28.174]                       if (!has_future || version < "1.8.0") {
[11:01:28.174]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:28.174]                           "", base::R.version$version.string), 
[11:01:28.174]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:28.174]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:28.174]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:28.174]                             "release", "version")], collapse = " "), 
[11:01:28.174]                           hostname = base::Sys.info()[["nodename"]])
[11:01:28.174]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:28.174]                           info)
[11:01:28.174]                         info <- base::paste(info, collapse = "; ")
[11:01:28.174]                         if (!has_future) {
[11:01:28.174]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:28.174]                             info)
[11:01:28.174]                         }
[11:01:28.174]                         else {
[11:01:28.174]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:28.174]                             info, version)
[11:01:28.174]                         }
[11:01:28.174]                         base::stop(msg)
[11:01:28.174]                       }
[11:01:28.174]                     })
[11:01:28.174]                   }
[11:01:28.174]                   ...future.strategy.old <- future::plan("list")
[11:01:28.174]                   options(future.plan = NULL)
[11:01:28.174]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.174]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:28.174]                 }
[11:01:28.174]                 ...future.workdir <- getwd()
[11:01:28.174]             }
[11:01:28.174]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:28.174]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:28.174]         }
[11:01:28.174]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:28.174]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:28.174]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:28.174]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:28.174]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:28.174]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:28.174]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:28.174]             base::names(...future.oldOptions))
[11:01:28.174]     }
[11:01:28.174]     if (FALSE) {
[11:01:28.174]     }
[11:01:28.174]     else {
[11:01:28.174]         if (TRUE) {
[11:01:28.174]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:28.174]                 open = "w")
[11:01:28.174]         }
[11:01:28.174]         else {
[11:01:28.174]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:28.174]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:28.174]         }
[11:01:28.174]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:28.174]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:28.174]             base::sink(type = "output", split = FALSE)
[11:01:28.174]             base::close(...future.stdout)
[11:01:28.174]         }, add = TRUE)
[11:01:28.174]     }
[11:01:28.174]     ...future.frame <- base::sys.nframe()
[11:01:28.174]     ...future.conditions <- base::list()
[11:01:28.174]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:28.174]     if (FALSE) {
[11:01:28.174]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:28.174]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:28.174]     }
[11:01:28.174]     ...future.result <- base::tryCatch({
[11:01:28.174]         base::withCallingHandlers({
[11:01:28.174]             ...future.value <- base::withVisible(base::local(1))
[11:01:28.174]             future::FutureResult(value = ...future.value$value, 
[11:01:28.174]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.174]                   ...future.rng), globalenv = if (FALSE) 
[11:01:28.174]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:28.174]                     ...future.globalenv.names))
[11:01:28.174]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:28.174]         }, condition = base::local({
[11:01:28.174]             c <- base::c
[11:01:28.174]             inherits <- base::inherits
[11:01:28.174]             invokeRestart <- base::invokeRestart
[11:01:28.174]             length <- base::length
[11:01:28.174]             list <- base::list
[11:01:28.174]             seq.int <- base::seq.int
[11:01:28.174]             signalCondition <- base::signalCondition
[11:01:28.174]             sys.calls <- base::sys.calls
[11:01:28.174]             `[[` <- base::`[[`
[11:01:28.174]             `+` <- base::`+`
[11:01:28.174]             `<<-` <- base::`<<-`
[11:01:28.174]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:28.174]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:28.174]                   3L)]
[11:01:28.174]             }
[11:01:28.174]             function(cond) {
[11:01:28.174]                 is_error <- inherits(cond, "error")
[11:01:28.174]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:28.174]                   NULL)
[11:01:28.174]                 if (is_error) {
[11:01:28.174]                   sessionInformation <- function() {
[11:01:28.174]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:28.174]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:28.174]                       search = base::search(), system = base::Sys.info())
[11:01:28.174]                   }
[11:01:28.174]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.174]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:28.174]                     cond$call), session = sessionInformation(), 
[11:01:28.174]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:28.174]                   signalCondition(cond)
[11:01:28.174]                 }
[11:01:28.174]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:28.174]                 "immediateCondition"))) {
[11:01:28.174]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:28.174]                   ...future.conditions[[length(...future.conditions) + 
[11:01:28.174]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:28.174]                   if (TRUE && !signal) {
[11:01:28.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.174]                     {
[11:01:28.174]                       inherits <- base::inherits
[11:01:28.174]                       invokeRestart <- base::invokeRestart
[11:01:28.174]                       is.null <- base::is.null
[11:01:28.174]                       muffled <- FALSE
[11:01:28.174]                       if (inherits(cond, "message")) {
[11:01:28.174]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.174]                         if (muffled) 
[11:01:28.174]                           invokeRestart("muffleMessage")
[11:01:28.174]                       }
[11:01:28.174]                       else if (inherits(cond, "warning")) {
[11:01:28.174]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.174]                         if (muffled) 
[11:01:28.174]                           invokeRestart("muffleWarning")
[11:01:28.174]                       }
[11:01:28.174]                       else if (inherits(cond, "condition")) {
[11:01:28.174]                         if (!is.null(pattern)) {
[11:01:28.174]                           computeRestarts <- base::computeRestarts
[11:01:28.174]                           grepl <- base::grepl
[11:01:28.174]                           restarts <- computeRestarts(cond)
[11:01:28.174]                           for (restart in restarts) {
[11:01:28.174]                             name <- restart$name
[11:01:28.174]                             if (is.null(name)) 
[11:01:28.174]                               next
[11:01:28.174]                             if (!grepl(pattern, name)) 
[11:01:28.174]                               next
[11:01:28.174]                             invokeRestart(restart)
[11:01:28.174]                             muffled <- TRUE
[11:01:28.174]                             break
[11:01:28.174]                           }
[11:01:28.174]                         }
[11:01:28.174]                       }
[11:01:28.174]                       invisible(muffled)
[11:01:28.174]                     }
[11:01:28.174]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.174]                   }
[11:01:28.174]                 }
[11:01:28.174]                 else {
[11:01:28.174]                   if (TRUE) {
[11:01:28.174]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:28.174]                     {
[11:01:28.174]                       inherits <- base::inherits
[11:01:28.174]                       invokeRestart <- base::invokeRestart
[11:01:28.174]                       is.null <- base::is.null
[11:01:28.174]                       muffled <- FALSE
[11:01:28.174]                       if (inherits(cond, "message")) {
[11:01:28.174]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:28.174]                         if (muffled) 
[11:01:28.174]                           invokeRestart("muffleMessage")
[11:01:28.174]                       }
[11:01:28.174]                       else if (inherits(cond, "warning")) {
[11:01:28.174]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:28.174]                         if (muffled) 
[11:01:28.174]                           invokeRestart("muffleWarning")
[11:01:28.174]                       }
[11:01:28.174]                       else if (inherits(cond, "condition")) {
[11:01:28.174]                         if (!is.null(pattern)) {
[11:01:28.174]                           computeRestarts <- base::computeRestarts
[11:01:28.174]                           grepl <- base::grepl
[11:01:28.174]                           restarts <- computeRestarts(cond)
[11:01:28.174]                           for (restart in restarts) {
[11:01:28.174]                             name <- restart$name
[11:01:28.174]                             if (is.null(name)) 
[11:01:28.174]                               next
[11:01:28.174]                             if (!grepl(pattern, name)) 
[11:01:28.174]                               next
[11:01:28.174]                             invokeRestart(restart)
[11:01:28.174]                             muffled <- TRUE
[11:01:28.174]                             break
[11:01:28.174]                           }
[11:01:28.174]                         }
[11:01:28.174]                       }
[11:01:28.174]                       invisible(muffled)
[11:01:28.174]                     }
[11:01:28.174]                     muffleCondition(cond, pattern = "^muffle")
[11:01:28.174]                   }
[11:01:28.174]                 }
[11:01:28.174]             }
[11:01:28.174]         }))
[11:01:28.174]     }, error = function(ex) {
[11:01:28.174]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:28.174]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:28.174]                 ...future.rng), started = ...future.startTime, 
[11:01:28.174]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:28.174]             version = "1.8"), class = "FutureResult")
[11:01:28.174]     }, finally = {
[11:01:28.174]         if (!identical(...future.workdir, getwd())) 
[11:01:28.174]             setwd(...future.workdir)
[11:01:28.174]         {
[11:01:28.174]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:28.174]                 ...future.oldOptions$nwarnings <- NULL
[11:01:28.174]             }
[11:01:28.174]             base::options(...future.oldOptions)
[11:01:28.174]             if (.Platform$OS.type == "windows") {
[11:01:28.174]                 old_names <- names(...future.oldEnvVars)
[11:01:28.174]                 envs <- base::Sys.getenv()
[11:01:28.174]                 names <- names(envs)
[11:01:28.174]                 common <- intersect(names, old_names)
[11:01:28.174]                 added <- setdiff(names, old_names)
[11:01:28.174]                 removed <- setdiff(old_names, names)
[11:01:28.174]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:28.174]                   envs[common]]
[11:01:28.174]                 NAMES <- toupper(changed)
[11:01:28.174]                 args <- list()
[11:01:28.174]                 for (kk in seq_along(NAMES)) {
[11:01:28.174]                   name <- changed[[kk]]
[11:01:28.174]                   NAME <- NAMES[[kk]]
[11:01:28.174]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.174]                     next
[11:01:28.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.174]                 }
[11:01:28.174]                 NAMES <- toupper(added)
[11:01:28.174]                 for (kk in seq_along(NAMES)) {
[11:01:28.174]                   name <- added[[kk]]
[11:01:28.174]                   NAME <- NAMES[[kk]]
[11:01:28.174]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.174]                     next
[11:01:28.174]                   args[[name]] <- ""
[11:01:28.174]                 }
[11:01:28.174]                 NAMES <- toupper(removed)
[11:01:28.174]                 for (kk in seq_along(NAMES)) {
[11:01:28.174]                   name <- removed[[kk]]
[11:01:28.174]                   NAME <- NAMES[[kk]]
[11:01:28.174]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:28.174]                     next
[11:01:28.174]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:28.174]                 }
[11:01:28.174]                 if (length(args) > 0) 
[11:01:28.174]                   base::do.call(base::Sys.setenv, args = args)
[11:01:28.174]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:28.174]             }
[11:01:28.174]             else {
[11:01:28.174]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:28.174]             }
[11:01:28.174]             {
[11:01:28.174]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:28.174]                   0L) {
[11:01:28.174]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:28.174]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:28.174]                   base::options(opts)
[11:01:28.174]                 }
[11:01:28.174]                 {
[11:01:28.174]                   {
[11:01:28.174]                     NULL
[11:01:28.174]                     RNGkind("Mersenne-Twister")
[11:01:28.174]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:28.174]                       inherits = FALSE)
[11:01:28.174]                   }
[11:01:28.174]                   options(future.plan = NULL)
[11:01:28.174]                   if (is.na(NA_character_)) 
[11:01:28.174]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:28.174]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:28.174]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:28.174]                     .init = FALSE)
[11:01:28.174]                 }
[11:01:28.174]             }
[11:01:28.174]         }
[11:01:28.174]     })
[11:01:28.174]     if (TRUE) {
[11:01:28.174]         base::sink(type = "output", split = FALSE)
[11:01:28.174]         if (TRUE) {
[11:01:28.174]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:28.174]         }
[11:01:28.174]         else {
[11:01:28.174]             ...future.result["stdout"] <- base::list(NULL)
[11:01:28.174]         }
[11:01:28.174]         base::close(...future.stdout)
[11:01:28.174]         ...future.stdout <- NULL
[11:01:28.174]     }
[11:01:28.174]     ...future.result$conditions <- ...future.conditions
[11:01:28.174]     ...future.result$finished <- base::Sys.time()
[11:01:28.174]     ...future.result
[11:01:28.174] }
[11:01:28.176] plan(): Setting new future strategy stack:
[11:01:28.176] List of future strategies:
[11:01:28.176] 1. sequential:
[11:01:28.176]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.176]    - tweaked: FALSE
[11:01:28.176]    - call: NULL
[11:01:28.176] plan(): nbrOfWorkers() = 1
[11:01:28.177] plan(): Setting new future strategy stack:
[11:01:28.177] List of future strategies:
[11:01:28.177] 1. sequential:
[11:01:28.177]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.177]    - tweaked: FALSE
[11:01:28.177]    - call: future::plan("sequential")
[11:01:28.177] plan(): nbrOfWorkers() = 1
[11:01:28.177] SequentialFuture started (and completed)
[11:01:28.177] - Launch lazy future ... done
[11:01:28.177] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 972838e4-79fb-8874-7206-3ff6930a6cb7
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[11:01:28.178] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[11:01:28.178] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[11:01:28.179] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[11:01:28.179] plan(): Setting new future strategy stack:
[11:01:28.179] List of future strategies:
[11:01:28.179] 1. FutureStrategy:
[11:01:28.179]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:28.179]    - tweaked: FALSE
[11:01:28.179]    - call: future::plan(oplan)
[11:01:28.191] plan(): nbrOfWorkers() = 1
> 
