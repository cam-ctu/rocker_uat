
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:49.650] plan(): Setting new future strategy stack:
[08:27:49.650] List of future strategies:
[08:27:49.650] 1. sequential:
[08:27:49.650]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.650]    - tweaked: FALSE
[08:27:49.650]    - call: future::plan("sequential")
[08:27:49.665] plan(): nbrOfWorkers() = 1
> 
> message("*** FutureRegistry() ...")
*** FutureRegistry() ...
> 
> for (where in c(sprintf("multicore-%s", future:::session_uuid()), "rscript")) {
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 1 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'remove') ...", where))
+   FutureRegistry(where, action = "remove", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 1L)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'collect-first') ...", where))
+   FutureRegistry(where, action = "collect-first")
+ 
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) < 1L)
+ 
+   message(sprintf("*** FutureRegistry('%s', 'add') ...", where))
+   f <- future({ 2 })
+   print(f)
+   FutureRegistry(where, action = "add", future = f)
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'reset') ...", where))
+   FutureRegistry(where, action = "reset")
+ 
+ 
+   message(sprintf("*** FutureRegistry('%s', 'list') ...", where))
+   futures <- FutureRegistry(where, action = "list")
+   print(futures)
+   stopifnot(length(futures) == 0L)
+ }
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'list') ...
list()
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'add') ...
[08:27:49.707] getGlobalsAndPackages() ...
[08:27:49.707] Searching for globals...
[08:27:49.710] - globals found: [1] ‘{’
[08:27:49.710] Searching for globals ... DONE
[08:27:49.711] Resolving globals: FALSE
[08:27:49.711] 
[08:27:49.711] 
[08:27:49.711] getGlobalsAndPackages() ... DONE
[08:27:49.712] run() for ‘Future’ ...
[08:27:49.712] - state: ‘created’
[08:27:49.712] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.712] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.713] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.713]   - Field: ‘label’
[08:27:49.713]   - Field: ‘local’
[08:27:49.713]   - Field: ‘owner’
[08:27:49.713]   - Field: ‘envir’
[08:27:49.713]   - Field: ‘packages’
[08:27:49.713]   - Field: ‘gc’
[08:27:49.713]   - Field: ‘conditions’
[08:27:49.713]   - Field: ‘expr’
[08:27:49.713]   - Field: ‘uuid’
[08:27:49.713]   - Field: ‘seed’
[08:27:49.714]   - Field: ‘version’
[08:27:49.714]   - Field: ‘result’
[08:27:49.714]   - Field: ‘asynchronous’
[08:27:49.714]   - Field: ‘calls’
[08:27:49.714]   - Field: ‘globals’
[08:27:49.714]   - Field: ‘stdout’
[08:27:49.714]   - Field: ‘earlySignal’
[08:27:49.714]   - Field: ‘lazy’
[08:27:49.714]   - Field: ‘state’
[08:27:49.714] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.714] - Launch lazy future ...
[08:27:49.715] Packages needed by the future expression (n = 0): <none>
[08:27:49.715] Packages needed by future strategies (n = 0): <none>
[08:27:49.716] {
[08:27:49.716]     {
[08:27:49.716]         {
[08:27:49.716]             ...future.startTime <- base::Sys.time()
[08:27:49.716]             {
[08:27:49.716]                 {
[08:27:49.716]                   {
[08:27:49.716]                     base::local({
[08:27:49.716]                       has_future <- base::requireNamespace("future", 
[08:27:49.716]                         quietly = TRUE)
[08:27:49.716]                       if (has_future) {
[08:27:49.716]                         ns <- base::getNamespace("future")
[08:27:49.716]                         version <- ns[[".package"]][["version"]]
[08:27:49.716]                         if (is.null(version)) 
[08:27:49.716]                           version <- utils::packageVersion("future")
[08:27:49.716]                       }
[08:27:49.716]                       else {
[08:27:49.716]                         version <- NULL
[08:27:49.716]                       }
[08:27:49.716]                       if (!has_future || version < "1.8.0") {
[08:27:49.716]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.716]                           "", base::R.version$version.string), 
[08:27:49.716]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.716]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.716]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.716]                             "release", "version")], collapse = " "), 
[08:27:49.716]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.716]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.716]                           info)
[08:27:49.716]                         info <- base::paste(info, collapse = "; ")
[08:27:49.716]                         if (!has_future) {
[08:27:49.716]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.716]                             info)
[08:27:49.716]                         }
[08:27:49.716]                         else {
[08:27:49.716]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.716]                             info, version)
[08:27:49.716]                         }
[08:27:49.716]                         base::stop(msg)
[08:27:49.716]                       }
[08:27:49.716]                     })
[08:27:49.716]                   }
[08:27:49.716]                   ...future.strategy.old <- future::plan("list")
[08:27:49.716]                   options(future.plan = NULL)
[08:27:49.716]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.716]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.716]                 }
[08:27:49.716]                 ...future.workdir <- getwd()
[08:27:49.716]             }
[08:27:49.716]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.716]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.716]         }
[08:27:49.716]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.716]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.716]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.716]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.716]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.716]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.716]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.716]             base::names(...future.oldOptions))
[08:27:49.716]     }
[08:27:49.716]     if (FALSE) {
[08:27:49.716]     }
[08:27:49.716]     else {
[08:27:49.716]         if (TRUE) {
[08:27:49.716]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.716]                 open = "w")
[08:27:49.716]         }
[08:27:49.716]         else {
[08:27:49.716]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.716]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.716]         }
[08:27:49.716]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.716]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.716]             base::sink(type = "output", split = FALSE)
[08:27:49.716]             base::close(...future.stdout)
[08:27:49.716]         }, add = TRUE)
[08:27:49.716]     }
[08:27:49.716]     ...future.frame <- base::sys.nframe()
[08:27:49.716]     ...future.conditions <- base::list()
[08:27:49.716]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.716]     if (FALSE) {
[08:27:49.716]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.716]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.716]     }
[08:27:49.716]     ...future.result <- base::tryCatch({
[08:27:49.716]         base::withCallingHandlers({
[08:27:49.716]             ...future.value <- base::withVisible(base::local({
[08:27:49.716]                 1
[08:27:49.716]             }))
[08:27:49.716]             future::FutureResult(value = ...future.value$value, 
[08:27:49.716]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.716]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.716]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.716]                     ...future.globalenv.names))
[08:27:49.716]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.716]         }, condition = base::local({
[08:27:49.716]             c <- base::c
[08:27:49.716]             inherits <- base::inherits
[08:27:49.716]             invokeRestart <- base::invokeRestart
[08:27:49.716]             length <- base::length
[08:27:49.716]             list <- base::list
[08:27:49.716]             seq.int <- base::seq.int
[08:27:49.716]             signalCondition <- base::signalCondition
[08:27:49.716]             sys.calls <- base::sys.calls
[08:27:49.716]             `[[` <- base::`[[`
[08:27:49.716]             `+` <- base::`+`
[08:27:49.716]             `<<-` <- base::`<<-`
[08:27:49.716]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.716]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.716]                   3L)]
[08:27:49.716]             }
[08:27:49.716]             function(cond) {
[08:27:49.716]                 is_error <- inherits(cond, "error")
[08:27:49.716]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.716]                   NULL)
[08:27:49.716]                 if (is_error) {
[08:27:49.716]                   sessionInformation <- function() {
[08:27:49.716]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.716]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.716]                       search = base::search(), system = base::Sys.info())
[08:27:49.716]                   }
[08:27:49.716]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.716]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.716]                     cond$call), session = sessionInformation(), 
[08:27:49.716]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.716]                   signalCondition(cond)
[08:27:49.716]                 }
[08:27:49.716]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.716]                 "immediateCondition"))) {
[08:27:49.716]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.716]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.716]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.716]                   if (TRUE && !signal) {
[08:27:49.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.716]                     {
[08:27:49.716]                       inherits <- base::inherits
[08:27:49.716]                       invokeRestart <- base::invokeRestart
[08:27:49.716]                       is.null <- base::is.null
[08:27:49.716]                       muffled <- FALSE
[08:27:49.716]                       if (inherits(cond, "message")) {
[08:27:49.716]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.716]                         if (muffled) 
[08:27:49.716]                           invokeRestart("muffleMessage")
[08:27:49.716]                       }
[08:27:49.716]                       else if (inherits(cond, "warning")) {
[08:27:49.716]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.716]                         if (muffled) 
[08:27:49.716]                           invokeRestart("muffleWarning")
[08:27:49.716]                       }
[08:27:49.716]                       else if (inherits(cond, "condition")) {
[08:27:49.716]                         if (!is.null(pattern)) {
[08:27:49.716]                           computeRestarts <- base::computeRestarts
[08:27:49.716]                           grepl <- base::grepl
[08:27:49.716]                           restarts <- computeRestarts(cond)
[08:27:49.716]                           for (restart in restarts) {
[08:27:49.716]                             name <- restart$name
[08:27:49.716]                             if (is.null(name)) 
[08:27:49.716]                               next
[08:27:49.716]                             if (!grepl(pattern, name)) 
[08:27:49.716]                               next
[08:27:49.716]                             invokeRestart(restart)
[08:27:49.716]                             muffled <- TRUE
[08:27:49.716]                             break
[08:27:49.716]                           }
[08:27:49.716]                         }
[08:27:49.716]                       }
[08:27:49.716]                       invisible(muffled)
[08:27:49.716]                     }
[08:27:49.716]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.716]                   }
[08:27:49.716]                 }
[08:27:49.716]                 else {
[08:27:49.716]                   if (TRUE) {
[08:27:49.716]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.716]                     {
[08:27:49.716]                       inherits <- base::inherits
[08:27:49.716]                       invokeRestart <- base::invokeRestart
[08:27:49.716]                       is.null <- base::is.null
[08:27:49.716]                       muffled <- FALSE
[08:27:49.716]                       if (inherits(cond, "message")) {
[08:27:49.716]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.716]                         if (muffled) 
[08:27:49.716]                           invokeRestart("muffleMessage")
[08:27:49.716]                       }
[08:27:49.716]                       else if (inherits(cond, "warning")) {
[08:27:49.716]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.716]                         if (muffled) 
[08:27:49.716]                           invokeRestart("muffleWarning")
[08:27:49.716]                       }
[08:27:49.716]                       else if (inherits(cond, "condition")) {
[08:27:49.716]                         if (!is.null(pattern)) {
[08:27:49.716]                           computeRestarts <- base::computeRestarts
[08:27:49.716]                           grepl <- base::grepl
[08:27:49.716]                           restarts <- computeRestarts(cond)
[08:27:49.716]                           for (restart in restarts) {
[08:27:49.716]                             name <- restart$name
[08:27:49.716]                             if (is.null(name)) 
[08:27:49.716]                               next
[08:27:49.716]                             if (!grepl(pattern, name)) 
[08:27:49.716]                               next
[08:27:49.716]                             invokeRestart(restart)
[08:27:49.716]                             muffled <- TRUE
[08:27:49.716]                             break
[08:27:49.716]                           }
[08:27:49.716]                         }
[08:27:49.716]                       }
[08:27:49.716]                       invisible(muffled)
[08:27:49.716]                     }
[08:27:49.716]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.716]                   }
[08:27:49.716]                 }
[08:27:49.716]             }
[08:27:49.716]         }))
[08:27:49.716]     }, error = function(ex) {
[08:27:49.716]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.716]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.716]                 ...future.rng), started = ...future.startTime, 
[08:27:49.716]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.716]             version = "1.8"), class = "FutureResult")
[08:27:49.716]     }, finally = {
[08:27:49.716]         if (!identical(...future.workdir, getwd())) 
[08:27:49.716]             setwd(...future.workdir)
[08:27:49.716]         {
[08:27:49.716]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.716]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.716]             }
[08:27:49.716]             base::options(...future.oldOptions)
[08:27:49.716]             if (.Platform$OS.type == "windows") {
[08:27:49.716]                 old_names <- names(...future.oldEnvVars)
[08:27:49.716]                 envs <- base::Sys.getenv()
[08:27:49.716]                 names <- names(envs)
[08:27:49.716]                 common <- intersect(names, old_names)
[08:27:49.716]                 added <- setdiff(names, old_names)
[08:27:49.716]                 removed <- setdiff(old_names, names)
[08:27:49.716]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.716]                   envs[common]]
[08:27:49.716]                 NAMES <- toupper(changed)
[08:27:49.716]                 args <- list()
[08:27:49.716]                 for (kk in seq_along(NAMES)) {
[08:27:49.716]                   name <- changed[[kk]]
[08:27:49.716]                   NAME <- NAMES[[kk]]
[08:27:49.716]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.716]                     next
[08:27:49.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.716]                 }
[08:27:49.716]                 NAMES <- toupper(added)
[08:27:49.716]                 for (kk in seq_along(NAMES)) {
[08:27:49.716]                   name <- added[[kk]]
[08:27:49.716]                   NAME <- NAMES[[kk]]
[08:27:49.716]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.716]                     next
[08:27:49.716]                   args[[name]] <- ""
[08:27:49.716]                 }
[08:27:49.716]                 NAMES <- toupper(removed)
[08:27:49.716]                 for (kk in seq_along(NAMES)) {
[08:27:49.716]                   name <- removed[[kk]]
[08:27:49.716]                   NAME <- NAMES[[kk]]
[08:27:49.716]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.716]                     next
[08:27:49.716]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.716]                 }
[08:27:49.716]                 if (length(args) > 0) 
[08:27:49.716]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.716]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.716]             }
[08:27:49.716]             else {
[08:27:49.716]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.716]             }
[08:27:49.716]             {
[08:27:49.716]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.716]                   0L) {
[08:27:49.716]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.716]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.716]                   base::options(opts)
[08:27:49.716]                 }
[08:27:49.716]                 {
[08:27:49.716]                   {
[08:27:49.716]                     NULL
[08:27:49.716]                     RNGkind("Mersenne-Twister")
[08:27:49.716]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.716]                       inherits = FALSE)
[08:27:49.716]                   }
[08:27:49.716]                   options(future.plan = NULL)
[08:27:49.716]                   if (is.na(NA_character_)) 
[08:27:49.716]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.716]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.716]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.716]                     .init = FALSE)
[08:27:49.716]                 }
[08:27:49.716]             }
[08:27:49.716]         }
[08:27:49.716]     })
[08:27:49.716]     if (TRUE) {
[08:27:49.716]         base::sink(type = "output", split = FALSE)
[08:27:49.716]         if (TRUE) {
[08:27:49.716]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.716]         }
[08:27:49.716]         else {
[08:27:49.716]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.716]         }
[08:27:49.716]         base::close(...future.stdout)
[08:27:49.716]         ...future.stdout <- NULL
[08:27:49.716]     }
[08:27:49.716]     ...future.result$conditions <- ...future.conditions
[08:27:49.716]     ...future.result$finished <- base::Sys.time()
[08:27:49.716]     ...future.result
[08:27:49.716] }
[08:27:49.718] plan(): Setting new future strategy stack:
[08:27:49.718] List of future strategies:
[08:27:49.718] 1. sequential:
[08:27:49.718]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.718]    - tweaked: FALSE
[08:27:49.718]    - call: NULL
[08:27:49.719] plan(): nbrOfWorkers() = 1
[08:27:49.720] plan(): Setting new future strategy stack:
[08:27:49.720] List of future strategies:
[08:27:49.720] 1. sequential:
[08:27:49.720]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.720]    - tweaked: FALSE
[08:27:49.720]    - call: future::plan("sequential")
[08:27:49.720] plan(): nbrOfWorkers() = 1
[08:27:49.720] SequentialFuture started (and completed)
[08:27:49.721] - Launch lazy future ... done
[08:27:49.721] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'remove') ...
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'list') ...
list()
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'add') ...
[08:27:49.725] getGlobalsAndPackages() ...
[08:27:49.725] Searching for globals...
[08:27:49.725] - globals found: [1] ‘{’
[08:27:49.725] Searching for globals ... DONE
[08:27:49.726] Resolving globals: FALSE
[08:27:49.726] 
[08:27:49.726] 
[08:27:49.726] getGlobalsAndPackages() ... DONE
[08:27:49.726] run() for ‘Future’ ...
[08:27:49.726] - state: ‘created’
[08:27:49.726] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.727] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.727] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.727]   - Field: ‘label’
[08:27:49.727]   - Field: ‘local’
[08:27:49.727]   - Field: ‘owner’
[08:27:49.727]   - Field: ‘envir’
[08:27:49.727]   - Field: ‘packages’
[08:27:49.727]   - Field: ‘gc’
[08:27:49.727]   - Field: ‘conditions’
[08:27:49.727]   - Field: ‘expr’
[08:27:49.728]   - Field: ‘uuid’
[08:27:49.728]   - Field: ‘seed’
[08:27:49.728]   - Field: ‘version’
[08:27:49.728]   - Field: ‘result’
[08:27:49.728]   - Field: ‘asynchronous’
[08:27:49.728]   - Field: ‘calls’
[08:27:49.728]   - Field: ‘globals’
[08:27:49.728]   - Field: ‘stdout’
[08:27:49.728]   - Field: ‘earlySignal’
[08:27:49.728]   - Field: ‘lazy’
[08:27:49.728]   - Field: ‘state’
[08:27:49.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.729] - Launch lazy future ...
[08:27:49.729] Packages needed by the future expression (n = 0): <none>
[08:27:49.729] Packages needed by future strategies (n = 0): <none>
[08:27:49.729] {
[08:27:49.729]     {
[08:27:49.729]         {
[08:27:49.729]             ...future.startTime <- base::Sys.time()
[08:27:49.729]             {
[08:27:49.729]                 {
[08:27:49.729]                   {
[08:27:49.729]                     base::local({
[08:27:49.729]                       has_future <- base::requireNamespace("future", 
[08:27:49.729]                         quietly = TRUE)
[08:27:49.729]                       if (has_future) {
[08:27:49.729]                         ns <- base::getNamespace("future")
[08:27:49.729]                         version <- ns[[".package"]][["version"]]
[08:27:49.729]                         if (is.null(version)) 
[08:27:49.729]                           version <- utils::packageVersion("future")
[08:27:49.729]                       }
[08:27:49.729]                       else {
[08:27:49.729]                         version <- NULL
[08:27:49.729]                       }
[08:27:49.729]                       if (!has_future || version < "1.8.0") {
[08:27:49.729]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.729]                           "", base::R.version$version.string), 
[08:27:49.729]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.729]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.729]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.729]                             "release", "version")], collapse = " "), 
[08:27:49.729]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.729]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.729]                           info)
[08:27:49.729]                         info <- base::paste(info, collapse = "; ")
[08:27:49.729]                         if (!has_future) {
[08:27:49.729]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.729]                             info)
[08:27:49.729]                         }
[08:27:49.729]                         else {
[08:27:49.729]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.729]                             info, version)
[08:27:49.729]                         }
[08:27:49.729]                         base::stop(msg)
[08:27:49.729]                       }
[08:27:49.729]                     })
[08:27:49.729]                   }
[08:27:49.729]                   ...future.strategy.old <- future::plan("list")
[08:27:49.729]                   options(future.plan = NULL)
[08:27:49.729]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.729]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.729]                 }
[08:27:49.729]                 ...future.workdir <- getwd()
[08:27:49.729]             }
[08:27:49.729]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.729]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.729]         }
[08:27:49.729]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.729]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.729]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.729]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.729]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.729]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.729]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.729]             base::names(...future.oldOptions))
[08:27:49.729]     }
[08:27:49.729]     if (FALSE) {
[08:27:49.729]     }
[08:27:49.729]     else {
[08:27:49.729]         if (TRUE) {
[08:27:49.729]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.729]                 open = "w")
[08:27:49.729]         }
[08:27:49.729]         else {
[08:27:49.729]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.729]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.729]         }
[08:27:49.729]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.729]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.729]             base::sink(type = "output", split = FALSE)
[08:27:49.729]             base::close(...future.stdout)
[08:27:49.729]         }, add = TRUE)
[08:27:49.729]     }
[08:27:49.729]     ...future.frame <- base::sys.nframe()
[08:27:49.729]     ...future.conditions <- base::list()
[08:27:49.729]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.729]     if (FALSE) {
[08:27:49.729]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.729]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.729]     }
[08:27:49.729]     ...future.result <- base::tryCatch({
[08:27:49.729]         base::withCallingHandlers({
[08:27:49.729]             ...future.value <- base::withVisible(base::local({
[08:27:49.729]                 2
[08:27:49.729]             }))
[08:27:49.729]             future::FutureResult(value = ...future.value$value, 
[08:27:49.729]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.729]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.729]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.729]                     ...future.globalenv.names))
[08:27:49.729]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.729]         }, condition = base::local({
[08:27:49.729]             c <- base::c
[08:27:49.729]             inherits <- base::inherits
[08:27:49.729]             invokeRestart <- base::invokeRestart
[08:27:49.729]             length <- base::length
[08:27:49.729]             list <- base::list
[08:27:49.729]             seq.int <- base::seq.int
[08:27:49.729]             signalCondition <- base::signalCondition
[08:27:49.729]             sys.calls <- base::sys.calls
[08:27:49.729]             `[[` <- base::`[[`
[08:27:49.729]             `+` <- base::`+`
[08:27:49.729]             `<<-` <- base::`<<-`
[08:27:49.729]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.729]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.729]                   3L)]
[08:27:49.729]             }
[08:27:49.729]             function(cond) {
[08:27:49.729]                 is_error <- inherits(cond, "error")
[08:27:49.729]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.729]                   NULL)
[08:27:49.729]                 if (is_error) {
[08:27:49.729]                   sessionInformation <- function() {
[08:27:49.729]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.729]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.729]                       search = base::search(), system = base::Sys.info())
[08:27:49.729]                   }
[08:27:49.729]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.729]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.729]                     cond$call), session = sessionInformation(), 
[08:27:49.729]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.729]                   signalCondition(cond)
[08:27:49.729]                 }
[08:27:49.729]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.729]                 "immediateCondition"))) {
[08:27:49.729]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.729]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.729]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.729]                   if (TRUE && !signal) {
[08:27:49.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.729]                     {
[08:27:49.729]                       inherits <- base::inherits
[08:27:49.729]                       invokeRestart <- base::invokeRestart
[08:27:49.729]                       is.null <- base::is.null
[08:27:49.729]                       muffled <- FALSE
[08:27:49.729]                       if (inherits(cond, "message")) {
[08:27:49.729]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.729]                         if (muffled) 
[08:27:49.729]                           invokeRestart("muffleMessage")
[08:27:49.729]                       }
[08:27:49.729]                       else if (inherits(cond, "warning")) {
[08:27:49.729]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.729]                         if (muffled) 
[08:27:49.729]                           invokeRestart("muffleWarning")
[08:27:49.729]                       }
[08:27:49.729]                       else if (inherits(cond, "condition")) {
[08:27:49.729]                         if (!is.null(pattern)) {
[08:27:49.729]                           computeRestarts <- base::computeRestarts
[08:27:49.729]                           grepl <- base::grepl
[08:27:49.729]                           restarts <- computeRestarts(cond)
[08:27:49.729]                           for (restart in restarts) {
[08:27:49.729]                             name <- restart$name
[08:27:49.729]                             if (is.null(name)) 
[08:27:49.729]                               next
[08:27:49.729]                             if (!grepl(pattern, name)) 
[08:27:49.729]                               next
[08:27:49.729]                             invokeRestart(restart)
[08:27:49.729]                             muffled <- TRUE
[08:27:49.729]                             break
[08:27:49.729]                           }
[08:27:49.729]                         }
[08:27:49.729]                       }
[08:27:49.729]                       invisible(muffled)
[08:27:49.729]                     }
[08:27:49.729]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.729]                   }
[08:27:49.729]                 }
[08:27:49.729]                 else {
[08:27:49.729]                   if (TRUE) {
[08:27:49.729]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.729]                     {
[08:27:49.729]                       inherits <- base::inherits
[08:27:49.729]                       invokeRestart <- base::invokeRestart
[08:27:49.729]                       is.null <- base::is.null
[08:27:49.729]                       muffled <- FALSE
[08:27:49.729]                       if (inherits(cond, "message")) {
[08:27:49.729]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.729]                         if (muffled) 
[08:27:49.729]                           invokeRestart("muffleMessage")
[08:27:49.729]                       }
[08:27:49.729]                       else if (inherits(cond, "warning")) {
[08:27:49.729]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.729]                         if (muffled) 
[08:27:49.729]                           invokeRestart("muffleWarning")
[08:27:49.729]                       }
[08:27:49.729]                       else if (inherits(cond, "condition")) {
[08:27:49.729]                         if (!is.null(pattern)) {
[08:27:49.729]                           computeRestarts <- base::computeRestarts
[08:27:49.729]                           grepl <- base::grepl
[08:27:49.729]                           restarts <- computeRestarts(cond)
[08:27:49.729]                           for (restart in restarts) {
[08:27:49.729]                             name <- restart$name
[08:27:49.729]                             if (is.null(name)) 
[08:27:49.729]                               next
[08:27:49.729]                             if (!grepl(pattern, name)) 
[08:27:49.729]                               next
[08:27:49.729]                             invokeRestart(restart)
[08:27:49.729]                             muffled <- TRUE
[08:27:49.729]                             break
[08:27:49.729]                           }
[08:27:49.729]                         }
[08:27:49.729]                       }
[08:27:49.729]                       invisible(muffled)
[08:27:49.729]                     }
[08:27:49.729]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.729]                   }
[08:27:49.729]                 }
[08:27:49.729]             }
[08:27:49.729]         }))
[08:27:49.729]     }, error = function(ex) {
[08:27:49.729]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.729]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.729]                 ...future.rng), started = ...future.startTime, 
[08:27:49.729]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.729]             version = "1.8"), class = "FutureResult")
[08:27:49.729]     }, finally = {
[08:27:49.729]         if (!identical(...future.workdir, getwd())) 
[08:27:49.729]             setwd(...future.workdir)
[08:27:49.729]         {
[08:27:49.729]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.729]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.729]             }
[08:27:49.729]             base::options(...future.oldOptions)
[08:27:49.729]             if (.Platform$OS.type == "windows") {
[08:27:49.729]                 old_names <- names(...future.oldEnvVars)
[08:27:49.729]                 envs <- base::Sys.getenv()
[08:27:49.729]                 names <- names(envs)
[08:27:49.729]                 common <- intersect(names, old_names)
[08:27:49.729]                 added <- setdiff(names, old_names)
[08:27:49.729]                 removed <- setdiff(old_names, names)
[08:27:49.729]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.729]                   envs[common]]
[08:27:49.729]                 NAMES <- toupper(changed)
[08:27:49.729]                 args <- list()
[08:27:49.729]                 for (kk in seq_along(NAMES)) {
[08:27:49.729]                   name <- changed[[kk]]
[08:27:49.729]                   NAME <- NAMES[[kk]]
[08:27:49.729]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.729]                     next
[08:27:49.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.729]                 }
[08:27:49.729]                 NAMES <- toupper(added)
[08:27:49.729]                 for (kk in seq_along(NAMES)) {
[08:27:49.729]                   name <- added[[kk]]
[08:27:49.729]                   NAME <- NAMES[[kk]]
[08:27:49.729]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.729]                     next
[08:27:49.729]                   args[[name]] <- ""
[08:27:49.729]                 }
[08:27:49.729]                 NAMES <- toupper(removed)
[08:27:49.729]                 for (kk in seq_along(NAMES)) {
[08:27:49.729]                   name <- removed[[kk]]
[08:27:49.729]                   NAME <- NAMES[[kk]]
[08:27:49.729]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.729]                     next
[08:27:49.729]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.729]                 }
[08:27:49.729]                 if (length(args) > 0) 
[08:27:49.729]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.729]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.729]             }
[08:27:49.729]             else {
[08:27:49.729]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.729]             }
[08:27:49.729]             {
[08:27:49.729]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.729]                   0L) {
[08:27:49.729]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.729]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.729]                   base::options(opts)
[08:27:49.729]                 }
[08:27:49.729]                 {
[08:27:49.729]                   {
[08:27:49.729]                     NULL
[08:27:49.729]                     RNGkind("Mersenne-Twister")
[08:27:49.729]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.729]                       inherits = FALSE)
[08:27:49.729]                   }
[08:27:49.729]                   options(future.plan = NULL)
[08:27:49.729]                   if (is.na(NA_character_)) 
[08:27:49.729]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.729]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.729]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.729]                     .init = FALSE)
[08:27:49.729]                 }
[08:27:49.729]             }
[08:27:49.729]         }
[08:27:49.729]     })
[08:27:49.729]     if (TRUE) {
[08:27:49.729]         base::sink(type = "output", split = FALSE)
[08:27:49.729]         if (TRUE) {
[08:27:49.729]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.729]         }
[08:27:49.729]         else {
[08:27:49.729]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.729]         }
[08:27:49.729]         base::close(...future.stdout)
[08:27:49.729]         ...future.stdout <- NULL
[08:27:49.729]     }
[08:27:49.729]     ...future.result$conditions <- ...future.conditions
[08:27:49.729]     ...future.result$finished <- base::Sys.time()
[08:27:49.729]     ...future.result
[08:27:49.729] }
[08:27:49.731] plan(): Setting new future strategy stack:
[08:27:49.731] List of future strategies:
[08:27:49.731] 1. sequential:
[08:27:49.731]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.731]    - tweaked: FALSE
[08:27:49.731]    - call: NULL
[08:27:49.732] plan(): nbrOfWorkers() = 1
[08:27:49.732] plan(): Setting new future strategy stack:
[08:27:49.732] List of future strategies:
[08:27:49.732] 1. sequential:
[08:27:49.732]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.732]    - tweaked: FALSE
[08:27:49.732]    - call: future::plan("sequential")
[08:27:49.733] plan(): nbrOfWorkers() = 1
[08:27:49.733] SequentialFuture started (and completed)
[08:27:49.733] - Launch lazy future ... done
[08:27:49.733] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'collect-first') ...
[08:27:49.734] resolved() for ‘SequentialFuture’ ...
[08:27:49.734] - state: ‘finished’
[08:27:49.734] - run: FALSE
[08:27:49.734] - result: ‘FutureResult’
[08:27:49.735] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'add') ...
[08:27:49.735] getGlobalsAndPackages() ...
[08:27:49.735] Searching for globals...
[08:27:49.736] - globals found: [1] ‘{’
[08:27:49.736] Searching for globals ... DONE
[08:27:49.736] Resolving globals: FALSE
[08:27:49.736] 
[08:27:49.736] 
[08:27:49.736] getGlobalsAndPackages() ... DONE
[08:27:49.737] run() for ‘Future’ ...
[08:27:49.737] - state: ‘created’
[08:27:49.737] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.737] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.737] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.737]   - Field: ‘label’
[08:27:49.737]   - Field: ‘local’
[08:27:49.737]   - Field: ‘owner’
[08:27:49.737]   - Field: ‘envir’
[08:27:49.738]   - Field: ‘packages’
[08:27:49.738]   - Field: ‘gc’
[08:27:49.738]   - Field: ‘conditions’
[08:27:49.738]   - Field: ‘expr’
[08:27:49.738]   - Field: ‘uuid’
[08:27:49.738]   - Field: ‘seed’
[08:27:49.738]   - Field: ‘version’
[08:27:49.738]   - Field: ‘result’
[08:27:49.738]   - Field: ‘asynchronous’
[08:27:49.738]   - Field: ‘calls’
[08:27:49.738]   - Field: ‘globals’
[08:27:49.739]   - Field: ‘stdout’
[08:27:49.739]   - Field: ‘earlySignal’
[08:27:49.739]   - Field: ‘lazy’
[08:27:49.739]   - Field: ‘state’
[08:27:49.739] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.739] - Launch lazy future ...
[08:27:49.739] Packages needed by the future expression (n = 0): <none>
[08:27:49.739] Packages needed by future strategies (n = 0): <none>
[08:27:49.740] {
[08:27:49.740]     {
[08:27:49.740]         {
[08:27:49.740]             ...future.startTime <- base::Sys.time()
[08:27:49.740]             {
[08:27:49.740]                 {
[08:27:49.740]                   {
[08:27:49.740]                     base::local({
[08:27:49.740]                       has_future <- base::requireNamespace("future", 
[08:27:49.740]                         quietly = TRUE)
[08:27:49.740]                       if (has_future) {
[08:27:49.740]                         ns <- base::getNamespace("future")
[08:27:49.740]                         version <- ns[[".package"]][["version"]]
[08:27:49.740]                         if (is.null(version)) 
[08:27:49.740]                           version <- utils::packageVersion("future")
[08:27:49.740]                       }
[08:27:49.740]                       else {
[08:27:49.740]                         version <- NULL
[08:27:49.740]                       }
[08:27:49.740]                       if (!has_future || version < "1.8.0") {
[08:27:49.740]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.740]                           "", base::R.version$version.string), 
[08:27:49.740]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.740]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.740]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.740]                             "release", "version")], collapse = " "), 
[08:27:49.740]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.740]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.740]                           info)
[08:27:49.740]                         info <- base::paste(info, collapse = "; ")
[08:27:49.740]                         if (!has_future) {
[08:27:49.740]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.740]                             info)
[08:27:49.740]                         }
[08:27:49.740]                         else {
[08:27:49.740]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.740]                             info, version)
[08:27:49.740]                         }
[08:27:49.740]                         base::stop(msg)
[08:27:49.740]                       }
[08:27:49.740]                     })
[08:27:49.740]                   }
[08:27:49.740]                   ...future.strategy.old <- future::plan("list")
[08:27:49.740]                   options(future.plan = NULL)
[08:27:49.740]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.740]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.740]                 }
[08:27:49.740]                 ...future.workdir <- getwd()
[08:27:49.740]             }
[08:27:49.740]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.740]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.740]         }
[08:27:49.740]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.740]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.740]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.740]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.740]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.740]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.740]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.740]             base::names(...future.oldOptions))
[08:27:49.740]     }
[08:27:49.740]     if (FALSE) {
[08:27:49.740]     }
[08:27:49.740]     else {
[08:27:49.740]         if (TRUE) {
[08:27:49.740]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.740]                 open = "w")
[08:27:49.740]         }
[08:27:49.740]         else {
[08:27:49.740]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.740]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.740]         }
[08:27:49.740]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.740]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.740]             base::sink(type = "output", split = FALSE)
[08:27:49.740]             base::close(...future.stdout)
[08:27:49.740]         }, add = TRUE)
[08:27:49.740]     }
[08:27:49.740]     ...future.frame <- base::sys.nframe()
[08:27:49.740]     ...future.conditions <- base::list()
[08:27:49.740]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.740]     if (FALSE) {
[08:27:49.740]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.740]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.740]     }
[08:27:49.740]     ...future.result <- base::tryCatch({
[08:27:49.740]         base::withCallingHandlers({
[08:27:49.740]             ...future.value <- base::withVisible(base::local({
[08:27:49.740]                 2
[08:27:49.740]             }))
[08:27:49.740]             future::FutureResult(value = ...future.value$value, 
[08:27:49.740]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.740]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.740]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.740]                     ...future.globalenv.names))
[08:27:49.740]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.740]         }, condition = base::local({
[08:27:49.740]             c <- base::c
[08:27:49.740]             inherits <- base::inherits
[08:27:49.740]             invokeRestart <- base::invokeRestart
[08:27:49.740]             length <- base::length
[08:27:49.740]             list <- base::list
[08:27:49.740]             seq.int <- base::seq.int
[08:27:49.740]             signalCondition <- base::signalCondition
[08:27:49.740]             sys.calls <- base::sys.calls
[08:27:49.740]             `[[` <- base::`[[`
[08:27:49.740]             `+` <- base::`+`
[08:27:49.740]             `<<-` <- base::`<<-`
[08:27:49.740]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.740]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.740]                   3L)]
[08:27:49.740]             }
[08:27:49.740]             function(cond) {
[08:27:49.740]                 is_error <- inherits(cond, "error")
[08:27:49.740]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.740]                   NULL)
[08:27:49.740]                 if (is_error) {
[08:27:49.740]                   sessionInformation <- function() {
[08:27:49.740]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.740]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.740]                       search = base::search(), system = base::Sys.info())
[08:27:49.740]                   }
[08:27:49.740]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.740]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.740]                     cond$call), session = sessionInformation(), 
[08:27:49.740]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.740]                   signalCondition(cond)
[08:27:49.740]                 }
[08:27:49.740]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.740]                 "immediateCondition"))) {
[08:27:49.740]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.740]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.740]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.740]                   if (TRUE && !signal) {
[08:27:49.740]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.740]                     {
[08:27:49.740]                       inherits <- base::inherits
[08:27:49.740]                       invokeRestart <- base::invokeRestart
[08:27:49.740]                       is.null <- base::is.null
[08:27:49.740]                       muffled <- FALSE
[08:27:49.740]                       if (inherits(cond, "message")) {
[08:27:49.740]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.740]                         if (muffled) 
[08:27:49.740]                           invokeRestart("muffleMessage")
[08:27:49.740]                       }
[08:27:49.740]                       else if (inherits(cond, "warning")) {
[08:27:49.740]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.740]                         if (muffled) 
[08:27:49.740]                           invokeRestart("muffleWarning")
[08:27:49.740]                       }
[08:27:49.740]                       else if (inherits(cond, "condition")) {
[08:27:49.740]                         if (!is.null(pattern)) {
[08:27:49.740]                           computeRestarts <- base::computeRestarts
[08:27:49.740]                           grepl <- base::grepl
[08:27:49.740]                           restarts <- computeRestarts(cond)
[08:27:49.740]                           for (restart in restarts) {
[08:27:49.740]                             name <- restart$name
[08:27:49.740]                             if (is.null(name)) 
[08:27:49.740]                               next
[08:27:49.740]                             if (!grepl(pattern, name)) 
[08:27:49.740]                               next
[08:27:49.740]                             invokeRestart(restart)
[08:27:49.740]                             muffled <- TRUE
[08:27:49.740]                             break
[08:27:49.740]                           }
[08:27:49.740]                         }
[08:27:49.740]                       }
[08:27:49.740]                       invisible(muffled)
[08:27:49.740]                     }
[08:27:49.740]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.740]                   }
[08:27:49.740]                 }
[08:27:49.740]                 else {
[08:27:49.740]                   if (TRUE) {
[08:27:49.740]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.740]                     {
[08:27:49.740]                       inherits <- base::inherits
[08:27:49.740]                       invokeRestart <- base::invokeRestart
[08:27:49.740]                       is.null <- base::is.null
[08:27:49.740]                       muffled <- FALSE
[08:27:49.740]                       if (inherits(cond, "message")) {
[08:27:49.740]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.740]                         if (muffled) 
[08:27:49.740]                           invokeRestart("muffleMessage")
[08:27:49.740]                       }
[08:27:49.740]                       else if (inherits(cond, "warning")) {
[08:27:49.740]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.740]                         if (muffled) 
[08:27:49.740]                           invokeRestart("muffleWarning")
[08:27:49.740]                       }
[08:27:49.740]                       else if (inherits(cond, "condition")) {
[08:27:49.740]                         if (!is.null(pattern)) {
[08:27:49.740]                           computeRestarts <- base::computeRestarts
[08:27:49.740]                           grepl <- base::grepl
[08:27:49.740]                           restarts <- computeRestarts(cond)
[08:27:49.740]                           for (restart in restarts) {
[08:27:49.740]                             name <- restart$name
[08:27:49.740]                             if (is.null(name)) 
[08:27:49.740]                               next
[08:27:49.740]                             if (!grepl(pattern, name)) 
[08:27:49.740]                               next
[08:27:49.740]                             invokeRestart(restart)
[08:27:49.740]                             muffled <- TRUE
[08:27:49.740]                             break
[08:27:49.740]                           }
[08:27:49.740]                         }
[08:27:49.740]                       }
[08:27:49.740]                       invisible(muffled)
[08:27:49.740]                     }
[08:27:49.740]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.740]                   }
[08:27:49.740]                 }
[08:27:49.740]             }
[08:27:49.740]         }))
[08:27:49.740]     }, error = function(ex) {
[08:27:49.740]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.740]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.740]                 ...future.rng), started = ...future.startTime, 
[08:27:49.740]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.740]             version = "1.8"), class = "FutureResult")
[08:27:49.740]     }, finally = {
[08:27:49.740]         if (!identical(...future.workdir, getwd())) 
[08:27:49.740]             setwd(...future.workdir)
[08:27:49.740]         {
[08:27:49.740]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.740]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.740]             }
[08:27:49.740]             base::options(...future.oldOptions)
[08:27:49.740]             if (.Platform$OS.type == "windows") {
[08:27:49.740]                 old_names <- names(...future.oldEnvVars)
[08:27:49.740]                 envs <- base::Sys.getenv()
[08:27:49.740]                 names <- names(envs)
[08:27:49.740]                 common <- intersect(names, old_names)
[08:27:49.740]                 added <- setdiff(names, old_names)
[08:27:49.740]                 removed <- setdiff(old_names, names)
[08:27:49.740]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.740]                   envs[common]]
[08:27:49.740]                 NAMES <- toupper(changed)
[08:27:49.740]                 args <- list()
[08:27:49.740]                 for (kk in seq_along(NAMES)) {
[08:27:49.740]                   name <- changed[[kk]]
[08:27:49.740]                   NAME <- NAMES[[kk]]
[08:27:49.740]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.740]                     next
[08:27:49.740]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.740]                 }
[08:27:49.740]                 NAMES <- toupper(added)
[08:27:49.740]                 for (kk in seq_along(NAMES)) {
[08:27:49.740]                   name <- added[[kk]]
[08:27:49.740]                   NAME <- NAMES[[kk]]
[08:27:49.740]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.740]                     next
[08:27:49.740]                   args[[name]] <- ""
[08:27:49.740]                 }
[08:27:49.740]                 NAMES <- toupper(removed)
[08:27:49.740]                 for (kk in seq_along(NAMES)) {
[08:27:49.740]                   name <- removed[[kk]]
[08:27:49.740]                   NAME <- NAMES[[kk]]
[08:27:49.740]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.740]                     next
[08:27:49.740]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.740]                 }
[08:27:49.740]                 if (length(args) > 0) 
[08:27:49.740]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.740]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.740]             }
[08:27:49.740]             else {
[08:27:49.740]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.740]             }
[08:27:49.740]             {
[08:27:49.740]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.740]                   0L) {
[08:27:49.740]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.740]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.740]                   base::options(opts)
[08:27:49.740]                 }
[08:27:49.740]                 {
[08:27:49.740]                   {
[08:27:49.740]                     NULL
[08:27:49.740]                     RNGkind("Mersenne-Twister")
[08:27:49.740]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.740]                       inherits = FALSE)
[08:27:49.740]                   }
[08:27:49.740]                   options(future.plan = NULL)
[08:27:49.740]                   if (is.na(NA_character_)) 
[08:27:49.740]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.740]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.740]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.740]                     .init = FALSE)
[08:27:49.740]                 }
[08:27:49.740]             }
[08:27:49.740]         }
[08:27:49.740]     })
[08:27:49.740]     if (TRUE) {
[08:27:49.740]         base::sink(type = "output", split = FALSE)
[08:27:49.740]         if (TRUE) {
[08:27:49.740]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.740]         }
[08:27:49.740]         else {
[08:27:49.740]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.740]         }
[08:27:49.740]         base::close(...future.stdout)
[08:27:49.740]         ...future.stdout <- NULL
[08:27:49.740]     }
[08:27:49.740]     ...future.result$conditions <- ...future.conditions
[08:27:49.740]     ...future.result$finished <- base::Sys.time()
[08:27:49.740]     ...future.result
[08:27:49.740] }
[08:27:49.741] plan(): Setting new future strategy stack:
[08:27:49.742] List of future strategies:
[08:27:49.742] 1. sequential:
[08:27:49.742]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.742]    - tweaked: FALSE
[08:27:49.742]    - call: NULL
[08:27:49.742] plan(): nbrOfWorkers() = 1
[08:27:49.745] plan(): Setting new future strategy stack:
[08:27:49.745] List of future strategies:
[08:27:49.745] 1. sequential:
[08:27:49.745]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.745]    - tweaked: FALSE
[08:27:49.745]    - call: future::plan("sequential")
[08:27:49.746] plan(): nbrOfWorkers() = 1
[08:27:49.746] SequentialFuture started (and completed)
[08:27:49.746] - Launch lazy future ... done
[08:27:49.746] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'reset') ...
*** FutureRegistry('multicore-bb276baa-2484-74fc-3e0c-d6c3da7305be', 'list') ...
list()
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:27:49.747] getGlobalsAndPackages() ...
[08:27:49.747] Searching for globals...
[08:27:49.748] - globals found: [1] ‘{’
[08:27:49.748] Searching for globals ... DONE
[08:27:49.748] Resolving globals: FALSE
[08:27:49.748] 
[08:27:49.748] 
[08:27:49.748] getGlobalsAndPackages() ... DONE
[08:27:49.748] run() for ‘Future’ ...
[08:27:49.749] - state: ‘created’
[08:27:49.749] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.749] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.749] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.749]   - Field: ‘label’
[08:27:49.749]   - Field: ‘local’
[08:27:49.749]   - Field: ‘owner’
[08:27:49.749]   - Field: ‘envir’
[08:27:49.749]   - Field: ‘packages’
[08:27:49.750]   - Field: ‘gc’
[08:27:49.750]   - Field: ‘conditions’
[08:27:49.750]   - Field: ‘expr’
[08:27:49.750]   - Field: ‘uuid’
[08:27:49.750]   - Field: ‘seed’
[08:27:49.750]   - Field: ‘version’
[08:27:49.750]   - Field: ‘result’
[08:27:49.750]   - Field: ‘asynchronous’
[08:27:49.750]   - Field: ‘calls’
[08:27:49.750]   - Field: ‘globals’
[08:27:49.750]   - Field: ‘stdout’
[08:27:49.750]   - Field: ‘earlySignal’
[08:27:49.751]   - Field: ‘lazy’
[08:27:49.751]   - Field: ‘state’
[08:27:49.751] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.751] - Launch lazy future ...
[08:27:49.751] Packages needed by the future expression (n = 0): <none>
[08:27:49.751] Packages needed by future strategies (n = 0): <none>
[08:27:49.751] {
[08:27:49.751]     {
[08:27:49.751]         {
[08:27:49.751]             ...future.startTime <- base::Sys.time()
[08:27:49.751]             {
[08:27:49.751]                 {
[08:27:49.751]                   {
[08:27:49.751]                     base::local({
[08:27:49.751]                       has_future <- base::requireNamespace("future", 
[08:27:49.751]                         quietly = TRUE)
[08:27:49.751]                       if (has_future) {
[08:27:49.751]                         ns <- base::getNamespace("future")
[08:27:49.751]                         version <- ns[[".package"]][["version"]]
[08:27:49.751]                         if (is.null(version)) 
[08:27:49.751]                           version <- utils::packageVersion("future")
[08:27:49.751]                       }
[08:27:49.751]                       else {
[08:27:49.751]                         version <- NULL
[08:27:49.751]                       }
[08:27:49.751]                       if (!has_future || version < "1.8.0") {
[08:27:49.751]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.751]                           "", base::R.version$version.string), 
[08:27:49.751]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.751]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.751]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.751]                             "release", "version")], collapse = " "), 
[08:27:49.751]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.751]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.751]                           info)
[08:27:49.751]                         info <- base::paste(info, collapse = "; ")
[08:27:49.751]                         if (!has_future) {
[08:27:49.751]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.751]                             info)
[08:27:49.751]                         }
[08:27:49.751]                         else {
[08:27:49.751]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.751]                             info, version)
[08:27:49.751]                         }
[08:27:49.751]                         base::stop(msg)
[08:27:49.751]                       }
[08:27:49.751]                     })
[08:27:49.751]                   }
[08:27:49.751]                   ...future.strategy.old <- future::plan("list")
[08:27:49.751]                   options(future.plan = NULL)
[08:27:49.751]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.751]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.751]                 }
[08:27:49.751]                 ...future.workdir <- getwd()
[08:27:49.751]             }
[08:27:49.751]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.751]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.751]         }
[08:27:49.751]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.751]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.751]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.751]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.751]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.751]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.751]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.751]             base::names(...future.oldOptions))
[08:27:49.751]     }
[08:27:49.751]     if (FALSE) {
[08:27:49.751]     }
[08:27:49.751]     else {
[08:27:49.751]         if (TRUE) {
[08:27:49.751]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.751]                 open = "w")
[08:27:49.751]         }
[08:27:49.751]         else {
[08:27:49.751]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.751]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.751]         }
[08:27:49.751]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.751]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.751]             base::sink(type = "output", split = FALSE)
[08:27:49.751]             base::close(...future.stdout)
[08:27:49.751]         }, add = TRUE)
[08:27:49.751]     }
[08:27:49.751]     ...future.frame <- base::sys.nframe()
[08:27:49.751]     ...future.conditions <- base::list()
[08:27:49.751]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.751]     if (FALSE) {
[08:27:49.751]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.751]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.751]     }
[08:27:49.751]     ...future.result <- base::tryCatch({
[08:27:49.751]         base::withCallingHandlers({
[08:27:49.751]             ...future.value <- base::withVisible(base::local({
[08:27:49.751]                 1
[08:27:49.751]             }))
[08:27:49.751]             future::FutureResult(value = ...future.value$value, 
[08:27:49.751]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.751]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.751]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.751]                     ...future.globalenv.names))
[08:27:49.751]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.751]         }, condition = base::local({
[08:27:49.751]             c <- base::c
[08:27:49.751]             inherits <- base::inherits
[08:27:49.751]             invokeRestart <- base::invokeRestart
[08:27:49.751]             length <- base::length
[08:27:49.751]             list <- base::list
[08:27:49.751]             seq.int <- base::seq.int
[08:27:49.751]             signalCondition <- base::signalCondition
[08:27:49.751]             sys.calls <- base::sys.calls
[08:27:49.751]             `[[` <- base::`[[`
[08:27:49.751]             `+` <- base::`+`
[08:27:49.751]             `<<-` <- base::`<<-`
[08:27:49.751]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.751]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.751]                   3L)]
[08:27:49.751]             }
[08:27:49.751]             function(cond) {
[08:27:49.751]                 is_error <- inherits(cond, "error")
[08:27:49.751]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.751]                   NULL)
[08:27:49.751]                 if (is_error) {
[08:27:49.751]                   sessionInformation <- function() {
[08:27:49.751]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.751]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.751]                       search = base::search(), system = base::Sys.info())
[08:27:49.751]                   }
[08:27:49.751]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.751]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.751]                     cond$call), session = sessionInformation(), 
[08:27:49.751]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.751]                   signalCondition(cond)
[08:27:49.751]                 }
[08:27:49.751]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.751]                 "immediateCondition"))) {
[08:27:49.751]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.751]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.751]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.751]                   if (TRUE && !signal) {
[08:27:49.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.751]                     {
[08:27:49.751]                       inherits <- base::inherits
[08:27:49.751]                       invokeRestart <- base::invokeRestart
[08:27:49.751]                       is.null <- base::is.null
[08:27:49.751]                       muffled <- FALSE
[08:27:49.751]                       if (inherits(cond, "message")) {
[08:27:49.751]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.751]                         if (muffled) 
[08:27:49.751]                           invokeRestart("muffleMessage")
[08:27:49.751]                       }
[08:27:49.751]                       else if (inherits(cond, "warning")) {
[08:27:49.751]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.751]                         if (muffled) 
[08:27:49.751]                           invokeRestart("muffleWarning")
[08:27:49.751]                       }
[08:27:49.751]                       else if (inherits(cond, "condition")) {
[08:27:49.751]                         if (!is.null(pattern)) {
[08:27:49.751]                           computeRestarts <- base::computeRestarts
[08:27:49.751]                           grepl <- base::grepl
[08:27:49.751]                           restarts <- computeRestarts(cond)
[08:27:49.751]                           for (restart in restarts) {
[08:27:49.751]                             name <- restart$name
[08:27:49.751]                             if (is.null(name)) 
[08:27:49.751]                               next
[08:27:49.751]                             if (!grepl(pattern, name)) 
[08:27:49.751]                               next
[08:27:49.751]                             invokeRestart(restart)
[08:27:49.751]                             muffled <- TRUE
[08:27:49.751]                             break
[08:27:49.751]                           }
[08:27:49.751]                         }
[08:27:49.751]                       }
[08:27:49.751]                       invisible(muffled)
[08:27:49.751]                     }
[08:27:49.751]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.751]                   }
[08:27:49.751]                 }
[08:27:49.751]                 else {
[08:27:49.751]                   if (TRUE) {
[08:27:49.751]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.751]                     {
[08:27:49.751]                       inherits <- base::inherits
[08:27:49.751]                       invokeRestart <- base::invokeRestart
[08:27:49.751]                       is.null <- base::is.null
[08:27:49.751]                       muffled <- FALSE
[08:27:49.751]                       if (inherits(cond, "message")) {
[08:27:49.751]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.751]                         if (muffled) 
[08:27:49.751]                           invokeRestart("muffleMessage")
[08:27:49.751]                       }
[08:27:49.751]                       else if (inherits(cond, "warning")) {
[08:27:49.751]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.751]                         if (muffled) 
[08:27:49.751]                           invokeRestart("muffleWarning")
[08:27:49.751]                       }
[08:27:49.751]                       else if (inherits(cond, "condition")) {
[08:27:49.751]                         if (!is.null(pattern)) {
[08:27:49.751]                           computeRestarts <- base::computeRestarts
[08:27:49.751]                           grepl <- base::grepl
[08:27:49.751]                           restarts <- computeRestarts(cond)
[08:27:49.751]                           for (restart in restarts) {
[08:27:49.751]                             name <- restart$name
[08:27:49.751]                             if (is.null(name)) 
[08:27:49.751]                               next
[08:27:49.751]                             if (!grepl(pattern, name)) 
[08:27:49.751]                               next
[08:27:49.751]                             invokeRestart(restart)
[08:27:49.751]                             muffled <- TRUE
[08:27:49.751]                             break
[08:27:49.751]                           }
[08:27:49.751]                         }
[08:27:49.751]                       }
[08:27:49.751]                       invisible(muffled)
[08:27:49.751]                     }
[08:27:49.751]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.751]                   }
[08:27:49.751]                 }
[08:27:49.751]             }
[08:27:49.751]         }))
[08:27:49.751]     }, error = function(ex) {
[08:27:49.751]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.751]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.751]                 ...future.rng), started = ...future.startTime, 
[08:27:49.751]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.751]             version = "1.8"), class = "FutureResult")
[08:27:49.751]     }, finally = {
[08:27:49.751]         if (!identical(...future.workdir, getwd())) 
[08:27:49.751]             setwd(...future.workdir)
[08:27:49.751]         {
[08:27:49.751]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.751]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.751]             }
[08:27:49.751]             base::options(...future.oldOptions)
[08:27:49.751]             if (.Platform$OS.type == "windows") {
[08:27:49.751]                 old_names <- names(...future.oldEnvVars)
[08:27:49.751]                 envs <- base::Sys.getenv()
[08:27:49.751]                 names <- names(envs)
[08:27:49.751]                 common <- intersect(names, old_names)
[08:27:49.751]                 added <- setdiff(names, old_names)
[08:27:49.751]                 removed <- setdiff(old_names, names)
[08:27:49.751]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.751]                   envs[common]]
[08:27:49.751]                 NAMES <- toupper(changed)
[08:27:49.751]                 args <- list()
[08:27:49.751]                 for (kk in seq_along(NAMES)) {
[08:27:49.751]                   name <- changed[[kk]]
[08:27:49.751]                   NAME <- NAMES[[kk]]
[08:27:49.751]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.751]                     next
[08:27:49.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.751]                 }
[08:27:49.751]                 NAMES <- toupper(added)
[08:27:49.751]                 for (kk in seq_along(NAMES)) {
[08:27:49.751]                   name <- added[[kk]]
[08:27:49.751]                   NAME <- NAMES[[kk]]
[08:27:49.751]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.751]                     next
[08:27:49.751]                   args[[name]] <- ""
[08:27:49.751]                 }
[08:27:49.751]                 NAMES <- toupper(removed)
[08:27:49.751]                 for (kk in seq_along(NAMES)) {
[08:27:49.751]                   name <- removed[[kk]]
[08:27:49.751]                   NAME <- NAMES[[kk]]
[08:27:49.751]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.751]                     next
[08:27:49.751]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.751]                 }
[08:27:49.751]                 if (length(args) > 0) 
[08:27:49.751]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.751]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.751]             }
[08:27:49.751]             else {
[08:27:49.751]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.751]             }
[08:27:49.751]             {
[08:27:49.751]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.751]                   0L) {
[08:27:49.751]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.751]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.751]                   base::options(opts)
[08:27:49.751]                 }
[08:27:49.751]                 {
[08:27:49.751]                   {
[08:27:49.751]                     NULL
[08:27:49.751]                     RNGkind("Mersenne-Twister")
[08:27:49.751]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.751]                       inherits = FALSE)
[08:27:49.751]                   }
[08:27:49.751]                   options(future.plan = NULL)
[08:27:49.751]                   if (is.na(NA_character_)) 
[08:27:49.751]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.751]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.751]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.751]                     .init = FALSE)
[08:27:49.751]                 }
[08:27:49.751]             }
[08:27:49.751]         }
[08:27:49.751]     })
[08:27:49.751]     if (TRUE) {
[08:27:49.751]         base::sink(type = "output", split = FALSE)
[08:27:49.751]         if (TRUE) {
[08:27:49.751]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.751]         }
[08:27:49.751]         else {
[08:27:49.751]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.751]         }
[08:27:49.751]         base::close(...future.stdout)
[08:27:49.751]         ...future.stdout <- NULL
[08:27:49.751]     }
[08:27:49.751]     ...future.result$conditions <- ...future.conditions
[08:27:49.751]     ...future.result$finished <- base::Sys.time()
[08:27:49.751]     ...future.result
[08:27:49.751] }
[08:27:49.753] plan(): Setting new future strategy stack:
[08:27:49.753] List of future strategies:
[08:27:49.753] 1. sequential:
[08:27:49.753]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.753]    - tweaked: FALSE
[08:27:49.753]    - call: NULL
[08:27:49.754] plan(): nbrOfWorkers() = 1
[08:27:49.755] plan(): Setting new future strategy stack:
[08:27:49.755] List of future strategies:
[08:27:49.755] 1. sequential:
[08:27:49.755]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.755]    - tweaked: FALSE
[08:27:49.755]    - call: future::plan("sequential")
[08:27:49.755] plan(): nbrOfWorkers() = 1
[08:27:49.755] SequentialFuture started (and completed)
[08:27:49.755] - Launch lazy future ... done
[08:27:49.755] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'remove') ...
*** FutureRegistry('rscript', 'list') ...
list()
*** FutureRegistry('rscript', 'add') ...
[08:27:49.757] getGlobalsAndPackages() ...
[08:27:49.757] Searching for globals...
[08:27:49.757] - globals found: [1] ‘{’
[08:27:49.757] Searching for globals ... DONE
[08:27:49.757] Resolving globals: FALSE
[08:27:49.758] 
[08:27:49.758] 
[08:27:49.758] getGlobalsAndPackages() ... DONE
[08:27:49.758] run() for ‘Future’ ...
[08:27:49.758] - state: ‘created’
[08:27:49.758] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.759] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.759] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.759]   - Field: ‘label’
[08:27:49.759]   - Field: ‘local’
[08:27:49.759]   - Field: ‘owner’
[08:27:49.759]   - Field: ‘envir’
[08:27:49.759]   - Field: ‘packages’
[08:27:49.759]   - Field: ‘gc’
[08:27:49.759]   - Field: ‘conditions’
[08:27:49.759]   - Field: ‘expr’
[08:27:49.759]   - Field: ‘uuid’
[08:27:49.760]   - Field: ‘seed’
[08:27:49.760]   - Field: ‘version’
[08:27:49.760]   - Field: ‘result’
[08:27:49.760]   - Field: ‘asynchronous’
[08:27:49.760]   - Field: ‘calls’
[08:27:49.760]   - Field: ‘globals’
[08:27:49.760]   - Field: ‘stdout’
[08:27:49.760]   - Field: ‘earlySignal’
[08:27:49.760]   - Field: ‘lazy’
[08:27:49.760]   - Field: ‘state’
[08:27:49.760] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.761] - Launch lazy future ...
[08:27:49.761] Packages needed by the future expression (n = 0): <none>
[08:27:49.761] Packages needed by future strategies (n = 0): <none>
[08:27:49.761] {
[08:27:49.761]     {
[08:27:49.761]         {
[08:27:49.761]             ...future.startTime <- base::Sys.time()
[08:27:49.761]             {
[08:27:49.761]                 {
[08:27:49.761]                   {
[08:27:49.761]                     base::local({
[08:27:49.761]                       has_future <- base::requireNamespace("future", 
[08:27:49.761]                         quietly = TRUE)
[08:27:49.761]                       if (has_future) {
[08:27:49.761]                         ns <- base::getNamespace("future")
[08:27:49.761]                         version <- ns[[".package"]][["version"]]
[08:27:49.761]                         if (is.null(version)) 
[08:27:49.761]                           version <- utils::packageVersion("future")
[08:27:49.761]                       }
[08:27:49.761]                       else {
[08:27:49.761]                         version <- NULL
[08:27:49.761]                       }
[08:27:49.761]                       if (!has_future || version < "1.8.0") {
[08:27:49.761]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.761]                           "", base::R.version$version.string), 
[08:27:49.761]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.761]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.761]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.761]                             "release", "version")], collapse = " "), 
[08:27:49.761]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.761]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.761]                           info)
[08:27:49.761]                         info <- base::paste(info, collapse = "; ")
[08:27:49.761]                         if (!has_future) {
[08:27:49.761]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.761]                             info)
[08:27:49.761]                         }
[08:27:49.761]                         else {
[08:27:49.761]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.761]                             info, version)
[08:27:49.761]                         }
[08:27:49.761]                         base::stop(msg)
[08:27:49.761]                       }
[08:27:49.761]                     })
[08:27:49.761]                   }
[08:27:49.761]                   ...future.strategy.old <- future::plan("list")
[08:27:49.761]                   options(future.plan = NULL)
[08:27:49.761]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.761]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.761]                 }
[08:27:49.761]                 ...future.workdir <- getwd()
[08:27:49.761]             }
[08:27:49.761]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.761]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.761]         }
[08:27:49.761]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.761]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.761]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.761]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.761]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.761]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.761]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.761]             base::names(...future.oldOptions))
[08:27:49.761]     }
[08:27:49.761]     if (FALSE) {
[08:27:49.761]     }
[08:27:49.761]     else {
[08:27:49.761]         if (TRUE) {
[08:27:49.761]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.761]                 open = "w")
[08:27:49.761]         }
[08:27:49.761]         else {
[08:27:49.761]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.761]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.761]         }
[08:27:49.761]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.761]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.761]             base::sink(type = "output", split = FALSE)
[08:27:49.761]             base::close(...future.stdout)
[08:27:49.761]         }, add = TRUE)
[08:27:49.761]     }
[08:27:49.761]     ...future.frame <- base::sys.nframe()
[08:27:49.761]     ...future.conditions <- base::list()
[08:27:49.761]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.761]     if (FALSE) {
[08:27:49.761]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.761]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.761]     }
[08:27:49.761]     ...future.result <- base::tryCatch({
[08:27:49.761]         base::withCallingHandlers({
[08:27:49.761]             ...future.value <- base::withVisible(base::local({
[08:27:49.761]                 2
[08:27:49.761]             }))
[08:27:49.761]             future::FutureResult(value = ...future.value$value, 
[08:27:49.761]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.761]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.761]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.761]                     ...future.globalenv.names))
[08:27:49.761]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.761]         }, condition = base::local({
[08:27:49.761]             c <- base::c
[08:27:49.761]             inherits <- base::inherits
[08:27:49.761]             invokeRestart <- base::invokeRestart
[08:27:49.761]             length <- base::length
[08:27:49.761]             list <- base::list
[08:27:49.761]             seq.int <- base::seq.int
[08:27:49.761]             signalCondition <- base::signalCondition
[08:27:49.761]             sys.calls <- base::sys.calls
[08:27:49.761]             `[[` <- base::`[[`
[08:27:49.761]             `+` <- base::`+`
[08:27:49.761]             `<<-` <- base::`<<-`
[08:27:49.761]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.761]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.761]                   3L)]
[08:27:49.761]             }
[08:27:49.761]             function(cond) {
[08:27:49.761]                 is_error <- inherits(cond, "error")
[08:27:49.761]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.761]                   NULL)
[08:27:49.761]                 if (is_error) {
[08:27:49.761]                   sessionInformation <- function() {
[08:27:49.761]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.761]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.761]                       search = base::search(), system = base::Sys.info())
[08:27:49.761]                   }
[08:27:49.761]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.761]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.761]                     cond$call), session = sessionInformation(), 
[08:27:49.761]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.761]                   signalCondition(cond)
[08:27:49.761]                 }
[08:27:49.761]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.761]                 "immediateCondition"))) {
[08:27:49.761]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.761]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.761]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.761]                   if (TRUE && !signal) {
[08:27:49.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.761]                     {
[08:27:49.761]                       inherits <- base::inherits
[08:27:49.761]                       invokeRestart <- base::invokeRestart
[08:27:49.761]                       is.null <- base::is.null
[08:27:49.761]                       muffled <- FALSE
[08:27:49.761]                       if (inherits(cond, "message")) {
[08:27:49.761]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.761]                         if (muffled) 
[08:27:49.761]                           invokeRestart("muffleMessage")
[08:27:49.761]                       }
[08:27:49.761]                       else if (inherits(cond, "warning")) {
[08:27:49.761]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.761]                         if (muffled) 
[08:27:49.761]                           invokeRestart("muffleWarning")
[08:27:49.761]                       }
[08:27:49.761]                       else if (inherits(cond, "condition")) {
[08:27:49.761]                         if (!is.null(pattern)) {
[08:27:49.761]                           computeRestarts <- base::computeRestarts
[08:27:49.761]                           grepl <- base::grepl
[08:27:49.761]                           restarts <- computeRestarts(cond)
[08:27:49.761]                           for (restart in restarts) {
[08:27:49.761]                             name <- restart$name
[08:27:49.761]                             if (is.null(name)) 
[08:27:49.761]                               next
[08:27:49.761]                             if (!grepl(pattern, name)) 
[08:27:49.761]                               next
[08:27:49.761]                             invokeRestart(restart)
[08:27:49.761]                             muffled <- TRUE
[08:27:49.761]                             break
[08:27:49.761]                           }
[08:27:49.761]                         }
[08:27:49.761]                       }
[08:27:49.761]                       invisible(muffled)
[08:27:49.761]                     }
[08:27:49.761]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.761]                   }
[08:27:49.761]                 }
[08:27:49.761]                 else {
[08:27:49.761]                   if (TRUE) {
[08:27:49.761]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.761]                     {
[08:27:49.761]                       inherits <- base::inherits
[08:27:49.761]                       invokeRestart <- base::invokeRestart
[08:27:49.761]                       is.null <- base::is.null
[08:27:49.761]                       muffled <- FALSE
[08:27:49.761]                       if (inherits(cond, "message")) {
[08:27:49.761]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.761]                         if (muffled) 
[08:27:49.761]                           invokeRestart("muffleMessage")
[08:27:49.761]                       }
[08:27:49.761]                       else if (inherits(cond, "warning")) {
[08:27:49.761]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.761]                         if (muffled) 
[08:27:49.761]                           invokeRestart("muffleWarning")
[08:27:49.761]                       }
[08:27:49.761]                       else if (inherits(cond, "condition")) {
[08:27:49.761]                         if (!is.null(pattern)) {
[08:27:49.761]                           computeRestarts <- base::computeRestarts
[08:27:49.761]                           grepl <- base::grepl
[08:27:49.761]                           restarts <- computeRestarts(cond)
[08:27:49.761]                           for (restart in restarts) {
[08:27:49.761]                             name <- restart$name
[08:27:49.761]                             if (is.null(name)) 
[08:27:49.761]                               next
[08:27:49.761]                             if (!grepl(pattern, name)) 
[08:27:49.761]                               next
[08:27:49.761]                             invokeRestart(restart)
[08:27:49.761]                             muffled <- TRUE
[08:27:49.761]                             break
[08:27:49.761]                           }
[08:27:49.761]                         }
[08:27:49.761]                       }
[08:27:49.761]                       invisible(muffled)
[08:27:49.761]                     }
[08:27:49.761]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.761]                   }
[08:27:49.761]                 }
[08:27:49.761]             }
[08:27:49.761]         }))
[08:27:49.761]     }, error = function(ex) {
[08:27:49.761]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.761]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.761]                 ...future.rng), started = ...future.startTime, 
[08:27:49.761]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.761]             version = "1.8"), class = "FutureResult")
[08:27:49.761]     }, finally = {
[08:27:49.761]         if (!identical(...future.workdir, getwd())) 
[08:27:49.761]             setwd(...future.workdir)
[08:27:49.761]         {
[08:27:49.761]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.761]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.761]             }
[08:27:49.761]             base::options(...future.oldOptions)
[08:27:49.761]             if (.Platform$OS.type == "windows") {
[08:27:49.761]                 old_names <- names(...future.oldEnvVars)
[08:27:49.761]                 envs <- base::Sys.getenv()
[08:27:49.761]                 names <- names(envs)
[08:27:49.761]                 common <- intersect(names, old_names)
[08:27:49.761]                 added <- setdiff(names, old_names)
[08:27:49.761]                 removed <- setdiff(old_names, names)
[08:27:49.761]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.761]                   envs[common]]
[08:27:49.761]                 NAMES <- toupper(changed)
[08:27:49.761]                 args <- list()
[08:27:49.761]                 for (kk in seq_along(NAMES)) {
[08:27:49.761]                   name <- changed[[kk]]
[08:27:49.761]                   NAME <- NAMES[[kk]]
[08:27:49.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.761]                     next
[08:27:49.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.761]                 }
[08:27:49.761]                 NAMES <- toupper(added)
[08:27:49.761]                 for (kk in seq_along(NAMES)) {
[08:27:49.761]                   name <- added[[kk]]
[08:27:49.761]                   NAME <- NAMES[[kk]]
[08:27:49.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.761]                     next
[08:27:49.761]                   args[[name]] <- ""
[08:27:49.761]                 }
[08:27:49.761]                 NAMES <- toupper(removed)
[08:27:49.761]                 for (kk in seq_along(NAMES)) {
[08:27:49.761]                   name <- removed[[kk]]
[08:27:49.761]                   NAME <- NAMES[[kk]]
[08:27:49.761]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.761]                     next
[08:27:49.761]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.761]                 }
[08:27:49.761]                 if (length(args) > 0) 
[08:27:49.761]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.761]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.761]             }
[08:27:49.761]             else {
[08:27:49.761]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.761]             }
[08:27:49.761]             {
[08:27:49.761]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.761]                   0L) {
[08:27:49.761]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.761]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.761]                   base::options(opts)
[08:27:49.761]                 }
[08:27:49.761]                 {
[08:27:49.761]                   {
[08:27:49.761]                     NULL
[08:27:49.761]                     RNGkind("Mersenne-Twister")
[08:27:49.761]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.761]                       inherits = FALSE)
[08:27:49.761]                   }
[08:27:49.761]                   options(future.plan = NULL)
[08:27:49.761]                   if (is.na(NA_character_)) 
[08:27:49.761]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.761]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.761]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.761]                     .init = FALSE)
[08:27:49.761]                 }
[08:27:49.761]             }
[08:27:49.761]         }
[08:27:49.761]     })
[08:27:49.761]     if (TRUE) {
[08:27:49.761]         base::sink(type = "output", split = FALSE)
[08:27:49.761]         if (TRUE) {
[08:27:49.761]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.761]         }
[08:27:49.761]         else {
[08:27:49.761]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.761]         }
[08:27:49.761]         base::close(...future.stdout)
[08:27:49.761]         ...future.stdout <- NULL
[08:27:49.761]     }
[08:27:49.761]     ...future.result$conditions <- ...future.conditions
[08:27:49.761]     ...future.result$finished <- base::Sys.time()
[08:27:49.761]     ...future.result
[08:27:49.761] }
[08:27:49.763] plan(): Setting new future strategy stack:
[08:27:49.763] List of future strategies:
[08:27:49.763] 1. sequential:
[08:27:49.763]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.763]    - tweaked: FALSE
[08:27:49.763]    - call: NULL
[08:27:49.764] plan(): nbrOfWorkers() = 1
[08:27:49.764] plan(): Setting new future strategy stack:
[08:27:49.764] List of future strategies:
[08:27:49.764] 1. sequential:
[08:27:49.764]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.764]    - tweaked: FALSE
[08:27:49.764]    - call: future::plan("sequential")
[08:27:49.765] plan(): nbrOfWorkers() = 1
[08:27:49.765] SequentialFuture started (and completed)
[08:27:49.765] - Launch lazy future ... done
[08:27:49.765] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'list') ...
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

*** FutureRegistry('rscript', 'collect-first') ...
[08:27:49.776] resolved() for ‘SequentialFuture’ ...
[08:27:49.776] - state: ‘finished’
[08:27:49.776] - run: FALSE
[08:27:49.777] - result: ‘FutureResult’
[08:27:49.777] resolved() for ‘SequentialFuture’ ... done
list()
*** FutureRegistry('rscript', 'add') ...
[08:27:49.777] getGlobalsAndPackages() ...
[08:27:49.777] Searching for globals...
[08:27:49.778] - globals found: [1] ‘{’
[08:27:49.778] Searching for globals ... DONE
[08:27:49.778] Resolving globals: FALSE
[08:27:49.778] 
[08:27:49.778] 
[08:27:49.778] getGlobalsAndPackages() ... DONE
[08:27:49.779] run() for ‘Future’ ...
[08:27:49.779] - state: ‘created’
[08:27:49.779] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.779] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.779] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.779]   - Field: ‘label’
[08:27:49.780]   - Field: ‘local’
[08:27:49.780]   - Field: ‘owner’
[08:27:49.780]   - Field: ‘envir’
[08:27:49.780]   - Field: ‘packages’
[08:27:49.780]   - Field: ‘gc’
[08:27:49.780]   - Field: ‘conditions’
[08:27:49.780]   - Field: ‘expr’
[08:27:49.780]   - Field: ‘uuid’
[08:27:49.780]   - Field: ‘seed’
[08:27:49.780]   - Field: ‘version’
[08:27:49.780]   - Field: ‘result’
[08:27:49.780]   - Field: ‘asynchronous’
[08:27:49.781]   - Field: ‘calls’
[08:27:49.781]   - Field: ‘globals’
[08:27:49.781]   - Field: ‘stdout’
[08:27:49.781]   - Field: ‘earlySignal’
[08:27:49.781]   - Field: ‘lazy’
[08:27:49.781]   - Field: ‘state’
[08:27:49.781] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.781] - Launch lazy future ...
[08:27:49.781] Packages needed by the future expression (n = 0): <none>
[08:27:49.782] Packages needed by future strategies (n = 0): <none>
[08:27:49.782] {
[08:27:49.782]     {
[08:27:49.782]         {
[08:27:49.782]             ...future.startTime <- base::Sys.time()
[08:27:49.782]             {
[08:27:49.782]                 {
[08:27:49.782]                   {
[08:27:49.782]                     base::local({
[08:27:49.782]                       has_future <- base::requireNamespace("future", 
[08:27:49.782]                         quietly = TRUE)
[08:27:49.782]                       if (has_future) {
[08:27:49.782]                         ns <- base::getNamespace("future")
[08:27:49.782]                         version <- ns[[".package"]][["version"]]
[08:27:49.782]                         if (is.null(version)) 
[08:27:49.782]                           version <- utils::packageVersion("future")
[08:27:49.782]                       }
[08:27:49.782]                       else {
[08:27:49.782]                         version <- NULL
[08:27:49.782]                       }
[08:27:49.782]                       if (!has_future || version < "1.8.0") {
[08:27:49.782]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.782]                           "", base::R.version$version.string), 
[08:27:49.782]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.782]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.782]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.782]                             "release", "version")], collapse = " "), 
[08:27:49.782]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.782]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.782]                           info)
[08:27:49.782]                         info <- base::paste(info, collapse = "; ")
[08:27:49.782]                         if (!has_future) {
[08:27:49.782]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.782]                             info)
[08:27:49.782]                         }
[08:27:49.782]                         else {
[08:27:49.782]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.782]                             info, version)
[08:27:49.782]                         }
[08:27:49.782]                         base::stop(msg)
[08:27:49.782]                       }
[08:27:49.782]                     })
[08:27:49.782]                   }
[08:27:49.782]                   ...future.strategy.old <- future::plan("list")
[08:27:49.782]                   options(future.plan = NULL)
[08:27:49.782]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.782]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.782]                 }
[08:27:49.782]                 ...future.workdir <- getwd()
[08:27:49.782]             }
[08:27:49.782]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.782]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.782]         }
[08:27:49.782]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.782]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.782]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.782]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.782]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.782]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.782]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.782]             base::names(...future.oldOptions))
[08:27:49.782]     }
[08:27:49.782]     if (FALSE) {
[08:27:49.782]     }
[08:27:49.782]     else {
[08:27:49.782]         if (TRUE) {
[08:27:49.782]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.782]                 open = "w")
[08:27:49.782]         }
[08:27:49.782]         else {
[08:27:49.782]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.782]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.782]         }
[08:27:49.782]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.782]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.782]             base::sink(type = "output", split = FALSE)
[08:27:49.782]             base::close(...future.stdout)
[08:27:49.782]         }, add = TRUE)
[08:27:49.782]     }
[08:27:49.782]     ...future.frame <- base::sys.nframe()
[08:27:49.782]     ...future.conditions <- base::list()
[08:27:49.782]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.782]     if (FALSE) {
[08:27:49.782]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.782]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.782]     }
[08:27:49.782]     ...future.result <- base::tryCatch({
[08:27:49.782]         base::withCallingHandlers({
[08:27:49.782]             ...future.value <- base::withVisible(base::local({
[08:27:49.782]                 2
[08:27:49.782]             }))
[08:27:49.782]             future::FutureResult(value = ...future.value$value, 
[08:27:49.782]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.782]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.782]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.782]                     ...future.globalenv.names))
[08:27:49.782]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.782]         }, condition = base::local({
[08:27:49.782]             c <- base::c
[08:27:49.782]             inherits <- base::inherits
[08:27:49.782]             invokeRestart <- base::invokeRestart
[08:27:49.782]             length <- base::length
[08:27:49.782]             list <- base::list
[08:27:49.782]             seq.int <- base::seq.int
[08:27:49.782]             signalCondition <- base::signalCondition
[08:27:49.782]             sys.calls <- base::sys.calls
[08:27:49.782]             `[[` <- base::`[[`
[08:27:49.782]             `+` <- base::`+`
[08:27:49.782]             `<<-` <- base::`<<-`
[08:27:49.782]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.782]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.782]                   3L)]
[08:27:49.782]             }
[08:27:49.782]             function(cond) {
[08:27:49.782]                 is_error <- inherits(cond, "error")
[08:27:49.782]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.782]                   NULL)
[08:27:49.782]                 if (is_error) {
[08:27:49.782]                   sessionInformation <- function() {
[08:27:49.782]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.782]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.782]                       search = base::search(), system = base::Sys.info())
[08:27:49.782]                   }
[08:27:49.782]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.782]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.782]                     cond$call), session = sessionInformation(), 
[08:27:49.782]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.782]                   signalCondition(cond)
[08:27:49.782]                 }
[08:27:49.782]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.782]                 "immediateCondition"))) {
[08:27:49.782]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.782]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.782]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.782]                   if (TRUE && !signal) {
[08:27:49.782]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.782]                     {
[08:27:49.782]                       inherits <- base::inherits
[08:27:49.782]                       invokeRestart <- base::invokeRestart
[08:27:49.782]                       is.null <- base::is.null
[08:27:49.782]                       muffled <- FALSE
[08:27:49.782]                       if (inherits(cond, "message")) {
[08:27:49.782]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.782]                         if (muffled) 
[08:27:49.782]                           invokeRestart("muffleMessage")
[08:27:49.782]                       }
[08:27:49.782]                       else if (inherits(cond, "warning")) {
[08:27:49.782]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.782]                         if (muffled) 
[08:27:49.782]                           invokeRestart("muffleWarning")
[08:27:49.782]                       }
[08:27:49.782]                       else if (inherits(cond, "condition")) {
[08:27:49.782]                         if (!is.null(pattern)) {
[08:27:49.782]                           computeRestarts <- base::computeRestarts
[08:27:49.782]                           grepl <- base::grepl
[08:27:49.782]                           restarts <- computeRestarts(cond)
[08:27:49.782]                           for (restart in restarts) {
[08:27:49.782]                             name <- restart$name
[08:27:49.782]                             if (is.null(name)) 
[08:27:49.782]                               next
[08:27:49.782]                             if (!grepl(pattern, name)) 
[08:27:49.782]                               next
[08:27:49.782]                             invokeRestart(restart)
[08:27:49.782]                             muffled <- TRUE
[08:27:49.782]                             break
[08:27:49.782]                           }
[08:27:49.782]                         }
[08:27:49.782]                       }
[08:27:49.782]                       invisible(muffled)
[08:27:49.782]                     }
[08:27:49.782]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.782]                   }
[08:27:49.782]                 }
[08:27:49.782]                 else {
[08:27:49.782]                   if (TRUE) {
[08:27:49.782]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.782]                     {
[08:27:49.782]                       inherits <- base::inherits
[08:27:49.782]                       invokeRestart <- base::invokeRestart
[08:27:49.782]                       is.null <- base::is.null
[08:27:49.782]                       muffled <- FALSE
[08:27:49.782]                       if (inherits(cond, "message")) {
[08:27:49.782]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.782]                         if (muffled) 
[08:27:49.782]                           invokeRestart("muffleMessage")
[08:27:49.782]                       }
[08:27:49.782]                       else if (inherits(cond, "warning")) {
[08:27:49.782]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.782]                         if (muffled) 
[08:27:49.782]                           invokeRestart("muffleWarning")
[08:27:49.782]                       }
[08:27:49.782]                       else if (inherits(cond, "condition")) {
[08:27:49.782]                         if (!is.null(pattern)) {
[08:27:49.782]                           computeRestarts <- base::computeRestarts
[08:27:49.782]                           grepl <- base::grepl
[08:27:49.782]                           restarts <- computeRestarts(cond)
[08:27:49.782]                           for (restart in restarts) {
[08:27:49.782]                             name <- restart$name
[08:27:49.782]                             if (is.null(name)) 
[08:27:49.782]                               next
[08:27:49.782]                             if (!grepl(pattern, name)) 
[08:27:49.782]                               next
[08:27:49.782]                             invokeRestart(restart)
[08:27:49.782]                             muffled <- TRUE
[08:27:49.782]                             break
[08:27:49.782]                           }
[08:27:49.782]                         }
[08:27:49.782]                       }
[08:27:49.782]                       invisible(muffled)
[08:27:49.782]                     }
[08:27:49.782]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.782]                   }
[08:27:49.782]                 }
[08:27:49.782]             }
[08:27:49.782]         }))
[08:27:49.782]     }, error = function(ex) {
[08:27:49.782]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.782]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.782]                 ...future.rng), started = ...future.startTime, 
[08:27:49.782]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.782]             version = "1.8"), class = "FutureResult")
[08:27:49.782]     }, finally = {
[08:27:49.782]         if (!identical(...future.workdir, getwd())) 
[08:27:49.782]             setwd(...future.workdir)
[08:27:49.782]         {
[08:27:49.782]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.782]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.782]             }
[08:27:49.782]             base::options(...future.oldOptions)
[08:27:49.782]             if (.Platform$OS.type == "windows") {
[08:27:49.782]                 old_names <- names(...future.oldEnvVars)
[08:27:49.782]                 envs <- base::Sys.getenv()
[08:27:49.782]                 names <- names(envs)
[08:27:49.782]                 common <- intersect(names, old_names)
[08:27:49.782]                 added <- setdiff(names, old_names)
[08:27:49.782]                 removed <- setdiff(old_names, names)
[08:27:49.782]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.782]                   envs[common]]
[08:27:49.782]                 NAMES <- toupper(changed)
[08:27:49.782]                 args <- list()
[08:27:49.782]                 for (kk in seq_along(NAMES)) {
[08:27:49.782]                   name <- changed[[kk]]
[08:27:49.782]                   NAME <- NAMES[[kk]]
[08:27:49.782]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.782]                     next
[08:27:49.782]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.782]                 }
[08:27:49.782]                 NAMES <- toupper(added)
[08:27:49.782]                 for (kk in seq_along(NAMES)) {
[08:27:49.782]                   name <- added[[kk]]
[08:27:49.782]                   NAME <- NAMES[[kk]]
[08:27:49.782]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.782]                     next
[08:27:49.782]                   args[[name]] <- ""
[08:27:49.782]                 }
[08:27:49.782]                 NAMES <- toupper(removed)
[08:27:49.782]                 for (kk in seq_along(NAMES)) {
[08:27:49.782]                   name <- removed[[kk]]
[08:27:49.782]                   NAME <- NAMES[[kk]]
[08:27:49.782]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.782]                     next
[08:27:49.782]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.782]                 }
[08:27:49.782]                 if (length(args) > 0) 
[08:27:49.782]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.782]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.782]             }
[08:27:49.782]             else {
[08:27:49.782]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.782]             }
[08:27:49.782]             {
[08:27:49.782]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.782]                   0L) {
[08:27:49.782]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.782]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.782]                   base::options(opts)
[08:27:49.782]                 }
[08:27:49.782]                 {
[08:27:49.782]                   {
[08:27:49.782]                     NULL
[08:27:49.782]                     RNGkind("Mersenne-Twister")
[08:27:49.782]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.782]                       inherits = FALSE)
[08:27:49.782]                   }
[08:27:49.782]                   options(future.plan = NULL)
[08:27:49.782]                   if (is.na(NA_character_)) 
[08:27:49.782]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.782]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.782]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.782]                     .init = FALSE)
[08:27:49.782]                 }
[08:27:49.782]             }
[08:27:49.782]         }
[08:27:49.782]     })
[08:27:49.782]     if (TRUE) {
[08:27:49.782]         base::sink(type = "output", split = FALSE)
[08:27:49.782]         if (TRUE) {
[08:27:49.782]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.782]         }
[08:27:49.782]         else {
[08:27:49.782]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.782]         }
[08:27:49.782]         base::close(...future.stdout)
[08:27:49.782]         ...future.stdout <- NULL
[08:27:49.782]     }
[08:27:49.782]     ...future.result$conditions <- ...future.conditions
[08:27:49.782]     ...future.result$finished <- base::Sys.time()
[08:27:49.782]     ...future.result
[08:27:49.782] }
[08:27:49.784] plan(): Setting new future strategy stack:
[08:27:49.784] List of future strategies:
[08:27:49.784] 1. sequential:
[08:27:49.784]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.784]    - tweaked: FALSE
[08:27:49.784]    - call: NULL
[08:27:49.784] plan(): nbrOfWorkers() = 1
[08:27:49.785] plan(): Setting new future strategy stack:
[08:27:49.785] List of future strategies:
[08:27:49.785] 1. sequential:
[08:27:49.785]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.785]    - tweaked: FALSE
[08:27:49.785]    - call: future::plan("sequential")
[08:27:49.786] plan(): nbrOfWorkers() = 1
[08:27:49.786] SequentialFuture started (and completed)
[08:27:49.786] - Launch lazy future ... done
[08:27:49.786] run() for ‘SequentialFuture’ ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    2
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
*** FutureRegistry('rscript', 'reset') ...
*** FutureRegistry('rscript', 'list') ...
list()
> 
> 
> message("*** FutureRegistry() - exceptions ...")
*** FutureRegistry() - exceptions ...
> 
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> f <- future(1)
[08:27:49.787] getGlobalsAndPackages() ...
[08:27:49.787] Searching for globals...
[08:27:49.787] 
[08:27:49.787] Searching for globals ... DONE
[08:27:49.788] - globals: [0] <none>
[08:27:49.788] getGlobalsAndPackages() ... DONE
[08:27:49.788] run() for ‘Future’ ...
[08:27:49.788] - state: ‘created’
[08:27:49.788] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:49.788] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:49.788] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:49.788]   - Field: ‘label’
[08:27:49.789]   - Field: ‘local’
[08:27:49.789]   - Field: ‘owner’
[08:27:49.789]   - Field: ‘envir’
[08:27:49.789]   - Field: ‘packages’
[08:27:49.789]   - Field: ‘gc’
[08:27:49.789]   - Field: ‘conditions’
[08:27:49.789]   - Field: ‘expr’
[08:27:49.789]   - Field: ‘uuid’
[08:27:49.789]   - Field: ‘seed’
[08:27:49.789]   - Field: ‘version’
[08:27:49.789]   - Field: ‘result’
[08:27:49.790]   - Field: ‘asynchronous’
[08:27:49.790]   - Field: ‘calls’
[08:27:49.790]   - Field: ‘globals’
[08:27:49.790]   - Field: ‘stdout’
[08:27:49.790]   - Field: ‘earlySignal’
[08:27:49.790]   - Field: ‘lazy’
[08:27:49.790]   - Field: ‘state’
[08:27:49.790] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:49.790] - Launch lazy future ...
[08:27:49.790] Packages needed by the future expression (n = 0): <none>
[08:27:49.791] Packages needed by future strategies (n = 0): <none>
[08:27:49.791] {
[08:27:49.791]     {
[08:27:49.791]         {
[08:27:49.791]             ...future.startTime <- base::Sys.time()
[08:27:49.791]             {
[08:27:49.791]                 {
[08:27:49.791]                   {
[08:27:49.791]                     base::local({
[08:27:49.791]                       has_future <- base::requireNamespace("future", 
[08:27:49.791]                         quietly = TRUE)
[08:27:49.791]                       if (has_future) {
[08:27:49.791]                         ns <- base::getNamespace("future")
[08:27:49.791]                         version <- ns[[".package"]][["version"]]
[08:27:49.791]                         if (is.null(version)) 
[08:27:49.791]                           version <- utils::packageVersion("future")
[08:27:49.791]                       }
[08:27:49.791]                       else {
[08:27:49.791]                         version <- NULL
[08:27:49.791]                       }
[08:27:49.791]                       if (!has_future || version < "1.8.0") {
[08:27:49.791]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:49.791]                           "", base::R.version$version.string), 
[08:27:49.791]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:49.791]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:49.791]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:49.791]                             "release", "version")], collapse = " "), 
[08:27:49.791]                           hostname = base::Sys.info()[["nodename"]])
[08:27:49.791]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:49.791]                           info)
[08:27:49.791]                         info <- base::paste(info, collapse = "; ")
[08:27:49.791]                         if (!has_future) {
[08:27:49.791]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:49.791]                             info)
[08:27:49.791]                         }
[08:27:49.791]                         else {
[08:27:49.791]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:49.791]                             info, version)
[08:27:49.791]                         }
[08:27:49.791]                         base::stop(msg)
[08:27:49.791]                       }
[08:27:49.791]                     })
[08:27:49.791]                   }
[08:27:49.791]                   ...future.strategy.old <- future::plan("list")
[08:27:49.791]                   options(future.plan = NULL)
[08:27:49.791]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.791]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:49.791]                 }
[08:27:49.791]                 ...future.workdir <- getwd()
[08:27:49.791]             }
[08:27:49.791]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:49.791]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:49.791]         }
[08:27:49.791]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:49.791]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:49.791]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:49.791]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:49.791]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:49.791]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:49.791]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:49.791]             base::names(...future.oldOptions))
[08:27:49.791]     }
[08:27:49.791]     if (FALSE) {
[08:27:49.791]     }
[08:27:49.791]     else {
[08:27:49.791]         if (TRUE) {
[08:27:49.791]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:49.791]                 open = "w")
[08:27:49.791]         }
[08:27:49.791]         else {
[08:27:49.791]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:49.791]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:49.791]         }
[08:27:49.791]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:49.791]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:49.791]             base::sink(type = "output", split = FALSE)
[08:27:49.791]             base::close(...future.stdout)
[08:27:49.791]         }, add = TRUE)
[08:27:49.791]     }
[08:27:49.791]     ...future.frame <- base::sys.nframe()
[08:27:49.791]     ...future.conditions <- base::list()
[08:27:49.791]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:49.791]     if (FALSE) {
[08:27:49.791]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:49.791]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:49.791]     }
[08:27:49.791]     ...future.result <- base::tryCatch({
[08:27:49.791]         base::withCallingHandlers({
[08:27:49.791]             ...future.value <- base::withVisible(base::local(1))
[08:27:49.791]             future::FutureResult(value = ...future.value$value, 
[08:27:49.791]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.791]                   ...future.rng), globalenv = if (FALSE) 
[08:27:49.791]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:49.791]                     ...future.globalenv.names))
[08:27:49.791]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:49.791]         }, condition = base::local({
[08:27:49.791]             c <- base::c
[08:27:49.791]             inherits <- base::inherits
[08:27:49.791]             invokeRestart <- base::invokeRestart
[08:27:49.791]             length <- base::length
[08:27:49.791]             list <- base::list
[08:27:49.791]             seq.int <- base::seq.int
[08:27:49.791]             signalCondition <- base::signalCondition
[08:27:49.791]             sys.calls <- base::sys.calls
[08:27:49.791]             `[[` <- base::`[[`
[08:27:49.791]             `+` <- base::`+`
[08:27:49.791]             `<<-` <- base::`<<-`
[08:27:49.791]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:49.791]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:49.791]                   3L)]
[08:27:49.791]             }
[08:27:49.791]             function(cond) {
[08:27:49.791]                 is_error <- inherits(cond, "error")
[08:27:49.791]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:49.791]                   NULL)
[08:27:49.791]                 if (is_error) {
[08:27:49.791]                   sessionInformation <- function() {
[08:27:49.791]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:49.791]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:49.791]                       search = base::search(), system = base::Sys.info())
[08:27:49.791]                   }
[08:27:49.791]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.791]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:49.791]                     cond$call), session = sessionInformation(), 
[08:27:49.791]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:49.791]                   signalCondition(cond)
[08:27:49.791]                 }
[08:27:49.791]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:49.791]                 "immediateCondition"))) {
[08:27:49.791]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:49.791]                   ...future.conditions[[length(...future.conditions) + 
[08:27:49.791]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:49.791]                   if (TRUE && !signal) {
[08:27:49.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.791]                     {
[08:27:49.791]                       inherits <- base::inherits
[08:27:49.791]                       invokeRestart <- base::invokeRestart
[08:27:49.791]                       is.null <- base::is.null
[08:27:49.791]                       muffled <- FALSE
[08:27:49.791]                       if (inherits(cond, "message")) {
[08:27:49.791]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.791]                         if (muffled) 
[08:27:49.791]                           invokeRestart("muffleMessage")
[08:27:49.791]                       }
[08:27:49.791]                       else if (inherits(cond, "warning")) {
[08:27:49.791]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.791]                         if (muffled) 
[08:27:49.791]                           invokeRestart("muffleWarning")
[08:27:49.791]                       }
[08:27:49.791]                       else if (inherits(cond, "condition")) {
[08:27:49.791]                         if (!is.null(pattern)) {
[08:27:49.791]                           computeRestarts <- base::computeRestarts
[08:27:49.791]                           grepl <- base::grepl
[08:27:49.791]                           restarts <- computeRestarts(cond)
[08:27:49.791]                           for (restart in restarts) {
[08:27:49.791]                             name <- restart$name
[08:27:49.791]                             if (is.null(name)) 
[08:27:49.791]                               next
[08:27:49.791]                             if (!grepl(pattern, name)) 
[08:27:49.791]                               next
[08:27:49.791]                             invokeRestart(restart)
[08:27:49.791]                             muffled <- TRUE
[08:27:49.791]                             break
[08:27:49.791]                           }
[08:27:49.791]                         }
[08:27:49.791]                       }
[08:27:49.791]                       invisible(muffled)
[08:27:49.791]                     }
[08:27:49.791]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.791]                   }
[08:27:49.791]                 }
[08:27:49.791]                 else {
[08:27:49.791]                   if (TRUE) {
[08:27:49.791]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:49.791]                     {
[08:27:49.791]                       inherits <- base::inherits
[08:27:49.791]                       invokeRestart <- base::invokeRestart
[08:27:49.791]                       is.null <- base::is.null
[08:27:49.791]                       muffled <- FALSE
[08:27:49.791]                       if (inherits(cond, "message")) {
[08:27:49.791]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:49.791]                         if (muffled) 
[08:27:49.791]                           invokeRestart("muffleMessage")
[08:27:49.791]                       }
[08:27:49.791]                       else if (inherits(cond, "warning")) {
[08:27:49.791]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:49.791]                         if (muffled) 
[08:27:49.791]                           invokeRestart("muffleWarning")
[08:27:49.791]                       }
[08:27:49.791]                       else if (inherits(cond, "condition")) {
[08:27:49.791]                         if (!is.null(pattern)) {
[08:27:49.791]                           computeRestarts <- base::computeRestarts
[08:27:49.791]                           grepl <- base::grepl
[08:27:49.791]                           restarts <- computeRestarts(cond)
[08:27:49.791]                           for (restart in restarts) {
[08:27:49.791]                             name <- restart$name
[08:27:49.791]                             if (is.null(name)) 
[08:27:49.791]                               next
[08:27:49.791]                             if (!grepl(pattern, name)) 
[08:27:49.791]                               next
[08:27:49.791]                             invokeRestart(restart)
[08:27:49.791]                             muffled <- TRUE
[08:27:49.791]                             break
[08:27:49.791]                           }
[08:27:49.791]                         }
[08:27:49.791]                       }
[08:27:49.791]                       invisible(muffled)
[08:27:49.791]                     }
[08:27:49.791]                     muffleCondition(cond, pattern = "^muffle")
[08:27:49.791]                   }
[08:27:49.791]                 }
[08:27:49.791]             }
[08:27:49.791]         }))
[08:27:49.791]     }, error = function(ex) {
[08:27:49.791]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:49.791]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:49.791]                 ...future.rng), started = ...future.startTime, 
[08:27:49.791]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:49.791]             version = "1.8"), class = "FutureResult")
[08:27:49.791]     }, finally = {
[08:27:49.791]         if (!identical(...future.workdir, getwd())) 
[08:27:49.791]             setwd(...future.workdir)
[08:27:49.791]         {
[08:27:49.791]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:49.791]                 ...future.oldOptions$nwarnings <- NULL
[08:27:49.791]             }
[08:27:49.791]             base::options(...future.oldOptions)
[08:27:49.791]             if (.Platform$OS.type == "windows") {
[08:27:49.791]                 old_names <- names(...future.oldEnvVars)
[08:27:49.791]                 envs <- base::Sys.getenv()
[08:27:49.791]                 names <- names(envs)
[08:27:49.791]                 common <- intersect(names, old_names)
[08:27:49.791]                 added <- setdiff(names, old_names)
[08:27:49.791]                 removed <- setdiff(old_names, names)
[08:27:49.791]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:49.791]                   envs[common]]
[08:27:49.791]                 NAMES <- toupper(changed)
[08:27:49.791]                 args <- list()
[08:27:49.791]                 for (kk in seq_along(NAMES)) {
[08:27:49.791]                   name <- changed[[kk]]
[08:27:49.791]                   NAME <- NAMES[[kk]]
[08:27:49.791]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.791]                     next
[08:27:49.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.791]                 }
[08:27:49.791]                 NAMES <- toupper(added)
[08:27:49.791]                 for (kk in seq_along(NAMES)) {
[08:27:49.791]                   name <- added[[kk]]
[08:27:49.791]                   NAME <- NAMES[[kk]]
[08:27:49.791]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.791]                     next
[08:27:49.791]                   args[[name]] <- ""
[08:27:49.791]                 }
[08:27:49.791]                 NAMES <- toupper(removed)
[08:27:49.791]                 for (kk in seq_along(NAMES)) {
[08:27:49.791]                   name <- removed[[kk]]
[08:27:49.791]                   NAME <- NAMES[[kk]]
[08:27:49.791]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:49.791]                     next
[08:27:49.791]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:49.791]                 }
[08:27:49.791]                 if (length(args) > 0) 
[08:27:49.791]                   base::do.call(base::Sys.setenv, args = args)
[08:27:49.791]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:49.791]             }
[08:27:49.791]             else {
[08:27:49.791]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:49.791]             }
[08:27:49.791]             {
[08:27:49.791]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:49.791]                   0L) {
[08:27:49.791]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:49.791]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:49.791]                   base::options(opts)
[08:27:49.791]                 }
[08:27:49.791]                 {
[08:27:49.791]                   {
[08:27:49.791]                     NULL
[08:27:49.791]                     RNGkind("Mersenne-Twister")
[08:27:49.791]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:49.791]                       inherits = FALSE)
[08:27:49.791]                   }
[08:27:49.791]                   options(future.plan = NULL)
[08:27:49.791]                   if (is.na(NA_character_)) 
[08:27:49.791]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:49.791]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:49.791]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:49.791]                     .init = FALSE)
[08:27:49.791]                 }
[08:27:49.791]             }
[08:27:49.791]         }
[08:27:49.791]     })
[08:27:49.791]     if (TRUE) {
[08:27:49.791]         base::sink(type = "output", split = FALSE)
[08:27:49.791]         if (TRUE) {
[08:27:49.791]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:49.791]         }
[08:27:49.791]         else {
[08:27:49.791]             ...future.result["stdout"] <- base::list(NULL)
[08:27:49.791]         }
[08:27:49.791]         base::close(...future.stdout)
[08:27:49.791]         ...future.stdout <- NULL
[08:27:49.791]     }
[08:27:49.791]     ...future.result$conditions <- ...future.conditions
[08:27:49.791]     ...future.result$finished <- base::Sys.time()
[08:27:49.791]     ...future.result
[08:27:49.791] }
[08:27:49.793] plan(): Setting new future strategy stack:
[08:27:49.793] List of future strategies:
[08:27:49.793] 1. sequential:
[08:27:49.793]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.793]    - tweaked: FALSE
[08:27:49.793]    - call: NULL
[08:27:49.793] plan(): nbrOfWorkers() = 1
[08:27:49.794] plan(): Setting new future strategy stack:
[08:27:49.794] List of future strategies:
[08:27:49.794] 1. sequential:
[08:27:49.794]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.794]    - tweaked: FALSE
[08:27:49.794]    - call: future::plan("sequential")
[08:27:49.795] plan(): nbrOfWorkers() = 1
[08:27:49.795] SequentialFuture started (and completed)
[08:27:49.795] - Launch lazy future ... done
[08:27:49.795] run() for ‘SequentialFuture’ ... done
> FutureRegistry(where = "test", action = "add", future = f)
[[1]]
SequentialFuture:
Label: ‘<none>’
Expression:
[1] 1
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: bb276baa-2484-74fc-3e0c-d6c3da7305be
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "add", future = f), error = identity)
[08:27:49.796] ERROR: Cannot add to ‘test’ registry. SequentialFuture is already registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 1)
> 
> 
> FutureRegistry(where = "test", action = "remove", future = f)
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "remove", future = f), error = identity)
[08:27:49.796] ERROR: Cannot remove from ‘test’ registry. SequentialFuture not registered.
> stopifnot(inherits(res, "error"))
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> FutureRegistry(where = "test", action = "reset")
list()
> futures <- FutureRegistry(where = "test", action = "list")
> stopifnot(length(futures) == 0)
> 
> res <- tryCatch(FutureRegistry(where = "test", action = "<unknown>"), error = identity)
[08:27:49.796] INTERNAL ERROR: Unknown action to ‘test’ registry: <unknown>
> stopifnot(inherits(res, "error"))
> 
> message("*** FutureRegistry() - exceptions ... DONE")
*** FutureRegistry() - exceptions ... DONE
> 
> 
> message("*** FutureRegistry() ... DONE")
*** FutureRegistry() ... DONE
> 
> source("incl/end.R")
[08:27:49.797] plan(): Setting new future strategy stack:
[08:27:49.797] List of future strategies:
[08:27:49.797] 1. FutureStrategy:
[08:27:49.797]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:49.797]    - tweaked: FALSE
[08:27:49.797]    - call: future::plan(oplan)
[08:27:49.810] plan(): nbrOfWorkers() = 1
> 
