
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:02:01.275] plan(): Setting new future strategy stack:
[11:02:01.276] List of future strategies:
[11:02:01.276] 1. sequential:
[11:02:01.276]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:01.276]    - tweaked: FALSE
[11:02:01.276]    - call: future::plan("sequential")
[11:02:01.288] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[11:02:01.305] plan(): Setting new future strategy stack:
[11:02:01.306] List of future strategies:
[11:02:01.306] 1. multisession:
[11:02:01.306]    - args: function (..., workers = 2L, envir = parent.frame())
[11:02:01.306]    - tweaked: TRUE
[11:02:01.306]    - call: plan(multisession, workers = 2L)
[11:02:01.317] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:01.317] multisession:
[11:02:01.317] - args: function (..., workers = 2L, envir = parent.frame())
[11:02:01.317] - tweaked: TRUE
[11:02:01.317] - call: plan(multisession, workers = 2L)
[11:02:01.318] getGlobalsAndPackages() ...
[11:02:01.318] Not searching for globals
[11:02:01.318] - globals: [0] <none>
[11:02:01.318] getGlobalsAndPackages() ... DONE
[11:02:01.816] Packages needed by the future expression (n = 0): <none>
[11:02:01.816] Packages needed by future strategies (n = 0): <none>
[11:02:01.817] {
[11:02:01.817]     {
[11:02:01.817]         {
[11:02:01.817]             ...future.startTime <- base::Sys.time()
[11:02:01.817]             {
[11:02:01.817]                 {
[11:02:01.817]                   {
[11:02:01.817]                     {
[11:02:01.817]                       base::local({
[11:02:01.817]                         has_future <- base::requireNamespace("future", 
[11:02:01.817]                           quietly = TRUE)
[11:02:01.817]                         if (has_future) {
[11:02:01.817]                           ns <- base::getNamespace("future")
[11:02:01.817]                           version <- ns[[".package"]][["version"]]
[11:02:01.817]                           if (is.null(version)) 
[11:02:01.817]                             version <- utils::packageVersion("future")
[11:02:01.817]                         }
[11:02:01.817]                         else {
[11:02:01.817]                           version <- NULL
[11:02:01.817]                         }
[11:02:01.817]                         if (!has_future || version < "1.8.0") {
[11:02:01.817]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:01.817]                             "", base::R.version$version.string), 
[11:02:01.817]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:01.817]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:01.817]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:01.817]                               "release", "version")], collapse = " "), 
[11:02:01.817]                             hostname = base::Sys.info()[["nodename"]])
[11:02:01.817]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:01.817]                             info)
[11:02:01.817]                           info <- base::paste(info, collapse = "; ")
[11:02:01.817]                           if (!has_future) {
[11:02:01.817]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:01.817]                               info)
[11:02:01.817]                           }
[11:02:01.817]                           else {
[11:02:01.817]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:01.817]                               info, version)
[11:02:01.817]                           }
[11:02:01.817]                           base::stop(msg)
[11:02:01.817]                         }
[11:02:01.817]                       })
[11:02:01.817]                     }
[11:02:01.817]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:01.817]                     base::options(mc.cores = 1L)
[11:02:01.817]                   }
[11:02:01.817]                   ...future.strategy.old <- future::plan("list")
[11:02:01.817]                   options(future.plan = NULL)
[11:02:01.817]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.817]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:01.817]                 }
[11:02:01.817]                 ...future.workdir <- getwd()
[11:02:01.817]             }
[11:02:01.817]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:01.817]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:01.817]         }
[11:02:01.817]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:01.817]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:01.817]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:01.817]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:01.817]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:01.817]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:01.817]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:01.817]             base::names(...future.oldOptions))
[11:02:01.817]     }
[11:02:01.817]     if (FALSE) {
[11:02:01.817]     }
[11:02:01.817]     else {
[11:02:01.817]         if (TRUE) {
[11:02:01.817]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:01.817]                 open = "w")
[11:02:01.817]         }
[11:02:01.817]         else {
[11:02:01.817]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:01.817]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:01.817]         }
[11:02:01.817]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:01.817]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:01.817]             base::sink(type = "output", split = FALSE)
[11:02:01.817]             base::close(...future.stdout)
[11:02:01.817]         }, add = TRUE)
[11:02:01.817]     }
[11:02:01.817]     ...future.frame <- base::sys.nframe()
[11:02:01.817]     ...future.conditions <- base::list()
[11:02:01.817]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:01.817]     if (FALSE) {
[11:02:01.817]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:01.817]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:01.817]     }
[11:02:01.817]     ...future.result <- base::tryCatch({
[11:02:01.817]         base::withCallingHandlers({
[11:02:01.817]             ...future.value <- base::withVisible(base::local({
[11:02:01.817]                 ...future.makeSendCondition <- base::local({
[11:02:01.817]                   sendCondition <- NULL
[11:02:01.817]                   function(frame = 1L) {
[11:02:01.817]                     if (is.function(sendCondition)) 
[11:02:01.817]                       return(sendCondition)
[11:02:01.817]                     ns <- getNamespace("parallel")
[11:02:01.817]                     if (exists("sendData", mode = "function", 
[11:02:01.817]                       envir = ns)) {
[11:02:01.817]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:01.817]                         envir = ns)
[11:02:01.817]                       envir <- sys.frame(frame)
[11:02:01.817]                       master <- NULL
[11:02:01.817]                       while (!identical(envir, .GlobalEnv) && 
[11:02:01.817]                         !identical(envir, emptyenv())) {
[11:02:01.817]                         if (exists("master", mode = "list", envir = envir, 
[11:02:01.817]                           inherits = FALSE)) {
[11:02:01.817]                           master <- get("master", mode = "list", 
[11:02:01.817]                             envir = envir, inherits = FALSE)
[11:02:01.817]                           if (inherits(master, c("SOCKnode", 
[11:02:01.817]                             "SOCK0node"))) {
[11:02:01.817]                             sendCondition <<- function(cond) {
[11:02:01.817]                               data <- list(type = "VALUE", value = cond, 
[11:02:01.817]                                 success = TRUE)
[11:02:01.817]                               parallel_sendData(master, data)
[11:02:01.817]                             }
[11:02:01.817]                             return(sendCondition)
[11:02:01.817]                           }
[11:02:01.817]                         }
[11:02:01.817]                         frame <- frame + 1L
[11:02:01.817]                         envir <- sys.frame(frame)
[11:02:01.817]                       }
[11:02:01.817]                     }
[11:02:01.817]                     sendCondition <<- function(cond) NULL
[11:02:01.817]                   }
[11:02:01.817]                 })
[11:02:01.817]                 withCallingHandlers({
[11:02:01.817]                   NA
[11:02:01.817]                 }, immediateCondition = function(cond) {
[11:02:01.817]                   sendCondition <- ...future.makeSendCondition()
[11:02:01.817]                   sendCondition(cond)
[11:02:01.817]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.817]                   {
[11:02:01.817]                     inherits <- base::inherits
[11:02:01.817]                     invokeRestart <- base::invokeRestart
[11:02:01.817]                     is.null <- base::is.null
[11:02:01.817]                     muffled <- FALSE
[11:02:01.817]                     if (inherits(cond, "message")) {
[11:02:01.817]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:01.817]                       if (muffled) 
[11:02:01.817]                         invokeRestart("muffleMessage")
[11:02:01.817]                     }
[11:02:01.817]                     else if (inherits(cond, "warning")) {
[11:02:01.817]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:01.817]                       if (muffled) 
[11:02:01.817]                         invokeRestart("muffleWarning")
[11:02:01.817]                     }
[11:02:01.817]                     else if (inherits(cond, "condition")) {
[11:02:01.817]                       if (!is.null(pattern)) {
[11:02:01.817]                         computeRestarts <- base::computeRestarts
[11:02:01.817]                         grepl <- base::grepl
[11:02:01.817]                         restarts <- computeRestarts(cond)
[11:02:01.817]                         for (restart in restarts) {
[11:02:01.817]                           name <- restart$name
[11:02:01.817]                           if (is.null(name)) 
[11:02:01.817]                             next
[11:02:01.817]                           if (!grepl(pattern, name)) 
[11:02:01.817]                             next
[11:02:01.817]                           invokeRestart(restart)
[11:02:01.817]                           muffled <- TRUE
[11:02:01.817]                           break
[11:02:01.817]                         }
[11:02:01.817]                       }
[11:02:01.817]                     }
[11:02:01.817]                     invisible(muffled)
[11:02:01.817]                   }
[11:02:01.817]                   muffleCondition(cond)
[11:02:01.817]                 })
[11:02:01.817]             }))
[11:02:01.817]             future::FutureResult(value = ...future.value$value, 
[11:02:01.817]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.817]                   ...future.rng), globalenv = if (FALSE) 
[11:02:01.817]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:01.817]                     ...future.globalenv.names))
[11:02:01.817]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:01.817]         }, condition = base::local({
[11:02:01.817]             c <- base::c
[11:02:01.817]             inherits <- base::inherits
[11:02:01.817]             invokeRestart <- base::invokeRestart
[11:02:01.817]             length <- base::length
[11:02:01.817]             list <- base::list
[11:02:01.817]             seq.int <- base::seq.int
[11:02:01.817]             signalCondition <- base::signalCondition
[11:02:01.817]             sys.calls <- base::sys.calls
[11:02:01.817]             `[[` <- base::`[[`
[11:02:01.817]             `+` <- base::`+`
[11:02:01.817]             `<<-` <- base::`<<-`
[11:02:01.817]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:01.817]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:01.817]                   3L)]
[11:02:01.817]             }
[11:02:01.817]             function(cond) {
[11:02:01.817]                 is_error <- inherits(cond, "error")
[11:02:01.817]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:01.817]                   NULL)
[11:02:01.817]                 if (is_error) {
[11:02:01.817]                   sessionInformation <- function() {
[11:02:01.817]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:01.817]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:01.817]                       search = base::search(), system = base::Sys.info())
[11:02:01.817]                   }
[11:02:01.817]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.817]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:01.817]                     cond$call), session = sessionInformation(), 
[11:02:01.817]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:01.817]                   signalCondition(cond)
[11:02:01.817]                 }
[11:02:01.817]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:01.817]                 "immediateCondition"))) {
[11:02:01.817]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:01.817]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.817]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:01.817]                   if (TRUE && !signal) {
[11:02:01.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.817]                     {
[11:02:01.817]                       inherits <- base::inherits
[11:02:01.817]                       invokeRestart <- base::invokeRestart
[11:02:01.817]                       is.null <- base::is.null
[11:02:01.817]                       muffled <- FALSE
[11:02:01.817]                       if (inherits(cond, "message")) {
[11:02:01.817]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.817]                         if (muffled) 
[11:02:01.817]                           invokeRestart("muffleMessage")
[11:02:01.817]                       }
[11:02:01.817]                       else if (inherits(cond, "warning")) {
[11:02:01.817]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.817]                         if (muffled) 
[11:02:01.817]                           invokeRestart("muffleWarning")
[11:02:01.817]                       }
[11:02:01.817]                       else if (inherits(cond, "condition")) {
[11:02:01.817]                         if (!is.null(pattern)) {
[11:02:01.817]                           computeRestarts <- base::computeRestarts
[11:02:01.817]                           grepl <- base::grepl
[11:02:01.817]                           restarts <- computeRestarts(cond)
[11:02:01.817]                           for (restart in restarts) {
[11:02:01.817]                             name <- restart$name
[11:02:01.817]                             if (is.null(name)) 
[11:02:01.817]                               next
[11:02:01.817]                             if (!grepl(pattern, name)) 
[11:02:01.817]                               next
[11:02:01.817]                             invokeRestart(restart)
[11:02:01.817]                             muffled <- TRUE
[11:02:01.817]                             break
[11:02:01.817]                           }
[11:02:01.817]                         }
[11:02:01.817]                       }
[11:02:01.817]                       invisible(muffled)
[11:02:01.817]                     }
[11:02:01.817]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.817]                   }
[11:02:01.817]                 }
[11:02:01.817]                 else {
[11:02:01.817]                   if (TRUE) {
[11:02:01.817]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.817]                     {
[11:02:01.817]                       inherits <- base::inherits
[11:02:01.817]                       invokeRestart <- base::invokeRestart
[11:02:01.817]                       is.null <- base::is.null
[11:02:01.817]                       muffled <- FALSE
[11:02:01.817]                       if (inherits(cond, "message")) {
[11:02:01.817]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.817]                         if (muffled) 
[11:02:01.817]                           invokeRestart("muffleMessage")
[11:02:01.817]                       }
[11:02:01.817]                       else if (inherits(cond, "warning")) {
[11:02:01.817]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.817]                         if (muffled) 
[11:02:01.817]                           invokeRestart("muffleWarning")
[11:02:01.817]                       }
[11:02:01.817]                       else if (inherits(cond, "condition")) {
[11:02:01.817]                         if (!is.null(pattern)) {
[11:02:01.817]                           computeRestarts <- base::computeRestarts
[11:02:01.817]                           grepl <- base::grepl
[11:02:01.817]                           restarts <- computeRestarts(cond)
[11:02:01.817]                           for (restart in restarts) {
[11:02:01.817]                             name <- restart$name
[11:02:01.817]                             if (is.null(name)) 
[11:02:01.817]                               next
[11:02:01.817]                             if (!grepl(pattern, name)) 
[11:02:01.817]                               next
[11:02:01.817]                             invokeRestart(restart)
[11:02:01.817]                             muffled <- TRUE
[11:02:01.817]                             break
[11:02:01.817]                           }
[11:02:01.817]                         }
[11:02:01.817]                       }
[11:02:01.817]                       invisible(muffled)
[11:02:01.817]                     }
[11:02:01.817]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.817]                   }
[11:02:01.817]                 }
[11:02:01.817]             }
[11:02:01.817]         }))
[11:02:01.817]     }, error = function(ex) {
[11:02:01.817]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:01.817]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.817]                 ...future.rng), started = ...future.startTime, 
[11:02:01.817]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:01.817]             version = "1.8"), class = "FutureResult")
[11:02:01.817]     }, finally = {
[11:02:01.817]         if (!identical(...future.workdir, getwd())) 
[11:02:01.817]             setwd(...future.workdir)
[11:02:01.817]         {
[11:02:01.817]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:01.817]                 ...future.oldOptions$nwarnings <- NULL
[11:02:01.817]             }
[11:02:01.817]             base::options(...future.oldOptions)
[11:02:01.817]             if (.Platform$OS.type == "windows") {
[11:02:01.817]                 old_names <- names(...future.oldEnvVars)
[11:02:01.817]                 envs <- base::Sys.getenv()
[11:02:01.817]                 names <- names(envs)
[11:02:01.817]                 common <- intersect(names, old_names)
[11:02:01.817]                 added <- setdiff(names, old_names)
[11:02:01.817]                 removed <- setdiff(old_names, names)
[11:02:01.817]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:01.817]                   envs[common]]
[11:02:01.817]                 NAMES <- toupper(changed)
[11:02:01.817]                 args <- list()
[11:02:01.817]                 for (kk in seq_along(NAMES)) {
[11:02:01.817]                   name <- changed[[kk]]
[11:02:01.817]                   NAME <- NAMES[[kk]]
[11:02:01.817]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.817]                     next
[11:02:01.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.817]                 }
[11:02:01.817]                 NAMES <- toupper(added)
[11:02:01.817]                 for (kk in seq_along(NAMES)) {
[11:02:01.817]                   name <- added[[kk]]
[11:02:01.817]                   NAME <- NAMES[[kk]]
[11:02:01.817]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.817]                     next
[11:02:01.817]                   args[[name]] <- ""
[11:02:01.817]                 }
[11:02:01.817]                 NAMES <- toupper(removed)
[11:02:01.817]                 for (kk in seq_along(NAMES)) {
[11:02:01.817]                   name <- removed[[kk]]
[11:02:01.817]                   NAME <- NAMES[[kk]]
[11:02:01.817]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.817]                     next
[11:02:01.817]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.817]                 }
[11:02:01.817]                 if (length(args) > 0) 
[11:02:01.817]                   base::do.call(base::Sys.setenv, args = args)
[11:02:01.817]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:01.817]             }
[11:02:01.817]             else {
[11:02:01.817]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:01.817]             }
[11:02:01.817]             {
[11:02:01.817]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:01.817]                   0L) {
[11:02:01.817]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:01.817]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:01.817]                   base::options(opts)
[11:02:01.817]                 }
[11:02:01.817]                 {
[11:02:01.817]                   {
[11:02:01.817]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:01.817]                     NULL
[11:02:01.817]                   }
[11:02:01.817]                   options(future.plan = NULL)
[11:02:01.817]                   if (is.na(NA_character_)) 
[11:02:01.817]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.817]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:01.817]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:01.817]                     .init = FALSE)
[11:02:01.817]                 }
[11:02:01.817]             }
[11:02:01.817]         }
[11:02:01.817]     })
[11:02:01.817]     if (TRUE) {
[11:02:01.817]         base::sink(type = "output", split = FALSE)
[11:02:01.817]         if (TRUE) {
[11:02:01.817]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:01.817]         }
[11:02:01.817]         else {
[11:02:01.817]             ...future.result["stdout"] <- base::list(NULL)
[11:02:01.817]         }
[11:02:01.817]         base::close(...future.stdout)
[11:02:01.817]         ...future.stdout <- NULL
[11:02:01.817]     }
[11:02:01.817]     ...future.result$conditions <- ...future.conditions
[11:02:01.817]     ...future.result$finished <- base::Sys.time()
[11:02:01.817]     ...future.result
[11:02:01.817] }
[11:02:01.868] MultisessionFuture started
[11:02:01.868] result() for ClusterFuture ...
[11:02:01.869] receiveMessageFromWorker() for ClusterFuture ...
[11:02:01.869] - Validating connection of MultisessionFuture
[11:02:01.898] - received message: FutureResult
[11:02:01.899] - Received FutureResult
[11:02:01.901] - Erased future from FutureRegistry
[11:02:01.901] result() for ClusterFuture ...
[11:02:01.901] - result already collected: FutureResult
[11:02:01.901] result() for ClusterFuture ... done
[11:02:01.901] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:01.901] result() for ClusterFuture ... done
[11:02:01.902] result() for ClusterFuture ...
[11:02:01.902] - result already collected: FutureResult
[11:02:01.902] result() for ClusterFuture ... done
[11:02:01.902] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:01.902] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 90304434-bc0c-ac58-d336-535d23d0508f
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[11:02:01.902] getGlobalsAndPackages() ...
[11:02:01.903] Searching for globals...
[11:02:01.908] - globals found: [2] ‘{’, ‘:::’
[11:02:01.908] Searching for globals ... DONE
[11:02:01.908] Resolving globals: FALSE
[11:02:01.909] 
[11:02:01.909] 
[11:02:01.909] getGlobalsAndPackages() ... DONE
[11:02:01.909] run() for ‘Future’ ...
[11:02:01.909] - state: ‘created’
[11:02:01.910] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:01.922] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:01.922] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:01.922]   - Field: ‘node’
[11:02:01.923]   - Field: ‘label’
[11:02:01.923]   - Field: ‘local’
[11:02:01.923]   - Field: ‘owner’
[11:02:01.923]   - Field: ‘envir’
[11:02:01.923]   - Field: ‘workers’
[11:02:01.923]   - Field: ‘packages’
[11:02:01.923]   - Field: ‘gc’
[11:02:01.923]   - Field: ‘conditions’
[11:02:01.923]   - Field: ‘persistent’
[11:02:01.923]   - Field: ‘expr’
[11:02:01.923]   - Field: ‘uuid’
[11:02:01.923]   - Field: ‘seed’
[11:02:01.924]   - Field: ‘version’
[11:02:01.924]   - Field: ‘result’
[11:02:01.924]   - Field: ‘asynchronous’
[11:02:01.924]   - Field: ‘calls’
[11:02:01.924]   - Field: ‘globals’
[11:02:01.924]   - Field: ‘stdout’
[11:02:01.924]   - Field: ‘earlySignal’
[11:02:01.924]   - Field: ‘lazy’
[11:02:01.924]   - Field: ‘state’
[11:02:01.924] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:01.924] - Launch lazy future ...
[11:02:01.925] Packages needed by the future expression (n = 0): <none>
[11:02:01.925] Packages needed by future strategies (n = 0): <none>
[11:02:01.925] {
[11:02:01.925]     {
[11:02:01.925]         {
[11:02:01.925]             ...future.startTime <- base::Sys.time()
[11:02:01.925]             {
[11:02:01.925]                 {
[11:02:01.925]                   {
[11:02:01.925]                     {
[11:02:01.925]                       base::local({
[11:02:01.925]                         has_future <- base::requireNamespace("future", 
[11:02:01.925]                           quietly = TRUE)
[11:02:01.925]                         if (has_future) {
[11:02:01.925]                           ns <- base::getNamespace("future")
[11:02:01.925]                           version <- ns[[".package"]][["version"]]
[11:02:01.925]                           if (is.null(version)) 
[11:02:01.925]                             version <- utils::packageVersion("future")
[11:02:01.925]                         }
[11:02:01.925]                         else {
[11:02:01.925]                           version <- NULL
[11:02:01.925]                         }
[11:02:01.925]                         if (!has_future || version < "1.8.0") {
[11:02:01.925]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:01.925]                             "", base::R.version$version.string), 
[11:02:01.925]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:01.925]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:01.925]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:01.925]                               "release", "version")], collapse = " "), 
[11:02:01.925]                             hostname = base::Sys.info()[["nodename"]])
[11:02:01.925]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:01.925]                             info)
[11:02:01.925]                           info <- base::paste(info, collapse = "; ")
[11:02:01.925]                           if (!has_future) {
[11:02:01.925]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:01.925]                               info)
[11:02:01.925]                           }
[11:02:01.925]                           else {
[11:02:01.925]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:01.925]                               info, version)
[11:02:01.925]                           }
[11:02:01.925]                           base::stop(msg)
[11:02:01.925]                         }
[11:02:01.925]                       })
[11:02:01.925]                     }
[11:02:01.925]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:01.925]                     base::options(mc.cores = 1L)
[11:02:01.925]                   }
[11:02:01.925]                   ...future.strategy.old <- future::plan("list")
[11:02:01.925]                   options(future.plan = NULL)
[11:02:01.925]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.925]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:01.925]                 }
[11:02:01.925]                 ...future.workdir <- getwd()
[11:02:01.925]             }
[11:02:01.925]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:01.925]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:01.925]         }
[11:02:01.925]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:01.925]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:01.925]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:01.925]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:01.925]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:01.925]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:01.925]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:01.925]             base::names(...future.oldOptions))
[11:02:01.925]     }
[11:02:01.925]     if (FALSE) {
[11:02:01.925]     }
[11:02:01.925]     else {
[11:02:01.925]         if (TRUE) {
[11:02:01.925]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:01.925]                 open = "w")
[11:02:01.925]         }
[11:02:01.925]         else {
[11:02:01.925]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:01.925]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:01.925]         }
[11:02:01.925]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:01.925]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:01.925]             base::sink(type = "output", split = FALSE)
[11:02:01.925]             base::close(...future.stdout)
[11:02:01.925]         }, add = TRUE)
[11:02:01.925]     }
[11:02:01.925]     ...future.frame <- base::sys.nframe()
[11:02:01.925]     ...future.conditions <- base::list()
[11:02:01.925]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:01.925]     if (FALSE) {
[11:02:01.925]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:01.925]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:01.925]     }
[11:02:01.925]     ...future.result <- base::tryCatch({
[11:02:01.925]         base::withCallingHandlers({
[11:02:01.925]             ...future.value <- base::withVisible(base::local({
[11:02:01.925]                 ...future.makeSendCondition <- base::local({
[11:02:01.925]                   sendCondition <- NULL
[11:02:01.925]                   function(frame = 1L) {
[11:02:01.925]                     if (is.function(sendCondition)) 
[11:02:01.925]                       return(sendCondition)
[11:02:01.925]                     ns <- getNamespace("parallel")
[11:02:01.925]                     if (exists("sendData", mode = "function", 
[11:02:01.925]                       envir = ns)) {
[11:02:01.925]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:01.925]                         envir = ns)
[11:02:01.925]                       envir <- sys.frame(frame)
[11:02:01.925]                       master <- NULL
[11:02:01.925]                       while (!identical(envir, .GlobalEnv) && 
[11:02:01.925]                         !identical(envir, emptyenv())) {
[11:02:01.925]                         if (exists("master", mode = "list", envir = envir, 
[11:02:01.925]                           inherits = FALSE)) {
[11:02:01.925]                           master <- get("master", mode = "list", 
[11:02:01.925]                             envir = envir, inherits = FALSE)
[11:02:01.925]                           if (inherits(master, c("SOCKnode", 
[11:02:01.925]                             "SOCK0node"))) {
[11:02:01.925]                             sendCondition <<- function(cond) {
[11:02:01.925]                               data <- list(type = "VALUE", value = cond, 
[11:02:01.925]                                 success = TRUE)
[11:02:01.925]                               parallel_sendData(master, data)
[11:02:01.925]                             }
[11:02:01.925]                             return(sendCondition)
[11:02:01.925]                           }
[11:02:01.925]                         }
[11:02:01.925]                         frame <- frame + 1L
[11:02:01.925]                         envir <- sys.frame(frame)
[11:02:01.925]                       }
[11:02:01.925]                     }
[11:02:01.925]                     sendCondition <<- function(cond) NULL
[11:02:01.925]                   }
[11:02:01.925]                 })
[11:02:01.925]                 withCallingHandlers({
[11:02:01.925]                   {
[11:02:01.925]                     future:::session_uuid(attributes = TRUE)
[11:02:01.925]                   }
[11:02:01.925]                 }, immediateCondition = function(cond) {
[11:02:01.925]                   sendCondition <- ...future.makeSendCondition()
[11:02:01.925]                   sendCondition(cond)
[11:02:01.925]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.925]                   {
[11:02:01.925]                     inherits <- base::inherits
[11:02:01.925]                     invokeRestart <- base::invokeRestart
[11:02:01.925]                     is.null <- base::is.null
[11:02:01.925]                     muffled <- FALSE
[11:02:01.925]                     if (inherits(cond, "message")) {
[11:02:01.925]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:01.925]                       if (muffled) 
[11:02:01.925]                         invokeRestart("muffleMessage")
[11:02:01.925]                     }
[11:02:01.925]                     else if (inherits(cond, "warning")) {
[11:02:01.925]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:01.925]                       if (muffled) 
[11:02:01.925]                         invokeRestart("muffleWarning")
[11:02:01.925]                     }
[11:02:01.925]                     else if (inherits(cond, "condition")) {
[11:02:01.925]                       if (!is.null(pattern)) {
[11:02:01.925]                         computeRestarts <- base::computeRestarts
[11:02:01.925]                         grepl <- base::grepl
[11:02:01.925]                         restarts <- computeRestarts(cond)
[11:02:01.925]                         for (restart in restarts) {
[11:02:01.925]                           name <- restart$name
[11:02:01.925]                           if (is.null(name)) 
[11:02:01.925]                             next
[11:02:01.925]                           if (!grepl(pattern, name)) 
[11:02:01.925]                             next
[11:02:01.925]                           invokeRestart(restart)
[11:02:01.925]                           muffled <- TRUE
[11:02:01.925]                           break
[11:02:01.925]                         }
[11:02:01.925]                       }
[11:02:01.925]                     }
[11:02:01.925]                     invisible(muffled)
[11:02:01.925]                   }
[11:02:01.925]                   muffleCondition(cond)
[11:02:01.925]                 })
[11:02:01.925]             }))
[11:02:01.925]             future::FutureResult(value = ...future.value$value, 
[11:02:01.925]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.925]                   ...future.rng), globalenv = if (FALSE) 
[11:02:01.925]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:01.925]                     ...future.globalenv.names))
[11:02:01.925]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:01.925]         }, condition = base::local({
[11:02:01.925]             c <- base::c
[11:02:01.925]             inherits <- base::inherits
[11:02:01.925]             invokeRestart <- base::invokeRestart
[11:02:01.925]             length <- base::length
[11:02:01.925]             list <- base::list
[11:02:01.925]             seq.int <- base::seq.int
[11:02:01.925]             signalCondition <- base::signalCondition
[11:02:01.925]             sys.calls <- base::sys.calls
[11:02:01.925]             `[[` <- base::`[[`
[11:02:01.925]             `+` <- base::`+`
[11:02:01.925]             `<<-` <- base::`<<-`
[11:02:01.925]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:01.925]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:01.925]                   3L)]
[11:02:01.925]             }
[11:02:01.925]             function(cond) {
[11:02:01.925]                 is_error <- inherits(cond, "error")
[11:02:01.925]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:01.925]                   NULL)
[11:02:01.925]                 if (is_error) {
[11:02:01.925]                   sessionInformation <- function() {
[11:02:01.925]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:01.925]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:01.925]                       search = base::search(), system = base::Sys.info())
[11:02:01.925]                   }
[11:02:01.925]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.925]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:01.925]                     cond$call), session = sessionInformation(), 
[11:02:01.925]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:01.925]                   signalCondition(cond)
[11:02:01.925]                 }
[11:02:01.925]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:01.925]                 "immediateCondition"))) {
[11:02:01.925]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:01.925]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.925]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:01.925]                   if (TRUE && !signal) {
[11:02:01.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.925]                     {
[11:02:01.925]                       inherits <- base::inherits
[11:02:01.925]                       invokeRestart <- base::invokeRestart
[11:02:01.925]                       is.null <- base::is.null
[11:02:01.925]                       muffled <- FALSE
[11:02:01.925]                       if (inherits(cond, "message")) {
[11:02:01.925]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.925]                         if (muffled) 
[11:02:01.925]                           invokeRestart("muffleMessage")
[11:02:01.925]                       }
[11:02:01.925]                       else if (inherits(cond, "warning")) {
[11:02:01.925]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.925]                         if (muffled) 
[11:02:01.925]                           invokeRestart("muffleWarning")
[11:02:01.925]                       }
[11:02:01.925]                       else if (inherits(cond, "condition")) {
[11:02:01.925]                         if (!is.null(pattern)) {
[11:02:01.925]                           computeRestarts <- base::computeRestarts
[11:02:01.925]                           grepl <- base::grepl
[11:02:01.925]                           restarts <- computeRestarts(cond)
[11:02:01.925]                           for (restart in restarts) {
[11:02:01.925]                             name <- restart$name
[11:02:01.925]                             if (is.null(name)) 
[11:02:01.925]                               next
[11:02:01.925]                             if (!grepl(pattern, name)) 
[11:02:01.925]                               next
[11:02:01.925]                             invokeRestart(restart)
[11:02:01.925]                             muffled <- TRUE
[11:02:01.925]                             break
[11:02:01.925]                           }
[11:02:01.925]                         }
[11:02:01.925]                       }
[11:02:01.925]                       invisible(muffled)
[11:02:01.925]                     }
[11:02:01.925]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.925]                   }
[11:02:01.925]                 }
[11:02:01.925]                 else {
[11:02:01.925]                   if (TRUE) {
[11:02:01.925]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.925]                     {
[11:02:01.925]                       inherits <- base::inherits
[11:02:01.925]                       invokeRestart <- base::invokeRestart
[11:02:01.925]                       is.null <- base::is.null
[11:02:01.925]                       muffled <- FALSE
[11:02:01.925]                       if (inherits(cond, "message")) {
[11:02:01.925]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.925]                         if (muffled) 
[11:02:01.925]                           invokeRestart("muffleMessage")
[11:02:01.925]                       }
[11:02:01.925]                       else if (inherits(cond, "warning")) {
[11:02:01.925]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.925]                         if (muffled) 
[11:02:01.925]                           invokeRestart("muffleWarning")
[11:02:01.925]                       }
[11:02:01.925]                       else if (inherits(cond, "condition")) {
[11:02:01.925]                         if (!is.null(pattern)) {
[11:02:01.925]                           computeRestarts <- base::computeRestarts
[11:02:01.925]                           grepl <- base::grepl
[11:02:01.925]                           restarts <- computeRestarts(cond)
[11:02:01.925]                           for (restart in restarts) {
[11:02:01.925]                             name <- restart$name
[11:02:01.925]                             if (is.null(name)) 
[11:02:01.925]                               next
[11:02:01.925]                             if (!grepl(pattern, name)) 
[11:02:01.925]                               next
[11:02:01.925]                             invokeRestart(restart)
[11:02:01.925]                             muffled <- TRUE
[11:02:01.925]                             break
[11:02:01.925]                           }
[11:02:01.925]                         }
[11:02:01.925]                       }
[11:02:01.925]                       invisible(muffled)
[11:02:01.925]                     }
[11:02:01.925]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.925]                   }
[11:02:01.925]                 }
[11:02:01.925]             }
[11:02:01.925]         }))
[11:02:01.925]     }, error = function(ex) {
[11:02:01.925]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:01.925]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.925]                 ...future.rng), started = ...future.startTime, 
[11:02:01.925]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:01.925]             version = "1.8"), class = "FutureResult")
[11:02:01.925]     }, finally = {
[11:02:01.925]         if (!identical(...future.workdir, getwd())) 
[11:02:01.925]             setwd(...future.workdir)
[11:02:01.925]         {
[11:02:01.925]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:01.925]                 ...future.oldOptions$nwarnings <- NULL
[11:02:01.925]             }
[11:02:01.925]             base::options(...future.oldOptions)
[11:02:01.925]             if (.Platform$OS.type == "windows") {
[11:02:01.925]                 old_names <- names(...future.oldEnvVars)
[11:02:01.925]                 envs <- base::Sys.getenv()
[11:02:01.925]                 names <- names(envs)
[11:02:01.925]                 common <- intersect(names, old_names)
[11:02:01.925]                 added <- setdiff(names, old_names)
[11:02:01.925]                 removed <- setdiff(old_names, names)
[11:02:01.925]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:01.925]                   envs[common]]
[11:02:01.925]                 NAMES <- toupper(changed)
[11:02:01.925]                 args <- list()
[11:02:01.925]                 for (kk in seq_along(NAMES)) {
[11:02:01.925]                   name <- changed[[kk]]
[11:02:01.925]                   NAME <- NAMES[[kk]]
[11:02:01.925]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.925]                     next
[11:02:01.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.925]                 }
[11:02:01.925]                 NAMES <- toupper(added)
[11:02:01.925]                 for (kk in seq_along(NAMES)) {
[11:02:01.925]                   name <- added[[kk]]
[11:02:01.925]                   NAME <- NAMES[[kk]]
[11:02:01.925]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.925]                     next
[11:02:01.925]                   args[[name]] <- ""
[11:02:01.925]                 }
[11:02:01.925]                 NAMES <- toupper(removed)
[11:02:01.925]                 for (kk in seq_along(NAMES)) {
[11:02:01.925]                   name <- removed[[kk]]
[11:02:01.925]                   NAME <- NAMES[[kk]]
[11:02:01.925]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.925]                     next
[11:02:01.925]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.925]                 }
[11:02:01.925]                 if (length(args) > 0) 
[11:02:01.925]                   base::do.call(base::Sys.setenv, args = args)
[11:02:01.925]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:01.925]             }
[11:02:01.925]             else {
[11:02:01.925]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:01.925]             }
[11:02:01.925]             {
[11:02:01.925]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:01.925]                   0L) {
[11:02:01.925]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:01.925]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:01.925]                   base::options(opts)
[11:02:01.925]                 }
[11:02:01.925]                 {
[11:02:01.925]                   {
[11:02:01.925]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:01.925]                     NULL
[11:02:01.925]                   }
[11:02:01.925]                   options(future.plan = NULL)
[11:02:01.925]                   if (is.na(NA_character_)) 
[11:02:01.925]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.925]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:01.925]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:01.925]                     .init = FALSE)
[11:02:01.925]                 }
[11:02:01.925]             }
[11:02:01.925]         }
[11:02:01.925]     })
[11:02:01.925]     if (TRUE) {
[11:02:01.925]         base::sink(type = "output", split = FALSE)
[11:02:01.925]         if (TRUE) {
[11:02:01.925]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:01.925]         }
[11:02:01.925]         else {
[11:02:01.925]             ...future.result["stdout"] <- base::list(NULL)
[11:02:01.925]         }
[11:02:01.925]         base::close(...future.stdout)
[11:02:01.925]         ...future.stdout <- NULL
[11:02:01.925]     }
[11:02:01.925]     ...future.result$conditions <- ...future.conditions
[11:02:01.925]     ...future.result$finished <- base::Sys.time()
[11:02:01.925]     ...future.result
[11:02:01.925] }
[11:02:01.928] MultisessionFuture started
[11:02:01.928] - Launch lazy future ... done
[11:02:01.929] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[11:02:01.929] result() for ClusterFuture ...
[11:02:01.929] receiveMessageFromWorker() for ClusterFuture ...
[11:02:01.929] - Validating connection of MultisessionFuture
[11:02:01.970] - received message: FutureResult
[11:02:01.970] - Received FutureResult
[11:02:01.970] - Erased future from FutureRegistry
[11:02:01.971] result() for ClusterFuture ...
[11:02:01.971] - result already collected: FutureResult
[11:02:01.971] result() for ClusterFuture ... done
[11:02:01.971] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:01.971] result() for ClusterFuture ... done
[11:02:01.971] result() for ClusterFuture ...
[11:02:01.971] - result already collected: FutureResult
[11:02:01.971] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: e9330153-8924-c53b-fe09-e4851db9f6c9
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[11:02:01.971] getGlobalsAndPackages() ...
[11:02:01.971] Searching for globals...
[11:02:01.972] - globals found: [2] ‘{’, ‘:::’
[11:02:01.972] Searching for globals ... DONE
[11:02:01.973] Resolving globals: FALSE
[11:02:01.973] 
[11:02:01.973] 
[11:02:01.973] getGlobalsAndPackages() ... DONE
[11:02:01.973] run() for ‘Future’ ...
[11:02:01.973] - state: ‘created’
[11:02:01.974] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:01.987] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:01.987] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:01.987]   - Field: ‘node’
[11:02:01.988]   - Field: ‘label’
[11:02:01.988]   - Field: ‘local’
[11:02:01.988]   - Field: ‘owner’
[11:02:01.988]   - Field: ‘envir’
[11:02:01.988]   - Field: ‘workers’
[11:02:01.988]   - Field: ‘packages’
[11:02:01.988]   - Field: ‘gc’
[11:02:01.988]   - Field: ‘conditions’
[11:02:01.988]   - Field: ‘persistent’
[11:02:01.988]   - Field: ‘expr’
[11:02:01.988]   - Field: ‘uuid’
[11:02:01.988]   - Field: ‘seed’
[11:02:01.989]   - Field: ‘version’
[11:02:01.989]   - Field: ‘result’
[11:02:01.989]   - Field: ‘asynchronous’
[11:02:01.989]   - Field: ‘calls’
[11:02:01.989]   - Field: ‘globals’
[11:02:01.989]   - Field: ‘stdout’
[11:02:01.989]   - Field: ‘earlySignal’
[11:02:01.989]   - Field: ‘lazy’
[11:02:01.989]   - Field: ‘state’
[11:02:01.989] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:01.989] - Launch lazy future ...
[11:02:01.990] Packages needed by the future expression (n = 0): <none>
[11:02:01.990] Packages needed by future strategies (n = 0): <none>
[11:02:01.990] {
[11:02:01.990]     {
[11:02:01.990]         {
[11:02:01.990]             ...future.startTime <- base::Sys.time()
[11:02:01.990]             {
[11:02:01.990]                 {
[11:02:01.990]                   {
[11:02:01.990]                     {
[11:02:01.990]                       base::local({
[11:02:01.990]                         has_future <- base::requireNamespace("future", 
[11:02:01.990]                           quietly = TRUE)
[11:02:01.990]                         if (has_future) {
[11:02:01.990]                           ns <- base::getNamespace("future")
[11:02:01.990]                           version <- ns[[".package"]][["version"]]
[11:02:01.990]                           if (is.null(version)) 
[11:02:01.990]                             version <- utils::packageVersion("future")
[11:02:01.990]                         }
[11:02:01.990]                         else {
[11:02:01.990]                           version <- NULL
[11:02:01.990]                         }
[11:02:01.990]                         if (!has_future || version < "1.8.0") {
[11:02:01.990]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:01.990]                             "", base::R.version$version.string), 
[11:02:01.990]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:01.990]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:01.990]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:01.990]                               "release", "version")], collapse = " "), 
[11:02:01.990]                             hostname = base::Sys.info()[["nodename"]])
[11:02:01.990]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:01.990]                             info)
[11:02:01.990]                           info <- base::paste(info, collapse = "; ")
[11:02:01.990]                           if (!has_future) {
[11:02:01.990]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:01.990]                               info)
[11:02:01.990]                           }
[11:02:01.990]                           else {
[11:02:01.990]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:01.990]                               info, version)
[11:02:01.990]                           }
[11:02:01.990]                           base::stop(msg)
[11:02:01.990]                         }
[11:02:01.990]                       })
[11:02:01.990]                     }
[11:02:01.990]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:01.990]                     base::options(mc.cores = 1L)
[11:02:01.990]                   }
[11:02:01.990]                   ...future.strategy.old <- future::plan("list")
[11:02:01.990]                   options(future.plan = NULL)
[11:02:01.990]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.990]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:01.990]                 }
[11:02:01.990]                 ...future.workdir <- getwd()
[11:02:01.990]             }
[11:02:01.990]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:01.990]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:01.990]         }
[11:02:01.990]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:01.990]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:01.990]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:01.990]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:01.990]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:01.990]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:01.990]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:01.990]             base::names(...future.oldOptions))
[11:02:01.990]     }
[11:02:01.990]     if (FALSE) {
[11:02:01.990]     }
[11:02:01.990]     else {
[11:02:01.990]         if (TRUE) {
[11:02:01.990]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:01.990]                 open = "w")
[11:02:01.990]         }
[11:02:01.990]         else {
[11:02:01.990]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:01.990]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:01.990]         }
[11:02:01.990]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:01.990]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:01.990]             base::sink(type = "output", split = FALSE)
[11:02:01.990]             base::close(...future.stdout)
[11:02:01.990]         }, add = TRUE)
[11:02:01.990]     }
[11:02:01.990]     ...future.frame <- base::sys.nframe()
[11:02:01.990]     ...future.conditions <- base::list()
[11:02:01.990]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:01.990]     if (FALSE) {
[11:02:01.990]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:01.990]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:01.990]     }
[11:02:01.990]     ...future.result <- base::tryCatch({
[11:02:01.990]         base::withCallingHandlers({
[11:02:01.990]             ...future.value <- base::withVisible(base::local({
[11:02:01.990]                 ...future.makeSendCondition <- base::local({
[11:02:01.990]                   sendCondition <- NULL
[11:02:01.990]                   function(frame = 1L) {
[11:02:01.990]                     if (is.function(sendCondition)) 
[11:02:01.990]                       return(sendCondition)
[11:02:01.990]                     ns <- getNamespace("parallel")
[11:02:01.990]                     if (exists("sendData", mode = "function", 
[11:02:01.990]                       envir = ns)) {
[11:02:01.990]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:01.990]                         envir = ns)
[11:02:01.990]                       envir <- sys.frame(frame)
[11:02:01.990]                       master <- NULL
[11:02:01.990]                       while (!identical(envir, .GlobalEnv) && 
[11:02:01.990]                         !identical(envir, emptyenv())) {
[11:02:01.990]                         if (exists("master", mode = "list", envir = envir, 
[11:02:01.990]                           inherits = FALSE)) {
[11:02:01.990]                           master <- get("master", mode = "list", 
[11:02:01.990]                             envir = envir, inherits = FALSE)
[11:02:01.990]                           if (inherits(master, c("SOCKnode", 
[11:02:01.990]                             "SOCK0node"))) {
[11:02:01.990]                             sendCondition <<- function(cond) {
[11:02:01.990]                               data <- list(type = "VALUE", value = cond, 
[11:02:01.990]                                 success = TRUE)
[11:02:01.990]                               parallel_sendData(master, data)
[11:02:01.990]                             }
[11:02:01.990]                             return(sendCondition)
[11:02:01.990]                           }
[11:02:01.990]                         }
[11:02:01.990]                         frame <- frame + 1L
[11:02:01.990]                         envir <- sys.frame(frame)
[11:02:01.990]                       }
[11:02:01.990]                     }
[11:02:01.990]                     sendCondition <<- function(cond) NULL
[11:02:01.990]                   }
[11:02:01.990]                 })
[11:02:01.990]                 withCallingHandlers({
[11:02:01.990]                   {
[11:02:01.990]                     future:::session_uuid(attributes = TRUE)
[11:02:01.990]                   }
[11:02:01.990]                 }, immediateCondition = function(cond) {
[11:02:01.990]                   sendCondition <- ...future.makeSendCondition()
[11:02:01.990]                   sendCondition(cond)
[11:02:01.990]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.990]                   {
[11:02:01.990]                     inherits <- base::inherits
[11:02:01.990]                     invokeRestart <- base::invokeRestart
[11:02:01.990]                     is.null <- base::is.null
[11:02:01.990]                     muffled <- FALSE
[11:02:01.990]                     if (inherits(cond, "message")) {
[11:02:01.990]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:01.990]                       if (muffled) 
[11:02:01.990]                         invokeRestart("muffleMessage")
[11:02:01.990]                     }
[11:02:01.990]                     else if (inherits(cond, "warning")) {
[11:02:01.990]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:01.990]                       if (muffled) 
[11:02:01.990]                         invokeRestart("muffleWarning")
[11:02:01.990]                     }
[11:02:01.990]                     else if (inherits(cond, "condition")) {
[11:02:01.990]                       if (!is.null(pattern)) {
[11:02:01.990]                         computeRestarts <- base::computeRestarts
[11:02:01.990]                         grepl <- base::grepl
[11:02:01.990]                         restarts <- computeRestarts(cond)
[11:02:01.990]                         for (restart in restarts) {
[11:02:01.990]                           name <- restart$name
[11:02:01.990]                           if (is.null(name)) 
[11:02:01.990]                             next
[11:02:01.990]                           if (!grepl(pattern, name)) 
[11:02:01.990]                             next
[11:02:01.990]                           invokeRestart(restart)
[11:02:01.990]                           muffled <- TRUE
[11:02:01.990]                           break
[11:02:01.990]                         }
[11:02:01.990]                       }
[11:02:01.990]                     }
[11:02:01.990]                     invisible(muffled)
[11:02:01.990]                   }
[11:02:01.990]                   muffleCondition(cond)
[11:02:01.990]                 })
[11:02:01.990]             }))
[11:02:01.990]             future::FutureResult(value = ...future.value$value, 
[11:02:01.990]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.990]                   ...future.rng), globalenv = if (FALSE) 
[11:02:01.990]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:01.990]                     ...future.globalenv.names))
[11:02:01.990]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:01.990]         }, condition = base::local({
[11:02:01.990]             c <- base::c
[11:02:01.990]             inherits <- base::inherits
[11:02:01.990]             invokeRestart <- base::invokeRestart
[11:02:01.990]             length <- base::length
[11:02:01.990]             list <- base::list
[11:02:01.990]             seq.int <- base::seq.int
[11:02:01.990]             signalCondition <- base::signalCondition
[11:02:01.990]             sys.calls <- base::sys.calls
[11:02:01.990]             `[[` <- base::`[[`
[11:02:01.990]             `+` <- base::`+`
[11:02:01.990]             `<<-` <- base::`<<-`
[11:02:01.990]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:01.990]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:01.990]                   3L)]
[11:02:01.990]             }
[11:02:01.990]             function(cond) {
[11:02:01.990]                 is_error <- inherits(cond, "error")
[11:02:01.990]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:01.990]                   NULL)
[11:02:01.990]                 if (is_error) {
[11:02:01.990]                   sessionInformation <- function() {
[11:02:01.990]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:01.990]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:01.990]                       search = base::search(), system = base::Sys.info())
[11:02:01.990]                   }
[11:02:01.990]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.990]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:01.990]                     cond$call), session = sessionInformation(), 
[11:02:01.990]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:01.990]                   signalCondition(cond)
[11:02:01.990]                 }
[11:02:01.990]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:01.990]                 "immediateCondition"))) {
[11:02:01.990]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:01.990]                   ...future.conditions[[length(...future.conditions) + 
[11:02:01.990]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:01.990]                   if (TRUE && !signal) {
[11:02:01.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.990]                     {
[11:02:01.990]                       inherits <- base::inherits
[11:02:01.990]                       invokeRestart <- base::invokeRestart
[11:02:01.990]                       is.null <- base::is.null
[11:02:01.990]                       muffled <- FALSE
[11:02:01.990]                       if (inherits(cond, "message")) {
[11:02:01.990]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.990]                         if (muffled) 
[11:02:01.990]                           invokeRestart("muffleMessage")
[11:02:01.990]                       }
[11:02:01.990]                       else if (inherits(cond, "warning")) {
[11:02:01.990]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.990]                         if (muffled) 
[11:02:01.990]                           invokeRestart("muffleWarning")
[11:02:01.990]                       }
[11:02:01.990]                       else if (inherits(cond, "condition")) {
[11:02:01.990]                         if (!is.null(pattern)) {
[11:02:01.990]                           computeRestarts <- base::computeRestarts
[11:02:01.990]                           grepl <- base::grepl
[11:02:01.990]                           restarts <- computeRestarts(cond)
[11:02:01.990]                           for (restart in restarts) {
[11:02:01.990]                             name <- restart$name
[11:02:01.990]                             if (is.null(name)) 
[11:02:01.990]                               next
[11:02:01.990]                             if (!grepl(pattern, name)) 
[11:02:01.990]                               next
[11:02:01.990]                             invokeRestart(restart)
[11:02:01.990]                             muffled <- TRUE
[11:02:01.990]                             break
[11:02:01.990]                           }
[11:02:01.990]                         }
[11:02:01.990]                       }
[11:02:01.990]                       invisible(muffled)
[11:02:01.990]                     }
[11:02:01.990]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.990]                   }
[11:02:01.990]                 }
[11:02:01.990]                 else {
[11:02:01.990]                   if (TRUE) {
[11:02:01.990]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:01.990]                     {
[11:02:01.990]                       inherits <- base::inherits
[11:02:01.990]                       invokeRestart <- base::invokeRestart
[11:02:01.990]                       is.null <- base::is.null
[11:02:01.990]                       muffled <- FALSE
[11:02:01.990]                       if (inherits(cond, "message")) {
[11:02:01.990]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:01.990]                         if (muffled) 
[11:02:01.990]                           invokeRestart("muffleMessage")
[11:02:01.990]                       }
[11:02:01.990]                       else if (inherits(cond, "warning")) {
[11:02:01.990]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:01.990]                         if (muffled) 
[11:02:01.990]                           invokeRestart("muffleWarning")
[11:02:01.990]                       }
[11:02:01.990]                       else if (inherits(cond, "condition")) {
[11:02:01.990]                         if (!is.null(pattern)) {
[11:02:01.990]                           computeRestarts <- base::computeRestarts
[11:02:01.990]                           grepl <- base::grepl
[11:02:01.990]                           restarts <- computeRestarts(cond)
[11:02:01.990]                           for (restart in restarts) {
[11:02:01.990]                             name <- restart$name
[11:02:01.990]                             if (is.null(name)) 
[11:02:01.990]                               next
[11:02:01.990]                             if (!grepl(pattern, name)) 
[11:02:01.990]                               next
[11:02:01.990]                             invokeRestart(restart)
[11:02:01.990]                             muffled <- TRUE
[11:02:01.990]                             break
[11:02:01.990]                           }
[11:02:01.990]                         }
[11:02:01.990]                       }
[11:02:01.990]                       invisible(muffled)
[11:02:01.990]                     }
[11:02:01.990]                     muffleCondition(cond, pattern = "^muffle")
[11:02:01.990]                   }
[11:02:01.990]                 }
[11:02:01.990]             }
[11:02:01.990]         }))
[11:02:01.990]     }, error = function(ex) {
[11:02:01.990]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:01.990]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:01.990]                 ...future.rng), started = ...future.startTime, 
[11:02:01.990]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:01.990]             version = "1.8"), class = "FutureResult")
[11:02:01.990]     }, finally = {
[11:02:01.990]         if (!identical(...future.workdir, getwd())) 
[11:02:01.990]             setwd(...future.workdir)
[11:02:01.990]         {
[11:02:01.990]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:01.990]                 ...future.oldOptions$nwarnings <- NULL
[11:02:01.990]             }
[11:02:01.990]             base::options(...future.oldOptions)
[11:02:01.990]             if (.Platform$OS.type == "windows") {
[11:02:01.990]                 old_names <- names(...future.oldEnvVars)
[11:02:01.990]                 envs <- base::Sys.getenv()
[11:02:01.990]                 names <- names(envs)
[11:02:01.990]                 common <- intersect(names, old_names)
[11:02:01.990]                 added <- setdiff(names, old_names)
[11:02:01.990]                 removed <- setdiff(old_names, names)
[11:02:01.990]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:01.990]                   envs[common]]
[11:02:01.990]                 NAMES <- toupper(changed)
[11:02:01.990]                 args <- list()
[11:02:01.990]                 for (kk in seq_along(NAMES)) {
[11:02:01.990]                   name <- changed[[kk]]
[11:02:01.990]                   NAME <- NAMES[[kk]]
[11:02:01.990]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.990]                     next
[11:02:01.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.990]                 }
[11:02:01.990]                 NAMES <- toupper(added)
[11:02:01.990]                 for (kk in seq_along(NAMES)) {
[11:02:01.990]                   name <- added[[kk]]
[11:02:01.990]                   NAME <- NAMES[[kk]]
[11:02:01.990]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.990]                     next
[11:02:01.990]                   args[[name]] <- ""
[11:02:01.990]                 }
[11:02:01.990]                 NAMES <- toupper(removed)
[11:02:01.990]                 for (kk in seq_along(NAMES)) {
[11:02:01.990]                   name <- removed[[kk]]
[11:02:01.990]                   NAME <- NAMES[[kk]]
[11:02:01.990]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:01.990]                     next
[11:02:01.990]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:01.990]                 }
[11:02:01.990]                 if (length(args) > 0) 
[11:02:01.990]                   base::do.call(base::Sys.setenv, args = args)
[11:02:01.990]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:01.990]             }
[11:02:01.990]             else {
[11:02:01.990]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:01.990]             }
[11:02:01.990]             {
[11:02:01.990]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:01.990]                   0L) {
[11:02:01.990]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:01.990]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:01.990]                   base::options(opts)
[11:02:01.990]                 }
[11:02:01.990]                 {
[11:02:01.990]                   {
[11:02:01.990]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:01.990]                     NULL
[11:02:01.990]                   }
[11:02:01.990]                   options(future.plan = NULL)
[11:02:01.990]                   if (is.na(NA_character_)) 
[11:02:01.990]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:01.990]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:01.990]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:01.990]                     .init = FALSE)
[11:02:01.990]                 }
[11:02:01.990]             }
[11:02:01.990]         }
[11:02:01.990]     })
[11:02:01.990]     if (TRUE) {
[11:02:01.990]         base::sink(type = "output", split = FALSE)
[11:02:01.990]         if (TRUE) {
[11:02:01.990]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:01.990]         }
[11:02:01.990]         else {
[11:02:01.990]             ...future.result["stdout"] <- base::list(NULL)
[11:02:01.990]         }
[11:02:01.990]         base::close(...future.stdout)
[11:02:01.990]         ...future.stdout <- NULL
[11:02:01.990]     }
[11:02:01.990]     ...future.result$conditions <- ...future.conditions
[11:02:01.990]     ...future.result$finished <- base::Sys.time()
[11:02:01.990]     ...future.result
[11:02:01.990] }
[11:02:01.994] MultisessionFuture started
[11:02:01.994] - Launch lazy future ... done
[11:02:01.994] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[11:02:01.994] result() for ClusterFuture ...
[11:02:01.994] receiveMessageFromWorker() for ClusterFuture ...
[11:02:01.995] - Validating connection of MultisessionFuture
[11:02:02.035] - received message: FutureResult
[11:02:02.035] - Received FutureResult
[11:02:02.035] - Erased future from FutureRegistry
[11:02:02.036] result() for ClusterFuture ...
[11:02:02.036] - result already collected: FutureResult
[11:02:02.036] result() for ClusterFuture ... done
[11:02:02.036] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.036] result() for ClusterFuture ... done
[11:02:02.036] result() for ClusterFuture ...
[11:02:02.036] - result already collected: FutureResult
[11:02:02.036] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: e9330153-8924-c53b-fe09-e4851db9f6c9
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[11:02:02.037] getGlobalsAndPackages() ...
[11:02:02.037] Searching for globals...
[11:02:02.038] - globals found: [3] ‘{’, ‘$’, ‘f1’
[11:02:02.038] Searching for globals ... DONE
[11:02:02.038] Resolving globals: FALSE
[11:02:02.050] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[11:02:02.050] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[11:02:02.051] - globals: [1] ‘f1’
[11:02:02.051] 
[11:02:02.051] getGlobalsAndPackages() ... DONE
[11:02:02.051] run() for ‘Future’ ...
[11:02:02.051] - state: ‘created’
[11:02:02.051] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:02.064] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:02.065] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:02.065]   - Field: ‘node’
[11:02:02.065]   - Field: ‘label’
[11:02:02.065]   - Field: ‘local’
[11:02:02.065]   - Field: ‘owner’
[11:02:02.065]   - Field: ‘envir’
[11:02:02.065]   - Field: ‘workers’
[11:02:02.065]   - Field: ‘packages’
[11:02:02.065]   - Field: ‘gc’
[11:02:02.065]   - Field: ‘conditions’
[11:02:02.066]   - Field: ‘persistent’
[11:02:02.066]   - Field: ‘expr’
[11:02:02.066]   - Field: ‘uuid’
[11:02:02.066]   - Field: ‘seed’
[11:02:02.066]   - Field: ‘version’
[11:02:02.066]   - Field: ‘result’
[11:02:02.066]   - Field: ‘asynchronous’
[11:02:02.066]   - Field: ‘calls’
[11:02:02.066]   - Field: ‘globals’
[11:02:02.066]   - Field: ‘stdout’
[11:02:02.067]   - Field: ‘earlySignal’
[11:02:02.067]   - Field: ‘lazy’
[11:02:02.067]   - Field: ‘state’
[11:02:02.067] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:02.067] - Launch lazy future ...
[11:02:02.067] Packages needed by the future expression (n = 0): <none>
[11:02:02.067] Packages needed by future strategies (n = 0): <none>
[11:02:02.068] {
[11:02:02.068]     {
[11:02:02.068]         {
[11:02:02.068]             ...future.startTime <- base::Sys.time()
[11:02:02.068]             {
[11:02:02.068]                 {
[11:02:02.068]                   {
[11:02:02.068]                     {
[11:02:02.068]                       base::local({
[11:02:02.068]                         has_future <- base::requireNamespace("future", 
[11:02:02.068]                           quietly = TRUE)
[11:02:02.068]                         if (has_future) {
[11:02:02.068]                           ns <- base::getNamespace("future")
[11:02:02.068]                           version <- ns[[".package"]][["version"]]
[11:02:02.068]                           if (is.null(version)) 
[11:02:02.068]                             version <- utils::packageVersion("future")
[11:02:02.068]                         }
[11:02:02.068]                         else {
[11:02:02.068]                           version <- NULL
[11:02:02.068]                         }
[11:02:02.068]                         if (!has_future || version < "1.8.0") {
[11:02:02.068]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:02.068]                             "", base::R.version$version.string), 
[11:02:02.068]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:02.068]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:02.068]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:02.068]                               "release", "version")], collapse = " "), 
[11:02:02.068]                             hostname = base::Sys.info()[["nodename"]])
[11:02:02.068]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:02.068]                             info)
[11:02:02.068]                           info <- base::paste(info, collapse = "; ")
[11:02:02.068]                           if (!has_future) {
[11:02:02.068]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:02.068]                               info)
[11:02:02.068]                           }
[11:02:02.068]                           else {
[11:02:02.068]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:02.068]                               info, version)
[11:02:02.068]                           }
[11:02:02.068]                           base::stop(msg)
[11:02:02.068]                         }
[11:02:02.068]                       })
[11:02:02.068]                     }
[11:02:02.068]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:02.068]                     base::options(mc.cores = 1L)
[11:02:02.068]                   }
[11:02:02.068]                   ...future.strategy.old <- future::plan("list")
[11:02:02.068]                   options(future.plan = NULL)
[11:02:02.068]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.068]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:02.068]                 }
[11:02:02.068]                 ...future.workdir <- getwd()
[11:02:02.068]             }
[11:02:02.068]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:02.068]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:02.068]         }
[11:02:02.068]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:02.068]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:02.068]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:02.068]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:02.068]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:02.068]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:02.068]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:02.068]             base::names(...future.oldOptions))
[11:02:02.068]     }
[11:02:02.068]     if (FALSE) {
[11:02:02.068]     }
[11:02:02.068]     else {
[11:02:02.068]         if (TRUE) {
[11:02:02.068]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:02.068]                 open = "w")
[11:02:02.068]         }
[11:02:02.068]         else {
[11:02:02.068]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:02.068]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:02.068]         }
[11:02:02.068]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:02.068]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:02.068]             base::sink(type = "output", split = FALSE)
[11:02:02.068]             base::close(...future.stdout)
[11:02:02.068]         }, add = TRUE)
[11:02:02.068]     }
[11:02:02.068]     ...future.frame <- base::sys.nframe()
[11:02:02.068]     ...future.conditions <- base::list()
[11:02:02.068]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:02.068]     if (FALSE) {
[11:02:02.068]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:02.068]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:02.068]     }
[11:02:02.068]     ...future.result <- base::tryCatch({
[11:02:02.068]         base::withCallingHandlers({
[11:02:02.068]             ...future.value <- base::withVisible(base::local({
[11:02:02.068]                 ...future.makeSendCondition <- base::local({
[11:02:02.068]                   sendCondition <- NULL
[11:02:02.068]                   function(frame = 1L) {
[11:02:02.068]                     if (is.function(sendCondition)) 
[11:02:02.068]                       return(sendCondition)
[11:02:02.068]                     ns <- getNamespace("parallel")
[11:02:02.068]                     if (exists("sendData", mode = "function", 
[11:02:02.068]                       envir = ns)) {
[11:02:02.068]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:02.068]                         envir = ns)
[11:02:02.068]                       envir <- sys.frame(frame)
[11:02:02.068]                       master <- NULL
[11:02:02.068]                       while (!identical(envir, .GlobalEnv) && 
[11:02:02.068]                         !identical(envir, emptyenv())) {
[11:02:02.068]                         if (exists("master", mode = "list", envir = envir, 
[11:02:02.068]                           inherits = FALSE)) {
[11:02:02.068]                           master <- get("master", mode = "list", 
[11:02:02.068]                             envir = envir, inherits = FALSE)
[11:02:02.068]                           if (inherits(master, c("SOCKnode", 
[11:02:02.068]                             "SOCK0node"))) {
[11:02:02.068]                             sendCondition <<- function(cond) {
[11:02:02.068]                               data <- list(type = "VALUE", value = cond, 
[11:02:02.068]                                 success = TRUE)
[11:02:02.068]                               parallel_sendData(master, data)
[11:02:02.068]                             }
[11:02:02.068]                             return(sendCondition)
[11:02:02.068]                           }
[11:02:02.068]                         }
[11:02:02.068]                         frame <- frame + 1L
[11:02:02.068]                         envir <- sys.frame(frame)
[11:02:02.068]                       }
[11:02:02.068]                     }
[11:02:02.068]                     sendCondition <<- function(cond) NULL
[11:02:02.068]                   }
[11:02:02.068]                 })
[11:02:02.068]                 withCallingHandlers({
[11:02:02.068]                   {
[11:02:02.068]                     f1$owner
[11:02:02.068]                   }
[11:02:02.068]                 }, immediateCondition = function(cond) {
[11:02:02.068]                   sendCondition <- ...future.makeSendCondition()
[11:02:02.068]                   sendCondition(cond)
[11:02:02.068]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.068]                   {
[11:02:02.068]                     inherits <- base::inherits
[11:02:02.068]                     invokeRestart <- base::invokeRestart
[11:02:02.068]                     is.null <- base::is.null
[11:02:02.068]                     muffled <- FALSE
[11:02:02.068]                     if (inherits(cond, "message")) {
[11:02:02.068]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:02.068]                       if (muffled) 
[11:02:02.068]                         invokeRestart("muffleMessage")
[11:02:02.068]                     }
[11:02:02.068]                     else if (inherits(cond, "warning")) {
[11:02:02.068]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:02.068]                       if (muffled) 
[11:02:02.068]                         invokeRestart("muffleWarning")
[11:02:02.068]                     }
[11:02:02.068]                     else if (inherits(cond, "condition")) {
[11:02:02.068]                       if (!is.null(pattern)) {
[11:02:02.068]                         computeRestarts <- base::computeRestarts
[11:02:02.068]                         grepl <- base::grepl
[11:02:02.068]                         restarts <- computeRestarts(cond)
[11:02:02.068]                         for (restart in restarts) {
[11:02:02.068]                           name <- restart$name
[11:02:02.068]                           if (is.null(name)) 
[11:02:02.068]                             next
[11:02:02.068]                           if (!grepl(pattern, name)) 
[11:02:02.068]                             next
[11:02:02.068]                           invokeRestart(restart)
[11:02:02.068]                           muffled <- TRUE
[11:02:02.068]                           break
[11:02:02.068]                         }
[11:02:02.068]                       }
[11:02:02.068]                     }
[11:02:02.068]                     invisible(muffled)
[11:02:02.068]                   }
[11:02:02.068]                   muffleCondition(cond)
[11:02:02.068]                 })
[11:02:02.068]             }))
[11:02:02.068]             future::FutureResult(value = ...future.value$value, 
[11:02:02.068]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.068]                   ...future.rng), globalenv = if (FALSE) 
[11:02:02.068]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:02.068]                     ...future.globalenv.names))
[11:02:02.068]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:02.068]         }, condition = base::local({
[11:02:02.068]             c <- base::c
[11:02:02.068]             inherits <- base::inherits
[11:02:02.068]             invokeRestart <- base::invokeRestart
[11:02:02.068]             length <- base::length
[11:02:02.068]             list <- base::list
[11:02:02.068]             seq.int <- base::seq.int
[11:02:02.068]             signalCondition <- base::signalCondition
[11:02:02.068]             sys.calls <- base::sys.calls
[11:02:02.068]             `[[` <- base::`[[`
[11:02:02.068]             `+` <- base::`+`
[11:02:02.068]             `<<-` <- base::`<<-`
[11:02:02.068]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:02.068]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:02.068]                   3L)]
[11:02:02.068]             }
[11:02:02.068]             function(cond) {
[11:02:02.068]                 is_error <- inherits(cond, "error")
[11:02:02.068]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:02.068]                   NULL)
[11:02:02.068]                 if (is_error) {
[11:02:02.068]                   sessionInformation <- function() {
[11:02:02.068]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:02.068]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:02.068]                       search = base::search(), system = base::Sys.info())
[11:02:02.068]                   }
[11:02:02.068]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.068]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:02.068]                     cond$call), session = sessionInformation(), 
[11:02:02.068]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:02.068]                   signalCondition(cond)
[11:02:02.068]                 }
[11:02:02.068]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:02.068]                 "immediateCondition"))) {
[11:02:02.068]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:02.068]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.068]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:02.068]                   if (TRUE && !signal) {
[11:02:02.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.068]                     {
[11:02:02.068]                       inherits <- base::inherits
[11:02:02.068]                       invokeRestart <- base::invokeRestart
[11:02:02.068]                       is.null <- base::is.null
[11:02:02.068]                       muffled <- FALSE
[11:02:02.068]                       if (inherits(cond, "message")) {
[11:02:02.068]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.068]                         if (muffled) 
[11:02:02.068]                           invokeRestart("muffleMessage")
[11:02:02.068]                       }
[11:02:02.068]                       else if (inherits(cond, "warning")) {
[11:02:02.068]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.068]                         if (muffled) 
[11:02:02.068]                           invokeRestart("muffleWarning")
[11:02:02.068]                       }
[11:02:02.068]                       else if (inherits(cond, "condition")) {
[11:02:02.068]                         if (!is.null(pattern)) {
[11:02:02.068]                           computeRestarts <- base::computeRestarts
[11:02:02.068]                           grepl <- base::grepl
[11:02:02.068]                           restarts <- computeRestarts(cond)
[11:02:02.068]                           for (restart in restarts) {
[11:02:02.068]                             name <- restart$name
[11:02:02.068]                             if (is.null(name)) 
[11:02:02.068]                               next
[11:02:02.068]                             if (!grepl(pattern, name)) 
[11:02:02.068]                               next
[11:02:02.068]                             invokeRestart(restart)
[11:02:02.068]                             muffled <- TRUE
[11:02:02.068]                             break
[11:02:02.068]                           }
[11:02:02.068]                         }
[11:02:02.068]                       }
[11:02:02.068]                       invisible(muffled)
[11:02:02.068]                     }
[11:02:02.068]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.068]                   }
[11:02:02.068]                 }
[11:02:02.068]                 else {
[11:02:02.068]                   if (TRUE) {
[11:02:02.068]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.068]                     {
[11:02:02.068]                       inherits <- base::inherits
[11:02:02.068]                       invokeRestart <- base::invokeRestart
[11:02:02.068]                       is.null <- base::is.null
[11:02:02.068]                       muffled <- FALSE
[11:02:02.068]                       if (inherits(cond, "message")) {
[11:02:02.068]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.068]                         if (muffled) 
[11:02:02.068]                           invokeRestart("muffleMessage")
[11:02:02.068]                       }
[11:02:02.068]                       else if (inherits(cond, "warning")) {
[11:02:02.068]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.068]                         if (muffled) 
[11:02:02.068]                           invokeRestart("muffleWarning")
[11:02:02.068]                       }
[11:02:02.068]                       else if (inherits(cond, "condition")) {
[11:02:02.068]                         if (!is.null(pattern)) {
[11:02:02.068]                           computeRestarts <- base::computeRestarts
[11:02:02.068]                           grepl <- base::grepl
[11:02:02.068]                           restarts <- computeRestarts(cond)
[11:02:02.068]                           for (restart in restarts) {
[11:02:02.068]                             name <- restart$name
[11:02:02.068]                             if (is.null(name)) 
[11:02:02.068]                               next
[11:02:02.068]                             if (!grepl(pattern, name)) 
[11:02:02.068]                               next
[11:02:02.068]                             invokeRestart(restart)
[11:02:02.068]                             muffled <- TRUE
[11:02:02.068]                             break
[11:02:02.068]                           }
[11:02:02.068]                         }
[11:02:02.068]                       }
[11:02:02.068]                       invisible(muffled)
[11:02:02.068]                     }
[11:02:02.068]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.068]                   }
[11:02:02.068]                 }
[11:02:02.068]             }
[11:02:02.068]         }))
[11:02:02.068]     }, error = function(ex) {
[11:02:02.068]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:02.068]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.068]                 ...future.rng), started = ...future.startTime, 
[11:02:02.068]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:02.068]             version = "1.8"), class = "FutureResult")
[11:02:02.068]     }, finally = {
[11:02:02.068]         if (!identical(...future.workdir, getwd())) 
[11:02:02.068]             setwd(...future.workdir)
[11:02:02.068]         {
[11:02:02.068]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:02.068]                 ...future.oldOptions$nwarnings <- NULL
[11:02:02.068]             }
[11:02:02.068]             base::options(...future.oldOptions)
[11:02:02.068]             if (.Platform$OS.type == "windows") {
[11:02:02.068]                 old_names <- names(...future.oldEnvVars)
[11:02:02.068]                 envs <- base::Sys.getenv()
[11:02:02.068]                 names <- names(envs)
[11:02:02.068]                 common <- intersect(names, old_names)
[11:02:02.068]                 added <- setdiff(names, old_names)
[11:02:02.068]                 removed <- setdiff(old_names, names)
[11:02:02.068]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:02.068]                   envs[common]]
[11:02:02.068]                 NAMES <- toupper(changed)
[11:02:02.068]                 args <- list()
[11:02:02.068]                 for (kk in seq_along(NAMES)) {
[11:02:02.068]                   name <- changed[[kk]]
[11:02:02.068]                   NAME <- NAMES[[kk]]
[11:02:02.068]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.068]                     next
[11:02:02.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.068]                 }
[11:02:02.068]                 NAMES <- toupper(added)
[11:02:02.068]                 for (kk in seq_along(NAMES)) {
[11:02:02.068]                   name <- added[[kk]]
[11:02:02.068]                   NAME <- NAMES[[kk]]
[11:02:02.068]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.068]                     next
[11:02:02.068]                   args[[name]] <- ""
[11:02:02.068]                 }
[11:02:02.068]                 NAMES <- toupper(removed)
[11:02:02.068]                 for (kk in seq_along(NAMES)) {
[11:02:02.068]                   name <- removed[[kk]]
[11:02:02.068]                   NAME <- NAMES[[kk]]
[11:02:02.068]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.068]                     next
[11:02:02.068]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.068]                 }
[11:02:02.068]                 if (length(args) > 0) 
[11:02:02.068]                   base::do.call(base::Sys.setenv, args = args)
[11:02:02.068]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:02.068]             }
[11:02:02.068]             else {
[11:02:02.068]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:02.068]             }
[11:02:02.068]             {
[11:02:02.068]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:02.068]                   0L) {
[11:02:02.068]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:02.068]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:02.068]                   base::options(opts)
[11:02:02.068]                 }
[11:02:02.068]                 {
[11:02:02.068]                   {
[11:02:02.068]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:02.068]                     NULL
[11:02:02.068]                   }
[11:02:02.068]                   options(future.plan = NULL)
[11:02:02.068]                   if (is.na(NA_character_)) 
[11:02:02.068]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.068]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:02.068]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:02.068]                     .init = FALSE)
[11:02:02.068]                 }
[11:02:02.068]             }
[11:02:02.068]         }
[11:02:02.068]     })
[11:02:02.068]     if (TRUE) {
[11:02:02.068]         base::sink(type = "output", split = FALSE)
[11:02:02.068]         if (TRUE) {
[11:02:02.068]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:02.068]         }
[11:02:02.068]         else {
[11:02:02.068]             ...future.result["stdout"] <- base::list(NULL)
[11:02:02.068]         }
[11:02:02.068]         base::close(...future.stdout)
[11:02:02.068]         ...future.stdout <- NULL
[11:02:02.068]     }
[11:02:02.068]     ...future.result$conditions <- ...future.conditions
[11:02:02.068]     ...future.result$finished <- base::Sys.time()
[11:02:02.068]     ...future.result
[11:02:02.068] }
[11:02:02.082] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[11:02:02.093] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[11:02:02.146] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[11:02:02.146] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[11:02:02.147] MultisessionFuture started
[11:02:02.147] - Launch lazy future ... done
[11:02:02.147] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[11:02:02.147] result() for ClusterFuture ...
[11:02:02.147] receiveMessageFromWorker() for ClusterFuture ...
[11:02:02.147] - Validating connection of MultisessionFuture
[11:02:02.189] - received message: FutureResult
[11:02:02.189] - Received FutureResult
[11:02:02.189] - Erased future from FutureRegistry
[11:02:02.189] result() for ClusterFuture ...
[11:02:02.189] - result already collected: FutureResult
[11:02:02.189] result() for ClusterFuture ... done
[11:02:02.190] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.190] result() for ClusterFuture ... done
[11:02:02.190] result() for ClusterFuture ...
[11:02:02.190] - result already collected: FutureResult
[11:02:02.190] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 90304434-bc0c-ac58-d336-535d23d0508f
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[11:02:02.190] getGlobalsAndPackages() ...
[11:02:02.190] Searching for globals...
[11:02:02.191] - globals found: [3] ‘{’, ‘$’, ‘f1’
[11:02:02.192] Searching for globals ... DONE
[11:02:02.192] Resolving globals: FALSE
[11:02:02.203] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[11:02:02.203] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[11:02:02.203] - globals: [1] ‘f1’
[11:02:02.204] 
[11:02:02.204] getGlobalsAndPackages() ... DONE
[11:02:02.204] run() for ‘Future’ ...
[11:02:02.204] - state: ‘created’
[11:02:02.204] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:02.219] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:02.219] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:02.220]   - Field: ‘node’
[11:02:02.220]   - Field: ‘label’
[11:02:02.220]   - Field: ‘local’
[11:02:02.220]   - Field: ‘owner’
[11:02:02.220]   - Field: ‘envir’
[11:02:02.220]   - Field: ‘workers’
[11:02:02.220]   - Field: ‘packages’
[11:02:02.220]   - Field: ‘gc’
[11:02:02.220]   - Field: ‘conditions’
[11:02:02.220]   - Field: ‘persistent’
[11:02:02.220]   - Field: ‘expr’
[11:02:02.220]   - Field: ‘uuid’
[11:02:02.221]   - Field: ‘seed’
[11:02:02.221]   - Field: ‘version’
[11:02:02.221]   - Field: ‘result’
[11:02:02.221]   - Field: ‘asynchronous’
[11:02:02.221]   - Field: ‘calls’
[11:02:02.221]   - Field: ‘globals’
[11:02:02.221]   - Field: ‘stdout’
[11:02:02.221]   - Field: ‘earlySignal’
[11:02:02.221]   - Field: ‘lazy’
[11:02:02.221]   - Field: ‘state’
[11:02:02.221] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:02.221] - Launch lazy future ...
[11:02:02.222] Packages needed by the future expression (n = 0): <none>
[11:02:02.222] Packages needed by future strategies (n = 0): <none>
[11:02:02.222] {
[11:02:02.222]     {
[11:02:02.222]         {
[11:02:02.222]             ...future.startTime <- base::Sys.time()
[11:02:02.222]             {
[11:02:02.222]                 {
[11:02:02.222]                   {
[11:02:02.222]                     {
[11:02:02.222]                       base::local({
[11:02:02.222]                         has_future <- base::requireNamespace("future", 
[11:02:02.222]                           quietly = TRUE)
[11:02:02.222]                         if (has_future) {
[11:02:02.222]                           ns <- base::getNamespace("future")
[11:02:02.222]                           version <- ns[[".package"]][["version"]]
[11:02:02.222]                           if (is.null(version)) 
[11:02:02.222]                             version <- utils::packageVersion("future")
[11:02:02.222]                         }
[11:02:02.222]                         else {
[11:02:02.222]                           version <- NULL
[11:02:02.222]                         }
[11:02:02.222]                         if (!has_future || version < "1.8.0") {
[11:02:02.222]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:02.222]                             "", base::R.version$version.string), 
[11:02:02.222]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:02.222]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:02.222]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:02.222]                               "release", "version")], collapse = " "), 
[11:02:02.222]                             hostname = base::Sys.info()[["nodename"]])
[11:02:02.222]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:02.222]                             info)
[11:02:02.222]                           info <- base::paste(info, collapse = "; ")
[11:02:02.222]                           if (!has_future) {
[11:02:02.222]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:02.222]                               info)
[11:02:02.222]                           }
[11:02:02.222]                           else {
[11:02:02.222]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:02.222]                               info, version)
[11:02:02.222]                           }
[11:02:02.222]                           base::stop(msg)
[11:02:02.222]                         }
[11:02:02.222]                       })
[11:02:02.222]                     }
[11:02:02.222]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:02.222]                     base::options(mc.cores = 1L)
[11:02:02.222]                   }
[11:02:02.222]                   ...future.strategy.old <- future::plan("list")
[11:02:02.222]                   options(future.plan = NULL)
[11:02:02.222]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.222]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:02.222]                 }
[11:02:02.222]                 ...future.workdir <- getwd()
[11:02:02.222]             }
[11:02:02.222]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:02.222]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:02.222]         }
[11:02:02.222]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:02.222]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:02.222]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:02.222]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:02.222]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:02.222]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:02.222]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:02.222]             base::names(...future.oldOptions))
[11:02:02.222]     }
[11:02:02.222]     if (FALSE) {
[11:02:02.222]     }
[11:02:02.222]     else {
[11:02:02.222]         if (TRUE) {
[11:02:02.222]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:02.222]                 open = "w")
[11:02:02.222]         }
[11:02:02.222]         else {
[11:02:02.222]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:02.222]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:02.222]         }
[11:02:02.222]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:02.222]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:02.222]             base::sink(type = "output", split = FALSE)
[11:02:02.222]             base::close(...future.stdout)
[11:02:02.222]         }, add = TRUE)
[11:02:02.222]     }
[11:02:02.222]     ...future.frame <- base::sys.nframe()
[11:02:02.222]     ...future.conditions <- base::list()
[11:02:02.222]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:02.222]     if (FALSE) {
[11:02:02.222]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:02.222]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:02.222]     }
[11:02:02.222]     ...future.result <- base::tryCatch({
[11:02:02.222]         base::withCallingHandlers({
[11:02:02.222]             ...future.value <- base::withVisible(base::local({
[11:02:02.222]                 ...future.makeSendCondition <- base::local({
[11:02:02.222]                   sendCondition <- NULL
[11:02:02.222]                   function(frame = 1L) {
[11:02:02.222]                     if (is.function(sendCondition)) 
[11:02:02.222]                       return(sendCondition)
[11:02:02.222]                     ns <- getNamespace("parallel")
[11:02:02.222]                     if (exists("sendData", mode = "function", 
[11:02:02.222]                       envir = ns)) {
[11:02:02.222]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:02.222]                         envir = ns)
[11:02:02.222]                       envir <- sys.frame(frame)
[11:02:02.222]                       master <- NULL
[11:02:02.222]                       while (!identical(envir, .GlobalEnv) && 
[11:02:02.222]                         !identical(envir, emptyenv())) {
[11:02:02.222]                         if (exists("master", mode = "list", envir = envir, 
[11:02:02.222]                           inherits = FALSE)) {
[11:02:02.222]                           master <- get("master", mode = "list", 
[11:02:02.222]                             envir = envir, inherits = FALSE)
[11:02:02.222]                           if (inherits(master, c("SOCKnode", 
[11:02:02.222]                             "SOCK0node"))) {
[11:02:02.222]                             sendCondition <<- function(cond) {
[11:02:02.222]                               data <- list(type = "VALUE", value = cond, 
[11:02:02.222]                                 success = TRUE)
[11:02:02.222]                               parallel_sendData(master, data)
[11:02:02.222]                             }
[11:02:02.222]                             return(sendCondition)
[11:02:02.222]                           }
[11:02:02.222]                         }
[11:02:02.222]                         frame <- frame + 1L
[11:02:02.222]                         envir <- sys.frame(frame)
[11:02:02.222]                       }
[11:02:02.222]                     }
[11:02:02.222]                     sendCondition <<- function(cond) NULL
[11:02:02.222]                   }
[11:02:02.222]                 })
[11:02:02.222]                 withCallingHandlers({
[11:02:02.222]                   {
[11:02:02.222]                     f1$owner
[11:02:02.222]                   }
[11:02:02.222]                 }, immediateCondition = function(cond) {
[11:02:02.222]                   sendCondition <- ...future.makeSendCondition()
[11:02:02.222]                   sendCondition(cond)
[11:02:02.222]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.222]                   {
[11:02:02.222]                     inherits <- base::inherits
[11:02:02.222]                     invokeRestart <- base::invokeRestart
[11:02:02.222]                     is.null <- base::is.null
[11:02:02.222]                     muffled <- FALSE
[11:02:02.222]                     if (inherits(cond, "message")) {
[11:02:02.222]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:02.222]                       if (muffled) 
[11:02:02.222]                         invokeRestart("muffleMessage")
[11:02:02.222]                     }
[11:02:02.222]                     else if (inherits(cond, "warning")) {
[11:02:02.222]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:02.222]                       if (muffled) 
[11:02:02.222]                         invokeRestart("muffleWarning")
[11:02:02.222]                     }
[11:02:02.222]                     else if (inherits(cond, "condition")) {
[11:02:02.222]                       if (!is.null(pattern)) {
[11:02:02.222]                         computeRestarts <- base::computeRestarts
[11:02:02.222]                         grepl <- base::grepl
[11:02:02.222]                         restarts <- computeRestarts(cond)
[11:02:02.222]                         for (restart in restarts) {
[11:02:02.222]                           name <- restart$name
[11:02:02.222]                           if (is.null(name)) 
[11:02:02.222]                             next
[11:02:02.222]                           if (!grepl(pattern, name)) 
[11:02:02.222]                             next
[11:02:02.222]                           invokeRestart(restart)
[11:02:02.222]                           muffled <- TRUE
[11:02:02.222]                           break
[11:02:02.222]                         }
[11:02:02.222]                       }
[11:02:02.222]                     }
[11:02:02.222]                     invisible(muffled)
[11:02:02.222]                   }
[11:02:02.222]                   muffleCondition(cond)
[11:02:02.222]                 })
[11:02:02.222]             }))
[11:02:02.222]             future::FutureResult(value = ...future.value$value, 
[11:02:02.222]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.222]                   ...future.rng), globalenv = if (FALSE) 
[11:02:02.222]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:02.222]                     ...future.globalenv.names))
[11:02:02.222]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:02.222]         }, condition = base::local({
[11:02:02.222]             c <- base::c
[11:02:02.222]             inherits <- base::inherits
[11:02:02.222]             invokeRestart <- base::invokeRestart
[11:02:02.222]             length <- base::length
[11:02:02.222]             list <- base::list
[11:02:02.222]             seq.int <- base::seq.int
[11:02:02.222]             signalCondition <- base::signalCondition
[11:02:02.222]             sys.calls <- base::sys.calls
[11:02:02.222]             `[[` <- base::`[[`
[11:02:02.222]             `+` <- base::`+`
[11:02:02.222]             `<<-` <- base::`<<-`
[11:02:02.222]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:02.222]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:02.222]                   3L)]
[11:02:02.222]             }
[11:02:02.222]             function(cond) {
[11:02:02.222]                 is_error <- inherits(cond, "error")
[11:02:02.222]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:02.222]                   NULL)
[11:02:02.222]                 if (is_error) {
[11:02:02.222]                   sessionInformation <- function() {
[11:02:02.222]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:02.222]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:02.222]                       search = base::search(), system = base::Sys.info())
[11:02:02.222]                   }
[11:02:02.222]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.222]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:02.222]                     cond$call), session = sessionInformation(), 
[11:02:02.222]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:02.222]                   signalCondition(cond)
[11:02:02.222]                 }
[11:02:02.222]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:02.222]                 "immediateCondition"))) {
[11:02:02.222]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:02.222]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.222]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:02.222]                   if (TRUE && !signal) {
[11:02:02.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.222]                     {
[11:02:02.222]                       inherits <- base::inherits
[11:02:02.222]                       invokeRestart <- base::invokeRestart
[11:02:02.222]                       is.null <- base::is.null
[11:02:02.222]                       muffled <- FALSE
[11:02:02.222]                       if (inherits(cond, "message")) {
[11:02:02.222]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.222]                         if (muffled) 
[11:02:02.222]                           invokeRestart("muffleMessage")
[11:02:02.222]                       }
[11:02:02.222]                       else if (inherits(cond, "warning")) {
[11:02:02.222]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.222]                         if (muffled) 
[11:02:02.222]                           invokeRestart("muffleWarning")
[11:02:02.222]                       }
[11:02:02.222]                       else if (inherits(cond, "condition")) {
[11:02:02.222]                         if (!is.null(pattern)) {
[11:02:02.222]                           computeRestarts <- base::computeRestarts
[11:02:02.222]                           grepl <- base::grepl
[11:02:02.222]                           restarts <- computeRestarts(cond)
[11:02:02.222]                           for (restart in restarts) {
[11:02:02.222]                             name <- restart$name
[11:02:02.222]                             if (is.null(name)) 
[11:02:02.222]                               next
[11:02:02.222]                             if (!grepl(pattern, name)) 
[11:02:02.222]                               next
[11:02:02.222]                             invokeRestart(restart)
[11:02:02.222]                             muffled <- TRUE
[11:02:02.222]                             break
[11:02:02.222]                           }
[11:02:02.222]                         }
[11:02:02.222]                       }
[11:02:02.222]                       invisible(muffled)
[11:02:02.222]                     }
[11:02:02.222]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.222]                   }
[11:02:02.222]                 }
[11:02:02.222]                 else {
[11:02:02.222]                   if (TRUE) {
[11:02:02.222]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.222]                     {
[11:02:02.222]                       inherits <- base::inherits
[11:02:02.222]                       invokeRestart <- base::invokeRestart
[11:02:02.222]                       is.null <- base::is.null
[11:02:02.222]                       muffled <- FALSE
[11:02:02.222]                       if (inherits(cond, "message")) {
[11:02:02.222]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.222]                         if (muffled) 
[11:02:02.222]                           invokeRestart("muffleMessage")
[11:02:02.222]                       }
[11:02:02.222]                       else if (inherits(cond, "warning")) {
[11:02:02.222]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.222]                         if (muffled) 
[11:02:02.222]                           invokeRestart("muffleWarning")
[11:02:02.222]                       }
[11:02:02.222]                       else if (inherits(cond, "condition")) {
[11:02:02.222]                         if (!is.null(pattern)) {
[11:02:02.222]                           computeRestarts <- base::computeRestarts
[11:02:02.222]                           grepl <- base::grepl
[11:02:02.222]                           restarts <- computeRestarts(cond)
[11:02:02.222]                           for (restart in restarts) {
[11:02:02.222]                             name <- restart$name
[11:02:02.222]                             if (is.null(name)) 
[11:02:02.222]                               next
[11:02:02.222]                             if (!grepl(pattern, name)) 
[11:02:02.222]                               next
[11:02:02.222]                             invokeRestart(restart)
[11:02:02.222]                             muffled <- TRUE
[11:02:02.222]                             break
[11:02:02.222]                           }
[11:02:02.222]                         }
[11:02:02.222]                       }
[11:02:02.222]                       invisible(muffled)
[11:02:02.222]                     }
[11:02:02.222]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.222]                   }
[11:02:02.222]                 }
[11:02:02.222]             }
[11:02:02.222]         }))
[11:02:02.222]     }, error = function(ex) {
[11:02:02.222]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:02.222]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.222]                 ...future.rng), started = ...future.startTime, 
[11:02:02.222]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:02.222]             version = "1.8"), class = "FutureResult")
[11:02:02.222]     }, finally = {
[11:02:02.222]         if (!identical(...future.workdir, getwd())) 
[11:02:02.222]             setwd(...future.workdir)
[11:02:02.222]         {
[11:02:02.222]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:02.222]                 ...future.oldOptions$nwarnings <- NULL
[11:02:02.222]             }
[11:02:02.222]             base::options(...future.oldOptions)
[11:02:02.222]             if (.Platform$OS.type == "windows") {
[11:02:02.222]                 old_names <- names(...future.oldEnvVars)
[11:02:02.222]                 envs <- base::Sys.getenv()
[11:02:02.222]                 names <- names(envs)
[11:02:02.222]                 common <- intersect(names, old_names)
[11:02:02.222]                 added <- setdiff(names, old_names)
[11:02:02.222]                 removed <- setdiff(old_names, names)
[11:02:02.222]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:02.222]                   envs[common]]
[11:02:02.222]                 NAMES <- toupper(changed)
[11:02:02.222]                 args <- list()
[11:02:02.222]                 for (kk in seq_along(NAMES)) {
[11:02:02.222]                   name <- changed[[kk]]
[11:02:02.222]                   NAME <- NAMES[[kk]]
[11:02:02.222]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.222]                     next
[11:02:02.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.222]                 }
[11:02:02.222]                 NAMES <- toupper(added)
[11:02:02.222]                 for (kk in seq_along(NAMES)) {
[11:02:02.222]                   name <- added[[kk]]
[11:02:02.222]                   NAME <- NAMES[[kk]]
[11:02:02.222]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.222]                     next
[11:02:02.222]                   args[[name]] <- ""
[11:02:02.222]                 }
[11:02:02.222]                 NAMES <- toupper(removed)
[11:02:02.222]                 for (kk in seq_along(NAMES)) {
[11:02:02.222]                   name <- removed[[kk]]
[11:02:02.222]                   NAME <- NAMES[[kk]]
[11:02:02.222]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.222]                     next
[11:02:02.222]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.222]                 }
[11:02:02.222]                 if (length(args) > 0) 
[11:02:02.222]                   base::do.call(base::Sys.setenv, args = args)
[11:02:02.222]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:02.222]             }
[11:02:02.222]             else {
[11:02:02.222]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:02.222]             }
[11:02:02.222]             {
[11:02:02.222]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:02.222]                   0L) {
[11:02:02.222]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:02.222]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:02.222]                   base::options(opts)
[11:02:02.222]                 }
[11:02:02.222]                 {
[11:02:02.222]                   {
[11:02:02.222]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:02.222]                     NULL
[11:02:02.222]                   }
[11:02:02.222]                   options(future.plan = NULL)
[11:02:02.222]                   if (is.na(NA_character_)) 
[11:02:02.222]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.222]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:02.222]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:02.222]                     .init = FALSE)
[11:02:02.222]                 }
[11:02:02.222]             }
[11:02:02.222]         }
[11:02:02.222]     })
[11:02:02.222]     if (TRUE) {
[11:02:02.222]         base::sink(type = "output", split = FALSE)
[11:02:02.222]         if (TRUE) {
[11:02:02.222]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:02.222]         }
[11:02:02.222]         else {
[11:02:02.222]             ...future.result["stdout"] <- base::list(NULL)
[11:02:02.222]         }
[11:02:02.222]         base::close(...future.stdout)
[11:02:02.222]         ...future.stdout <- NULL
[11:02:02.222]     }
[11:02:02.222]     ...future.result$conditions <- ...future.conditions
[11:02:02.222]     ...future.result$finished <- base::Sys.time()
[11:02:02.222]     ...future.result
[11:02:02.222] }
[11:02:02.235] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[11:02:02.246] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[11:02:02.299] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[11:02:02.299] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[11:02:02.299] MultisessionFuture started
[11:02:02.300] - Launch lazy future ... done
[11:02:02.300] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[11:02:02.300] result() for ClusterFuture ...
[11:02:02.300] receiveMessageFromWorker() for ClusterFuture ...
[11:02:02.300] - Validating connection of MultisessionFuture
[11:02:02.341] - received message: FutureResult
[11:02:02.341] - Received FutureResult
[11:02:02.341] - Erased future from FutureRegistry
[11:02:02.341] result() for ClusterFuture ...
[11:02:02.341] - result already collected: FutureResult
[11:02:02.342] result() for ClusterFuture ... done
[11:02:02.342] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.342] result() for ClusterFuture ... done
[11:02:02.342] result() for ClusterFuture ...
[11:02:02.342] - result already collected: FutureResult
[11:02:02.342] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 90304434-bc0c-ac58-d336-535d23d0508f
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[11:02:02.342] getGlobalsAndPackages() ...
[11:02:02.342] Searching for globals...
[11:02:02.344] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[11:02:02.344] Searching for globals ... DONE
[11:02:02.344] Resolving globals: FALSE
[11:02:02.355] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[11:02:02.355] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[11:02:02.355] - globals: [1] ‘f1’
[11:02:02.356] 
[11:02:02.356] getGlobalsAndPackages() ... DONE
[11:02:02.356] run() for ‘Future’ ...
[11:02:02.356] - state: ‘created’
[11:02:02.356] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:02.368] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:02.368] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:02.368]   - Field: ‘node’
[11:02:02.369]   - Field: ‘label’
[11:02:02.369]   - Field: ‘local’
[11:02:02.369]   - Field: ‘owner’
[11:02:02.369]   - Field: ‘envir’
[11:02:02.369]   - Field: ‘workers’
[11:02:02.369]   - Field: ‘packages’
[11:02:02.369]   - Field: ‘gc’
[11:02:02.369]   - Field: ‘conditions’
[11:02:02.369]   - Field: ‘persistent’
[11:02:02.369]   - Field: ‘expr’
[11:02:02.369]   - Field: ‘uuid’
[11:02:02.369]   - Field: ‘seed’
[11:02:02.370]   - Field: ‘version’
[11:02:02.370]   - Field: ‘result’
[11:02:02.370]   - Field: ‘asynchronous’
[11:02:02.370]   - Field: ‘calls’
[11:02:02.370]   - Field: ‘globals’
[11:02:02.370]   - Field: ‘stdout’
[11:02:02.370]   - Field: ‘earlySignal’
[11:02:02.370]   - Field: ‘lazy’
[11:02:02.370]   - Field: ‘state’
[11:02:02.370] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:02.370] - Launch lazy future ...
[11:02:02.371] Packages needed by the future expression (n = 0): <none>
[11:02:02.371] Packages needed by future strategies (n = 0): <none>
[11:02:02.371] {
[11:02:02.371]     {
[11:02:02.371]         {
[11:02:02.371]             ...future.startTime <- base::Sys.time()
[11:02:02.371]             {
[11:02:02.371]                 {
[11:02:02.371]                   {
[11:02:02.371]                     {
[11:02:02.371]                       base::local({
[11:02:02.371]                         has_future <- base::requireNamespace("future", 
[11:02:02.371]                           quietly = TRUE)
[11:02:02.371]                         if (has_future) {
[11:02:02.371]                           ns <- base::getNamespace("future")
[11:02:02.371]                           version <- ns[[".package"]][["version"]]
[11:02:02.371]                           if (is.null(version)) 
[11:02:02.371]                             version <- utils::packageVersion("future")
[11:02:02.371]                         }
[11:02:02.371]                         else {
[11:02:02.371]                           version <- NULL
[11:02:02.371]                         }
[11:02:02.371]                         if (!has_future || version < "1.8.0") {
[11:02:02.371]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:02.371]                             "", base::R.version$version.string), 
[11:02:02.371]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:02.371]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:02.371]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:02.371]                               "release", "version")], collapse = " "), 
[11:02:02.371]                             hostname = base::Sys.info()[["nodename"]])
[11:02:02.371]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:02.371]                             info)
[11:02:02.371]                           info <- base::paste(info, collapse = "; ")
[11:02:02.371]                           if (!has_future) {
[11:02:02.371]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:02.371]                               info)
[11:02:02.371]                           }
[11:02:02.371]                           else {
[11:02:02.371]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:02.371]                               info, version)
[11:02:02.371]                           }
[11:02:02.371]                           base::stop(msg)
[11:02:02.371]                         }
[11:02:02.371]                       })
[11:02:02.371]                     }
[11:02:02.371]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:02.371]                     base::options(mc.cores = 1L)
[11:02:02.371]                   }
[11:02:02.371]                   ...future.strategy.old <- future::plan("list")
[11:02:02.371]                   options(future.plan = NULL)
[11:02:02.371]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.371]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:02.371]                 }
[11:02:02.371]                 ...future.workdir <- getwd()
[11:02:02.371]             }
[11:02:02.371]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:02.371]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:02.371]         }
[11:02:02.371]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:02.371]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:02.371]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:02.371]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:02.371]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:02.371]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:02.371]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:02.371]             base::names(...future.oldOptions))
[11:02:02.371]     }
[11:02:02.371]     if (FALSE) {
[11:02:02.371]     }
[11:02:02.371]     else {
[11:02:02.371]         if (TRUE) {
[11:02:02.371]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:02.371]                 open = "w")
[11:02:02.371]         }
[11:02:02.371]         else {
[11:02:02.371]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:02.371]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:02.371]         }
[11:02:02.371]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:02.371]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:02.371]             base::sink(type = "output", split = FALSE)
[11:02:02.371]             base::close(...future.stdout)
[11:02:02.371]         }, add = TRUE)
[11:02:02.371]     }
[11:02:02.371]     ...future.frame <- base::sys.nframe()
[11:02:02.371]     ...future.conditions <- base::list()
[11:02:02.371]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:02.371]     if (FALSE) {
[11:02:02.371]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:02.371]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:02.371]     }
[11:02:02.371]     ...future.result <- base::tryCatch({
[11:02:02.371]         base::withCallingHandlers({
[11:02:02.371]             ...future.value <- base::withVisible(base::local({
[11:02:02.371]                 ...future.makeSendCondition <- base::local({
[11:02:02.371]                   sendCondition <- NULL
[11:02:02.371]                   function(frame = 1L) {
[11:02:02.371]                     if (is.function(sendCondition)) 
[11:02:02.371]                       return(sendCondition)
[11:02:02.371]                     ns <- getNamespace("parallel")
[11:02:02.371]                     if (exists("sendData", mode = "function", 
[11:02:02.371]                       envir = ns)) {
[11:02:02.371]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:02.371]                         envir = ns)
[11:02:02.371]                       envir <- sys.frame(frame)
[11:02:02.371]                       master <- NULL
[11:02:02.371]                       while (!identical(envir, .GlobalEnv) && 
[11:02:02.371]                         !identical(envir, emptyenv())) {
[11:02:02.371]                         if (exists("master", mode = "list", envir = envir, 
[11:02:02.371]                           inherits = FALSE)) {
[11:02:02.371]                           master <- get("master", mode = "list", 
[11:02:02.371]                             envir = envir, inherits = FALSE)
[11:02:02.371]                           if (inherits(master, c("SOCKnode", 
[11:02:02.371]                             "SOCK0node"))) {
[11:02:02.371]                             sendCondition <<- function(cond) {
[11:02:02.371]                               data <- list(type = "VALUE", value = cond, 
[11:02:02.371]                                 success = TRUE)
[11:02:02.371]                               parallel_sendData(master, data)
[11:02:02.371]                             }
[11:02:02.371]                             return(sendCondition)
[11:02:02.371]                           }
[11:02:02.371]                         }
[11:02:02.371]                         frame <- frame + 1L
[11:02:02.371]                         envir <- sys.frame(frame)
[11:02:02.371]                       }
[11:02:02.371]                     }
[11:02:02.371]                     sendCondition <<- function(cond) NULL
[11:02:02.371]                   }
[11:02:02.371]                 })
[11:02:02.371]                 withCallingHandlers({
[11:02:02.371]                   {
[11:02:02.371]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[11:02:02.371]                     "not-owner"
[11:02:02.371]                   }
[11:02:02.371]                 }, immediateCondition = function(cond) {
[11:02:02.371]                   sendCondition <- ...future.makeSendCondition()
[11:02:02.371]                   sendCondition(cond)
[11:02:02.371]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.371]                   {
[11:02:02.371]                     inherits <- base::inherits
[11:02:02.371]                     invokeRestart <- base::invokeRestart
[11:02:02.371]                     is.null <- base::is.null
[11:02:02.371]                     muffled <- FALSE
[11:02:02.371]                     if (inherits(cond, "message")) {
[11:02:02.371]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:02.371]                       if (muffled) 
[11:02:02.371]                         invokeRestart("muffleMessage")
[11:02:02.371]                     }
[11:02:02.371]                     else if (inherits(cond, "warning")) {
[11:02:02.371]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:02.371]                       if (muffled) 
[11:02:02.371]                         invokeRestart("muffleWarning")
[11:02:02.371]                     }
[11:02:02.371]                     else if (inherits(cond, "condition")) {
[11:02:02.371]                       if (!is.null(pattern)) {
[11:02:02.371]                         computeRestarts <- base::computeRestarts
[11:02:02.371]                         grepl <- base::grepl
[11:02:02.371]                         restarts <- computeRestarts(cond)
[11:02:02.371]                         for (restart in restarts) {
[11:02:02.371]                           name <- restart$name
[11:02:02.371]                           if (is.null(name)) 
[11:02:02.371]                             next
[11:02:02.371]                           if (!grepl(pattern, name)) 
[11:02:02.371]                             next
[11:02:02.371]                           invokeRestart(restart)
[11:02:02.371]                           muffled <- TRUE
[11:02:02.371]                           break
[11:02:02.371]                         }
[11:02:02.371]                       }
[11:02:02.371]                     }
[11:02:02.371]                     invisible(muffled)
[11:02:02.371]                   }
[11:02:02.371]                   muffleCondition(cond)
[11:02:02.371]                 })
[11:02:02.371]             }))
[11:02:02.371]             future::FutureResult(value = ...future.value$value, 
[11:02:02.371]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.371]                   ...future.rng), globalenv = if (FALSE) 
[11:02:02.371]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:02.371]                     ...future.globalenv.names))
[11:02:02.371]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:02.371]         }, condition = base::local({
[11:02:02.371]             c <- base::c
[11:02:02.371]             inherits <- base::inherits
[11:02:02.371]             invokeRestart <- base::invokeRestart
[11:02:02.371]             length <- base::length
[11:02:02.371]             list <- base::list
[11:02:02.371]             seq.int <- base::seq.int
[11:02:02.371]             signalCondition <- base::signalCondition
[11:02:02.371]             sys.calls <- base::sys.calls
[11:02:02.371]             `[[` <- base::`[[`
[11:02:02.371]             `+` <- base::`+`
[11:02:02.371]             `<<-` <- base::`<<-`
[11:02:02.371]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:02.371]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:02.371]                   3L)]
[11:02:02.371]             }
[11:02:02.371]             function(cond) {
[11:02:02.371]                 is_error <- inherits(cond, "error")
[11:02:02.371]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:02.371]                   NULL)
[11:02:02.371]                 if (is_error) {
[11:02:02.371]                   sessionInformation <- function() {
[11:02:02.371]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:02.371]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:02.371]                       search = base::search(), system = base::Sys.info())
[11:02:02.371]                   }
[11:02:02.371]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.371]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:02.371]                     cond$call), session = sessionInformation(), 
[11:02:02.371]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:02.371]                   signalCondition(cond)
[11:02:02.371]                 }
[11:02:02.371]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:02.371]                 "immediateCondition"))) {
[11:02:02.371]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:02.371]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.371]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:02.371]                   if (TRUE && !signal) {
[11:02:02.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.371]                     {
[11:02:02.371]                       inherits <- base::inherits
[11:02:02.371]                       invokeRestart <- base::invokeRestart
[11:02:02.371]                       is.null <- base::is.null
[11:02:02.371]                       muffled <- FALSE
[11:02:02.371]                       if (inherits(cond, "message")) {
[11:02:02.371]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.371]                         if (muffled) 
[11:02:02.371]                           invokeRestart("muffleMessage")
[11:02:02.371]                       }
[11:02:02.371]                       else if (inherits(cond, "warning")) {
[11:02:02.371]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.371]                         if (muffled) 
[11:02:02.371]                           invokeRestart("muffleWarning")
[11:02:02.371]                       }
[11:02:02.371]                       else if (inherits(cond, "condition")) {
[11:02:02.371]                         if (!is.null(pattern)) {
[11:02:02.371]                           computeRestarts <- base::computeRestarts
[11:02:02.371]                           grepl <- base::grepl
[11:02:02.371]                           restarts <- computeRestarts(cond)
[11:02:02.371]                           for (restart in restarts) {
[11:02:02.371]                             name <- restart$name
[11:02:02.371]                             if (is.null(name)) 
[11:02:02.371]                               next
[11:02:02.371]                             if (!grepl(pattern, name)) 
[11:02:02.371]                               next
[11:02:02.371]                             invokeRestart(restart)
[11:02:02.371]                             muffled <- TRUE
[11:02:02.371]                             break
[11:02:02.371]                           }
[11:02:02.371]                         }
[11:02:02.371]                       }
[11:02:02.371]                       invisible(muffled)
[11:02:02.371]                     }
[11:02:02.371]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.371]                   }
[11:02:02.371]                 }
[11:02:02.371]                 else {
[11:02:02.371]                   if (TRUE) {
[11:02:02.371]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.371]                     {
[11:02:02.371]                       inherits <- base::inherits
[11:02:02.371]                       invokeRestart <- base::invokeRestart
[11:02:02.371]                       is.null <- base::is.null
[11:02:02.371]                       muffled <- FALSE
[11:02:02.371]                       if (inherits(cond, "message")) {
[11:02:02.371]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.371]                         if (muffled) 
[11:02:02.371]                           invokeRestart("muffleMessage")
[11:02:02.371]                       }
[11:02:02.371]                       else if (inherits(cond, "warning")) {
[11:02:02.371]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.371]                         if (muffled) 
[11:02:02.371]                           invokeRestart("muffleWarning")
[11:02:02.371]                       }
[11:02:02.371]                       else if (inherits(cond, "condition")) {
[11:02:02.371]                         if (!is.null(pattern)) {
[11:02:02.371]                           computeRestarts <- base::computeRestarts
[11:02:02.371]                           grepl <- base::grepl
[11:02:02.371]                           restarts <- computeRestarts(cond)
[11:02:02.371]                           for (restart in restarts) {
[11:02:02.371]                             name <- restart$name
[11:02:02.371]                             if (is.null(name)) 
[11:02:02.371]                               next
[11:02:02.371]                             if (!grepl(pattern, name)) 
[11:02:02.371]                               next
[11:02:02.371]                             invokeRestart(restart)
[11:02:02.371]                             muffled <- TRUE
[11:02:02.371]                             break
[11:02:02.371]                           }
[11:02:02.371]                         }
[11:02:02.371]                       }
[11:02:02.371]                       invisible(muffled)
[11:02:02.371]                     }
[11:02:02.371]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.371]                   }
[11:02:02.371]                 }
[11:02:02.371]             }
[11:02:02.371]         }))
[11:02:02.371]     }, error = function(ex) {
[11:02:02.371]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:02.371]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.371]                 ...future.rng), started = ...future.startTime, 
[11:02:02.371]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:02.371]             version = "1.8"), class = "FutureResult")
[11:02:02.371]     }, finally = {
[11:02:02.371]         if (!identical(...future.workdir, getwd())) 
[11:02:02.371]             setwd(...future.workdir)
[11:02:02.371]         {
[11:02:02.371]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:02.371]                 ...future.oldOptions$nwarnings <- NULL
[11:02:02.371]             }
[11:02:02.371]             base::options(...future.oldOptions)
[11:02:02.371]             if (.Platform$OS.type == "windows") {
[11:02:02.371]                 old_names <- names(...future.oldEnvVars)
[11:02:02.371]                 envs <- base::Sys.getenv()
[11:02:02.371]                 names <- names(envs)
[11:02:02.371]                 common <- intersect(names, old_names)
[11:02:02.371]                 added <- setdiff(names, old_names)
[11:02:02.371]                 removed <- setdiff(old_names, names)
[11:02:02.371]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:02.371]                   envs[common]]
[11:02:02.371]                 NAMES <- toupper(changed)
[11:02:02.371]                 args <- list()
[11:02:02.371]                 for (kk in seq_along(NAMES)) {
[11:02:02.371]                   name <- changed[[kk]]
[11:02:02.371]                   NAME <- NAMES[[kk]]
[11:02:02.371]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.371]                     next
[11:02:02.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.371]                 }
[11:02:02.371]                 NAMES <- toupper(added)
[11:02:02.371]                 for (kk in seq_along(NAMES)) {
[11:02:02.371]                   name <- added[[kk]]
[11:02:02.371]                   NAME <- NAMES[[kk]]
[11:02:02.371]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.371]                     next
[11:02:02.371]                   args[[name]] <- ""
[11:02:02.371]                 }
[11:02:02.371]                 NAMES <- toupper(removed)
[11:02:02.371]                 for (kk in seq_along(NAMES)) {
[11:02:02.371]                   name <- removed[[kk]]
[11:02:02.371]                   NAME <- NAMES[[kk]]
[11:02:02.371]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.371]                     next
[11:02:02.371]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.371]                 }
[11:02:02.371]                 if (length(args) > 0) 
[11:02:02.371]                   base::do.call(base::Sys.setenv, args = args)
[11:02:02.371]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:02.371]             }
[11:02:02.371]             else {
[11:02:02.371]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:02.371]             }
[11:02:02.371]             {
[11:02:02.371]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:02.371]                   0L) {
[11:02:02.371]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:02.371]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:02.371]                   base::options(opts)
[11:02:02.371]                 }
[11:02:02.371]                 {
[11:02:02.371]                   {
[11:02:02.371]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:02.371]                     NULL
[11:02:02.371]                   }
[11:02:02.371]                   options(future.plan = NULL)
[11:02:02.371]                   if (is.na(NA_character_)) 
[11:02:02.371]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.371]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:02.371]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:02.371]                     .init = FALSE)
[11:02:02.371]                 }
[11:02:02.371]             }
[11:02:02.371]         }
[11:02:02.371]     })
[11:02:02.371]     if (TRUE) {
[11:02:02.371]         base::sink(type = "output", split = FALSE)
[11:02:02.371]         if (TRUE) {
[11:02:02.371]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:02.371]         }
[11:02:02.371]         else {
[11:02:02.371]             ...future.result["stdout"] <- base::list(NULL)
[11:02:02.371]         }
[11:02:02.371]         base::close(...future.stdout)
[11:02:02.371]         ...future.stdout <- NULL
[11:02:02.371]     }
[11:02:02.371]     ...future.result$conditions <- ...future.conditions
[11:02:02.371]     ...future.result$finished <- base::Sys.time()
[11:02:02.371]     ...future.result
[11:02:02.371] }
[11:02:02.384] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[11:02:02.395] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[11:02:02.448] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[11:02:02.448] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[11:02:02.449] MultisessionFuture started
[11:02:02.449] - Launch lazy future ... done
[11:02:02.449] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[11:02:02.449] result() for ClusterFuture ...
[11:02:02.449] receiveMessageFromWorker() for ClusterFuture ...
[11:02:02.449] - Validating connection of MultisessionFuture
[11:02:02.490] - received message: FutureResult
[11:02:02.490] - Received FutureResult
[11:02:02.490] - Erased future from FutureRegistry
[11:02:02.490] result() for ClusterFuture ...
[11:02:02.491] - result already collected: FutureResult
[11:02:02.491] result() for ClusterFuture ... done
[11:02:02.491] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.491] result() for ClusterFuture ... done
[11:02:02.491] result() for ClusterFuture ...
[11:02:02.491] - result already collected: FutureResult
[11:02:02.491] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[11:02:02.491] getGlobalsAndPackages() ...
[11:02:02.491] Searching for globals...
[11:02:02.492] - globals found: [1] ‘{’
[11:02:02.492] Searching for globals ... DONE
[11:02:02.492] Resolving globals: FALSE
[11:02:02.492] 
[11:02:02.493] 
[11:02:02.493] getGlobalsAndPackages() ... DONE
[11:02:02.493] run() for ‘Future’ ...
[11:02:02.493] - state: ‘created’
[11:02:02.493] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:02.506] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:02.506] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:02.506]   - Field: ‘node’
[11:02:02.506]   - Field: ‘label’
[11:02:02.507]   - Field: ‘local’
[11:02:02.507]   - Field: ‘owner’
[11:02:02.507]   - Field: ‘envir’
[11:02:02.507]   - Field: ‘workers’
[11:02:02.507]   - Field: ‘packages’
[11:02:02.507]   - Field: ‘gc’
[11:02:02.507]   - Field: ‘conditions’
[11:02:02.507]   - Field: ‘persistent’
[11:02:02.507]   - Field: ‘expr’
[11:02:02.507]   - Field: ‘uuid’
[11:02:02.507]   - Field: ‘seed’
[11:02:02.507]   - Field: ‘version’
[11:02:02.507]   - Field: ‘result’
[11:02:02.508]   - Field: ‘asynchronous’
[11:02:02.508]   - Field: ‘calls’
[11:02:02.508]   - Field: ‘globals’
[11:02:02.508]   - Field: ‘stdout’
[11:02:02.508]   - Field: ‘earlySignal’
[11:02:02.508]   - Field: ‘lazy’
[11:02:02.508]   - Field: ‘state’
[11:02:02.508] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:02.508] - Launch lazy future ...
[11:02:02.508] Packages needed by the future expression (n = 0): <none>
[11:02:02.509] Packages needed by future strategies (n = 0): <none>
[11:02:02.509] {
[11:02:02.509]     {
[11:02:02.509]         {
[11:02:02.509]             ...future.startTime <- base::Sys.time()
[11:02:02.509]             {
[11:02:02.509]                 {
[11:02:02.509]                   {
[11:02:02.509]                     {
[11:02:02.509]                       base::local({
[11:02:02.509]                         has_future <- base::requireNamespace("future", 
[11:02:02.509]                           quietly = TRUE)
[11:02:02.509]                         if (has_future) {
[11:02:02.509]                           ns <- base::getNamespace("future")
[11:02:02.509]                           version <- ns[[".package"]][["version"]]
[11:02:02.509]                           if (is.null(version)) 
[11:02:02.509]                             version <- utils::packageVersion("future")
[11:02:02.509]                         }
[11:02:02.509]                         else {
[11:02:02.509]                           version <- NULL
[11:02:02.509]                         }
[11:02:02.509]                         if (!has_future || version < "1.8.0") {
[11:02:02.509]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:02.509]                             "", base::R.version$version.string), 
[11:02:02.509]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:02.509]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:02.509]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:02.509]                               "release", "version")], collapse = " "), 
[11:02:02.509]                             hostname = base::Sys.info()[["nodename"]])
[11:02:02.509]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:02.509]                             info)
[11:02:02.509]                           info <- base::paste(info, collapse = "; ")
[11:02:02.509]                           if (!has_future) {
[11:02:02.509]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:02.509]                               info)
[11:02:02.509]                           }
[11:02:02.509]                           else {
[11:02:02.509]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:02.509]                               info, version)
[11:02:02.509]                           }
[11:02:02.509]                           base::stop(msg)
[11:02:02.509]                         }
[11:02:02.509]                       })
[11:02:02.509]                     }
[11:02:02.509]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:02.509]                     base::options(mc.cores = 1L)
[11:02:02.509]                   }
[11:02:02.509]                   ...future.strategy.old <- future::plan("list")
[11:02:02.509]                   options(future.plan = NULL)
[11:02:02.509]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.509]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:02.509]                 }
[11:02:02.509]                 ...future.workdir <- getwd()
[11:02:02.509]             }
[11:02:02.509]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:02.509]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:02.509]         }
[11:02:02.509]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:02.509]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:02.509]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:02.509]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:02.509]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:02.509]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:02.509]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:02.509]             base::names(...future.oldOptions))
[11:02:02.509]     }
[11:02:02.509]     if (FALSE) {
[11:02:02.509]     }
[11:02:02.509]     else {
[11:02:02.509]         if (TRUE) {
[11:02:02.509]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:02.509]                 open = "w")
[11:02:02.509]         }
[11:02:02.509]         else {
[11:02:02.509]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:02.509]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:02.509]         }
[11:02:02.509]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:02.509]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:02.509]             base::sink(type = "output", split = FALSE)
[11:02:02.509]             base::close(...future.stdout)
[11:02:02.509]         }, add = TRUE)
[11:02:02.509]     }
[11:02:02.509]     ...future.frame <- base::sys.nframe()
[11:02:02.509]     ...future.conditions <- base::list()
[11:02:02.509]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:02.509]     if (FALSE) {
[11:02:02.509]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:02.509]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:02.509]     }
[11:02:02.509]     ...future.result <- base::tryCatch({
[11:02:02.509]         base::withCallingHandlers({
[11:02:02.509]             ...future.value <- base::withVisible(base::local({
[11:02:02.509]                 ...future.makeSendCondition <- base::local({
[11:02:02.509]                   sendCondition <- NULL
[11:02:02.509]                   function(frame = 1L) {
[11:02:02.509]                     if (is.function(sendCondition)) 
[11:02:02.509]                       return(sendCondition)
[11:02:02.509]                     ns <- getNamespace("parallel")
[11:02:02.509]                     if (exists("sendData", mode = "function", 
[11:02:02.509]                       envir = ns)) {
[11:02:02.509]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:02.509]                         envir = ns)
[11:02:02.509]                       envir <- sys.frame(frame)
[11:02:02.509]                       master <- NULL
[11:02:02.509]                       while (!identical(envir, .GlobalEnv) && 
[11:02:02.509]                         !identical(envir, emptyenv())) {
[11:02:02.509]                         if (exists("master", mode = "list", envir = envir, 
[11:02:02.509]                           inherits = FALSE)) {
[11:02:02.509]                           master <- get("master", mode = "list", 
[11:02:02.509]                             envir = envir, inherits = FALSE)
[11:02:02.509]                           if (inherits(master, c("SOCKnode", 
[11:02:02.509]                             "SOCK0node"))) {
[11:02:02.509]                             sendCondition <<- function(cond) {
[11:02:02.509]                               data <- list(type = "VALUE", value = cond, 
[11:02:02.509]                                 success = TRUE)
[11:02:02.509]                               parallel_sendData(master, data)
[11:02:02.509]                             }
[11:02:02.509]                             return(sendCondition)
[11:02:02.509]                           }
[11:02:02.509]                         }
[11:02:02.509]                         frame <- frame + 1L
[11:02:02.509]                         envir <- sys.frame(frame)
[11:02:02.509]                       }
[11:02:02.509]                     }
[11:02:02.509]                     sendCondition <<- function(cond) NULL
[11:02:02.509]                   }
[11:02:02.509]                 })
[11:02:02.509]                 withCallingHandlers({
[11:02:02.509]                   {
[11:02:02.509]                     42L
[11:02:02.509]                   }
[11:02:02.509]                 }, immediateCondition = function(cond) {
[11:02:02.509]                   sendCondition <- ...future.makeSendCondition()
[11:02:02.509]                   sendCondition(cond)
[11:02:02.509]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.509]                   {
[11:02:02.509]                     inherits <- base::inherits
[11:02:02.509]                     invokeRestart <- base::invokeRestart
[11:02:02.509]                     is.null <- base::is.null
[11:02:02.509]                     muffled <- FALSE
[11:02:02.509]                     if (inherits(cond, "message")) {
[11:02:02.509]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:02.509]                       if (muffled) 
[11:02:02.509]                         invokeRestart("muffleMessage")
[11:02:02.509]                     }
[11:02:02.509]                     else if (inherits(cond, "warning")) {
[11:02:02.509]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:02.509]                       if (muffled) 
[11:02:02.509]                         invokeRestart("muffleWarning")
[11:02:02.509]                     }
[11:02:02.509]                     else if (inherits(cond, "condition")) {
[11:02:02.509]                       if (!is.null(pattern)) {
[11:02:02.509]                         computeRestarts <- base::computeRestarts
[11:02:02.509]                         grepl <- base::grepl
[11:02:02.509]                         restarts <- computeRestarts(cond)
[11:02:02.509]                         for (restart in restarts) {
[11:02:02.509]                           name <- restart$name
[11:02:02.509]                           if (is.null(name)) 
[11:02:02.509]                             next
[11:02:02.509]                           if (!grepl(pattern, name)) 
[11:02:02.509]                             next
[11:02:02.509]                           invokeRestart(restart)
[11:02:02.509]                           muffled <- TRUE
[11:02:02.509]                           break
[11:02:02.509]                         }
[11:02:02.509]                       }
[11:02:02.509]                     }
[11:02:02.509]                     invisible(muffled)
[11:02:02.509]                   }
[11:02:02.509]                   muffleCondition(cond)
[11:02:02.509]                 })
[11:02:02.509]             }))
[11:02:02.509]             future::FutureResult(value = ...future.value$value, 
[11:02:02.509]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.509]                   ...future.rng), globalenv = if (FALSE) 
[11:02:02.509]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:02.509]                     ...future.globalenv.names))
[11:02:02.509]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:02.509]         }, condition = base::local({
[11:02:02.509]             c <- base::c
[11:02:02.509]             inherits <- base::inherits
[11:02:02.509]             invokeRestart <- base::invokeRestart
[11:02:02.509]             length <- base::length
[11:02:02.509]             list <- base::list
[11:02:02.509]             seq.int <- base::seq.int
[11:02:02.509]             signalCondition <- base::signalCondition
[11:02:02.509]             sys.calls <- base::sys.calls
[11:02:02.509]             `[[` <- base::`[[`
[11:02:02.509]             `+` <- base::`+`
[11:02:02.509]             `<<-` <- base::`<<-`
[11:02:02.509]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:02.509]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:02.509]                   3L)]
[11:02:02.509]             }
[11:02:02.509]             function(cond) {
[11:02:02.509]                 is_error <- inherits(cond, "error")
[11:02:02.509]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:02.509]                   NULL)
[11:02:02.509]                 if (is_error) {
[11:02:02.509]                   sessionInformation <- function() {
[11:02:02.509]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:02.509]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:02.509]                       search = base::search(), system = base::Sys.info())
[11:02:02.509]                   }
[11:02:02.509]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.509]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:02.509]                     cond$call), session = sessionInformation(), 
[11:02:02.509]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:02.509]                   signalCondition(cond)
[11:02:02.509]                 }
[11:02:02.509]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:02.509]                 "immediateCondition"))) {
[11:02:02.509]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:02.509]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.509]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:02.509]                   if (TRUE && !signal) {
[11:02:02.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.509]                     {
[11:02:02.509]                       inherits <- base::inherits
[11:02:02.509]                       invokeRestart <- base::invokeRestart
[11:02:02.509]                       is.null <- base::is.null
[11:02:02.509]                       muffled <- FALSE
[11:02:02.509]                       if (inherits(cond, "message")) {
[11:02:02.509]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.509]                         if (muffled) 
[11:02:02.509]                           invokeRestart("muffleMessage")
[11:02:02.509]                       }
[11:02:02.509]                       else if (inherits(cond, "warning")) {
[11:02:02.509]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.509]                         if (muffled) 
[11:02:02.509]                           invokeRestart("muffleWarning")
[11:02:02.509]                       }
[11:02:02.509]                       else if (inherits(cond, "condition")) {
[11:02:02.509]                         if (!is.null(pattern)) {
[11:02:02.509]                           computeRestarts <- base::computeRestarts
[11:02:02.509]                           grepl <- base::grepl
[11:02:02.509]                           restarts <- computeRestarts(cond)
[11:02:02.509]                           for (restart in restarts) {
[11:02:02.509]                             name <- restart$name
[11:02:02.509]                             if (is.null(name)) 
[11:02:02.509]                               next
[11:02:02.509]                             if (!grepl(pattern, name)) 
[11:02:02.509]                               next
[11:02:02.509]                             invokeRestart(restart)
[11:02:02.509]                             muffled <- TRUE
[11:02:02.509]                             break
[11:02:02.509]                           }
[11:02:02.509]                         }
[11:02:02.509]                       }
[11:02:02.509]                       invisible(muffled)
[11:02:02.509]                     }
[11:02:02.509]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.509]                   }
[11:02:02.509]                 }
[11:02:02.509]                 else {
[11:02:02.509]                   if (TRUE) {
[11:02:02.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.509]                     {
[11:02:02.509]                       inherits <- base::inherits
[11:02:02.509]                       invokeRestart <- base::invokeRestart
[11:02:02.509]                       is.null <- base::is.null
[11:02:02.509]                       muffled <- FALSE
[11:02:02.509]                       if (inherits(cond, "message")) {
[11:02:02.509]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.509]                         if (muffled) 
[11:02:02.509]                           invokeRestart("muffleMessage")
[11:02:02.509]                       }
[11:02:02.509]                       else if (inherits(cond, "warning")) {
[11:02:02.509]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.509]                         if (muffled) 
[11:02:02.509]                           invokeRestart("muffleWarning")
[11:02:02.509]                       }
[11:02:02.509]                       else if (inherits(cond, "condition")) {
[11:02:02.509]                         if (!is.null(pattern)) {
[11:02:02.509]                           computeRestarts <- base::computeRestarts
[11:02:02.509]                           grepl <- base::grepl
[11:02:02.509]                           restarts <- computeRestarts(cond)
[11:02:02.509]                           for (restart in restarts) {
[11:02:02.509]                             name <- restart$name
[11:02:02.509]                             if (is.null(name)) 
[11:02:02.509]                               next
[11:02:02.509]                             if (!grepl(pattern, name)) 
[11:02:02.509]                               next
[11:02:02.509]                             invokeRestart(restart)
[11:02:02.509]                             muffled <- TRUE
[11:02:02.509]                             break
[11:02:02.509]                           }
[11:02:02.509]                         }
[11:02:02.509]                       }
[11:02:02.509]                       invisible(muffled)
[11:02:02.509]                     }
[11:02:02.509]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.509]                   }
[11:02:02.509]                 }
[11:02:02.509]             }
[11:02:02.509]         }))
[11:02:02.509]     }, error = function(ex) {
[11:02:02.509]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:02.509]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.509]                 ...future.rng), started = ...future.startTime, 
[11:02:02.509]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:02.509]             version = "1.8"), class = "FutureResult")
[11:02:02.509]     }, finally = {
[11:02:02.509]         if (!identical(...future.workdir, getwd())) 
[11:02:02.509]             setwd(...future.workdir)
[11:02:02.509]         {
[11:02:02.509]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:02.509]                 ...future.oldOptions$nwarnings <- NULL
[11:02:02.509]             }
[11:02:02.509]             base::options(...future.oldOptions)
[11:02:02.509]             if (.Platform$OS.type == "windows") {
[11:02:02.509]                 old_names <- names(...future.oldEnvVars)
[11:02:02.509]                 envs <- base::Sys.getenv()
[11:02:02.509]                 names <- names(envs)
[11:02:02.509]                 common <- intersect(names, old_names)
[11:02:02.509]                 added <- setdiff(names, old_names)
[11:02:02.509]                 removed <- setdiff(old_names, names)
[11:02:02.509]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:02.509]                   envs[common]]
[11:02:02.509]                 NAMES <- toupper(changed)
[11:02:02.509]                 args <- list()
[11:02:02.509]                 for (kk in seq_along(NAMES)) {
[11:02:02.509]                   name <- changed[[kk]]
[11:02:02.509]                   NAME <- NAMES[[kk]]
[11:02:02.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.509]                     next
[11:02:02.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.509]                 }
[11:02:02.509]                 NAMES <- toupper(added)
[11:02:02.509]                 for (kk in seq_along(NAMES)) {
[11:02:02.509]                   name <- added[[kk]]
[11:02:02.509]                   NAME <- NAMES[[kk]]
[11:02:02.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.509]                     next
[11:02:02.509]                   args[[name]] <- ""
[11:02:02.509]                 }
[11:02:02.509]                 NAMES <- toupper(removed)
[11:02:02.509]                 for (kk in seq_along(NAMES)) {
[11:02:02.509]                   name <- removed[[kk]]
[11:02:02.509]                   NAME <- NAMES[[kk]]
[11:02:02.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.509]                     next
[11:02:02.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.509]                 }
[11:02:02.509]                 if (length(args) > 0) 
[11:02:02.509]                   base::do.call(base::Sys.setenv, args = args)
[11:02:02.509]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:02.509]             }
[11:02:02.509]             else {
[11:02:02.509]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:02.509]             }
[11:02:02.509]             {
[11:02:02.509]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:02.509]                   0L) {
[11:02:02.509]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:02.509]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:02.509]                   base::options(opts)
[11:02:02.509]                 }
[11:02:02.509]                 {
[11:02:02.509]                   {
[11:02:02.509]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:02.509]                     NULL
[11:02:02.509]                   }
[11:02:02.509]                   options(future.plan = NULL)
[11:02:02.509]                   if (is.na(NA_character_)) 
[11:02:02.509]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.509]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:02.509]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:02.509]                     .init = FALSE)
[11:02:02.509]                 }
[11:02:02.509]             }
[11:02:02.509]         }
[11:02:02.509]     })
[11:02:02.509]     if (TRUE) {
[11:02:02.509]         base::sink(type = "output", split = FALSE)
[11:02:02.509]         if (TRUE) {
[11:02:02.509]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:02.509]         }
[11:02:02.509]         else {
[11:02:02.509]             ...future.result["stdout"] <- base::list(NULL)
[11:02:02.509]         }
[11:02:02.509]         base::close(...future.stdout)
[11:02:02.509]         ...future.stdout <- NULL
[11:02:02.509]     }
[11:02:02.509]     ...future.result$conditions <- ...future.conditions
[11:02:02.509]     ...future.result$finished <- base::Sys.time()
[11:02:02.509]     ...future.result
[11:02:02.509] }
[11:02:02.512] MultisessionFuture started
[11:02:02.512] - Launch lazy future ... done
[11:02:02.512] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[11:02:02.512] getGlobalsAndPackages() ...
[11:02:02.512] Searching for globals...
[11:02:02.513] - globals found: [3] ‘{’, ‘value’, ‘f1’
[11:02:02.513] Searching for globals ... DONE
[11:02:02.513] Resolving globals: FALSE
[11:02:02.524] The total size of the 1 globals is 311.92 KiB (319401 bytes)
[11:02:02.525] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 311.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (311.92 KiB of class ‘environment’)
[11:02:02.525] - globals: [1] ‘f1’
[11:02:02.525] - packages: [1] ‘future’
[11:02:02.525] getGlobalsAndPackages() ... DONE
[11:02:02.525] run() for ‘Future’ ...
[11:02:02.525] - state: ‘created’
[11:02:02.525] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:02:02.538] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:02.538] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:02:02.538]   - Field: ‘node’
[11:02:02.538]   - Field: ‘label’
[11:02:02.538]   - Field: ‘local’
[11:02:02.538]   - Field: ‘owner’
[11:02:02.538]   - Field: ‘envir’
[11:02:02.539]   - Field: ‘workers’
[11:02:02.539]   - Field: ‘packages’
[11:02:02.539]   - Field: ‘gc’
[11:02:02.539]   - Field: ‘conditions’
[11:02:02.539]   - Field: ‘persistent’
[11:02:02.539]   - Field: ‘expr’
[11:02:02.539]   - Field: ‘uuid’
[11:02:02.539]   - Field: ‘seed’
[11:02:02.539]   - Field: ‘version’
[11:02:02.539]   - Field: ‘result’
[11:02:02.539]   - Field: ‘asynchronous’
[11:02:02.539]   - Field: ‘calls’
[11:02:02.539]   - Field: ‘globals’
[11:02:02.540]   - Field: ‘stdout’
[11:02:02.540]   - Field: ‘earlySignal’
[11:02:02.540]   - Field: ‘lazy’
[11:02:02.540]   - Field: ‘state’
[11:02:02.540] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:02:02.540] - Launch lazy future ...
[11:02:02.540] Packages needed by the future expression (n = 1): ‘future’
[11:02:02.540] Packages needed by future strategies (n = 0): <none>
[11:02:02.541] {
[11:02:02.541]     {
[11:02:02.541]         {
[11:02:02.541]             ...future.startTime <- base::Sys.time()
[11:02:02.541]             {
[11:02:02.541]                 {
[11:02:02.541]                   {
[11:02:02.541]                     {
[11:02:02.541]                       {
[11:02:02.541]                         base::local({
[11:02:02.541]                           has_future <- base::requireNamespace("future", 
[11:02:02.541]                             quietly = TRUE)
[11:02:02.541]                           if (has_future) {
[11:02:02.541]                             ns <- base::getNamespace("future")
[11:02:02.541]                             version <- ns[[".package"]][["version"]]
[11:02:02.541]                             if (is.null(version)) 
[11:02:02.541]                               version <- utils::packageVersion("future")
[11:02:02.541]                           }
[11:02:02.541]                           else {
[11:02:02.541]                             version <- NULL
[11:02:02.541]                           }
[11:02:02.541]                           if (!has_future || version < "1.8.0") {
[11:02:02.541]                             info <- base::c(r_version = base::gsub("R version ", 
[11:02:02.541]                               "", base::R.version$version.string), 
[11:02:02.541]                               platform = base::sprintf("%s (%s-bit)", 
[11:02:02.541]                                 base::R.version$platform, 8 * 
[11:02:02.541]                                   base::.Machine$sizeof.pointer), 
[11:02:02.541]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:02.541]                                 "release", "version")], collapse = " "), 
[11:02:02.541]                               hostname = base::Sys.info()[["nodename"]])
[11:02:02.541]                             info <- base::sprintf("%s: %s", base::names(info), 
[11:02:02.541]                               info)
[11:02:02.541]                             info <- base::paste(info, collapse = "; ")
[11:02:02.541]                             if (!has_future) {
[11:02:02.541]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:02.541]                                 info)
[11:02:02.541]                             }
[11:02:02.541]                             else {
[11:02:02.541]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:02.541]                                 info, version)
[11:02:02.541]                             }
[11:02:02.541]                             base::stop(msg)
[11:02:02.541]                           }
[11:02:02.541]                         })
[11:02:02.541]                       }
[11:02:02.541]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:02.541]                       base::options(mc.cores = 1L)
[11:02:02.541]                     }
[11:02:02.541]                     base::local({
[11:02:02.541]                       for (pkg in "future") {
[11:02:02.541]                         base::loadNamespace(pkg)
[11:02:02.541]                         base::library(pkg, character.only = TRUE)
[11:02:02.541]                       }
[11:02:02.541]                     })
[11:02:02.541]                   }
[11:02:02.541]                   ...future.strategy.old <- future::plan("list")
[11:02:02.541]                   options(future.plan = NULL)
[11:02:02.541]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.541]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:02.541]                 }
[11:02:02.541]                 ...future.workdir <- getwd()
[11:02:02.541]             }
[11:02:02.541]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:02.541]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:02.541]         }
[11:02:02.541]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:02.541]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:02.541]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:02.541]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:02.541]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:02.541]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:02.541]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:02.541]             base::names(...future.oldOptions))
[11:02:02.541]     }
[11:02:02.541]     if (FALSE) {
[11:02:02.541]     }
[11:02:02.541]     else {
[11:02:02.541]         if (TRUE) {
[11:02:02.541]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:02.541]                 open = "w")
[11:02:02.541]         }
[11:02:02.541]         else {
[11:02:02.541]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:02.541]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:02.541]         }
[11:02:02.541]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:02.541]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:02.541]             base::sink(type = "output", split = FALSE)
[11:02:02.541]             base::close(...future.stdout)
[11:02:02.541]         }, add = TRUE)
[11:02:02.541]     }
[11:02:02.541]     ...future.frame <- base::sys.nframe()
[11:02:02.541]     ...future.conditions <- base::list()
[11:02:02.541]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:02.541]     if (FALSE) {
[11:02:02.541]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:02.541]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:02.541]     }
[11:02:02.541]     ...future.result <- base::tryCatch({
[11:02:02.541]         base::withCallingHandlers({
[11:02:02.541]             ...future.value <- base::withVisible(base::local({
[11:02:02.541]                 ...future.makeSendCondition <- base::local({
[11:02:02.541]                   sendCondition <- NULL
[11:02:02.541]                   function(frame = 1L) {
[11:02:02.541]                     if (is.function(sendCondition)) 
[11:02:02.541]                       return(sendCondition)
[11:02:02.541]                     ns <- getNamespace("parallel")
[11:02:02.541]                     if (exists("sendData", mode = "function", 
[11:02:02.541]                       envir = ns)) {
[11:02:02.541]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:02.541]                         envir = ns)
[11:02:02.541]                       envir <- sys.frame(frame)
[11:02:02.541]                       master <- NULL
[11:02:02.541]                       while (!identical(envir, .GlobalEnv) && 
[11:02:02.541]                         !identical(envir, emptyenv())) {
[11:02:02.541]                         if (exists("master", mode = "list", envir = envir, 
[11:02:02.541]                           inherits = FALSE)) {
[11:02:02.541]                           master <- get("master", mode = "list", 
[11:02:02.541]                             envir = envir, inherits = FALSE)
[11:02:02.541]                           if (inherits(master, c("SOCKnode", 
[11:02:02.541]                             "SOCK0node"))) {
[11:02:02.541]                             sendCondition <<- function(cond) {
[11:02:02.541]                               data <- list(type = "VALUE", value = cond, 
[11:02:02.541]                                 success = TRUE)
[11:02:02.541]                               parallel_sendData(master, data)
[11:02:02.541]                             }
[11:02:02.541]                             return(sendCondition)
[11:02:02.541]                           }
[11:02:02.541]                         }
[11:02:02.541]                         frame <- frame + 1L
[11:02:02.541]                         envir <- sys.frame(frame)
[11:02:02.541]                       }
[11:02:02.541]                     }
[11:02:02.541]                     sendCondition <<- function(cond) NULL
[11:02:02.541]                   }
[11:02:02.541]                 })
[11:02:02.541]                 withCallingHandlers({
[11:02:02.541]                   {
[11:02:02.541]                     value(f1)
[11:02:02.541]                   }
[11:02:02.541]                 }, immediateCondition = function(cond) {
[11:02:02.541]                   sendCondition <- ...future.makeSendCondition()
[11:02:02.541]                   sendCondition(cond)
[11:02:02.541]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.541]                   {
[11:02:02.541]                     inherits <- base::inherits
[11:02:02.541]                     invokeRestart <- base::invokeRestart
[11:02:02.541]                     is.null <- base::is.null
[11:02:02.541]                     muffled <- FALSE
[11:02:02.541]                     if (inherits(cond, "message")) {
[11:02:02.541]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:02.541]                       if (muffled) 
[11:02:02.541]                         invokeRestart("muffleMessage")
[11:02:02.541]                     }
[11:02:02.541]                     else if (inherits(cond, "warning")) {
[11:02:02.541]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:02.541]                       if (muffled) 
[11:02:02.541]                         invokeRestart("muffleWarning")
[11:02:02.541]                     }
[11:02:02.541]                     else if (inherits(cond, "condition")) {
[11:02:02.541]                       if (!is.null(pattern)) {
[11:02:02.541]                         computeRestarts <- base::computeRestarts
[11:02:02.541]                         grepl <- base::grepl
[11:02:02.541]                         restarts <- computeRestarts(cond)
[11:02:02.541]                         for (restart in restarts) {
[11:02:02.541]                           name <- restart$name
[11:02:02.541]                           if (is.null(name)) 
[11:02:02.541]                             next
[11:02:02.541]                           if (!grepl(pattern, name)) 
[11:02:02.541]                             next
[11:02:02.541]                           invokeRestart(restart)
[11:02:02.541]                           muffled <- TRUE
[11:02:02.541]                           break
[11:02:02.541]                         }
[11:02:02.541]                       }
[11:02:02.541]                     }
[11:02:02.541]                     invisible(muffled)
[11:02:02.541]                   }
[11:02:02.541]                   muffleCondition(cond)
[11:02:02.541]                 })
[11:02:02.541]             }))
[11:02:02.541]             future::FutureResult(value = ...future.value$value, 
[11:02:02.541]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.541]                   ...future.rng), globalenv = if (FALSE) 
[11:02:02.541]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:02.541]                     ...future.globalenv.names))
[11:02:02.541]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:02.541]         }, condition = base::local({
[11:02:02.541]             c <- base::c
[11:02:02.541]             inherits <- base::inherits
[11:02:02.541]             invokeRestart <- base::invokeRestart
[11:02:02.541]             length <- base::length
[11:02:02.541]             list <- base::list
[11:02:02.541]             seq.int <- base::seq.int
[11:02:02.541]             signalCondition <- base::signalCondition
[11:02:02.541]             sys.calls <- base::sys.calls
[11:02:02.541]             `[[` <- base::`[[`
[11:02:02.541]             `+` <- base::`+`
[11:02:02.541]             `<<-` <- base::`<<-`
[11:02:02.541]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:02.541]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:02.541]                   3L)]
[11:02:02.541]             }
[11:02:02.541]             function(cond) {
[11:02:02.541]                 is_error <- inherits(cond, "error")
[11:02:02.541]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:02.541]                   NULL)
[11:02:02.541]                 if (is_error) {
[11:02:02.541]                   sessionInformation <- function() {
[11:02:02.541]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:02.541]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:02.541]                       search = base::search(), system = base::Sys.info())
[11:02:02.541]                   }
[11:02:02.541]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.541]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:02.541]                     cond$call), session = sessionInformation(), 
[11:02:02.541]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:02.541]                   signalCondition(cond)
[11:02:02.541]                 }
[11:02:02.541]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:02.541]                 "immediateCondition"))) {
[11:02:02.541]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:02.541]                   ...future.conditions[[length(...future.conditions) + 
[11:02:02.541]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:02.541]                   if (TRUE && !signal) {
[11:02:02.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.541]                     {
[11:02:02.541]                       inherits <- base::inherits
[11:02:02.541]                       invokeRestart <- base::invokeRestart
[11:02:02.541]                       is.null <- base::is.null
[11:02:02.541]                       muffled <- FALSE
[11:02:02.541]                       if (inherits(cond, "message")) {
[11:02:02.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.541]                         if (muffled) 
[11:02:02.541]                           invokeRestart("muffleMessage")
[11:02:02.541]                       }
[11:02:02.541]                       else if (inherits(cond, "warning")) {
[11:02:02.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.541]                         if (muffled) 
[11:02:02.541]                           invokeRestart("muffleWarning")
[11:02:02.541]                       }
[11:02:02.541]                       else if (inherits(cond, "condition")) {
[11:02:02.541]                         if (!is.null(pattern)) {
[11:02:02.541]                           computeRestarts <- base::computeRestarts
[11:02:02.541]                           grepl <- base::grepl
[11:02:02.541]                           restarts <- computeRestarts(cond)
[11:02:02.541]                           for (restart in restarts) {
[11:02:02.541]                             name <- restart$name
[11:02:02.541]                             if (is.null(name)) 
[11:02:02.541]                               next
[11:02:02.541]                             if (!grepl(pattern, name)) 
[11:02:02.541]                               next
[11:02:02.541]                             invokeRestart(restart)
[11:02:02.541]                             muffled <- TRUE
[11:02:02.541]                             break
[11:02:02.541]                           }
[11:02:02.541]                         }
[11:02:02.541]                       }
[11:02:02.541]                       invisible(muffled)
[11:02:02.541]                     }
[11:02:02.541]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.541]                   }
[11:02:02.541]                 }
[11:02:02.541]                 else {
[11:02:02.541]                   if (TRUE) {
[11:02:02.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:02.541]                     {
[11:02:02.541]                       inherits <- base::inherits
[11:02:02.541]                       invokeRestart <- base::invokeRestart
[11:02:02.541]                       is.null <- base::is.null
[11:02:02.541]                       muffled <- FALSE
[11:02:02.541]                       if (inherits(cond, "message")) {
[11:02:02.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:02.541]                         if (muffled) 
[11:02:02.541]                           invokeRestart("muffleMessage")
[11:02:02.541]                       }
[11:02:02.541]                       else if (inherits(cond, "warning")) {
[11:02:02.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:02.541]                         if (muffled) 
[11:02:02.541]                           invokeRestart("muffleWarning")
[11:02:02.541]                       }
[11:02:02.541]                       else if (inherits(cond, "condition")) {
[11:02:02.541]                         if (!is.null(pattern)) {
[11:02:02.541]                           computeRestarts <- base::computeRestarts
[11:02:02.541]                           grepl <- base::grepl
[11:02:02.541]                           restarts <- computeRestarts(cond)
[11:02:02.541]                           for (restart in restarts) {
[11:02:02.541]                             name <- restart$name
[11:02:02.541]                             if (is.null(name)) 
[11:02:02.541]                               next
[11:02:02.541]                             if (!grepl(pattern, name)) 
[11:02:02.541]                               next
[11:02:02.541]                             invokeRestart(restart)
[11:02:02.541]                             muffled <- TRUE
[11:02:02.541]                             break
[11:02:02.541]                           }
[11:02:02.541]                         }
[11:02:02.541]                       }
[11:02:02.541]                       invisible(muffled)
[11:02:02.541]                     }
[11:02:02.541]                     muffleCondition(cond, pattern = "^muffle")
[11:02:02.541]                   }
[11:02:02.541]                 }
[11:02:02.541]             }
[11:02:02.541]         }))
[11:02:02.541]     }, error = function(ex) {
[11:02:02.541]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:02.541]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:02.541]                 ...future.rng), started = ...future.startTime, 
[11:02:02.541]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:02.541]             version = "1.8"), class = "FutureResult")
[11:02:02.541]     }, finally = {
[11:02:02.541]         if (!identical(...future.workdir, getwd())) 
[11:02:02.541]             setwd(...future.workdir)
[11:02:02.541]         {
[11:02:02.541]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:02.541]                 ...future.oldOptions$nwarnings <- NULL
[11:02:02.541]             }
[11:02:02.541]             base::options(...future.oldOptions)
[11:02:02.541]             if (.Platform$OS.type == "windows") {
[11:02:02.541]                 old_names <- names(...future.oldEnvVars)
[11:02:02.541]                 envs <- base::Sys.getenv()
[11:02:02.541]                 names <- names(envs)
[11:02:02.541]                 common <- intersect(names, old_names)
[11:02:02.541]                 added <- setdiff(names, old_names)
[11:02:02.541]                 removed <- setdiff(old_names, names)
[11:02:02.541]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:02.541]                   envs[common]]
[11:02:02.541]                 NAMES <- toupper(changed)
[11:02:02.541]                 args <- list()
[11:02:02.541]                 for (kk in seq_along(NAMES)) {
[11:02:02.541]                   name <- changed[[kk]]
[11:02:02.541]                   NAME <- NAMES[[kk]]
[11:02:02.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.541]                     next
[11:02:02.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.541]                 }
[11:02:02.541]                 NAMES <- toupper(added)
[11:02:02.541]                 for (kk in seq_along(NAMES)) {
[11:02:02.541]                   name <- added[[kk]]
[11:02:02.541]                   NAME <- NAMES[[kk]]
[11:02:02.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.541]                     next
[11:02:02.541]                   args[[name]] <- ""
[11:02:02.541]                 }
[11:02:02.541]                 NAMES <- toupper(removed)
[11:02:02.541]                 for (kk in seq_along(NAMES)) {
[11:02:02.541]                   name <- removed[[kk]]
[11:02:02.541]                   NAME <- NAMES[[kk]]
[11:02:02.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:02.541]                     next
[11:02:02.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:02.541]                 }
[11:02:02.541]                 if (length(args) > 0) 
[11:02:02.541]                   base::do.call(base::Sys.setenv, args = args)
[11:02:02.541]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:02.541]             }
[11:02:02.541]             else {
[11:02:02.541]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:02.541]             }
[11:02:02.541]             {
[11:02:02.541]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:02.541]                   0L) {
[11:02:02.541]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:02.541]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:02.541]                   base::options(opts)
[11:02:02.541]                 }
[11:02:02.541]                 {
[11:02:02.541]                   {
[11:02:02.541]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:02.541]                     NULL
[11:02:02.541]                   }
[11:02:02.541]                   options(future.plan = NULL)
[11:02:02.541]                   if (is.na(NA_character_)) 
[11:02:02.541]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:02.541]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:02.541]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:02.541]                     .init = FALSE)
[11:02:02.541]                 }
[11:02:02.541]             }
[11:02:02.541]         }
[11:02:02.541]     })
[11:02:02.541]     if (TRUE) {
[11:02:02.541]         base::sink(type = "output", split = FALSE)
[11:02:02.541]         if (TRUE) {
[11:02:02.541]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:02.541]         }
[11:02:02.541]         else {
[11:02:02.541]             ...future.result["stdout"] <- base::list(NULL)
[11:02:02.541]         }
[11:02:02.541]         base::close(...future.stdout)
[11:02:02.541]         ...future.stdout <- NULL
[11:02:02.541]     }
[11:02:02.541]     ...future.result$conditions <- ...future.conditions
[11:02:02.541]     ...future.result$finished <- base::Sys.time()
[11:02:02.541]     ...future.result
[11:02:02.541] }
[11:02:02.602] Exporting 1 global objects (312.13 KiB) to cluster node #2 ...
[11:02:02.613] Exporting ‘f1’ (311.92 KiB) to cluster node #2 ...
[11:02:02.625] Exporting ‘f1’ (311.92 KiB) to cluster node #2 ... DONE
[11:02:02.626] Exporting 1 global objects (312.13 KiB) to cluster node #2 ... DONE
[11:02:02.626] MultisessionFuture started
[11:02:02.626] - Launch lazy future ... done
[11:02:02.626] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 311.92 KiB (MultisessionFuture ‘f1’ of 311.92 KiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 90304434-bc0c-ac58-d336-535d23d0508f
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[11:02:02.654] result() for ClusterFuture ...
[11:02:02.654] receiveMessageFromWorker() for ClusterFuture ...
[11:02:02.654] - Validating connection of MultisessionFuture
[11:02:02.719] - received message: FutureResult
[11:02:02.719] - Received FutureResult
[11:02:02.719] - Erased future from FutureRegistry
[11:02:02.719] result() for ClusterFuture ...
[11:02:02.719] - result already collected: FutureResult
[11:02:02.719] result() for ClusterFuture ... done
[11:02:02.719] signalConditions() ...
[11:02:02.719]  - include = ‘immediateCondition’
[11:02:02.719]  - exclude = 
[11:02:02.720]  - resignal = FALSE
[11:02:02.720]  - Number of conditions: 1
[11:02:02.720] signalConditions() ... done
[11:02:02.720] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.720] result() for ClusterFuture ... done
[11:02:02.720] result() for ClusterFuture ...
[11:02:02.720] - result already collected: FutureResult
[11:02:02.720] result() for ClusterFuture ... done
[11:02:02.720] signalConditions() ...
[11:02:02.720]  - include = ‘immediateCondition’
[11:02:02.720]  - exclude = 
[11:02:02.720]  - resignal = FALSE
[11:02:02.721]  - Number of conditions: 1
[11:02:02.721] signalConditions() ... done
[11:02:02.721] Future state: ‘finished’
[11:02:02.721] result() for ClusterFuture ...
[11:02:02.721] - result already collected: FutureResult
[11:02:02.721] result() for ClusterFuture ... done
[11:02:02.721] signalConditions() ...
[11:02:02.721]  - include = ‘condition’
[11:02:02.721]  - exclude = ‘immediateCondition’
[11:02:02.721]  - resignal = TRUE
[11:02:02.721]  - Number of conditions: 1
[11:02:02.721]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[11:02:02.722] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (90304434-bc0c-ac58-d336-535d23d0508f; pid 81277 on 173ee284ba16) that created it, not by any other R processes (91561768-656f-f54d-604e-053d26ab0c85; pid 81331 on 173ee284ba16): {; 42L; }>


Future UUID: c2966149-7a9d-ea7a-cd66-3e43969821c7


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 90304434-bc0c-ac58-d336-535d23d0508f
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[11:02:02.722] result() for ClusterFuture ...
[11:02:02.723] receiveMessageFromWorker() for ClusterFuture ...
[11:02:02.723] - Validating connection of MultisessionFuture
[11:02:02.723] - received message: FutureResult
[11:02:02.723] - Received FutureResult
[11:02:02.723] - Erased future from FutureRegistry
[11:02:02.723] result() for ClusterFuture ...
[11:02:02.723] - result already collected: FutureResult
[11:02:02.723] result() for ClusterFuture ... done
[11:02:02.723] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:02.723] result() for ClusterFuture ... done
[11:02:02.724] result() for ClusterFuture ...
[11:02:02.724] - result already collected: FutureResult
[11:02:02.724] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[11:02:02.724] plan(): Setting new future strategy stack:
[11:02:02.724] List of future strategies:
[11:02:02.724] 1. FutureStrategy:
[11:02:02.724]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:02.724]    - tweaked: FALSE
[11:02:02.724]    - call: future::plan(oplan)
[11:02:02.725] plan(): nbrOfWorkers() = 1
> 
