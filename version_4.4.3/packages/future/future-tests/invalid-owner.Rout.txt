
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:23.818] plan(): Setting new future strategy stack:
[08:28:23.819] List of future strategies:
[08:28:23.819] 1. sequential:
[08:28:23.819]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:23.819]    - tweaked: FALSE
[08:28:23.819]    - call: future::plan("sequential")
[08:28:23.832] plan(): nbrOfWorkers() = 1
> 
> ## Local functions
> usedNodes <- function(future) {
+   ## Number of unresolved cluster futures
+   workers <- future$workers
+   reg <- sprintf("workers-%s", attr(workers, "name"))
+   c(used = length(future:::FutureRegistry(reg, action = "list")), total = length(workers))
+ }
> 
> ## This test requires at least two background processes
> plan(multisession, workers = 2L)
[08:28:23.849] plan(): Setting new future strategy stack:
[08:28:23.849] List of future strategies:
[08:28:23.849] 1. multisession:
[08:28:23.849]    - args: function (..., workers = 2L, envir = parent.frame())
[08:28:23.849]    - tweaked: TRUE
[08:28:23.849]    - call: plan(multisession, workers = 2L)
[08:28:23.860] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:23.860] multisession:
[08:28:23.860] - args: function (..., workers = 2L, envir = parent.frame())
[08:28:23.860] - tweaked: TRUE
[08:28:23.860] - call: plan(multisession, workers = 2L)
[08:28:23.861] getGlobalsAndPackages() ...
[08:28:23.861] Not searching for globals
[08:28:23.861] - globals: [0] <none>
[08:28:23.861] getGlobalsAndPackages() ... DONE
[08:28:24.326] Packages needed by the future expression (n = 0): <none>
[08:28:24.326] Packages needed by future strategies (n = 0): <none>
[08:28:24.327] {
[08:28:24.327]     {
[08:28:24.327]         {
[08:28:24.327]             ...future.startTime <- base::Sys.time()
[08:28:24.327]             {
[08:28:24.327]                 {
[08:28:24.327]                   {
[08:28:24.327]                     {
[08:28:24.327]                       base::local({
[08:28:24.327]                         has_future <- base::requireNamespace("future", 
[08:28:24.327]                           quietly = TRUE)
[08:28:24.327]                         if (has_future) {
[08:28:24.327]                           ns <- base::getNamespace("future")
[08:28:24.327]                           version <- ns[[".package"]][["version"]]
[08:28:24.327]                           if (is.null(version)) 
[08:28:24.327]                             version <- utils::packageVersion("future")
[08:28:24.327]                         }
[08:28:24.327]                         else {
[08:28:24.327]                           version <- NULL
[08:28:24.327]                         }
[08:28:24.327]                         if (!has_future || version < "1.8.0") {
[08:28:24.327]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.327]                             "", base::R.version$version.string), 
[08:28:24.327]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.327]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.327]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.327]                               "release", "version")], collapse = " "), 
[08:28:24.327]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.327]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.327]                             info)
[08:28:24.327]                           info <- base::paste(info, collapse = "; ")
[08:28:24.327]                           if (!has_future) {
[08:28:24.327]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.327]                               info)
[08:28:24.327]                           }
[08:28:24.327]                           else {
[08:28:24.327]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.327]                               info, version)
[08:28:24.327]                           }
[08:28:24.327]                           base::stop(msg)
[08:28:24.327]                         }
[08:28:24.327]                       })
[08:28:24.327]                     }
[08:28:24.327]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.327]                     base::options(mc.cores = 1L)
[08:28:24.327]                   }
[08:28:24.327]                   ...future.strategy.old <- future::plan("list")
[08:28:24.327]                   options(future.plan = NULL)
[08:28:24.327]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.327]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.327]                 }
[08:28:24.327]                 ...future.workdir <- getwd()
[08:28:24.327]             }
[08:28:24.327]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.327]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.327]         }
[08:28:24.327]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.327]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.327]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.327]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.327]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.327]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.327]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.327]             base::names(...future.oldOptions))
[08:28:24.327]     }
[08:28:24.327]     if (FALSE) {
[08:28:24.327]     }
[08:28:24.327]     else {
[08:28:24.327]         if (TRUE) {
[08:28:24.327]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.327]                 open = "w")
[08:28:24.327]         }
[08:28:24.327]         else {
[08:28:24.327]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.327]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.327]         }
[08:28:24.327]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.327]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.327]             base::sink(type = "output", split = FALSE)
[08:28:24.327]             base::close(...future.stdout)
[08:28:24.327]         }, add = TRUE)
[08:28:24.327]     }
[08:28:24.327]     ...future.frame <- base::sys.nframe()
[08:28:24.327]     ...future.conditions <- base::list()
[08:28:24.327]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.327]     if (FALSE) {
[08:28:24.327]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.327]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.327]     }
[08:28:24.327]     ...future.result <- base::tryCatch({
[08:28:24.327]         base::withCallingHandlers({
[08:28:24.327]             ...future.value <- base::withVisible(base::local({
[08:28:24.327]                 ...future.makeSendCondition <- base::local({
[08:28:24.327]                   sendCondition <- NULL
[08:28:24.327]                   function(frame = 1L) {
[08:28:24.327]                     if (is.function(sendCondition)) 
[08:28:24.327]                       return(sendCondition)
[08:28:24.327]                     ns <- getNamespace("parallel")
[08:28:24.327]                     if (exists("sendData", mode = "function", 
[08:28:24.327]                       envir = ns)) {
[08:28:24.327]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.327]                         envir = ns)
[08:28:24.327]                       envir <- sys.frame(frame)
[08:28:24.327]                       master <- NULL
[08:28:24.327]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.327]                         !identical(envir, emptyenv())) {
[08:28:24.327]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.327]                           inherits = FALSE)) {
[08:28:24.327]                           master <- get("master", mode = "list", 
[08:28:24.327]                             envir = envir, inherits = FALSE)
[08:28:24.327]                           if (inherits(master, c("SOCKnode", 
[08:28:24.327]                             "SOCK0node"))) {
[08:28:24.327]                             sendCondition <<- function(cond) {
[08:28:24.327]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.327]                                 success = TRUE)
[08:28:24.327]                               parallel_sendData(master, data)
[08:28:24.327]                             }
[08:28:24.327]                             return(sendCondition)
[08:28:24.327]                           }
[08:28:24.327]                         }
[08:28:24.327]                         frame <- frame + 1L
[08:28:24.327]                         envir <- sys.frame(frame)
[08:28:24.327]                       }
[08:28:24.327]                     }
[08:28:24.327]                     sendCondition <<- function(cond) NULL
[08:28:24.327]                   }
[08:28:24.327]                 })
[08:28:24.327]                 withCallingHandlers({
[08:28:24.327]                   NA
[08:28:24.327]                 }, immediateCondition = function(cond) {
[08:28:24.327]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.327]                   sendCondition(cond)
[08:28:24.327]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.327]                   {
[08:28:24.327]                     inherits <- base::inherits
[08:28:24.327]                     invokeRestart <- base::invokeRestart
[08:28:24.327]                     is.null <- base::is.null
[08:28:24.327]                     muffled <- FALSE
[08:28:24.327]                     if (inherits(cond, "message")) {
[08:28:24.327]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.327]                       if (muffled) 
[08:28:24.327]                         invokeRestart("muffleMessage")
[08:28:24.327]                     }
[08:28:24.327]                     else if (inherits(cond, "warning")) {
[08:28:24.327]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.327]                       if (muffled) 
[08:28:24.327]                         invokeRestart("muffleWarning")
[08:28:24.327]                     }
[08:28:24.327]                     else if (inherits(cond, "condition")) {
[08:28:24.327]                       if (!is.null(pattern)) {
[08:28:24.327]                         computeRestarts <- base::computeRestarts
[08:28:24.327]                         grepl <- base::grepl
[08:28:24.327]                         restarts <- computeRestarts(cond)
[08:28:24.327]                         for (restart in restarts) {
[08:28:24.327]                           name <- restart$name
[08:28:24.327]                           if (is.null(name)) 
[08:28:24.327]                             next
[08:28:24.327]                           if (!grepl(pattern, name)) 
[08:28:24.327]                             next
[08:28:24.327]                           invokeRestart(restart)
[08:28:24.327]                           muffled <- TRUE
[08:28:24.327]                           break
[08:28:24.327]                         }
[08:28:24.327]                       }
[08:28:24.327]                     }
[08:28:24.327]                     invisible(muffled)
[08:28:24.327]                   }
[08:28:24.327]                   muffleCondition(cond)
[08:28:24.327]                 })
[08:28:24.327]             }))
[08:28:24.327]             future::FutureResult(value = ...future.value$value, 
[08:28:24.327]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.327]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.327]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.327]                     ...future.globalenv.names))
[08:28:24.327]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.327]         }, condition = base::local({
[08:28:24.327]             c <- base::c
[08:28:24.327]             inherits <- base::inherits
[08:28:24.327]             invokeRestart <- base::invokeRestart
[08:28:24.327]             length <- base::length
[08:28:24.327]             list <- base::list
[08:28:24.327]             seq.int <- base::seq.int
[08:28:24.327]             signalCondition <- base::signalCondition
[08:28:24.327]             sys.calls <- base::sys.calls
[08:28:24.327]             `[[` <- base::`[[`
[08:28:24.327]             `+` <- base::`+`
[08:28:24.327]             `<<-` <- base::`<<-`
[08:28:24.327]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.327]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.327]                   3L)]
[08:28:24.327]             }
[08:28:24.327]             function(cond) {
[08:28:24.327]                 is_error <- inherits(cond, "error")
[08:28:24.327]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.327]                   NULL)
[08:28:24.327]                 if (is_error) {
[08:28:24.327]                   sessionInformation <- function() {
[08:28:24.327]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.327]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.327]                       search = base::search(), system = base::Sys.info())
[08:28:24.327]                   }
[08:28:24.327]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.327]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.327]                     cond$call), session = sessionInformation(), 
[08:28:24.327]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.327]                   signalCondition(cond)
[08:28:24.327]                 }
[08:28:24.327]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.327]                 "immediateCondition"))) {
[08:28:24.327]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.327]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.327]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.327]                   if (TRUE && !signal) {
[08:28:24.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.327]                     {
[08:28:24.327]                       inherits <- base::inherits
[08:28:24.327]                       invokeRestart <- base::invokeRestart
[08:28:24.327]                       is.null <- base::is.null
[08:28:24.327]                       muffled <- FALSE
[08:28:24.327]                       if (inherits(cond, "message")) {
[08:28:24.327]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.327]                         if (muffled) 
[08:28:24.327]                           invokeRestart("muffleMessage")
[08:28:24.327]                       }
[08:28:24.327]                       else if (inherits(cond, "warning")) {
[08:28:24.327]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.327]                         if (muffled) 
[08:28:24.327]                           invokeRestart("muffleWarning")
[08:28:24.327]                       }
[08:28:24.327]                       else if (inherits(cond, "condition")) {
[08:28:24.327]                         if (!is.null(pattern)) {
[08:28:24.327]                           computeRestarts <- base::computeRestarts
[08:28:24.327]                           grepl <- base::grepl
[08:28:24.327]                           restarts <- computeRestarts(cond)
[08:28:24.327]                           for (restart in restarts) {
[08:28:24.327]                             name <- restart$name
[08:28:24.327]                             if (is.null(name)) 
[08:28:24.327]                               next
[08:28:24.327]                             if (!grepl(pattern, name)) 
[08:28:24.327]                               next
[08:28:24.327]                             invokeRestart(restart)
[08:28:24.327]                             muffled <- TRUE
[08:28:24.327]                             break
[08:28:24.327]                           }
[08:28:24.327]                         }
[08:28:24.327]                       }
[08:28:24.327]                       invisible(muffled)
[08:28:24.327]                     }
[08:28:24.327]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.327]                   }
[08:28:24.327]                 }
[08:28:24.327]                 else {
[08:28:24.327]                   if (TRUE) {
[08:28:24.327]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.327]                     {
[08:28:24.327]                       inherits <- base::inherits
[08:28:24.327]                       invokeRestart <- base::invokeRestart
[08:28:24.327]                       is.null <- base::is.null
[08:28:24.327]                       muffled <- FALSE
[08:28:24.327]                       if (inherits(cond, "message")) {
[08:28:24.327]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.327]                         if (muffled) 
[08:28:24.327]                           invokeRestart("muffleMessage")
[08:28:24.327]                       }
[08:28:24.327]                       else if (inherits(cond, "warning")) {
[08:28:24.327]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.327]                         if (muffled) 
[08:28:24.327]                           invokeRestart("muffleWarning")
[08:28:24.327]                       }
[08:28:24.327]                       else if (inherits(cond, "condition")) {
[08:28:24.327]                         if (!is.null(pattern)) {
[08:28:24.327]                           computeRestarts <- base::computeRestarts
[08:28:24.327]                           grepl <- base::grepl
[08:28:24.327]                           restarts <- computeRestarts(cond)
[08:28:24.327]                           for (restart in restarts) {
[08:28:24.327]                             name <- restart$name
[08:28:24.327]                             if (is.null(name)) 
[08:28:24.327]                               next
[08:28:24.327]                             if (!grepl(pattern, name)) 
[08:28:24.327]                               next
[08:28:24.327]                             invokeRestart(restart)
[08:28:24.327]                             muffled <- TRUE
[08:28:24.327]                             break
[08:28:24.327]                           }
[08:28:24.327]                         }
[08:28:24.327]                       }
[08:28:24.327]                       invisible(muffled)
[08:28:24.327]                     }
[08:28:24.327]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.327]                   }
[08:28:24.327]                 }
[08:28:24.327]             }
[08:28:24.327]         }))
[08:28:24.327]     }, error = function(ex) {
[08:28:24.327]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.327]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.327]                 ...future.rng), started = ...future.startTime, 
[08:28:24.327]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.327]             version = "1.8"), class = "FutureResult")
[08:28:24.327]     }, finally = {
[08:28:24.327]         if (!identical(...future.workdir, getwd())) 
[08:28:24.327]             setwd(...future.workdir)
[08:28:24.327]         {
[08:28:24.327]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.327]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.327]             }
[08:28:24.327]             base::options(...future.oldOptions)
[08:28:24.327]             if (.Platform$OS.type == "windows") {
[08:28:24.327]                 old_names <- names(...future.oldEnvVars)
[08:28:24.327]                 envs <- base::Sys.getenv()
[08:28:24.327]                 names <- names(envs)
[08:28:24.327]                 common <- intersect(names, old_names)
[08:28:24.327]                 added <- setdiff(names, old_names)
[08:28:24.327]                 removed <- setdiff(old_names, names)
[08:28:24.327]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.327]                   envs[common]]
[08:28:24.327]                 NAMES <- toupper(changed)
[08:28:24.327]                 args <- list()
[08:28:24.327]                 for (kk in seq_along(NAMES)) {
[08:28:24.327]                   name <- changed[[kk]]
[08:28:24.327]                   NAME <- NAMES[[kk]]
[08:28:24.327]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.327]                     next
[08:28:24.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.327]                 }
[08:28:24.327]                 NAMES <- toupper(added)
[08:28:24.327]                 for (kk in seq_along(NAMES)) {
[08:28:24.327]                   name <- added[[kk]]
[08:28:24.327]                   NAME <- NAMES[[kk]]
[08:28:24.327]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.327]                     next
[08:28:24.327]                   args[[name]] <- ""
[08:28:24.327]                 }
[08:28:24.327]                 NAMES <- toupper(removed)
[08:28:24.327]                 for (kk in seq_along(NAMES)) {
[08:28:24.327]                   name <- removed[[kk]]
[08:28:24.327]                   NAME <- NAMES[[kk]]
[08:28:24.327]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.327]                     next
[08:28:24.327]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.327]                 }
[08:28:24.327]                 if (length(args) > 0) 
[08:28:24.327]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.327]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.327]             }
[08:28:24.327]             else {
[08:28:24.327]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.327]             }
[08:28:24.327]             {
[08:28:24.327]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.327]                   0L) {
[08:28:24.327]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.327]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.327]                   base::options(opts)
[08:28:24.327]                 }
[08:28:24.327]                 {
[08:28:24.327]                   {
[08:28:24.327]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.327]                     NULL
[08:28:24.327]                   }
[08:28:24.327]                   options(future.plan = NULL)
[08:28:24.327]                   if (is.na(NA_character_)) 
[08:28:24.327]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.327]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.327]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.327]                     .init = FALSE)
[08:28:24.327]                 }
[08:28:24.327]             }
[08:28:24.327]         }
[08:28:24.327]     })
[08:28:24.327]     if (TRUE) {
[08:28:24.327]         base::sink(type = "output", split = FALSE)
[08:28:24.327]         if (TRUE) {
[08:28:24.327]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.327]         }
[08:28:24.327]         else {
[08:28:24.327]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.327]         }
[08:28:24.327]         base::close(...future.stdout)
[08:28:24.327]         ...future.stdout <- NULL
[08:28:24.327]     }
[08:28:24.327]     ...future.result$conditions <- ...future.conditions
[08:28:24.327]     ...future.result$finished <- base::Sys.time()
[08:28:24.327]     ...future.result
[08:28:24.327] }
[08:28:24.379] MultisessionFuture started
[08:28:24.380] result() for ClusterFuture ...
[08:28:24.380] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.380] - Validating connection of MultisessionFuture
[08:28:24.410] - received message: FutureResult
[08:28:24.410] - Received FutureResult
[08:28:24.413] - Erased future from FutureRegistry
[08:28:24.413] result() for ClusterFuture ...
[08:28:24.413] - result already collected: FutureResult
[08:28:24.413] result() for ClusterFuture ... done
[08:28:24.413] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:24.414] result() for ClusterFuture ... done
[08:28:24.414] result() for ClusterFuture ...
[08:28:24.414] - result already collected: FutureResult
[08:28:24.414] result() for ClusterFuture ... done
[08:28:24.414] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:24.414] plan(): nbrOfWorkers() = 2
> 
> message("*** future() - invalid ownership ...")
*** future() - invalid ownership ...
> 
> ## This R process
> session_uuid <- future:::session_uuid(attributes = TRUE)
> cat(sprintf("Main R process: %s\n", session_uuid))
Main R process: 0e2aac7a-e8a5-0071-780a-80dfff2eea33
> 
> message("- Asserting ownership ...")
- Asserting ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ future:::session_uuid(attributes = TRUE) })
[08:28:24.415] getGlobalsAndPackages() ...
[08:28:24.415] Searching for globals...
[08:28:24.420] - globals found: [2] ‘{’, ‘:::’
[08:28:24.421] Searching for globals ... DONE
[08:28:24.421] Resolving globals: FALSE
[08:28:24.421] 
[08:28:24.421] 
[08:28:24.421] getGlobalsAndPackages() ... DONE
[08:28:24.422] run() for ‘Future’ ...
[08:28:24.422] - state: ‘created’
[08:28:24.422] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:24.435] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:24.435] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:24.435]   - Field: ‘node’
[08:28:24.435]   - Field: ‘label’
[08:28:24.435]   - Field: ‘local’
[08:28:24.435]   - Field: ‘owner’
[08:28:24.435]   - Field: ‘envir’
[08:28:24.435]   - Field: ‘workers’
[08:28:24.435]   - Field: ‘packages’
[08:28:24.436]   - Field: ‘gc’
[08:28:24.436]   - Field: ‘conditions’
[08:28:24.436]   - Field: ‘persistent’
[08:28:24.436]   - Field: ‘expr’
[08:28:24.436]   - Field: ‘uuid’
[08:28:24.436]   - Field: ‘seed’
[08:28:24.436]   - Field: ‘version’
[08:28:24.436]   - Field: ‘result’
[08:28:24.436]   - Field: ‘asynchronous’
[08:28:24.436]   - Field: ‘calls’
[08:28:24.436]   - Field: ‘globals’
[08:28:24.437]   - Field: ‘stdout’
[08:28:24.437]   - Field: ‘earlySignal’
[08:28:24.437]   - Field: ‘lazy’
[08:28:24.437]   - Field: ‘state’
[08:28:24.437] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:24.437] - Launch lazy future ...
[08:28:24.437] Packages needed by the future expression (n = 0): <none>
[08:28:24.437] Packages needed by future strategies (n = 0): <none>
[08:28:24.438] {
[08:28:24.438]     {
[08:28:24.438]         {
[08:28:24.438]             ...future.startTime <- base::Sys.time()
[08:28:24.438]             {
[08:28:24.438]                 {
[08:28:24.438]                   {
[08:28:24.438]                     {
[08:28:24.438]                       base::local({
[08:28:24.438]                         has_future <- base::requireNamespace("future", 
[08:28:24.438]                           quietly = TRUE)
[08:28:24.438]                         if (has_future) {
[08:28:24.438]                           ns <- base::getNamespace("future")
[08:28:24.438]                           version <- ns[[".package"]][["version"]]
[08:28:24.438]                           if (is.null(version)) 
[08:28:24.438]                             version <- utils::packageVersion("future")
[08:28:24.438]                         }
[08:28:24.438]                         else {
[08:28:24.438]                           version <- NULL
[08:28:24.438]                         }
[08:28:24.438]                         if (!has_future || version < "1.8.0") {
[08:28:24.438]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.438]                             "", base::R.version$version.string), 
[08:28:24.438]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.438]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.438]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.438]                               "release", "version")], collapse = " "), 
[08:28:24.438]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.438]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.438]                             info)
[08:28:24.438]                           info <- base::paste(info, collapse = "; ")
[08:28:24.438]                           if (!has_future) {
[08:28:24.438]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.438]                               info)
[08:28:24.438]                           }
[08:28:24.438]                           else {
[08:28:24.438]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.438]                               info, version)
[08:28:24.438]                           }
[08:28:24.438]                           base::stop(msg)
[08:28:24.438]                         }
[08:28:24.438]                       })
[08:28:24.438]                     }
[08:28:24.438]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.438]                     base::options(mc.cores = 1L)
[08:28:24.438]                   }
[08:28:24.438]                   ...future.strategy.old <- future::plan("list")
[08:28:24.438]                   options(future.plan = NULL)
[08:28:24.438]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.438]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.438]                 }
[08:28:24.438]                 ...future.workdir <- getwd()
[08:28:24.438]             }
[08:28:24.438]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.438]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.438]         }
[08:28:24.438]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.438]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.438]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.438]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.438]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.438]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.438]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.438]             base::names(...future.oldOptions))
[08:28:24.438]     }
[08:28:24.438]     if (FALSE) {
[08:28:24.438]     }
[08:28:24.438]     else {
[08:28:24.438]         if (TRUE) {
[08:28:24.438]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.438]                 open = "w")
[08:28:24.438]         }
[08:28:24.438]         else {
[08:28:24.438]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.438]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.438]         }
[08:28:24.438]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.438]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.438]             base::sink(type = "output", split = FALSE)
[08:28:24.438]             base::close(...future.stdout)
[08:28:24.438]         }, add = TRUE)
[08:28:24.438]     }
[08:28:24.438]     ...future.frame <- base::sys.nframe()
[08:28:24.438]     ...future.conditions <- base::list()
[08:28:24.438]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.438]     if (FALSE) {
[08:28:24.438]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.438]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.438]     }
[08:28:24.438]     ...future.result <- base::tryCatch({
[08:28:24.438]         base::withCallingHandlers({
[08:28:24.438]             ...future.value <- base::withVisible(base::local({
[08:28:24.438]                 ...future.makeSendCondition <- base::local({
[08:28:24.438]                   sendCondition <- NULL
[08:28:24.438]                   function(frame = 1L) {
[08:28:24.438]                     if (is.function(sendCondition)) 
[08:28:24.438]                       return(sendCondition)
[08:28:24.438]                     ns <- getNamespace("parallel")
[08:28:24.438]                     if (exists("sendData", mode = "function", 
[08:28:24.438]                       envir = ns)) {
[08:28:24.438]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.438]                         envir = ns)
[08:28:24.438]                       envir <- sys.frame(frame)
[08:28:24.438]                       master <- NULL
[08:28:24.438]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.438]                         !identical(envir, emptyenv())) {
[08:28:24.438]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.438]                           inherits = FALSE)) {
[08:28:24.438]                           master <- get("master", mode = "list", 
[08:28:24.438]                             envir = envir, inherits = FALSE)
[08:28:24.438]                           if (inherits(master, c("SOCKnode", 
[08:28:24.438]                             "SOCK0node"))) {
[08:28:24.438]                             sendCondition <<- function(cond) {
[08:28:24.438]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.438]                                 success = TRUE)
[08:28:24.438]                               parallel_sendData(master, data)
[08:28:24.438]                             }
[08:28:24.438]                             return(sendCondition)
[08:28:24.438]                           }
[08:28:24.438]                         }
[08:28:24.438]                         frame <- frame + 1L
[08:28:24.438]                         envir <- sys.frame(frame)
[08:28:24.438]                       }
[08:28:24.438]                     }
[08:28:24.438]                     sendCondition <<- function(cond) NULL
[08:28:24.438]                   }
[08:28:24.438]                 })
[08:28:24.438]                 withCallingHandlers({
[08:28:24.438]                   {
[08:28:24.438]                     future:::session_uuid(attributes = TRUE)
[08:28:24.438]                   }
[08:28:24.438]                 }, immediateCondition = function(cond) {
[08:28:24.438]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.438]                   sendCondition(cond)
[08:28:24.438]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.438]                   {
[08:28:24.438]                     inherits <- base::inherits
[08:28:24.438]                     invokeRestart <- base::invokeRestart
[08:28:24.438]                     is.null <- base::is.null
[08:28:24.438]                     muffled <- FALSE
[08:28:24.438]                     if (inherits(cond, "message")) {
[08:28:24.438]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.438]                       if (muffled) 
[08:28:24.438]                         invokeRestart("muffleMessage")
[08:28:24.438]                     }
[08:28:24.438]                     else if (inherits(cond, "warning")) {
[08:28:24.438]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.438]                       if (muffled) 
[08:28:24.438]                         invokeRestart("muffleWarning")
[08:28:24.438]                     }
[08:28:24.438]                     else if (inherits(cond, "condition")) {
[08:28:24.438]                       if (!is.null(pattern)) {
[08:28:24.438]                         computeRestarts <- base::computeRestarts
[08:28:24.438]                         grepl <- base::grepl
[08:28:24.438]                         restarts <- computeRestarts(cond)
[08:28:24.438]                         for (restart in restarts) {
[08:28:24.438]                           name <- restart$name
[08:28:24.438]                           if (is.null(name)) 
[08:28:24.438]                             next
[08:28:24.438]                           if (!grepl(pattern, name)) 
[08:28:24.438]                             next
[08:28:24.438]                           invokeRestart(restart)
[08:28:24.438]                           muffled <- TRUE
[08:28:24.438]                           break
[08:28:24.438]                         }
[08:28:24.438]                       }
[08:28:24.438]                     }
[08:28:24.438]                     invisible(muffled)
[08:28:24.438]                   }
[08:28:24.438]                   muffleCondition(cond)
[08:28:24.438]                 })
[08:28:24.438]             }))
[08:28:24.438]             future::FutureResult(value = ...future.value$value, 
[08:28:24.438]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.438]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.438]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.438]                     ...future.globalenv.names))
[08:28:24.438]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.438]         }, condition = base::local({
[08:28:24.438]             c <- base::c
[08:28:24.438]             inherits <- base::inherits
[08:28:24.438]             invokeRestart <- base::invokeRestart
[08:28:24.438]             length <- base::length
[08:28:24.438]             list <- base::list
[08:28:24.438]             seq.int <- base::seq.int
[08:28:24.438]             signalCondition <- base::signalCondition
[08:28:24.438]             sys.calls <- base::sys.calls
[08:28:24.438]             `[[` <- base::`[[`
[08:28:24.438]             `+` <- base::`+`
[08:28:24.438]             `<<-` <- base::`<<-`
[08:28:24.438]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.438]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.438]                   3L)]
[08:28:24.438]             }
[08:28:24.438]             function(cond) {
[08:28:24.438]                 is_error <- inherits(cond, "error")
[08:28:24.438]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.438]                   NULL)
[08:28:24.438]                 if (is_error) {
[08:28:24.438]                   sessionInformation <- function() {
[08:28:24.438]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.438]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.438]                       search = base::search(), system = base::Sys.info())
[08:28:24.438]                   }
[08:28:24.438]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.438]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.438]                     cond$call), session = sessionInformation(), 
[08:28:24.438]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.438]                   signalCondition(cond)
[08:28:24.438]                 }
[08:28:24.438]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.438]                 "immediateCondition"))) {
[08:28:24.438]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.438]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.438]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.438]                   if (TRUE && !signal) {
[08:28:24.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.438]                     {
[08:28:24.438]                       inherits <- base::inherits
[08:28:24.438]                       invokeRestart <- base::invokeRestart
[08:28:24.438]                       is.null <- base::is.null
[08:28:24.438]                       muffled <- FALSE
[08:28:24.438]                       if (inherits(cond, "message")) {
[08:28:24.438]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.438]                         if (muffled) 
[08:28:24.438]                           invokeRestart("muffleMessage")
[08:28:24.438]                       }
[08:28:24.438]                       else if (inherits(cond, "warning")) {
[08:28:24.438]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.438]                         if (muffled) 
[08:28:24.438]                           invokeRestart("muffleWarning")
[08:28:24.438]                       }
[08:28:24.438]                       else if (inherits(cond, "condition")) {
[08:28:24.438]                         if (!is.null(pattern)) {
[08:28:24.438]                           computeRestarts <- base::computeRestarts
[08:28:24.438]                           grepl <- base::grepl
[08:28:24.438]                           restarts <- computeRestarts(cond)
[08:28:24.438]                           for (restart in restarts) {
[08:28:24.438]                             name <- restart$name
[08:28:24.438]                             if (is.null(name)) 
[08:28:24.438]                               next
[08:28:24.438]                             if (!grepl(pattern, name)) 
[08:28:24.438]                               next
[08:28:24.438]                             invokeRestart(restart)
[08:28:24.438]                             muffled <- TRUE
[08:28:24.438]                             break
[08:28:24.438]                           }
[08:28:24.438]                         }
[08:28:24.438]                       }
[08:28:24.438]                       invisible(muffled)
[08:28:24.438]                     }
[08:28:24.438]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.438]                   }
[08:28:24.438]                 }
[08:28:24.438]                 else {
[08:28:24.438]                   if (TRUE) {
[08:28:24.438]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.438]                     {
[08:28:24.438]                       inherits <- base::inherits
[08:28:24.438]                       invokeRestart <- base::invokeRestart
[08:28:24.438]                       is.null <- base::is.null
[08:28:24.438]                       muffled <- FALSE
[08:28:24.438]                       if (inherits(cond, "message")) {
[08:28:24.438]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.438]                         if (muffled) 
[08:28:24.438]                           invokeRestart("muffleMessage")
[08:28:24.438]                       }
[08:28:24.438]                       else if (inherits(cond, "warning")) {
[08:28:24.438]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.438]                         if (muffled) 
[08:28:24.438]                           invokeRestart("muffleWarning")
[08:28:24.438]                       }
[08:28:24.438]                       else if (inherits(cond, "condition")) {
[08:28:24.438]                         if (!is.null(pattern)) {
[08:28:24.438]                           computeRestarts <- base::computeRestarts
[08:28:24.438]                           grepl <- base::grepl
[08:28:24.438]                           restarts <- computeRestarts(cond)
[08:28:24.438]                           for (restart in restarts) {
[08:28:24.438]                             name <- restart$name
[08:28:24.438]                             if (is.null(name)) 
[08:28:24.438]                               next
[08:28:24.438]                             if (!grepl(pattern, name)) 
[08:28:24.438]                               next
[08:28:24.438]                             invokeRestart(restart)
[08:28:24.438]                             muffled <- TRUE
[08:28:24.438]                             break
[08:28:24.438]                           }
[08:28:24.438]                         }
[08:28:24.438]                       }
[08:28:24.438]                       invisible(muffled)
[08:28:24.438]                     }
[08:28:24.438]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.438]                   }
[08:28:24.438]                 }
[08:28:24.438]             }
[08:28:24.438]         }))
[08:28:24.438]     }, error = function(ex) {
[08:28:24.438]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.438]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.438]                 ...future.rng), started = ...future.startTime, 
[08:28:24.438]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.438]             version = "1.8"), class = "FutureResult")
[08:28:24.438]     }, finally = {
[08:28:24.438]         if (!identical(...future.workdir, getwd())) 
[08:28:24.438]             setwd(...future.workdir)
[08:28:24.438]         {
[08:28:24.438]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.438]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.438]             }
[08:28:24.438]             base::options(...future.oldOptions)
[08:28:24.438]             if (.Platform$OS.type == "windows") {
[08:28:24.438]                 old_names <- names(...future.oldEnvVars)
[08:28:24.438]                 envs <- base::Sys.getenv()
[08:28:24.438]                 names <- names(envs)
[08:28:24.438]                 common <- intersect(names, old_names)
[08:28:24.438]                 added <- setdiff(names, old_names)
[08:28:24.438]                 removed <- setdiff(old_names, names)
[08:28:24.438]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.438]                   envs[common]]
[08:28:24.438]                 NAMES <- toupper(changed)
[08:28:24.438]                 args <- list()
[08:28:24.438]                 for (kk in seq_along(NAMES)) {
[08:28:24.438]                   name <- changed[[kk]]
[08:28:24.438]                   NAME <- NAMES[[kk]]
[08:28:24.438]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.438]                     next
[08:28:24.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.438]                 }
[08:28:24.438]                 NAMES <- toupper(added)
[08:28:24.438]                 for (kk in seq_along(NAMES)) {
[08:28:24.438]                   name <- added[[kk]]
[08:28:24.438]                   NAME <- NAMES[[kk]]
[08:28:24.438]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.438]                     next
[08:28:24.438]                   args[[name]] <- ""
[08:28:24.438]                 }
[08:28:24.438]                 NAMES <- toupper(removed)
[08:28:24.438]                 for (kk in seq_along(NAMES)) {
[08:28:24.438]                   name <- removed[[kk]]
[08:28:24.438]                   NAME <- NAMES[[kk]]
[08:28:24.438]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.438]                     next
[08:28:24.438]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.438]                 }
[08:28:24.438]                 if (length(args) > 0) 
[08:28:24.438]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.438]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.438]             }
[08:28:24.438]             else {
[08:28:24.438]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.438]             }
[08:28:24.438]             {
[08:28:24.438]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.438]                   0L) {
[08:28:24.438]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.438]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.438]                   base::options(opts)
[08:28:24.438]                 }
[08:28:24.438]                 {
[08:28:24.438]                   {
[08:28:24.438]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.438]                     NULL
[08:28:24.438]                   }
[08:28:24.438]                   options(future.plan = NULL)
[08:28:24.438]                   if (is.na(NA_character_)) 
[08:28:24.438]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.438]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.438]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.438]                     .init = FALSE)
[08:28:24.438]                 }
[08:28:24.438]             }
[08:28:24.438]         }
[08:28:24.438]     })
[08:28:24.438]     if (TRUE) {
[08:28:24.438]         base::sink(type = "output", split = FALSE)
[08:28:24.438]         if (TRUE) {
[08:28:24.438]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.438]         }
[08:28:24.438]         else {
[08:28:24.438]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.438]         }
[08:28:24.438]         base::close(...future.stdout)
[08:28:24.438]         ...future.stdout <- NULL
[08:28:24.438]     }
[08:28:24.438]     ...future.result$conditions <- ...future.conditions
[08:28:24.438]     ...future.result$finished <- base::Sys.time()
[08:28:24.438]     ...future.result
[08:28:24.438] }
[08:28:24.441] MultisessionFuture started
[08:28:24.441] - Launch lazy future ... done
[08:28:24.441] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f1, "MultisessionFuture"))
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> v1 <- value(f1)
[08:28:24.441] result() for ClusterFuture ...
[08:28:24.441] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.442] - Validating connection of MultisessionFuture
[08:28:24.483] - received message: FutureResult
[08:28:24.483] - Received FutureResult
[08:28:24.483] - Erased future from FutureRegistry
[08:28:24.484] result() for ClusterFuture ...
[08:28:24.484] - result already collected: FutureResult
[08:28:24.484] result() for ClusterFuture ... done
[08:28:24.484] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:24.484] result() for ClusterFuture ... done
[08:28:24.484] result() for ClusterFuture ...
[08:28:24.484] - result already collected: FutureResult
[08:28:24.484] result() for ClusterFuture ... done
> cat(sprintf("Future #1 R process: %s\n", v1))
Future #1 R process: bd3301c8-d0c5-10ef-3609-afd64bf8a902
> stopifnot(v1 != session_uuid)
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ future:::session_uuid(attributes = TRUE) })
[08:28:24.484] getGlobalsAndPackages() ...
[08:28:24.485] Searching for globals...
[08:28:24.485] - globals found: [2] ‘{’, ‘:::’
[08:28:24.486] Searching for globals ... DONE
[08:28:24.486] Resolving globals: FALSE
[08:28:24.486] 
[08:28:24.486] 
[08:28:24.486] getGlobalsAndPackages() ... DONE
[08:28:24.486] run() for ‘Future’ ...
[08:28:24.487] - state: ‘created’
[08:28:24.487] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:24.500] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:24.500] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:24.501]   - Field: ‘node’
[08:28:24.501]   - Field: ‘label’
[08:28:24.501]   - Field: ‘local’
[08:28:24.501]   - Field: ‘owner’
[08:28:24.501]   - Field: ‘envir’
[08:28:24.501]   - Field: ‘workers’
[08:28:24.501]   - Field: ‘packages’
[08:28:24.501]   - Field: ‘gc’
[08:28:24.501]   - Field: ‘conditions’
[08:28:24.501]   - Field: ‘persistent’
[08:28:24.501]   - Field: ‘expr’
[08:28:24.502]   - Field: ‘uuid’
[08:28:24.502]   - Field: ‘seed’
[08:28:24.502]   - Field: ‘version’
[08:28:24.502]   - Field: ‘result’
[08:28:24.502]   - Field: ‘asynchronous’
[08:28:24.502]   - Field: ‘calls’
[08:28:24.502]   - Field: ‘globals’
[08:28:24.502]   - Field: ‘stdout’
[08:28:24.502]   - Field: ‘earlySignal’
[08:28:24.502]   - Field: ‘lazy’
[08:28:24.502]   - Field: ‘state’
[08:28:24.502] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:24.503] - Launch lazy future ...
[08:28:24.503] Packages needed by the future expression (n = 0): <none>
[08:28:24.503] Packages needed by future strategies (n = 0): <none>
[08:28:24.503] {
[08:28:24.503]     {
[08:28:24.503]         {
[08:28:24.503]             ...future.startTime <- base::Sys.time()
[08:28:24.503]             {
[08:28:24.503]                 {
[08:28:24.503]                   {
[08:28:24.503]                     {
[08:28:24.503]                       base::local({
[08:28:24.503]                         has_future <- base::requireNamespace("future", 
[08:28:24.503]                           quietly = TRUE)
[08:28:24.503]                         if (has_future) {
[08:28:24.503]                           ns <- base::getNamespace("future")
[08:28:24.503]                           version <- ns[[".package"]][["version"]]
[08:28:24.503]                           if (is.null(version)) 
[08:28:24.503]                             version <- utils::packageVersion("future")
[08:28:24.503]                         }
[08:28:24.503]                         else {
[08:28:24.503]                           version <- NULL
[08:28:24.503]                         }
[08:28:24.503]                         if (!has_future || version < "1.8.0") {
[08:28:24.503]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.503]                             "", base::R.version$version.string), 
[08:28:24.503]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.503]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.503]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.503]                               "release", "version")], collapse = " "), 
[08:28:24.503]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.503]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.503]                             info)
[08:28:24.503]                           info <- base::paste(info, collapse = "; ")
[08:28:24.503]                           if (!has_future) {
[08:28:24.503]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.503]                               info)
[08:28:24.503]                           }
[08:28:24.503]                           else {
[08:28:24.503]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.503]                               info, version)
[08:28:24.503]                           }
[08:28:24.503]                           base::stop(msg)
[08:28:24.503]                         }
[08:28:24.503]                       })
[08:28:24.503]                     }
[08:28:24.503]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.503]                     base::options(mc.cores = 1L)
[08:28:24.503]                   }
[08:28:24.503]                   ...future.strategy.old <- future::plan("list")
[08:28:24.503]                   options(future.plan = NULL)
[08:28:24.503]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.503]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.503]                 }
[08:28:24.503]                 ...future.workdir <- getwd()
[08:28:24.503]             }
[08:28:24.503]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.503]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.503]         }
[08:28:24.503]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.503]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.503]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.503]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.503]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.503]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.503]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.503]             base::names(...future.oldOptions))
[08:28:24.503]     }
[08:28:24.503]     if (FALSE) {
[08:28:24.503]     }
[08:28:24.503]     else {
[08:28:24.503]         if (TRUE) {
[08:28:24.503]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.503]                 open = "w")
[08:28:24.503]         }
[08:28:24.503]         else {
[08:28:24.503]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.503]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.503]         }
[08:28:24.503]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.503]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.503]             base::sink(type = "output", split = FALSE)
[08:28:24.503]             base::close(...future.stdout)
[08:28:24.503]         }, add = TRUE)
[08:28:24.503]     }
[08:28:24.503]     ...future.frame <- base::sys.nframe()
[08:28:24.503]     ...future.conditions <- base::list()
[08:28:24.503]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.503]     if (FALSE) {
[08:28:24.503]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.503]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.503]     }
[08:28:24.503]     ...future.result <- base::tryCatch({
[08:28:24.503]         base::withCallingHandlers({
[08:28:24.503]             ...future.value <- base::withVisible(base::local({
[08:28:24.503]                 ...future.makeSendCondition <- base::local({
[08:28:24.503]                   sendCondition <- NULL
[08:28:24.503]                   function(frame = 1L) {
[08:28:24.503]                     if (is.function(sendCondition)) 
[08:28:24.503]                       return(sendCondition)
[08:28:24.503]                     ns <- getNamespace("parallel")
[08:28:24.503]                     if (exists("sendData", mode = "function", 
[08:28:24.503]                       envir = ns)) {
[08:28:24.503]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.503]                         envir = ns)
[08:28:24.503]                       envir <- sys.frame(frame)
[08:28:24.503]                       master <- NULL
[08:28:24.503]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.503]                         !identical(envir, emptyenv())) {
[08:28:24.503]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.503]                           inherits = FALSE)) {
[08:28:24.503]                           master <- get("master", mode = "list", 
[08:28:24.503]                             envir = envir, inherits = FALSE)
[08:28:24.503]                           if (inherits(master, c("SOCKnode", 
[08:28:24.503]                             "SOCK0node"))) {
[08:28:24.503]                             sendCondition <<- function(cond) {
[08:28:24.503]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.503]                                 success = TRUE)
[08:28:24.503]                               parallel_sendData(master, data)
[08:28:24.503]                             }
[08:28:24.503]                             return(sendCondition)
[08:28:24.503]                           }
[08:28:24.503]                         }
[08:28:24.503]                         frame <- frame + 1L
[08:28:24.503]                         envir <- sys.frame(frame)
[08:28:24.503]                       }
[08:28:24.503]                     }
[08:28:24.503]                     sendCondition <<- function(cond) NULL
[08:28:24.503]                   }
[08:28:24.503]                 })
[08:28:24.503]                 withCallingHandlers({
[08:28:24.503]                   {
[08:28:24.503]                     future:::session_uuid(attributes = TRUE)
[08:28:24.503]                   }
[08:28:24.503]                 }, immediateCondition = function(cond) {
[08:28:24.503]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.503]                   sendCondition(cond)
[08:28:24.503]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.503]                   {
[08:28:24.503]                     inherits <- base::inherits
[08:28:24.503]                     invokeRestart <- base::invokeRestart
[08:28:24.503]                     is.null <- base::is.null
[08:28:24.503]                     muffled <- FALSE
[08:28:24.503]                     if (inherits(cond, "message")) {
[08:28:24.503]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.503]                       if (muffled) 
[08:28:24.503]                         invokeRestart("muffleMessage")
[08:28:24.503]                     }
[08:28:24.503]                     else if (inherits(cond, "warning")) {
[08:28:24.503]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.503]                       if (muffled) 
[08:28:24.503]                         invokeRestart("muffleWarning")
[08:28:24.503]                     }
[08:28:24.503]                     else if (inherits(cond, "condition")) {
[08:28:24.503]                       if (!is.null(pattern)) {
[08:28:24.503]                         computeRestarts <- base::computeRestarts
[08:28:24.503]                         grepl <- base::grepl
[08:28:24.503]                         restarts <- computeRestarts(cond)
[08:28:24.503]                         for (restart in restarts) {
[08:28:24.503]                           name <- restart$name
[08:28:24.503]                           if (is.null(name)) 
[08:28:24.503]                             next
[08:28:24.503]                           if (!grepl(pattern, name)) 
[08:28:24.503]                             next
[08:28:24.503]                           invokeRestart(restart)
[08:28:24.503]                           muffled <- TRUE
[08:28:24.503]                           break
[08:28:24.503]                         }
[08:28:24.503]                       }
[08:28:24.503]                     }
[08:28:24.503]                     invisible(muffled)
[08:28:24.503]                   }
[08:28:24.503]                   muffleCondition(cond)
[08:28:24.503]                 })
[08:28:24.503]             }))
[08:28:24.503]             future::FutureResult(value = ...future.value$value, 
[08:28:24.503]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.503]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.503]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.503]                     ...future.globalenv.names))
[08:28:24.503]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.503]         }, condition = base::local({
[08:28:24.503]             c <- base::c
[08:28:24.503]             inherits <- base::inherits
[08:28:24.503]             invokeRestart <- base::invokeRestart
[08:28:24.503]             length <- base::length
[08:28:24.503]             list <- base::list
[08:28:24.503]             seq.int <- base::seq.int
[08:28:24.503]             signalCondition <- base::signalCondition
[08:28:24.503]             sys.calls <- base::sys.calls
[08:28:24.503]             `[[` <- base::`[[`
[08:28:24.503]             `+` <- base::`+`
[08:28:24.503]             `<<-` <- base::`<<-`
[08:28:24.503]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.503]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.503]                   3L)]
[08:28:24.503]             }
[08:28:24.503]             function(cond) {
[08:28:24.503]                 is_error <- inherits(cond, "error")
[08:28:24.503]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.503]                   NULL)
[08:28:24.503]                 if (is_error) {
[08:28:24.503]                   sessionInformation <- function() {
[08:28:24.503]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.503]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.503]                       search = base::search(), system = base::Sys.info())
[08:28:24.503]                   }
[08:28:24.503]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.503]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.503]                     cond$call), session = sessionInformation(), 
[08:28:24.503]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.503]                   signalCondition(cond)
[08:28:24.503]                 }
[08:28:24.503]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.503]                 "immediateCondition"))) {
[08:28:24.503]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.503]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.503]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.503]                   if (TRUE && !signal) {
[08:28:24.503]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.503]                     {
[08:28:24.503]                       inherits <- base::inherits
[08:28:24.503]                       invokeRestart <- base::invokeRestart
[08:28:24.503]                       is.null <- base::is.null
[08:28:24.503]                       muffled <- FALSE
[08:28:24.503]                       if (inherits(cond, "message")) {
[08:28:24.503]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.503]                         if (muffled) 
[08:28:24.503]                           invokeRestart("muffleMessage")
[08:28:24.503]                       }
[08:28:24.503]                       else if (inherits(cond, "warning")) {
[08:28:24.503]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.503]                         if (muffled) 
[08:28:24.503]                           invokeRestart("muffleWarning")
[08:28:24.503]                       }
[08:28:24.503]                       else if (inherits(cond, "condition")) {
[08:28:24.503]                         if (!is.null(pattern)) {
[08:28:24.503]                           computeRestarts <- base::computeRestarts
[08:28:24.503]                           grepl <- base::grepl
[08:28:24.503]                           restarts <- computeRestarts(cond)
[08:28:24.503]                           for (restart in restarts) {
[08:28:24.503]                             name <- restart$name
[08:28:24.503]                             if (is.null(name)) 
[08:28:24.503]                               next
[08:28:24.503]                             if (!grepl(pattern, name)) 
[08:28:24.503]                               next
[08:28:24.503]                             invokeRestart(restart)
[08:28:24.503]                             muffled <- TRUE
[08:28:24.503]                             break
[08:28:24.503]                           }
[08:28:24.503]                         }
[08:28:24.503]                       }
[08:28:24.503]                       invisible(muffled)
[08:28:24.503]                     }
[08:28:24.503]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.503]                   }
[08:28:24.503]                 }
[08:28:24.503]                 else {
[08:28:24.503]                   if (TRUE) {
[08:28:24.503]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.503]                     {
[08:28:24.503]                       inherits <- base::inherits
[08:28:24.503]                       invokeRestart <- base::invokeRestart
[08:28:24.503]                       is.null <- base::is.null
[08:28:24.503]                       muffled <- FALSE
[08:28:24.503]                       if (inherits(cond, "message")) {
[08:28:24.503]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.503]                         if (muffled) 
[08:28:24.503]                           invokeRestart("muffleMessage")
[08:28:24.503]                       }
[08:28:24.503]                       else if (inherits(cond, "warning")) {
[08:28:24.503]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.503]                         if (muffled) 
[08:28:24.503]                           invokeRestart("muffleWarning")
[08:28:24.503]                       }
[08:28:24.503]                       else if (inherits(cond, "condition")) {
[08:28:24.503]                         if (!is.null(pattern)) {
[08:28:24.503]                           computeRestarts <- base::computeRestarts
[08:28:24.503]                           grepl <- base::grepl
[08:28:24.503]                           restarts <- computeRestarts(cond)
[08:28:24.503]                           for (restart in restarts) {
[08:28:24.503]                             name <- restart$name
[08:28:24.503]                             if (is.null(name)) 
[08:28:24.503]                               next
[08:28:24.503]                             if (!grepl(pattern, name)) 
[08:28:24.503]                               next
[08:28:24.503]                             invokeRestart(restart)
[08:28:24.503]                             muffled <- TRUE
[08:28:24.503]                             break
[08:28:24.503]                           }
[08:28:24.503]                         }
[08:28:24.503]                       }
[08:28:24.503]                       invisible(muffled)
[08:28:24.503]                     }
[08:28:24.503]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.503]                   }
[08:28:24.503]                 }
[08:28:24.503]             }
[08:28:24.503]         }))
[08:28:24.503]     }, error = function(ex) {
[08:28:24.503]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.503]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.503]                 ...future.rng), started = ...future.startTime, 
[08:28:24.503]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.503]             version = "1.8"), class = "FutureResult")
[08:28:24.503]     }, finally = {
[08:28:24.503]         if (!identical(...future.workdir, getwd())) 
[08:28:24.503]             setwd(...future.workdir)
[08:28:24.503]         {
[08:28:24.503]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.503]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.503]             }
[08:28:24.503]             base::options(...future.oldOptions)
[08:28:24.503]             if (.Platform$OS.type == "windows") {
[08:28:24.503]                 old_names <- names(...future.oldEnvVars)
[08:28:24.503]                 envs <- base::Sys.getenv()
[08:28:24.503]                 names <- names(envs)
[08:28:24.503]                 common <- intersect(names, old_names)
[08:28:24.503]                 added <- setdiff(names, old_names)
[08:28:24.503]                 removed <- setdiff(old_names, names)
[08:28:24.503]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.503]                   envs[common]]
[08:28:24.503]                 NAMES <- toupper(changed)
[08:28:24.503]                 args <- list()
[08:28:24.503]                 for (kk in seq_along(NAMES)) {
[08:28:24.503]                   name <- changed[[kk]]
[08:28:24.503]                   NAME <- NAMES[[kk]]
[08:28:24.503]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.503]                     next
[08:28:24.503]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.503]                 }
[08:28:24.503]                 NAMES <- toupper(added)
[08:28:24.503]                 for (kk in seq_along(NAMES)) {
[08:28:24.503]                   name <- added[[kk]]
[08:28:24.503]                   NAME <- NAMES[[kk]]
[08:28:24.503]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.503]                     next
[08:28:24.503]                   args[[name]] <- ""
[08:28:24.503]                 }
[08:28:24.503]                 NAMES <- toupper(removed)
[08:28:24.503]                 for (kk in seq_along(NAMES)) {
[08:28:24.503]                   name <- removed[[kk]]
[08:28:24.503]                   NAME <- NAMES[[kk]]
[08:28:24.503]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.503]                     next
[08:28:24.503]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.503]                 }
[08:28:24.503]                 if (length(args) > 0) 
[08:28:24.503]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.503]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.503]             }
[08:28:24.503]             else {
[08:28:24.503]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.503]             }
[08:28:24.503]             {
[08:28:24.503]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.503]                   0L) {
[08:28:24.503]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.503]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.503]                   base::options(opts)
[08:28:24.503]                 }
[08:28:24.503]                 {
[08:28:24.503]                   {
[08:28:24.503]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.503]                     NULL
[08:28:24.503]                   }
[08:28:24.503]                   options(future.plan = NULL)
[08:28:24.503]                   if (is.na(NA_character_)) 
[08:28:24.503]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.503]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.503]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.503]                     .init = FALSE)
[08:28:24.503]                 }
[08:28:24.503]             }
[08:28:24.503]         }
[08:28:24.503]     })
[08:28:24.503]     if (TRUE) {
[08:28:24.503]         base::sink(type = "output", split = FALSE)
[08:28:24.503]         if (TRUE) {
[08:28:24.503]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.503]         }
[08:28:24.503]         else {
[08:28:24.503]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.503]         }
[08:28:24.503]         base::close(...future.stdout)
[08:28:24.503]         ...future.stdout <- NULL
[08:28:24.503]     }
[08:28:24.503]     ...future.result$conditions <- ...future.conditions
[08:28:24.503]     ...future.result$finished <- base::Sys.time()
[08:28:24.503]     ...future.result
[08:28:24.503] }
[08:28:24.507] MultisessionFuture started
[08:28:24.507] - Launch lazy future ... done
[08:28:24.507] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f2, "MultisessionFuture"))
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 1
> v2 <- value(f2)
[08:28:24.507] result() for ClusterFuture ...
[08:28:24.507] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.507] - Validating connection of MultisessionFuture
[08:28:24.549] - received message: FutureResult
[08:28:24.549] - Received FutureResult
[08:28:24.550] - Erased future from FutureRegistry
[08:28:24.550] result() for ClusterFuture ...
[08:28:24.550] - result already collected: FutureResult
[08:28:24.550] result() for ClusterFuture ... done
[08:28:24.550] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:24.550] result() for ClusterFuture ... done
[08:28:24.550] result() for ClusterFuture ...
[08:28:24.550] - result already collected: FutureResult
[08:28:24.550] result() for ClusterFuture ... done
> cat(sprintf("Future #2 R process: %s\n", v2))
Future #2 R process: bd3301c8-d0c5-10ef-3609-afd64bf8a902
> stopifnot(v2 != session_uuid)
> 
> message("Creating future #3:")
Creating future #3:
> f3 <- future({ f1$owner })
[08:28:24.551] getGlobalsAndPackages() ...
[08:28:24.551] Searching for globals...
[08:28:24.552] - globals found: [3] ‘{’, ‘$’, ‘f1’
[08:28:24.552] Searching for globals ... DONE
[08:28:24.552] Resolving globals: FALSE
[08:28:24.564] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[08:28:24.565] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[08:28:24.565] - globals: [1] ‘f1’
[08:28:24.565] 
[08:28:24.565] getGlobalsAndPackages() ... DONE
[08:28:24.566] run() for ‘Future’ ...
[08:28:24.566] - state: ‘created’
[08:28:24.566] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:24.579] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:24.579] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:24.579]   - Field: ‘node’
[08:28:24.579]   - Field: ‘label’
[08:28:24.580]   - Field: ‘local’
[08:28:24.580]   - Field: ‘owner’
[08:28:24.580]   - Field: ‘envir’
[08:28:24.580]   - Field: ‘workers’
[08:28:24.580]   - Field: ‘packages’
[08:28:24.580]   - Field: ‘gc’
[08:28:24.580]   - Field: ‘conditions’
[08:28:24.580]   - Field: ‘persistent’
[08:28:24.580]   - Field: ‘expr’
[08:28:24.580]   - Field: ‘uuid’
[08:28:24.581]   - Field: ‘seed’
[08:28:24.581]   - Field: ‘version’
[08:28:24.581]   - Field: ‘result’
[08:28:24.581]   - Field: ‘asynchronous’
[08:28:24.581]   - Field: ‘calls’
[08:28:24.581]   - Field: ‘globals’
[08:28:24.581]   - Field: ‘stdout’
[08:28:24.581]   - Field: ‘earlySignal’
[08:28:24.581]   - Field: ‘lazy’
[08:28:24.582]   - Field: ‘state’
[08:28:24.582] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:24.582] - Launch lazy future ...
[08:28:24.582] Packages needed by the future expression (n = 0): <none>
[08:28:24.582] Packages needed by future strategies (n = 0): <none>
[08:28:24.583] {
[08:28:24.583]     {
[08:28:24.583]         {
[08:28:24.583]             ...future.startTime <- base::Sys.time()
[08:28:24.583]             {
[08:28:24.583]                 {
[08:28:24.583]                   {
[08:28:24.583]                     {
[08:28:24.583]                       base::local({
[08:28:24.583]                         has_future <- base::requireNamespace("future", 
[08:28:24.583]                           quietly = TRUE)
[08:28:24.583]                         if (has_future) {
[08:28:24.583]                           ns <- base::getNamespace("future")
[08:28:24.583]                           version <- ns[[".package"]][["version"]]
[08:28:24.583]                           if (is.null(version)) 
[08:28:24.583]                             version <- utils::packageVersion("future")
[08:28:24.583]                         }
[08:28:24.583]                         else {
[08:28:24.583]                           version <- NULL
[08:28:24.583]                         }
[08:28:24.583]                         if (!has_future || version < "1.8.0") {
[08:28:24.583]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.583]                             "", base::R.version$version.string), 
[08:28:24.583]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.583]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.583]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.583]                               "release", "version")], collapse = " "), 
[08:28:24.583]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.583]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.583]                             info)
[08:28:24.583]                           info <- base::paste(info, collapse = "; ")
[08:28:24.583]                           if (!has_future) {
[08:28:24.583]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.583]                               info)
[08:28:24.583]                           }
[08:28:24.583]                           else {
[08:28:24.583]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.583]                               info, version)
[08:28:24.583]                           }
[08:28:24.583]                           base::stop(msg)
[08:28:24.583]                         }
[08:28:24.583]                       })
[08:28:24.583]                     }
[08:28:24.583]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.583]                     base::options(mc.cores = 1L)
[08:28:24.583]                   }
[08:28:24.583]                   ...future.strategy.old <- future::plan("list")
[08:28:24.583]                   options(future.plan = NULL)
[08:28:24.583]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.583]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.583]                 }
[08:28:24.583]                 ...future.workdir <- getwd()
[08:28:24.583]             }
[08:28:24.583]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.583]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.583]         }
[08:28:24.583]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.583]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.583]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.583]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.583]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.583]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.583]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.583]             base::names(...future.oldOptions))
[08:28:24.583]     }
[08:28:24.583]     if (FALSE) {
[08:28:24.583]     }
[08:28:24.583]     else {
[08:28:24.583]         if (TRUE) {
[08:28:24.583]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.583]                 open = "w")
[08:28:24.583]         }
[08:28:24.583]         else {
[08:28:24.583]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.583]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.583]         }
[08:28:24.583]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.583]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.583]             base::sink(type = "output", split = FALSE)
[08:28:24.583]             base::close(...future.stdout)
[08:28:24.583]         }, add = TRUE)
[08:28:24.583]     }
[08:28:24.583]     ...future.frame <- base::sys.nframe()
[08:28:24.583]     ...future.conditions <- base::list()
[08:28:24.583]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.583]     if (FALSE) {
[08:28:24.583]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.583]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.583]     }
[08:28:24.583]     ...future.result <- base::tryCatch({
[08:28:24.583]         base::withCallingHandlers({
[08:28:24.583]             ...future.value <- base::withVisible(base::local({
[08:28:24.583]                 ...future.makeSendCondition <- base::local({
[08:28:24.583]                   sendCondition <- NULL
[08:28:24.583]                   function(frame = 1L) {
[08:28:24.583]                     if (is.function(sendCondition)) 
[08:28:24.583]                       return(sendCondition)
[08:28:24.583]                     ns <- getNamespace("parallel")
[08:28:24.583]                     if (exists("sendData", mode = "function", 
[08:28:24.583]                       envir = ns)) {
[08:28:24.583]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.583]                         envir = ns)
[08:28:24.583]                       envir <- sys.frame(frame)
[08:28:24.583]                       master <- NULL
[08:28:24.583]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.583]                         !identical(envir, emptyenv())) {
[08:28:24.583]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.583]                           inherits = FALSE)) {
[08:28:24.583]                           master <- get("master", mode = "list", 
[08:28:24.583]                             envir = envir, inherits = FALSE)
[08:28:24.583]                           if (inherits(master, c("SOCKnode", 
[08:28:24.583]                             "SOCK0node"))) {
[08:28:24.583]                             sendCondition <<- function(cond) {
[08:28:24.583]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.583]                                 success = TRUE)
[08:28:24.583]                               parallel_sendData(master, data)
[08:28:24.583]                             }
[08:28:24.583]                             return(sendCondition)
[08:28:24.583]                           }
[08:28:24.583]                         }
[08:28:24.583]                         frame <- frame + 1L
[08:28:24.583]                         envir <- sys.frame(frame)
[08:28:24.583]                       }
[08:28:24.583]                     }
[08:28:24.583]                     sendCondition <<- function(cond) NULL
[08:28:24.583]                   }
[08:28:24.583]                 })
[08:28:24.583]                 withCallingHandlers({
[08:28:24.583]                   {
[08:28:24.583]                     f1$owner
[08:28:24.583]                   }
[08:28:24.583]                 }, immediateCondition = function(cond) {
[08:28:24.583]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.583]                   sendCondition(cond)
[08:28:24.583]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.583]                   {
[08:28:24.583]                     inherits <- base::inherits
[08:28:24.583]                     invokeRestart <- base::invokeRestart
[08:28:24.583]                     is.null <- base::is.null
[08:28:24.583]                     muffled <- FALSE
[08:28:24.583]                     if (inherits(cond, "message")) {
[08:28:24.583]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.583]                       if (muffled) 
[08:28:24.583]                         invokeRestart("muffleMessage")
[08:28:24.583]                     }
[08:28:24.583]                     else if (inherits(cond, "warning")) {
[08:28:24.583]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.583]                       if (muffled) 
[08:28:24.583]                         invokeRestart("muffleWarning")
[08:28:24.583]                     }
[08:28:24.583]                     else if (inherits(cond, "condition")) {
[08:28:24.583]                       if (!is.null(pattern)) {
[08:28:24.583]                         computeRestarts <- base::computeRestarts
[08:28:24.583]                         grepl <- base::grepl
[08:28:24.583]                         restarts <- computeRestarts(cond)
[08:28:24.583]                         for (restart in restarts) {
[08:28:24.583]                           name <- restart$name
[08:28:24.583]                           if (is.null(name)) 
[08:28:24.583]                             next
[08:28:24.583]                           if (!grepl(pattern, name)) 
[08:28:24.583]                             next
[08:28:24.583]                           invokeRestart(restart)
[08:28:24.583]                           muffled <- TRUE
[08:28:24.583]                           break
[08:28:24.583]                         }
[08:28:24.583]                       }
[08:28:24.583]                     }
[08:28:24.583]                     invisible(muffled)
[08:28:24.583]                   }
[08:28:24.583]                   muffleCondition(cond)
[08:28:24.583]                 })
[08:28:24.583]             }))
[08:28:24.583]             future::FutureResult(value = ...future.value$value, 
[08:28:24.583]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.583]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.583]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.583]                     ...future.globalenv.names))
[08:28:24.583]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.583]         }, condition = base::local({
[08:28:24.583]             c <- base::c
[08:28:24.583]             inherits <- base::inherits
[08:28:24.583]             invokeRestart <- base::invokeRestart
[08:28:24.583]             length <- base::length
[08:28:24.583]             list <- base::list
[08:28:24.583]             seq.int <- base::seq.int
[08:28:24.583]             signalCondition <- base::signalCondition
[08:28:24.583]             sys.calls <- base::sys.calls
[08:28:24.583]             `[[` <- base::`[[`
[08:28:24.583]             `+` <- base::`+`
[08:28:24.583]             `<<-` <- base::`<<-`
[08:28:24.583]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.583]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.583]                   3L)]
[08:28:24.583]             }
[08:28:24.583]             function(cond) {
[08:28:24.583]                 is_error <- inherits(cond, "error")
[08:28:24.583]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.583]                   NULL)
[08:28:24.583]                 if (is_error) {
[08:28:24.583]                   sessionInformation <- function() {
[08:28:24.583]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.583]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.583]                       search = base::search(), system = base::Sys.info())
[08:28:24.583]                   }
[08:28:24.583]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.583]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.583]                     cond$call), session = sessionInformation(), 
[08:28:24.583]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.583]                   signalCondition(cond)
[08:28:24.583]                 }
[08:28:24.583]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.583]                 "immediateCondition"))) {
[08:28:24.583]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.583]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.583]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.583]                   if (TRUE && !signal) {
[08:28:24.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.583]                     {
[08:28:24.583]                       inherits <- base::inherits
[08:28:24.583]                       invokeRestart <- base::invokeRestart
[08:28:24.583]                       is.null <- base::is.null
[08:28:24.583]                       muffled <- FALSE
[08:28:24.583]                       if (inherits(cond, "message")) {
[08:28:24.583]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.583]                         if (muffled) 
[08:28:24.583]                           invokeRestart("muffleMessage")
[08:28:24.583]                       }
[08:28:24.583]                       else if (inherits(cond, "warning")) {
[08:28:24.583]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.583]                         if (muffled) 
[08:28:24.583]                           invokeRestart("muffleWarning")
[08:28:24.583]                       }
[08:28:24.583]                       else if (inherits(cond, "condition")) {
[08:28:24.583]                         if (!is.null(pattern)) {
[08:28:24.583]                           computeRestarts <- base::computeRestarts
[08:28:24.583]                           grepl <- base::grepl
[08:28:24.583]                           restarts <- computeRestarts(cond)
[08:28:24.583]                           for (restart in restarts) {
[08:28:24.583]                             name <- restart$name
[08:28:24.583]                             if (is.null(name)) 
[08:28:24.583]                               next
[08:28:24.583]                             if (!grepl(pattern, name)) 
[08:28:24.583]                               next
[08:28:24.583]                             invokeRestart(restart)
[08:28:24.583]                             muffled <- TRUE
[08:28:24.583]                             break
[08:28:24.583]                           }
[08:28:24.583]                         }
[08:28:24.583]                       }
[08:28:24.583]                       invisible(muffled)
[08:28:24.583]                     }
[08:28:24.583]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.583]                   }
[08:28:24.583]                 }
[08:28:24.583]                 else {
[08:28:24.583]                   if (TRUE) {
[08:28:24.583]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.583]                     {
[08:28:24.583]                       inherits <- base::inherits
[08:28:24.583]                       invokeRestart <- base::invokeRestart
[08:28:24.583]                       is.null <- base::is.null
[08:28:24.583]                       muffled <- FALSE
[08:28:24.583]                       if (inherits(cond, "message")) {
[08:28:24.583]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.583]                         if (muffled) 
[08:28:24.583]                           invokeRestart("muffleMessage")
[08:28:24.583]                       }
[08:28:24.583]                       else if (inherits(cond, "warning")) {
[08:28:24.583]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.583]                         if (muffled) 
[08:28:24.583]                           invokeRestart("muffleWarning")
[08:28:24.583]                       }
[08:28:24.583]                       else if (inherits(cond, "condition")) {
[08:28:24.583]                         if (!is.null(pattern)) {
[08:28:24.583]                           computeRestarts <- base::computeRestarts
[08:28:24.583]                           grepl <- base::grepl
[08:28:24.583]                           restarts <- computeRestarts(cond)
[08:28:24.583]                           for (restart in restarts) {
[08:28:24.583]                             name <- restart$name
[08:28:24.583]                             if (is.null(name)) 
[08:28:24.583]                               next
[08:28:24.583]                             if (!grepl(pattern, name)) 
[08:28:24.583]                               next
[08:28:24.583]                             invokeRestart(restart)
[08:28:24.583]                             muffled <- TRUE
[08:28:24.583]                             break
[08:28:24.583]                           }
[08:28:24.583]                         }
[08:28:24.583]                       }
[08:28:24.583]                       invisible(muffled)
[08:28:24.583]                     }
[08:28:24.583]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.583]                   }
[08:28:24.583]                 }
[08:28:24.583]             }
[08:28:24.583]         }))
[08:28:24.583]     }, error = function(ex) {
[08:28:24.583]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.583]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.583]                 ...future.rng), started = ...future.startTime, 
[08:28:24.583]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.583]             version = "1.8"), class = "FutureResult")
[08:28:24.583]     }, finally = {
[08:28:24.583]         if (!identical(...future.workdir, getwd())) 
[08:28:24.583]             setwd(...future.workdir)
[08:28:24.583]         {
[08:28:24.583]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.583]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.583]             }
[08:28:24.583]             base::options(...future.oldOptions)
[08:28:24.583]             if (.Platform$OS.type == "windows") {
[08:28:24.583]                 old_names <- names(...future.oldEnvVars)
[08:28:24.583]                 envs <- base::Sys.getenv()
[08:28:24.583]                 names <- names(envs)
[08:28:24.583]                 common <- intersect(names, old_names)
[08:28:24.583]                 added <- setdiff(names, old_names)
[08:28:24.583]                 removed <- setdiff(old_names, names)
[08:28:24.583]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.583]                   envs[common]]
[08:28:24.583]                 NAMES <- toupper(changed)
[08:28:24.583]                 args <- list()
[08:28:24.583]                 for (kk in seq_along(NAMES)) {
[08:28:24.583]                   name <- changed[[kk]]
[08:28:24.583]                   NAME <- NAMES[[kk]]
[08:28:24.583]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.583]                     next
[08:28:24.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.583]                 }
[08:28:24.583]                 NAMES <- toupper(added)
[08:28:24.583]                 for (kk in seq_along(NAMES)) {
[08:28:24.583]                   name <- added[[kk]]
[08:28:24.583]                   NAME <- NAMES[[kk]]
[08:28:24.583]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.583]                     next
[08:28:24.583]                   args[[name]] <- ""
[08:28:24.583]                 }
[08:28:24.583]                 NAMES <- toupper(removed)
[08:28:24.583]                 for (kk in seq_along(NAMES)) {
[08:28:24.583]                   name <- removed[[kk]]
[08:28:24.583]                   NAME <- NAMES[[kk]]
[08:28:24.583]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.583]                     next
[08:28:24.583]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.583]                 }
[08:28:24.583]                 if (length(args) > 0) 
[08:28:24.583]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.583]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.583]             }
[08:28:24.583]             else {
[08:28:24.583]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.583]             }
[08:28:24.583]             {
[08:28:24.583]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.583]                   0L) {
[08:28:24.583]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.583]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.583]                   base::options(opts)
[08:28:24.583]                 }
[08:28:24.583]                 {
[08:28:24.583]                   {
[08:28:24.583]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.583]                     NULL
[08:28:24.583]                   }
[08:28:24.583]                   options(future.plan = NULL)
[08:28:24.583]                   if (is.na(NA_character_)) 
[08:28:24.583]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.583]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.583]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.583]                     .init = FALSE)
[08:28:24.583]                 }
[08:28:24.583]             }
[08:28:24.583]         }
[08:28:24.583]     })
[08:28:24.583]     if (TRUE) {
[08:28:24.583]         base::sink(type = "output", split = FALSE)
[08:28:24.583]         if (TRUE) {
[08:28:24.583]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.583]         }
[08:28:24.583]         else {
[08:28:24.583]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.583]         }
[08:28:24.583]         base::close(...future.stdout)
[08:28:24.583]         ...future.stdout <- NULL
[08:28:24.583]     }
[08:28:24.583]     ...future.result$conditions <- ...future.conditions
[08:28:24.583]     ...future.result$finished <- base::Sys.time()
[08:28:24.583]     ...future.result
[08:28:24.583] }
[08:28:24.597] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[08:28:24.608] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[08:28:24.661] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[08:28:24.661] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[08:28:24.662] MultisessionFuture started
[08:28:24.662] - Launch lazy future ... done
[08:28:24.662] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f3, "MultisessionFuture"))
> cat(sprintf("Future #3 session: %d\n", f3$node))
Future #3 session: 1
> v3 <- value(f3)
[08:28:24.662] result() for ClusterFuture ...
[08:28:24.662] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.662] - Validating connection of MultisessionFuture
[08:28:24.704] - received message: FutureResult
[08:28:24.704] - Received FutureResult
[08:28:24.704] - Erased future from FutureRegistry
[08:28:24.705] result() for ClusterFuture ...
[08:28:24.705] - result already collected: FutureResult
[08:28:24.705] result() for ClusterFuture ... done
[08:28:24.705] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:24.705] result() for ClusterFuture ... done
[08:28:24.705] result() for ClusterFuture ...
[08:28:24.705] - result already collected: FutureResult
[08:28:24.705] result() for ClusterFuture ... done
> cat(sprintf("Future #3 owner: %s\n", v3))
Future #3 owner: 0e2aac7a-e8a5-0071-780a-80dfff2eea33
> stopifnot(v3 == session_uuid)
> 
> message("Creating future #4:")
Creating future #4:
> f4 <- future({ f1$owner })
[08:28:24.706] getGlobalsAndPackages() ...
[08:28:24.706] Searching for globals...
[08:28:24.707] - globals found: [3] ‘{’, ‘$’, ‘f1’
[08:28:24.707] Searching for globals ... DONE
[08:28:24.707] Resolving globals: FALSE
[08:28:24.719] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[08:28:24.719] The total size of the 1 globals exported for future expression (‘{; f1$owner; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[08:28:24.719] - globals: [1] ‘f1’
[08:28:24.719] 
[08:28:24.719] getGlobalsAndPackages() ... DONE
[08:28:24.720] run() for ‘Future’ ...
[08:28:24.720] - state: ‘created’
[08:28:24.720] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:24.735] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:24.735] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:24.735]   - Field: ‘node’
[08:28:24.735]   - Field: ‘label’
[08:28:24.736]   - Field: ‘local’
[08:28:24.736]   - Field: ‘owner’
[08:28:24.736]   - Field: ‘envir’
[08:28:24.736]   - Field: ‘workers’
[08:28:24.736]   - Field: ‘packages’
[08:28:24.736]   - Field: ‘gc’
[08:28:24.736]   - Field: ‘conditions’
[08:28:24.736]   - Field: ‘persistent’
[08:28:24.736]   - Field: ‘expr’
[08:28:24.736]   - Field: ‘uuid’
[08:28:24.736]   - Field: ‘seed’
[08:28:24.736]   - Field: ‘version’
[08:28:24.737]   - Field: ‘result’
[08:28:24.737]   - Field: ‘asynchronous’
[08:28:24.737]   - Field: ‘calls’
[08:28:24.737]   - Field: ‘globals’
[08:28:24.737]   - Field: ‘stdout’
[08:28:24.737]   - Field: ‘earlySignal’
[08:28:24.737]   - Field: ‘lazy’
[08:28:24.737]   - Field: ‘state’
[08:28:24.737] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:24.737] - Launch lazy future ...
[08:28:24.738] Packages needed by the future expression (n = 0): <none>
[08:28:24.738] Packages needed by future strategies (n = 0): <none>
[08:28:24.738] {
[08:28:24.738]     {
[08:28:24.738]         {
[08:28:24.738]             ...future.startTime <- base::Sys.time()
[08:28:24.738]             {
[08:28:24.738]                 {
[08:28:24.738]                   {
[08:28:24.738]                     {
[08:28:24.738]                       base::local({
[08:28:24.738]                         has_future <- base::requireNamespace("future", 
[08:28:24.738]                           quietly = TRUE)
[08:28:24.738]                         if (has_future) {
[08:28:24.738]                           ns <- base::getNamespace("future")
[08:28:24.738]                           version <- ns[[".package"]][["version"]]
[08:28:24.738]                           if (is.null(version)) 
[08:28:24.738]                             version <- utils::packageVersion("future")
[08:28:24.738]                         }
[08:28:24.738]                         else {
[08:28:24.738]                           version <- NULL
[08:28:24.738]                         }
[08:28:24.738]                         if (!has_future || version < "1.8.0") {
[08:28:24.738]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.738]                             "", base::R.version$version.string), 
[08:28:24.738]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.738]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.738]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.738]                               "release", "version")], collapse = " "), 
[08:28:24.738]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.738]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.738]                             info)
[08:28:24.738]                           info <- base::paste(info, collapse = "; ")
[08:28:24.738]                           if (!has_future) {
[08:28:24.738]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.738]                               info)
[08:28:24.738]                           }
[08:28:24.738]                           else {
[08:28:24.738]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.738]                               info, version)
[08:28:24.738]                           }
[08:28:24.738]                           base::stop(msg)
[08:28:24.738]                         }
[08:28:24.738]                       })
[08:28:24.738]                     }
[08:28:24.738]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.738]                     base::options(mc.cores = 1L)
[08:28:24.738]                   }
[08:28:24.738]                   ...future.strategy.old <- future::plan("list")
[08:28:24.738]                   options(future.plan = NULL)
[08:28:24.738]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.738]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.738]                 }
[08:28:24.738]                 ...future.workdir <- getwd()
[08:28:24.738]             }
[08:28:24.738]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.738]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.738]         }
[08:28:24.738]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.738]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.738]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.738]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.738]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.738]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.738]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.738]             base::names(...future.oldOptions))
[08:28:24.738]     }
[08:28:24.738]     if (FALSE) {
[08:28:24.738]     }
[08:28:24.738]     else {
[08:28:24.738]         if (TRUE) {
[08:28:24.738]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.738]                 open = "w")
[08:28:24.738]         }
[08:28:24.738]         else {
[08:28:24.738]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.738]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.738]         }
[08:28:24.738]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.738]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.738]             base::sink(type = "output", split = FALSE)
[08:28:24.738]             base::close(...future.stdout)
[08:28:24.738]         }, add = TRUE)
[08:28:24.738]     }
[08:28:24.738]     ...future.frame <- base::sys.nframe()
[08:28:24.738]     ...future.conditions <- base::list()
[08:28:24.738]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.738]     if (FALSE) {
[08:28:24.738]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.738]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.738]     }
[08:28:24.738]     ...future.result <- base::tryCatch({
[08:28:24.738]         base::withCallingHandlers({
[08:28:24.738]             ...future.value <- base::withVisible(base::local({
[08:28:24.738]                 ...future.makeSendCondition <- base::local({
[08:28:24.738]                   sendCondition <- NULL
[08:28:24.738]                   function(frame = 1L) {
[08:28:24.738]                     if (is.function(sendCondition)) 
[08:28:24.738]                       return(sendCondition)
[08:28:24.738]                     ns <- getNamespace("parallel")
[08:28:24.738]                     if (exists("sendData", mode = "function", 
[08:28:24.738]                       envir = ns)) {
[08:28:24.738]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.738]                         envir = ns)
[08:28:24.738]                       envir <- sys.frame(frame)
[08:28:24.738]                       master <- NULL
[08:28:24.738]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.738]                         !identical(envir, emptyenv())) {
[08:28:24.738]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.738]                           inherits = FALSE)) {
[08:28:24.738]                           master <- get("master", mode = "list", 
[08:28:24.738]                             envir = envir, inherits = FALSE)
[08:28:24.738]                           if (inherits(master, c("SOCKnode", 
[08:28:24.738]                             "SOCK0node"))) {
[08:28:24.738]                             sendCondition <<- function(cond) {
[08:28:24.738]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.738]                                 success = TRUE)
[08:28:24.738]                               parallel_sendData(master, data)
[08:28:24.738]                             }
[08:28:24.738]                             return(sendCondition)
[08:28:24.738]                           }
[08:28:24.738]                         }
[08:28:24.738]                         frame <- frame + 1L
[08:28:24.738]                         envir <- sys.frame(frame)
[08:28:24.738]                       }
[08:28:24.738]                     }
[08:28:24.738]                     sendCondition <<- function(cond) NULL
[08:28:24.738]                   }
[08:28:24.738]                 })
[08:28:24.738]                 withCallingHandlers({
[08:28:24.738]                   {
[08:28:24.738]                     f1$owner
[08:28:24.738]                   }
[08:28:24.738]                 }, immediateCondition = function(cond) {
[08:28:24.738]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.738]                   sendCondition(cond)
[08:28:24.738]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.738]                   {
[08:28:24.738]                     inherits <- base::inherits
[08:28:24.738]                     invokeRestart <- base::invokeRestart
[08:28:24.738]                     is.null <- base::is.null
[08:28:24.738]                     muffled <- FALSE
[08:28:24.738]                     if (inherits(cond, "message")) {
[08:28:24.738]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.738]                       if (muffled) 
[08:28:24.738]                         invokeRestart("muffleMessage")
[08:28:24.738]                     }
[08:28:24.738]                     else if (inherits(cond, "warning")) {
[08:28:24.738]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.738]                       if (muffled) 
[08:28:24.738]                         invokeRestart("muffleWarning")
[08:28:24.738]                     }
[08:28:24.738]                     else if (inherits(cond, "condition")) {
[08:28:24.738]                       if (!is.null(pattern)) {
[08:28:24.738]                         computeRestarts <- base::computeRestarts
[08:28:24.738]                         grepl <- base::grepl
[08:28:24.738]                         restarts <- computeRestarts(cond)
[08:28:24.738]                         for (restart in restarts) {
[08:28:24.738]                           name <- restart$name
[08:28:24.738]                           if (is.null(name)) 
[08:28:24.738]                             next
[08:28:24.738]                           if (!grepl(pattern, name)) 
[08:28:24.738]                             next
[08:28:24.738]                           invokeRestart(restart)
[08:28:24.738]                           muffled <- TRUE
[08:28:24.738]                           break
[08:28:24.738]                         }
[08:28:24.738]                       }
[08:28:24.738]                     }
[08:28:24.738]                     invisible(muffled)
[08:28:24.738]                   }
[08:28:24.738]                   muffleCondition(cond)
[08:28:24.738]                 })
[08:28:24.738]             }))
[08:28:24.738]             future::FutureResult(value = ...future.value$value, 
[08:28:24.738]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.738]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.738]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.738]                     ...future.globalenv.names))
[08:28:24.738]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.738]         }, condition = base::local({
[08:28:24.738]             c <- base::c
[08:28:24.738]             inherits <- base::inherits
[08:28:24.738]             invokeRestart <- base::invokeRestart
[08:28:24.738]             length <- base::length
[08:28:24.738]             list <- base::list
[08:28:24.738]             seq.int <- base::seq.int
[08:28:24.738]             signalCondition <- base::signalCondition
[08:28:24.738]             sys.calls <- base::sys.calls
[08:28:24.738]             `[[` <- base::`[[`
[08:28:24.738]             `+` <- base::`+`
[08:28:24.738]             `<<-` <- base::`<<-`
[08:28:24.738]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.738]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.738]                   3L)]
[08:28:24.738]             }
[08:28:24.738]             function(cond) {
[08:28:24.738]                 is_error <- inherits(cond, "error")
[08:28:24.738]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.738]                   NULL)
[08:28:24.738]                 if (is_error) {
[08:28:24.738]                   sessionInformation <- function() {
[08:28:24.738]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.738]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.738]                       search = base::search(), system = base::Sys.info())
[08:28:24.738]                   }
[08:28:24.738]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.738]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.738]                     cond$call), session = sessionInformation(), 
[08:28:24.738]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.738]                   signalCondition(cond)
[08:28:24.738]                 }
[08:28:24.738]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.738]                 "immediateCondition"))) {
[08:28:24.738]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.738]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.738]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.738]                   if (TRUE && !signal) {
[08:28:24.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.738]                     {
[08:28:24.738]                       inherits <- base::inherits
[08:28:24.738]                       invokeRestart <- base::invokeRestart
[08:28:24.738]                       is.null <- base::is.null
[08:28:24.738]                       muffled <- FALSE
[08:28:24.738]                       if (inherits(cond, "message")) {
[08:28:24.738]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.738]                         if (muffled) 
[08:28:24.738]                           invokeRestart("muffleMessage")
[08:28:24.738]                       }
[08:28:24.738]                       else if (inherits(cond, "warning")) {
[08:28:24.738]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.738]                         if (muffled) 
[08:28:24.738]                           invokeRestart("muffleWarning")
[08:28:24.738]                       }
[08:28:24.738]                       else if (inherits(cond, "condition")) {
[08:28:24.738]                         if (!is.null(pattern)) {
[08:28:24.738]                           computeRestarts <- base::computeRestarts
[08:28:24.738]                           grepl <- base::grepl
[08:28:24.738]                           restarts <- computeRestarts(cond)
[08:28:24.738]                           for (restart in restarts) {
[08:28:24.738]                             name <- restart$name
[08:28:24.738]                             if (is.null(name)) 
[08:28:24.738]                               next
[08:28:24.738]                             if (!grepl(pattern, name)) 
[08:28:24.738]                               next
[08:28:24.738]                             invokeRestart(restart)
[08:28:24.738]                             muffled <- TRUE
[08:28:24.738]                             break
[08:28:24.738]                           }
[08:28:24.738]                         }
[08:28:24.738]                       }
[08:28:24.738]                       invisible(muffled)
[08:28:24.738]                     }
[08:28:24.738]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.738]                   }
[08:28:24.738]                 }
[08:28:24.738]                 else {
[08:28:24.738]                   if (TRUE) {
[08:28:24.738]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.738]                     {
[08:28:24.738]                       inherits <- base::inherits
[08:28:24.738]                       invokeRestart <- base::invokeRestart
[08:28:24.738]                       is.null <- base::is.null
[08:28:24.738]                       muffled <- FALSE
[08:28:24.738]                       if (inherits(cond, "message")) {
[08:28:24.738]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.738]                         if (muffled) 
[08:28:24.738]                           invokeRestart("muffleMessage")
[08:28:24.738]                       }
[08:28:24.738]                       else if (inherits(cond, "warning")) {
[08:28:24.738]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.738]                         if (muffled) 
[08:28:24.738]                           invokeRestart("muffleWarning")
[08:28:24.738]                       }
[08:28:24.738]                       else if (inherits(cond, "condition")) {
[08:28:24.738]                         if (!is.null(pattern)) {
[08:28:24.738]                           computeRestarts <- base::computeRestarts
[08:28:24.738]                           grepl <- base::grepl
[08:28:24.738]                           restarts <- computeRestarts(cond)
[08:28:24.738]                           for (restart in restarts) {
[08:28:24.738]                             name <- restart$name
[08:28:24.738]                             if (is.null(name)) 
[08:28:24.738]                               next
[08:28:24.738]                             if (!grepl(pattern, name)) 
[08:28:24.738]                               next
[08:28:24.738]                             invokeRestart(restart)
[08:28:24.738]                             muffled <- TRUE
[08:28:24.738]                             break
[08:28:24.738]                           }
[08:28:24.738]                         }
[08:28:24.738]                       }
[08:28:24.738]                       invisible(muffled)
[08:28:24.738]                     }
[08:28:24.738]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.738]                   }
[08:28:24.738]                 }
[08:28:24.738]             }
[08:28:24.738]         }))
[08:28:24.738]     }, error = function(ex) {
[08:28:24.738]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.738]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.738]                 ...future.rng), started = ...future.startTime, 
[08:28:24.738]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.738]             version = "1.8"), class = "FutureResult")
[08:28:24.738]     }, finally = {
[08:28:24.738]         if (!identical(...future.workdir, getwd())) 
[08:28:24.738]             setwd(...future.workdir)
[08:28:24.738]         {
[08:28:24.738]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.738]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.738]             }
[08:28:24.738]             base::options(...future.oldOptions)
[08:28:24.738]             if (.Platform$OS.type == "windows") {
[08:28:24.738]                 old_names <- names(...future.oldEnvVars)
[08:28:24.738]                 envs <- base::Sys.getenv()
[08:28:24.738]                 names <- names(envs)
[08:28:24.738]                 common <- intersect(names, old_names)
[08:28:24.738]                 added <- setdiff(names, old_names)
[08:28:24.738]                 removed <- setdiff(old_names, names)
[08:28:24.738]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.738]                   envs[common]]
[08:28:24.738]                 NAMES <- toupper(changed)
[08:28:24.738]                 args <- list()
[08:28:24.738]                 for (kk in seq_along(NAMES)) {
[08:28:24.738]                   name <- changed[[kk]]
[08:28:24.738]                   NAME <- NAMES[[kk]]
[08:28:24.738]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.738]                     next
[08:28:24.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.738]                 }
[08:28:24.738]                 NAMES <- toupper(added)
[08:28:24.738]                 for (kk in seq_along(NAMES)) {
[08:28:24.738]                   name <- added[[kk]]
[08:28:24.738]                   NAME <- NAMES[[kk]]
[08:28:24.738]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.738]                     next
[08:28:24.738]                   args[[name]] <- ""
[08:28:24.738]                 }
[08:28:24.738]                 NAMES <- toupper(removed)
[08:28:24.738]                 for (kk in seq_along(NAMES)) {
[08:28:24.738]                   name <- removed[[kk]]
[08:28:24.738]                   NAME <- NAMES[[kk]]
[08:28:24.738]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.738]                     next
[08:28:24.738]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.738]                 }
[08:28:24.738]                 if (length(args) > 0) 
[08:28:24.738]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.738]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.738]             }
[08:28:24.738]             else {
[08:28:24.738]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.738]             }
[08:28:24.738]             {
[08:28:24.738]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.738]                   0L) {
[08:28:24.738]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.738]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.738]                   base::options(opts)
[08:28:24.738]                 }
[08:28:24.738]                 {
[08:28:24.738]                   {
[08:28:24.738]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.738]                     NULL
[08:28:24.738]                   }
[08:28:24.738]                   options(future.plan = NULL)
[08:28:24.738]                   if (is.na(NA_character_)) 
[08:28:24.738]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.738]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.738]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.738]                     .init = FALSE)
[08:28:24.738]                 }
[08:28:24.738]             }
[08:28:24.738]         }
[08:28:24.738]     })
[08:28:24.738]     if (TRUE) {
[08:28:24.738]         base::sink(type = "output", split = FALSE)
[08:28:24.738]         if (TRUE) {
[08:28:24.738]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.738]         }
[08:28:24.738]         else {
[08:28:24.738]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.738]         }
[08:28:24.738]         base::close(...future.stdout)
[08:28:24.738]         ...future.stdout <- NULL
[08:28:24.738]     }
[08:28:24.738]     ...future.result$conditions <- ...future.conditions
[08:28:24.738]     ...future.result$finished <- base::Sys.time()
[08:28:24.738]     ...future.result
[08:28:24.738] }
[08:28:24.751] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[08:28:24.762] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[08:28:24.814] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[08:28:24.814] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[08:28:24.814] MultisessionFuture started
[08:28:24.814] - Launch lazy future ... done
[08:28:24.815] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f4, "MultisessionFuture"))
> cat(sprintf("Future #4 session: %d\n", f4$node))
Future #4 session: 1
> v4 <- value(f4)
[08:28:24.815] result() for ClusterFuture ...
[08:28:24.815] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.815] - Validating connection of MultisessionFuture
[08:28:24.856] - received message: FutureResult
[08:28:24.856] - Received FutureResult
[08:28:24.856] - Erased future from FutureRegistry
[08:28:24.857] result() for ClusterFuture ...
[08:28:24.857] - result already collected: FutureResult
[08:28:24.857] result() for ClusterFuture ... done
[08:28:24.857] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:24.857] result() for ClusterFuture ... done
[08:28:24.857] result() for ClusterFuture ...
[08:28:24.857] - result already collected: FutureResult
[08:28:24.857] result() for ClusterFuture ... done
> cat(sprintf("Future #4 owner: %s\n", v4))
Future #4 owner: 0e2aac7a-e8a5-0071-780a-80dfff2eea33
> stopifnot(v4 == session_uuid)
> 
> message("Creating future #5:")
Creating future #5:
> f5 <- future({ stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner" })
[08:28:24.857] getGlobalsAndPackages() ...
[08:28:24.857] Searching for globals...
[08:28:24.859] - globals found: [6] ‘{’, ‘stopifnot’, ‘!=’, ‘$’, ‘f1’, ‘:::’
[08:28:24.859] Searching for globals ... DONE
[08:28:24.859] Resolving globals: FALSE
[08:28:24.871] The total size of the 1 globals is 313.99 KiB (321522 bytes)
[08:28:24.871] The total size of the 1 globals exported for future expression (‘{; stopifnot(f1$owner != future:::session_uuid(attributes = TRUE)); "not-owner"; }’) is 313.99 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (313.99 KiB of class ‘environment’)
[08:28:24.871] - globals: [1] ‘f1’
[08:28:24.871] 
[08:28:24.871] getGlobalsAndPackages() ... DONE
[08:28:24.872] run() for ‘Future’ ...
[08:28:24.872] - state: ‘created’
[08:28:24.872] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:24.884] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:24.884] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:24.884]   - Field: ‘node’
[08:28:24.884]   - Field: ‘label’
[08:28:24.885]   - Field: ‘local’
[08:28:24.885]   - Field: ‘owner’
[08:28:24.885]   - Field: ‘envir’
[08:28:24.885]   - Field: ‘workers’
[08:28:24.885]   - Field: ‘packages’
[08:28:24.885]   - Field: ‘gc’
[08:28:24.885]   - Field: ‘conditions’
[08:28:24.885]   - Field: ‘persistent’
[08:28:24.885]   - Field: ‘expr’
[08:28:24.885]   - Field: ‘uuid’
[08:28:24.885]   - Field: ‘seed’
[08:28:24.886]   - Field: ‘version’
[08:28:24.886]   - Field: ‘result’
[08:28:24.886]   - Field: ‘asynchronous’
[08:28:24.886]   - Field: ‘calls’
[08:28:24.886]   - Field: ‘globals’
[08:28:24.886]   - Field: ‘stdout’
[08:28:24.886]   - Field: ‘earlySignal’
[08:28:24.886]   - Field: ‘lazy’
[08:28:24.886]   - Field: ‘state’
[08:28:24.886] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:24.886] - Launch lazy future ...
[08:28:24.887] Packages needed by the future expression (n = 0): <none>
[08:28:24.887] Packages needed by future strategies (n = 0): <none>
[08:28:24.887] {
[08:28:24.887]     {
[08:28:24.887]         {
[08:28:24.887]             ...future.startTime <- base::Sys.time()
[08:28:24.887]             {
[08:28:24.887]                 {
[08:28:24.887]                   {
[08:28:24.887]                     {
[08:28:24.887]                       base::local({
[08:28:24.887]                         has_future <- base::requireNamespace("future", 
[08:28:24.887]                           quietly = TRUE)
[08:28:24.887]                         if (has_future) {
[08:28:24.887]                           ns <- base::getNamespace("future")
[08:28:24.887]                           version <- ns[[".package"]][["version"]]
[08:28:24.887]                           if (is.null(version)) 
[08:28:24.887]                             version <- utils::packageVersion("future")
[08:28:24.887]                         }
[08:28:24.887]                         else {
[08:28:24.887]                           version <- NULL
[08:28:24.887]                         }
[08:28:24.887]                         if (!has_future || version < "1.8.0") {
[08:28:24.887]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:24.887]                             "", base::R.version$version.string), 
[08:28:24.887]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:24.887]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:24.887]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:24.887]                               "release", "version")], collapse = " "), 
[08:28:24.887]                             hostname = base::Sys.info()[["nodename"]])
[08:28:24.887]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:24.887]                             info)
[08:28:24.887]                           info <- base::paste(info, collapse = "; ")
[08:28:24.887]                           if (!has_future) {
[08:28:24.887]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:24.887]                               info)
[08:28:24.887]                           }
[08:28:24.887]                           else {
[08:28:24.887]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:24.887]                               info, version)
[08:28:24.887]                           }
[08:28:24.887]                           base::stop(msg)
[08:28:24.887]                         }
[08:28:24.887]                       })
[08:28:24.887]                     }
[08:28:24.887]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:24.887]                     base::options(mc.cores = 1L)
[08:28:24.887]                   }
[08:28:24.887]                   ...future.strategy.old <- future::plan("list")
[08:28:24.887]                   options(future.plan = NULL)
[08:28:24.887]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.887]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:24.887]                 }
[08:28:24.887]                 ...future.workdir <- getwd()
[08:28:24.887]             }
[08:28:24.887]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:24.887]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:24.887]         }
[08:28:24.887]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:24.887]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:24.887]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:24.887]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:24.887]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:24.887]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:24.887]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:24.887]             base::names(...future.oldOptions))
[08:28:24.887]     }
[08:28:24.887]     if (FALSE) {
[08:28:24.887]     }
[08:28:24.887]     else {
[08:28:24.887]         if (TRUE) {
[08:28:24.887]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:24.887]                 open = "w")
[08:28:24.887]         }
[08:28:24.887]         else {
[08:28:24.887]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:24.887]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:24.887]         }
[08:28:24.887]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:24.887]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:24.887]             base::sink(type = "output", split = FALSE)
[08:28:24.887]             base::close(...future.stdout)
[08:28:24.887]         }, add = TRUE)
[08:28:24.887]     }
[08:28:24.887]     ...future.frame <- base::sys.nframe()
[08:28:24.887]     ...future.conditions <- base::list()
[08:28:24.887]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:24.887]     if (FALSE) {
[08:28:24.887]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:24.887]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:24.887]     }
[08:28:24.887]     ...future.result <- base::tryCatch({
[08:28:24.887]         base::withCallingHandlers({
[08:28:24.887]             ...future.value <- base::withVisible(base::local({
[08:28:24.887]                 ...future.makeSendCondition <- base::local({
[08:28:24.887]                   sendCondition <- NULL
[08:28:24.887]                   function(frame = 1L) {
[08:28:24.887]                     if (is.function(sendCondition)) 
[08:28:24.887]                       return(sendCondition)
[08:28:24.887]                     ns <- getNamespace("parallel")
[08:28:24.887]                     if (exists("sendData", mode = "function", 
[08:28:24.887]                       envir = ns)) {
[08:28:24.887]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:24.887]                         envir = ns)
[08:28:24.887]                       envir <- sys.frame(frame)
[08:28:24.887]                       master <- NULL
[08:28:24.887]                       while (!identical(envir, .GlobalEnv) && 
[08:28:24.887]                         !identical(envir, emptyenv())) {
[08:28:24.887]                         if (exists("master", mode = "list", envir = envir, 
[08:28:24.887]                           inherits = FALSE)) {
[08:28:24.887]                           master <- get("master", mode = "list", 
[08:28:24.887]                             envir = envir, inherits = FALSE)
[08:28:24.887]                           if (inherits(master, c("SOCKnode", 
[08:28:24.887]                             "SOCK0node"))) {
[08:28:24.887]                             sendCondition <<- function(cond) {
[08:28:24.887]                               data <- list(type = "VALUE", value = cond, 
[08:28:24.887]                                 success = TRUE)
[08:28:24.887]                               parallel_sendData(master, data)
[08:28:24.887]                             }
[08:28:24.887]                             return(sendCondition)
[08:28:24.887]                           }
[08:28:24.887]                         }
[08:28:24.887]                         frame <- frame + 1L
[08:28:24.887]                         envir <- sys.frame(frame)
[08:28:24.887]                       }
[08:28:24.887]                     }
[08:28:24.887]                     sendCondition <<- function(cond) NULL
[08:28:24.887]                   }
[08:28:24.887]                 })
[08:28:24.887]                 withCallingHandlers({
[08:28:24.887]                   {
[08:28:24.887]                     stopifnot(f1$owner != future:::session_uuid(attributes = TRUE))
[08:28:24.887]                     "not-owner"
[08:28:24.887]                   }
[08:28:24.887]                 }, immediateCondition = function(cond) {
[08:28:24.887]                   sendCondition <- ...future.makeSendCondition()
[08:28:24.887]                   sendCondition(cond)
[08:28:24.887]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.887]                   {
[08:28:24.887]                     inherits <- base::inherits
[08:28:24.887]                     invokeRestart <- base::invokeRestart
[08:28:24.887]                     is.null <- base::is.null
[08:28:24.887]                     muffled <- FALSE
[08:28:24.887]                     if (inherits(cond, "message")) {
[08:28:24.887]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:24.887]                       if (muffled) 
[08:28:24.887]                         invokeRestart("muffleMessage")
[08:28:24.887]                     }
[08:28:24.887]                     else if (inherits(cond, "warning")) {
[08:28:24.887]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:24.887]                       if (muffled) 
[08:28:24.887]                         invokeRestart("muffleWarning")
[08:28:24.887]                     }
[08:28:24.887]                     else if (inherits(cond, "condition")) {
[08:28:24.887]                       if (!is.null(pattern)) {
[08:28:24.887]                         computeRestarts <- base::computeRestarts
[08:28:24.887]                         grepl <- base::grepl
[08:28:24.887]                         restarts <- computeRestarts(cond)
[08:28:24.887]                         for (restart in restarts) {
[08:28:24.887]                           name <- restart$name
[08:28:24.887]                           if (is.null(name)) 
[08:28:24.887]                             next
[08:28:24.887]                           if (!grepl(pattern, name)) 
[08:28:24.887]                             next
[08:28:24.887]                           invokeRestart(restart)
[08:28:24.887]                           muffled <- TRUE
[08:28:24.887]                           break
[08:28:24.887]                         }
[08:28:24.887]                       }
[08:28:24.887]                     }
[08:28:24.887]                     invisible(muffled)
[08:28:24.887]                   }
[08:28:24.887]                   muffleCondition(cond)
[08:28:24.887]                 })
[08:28:24.887]             }))
[08:28:24.887]             future::FutureResult(value = ...future.value$value, 
[08:28:24.887]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.887]                   ...future.rng), globalenv = if (FALSE) 
[08:28:24.887]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:24.887]                     ...future.globalenv.names))
[08:28:24.887]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:24.887]         }, condition = base::local({
[08:28:24.887]             c <- base::c
[08:28:24.887]             inherits <- base::inherits
[08:28:24.887]             invokeRestart <- base::invokeRestart
[08:28:24.887]             length <- base::length
[08:28:24.887]             list <- base::list
[08:28:24.887]             seq.int <- base::seq.int
[08:28:24.887]             signalCondition <- base::signalCondition
[08:28:24.887]             sys.calls <- base::sys.calls
[08:28:24.887]             `[[` <- base::`[[`
[08:28:24.887]             `+` <- base::`+`
[08:28:24.887]             `<<-` <- base::`<<-`
[08:28:24.887]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:24.887]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:24.887]                   3L)]
[08:28:24.887]             }
[08:28:24.887]             function(cond) {
[08:28:24.887]                 is_error <- inherits(cond, "error")
[08:28:24.887]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:24.887]                   NULL)
[08:28:24.887]                 if (is_error) {
[08:28:24.887]                   sessionInformation <- function() {
[08:28:24.887]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:24.887]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:24.887]                       search = base::search(), system = base::Sys.info())
[08:28:24.887]                   }
[08:28:24.887]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.887]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:24.887]                     cond$call), session = sessionInformation(), 
[08:28:24.887]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:24.887]                   signalCondition(cond)
[08:28:24.887]                 }
[08:28:24.887]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:24.887]                 "immediateCondition"))) {
[08:28:24.887]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:24.887]                   ...future.conditions[[length(...future.conditions) + 
[08:28:24.887]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:24.887]                   if (TRUE && !signal) {
[08:28:24.887]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.887]                     {
[08:28:24.887]                       inherits <- base::inherits
[08:28:24.887]                       invokeRestart <- base::invokeRestart
[08:28:24.887]                       is.null <- base::is.null
[08:28:24.887]                       muffled <- FALSE
[08:28:24.887]                       if (inherits(cond, "message")) {
[08:28:24.887]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.887]                         if (muffled) 
[08:28:24.887]                           invokeRestart("muffleMessage")
[08:28:24.887]                       }
[08:28:24.887]                       else if (inherits(cond, "warning")) {
[08:28:24.887]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.887]                         if (muffled) 
[08:28:24.887]                           invokeRestart("muffleWarning")
[08:28:24.887]                       }
[08:28:24.887]                       else if (inherits(cond, "condition")) {
[08:28:24.887]                         if (!is.null(pattern)) {
[08:28:24.887]                           computeRestarts <- base::computeRestarts
[08:28:24.887]                           grepl <- base::grepl
[08:28:24.887]                           restarts <- computeRestarts(cond)
[08:28:24.887]                           for (restart in restarts) {
[08:28:24.887]                             name <- restart$name
[08:28:24.887]                             if (is.null(name)) 
[08:28:24.887]                               next
[08:28:24.887]                             if (!grepl(pattern, name)) 
[08:28:24.887]                               next
[08:28:24.887]                             invokeRestart(restart)
[08:28:24.887]                             muffled <- TRUE
[08:28:24.887]                             break
[08:28:24.887]                           }
[08:28:24.887]                         }
[08:28:24.887]                       }
[08:28:24.887]                       invisible(muffled)
[08:28:24.887]                     }
[08:28:24.887]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.887]                   }
[08:28:24.887]                 }
[08:28:24.887]                 else {
[08:28:24.887]                   if (TRUE) {
[08:28:24.887]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:24.887]                     {
[08:28:24.887]                       inherits <- base::inherits
[08:28:24.887]                       invokeRestart <- base::invokeRestart
[08:28:24.887]                       is.null <- base::is.null
[08:28:24.887]                       muffled <- FALSE
[08:28:24.887]                       if (inherits(cond, "message")) {
[08:28:24.887]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:24.887]                         if (muffled) 
[08:28:24.887]                           invokeRestart("muffleMessage")
[08:28:24.887]                       }
[08:28:24.887]                       else if (inherits(cond, "warning")) {
[08:28:24.887]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:24.887]                         if (muffled) 
[08:28:24.887]                           invokeRestart("muffleWarning")
[08:28:24.887]                       }
[08:28:24.887]                       else if (inherits(cond, "condition")) {
[08:28:24.887]                         if (!is.null(pattern)) {
[08:28:24.887]                           computeRestarts <- base::computeRestarts
[08:28:24.887]                           grepl <- base::grepl
[08:28:24.887]                           restarts <- computeRestarts(cond)
[08:28:24.887]                           for (restart in restarts) {
[08:28:24.887]                             name <- restart$name
[08:28:24.887]                             if (is.null(name)) 
[08:28:24.887]                               next
[08:28:24.887]                             if (!grepl(pattern, name)) 
[08:28:24.887]                               next
[08:28:24.887]                             invokeRestart(restart)
[08:28:24.887]                             muffled <- TRUE
[08:28:24.887]                             break
[08:28:24.887]                           }
[08:28:24.887]                         }
[08:28:24.887]                       }
[08:28:24.887]                       invisible(muffled)
[08:28:24.887]                     }
[08:28:24.887]                     muffleCondition(cond, pattern = "^muffle")
[08:28:24.887]                   }
[08:28:24.887]                 }
[08:28:24.887]             }
[08:28:24.887]         }))
[08:28:24.887]     }, error = function(ex) {
[08:28:24.887]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:24.887]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:24.887]                 ...future.rng), started = ...future.startTime, 
[08:28:24.887]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:24.887]             version = "1.8"), class = "FutureResult")
[08:28:24.887]     }, finally = {
[08:28:24.887]         if (!identical(...future.workdir, getwd())) 
[08:28:24.887]             setwd(...future.workdir)
[08:28:24.887]         {
[08:28:24.887]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:24.887]                 ...future.oldOptions$nwarnings <- NULL
[08:28:24.887]             }
[08:28:24.887]             base::options(...future.oldOptions)
[08:28:24.887]             if (.Platform$OS.type == "windows") {
[08:28:24.887]                 old_names <- names(...future.oldEnvVars)
[08:28:24.887]                 envs <- base::Sys.getenv()
[08:28:24.887]                 names <- names(envs)
[08:28:24.887]                 common <- intersect(names, old_names)
[08:28:24.887]                 added <- setdiff(names, old_names)
[08:28:24.887]                 removed <- setdiff(old_names, names)
[08:28:24.887]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:24.887]                   envs[common]]
[08:28:24.887]                 NAMES <- toupper(changed)
[08:28:24.887]                 args <- list()
[08:28:24.887]                 for (kk in seq_along(NAMES)) {
[08:28:24.887]                   name <- changed[[kk]]
[08:28:24.887]                   NAME <- NAMES[[kk]]
[08:28:24.887]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.887]                     next
[08:28:24.887]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.887]                 }
[08:28:24.887]                 NAMES <- toupper(added)
[08:28:24.887]                 for (kk in seq_along(NAMES)) {
[08:28:24.887]                   name <- added[[kk]]
[08:28:24.887]                   NAME <- NAMES[[kk]]
[08:28:24.887]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.887]                     next
[08:28:24.887]                   args[[name]] <- ""
[08:28:24.887]                 }
[08:28:24.887]                 NAMES <- toupper(removed)
[08:28:24.887]                 for (kk in seq_along(NAMES)) {
[08:28:24.887]                   name <- removed[[kk]]
[08:28:24.887]                   NAME <- NAMES[[kk]]
[08:28:24.887]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:24.887]                     next
[08:28:24.887]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:24.887]                 }
[08:28:24.887]                 if (length(args) > 0) 
[08:28:24.887]                   base::do.call(base::Sys.setenv, args = args)
[08:28:24.887]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:24.887]             }
[08:28:24.887]             else {
[08:28:24.887]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:24.887]             }
[08:28:24.887]             {
[08:28:24.887]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:24.887]                   0L) {
[08:28:24.887]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:24.887]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:24.887]                   base::options(opts)
[08:28:24.887]                 }
[08:28:24.887]                 {
[08:28:24.887]                   {
[08:28:24.887]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:24.887]                     NULL
[08:28:24.887]                   }
[08:28:24.887]                   options(future.plan = NULL)
[08:28:24.887]                   if (is.na(NA_character_)) 
[08:28:24.887]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:24.887]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:24.887]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:24.887]                     .init = FALSE)
[08:28:24.887]                 }
[08:28:24.887]             }
[08:28:24.887]         }
[08:28:24.887]     })
[08:28:24.887]     if (TRUE) {
[08:28:24.887]         base::sink(type = "output", split = FALSE)
[08:28:24.887]         if (TRUE) {
[08:28:24.887]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:24.887]         }
[08:28:24.887]         else {
[08:28:24.887]             ...future.result["stdout"] <- base::list(NULL)
[08:28:24.887]         }
[08:28:24.887]         base::close(...future.stdout)
[08:28:24.887]         ...future.stdout <- NULL
[08:28:24.887]     }
[08:28:24.887]     ...future.result$conditions <- ...future.conditions
[08:28:24.887]     ...future.result$finished <- base::Sys.time()
[08:28:24.887]     ...future.result
[08:28:24.887] }
[08:28:24.900] Exporting 1 global objects (314.20 KiB) to cluster node #1 ...
[08:28:24.911] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ...
[08:28:24.964] Exporting ‘f1’ (313.99 KiB) to cluster node #1 ... DONE
[08:28:24.964] Exporting 1 global objects (314.20 KiB) to cluster node #1 ... DONE
[08:28:24.964] MultisessionFuture started
[08:28:24.965] - Launch lazy future ... done
[08:28:24.965] run() for ‘MultisessionFuture’ ... done
> stopifnot(inherits(f5, "MultisessionFuture"))
> v5 <- value(f5)
[08:28:24.965] result() for ClusterFuture ...
[08:28:24.965] receiveMessageFromWorker() for ClusterFuture ...
[08:28:24.965] - Validating connection of MultisessionFuture
[08:28:25.006] - received message: FutureResult
[08:28:25.006] - Received FutureResult
[08:28:25.006] - Erased future from FutureRegistry
[08:28:25.006] result() for ClusterFuture ...
[08:28:25.007] - result already collected: FutureResult
[08:28:25.007] result() for ClusterFuture ... done
[08:28:25.007] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:25.007] result() for ClusterFuture ... done
[08:28:25.007] result() for ClusterFuture ...
[08:28:25.007] - result already collected: FutureResult
[08:28:25.007] result() for ClusterFuture ... done
> stopifnot(v5 == "not-owner")
> 
> message("- Asserting ownership ... DONE")
- Asserting ownership ... DONE
> 
> 
> message("- Trying with invalid ownership ...")
- Trying with invalid ownership ...
> 
> message("Creating future #1:")
Creating future #1:
> f1 <- future({ 42L })
[08:28:25.007] getGlobalsAndPackages() ...
[08:28:25.008] Searching for globals...
[08:28:25.008] - globals found: [1] ‘{’
[08:28:25.008] Searching for globals ... DONE
[08:28:25.008] Resolving globals: FALSE
[08:28:25.009] 
[08:28:25.009] 
[08:28:25.009] getGlobalsAndPackages() ... DONE
[08:28:25.009] run() for ‘Future’ ...
[08:28:25.009] - state: ‘created’
[08:28:25.009] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:25.022] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:25.022] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:25.023]   - Field: ‘node’
[08:28:25.023]   - Field: ‘label’
[08:28:25.023]   - Field: ‘local’
[08:28:25.023]   - Field: ‘owner’
[08:28:25.023]   - Field: ‘envir’
[08:28:25.023]   - Field: ‘workers’
[08:28:25.023]   - Field: ‘packages’
[08:28:25.023]   - Field: ‘gc’
[08:28:25.023]   - Field: ‘conditions’
[08:28:25.023]   - Field: ‘persistent’
[08:28:25.023]   - Field: ‘expr’
[08:28:25.024]   - Field: ‘uuid’
[08:28:25.024]   - Field: ‘seed’
[08:28:25.024]   - Field: ‘version’
[08:28:25.024]   - Field: ‘result’
[08:28:25.024]   - Field: ‘asynchronous’
[08:28:25.024]   - Field: ‘calls’
[08:28:25.024]   - Field: ‘globals’
[08:28:25.024]   - Field: ‘stdout’
[08:28:25.024]   - Field: ‘earlySignal’
[08:28:25.024]   - Field: ‘lazy’
[08:28:25.024]   - Field: ‘state’
[08:28:25.024] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:25.025] - Launch lazy future ...
[08:28:25.025] Packages needed by the future expression (n = 0): <none>
[08:28:25.025] Packages needed by future strategies (n = 0): <none>
[08:28:25.025] {
[08:28:25.025]     {
[08:28:25.025]         {
[08:28:25.025]             ...future.startTime <- base::Sys.time()
[08:28:25.025]             {
[08:28:25.025]                 {
[08:28:25.025]                   {
[08:28:25.025]                     {
[08:28:25.025]                       base::local({
[08:28:25.025]                         has_future <- base::requireNamespace("future", 
[08:28:25.025]                           quietly = TRUE)
[08:28:25.025]                         if (has_future) {
[08:28:25.025]                           ns <- base::getNamespace("future")
[08:28:25.025]                           version <- ns[[".package"]][["version"]]
[08:28:25.025]                           if (is.null(version)) 
[08:28:25.025]                             version <- utils::packageVersion("future")
[08:28:25.025]                         }
[08:28:25.025]                         else {
[08:28:25.025]                           version <- NULL
[08:28:25.025]                         }
[08:28:25.025]                         if (!has_future || version < "1.8.0") {
[08:28:25.025]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:25.025]                             "", base::R.version$version.string), 
[08:28:25.025]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:25.025]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:25.025]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:25.025]                               "release", "version")], collapse = " "), 
[08:28:25.025]                             hostname = base::Sys.info()[["nodename"]])
[08:28:25.025]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:25.025]                             info)
[08:28:25.025]                           info <- base::paste(info, collapse = "; ")
[08:28:25.025]                           if (!has_future) {
[08:28:25.025]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:25.025]                               info)
[08:28:25.025]                           }
[08:28:25.025]                           else {
[08:28:25.025]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:25.025]                               info, version)
[08:28:25.025]                           }
[08:28:25.025]                           base::stop(msg)
[08:28:25.025]                         }
[08:28:25.025]                       })
[08:28:25.025]                     }
[08:28:25.025]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:25.025]                     base::options(mc.cores = 1L)
[08:28:25.025]                   }
[08:28:25.025]                   ...future.strategy.old <- future::plan("list")
[08:28:25.025]                   options(future.plan = NULL)
[08:28:25.025]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:25.025]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:25.025]                 }
[08:28:25.025]                 ...future.workdir <- getwd()
[08:28:25.025]             }
[08:28:25.025]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:25.025]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:25.025]         }
[08:28:25.025]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:25.025]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:25.025]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:25.025]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:25.025]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:25.025]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:25.025]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:25.025]             base::names(...future.oldOptions))
[08:28:25.025]     }
[08:28:25.025]     if (FALSE) {
[08:28:25.025]     }
[08:28:25.025]     else {
[08:28:25.025]         if (TRUE) {
[08:28:25.025]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:25.025]                 open = "w")
[08:28:25.025]         }
[08:28:25.025]         else {
[08:28:25.025]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:25.025]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:25.025]         }
[08:28:25.025]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:25.025]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:25.025]             base::sink(type = "output", split = FALSE)
[08:28:25.025]             base::close(...future.stdout)
[08:28:25.025]         }, add = TRUE)
[08:28:25.025]     }
[08:28:25.025]     ...future.frame <- base::sys.nframe()
[08:28:25.025]     ...future.conditions <- base::list()
[08:28:25.025]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:25.025]     if (FALSE) {
[08:28:25.025]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:25.025]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:25.025]     }
[08:28:25.025]     ...future.result <- base::tryCatch({
[08:28:25.025]         base::withCallingHandlers({
[08:28:25.025]             ...future.value <- base::withVisible(base::local({
[08:28:25.025]                 ...future.makeSendCondition <- base::local({
[08:28:25.025]                   sendCondition <- NULL
[08:28:25.025]                   function(frame = 1L) {
[08:28:25.025]                     if (is.function(sendCondition)) 
[08:28:25.025]                       return(sendCondition)
[08:28:25.025]                     ns <- getNamespace("parallel")
[08:28:25.025]                     if (exists("sendData", mode = "function", 
[08:28:25.025]                       envir = ns)) {
[08:28:25.025]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:25.025]                         envir = ns)
[08:28:25.025]                       envir <- sys.frame(frame)
[08:28:25.025]                       master <- NULL
[08:28:25.025]                       while (!identical(envir, .GlobalEnv) && 
[08:28:25.025]                         !identical(envir, emptyenv())) {
[08:28:25.025]                         if (exists("master", mode = "list", envir = envir, 
[08:28:25.025]                           inherits = FALSE)) {
[08:28:25.025]                           master <- get("master", mode = "list", 
[08:28:25.025]                             envir = envir, inherits = FALSE)
[08:28:25.025]                           if (inherits(master, c("SOCKnode", 
[08:28:25.025]                             "SOCK0node"))) {
[08:28:25.025]                             sendCondition <<- function(cond) {
[08:28:25.025]                               data <- list(type = "VALUE", value = cond, 
[08:28:25.025]                                 success = TRUE)
[08:28:25.025]                               parallel_sendData(master, data)
[08:28:25.025]                             }
[08:28:25.025]                             return(sendCondition)
[08:28:25.025]                           }
[08:28:25.025]                         }
[08:28:25.025]                         frame <- frame + 1L
[08:28:25.025]                         envir <- sys.frame(frame)
[08:28:25.025]                       }
[08:28:25.025]                     }
[08:28:25.025]                     sendCondition <<- function(cond) NULL
[08:28:25.025]                   }
[08:28:25.025]                 })
[08:28:25.025]                 withCallingHandlers({
[08:28:25.025]                   {
[08:28:25.025]                     42L
[08:28:25.025]                   }
[08:28:25.025]                 }, immediateCondition = function(cond) {
[08:28:25.025]                   sendCondition <- ...future.makeSendCondition()
[08:28:25.025]                   sendCondition(cond)
[08:28:25.025]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.025]                   {
[08:28:25.025]                     inherits <- base::inherits
[08:28:25.025]                     invokeRestart <- base::invokeRestart
[08:28:25.025]                     is.null <- base::is.null
[08:28:25.025]                     muffled <- FALSE
[08:28:25.025]                     if (inherits(cond, "message")) {
[08:28:25.025]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:25.025]                       if (muffled) 
[08:28:25.025]                         invokeRestart("muffleMessage")
[08:28:25.025]                     }
[08:28:25.025]                     else if (inherits(cond, "warning")) {
[08:28:25.025]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:25.025]                       if (muffled) 
[08:28:25.025]                         invokeRestart("muffleWarning")
[08:28:25.025]                     }
[08:28:25.025]                     else if (inherits(cond, "condition")) {
[08:28:25.025]                       if (!is.null(pattern)) {
[08:28:25.025]                         computeRestarts <- base::computeRestarts
[08:28:25.025]                         grepl <- base::grepl
[08:28:25.025]                         restarts <- computeRestarts(cond)
[08:28:25.025]                         for (restart in restarts) {
[08:28:25.025]                           name <- restart$name
[08:28:25.025]                           if (is.null(name)) 
[08:28:25.025]                             next
[08:28:25.025]                           if (!grepl(pattern, name)) 
[08:28:25.025]                             next
[08:28:25.025]                           invokeRestart(restart)
[08:28:25.025]                           muffled <- TRUE
[08:28:25.025]                           break
[08:28:25.025]                         }
[08:28:25.025]                       }
[08:28:25.025]                     }
[08:28:25.025]                     invisible(muffled)
[08:28:25.025]                   }
[08:28:25.025]                   muffleCondition(cond)
[08:28:25.025]                 })
[08:28:25.025]             }))
[08:28:25.025]             future::FutureResult(value = ...future.value$value, 
[08:28:25.025]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:25.025]                   ...future.rng), globalenv = if (FALSE) 
[08:28:25.025]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:25.025]                     ...future.globalenv.names))
[08:28:25.025]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:25.025]         }, condition = base::local({
[08:28:25.025]             c <- base::c
[08:28:25.025]             inherits <- base::inherits
[08:28:25.025]             invokeRestart <- base::invokeRestart
[08:28:25.025]             length <- base::length
[08:28:25.025]             list <- base::list
[08:28:25.025]             seq.int <- base::seq.int
[08:28:25.025]             signalCondition <- base::signalCondition
[08:28:25.025]             sys.calls <- base::sys.calls
[08:28:25.025]             `[[` <- base::`[[`
[08:28:25.025]             `+` <- base::`+`
[08:28:25.025]             `<<-` <- base::`<<-`
[08:28:25.025]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:25.025]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:25.025]                   3L)]
[08:28:25.025]             }
[08:28:25.025]             function(cond) {
[08:28:25.025]                 is_error <- inherits(cond, "error")
[08:28:25.025]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:25.025]                   NULL)
[08:28:25.025]                 if (is_error) {
[08:28:25.025]                   sessionInformation <- function() {
[08:28:25.025]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:25.025]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:25.025]                       search = base::search(), system = base::Sys.info())
[08:28:25.025]                   }
[08:28:25.025]                   ...future.conditions[[length(...future.conditions) + 
[08:28:25.025]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:25.025]                     cond$call), session = sessionInformation(), 
[08:28:25.025]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:25.025]                   signalCondition(cond)
[08:28:25.025]                 }
[08:28:25.025]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:25.025]                 "immediateCondition"))) {
[08:28:25.025]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:25.025]                   ...future.conditions[[length(...future.conditions) + 
[08:28:25.025]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:25.025]                   if (TRUE && !signal) {
[08:28:25.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.025]                     {
[08:28:25.025]                       inherits <- base::inherits
[08:28:25.025]                       invokeRestart <- base::invokeRestart
[08:28:25.025]                       is.null <- base::is.null
[08:28:25.025]                       muffled <- FALSE
[08:28:25.025]                       if (inherits(cond, "message")) {
[08:28:25.025]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:25.025]                         if (muffled) 
[08:28:25.025]                           invokeRestart("muffleMessage")
[08:28:25.025]                       }
[08:28:25.025]                       else if (inherits(cond, "warning")) {
[08:28:25.025]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:25.025]                         if (muffled) 
[08:28:25.025]                           invokeRestart("muffleWarning")
[08:28:25.025]                       }
[08:28:25.025]                       else if (inherits(cond, "condition")) {
[08:28:25.025]                         if (!is.null(pattern)) {
[08:28:25.025]                           computeRestarts <- base::computeRestarts
[08:28:25.025]                           grepl <- base::grepl
[08:28:25.025]                           restarts <- computeRestarts(cond)
[08:28:25.025]                           for (restart in restarts) {
[08:28:25.025]                             name <- restart$name
[08:28:25.025]                             if (is.null(name)) 
[08:28:25.025]                               next
[08:28:25.025]                             if (!grepl(pattern, name)) 
[08:28:25.025]                               next
[08:28:25.025]                             invokeRestart(restart)
[08:28:25.025]                             muffled <- TRUE
[08:28:25.025]                             break
[08:28:25.025]                           }
[08:28:25.025]                         }
[08:28:25.025]                       }
[08:28:25.025]                       invisible(muffled)
[08:28:25.025]                     }
[08:28:25.025]                     muffleCondition(cond, pattern = "^muffle")
[08:28:25.025]                   }
[08:28:25.025]                 }
[08:28:25.025]                 else {
[08:28:25.025]                   if (TRUE) {
[08:28:25.025]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.025]                     {
[08:28:25.025]                       inherits <- base::inherits
[08:28:25.025]                       invokeRestart <- base::invokeRestart
[08:28:25.025]                       is.null <- base::is.null
[08:28:25.025]                       muffled <- FALSE
[08:28:25.025]                       if (inherits(cond, "message")) {
[08:28:25.025]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:25.025]                         if (muffled) 
[08:28:25.025]                           invokeRestart("muffleMessage")
[08:28:25.025]                       }
[08:28:25.025]                       else if (inherits(cond, "warning")) {
[08:28:25.025]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:25.025]                         if (muffled) 
[08:28:25.025]                           invokeRestart("muffleWarning")
[08:28:25.025]                       }
[08:28:25.025]                       else if (inherits(cond, "condition")) {
[08:28:25.025]                         if (!is.null(pattern)) {
[08:28:25.025]                           computeRestarts <- base::computeRestarts
[08:28:25.025]                           grepl <- base::grepl
[08:28:25.025]                           restarts <- computeRestarts(cond)
[08:28:25.025]                           for (restart in restarts) {
[08:28:25.025]                             name <- restart$name
[08:28:25.025]                             if (is.null(name)) 
[08:28:25.025]                               next
[08:28:25.025]                             if (!grepl(pattern, name)) 
[08:28:25.025]                               next
[08:28:25.025]                             invokeRestart(restart)
[08:28:25.025]                             muffled <- TRUE
[08:28:25.025]                             break
[08:28:25.025]                           }
[08:28:25.025]                         }
[08:28:25.025]                       }
[08:28:25.025]                       invisible(muffled)
[08:28:25.025]                     }
[08:28:25.025]                     muffleCondition(cond, pattern = "^muffle")
[08:28:25.025]                   }
[08:28:25.025]                 }
[08:28:25.025]             }
[08:28:25.025]         }))
[08:28:25.025]     }, error = function(ex) {
[08:28:25.025]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:25.025]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:25.025]                 ...future.rng), started = ...future.startTime, 
[08:28:25.025]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:25.025]             version = "1.8"), class = "FutureResult")
[08:28:25.025]     }, finally = {
[08:28:25.025]         if (!identical(...future.workdir, getwd())) 
[08:28:25.025]             setwd(...future.workdir)
[08:28:25.025]         {
[08:28:25.025]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:25.025]                 ...future.oldOptions$nwarnings <- NULL
[08:28:25.025]             }
[08:28:25.025]             base::options(...future.oldOptions)
[08:28:25.025]             if (.Platform$OS.type == "windows") {
[08:28:25.025]                 old_names <- names(...future.oldEnvVars)
[08:28:25.025]                 envs <- base::Sys.getenv()
[08:28:25.025]                 names <- names(envs)
[08:28:25.025]                 common <- intersect(names, old_names)
[08:28:25.025]                 added <- setdiff(names, old_names)
[08:28:25.025]                 removed <- setdiff(old_names, names)
[08:28:25.025]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:25.025]                   envs[common]]
[08:28:25.025]                 NAMES <- toupper(changed)
[08:28:25.025]                 args <- list()
[08:28:25.025]                 for (kk in seq_along(NAMES)) {
[08:28:25.025]                   name <- changed[[kk]]
[08:28:25.025]                   NAME <- NAMES[[kk]]
[08:28:25.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.025]                     next
[08:28:25.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:25.025]                 }
[08:28:25.025]                 NAMES <- toupper(added)
[08:28:25.025]                 for (kk in seq_along(NAMES)) {
[08:28:25.025]                   name <- added[[kk]]
[08:28:25.025]                   NAME <- NAMES[[kk]]
[08:28:25.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.025]                     next
[08:28:25.025]                   args[[name]] <- ""
[08:28:25.025]                 }
[08:28:25.025]                 NAMES <- toupper(removed)
[08:28:25.025]                 for (kk in seq_along(NAMES)) {
[08:28:25.025]                   name <- removed[[kk]]
[08:28:25.025]                   NAME <- NAMES[[kk]]
[08:28:25.025]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.025]                     next
[08:28:25.025]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:25.025]                 }
[08:28:25.025]                 if (length(args) > 0) 
[08:28:25.025]                   base::do.call(base::Sys.setenv, args = args)
[08:28:25.025]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:25.025]             }
[08:28:25.025]             else {
[08:28:25.025]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:25.025]             }
[08:28:25.025]             {
[08:28:25.025]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:25.025]                   0L) {
[08:28:25.025]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:25.025]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:25.025]                   base::options(opts)
[08:28:25.025]                 }
[08:28:25.025]                 {
[08:28:25.025]                   {
[08:28:25.025]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:25.025]                     NULL
[08:28:25.025]                   }
[08:28:25.025]                   options(future.plan = NULL)
[08:28:25.025]                   if (is.na(NA_character_)) 
[08:28:25.025]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:25.025]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:25.025]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:25.025]                     .init = FALSE)
[08:28:25.025]                 }
[08:28:25.025]             }
[08:28:25.025]         }
[08:28:25.025]     })
[08:28:25.025]     if (TRUE) {
[08:28:25.025]         base::sink(type = "output", split = FALSE)
[08:28:25.025]         if (TRUE) {
[08:28:25.025]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:25.025]         }
[08:28:25.025]         else {
[08:28:25.025]             ...future.result["stdout"] <- base::list(NULL)
[08:28:25.025]         }
[08:28:25.025]         base::close(...future.stdout)
[08:28:25.025]         ...future.stdout <- NULL
[08:28:25.025]     }
[08:28:25.025]     ...future.result$conditions <- ...future.conditions
[08:28:25.025]     ...future.result$finished <- base::Sys.time()
[08:28:25.025]     ...future.result
[08:28:25.025] }
[08:28:25.028] MultisessionFuture started
[08:28:25.028] - Launch lazy future ... done
[08:28:25.029] run() for ‘MultisessionFuture’ ... done
> ## FIXME: print() calls resolved(), which triggers a result() collection,
> ## and future 'f1' to become resolved.  This means future 'f2' below
> ## may launch on the same worker as 'f1'.  So, don't resolve().
> # print(f1)
> cat(sprintf("Future #1 session: %d\n", f1$node))
Future #1 session: 1
> stopifnot(identical(f1$owner, session_uuid))
> print(usedNodes(f1))
 used total 
    1     2 
> 
> message("Creating future #2:")
Creating future #2:
> f2 <- future({ value(f1) })
[08:28:25.029] getGlobalsAndPackages() ...
[08:28:25.029] Searching for globals...
[08:28:25.030] - globals found: [3] ‘{’, ‘value’, ‘f1’
[08:28:25.030] Searching for globals ... DONE
[08:28:25.030] Resolving globals: FALSE
[08:28:25.041] The total size of the 1 globals is 311.92 KiB (319401 bytes)
[08:28:25.041] The total size of the 1 globals exported for future expression (‘{; value(f1); }’) is 311.92 KiB.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘f1’ (311.92 KiB of class ‘environment’)
[08:28:25.041] - globals: [1] ‘f1’
[08:28:25.042] - packages: [1] ‘future’
[08:28:25.042] getGlobalsAndPackages() ... DONE
[08:28:25.042] run() for ‘Future’ ...
[08:28:25.042] - state: ‘created’
[08:28:25.042] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:25.054] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:25.055] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:28:25.055]   - Field: ‘node’
[08:28:25.055]   - Field: ‘label’
[08:28:25.055]   - Field: ‘local’
[08:28:25.055]   - Field: ‘owner’
[08:28:25.055]   - Field: ‘envir’
[08:28:25.055]   - Field: ‘workers’
[08:28:25.055]   - Field: ‘packages’
[08:28:25.055]   - Field: ‘gc’
[08:28:25.055]   - Field: ‘conditions’
[08:28:25.055]   - Field: ‘persistent’
[08:28:25.056]   - Field: ‘expr’
[08:28:25.056]   - Field: ‘uuid’
[08:28:25.056]   - Field: ‘seed’
[08:28:25.056]   - Field: ‘version’
[08:28:25.056]   - Field: ‘result’
[08:28:25.056]   - Field: ‘asynchronous’
[08:28:25.056]   - Field: ‘calls’
[08:28:25.056]   - Field: ‘globals’
[08:28:25.056]   - Field: ‘stdout’
[08:28:25.056]   - Field: ‘earlySignal’
[08:28:25.056]   - Field: ‘lazy’
[08:28:25.056]   - Field: ‘state’
[08:28:25.057] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:28:25.057] - Launch lazy future ...
[08:28:25.057] Packages needed by the future expression (n = 1): ‘future’
[08:28:25.057] Packages needed by future strategies (n = 0): <none>
[08:28:25.057] {
[08:28:25.057]     {
[08:28:25.057]         {
[08:28:25.057]             ...future.startTime <- base::Sys.time()
[08:28:25.057]             {
[08:28:25.057]                 {
[08:28:25.057]                   {
[08:28:25.057]                     {
[08:28:25.057]                       {
[08:28:25.057]                         base::local({
[08:28:25.057]                           has_future <- base::requireNamespace("future", 
[08:28:25.057]                             quietly = TRUE)
[08:28:25.057]                           if (has_future) {
[08:28:25.057]                             ns <- base::getNamespace("future")
[08:28:25.057]                             version <- ns[[".package"]][["version"]]
[08:28:25.057]                             if (is.null(version)) 
[08:28:25.057]                               version <- utils::packageVersion("future")
[08:28:25.057]                           }
[08:28:25.057]                           else {
[08:28:25.057]                             version <- NULL
[08:28:25.057]                           }
[08:28:25.057]                           if (!has_future || version < "1.8.0") {
[08:28:25.057]                             info <- base::c(r_version = base::gsub("R version ", 
[08:28:25.057]                               "", base::R.version$version.string), 
[08:28:25.057]                               platform = base::sprintf("%s (%s-bit)", 
[08:28:25.057]                                 base::R.version$platform, 8 * 
[08:28:25.057]                                   base::.Machine$sizeof.pointer), 
[08:28:25.057]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:25.057]                                 "release", "version")], collapse = " "), 
[08:28:25.057]                               hostname = base::Sys.info()[["nodename"]])
[08:28:25.057]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:28:25.057]                               info)
[08:28:25.057]                             info <- base::paste(info, collapse = "; ")
[08:28:25.057]                             if (!has_future) {
[08:28:25.057]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:25.057]                                 info)
[08:28:25.057]                             }
[08:28:25.057]                             else {
[08:28:25.057]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:25.057]                                 info, version)
[08:28:25.057]                             }
[08:28:25.057]                             base::stop(msg)
[08:28:25.057]                           }
[08:28:25.057]                         })
[08:28:25.057]                       }
[08:28:25.057]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:25.057]                       base::options(mc.cores = 1L)
[08:28:25.057]                     }
[08:28:25.057]                     base::local({
[08:28:25.057]                       for (pkg in "future") {
[08:28:25.057]                         base::loadNamespace(pkg)
[08:28:25.057]                         base::library(pkg, character.only = TRUE)
[08:28:25.057]                       }
[08:28:25.057]                     })
[08:28:25.057]                   }
[08:28:25.057]                   ...future.strategy.old <- future::plan("list")
[08:28:25.057]                   options(future.plan = NULL)
[08:28:25.057]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:25.057]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:25.057]                 }
[08:28:25.057]                 ...future.workdir <- getwd()
[08:28:25.057]             }
[08:28:25.057]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:25.057]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:25.057]         }
[08:28:25.057]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:25.057]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:25.057]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:25.057]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:25.057]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:25.057]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:25.057]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:25.057]             base::names(...future.oldOptions))
[08:28:25.057]     }
[08:28:25.057]     if (FALSE) {
[08:28:25.057]     }
[08:28:25.057]     else {
[08:28:25.057]         if (TRUE) {
[08:28:25.057]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:25.057]                 open = "w")
[08:28:25.057]         }
[08:28:25.057]         else {
[08:28:25.057]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:25.057]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:25.057]         }
[08:28:25.057]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:25.057]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:25.057]             base::sink(type = "output", split = FALSE)
[08:28:25.057]             base::close(...future.stdout)
[08:28:25.057]         }, add = TRUE)
[08:28:25.057]     }
[08:28:25.057]     ...future.frame <- base::sys.nframe()
[08:28:25.057]     ...future.conditions <- base::list()
[08:28:25.057]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:25.057]     if (FALSE) {
[08:28:25.057]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:25.057]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:25.057]     }
[08:28:25.057]     ...future.result <- base::tryCatch({
[08:28:25.057]         base::withCallingHandlers({
[08:28:25.057]             ...future.value <- base::withVisible(base::local({
[08:28:25.057]                 ...future.makeSendCondition <- base::local({
[08:28:25.057]                   sendCondition <- NULL
[08:28:25.057]                   function(frame = 1L) {
[08:28:25.057]                     if (is.function(sendCondition)) 
[08:28:25.057]                       return(sendCondition)
[08:28:25.057]                     ns <- getNamespace("parallel")
[08:28:25.057]                     if (exists("sendData", mode = "function", 
[08:28:25.057]                       envir = ns)) {
[08:28:25.057]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:25.057]                         envir = ns)
[08:28:25.057]                       envir <- sys.frame(frame)
[08:28:25.057]                       master <- NULL
[08:28:25.057]                       while (!identical(envir, .GlobalEnv) && 
[08:28:25.057]                         !identical(envir, emptyenv())) {
[08:28:25.057]                         if (exists("master", mode = "list", envir = envir, 
[08:28:25.057]                           inherits = FALSE)) {
[08:28:25.057]                           master <- get("master", mode = "list", 
[08:28:25.057]                             envir = envir, inherits = FALSE)
[08:28:25.057]                           if (inherits(master, c("SOCKnode", 
[08:28:25.057]                             "SOCK0node"))) {
[08:28:25.057]                             sendCondition <<- function(cond) {
[08:28:25.057]                               data <- list(type = "VALUE", value = cond, 
[08:28:25.057]                                 success = TRUE)
[08:28:25.057]                               parallel_sendData(master, data)
[08:28:25.057]                             }
[08:28:25.057]                             return(sendCondition)
[08:28:25.057]                           }
[08:28:25.057]                         }
[08:28:25.057]                         frame <- frame + 1L
[08:28:25.057]                         envir <- sys.frame(frame)
[08:28:25.057]                       }
[08:28:25.057]                     }
[08:28:25.057]                     sendCondition <<- function(cond) NULL
[08:28:25.057]                   }
[08:28:25.057]                 })
[08:28:25.057]                 withCallingHandlers({
[08:28:25.057]                   {
[08:28:25.057]                     value(f1)
[08:28:25.057]                   }
[08:28:25.057]                 }, immediateCondition = function(cond) {
[08:28:25.057]                   sendCondition <- ...future.makeSendCondition()
[08:28:25.057]                   sendCondition(cond)
[08:28:25.057]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.057]                   {
[08:28:25.057]                     inherits <- base::inherits
[08:28:25.057]                     invokeRestart <- base::invokeRestart
[08:28:25.057]                     is.null <- base::is.null
[08:28:25.057]                     muffled <- FALSE
[08:28:25.057]                     if (inherits(cond, "message")) {
[08:28:25.057]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:25.057]                       if (muffled) 
[08:28:25.057]                         invokeRestart("muffleMessage")
[08:28:25.057]                     }
[08:28:25.057]                     else if (inherits(cond, "warning")) {
[08:28:25.057]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:25.057]                       if (muffled) 
[08:28:25.057]                         invokeRestart("muffleWarning")
[08:28:25.057]                     }
[08:28:25.057]                     else if (inherits(cond, "condition")) {
[08:28:25.057]                       if (!is.null(pattern)) {
[08:28:25.057]                         computeRestarts <- base::computeRestarts
[08:28:25.057]                         grepl <- base::grepl
[08:28:25.057]                         restarts <- computeRestarts(cond)
[08:28:25.057]                         for (restart in restarts) {
[08:28:25.057]                           name <- restart$name
[08:28:25.057]                           if (is.null(name)) 
[08:28:25.057]                             next
[08:28:25.057]                           if (!grepl(pattern, name)) 
[08:28:25.057]                             next
[08:28:25.057]                           invokeRestart(restart)
[08:28:25.057]                           muffled <- TRUE
[08:28:25.057]                           break
[08:28:25.057]                         }
[08:28:25.057]                       }
[08:28:25.057]                     }
[08:28:25.057]                     invisible(muffled)
[08:28:25.057]                   }
[08:28:25.057]                   muffleCondition(cond)
[08:28:25.057]                 })
[08:28:25.057]             }))
[08:28:25.057]             future::FutureResult(value = ...future.value$value, 
[08:28:25.057]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:25.057]                   ...future.rng), globalenv = if (FALSE) 
[08:28:25.057]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:25.057]                     ...future.globalenv.names))
[08:28:25.057]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:25.057]         }, condition = base::local({
[08:28:25.057]             c <- base::c
[08:28:25.057]             inherits <- base::inherits
[08:28:25.057]             invokeRestart <- base::invokeRestart
[08:28:25.057]             length <- base::length
[08:28:25.057]             list <- base::list
[08:28:25.057]             seq.int <- base::seq.int
[08:28:25.057]             signalCondition <- base::signalCondition
[08:28:25.057]             sys.calls <- base::sys.calls
[08:28:25.057]             `[[` <- base::`[[`
[08:28:25.057]             `+` <- base::`+`
[08:28:25.057]             `<<-` <- base::`<<-`
[08:28:25.057]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:25.057]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:25.057]                   3L)]
[08:28:25.057]             }
[08:28:25.057]             function(cond) {
[08:28:25.057]                 is_error <- inherits(cond, "error")
[08:28:25.057]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:25.057]                   NULL)
[08:28:25.057]                 if (is_error) {
[08:28:25.057]                   sessionInformation <- function() {
[08:28:25.057]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:25.057]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:25.057]                       search = base::search(), system = base::Sys.info())
[08:28:25.057]                   }
[08:28:25.057]                   ...future.conditions[[length(...future.conditions) + 
[08:28:25.057]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:25.057]                     cond$call), session = sessionInformation(), 
[08:28:25.057]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:25.057]                   signalCondition(cond)
[08:28:25.057]                 }
[08:28:25.057]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:25.057]                 "immediateCondition"))) {
[08:28:25.057]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:25.057]                   ...future.conditions[[length(...future.conditions) + 
[08:28:25.057]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:25.057]                   if (TRUE && !signal) {
[08:28:25.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.057]                     {
[08:28:25.057]                       inherits <- base::inherits
[08:28:25.057]                       invokeRestart <- base::invokeRestart
[08:28:25.057]                       is.null <- base::is.null
[08:28:25.057]                       muffled <- FALSE
[08:28:25.057]                       if (inherits(cond, "message")) {
[08:28:25.057]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:25.057]                         if (muffled) 
[08:28:25.057]                           invokeRestart("muffleMessage")
[08:28:25.057]                       }
[08:28:25.057]                       else if (inherits(cond, "warning")) {
[08:28:25.057]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:25.057]                         if (muffled) 
[08:28:25.057]                           invokeRestart("muffleWarning")
[08:28:25.057]                       }
[08:28:25.057]                       else if (inherits(cond, "condition")) {
[08:28:25.057]                         if (!is.null(pattern)) {
[08:28:25.057]                           computeRestarts <- base::computeRestarts
[08:28:25.057]                           grepl <- base::grepl
[08:28:25.057]                           restarts <- computeRestarts(cond)
[08:28:25.057]                           for (restart in restarts) {
[08:28:25.057]                             name <- restart$name
[08:28:25.057]                             if (is.null(name)) 
[08:28:25.057]                               next
[08:28:25.057]                             if (!grepl(pattern, name)) 
[08:28:25.057]                               next
[08:28:25.057]                             invokeRestart(restart)
[08:28:25.057]                             muffled <- TRUE
[08:28:25.057]                             break
[08:28:25.057]                           }
[08:28:25.057]                         }
[08:28:25.057]                       }
[08:28:25.057]                       invisible(muffled)
[08:28:25.057]                     }
[08:28:25.057]                     muffleCondition(cond, pattern = "^muffle")
[08:28:25.057]                   }
[08:28:25.057]                 }
[08:28:25.057]                 else {
[08:28:25.057]                   if (TRUE) {
[08:28:25.057]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:25.057]                     {
[08:28:25.057]                       inherits <- base::inherits
[08:28:25.057]                       invokeRestart <- base::invokeRestart
[08:28:25.057]                       is.null <- base::is.null
[08:28:25.057]                       muffled <- FALSE
[08:28:25.057]                       if (inherits(cond, "message")) {
[08:28:25.057]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:25.057]                         if (muffled) 
[08:28:25.057]                           invokeRestart("muffleMessage")
[08:28:25.057]                       }
[08:28:25.057]                       else if (inherits(cond, "warning")) {
[08:28:25.057]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:25.057]                         if (muffled) 
[08:28:25.057]                           invokeRestart("muffleWarning")
[08:28:25.057]                       }
[08:28:25.057]                       else if (inherits(cond, "condition")) {
[08:28:25.057]                         if (!is.null(pattern)) {
[08:28:25.057]                           computeRestarts <- base::computeRestarts
[08:28:25.057]                           grepl <- base::grepl
[08:28:25.057]                           restarts <- computeRestarts(cond)
[08:28:25.057]                           for (restart in restarts) {
[08:28:25.057]                             name <- restart$name
[08:28:25.057]                             if (is.null(name)) 
[08:28:25.057]                               next
[08:28:25.057]                             if (!grepl(pattern, name)) 
[08:28:25.057]                               next
[08:28:25.057]                             invokeRestart(restart)
[08:28:25.057]                             muffled <- TRUE
[08:28:25.057]                             break
[08:28:25.057]                           }
[08:28:25.057]                         }
[08:28:25.057]                       }
[08:28:25.057]                       invisible(muffled)
[08:28:25.057]                     }
[08:28:25.057]                     muffleCondition(cond, pattern = "^muffle")
[08:28:25.057]                   }
[08:28:25.057]                 }
[08:28:25.057]             }
[08:28:25.057]         }))
[08:28:25.057]     }, error = function(ex) {
[08:28:25.057]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:25.057]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:25.057]                 ...future.rng), started = ...future.startTime, 
[08:28:25.057]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:25.057]             version = "1.8"), class = "FutureResult")
[08:28:25.057]     }, finally = {
[08:28:25.057]         if (!identical(...future.workdir, getwd())) 
[08:28:25.057]             setwd(...future.workdir)
[08:28:25.057]         {
[08:28:25.057]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:25.057]                 ...future.oldOptions$nwarnings <- NULL
[08:28:25.057]             }
[08:28:25.057]             base::options(...future.oldOptions)
[08:28:25.057]             if (.Platform$OS.type == "windows") {
[08:28:25.057]                 old_names <- names(...future.oldEnvVars)
[08:28:25.057]                 envs <- base::Sys.getenv()
[08:28:25.057]                 names <- names(envs)
[08:28:25.057]                 common <- intersect(names, old_names)
[08:28:25.057]                 added <- setdiff(names, old_names)
[08:28:25.057]                 removed <- setdiff(old_names, names)
[08:28:25.057]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:25.057]                   envs[common]]
[08:28:25.057]                 NAMES <- toupper(changed)
[08:28:25.057]                 args <- list()
[08:28:25.057]                 for (kk in seq_along(NAMES)) {
[08:28:25.057]                   name <- changed[[kk]]
[08:28:25.057]                   NAME <- NAMES[[kk]]
[08:28:25.057]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.057]                     next
[08:28:25.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:25.057]                 }
[08:28:25.057]                 NAMES <- toupper(added)
[08:28:25.057]                 for (kk in seq_along(NAMES)) {
[08:28:25.057]                   name <- added[[kk]]
[08:28:25.057]                   NAME <- NAMES[[kk]]
[08:28:25.057]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.057]                     next
[08:28:25.057]                   args[[name]] <- ""
[08:28:25.057]                 }
[08:28:25.057]                 NAMES <- toupper(removed)
[08:28:25.057]                 for (kk in seq_along(NAMES)) {
[08:28:25.057]                   name <- removed[[kk]]
[08:28:25.057]                   NAME <- NAMES[[kk]]
[08:28:25.057]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:25.057]                     next
[08:28:25.057]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:25.057]                 }
[08:28:25.057]                 if (length(args) > 0) 
[08:28:25.057]                   base::do.call(base::Sys.setenv, args = args)
[08:28:25.057]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:25.057]             }
[08:28:25.057]             else {
[08:28:25.057]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:25.057]             }
[08:28:25.057]             {
[08:28:25.057]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:25.057]                   0L) {
[08:28:25.057]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:25.057]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:25.057]                   base::options(opts)
[08:28:25.057]                 }
[08:28:25.057]                 {
[08:28:25.057]                   {
[08:28:25.057]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:25.057]                     NULL
[08:28:25.057]                   }
[08:28:25.057]                   options(future.plan = NULL)
[08:28:25.057]                   if (is.na(NA_character_)) 
[08:28:25.057]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:25.057]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:25.057]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:25.057]                     .init = FALSE)
[08:28:25.057]                 }
[08:28:25.057]             }
[08:28:25.057]         }
[08:28:25.057]     })
[08:28:25.057]     if (TRUE) {
[08:28:25.057]         base::sink(type = "output", split = FALSE)
[08:28:25.057]         if (TRUE) {
[08:28:25.057]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:25.057]         }
[08:28:25.057]         else {
[08:28:25.057]             ...future.result["stdout"] <- base::list(NULL)
[08:28:25.057]         }
[08:28:25.057]         base::close(...future.stdout)
[08:28:25.057]         ...future.stdout <- NULL
[08:28:25.057]     }
[08:28:25.057]     ...future.result$conditions <- ...future.conditions
[08:28:25.057]     ...future.result$finished <- base::Sys.time()
[08:28:25.057]     ...future.result
[08:28:25.057] }
[08:28:25.120] Exporting 1 global objects (312.13 KiB) to cluster node #2 ...
[08:28:25.131] Exporting ‘f1’ (311.92 KiB) to cluster node #2 ...
[08:28:25.143] Exporting ‘f1’ (311.92 KiB) to cluster node #2 ... DONE
[08:28:25.144] Exporting 1 global objects (312.13 KiB) to cluster node #2 ... DONE
[08:28:25.144] MultisessionFuture started
[08:28:25.144] - Launch lazy future ... done
[08:28:25.144] run() for ‘MultisessionFuture’ ... done
> print(f2)
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    value(f1)
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 311.92 KiB (MultisessionFuture ‘f1’ of 311.92 KiB)
Packages: 1 packages (‘future’)
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0e2aac7a-e8a5-0071-780a-80dfff2eea33
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
> cat(sprintf("Future #2 session: %d\n", f2$node))
Future #2 session: 2
> stopifnot(identical(f2$owner, session_uuid))
> print(usedNodes(f2))
 used total 
    2     2 
> 
> message("Getting value of future #2:")
Getting value of future #2:
> res <- tryCatch(value(f2), error = identity)
[08:28:25.172] result() for ClusterFuture ...
[08:28:25.172] receiveMessageFromWorker() for ClusterFuture ...
[08:28:25.172] - Validating connection of MultisessionFuture
[08:28:25.235] - received message: FutureResult
[08:28:25.236] - Received FutureResult
[08:28:25.236] - Erased future from FutureRegistry
[08:28:25.236] result() for ClusterFuture ...
[08:28:25.236] - result already collected: FutureResult
[08:28:25.236] result() for ClusterFuture ... done
[08:28:25.236] signalConditions() ...
[08:28:25.236]  - include = ‘immediateCondition’
[08:28:25.236]  - exclude = 
[08:28:25.236]  - resignal = FALSE
[08:28:25.236]  - Number of conditions: 1
[08:28:25.236] signalConditions() ... done
[08:28:25.237] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:25.237] result() for ClusterFuture ... done
[08:28:25.237] result() for ClusterFuture ...
[08:28:25.237] - result already collected: FutureResult
[08:28:25.237] result() for ClusterFuture ... done
[08:28:25.237] signalConditions() ...
[08:28:25.237]  - include = ‘immediateCondition’
[08:28:25.237]  - exclude = 
[08:28:25.237]  - resignal = FALSE
[08:28:25.237]  - Number of conditions: 1
[08:28:25.237] signalConditions() ... done
[08:28:25.238] Future state: ‘finished’
[08:28:25.238] result() for ClusterFuture ...
[08:28:25.238] - result already collected: FutureResult
[08:28:25.238] result() for ClusterFuture ... done
[08:28:25.238] signalConditions() ...
[08:28:25.238]  - include = ‘condition’
[08:28:25.238]  - exclude = ‘immediateCondition’
[08:28:25.238]  - resignal = TRUE
[08:28:25.238]  - Number of conditions: 1
[08:28:25.238]  - Condition #1: ‘FutureError’, ‘error’, ‘FutureCondition’, ‘condition’
[08:28:25.238] signalConditions() ... done
> print(res)
<FutureError: Invalid usage of futures: A future (here ‘MultisessionFuture’) whose value has not yet been collected can only be queried by the R process (0e2aac7a-e8a5-0071-780a-80dfff2eea33; pid 81313 on e9e776910d73) that created it, not by any other R processes (a22491d5-eefd-9913-291c-ee682fe71c12; pid 81366 on e9e776910d73): {; 42L; }>


Future UUID: d7e33332-83dd-6b9d-c2be-4f8534fa7e8c


DEBUG: BEGIN TROUBLESHOOTING HELP
Future involved:
MultisessionFuture:
Label: ‘<none>’
Expression:
{
    42L
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: FALSE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 0e2aac7a-e8a5-0071-780a-80dfff2eea33
Class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’

DEBUG: END TROUBLESHOOTING HELP
> stopifnot(inherits(res, "error"))
> 
> v1 <- value(f1)
[08:28:25.239] result() for ClusterFuture ...
[08:28:25.239] receiveMessageFromWorker() for ClusterFuture ...
[08:28:25.239] - Validating connection of MultisessionFuture
[08:28:25.240] - received message: FutureResult
[08:28:25.240] - Received FutureResult
[08:28:25.240] - Erased future from FutureRegistry
[08:28:25.240] result() for ClusterFuture ...
[08:28:25.240] - result already collected: FutureResult
[08:28:25.240] result() for ClusterFuture ... done
[08:28:25.240] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:25.240] result() for ClusterFuture ... done
[08:28:25.240] result() for ClusterFuture ...
[08:28:25.240] - result already collected: FutureResult
[08:28:25.240] result() for ClusterFuture ... done
> print(v1)
[1] 42
> stopifnot(v1 == 42L)
> 
> message("- Trying with invalid ownership ... DONE")
- Trying with invalid ownership ... DONE
> 
> message("*** future() - invalid ownership ... DONE")
*** future() - invalid ownership ... DONE
> 
> source("incl/end.R")
[08:28:25.241] plan(): Setting new future strategy stack:
[08:28:25.241] List of future strategies:
[08:28:25.241] 1. FutureStrategy:
[08:28:25.241]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:25.241]    - tweaked: FALSE
[08:28:25.241]    - call: future::plan(oplan)
[08:28:25.242] plan(): nbrOfWorkers() = 1
> 
