
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:29:47.227] plan(): Setting new future strategy stack:
[08:29:47.227] List of future strategies:
[08:29:47.227] 1. sequential:
[08:29:47.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.227]    - tweaked: FALSE
[08:29:47.227]    - call: future::plan("sequential")
[08:29:47.241] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[08:29:47.256] plan(): Setting new future strategy stack:
[08:29:47.256] List of future strategies:
[08:29:47.256] 1. sequential:
[08:29:47.256]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.256]    - tweaked: FALSE
[08:29:47.256]    - call: NULL
[08:29:47.267] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[08:29:47.273] plan(): Setting new future strategy stack:
[08:29:47.273] List of future strategies:
[08:29:47.273] 1. sequential:
[08:29:47.273]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.273]    - tweaked: FALSE
[08:29:47.273]    - call: NULL
[08:29:47.273] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[08:29:47.274] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.274] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.274] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.274] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.274] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.274] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.275] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.276] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.276] R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.277] Coercing from character to numeric: ‘0.01’
[08:29:47.277] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[08:29:47.277] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.277] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.277] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.277] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.277] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.278] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.278] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.278] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.278] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:47.278] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.278] Setting plan('default')
[08:29:47.278] plan(): Setting new future strategy stack:
[08:29:47.278] List of future strategies:
[08:29:47.278] 1. sequential:
[08:29:47.278]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.278]    - tweaked: FALSE
[08:29:47.278]    - call: NULL
[08:29:47.279] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[08:29:47.279] plan(): Setting new future strategy stack:
[08:29:47.279] List of future strategies:
[08:29:47.279] 1. sequential:
[08:29:47.279]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.279]    - tweaked: FALSE
[08:29:47.279]    - call: NULL
[08:29:47.280] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[08:29:47.280] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.281] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.281] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.281] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.281] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.283] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.284] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.285] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.286] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.286] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.286] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:47.286] R command-line argument: -p 1
[08:29:47.286]  => options(future.plan = sequential)
[08:29:47.286] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.286] Setting plan('default')
[08:29:47.286] plan(): Setting new future strategy stack:
[08:29:47.286] List of future strategies:
[08:29:47.286] 1. sequential:
[08:29:47.286]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.286]    - tweaked: FALSE
[08:29:47.286]    - call: NULL
[08:29:47.287] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[08:29:47.287] plan(): Setting new future strategy stack:
[08:29:47.287] List of future strategies:
[08:29:47.287] 1. sequential:
[08:29:47.287]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.287]    - tweaked: FALSE
[08:29:47.287]    - call: NULL
[08:29:47.288] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[08:29:47.288] plan(): Setting new future strategy stack:
[08:29:47.288] List of future strategies:
[08:29:47.288] 1. sequential:
[08:29:47.288]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.288]    - tweaked: FALSE
[08:29:47.288]    - call: NULL
[08:29:47.289] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[08:29:47.289] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.289] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.289] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.290] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.291] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.292] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.293] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:47.293] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.293] Setting plan('default')
[08:29:47.293] plan(): Setting new future strategy stack:
[08:29:47.293] List of future strategies:
[08:29:47.293] 1. sequential:
[08:29:47.293]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.293]    - tweaked: FALSE
[08:29:47.293]    - call: NULL
[08:29:47.293] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[08:29:47.294] plan(): Setting new future strategy stack:
[08:29:47.294] List of future strategies:
[08:29:47.294] 1. sequential:
[08:29:47.294]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.294]    - tweaked: FALSE
[08:29:47.294]    - call: NULL
[08:29:47.294] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[08:29:47.295] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.295] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.295] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.295] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.295] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.296] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.297] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.298] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:47.299] R command-line argument: -p 2
[08:29:47.299]  => options(future.plan = tweak(multisession, workers = 2))
[08:29:47.301] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.301] Setting plan('default')
[08:29:47.301] plan(): Setting new future strategy stack:
[08:29:47.301] List of future strategies:
[08:29:47.301] 1. multisession:
[08:29:47.301]    - args: function (..., workers = 2L, envir = parent.frame())
[08:29:47.301]    - tweaked: TRUE
[08:29:47.301]    - call: NULL
[08:29:47.301] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[08:29:47.302] plan(): Setting new future strategy stack:
[08:29:47.302] List of future strategies:
[08:29:47.302] 1. multisession:
[08:29:47.302]    - args: function (..., workers = 2L, envir = parent.frame())
[08:29:47.302]    - tweaked: TRUE
[08:29:47.302]    - call: NULL
[08:29:47.302] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:47.302] multisession:
[08:29:47.302] - args: function (..., workers = 2L, envir = parent.frame())
[08:29:47.302] - tweaked: TRUE
[08:29:47.302] - call: NULL
[08:29:47.303] getGlobalsAndPackages() ...
[08:29:47.303] Not searching for globals
[08:29:47.304] - globals: [0] <none>
[08:29:47.304] getGlobalsAndPackages() ... DONE
[08:29:47.771] Packages needed by the future expression (n = 0): <none>
[08:29:47.771] Packages needed by future strategies (n = 0): <none>
[08:29:47.772] {
[08:29:47.772]     {
[08:29:47.772]         {
[08:29:47.772]             ...future.startTime <- base::Sys.time()
[08:29:47.772]             {
[08:29:47.772]                 {
[08:29:47.772]                   {
[08:29:47.772]                     {
[08:29:47.772]                       base::local({
[08:29:47.772]                         has_future <- base::requireNamespace("future", 
[08:29:47.772]                           quietly = TRUE)
[08:29:47.772]                         if (has_future) {
[08:29:47.772]                           ns <- base::getNamespace("future")
[08:29:47.772]                           version <- ns[[".package"]][["version"]]
[08:29:47.772]                           if (is.null(version)) 
[08:29:47.772]                             version <- utils::packageVersion("future")
[08:29:47.772]                         }
[08:29:47.772]                         else {
[08:29:47.772]                           version <- NULL
[08:29:47.772]                         }
[08:29:47.772]                         if (!has_future || version < "1.8.0") {
[08:29:47.772]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:47.772]                             "", base::R.version$version.string), 
[08:29:47.772]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:47.772]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:47.772]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:47.772]                               "release", "version")], collapse = " "), 
[08:29:47.772]                             hostname = base::Sys.info()[["nodename"]])
[08:29:47.772]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:47.772]                             info)
[08:29:47.772]                           info <- base::paste(info, collapse = "; ")
[08:29:47.772]                           if (!has_future) {
[08:29:47.772]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:47.772]                               info)
[08:29:47.772]                           }
[08:29:47.772]                           else {
[08:29:47.772]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:47.772]                               info, version)
[08:29:47.772]                           }
[08:29:47.772]                           base::stop(msg)
[08:29:47.772]                         }
[08:29:47.772]                       })
[08:29:47.772]                     }
[08:29:47.772]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:47.772]                     base::options(mc.cores = 1L)
[08:29:47.772]                   }
[08:29:47.772]                   ...future.strategy.old <- future::plan("list")
[08:29:47.772]                   options(future.plan = NULL)
[08:29:47.772]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:47.772]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:47.772]                 }
[08:29:47.772]                 ...future.workdir <- getwd()
[08:29:47.772]             }
[08:29:47.772]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:47.772]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:47.772]         }
[08:29:47.772]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:47.772]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:47.772]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:47.772]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:47.772]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:47.772]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:47.772]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:47.772]             base::names(...future.oldOptions))
[08:29:47.772]     }
[08:29:47.772]     if (FALSE) {
[08:29:47.772]     }
[08:29:47.772]     else {
[08:29:47.772]         if (TRUE) {
[08:29:47.772]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:47.772]                 open = "w")
[08:29:47.772]         }
[08:29:47.772]         else {
[08:29:47.772]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:47.772]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:47.772]         }
[08:29:47.772]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:47.772]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:47.772]             base::sink(type = "output", split = FALSE)
[08:29:47.772]             base::close(...future.stdout)
[08:29:47.772]         }, add = TRUE)
[08:29:47.772]     }
[08:29:47.772]     ...future.frame <- base::sys.nframe()
[08:29:47.772]     ...future.conditions <- base::list()
[08:29:47.772]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:47.772]     if (FALSE) {
[08:29:47.772]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:47.772]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:47.772]     }
[08:29:47.772]     ...future.result <- base::tryCatch({
[08:29:47.772]         base::withCallingHandlers({
[08:29:47.772]             ...future.value <- base::withVisible(base::local({
[08:29:47.772]                 ...future.makeSendCondition <- base::local({
[08:29:47.772]                   sendCondition <- NULL
[08:29:47.772]                   function(frame = 1L) {
[08:29:47.772]                     if (is.function(sendCondition)) 
[08:29:47.772]                       return(sendCondition)
[08:29:47.772]                     ns <- getNamespace("parallel")
[08:29:47.772]                     if (exists("sendData", mode = "function", 
[08:29:47.772]                       envir = ns)) {
[08:29:47.772]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:47.772]                         envir = ns)
[08:29:47.772]                       envir <- sys.frame(frame)
[08:29:47.772]                       master <- NULL
[08:29:47.772]                       while (!identical(envir, .GlobalEnv) && 
[08:29:47.772]                         !identical(envir, emptyenv())) {
[08:29:47.772]                         if (exists("master", mode = "list", envir = envir, 
[08:29:47.772]                           inherits = FALSE)) {
[08:29:47.772]                           master <- get("master", mode = "list", 
[08:29:47.772]                             envir = envir, inherits = FALSE)
[08:29:47.772]                           if (inherits(master, c("SOCKnode", 
[08:29:47.772]                             "SOCK0node"))) {
[08:29:47.772]                             sendCondition <<- function(cond) {
[08:29:47.772]                               data <- list(type = "VALUE", value = cond, 
[08:29:47.772]                                 success = TRUE)
[08:29:47.772]                               parallel_sendData(master, data)
[08:29:47.772]                             }
[08:29:47.772]                             return(sendCondition)
[08:29:47.772]                           }
[08:29:47.772]                         }
[08:29:47.772]                         frame <- frame + 1L
[08:29:47.772]                         envir <- sys.frame(frame)
[08:29:47.772]                       }
[08:29:47.772]                     }
[08:29:47.772]                     sendCondition <<- function(cond) NULL
[08:29:47.772]                   }
[08:29:47.772]                 })
[08:29:47.772]                 withCallingHandlers({
[08:29:47.772]                   NA
[08:29:47.772]                 }, immediateCondition = function(cond) {
[08:29:47.772]                   sendCondition <- ...future.makeSendCondition()
[08:29:47.772]                   sendCondition(cond)
[08:29:47.772]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:47.772]                   {
[08:29:47.772]                     inherits <- base::inherits
[08:29:47.772]                     invokeRestart <- base::invokeRestart
[08:29:47.772]                     is.null <- base::is.null
[08:29:47.772]                     muffled <- FALSE
[08:29:47.772]                     if (inherits(cond, "message")) {
[08:29:47.772]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:47.772]                       if (muffled) 
[08:29:47.772]                         invokeRestart("muffleMessage")
[08:29:47.772]                     }
[08:29:47.772]                     else if (inherits(cond, "warning")) {
[08:29:47.772]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:47.772]                       if (muffled) 
[08:29:47.772]                         invokeRestart("muffleWarning")
[08:29:47.772]                     }
[08:29:47.772]                     else if (inherits(cond, "condition")) {
[08:29:47.772]                       if (!is.null(pattern)) {
[08:29:47.772]                         computeRestarts <- base::computeRestarts
[08:29:47.772]                         grepl <- base::grepl
[08:29:47.772]                         restarts <- computeRestarts(cond)
[08:29:47.772]                         for (restart in restarts) {
[08:29:47.772]                           name <- restart$name
[08:29:47.772]                           if (is.null(name)) 
[08:29:47.772]                             next
[08:29:47.772]                           if (!grepl(pattern, name)) 
[08:29:47.772]                             next
[08:29:47.772]                           invokeRestart(restart)
[08:29:47.772]                           muffled <- TRUE
[08:29:47.772]                           break
[08:29:47.772]                         }
[08:29:47.772]                       }
[08:29:47.772]                     }
[08:29:47.772]                     invisible(muffled)
[08:29:47.772]                   }
[08:29:47.772]                   muffleCondition(cond)
[08:29:47.772]                 })
[08:29:47.772]             }))
[08:29:47.772]             future::FutureResult(value = ...future.value$value, 
[08:29:47.772]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:47.772]                   ...future.rng), globalenv = if (FALSE) 
[08:29:47.772]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:47.772]                     ...future.globalenv.names))
[08:29:47.772]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:47.772]         }, condition = base::local({
[08:29:47.772]             c <- base::c
[08:29:47.772]             inherits <- base::inherits
[08:29:47.772]             invokeRestart <- base::invokeRestart
[08:29:47.772]             length <- base::length
[08:29:47.772]             list <- base::list
[08:29:47.772]             seq.int <- base::seq.int
[08:29:47.772]             signalCondition <- base::signalCondition
[08:29:47.772]             sys.calls <- base::sys.calls
[08:29:47.772]             `[[` <- base::`[[`
[08:29:47.772]             `+` <- base::`+`
[08:29:47.772]             `<<-` <- base::`<<-`
[08:29:47.772]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:47.772]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:47.772]                   3L)]
[08:29:47.772]             }
[08:29:47.772]             function(cond) {
[08:29:47.772]                 is_error <- inherits(cond, "error")
[08:29:47.772]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:47.772]                   NULL)
[08:29:47.772]                 if (is_error) {
[08:29:47.772]                   sessionInformation <- function() {
[08:29:47.772]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:47.772]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:47.772]                       search = base::search(), system = base::Sys.info())
[08:29:47.772]                   }
[08:29:47.772]                   ...future.conditions[[length(...future.conditions) + 
[08:29:47.772]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:47.772]                     cond$call), session = sessionInformation(), 
[08:29:47.772]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:47.772]                   signalCondition(cond)
[08:29:47.772]                 }
[08:29:47.772]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:47.772]                 "immediateCondition"))) {
[08:29:47.772]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:47.772]                   ...future.conditions[[length(...future.conditions) + 
[08:29:47.772]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:47.772]                   if (TRUE && !signal) {
[08:29:47.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:47.772]                     {
[08:29:47.772]                       inherits <- base::inherits
[08:29:47.772]                       invokeRestart <- base::invokeRestart
[08:29:47.772]                       is.null <- base::is.null
[08:29:47.772]                       muffled <- FALSE
[08:29:47.772]                       if (inherits(cond, "message")) {
[08:29:47.772]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:47.772]                         if (muffled) 
[08:29:47.772]                           invokeRestart("muffleMessage")
[08:29:47.772]                       }
[08:29:47.772]                       else if (inherits(cond, "warning")) {
[08:29:47.772]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:47.772]                         if (muffled) 
[08:29:47.772]                           invokeRestart("muffleWarning")
[08:29:47.772]                       }
[08:29:47.772]                       else if (inherits(cond, "condition")) {
[08:29:47.772]                         if (!is.null(pattern)) {
[08:29:47.772]                           computeRestarts <- base::computeRestarts
[08:29:47.772]                           grepl <- base::grepl
[08:29:47.772]                           restarts <- computeRestarts(cond)
[08:29:47.772]                           for (restart in restarts) {
[08:29:47.772]                             name <- restart$name
[08:29:47.772]                             if (is.null(name)) 
[08:29:47.772]                               next
[08:29:47.772]                             if (!grepl(pattern, name)) 
[08:29:47.772]                               next
[08:29:47.772]                             invokeRestart(restart)
[08:29:47.772]                             muffled <- TRUE
[08:29:47.772]                             break
[08:29:47.772]                           }
[08:29:47.772]                         }
[08:29:47.772]                       }
[08:29:47.772]                       invisible(muffled)
[08:29:47.772]                     }
[08:29:47.772]                     muffleCondition(cond, pattern = "^muffle")
[08:29:47.772]                   }
[08:29:47.772]                 }
[08:29:47.772]                 else {
[08:29:47.772]                   if (TRUE) {
[08:29:47.772]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:47.772]                     {
[08:29:47.772]                       inherits <- base::inherits
[08:29:47.772]                       invokeRestart <- base::invokeRestart
[08:29:47.772]                       is.null <- base::is.null
[08:29:47.772]                       muffled <- FALSE
[08:29:47.772]                       if (inherits(cond, "message")) {
[08:29:47.772]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:47.772]                         if (muffled) 
[08:29:47.772]                           invokeRestart("muffleMessage")
[08:29:47.772]                       }
[08:29:47.772]                       else if (inherits(cond, "warning")) {
[08:29:47.772]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:47.772]                         if (muffled) 
[08:29:47.772]                           invokeRestart("muffleWarning")
[08:29:47.772]                       }
[08:29:47.772]                       else if (inherits(cond, "condition")) {
[08:29:47.772]                         if (!is.null(pattern)) {
[08:29:47.772]                           computeRestarts <- base::computeRestarts
[08:29:47.772]                           grepl <- base::grepl
[08:29:47.772]                           restarts <- computeRestarts(cond)
[08:29:47.772]                           for (restart in restarts) {
[08:29:47.772]                             name <- restart$name
[08:29:47.772]                             if (is.null(name)) 
[08:29:47.772]                               next
[08:29:47.772]                             if (!grepl(pattern, name)) 
[08:29:47.772]                               next
[08:29:47.772]                             invokeRestart(restart)
[08:29:47.772]                             muffled <- TRUE
[08:29:47.772]                             break
[08:29:47.772]                           }
[08:29:47.772]                         }
[08:29:47.772]                       }
[08:29:47.772]                       invisible(muffled)
[08:29:47.772]                     }
[08:29:47.772]                     muffleCondition(cond, pattern = "^muffle")
[08:29:47.772]                   }
[08:29:47.772]                 }
[08:29:47.772]             }
[08:29:47.772]         }))
[08:29:47.772]     }, error = function(ex) {
[08:29:47.772]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:47.772]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:47.772]                 ...future.rng), started = ...future.startTime, 
[08:29:47.772]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:47.772]             version = "1.8"), class = "FutureResult")
[08:29:47.772]     }, finally = {
[08:29:47.772]         if (!identical(...future.workdir, getwd())) 
[08:29:47.772]             setwd(...future.workdir)
[08:29:47.772]         {
[08:29:47.772]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:47.772]                 ...future.oldOptions$nwarnings <- NULL
[08:29:47.772]             }
[08:29:47.772]             base::options(...future.oldOptions)
[08:29:47.772]             if (.Platform$OS.type == "windows") {
[08:29:47.772]                 old_names <- names(...future.oldEnvVars)
[08:29:47.772]                 envs <- base::Sys.getenv()
[08:29:47.772]                 names <- names(envs)
[08:29:47.772]                 common <- intersect(names, old_names)
[08:29:47.772]                 added <- setdiff(names, old_names)
[08:29:47.772]                 removed <- setdiff(old_names, names)
[08:29:47.772]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:47.772]                   envs[common]]
[08:29:47.772]                 NAMES <- toupper(changed)
[08:29:47.772]                 args <- list()
[08:29:47.772]                 for (kk in seq_along(NAMES)) {
[08:29:47.772]                   name <- changed[[kk]]
[08:29:47.772]                   NAME <- NAMES[[kk]]
[08:29:47.772]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:47.772]                     next
[08:29:47.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:47.772]                 }
[08:29:47.772]                 NAMES <- toupper(added)
[08:29:47.772]                 for (kk in seq_along(NAMES)) {
[08:29:47.772]                   name <- added[[kk]]
[08:29:47.772]                   NAME <- NAMES[[kk]]
[08:29:47.772]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:47.772]                     next
[08:29:47.772]                   args[[name]] <- ""
[08:29:47.772]                 }
[08:29:47.772]                 NAMES <- toupper(removed)
[08:29:47.772]                 for (kk in seq_along(NAMES)) {
[08:29:47.772]                   name <- removed[[kk]]
[08:29:47.772]                   NAME <- NAMES[[kk]]
[08:29:47.772]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:47.772]                     next
[08:29:47.772]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:47.772]                 }
[08:29:47.772]                 if (length(args) > 0) 
[08:29:47.772]                   base::do.call(base::Sys.setenv, args = args)
[08:29:47.772]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:47.772]             }
[08:29:47.772]             else {
[08:29:47.772]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:47.772]             }
[08:29:47.772]             {
[08:29:47.772]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:47.772]                   0L) {
[08:29:47.772]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:47.772]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:47.772]                   base::options(opts)
[08:29:47.772]                 }
[08:29:47.772]                 {
[08:29:47.772]                   {
[08:29:47.772]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:47.772]                     NULL
[08:29:47.772]                   }
[08:29:47.772]                   options(future.plan = function (..., workers = 2L, 
[08:29:47.772]                     envir = parent.frame()) 
[08:29:47.772]                   strategy(..., workers = workers, envir = envir))
[08:29:47.772]                   if (is.na(NA_character_)) 
[08:29:47.772]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:47.772]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:47.772]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:47.772]                     .init = FALSE)
[08:29:47.772]                 }
[08:29:47.772]             }
[08:29:47.772]         }
[08:29:47.772]     })
[08:29:47.772]     if (TRUE) {
[08:29:47.772]         base::sink(type = "output", split = FALSE)
[08:29:47.772]         if (TRUE) {
[08:29:47.772]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:47.772]         }
[08:29:47.772]         else {
[08:29:47.772]             ...future.result["stdout"] <- base::list(NULL)
[08:29:47.772]         }
[08:29:47.772]         base::close(...future.stdout)
[08:29:47.772]         ...future.stdout <- NULL
[08:29:47.772]     }
[08:29:47.772]     ...future.result$conditions <- ...future.conditions
[08:29:47.772]     ...future.result$finished <- base::Sys.time()
[08:29:47.772]     ...future.result
[08:29:47.772] }
[08:29:47.824] MultisessionFuture started
[08:29:47.825] result() for ClusterFuture ...
[08:29:47.825] receiveMessageFromWorker() for ClusterFuture ...
[08:29:47.826] - Validating connection of MultisessionFuture
[08:29:47.856] - received message: FutureResult
[08:29:47.856] - Received FutureResult
[08:29:47.859] - Erased future from FutureRegistry
[08:29:47.859] result() for ClusterFuture ...
[08:29:47.859] - result already collected: FutureResult
[08:29:47.859] result() for ClusterFuture ... done
[08:29:47.859] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:47.859] result() for ClusterFuture ... done
[08:29:47.859] result() for ClusterFuture ...
[08:29:47.859] - result already collected: FutureResult
[08:29:47.859] result() for ClusterFuture ... done
[08:29:47.860] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:47.860] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[08:29:47.861] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.861] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.861] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.861] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.861] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.861] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.861] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.862] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.863] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.864] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[08:29:47.864] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.865] Setting plan('default')
[08:29:47.865] plan(): Setting new future strategy stack:
[08:29:47.865] List of future strategies:
[08:29:47.865] 1. sequential:
[08:29:47.865]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.865]    - tweaked: FALSE
[08:29:47.865]    - call: NULL
[08:29:47.866] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[08:29:47.866] plan(): Setting new future strategy stack:
[08:29:47.866] List of future strategies:
[08:29:47.866] 1. sequential:
[08:29:47.866]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.866]    - tweaked: FALSE
[08:29:47.866]    - call: NULL
[08:29:47.867] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[08:29:47.868] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.868] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.868] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.869] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.870] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.871] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.872] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.873] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.873] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.873] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[08:29:47.873] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.874] Setting plan('default')
[08:29:47.874] plan(): Setting new future strategy stack:
[08:29:47.874] List of future strategies:
[08:29:47.874] 1. sequential:
[08:29:47.874]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.874]    - tweaked: FALSE
[08:29:47.874]    - call: NULL
[08:29:47.874] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[08:29:47.875] plan(): Setting new future strategy stack:
[08:29:47.875] List of future strategies:
[08:29:47.875] 1. sequential:
[08:29:47.875]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.875]    - tweaked: FALSE
[08:29:47.875]    - call: NULL
[08:29:47.876] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[08:29:47.877] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.877] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.877] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.877] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.877] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_PLAN’ not set
[08:29:47.878] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.879] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.880] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.881] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[08:29:47.882] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.882] Setting plan('default')
[08:29:47.882] plan(): Setting new future strategy stack:
[08:29:47.882] List of future strategies:
[08:29:47.882] 1. sequential:
[08:29:47.882]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.882]    - tweaked: FALSE
[08:29:47.882]    - call: NULL
[08:29:47.883] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[08:29:47.883] plan(): Setting new future strategy stack:
[08:29:47.884] List of future strategies:
[08:29:47.884] 1. sequential:
[08:29:47.884]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:47.884]    - tweaked: FALSE
[08:29:47.884]    - call: NULL
[08:29:47.884] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[08:29:47.885] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:47.886] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:47.886] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:47.887] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:47.887] R_FUTURE_PLAN=‘multisession’
[08:29:47.887] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[08:29:47.887] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:47.887] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:47.887] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:47.887] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:47.887] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:47.888] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:47.889] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:47.890] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:47.890] Option 'future.plan' = ‘multisession’
[08:29:47.890] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:47.890] Setting plan('default')
[08:29:47.890] plan(): Setting new future strategy stack:
[08:29:47.890] List of future strategies:
[08:29:47.890] 1. multisession:
[08:29:47.890]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:47.890]    - tweaked: FALSE
[08:29:47.890]    - call: plan("default", .init = FALSE)
[08:29:47.892] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[08:29:47.893] plan(): Setting new future strategy stack:
[08:29:47.893] List of future strategies:
[08:29:47.893] 1. multisession:
[08:29:47.893]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:47.893]    - tweaked: FALSE
[08:29:47.893]    - call: plan("default")
[08:29:47.893] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:47.893] multisession:
[08:29:47.893] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:47.893] - tweaked: FALSE
[08:29:47.893] - call: plan("default")
[08:29:47.895] getGlobalsAndPackages() ...
[08:29:47.895] Not searching for globals
[08:29:47.895] - globals: [0] <none>
[08:29:47.896] getGlobalsAndPackages() ... DONE
[08:29:48.157] Packages needed by the future expression (n = 0): <none>
[08:29:48.157] Packages needed by future strategies (n = 0): <none>
[08:29:48.157] {
[08:29:48.157]     {
[08:29:48.157]         {
[08:29:48.157]             ...future.startTime <- base::Sys.time()
[08:29:48.157]             {
[08:29:48.157]                 {
[08:29:48.157]                   {
[08:29:48.157]                     {
[08:29:48.157]                       base::local({
[08:29:48.157]                         has_future <- base::requireNamespace("future", 
[08:29:48.157]                           quietly = TRUE)
[08:29:48.157]                         if (has_future) {
[08:29:48.157]                           ns <- base::getNamespace("future")
[08:29:48.157]                           version <- ns[[".package"]][["version"]]
[08:29:48.157]                           if (is.null(version)) 
[08:29:48.157]                             version <- utils::packageVersion("future")
[08:29:48.157]                         }
[08:29:48.157]                         else {
[08:29:48.157]                           version <- NULL
[08:29:48.157]                         }
[08:29:48.157]                         if (!has_future || version < "1.8.0") {
[08:29:48.157]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:48.157]                             "", base::R.version$version.string), 
[08:29:48.157]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:48.157]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:48.157]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:48.157]                               "release", "version")], collapse = " "), 
[08:29:48.157]                             hostname = base::Sys.info()[["nodename"]])
[08:29:48.157]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:48.157]                             info)
[08:29:48.157]                           info <- base::paste(info, collapse = "; ")
[08:29:48.157]                           if (!has_future) {
[08:29:48.157]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:48.157]                               info)
[08:29:48.157]                           }
[08:29:48.157]                           else {
[08:29:48.157]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:48.157]                               info, version)
[08:29:48.157]                           }
[08:29:48.157]                           base::stop(msg)
[08:29:48.157]                         }
[08:29:48.157]                       })
[08:29:48.157]                     }
[08:29:48.157]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:48.157]                     base::options(mc.cores = 1L)
[08:29:48.157]                   }
[08:29:48.157]                   ...future.strategy.old <- future::plan("list")
[08:29:48.157]                   options(future.plan = NULL)
[08:29:48.157]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.157]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:48.157]                 }
[08:29:48.157]                 ...future.workdir <- getwd()
[08:29:48.157]             }
[08:29:48.157]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:48.157]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:48.157]         }
[08:29:48.157]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:48.157]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:48.157]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:48.157]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:48.157]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:48.157]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:48.157]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:48.157]             base::names(...future.oldOptions))
[08:29:48.157]     }
[08:29:48.157]     if (FALSE) {
[08:29:48.157]     }
[08:29:48.157]     else {
[08:29:48.157]         if (TRUE) {
[08:29:48.157]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:48.157]                 open = "w")
[08:29:48.157]         }
[08:29:48.157]         else {
[08:29:48.157]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:48.157]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:48.157]         }
[08:29:48.157]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:48.157]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:48.157]             base::sink(type = "output", split = FALSE)
[08:29:48.157]             base::close(...future.stdout)
[08:29:48.157]         }, add = TRUE)
[08:29:48.157]     }
[08:29:48.157]     ...future.frame <- base::sys.nframe()
[08:29:48.157]     ...future.conditions <- base::list()
[08:29:48.157]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:48.157]     if (FALSE) {
[08:29:48.157]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:48.157]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:48.157]     }
[08:29:48.157]     ...future.result <- base::tryCatch({
[08:29:48.157]         base::withCallingHandlers({
[08:29:48.157]             ...future.value <- base::withVisible(base::local({
[08:29:48.157]                 ...future.makeSendCondition <- base::local({
[08:29:48.157]                   sendCondition <- NULL
[08:29:48.157]                   function(frame = 1L) {
[08:29:48.157]                     if (is.function(sendCondition)) 
[08:29:48.157]                       return(sendCondition)
[08:29:48.157]                     ns <- getNamespace("parallel")
[08:29:48.157]                     if (exists("sendData", mode = "function", 
[08:29:48.157]                       envir = ns)) {
[08:29:48.157]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:48.157]                         envir = ns)
[08:29:48.157]                       envir <- sys.frame(frame)
[08:29:48.157]                       master <- NULL
[08:29:48.157]                       while (!identical(envir, .GlobalEnv) && 
[08:29:48.157]                         !identical(envir, emptyenv())) {
[08:29:48.157]                         if (exists("master", mode = "list", envir = envir, 
[08:29:48.157]                           inherits = FALSE)) {
[08:29:48.157]                           master <- get("master", mode = "list", 
[08:29:48.157]                             envir = envir, inherits = FALSE)
[08:29:48.157]                           if (inherits(master, c("SOCKnode", 
[08:29:48.157]                             "SOCK0node"))) {
[08:29:48.157]                             sendCondition <<- function(cond) {
[08:29:48.157]                               data <- list(type = "VALUE", value = cond, 
[08:29:48.157]                                 success = TRUE)
[08:29:48.157]                               parallel_sendData(master, data)
[08:29:48.157]                             }
[08:29:48.157]                             return(sendCondition)
[08:29:48.157]                           }
[08:29:48.157]                         }
[08:29:48.157]                         frame <- frame + 1L
[08:29:48.157]                         envir <- sys.frame(frame)
[08:29:48.157]                       }
[08:29:48.157]                     }
[08:29:48.157]                     sendCondition <<- function(cond) NULL
[08:29:48.157]                   }
[08:29:48.157]                 })
[08:29:48.157]                 withCallingHandlers({
[08:29:48.157]                   NA
[08:29:48.157]                 }, immediateCondition = function(cond) {
[08:29:48.157]                   sendCondition <- ...future.makeSendCondition()
[08:29:48.157]                   sendCondition(cond)
[08:29:48.157]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.157]                   {
[08:29:48.157]                     inherits <- base::inherits
[08:29:48.157]                     invokeRestart <- base::invokeRestart
[08:29:48.157]                     is.null <- base::is.null
[08:29:48.157]                     muffled <- FALSE
[08:29:48.157]                     if (inherits(cond, "message")) {
[08:29:48.157]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:48.157]                       if (muffled) 
[08:29:48.157]                         invokeRestart("muffleMessage")
[08:29:48.157]                     }
[08:29:48.157]                     else if (inherits(cond, "warning")) {
[08:29:48.157]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:48.157]                       if (muffled) 
[08:29:48.157]                         invokeRestart("muffleWarning")
[08:29:48.157]                     }
[08:29:48.157]                     else if (inherits(cond, "condition")) {
[08:29:48.157]                       if (!is.null(pattern)) {
[08:29:48.157]                         computeRestarts <- base::computeRestarts
[08:29:48.157]                         grepl <- base::grepl
[08:29:48.157]                         restarts <- computeRestarts(cond)
[08:29:48.157]                         for (restart in restarts) {
[08:29:48.157]                           name <- restart$name
[08:29:48.157]                           if (is.null(name)) 
[08:29:48.157]                             next
[08:29:48.157]                           if (!grepl(pattern, name)) 
[08:29:48.157]                             next
[08:29:48.157]                           invokeRestart(restart)
[08:29:48.157]                           muffled <- TRUE
[08:29:48.157]                           break
[08:29:48.157]                         }
[08:29:48.157]                       }
[08:29:48.157]                     }
[08:29:48.157]                     invisible(muffled)
[08:29:48.157]                   }
[08:29:48.157]                   muffleCondition(cond)
[08:29:48.157]                 })
[08:29:48.157]             }))
[08:29:48.157]             future::FutureResult(value = ...future.value$value, 
[08:29:48.157]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.157]                   ...future.rng), globalenv = if (FALSE) 
[08:29:48.157]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:48.157]                     ...future.globalenv.names))
[08:29:48.157]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:48.157]         }, condition = base::local({
[08:29:48.157]             c <- base::c
[08:29:48.157]             inherits <- base::inherits
[08:29:48.157]             invokeRestart <- base::invokeRestart
[08:29:48.157]             length <- base::length
[08:29:48.157]             list <- base::list
[08:29:48.157]             seq.int <- base::seq.int
[08:29:48.157]             signalCondition <- base::signalCondition
[08:29:48.157]             sys.calls <- base::sys.calls
[08:29:48.157]             `[[` <- base::`[[`
[08:29:48.157]             `+` <- base::`+`
[08:29:48.157]             `<<-` <- base::`<<-`
[08:29:48.157]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:48.157]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:48.157]                   3L)]
[08:29:48.157]             }
[08:29:48.157]             function(cond) {
[08:29:48.157]                 is_error <- inherits(cond, "error")
[08:29:48.157]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:48.157]                   NULL)
[08:29:48.157]                 if (is_error) {
[08:29:48.157]                   sessionInformation <- function() {
[08:29:48.157]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:48.157]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:48.157]                       search = base::search(), system = base::Sys.info())
[08:29:48.157]                   }
[08:29:48.157]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.157]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:48.157]                     cond$call), session = sessionInformation(), 
[08:29:48.157]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:48.157]                   signalCondition(cond)
[08:29:48.157]                 }
[08:29:48.157]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:48.157]                 "immediateCondition"))) {
[08:29:48.157]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:48.157]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.157]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:48.157]                   if (TRUE && !signal) {
[08:29:48.157]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.157]                     {
[08:29:48.157]                       inherits <- base::inherits
[08:29:48.157]                       invokeRestart <- base::invokeRestart
[08:29:48.157]                       is.null <- base::is.null
[08:29:48.157]                       muffled <- FALSE
[08:29:48.157]                       if (inherits(cond, "message")) {
[08:29:48.157]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.157]                         if (muffled) 
[08:29:48.157]                           invokeRestart("muffleMessage")
[08:29:48.157]                       }
[08:29:48.157]                       else if (inherits(cond, "warning")) {
[08:29:48.157]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.157]                         if (muffled) 
[08:29:48.157]                           invokeRestart("muffleWarning")
[08:29:48.157]                       }
[08:29:48.157]                       else if (inherits(cond, "condition")) {
[08:29:48.157]                         if (!is.null(pattern)) {
[08:29:48.157]                           computeRestarts <- base::computeRestarts
[08:29:48.157]                           grepl <- base::grepl
[08:29:48.157]                           restarts <- computeRestarts(cond)
[08:29:48.157]                           for (restart in restarts) {
[08:29:48.157]                             name <- restart$name
[08:29:48.157]                             if (is.null(name)) 
[08:29:48.157]                               next
[08:29:48.157]                             if (!grepl(pattern, name)) 
[08:29:48.157]                               next
[08:29:48.157]                             invokeRestart(restart)
[08:29:48.157]                             muffled <- TRUE
[08:29:48.157]                             break
[08:29:48.157]                           }
[08:29:48.157]                         }
[08:29:48.157]                       }
[08:29:48.157]                       invisible(muffled)
[08:29:48.157]                     }
[08:29:48.157]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.157]                   }
[08:29:48.157]                 }
[08:29:48.157]                 else {
[08:29:48.157]                   if (TRUE) {
[08:29:48.157]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.157]                     {
[08:29:48.157]                       inherits <- base::inherits
[08:29:48.157]                       invokeRestart <- base::invokeRestart
[08:29:48.157]                       is.null <- base::is.null
[08:29:48.157]                       muffled <- FALSE
[08:29:48.157]                       if (inherits(cond, "message")) {
[08:29:48.157]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.157]                         if (muffled) 
[08:29:48.157]                           invokeRestart("muffleMessage")
[08:29:48.157]                       }
[08:29:48.157]                       else if (inherits(cond, "warning")) {
[08:29:48.157]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.157]                         if (muffled) 
[08:29:48.157]                           invokeRestart("muffleWarning")
[08:29:48.157]                       }
[08:29:48.157]                       else if (inherits(cond, "condition")) {
[08:29:48.157]                         if (!is.null(pattern)) {
[08:29:48.157]                           computeRestarts <- base::computeRestarts
[08:29:48.157]                           grepl <- base::grepl
[08:29:48.157]                           restarts <- computeRestarts(cond)
[08:29:48.157]                           for (restart in restarts) {
[08:29:48.157]                             name <- restart$name
[08:29:48.157]                             if (is.null(name)) 
[08:29:48.157]                               next
[08:29:48.157]                             if (!grepl(pattern, name)) 
[08:29:48.157]                               next
[08:29:48.157]                             invokeRestart(restart)
[08:29:48.157]                             muffled <- TRUE
[08:29:48.157]                             break
[08:29:48.157]                           }
[08:29:48.157]                         }
[08:29:48.157]                       }
[08:29:48.157]                       invisible(muffled)
[08:29:48.157]                     }
[08:29:48.157]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.157]                   }
[08:29:48.157]                 }
[08:29:48.157]             }
[08:29:48.157]         }))
[08:29:48.157]     }, error = function(ex) {
[08:29:48.157]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:48.157]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.157]                 ...future.rng), started = ...future.startTime, 
[08:29:48.157]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:48.157]             version = "1.8"), class = "FutureResult")
[08:29:48.157]     }, finally = {
[08:29:48.157]         if (!identical(...future.workdir, getwd())) 
[08:29:48.157]             setwd(...future.workdir)
[08:29:48.157]         {
[08:29:48.157]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:48.157]                 ...future.oldOptions$nwarnings <- NULL
[08:29:48.157]             }
[08:29:48.157]             base::options(...future.oldOptions)
[08:29:48.157]             if (.Platform$OS.type == "windows") {
[08:29:48.157]                 old_names <- names(...future.oldEnvVars)
[08:29:48.157]                 envs <- base::Sys.getenv()
[08:29:48.157]                 names <- names(envs)
[08:29:48.157]                 common <- intersect(names, old_names)
[08:29:48.157]                 added <- setdiff(names, old_names)
[08:29:48.157]                 removed <- setdiff(old_names, names)
[08:29:48.157]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:48.157]                   envs[common]]
[08:29:48.157]                 NAMES <- toupper(changed)
[08:29:48.157]                 args <- list()
[08:29:48.157]                 for (kk in seq_along(NAMES)) {
[08:29:48.157]                   name <- changed[[kk]]
[08:29:48.157]                   NAME <- NAMES[[kk]]
[08:29:48.157]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.157]                     next
[08:29:48.157]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.157]                 }
[08:29:48.157]                 NAMES <- toupper(added)
[08:29:48.157]                 for (kk in seq_along(NAMES)) {
[08:29:48.157]                   name <- added[[kk]]
[08:29:48.157]                   NAME <- NAMES[[kk]]
[08:29:48.157]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.157]                     next
[08:29:48.157]                   args[[name]] <- ""
[08:29:48.157]                 }
[08:29:48.157]                 NAMES <- toupper(removed)
[08:29:48.157]                 for (kk in seq_along(NAMES)) {
[08:29:48.157]                   name <- removed[[kk]]
[08:29:48.157]                   NAME <- NAMES[[kk]]
[08:29:48.157]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.157]                     next
[08:29:48.157]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.157]                 }
[08:29:48.157]                 if (length(args) > 0) 
[08:29:48.157]                   base::do.call(base::Sys.setenv, args = args)
[08:29:48.157]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:48.157]             }
[08:29:48.157]             else {
[08:29:48.157]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:48.157]             }
[08:29:48.157]             {
[08:29:48.157]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:48.157]                   0L) {
[08:29:48.157]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:48.157]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:48.157]                   base::options(opts)
[08:29:48.157]                 }
[08:29:48.157]                 {
[08:29:48.157]                   {
[08:29:48.157]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:48.157]                     NULL
[08:29:48.157]                   }
[08:29:48.157]                   options(future.plan = "multisession")
[08:29:48.157]                   if (is.na("multisession")) 
[08:29:48.157]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.157]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[08:29:48.157]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:48.157]                     .init = FALSE)
[08:29:48.157]                 }
[08:29:48.157]             }
[08:29:48.157]         }
[08:29:48.157]     })
[08:29:48.157]     if (TRUE) {
[08:29:48.157]         base::sink(type = "output", split = FALSE)
[08:29:48.157]         if (TRUE) {
[08:29:48.157]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:48.157]         }
[08:29:48.157]         else {
[08:29:48.157]             ...future.result["stdout"] <- base::list(NULL)
[08:29:48.157]         }
[08:29:48.157]         base::close(...future.stdout)
[08:29:48.157]         ...future.stdout <- NULL
[08:29:48.157]     }
[08:29:48.157]     ...future.result$conditions <- ...future.conditions
[08:29:48.157]     ...future.result$finished <- base::Sys.time()
[08:29:48.157]     ...future.result
[08:29:48.157] }
[08:29:48.223] MultisessionFuture started
[08:29:48.224] result() for ClusterFuture ...
[08:29:48.224] receiveMessageFromWorker() for ClusterFuture ...
[08:29:48.224] - Validating connection of MultisessionFuture
[08:29:48.260] - received message: FutureResult
[08:29:48.260] - Received FutureResult
[08:29:48.261] - Erased future from FutureRegistry
[08:29:48.261] result() for ClusterFuture ...
[08:29:48.261] - result already collected: FutureResult
[08:29:48.261] result() for ClusterFuture ... done
[08:29:48.261] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:48.261] result() for ClusterFuture ... done
[08:29:48.261] result() for ClusterFuture ...
[08:29:48.262] - result already collected: FutureResult
[08:29:48.262] result() for ClusterFuture ... done
[08:29:48.262] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:48.264] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[08:29:48.265] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:48.265] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:48.265] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:48.265] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:48.265] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:48.265] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:48.265] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:48.266] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:48.267] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:48.268] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:48.269] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:48.269] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:48.269] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:48.269] Option 'future.plan' = ‘multisession’
[08:29:48.269] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:48.269] Setting plan('default')
[08:29:48.269] plan(): Setting new future strategy stack:
[08:29:48.270] List of future strategies:
[08:29:48.270] 1. multisession:
[08:29:48.270]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.270]    - tweaked: FALSE
[08:29:48.270]    - call: plan("default", .init = FALSE)
[08:29:48.273] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[08:29:48.273] plan(): Setting new future strategy stack:
[08:29:48.273] List of future strategies:
[08:29:48.273] 1. multisession:
[08:29:48.273]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.273]    - tweaked: FALSE
[08:29:48.273]    - call: plan("default")
[08:29:48.274] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:48.274] multisession:
[08:29:48.274] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.274] - tweaked: FALSE
[08:29:48.274] - call: plan("default")
[08:29:48.277] getGlobalsAndPackages() ...
[08:29:48.277] Not searching for globals
[08:29:48.277] - globals: [0] <none>
[08:29:48.278] getGlobalsAndPackages() ... DONE
[08:29:48.542] Packages needed by the future expression (n = 0): <none>
[08:29:48.542] Packages needed by future strategies (n = 0): <none>
[08:29:48.542] {
[08:29:48.542]     {
[08:29:48.542]         {
[08:29:48.542]             ...future.startTime <- base::Sys.time()
[08:29:48.542]             {
[08:29:48.542]                 {
[08:29:48.542]                   {
[08:29:48.542]                     {
[08:29:48.542]                       base::local({
[08:29:48.542]                         has_future <- base::requireNamespace("future", 
[08:29:48.542]                           quietly = TRUE)
[08:29:48.542]                         if (has_future) {
[08:29:48.542]                           ns <- base::getNamespace("future")
[08:29:48.542]                           version <- ns[[".package"]][["version"]]
[08:29:48.542]                           if (is.null(version)) 
[08:29:48.542]                             version <- utils::packageVersion("future")
[08:29:48.542]                         }
[08:29:48.542]                         else {
[08:29:48.542]                           version <- NULL
[08:29:48.542]                         }
[08:29:48.542]                         if (!has_future || version < "1.8.0") {
[08:29:48.542]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:48.542]                             "", base::R.version$version.string), 
[08:29:48.542]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:48.542]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:48.542]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:48.542]                               "release", "version")], collapse = " "), 
[08:29:48.542]                             hostname = base::Sys.info()[["nodename"]])
[08:29:48.542]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:48.542]                             info)
[08:29:48.542]                           info <- base::paste(info, collapse = "; ")
[08:29:48.542]                           if (!has_future) {
[08:29:48.542]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:48.542]                               info)
[08:29:48.542]                           }
[08:29:48.542]                           else {
[08:29:48.542]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:48.542]                               info, version)
[08:29:48.542]                           }
[08:29:48.542]                           base::stop(msg)
[08:29:48.542]                         }
[08:29:48.542]                       })
[08:29:48.542]                     }
[08:29:48.542]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:48.542]                     base::options(mc.cores = 1L)
[08:29:48.542]                   }
[08:29:48.542]                   ...future.strategy.old <- future::plan("list")
[08:29:48.542]                   options(future.plan = NULL)
[08:29:48.542]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.542]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:48.542]                 }
[08:29:48.542]                 ...future.workdir <- getwd()
[08:29:48.542]             }
[08:29:48.542]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:48.542]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:48.542]         }
[08:29:48.542]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:48.542]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:48.542]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:48.542]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:48.542]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:48.542]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:48.542]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:48.542]             base::names(...future.oldOptions))
[08:29:48.542]     }
[08:29:48.542]     if (FALSE) {
[08:29:48.542]     }
[08:29:48.542]     else {
[08:29:48.542]         if (TRUE) {
[08:29:48.542]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:48.542]                 open = "w")
[08:29:48.542]         }
[08:29:48.542]         else {
[08:29:48.542]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:48.542]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:48.542]         }
[08:29:48.542]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:48.542]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:48.542]             base::sink(type = "output", split = FALSE)
[08:29:48.542]             base::close(...future.stdout)
[08:29:48.542]         }, add = TRUE)
[08:29:48.542]     }
[08:29:48.542]     ...future.frame <- base::sys.nframe()
[08:29:48.542]     ...future.conditions <- base::list()
[08:29:48.542]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:48.542]     if (FALSE) {
[08:29:48.542]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:48.542]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:48.542]     }
[08:29:48.542]     ...future.result <- base::tryCatch({
[08:29:48.542]         base::withCallingHandlers({
[08:29:48.542]             ...future.value <- base::withVisible(base::local({
[08:29:48.542]                 ...future.makeSendCondition <- base::local({
[08:29:48.542]                   sendCondition <- NULL
[08:29:48.542]                   function(frame = 1L) {
[08:29:48.542]                     if (is.function(sendCondition)) 
[08:29:48.542]                       return(sendCondition)
[08:29:48.542]                     ns <- getNamespace("parallel")
[08:29:48.542]                     if (exists("sendData", mode = "function", 
[08:29:48.542]                       envir = ns)) {
[08:29:48.542]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:48.542]                         envir = ns)
[08:29:48.542]                       envir <- sys.frame(frame)
[08:29:48.542]                       master <- NULL
[08:29:48.542]                       while (!identical(envir, .GlobalEnv) && 
[08:29:48.542]                         !identical(envir, emptyenv())) {
[08:29:48.542]                         if (exists("master", mode = "list", envir = envir, 
[08:29:48.542]                           inherits = FALSE)) {
[08:29:48.542]                           master <- get("master", mode = "list", 
[08:29:48.542]                             envir = envir, inherits = FALSE)
[08:29:48.542]                           if (inherits(master, c("SOCKnode", 
[08:29:48.542]                             "SOCK0node"))) {
[08:29:48.542]                             sendCondition <<- function(cond) {
[08:29:48.542]                               data <- list(type = "VALUE", value = cond, 
[08:29:48.542]                                 success = TRUE)
[08:29:48.542]                               parallel_sendData(master, data)
[08:29:48.542]                             }
[08:29:48.542]                             return(sendCondition)
[08:29:48.542]                           }
[08:29:48.542]                         }
[08:29:48.542]                         frame <- frame + 1L
[08:29:48.542]                         envir <- sys.frame(frame)
[08:29:48.542]                       }
[08:29:48.542]                     }
[08:29:48.542]                     sendCondition <<- function(cond) NULL
[08:29:48.542]                   }
[08:29:48.542]                 })
[08:29:48.542]                 withCallingHandlers({
[08:29:48.542]                   NA
[08:29:48.542]                 }, immediateCondition = function(cond) {
[08:29:48.542]                   sendCondition <- ...future.makeSendCondition()
[08:29:48.542]                   sendCondition(cond)
[08:29:48.542]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.542]                   {
[08:29:48.542]                     inherits <- base::inherits
[08:29:48.542]                     invokeRestart <- base::invokeRestart
[08:29:48.542]                     is.null <- base::is.null
[08:29:48.542]                     muffled <- FALSE
[08:29:48.542]                     if (inherits(cond, "message")) {
[08:29:48.542]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:48.542]                       if (muffled) 
[08:29:48.542]                         invokeRestart("muffleMessage")
[08:29:48.542]                     }
[08:29:48.542]                     else if (inherits(cond, "warning")) {
[08:29:48.542]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:48.542]                       if (muffled) 
[08:29:48.542]                         invokeRestart("muffleWarning")
[08:29:48.542]                     }
[08:29:48.542]                     else if (inherits(cond, "condition")) {
[08:29:48.542]                       if (!is.null(pattern)) {
[08:29:48.542]                         computeRestarts <- base::computeRestarts
[08:29:48.542]                         grepl <- base::grepl
[08:29:48.542]                         restarts <- computeRestarts(cond)
[08:29:48.542]                         for (restart in restarts) {
[08:29:48.542]                           name <- restart$name
[08:29:48.542]                           if (is.null(name)) 
[08:29:48.542]                             next
[08:29:48.542]                           if (!grepl(pattern, name)) 
[08:29:48.542]                             next
[08:29:48.542]                           invokeRestart(restart)
[08:29:48.542]                           muffled <- TRUE
[08:29:48.542]                           break
[08:29:48.542]                         }
[08:29:48.542]                       }
[08:29:48.542]                     }
[08:29:48.542]                     invisible(muffled)
[08:29:48.542]                   }
[08:29:48.542]                   muffleCondition(cond)
[08:29:48.542]                 })
[08:29:48.542]             }))
[08:29:48.542]             future::FutureResult(value = ...future.value$value, 
[08:29:48.542]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.542]                   ...future.rng), globalenv = if (FALSE) 
[08:29:48.542]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:48.542]                     ...future.globalenv.names))
[08:29:48.542]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:48.542]         }, condition = base::local({
[08:29:48.542]             c <- base::c
[08:29:48.542]             inherits <- base::inherits
[08:29:48.542]             invokeRestart <- base::invokeRestart
[08:29:48.542]             length <- base::length
[08:29:48.542]             list <- base::list
[08:29:48.542]             seq.int <- base::seq.int
[08:29:48.542]             signalCondition <- base::signalCondition
[08:29:48.542]             sys.calls <- base::sys.calls
[08:29:48.542]             `[[` <- base::`[[`
[08:29:48.542]             `+` <- base::`+`
[08:29:48.542]             `<<-` <- base::`<<-`
[08:29:48.542]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:48.542]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:48.542]                   3L)]
[08:29:48.542]             }
[08:29:48.542]             function(cond) {
[08:29:48.542]                 is_error <- inherits(cond, "error")
[08:29:48.542]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:48.542]                   NULL)
[08:29:48.542]                 if (is_error) {
[08:29:48.542]                   sessionInformation <- function() {
[08:29:48.542]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:48.542]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:48.542]                       search = base::search(), system = base::Sys.info())
[08:29:48.542]                   }
[08:29:48.542]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.542]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:48.542]                     cond$call), session = sessionInformation(), 
[08:29:48.542]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:48.542]                   signalCondition(cond)
[08:29:48.542]                 }
[08:29:48.542]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:48.542]                 "immediateCondition"))) {
[08:29:48.542]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:48.542]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.542]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:48.542]                   if (TRUE && !signal) {
[08:29:48.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.542]                     {
[08:29:48.542]                       inherits <- base::inherits
[08:29:48.542]                       invokeRestart <- base::invokeRestart
[08:29:48.542]                       is.null <- base::is.null
[08:29:48.542]                       muffled <- FALSE
[08:29:48.542]                       if (inherits(cond, "message")) {
[08:29:48.542]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.542]                         if (muffled) 
[08:29:48.542]                           invokeRestart("muffleMessage")
[08:29:48.542]                       }
[08:29:48.542]                       else if (inherits(cond, "warning")) {
[08:29:48.542]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.542]                         if (muffled) 
[08:29:48.542]                           invokeRestart("muffleWarning")
[08:29:48.542]                       }
[08:29:48.542]                       else if (inherits(cond, "condition")) {
[08:29:48.542]                         if (!is.null(pattern)) {
[08:29:48.542]                           computeRestarts <- base::computeRestarts
[08:29:48.542]                           grepl <- base::grepl
[08:29:48.542]                           restarts <- computeRestarts(cond)
[08:29:48.542]                           for (restart in restarts) {
[08:29:48.542]                             name <- restart$name
[08:29:48.542]                             if (is.null(name)) 
[08:29:48.542]                               next
[08:29:48.542]                             if (!grepl(pattern, name)) 
[08:29:48.542]                               next
[08:29:48.542]                             invokeRestart(restart)
[08:29:48.542]                             muffled <- TRUE
[08:29:48.542]                             break
[08:29:48.542]                           }
[08:29:48.542]                         }
[08:29:48.542]                       }
[08:29:48.542]                       invisible(muffled)
[08:29:48.542]                     }
[08:29:48.542]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.542]                   }
[08:29:48.542]                 }
[08:29:48.542]                 else {
[08:29:48.542]                   if (TRUE) {
[08:29:48.542]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.542]                     {
[08:29:48.542]                       inherits <- base::inherits
[08:29:48.542]                       invokeRestart <- base::invokeRestart
[08:29:48.542]                       is.null <- base::is.null
[08:29:48.542]                       muffled <- FALSE
[08:29:48.542]                       if (inherits(cond, "message")) {
[08:29:48.542]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.542]                         if (muffled) 
[08:29:48.542]                           invokeRestart("muffleMessage")
[08:29:48.542]                       }
[08:29:48.542]                       else if (inherits(cond, "warning")) {
[08:29:48.542]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.542]                         if (muffled) 
[08:29:48.542]                           invokeRestart("muffleWarning")
[08:29:48.542]                       }
[08:29:48.542]                       else if (inherits(cond, "condition")) {
[08:29:48.542]                         if (!is.null(pattern)) {
[08:29:48.542]                           computeRestarts <- base::computeRestarts
[08:29:48.542]                           grepl <- base::grepl
[08:29:48.542]                           restarts <- computeRestarts(cond)
[08:29:48.542]                           for (restart in restarts) {
[08:29:48.542]                             name <- restart$name
[08:29:48.542]                             if (is.null(name)) 
[08:29:48.542]                               next
[08:29:48.542]                             if (!grepl(pattern, name)) 
[08:29:48.542]                               next
[08:29:48.542]                             invokeRestart(restart)
[08:29:48.542]                             muffled <- TRUE
[08:29:48.542]                             break
[08:29:48.542]                           }
[08:29:48.542]                         }
[08:29:48.542]                       }
[08:29:48.542]                       invisible(muffled)
[08:29:48.542]                     }
[08:29:48.542]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.542]                   }
[08:29:48.542]                 }
[08:29:48.542]             }
[08:29:48.542]         }))
[08:29:48.542]     }, error = function(ex) {
[08:29:48.542]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:48.542]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.542]                 ...future.rng), started = ...future.startTime, 
[08:29:48.542]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:48.542]             version = "1.8"), class = "FutureResult")
[08:29:48.542]     }, finally = {
[08:29:48.542]         if (!identical(...future.workdir, getwd())) 
[08:29:48.542]             setwd(...future.workdir)
[08:29:48.542]         {
[08:29:48.542]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:48.542]                 ...future.oldOptions$nwarnings <- NULL
[08:29:48.542]             }
[08:29:48.542]             base::options(...future.oldOptions)
[08:29:48.542]             if (.Platform$OS.type == "windows") {
[08:29:48.542]                 old_names <- names(...future.oldEnvVars)
[08:29:48.542]                 envs <- base::Sys.getenv()
[08:29:48.542]                 names <- names(envs)
[08:29:48.542]                 common <- intersect(names, old_names)
[08:29:48.542]                 added <- setdiff(names, old_names)
[08:29:48.542]                 removed <- setdiff(old_names, names)
[08:29:48.542]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:48.542]                   envs[common]]
[08:29:48.542]                 NAMES <- toupper(changed)
[08:29:48.542]                 args <- list()
[08:29:48.542]                 for (kk in seq_along(NAMES)) {
[08:29:48.542]                   name <- changed[[kk]]
[08:29:48.542]                   NAME <- NAMES[[kk]]
[08:29:48.542]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.542]                     next
[08:29:48.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.542]                 }
[08:29:48.542]                 NAMES <- toupper(added)
[08:29:48.542]                 for (kk in seq_along(NAMES)) {
[08:29:48.542]                   name <- added[[kk]]
[08:29:48.542]                   NAME <- NAMES[[kk]]
[08:29:48.542]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.542]                     next
[08:29:48.542]                   args[[name]] <- ""
[08:29:48.542]                 }
[08:29:48.542]                 NAMES <- toupper(removed)
[08:29:48.542]                 for (kk in seq_along(NAMES)) {
[08:29:48.542]                   name <- removed[[kk]]
[08:29:48.542]                   NAME <- NAMES[[kk]]
[08:29:48.542]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.542]                     next
[08:29:48.542]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.542]                 }
[08:29:48.542]                 if (length(args) > 0) 
[08:29:48.542]                   base::do.call(base::Sys.setenv, args = args)
[08:29:48.542]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:48.542]             }
[08:29:48.542]             else {
[08:29:48.542]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:48.542]             }
[08:29:48.542]             {
[08:29:48.542]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:48.542]                   0L) {
[08:29:48.542]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:48.542]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:48.542]                   base::options(opts)
[08:29:48.542]                 }
[08:29:48.542]                 {
[08:29:48.542]                   {
[08:29:48.542]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:48.542]                     NULL
[08:29:48.542]                   }
[08:29:48.542]                   options(future.plan = "multisession")
[08:29:48.542]                   if (is.na("")) 
[08:29:48.542]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.542]                   else Sys.setenv(R_FUTURE_PLAN = "")
[08:29:48.542]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:48.542]                     .init = FALSE)
[08:29:48.542]                 }
[08:29:48.542]             }
[08:29:48.542]         }
[08:29:48.542]     })
[08:29:48.542]     if (TRUE) {
[08:29:48.542]         base::sink(type = "output", split = FALSE)
[08:29:48.542]         if (TRUE) {
[08:29:48.542]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:48.542]         }
[08:29:48.542]         else {
[08:29:48.542]             ...future.result["stdout"] <- base::list(NULL)
[08:29:48.542]         }
[08:29:48.542]         base::close(...future.stdout)
[08:29:48.542]         ...future.stdout <- NULL
[08:29:48.542]     }
[08:29:48.542]     ...future.result$conditions <- ...future.conditions
[08:29:48.542]     ...future.result$finished <- base::Sys.time()
[08:29:48.542]     ...future.result
[08:29:48.542] }
[08:29:48.594] MultisessionFuture started
[08:29:48.595] result() for ClusterFuture ...
[08:29:48.595] receiveMessageFromWorker() for ClusterFuture ...
[08:29:48.595] - Validating connection of MultisessionFuture
[08:29:48.626] - received message: FutureResult
[08:29:48.626] - Received FutureResult
[08:29:48.626] - Erased future from FutureRegistry
[08:29:48.626] result() for ClusterFuture ...
[08:29:48.626] - result already collected: FutureResult
[08:29:48.626] result() for ClusterFuture ... done
[08:29:48.626] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:48.627] result() for ClusterFuture ... done
[08:29:48.627] result() for ClusterFuture ...
[08:29:48.627] - result already collected: FutureResult
[08:29:48.627] result() for ClusterFuture ... done
[08:29:48.627] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:48.628] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[08:29:48.629] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:48.630] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:48.630] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:48.631] R_FUTURE_PLAN=‘multisession’
[08:29:48.631] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[08:29:48.631] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:48.631] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:48.632] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:48.633] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:48.633] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:48.633] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:48.633] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:48.633] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:48.633] Option 'future.plan' = ‘multisession’
[08:29:48.633] R command-line argument: -p 1
[08:29:48.633]  => 'future.plan' already set.
[08:29:48.633] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:48.634] Setting plan('default')
[08:29:48.634] plan(): Setting new future strategy stack:
[08:29:48.634] List of future strategies:
[08:29:48.634] 1. multisession:
[08:29:48.634]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.634]    - tweaked: FALSE
[08:29:48.634]    - call: plan("default", .init = FALSE)
[08:29:48.636] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[08:29:48.636] plan(): Setting new future strategy stack:
[08:29:48.637] List of future strategies:
[08:29:48.637] 1. multisession:
[08:29:48.637]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.637]    - tweaked: FALSE
[08:29:48.637]    - call: plan("default")
[08:29:48.637] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:48.637] multisession:
[08:29:48.637] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.637] - tweaked: FALSE
[08:29:48.637] - call: plan("default")
[08:29:48.639] getGlobalsAndPackages() ...
[08:29:48.640] Not searching for globals
[08:29:48.640] - globals: [0] <none>
[08:29:48.640] getGlobalsAndPackages() ... DONE
[08:29:48.641] Packages needed by the future expression (n = 0): <none>
[08:29:48.641] Packages needed by future strategies (n = 0): <none>
[08:29:48.641] {
[08:29:48.641]     {
[08:29:48.641]         {
[08:29:48.641]             ...future.startTime <- base::Sys.time()
[08:29:48.641]             {
[08:29:48.641]                 {
[08:29:48.641]                   {
[08:29:48.641]                     base::local({
[08:29:48.641]                       has_future <- base::requireNamespace("future", 
[08:29:48.641]                         quietly = TRUE)
[08:29:48.641]                       if (has_future) {
[08:29:48.641]                         ns <- base::getNamespace("future")
[08:29:48.641]                         version <- ns[[".package"]][["version"]]
[08:29:48.641]                         if (is.null(version)) 
[08:29:48.641]                           version <- utils::packageVersion("future")
[08:29:48.641]                       }
[08:29:48.641]                       else {
[08:29:48.641]                         version <- NULL
[08:29:48.641]                       }
[08:29:48.641]                       if (!has_future || version < "1.8.0") {
[08:29:48.641]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:48.641]                           "", base::R.version$version.string), 
[08:29:48.641]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:48.641]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:48.641]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:48.641]                             "release", "version")], collapse = " "), 
[08:29:48.641]                           hostname = base::Sys.info()[["nodename"]])
[08:29:48.641]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:48.641]                           info)
[08:29:48.641]                         info <- base::paste(info, collapse = "; ")
[08:29:48.641]                         if (!has_future) {
[08:29:48.641]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:48.641]                             info)
[08:29:48.641]                         }
[08:29:48.641]                         else {
[08:29:48.641]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:48.641]                             info, version)
[08:29:48.641]                         }
[08:29:48.641]                         base::stop(msg)
[08:29:48.641]                       }
[08:29:48.641]                     })
[08:29:48.641]                   }
[08:29:48.641]                   ...future.strategy.old <- future::plan("list")
[08:29:48.641]                   options(future.plan = NULL)
[08:29:48.641]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.641]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:48.641]                 }
[08:29:48.641]                 ...future.workdir <- getwd()
[08:29:48.641]             }
[08:29:48.641]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:48.641]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:48.641]         }
[08:29:48.641]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:48.641]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:48.641]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:48.641]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:48.641]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:48.641]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:48.641]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:48.641]             base::names(...future.oldOptions))
[08:29:48.641]     }
[08:29:48.641]     if (FALSE) {
[08:29:48.641]     }
[08:29:48.641]     else {
[08:29:48.641]         if (TRUE) {
[08:29:48.641]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:48.641]                 open = "w")
[08:29:48.641]         }
[08:29:48.641]         else {
[08:29:48.641]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:48.641]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:48.641]         }
[08:29:48.641]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:48.641]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:48.641]             base::sink(type = "output", split = FALSE)
[08:29:48.641]             base::close(...future.stdout)
[08:29:48.641]         }, add = TRUE)
[08:29:48.641]     }
[08:29:48.641]     ...future.frame <- base::sys.nframe()
[08:29:48.641]     ...future.conditions <- base::list()
[08:29:48.641]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:48.641]     if (FALSE) {
[08:29:48.641]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:48.641]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:48.641]     }
[08:29:48.641]     ...future.result <- base::tryCatch({
[08:29:48.641]         base::withCallingHandlers({
[08:29:48.641]             ...future.value <- base::withVisible(base::local(NA))
[08:29:48.641]             future::FutureResult(value = ...future.value$value, 
[08:29:48.641]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.641]                   ...future.rng), globalenv = if (FALSE) 
[08:29:48.641]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:48.641]                     ...future.globalenv.names))
[08:29:48.641]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:48.641]         }, condition = base::local({
[08:29:48.641]             c <- base::c
[08:29:48.641]             inherits <- base::inherits
[08:29:48.641]             invokeRestart <- base::invokeRestart
[08:29:48.641]             length <- base::length
[08:29:48.641]             list <- base::list
[08:29:48.641]             seq.int <- base::seq.int
[08:29:48.641]             signalCondition <- base::signalCondition
[08:29:48.641]             sys.calls <- base::sys.calls
[08:29:48.641]             `[[` <- base::`[[`
[08:29:48.641]             `+` <- base::`+`
[08:29:48.641]             `<<-` <- base::`<<-`
[08:29:48.641]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:48.641]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:48.641]                   3L)]
[08:29:48.641]             }
[08:29:48.641]             function(cond) {
[08:29:48.641]                 is_error <- inherits(cond, "error")
[08:29:48.641]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:48.641]                   NULL)
[08:29:48.641]                 if (is_error) {
[08:29:48.641]                   sessionInformation <- function() {
[08:29:48.641]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:48.641]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:48.641]                       search = base::search(), system = base::Sys.info())
[08:29:48.641]                   }
[08:29:48.641]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.641]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:48.641]                     cond$call), session = sessionInformation(), 
[08:29:48.641]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:48.641]                   signalCondition(cond)
[08:29:48.641]                 }
[08:29:48.641]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:48.641]                 "immediateCondition"))) {
[08:29:48.641]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:48.641]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.641]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:48.641]                   if (TRUE && !signal) {
[08:29:48.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.641]                     {
[08:29:48.641]                       inherits <- base::inherits
[08:29:48.641]                       invokeRestart <- base::invokeRestart
[08:29:48.641]                       is.null <- base::is.null
[08:29:48.641]                       muffled <- FALSE
[08:29:48.641]                       if (inherits(cond, "message")) {
[08:29:48.641]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.641]                         if (muffled) 
[08:29:48.641]                           invokeRestart("muffleMessage")
[08:29:48.641]                       }
[08:29:48.641]                       else if (inherits(cond, "warning")) {
[08:29:48.641]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.641]                         if (muffled) 
[08:29:48.641]                           invokeRestart("muffleWarning")
[08:29:48.641]                       }
[08:29:48.641]                       else if (inherits(cond, "condition")) {
[08:29:48.641]                         if (!is.null(pattern)) {
[08:29:48.641]                           computeRestarts <- base::computeRestarts
[08:29:48.641]                           grepl <- base::grepl
[08:29:48.641]                           restarts <- computeRestarts(cond)
[08:29:48.641]                           for (restart in restarts) {
[08:29:48.641]                             name <- restart$name
[08:29:48.641]                             if (is.null(name)) 
[08:29:48.641]                               next
[08:29:48.641]                             if (!grepl(pattern, name)) 
[08:29:48.641]                               next
[08:29:48.641]                             invokeRestart(restart)
[08:29:48.641]                             muffled <- TRUE
[08:29:48.641]                             break
[08:29:48.641]                           }
[08:29:48.641]                         }
[08:29:48.641]                       }
[08:29:48.641]                       invisible(muffled)
[08:29:48.641]                     }
[08:29:48.641]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.641]                   }
[08:29:48.641]                 }
[08:29:48.641]                 else {
[08:29:48.641]                   if (TRUE) {
[08:29:48.641]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.641]                     {
[08:29:48.641]                       inherits <- base::inherits
[08:29:48.641]                       invokeRestart <- base::invokeRestart
[08:29:48.641]                       is.null <- base::is.null
[08:29:48.641]                       muffled <- FALSE
[08:29:48.641]                       if (inherits(cond, "message")) {
[08:29:48.641]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.641]                         if (muffled) 
[08:29:48.641]                           invokeRestart("muffleMessage")
[08:29:48.641]                       }
[08:29:48.641]                       else if (inherits(cond, "warning")) {
[08:29:48.641]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.641]                         if (muffled) 
[08:29:48.641]                           invokeRestart("muffleWarning")
[08:29:48.641]                       }
[08:29:48.641]                       else if (inherits(cond, "condition")) {
[08:29:48.641]                         if (!is.null(pattern)) {
[08:29:48.641]                           computeRestarts <- base::computeRestarts
[08:29:48.641]                           grepl <- base::grepl
[08:29:48.641]                           restarts <- computeRestarts(cond)
[08:29:48.641]                           for (restart in restarts) {
[08:29:48.641]                             name <- restart$name
[08:29:48.641]                             if (is.null(name)) 
[08:29:48.641]                               next
[08:29:48.641]                             if (!grepl(pattern, name)) 
[08:29:48.641]                               next
[08:29:48.641]                             invokeRestart(restart)
[08:29:48.641]                             muffled <- TRUE
[08:29:48.641]                             break
[08:29:48.641]                           }
[08:29:48.641]                         }
[08:29:48.641]                       }
[08:29:48.641]                       invisible(muffled)
[08:29:48.641]                     }
[08:29:48.641]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.641]                   }
[08:29:48.641]                 }
[08:29:48.641]             }
[08:29:48.641]         }))
[08:29:48.641]     }, error = function(ex) {
[08:29:48.641]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:48.641]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.641]                 ...future.rng), started = ...future.startTime, 
[08:29:48.641]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:48.641]             version = "1.8"), class = "FutureResult")
[08:29:48.641]     }, finally = {
[08:29:48.641]         if (!identical(...future.workdir, getwd())) 
[08:29:48.641]             setwd(...future.workdir)
[08:29:48.641]         {
[08:29:48.641]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:48.641]                 ...future.oldOptions$nwarnings <- NULL
[08:29:48.641]             }
[08:29:48.641]             base::options(...future.oldOptions)
[08:29:48.641]             if (.Platform$OS.type == "windows") {
[08:29:48.641]                 old_names <- names(...future.oldEnvVars)
[08:29:48.641]                 envs <- base::Sys.getenv()
[08:29:48.641]                 names <- names(envs)
[08:29:48.641]                 common <- intersect(names, old_names)
[08:29:48.641]                 added <- setdiff(names, old_names)
[08:29:48.641]                 removed <- setdiff(old_names, names)
[08:29:48.641]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:48.641]                   envs[common]]
[08:29:48.641]                 NAMES <- toupper(changed)
[08:29:48.641]                 args <- list()
[08:29:48.641]                 for (kk in seq_along(NAMES)) {
[08:29:48.641]                   name <- changed[[kk]]
[08:29:48.641]                   NAME <- NAMES[[kk]]
[08:29:48.641]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.641]                     next
[08:29:48.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.641]                 }
[08:29:48.641]                 NAMES <- toupper(added)
[08:29:48.641]                 for (kk in seq_along(NAMES)) {
[08:29:48.641]                   name <- added[[kk]]
[08:29:48.641]                   NAME <- NAMES[[kk]]
[08:29:48.641]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.641]                     next
[08:29:48.641]                   args[[name]] <- ""
[08:29:48.641]                 }
[08:29:48.641]                 NAMES <- toupper(removed)
[08:29:48.641]                 for (kk in seq_along(NAMES)) {
[08:29:48.641]                   name <- removed[[kk]]
[08:29:48.641]                   NAME <- NAMES[[kk]]
[08:29:48.641]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.641]                     next
[08:29:48.641]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.641]                 }
[08:29:48.641]                 if (length(args) > 0) 
[08:29:48.641]                   base::do.call(base::Sys.setenv, args = args)
[08:29:48.641]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:48.641]             }
[08:29:48.641]             else {
[08:29:48.641]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:48.641]             }
[08:29:48.641]             {
[08:29:48.641]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:48.641]                   0L) {
[08:29:48.641]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:48.641]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:48.641]                   base::options(opts)
[08:29:48.641]                 }
[08:29:48.641]                 {
[08:29:48.641]                   {
[08:29:48.641]                     NULL
[08:29:48.641]                     RNGkind("Mersenne-Twister")
[08:29:48.641]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:48.641]                       inherits = FALSE)
[08:29:48.641]                   }
[08:29:48.641]                   options(future.plan = "multisession")
[08:29:48.641]                   if (is.na("multisession")) 
[08:29:48.641]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.641]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[08:29:48.641]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:48.641]                     .init = FALSE)
[08:29:48.641]                 }
[08:29:48.641]             }
[08:29:48.641]         }
[08:29:48.641]     })
[08:29:48.641]     if (TRUE) {
[08:29:48.641]         base::sink(type = "output", split = FALSE)
[08:29:48.641]         if (TRUE) {
[08:29:48.641]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:48.641]         }
[08:29:48.641]         else {
[08:29:48.641]             ...future.result["stdout"] <- base::list(NULL)
[08:29:48.641]         }
[08:29:48.641]         base::close(...future.stdout)
[08:29:48.641]         ...future.stdout <- NULL
[08:29:48.641]     }
[08:29:48.641]     ...future.result$conditions <- ...future.conditions
[08:29:48.641]     ...future.result$finished <- base::Sys.time()
[08:29:48.641]     ...future.result
[08:29:48.641] }
[08:29:48.644] plan(): Setting new future strategy stack:
[08:29:48.645] List of future strategies:
[08:29:48.645] 1. sequential:
[08:29:48.645]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:48.645]    - tweaked: FALSE
[08:29:48.645]    - call: NULL
[08:29:48.645] plan(): nbrOfWorkers() = 1
[08:29:48.646] plan(): Setting new future strategy stack:
[08:29:48.646] List of future strategies:
[08:29:48.646] 1. multisession:
[08:29:48.646]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.646]    - tweaked: FALSE
[08:29:48.646]    - call: plan("default")
[08:29:48.648] plan(): nbrOfWorkers() = 1
[08:29:48.648] SequentialFuture started (and completed)
[08:29:48.649] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:48.651] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[08:29:48.652] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:48.652] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:48.652] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:48.652] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:48.653] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:48.654] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:48.655] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:48.656] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:48.656] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:48.656] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:48.656] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:48.656] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:48.656] Option 'future.plan' = ‘multisession’
[08:29:48.656] R command-line argument: -p 1
[08:29:48.656]  => 'future.plan' already set.
[08:29:48.657] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:48.657] Setting plan('default')
[08:29:48.657] plan(): Setting new future strategy stack:
[08:29:48.657] List of future strategies:
[08:29:48.657] 1. multisession:
[08:29:48.657]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.657]    - tweaked: FALSE
[08:29:48.657]    - call: plan("default", .init = FALSE)
[08:29:48.658] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[08:29:48.659] plan(): Setting new future strategy stack:
[08:29:48.659] List of future strategies:
[08:29:48.659] 1. multisession:
[08:29:48.659]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.659]    - tweaked: FALSE
[08:29:48.659]    - call: plan("default")
[08:29:48.659] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:48.659] multisession:
[08:29:48.659] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.659] - tweaked: FALSE
[08:29:48.659] - call: plan("default")
[08:29:48.661] getGlobalsAndPackages() ...
[08:29:48.661] Not searching for globals
[08:29:48.661] - globals: [0] <none>
[08:29:48.661] getGlobalsAndPackages() ... DONE
[08:29:48.661] Packages needed by the future expression (n = 0): <none>
[08:29:48.661] Packages needed by future strategies (n = 0): <none>
[08:29:48.662] {
[08:29:48.662]     {
[08:29:48.662]         {
[08:29:48.662]             ...future.startTime <- base::Sys.time()
[08:29:48.662]             {
[08:29:48.662]                 {
[08:29:48.662]                   {
[08:29:48.662]                     base::local({
[08:29:48.662]                       has_future <- base::requireNamespace("future", 
[08:29:48.662]                         quietly = TRUE)
[08:29:48.662]                       if (has_future) {
[08:29:48.662]                         ns <- base::getNamespace("future")
[08:29:48.662]                         version <- ns[[".package"]][["version"]]
[08:29:48.662]                         if (is.null(version)) 
[08:29:48.662]                           version <- utils::packageVersion("future")
[08:29:48.662]                       }
[08:29:48.662]                       else {
[08:29:48.662]                         version <- NULL
[08:29:48.662]                       }
[08:29:48.662]                       if (!has_future || version < "1.8.0") {
[08:29:48.662]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:48.662]                           "", base::R.version$version.string), 
[08:29:48.662]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:48.662]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:48.662]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:48.662]                             "release", "version")], collapse = " "), 
[08:29:48.662]                           hostname = base::Sys.info()[["nodename"]])
[08:29:48.662]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:48.662]                           info)
[08:29:48.662]                         info <- base::paste(info, collapse = "; ")
[08:29:48.662]                         if (!has_future) {
[08:29:48.662]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:48.662]                             info)
[08:29:48.662]                         }
[08:29:48.662]                         else {
[08:29:48.662]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:48.662]                             info, version)
[08:29:48.662]                         }
[08:29:48.662]                         base::stop(msg)
[08:29:48.662]                       }
[08:29:48.662]                     })
[08:29:48.662]                   }
[08:29:48.662]                   ...future.strategy.old <- future::plan("list")
[08:29:48.662]                   options(future.plan = NULL)
[08:29:48.662]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.662]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:48.662]                 }
[08:29:48.662]                 ...future.workdir <- getwd()
[08:29:48.662]             }
[08:29:48.662]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:48.662]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:48.662]         }
[08:29:48.662]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:48.662]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:48.662]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:48.662]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:48.662]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:48.662]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:48.662]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:48.662]             base::names(...future.oldOptions))
[08:29:48.662]     }
[08:29:48.662]     if (FALSE) {
[08:29:48.662]     }
[08:29:48.662]     else {
[08:29:48.662]         if (TRUE) {
[08:29:48.662]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:48.662]                 open = "w")
[08:29:48.662]         }
[08:29:48.662]         else {
[08:29:48.662]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:48.662]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:48.662]         }
[08:29:48.662]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:48.662]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:48.662]             base::sink(type = "output", split = FALSE)
[08:29:48.662]             base::close(...future.stdout)
[08:29:48.662]         }, add = TRUE)
[08:29:48.662]     }
[08:29:48.662]     ...future.frame <- base::sys.nframe()
[08:29:48.662]     ...future.conditions <- base::list()
[08:29:48.662]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:48.662]     if (FALSE) {
[08:29:48.662]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:48.662]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:48.662]     }
[08:29:48.662]     ...future.result <- base::tryCatch({
[08:29:48.662]         base::withCallingHandlers({
[08:29:48.662]             ...future.value <- base::withVisible(base::local(NA))
[08:29:48.662]             future::FutureResult(value = ...future.value$value, 
[08:29:48.662]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.662]                   ...future.rng), globalenv = if (FALSE) 
[08:29:48.662]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:48.662]                     ...future.globalenv.names))
[08:29:48.662]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:48.662]         }, condition = base::local({
[08:29:48.662]             c <- base::c
[08:29:48.662]             inherits <- base::inherits
[08:29:48.662]             invokeRestart <- base::invokeRestart
[08:29:48.662]             length <- base::length
[08:29:48.662]             list <- base::list
[08:29:48.662]             seq.int <- base::seq.int
[08:29:48.662]             signalCondition <- base::signalCondition
[08:29:48.662]             sys.calls <- base::sys.calls
[08:29:48.662]             `[[` <- base::`[[`
[08:29:48.662]             `+` <- base::`+`
[08:29:48.662]             `<<-` <- base::`<<-`
[08:29:48.662]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:48.662]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:48.662]                   3L)]
[08:29:48.662]             }
[08:29:48.662]             function(cond) {
[08:29:48.662]                 is_error <- inherits(cond, "error")
[08:29:48.662]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:48.662]                   NULL)
[08:29:48.662]                 if (is_error) {
[08:29:48.662]                   sessionInformation <- function() {
[08:29:48.662]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:48.662]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:48.662]                       search = base::search(), system = base::Sys.info())
[08:29:48.662]                   }
[08:29:48.662]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.662]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:48.662]                     cond$call), session = sessionInformation(), 
[08:29:48.662]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:48.662]                   signalCondition(cond)
[08:29:48.662]                 }
[08:29:48.662]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:48.662]                 "immediateCondition"))) {
[08:29:48.662]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:48.662]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.662]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:48.662]                   if (TRUE && !signal) {
[08:29:48.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.662]                     {
[08:29:48.662]                       inherits <- base::inherits
[08:29:48.662]                       invokeRestart <- base::invokeRestart
[08:29:48.662]                       is.null <- base::is.null
[08:29:48.662]                       muffled <- FALSE
[08:29:48.662]                       if (inherits(cond, "message")) {
[08:29:48.662]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.662]                         if (muffled) 
[08:29:48.662]                           invokeRestart("muffleMessage")
[08:29:48.662]                       }
[08:29:48.662]                       else if (inherits(cond, "warning")) {
[08:29:48.662]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.662]                         if (muffled) 
[08:29:48.662]                           invokeRestart("muffleWarning")
[08:29:48.662]                       }
[08:29:48.662]                       else if (inherits(cond, "condition")) {
[08:29:48.662]                         if (!is.null(pattern)) {
[08:29:48.662]                           computeRestarts <- base::computeRestarts
[08:29:48.662]                           grepl <- base::grepl
[08:29:48.662]                           restarts <- computeRestarts(cond)
[08:29:48.662]                           for (restart in restarts) {
[08:29:48.662]                             name <- restart$name
[08:29:48.662]                             if (is.null(name)) 
[08:29:48.662]                               next
[08:29:48.662]                             if (!grepl(pattern, name)) 
[08:29:48.662]                               next
[08:29:48.662]                             invokeRestart(restart)
[08:29:48.662]                             muffled <- TRUE
[08:29:48.662]                             break
[08:29:48.662]                           }
[08:29:48.662]                         }
[08:29:48.662]                       }
[08:29:48.662]                       invisible(muffled)
[08:29:48.662]                     }
[08:29:48.662]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.662]                   }
[08:29:48.662]                 }
[08:29:48.662]                 else {
[08:29:48.662]                   if (TRUE) {
[08:29:48.662]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.662]                     {
[08:29:48.662]                       inherits <- base::inherits
[08:29:48.662]                       invokeRestart <- base::invokeRestart
[08:29:48.662]                       is.null <- base::is.null
[08:29:48.662]                       muffled <- FALSE
[08:29:48.662]                       if (inherits(cond, "message")) {
[08:29:48.662]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.662]                         if (muffled) 
[08:29:48.662]                           invokeRestart("muffleMessage")
[08:29:48.662]                       }
[08:29:48.662]                       else if (inherits(cond, "warning")) {
[08:29:48.662]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.662]                         if (muffled) 
[08:29:48.662]                           invokeRestart("muffleWarning")
[08:29:48.662]                       }
[08:29:48.662]                       else if (inherits(cond, "condition")) {
[08:29:48.662]                         if (!is.null(pattern)) {
[08:29:48.662]                           computeRestarts <- base::computeRestarts
[08:29:48.662]                           grepl <- base::grepl
[08:29:48.662]                           restarts <- computeRestarts(cond)
[08:29:48.662]                           for (restart in restarts) {
[08:29:48.662]                             name <- restart$name
[08:29:48.662]                             if (is.null(name)) 
[08:29:48.662]                               next
[08:29:48.662]                             if (!grepl(pattern, name)) 
[08:29:48.662]                               next
[08:29:48.662]                             invokeRestart(restart)
[08:29:48.662]                             muffled <- TRUE
[08:29:48.662]                             break
[08:29:48.662]                           }
[08:29:48.662]                         }
[08:29:48.662]                       }
[08:29:48.662]                       invisible(muffled)
[08:29:48.662]                     }
[08:29:48.662]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.662]                   }
[08:29:48.662]                 }
[08:29:48.662]             }
[08:29:48.662]         }))
[08:29:48.662]     }, error = function(ex) {
[08:29:48.662]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:48.662]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.662]                 ...future.rng), started = ...future.startTime, 
[08:29:48.662]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:48.662]             version = "1.8"), class = "FutureResult")
[08:29:48.662]     }, finally = {
[08:29:48.662]         if (!identical(...future.workdir, getwd())) 
[08:29:48.662]             setwd(...future.workdir)
[08:29:48.662]         {
[08:29:48.662]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:48.662]                 ...future.oldOptions$nwarnings <- NULL
[08:29:48.662]             }
[08:29:48.662]             base::options(...future.oldOptions)
[08:29:48.662]             if (.Platform$OS.type == "windows") {
[08:29:48.662]                 old_names <- names(...future.oldEnvVars)
[08:29:48.662]                 envs <- base::Sys.getenv()
[08:29:48.662]                 names <- names(envs)
[08:29:48.662]                 common <- intersect(names, old_names)
[08:29:48.662]                 added <- setdiff(names, old_names)
[08:29:48.662]                 removed <- setdiff(old_names, names)
[08:29:48.662]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:48.662]                   envs[common]]
[08:29:48.662]                 NAMES <- toupper(changed)
[08:29:48.662]                 args <- list()
[08:29:48.662]                 for (kk in seq_along(NAMES)) {
[08:29:48.662]                   name <- changed[[kk]]
[08:29:48.662]                   NAME <- NAMES[[kk]]
[08:29:48.662]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.662]                     next
[08:29:48.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.662]                 }
[08:29:48.662]                 NAMES <- toupper(added)
[08:29:48.662]                 for (kk in seq_along(NAMES)) {
[08:29:48.662]                   name <- added[[kk]]
[08:29:48.662]                   NAME <- NAMES[[kk]]
[08:29:48.662]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.662]                     next
[08:29:48.662]                   args[[name]] <- ""
[08:29:48.662]                 }
[08:29:48.662]                 NAMES <- toupper(removed)
[08:29:48.662]                 for (kk in seq_along(NAMES)) {
[08:29:48.662]                   name <- removed[[kk]]
[08:29:48.662]                   NAME <- NAMES[[kk]]
[08:29:48.662]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.662]                     next
[08:29:48.662]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.662]                 }
[08:29:48.662]                 if (length(args) > 0) 
[08:29:48.662]                   base::do.call(base::Sys.setenv, args = args)
[08:29:48.662]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:48.662]             }
[08:29:48.662]             else {
[08:29:48.662]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:48.662]             }
[08:29:48.662]             {
[08:29:48.662]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:48.662]                   0L) {
[08:29:48.662]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:48.662]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:48.662]                   base::options(opts)
[08:29:48.662]                 }
[08:29:48.662]                 {
[08:29:48.662]                   {
[08:29:48.662]                     NULL
[08:29:48.662]                     RNGkind("Mersenne-Twister")
[08:29:48.662]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:48.662]                       inherits = FALSE)
[08:29:48.662]                   }
[08:29:48.662]                   options(future.plan = "multisession")
[08:29:48.662]                   if (is.na("")) 
[08:29:48.662]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.662]                   else Sys.setenv(R_FUTURE_PLAN = "")
[08:29:48.662]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:48.662]                     .init = FALSE)
[08:29:48.662]                 }
[08:29:48.662]             }
[08:29:48.662]         }
[08:29:48.662]     })
[08:29:48.662]     if (TRUE) {
[08:29:48.662]         base::sink(type = "output", split = FALSE)
[08:29:48.662]         if (TRUE) {
[08:29:48.662]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:48.662]         }
[08:29:48.662]         else {
[08:29:48.662]             ...future.result["stdout"] <- base::list(NULL)
[08:29:48.662]         }
[08:29:48.662]         base::close(...future.stdout)
[08:29:48.662]         ...future.stdout <- NULL
[08:29:48.662]     }
[08:29:48.662]     ...future.result$conditions <- ...future.conditions
[08:29:48.662]     ...future.result$finished <- base::Sys.time()
[08:29:48.662]     ...future.result
[08:29:48.662] }
[08:29:48.664] plan(): Setting new future strategy stack:
[08:29:48.664] List of future strategies:
[08:29:48.664] 1. sequential:
[08:29:48.664]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:48.664]    - tweaked: FALSE
[08:29:48.664]    - call: NULL
[08:29:48.664] plan(): nbrOfWorkers() = 1
[08:29:48.665] plan(): Setting new future strategy stack:
[08:29:48.665] List of future strategies:
[08:29:48.665] 1. multisession:
[08:29:48.665]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.665]    - tweaked: FALSE
[08:29:48.665]    - call: plan("default")
[08:29:48.667] plan(): nbrOfWorkers() = 1
[08:29:48.667] SequentialFuture started (and completed)
[08:29:48.667] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:48.668] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[08:29:48.669] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[08:29:48.669] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[08:29:48.669] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[08:29:48.669] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[08:29:48.670] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[08:29:48.671] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_JOURNAL’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[08:29:48.672] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[08:29:48.673] Option 'future.plan' of type ‘function’
[08:29:48.673] R command-line argument: -p 1
[08:29:48.673]  => 'future.plan' already set.
[08:29:48.673] R process uuid: e31bcfa5-fdf1-3918-86ed-5f7c8cb9595e
[08:29:48.673] Setting plan('default')
[08:29:48.673] plan(): Setting new future strategy stack:
[08:29:48.673] List of future strategies:
[08:29:48.673] 1. multisession:
[08:29:48.673]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.673]    - tweaked: FALSE
[08:29:48.673]    - call: NULL
[08:29:48.675] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[08:29:48.675] plan(): Setting new future strategy stack:
[08:29:48.675] List of future strategies:
[08:29:48.675] 1. multisession:
[08:29:48.675]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.675]    - tweaked: FALSE
[08:29:48.675]    - call: NULL
[08:29:48.675] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:48.675] multisession:
[08:29:48.675] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.675] - tweaked: FALSE
[08:29:48.675] - call: NULL
[08:29:48.677] getGlobalsAndPackages() ...
[08:29:48.677] Not searching for globals
[08:29:48.677] - globals: [0] <none>
[08:29:48.677] getGlobalsAndPackages() ... DONE
[08:29:48.677] Packages needed by the future expression (n = 0): <none>
[08:29:48.678] Packages needed by future strategies (n = 0): <none>
[08:29:48.678] {
[08:29:48.678]     {
[08:29:48.678]         {
[08:29:48.678]             ...future.startTime <- base::Sys.time()
[08:29:48.678]             {
[08:29:48.678]                 {
[08:29:48.678]                   {
[08:29:48.678]                     base::local({
[08:29:48.678]                       has_future <- base::requireNamespace("future", 
[08:29:48.678]                         quietly = TRUE)
[08:29:48.678]                       if (has_future) {
[08:29:48.678]                         ns <- base::getNamespace("future")
[08:29:48.678]                         version <- ns[[".package"]][["version"]]
[08:29:48.678]                         if (is.null(version)) 
[08:29:48.678]                           version <- utils::packageVersion("future")
[08:29:48.678]                       }
[08:29:48.678]                       else {
[08:29:48.678]                         version <- NULL
[08:29:48.678]                       }
[08:29:48.678]                       if (!has_future || version < "1.8.0") {
[08:29:48.678]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:48.678]                           "", base::R.version$version.string), 
[08:29:48.678]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:48.678]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:48.678]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:48.678]                             "release", "version")], collapse = " "), 
[08:29:48.678]                           hostname = base::Sys.info()[["nodename"]])
[08:29:48.678]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:48.678]                           info)
[08:29:48.678]                         info <- base::paste(info, collapse = "; ")
[08:29:48.678]                         if (!has_future) {
[08:29:48.678]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:48.678]                             info)
[08:29:48.678]                         }
[08:29:48.678]                         else {
[08:29:48.678]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:48.678]                             info, version)
[08:29:48.678]                         }
[08:29:48.678]                         base::stop(msg)
[08:29:48.678]                       }
[08:29:48.678]                     })
[08:29:48.678]                   }
[08:29:48.678]                   ...future.strategy.old <- future::plan("list")
[08:29:48.678]                   options(future.plan = NULL)
[08:29:48.678]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.678]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:48.678]                 }
[08:29:48.678]                 ...future.workdir <- getwd()
[08:29:48.678]             }
[08:29:48.678]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:48.678]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:48.678]         }
[08:29:48.678]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:48.678]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:48.678]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:48.678]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:48.678]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:48.678]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:48.678]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:48.678]             base::names(...future.oldOptions))
[08:29:48.678]     }
[08:29:48.678]     if (FALSE) {
[08:29:48.678]     }
[08:29:48.678]     else {
[08:29:48.678]         if (TRUE) {
[08:29:48.678]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:48.678]                 open = "w")
[08:29:48.678]         }
[08:29:48.678]         else {
[08:29:48.678]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:48.678]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:48.678]         }
[08:29:48.678]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:48.678]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:48.678]             base::sink(type = "output", split = FALSE)
[08:29:48.678]             base::close(...future.stdout)
[08:29:48.678]         }, add = TRUE)
[08:29:48.678]     }
[08:29:48.678]     ...future.frame <- base::sys.nframe()
[08:29:48.678]     ...future.conditions <- base::list()
[08:29:48.678]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:48.678]     if (FALSE) {
[08:29:48.678]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:48.678]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:48.678]     }
[08:29:48.678]     ...future.result <- base::tryCatch({
[08:29:48.678]         base::withCallingHandlers({
[08:29:48.678]             ...future.value <- base::withVisible(base::local(NA))
[08:29:48.678]             future::FutureResult(value = ...future.value$value, 
[08:29:48.678]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.678]                   ...future.rng), globalenv = if (FALSE) 
[08:29:48.678]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:48.678]                     ...future.globalenv.names))
[08:29:48.678]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:48.678]         }, condition = base::local({
[08:29:48.678]             c <- base::c
[08:29:48.678]             inherits <- base::inherits
[08:29:48.678]             invokeRestart <- base::invokeRestart
[08:29:48.678]             length <- base::length
[08:29:48.678]             list <- base::list
[08:29:48.678]             seq.int <- base::seq.int
[08:29:48.678]             signalCondition <- base::signalCondition
[08:29:48.678]             sys.calls <- base::sys.calls
[08:29:48.678]             `[[` <- base::`[[`
[08:29:48.678]             `+` <- base::`+`
[08:29:48.678]             `<<-` <- base::`<<-`
[08:29:48.678]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:48.678]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:48.678]                   3L)]
[08:29:48.678]             }
[08:29:48.678]             function(cond) {
[08:29:48.678]                 is_error <- inherits(cond, "error")
[08:29:48.678]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:48.678]                   NULL)
[08:29:48.678]                 if (is_error) {
[08:29:48.678]                   sessionInformation <- function() {
[08:29:48.678]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:48.678]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:48.678]                       search = base::search(), system = base::Sys.info())
[08:29:48.678]                   }
[08:29:48.678]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.678]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:48.678]                     cond$call), session = sessionInformation(), 
[08:29:48.678]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:48.678]                   signalCondition(cond)
[08:29:48.678]                 }
[08:29:48.678]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:48.678]                 "immediateCondition"))) {
[08:29:48.678]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:48.678]                   ...future.conditions[[length(...future.conditions) + 
[08:29:48.678]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:48.678]                   if (TRUE && !signal) {
[08:29:48.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.678]                     {
[08:29:48.678]                       inherits <- base::inherits
[08:29:48.678]                       invokeRestart <- base::invokeRestart
[08:29:48.678]                       is.null <- base::is.null
[08:29:48.678]                       muffled <- FALSE
[08:29:48.678]                       if (inherits(cond, "message")) {
[08:29:48.678]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.678]                         if (muffled) 
[08:29:48.678]                           invokeRestart("muffleMessage")
[08:29:48.678]                       }
[08:29:48.678]                       else if (inherits(cond, "warning")) {
[08:29:48.678]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.678]                         if (muffled) 
[08:29:48.678]                           invokeRestart("muffleWarning")
[08:29:48.678]                       }
[08:29:48.678]                       else if (inherits(cond, "condition")) {
[08:29:48.678]                         if (!is.null(pattern)) {
[08:29:48.678]                           computeRestarts <- base::computeRestarts
[08:29:48.678]                           grepl <- base::grepl
[08:29:48.678]                           restarts <- computeRestarts(cond)
[08:29:48.678]                           for (restart in restarts) {
[08:29:48.678]                             name <- restart$name
[08:29:48.678]                             if (is.null(name)) 
[08:29:48.678]                               next
[08:29:48.678]                             if (!grepl(pattern, name)) 
[08:29:48.678]                               next
[08:29:48.678]                             invokeRestart(restart)
[08:29:48.678]                             muffled <- TRUE
[08:29:48.678]                             break
[08:29:48.678]                           }
[08:29:48.678]                         }
[08:29:48.678]                       }
[08:29:48.678]                       invisible(muffled)
[08:29:48.678]                     }
[08:29:48.678]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.678]                   }
[08:29:48.678]                 }
[08:29:48.678]                 else {
[08:29:48.678]                   if (TRUE) {
[08:29:48.678]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:48.678]                     {
[08:29:48.678]                       inherits <- base::inherits
[08:29:48.678]                       invokeRestart <- base::invokeRestart
[08:29:48.678]                       is.null <- base::is.null
[08:29:48.678]                       muffled <- FALSE
[08:29:48.678]                       if (inherits(cond, "message")) {
[08:29:48.678]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:48.678]                         if (muffled) 
[08:29:48.678]                           invokeRestart("muffleMessage")
[08:29:48.678]                       }
[08:29:48.678]                       else if (inherits(cond, "warning")) {
[08:29:48.678]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:48.678]                         if (muffled) 
[08:29:48.678]                           invokeRestart("muffleWarning")
[08:29:48.678]                       }
[08:29:48.678]                       else if (inherits(cond, "condition")) {
[08:29:48.678]                         if (!is.null(pattern)) {
[08:29:48.678]                           computeRestarts <- base::computeRestarts
[08:29:48.678]                           grepl <- base::grepl
[08:29:48.678]                           restarts <- computeRestarts(cond)
[08:29:48.678]                           for (restart in restarts) {
[08:29:48.678]                             name <- restart$name
[08:29:48.678]                             if (is.null(name)) 
[08:29:48.678]                               next
[08:29:48.678]                             if (!grepl(pattern, name)) 
[08:29:48.678]                               next
[08:29:48.678]                             invokeRestart(restart)
[08:29:48.678]                             muffled <- TRUE
[08:29:48.678]                             break
[08:29:48.678]                           }
[08:29:48.678]                         }
[08:29:48.678]                       }
[08:29:48.678]                       invisible(muffled)
[08:29:48.678]                     }
[08:29:48.678]                     muffleCondition(cond, pattern = "^muffle")
[08:29:48.678]                   }
[08:29:48.678]                 }
[08:29:48.678]             }
[08:29:48.678]         }))
[08:29:48.678]     }, error = function(ex) {
[08:29:48.678]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:48.678]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:48.678]                 ...future.rng), started = ...future.startTime, 
[08:29:48.678]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:48.678]             version = "1.8"), class = "FutureResult")
[08:29:48.678]     }, finally = {
[08:29:48.678]         if (!identical(...future.workdir, getwd())) 
[08:29:48.678]             setwd(...future.workdir)
[08:29:48.678]         {
[08:29:48.678]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:48.678]                 ...future.oldOptions$nwarnings <- NULL
[08:29:48.678]             }
[08:29:48.678]             base::options(...future.oldOptions)
[08:29:48.678]             if (.Platform$OS.type == "windows") {
[08:29:48.678]                 old_names <- names(...future.oldEnvVars)
[08:29:48.678]                 envs <- base::Sys.getenv()
[08:29:48.678]                 names <- names(envs)
[08:29:48.678]                 common <- intersect(names, old_names)
[08:29:48.678]                 added <- setdiff(names, old_names)
[08:29:48.678]                 removed <- setdiff(old_names, names)
[08:29:48.678]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:48.678]                   envs[common]]
[08:29:48.678]                 NAMES <- toupper(changed)
[08:29:48.678]                 args <- list()
[08:29:48.678]                 for (kk in seq_along(NAMES)) {
[08:29:48.678]                   name <- changed[[kk]]
[08:29:48.678]                   NAME <- NAMES[[kk]]
[08:29:48.678]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.678]                     next
[08:29:48.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.678]                 }
[08:29:48.678]                 NAMES <- toupper(added)
[08:29:48.678]                 for (kk in seq_along(NAMES)) {
[08:29:48.678]                   name <- added[[kk]]
[08:29:48.678]                   NAME <- NAMES[[kk]]
[08:29:48.678]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.678]                     next
[08:29:48.678]                   args[[name]] <- ""
[08:29:48.678]                 }
[08:29:48.678]                 NAMES <- toupper(removed)
[08:29:48.678]                 for (kk in seq_along(NAMES)) {
[08:29:48.678]                   name <- removed[[kk]]
[08:29:48.678]                   NAME <- NAMES[[kk]]
[08:29:48.678]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:48.678]                     next
[08:29:48.678]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:48.678]                 }
[08:29:48.678]                 if (length(args) > 0) 
[08:29:48.678]                   base::do.call(base::Sys.setenv, args = args)
[08:29:48.678]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:48.678]             }
[08:29:48.678]             else {
[08:29:48.678]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:48.678]             }
[08:29:48.678]             {
[08:29:48.678]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:48.678]                   0L) {
[08:29:48.678]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:48.678]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:48.678]                   base::options(opts)
[08:29:48.678]                 }
[08:29:48.678]                 {
[08:29:48.678]                   {
[08:29:48.678]                     NULL
[08:29:48.678]                     RNGkind("Mersenne-Twister")
[08:29:48.678]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:48.678]                       inherits = FALSE)
[08:29:48.678]                   }
[08:29:48.678]                   options(future.plan = function (..., workers = availableCores(), 
[08:29:48.678]                     lazy = FALSE, rscript_libs = .libPaths(), 
[08:29:48.678]                     envir = parent.frame()) 
[08:29:48.678]                   {
[08:29:48.678]                     if (is.function(workers)) 
[08:29:48.678]                       workers <- workers()
[08:29:48.678]                     workers <- structure(as.integer(workers), 
[08:29:48.678]                       class = class(workers))
[08:29:48.678]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[08:29:48.678]                       workers >= 1)
[08:29:48.678]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[08:29:48.678]                       return(sequential(..., lazy = TRUE, envir = envir))
[08:29:48.678]                     }
[08:29:48.678]                     future <- MultisessionFuture(..., workers = workers, 
[08:29:48.678]                       lazy = lazy, rscript_libs = rscript_libs, 
[08:29:48.678]                       envir = envir)
[08:29:48.678]                     if (!future$lazy) 
[08:29:48.678]                       future <- run(future)
[08:29:48.678]                     invisible(future)
[08:29:48.678]                   })
[08:29:48.678]                   if (is.na("")) 
[08:29:48.678]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:48.678]                   else Sys.setenv(R_FUTURE_PLAN = "")
[08:29:48.678]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:48.678]                     .init = FALSE)
[08:29:48.678]                 }
[08:29:48.678]             }
[08:29:48.678]         }
[08:29:48.678]     })
[08:29:48.678]     if (TRUE) {
[08:29:48.678]         base::sink(type = "output", split = FALSE)
[08:29:48.678]         if (TRUE) {
[08:29:48.678]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:48.678]         }
[08:29:48.678]         else {
[08:29:48.678]             ...future.result["stdout"] <- base::list(NULL)
[08:29:48.678]         }
[08:29:48.678]         base::close(...future.stdout)
[08:29:48.678]         ...future.stdout <- NULL
[08:29:48.678]     }
[08:29:48.678]     ...future.result$conditions <- ...future.conditions
[08:29:48.678]     ...future.result$finished <- base::Sys.time()
[08:29:48.678]     ...future.result
[08:29:48.678] }
[08:29:48.680] plan(): Setting new future strategy stack:
[08:29:48.680] List of future strategies:
[08:29:48.680] 1. sequential:
[08:29:48.680]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:48.680]    - tweaked: FALSE
[08:29:48.680]    - call: NULL
[08:29:48.680] plan(): nbrOfWorkers() = 1
[08:29:48.681] plan(): Setting new future strategy stack:
[08:29:48.681] List of future strategies:
[08:29:48.681] 1. multisession:
[08:29:48.681]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:48.681]    - tweaked: FALSE
[08:29:48.681]    - call: NULL
[08:29:48.683] plan(): nbrOfWorkers() = 1
[08:29:48.683] SequentialFuture started (and completed)
[08:29:48.683] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:48.684] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[08:29:48.687] Option 'future.startup.script': TRUE
[08:29:48.687] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:29:48.687] Future startup scripts found: <none>
[08:29:48.687] Option 'future.startup.script': TRUE
[08:29:48.687] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:29:48.687] Future startup scripts found: <none>
[08:29:48.688] Option 'future.startup.script': TRUE
[08:29:48.688] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:29:48.688] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[08:29:48.688] Option 'future.startup.script': TRUE
[08:29:48.688] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[08:29:48.688] Future startup scripts found: ‘.future.R’
[08:29:48.689] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[08:29:48.689] plan(): Setting new future strategy stack:
[08:29:48.690] List of future strategies:
[08:29:48.690] 1. FutureStrategy:
[08:29:48.690]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:48.690]    - tweaked: FALSE
[08:29:48.690]    - call: future::plan(oplan)
[08:29:48.690] plan(): nbrOfWorkers() = 1
> 
