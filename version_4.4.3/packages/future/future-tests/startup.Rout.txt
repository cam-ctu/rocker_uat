
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:03:23.175] plan(): Setting new future strategy stack:
[11:03:23.175] List of future strategies:
[11:03:23.175] 1. sequential:
[11:03:23.175]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.175]    - tweaked: FALSE
[11:03:23.175]    - call: future::plan("sequential")
[11:03:23.188] plan(): nbrOfWorkers() = 1
> 
> maxCores <- min(2L, availableCores(methods = "system"))
> 
> 
> plan("default")
[11:03:23.203] plan(): Setting new future strategy stack:
[11:03:23.204] List of future strategies:
[11:03:23.204] 1. sequential:
[11:03:23.204]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.204]    - tweaked: FALSE
[11:03:23.204]    - call: NULL
[11:03:23.214] plan(): nbrOfWorkers() = 1
> strategy0 <- plan()
>  
> message("*** parseCmdArgs() ...")
*** parseCmdArgs() ...
> 
> args <- parseCmdArgs()
> str(args)
 list()
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 1
> stopifnot(args$p == 1L)
> 
> options(future.plan = NULL, future.cmdargs = c(sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 1L, sprintf("--parallel=%d", maxCores)))
> args <- parseCmdArgs()
> str(args)
List of 1
 $ p: int 2
> stopifnot(args$p == maxCores)
> 
> options(future.plan = NULL, future.cmdargs = c("-p", 0L))
> args <- parseCmdArgs()
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = c("-p", .Machine$integer.max))
> args <- parseCmdArgs()
Warning: future: Ignoring requested number of processes, because it is greater than the number of cores/child processes available (= 4) to this R process: -p 2147483647
> stopifnot(is.null(args$p))
> res <- tryCatch(parseCmdArgs(), warning = function(w) w)
> stopifnot(inherits(res, "warning"))
> 
> options(future.plan = NULL, future.cmdargs = NULL)
> 
> message("*** parseCmdArgs() ... DONE")
*** parseCmdArgs() ... DONE
> 
> 
> 
> message("*** .onLoad() ...")
*** .onLoad() ...
> plan("default")
[11:03:23.220] plan(): Setting new future strategy stack:
[11:03:23.220] List of future strategies:
[11:03:23.220] 1. sequential:
[11:03:23.220]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.220]    - tweaked: FALSE
[11:03:23.220]    - call: NULL
[11:03:23.220] plan(): nbrOfWorkers() = 1
> pkgname <- "future"
> 
> message("- .onLoad() w/out command-line options ...")
- .onLoad() w/out command-line options ...
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[11:03:23.221] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.221] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.221] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.221] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.221] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.221] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.222] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.223] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.223] R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.224] Coercing from character to numeric: ‘0.01’
[11:03:23.224] => options(“future.wait.interval” = ‘0.01’) [n=1, mode=double]
[11:03:23.224] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.224] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.224] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.224] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.224] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.225] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.225] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.225] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.225] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:23.225] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.225] Setting plan('default')
[11:03:23.225] plan(): Setting new future strategy stack:
[11:03:23.225] List of future strategies:
[11:03:23.225] 1. sequential:
[11:03:23.225]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.225]    - tweaked: FALSE
[11:03:23.225]    - call: NULL
[11:03:23.226] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[11:03:23.226] plan(): Setting new future strategy stack:
[11:03:23.226] List of future strategies:
[11:03:23.226] 1. sequential:
[11:03:23.226]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.226]    - tweaked: FALSE
[11:03:23.226]    - call: NULL
[11:03:23.227] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/out command-line options ... DONE")
- .onLoad() w/out command-line options ... DONE
> 
> message("- .onLoad() w/ -p 1 ...")
- .onLoad() w/ -p 1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[11:03:23.227] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.228] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.228] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.228] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.228] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.229] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.230] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.231] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.232] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:23.232] R command-line argument: -p 1
[11:03:23.233]  => options(future.plan = sequential)
[11:03:23.233] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.233] Setting plan('default')
[11:03:23.233] plan(): Setting new future strategy stack:
[11:03:23.233] List of future strategies:
[11:03:23.233] 1. sequential:
[11:03:23.233]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.233]    - tweaked: FALSE
[11:03:23.233]    - call: NULL
[11:03:23.233] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[11:03:23.234] plan(): Setting new future strategy stack:
[11:03:23.234] List of future strategies:
[11:03:23.234] 1. sequential:
[11:03:23.234]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.234]    - tweaked: FALSE
[11:03:23.234]    - call: NULL
[11:03:23.234] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 1 ... DONE")
- .onLoad() w/ -p 1 ... DONE
> 
> message("- .onLoad() w/ --parallel=1 ...")
- .onLoad() w/ --parallel=1 ...
> plan("default")
[11:03:23.234] plan(): Setting new future strategy stack:
[11:03:23.235] List of future strategies:
[11:03:23.235] 1. sequential:
[11:03:23.235]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.235]    - tweaked: FALSE
[11:03:23.235]    - call: NULL
[11:03:23.235] plan(): nbrOfWorkers() = 1
> options(future.plan = NULL, future.cmdargs = "-parallel=1")
> .onLoad(pkgname, pkgname)
[11:03:23.236] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.236] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.236] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.237] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.238] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.239] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.239] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.239] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.239] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:23.239] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.239] Setting plan('default')
[11:03:23.239] plan(): Setting new future strategy stack:
[11:03:23.239] List of future strategies:
[11:03:23.239] 1. sequential:
[11:03:23.239]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.239]    - tweaked: FALSE
[11:03:23.239]    - call: NULL
[11:03:23.240] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> ## future.plan can be either a string or a future function
> default <- getOption("future.plan", "sequential")
> if (is.function(default)) default <- class(default)
> stopifnot(inherits(strategy, default))
> plan("default")
[11:03:23.240] plan(): Setting new future strategy stack:
[11:03:23.240] List of future strategies:
[11:03:23.240] 1. sequential:
[11:03:23.240]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.240]    - tweaked: FALSE
[11:03:23.240]    - call: NULL
[11:03:23.241] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ --parallel=1 ... DONE")
- .onLoad() w/ --parallel=1 ... DONE
> 
> message("- .onLoad() w/ -p 2 ...")
- .onLoad() w/ -p 2 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 2))
> .onLoad(pkgname, pkgname)
[11:03:23.241] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.241] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.242] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.243] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.244] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.245] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.245] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.245] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:23.245] R command-line argument: -p 2
[11:03:23.245]  => options(future.plan = tweak(multisession, workers = 2))
[11:03:23.247] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.247] Setting plan('default')
[11:03:23.247] plan(): Setting new future strategy stack:
[11:03:23.247] List of future strategies:
[11:03:23.247] 1. multisession:
[11:03:23.247]    - args: function (..., workers = 2L, envir = parent.frame())
[11:03:23.247]    - tweaked: TRUE
[11:03:23.247]    - call: NULL
[11:03:23.248] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = 2L, envir = parent.frame())
- tweaked: TRUE
- call: NULL
> if (maxCores >= 2) {
+   ## Exactly which type of 'multiprocess' future depends on R_FUTURE_PLAN
+   stopifnot(inherits(strategy, "multiprocess"))
+ } else {
+   stopifnot(all(class(strategy) == class(strategy0)))
+ }
> plan("default")
[11:03:23.248] plan(): Setting new future strategy stack:
[11:03:23.248] List of future strategies:
[11:03:23.248] 1. multisession:
[11:03:23.248]    - args: function (..., workers = 2L, envir = parent.frame())
[11:03:23.248]    - tweaked: TRUE
[11:03:23.248]    - call: NULL
[11:03:23.248] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:23.249] multisession:
[11:03:23.249] - args: function (..., workers = 2L, envir = parent.frame())
[11:03:23.249] - tweaked: TRUE
[11:03:23.249] - call: NULL
[11:03:23.250] getGlobalsAndPackages() ...
[11:03:23.250] Not searching for globals
[11:03:23.250] - globals: [0] <none>
[11:03:23.250] getGlobalsAndPackages() ... DONE
[11:03:23.717] Packages needed by the future expression (n = 0): <none>
[11:03:23.717] Packages needed by future strategies (n = 0): <none>
[11:03:23.717] {
[11:03:23.717]     {
[11:03:23.717]         {
[11:03:23.717]             ...future.startTime <- base::Sys.time()
[11:03:23.717]             {
[11:03:23.717]                 {
[11:03:23.717]                   {
[11:03:23.717]                     {
[11:03:23.717]                       base::local({
[11:03:23.717]                         has_future <- base::requireNamespace("future", 
[11:03:23.717]                           quietly = TRUE)
[11:03:23.717]                         if (has_future) {
[11:03:23.717]                           ns <- base::getNamespace("future")
[11:03:23.717]                           version <- ns[[".package"]][["version"]]
[11:03:23.717]                           if (is.null(version)) 
[11:03:23.717]                             version <- utils::packageVersion("future")
[11:03:23.717]                         }
[11:03:23.717]                         else {
[11:03:23.717]                           version <- NULL
[11:03:23.717]                         }
[11:03:23.717]                         if (!has_future || version < "1.8.0") {
[11:03:23.717]                           info <- base::c(r_version = base::gsub("R version ", 
[11:03:23.717]                             "", base::R.version$version.string), 
[11:03:23.717]                             platform = base::sprintf("%s (%s-bit)", 
[11:03:23.717]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:23.717]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:23.717]                               "release", "version")], collapse = " "), 
[11:03:23.717]                             hostname = base::Sys.info()[["nodename"]])
[11:03:23.717]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:03:23.717]                             info)
[11:03:23.717]                           info <- base::paste(info, collapse = "; ")
[11:03:23.717]                           if (!has_future) {
[11:03:23.717]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:23.717]                               info)
[11:03:23.717]                           }
[11:03:23.717]                           else {
[11:03:23.717]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:23.717]                               info, version)
[11:03:23.717]                           }
[11:03:23.717]                           base::stop(msg)
[11:03:23.717]                         }
[11:03:23.717]                       })
[11:03:23.717]                     }
[11:03:23.717]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:03:23.717]                     base::options(mc.cores = 1L)
[11:03:23.717]                   }
[11:03:23.717]                   ...future.strategy.old <- future::plan("list")
[11:03:23.717]                   options(future.plan = NULL)
[11:03:23.717]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:23.717]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:23.717]                 }
[11:03:23.717]                 ...future.workdir <- getwd()
[11:03:23.717]             }
[11:03:23.717]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:23.717]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:23.717]         }
[11:03:23.717]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:23.717]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:23.717]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:23.717]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:23.717]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:23.717]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:23.717]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:23.717]             base::names(...future.oldOptions))
[11:03:23.717]     }
[11:03:23.717]     if (FALSE) {
[11:03:23.717]     }
[11:03:23.717]     else {
[11:03:23.717]         if (TRUE) {
[11:03:23.717]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:23.717]                 open = "w")
[11:03:23.717]         }
[11:03:23.717]         else {
[11:03:23.717]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:23.717]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:23.717]         }
[11:03:23.717]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:23.717]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:23.717]             base::sink(type = "output", split = FALSE)
[11:03:23.717]             base::close(...future.stdout)
[11:03:23.717]         }, add = TRUE)
[11:03:23.717]     }
[11:03:23.717]     ...future.frame <- base::sys.nframe()
[11:03:23.717]     ...future.conditions <- base::list()
[11:03:23.717]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:23.717]     if (FALSE) {
[11:03:23.717]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:23.717]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:23.717]     }
[11:03:23.717]     ...future.result <- base::tryCatch({
[11:03:23.717]         base::withCallingHandlers({
[11:03:23.717]             ...future.value <- base::withVisible(base::local({
[11:03:23.717]                 ...future.makeSendCondition <- base::local({
[11:03:23.717]                   sendCondition <- NULL
[11:03:23.717]                   function(frame = 1L) {
[11:03:23.717]                     if (is.function(sendCondition)) 
[11:03:23.717]                       return(sendCondition)
[11:03:23.717]                     ns <- getNamespace("parallel")
[11:03:23.717]                     if (exists("sendData", mode = "function", 
[11:03:23.717]                       envir = ns)) {
[11:03:23.717]                       parallel_sendData <- get("sendData", mode = "function", 
[11:03:23.717]                         envir = ns)
[11:03:23.717]                       envir <- sys.frame(frame)
[11:03:23.717]                       master <- NULL
[11:03:23.717]                       while (!identical(envir, .GlobalEnv) && 
[11:03:23.717]                         !identical(envir, emptyenv())) {
[11:03:23.717]                         if (exists("master", mode = "list", envir = envir, 
[11:03:23.717]                           inherits = FALSE)) {
[11:03:23.717]                           master <- get("master", mode = "list", 
[11:03:23.717]                             envir = envir, inherits = FALSE)
[11:03:23.717]                           if (inherits(master, c("SOCKnode", 
[11:03:23.717]                             "SOCK0node"))) {
[11:03:23.717]                             sendCondition <<- function(cond) {
[11:03:23.717]                               data <- list(type = "VALUE", value = cond, 
[11:03:23.717]                                 success = TRUE)
[11:03:23.717]                               parallel_sendData(master, data)
[11:03:23.717]                             }
[11:03:23.717]                             return(sendCondition)
[11:03:23.717]                           }
[11:03:23.717]                         }
[11:03:23.717]                         frame <- frame + 1L
[11:03:23.717]                         envir <- sys.frame(frame)
[11:03:23.717]                       }
[11:03:23.717]                     }
[11:03:23.717]                     sendCondition <<- function(cond) NULL
[11:03:23.717]                   }
[11:03:23.717]                 })
[11:03:23.717]                 withCallingHandlers({
[11:03:23.717]                   NA
[11:03:23.717]                 }, immediateCondition = function(cond) {
[11:03:23.717]                   sendCondition <- ...future.makeSendCondition()
[11:03:23.717]                   sendCondition(cond)
[11:03:23.717]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:23.717]                   {
[11:03:23.717]                     inherits <- base::inherits
[11:03:23.717]                     invokeRestart <- base::invokeRestart
[11:03:23.717]                     is.null <- base::is.null
[11:03:23.717]                     muffled <- FALSE
[11:03:23.717]                     if (inherits(cond, "message")) {
[11:03:23.717]                       muffled <- grepl(pattern, "muffleMessage")
[11:03:23.717]                       if (muffled) 
[11:03:23.717]                         invokeRestart("muffleMessage")
[11:03:23.717]                     }
[11:03:23.717]                     else if (inherits(cond, "warning")) {
[11:03:23.717]                       muffled <- grepl(pattern, "muffleWarning")
[11:03:23.717]                       if (muffled) 
[11:03:23.717]                         invokeRestart("muffleWarning")
[11:03:23.717]                     }
[11:03:23.717]                     else if (inherits(cond, "condition")) {
[11:03:23.717]                       if (!is.null(pattern)) {
[11:03:23.717]                         computeRestarts <- base::computeRestarts
[11:03:23.717]                         grepl <- base::grepl
[11:03:23.717]                         restarts <- computeRestarts(cond)
[11:03:23.717]                         for (restart in restarts) {
[11:03:23.717]                           name <- restart$name
[11:03:23.717]                           if (is.null(name)) 
[11:03:23.717]                             next
[11:03:23.717]                           if (!grepl(pattern, name)) 
[11:03:23.717]                             next
[11:03:23.717]                           invokeRestart(restart)
[11:03:23.717]                           muffled <- TRUE
[11:03:23.717]                           break
[11:03:23.717]                         }
[11:03:23.717]                       }
[11:03:23.717]                     }
[11:03:23.717]                     invisible(muffled)
[11:03:23.717]                   }
[11:03:23.717]                   muffleCondition(cond)
[11:03:23.717]                 })
[11:03:23.717]             }))
[11:03:23.717]             future::FutureResult(value = ...future.value$value, 
[11:03:23.717]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:23.717]                   ...future.rng), globalenv = if (FALSE) 
[11:03:23.717]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:23.717]                     ...future.globalenv.names))
[11:03:23.717]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:23.717]         }, condition = base::local({
[11:03:23.717]             c <- base::c
[11:03:23.717]             inherits <- base::inherits
[11:03:23.717]             invokeRestart <- base::invokeRestart
[11:03:23.717]             length <- base::length
[11:03:23.717]             list <- base::list
[11:03:23.717]             seq.int <- base::seq.int
[11:03:23.717]             signalCondition <- base::signalCondition
[11:03:23.717]             sys.calls <- base::sys.calls
[11:03:23.717]             `[[` <- base::`[[`
[11:03:23.717]             `+` <- base::`+`
[11:03:23.717]             `<<-` <- base::`<<-`
[11:03:23.717]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:23.717]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:23.717]                   3L)]
[11:03:23.717]             }
[11:03:23.717]             function(cond) {
[11:03:23.717]                 is_error <- inherits(cond, "error")
[11:03:23.717]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:23.717]                   NULL)
[11:03:23.717]                 if (is_error) {
[11:03:23.717]                   sessionInformation <- function() {
[11:03:23.717]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:23.717]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:23.717]                       search = base::search(), system = base::Sys.info())
[11:03:23.717]                   }
[11:03:23.717]                   ...future.conditions[[length(...future.conditions) + 
[11:03:23.717]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:23.717]                     cond$call), session = sessionInformation(), 
[11:03:23.717]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:23.717]                   signalCondition(cond)
[11:03:23.717]                 }
[11:03:23.717]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:23.717]                 "immediateCondition"))) {
[11:03:23.717]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:23.717]                   ...future.conditions[[length(...future.conditions) + 
[11:03:23.717]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:23.717]                   if (TRUE && !signal) {
[11:03:23.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:23.717]                     {
[11:03:23.717]                       inherits <- base::inherits
[11:03:23.717]                       invokeRestart <- base::invokeRestart
[11:03:23.717]                       is.null <- base::is.null
[11:03:23.717]                       muffled <- FALSE
[11:03:23.717]                       if (inherits(cond, "message")) {
[11:03:23.717]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:23.717]                         if (muffled) 
[11:03:23.717]                           invokeRestart("muffleMessage")
[11:03:23.717]                       }
[11:03:23.717]                       else if (inherits(cond, "warning")) {
[11:03:23.717]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:23.717]                         if (muffled) 
[11:03:23.717]                           invokeRestart("muffleWarning")
[11:03:23.717]                       }
[11:03:23.717]                       else if (inherits(cond, "condition")) {
[11:03:23.717]                         if (!is.null(pattern)) {
[11:03:23.717]                           computeRestarts <- base::computeRestarts
[11:03:23.717]                           grepl <- base::grepl
[11:03:23.717]                           restarts <- computeRestarts(cond)
[11:03:23.717]                           for (restart in restarts) {
[11:03:23.717]                             name <- restart$name
[11:03:23.717]                             if (is.null(name)) 
[11:03:23.717]                               next
[11:03:23.717]                             if (!grepl(pattern, name)) 
[11:03:23.717]                               next
[11:03:23.717]                             invokeRestart(restart)
[11:03:23.717]                             muffled <- TRUE
[11:03:23.717]                             break
[11:03:23.717]                           }
[11:03:23.717]                         }
[11:03:23.717]                       }
[11:03:23.717]                       invisible(muffled)
[11:03:23.717]                     }
[11:03:23.717]                     muffleCondition(cond, pattern = "^muffle")
[11:03:23.717]                   }
[11:03:23.717]                 }
[11:03:23.717]                 else {
[11:03:23.717]                   if (TRUE) {
[11:03:23.717]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:23.717]                     {
[11:03:23.717]                       inherits <- base::inherits
[11:03:23.717]                       invokeRestart <- base::invokeRestart
[11:03:23.717]                       is.null <- base::is.null
[11:03:23.717]                       muffled <- FALSE
[11:03:23.717]                       if (inherits(cond, "message")) {
[11:03:23.717]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:23.717]                         if (muffled) 
[11:03:23.717]                           invokeRestart("muffleMessage")
[11:03:23.717]                       }
[11:03:23.717]                       else if (inherits(cond, "warning")) {
[11:03:23.717]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:23.717]                         if (muffled) 
[11:03:23.717]                           invokeRestart("muffleWarning")
[11:03:23.717]                       }
[11:03:23.717]                       else if (inherits(cond, "condition")) {
[11:03:23.717]                         if (!is.null(pattern)) {
[11:03:23.717]                           computeRestarts <- base::computeRestarts
[11:03:23.717]                           grepl <- base::grepl
[11:03:23.717]                           restarts <- computeRestarts(cond)
[11:03:23.717]                           for (restart in restarts) {
[11:03:23.717]                             name <- restart$name
[11:03:23.717]                             if (is.null(name)) 
[11:03:23.717]                               next
[11:03:23.717]                             if (!grepl(pattern, name)) 
[11:03:23.717]                               next
[11:03:23.717]                             invokeRestart(restart)
[11:03:23.717]                             muffled <- TRUE
[11:03:23.717]                             break
[11:03:23.717]                           }
[11:03:23.717]                         }
[11:03:23.717]                       }
[11:03:23.717]                       invisible(muffled)
[11:03:23.717]                     }
[11:03:23.717]                     muffleCondition(cond, pattern = "^muffle")
[11:03:23.717]                   }
[11:03:23.717]                 }
[11:03:23.717]             }
[11:03:23.717]         }))
[11:03:23.717]     }, error = function(ex) {
[11:03:23.717]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:23.717]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:23.717]                 ...future.rng), started = ...future.startTime, 
[11:03:23.717]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:23.717]             version = "1.8"), class = "FutureResult")
[11:03:23.717]     }, finally = {
[11:03:23.717]         if (!identical(...future.workdir, getwd())) 
[11:03:23.717]             setwd(...future.workdir)
[11:03:23.717]         {
[11:03:23.717]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:23.717]                 ...future.oldOptions$nwarnings <- NULL
[11:03:23.717]             }
[11:03:23.717]             base::options(...future.oldOptions)
[11:03:23.717]             if (.Platform$OS.type == "windows") {
[11:03:23.717]                 old_names <- names(...future.oldEnvVars)
[11:03:23.717]                 envs <- base::Sys.getenv()
[11:03:23.717]                 names <- names(envs)
[11:03:23.717]                 common <- intersect(names, old_names)
[11:03:23.717]                 added <- setdiff(names, old_names)
[11:03:23.717]                 removed <- setdiff(old_names, names)
[11:03:23.717]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:23.717]                   envs[common]]
[11:03:23.717]                 NAMES <- toupper(changed)
[11:03:23.717]                 args <- list()
[11:03:23.717]                 for (kk in seq_along(NAMES)) {
[11:03:23.717]                   name <- changed[[kk]]
[11:03:23.717]                   NAME <- NAMES[[kk]]
[11:03:23.717]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:23.717]                     next
[11:03:23.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:23.717]                 }
[11:03:23.717]                 NAMES <- toupper(added)
[11:03:23.717]                 for (kk in seq_along(NAMES)) {
[11:03:23.717]                   name <- added[[kk]]
[11:03:23.717]                   NAME <- NAMES[[kk]]
[11:03:23.717]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:23.717]                     next
[11:03:23.717]                   args[[name]] <- ""
[11:03:23.717]                 }
[11:03:23.717]                 NAMES <- toupper(removed)
[11:03:23.717]                 for (kk in seq_along(NAMES)) {
[11:03:23.717]                   name <- removed[[kk]]
[11:03:23.717]                   NAME <- NAMES[[kk]]
[11:03:23.717]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:23.717]                     next
[11:03:23.717]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:23.717]                 }
[11:03:23.717]                 if (length(args) > 0) 
[11:03:23.717]                   base::do.call(base::Sys.setenv, args = args)
[11:03:23.717]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:23.717]             }
[11:03:23.717]             else {
[11:03:23.717]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:23.717]             }
[11:03:23.717]             {
[11:03:23.717]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:23.717]                   0L) {
[11:03:23.717]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:23.717]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:23.717]                   base::options(opts)
[11:03:23.717]                 }
[11:03:23.717]                 {
[11:03:23.717]                   {
[11:03:23.717]                     base::options(mc.cores = ...future.mc.cores.old)
[11:03:23.717]                     NULL
[11:03:23.717]                   }
[11:03:23.717]                   options(future.plan = function (..., workers = 2L, 
[11:03:23.717]                     envir = parent.frame()) 
[11:03:23.717]                   strategy(..., workers = workers, envir = envir))
[11:03:23.717]                   if (is.na(NA_character_)) 
[11:03:23.717]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:23.717]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:03:23.717]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:23.717]                     .init = FALSE)
[11:03:23.717]                 }
[11:03:23.717]             }
[11:03:23.717]         }
[11:03:23.717]     })
[11:03:23.717]     if (TRUE) {
[11:03:23.717]         base::sink(type = "output", split = FALSE)
[11:03:23.717]         if (TRUE) {
[11:03:23.717]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:23.717]         }
[11:03:23.717]         else {
[11:03:23.717]             ...future.result["stdout"] <- base::list(NULL)
[11:03:23.717]         }
[11:03:23.717]         base::close(...future.stdout)
[11:03:23.717]         ...future.stdout <- NULL
[11:03:23.717]     }
[11:03:23.717]     ...future.result$conditions <- ...future.conditions
[11:03:23.717]     ...future.result$finished <- base::Sys.time()
[11:03:23.717]     ...future.result
[11:03:23.717] }
[11:03:23.768] MultisessionFuture started
[11:03:23.769] result() for ClusterFuture ...
[11:03:23.770] receiveMessageFromWorker() for ClusterFuture ...
[11:03:23.770] - Validating connection of MultisessionFuture
[11:03:23.799] - received message: FutureResult
[11:03:23.800] - Received FutureResult
[11:03:23.802] - Erased future from FutureRegistry
[11:03:23.802] result() for ClusterFuture ...
[11:03:23.802] - result already collected: FutureResult
[11:03:23.802] result() for ClusterFuture ... done
[11:03:23.803] receiveMessageFromWorker() for ClusterFuture ... done
[11:03:23.803] result() for ClusterFuture ... done
[11:03:23.803] result() for ClusterFuture ...
[11:03:23.803] - result already collected: FutureResult
[11:03:23.803] result() for ClusterFuture ... done
[11:03:23.803] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:23.803] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ -p 2 ... DONE")
- .onLoad() w/ -p 2 ... DONE
> 
> message("- .onLoad() w/ -p 0 ...")
- .onLoad() w/ -p 0 ...
> options(future.plan = NULL, future.cmdargs = c("-p", 0))
> .onLoad(pkgname, pkgname)
[11:03:23.804] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.804] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.804] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.805] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.806] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.807] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.808] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p 0
[11:03:23.808] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.808] Setting plan('default')
[11:03:23.808] plan(): Setting new future strategy stack:
[11:03:23.808] List of future strategies:
[11:03:23.808] 1. sequential:
[11:03:23.808]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.808]    - tweaked: FALSE
[11:03:23.808]    - call: NULL
[11:03:23.809] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[11:03:23.810] plan(): Setting new future strategy stack:
[11:03:23.810] List of future strategies:
[11:03:23.810] 1. sequential:
[11:03:23.810]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.810]    - tweaked: FALSE
[11:03:23.810]    - call: NULL
[11:03:23.810] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p 0 ... DONE")
- .onLoad() w/ -p 0 ... DONE
> 
> message("- .onLoad() w/ -p -1 ...")
- .onLoad() w/ -p -1 ...
> options(future.plan = NULL, future.cmdargs = c("-p", -1))
> .onLoad(pkgname, pkgname)
[11:03:23.811] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.811] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.811] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.812] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.813] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.814] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.815] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.816] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.816] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.816] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning: future: Ignoring invalid number of processes specified in command-line option: -p -1
[11:03:23.816] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.816] Setting plan('default')
[11:03:23.817] plan(): Setting new future strategy stack:
[11:03:23.817] List of future strategies:
[11:03:23.817] 1. sequential:
[11:03:23.817]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.817]    - tweaked: FALSE
[11:03:23.817]    - call: NULL
[11:03:23.817] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[11:03:23.818] plan(): Setting new future strategy stack:
[11:03:23.818] List of future strategies:
[11:03:23.818] 1. sequential:
[11:03:23.818]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.818]    - tweaked: FALSE
[11:03:23.818]    - call: NULL
[11:03:23.819] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p -1 ... DONE")
- .onLoad() w/ -p -1 ... DONE
> 
> message("- .onLoad() w/ -p foo ...")
- .onLoad() w/ -p foo ...
> options(future.plan = NULL, future.cmdargs = c("-p", "foo"))
> .onLoad(pkgname, pkgname)
[11:03:23.820] Future-specific environment variables:
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.820] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.820] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_PLAN’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.821] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.822] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.823] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
Warning in parseCmdArgs() : NAs introduced by coercion
Warning: future: Ignoring invalid number of processes specified in command-line option: -p foo
[11:03:23.824] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.824] Setting plan('default')
[11:03:23.824] plan(): Setting new future strategy stack:
[11:03:23.824] List of future strategies:
[11:03:23.824] 1. sequential:
[11:03:23.824]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.824]    - tweaked: FALSE
[11:03:23.824]    - call: NULL
[11:03:23.824] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
sequential:
- args: function (..., envir = parent.frame(), workers = "<NULL>")
- tweaked: FALSE
- call: NULL
> stopifnot(all(class(strategy) == class(strategy0)))
> plan("default")
[11:03:23.825] plan(): Setting new future strategy stack:
[11:03:23.825] List of future strategies:
[11:03:23.825] 1. sequential:
[11:03:23.825]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:23.825]    - tweaked: FALSE
[11:03:23.825]    - call: NULL
[11:03:23.825] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ -p foo ... DONE")
- .onLoad() w/ -p foo ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[11:03:23.826] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:23.826] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:23.826] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:23.826] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:23.826] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:23.827] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:23.827] R_FUTURE_PLAN=‘multisession’
[11:03:23.827] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[11:03:23.828] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:23.828] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:23.829] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:23.830] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:23.830] Option 'future.plan' = ‘multisession’
[11:03:23.830] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:23.831] Setting plan('default')
[11:03:23.831] plan(): Setting new future strategy stack:
[11:03:23.831] List of future strategies:
[11:03:23.831] 1. multisession:
[11:03:23.831]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:23.831]    - tweaked: FALSE
[11:03:23.831]    - call: plan("default", .init = FALSE)
[11:03:23.833] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[11:03:23.833] plan(): Setting new future strategy stack:
[11:03:23.833] List of future strategies:
[11:03:23.833] 1. multisession:
[11:03:23.833]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:23.833]    - tweaked: FALSE
[11:03:23.833]    - call: plan("default")
[11:03:23.834] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:23.834] multisession:
[11:03:23.834] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:23.834] - tweaked: FALSE
[11:03:23.834] - call: plan("default")
[11:03:23.836] getGlobalsAndPackages() ...
[11:03:23.836] Not searching for globals
[11:03:23.836] - globals: [0] <none>
[11:03:23.836] getGlobalsAndPackages() ... DONE
[11:03:24.113] Packages needed by the future expression (n = 0): <none>
[11:03:24.113] Packages needed by future strategies (n = 0): <none>
[11:03:24.113] {
[11:03:24.113]     {
[11:03:24.113]         {
[11:03:24.113]             ...future.startTime <- base::Sys.time()
[11:03:24.113]             {
[11:03:24.113]                 {
[11:03:24.113]                   {
[11:03:24.113]                     {
[11:03:24.113]                       base::local({
[11:03:24.113]                         has_future <- base::requireNamespace("future", 
[11:03:24.113]                           quietly = TRUE)
[11:03:24.113]                         if (has_future) {
[11:03:24.113]                           ns <- base::getNamespace("future")
[11:03:24.113]                           version <- ns[[".package"]][["version"]]
[11:03:24.113]                           if (is.null(version)) 
[11:03:24.113]                             version <- utils::packageVersion("future")
[11:03:24.113]                         }
[11:03:24.113]                         else {
[11:03:24.113]                           version <- NULL
[11:03:24.113]                         }
[11:03:24.113]                         if (!has_future || version < "1.8.0") {
[11:03:24.113]                           info <- base::c(r_version = base::gsub("R version ", 
[11:03:24.113]                             "", base::R.version$version.string), 
[11:03:24.113]                             platform = base::sprintf("%s (%s-bit)", 
[11:03:24.113]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:24.113]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:24.113]                               "release", "version")], collapse = " "), 
[11:03:24.113]                             hostname = base::Sys.info()[["nodename"]])
[11:03:24.113]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:03:24.113]                             info)
[11:03:24.113]                           info <- base::paste(info, collapse = "; ")
[11:03:24.113]                           if (!has_future) {
[11:03:24.113]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:24.113]                               info)
[11:03:24.113]                           }
[11:03:24.113]                           else {
[11:03:24.113]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:24.113]                               info, version)
[11:03:24.113]                           }
[11:03:24.113]                           base::stop(msg)
[11:03:24.113]                         }
[11:03:24.113]                       })
[11:03:24.113]                     }
[11:03:24.113]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:03:24.113]                     base::options(mc.cores = 1L)
[11:03:24.113]                   }
[11:03:24.113]                   ...future.strategy.old <- future::plan("list")
[11:03:24.113]                   options(future.plan = NULL)
[11:03:24.113]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.113]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:24.113]                 }
[11:03:24.113]                 ...future.workdir <- getwd()
[11:03:24.113]             }
[11:03:24.113]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:24.113]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:24.113]         }
[11:03:24.113]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:24.113]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:24.113]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:24.113]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:24.113]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:24.113]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:24.113]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:24.113]             base::names(...future.oldOptions))
[11:03:24.113]     }
[11:03:24.113]     if (FALSE) {
[11:03:24.113]     }
[11:03:24.113]     else {
[11:03:24.113]         if (TRUE) {
[11:03:24.113]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:24.113]                 open = "w")
[11:03:24.113]         }
[11:03:24.113]         else {
[11:03:24.113]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:24.113]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:24.113]         }
[11:03:24.113]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:24.113]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:24.113]             base::sink(type = "output", split = FALSE)
[11:03:24.113]             base::close(...future.stdout)
[11:03:24.113]         }, add = TRUE)
[11:03:24.113]     }
[11:03:24.113]     ...future.frame <- base::sys.nframe()
[11:03:24.113]     ...future.conditions <- base::list()
[11:03:24.113]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:24.113]     if (FALSE) {
[11:03:24.113]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:24.113]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:24.113]     }
[11:03:24.113]     ...future.result <- base::tryCatch({
[11:03:24.113]         base::withCallingHandlers({
[11:03:24.113]             ...future.value <- base::withVisible(base::local({
[11:03:24.113]                 ...future.makeSendCondition <- base::local({
[11:03:24.113]                   sendCondition <- NULL
[11:03:24.113]                   function(frame = 1L) {
[11:03:24.113]                     if (is.function(sendCondition)) 
[11:03:24.113]                       return(sendCondition)
[11:03:24.113]                     ns <- getNamespace("parallel")
[11:03:24.113]                     if (exists("sendData", mode = "function", 
[11:03:24.113]                       envir = ns)) {
[11:03:24.113]                       parallel_sendData <- get("sendData", mode = "function", 
[11:03:24.113]                         envir = ns)
[11:03:24.113]                       envir <- sys.frame(frame)
[11:03:24.113]                       master <- NULL
[11:03:24.113]                       while (!identical(envir, .GlobalEnv) && 
[11:03:24.113]                         !identical(envir, emptyenv())) {
[11:03:24.113]                         if (exists("master", mode = "list", envir = envir, 
[11:03:24.113]                           inherits = FALSE)) {
[11:03:24.113]                           master <- get("master", mode = "list", 
[11:03:24.113]                             envir = envir, inherits = FALSE)
[11:03:24.113]                           if (inherits(master, c("SOCKnode", 
[11:03:24.113]                             "SOCK0node"))) {
[11:03:24.113]                             sendCondition <<- function(cond) {
[11:03:24.113]                               data <- list(type = "VALUE", value = cond, 
[11:03:24.113]                                 success = TRUE)
[11:03:24.113]                               parallel_sendData(master, data)
[11:03:24.113]                             }
[11:03:24.113]                             return(sendCondition)
[11:03:24.113]                           }
[11:03:24.113]                         }
[11:03:24.113]                         frame <- frame + 1L
[11:03:24.113]                         envir <- sys.frame(frame)
[11:03:24.113]                       }
[11:03:24.113]                     }
[11:03:24.113]                     sendCondition <<- function(cond) NULL
[11:03:24.113]                   }
[11:03:24.113]                 })
[11:03:24.113]                 withCallingHandlers({
[11:03:24.113]                   NA
[11:03:24.113]                 }, immediateCondition = function(cond) {
[11:03:24.113]                   sendCondition <- ...future.makeSendCondition()
[11:03:24.113]                   sendCondition(cond)
[11:03:24.113]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.113]                   {
[11:03:24.113]                     inherits <- base::inherits
[11:03:24.113]                     invokeRestart <- base::invokeRestart
[11:03:24.113]                     is.null <- base::is.null
[11:03:24.113]                     muffled <- FALSE
[11:03:24.113]                     if (inherits(cond, "message")) {
[11:03:24.113]                       muffled <- grepl(pattern, "muffleMessage")
[11:03:24.113]                       if (muffled) 
[11:03:24.113]                         invokeRestart("muffleMessage")
[11:03:24.113]                     }
[11:03:24.113]                     else if (inherits(cond, "warning")) {
[11:03:24.113]                       muffled <- grepl(pattern, "muffleWarning")
[11:03:24.113]                       if (muffled) 
[11:03:24.113]                         invokeRestart("muffleWarning")
[11:03:24.113]                     }
[11:03:24.113]                     else if (inherits(cond, "condition")) {
[11:03:24.113]                       if (!is.null(pattern)) {
[11:03:24.113]                         computeRestarts <- base::computeRestarts
[11:03:24.113]                         grepl <- base::grepl
[11:03:24.113]                         restarts <- computeRestarts(cond)
[11:03:24.113]                         for (restart in restarts) {
[11:03:24.113]                           name <- restart$name
[11:03:24.113]                           if (is.null(name)) 
[11:03:24.113]                             next
[11:03:24.113]                           if (!grepl(pattern, name)) 
[11:03:24.113]                             next
[11:03:24.113]                           invokeRestart(restart)
[11:03:24.113]                           muffled <- TRUE
[11:03:24.113]                           break
[11:03:24.113]                         }
[11:03:24.113]                       }
[11:03:24.113]                     }
[11:03:24.113]                     invisible(muffled)
[11:03:24.113]                   }
[11:03:24.113]                   muffleCondition(cond)
[11:03:24.113]                 })
[11:03:24.113]             }))
[11:03:24.113]             future::FutureResult(value = ...future.value$value, 
[11:03:24.113]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.113]                   ...future.rng), globalenv = if (FALSE) 
[11:03:24.113]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:24.113]                     ...future.globalenv.names))
[11:03:24.113]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:24.113]         }, condition = base::local({
[11:03:24.113]             c <- base::c
[11:03:24.113]             inherits <- base::inherits
[11:03:24.113]             invokeRestart <- base::invokeRestart
[11:03:24.113]             length <- base::length
[11:03:24.113]             list <- base::list
[11:03:24.113]             seq.int <- base::seq.int
[11:03:24.113]             signalCondition <- base::signalCondition
[11:03:24.113]             sys.calls <- base::sys.calls
[11:03:24.113]             `[[` <- base::`[[`
[11:03:24.113]             `+` <- base::`+`
[11:03:24.113]             `<<-` <- base::`<<-`
[11:03:24.113]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:24.113]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:24.113]                   3L)]
[11:03:24.113]             }
[11:03:24.113]             function(cond) {
[11:03:24.113]                 is_error <- inherits(cond, "error")
[11:03:24.113]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:24.113]                   NULL)
[11:03:24.113]                 if (is_error) {
[11:03:24.113]                   sessionInformation <- function() {
[11:03:24.113]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:24.113]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:24.113]                       search = base::search(), system = base::Sys.info())
[11:03:24.113]                   }
[11:03:24.113]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.113]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:24.113]                     cond$call), session = sessionInformation(), 
[11:03:24.113]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:24.113]                   signalCondition(cond)
[11:03:24.113]                 }
[11:03:24.113]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:24.113]                 "immediateCondition"))) {
[11:03:24.113]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:24.113]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.113]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:24.113]                   if (TRUE && !signal) {
[11:03:24.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.113]                     {
[11:03:24.113]                       inherits <- base::inherits
[11:03:24.113]                       invokeRestart <- base::invokeRestart
[11:03:24.113]                       is.null <- base::is.null
[11:03:24.113]                       muffled <- FALSE
[11:03:24.113]                       if (inherits(cond, "message")) {
[11:03:24.113]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.113]                         if (muffled) 
[11:03:24.113]                           invokeRestart("muffleMessage")
[11:03:24.113]                       }
[11:03:24.113]                       else if (inherits(cond, "warning")) {
[11:03:24.113]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.113]                         if (muffled) 
[11:03:24.113]                           invokeRestart("muffleWarning")
[11:03:24.113]                       }
[11:03:24.113]                       else if (inherits(cond, "condition")) {
[11:03:24.113]                         if (!is.null(pattern)) {
[11:03:24.113]                           computeRestarts <- base::computeRestarts
[11:03:24.113]                           grepl <- base::grepl
[11:03:24.113]                           restarts <- computeRestarts(cond)
[11:03:24.113]                           for (restart in restarts) {
[11:03:24.113]                             name <- restart$name
[11:03:24.113]                             if (is.null(name)) 
[11:03:24.113]                               next
[11:03:24.113]                             if (!grepl(pattern, name)) 
[11:03:24.113]                               next
[11:03:24.113]                             invokeRestart(restart)
[11:03:24.113]                             muffled <- TRUE
[11:03:24.113]                             break
[11:03:24.113]                           }
[11:03:24.113]                         }
[11:03:24.113]                       }
[11:03:24.113]                       invisible(muffled)
[11:03:24.113]                     }
[11:03:24.113]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.113]                   }
[11:03:24.113]                 }
[11:03:24.113]                 else {
[11:03:24.113]                   if (TRUE) {
[11:03:24.113]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.113]                     {
[11:03:24.113]                       inherits <- base::inherits
[11:03:24.113]                       invokeRestart <- base::invokeRestart
[11:03:24.113]                       is.null <- base::is.null
[11:03:24.113]                       muffled <- FALSE
[11:03:24.113]                       if (inherits(cond, "message")) {
[11:03:24.113]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.113]                         if (muffled) 
[11:03:24.113]                           invokeRestart("muffleMessage")
[11:03:24.113]                       }
[11:03:24.113]                       else if (inherits(cond, "warning")) {
[11:03:24.113]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.113]                         if (muffled) 
[11:03:24.113]                           invokeRestart("muffleWarning")
[11:03:24.113]                       }
[11:03:24.113]                       else if (inherits(cond, "condition")) {
[11:03:24.113]                         if (!is.null(pattern)) {
[11:03:24.113]                           computeRestarts <- base::computeRestarts
[11:03:24.113]                           grepl <- base::grepl
[11:03:24.113]                           restarts <- computeRestarts(cond)
[11:03:24.113]                           for (restart in restarts) {
[11:03:24.113]                             name <- restart$name
[11:03:24.113]                             if (is.null(name)) 
[11:03:24.113]                               next
[11:03:24.113]                             if (!grepl(pattern, name)) 
[11:03:24.113]                               next
[11:03:24.113]                             invokeRestart(restart)
[11:03:24.113]                             muffled <- TRUE
[11:03:24.113]                             break
[11:03:24.113]                           }
[11:03:24.113]                         }
[11:03:24.113]                       }
[11:03:24.113]                       invisible(muffled)
[11:03:24.113]                     }
[11:03:24.113]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.113]                   }
[11:03:24.113]                 }
[11:03:24.113]             }
[11:03:24.113]         }))
[11:03:24.113]     }, error = function(ex) {
[11:03:24.113]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:24.113]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.113]                 ...future.rng), started = ...future.startTime, 
[11:03:24.113]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:24.113]             version = "1.8"), class = "FutureResult")
[11:03:24.113]     }, finally = {
[11:03:24.113]         if (!identical(...future.workdir, getwd())) 
[11:03:24.113]             setwd(...future.workdir)
[11:03:24.113]         {
[11:03:24.113]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:24.113]                 ...future.oldOptions$nwarnings <- NULL
[11:03:24.113]             }
[11:03:24.113]             base::options(...future.oldOptions)
[11:03:24.113]             if (.Platform$OS.type == "windows") {
[11:03:24.113]                 old_names <- names(...future.oldEnvVars)
[11:03:24.113]                 envs <- base::Sys.getenv()
[11:03:24.113]                 names <- names(envs)
[11:03:24.113]                 common <- intersect(names, old_names)
[11:03:24.113]                 added <- setdiff(names, old_names)
[11:03:24.113]                 removed <- setdiff(old_names, names)
[11:03:24.113]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:24.113]                   envs[common]]
[11:03:24.113]                 NAMES <- toupper(changed)
[11:03:24.113]                 args <- list()
[11:03:24.113]                 for (kk in seq_along(NAMES)) {
[11:03:24.113]                   name <- changed[[kk]]
[11:03:24.113]                   NAME <- NAMES[[kk]]
[11:03:24.113]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.113]                     next
[11:03:24.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.113]                 }
[11:03:24.113]                 NAMES <- toupper(added)
[11:03:24.113]                 for (kk in seq_along(NAMES)) {
[11:03:24.113]                   name <- added[[kk]]
[11:03:24.113]                   NAME <- NAMES[[kk]]
[11:03:24.113]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.113]                     next
[11:03:24.113]                   args[[name]] <- ""
[11:03:24.113]                 }
[11:03:24.113]                 NAMES <- toupper(removed)
[11:03:24.113]                 for (kk in seq_along(NAMES)) {
[11:03:24.113]                   name <- removed[[kk]]
[11:03:24.113]                   NAME <- NAMES[[kk]]
[11:03:24.113]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.113]                     next
[11:03:24.113]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.113]                 }
[11:03:24.113]                 if (length(args) > 0) 
[11:03:24.113]                   base::do.call(base::Sys.setenv, args = args)
[11:03:24.113]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:24.113]             }
[11:03:24.113]             else {
[11:03:24.113]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:24.113]             }
[11:03:24.113]             {
[11:03:24.113]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:24.113]                   0L) {
[11:03:24.113]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:24.113]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:24.113]                   base::options(opts)
[11:03:24.113]                 }
[11:03:24.113]                 {
[11:03:24.113]                   {
[11:03:24.113]                     base::options(mc.cores = ...future.mc.cores.old)
[11:03:24.113]                     NULL
[11:03:24.113]                   }
[11:03:24.113]                   options(future.plan = "multisession")
[11:03:24.113]                   if (is.na("multisession")) 
[11:03:24.113]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.113]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[11:03:24.113]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:24.113]                     .init = FALSE)
[11:03:24.113]                 }
[11:03:24.113]             }
[11:03:24.113]         }
[11:03:24.113]     })
[11:03:24.113]     if (TRUE) {
[11:03:24.113]         base::sink(type = "output", split = FALSE)
[11:03:24.113]         if (TRUE) {
[11:03:24.113]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:24.113]         }
[11:03:24.113]         else {
[11:03:24.113]             ...future.result["stdout"] <- base::list(NULL)
[11:03:24.113]         }
[11:03:24.113]         base::close(...future.stdout)
[11:03:24.113]         ...future.stdout <- NULL
[11:03:24.113]     }
[11:03:24.113]     ...future.result$conditions <- ...future.conditions
[11:03:24.113]     ...future.result$finished <- base::Sys.time()
[11:03:24.113]     ...future.result
[11:03:24.113] }
[11:03:24.179] MultisessionFuture started
[11:03:24.179] result() for ClusterFuture ...
[11:03:24.180] receiveMessageFromWorker() for ClusterFuture ...
[11:03:24.180] - Validating connection of MultisessionFuture
[11:03:24.214] - received message: FutureResult
[11:03:24.214] - Received FutureResult
[11:03:24.215] - Erased future from FutureRegistry
[11:03:24.215] result() for ClusterFuture ...
[11:03:24.215] - result already collected: FutureResult
[11:03:24.215] result() for ClusterFuture ... done
[11:03:24.215] receiveMessageFromWorker() for ClusterFuture ... done
[11:03:24.215] result() for ClusterFuture ... done
[11:03:24.215] result() for ClusterFuture ...
[11:03:24.215] - result already collected: FutureResult
[11:03:24.215] result() for ClusterFuture ... done
[11:03:24.216] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:24.217] plan(): nbrOfWorkers() = 2
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' ...")
- .onLoad() w/ future.plan = 'multisession' ...
> options(future.plan = NULL, future.plan = 'multisession', future.cmdargs = NULL)
> .onLoad(pkgname, pkgname)
[11:03:24.218] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:24.219] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:24.219] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:24.220] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:24.221] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:24.222] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:24.223] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:24.223] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:24.223] Option 'future.plan' = ‘multisession’
[11:03:24.223] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:24.223] Setting plan('default')
[11:03:24.223] plan(): Setting new future strategy stack:
[11:03:24.223] List of future strategies:
[11:03:24.223] 1. multisession:
[11:03:24.223]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.223]    - tweaked: FALSE
[11:03:24.223]    - call: plan("default", .init = FALSE)
[11:03:24.226] plan(): nbrOfWorkers() = 2
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[11:03:24.227] plan(): Setting new future strategy stack:
[11:03:24.227] List of future strategies:
[11:03:24.227] 1. multisession:
[11:03:24.227]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.227]    - tweaked: FALSE
[11:03:24.227]    - call: plan("default")
[11:03:24.228] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:24.228] multisession:
[11:03:24.228] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.228] - tweaked: FALSE
[11:03:24.228] - call: plan("default")
[11:03:24.231] getGlobalsAndPackages() ...
[11:03:24.231] Not searching for globals
[11:03:24.231] - globals: [0] <none>
[11:03:24.231] getGlobalsAndPackages() ... DONE
[11:03:24.492] Packages needed by the future expression (n = 0): <none>
[11:03:24.492] Packages needed by future strategies (n = 0): <none>
[11:03:24.493] {
[11:03:24.493]     {
[11:03:24.493]         {
[11:03:24.493]             ...future.startTime <- base::Sys.time()
[11:03:24.493]             {
[11:03:24.493]                 {
[11:03:24.493]                   {
[11:03:24.493]                     {
[11:03:24.493]                       base::local({
[11:03:24.493]                         has_future <- base::requireNamespace("future", 
[11:03:24.493]                           quietly = TRUE)
[11:03:24.493]                         if (has_future) {
[11:03:24.493]                           ns <- base::getNamespace("future")
[11:03:24.493]                           version <- ns[[".package"]][["version"]]
[11:03:24.493]                           if (is.null(version)) 
[11:03:24.493]                             version <- utils::packageVersion("future")
[11:03:24.493]                         }
[11:03:24.493]                         else {
[11:03:24.493]                           version <- NULL
[11:03:24.493]                         }
[11:03:24.493]                         if (!has_future || version < "1.8.0") {
[11:03:24.493]                           info <- base::c(r_version = base::gsub("R version ", 
[11:03:24.493]                             "", base::R.version$version.string), 
[11:03:24.493]                             platform = base::sprintf("%s (%s-bit)", 
[11:03:24.493]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:24.493]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:24.493]                               "release", "version")], collapse = " "), 
[11:03:24.493]                             hostname = base::Sys.info()[["nodename"]])
[11:03:24.493]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:03:24.493]                             info)
[11:03:24.493]                           info <- base::paste(info, collapse = "; ")
[11:03:24.493]                           if (!has_future) {
[11:03:24.493]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:24.493]                               info)
[11:03:24.493]                           }
[11:03:24.493]                           else {
[11:03:24.493]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:24.493]                               info, version)
[11:03:24.493]                           }
[11:03:24.493]                           base::stop(msg)
[11:03:24.493]                         }
[11:03:24.493]                       })
[11:03:24.493]                     }
[11:03:24.493]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:03:24.493]                     base::options(mc.cores = 1L)
[11:03:24.493]                   }
[11:03:24.493]                   ...future.strategy.old <- future::plan("list")
[11:03:24.493]                   options(future.plan = NULL)
[11:03:24.493]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.493]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:24.493]                 }
[11:03:24.493]                 ...future.workdir <- getwd()
[11:03:24.493]             }
[11:03:24.493]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:24.493]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:24.493]         }
[11:03:24.493]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:24.493]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:24.493]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:24.493]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:24.493]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:24.493]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:24.493]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:24.493]             base::names(...future.oldOptions))
[11:03:24.493]     }
[11:03:24.493]     if (FALSE) {
[11:03:24.493]     }
[11:03:24.493]     else {
[11:03:24.493]         if (TRUE) {
[11:03:24.493]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:24.493]                 open = "w")
[11:03:24.493]         }
[11:03:24.493]         else {
[11:03:24.493]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:24.493]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:24.493]         }
[11:03:24.493]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:24.493]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:24.493]             base::sink(type = "output", split = FALSE)
[11:03:24.493]             base::close(...future.stdout)
[11:03:24.493]         }, add = TRUE)
[11:03:24.493]     }
[11:03:24.493]     ...future.frame <- base::sys.nframe()
[11:03:24.493]     ...future.conditions <- base::list()
[11:03:24.493]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:24.493]     if (FALSE) {
[11:03:24.493]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:24.493]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:24.493]     }
[11:03:24.493]     ...future.result <- base::tryCatch({
[11:03:24.493]         base::withCallingHandlers({
[11:03:24.493]             ...future.value <- base::withVisible(base::local({
[11:03:24.493]                 ...future.makeSendCondition <- base::local({
[11:03:24.493]                   sendCondition <- NULL
[11:03:24.493]                   function(frame = 1L) {
[11:03:24.493]                     if (is.function(sendCondition)) 
[11:03:24.493]                       return(sendCondition)
[11:03:24.493]                     ns <- getNamespace("parallel")
[11:03:24.493]                     if (exists("sendData", mode = "function", 
[11:03:24.493]                       envir = ns)) {
[11:03:24.493]                       parallel_sendData <- get("sendData", mode = "function", 
[11:03:24.493]                         envir = ns)
[11:03:24.493]                       envir <- sys.frame(frame)
[11:03:24.493]                       master <- NULL
[11:03:24.493]                       while (!identical(envir, .GlobalEnv) && 
[11:03:24.493]                         !identical(envir, emptyenv())) {
[11:03:24.493]                         if (exists("master", mode = "list", envir = envir, 
[11:03:24.493]                           inherits = FALSE)) {
[11:03:24.493]                           master <- get("master", mode = "list", 
[11:03:24.493]                             envir = envir, inherits = FALSE)
[11:03:24.493]                           if (inherits(master, c("SOCKnode", 
[11:03:24.493]                             "SOCK0node"))) {
[11:03:24.493]                             sendCondition <<- function(cond) {
[11:03:24.493]                               data <- list(type = "VALUE", value = cond, 
[11:03:24.493]                                 success = TRUE)
[11:03:24.493]                               parallel_sendData(master, data)
[11:03:24.493]                             }
[11:03:24.493]                             return(sendCondition)
[11:03:24.493]                           }
[11:03:24.493]                         }
[11:03:24.493]                         frame <- frame + 1L
[11:03:24.493]                         envir <- sys.frame(frame)
[11:03:24.493]                       }
[11:03:24.493]                     }
[11:03:24.493]                     sendCondition <<- function(cond) NULL
[11:03:24.493]                   }
[11:03:24.493]                 })
[11:03:24.493]                 withCallingHandlers({
[11:03:24.493]                   NA
[11:03:24.493]                 }, immediateCondition = function(cond) {
[11:03:24.493]                   sendCondition <- ...future.makeSendCondition()
[11:03:24.493]                   sendCondition(cond)
[11:03:24.493]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.493]                   {
[11:03:24.493]                     inherits <- base::inherits
[11:03:24.493]                     invokeRestart <- base::invokeRestart
[11:03:24.493]                     is.null <- base::is.null
[11:03:24.493]                     muffled <- FALSE
[11:03:24.493]                     if (inherits(cond, "message")) {
[11:03:24.493]                       muffled <- grepl(pattern, "muffleMessage")
[11:03:24.493]                       if (muffled) 
[11:03:24.493]                         invokeRestart("muffleMessage")
[11:03:24.493]                     }
[11:03:24.493]                     else if (inherits(cond, "warning")) {
[11:03:24.493]                       muffled <- grepl(pattern, "muffleWarning")
[11:03:24.493]                       if (muffled) 
[11:03:24.493]                         invokeRestart("muffleWarning")
[11:03:24.493]                     }
[11:03:24.493]                     else if (inherits(cond, "condition")) {
[11:03:24.493]                       if (!is.null(pattern)) {
[11:03:24.493]                         computeRestarts <- base::computeRestarts
[11:03:24.493]                         grepl <- base::grepl
[11:03:24.493]                         restarts <- computeRestarts(cond)
[11:03:24.493]                         for (restart in restarts) {
[11:03:24.493]                           name <- restart$name
[11:03:24.493]                           if (is.null(name)) 
[11:03:24.493]                             next
[11:03:24.493]                           if (!grepl(pattern, name)) 
[11:03:24.493]                             next
[11:03:24.493]                           invokeRestart(restart)
[11:03:24.493]                           muffled <- TRUE
[11:03:24.493]                           break
[11:03:24.493]                         }
[11:03:24.493]                       }
[11:03:24.493]                     }
[11:03:24.493]                     invisible(muffled)
[11:03:24.493]                   }
[11:03:24.493]                   muffleCondition(cond)
[11:03:24.493]                 })
[11:03:24.493]             }))
[11:03:24.493]             future::FutureResult(value = ...future.value$value, 
[11:03:24.493]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.493]                   ...future.rng), globalenv = if (FALSE) 
[11:03:24.493]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:24.493]                     ...future.globalenv.names))
[11:03:24.493]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:24.493]         }, condition = base::local({
[11:03:24.493]             c <- base::c
[11:03:24.493]             inherits <- base::inherits
[11:03:24.493]             invokeRestart <- base::invokeRestart
[11:03:24.493]             length <- base::length
[11:03:24.493]             list <- base::list
[11:03:24.493]             seq.int <- base::seq.int
[11:03:24.493]             signalCondition <- base::signalCondition
[11:03:24.493]             sys.calls <- base::sys.calls
[11:03:24.493]             `[[` <- base::`[[`
[11:03:24.493]             `+` <- base::`+`
[11:03:24.493]             `<<-` <- base::`<<-`
[11:03:24.493]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:24.493]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:24.493]                   3L)]
[11:03:24.493]             }
[11:03:24.493]             function(cond) {
[11:03:24.493]                 is_error <- inherits(cond, "error")
[11:03:24.493]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:24.493]                   NULL)
[11:03:24.493]                 if (is_error) {
[11:03:24.493]                   sessionInformation <- function() {
[11:03:24.493]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:24.493]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:24.493]                       search = base::search(), system = base::Sys.info())
[11:03:24.493]                   }
[11:03:24.493]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.493]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:24.493]                     cond$call), session = sessionInformation(), 
[11:03:24.493]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:24.493]                   signalCondition(cond)
[11:03:24.493]                 }
[11:03:24.493]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:24.493]                 "immediateCondition"))) {
[11:03:24.493]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:24.493]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.493]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:24.493]                   if (TRUE && !signal) {
[11:03:24.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.493]                     {
[11:03:24.493]                       inherits <- base::inherits
[11:03:24.493]                       invokeRestart <- base::invokeRestart
[11:03:24.493]                       is.null <- base::is.null
[11:03:24.493]                       muffled <- FALSE
[11:03:24.493]                       if (inherits(cond, "message")) {
[11:03:24.493]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.493]                         if (muffled) 
[11:03:24.493]                           invokeRestart("muffleMessage")
[11:03:24.493]                       }
[11:03:24.493]                       else if (inherits(cond, "warning")) {
[11:03:24.493]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.493]                         if (muffled) 
[11:03:24.493]                           invokeRestart("muffleWarning")
[11:03:24.493]                       }
[11:03:24.493]                       else if (inherits(cond, "condition")) {
[11:03:24.493]                         if (!is.null(pattern)) {
[11:03:24.493]                           computeRestarts <- base::computeRestarts
[11:03:24.493]                           grepl <- base::grepl
[11:03:24.493]                           restarts <- computeRestarts(cond)
[11:03:24.493]                           for (restart in restarts) {
[11:03:24.493]                             name <- restart$name
[11:03:24.493]                             if (is.null(name)) 
[11:03:24.493]                               next
[11:03:24.493]                             if (!grepl(pattern, name)) 
[11:03:24.493]                               next
[11:03:24.493]                             invokeRestart(restart)
[11:03:24.493]                             muffled <- TRUE
[11:03:24.493]                             break
[11:03:24.493]                           }
[11:03:24.493]                         }
[11:03:24.493]                       }
[11:03:24.493]                       invisible(muffled)
[11:03:24.493]                     }
[11:03:24.493]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.493]                   }
[11:03:24.493]                 }
[11:03:24.493]                 else {
[11:03:24.493]                   if (TRUE) {
[11:03:24.493]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.493]                     {
[11:03:24.493]                       inherits <- base::inherits
[11:03:24.493]                       invokeRestart <- base::invokeRestart
[11:03:24.493]                       is.null <- base::is.null
[11:03:24.493]                       muffled <- FALSE
[11:03:24.493]                       if (inherits(cond, "message")) {
[11:03:24.493]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.493]                         if (muffled) 
[11:03:24.493]                           invokeRestart("muffleMessage")
[11:03:24.493]                       }
[11:03:24.493]                       else if (inherits(cond, "warning")) {
[11:03:24.493]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.493]                         if (muffled) 
[11:03:24.493]                           invokeRestart("muffleWarning")
[11:03:24.493]                       }
[11:03:24.493]                       else if (inherits(cond, "condition")) {
[11:03:24.493]                         if (!is.null(pattern)) {
[11:03:24.493]                           computeRestarts <- base::computeRestarts
[11:03:24.493]                           grepl <- base::grepl
[11:03:24.493]                           restarts <- computeRestarts(cond)
[11:03:24.493]                           for (restart in restarts) {
[11:03:24.493]                             name <- restart$name
[11:03:24.493]                             if (is.null(name)) 
[11:03:24.493]                               next
[11:03:24.493]                             if (!grepl(pattern, name)) 
[11:03:24.493]                               next
[11:03:24.493]                             invokeRestart(restart)
[11:03:24.493]                             muffled <- TRUE
[11:03:24.493]                             break
[11:03:24.493]                           }
[11:03:24.493]                         }
[11:03:24.493]                       }
[11:03:24.493]                       invisible(muffled)
[11:03:24.493]                     }
[11:03:24.493]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.493]                   }
[11:03:24.493]                 }
[11:03:24.493]             }
[11:03:24.493]         }))
[11:03:24.493]     }, error = function(ex) {
[11:03:24.493]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:24.493]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.493]                 ...future.rng), started = ...future.startTime, 
[11:03:24.493]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:24.493]             version = "1.8"), class = "FutureResult")
[11:03:24.493]     }, finally = {
[11:03:24.493]         if (!identical(...future.workdir, getwd())) 
[11:03:24.493]             setwd(...future.workdir)
[11:03:24.493]         {
[11:03:24.493]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:24.493]                 ...future.oldOptions$nwarnings <- NULL
[11:03:24.493]             }
[11:03:24.493]             base::options(...future.oldOptions)
[11:03:24.493]             if (.Platform$OS.type == "windows") {
[11:03:24.493]                 old_names <- names(...future.oldEnvVars)
[11:03:24.493]                 envs <- base::Sys.getenv()
[11:03:24.493]                 names <- names(envs)
[11:03:24.493]                 common <- intersect(names, old_names)
[11:03:24.493]                 added <- setdiff(names, old_names)
[11:03:24.493]                 removed <- setdiff(old_names, names)
[11:03:24.493]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:24.493]                   envs[common]]
[11:03:24.493]                 NAMES <- toupper(changed)
[11:03:24.493]                 args <- list()
[11:03:24.493]                 for (kk in seq_along(NAMES)) {
[11:03:24.493]                   name <- changed[[kk]]
[11:03:24.493]                   NAME <- NAMES[[kk]]
[11:03:24.493]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.493]                     next
[11:03:24.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.493]                 }
[11:03:24.493]                 NAMES <- toupper(added)
[11:03:24.493]                 for (kk in seq_along(NAMES)) {
[11:03:24.493]                   name <- added[[kk]]
[11:03:24.493]                   NAME <- NAMES[[kk]]
[11:03:24.493]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.493]                     next
[11:03:24.493]                   args[[name]] <- ""
[11:03:24.493]                 }
[11:03:24.493]                 NAMES <- toupper(removed)
[11:03:24.493]                 for (kk in seq_along(NAMES)) {
[11:03:24.493]                   name <- removed[[kk]]
[11:03:24.493]                   NAME <- NAMES[[kk]]
[11:03:24.493]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.493]                     next
[11:03:24.493]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.493]                 }
[11:03:24.493]                 if (length(args) > 0) 
[11:03:24.493]                   base::do.call(base::Sys.setenv, args = args)
[11:03:24.493]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:24.493]             }
[11:03:24.493]             else {
[11:03:24.493]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:24.493]             }
[11:03:24.493]             {
[11:03:24.493]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:24.493]                   0L) {
[11:03:24.493]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:24.493]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:24.493]                   base::options(opts)
[11:03:24.493]                 }
[11:03:24.493]                 {
[11:03:24.493]                   {
[11:03:24.493]                     base::options(mc.cores = ...future.mc.cores.old)
[11:03:24.493]                     NULL
[11:03:24.493]                   }
[11:03:24.493]                   options(future.plan = "multisession")
[11:03:24.493]                   if (is.na("")) 
[11:03:24.493]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.493]                   else Sys.setenv(R_FUTURE_PLAN = "")
[11:03:24.493]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:24.493]                     .init = FALSE)
[11:03:24.493]                 }
[11:03:24.493]             }
[11:03:24.493]         }
[11:03:24.493]     })
[11:03:24.493]     if (TRUE) {
[11:03:24.493]         base::sink(type = "output", split = FALSE)
[11:03:24.493]         if (TRUE) {
[11:03:24.493]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:24.493]         }
[11:03:24.493]         else {
[11:03:24.493]             ...future.result["stdout"] <- base::list(NULL)
[11:03:24.493]         }
[11:03:24.493]         base::close(...future.stdout)
[11:03:24.493]         ...future.stdout <- NULL
[11:03:24.493]     }
[11:03:24.493]     ...future.result$conditions <- ...future.conditions
[11:03:24.493]     ...future.result$finished <- base::Sys.time()
[11:03:24.493]     ...future.result
[11:03:24.493] }
[11:03:24.545] MultisessionFuture started
[11:03:24.545] result() for ClusterFuture ...
[11:03:24.545] receiveMessageFromWorker() for ClusterFuture ...
[11:03:24.545] - Validating connection of MultisessionFuture
[11:03:24.576] - received message: FutureResult
[11:03:24.576] - Received FutureResult
[11:03:24.576] - Erased future from FutureRegistry
[11:03:24.576] result() for ClusterFuture ...
[11:03:24.577] - result already collected: FutureResult
[11:03:24.577] result() for ClusterFuture ... done
[11:03:24.577] receiveMessageFromWorker() for ClusterFuture ... done
[11:03:24.577] result() for ClusterFuture ... done
[11:03:24.577] result() for ClusterFuture ...
[11:03:24.577] - result already collected: FutureResult
[11:03:24.577] result() for ClusterFuture ... done
[11:03:24.577] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:24.579] plan(): nbrOfWorkers() = 2
> message("- .onLoad() w/ future.plan = 'multisession' ... DONE")
- .onLoad() w/ future.plan = 'multisession' ... DONE
> 
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ...
> Sys.setenv(R_FUTURE_PLAN = "multisession")
> options(future.plan = NULL, future.cmdargs = c("-p", 1))
> .onLoad(pkgname, pkgname)
[11:03:24.580] Future-specific environment variables:
- R_FUTURE_PLAN=‘multisession’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:24.580] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:24.580] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:24.581] R_FUTURE_PLAN=‘multisession’
[11:03:24.581] => options(“future.plan” = ‘multisession’) [n=1, mode=character]
[11:03:24.581] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:24.581] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:24.582] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:24.583] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:24.583] Option 'future.plan' = ‘multisession’
[11:03:24.583] R command-line argument: -p 1
[11:03:24.584]  => 'future.plan' already set.
[11:03:24.584] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:24.584] Setting plan('default')
[11:03:24.584] plan(): Setting new future strategy stack:
[11:03:24.584] List of future strategies:
[11:03:24.584] 1. multisession:
[11:03:24.584]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.584]    - tweaked: FALSE
[11:03:24.584]    - call: plan("default", .init = FALSE)
[11:03:24.587] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[11:03:24.587] plan(): Setting new future strategy stack:
[11:03:24.587] List of future strategies:
[11:03:24.587] 1. multisession:
[11:03:24.587]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.587]    - tweaked: FALSE
[11:03:24.587]    - call: plan("default")
[11:03:24.588] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:24.588] multisession:
[11:03:24.588] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.588] - tweaked: FALSE
[11:03:24.588] - call: plan("default")
[11:03:24.590] getGlobalsAndPackages() ...
[11:03:24.591] Not searching for globals
[11:03:24.591] - globals: [0] <none>
[11:03:24.591] getGlobalsAndPackages() ... DONE
[11:03:24.592] Packages needed by the future expression (n = 0): <none>
[11:03:24.592] Packages needed by future strategies (n = 0): <none>
[11:03:24.593] {
[11:03:24.593]     {
[11:03:24.593]         {
[11:03:24.593]             ...future.startTime <- base::Sys.time()
[11:03:24.593]             {
[11:03:24.593]                 {
[11:03:24.593]                   {
[11:03:24.593]                     base::local({
[11:03:24.593]                       has_future <- base::requireNamespace("future", 
[11:03:24.593]                         quietly = TRUE)
[11:03:24.593]                       if (has_future) {
[11:03:24.593]                         ns <- base::getNamespace("future")
[11:03:24.593]                         version <- ns[[".package"]][["version"]]
[11:03:24.593]                         if (is.null(version)) 
[11:03:24.593]                           version <- utils::packageVersion("future")
[11:03:24.593]                       }
[11:03:24.593]                       else {
[11:03:24.593]                         version <- NULL
[11:03:24.593]                       }
[11:03:24.593]                       if (!has_future || version < "1.8.0") {
[11:03:24.593]                         info <- base::c(r_version = base::gsub("R version ", 
[11:03:24.593]                           "", base::R.version$version.string), 
[11:03:24.593]                           platform = base::sprintf("%s (%s-bit)", 
[11:03:24.593]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:24.593]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:24.593]                             "release", "version")], collapse = " "), 
[11:03:24.593]                           hostname = base::Sys.info()[["nodename"]])
[11:03:24.593]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:03:24.593]                           info)
[11:03:24.593]                         info <- base::paste(info, collapse = "; ")
[11:03:24.593]                         if (!has_future) {
[11:03:24.593]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:24.593]                             info)
[11:03:24.593]                         }
[11:03:24.593]                         else {
[11:03:24.593]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:24.593]                             info, version)
[11:03:24.593]                         }
[11:03:24.593]                         base::stop(msg)
[11:03:24.593]                       }
[11:03:24.593]                     })
[11:03:24.593]                   }
[11:03:24.593]                   ...future.strategy.old <- future::plan("list")
[11:03:24.593]                   options(future.plan = NULL)
[11:03:24.593]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.593]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:24.593]                 }
[11:03:24.593]                 ...future.workdir <- getwd()
[11:03:24.593]             }
[11:03:24.593]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:24.593]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:24.593]         }
[11:03:24.593]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:24.593]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:24.593]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:24.593]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:24.593]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:24.593]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:24.593]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:24.593]             base::names(...future.oldOptions))
[11:03:24.593]     }
[11:03:24.593]     if (FALSE) {
[11:03:24.593]     }
[11:03:24.593]     else {
[11:03:24.593]         if (TRUE) {
[11:03:24.593]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:24.593]                 open = "w")
[11:03:24.593]         }
[11:03:24.593]         else {
[11:03:24.593]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:24.593]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:24.593]         }
[11:03:24.593]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:24.593]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:24.593]             base::sink(type = "output", split = FALSE)
[11:03:24.593]             base::close(...future.stdout)
[11:03:24.593]         }, add = TRUE)
[11:03:24.593]     }
[11:03:24.593]     ...future.frame <- base::sys.nframe()
[11:03:24.593]     ...future.conditions <- base::list()
[11:03:24.593]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:24.593]     if (FALSE) {
[11:03:24.593]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:24.593]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:24.593]     }
[11:03:24.593]     ...future.result <- base::tryCatch({
[11:03:24.593]         base::withCallingHandlers({
[11:03:24.593]             ...future.value <- base::withVisible(base::local(NA))
[11:03:24.593]             future::FutureResult(value = ...future.value$value, 
[11:03:24.593]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.593]                   ...future.rng), globalenv = if (FALSE) 
[11:03:24.593]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:24.593]                     ...future.globalenv.names))
[11:03:24.593]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:24.593]         }, condition = base::local({
[11:03:24.593]             c <- base::c
[11:03:24.593]             inherits <- base::inherits
[11:03:24.593]             invokeRestart <- base::invokeRestart
[11:03:24.593]             length <- base::length
[11:03:24.593]             list <- base::list
[11:03:24.593]             seq.int <- base::seq.int
[11:03:24.593]             signalCondition <- base::signalCondition
[11:03:24.593]             sys.calls <- base::sys.calls
[11:03:24.593]             `[[` <- base::`[[`
[11:03:24.593]             `+` <- base::`+`
[11:03:24.593]             `<<-` <- base::`<<-`
[11:03:24.593]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:24.593]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:24.593]                   3L)]
[11:03:24.593]             }
[11:03:24.593]             function(cond) {
[11:03:24.593]                 is_error <- inherits(cond, "error")
[11:03:24.593]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:24.593]                   NULL)
[11:03:24.593]                 if (is_error) {
[11:03:24.593]                   sessionInformation <- function() {
[11:03:24.593]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:24.593]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:24.593]                       search = base::search(), system = base::Sys.info())
[11:03:24.593]                   }
[11:03:24.593]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.593]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:24.593]                     cond$call), session = sessionInformation(), 
[11:03:24.593]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:24.593]                   signalCondition(cond)
[11:03:24.593]                 }
[11:03:24.593]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:24.593]                 "immediateCondition"))) {
[11:03:24.593]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:24.593]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.593]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:24.593]                   if (TRUE && !signal) {
[11:03:24.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.593]                     {
[11:03:24.593]                       inherits <- base::inherits
[11:03:24.593]                       invokeRestart <- base::invokeRestart
[11:03:24.593]                       is.null <- base::is.null
[11:03:24.593]                       muffled <- FALSE
[11:03:24.593]                       if (inherits(cond, "message")) {
[11:03:24.593]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.593]                         if (muffled) 
[11:03:24.593]                           invokeRestart("muffleMessage")
[11:03:24.593]                       }
[11:03:24.593]                       else if (inherits(cond, "warning")) {
[11:03:24.593]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.593]                         if (muffled) 
[11:03:24.593]                           invokeRestart("muffleWarning")
[11:03:24.593]                       }
[11:03:24.593]                       else if (inherits(cond, "condition")) {
[11:03:24.593]                         if (!is.null(pattern)) {
[11:03:24.593]                           computeRestarts <- base::computeRestarts
[11:03:24.593]                           grepl <- base::grepl
[11:03:24.593]                           restarts <- computeRestarts(cond)
[11:03:24.593]                           for (restart in restarts) {
[11:03:24.593]                             name <- restart$name
[11:03:24.593]                             if (is.null(name)) 
[11:03:24.593]                               next
[11:03:24.593]                             if (!grepl(pattern, name)) 
[11:03:24.593]                               next
[11:03:24.593]                             invokeRestart(restart)
[11:03:24.593]                             muffled <- TRUE
[11:03:24.593]                             break
[11:03:24.593]                           }
[11:03:24.593]                         }
[11:03:24.593]                       }
[11:03:24.593]                       invisible(muffled)
[11:03:24.593]                     }
[11:03:24.593]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.593]                   }
[11:03:24.593]                 }
[11:03:24.593]                 else {
[11:03:24.593]                   if (TRUE) {
[11:03:24.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.593]                     {
[11:03:24.593]                       inherits <- base::inherits
[11:03:24.593]                       invokeRestart <- base::invokeRestart
[11:03:24.593]                       is.null <- base::is.null
[11:03:24.593]                       muffled <- FALSE
[11:03:24.593]                       if (inherits(cond, "message")) {
[11:03:24.593]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.593]                         if (muffled) 
[11:03:24.593]                           invokeRestart("muffleMessage")
[11:03:24.593]                       }
[11:03:24.593]                       else if (inherits(cond, "warning")) {
[11:03:24.593]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.593]                         if (muffled) 
[11:03:24.593]                           invokeRestart("muffleWarning")
[11:03:24.593]                       }
[11:03:24.593]                       else if (inherits(cond, "condition")) {
[11:03:24.593]                         if (!is.null(pattern)) {
[11:03:24.593]                           computeRestarts <- base::computeRestarts
[11:03:24.593]                           grepl <- base::grepl
[11:03:24.593]                           restarts <- computeRestarts(cond)
[11:03:24.593]                           for (restart in restarts) {
[11:03:24.593]                             name <- restart$name
[11:03:24.593]                             if (is.null(name)) 
[11:03:24.593]                               next
[11:03:24.593]                             if (!grepl(pattern, name)) 
[11:03:24.593]                               next
[11:03:24.593]                             invokeRestart(restart)
[11:03:24.593]                             muffled <- TRUE
[11:03:24.593]                             break
[11:03:24.593]                           }
[11:03:24.593]                         }
[11:03:24.593]                       }
[11:03:24.593]                       invisible(muffled)
[11:03:24.593]                     }
[11:03:24.593]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.593]                   }
[11:03:24.593]                 }
[11:03:24.593]             }
[11:03:24.593]         }))
[11:03:24.593]     }, error = function(ex) {
[11:03:24.593]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:24.593]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.593]                 ...future.rng), started = ...future.startTime, 
[11:03:24.593]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:24.593]             version = "1.8"), class = "FutureResult")
[11:03:24.593]     }, finally = {
[11:03:24.593]         if (!identical(...future.workdir, getwd())) 
[11:03:24.593]             setwd(...future.workdir)
[11:03:24.593]         {
[11:03:24.593]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:24.593]                 ...future.oldOptions$nwarnings <- NULL
[11:03:24.593]             }
[11:03:24.593]             base::options(...future.oldOptions)
[11:03:24.593]             if (.Platform$OS.type == "windows") {
[11:03:24.593]                 old_names <- names(...future.oldEnvVars)
[11:03:24.593]                 envs <- base::Sys.getenv()
[11:03:24.593]                 names <- names(envs)
[11:03:24.593]                 common <- intersect(names, old_names)
[11:03:24.593]                 added <- setdiff(names, old_names)
[11:03:24.593]                 removed <- setdiff(old_names, names)
[11:03:24.593]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:24.593]                   envs[common]]
[11:03:24.593]                 NAMES <- toupper(changed)
[11:03:24.593]                 args <- list()
[11:03:24.593]                 for (kk in seq_along(NAMES)) {
[11:03:24.593]                   name <- changed[[kk]]
[11:03:24.593]                   NAME <- NAMES[[kk]]
[11:03:24.593]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.593]                     next
[11:03:24.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.593]                 }
[11:03:24.593]                 NAMES <- toupper(added)
[11:03:24.593]                 for (kk in seq_along(NAMES)) {
[11:03:24.593]                   name <- added[[kk]]
[11:03:24.593]                   NAME <- NAMES[[kk]]
[11:03:24.593]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.593]                     next
[11:03:24.593]                   args[[name]] <- ""
[11:03:24.593]                 }
[11:03:24.593]                 NAMES <- toupper(removed)
[11:03:24.593]                 for (kk in seq_along(NAMES)) {
[11:03:24.593]                   name <- removed[[kk]]
[11:03:24.593]                   NAME <- NAMES[[kk]]
[11:03:24.593]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.593]                     next
[11:03:24.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.593]                 }
[11:03:24.593]                 if (length(args) > 0) 
[11:03:24.593]                   base::do.call(base::Sys.setenv, args = args)
[11:03:24.593]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:24.593]             }
[11:03:24.593]             else {
[11:03:24.593]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:24.593]             }
[11:03:24.593]             {
[11:03:24.593]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:24.593]                   0L) {
[11:03:24.593]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:24.593]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:24.593]                   base::options(opts)
[11:03:24.593]                 }
[11:03:24.593]                 {
[11:03:24.593]                   {
[11:03:24.593]                     NULL
[11:03:24.593]                     RNGkind("Mersenne-Twister")
[11:03:24.593]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:03:24.593]                       inherits = FALSE)
[11:03:24.593]                   }
[11:03:24.593]                   options(future.plan = "multisession")
[11:03:24.593]                   if (is.na("multisession")) 
[11:03:24.593]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.593]                   else Sys.setenv(R_FUTURE_PLAN = "multisession")
[11:03:24.593]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:24.593]                     .init = FALSE)
[11:03:24.593]                 }
[11:03:24.593]             }
[11:03:24.593]         }
[11:03:24.593]     })
[11:03:24.593]     if (TRUE) {
[11:03:24.593]         base::sink(type = "output", split = FALSE)
[11:03:24.593]         if (TRUE) {
[11:03:24.593]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:24.593]         }
[11:03:24.593]         else {
[11:03:24.593]             ...future.result["stdout"] <- base::list(NULL)
[11:03:24.593]         }
[11:03:24.593]         base::close(...future.stdout)
[11:03:24.593]         ...future.stdout <- NULL
[11:03:24.593]     }
[11:03:24.593]     ...future.result$conditions <- ...future.conditions
[11:03:24.593]     ...future.result$finished <- base::Sys.time()
[11:03:24.593]     ...future.result
[11:03:24.593] }
[11:03:24.596] plan(): Setting new future strategy stack:
[11:03:24.596] List of future strategies:
[11:03:24.596] 1. sequential:
[11:03:24.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:24.596]    - tweaked: FALSE
[11:03:24.596]    - call: NULL
[11:03:24.597] plan(): nbrOfWorkers() = 1
[11:03:24.599] plan(): Setting new future strategy stack:
[11:03:24.599] List of future strategies:
[11:03:24.599] 1. multisession:
[11:03:24.599]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.599]    - tweaked: FALSE
[11:03:24.599]    - call: plan("default")
[11:03:24.601] plan(): nbrOfWorkers() = 1
[11:03:24.601] SequentialFuture started (and completed)
[11:03:24.601] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:24.603] plan(): nbrOfWorkers() = 1
> Sys.setenv(R_FUTURE_PLAN = "")
> message("- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ R_FUTURE_PLAN = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = 'multisession', future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[11:03:24.604] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:24.604] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:24.604] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:24.605] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:24.606] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:24.607] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:24.607] Option 'future.plan' = ‘multisession’
[11:03:24.607] R command-line argument: -p 1
[11:03:24.607]  => 'future.plan' already set.
[11:03:24.608] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:24.608] Setting plan('default')
[11:03:24.608] plan(): Setting new future strategy stack:
[11:03:24.608] List of future strategies:
[11:03:24.608] 1. multisession:
[11:03:24.608]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.608]    - tweaked: FALSE
[11:03:24.608]    - call: plan("default", .init = FALSE)
[11:03:24.609] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: plan("default", .init = FALSE)
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[11:03:24.610] plan(): Setting new future strategy stack:
[11:03:24.610] List of future strategies:
[11:03:24.610] 1. multisession:
[11:03:24.610]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.610]    - tweaked: FALSE
[11:03:24.610]    - call: plan("default")
[11:03:24.610] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:24.610] multisession:
[11:03:24.610] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.610] - tweaked: FALSE
[11:03:24.610] - call: plan("default")
[11:03:24.612] getGlobalsAndPackages() ...
[11:03:24.612] Not searching for globals
[11:03:24.612] - globals: [0] <none>
[11:03:24.612] getGlobalsAndPackages() ... DONE
[11:03:24.612] Packages needed by the future expression (n = 0): <none>
[11:03:24.612] Packages needed by future strategies (n = 0): <none>
[11:03:24.613] {
[11:03:24.613]     {
[11:03:24.613]         {
[11:03:24.613]             ...future.startTime <- base::Sys.time()
[11:03:24.613]             {
[11:03:24.613]                 {
[11:03:24.613]                   {
[11:03:24.613]                     base::local({
[11:03:24.613]                       has_future <- base::requireNamespace("future", 
[11:03:24.613]                         quietly = TRUE)
[11:03:24.613]                       if (has_future) {
[11:03:24.613]                         ns <- base::getNamespace("future")
[11:03:24.613]                         version <- ns[[".package"]][["version"]]
[11:03:24.613]                         if (is.null(version)) 
[11:03:24.613]                           version <- utils::packageVersion("future")
[11:03:24.613]                       }
[11:03:24.613]                       else {
[11:03:24.613]                         version <- NULL
[11:03:24.613]                       }
[11:03:24.613]                       if (!has_future || version < "1.8.0") {
[11:03:24.613]                         info <- base::c(r_version = base::gsub("R version ", 
[11:03:24.613]                           "", base::R.version$version.string), 
[11:03:24.613]                           platform = base::sprintf("%s (%s-bit)", 
[11:03:24.613]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:24.613]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:24.613]                             "release", "version")], collapse = " "), 
[11:03:24.613]                           hostname = base::Sys.info()[["nodename"]])
[11:03:24.613]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:03:24.613]                           info)
[11:03:24.613]                         info <- base::paste(info, collapse = "; ")
[11:03:24.613]                         if (!has_future) {
[11:03:24.613]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:24.613]                             info)
[11:03:24.613]                         }
[11:03:24.613]                         else {
[11:03:24.613]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:24.613]                             info, version)
[11:03:24.613]                         }
[11:03:24.613]                         base::stop(msg)
[11:03:24.613]                       }
[11:03:24.613]                     })
[11:03:24.613]                   }
[11:03:24.613]                   ...future.strategy.old <- future::plan("list")
[11:03:24.613]                   options(future.plan = NULL)
[11:03:24.613]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.613]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:24.613]                 }
[11:03:24.613]                 ...future.workdir <- getwd()
[11:03:24.613]             }
[11:03:24.613]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:24.613]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:24.613]         }
[11:03:24.613]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:24.613]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:24.613]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:24.613]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:24.613]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:24.613]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:24.613]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:24.613]             base::names(...future.oldOptions))
[11:03:24.613]     }
[11:03:24.613]     if (FALSE) {
[11:03:24.613]     }
[11:03:24.613]     else {
[11:03:24.613]         if (TRUE) {
[11:03:24.613]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:24.613]                 open = "w")
[11:03:24.613]         }
[11:03:24.613]         else {
[11:03:24.613]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:24.613]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:24.613]         }
[11:03:24.613]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:24.613]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:24.613]             base::sink(type = "output", split = FALSE)
[11:03:24.613]             base::close(...future.stdout)
[11:03:24.613]         }, add = TRUE)
[11:03:24.613]     }
[11:03:24.613]     ...future.frame <- base::sys.nframe()
[11:03:24.613]     ...future.conditions <- base::list()
[11:03:24.613]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:24.613]     if (FALSE) {
[11:03:24.613]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:24.613]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:24.613]     }
[11:03:24.613]     ...future.result <- base::tryCatch({
[11:03:24.613]         base::withCallingHandlers({
[11:03:24.613]             ...future.value <- base::withVisible(base::local(NA))
[11:03:24.613]             future::FutureResult(value = ...future.value$value, 
[11:03:24.613]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.613]                   ...future.rng), globalenv = if (FALSE) 
[11:03:24.613]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:24.613]                     ...future.globalenv.names))
[11:03:24.613]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:24.613]         }, condition = base::local({
[11:03:24.613]             c <- base::c
[11:03:24.613]             inherits <- base::inherits
[11:03:24.613]             invokeRestart <- base::invokeRestart
[11:03:24.613]             length <- base::length
[11:03:24.613]             list <- base::list
[11:03:24.613]             seq.int <- base::seq.int
[11:03:24.613]             signalCondition <- base::signalCondition
[11:03:24.613]             sys.calls <- base::sys.calls
[11:03:24.613]             `[[` <- base::`[[`
[11:03:24.613]             `+` <- base::`+`
[11:03:24.613]             `<<-` <- base::`<<-`
[11:03:24.613]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:24.613]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:24.613]                   3L)]
[11:03:24.613]             }
[11:03:24.613]             function(cond) {
[11:03:24.613]                 is_error <- inherits(cond, "error")
[11:03:24.613]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:24.613]                   NULL)
[11:03:24.613]                 if (is_error) {
[11:03:24.613]                   sessionInformation <- function() {
[11:03:24.613]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:24.613]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:24.613]                       search = base::search(), system = base::Sys.info())
[11:03:24.613]                   }
[11:03:24.613]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.613]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:24.613]                     cond$call), session = sessionInformation(), 
[11:03:24.613]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:24.613]                   signalCondition(cond)
[11:03:24.613]                 }
[11:03:24.613]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:24.613]                 "immediateCondition"))) {
[11:03:24.613]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:24.613]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.613]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:24.613]                   if (TRUE && !signal) {
[11:03:24.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.613]                     {
[11:03:24.613]                       inherits <- base::inherits
[11:03:24.613]                       invokeRestart <- base::invokeRestart
[11:03:24.613]                       is.null <- base::is.null
[11:03:24.613]                       muffled <- FALSE
[11:03:24.613]                       if (inherits(cond, "message")) {
[11:03:24.613]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.613]                         if (muffled) 
[11:03:24.613]                           invokeRestart("muffleMessage")
[11:03:24.613]                       }
[11:03:24.613]                       else if (inherits(cond, "warning")) {
[11:03:24.613]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.613]                         if (muffled) 
[11:03:24.613]                           invokeRestart("muffleWarning")
[11:03:24.613]                       }
[11:03:24.613]                       else if (inherits(cond, "condition")) {
[11:03:24.613]                         if (!is.null(pattern)) {
[11:03:24.613]                           computeRestarts <- base::computeRestarts
[11:03:24.613]                           grepl <- base::grepl
[11:03:24.613]                           restarts <- computeRestarts(cond)
[11:03:24.613]                           for (restart in restarts) {
[11:03:24.613]                             name <- restart$name
[11:03:24.613]                             if (is.null(name)) 
[11:03:24.613]                               next
[11:03:24.613]                             if (!grepl(pattern, name)) 
[11:03:24.613]                               next
[11:03:24.613]                             invokeRestart(restart)
[11:03:24.613]                             muffled <- TRUE
[11:03:24.613]                             break
[11:03:24.613]                           }
[11:03:24.613]                         }
[11:03:24.613]                       }
[11:03:24.613]                       invisible(muffled)
[11:03:24.613]                     }
[11:03:24.613]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.613]                   }
[11:03:24.613]                 }
[11:03:24.613]                 else {
[11:03:24.613]                   if (TRUE) {
[11:03:24.613]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.613]                     {
[11:03:24.613]                       inherits <- base::inherits
[11:03:24.613]                       invokeRestart <- base::invokeRestart
[11:03:24.613]                       is.null <- base::is.null
[11:03:24.613]                       muffled <- FALSE
[11:03:24.613]                       if (inherits(cond, "message")) {
[11:03:24.613]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.613]                         if (muffled) 
[11:03:24.613]                           invokeRestart("muffleMessage")
[11:03:24.613]                       }
[11:03:24.613]                       else if (inherits(cond, "warning")) {
[11:03:24.613]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.613]                         if (muffled) 
[11:03:24.613]                           invokeRestart("muffleWarning")
[11:03:24.613]                       }
[11:03:24.613]                       else if (inherits(cond, "condition")) {
[11:03:24.613]                         if (!is.null(pattern)) {
[11:03:24.613]                           computeRestarts <- base::computeRestarts
[11:03:24.613]                           grepl <- base::grepl
[11:03:24.613]                           restarts <- computeRestarts(cond)
[11:03:24.613]                           for (restart in restarts) {
[11:03:24.613]                             name <- restart$name
[11:03:24.613]                             if (is.null(name)) 
[11:03:24.613]                               next
[11:03:24.613]                             if (!grepl(pattern, name)) 
[11:03:24.613]                               next
[11:03:24.613]                             invokeRestart(restart)
[11:03:24.613]                             muffled <- TRUE
[11:03:24.613]                             break
[11:03:24.613]                           }
[11:03:24.613]                         }
[11:03:24.613]                       }
[11:03:24.613]                       invisible(muffled)
[11:03:24.613]                     }
[11:03:24.613]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.613]                   }
[11:03:24.613]                 }
[11:03:24.613]             }
[11:03:24.613]         }))
[11:03:24.613]     }, error = function(ex) {
[11:03:24.613]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:24.613]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.613]                 ...future.rng), started = ...future.startTime, 
[11:03:24.613]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:24.613]             version = "1.8"), class = "FutureResult")
[11:03:24.613]     }, finally = {
[11:03:24.613]         if (!identical(...future.workdir, getwd())) 
[11:03:24.613]             setwd(...future.workdir)
[11:03:24.613]         {
[11:03:24.613]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:24.613]                 ...future.oldOptions$nwarnings <- NULL
[11:03:24.613]             }
[11:03:24.613]             base::options(...future.oldOptions)
[11:03:24.613]             if (.Platform$OS.type == "windows") {
[11:03:24.613]                 old_names <- names(...future.oldEnvVars)
[11:03:24.613]                 envs <- base::Sys.getenv()
[11:03:24.613]                 names <- names(envs)
[11:03:24.613]                 common <- intersect(names, old_names)
[11:03:24.613]                 added <- setdiff(names, old_names)
[11:03:24.613]                 removed <- setdiff(old_names, names)
[11:03:24.613]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:24.613]                   envs[common]]
[11:03:24.613]                 NAMES <- toupper(changed)
[11:03:24.613]                 args <- list()
[11:03:24.613]                 for (kk in seq_along(NAMES)) {
[11:03:24.613]                   name <- changed[[kk]]
[11:03:24.613]                   NAME <- NAMES[[kk]]
[11:03:24.613]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.613]                     next
[11:03:24.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.613]                 }
[11:03:24.613]                 NAMES <- toupper(added)
[11:03:24.613]                 for (kk in seq_along(NAMES)) {
[11:03:24.613]                   name <- added[[kk]]
[11:03:24.613]                   NAME <- NAMES[[kk]]
[11:03:24.613]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.613]                     next
[11:03:24.613]                   args[[name]] <- ""
[11:03:24.613]                 }
[11:03:24.613]                 NAMES <- toupper(removed)
[11:03:24.613]                 for (kk in seq_along(NAMES)) {
[11:03:24.613]                   name <- removed[[kk]]
[11:03:24.613]                   NAME <- NAMES[[kk]]
[11:03:24.613]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.613]                     next
[11:03:24.613]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.613]                 }
[11:03:24.613]                 if (length(args) > 0) 
[11:03:24.613]                   base::do.call(base::Sys.setenv, args = args)
[11:03:24.613]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:24.613]             }
[11:03:24.613]             else {
[11:03:24.613]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:24.613]             }
[11:03:24.613]             {
[11:03:24.613]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:24.613]                   0L) {
[11:03:24.613]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:24.613]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:24.613]                   base::options(opts)
[11:03:24.613]                 }
[11:03:24.613]                 {
[11:03:24.613]                   {
[11:03:24.613]                     NULL
[11:03:24.613]                     RNGkind("Mersenne-Twister")
[11:03:24.613]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:03:24.613]                       inherits = FALSE)
[11:03:24.613]                   }
[11:03:24.613]                   options(future.plan = "multisession")
[11:03:24.613]                   if (is.na("")) 
[11:03:24.613]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.613]                   else Sys.setenv(R_FUTURE_PLAN = "")
[11:03:24.613]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:24.613]                     .init = FALSE)
[11:03:24.613]                 }
[11:03:24.613]             }
[11:03:24.613]         }
[11:03:24.613]     })
[11:03:24.613]     if (TRUE) {
[11:03:24.613]         base::sink(type = "output", split = FALSE)
[11:03:24.613]         if (TRUE) {
[11:03:24.613]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:24.613]         }
[11:03:24.613]         else {
[11:03:24.613]             ...future.result["stdout"] <- base::list(NULL)
[11:03:24.613]         }
[11:03:24.613]         base::close(...future.stdout)
[11:03:24.613]         ...future.stdout <- NULL
[11:03:24.613]     }
[11:03:24.613]     ...future.result$conditions <- ...future.conditions
[11:03:24.613]     ...future.result$finished <- base::Sys.time()
[11:03:24.613]     ...future.result
[11:03:24.613] }
[11:03:24.615] plan(): Setting new future strategy stack:
[11:03:24.615] List of future strategies:
[11:03:24.615] 1. sequential:
[11:03:24.615]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:24.615]    - tweaked: FALSE
[11:03:24.615]    - call: NULL
[11:03:24.615] plan(): nbrOfWorkers() = 1
[11:03:24.616] plan(): Setting new future strategy stack:
[11:03:24.616] List of future strategies:
[11:03:24.616] 1. multisession:
[11:03:24.616]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.616]    - tweaked: FALSE
[11:03:24.616]    - call: plan("default")
[11:03:24.617] plan(): nbrOfWorkers() = 1
[11:03:24.618] SequentialFuture started (and completed)
[11:03:24.618] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:24.619] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ...")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ...
> options(future.plan = multisession, future.cmdargs = c("-p", "1"))
> .onLoad(pkgname, pkgname)
[11:03:24.620] Future-specific environment variables:
- R_FUTURE_PLAN=‘’
- R_FUTURE_WAIT_INTERVAL=‘0.01’
[11:03:24.620] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_REGION’ not set
[11:03:24.620] Environment variable ‘R_FUTURE_DEMO_MANDELBROT_NROW’ not set
[11:03:24.620] Environment variable ‘R_FUTURE_DEPRECATED_IGNORE’ not set
[11:03:24.620] Environment variable ‘R_FUTURE_DEPRECATED_DEFUNCT’ not set
[11:03:24.620] Environment variable ‘R_FUTURE_FORK_MULTITHREADING_ENABLE’ not set
[11:03:24.620] Environment variable ‘R_FUTURE_GLOBALS_MAXSIZE’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_GLOBALS_ONMISSING’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_GLOBALS_ONREFERENCE’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_GLOBALS_METHOD’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_GLOBALS_RESOLVE’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_LAZY_ASSERTOWNER’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_PLAN_DISALLOW’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_PSOCK_RELAY_IMMEDIATE’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_RELAY_IMMEDIATE’ not set
[11:03:24.621] Environment variable ‘R_FUTURE_RESOLVE_RECURSIVE’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_ALIVE_TIMEOUT’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_RESOLVED_TIMEOUT’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_CLUSTER_RESOLVED_TIMEOUT’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_MULTICORE_RESOLVED_TIMEOUT’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_ONFUTURECONDITION_KEEPFUTURE’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_RNG_ONMISUSE’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_GLOBALENV_ONMISUSE’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_WAIT_TIMEOUT’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_WAIT_ALPHA’ not set
[11:03:24.622] Environment variable ‘R_FUTURE_ASSIGN_GLOBALS_EXCLUDE’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_OUTPUT_WINDOWS_REENCODE’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_GLOBALS_GLOBALSOF_LOCALS’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_STATE_ONINVALID’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_JOURNAL’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_GLOBALS_KEEPWHERE’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_GLOBALS_OBJECTSIZE_METHOD’ not set
[11:03:24.623] Environment variable ‘R_FUTURE_PLAN_CLEANUP_LEGACY’ not set
[11:03:24.623] Option 'future.plan' of type ‘function’
[11:03:24.623] R command-line argument: -p 1
[11:03:24.624]  => 'future.plan' already set.
[11:03:24.624] R process uuid: c0b88654-a85c-7295-f531-ccbfb9fc1235
[11:03:24.624] Setting plan('default')
[11:03:24.624] plan(): Setting new future strategy stack:
[11:03:24.624] List of future strategies:
[11:03:24.624] 1. multisession:
[11:03:24.624]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.624]    - tweaked: FALSE
[11:03:24.624]    - call: NULL
[11:03:24.625] plan(): nbrOfWorkers() = 1
> strategy <- plan("next")
> print(strategy)
multisession:
- args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
- tweaked: FALSE
- call: NULL
> stopifnot(inherits(strategy, "multisession"))
> plan("default")
[11:03:24.626] plan(): Setting new future strategy stack:
[11:03:24.626] List of future strategies:
[11:03:24.626] 1. multisession:
[11:03:24.626]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.626]    - tweaked: FALSE
[11:03:24.626]    - call: NULL
[11:03:24.626] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:03:24.626] multisession:
[11:03:24.626] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.626] - tweaked: FALSE
[11:03:24.626] - call: NULL
[11:03:24.628] getGlobalsAndPackages() ...
[11:03:24.628] Not searching for globals
[11:03:24.628] - globals: [0] <none>
[11:03:24.628] getGlobalsAndPackages() ... DONE
[11:03:24.628] Packages needed by the future expression (n = 0): <none>
[11:03:24.628] Packages needed by future strategies (n = 0): <none>
[11:03:24.629] {
[11:03:24.629]     {
[11:03:24.629]         {
[11:03:24.629]             ...future.startTime <- base::Sys.time()
[11:03:24.629]             {
[11:03:24.629]                 {
[11:03:24.629]                   {
[11:03:24.629]                     base::local({
[11:03:24.629]                       has_future <- base::requireNamespace("future", 
[11:03:24.629]                         quietly = TRUE)
[11:03:24.629]                       if (has_future) {
[11:03:24.629]                         ns <- base::getNamespace("future")
[11:03:24.629]                         version <- ns[[".package"]][["version"]]
[11:03:24.629]                         if (is.null(version)) 
[11:03:24.629]                           version <- utils::packageVersion("future")
[11:03:24.629]                       }
[11:03:24.629]                       else {
[11:03:24.629]                         version <- NULL
[11:03:24.629]                       }
[11:03:24.629]                       if (!has_future || version < "1.8.0") {
[11:03:24.629]                         info <- base::c(r_version = base::gsub("R version ", 
[11:03:24.629]                           "", base::R.version$version.string), 
[11:03:24.629]                           platform = base::sprintf("%s (%s-bit)", 
[11:03:24.629]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:03:24.629]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:03:24.629]                             "release", "version")], collapse = " "), 
[11:03:24.629]                           hostname = base::Sys.info()[["nodename"]])
[11:03:24.629]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:03:24.629]                           info)
[11:03:24.629]                         info <- base::paste(info, collapse = "; ")
[11:03:24.629]                         if (!has_future) {
[11:03:24.629]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:03:24.629]                             info)
[11:03:24.629]                         }
[11:03:24.629]                         else {
[11:03:24.629]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:03:24.629]                             info, version)
[11:03:24.629]                         }
[11:03:24.629]                         base::stop(msg)
[11:03:24.629]                       }
[11:03:24.629]                     })
[11:03:24.629]                   }
[11:03:24.629]                   ...future.strategy.old <- future::plan("list")
[11:03:24.629]                   options(future.plan = NULL)
[11:03:24.629]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.629]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:03:24.629]                 }
[11:03:24.629]                 ...future.workdir <- getwd()
[11:03:24.629]             }
[11:03:24.629]             ...future.oldOptions <- base::as.list(base::.Options)
[11:03:24.629]             ...future.oldEnvVars <- base::Sys.getenv()
[11:03:24.629]         }
[11:03:24.629]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:03:24.629]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:03:24.629]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:03:24.629]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:03:24.629]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:03:24.629]             future.stdout.windows.reencode = NULL, width = 80L)
[11:03:24.629]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:03:24.629]             base::names(...future.oldOptions))
[11:03:24.629]     }
[11:03:24.629]     if (FALSE) {
[11:03:24.629]     }
[11:03:24.629]     else {
[11:03:24.629]         if (TRUE) {
[11:03:24.629]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:03:24.629]                 open = "w")
[11:03:24.629]         }
[11:03:24.629]         else {
[11:03:24.629]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:03:24.629]                 windows = "NUL", "/dev/null"), open = "w")
[11:03:24.629]         }
[11:03:24.629]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:03:24.629]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:03:24.629]             base::sink(type = "output", split = FALSE)
[11:03:24.629]             base::close(...future.stdout)
[11:03:24.629]         }, add = TRUE)
[11:03:24.629]     }
[11:03:24.629]     ...future.frame <- base::sys.nframe()
[11:03:24.629]     ...future.conditions <- base::list()
[11:03:24.629]     ...future.rng <- base::globalenv()$.Random.seed
[11:03:24.629]     if (FALSE) {
[11:03:24.629]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:03:24.629]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:03:24.629]     }
[11:03:24.629]     ...future.result <- base::tryCatch({
[11:03:24.629]         base::withCallingHandlers({
[11:03:24.629]             ...future.value <- base::withVisible(base::local(NA))
[11:03:24.629]             future::FutureResult(value = ...future.value$value, 
[11:03:24.629]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.629]                   ...future.rng), globalenv = if (FALSE) 
[11:03:24.629]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:03:24.629]                     ...future.globalenv.names))
[11:03:24.629]                 else NULL, started = ...future.startTime, version = "1.8")
[11:03:24.629]         }, condition = base::local({
[11:03:24.629]             c <- base::c
[11:03:24.629]             inherits <- base::inherits
[11:03:24.629]             invokeRestart <- base::invokeRestart
[11:03:24.629]             length <- base::length
[11:03:24.629]             list <- base::list
[11:03:24.629]             seq.int <- base::seq.int
[11:03:24.629]             signalCondition <- base::signalCondition
[11:03:24.629]             sys.calls <- base::sys.calls
[11:03:24.629]             `[[` <- base::`[[`
[11:03:24.629]             `+` <- base::`+`
[11:03:24.629]             `<<-` <- base::`<<-`
[11:03:24.629]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:03:24.629]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:03:24.629]                   3L)]
[11:03:24.629]             }
[11:03:24.629]             function(cond) {
[11:03:24.629]                 is_error <- inherits(cond, "error")
[11:03:24.629]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:03:24.629]                   NULL)
[11:03:24.629]                 if (is_error) {
[11:03:24.629]                   sessionInformation <- function() {
[11:03:24.629]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:03:24.629]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:03:24.629]                       search = base::search(), system = base::Sys.info())
[11:03:24.629]                   }
[11:03:24.629]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.629]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:03:24.629]                     cond$call), session = sessionInformation(), 
[11:03:24.629]                     timestamp = base::Sys.time(), signaled = 0L)
[11:03:24.629]                   signalCondition(cond)
[11:03:24.629]                 }
[11:03:24.629]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:03:24.629]                 "immediateCondition"))) {
[11:03:24.629]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:03:24.629]                   ...future.conditions[[length(...future.conditions) + 
[11:03:24.629]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:03:24.629]                   if (TRUE && !signal) {
[11:03:24.629]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.629]                     {
[11:03:24.629]                       inherits <- base::inherits
[11:03:24.629]                       invokeRestart <- base::invokeRestart
[11:03:24.629]                       is.null <- base::is.null
[11:03:24.629]                       muffled <- FALSE
[11:03:24.629]                       if (inherits(cond, "message")) {
[11:03:24.629]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.629]                         if (muffled) 
[11:03:24.629]                           invokeRestart("muffleMessage")
[11:03:24.629]                       }
[11:03:24.629]                       else if (inherits(cond, "warning")) {
[11:03:24.629]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.629]                         if (muffled) 
[11:03:24.629]                           invokeRestart("muffleWarning")
[11:03:24.629]                       }
[11:03:24.629]                       else if (inherits(cond, "condition")) {
[11:03:24.629]                         if (!is.null(pattern)) {
[11:03:24.629]                           computeRestarts <- base::computeRestarts
[11:03:24.629]                           grepl <- base::grepl
[11:03:24.629]                           restarts <- computeRestarts(cond)
[11:03:24.629]                           for (restart in restarts) {
[11:03:24.629]                             name <- restart$name
[11:03:24.629]                             if (is.null(name)) 
[11:03:24.629]                               next
[11:03:24.629]                             if (!grepl(pattern, name)) 
[11:03:24.629]                               next
[11:03:24.629]                             invokeRestart(restart)
[11:03:24.629]                             muffled <- TRUE
[11:03:24.629]                             break
[11:03:24.629]                           }
[11:03:24.629]                         }
[11:03:24.629]                       }
[11:03:24.629]                       invisible(muffled)
[11:03:24.629]                     }
[11:03:24.629]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.629]                   }
[11:03:24.629]                 }
[11:03:24.629]                 else {
[11:03:24.629]                   if (TRUE) {
[11:03:24.629]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:03:24.629]                     {
[11:03:24.629]                       inherits <- base::inherits
[11:03:24.629]                       invokeRestart <- base::invokeRestart
[11:03:24.629]                       is.null <- base::is.null
[11:03:24.629]                       muffled <- FALSE
[11:03:24.629]                       if (inherits(cond, "message")) {
[11:03:24.629]                         muffled <- grepl(pattern, "muffleMessage")
[11:03:24.629]                         if (muffled) 
[11:03:24.629]                           invokeRestart("muffleMessage")
[11:03:24.629]                       }
[11:03:24.629]                       else if (inherits(cond, "warning")) {
[11:03:24.629]                         muffled <- grepl(pattern, "muffleWarning")
[11:03:24.629]                         if (muffled) 
[11:03:24.629]                           invokeRestart("muffleWarning")
[11:03:24.629]                       }
[11:03:24.629]                       else if (inherits(cond, "condition")) {
[11:03:24.629]                         if (!is.null(pattern)) {
[11:03:24.629]                           computeRestarts <- base::computeRestarts
[11:03:24.629]                           grepl <- base::grepl
[11:03:24.629]                           restarts <- computeRestarts(cond)
[11:03:24.629]                           for (restart in restarts) {
[11:03:24.629]                             name <- restart$name
[11:03:24.629]                             if (is.null(name)) 
[11:03:24.629]                               next
[11:03:24.629]                             if (!grepl(pattern, name)) 
[11:03:24.629]                               next
[11:03:24.629]                             invokeRestart(restart)
[11:03:24.629]                             muffled <- TRUE
[11:03:24.629]                             break
[11:03:24.629]                           }
[11:03:24.629]                         }
[11:03:24.629]                       }
[11:03:24.629]                       invisible(muffled)
[11:03:24.629]                     }
[11:03:24.629]                     muffleCondition(cond, pattern = "^muffle")
[11:03:24.629]                   }
[11:03:24.629]                 }
[11:03:24.629]             }
[11:03:24.629]         }))
[11:03:24.629]     }, error = function(ex) {
[11:03:24.629]         base::structure(base::list(value = NULL, visible = NULL, 
[11:03:24.629]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:03:24.629]                 ...future.rng), started = ...future.startTime, 
[11:03:24.629]             finished = Sys.time(), session_uuid = NA_character_, 
[11:03:24.629]             version = "1.8"), class = "FutureResult")
[11:03:24.629]     }, finally = {
[11:03:24.629]         if (!identical(...future.workdir, getwd())) 
[11:03:24.629]             setwd(...future.workdir)
[11:03:24.629]         {
[11:03:24.629]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:03:24.629]                 ...future.oldOptions$nwarnings <- NULL
[11:03:24.629]             }
[11:03:24.629]             base::options(...future.oldOptions)
[11:03:24.629]             if (.Platform$OS.type == "windows") {
[11:03:24.629]                 old_names <- names(...future.oldEnvVars)
[11:03:24.629]                 envs <- base::Sys.getenv()
[11:03:24.629]                 names <- names(envs)
[11:03:24.629]                 common <- intersect(names, old_names)
[11:03:24.629]                 added <- setdiff(names, old_names)
[11:03:24.629]                 removed <- setdiff(old_names, names)
[11:03:24.629]                 changed <- common[...future.oldEnvVars[common] != 
[11:03:24.629]                   envs[common]]
[11:03:24.629]                 NAMES <- toupper(changed)
[11:03:24.629]                 args <- list()
[11:03:24.629]                 for (kk in seq_along(NAMES)) {
[11:03:24.629]                   name <- changed[[kk]]
[11:03:24.629]                   NAME <- NAMES[[kk]]
[11:03:24.629]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.629]                     next
[11:03:24.629]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.629]                 }
[11:03:24.629]                 NAMES <- toupper(added)
[11:03:24.629]                 for (kk in seq_along(NAMES)) {
[11:03:24.629]                   name <- added[[kk]]
[11:03:24.629]                   NAME <- NAMES[[kk]]
[11:03:24.629]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.629]                     next
[11:03:24.629]                   args[[name]] <- ""
[11:03:24.629]                 }
[11:03:24.629]                 NAMES <- toupper(removed)
[11:03:24.629]                 for (kk in seq_along(NAMES)) {
[11:03:24.629]                   name <- removed[[kk]]
[11:03:24.629]                   NAME <- NAMES[[kk]]
[11:03:24.629]                   if (name != NAME && is.element(NAME, old_names)) 
[11:03:24.629]                     next
[11:03:24.629]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:03:24.629]                 }
[11:03:24.629]                 if (length(args) > 0) 
[11:03:24.629]                   base::do.call(base::Sys.setenv, args = args)
[11:03:24.629]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:03:24.629]             }
[11:03:24.629]             else {
[11:03:24.629]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:03:24.629]             }
[11:03:24.629]             {
[11:03:24.629]                 if (base::length(...future.futureOptionsAdded) > 
[11:03:24.629]                   0L) {
[11:03:24.629]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:03:24.629]                   base::names(opts) <- ...future.futureOptionsAdded
[11:03:24.629]                   base::options(opts)
[11:03:24.629]                 }
[11:03:24.629]                 {
[11:03:24.629]                   {
[11:03:24.629]                     NULL
[11:03:24.629]                     RNGkind("Mersenne-Twister")
[11:03:24.629]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:03:24.629]                       inherits = FALSE)
[11:03:24.629]                   }
[11:03:24.629]                   options(future.plan = function (..., workers = availableCores(), 
[11:03:24.629]                     lazy = FALSE, rscript_libs = .libPaths(), 
[11:03:24.629]                     envir = parent.frame()) 
[11:03:24.629]                   {
[11:03:24.629]                     if (is.function(workers)) 
[11:03:24.629]                       workers <- workers()
[11:03:24.629]                     workers <- structure(as.integer(workers), 
[11:03:24.629]                       class = class(workers))
[11:03:24.629]                     stop_if_not(length(workers) == 1, is.finite(workers), 
[11:03:24.629]                       workers >= 1)
[11:03:24.629]                     if (workers == 1L && !inherits(workers, "AsIs")) {
[11:03:24.629]                       return(sequential(..., lazy = TRUE, envir = envir))
[11:03:24.629]                     }
[11:03:24.629]                     future <- MultisessionFuture(..., workers = workers, 
[11:03:24.629]                       lazy = lazy, rscript_libs = rscript_libs, 
[11:03:24.629]                       envir = envir)
[11:03:24.629]                     if (!future$lazy) 
[11:03:24.629]                       future <- run(future)
[11:03:24.629]                     invisible(future)
[11:03:24.629]                   })
[11:03:24.629]                   if (is.na("")) 
[11:03:24.629]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:03:24.629]                   else Sys.setenv(R_FUTURE_PLAN = "")
[11:03:24.629]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:03:24.629]                     .init = FALSE)
[11:03:24.629]                 }
[11:03:24.629]             }
[11:03:24.629]         }
[11:03:24.629]     })
[11:03:24.629]     if (TRUE) {
[11:03:24.629]         base::sink(type = "output", split = FALSE)
[11:03:24.629]         if (TRUE) {
[11:03:24.629]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:03:24.629]         }
[11:03:24.629]         else {
[11:03:24.629]             ...future.result["stdout"] <- base::list(NULL)
[11:03:24.629]         }
[11:03:24.629]         base::close(...future.stdout)
[11:03:24.629]         ...future.stdout <- NULL
[11:03:24.629]     }
[11:03:24.629]     ...future.result$conditions <- ...future.conditions
[11:03:24.629]     ...future.result$finished <- base::Sys.time()
[11:03:24.629]     ...future.result
[11:03:24.629] }
[11:03:24.631] plan(): Setting new future strategy stack:
[11:03:24.631] List of future strategies:
[11:03:24.631] 1. sequential:
[11:03:24.631]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:24.631]    - tweaked: FALSE
[11:03:24.631]    - call: NULL
[11:03:24.631] plan(): nbrOfWorkers() = 1
[11:03:24.632] plan(): Setting new future strategy stack:
[11:03:24.632] List of future strategies:
[11:03:24.632] 1. multisession:
[11:03:24.632]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:03:24.632]    - tweaked: FALSE
[11:03:24.632]    - call: NULL
[11:03:24.633] plan(): nbrOfWorkers() = 1
[11:03:24.633] SequentialFuture started (and completed)
[11:03:24.634] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:03:24.635] plan(): nbrOfWorkers() = 1
> message("- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE")
- .onLoad() w/ future.plan = 'multisession' & -p 1 ... DONE
> 
> options(future.plan = NULL, future.cmdargs = NULL, future.availableCores.system = NULL, future.availableCores.fallback = NULL)
> 
> message("*** .onLoad() ... DONE")
*** .onLoad() ... DONE
> 
> 
> message("*** .onAttach() ...")
*** .onAttach() ...
> 
> pkgname <- "future"
> 
> message("- .onAttach() w/ option future.startup.loadScript ...")
- .onAttach() w/ option future.startup.loadScript ...
> 
> for (value in list(NULL, FALSE, TRUE)) {
+   options(future.startup.loadScript = value)
+   .onAttach(pkgname, pkgname)
+ }
[11:03:24.637] Option 'future.startup.script': TRUE
[11:03:24.637] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[11:03:24.637] Future startup scripts found: <none>
[11:03:24.637] Option 'future.startup.script': TRUE
[11:03:24.638] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[11:03:24.638] Future startup scripts found: <none>
[11:03:24.638] Option 'future.startup.script': TRUE
[11:03:24.638] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[11:03:24.638] Future startup scripts found: <none>
> 
> message("- .onAttach() w/ option future.startup.loadScript ... DONE")
- .onAttach() w/ option future.startup.loadScript ... DONE
> 
> message("- .onAttach() with ./.future.R ...")
- .onAttach() with ./.future.R ...
> 
> pathname <- ".future.R"
> xyz <- 0L
> cat("xyz <- 42L; cat('ping\n')\n", file = pathname)
> .onAttach(pkgname, pkgname)
[11:03:24.638] Option 'future.startup.script': TRUE
[11:03:24.639] Future startup scripts considered: ‘.future.R’, ‘~/.future.R’
[11:03:24.639] Future startup scripts found: ‘.future.R’
[11:03:24.639] Future startup script to load: ‘.future.R’
ping
[1] ".future.R"
> print(xyz)
[1] 42
> stopifnot(is.integer(xyz), xyz >= 0, xyz == 42L)
> file.remove(pathname)
[1] TRUE
> 
> message("- .onAttach() with ./.future.R ... DONE")
- .onAttach() with ./.future.R ... DONE
> 
> message("*** .onAttach() ... DONE")
*** .onAttach() ... DONE
> 
> 
> source("incl/end.R")
[11:03:24.640] plan(): Setting new future strategy stack:
[11:03:24.640] List of future strategies:
[11:03:24.640] 1. FutureStrategy:
[11:03:24.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:03:24.640]    - tweaked: FALSE
[11:03:24.640]    - call: future::plan(oplan)
[11:03:24.640] plan(): nbrOfWorkers() = 1
> 
