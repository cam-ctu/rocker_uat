
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:27.104] plan(): Setting new future strategy stack:
[11:01:27.105] List of future strategies:
[11:01:27.105] 1. sequential:
[11:01:27.105]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.105]    - tweaked: FALSE
[11:01:27.105]    - call: future::plan("sequential")
[11:01:27.118] plan(): nbrOfWorkers() = 1
> 
> suppressWarnings(rm(list = c("x", "z")))
> 
> message("*** futureOf() with environment ...")
*** futureOf() with environment ...
> 
> message("*** futureOf() with environment - future assignments ...")
*** futureOf() with environment - future assignments ...
> 
> x <- new.env()
> x$a %<-% { 1 }
[11:01:27.135] getGlobalsAndPackages() ...
[11:01:27.135] Searching for globals...
[11:01:27.137] - globals found: [1] ‘{’
[11:01:27.137] Searching for globals ... DONE
[11:01:27.138] Resolving globals: FALSE
[11:01:27.138] 
[11:01:27.138] 
[11:01:27.138] getGlobalsAndPackages() ... DONE
[11:01:27.139] run() for ‘Future’ ...
[11:01:27.139] - state: ‘created’
[11:01:27.139] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:27.139] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:27.139] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:27.140]   - Field: ‘label’
[11:01:27.140]   - Field: ‘local’
[11:01:27.140]   - Field: ‘owner’
[11:01:27.140]   - Field: ‘envir’
[11:01:27.140]   - Field: ‘packages’
[11:01:27.140]   - Field: ‘gc’
[11:01:27.140]   - Field: ‘conditions’
[11:01:27.140]   - Field: ‘expr’
[11:01:27.140]   - Field: ‘uuid’
[11:01:27.140]   - Field: ‘seed’
[11:01:27.140]   - Field: ‘version’
[11:01:27.141]   - Field: ‘result’
[11:01:27.141]   - Field: ‘asynchronous’
[11:01:27.141]   - Field: ‘calls’
[11:01:27.141]   - Field: ‘globals’
[11:01:27.141]   - Field: ‘stdout’
[11:01:27.141]   - Field: ‘earlySignal’
[11:01:27.141]   - Field: ‘lazy’
[11:01:27.141]   - Field: ‘state’
[11:01:27.141] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:27.141] - Launch lazy future ...
[11:01:27.142] Packages needed by the future expression (n = 0): <none>
[11:01:27.142] Packages needed by future strategies (n = 0): <none>
[11:01:27.143] {
[11:01:27.143]     {
[11:01:27.143]         {
[11:01:27.143]             ...future.startTime <- base::Sys.time()
[11:01:27.143]             {
[11:01:27.143]                 {
[11:01:27.143]                   {
[11:01:27.143]                     base::local({
[11:01:27.143]                       has_future <- base::requireNamespace("future", 
[11:01:27.143]                         quietly = TRUE)
[11:01:27.143]                       if (has_future) {
[11:01:27.143]                         ns <- base::getNamespace("future")
[11:01:27.143]                         version <- ns[[".package"]][["version"]]
[11:01:27.143]                         if (is.null(version)) 
[11:01:27.143]                           version <- utils::packageVersion("future")
[11:01:27.143]                       }
[11:01:27.143]                       else {
[11:01:27.143]                         version <- NULL
[11:01:27.143]                       }
[11:01:27.143]                       if (!has_future || version < "1.8.0") {
[11:01:27.143]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:27.143]                           "", base::R.version$version.string), 
[11:01:27.143]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:27.143]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:27.143]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:27.143]                             "release", "version")], collapse = " "), 
[11:01:27.143]                           hostname = base::Sys.info()[["nodename"]])
[11:01:27.143]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:27.143]                           info)
[11:01:27.143]                         info <- base::paste(info, collapse = "; ")
[11:01:27.143]                         if (!has_future) {
[11:01:27.143]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:27.143]                             info)
[11:01:27.143]                         }
[11:01:27.143]                         else {
[11:01:27.143]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:27.143]                             info, version)
[11:01:27.143]                         }
[11:01:27.143]                         base::stop(msg)
[11:01:27.143]                       }
[11:01:27.143]                     })
[11:01:27.143]                   }
[11:01:27.143]                   ...future.strategy.old <- future::plan("list")
[11:01:27.143]                   options(future.plan = NULL)
[11:01:27.143]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:27.143]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:27.143]                 }
[11:01:27.143]                 ...future.workdir <- getwd()
[11:01:27.143]             }
[11:01:27.143]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:27.143]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:27.143]         }
[11:01:27.143]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:27.143]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:27.143]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:27.143]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:27.143]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:27.143]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:27.143]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:27.143]             base::names(...future.oldOptions))
[11:01:27.143]     }
[11:01:27.143]     if (FALSE) {
[11:01:27.143]     }
[11:01:27.143]     else {
[11:01:27.143]         if (TRUE) {
[11:01:27.143]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:27.143]                 open = "w")
[11:01:27.143]         }
[11:01:27.143]         else {
[11:01:27.143]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:27.143]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:27.143]         }
[11:01:27.143]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:27.143]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:27.143]             base::sink(type = "output", split = FALSE)
[11:01:27.143]             base::close(...future.stdout)
[11:01:27.143]         }, add = TRUE)
[11:01:27.143]     }
[11:01:27.143]     ...future.frame <- base::sys.nframe()
[11:01:27.143]     ...future.conditions <- base::list()
[11:01:27.143]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:27.143]     if (FALSE) {
[11:01:27.143]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:27.143]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:27.143]     }
[11:01:27.143]     ...future.result <- base::tryCatch({
[11:01:27.143]         base::withCallingHandlers({
[11:01:27.143]             ...future.value <- base::withVisible(base::local({
[11:01:27.143]                 1
[11:01:27.143]             }))
[11:01:27.143]             future::FutureResult(value = ...future.value$value, 
[11:01:27.143]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:27.143]                   ...future.rng), globalenv = if (FALSE) 
[11:01:27.143]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:27.143]                     ...future.globalenv.names))
[11:01:27.143]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:27.143]         }, condition = base::local({
[11:01:27.143]             c <- base::c
[11:01:27.143]             inherits <- base::inherits
[11:01:27.143]             invokeRestart <- base::invokeRestart
[11:01:27.143]             length <- base::length
[11:01:27.143]             list <- base::list
[11:01:27.143]             seq.int <- base::seq.int
[11:01:27.143]             signalCondition <- base::signalCondition
[11:01:27.143]             sys.calls <- base::sys.calls
[11:01:27.143]             `[[` <- base::`[[`
[11:01:27.143]             `+` <- base::`+`
[11:01:27.143]             `<<-` <- base::`<<-`
[11:01:27.143]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:27.143]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:27.143]                   3L)]
[11:01:27.143]             }
[11:01:27.143]             function(cond) {
[11:01:27.143]                 is_error <- inherits(cond, "error")
[11:01:27.143]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:27.143]                   NULL)
[11:01:27.143]                 if (is_error) {
[11:01:27.143]                   sessionInformation <- function() {
[11:01:27.143]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:27.143]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:27.143]                       search = base::search(), system = base::Sys.info())
[11:01:27.143]                   }
[11:01:27.143]                   ...future.conditions[[length(...future.conditions) + 
[11:01:27.143]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:27.143]                     cond$call), session = sessionInformation(), 
[11:01:27.143]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:27.143]                   signalCondition(cond)
[11:01:27.143]                 }
[11:01:27.143]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:27.143]                 "immediateCondition"))) {
[11:01:27.143]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:27.143]                   ...future.conditions[[length(...future.conditions) + 
[11:01:27.143]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:27.143]                   if (TRUE && !signal) {
[11:01:27.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:27.143]                     {
[11:01:27.143]                       inherits <- base::inherits
[11:01:27.143]                       invokeRestart <- base::invokeRestart
[11:01:27.143]                       is.null <- base::is.null
[11:01:27.143]                       muffled <- FALSE
[11:01:27.143]                       if (inherits(cond, "message")) {
[11:01:27.143]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:27.143]                         if (muffled) 
[11:01:27.143]                           invokeRestart("muffleMessage")
[11:01:27.143]                       }
[11:01:27.143]                       else if (inherits(cond, "warning")) {
[11:01:27.143]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:27.143]                         if (muffled) 
[11:01:27.143]                           invokeRestart("muffleWarning")
[11:01:27.143]                       }
[11:01:27.143]                       else if (inherits(cond, "condition")) {
[11:01:27.143]                         if (!is.null(pattern)) {
[11:01:27.143]                           computeRestarts <- base::computeRestarts
[11:01:27.143]                           grepl <- base::grepl
[11:01:27.143]                           restarts <- computeRestarts(cond)
[11:01:27.143]                           for (restart in restarts) {
[11:01:27.143]                             name <- restart$name
[11:01:27.143]                             if (is.null(name)) 
[11:01:27.143]                               next
[11:01:27.143]                             if (!grepl(pattern, name)) 
[11:01:27.143]                               next
[11:01:27.143]                             invokeRestart(restart)
[11:01:27.143]                             muffled <- TRUE
[11:01:27.143]                             break
[11:01:27.143]                           }
[11:01:27.143]                         }
[11:01:27.143]                       }
[11:01:27.143]                       invisible(muffled)
[11:01:27.143]                     }
[11:01:27.143]                     muffleCondition(cond, pattern = "^muffle")
[11:01:27.143]                   }
[11:01:27.143]                 }
[11:01:27.143]                 else {
[11:01:27.143]                   if (TRUE) {
[11:01:27.143]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:27.143]                     {
[11:01:27.143]                       inherits <- base::inherits
[11:01:27.143]                       invokeRestart <- base::invokeRestart
[11:01:27.143]                       is.null <- base::is.null
[11:01:27.143]                       muffled <- FALSE
[11:01:27.143]                       if (inherits(cond, "message")) {
[11:01:27.143]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:27.143]                         if (muffled) 
[11:01:27.143]                           invokeRestart("muffleMessage")
[11:01:27.143]                       }
[11:01:27.143]                       else if (inherits(cond, "warning")) {
[11:01:27.143]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:27.143]                         if (muffled) 
[11:01:27.143]                           invokeRestart("muffleWarning")
[11:01:27.143]                       }
[11:01:27.143]                       else if (inherits(cond, "condition")) {
[11:01:27.143]                         if (!is.null(pattern)) {
[11:01:27.143]                           computeRestarts <- base::computeRestarts
[11:01:27.143]                           grepl <- base::grepl
[11:01:27.143]                           restarts <- computeRestarts(cond)
[11:01:27.143]                           for (restart in restarts) {
[11:01:27.143]                             name <- restart$name
[11:01:27.143]                             if (is.null(name)) 
[11:01:27.143]                               next
[11:01:27.143]                             if (!grepl(pattern, name)) 
[11:01:27.143]                               next
[11:01:27.143]                             invokeRestart(restart)
[11:01:27.143]                             muffled <- TRUE
[11:01:27.143]                             break
[11:01:27.143]                           }
[11:01:27.143]                         }
[11:01:27.143]                       }
[11:01:27.143]                       invisible(muffled)
[11:01:27.143]                     }
[11:01:27.143]                     muffleCondition(cond, pattern = "^muffle")
[11:01:27.143]                   }
[11:01:27.143]                 }
[11:01:27.143]             }
[11:01:27.143]         }))
[11:01:27.143]     }, error = function(ex) {
[11:01:27.143]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:27.143]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:27.143]                 ...future.rng), started = ...future.startTime, 
[11:01:27.143]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:27.143]             version = "1.8"), class = "FutureResult")
[11:01:27.143]     }, finally = {
[11:01:27.143]         if (!identical(...future.workdir, getwd())) 
[11:01:27.143]             setwd(...future.workdir)
[11:01:27.143]         {
[11:01:27.143]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:27.143]                 ...future.oldOptions$nwarnings <- NULL
[11:01:27.143]             }
[11:01:27.143]             base::options(...future.oldOptions)
[11:01:27.143]             if (.Platform$OS.type == "windows") {
[11:01:27.143]                 old_names <- names(...future.oldEnvVars)
[11:01:27.143]                 envs <- base::Sys.getenv()
[11:01:27.143]                 names <- names(envs)
[11:01:27.143]                 common <- intersect(names, old_names)
[11:01:27.143]                 added <- setdiff(names, old_names)
[11:01:27.143]                 removed <- setdiff(old_names, names)
[11:01:27.143]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:27.143]                   envs[common]]
[11:01:27.143]                 NAMES <- toupper(changed)
[11:01:27.143]                 args <- list()
[11:01:27.143]                 for (kk in seq_along(NAMES)) {
[11:01:27.143]                   name <- changed[[kk]]
[11:01:27.143]                   NAME <- NAMES[[kk]]
[11:01:27.143]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.143]                     next
[11:01:27.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:27.143]                 }
[11:01:27.143]                 NAMES <- toupper(added)
[11:01:27.143]                 for (kk in seq_along(NAMES)) {
[11:01:27.143]                   name <- added[[kk]]
[11:01:27.143]                   NAME <- NAMES[[kk]]
[11:01:27.143]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.143]                     next
[11:01:27.143]                   args[[name]] <- ""
[11:01:27.143]                 }
[11:01:27.143]                 NAMES <- toupper(removed)
[11:01:27.143]                 for (kk in seq_along(NAMES)) {
[11:01:27.143]                   name <- removed[[kk]]
[11:01:27.143]                   NAME <- NAMES[[kk]]
[11:01:27.143]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.143]                     next
[11:01:27.143]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:27.143]                 }
[11:01:27.143]                 if (length(args) > 0) 
[11:01:27.143]                   base::do.call(base::Sys.setenv, args = args)
[11:01:27.143]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:27.143]             }
[11:01:27.143]             else {
[11:01:27.143]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:27.143]             }
[11:01:27.143]             {
[11:01:27.143]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:27.143]                   0L) {
[11:01:27.143]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:27.143]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:27.143]                   base::options(opts)
[11:01:27.143]                 }
[11:01:27.143]                 {
[11:01:27.143]                   {
[11:01:27.143]                     NULL
[11:01:27.143]                     RNGkind("Mersenne-Twister")
[11:01:27.143]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:27.143]                       inherits = FALSE)
[11:01:27.143]                   }
[11:01:27.143]                   options(future.plan = NULL)
[11:01:27.143]                   if (is.na(NA_character_)) 
[11:01:27.143]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:27.143]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:27.143]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:27.143]                     .init = FALSE)
[11:01:27.143]                 }
[11:01:27.143]             }
[11:01:27.143]         }
[11:01:27.143]     })
[11:01:27.143]     if (TRUE) {
[11:01:27.143]         base::sink(type = "output", split = FALSE)
[11:01:27.143]         if (TRUE) {
[11:01:27.143]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:27.143]         }
[11:01:27.143]         else {
[11:01:27.143]             ...future.result["stdout"] <- base::list(NULL)
[11:01:27.143]         }
[11:01:27.143]         base::close(...future.stdout)
[11:01:27.143]         ...future.stdout <- NULL
[11:01:27.143]     }
[11:01:27.143]     ...future.result$conditions <- ...future.conditions
[11:01:27.143]     ...future.result$finished <- base::Sys.time()
[11:01:27.143]     ...future.result
[11:01:27.143] }
[11:01:27.145] plan(): Setting new future strategy stack:
[11:01:27.145] List of future strategies:
[11:01:27.145] 1. sequential:
[11:01:27.145]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.145]    - tweaked: FALSE
[11:01:27.145]    - call: NULL
[11:01:27.145] plan(): nbrOfWorkers() = 1
[11:01:27.146] plan(): Setting new future strategy stack:
[11:01:27.146] List of future strategies:
[11:01:27.146] 1. sequential:
[11:01:27.146]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.146]    - tweaked: FALSE
[11:01:27.146]    - call: future::plan("sequential")
[11:01:27.147] plan(): nbrOfWorkers() = 1
[11:01:27.147] SequentialFuture started (and completed)
[11:01:27.147] - Launch lazy future ... done
[11:01:27.147] run() for ‘SequentialFuture’ ... done
> 
> f1 <- futureOf("a", envir = x)
> print(f1)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
> f2 <- futureOf(a, envir = x)
> f3 <- futureOf(x[["a"]])
> f4 <- futureOf(x$a)
> stopifnot(identical(f2, f1), identical(f3, f1), identical(f4, f1))
> 
> ## Identify all futures
> fs <- futureOf(envir = x)
> print(fs)
$a
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> stopifnot(identical(names(fs), c("a")))
> stopifnot(identical(fs$a, f1))
> 
> fsD <- futureOf(envir = x, drop = TRUE)
> print(fsD)
$a
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> stopifnot(all(sapply(fsD, FUN = inherits, "Future")))
> stopifnot(identical(fsD, fs))
> 
> message("*** futureOf() with environment - future assignments ... DONE")
*** futureOf() with environment - future assignments ... DONE
> 
> 
> message("*** futureOf() with environment - futures ...")
*** futureOf() with environment - futures ...
> 
> x <- new.env()
> x$a <- future({ 1 })
[11:01:27.150] getGlobalsAndPackages() ...
[11:01:27.150] Searching for globals...
[11:01:27.151] - globals found: [1] ‘{’
[11:01:27.151] Searching for globals ... DONE
[11:01:27.151] Resolving globals: FALSE
[11:01:27.151] 
[11:01:27.151] 
[11:01:27.151] getGlobalsAndPackages() ... DONE
[11:01:27.151] run() for ‘Future’ ...
[11:01:27.151] - state: ‘created’
[11:01:27.152] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:27.152] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:27.152] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:27.152]   - Field: ‘label’
[11:01:27.152]   - Field: ‘local’
[11:01:27.152]   - Field: ‘owner’
[11:01:27.152]   - Field: ‘envir’
[11:01:27.152]   - Field: ‘packages’
[11:01:27.152]   - Field: ‘gc’
[11:01:27.152]   - Field: ‘conditions’
[11:01:27.153]   - Field: ‘expr’
[11:01:27.153]   - Field: ‘uuid’
[11:01:27.153]   - Field: ‘seed’
[11:01:27.153]   - Field: ‘version’
[11:01:27.153]   - Field: ‘result’
[11:01:27.153]   - Field: ‘asynchronous’
[11:01:27.153]   - Field: ‘calls’
[11:01:27.153]   - Field: ‘globals’
[11:01:27.153]   - Field: ‘stdout’
[11:01:27.153]   - Field: ‘earlySignal’
[11:01:27.153]   - Field: ‘lazy’
[11:01:27.153]   - Field: ‘state’
[11:01:27.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:27.154] - Launch lazy future ...
[11:01:27.154] Packages needed by the future expression (n = 0): <none>
[11:01:27.154] Packages needed by future strategies (n = 0): <none>
[11:01:27.154] {
[11:01:27.154]     {
[11:01:27.154]         {
[11:01:27.154]             ...future.startTime <- base::Sys.time()
[11:01:27.154]             {
[11:01:27.154]                 {
[11:01:27.154]                   {
[11:01:27.154]                     base::local({
[11:01:27.154]                       has_future <- base::requireNamespace("future", 
[11:01:27.154]                         quietly = TRUE)
[11:01:27.154]                       if (has_future) {
[11:01:27.154]                         ns <- base::getNamespace("future")
[11:01:27.154]                         version <- ns[[".package"]][["version"]]
[11:01:27.154]                         if (is.null(version)) 
[11:01:27.154]                           version <- utils::packageVersion("future")
[11:01:27.154]                       }
[11:01:27.154]                       else {
[11:01:27.154]                         version <- NULL
[11:01:27.154]                       }
[11:01:27.154]                       if (!has_future || version < "1.8.0") {
[11:01:27.154]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:27.154]                           "", base::R.version$version.string), 
[11:01:27.154]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:27.154]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:27.154]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:27.154]                             "release", "version")], collapse = " "), 
[11:01:27.154]                           hostname = base::Sys.info()[["nodename"]])
[11:01:27.154]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:27.154]                           info)
[11:01:27.154]                         info <- base::paste(info, collapse = "; ")
[11:01:27.154]                         if (!has_future) {
[11:01:27.154]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:27.154]                             info)
[11:01:27.154]                         }
[11:01:27.154]                         else {
[11:01:27.154]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:27.154]                             info, version)
[11:01:27.154]                         }
[11:01:27.154]                         base::stop(msg)
[11:01:27.154]                       }
[11:01:27.154]                     })
[11:01:27.154]                   }
[11:01:27.154]                   ...future.strategy.old <- future::plan("list")
[11:01:27.154]                   options(future.plan = NULL)
[11:01:27.154]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:27.154]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:27.154]                 }
[11:01:27.154]                 ...future.workdir <- getwd()
[11:01:27.154]             }
[11:01:27.154]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:27.154]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:27.154]         }
[11:01:27.154]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:27.154]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:27.154]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:27.154]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:27.154]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:27.154]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:27.154]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:27.154]             base::names(...future.oldOptions))
[11:01:27.154]     }
[11:01:27.154]     if (FALSE) {
[11:01:27.154]     }
[11:01:27.154]     else {
[11:01:27.154]         if (TRUE) {
[11:01:27.154]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:27.154]                 open = "w")
[11:01:27.154]         }
[11:01:27.154]         else {
[11:01:27.154]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:27.154]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:27.154]         }
[11:01:27.154]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:27.154]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:27.154]             base::sink(type = "output", split = FALSE)
[11:01:27.154]             base::close(...future.stdout)
[11:01:27.154]         }, add = TRUE)
[11:01:27.154]     }
[11:01:27.154]     ...future.frame <- base::sys.nframe()
[11:01:27.154]     ...future.conditions <- base::list()
[11:01:27.154]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:27.154]     if (FALSE) {
[11:01:27.154]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:27.154]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:27.154]     }
[11:01:27.154]     ...future.result <- base::tryCatch({
[11:01:27.154]         base::withCallingHandlers({
[11:01:27.154]             ...future.value <- base::withVisible(base::local({
[11:01:27.154]                 1
[11:01:27.154]             }))
[11:01:27.154]             future::FutureResult(value = ...future.value$value, 
[11:01:27.154]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:27.154]                   ...future.rng), globalenv = if (FALSE) 
[11:01:27.154]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:27.154]                     ...future.globalenv.names))
[11:01:27.154]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:27.154]         }, condition = base::local({
[11:01:27.154]             c <- base::c
[11:01:27.154]             inherits <- base::inherits
[11:01:27.154]             invokeRestart <- base::invokeRestart
[11:01:27.154]             length <- base::length
[11:01:27.154]             list <- base::list
[11:01:27.154]             seq.int <- base::seq.int
[11:01:27.154]             signalCondition <- base::signalCondition
[11:01:27.154]             sys.calls <- base::sys.calls
[11:01:27.154]             `[[` <- base::`[[`
[11:01:27.154]             `+` <- base::`+`
[11:01:27.154]             `<<-` <- base::`<<-`
[11:01:27.154]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:27.154]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:27.154]                   3L)]
[11:01:27.154]             }
[11:01:27.154]             function(cond) {
[11:01:27.154]                 is_error <- inherits(cond, "error")
[11:01:27.154]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:27.154]                   NULL)
[11:01:27.154]                 if (is_error) {
[11:01:27.154]                   sessionInformation <- function() {
[11:01:27.154]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:27.154]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:27.154]                       search = base::search(), system = base::Sys.info())
[11:01:27.154]                   }
[11:01:27.154]                   ...future.conditions[[length(...future.conditions) + 
[11:01:27.154]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:27.154]                     cond$call), session = sessionInformation(), 
[11:01:27.154]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:27.154]                   signalCondition(cond)
[11:01:27.154]                 }
[11:01:27.154]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:27.154]                 "immediateCondition"))) {
[11:01:27.154]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:27.154]                   ...future.conditions[[length(...future.conditions) + 
[11:01:27.154]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:27.154]                   if (TRUE && !signal) {
[11:01:27.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:27.154]                     {
[11:01:27.154]                       inherits <- base::inherits
[11:01:27.154]                       invokeRestart <- base::invokeRestart
[11:01:27.154]                       is.null <- base::is.null
[11:01:27.154]                       muffled <- FALSE
[11:01:27.154]                       if (inherits(cond, "message")) {
[11:01:27.154]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:27.154]                         if (muffled) 
[11:01:27.154]                           invokeRestart("muffleMessage")
[11:01:27.154]                       }
[11:01:27.154]                       else if (inherits(cond, "warning")) {
[11:01:27.154]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:27.154]                         if (muffled) 
[11:01:27.154]                           invokeRestart("muffleWarning")
[11:01:27.154]                       }
[11:01:27.154]                       else if (inherits(cond, "condition")) {
[11:01:27.154]                         if (!is.null(pattern)) {
[11:01:27.154]                           computeRestarts <- base::computeRestarts
[11:01:27.154]                           grepl <- base::grepl
[11:01:27.154]                           restarts <- computeRestarts(cond)
[11:01:27.154]                           for (restart in restarts) {
[11:01:27.154]                             name <- restart$name
[11:01:27.154]                             if (is.null(name)) 
[11:01:27.154]                               next
[11:01:27.154]                             if (!grepl(pattern, name)) 
[11:01:27.154]                               next
[11:01:27.154]                             invokeRestart(restart)
[11:01:27.154]                             muffled <- TRUE
[11:01:27.154]                             break
[11:01:27.154]                           }
[11:01:27.154]                         }
[11:01:27.154]                       }
[11:01:27.154]                       invisible(muffled)
[11:01:27.154]                     }
[11:01:27.154]                     muffleCondition(cond, pattern = "^muffle")
[11:01:27.154]                   }
[11:01:27.154]                 }
[11:01:27.154]                 else {
[11:01:27.154]                   if (TRUE) {
[11:01:27.154]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:27.154]                     {
[11:01:27.154]                       inherits <- base::inherits
[11:01:27.154]                       invokeRestart <- base::invokeRestart
[11:01:27.154]                       is.null <- base::is.null
[11:01:27.154]                       muffled <- FALSE
[11:01:27.154]                       if (inherits(cond, "message")) {
[11:01:27.154]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:27.154]                         if (muffled) 
[11:01:27.154]                           invokeRestart("muffleMessage")
[11:01:27.154]                       }
[11:01:27.154]                       else if (inherits(cond, "warning")) {
[11:01:27.154]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:27.154]                         if (muffled) 
[11:01:27.154]                           invokeRestart("muffleWarning")
[11:01:27.154]                       }
[11:01:27.154]                       else if (inherits(cond, "condition")) {
[11:01:27.154]                         if (!is.null(pattern)) {
[11:01:27.154]                           computeRestarts <- base::computeRestarts
[11:01:27.154]                           grepl <- base::grepl
[11:01:27.154]                           restarts <- computeRestarts(cond)
[11:01:27.154]                           for (restart in restarts) {
[11:01:27.154]                             name <- restart$name
[11:01:27.154]                             if (is.null(name)) 
[11:01:27.154]                               next
[11:01:27.154]                             if (!grepl(pattern, name)) 
[11:01:27.154]                               next
[11:01:27.154]                             invokeRestart(restart)
[11:01:27.154]                             muffled <- TRUE
[11:01:27.154]                             break
[11:01:27.154]                           }
[11:01:27.154]                         }
[11:01:27.154]                       }
[11:01:27.154]                       invisible(muffled)
[11:01:27.154]                     }
[11:01:27.154]                     muffleCondition(cond, pattern = "^muffle")
[11:01:27.154]                   }
[11:01:27.154]                 }
[11:01:27.154]             }
[11:01:27.154]         }))
[11:01:27.154]     }, error = function(ex) {
[11:01:27.154]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:27.154]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:27.154]                 ...future.rng), started = ...future.startTime, 
[11:01:27.154]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:27.154]             version = "1.8"), class = "FutureResult")
[11:01:27.154]     }, finally = {
[11:01:27.154]         if (!identical(...future.workdir, getwd())) 
[11:01:27.154]             setwd(...future.workdir)
[11:01:27.154]         {
[11:01:27.154]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:27.154]                 ...future.oldOptions$nwarnings <- NULL
[11:01:27.154]             }
[11:01:27.154]             base::options(...future.oldOptions)
[11:01:27.154]             if (.Platform$OS.type == "windows") {
[11:01:27.154]                 old_names <- names(...future.oldEnvVars)
[11:01:27.154]                 envs <- base::Sys.getenv()
[11:01:27.154]                 names <- names(envs)
[11:01:27.154]                 common <- intersect(names, old_names)
[11:01:27.154]                 added <- setdiff(names, old_names)
[11:01:27.154]                 removed <- setdiff(old_names, names)
[11:01:27.154]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:27.154]                   envs[common]]
[11:01:27.154]                 NAMES <- toupper(changed)
[11:01:27.154]                 args <- list()
[11:01:27.154]                 for (kk in seq_along(NAMES)) {
[11:01:27.154]                   name <- changed[[kk]]
[11:01:27.154]                   NAME <- NAMES[[kk]]
[11:01:27.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.154]                     next
[11:01:27.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:27.154]                 }
[11:01:27.154]                 NAMES <- toupper(added)
[11:01:27.154]                 for (kk in seq_along(NAMES)) {
[11:01:27.154]                   name <- added[[kk]]
[11:01:27.154]                   NAME <- NAMES[[kk]]
[11:01:27.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.154]                     next
[11:01:27.154]                   args[[name]] <- ""
[11:01:27.154]                 }
[11:01:27.154]                 NAMES <- toupper(removed)
[11:01:27.154]                 for (kk in seq_along(NAMES)) {
[11:01:27.154]                   name <- removed[[kk]]
[11:01:27.154]                   NAME <- NAMES[[kk]]
[11:01:27.154]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:27.154]                     next
[11:01:27.154]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:27.154]                 }
[11:01:27.154]                 if (length(args) > 0) 
[11:01:27.154]                   base::do.call(base::Sys.setenv, args = args)
[11:01:27.154]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:27.154]             }
[11:01:27.154]             else {
[11:01:27.154]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:27.154]             }
[11:01:27.154]             {
[11:01:27.154]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:27.154]                   0L) {
[11:01:27.154]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:27.154]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:27.154]                   base::options(opts)
[11:01:27.154]                 }
[11:01:27.154]                 {
[11:01:27.154]                   {
[11:01:27.154]                     NULL
[11:01:27.154]                     RNGkind("Mersenne-Twister")
[11:01:27.154]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:27.154]                       inherits = FALSE)
[11:01:27.154]                   }
[11:01:27.154]                   options(future.plan = NULL)
[11:01:27.154]                   if (is.na(NA_character_)) 
[11:01:27.154]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:27.154]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:27.154]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:27.154]                     .init = FALSE)
[11:01:27.154]                 }
[11:01:27.154]             }
[11:01:27.154]         }
[11:01:27.154]     })
[11:01:27.154]     if (TRUE) {
[11:01:27.154]         base::sink(type = "output", split = FALSE)
[11:01:27.154]         if (TRUE) {
[11:01:27.154]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:27.154]         }
[11:01:27.154]         else {
[11:01:27.154]             ...future.result["stdout"] <- base::list(NULL)
[11:01:27.154]         }
[11:01:27.154]         base::close(...future.stdout)
[11:01:27.154]         ...future.stdout <- NULL
[11:01:27.154]     }
[11:01:27.154]     ...future.result$conditions <- ...future.conditions
[11:01:27.154]     ...future.result$finished <- base::Sys.time()
[11:01:27.154]     ...future.result
[11:01:27.154] }
[11:01:27.156] plan(): Setting new future strategy stack:
[11:01:27.156] List of future strategies:
[11:01:27.156] 1. sequential:
[11:01:27.156]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.156]    - tweaked: FALSE
[11:01:27.156]    - call: NULL
[11:01:27.157] plan(): nbrOfWorkers() = 1
[11:01:27.157] plan(): Setting new future strategy stack:
[11:01:27.157] List of future strategies:
[11:01:27.157] 1. sequential:
[11:01:27.157]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.157]    - tweaked: FALSE
[11:01:27.157]    - call: future::plan("sequential")
[11:01:27.158] plan(): nbrOfWorkers() = 1
[11:01:27.158] SequentialFuture started (and completed)
[11:01:27.158] - Launch lazy future ... done
[11:01:27.158] run() for ‘SequentialFuture’ ... done
> 
> f1 <- futureOf("a", envir = x)
> print(f1)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
> stopifnot(identical(f1, x$a))
> f2 <- futureOf(a, envir = x)
> stopifnot(identical(f2, x$a))
> f3 <- futureOf(x[["a"]])
> stopifnot(identical(f3, x$a))
> f4 <- futureOf(x$a)
> stopifnot(identical(f4, x$a))
> 
> ## Identify all futures
> fs <- futureOf(envir = x)
> print(fs)
$a
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> stopifnot(identical(names(fs), c("a")))
> stopifnot(identical(fs$a, f1))
> 
> fsD <- futureOf(envir = x, drop = TRUE)
> print(fsD)
$a
SequentialFuture:
Label: ‘<none>’
Expression:
{
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: c29bffd2-17df-1cb8-bf0c-59a6a4dfe69b
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’

> stopifnot(all(sapply(fsD, FUN = inherits, "Future")))
> stopifnot(identical(fsD, fs))
> 
> message("*** futureOf() with environment - futures ... DONE")
*** futureOf() with environment - futures ... DONE
> 
> 
> message("*** futureOf() with environment - exceptions ...")
*** futureOf() with environment - exceptions ...
> 
> ## Invalid subset
> res <- tryCatch(futureOf(x[[0]], mustExist = FALSE), error = identity)
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch(futureOf(x[[0]], mustExist = TRUE), error = identity)
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch(futureOf(x[[10]], mustExist = TRUE), error = identity)
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch(futureOf(x[[1 + 2i]], mustExist = TRUE), error = identity)
> stopifnot(inherits(res, "error"))
> 
> message("*** futureOf() with environment - exceptions ... DONE")
*** futureOf() with environment - exceptions ... DONE
> 
> message("*** futureOf() with environment ... DONE")
*** futureOf() with environment ... DONE
> 
> source("incl/end.R")
[11:01:27.161] plan(): Setting new future strategy stack:
[11:01:27.162] List of future strategies:
[11:01:27.162] 1. FutureStrategy:
[11:01:27.162]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:27.162]    - tweaked: FALSE
[11:01:27.162]    - call: future::plan(oplan)
[11:01:27.174] plan(): nbrOfWorkers() = 1
> 
