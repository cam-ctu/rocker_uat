
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:43.382] plan(): Setting new future strategy stack:
[08:27:43.383] List of future strategies:
[08:27:43.383] 1. sequential:
[08:27:43.383]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.383]    - tweaked: FALSE
[08:27:43.383]    - call: future::plan("sequential")
[08:27:43.398] plan(): nbrOfWorkers() = 1
> 
> message("*** futureAssign() ...")
*** futureAssign() ...
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ...")
*** futureAssign() - sequential w/ lazy evaluation ...
> 
> delayedAssign("a", {
+   cat("Delayed assignment evaluated\n")
+   1
+ })
> 
> futureAssign("b", {
+   cat("Future assignment evaluated\n")
+   2
+ }, lazy = TRUE)
[08:27:43.414] getGlobalsAndPackages() ...
[08:27:43.415] Searching for globals...
[08:27:43.421] - globals found: [2] ‘{’, ‘cat’
[08:27:43.421] Searching for globals ... DONE
[08:27:43.421] Resolving globals: FALSE
[08:27:43.422] 
[08:27:43.422] 
[08:27:43.422] getGlobalsAndPackages() ... DONE
> 
> ## Because "lazy future" is used, the expression/value
> ## for 'b' will not be resolved at the point.  For other
> ## types of futures, it may already have been resolved
> cat(sprintf("b = %s\n", b))
[08:27:43.423] run() for ‘Future’ ...
[08:27:43.423] - state: ‘created’
[08:27:43.423] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.424] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.424] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.424]   - Field: ‘label’
[08:27:43.424]   - Field: ‘local’
[08:27:43.424]   - Field: ‘owner’
[08:27:43.424]   - Field: ‘envir’
[08:27:43.424]   - Field: ‘packages’
[08:27:43.424]   - Field: ‘gc’
[08:27:43.424]   - Field: ‘conditions’
[08:27:43.424]   - Field: ‘expr’
[08:27:43.424]   - Field: ‘uuid’
[08:27:43.425]   - Field: ‘seed’
[08:27:43.425]   - Field: ‘version’
[08:27:43.425]   - Field: ‘result’
[08:27:43.425]   - Field: ‘asynchronous’
[08:27:43.425]   - Field: ‘calls’
[08:27:43.425]   - Field: ‘globals’
[08:27:43.425]   - Field: ‘stdout’
[08:27:43.425]   - Field: ‘earlySignal’
[08:27:43.425]   - Field: ‘lazy’
[08:27:43.425]   - Field: ‘state’
[08:27:43.425] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.426] - Launch lazy future ...
[08:27:43.426] Packages needed by the future expression (n = 0): <none>
[08:27:43.426] Packages needed by future strategies (n = 0): <none>
[08:27:43.427] {
[08:27:43.427]     {
[08:27:43.427]         {
[08:27:43.427]             ...future.startTime <- base::Sys.time()
[08:27:43.427]             {
[08:27:43.427]                 {
[08:27:43.427]                   {
[08:27:43.427]                     base::local({
[08:27:43.427]                       has_future <- base::requireNamespace("future", 
[08:27:43.427]                         quietly = TRUE)
[08:27:43.427]                       if (has_future) {
[08:27:43.427]                         ns <- base::getNamespace("future")
[08:27:43.427]                         version <- ns[[".package"]][["version"]]
[08:27:43.427]                         if (is.null(version)) 
[08:27:43.427]                           version <- utils::packageVersion("future")
[08:27:43.427]                       }
[08:27:43.427]                       else {
[08:27:43.427]                         version <- NULL
[08:27:43.427]                       }
[08:27:43.427]                       if (!has_future || version < "1.8.0") {
[08:27:43.427]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.427]                           "", base::R.version$version.string), 
[08:27:43.427]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.427]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.427]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.427]                             "release", "version")], collapse = " "), 
[08:27:43.427]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.427]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.427]                           info)
[08:27:43.427]                         info <- base::paste(info, collapse = "; ")
[08:27:43.427]                         if (!has_future) {
[08:27:43.427]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.427]                             info)
[08:27:43.427]                         }
[08:27:43.427]                         else {
[08:27:43.427]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.427]                             info, version)
[08:27:43.427]                         }
[08:27:43.427]                         base::stop(msg)
[08:27:43.427]                       }
[08:27:43.427]                     })
[08:27:43.427]                   }
[08:27:43.427]                   ...future.strategy.old <- future::plan("list")
[08:27:43.427]                   options(future.plan = NULL)
[08:27:43.427]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.427]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.427]                 }
[08:27:43.427]                 ...future.workdir <- getwd()
[08:27:43.427]             }
[08:27:43.427]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.427]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.427]         }
[08:27:43.427]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.427]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.427]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.427]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.427]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.427]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.427]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.427]             base::names(...future.oldOptions))
[08:27:43.427]     }
[08:27:43.427]     if (FALSE) {
[08:27:43.427]     }
[08:27:43.427]     else {
[08:27:43.427]         if (TRUE) {
[08:27:43.427]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.427]                 open = "w")
[08:27:43.427]         }
[08:27:43.427]         else {
[08:27:43.427]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.427]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.427]         }
[08:27:43.427]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.427]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.427]             base::sink(type = "output", split = FALSE)
[08:27:43.427]             base::close(...future.stdout)
[08:27:43.427]         }, add = TRUE)
[08:27:43.427]     }
[08:27:43.427]     ...future.frame <- base::sys.nframe()
[08:27:43.427]     ...future.conditions <- base::list()
[08:27:43.427]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.427]     if (FALSE) {
[08:27:43.427]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.427]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.427]     }
[08:27:43.427]     ...future.result <- base::tryCatch({
[08:27:43.427]         base::withCallingHandlers({
[08:27:43.427]             ...future.value <- base::withVisible(base::local({
[08:27:43.427]                 cat("Future assignment evaluated\n")
[08:27:43.427]                 2
[08:27:43.427]             }))
[08:27:43.427]             future::FutureResult(value = ...future.value$value, 
[08:27:43.427]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.427]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.427]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.427]                     ...future.globalenv.names))
[08:27:43.427]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.427]         }, condition = base::local({
[08:27:43.427]             c <- base::c
[08:27:43.427]             inherits <- base::inherits
[08:27:43.427]             invokeRestart <- base::invokeRestart
[08:27:43.427]             length <- base::length
[08:27:43.427]             list <- base::list
[08:27:43.427]             seq.int <- base::seq.int
[08:27:43.427]             signalCondition <- base::signalCondition
[08:27:43.427]             sys.calls <- base::sys.calls
[08:27:43.427]             `[[` <- base::`[[`
[08:27:43.427]             `+` <- base::`+`
[08:27:43.427]             `<<-` <- base::`<<-`
[08:27:43.427]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.427]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.427]                   3L)]
[08:27:43.427]             }
[08:27:43.427]             function(cond) {
[08:27:43.427]                 is_error <- inherits(cond, "error")
[08:27:43.427]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.427]                   NULL)
[08:27:43.427]                 if (is_error) {
[08:27:43.427]                   sessionInformation <- function() {
[08:27:43.427]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.427]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.427]                       search = base::search(), system = base::Sys.info())
[08:27:43.427]                   }
[08:27:43.427]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.427]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.427]                     cond$call), session = sessionInformation(), 
[08:27:43.427]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.427]                   signalCondition(cond)
[08:27:43.427]                 }
[08:27:43.427]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.427]                 "immediateCondition"))) {
[08:27:43.427]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.427]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.427]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.427]                   if (TRUE && !signal) {
[08:27:43.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.427]                     {
[08:27:43.427]                       inherits <- base::inherits
[08:27:43.427]                       invokeRestart <- base::invokeRestart
[08:27:43.427]                       is.null <- base::is.null
[08:27:43.427]                       muffled <- FALSE
[08:27:43.427]                       if (inherits(cond, "message")) {
[08:27:43.427]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.427]                         if (muffled) 
[08:27:43.427]                           invokeRestart("muffleMessage")
[08:27:43.427]                       }
[08:27:43.427]                       else if (inherits(cond, "warning")) {
[08:27:43.427]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.427]                         if (muffled) 
[08:27:43.427]                           invokeRestart("muffleWarning")
[08:27:43.427]                       }
[08:27:43.427]                       else if (inherits(cond, "condition")) {
[08:27:43.427]                         if (!is.null(pattern)) {
[08:27:43.427]                           computeRestarts <- base::computeRestarts
[08:27:43.427]                           grepl <- base::grepl
[08:27:43.427]                           restarts <- computeRestarts(cond)
[08:27:43.427]                           for (restart in restarts) {
[08:27:43.427]                             name <- restart$name
[08:27:43.427]                             if (is.null(name)) 
[08:27:43.427]                               next
[08:27:43.427]                             if (!grepl(pattern, name)) 
[08:27:43.427]                               next
[08:27:43.427]                             invokeRestart(restart)
[08:27:43.427]                             muffled <- TRUE
[08:27:43.427]                             break
[08:27:43.427]                           }
[08:27:43.427]                         }
[08:27:43.427]                       }
[08:27:43.427]                       invisible(muffled)
[08:27:43.427]                     }
[08:27:43.427]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.427]                   }
[08:27:43.427]                 }
[08:27:43.427]                 else {
[08:27:43.427]                   if (TRUE) {
[08:27:43.427]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.427]                     {
[08:27:43.427]                       inherits <- base::inherits
[08:27:43.427]                       invokeRestart <- base::invokeRestart
[08:27:43.427]                       is.null <- base::is.null
[08:27:43.427]                       muffled <- FALSE
[08:27:43.427]                       if (inherits(cond, "message")) {
[08:27:43.427]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.427]                         if (muffled) 
[08:27:43.427]                           invokeRestart("muffleMessage")
[08:27:43.427]                       }
[08:27:43.427]                       else if (inherits(cond, "warning")) {
[08:27:43.427]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.427]                         if (muffled) 
[08:27:43.427]                           invokeRestart("muffleWarning")
[08:27:43.427]                       }
[08:27:43.427]                       else if (inherits(cond, "condition")) {
[08:27:43.427]                         if (!is.null(pattern)) {
[08:27:43.427]                           computeRestarts <- base::computeRestarts
[08:27:43.427]                           grepl <- base::grepl
[08:27:43.427]                           restarts <- computeRestarts(cond)
[08:27:43.427]                           for (restart in restarts) {
[08:27:43.427]                             name <- restart$name
[08:27:43.427]                             if (is.null(name)) 
[08:27:43.427]                               next
[08:27:43.427]                             if (!grepl(pattern, name)) 
[08:27:43.427]                               next
[08:27:43.427]                             invokeRestart(restart)
[08:27:43.427]                             muffled <- TRUE
[08:27:43.427]                             break
[08:27:43.427]                           }
[08:27:43.427]                         }
[08:27:43.427]                       }
[08:27:43.427]                       invisible(muffled)
[08:27:43.427]                     }
[08:27:43.427]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.427]                   }
[08:27:43.427]                 }
[08:27:43.427]             }
[08:27:43.427]         }))
[08:27:43.427]     }, error = function(ex) {
[08:27:43.427]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.427]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.427]                 ...future.rng), started = ...future.startTime, 
[08:27:43.427]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.427]             version = "1.8"), class = "FutureResult")
[08:27:43.427]     }, finally = {
[08:27:43.427]         if (!identical(...future.workdir, getwd())) 
[08:27:43.427]             setwd(...future.workdir)
[08:27:43.427]         {
[08:27:43.427]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.427]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.427]             }
[08:27:43.427]             base::options(...future.oldOptions)
[08:27:43.427]             if (.Platform$OS.type == "windows") {
[08:27:43.427]                 old_names <- names(...future.oldEnvVars)
[08:27:43.427]                 envs <- base::Sys.getenv()
[08:27:43.427]                 names <- names(envs)
[08:27:43.427]                 common <- intersect(names, old_names)
[08:27:43.427]                 added <- setdiff(names, old_names)
[08:27:43.427]                 removed <- setdiff(old_names, names)
[08:27:43.427]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.427]                   envs[common]]
[08:27:43.427]                 NAMES <- toupper(changed)
[08:27:43.427]                 args <- list()
[08:27:43.427]                 for (kk in seq_along(NAMES)) {
[08:27:43.427]                   name <- changed[[kk]]
[08:27:43.427]                   NAME <- NAMES[[kk]]
[08:27:43.427]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.427]                     next
[08:27:43.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.427]                 }
[08:27:43.427]                 NAMES <- toupper(added)
[08:27:43.427]                 for (kk in seq_along(NAMES)) {
[08:27:43.427]                   name <- added[[kk]]
[08:27:43.427]                   NAME <- NAMES[[kk]]
[08:27:43.427]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.427]                     next
[08:27:43.427]                   args[[name]] <- ""
[08:27:43.427]                 }
[08:27:43.427]                 NAMES <- toupper(removed)
[08:27:43.427]                 for (kk in seq_along(NAMES)) {
[08:27:43.427]                   name <- removed[[kk]]
[08:27:43.427]                   NAME <- NAMES[[kk]]
[08:27:43.427]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.427]                     next
[08:27:43.427]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.427]                 }
[08:27:43.427]                 if (length(args) > 0) 
[08:27:43.427]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.427]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.427]             }
[08:27:43.427]             else {
[08:27:43.427]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.427]             }
[08:27:43.427]             {
[08:27:43.427]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.427]                   0L) {
[08:27:43.427]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.427]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.427]                   base::options(opts)
[08:27:43.427]                 }
[08:27:43.427]                 {
[08:27:43.427]                   {
[08:27:43.427]                     NULL
[08:27:43.427]                     RNGkind("Mersenne-Twister")
[08:27:43.427]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.427]                       inherits = FALSE)
[08:27:43.427]                   }
[08:27:43.427]                   options(future.plan = NULL)
[08:27:43.427]                   if (is.na(NA_character_)) 
[08:27:43.427]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.427]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.427]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.427]                     .init = FALSE)
[08:27:43.427]                 }
[08:27:43.427]             }
[08:27:43.427]         }
[08:27:43.427]     })
[08:27:43.427]     if (TRUE) {
[08:27:43.427]         base::sink(type = "output", split = FALSE)
[08:27:43.427]         if (TRUE) {
[08:27:43.427]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.427]         }
[08:27:43.427]         else {
[08:27:43.427]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.427]         }
[08:27:43.427]         base::close(...future.stdout)
[08:27:43.427]         ...future.stdout <- NULL
[08:27:43.427]     }
[08:27:43.427]     ...future.result$conditions <- ...future.conditions
[08:27:43.427]     ...future.result$finished <- base::Sys.time()
[08:27:43.427]     ...future.result
[08:27:43.427] }
[08:27:43.429] plan(): Setting new future strategy stack:
[08:27:43.429] List of future strategies:
[08:27:43.429] 1. sequential:
[08:27:43.429]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.429]    - tweaked: FALSE
[08:27:43.429]    - call: NULL
[08:27:43.430] plan(): nbrOfWorkers() = 1
[08:27:43.431] plan(): Setting new future strategy stack:
[08:27:43.431] List of future strategies:
[08:27:43.431] 1. sequential:
[08:27:43.431]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.431]    - tweaked: FALSE
[08:27:43.431]    - call: future::plan("sequential")
[08:27:43.432] plan(): nbrOfWorkers() = 1
[08:27:43.432] SequentialFuture started (and completed)
[08:27:43.432] - Launch lazy future ... done
[08:27:43.432] run() for ‘SequentialFuture’ ... done
Future assignment evaluated
b = 2
> 
> ## The expression/value of 'a' is resolved at this point,
> ## because a delayed assignment (promise) was used.
> cat(sprintf("a = %s\n", a))
Delayed assignment evaluated
a = 1
> 
> stopifnot(identical(a, 1))
> stopifnot(identical(b, 2))
> 
> message("*** futureAssign() - sequential w/ lazy evaluation ... DONE")
*** futureAssign() - sequential w/ lazy evaluation ... DONE
> 
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ...")
*** futureAssign() - lazy = TRUE / FALSE ...
> 
> for (cores in 1:availCores) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+   
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("*** futureAssign() with %s futures ...", sQuote(strategy)))
+     plan(strategy)
+ 
+     ## Potential task name clashes
+     u <- new.env()
+     v <- new.env()
+     futureAssign("a", { 2 }, assign.env = u)
+     futureAssign("a", { 4 }, assign.env = v)
+     
+     cat(sprintf("u$a = %s\n", u$a))
+     cat(sprintf("v$a = %s\n", v$a))
+     
+     stopifnot(identical(u$a, 2))
+     stopifnot(identical(v$a, 4))
+     
+     
+     ## Global variables
+     a <- 1
+     futureAssign("b", { 2 * a })
+     a <- 2
+     stopifnot(b == 2)
+ 
+     ## Explicit lazy evaluation
+     for (lazy in c(FALSE, TRUE)) {
+       a <- 1
+       f <- futureAssign("b", { 2 * a }, lazy = lazy)
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+       
+       ## Set 'lazy' via disposable option
+       options(future.disposable = list(lazy = lazy))
+       a <- 1
+       f <- futureAssign("b", { 2 * a })
+       a <- 2
+       stopifnot(b == 2)
+       stopifnot(f$lazy == lazy || (strategy %in% c("multisession", "multicore") && cores == 1L))
+     }
+ 
+     message(sprintf("*** futureAssign() with %s futures ... DONE", sQuote(strategy)))
+   } # for (strategy in ...)
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
*** futureAssign() with ‘sequential’ futures ...
[08:27:43.459] plan(): Setting new future strategy stack:
[08:27:43.459] List of future strategies:
[08:27:43.459] 1. sequential:
[08:27:43.459]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.459]    - tweaked: FALSE
[08:27:43.459]    - call: plan(strategy)
[08:27:43.472] plan(): nbrOfWorkers() = 1
[08:27:43.472] getGlobalsAndPackages() ...
[08:27:43.472] Searching for globals...
[08:27:43.473] - globals found: [1] ‘{’
[08:27:43.473] Searching for globals ... DONE
[08:27:43.473] Resolving globals: FALSE
[08:27:43.473] 
[08:27:43.473] 
[08:27:43.473] getGlobalsAndPackages() ... DONE
[08:27:43.474] run() for ‘Future’ ...
[08:27:43.474] - state: ‘created’
[08:27:43.474] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.474] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.474] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.474]   - Field: ‘label’
[08:27:43.474]   - Field: ‘local’
[08:27:43.474]   - Field: ‘owner’
[08:27:43.475]   - Field: ‘envir’
[08:27:43.475]   - Field: ‘packages’
[08:27:43.475]   - Field: ‘gc’
[08:27:43.475]   - Field: ‘conditions’
[08:27:43.475]   - Field: ‘expr’
[08:27:43.475]   - Field: ‘uuid’
[08:27:43.475]   - Field: ‘seed’
[08:27:43.475]   - Field: ‘version’
[08:27:43.475]   - Field: ‘result’
[08:27:43.475]   - Field: ‘asynchronous’
[08:27:43.475]   - Field: ‘calls’
[08:27:43.476]   - Field: ‘globals’
[08:27:43.476]   - Field: ‘stdout’
[08:27:43.476]   - Field: ‘earlySignal’
[08:27:43.476]   - Field: ‘lazy’
[08:27:43.476]   - Field: ‘state’
[08:27:43.476] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.476] - Launch lazy future ...
[08:27:43.476] Packages needed by the future expression (n = 0): <none>
[08:27:43.476] Packages needed by future strategies (n = 0): <none>
[08:27:43.477] {
[08:27:43.477]     {
[08:27:43.477]         {
[08:27:43.477]             ...future.startTime <- base::Sys.time()
[08:27:43.477]             {
[08:27:43.477]                 {
[08:27:43.477]                   {
[08:27:43.477]                     base::local({
[08:27:43.477]                       has_future <- base::requireNamespace("future", 
[08:27:43.477]                         quietly = TRUE)
[08:27:43.477]                       if (has_future) {
[08:27:43.477]                         ns <- base::getNamespace("future")
[08:27:43.477]                         version <- ns[[".package"]][["version"]]
[08:27:43.477]                         if (is.null(version)) 
[08:27:43.477]                           version <- utils::packageVersion("future")
[08:27:43.477]                       }
[08:27:43.477]                       else {
[08:27:43.477]                         version <- NULL
[08:27:43.477]                       }
[08:27:43.477]                       if (!has_future || version < "1.8.0") {
[08:27:43.477]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.477]                           "", base::R.version$version.string), 
[08:27:43.477]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.477]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.477]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.477]                             "release", "version")], collapse = " "), 
[08:27:43.477]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.477]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.477]                           info)
[08:27:43.477]                         info <- base::paste(info, collapse = "; ")
[08:27:43.477]                         if (!has_future) {
[08:27:43.477]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.477]                             info)
[08:27:43.477]                         }
[08:27:43.477]                         else {
[08:27:43.477]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.477]                             info, version)
[08:27:43.477]                         }
[08:27:43.477]                         base::stop(msg)
[08:27:43.477]                       }
[08:27:43.477]                     })
[08:27:43.477]                   }
[08:27:43.477]                   ...future.strategy.old <- future::plan("list")
[08:27:43.477]                   options(future.plan = NULL)
[08:27:43.477]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.477]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.477]                 }
[08:27:43.477]                 ...future.workdir <- getwd()
[08:27:43.477]             }
[08:27:43.477]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.477]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.477]         }
[08:27:43.477]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.477]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.477]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.477]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.477]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.477]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.477]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.477]             base::names(...future.oldOptions))
[08:27:43.477]     }
[08:27:43.477]     if (FALSE) {
[08:27:43.477]     }
[08:27:43.477]     else {
[08:27:43.477]         if (TRUE) {
[08:27:43.477]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.477]                 open = "w")
[08:27:43.477]         }
[08:27:43.477]         else {
[08:27:43.477]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.477]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.477]         }
[08:27:43.477]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.477]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.477]             base::sink(type = "output", split = FALSE)
[08:27:43.477]             base::close(...future.stdout)
[08:27:43.477]         }, add = TRUE)
[08:27:43.477]     }
[08:27:43.477]     ...future.frame <- base::sys.nframe()
[08:27:43.477]     ...future.conditions <- base::list()
[08:27:43.477]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.477]     if (FALSE) {
[08:27:43.477]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.477]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.477]     }
[08:27:43.477]     ...future.result <- base::tryCatch({
[08:27:43.477]         base::withCallingHandlers({
[08:27:43.477]             ...future.value <- base::withVisible(base::local({
[08:27:43.477]                 2
[08:27:43.477]             }))
[08:27:43.477]             future::FutureResult(value = ...future.value$value, 
[08:27:43.477]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.477]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.477]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.477]                     ...future.globalenv.names))
[08:27:43.477]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.477]         }, condition = base::local({
[08:27:43.477]             c <- base::c
[08:27:43.477]             inherits <- base::inherits
[08:27:43.477]             invokeRestart <- base::invokeRestart
[08:27:43.477]             length <- base::length
[08:27:43.477]             list <- base::list
[08:27:43.477]             seq.int <- base::seq.int
[08:27:43.477]             signalCondition <- base::signalCondition
[08:27:43.477]             sys.calls <- base::sys.calls
[08:27:43.477]             `[[` <- base::`[[`
[08:27:43.477]             `+` <- base::`+`
[08:27:43.477]             `<<-` <- base::`<<-`
[08:27:43.477]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.477]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.477]                   3L)]
[08:27:43.477]             }
[08:27:43.477]             function(cond) {
[08:27:43.477]                 is_error <- inherits(cond, "error")
[08:27:43.477]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.477]                   NULL)
[08:27:43.477]                 if (is_error) {
[08:27:43.477]                   sessionInformation <- function() {
[08:27:43.477]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.477]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.477]                       search = base::search(), system = base::Sys.info())
[08:27:43.477]                   }
[08:27:43.477]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.477]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.477]                     cond$call), session = sessionInformation(), 
[08:27:43.477]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.477]                   signalCondition(cond)
[08:27:43.477]                 }
[08:27:43.477]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.477]                 "immediateCondition"))) {
[08:27:43.477]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.477]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.477]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.477]                   if (TRUE && !signal) {
[08:27:43.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.477]                     {
[08:27:43.477]                       inherits <- base::inherits
[08:27:43.477]                       invokeRestart <- base::invokeRestart
[08:27:43.477]                       is.null <- base::is.null
[08:27:43.477]                       muffled <- FALSE
[08:27:43.477]                       if (inherits(cond, "message")) {
[08:27:43.477]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.477]                         if (muffled) 
[08:27:43.477]                           invokeRestart("muffleMessage")
[08:27:43.477]                       }
[08:27:43.477]                       else if (inherits(cond, "warning")) {
[08:27:43.477]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.477]                         if (muffled) 
[08:27:43.477]                           invokeRestart("muffleWarning")
[08:27:43.477]                       }
[08:27:43.477]                       else if (inherits(cond, "condition")) {
[08:27:43.477]                         if (!is.null(pattern)) {
[08:27:43.477]                           computeRestarts <- base::computeRestarts
[08:27:43.477]                           grepl <- base::grepl
[08:27:43.477]                           restarts <- computeRestarts(cond)
[08:27:43.477]                           for (restart in restarts) {
[08:27:43.477]                             name <- restart$name
[08:27:43.477]                             if (is.null(name)) 
[08:27:43.477]                               next
[08:27:43.477]                             if (!grepl(pattern, name)) 
[08:27:43.477]                               next
[08:27:43.477]                             invokeRestart(restart)
[08:27:43.477]                             muffled <- TRUE
[08:27:43.477]                             break
[08:27:43.477]                           }
[08:27:43.477]                         }
[08:27:43.477]                       }
[08:27:43.477]                       invisible(muffled)
[08:27:43.477]                     }
[08:27:43.477]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.477]                   }
[08:27:43.477]                 }
[08:27:43.477]                 else {
[08:27:43.477]                   if (TRUE) {
[08:27:43.477]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.477]                     {
[08:27:43.477]                       inherits <- base::inherits
[08:27:43.477]                       invokeRestart <- base::invokeRestart
[08:27:43.477]                       is.null <- base::is.null
[08:27:43.477]                       muffled <- FALSE
[08:27:43.477]                       if (inherits(cond, "message")) {
[08:27:43.477]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.477]                         if (muffled) 
[08:27:43.477]                           invokeRestart("muffleMessage")
[08:27:43.477]                       }
[08:27:43.477]                       else if (inherits(cond, "warning")) {
[08:27:43.477]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.477]                         if (muffled) 
[08:27:43.477]                           invokeRestart("muffleWarning")
[08:27:43.477]                       }
[08:27:43.477]                       else if (inherits(cond, "condition")) {
[08:27:43.477]                         if (!is.null(pattern)) {
[08:27:43.477]                           computeRestarts <- base::computeRestarts
[08:27:43.477]                           grepl <- base::grepl
[08:27:43.477]                           restarts <- computeRestarts(cond)
[08:27:43.477]                           for (restart in restarts) {
[08:27:43.477]                             name <- restart$name
[08:27:43.477]                             if (is.null(name)) 
[08:27:43.477]                               next
[08:27:43.477]                             if (!grepl(pattern, name)) 
[08:27:43.477]                               next
[08:27:43.477]                             invokeRestart(restart)
[08:27:43.477]                             muffled <- TRUE
[08:27:43.477]                             break
[08:27:43.477]                           }
[08:27:43.477]                         }
[08:27:43.477]                       }
[08:27:43.477]                       invisible(muffled)
[08:27:43.477]                     }
[08:27:43.477]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.477]                   }
[08:27:43.477]                 }
[08:27:43.477]             }
[08:27:43.477]         }))
[08:27:43.477]     }, error = function(ex) {
[08:27:43.477]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.477]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.477]                 ...future.rng), started = ...future.startTime, 
[08:27:43.477]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.477]             version = "1.8"), class = "FutureResult")
[08:27:43.477]     }, finally = {
[08:27:43.477]         if (!identical(...future.workdir, getwd())) 
[08:27:43.477]             setwd(...future.workdir)
[08:27:43.477]         {
[08:27:43.477]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.477]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.477]             }
[08:27:43.477]             base::options(...future.oldOptions)
[08:27:43.477]             if (.Platform$OS.type == "windows") {
[08:27:43.477]                 old_names <- names(...future.oldEnvVars)
[08:27:43.477]                 envs <- base::Sys.getenv()
[08:27:43.477]                 names <- names(envs)
[08:27:43.477]                 common <- intersect(names, old_names)
[08:27:43.477]                 added <- setdiff(names, old_names)
[08:27:43.477]                 removed <- setdiff(old_names, names)
[08:27:43.477]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.477]                   envs[common]]
[08:27:43.477]                 NAMES <- toupper(changed)
[08:27:43.477]                 args <- list()
[08:27:43.477]                 for (kk in seq_along(NAMES)) {
[08:27:43.477]                   name <- changed[[kk]]
[08:27:43.477]                   NAME <- NAMES[[kk]]
[08:27:43.477]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.477]                     next
[08:27:43.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.477]                 }
[08:27:43.477]                 NAMES <- toupper(added)
[08:27:43.477]                 for (kk in seq_along(NAMES)) {
[08:27:43.477]                   name <- added[[kk]]
[08:27:43.477]                   NAME <- NAMES[[kk]]
[08:27:43.477]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.477]                     next
[08:27:43.477]                   args[[name]] <- ""
[08:27:43.477]                 }
[08:27:43.477]                 NAMES <- toupper(removed)
[08:27:43.477]                 for (kk in seq_along(NAMES)) {
[08:27:43.477]                   name <- removed[[kk]]
[08:27:43.477]                   NAME <- NAMES[[kk]]
[08:27:43.477]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.477]                     next
[08:27:43.477]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.477]                 }
[08:27:43.477]                 if (length(args) > 0) 
[08:27:43.477]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.477]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.477]             }
[08:27:43.477]             else {
[08:27:43.477]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.477]             }
[08:27:43.477]             {
[08:27:43.477]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.477]                   0L) {
[08:27:43.477]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.477]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.477]                   base::options(opts)
[08:27:43.477]                 }
[08:27:43.477]                 {
[08:27:43.477]                   {
[08:27:43.477]                     NULL
[08:27:43.477]                     RNGkind("Mersenne-Twister")
[08:27:43.477]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.477]                       inherits = FALSE)
[08:27:43.477]                   }
[08:27:43.477]                   options(future.plan = NULL)
[08:27:43.477]                   if (is.na(NA_character_)) 
[08:27:43.477]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.477]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.477]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.477]                     .init = FALSE)
[08:27:43.477]                 }
[08:27:43.477]             }
[08:27:43.477]         }
[08:27:43.477]     })
[08:27:43.477]     if (TRUE) {
[08:27:43.477]         base::sink(type = "output", split = FALSE)
[08:27:43.477]         if (TRUE) {
[08:27:43.477]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.477]         }
[08:27:43.477]         else {
[08:27:43.477]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.477]         }
[08:27:43.477]         base::close(...future.stdout)
[08:27:43.477]         ...future.stdout <- NULL
[08:27:43.477]     }
[08:27:43.477]     ...future.result$conditions <- ...future.conditions
[08:27:43.477]     ...future.result$finished <- base::Sys.time()
[08:27:43.477]     ...future.result
[08:27:43.477] }
[08:27:43.479] plan(): Setting new future strategy stack:
[08:27:43.479] List of future strategies:
[08:27:43.479] 1. sequential:
[08:27:43.479]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.479]    - tweaked: FALSE
[08:27:43.479]    - call: NULL
[08:27:43.479] plan(): nbrOfWorkers() = 1
[08:27:43.480] plan(): Setting new future strategy stack:
[08:27:43.480] List of future strategies:
[08:27:43.480] 1. sequential:
[08:27:43.480]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.480]    - tweaked: FALSE
[08:27:43.480]    - call: plan(strategy)
[08:27:43.481] plan(): nbrOfWorkers() = 1
[08:27:43.481] SequentialFuture started (and completed)
[08:27:43.481] - Launch lazy future ... done
[08:27:43.481] run() for ‘SequentialFuture’ ... done
[08:27:43.481] getGlobalsAndPackages() ...
[08:27:43.481] Searching for globals...
[08:27:43.482] - globals found: [1] ‘{’
[08:27:43.482] Searching for globals ... DONE
[08:27:43.482] Resolving globals: FALSE
[08:27:43.482] 
[08:27:43.482] 
[08:27:43.482] getGlobalsAndPackages() ... DONE
[08:27:43.483] run() for ‘Future’ ...
[08:27:43.483] - state: ‘created’
[08:27:43.483] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.483] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.483] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.483]   - Field: ‘label’
[08:27:43.483]   - Field: ‘local’
[08:27:43.484]   - Field: ‘owner’
[08:27:43.484]   - Field: ‘envir’
[08:27:43.484]   - Field: ‘packages’
[08:27:43.484]   - Field: ‘gc’
[08:27:43.484]   - Field: ‘conditions’
[08:27:43.484]   - Field: ‘expr’
[08:27:43.484]   - Field: ‘uuid’
[08:27:43.484]   - Field: ‘seed’
[08:27:43.484]   - Field: ‘version’
[08:27:43.484]   - Field: ‘result’
[08:27:43.484]   - Field: ‘asynchronous’
[08:27:43.484]   - Field: ‘calls’
[08:27:43.485]   - Field: ‘globals’
[08:27:43.485]   - Field: ‘stdout’
[08:27:43.485]   - Field: ‘earlySignal’
[08:27:43.485]   - Field: ‘lazy’
[08:27:43.485]   - Field: ‘state’
[08:27:43.485] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.485] - Launch lazy future ...
[08:27:43.485] Packages needed by the future expression (n = 0): <none>
[08:27:43.485] Packages needed by future strategies (n = 0): <none>
[08:27:43.486] {
[08:27:43.486]     {
[08:27:43.486]         {
[08:27:43.486]             ...future.startTime <- base::Sys.time()
[08:27:43.486]             {
[08:27:43.486]                 {
[08:27:43.486]                   {
[08:27:43.486]                     base::local({
[08:27:43.486]                       has_future <- base::requireNamespace("future", 
[08:27:43.486]                         quietly = TRUE)
[08:27:43.486]                       if (has_future) {
[08:27:43.486]                         ns <- base::getNamespace("future")
[08:27:43.486]                         version <- ns[[".package"]][["version"]]
[08:27:43.486]                         if (is.null(version)) 
[08:27:43.486]                           version <- utils::packageVersion("future")
[08:27:43.486]                       }
[08:27:43.486]                       else {
[08:27:43.486]                         version <- NULL
[08:27:43.486]                       }
[08:27:43.486]                       if (!has_future || version < "1.8.0") {
[08:27:43.486]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.486]                           "", base::R.version$version.string), 
[08:27:43.486]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.486]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.486]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.486]                             "release", "version")], collapse = " "), 
[08:27:43.486]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.486]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.486]                           info)
[08:27:43.486]                         info <- base::paste(info, collapse = "; ")
[08:27:43.486]                         if (!has_future) {
[08:27:43.486]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.486]                             info)
[08:27:43.486]                         }
[08:27:43.486]                         else {
[08:27:43.486]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.486]                             info, version)
[08:27:43.486]                         }
[08:27:43.486]                         base::stop(msg)
[08:27:43.486]                       }
[08:27:43.486]                     })
[08:27:43.486]                   }
[08:27:43.486]                   ...future.strategy.old <- future::plan("list")
[08:27:43.486]                   options(future.plan = NULL)
[08:27:43.486]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.486]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.486]                 }
[08:27:43.486]                 ...future.workdir <- getwd()
[08:27:43.486]             }
[08:27:43.486]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.486]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.486]         }
[08:27:43.486]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.486]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.486]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.486]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.486]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.486]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.486]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.486]             base::names(...future.oldOptions))
[08:27:43.486]     }
[08:27:43.486]     if (FALSE) {
[08:27:43.486]     }
[08:27:43.486]     else {
[08:27:43.486]         if (TRUE) {
[08:27:43.486]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.486]                 open = "w")
[08:27:43.486]         }
[08:27:43.486]         else {
[08:27:43.486]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.486]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.486]         }
[08:27:43.486]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.486]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.486]             base::sink(type = "output", split = FALSE)
[08:27:43.486]             base::close(...future.stdout)
[08:27:43.486]         }, add = TRUE)
[08:27:43.486]     }
[08:27:43.486]     ...future.frame <- base::sys.nframe()
[08:27:43.486]     ...future.conditions <- base::list()
[08:27:43.486]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.486]     if (FALSE) {
[08:27:43.486]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.486]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.486]     }
[08:27:43.486]     ...future.result <- base::tryCatch({
[08:27:43.486]         base::withCallingHandlers({
[08:27:43.486]             ...future.value <- base::withVisible(base::local({
[08:27:43.486]                 4
[08:27:43.486]             }))
[08:27:43.486]             future::FutureResult(value = ...future.value$value, 
[08:27:43.486]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.486]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.486]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.486]                     ...future.globalenv.names))
[08:27:43.486]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.486]         }, condition = base::local({
[08:27:43.486]             c <- base::c
[08:27:43.486]             inherits <- base::inherits
[08:27:43.486]             invokeRestart <- base::invokeRestart
[08:27:43.486]             length <- base::length
[08:27:43.486]             list <- base::list
[08:27:43.486]             seq.int <- base::seq.int
[08:27:43.486]             signalCondition <- base::signalCondition
[08:27:43.486]             sys.calls <- base::sys.calls
[08:27:43.486]             `[[` <- base::`[[`
[08:27:43.486]             `+` <- base::`+`
[08:27:43.486]             `<<-` <- base::`<<-`
[08:27:43.486]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.486]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.486]                   3L)]
[08:27:43.486]             }
[08:27:43.486]             function(cond) {
[08:27:43.486]                 is_error <- inherits(cond, "error")
[08:27:43.486]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.486]                   NULL)
[08:27:43.486]                 if (is_error) {
[08:27:43.486]                   sessionInformation <- function() {
[08:27:43.486]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.486]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.486]                       search = base::search(), system = base::Sys.info())
[08:27:43.486]                   }
[08:27:43.486]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.486]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.486]                     cond$call), session = sessionInformation(), 
[08:27:43.486]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.486]                   signalCondition(cond)
[08:27:43.486]                 }
[08:27:43.486]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.486]                 "immediateCondition"))) {
[08:27:43.486]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.486]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.486]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.486]                   if (TRUE && !signal) {
[08:27:43.486]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.486]                     {
[08:27:43.486]                       inherits <- base::inherits
[08:27:43.486]                       invokeRestart <- base::invokeRestart
[08:27:43.486]                       is.null <- base::is.null
[08:27:43.486]                       muffled <- FALSE
[08:27:43.486]                       if (inherits(cond, "message")) {
[08:27:43.486]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.486]                         if (muffled) 
[08:27:43.486]                           invokeRestart("muffleMessage")
[08:27:43.486]                       }
[08:27:43.486]                       else if (inherits(cond, "warning")) {
[08:27:43.486]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.486]                         if (muffled) 
[08:27:43.486]                           invokeRestart("muffleWarning")
[08:27:43.486]                       }
[08:27:43.486]                       else if (inherits(cond, "condition")) {
[08:27:43.486]                         if (!is.null(pattern)) {
[08:27:43.486]                           computeRestarts <- base::computeRestarts
[08:27:43.486]                           grepl <- base::grepl
[08:27:43.486]                           restarts <- computeRestarts(cond)
[08:27:43.486]                           for (restart in restarts) {
[08:27:43.486]                             name <- restart$name
[08:27:43.486]                             if (is.null(name)) 
[08:27:43.486]                               next
[08:27:43.486]                             if (!grepl(pattern, name)) 
[08:27:43.486]                               next
[08:27:43.486]                             invokeRestart(restart)
[08:27:43.486]                             muffled <- TRUE
[08:27:43.486]                             break
[08:27:43.486]                           }
[08:27:43.486]                         }
[08:27:43.486]                       }
[08:27:43.486]                       invisible(muffled)
[08:27:43.486]                     }
[08:27:43.486]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.486]                   }
[08:27:43.486]                 }
[08:27:43.486]                 else {
[08:27:43.486]                   if (TRUE) {
[08:27:43.486]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.486]                     {
[08:27:43.486]                       inherits <- base::inherits
[08:27:43.486]                       invokeRestart <- base::invokeRestart
[08:27:43.486]                       is.null <- base::is.null
[08:27:43.486]                       muffled <- FALSE
[08:27:43.486]                       if (inherits(cond, "message")) {
[08:27:43.486]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.486]                         if (muffled) 
[08:27:43.486]                           invokeRestart("muffleMessage")
[08:27:43.486]                       }
[08:27:43.486]                       else if (inherits(cond, "warning")) {
[08:27:43.486]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.486]                         if (muffled) 
[08:27:43.486]                           invokeRestart("muffleWarning")
[08:27:43.486]                       }
[08:27:43.486]                       else if (inherits(cond, "condition")) {
[08:27:43.486]                         if (!is.null(pattern)) {
[08:27:43.486]                           computeRestarts <- base::computeRestarts
[08:27:43.486]                           grepl <- base::grepl
[08:27:43.486]                           restarts <- computeRestarts(cond)
[08:27:43.486]                           for (restart in restarts) {
[08:27:43.486]                             name <- restart$name
[08:27:43.486]                             if (is.null(name)) 
[08:27:43.486]                               next
[08:27:43.486]                             if (!grepl(pattern, name)) 
[08:27:43.486]                               next
[08:27:43.486]                             invokeRestart(restart)
[08:27:43.486]                             muffled <- TRUE
[08:27:43.486]                             break
[08:27:43.486]                           }
[08:27:43.486]                         }
[08:27:43.486]                       }
[08:27:43.486]                       invisible(muffled)
[08:27:43.486]                     }
[08:27:43.486]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.486]                   }
[08:27:43.486]                 }
[08:27:43.486]             }
[08:27:43.486]         }))
[08:27:43.486]     }, error = function(ex) {
[08:27:43.486]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.486]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.486]                 ...future.rng), started = ...future.startTime, 
[08:27:43.486]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.486]             version = "1.8"), class = "FutureResult")
[08:27:43.486]     }, finally = {
[08:27:43.486]         if (!identical(...future.workdir, getwd())) 
[08:27:43.486]             setwd(...future.workdir)
[08:27:43.486]         {
[08:27:43.486]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.486]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.486]             }
[08:27:43.486]             base::options(...future.oldOptions)
[08:27:43.486]             if (.Platform$OS.type == "windows") {
[08:27:43.486]                 old_names <- names(...future.oldEnvVars)
[08:27:43.486]                 envs <- base::Sys.getenv()
[08:27:43.486]                 names <- names(envs)
[08:27:43.486]                 common <- intersect(names, old_names)
[08:27:43.486]                 added <- setdiff(names, old_names)
[08:27:43.486]                 removed <- setdiff(old_names, names)
[08:27:43.486]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.486]                   envs[common]]
[08:27:43.486]                 NAMES <- toupper(changed)
[08:27:43.486]                 args <- list()
[08:27:43.486]                 for (kk in seq_along(NAMES)) {
[08:27:43.486]                   name <- changed[[kk]]
[08:27:43.486]                   NAME <- NAMES[[kk]]
[08:27:43.486]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.486]                     next
[08:27:43.486]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.486]                 }
[08:27:43.486]                 NAMES <- toupper(added)
[08:27:43.486]                 for (kk in seq_along(NAMES)) {
[08:27:43.486]                   name <- added[[kk]]
[08:27:43.486]                   NAME <- NAMES[[kk]]
[08:27:43.486]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.486]                     next
[08:27:43.486]                   args[[name]] <- ""
[08:27:43.486]                 }
[08:27:43.486]                 NAMES <- toupper(removed)
[08:27:43.486]                 for (kk in seq_along(NAMES)) {
[08:27:43.486]                   name <- removed[[kk]]
[08:27:43.486]                   NAME <- NAMES[[kk]]
[08:27:43.486]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.486]                     next
[08:27:43.486]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.486]                 }
[08:27:43.486]                 if (length(args) > 0) 
[08:27:43.486]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.486]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.486]             }
[08:27:43.486]             else {
[08:27:43.486]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.486]             }
[08:27:43.486]             {
[08:27:43.486]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.486]                   0L) {
[08:27:43.486]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.486]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.486]                   base::options(opts)
[08:27:43.486]                 }
[08:27:43.486]                 {
[08:27:43.486]                   {
[08:27:43.486]                     NULL
[08:27:43.486]                     RNGkind("Mersenne-Twister")
[08:27:43.486]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.486]                       inherits = FALSE)
[08:27:43.486]                   }
[08:27:43.486]                   options(future.plan = NULL)
[08:27:43.486]                   if (is.na(NA_character_)) 
[08:27:43.486]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.486]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.486]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.486]                     .init = FALSE)
[08:27:43.486]                 }
[08:27:43.486]             }
[08:27:43.486]         }
[08:27:43.486]     })
[08:27:43.486]     if (TRUE) {
[08:27:43.486]         base::sink(type = "output", split = FALSE)
[08:27:43.486]         if (TRUE) {
[08:27:43.486]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.486]         }
[08:27:43.486]         else {
[08:27:43.486]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.486]         }
[08:27:43.486]         base::close(...future.stdout)
[08:27:43.486]         ...future.stdout <- NULL
[08:27:43.486]     }
[08:27:43.486]     ...future.result$conditions <- ...future.conditions
[08:27:43.486]     ...future.result$finished <- base::Sys.time()
[08:27:43.486]     ...future.result
[08:27:43.486] }
[08:27:43.488] plan(): Setting new future strategy stack:
[08:27:43.488] List of future strategies:
[08:27:43.488] 1. sequential:
[08:27:43.488]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.488]    - tweaked: FALSE
[08:27:43.488]    - call: NULL
[08:27:43.488] plan(): nbrOfWorkers() = 1
[08:27:43.489] plan(): Setting new future strategy stack:
[08:27:43.489] List of future strategies:
[08:27:43.489] 1. sequential:
[08:27:43.489]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.489]    - tweaked: FALSE
[08:27:43.489]    - call: plan(strategy)
[08:27:43.489] plan(): nbrOfWorkers() = 1
[08:27:43.489] SequentialFuture started (and completed)
[08:27:43.490] - Launch lazy future ... done
[08:27:43.490] run() for ‘SequentialFuture’ ... done
u$a = 2
v$a = 4
[08:27:43.490] getGlobalsAndPackages() ...
[08:27:43.490] Searching for globals...
[08:27:43.491] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.491] Searching for globals ... DONE
[08:27:43.491] Resolving globals: FALSE
[08:27:43.492] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.492] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.492] - globals: [1] ‘a’
[08:27:43.493] 
[08:27:43.493] getGlobalsAndPackages() ... DONE
[08:27:43.493] run() for ‘Future’ ...
[08:27:43.493] - state: ‘created’
[08:27:43.493] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.493] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.493] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.494]   - Field: ‘label’
[08:27:43.494]   - Field: ‘local’
[08:27:43.494]   - Field: ‘owner’
[08:27:43.494]   - Field: ‘envir’
[08:27:43.494]   - Field: ‘packages’
[08:27:43.494]   - Field: ‘gc’
[08:27:43.494]   - Field: ‘conditions’
[08:27:43.494]   - Field: ‘expr’
[08:27:43.494]   - Field: ‘uuid’
[08:27:43.494]   - Field: ‘seed’
[08:27:43.494]   - Field: ‘version’
[08:27:43.494]   - Field: ‘result’
[08:27:43.495]   - Field: ‘asynchronous’
[08:27:43.495]   - Field: ‘calls’
[08:27:43.495]   - Field: ‘globals’
[08:27:43.495]   - Field: ‘stdout’
[08:27:43.495]   - Field: ‘earlySignal’
[08:27:43.495]   - Field: ‘lazy’
[08:27:43.495]   - Field: ‘state’
[08:27:43.495] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.495] - Launch lazy future ...
[08:27:43.495] Packages needed by the future expression (n = 0): <none>
[08:27:43.495] Packages needed by future strategies (n = 0): <none>
[08:27:43.496] {
[08:27:43.496]     {
[08:27:43.496]         {
[08:27:43.496]             ...future.startTime <- base::Sys.time()
[08:27:43.496]             {
[08:27:43.496]                 {
[08:27:43.496]                   {
[08:27:43.496]                     base::local({
[08:27:43.496]                       has_future <- base::requireNamespace("future", 
[08:27:43.496]                         quietly = TRUE)
[08:27:43.496]                       if (has_future) {
[08:27:43.496]                         ns <- base::getNamespace("future")
[08:27:43.496]                         version <- ns[[".package"]][["version"]]
[08:27:43.496]                         if (is.null(version)) 
[08:27:43.496]                           version <- utils::packageVersion("future")
[08:27:43.496]                       }
[08:27:43.496]                       else {
[08:27:43.496]                         version <- NULL
[08:27:43.496]                       }
[08:27:43.496]                       if (!has_future || version < "1.8.0") {
[08:27:43.496]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.496]                           "", base::R.version$version.string), 
[08:27:43.496]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.496]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.496]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.496]                             "release", "version")], collapse = " "), 
[08:27:43.496]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.496]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.496]                           info)
[08:27:43.496]                         info <- base::paste(info, collapse = "; ")
[08:27:43.496]                         if (!has_future) {
[08:27:43.496]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.496]                             info)
[08:27:43.496]                         }
[08:27:43.496]                         else {
[08:27:43.496]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.496]                             info, version)
[08:27:43.496]                         }
[08:27:43.496]                         base::stop(msg)
[08:27:43.496]                       }
[08:27:43.496]                     })
[08:27:43.496]                   }
[08:27:43.496]                   ...future.strategy.old <- future::plan("list")
[08:27:43.496]                   options(future.plan = NULL)
[08:27:43.496]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.496]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.496]                 }
[08:27:43.496]                 ...future.workdir <- getwd()
[08:27:43.496]             }
[08:27:43.496]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.496]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.496]         }
[08:27:43.496]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.496]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.496]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.496]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.496]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.496]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.496]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.496]             base::names(...future.oldOptions))
[08:27:43.496]     }
[08:27:43.496]     if (FALSE) {
[08:27:43.496]     }
[08:27:43.496]     else {
[08:27:43.496]         if (TRUE) {
[08:27:43.496]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.496]                 open = "w")
[08:27:43.496]         }
[08:27:43.496]         else {
[08:27:43.496]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.496]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.496]         }
[08:27:43.496]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.496]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.496]             base::sink(type = "output", split = FALSE)
[08:27:43.496]             base::close(...future.stdout)
[08:27:43.496]         }, add = TRUE)
[08:27:43.496]     }
[08:27:43.496]     ...future.frame <- base::sys.nframe()
[08:27:43.496]     ...future.conditions <- base::list()
[08:27:43.496]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.496]     if (FALSE) {
[08:27:43.496]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.496]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.496]     }
[08:27:43.496]     ...future.result <- base::tryCatch({
[08:27:43.496]         base::withCallingHandlers({
[08:27:43.496]             ...future.value <- base::withVisible(base::local({
[08:27:43.496]                 2 * a
[08:27:43.496]             }))
[08:27:43.496]             future::FutureResult(value = ...future.value$value, 
[08:27:43.496]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.496]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.496]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.496]                     ...future.globalenv.names))
[08:27:43.496]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.496]         }, condition = base::local({
[08:27:43.496]             c <- base::c
[08:27:43.496]             inherits <- base::inherits
[08:27:43.496]             invokeRestart <- base::invokeRestart
[08:27:43.496]             length <- base::length
[08:27:43.496]             list <- base::list
[08:27:43.496]             seq.int <- base::seq.int
[08:27:43.496]             signalCondition <- base::signalCondition
[08:27:43.496]             sys.calls <- base::sys.calls
[08:27:43.496]             `[[` <- base::`[[`
[08:27:43.496]             `+` <- base::`+`
[08:27:43.496]             `<<-` <- base::`<<-`
[08:27:43.496]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.496]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.496]                   3L)]
[08:27:43.496]             }
[08:27:43.496]             function(cond) {
[08:27:43.496]                 is_error <- inherits(cond, "error")
[08:27:43.496]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.496]                   NULL)
[08:27:43.496]                 if (is_error) {
[08:27:43.496]                   sessionInformation <- function() {
[08:27:43.496]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.496]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.496]                       search = base::search(), system = base::Sys.info())
[08:27:43.496]                   }
[08:27:43.496]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.496]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.496]                     cond$call), session = sessionInformation(), 
[08:27:43.496]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.496]                   signalCondition(cond)
[08:27:43.496]                 }
[08:27:43.496]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.496]                 "immediateCondition"))) {
[08:27:43.496]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.496]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.496]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.496]                   if (TRUE && !signal) {
[08:27:43.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.496]                     {
[08:27:43.496]                       inherits <- base::inherits
[08:27:43.496]                       invokeRestart <- base::invokeRestart
[08:27:43.496]                       is.null <- base::is.null
[08:27:43.496]                       muffled <- FALSE
[08:27:43.496]                       if (inherits(cond, "message")) {
[08:27:43.496]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.496]                         if (muffled) 
[08:27:43.496]                           invokeRestart("muffleMessage")
[08:27:43.496]                       }
[08:27:43.496]                       else if (inherits(cond, "warning")) {
[08:27:43.496]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.496]                         if (muffled) 
[08:27:43.496]                           invokeRestart("muffleWarning")
[08:27:43.496]                       }
[08:27:43.496]                       else if (inherits(cond, "condition")) {
[08:27:43.496]                         if (!is.null(pattern)) {
[08:27:43.496]                           computeRestarts <- base::computeRestarts
[08:27:43.496]                           grepl <- base::grepl
[08:27:43.496]                           restarts <- computeRestarts(cond)
[08:27:43.496]                           for (restart in restarts) {
[08:27:43.496]                             name <- restart$name
[08:27:43.496]                             if (is.null(name)) 
[08:27:43.496]                               next
[08:27:43.496]                             if (!grepl(pattern, name)) 
[08:27:43.496]                               next
[08:27:43.496]                             invokeRestart(restart)
[08:27:43.496]                             muffled <- TRUE
[08:27:43.496]                             break
[08:27:43.496]                           }
[08:27:43.496]                         }
[08:27:43.496]                       }
[08:27:43.496]                       invisible(muffled)
[08:27:43.496]                     }
[08:27:43.496]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.496]                   }
[08:27:43.496]                 }
[08:27:43.496]                 else {
[08:27:43.496]                   if (TRUE) {
[08:27:43.496]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.496]                     {
[08:27:43.496]                       inherits <- base::inherits
[08:27:43.496]                       invokeRestart <- base::invokeRestart
[08:27:43.496]                       is.null <- base::is.null
[08:27:43.496]                       muffled <- FALSE
[08:27:43.496]                       if (inherits(cond, "message")) {
[08:27:43.496]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.496]                         if (muffled) 
[08:27:43.496]                           invokeRestart("muffleMessage")
[08:27:43.496]                       }
[08:27:43.496]                       else if (inherits(cond, "warning")) {
[08:27:43.496]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.496]                         if (muffled) 
[08:27:43.496]                           invokeRestart("muffleWarning")
[08:27:43.496]                       }
[08:27:43.496]                       else if (inherits(cond, "condition")) {
[08:27:43.496]                         if (!is.null(pattern)) {
[08:27:43.496]                           computeRestarts <- base::computeRestarts
[08:27:43.496]                           grepl <- base::grepl
[08:27:43.496]                           restarts <- computeRestarts(cond)
[08:27:43.496]                           for (restart in restarts) {
[08:27:43.496]                             name <- restart$name
[08:27:43.496]                             if (is.null(name)) 
[08:27:43.496]                               next
[08:27:43.496]                             if (!grepl(pattern, name)) 
[08:27:43.496]                               next
[08:27:43.496]                             invokeRestart(restart)
[08:27:43.496]                             muffled <- TRUE
[08:27:43.496]                             break
[08:27:43.496]                           }
[08:27:43.496]                         }
[08:27:43.496]                       }
[08:27:43.496]                       invisible(muffled)
[08:27:43.496]                     }
[08:27:43.496]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.496]                   }
[08:27:43.496]                 }
[08:27:43.496]             }
[08:27:43.496]         }))
[08:27:43.496]     }, error = function(ex) {
[08:27:43.496]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.496]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.496]                 ...future.rng), started = ...future.startTime, 
[08:27:43.496]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.496]             version = "1.8"), class = "FutureResult")
[08:27:43.496]     }, finally = {
[08:27:43.496]         if (!identical(...future.workdir, getwd())) 
[08:27:43.496]             setwd(...future.workdir)
[08:27:43.496]         {
[08:27:43.496]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.496]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.496]             }
[08:27:43.496]             base::options(...future.oldOptions)
[08:27:43.496]             if (.Platform$OS.type == "windows") {
[08:27:43.496]                 old_names <- names(...future.oldEnvVars)
[08:27:43.496]                 envs <- base::Sys.getenv()
[08:27:43.496]                 names <- names(envs)
[08:27:43.496]                 common <- intersect(names, old_names)
[08:27:43.496]                 added <- setdiff(names, old_names)
[08:27:43.496]                 removed <- setdiff(old_names, names)
[08:27:43.496]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.496]                   envs[common]]
[08:27:43.496]                 NAMES <- toupper(changed)
[08:27:43.496]                 args <- list()
[08:27:43.496]                 for (kk in seq_along(NAMES)) {
[08:27:43.496]                   name <- changed[[kk]]
[08:27:43.496]                   NAME <- NAMES[[kk]]
[08:27:43.496]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.496]                     next
[08:27:43.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.496]                 }
[08:27:43.496]                 NAMES <- toupper(added)
[08:27:43.496]                 for (kk in seq_along(NAMES)) {
[08:27:43.496]                   name <- added[[kk]]
[08:27:43.496]                   NAME <- NAMES[[kk]]
[08:27:43.496]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.496]                     next
[08:27:43.496]                   args[[name]] <- ""
[08:27:43.496]                 }
[08:27:43.496]                 NAMES <- toupper(removed)
[08:27:43.496]                 for (kk in seq_along(NAMES)) {
[08:27:43.496]                   name <- removed[[kk]]
[08:27:43.496]                   NAME <- NAMES[[kk]]
[08:27:43.496]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.496]                     next
[08:27:43.496]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.496]                 }
[08:27:43.496]                 if (length(args) > 0) 
[08:27:43.496]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.496]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.496]             }
[08:27:43.496]             else {
[08:27:43.496]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.496]             }
[08:27:43.496]             {
[08:27:43.496]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.496]                   0L) {
[08:27:43.496]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.496]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.496]                   base::options(opts)
[08:27:43.496]                 }
[08:27:43.496]                 {
[08:27:43.496]                   {
[08:27:43.496]                     NULL
[08:27:43.496]                     RNGkind("Mersenne-Twister")
[08:27:43.496]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.496]                       inherits = FALSE)
[08:27:43.496]                   }
[08:27:43.496]                   options(future.plan = NULL)
[08:27:43.496]                   if (is.na(NA_character_)) 
[08:27:43.496]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.496]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.496]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.496]                     .init = FALSE)
[08:27:43.496]                 }
[08:27:43.496]             }
[08:27:43.496]         }
[08:27:43.496]     })
[08:27:43.496]     if (TRUE) {
[08:27:43.496]         base::sink(type = "output", split = FALSE)
[08:27:43.496]         if (TRUE) {
[08:27:43.496]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.496]         }
[08:27:43.496]         else {
[08:27:43.496]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.496]         }
[08:27:43.496]         base::close(...future.stdout)
[08:27:43.496]         ...future.stdout <- NULL
[08:27:43.496]     }
[08:27:43.496]     ...future.result$conditions <- ...future.conditions
[08:27:43.496]     ...future.result$finished <- base::Sys.time()
[08:27:43.496]     ...future.result
[08:27:43.496] }
[08:27:43.498] assign_globals() ...
[08:27:43.498] List of 1
[08:27:43.498]  $ a: num 1
[08:27:43.498]  - attr(*, "where")=List of 1
[08:27:43.498]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.498]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.498]  - attr(*, "resolved")= logi FALSE
[08:27:43.498]  - attr(*, "total_size")= num 39
[08:27:43.498]  - attr(*, "already-done")= logi TRUE
[08:27:43.505] - copied ‘a’ to environment
[08:27:43.505] assign_globals() ... done
[08:27:43.505] plan(): Setting new future strategy stack:
[08:27:43.505] List of future strategies:
[08:27:43.505] 1. sequential:
[08:27:43.505]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.505]    - tweaked: FALSE
[08:27:43.505]    - call: NULL
[08:27:43.505] plan(): nbrOfWorkers() = 1
[08:27:43.506] plan(): Setting new future strategy stack:
[08:27:43.506] List of future strategies:
[08:27:43.506] 1. sequential:
[08:27:43.506]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.506]    - tweaked: FALSE
[08:27:43.506]    - call: plan(strategy)
[08:27:43.507] plan(): nbrOfWorkers() = 1
[08:27:43.507] SequentialFuture started (and completed)
[08:27:43.507] - Launch lazy future ... done
[08:27:43.507] run() for ‘SequentialFuture’ ... done
[08:27:43.508] getGlobalsAndPackages() ...
[08:27:43.508] Searching for globals...
[08:27:43.508] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.509] Searching for globals ... DONE
[08:27:43.509] Resolving globals: FALSE
[08:27:43.509] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.509] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.509] - globals: [1] ‘a’
[08:27:43.510] 
[08:27:43.510] getGlobalsAndPackages() ... DONE
[08:27:43.510] run() for ‘Future’ ...
[08:27:43.510] - state: ‘created’
[08:27:43.510] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.510] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.510] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.511]   - Field: ‘label’
[08:27:43.511]   - Field: ‘local’
[08:27:43.511]   - Field: ‘owner’
[08:27:43.511]   - Field: ‘envir’
[08:27:43.511]   - Field: ‘packages’
[08:27:43.511]   - Field: ‘gc’
[08:27:43.511]   - Field: ‘conditions’
[08:27:43.511]   - Field: ‘expr’
[08:27:43.511]   - Field: ‘uuid’
[08:27:43.511]   - Field: ‘seed’
[08:27:43.511]   - Field: ‘version’
[08:27:43.512]   - Field: ‘result’
[08:27:43.512]   - Field: ‘asynchronous’
[08:27:43.512]   - Field: ‘calls’
[08:27:43.512]   - Field: ‘globals’
[08:27:43.512]   - Field: ‘stdout’
[08:27:43.512]   - Field: ‘earlySignal’
[08:27:43.512]   - Field: ‘lazy’
[08:27:43.512]   - Field: ‘state’
[08:27:43.512] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.512] - Launch lazy future ...
[08:27:43.513] Packages needed by the future expression (n = 0): <none>
[08:27:43.513] Packages needed by future strategies (n = 0): <none>
[08:27:43.513] {
[08:27:43.513]     {
[08:27:43.513]         {
[08:27:43.513]             ...future.startTime <- base::Sys.time()
[08:27:43.513]             {
[08:27:43.513]                 {
[08:27:43.513]                   {
[08:27:43.513]                     base::local({
[08:27:43.513]                       has_future <- base::requireNamespace("future", 
[08:27:43.513]                         quietly = TRUE)
[08:27:43.513]                       if (has_future) {
[08:27:43.513]                         ns <- base::getNamespace("future")
[08:27:43.513]                         version <- ns[[".package"]][["version"]]
[08:27:43.513]                         if (is.null(version)) 
[08:27:43.513]                           version <- utils::packageVersion("future")
[08:27:43.513]                       }
[08:27:43.513]                       else {
[08:27:43.513]                         version <- NULL
[08:27:43.513]                       }
[08:27:43.513]                       if (!has_future || version < "1.8.0") {
[08:27:43.513]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.513]                           "", base::R.version$version.string), 
[08:27:43.513]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.513]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.513]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.513]                             "release", "version")], collapse = " "), 
[08:27:43.513]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.513]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.513]                           info)
[08:27:43.513]                         info <- base::paste(info, collapse = "; ")
[08:27:43.513]                         if (!has_future) {
[08:27:43.513]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.513]                             info)
[08:27:43.513]                         }
[08:27:43.513]                         else {
[08:27:43.513]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.513]                             info, version)
[08:27:43.513]                         }
[08:27:43.513]                         base::stop(msg)
[08:27:43.513]                       }
[08:27:43.513]                     })
[08:27:43.513]                   }
[08:27:43.513]                   ...future.strategy.old <- future::plan("list")
[08:27:43.513]                   options(future.plan = NULL)
[08:27:43.513]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.513]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.513]                 }
[08:27:43.513]                 ...future.workdir <- getwd()
[08:27:43.513]             }
[08:27:43.513]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.513]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.513]         }
[08:27:43.513]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.513]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.513]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.513]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.513]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.513]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.513]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.513]             base::names(...future.oldOptions))
[08:27:43.513]     }
[08:27:43.513]     if (FALSE) {
[08:27:43.513]     }
[08:27:43.513]     else {
[08:27:43.513]         if (TRUE) {
[08:27:43.513]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.513]                 open = "w")
[08:27:43.513]         }
[08:27:43.513]         else {
[08:27:43.513]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.513]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.513]         }
[08:27:43.513]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.513]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.513]             base::sink(type = "output", split = FALSE)
[08:27:43.513]             base::close(...future.stdout)
[08:27:43.513]         }, add = TRUE)
[08:27:43.513]     }
[08:27:43.513]     ...future.frame <- base::sys.nframe()
[08:27:43.513]     ...future.conditions <- base::list()
[08:27:43.513]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.513]     if (FALSE) {
[08:27:43.513]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.513]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.513]     }
[08:27:43.513]     ...future.result <- base::tryCatch({
[08:27:43.513]         base::withCallingHandlers({
[08:27:43.513]             ...future.value <- base::withVisible(base::local({
[08:27:43.513]                 2 * a
[08:27:43.513]             }))
[08:27:43.513]             future::FutureResult(value = ...future.value$value, 
[08:27:43.513]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.513]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.513]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.513]                     ...future.globalenv.names))
[08:27:43.513]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.513]         }, condition = base::local({
[08:27:43.513]             c <- base::c
[08:27:43.513]             inherits <- base::inherits
[08:27:43.513]             invokeRestart <- base::invokeRestart
[08:27:43.513]             length <- base::length
[08:27:43.513]             list <- base::list
[08:27:43.513]             seq.int <- base::seq.int
[08:27:43.513]             signalCondition <- base::signalCondition
[08:27:43.513]             sys.calls <- base::sys.calls
[08:27:43.513]             `[[` <- base::`[[`
[08:27:43.513]             `+` <- base::`+`
[08:27:43.513]             `<<-` <- base::`<<-`
[08:27:43.513]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.513]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.513]                   3L)]
[08:27:43.513]             }
[08:27:43.513]             function(cond) {
[08:27:43.513]                 is_error <- inherits(cond, "error")
[08:27:43.513]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.513]                   NULL)
[08:27:43.513]                 if (is_error) {
[08:27:43.513]                   sessionInformation <- function() {
[08:27:43.513]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.513]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.513]                       search = base::search(), system = base::Sys.info())
[08:27:43.513]                   }
[08:27:43.513]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.513]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.513]                     cond$call), session = sessionInformation(), 
[08:27:43.513]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.513]                   signalCondition(cond)
[08:27:43.513]                 }
[08:27:43.513]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.513]                 "immediateCondition"))) {
[08:27:43.513]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.513]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.513]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.513]                   if (TRUE && !signal) {
[08:27:43.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.513]                     {
[08:27:43.513]                       inherits <- base::inherits
[08:27:43.513]                       invokeRestart <- base::invokeRestart
[08:27:43.513]                       is.null <- base::is.null
[08:27:43.513]                       muffled <- FALSE
[08:27:43.513]                       if (inherits(cond, "message")) {
[08:27:43.513]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.513]                         if (muffled) 
[08:27:43.513]                           invokeRestart("muffleMessage")
[08:27:43.513]                       }
[08:27:43.513]                       else if (inherits(cond, "warning")) {
[08:27:43.513]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.513]                         if (muffled) 
[08:27:43.513]                           invokeRestart("muffleWarning")
[08:27:43.513]                       }
[08:27:43.513]                       else if (inherits(cond, "condition")) {
[08:27:43.513]                         if (!is.null(pattern)) {
[08:27:43.513]                           computeRestarts <- base::computeRestarts
[08:27:43.513]                           grepl <- base::grepl
[08:27:43.513]                           restarts <- computeRestarts(cond)
[08:27:43.513]                           for (restart in restarts) {
[08:27:43.513]                             name <- restart$name
[08:27:43.513]                             if (is.null(name)) 
[08:27:43.513]                               next
[08:27:43.513]                             if (!grepl(pattern, name)) 
[08:27:43.513]                               next
[08:27:43.513]                             invokeRestart(restart)
[08:27:43.513]                             muffled <- TRUE
[08:27:43.513]                             break
[08:27:43.513]                           }
[08:27:43.513]                         }
[08:27:43.513]                       }
[08:27:43.513]                       invisible(muffled)
[08:27:43.513]                     }
[08:27:43.513]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.513]                   }
[08:27:43.513]                 }
[08:27:43.513]                 else {
[08:27:43.513]                   if (TRUE) {
[08:27:43.513]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.513]                     {
[08:27:43.513]                       inherits <- base::inherits
[08:27:43.513]                       invokeRestart <- base::invokeRestart
[08:27:43.513]                       is.null <- base::is.null
[08:27:43.513]                       muffled <- FALSE
[08:27:43.513]                       if (inherits(cond, "message")) {
[08:27:43.513]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.513]                         if (muffled) 
[08:27:43.513]                           invokeRestart("muffleMessage")
[08:27:43.513]                       }
[08:27:43.513]                       else if (inherits(cond, "warning")) {
[08:27:43.513]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.513]                         if (muffled) 
[08:27:43.513]                           invokeRestart("muffleWarning")
[08:27:43.513]                       }
[08:27:43.513]                       else if (inherits(cond, "condition")) {
[08:27:43.513]                         if (!is.null(pattern)) {
[08:27:43.513]                           computeRestarts <- base::computeRestarts
[08:27:43.513]                           grepl <- base::grepl
[08:27:43.513]                           restarts <- computeRestarts(cond)
[08:27:43.513]                           for (restart in restarts) {
[08:27:43.513]                             name <- restart$name
[08:27:43.513]                             if (is.null(name)) 
[08:27:43.513]                               next
[08:27:43.513]                             if (!grepl(pattern, name)) 
[08:27:43.513]                               next
[08:27:43.513]                             invokeRestart(restart)
[08:27:43.513]                             muffled <- TRUE
[08:27:43.513]                             break
[08:27:43.513]                           }
[08:27:43.513]                         }
[08:27:43.513]                       }
[08:27:43.513]                       invisible(muffled)
[08:27:43.513]                     }
[08:27:43.513]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.513]                   }
[08:27:43.513]                 }
[08:27:43.513]             }
[08:27:43.513]         }))
[08:27:43.513]     }, error = function(ex) {
[08:27:43.513]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.513]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.513]                 ...future.rng), started = ...future.startTime, 
[08:27:43.513]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.513]             version = "1.8"), class = "FutureResult")
[08:27:43.513]     }, finally = {
[08:27:43.513]         if (!identical(...future.workdir, getwd())) 
[08:27:43.513]             setwd(...future.workdir)
[08:27:43.513]         {
[08:27:43.513]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.513]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.513]             }
[08:27:43.513]             base::options(...future.oldOptions)
[08:27:43.513]             if (.Platform$OS.type == "windows") {
[08:27:43.513]                 old_names <- names(...future.oldEnvVars)
[08:27:43.513]                 envs <- base::Sys.getenv()
[08:27:43.513]                 names <- names(envs)
[08:27:43.513]                 common <- intersect(names, old_names)
[08:27:43.513]                 added <- setdiff(names, old_names)
[08:27:43.513]                 removed <- setdiff(old_names, names)
[08:27:43.513]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.513]                   envs[common]]
[08:27:43.513]                 NAMES <- toupper(changed)
[08:27:43.513]                 args <- list()
[08:27:43.513]                 for (kk in seq_along(NAMES)) {
[08:27:43.513]                   name <- changed[[kk]]
[08:27:43.513]                   NAME <- NAMES[[kk]]
[08:27:43.513]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.513]                     next
[08:27:43.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.513]                 }
[08:27:43.513]                 NAMES <- toupper(added)
[08:27:43.513]                 for (kk in seq_along(NAMES)) {
[08:27:43.513]                   name <- added[[kk]]
[08:27:43.513]                   NAME <- NAMES[[kk]]
[08:27:43.513]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.513]                     next
[08:27:43.513]                   args[[name]] <- ""
[08:27:43.513]                 }
[08:27:43.513]                 NAMES <- toupper(removed)
[08:27:43.513]                 for (kk in seq_along(NAMES)) {
[08:27:43.513]                   name <- removed[[kk]]
[08:27:43.513]                   NAME <- NAMES[[kk]]
[08:27:43.513]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.513]                     next
[08:27:43.513]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.513]                 }
[08:27:43.513]                 if (length(args) > 0) 
[08:27:43.513]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.513]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.513]             }
[08:27:43.513]             else {
[08:27:43.513]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.513]             }
[08:27:43.513]             {
[08:27:43.513]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.513]                   0L) {
[08:27:43.513]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.513]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.513]                   base::options(opts)
[08:27:43.513]                 }
[08:27:43.513]                 {
[08:27:43.513]                   {
[08:27:43.513]                     NULL
[08:27:43.513]                     RNGkind("Mersenne-Twister")
[08:27:43.513]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.513]                       inherits = FALSE)
[08:27:43.513]                   }
[08:27:43.513]                   options(future.plan = NULL)
[08:27:43.513]                   if (is.na(NA_character_)) 
[08:27:43.513]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.513]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.513]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.513]                     .init = FALSE)
[08:27:43.513]                 }
[08:27:43.513]             }
[08:27:43.513]         }
[08:27:43.513]     })
[08:27:43.513]     if (TRUE) {
[08:27:43.513]         base::sink(type = "output", split = FALSE)
[08:27:43.513]         if (TRUE) {
[08:27:43.513]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.513]         }
[08:27:43.513]         else {
[08:27:43.513]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.513]         }
[08:27:43.513]         base::close(...future.stdout)
[08:27:43.513]         ...future.stdout <- NULL
[08:27:43.513]     }
[08:27:43.513]     ...future.result$conditions <- ...future.conditions
[08:27:43.513]     ...future.result$finished <- base::Sys.time()
[08:27:43.513]     ...future.result
[08:27:43.513] }
[08:27:43.515] assign_globals() ...
[08:27:43.515] List of 1
[08:27:43.515]  $ a: num 1
[08:27:43.515]  - attr(*, "where")=List of 1
[08:27:43.515]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.515]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.515]  - attr(*, "resolved")= logi FALSE
[08:27:43.515]  - attr(*, "total_size")= num 39
[08:27:43.515]  - attr(*, "already-done")= logi TRUE
[08:27:43.517] - copied ‘a’ to environment
[08:27:43.517] assign_globals() ... done
[08:27:43.518] plan(): Setting new future strategy stack:
[08:27:43.518] List of future strategies:
[08:27:43.518] 1. sequential:
[08:27:43.518]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.518]    - tweaked: FALSE
[08:27:43.518]    - call: NULL
[08:27:43.518] plan(): nbrOfWorkers() = 1
[08:27:43.519] plan(): Setting new future strategy stack:
[08:27:43.519] List of future strategies:
[08:27:43.519] 1. sequential:
[08:27:43.519]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.519]    - tweaked: FALSE
[08:27:43.519]    - call: plan(strategy)
[08:27:43.519] plan(): nbrOfWorkers() = 1
[08:27:43.519] SequentialFuture started (and completed)
[08:27:43.520] - Launch lazy future ... done
[08:27:43.520] run() for ‘SequentialFuture’ ... done
[08:27:43.520] getGlobalsAndPackages() ...
[08:27:43.520] Searching for globals...
[08:27:43.521] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.521] Searching for globals ... DONE
[08:27:43.521] Resolving globals: FALSE
[08:27:43.521] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.522] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.522] - globals: [1] ‘a’
[08:27:43.522] 
[08:27:43.522] getGlobalsAndPackages() ... DONE
[08:27:43.522] run() for ‘Future’ ...
[08:27:43.522] - state: ‘created’
[08:27:43.522] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.523] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.523] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.523]   - Field: ‘label’
[08:27:43.523]   - Field: ‘local’
[08:27:43.523]   - Field: ‘owner’
[08:27:43.523]   - Field: ‘envir’
[08:27:43.523]   - Field: ‘packages’
[08:27:43.523]   - Field: ‘gc’
[08:27:43.523]   - Field: ‘conditions’
[08:27:43.524]   - Field: ‘expr’
[08:27:43.524]   - Field: ‘uuid’
[08:27:43.524]   - Field: ‘seed’
[08:27:43.524]   - Field: ‘version’
[08:27:43.524]   - Field: ‘result’
[08:27:43.524]   - Field: ‘asynchronous’
[08:27:43.524]   - Field: ‘calls’
[08:27:43.524]   - Field: ‘globals’
[08:27:43.524]   - Field: ‘stdout’
[08:27:43.524]   - Field: ‘earlySignal’
[08:27:43.524]   - Field: ‘lazy’
[08:27:43.525]   - Field: ‘state’
[08:27:43.525] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.525] - Launch lazy future ...
[08:27:43.525] Packages needed by the future expression (n = 0): <none>
[08:27:43.525] Packages needed by future strategies (n = 0): <none>
[08:27:43.525] {
[08:27:43.525]     {
[08:27:43.525]         {
[08:27:43.525]             ...future.startTime <- base::Sys.time()
[08:27:43.525]             {
[08:27:43.525]                 {
[08:27:43.525]                   {
[08:27:43.525]                     base::local({
[08:27:43.525]                       has_future <- base::requireNamespace("future", 
[08:27:43.525]                         quietly = TRUE)
[08:27:43.525]                       if (has_future) {
[08:27:43.525]                         ns <- base::getNamespace("future")
[08:27:43.525]                         version <- ns[[".package"]][["version"]]
[08:27:43.525]                         if (is.null(version)) 
[08:27:43.525]                           version <- utils::packageVersion("future")
[08:27:43.525]                       }
[08:27:43.525]                       else {
[08:27:43.525]                         version <- NULL
[08:27:43.525]                       }
[08:27:43.525]                       if (!has_future || version < "1.8.0") {
[08:27:43.525]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.525]                           "", base::R.version$version.string), 
[08:27:43.525]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.525]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.525]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.525]                             "release", "version")], collapse = " "), 
[08:27:43.525]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.525]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.525]                           info)
[08:27:43.525]                         info <- base::paste(info, collapse = "; ")
[08:27:43.525]                         if (!has_future) {
[08:27:43.525]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.525]                             info)
[08:27:43.525]                         }
[08:27:43.525]                         else {
[08:27:43.525]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.525]                             info, version)
[08:27:43.525]                         }
[08:27:43.525]                         base::stop(msg)
[08:27:43.525]                       }
[08:27:43.525]                     })
[08:27:43.525]                   }
[08:27:43.525]                   ...future.strategy.old <- future::plan("list")
[08:27:43.525]                   options(future.plan = NULL)
[08:27:43.525]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.525]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.525]                 }
[08:27:43.525]                 ...future.workdir <- getwd()
[08:27:43.525]             }
[08:27:43.525]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.525]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.525]         }
[08:27:43.525]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.525]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.525]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.525]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.525]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.525]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.525]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.525]             base::names(...future.oldOptions))
[08:27:43.525]     }
[08:27:43.525]     if (FALSE) {
[08:27:43.525]     }
[08:27:43.525]     else {
[08:27:43.525]         if (TRUE) {
[08:27:43.525]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.525]                 open = "w")
[08:27:43.525]         }
[08:27:43.525]         else {
[08:27:43.525]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.525]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.525]         }
[08:27:43.525]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.525]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.525]             base::sink(type = "output", split = FALSE)
[08:27:43.525]             base::close(...future.stdout)
[08:27:43.525]         }, add = TRUE)
[08:27:43.525]     }
[08:27:43.525]     ...future.frame <- base::sys.nframe()
[08:27:43.525]     ...future.conditions <- base::list()
[08:27:43.525]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.525]     if (FALSE) {
[08:27:43.525]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.525]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.525]     }
[08:27:43.525]     ...future.result <- base::tryCatch({
[08:27:43.525]         base::withCallingHandlers({
[08:27:43.525]             ...future.value <- base::withVisible(base::local({
[08:27:43.525]                 2 * a
[08:27:43.525]             }))
[08:27:43.525]             future::FutureResult(value = ...future.value$value, 
[08:27:43.525]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.525]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.525]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.525]                     ...future.globalenv.names))
[08:27:43.525]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.525]         }, condition = base::local({
[08:27:43.525]             c <- base::c
[08:27:43.525]             inherits <- base::inherits
[08:27:43.525]             invokeRestart <- base::invokeRestart
[08:27:43.525]             length <- base::length
[08:27:43.525]             list <- base::list
[08:27:43.525]             seq.int <- base::seq.int
[08:27:43.525]             signalCondition <- base::signalCondition
[08:27:43.525]             sys.calls <- base::sys.calls
[08:27:43.525]             `[[` <- base::`[[`
[08:27:43.525]             `+` <- base::`+`
[08:27:43.525]             `<<-` <- base::`<<-`
[08:27:43.525]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.525]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.525]                   3L)]
[08:27:43.525]             }
[08:27:43.525]             function(cond) {
[08:27:43.525]                 is_error <- inherits(cond, "error")
[08:27:43.525]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.525]                   NULL)
[08:27:43.525]                 if (is_error) {
[08:27:43.525]                   sessionInformation <- function() {
[08:27:43.525]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.525]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.525]                       search = base::search(), system = base::Sys.info())
[08:27:43.525]                   }
[08:27:43.525]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.525]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.525]                     cond$call), session = sessionInformation(), 
[08:27:43.525]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.525]                   signalCondition(cond)
[08:27:43.525]                 }
[08:27:43.525]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.525]                 "immediateCondition"))) {
[08:27:43.525]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.525]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.525]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.525]                   if (TRUE && !signal) {
[08:27:43.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.525]                     {
[08:27:43.525]                       inherits <- base::inherits
[08:27:43.525]                       invokeRestart <- base::invokeRestart
[08:27:43.525]                       is.null <- base::is.null
[08:27:43.525]                       muffled <- FALSE
[08:27:43.525]                       if (inherits(cond, "message")) {
[08:27:43.525]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.525]                         if (muffled) 
[08:27:43.525]                           invokeRestart("muffleMessage")
[08:27:43.525]                       }
[08:27:43.525]                       else if (inherits(cond, "warning")) {
[08:27:43.525]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.525]                         if (muffled) 
[08:27:43.525]                           invokeRestart("muffleWarning")
[08:27:43.525]                       }
[08:27:43.525]                       else if (inherits(cond, "condition")) {
[08:27:43.525]                         if (!is.null(pattern)) {
[08:27:43.525]                           computeRestarts <- base::computeRestarts
[08:27:43.525]                           grepl <- base::grepl
[08:27:43.525]                           restarts <- computeRestarts(cond)
[08:27:43.525]                           for (restart in restarts) {
[08:27:43.525]                             name <- restart$name
[08:27:43.525]                             if (is.null(name)) 
[08:27:43.525]                               next
[08:27:43.525]                             if (!grepl(pattern, name)) 
[08:27:43.525]                               next
[08:27:43.525]                             invokeRestart(restart)
[08:27:43.525]                             muffled <- TRUE
[08:27:43.525]                             break
[08:27:43.525]                           }
[08:27:43.525]                         }
[08:27:43.525]                       }
[08:27:43.525]                       invisible(muffled)
[08:27:43.525]                     }
[08:27:43.525]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.525]                   }
[08:27:43.525]                 }
[08:27:43.525]                 else {
[08:27:43.525]                   if (TRUE) {
[08:27:43.525]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.525]                     {
[08:27:43.525]                       inherits <- base::inherits
[08:27:43.525]                       invokeRestart <- base::invokeRestart
[08:27:43.525]                       is.null <- base::is.null
[08:27:43.525]                       muffled <- FALSE
[08:27:43.525]                       if (inherits(cond, "message")) {
[08:27:43.525]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.525]                         if (muffled) 
[08:27:43.525]                           invokeRestart("muffleMessage")
[08:27:43.525]                       }
[08:27:43.525]                       else if (inherits(cond, "warning")) {
[08:27:43.525]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.525]                         if (muffled) 
[08:27:43.525]                           invokeRestart("muffleWarning")
[08:27:43.525]                       }
[08:27:43.525]                       else if (inherits(cond, "condition")) {
[08:27:43.525]                         if (!is.null(pattern)) {
[08:27:43.525]                           computeRestarts <- base::computeRestarts
[08:27:43.525]                           grepl <- base::grepl
[08:27:43.525]                           restarts <- computeRestarts(cond)
[08:27:43.525]                           for (restart in restarts) {
[08:27:43.525]                             name <- restart$name
[08:27:43.525]                             if (is.null(name)) 
[08:27:43.525]                               next
[08:27:43.525]                             if (!grepl(pattern, name)) 
[08:27:43.525]                               next
[08:27:43.525]                             invokeRestart(restart)
[08:27:43.525]                             muffled <- TRUE
[08:27:43.525]                             break
[08:27:43.525]                           }
[08:27:43.525]                         }
[08:27:43.525]                       }
[08:27:43.525]                       invisible(muffled)
[08:27:43.525]                     }
[08:27:43.525]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.525]                   }
[08:27:43.525]                 }
[08:27:43.525]             }
[08:27:43.525]         }))
[08:27:43.525]     }, error = function(ex) {
[08:27:43.525]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.525]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.525]                 ...future.rng), started = ...future.startTime, 
[08:27:43.525]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.525]             version = "1.8"), class = "FutureResult")
[08:27:43.525]     }, finally = {
[08:27:43.525]         if (!identical(...future.workdir, getwd())) 
[08:27:43.525]             setwd(...future.workdir)
[08:27:43.525]         {
[08:27:43.525]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.525]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.525]             }
[08:27:43.525]             base::options(...future.oldOptions)
[08:27:43.525]             if (.Platform$OS.type == "windows") {
[08:27:43.525]                 old_names <- names(...future.oldEnvVars)
[08:27:43.525]                 envs <- base::Sys.getenv()
[08:27:43.525]                 names <- names(envs)
[08:27:43.525]                 common <- intersect(names, old_names)
[08:27:43.525]                 added <- setdiff(names, old_names)
[08:27:43.525]                 removed <- setdiff(old_names, names)
[08:27:43.525]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.525]                   envs[common]]
[08:27:43.525]                 NAMES <- toupper(changed)
[08:27:43.525]                 args <- list()
[08:27:43.525]                 for (kk in seq_along(NAMES)) {
[08:27:43.525]                   name <- changed[[kk]]
[08:27:43.525]                   NAME <- NAMES[[kk]]
[08:27:43.525]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.525]                     next
[08:27:43.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.525]                 }
[08:27:43.525]                 NAMES <- toupper(added)
[08:27:43.525]                 for (kk in seq_along(NAMES)) {
[08:27:43.525]                   name <- added[[kk]]
[08:27:43.525]                   NAME <- NAMES[[kk]]
[08:27:43.525]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.525]                     next
[08:27:43.525]                   args[[name]] <- ""
[08:27:43.525]                 }
[08:27:43.525]                 NAMES <- toupper(removed)
[08:27:43.525]                 for (kk in seq_along(NAMES)) {
[08:27:43.525]                   name <- removed[[kk]]
[08:27:43.525]                   NAME <- NAMES[[kk]]
[08:27:43.525]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.525]                     next
[08:27:43.525]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.525]                 }
[08:27:43.525]                 if (length(args) > 0) 
[08:27:43.525]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.525]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.525]             }
[08:27:43.525]             else {
[08:27:43.525]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.525]             }
[08:27:43.525]             {
[08:27:43.525]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.525]                   0L) {
[08:27:43.525]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.525]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.525]                   base::options(opts)
[08:27:43.525]                 }
[08:27:43.525]                 {
[08:27:43.525]                   {
[08:27:43.525]                     NULL
[08:27:43.525]                     RNGkind("Mersenne-Twister")
[08:27:43.525]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.525]                       inherits = FALSE)
[08:27:43.525]                   }
[08:27:43.525]                   options(future.plan = NULL)
[08:27:43.525]                   if (is.na(NA_character_)) 
[08:27:43.525]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.525]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.525]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.525]                     .init = FALSE)
[08:27:43.525]                 }
[08:27:43.525]             }
[08:27:43.525]         }
[08:27:43.525]     })
[08:27:43.525]     if (TRUE) {
[08:27:43.525]         base::sink(type = "output", split = FALSE)
[08:27:43.525]         if (TRUE) {
[08:27:43.525]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.525]         }
[08:27:43.525]         else {
[08:27:43.525]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.525]         }
[08:27:43.525]         base::close(...future.stdout)
[08:27:43.525]         ...future.stdout <- NULL
[08:27:43.525]     }
[08:27:43.525]     ...future.result$conditions <- ...future.conditions
[08:27:43.525]     ...future.result$finished <- base::Sys.time()
[08:27:43.525]     ...future.result
[08:27:43.525] }
[08:27:43.527] assign_globals() ...
[08:27:43.527] List of 1
[08:27:43.527]  $ a: num 1
[08:27:43.527]  - attr(*, "where")=List of 1
[08:27:43.527]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.527]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.527]  - attr(*, "resolved")= logi FALSE
[08:27:43.527]  - attr(*, "total_size")= num 39
[08:27:43.527]  - attr(*, "already-done")= logi TRUE
[08:27:43.530] - copied ‘a’ to environment
[08:27:43.530] assign_globals() ... done
[08:27:43.530] plan(): Setting new future strategy stack:
[08:27:43.530] List of future strategies:
[08:27:43.530] 1. sequential:
[08:27:43.530]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.530]    - tweaked: FALSE
[08:27:43.530]    - call: NULL
[08:27:43.531] plan(): nbrOfWorkers() = 1
[08:27:43.533] plan(): Setting new future strategy stack:
[08:27:43.533] List of future strategies:
[08:27:43.533] 1. sequential:
[08:27:43.533]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.533]    - tweaked: FALSE
[08:27:43.533]    - call: plan(strategy)
[08:27:43.534] plan(): nbrOfWorkers() = 1
[08:27:43.534] SequentialFuture started (and completed)
[08:27:43.534] - Launch lazy future ... done
[08:27:43.534] run() for ‘SequentialFuture’ ... done
[08:27:43.534] getGlobalsAndPackages() ...
[08:27:43.534] Searching for globals...
[08:27:43.535] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.535] Searching for globals ... DONE
[08:27:43.535] Resolving globals: FALSE
[08:27:43.536] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.536] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.536] - globals: [1] ‘a’
[08:27:43.536] 
[08:27:43.536] getGlobalsAndPackages() ... DONE
[08:27:43.537] run() for ‘Future’ ...
[08:27:43.537] - state: ‘created’
[08:27:43.537] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.537] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.537] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.537]   - Field: ‘label’
[08:27:43.537]   - Field: ‘local’
[08:27:43.538]   - Field: ‘owner’
[08:27:43.538]   - Field: ‘envir’
[08:27:43.538]   - Field: ‘packages’
[08:27:43.538]   - Field: ‘gc’
[08:27:43.538]   - Field: ‘conditions’
[08:27:43.538]   - Field: ‘expr’
[08:27:43.538]   - Field: ‘uuid’
[08:27:43.538]   - Field: ‘seed’
[08:27:43.538]   - Field: ‘version’
[08:27:43.538]   - Field: ‘result’
[08:27:43.538]   - Field: ‘asynchronous’
[08:27:43.539]   - Field: ‘calls’
[08:27:43.539]   - Field: ‘globals’
[08:27:43.539]   - Field: ‘stdout’
[08:27:43.539]   - Field: ‘earlySignal’
[08:27:43.539]   - Field: ‘lazy’
[08:27:43.539]   - Field: ‘state’
[08:27:43.539] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.539] - Launch lazy future ...
[08:27:43.539] Packages needed by the future expression (n = 0): <none>
[08:27:43.539] Packages needed by future strategies (n = 0): <none>
[08:27:43.540] {
[08:27:43.540]     {
[08:27:43.540]         {
[08:27:43.540]             ...future.startTime <- base::Sys.time()
[08:27:43.540]             {
[08:27:43.540]                 {
[08:27:43.540]                   {
[08:27:43.540]                     base::local({
[08:27:43.540]                       has_future <- base::requireNamespace("future", 
[08:27:43.540]                         quietly = TRUE)
[08:27:43.540]                       if (has_future) {
[08:27:43.540]                         ns <- base::getNamespace("future")
[08:27:43.540]                         version <- ns[[".package"]][["version"]]
[08:27:43.540]                         if (is.null(version)) 
[08:27:43.540]                           version <- utils::packageVersion("future")
[08:27:43.540]                       }
[08:27:43.540]                       else {
[08:27:43.540]                         version <- NULL
[08:27:43.540]                       }
[08:27:43.540]                       if (!has_future || version < "1.8.0") {
[08:27:43.540]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.540]                           "", base::R.version$version.string), 
[08:27:43.540]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.540]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.540]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.540]                             "release", "version")], collapse = " "), 
[08:27:43.540]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.540]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.540]                           info)
[08:27:43.540]                         info <- base::paste(info, collapse = "; ")
[08:27:43.540]                         if (!has_future) {
[08:27:43.540]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.540]                             info)
[08:27:43.540]                         }
[08:27:43.540]                         else {
[08:27:43.540]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.540]                             info, version)
[08:27:43.540]                         }
[08:27:43.540]                         base::stop(msg)
[08:27:43.540]                       }
[08:27:43.540]                     })
[08:27:43.540]                   }
[08:27:43.540]                   ...future.strategy.old <- future::plan("list")
[08:27:43.540]                   options(future.plan = NULL)
[08:27:43.540]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.540]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.540]                 }
[08:27:43.540]                 ...future.workdir <- getwd()
[08:27:43.540]             }
[08:27:43.540]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.540]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.540]         }
[08:27:43.540]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.540]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.540]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.540]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.540]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.540]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.540]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.540]             base::names(...future.oldOptions))
[08:27:43.540]     }
[08:27:43.540]     if (FALSE) {
[08:27:43.540]     }
[08:27:43.540]     else {
[08:27:43.540]         if (TRUE) {
[08:27:43.540]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.540]                 open = "w")
[08:27:43.540]         }
[08:27:43.540]         else {
[08:27:43.540]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.540]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.540]         }
[08:27:43.540]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.540]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.540]             base::sink(type = "output", split = FALSE)
[08:27:43.540]             base::close(...future.stdout)
[08:27:43.540]         }, add = TRUE)
[08:27:43.540]     }
[08:27:43.540]     ...future.frame <- base::sys.nframe()
[08:27:43.540]     ...future.conditions <- base::list()
[08:27:43.540]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.540]     if (FALSE) {
[08:27:43.540]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.540]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.540]     }
[08:27:43.540]     ...future.result <- base::tryCatch({
[08:27:43.540]         base::withCallingHandlers({
[08:27:43.540]             ...future.value <- base::withVisible(base::local({
[08:27:43.540]                 2 * a
[08:27:43.540]             }))
[08:27:43.540]             future::FutureResult(value = ...future.value$value, 
[08:27:43.540]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.540]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.540]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.540]                     ...future.globalenv.names))
[08:27:43.540]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.540]         }, condition = base::local({
[08:27:43.540]             c <- base::c
[08:27:43.540]             inherits <- base::inherits
[08:27:43.540]             invokeRestart <- base::invokeRestart
[08:27:43.540]             length <- base::length
[08:27:43.540]             list <- base::list
[08:27:43.540]             seq.int <- base::seq.int
[08:27:43.540]             signalCondition <- base::signalCondition
[08:27:43.540]             sys.calls <- base::sys.calls
[08:27:43.540]             `[[` <- base::`[[`
[08:27:43.540]             `+` <- base::`+`
[08:27:43.540]             `<<-` <- base::`<<-`
[08:27:43.540]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.540]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.540]                   3L)]
[08:27:43.540]             }
[08:27:43.540]             function(cond) {
[08:27:43.540]                 is_error <- inherits(cond, "error")
[08:27:43.540]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.540]                   NULL)
[08:27:43.540]                 if (is_error) {
[08:27:43.540]                   sessionInformation <- function() {
[08:27:43.540]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.540]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.540]                       search = base::search(), system = base::Sys.info())
[08:27:43.540]                   }
[08:27:43.540]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.540]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.540]                     cond$call), session = sessionInformation(), 
[08:27:43.540]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.540]                   signalCondition(cond)
[08:27:43.540]                 }
[08:27:43.540]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.540]                 "immediateCondition"))) {
[08:27:43.540]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.540]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.540]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.540]                   if (TRUE && !signal) {
[08:27:43.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.540]                     {
[08:27:43.540]                       inherits <- base::inherits
[08:27:43.540]                       invokeRestart <- base::invokeRestart
[08:27:43.540]                       is.null <- base::is.null
[08:27:43.540]                       muffled <- FALSE
[08:27:43.540]                       if (inherits(cond, "message")) {
[08:27:43.540]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.540]                         if (muffled) 
[08:27:43.540]                           invokeRestart("muffleMessage")
[08:27:43.540]                       }
[08:27:43.540]                       else if (inherits(cond, "warning")) {
[08:27:43.540]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.540]                         if (muffled) 
[08:27:43.540]                           invokeRestart("muffleWarning")
[08:27:43.540]                       }
[08:27:43.540]                       else if (inherits(cond, "condition")) {
[08:27:43.540]                         if (!is.null(pattern)) {
[08:27:43.540]                           computeRestarts <- base::computeRestarts
[08:27:43.540]                           grepl <- base::grepl
[08:27:43.540]                           restarts <- computeRestarts(cond)
[08:27:43.540]                           for (restart in restarts) {
[08:27:43.540]                             name <- restart$name
[08:27:43.540]                             if (is.null(name)) 
[08:27:43.540]                               next
[08:27:43.540]                             if (!grepl(pattern, name)) 
[08:27:43.540]                               next
[08:27:43.540]                             invokeRestart(restart)
[08:27:43.540]                             muffled <- TRUE
[08:27:43.540]                             break
[08:27:43.540]                           }
[08:27:43.540]                         }
[08:27:43.540]                       }
[08:27:43.540]                       invisible(muffled)
[08:27:43.540]                     }
[08:27:43.540]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.540]                   }
[08:27:43.540]                 }
[08:27:43.540]                 else {
[08:27:43.540]                   if (TRUE) {
[08:27:43.540]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.540]                     {
[08:27:43.540]                       inherits <- base::inherits
[08:27:43.540]                       invokeRestart <- base::invokeRestart
[08:27:43.540]                       is.null <- base::is.null
[08:27:43.540]                       muffled <- FALSE
[08:27:43.540]                       if (inherits(cond, "message")) {
[08:27:43.540]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.540]                         if (muffled) 
[08:27:43.540]                           invokeRestart("muffleMessage")
[08:27:43.540]                       }
[08:27:43.540]                       else if (inherits(cond, "warning")) {
[08:27:43.540]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.540]                         if (muffled) 
[08:27:43.540]                           invokeRestart("muffleWarning")
[08:27:43.540]                       }
[08:27:43.540]                       else if (inherits(cond, "condition")) {
[08:27:43.540]                         if (!is.null(pattern)) {
[08:27:43.540]                           computeRestarts <- base::computeRestarts
[08:27:43.540]                           grepl <- base::grepl
[08:27:43.540]                           restarts <- computeRestarts(cond)
[08:27:43.540]                           for (restart in restarts) {
[08:27:43.540]                             name <- restart$name
[08:27:43.540]                             if (is.null(name)) 
[08:27:43.540]                               next
[08:27:43.540]                             if (!grepl(pattern, name)) 
[08:27:43.540]                               next
[08:27:43.540]                             invokeRestart(restart)
[08:27:43.540]                             muffled <- TRUE
[08:27:43.540]                             break
[08:27:43.540]                           }
[08:27:43.540]                         }
[08:27:43.540]                       }
[08:27:43.540]                       invisible(muffled)
[08:27:43.540]                     }
[08:27:43.540]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.540]                   }
[08:27:43.540]                 }
[08:27:43.540]             }
[08:27:43.540]         }))
[08:27:43.540]     }, error = function(ex) {
[08:27:43.540]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.540]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.540]                 ...future.rng), started = ...future.startTime, 
[08:27:43.540]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.540]             version = "1.8"), class = "FutureResult")
[08:27:43.540]     }, finally = {
[08:27:43.540]         if (!identical(...future.workdir, getwd())) 
[08:27:43.540]             setwd(...future.workdir)
[08:27:43.540]         {
[08:27:43.540]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.540]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.540]             }
[08:27:43.540]             base::options(...future.oldOptions)
[08:27:43.540]             if (.Platform$OS.type == "windows") {
[08:27:43.540]                 old_names <- names(...future.oldEnvVars)
[08:27:43.540]                 envs <- base::Sys.getenv()
[08:27:43.540]                 names <- names(envs)
[08:27:43.540]                 common <- intersect(names, old_names)
[08:27:43.540]                 added <- setdiff(names, old_names)
[08:27:43.540]                 removed <- setdiff(old_names, names)
[08:27:43.540]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.540]                   envs[common]]
[08:27:43.540]                 NAMES <- toupper(changed)
[08:27:43.540]                 args <- list()
[08:27:43.540]                 for (kk in seq_along(NAMES)) {
[08:27:43.540]                   name <- changed[[kk]]
[08:27:43.540]                   NAME <- NAMES[[kk]]
[08:27:43.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.540]                     next
[08:27:43.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.540]                 }
[08:27:43.540]                 NAMES <- toupper(added)
[08:27:43.540]                 for (kk in seq_along(NAMES)) {
[08:27:43.540]                   name <- added[[kk]]
[08:27:43.540]                   NAME <- NAMES[[kk]]
[08:27:43.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.540]                     next
[08:27:43.540]                   args[[name]] <- ""
[08:27:43.540]                 }
[08:27:43.540]                 NAMES <- toupper(removed)
[08:27:43.540]                 for (kk in seq_along(NAMES)) {
[08:27:43.540]                   name <- removed[[kk]]
[08:27:43.540]                   NAME <- NAMES[[kk]]
[08:27:43.540]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.540]                     next
[08:27:43.540]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.540]                 }
[08:27:43.540]                 if (length(args) > 0) 
[08:27:43.540]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.540]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.540]             }
[08:27:43.540]             else {
[08:27:43.540]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.540]             }
[08:27:43.540]             {
[08:27:43.540]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.540]                   0L) {
[08:27:43.540]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.540]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.540]                   base::options(opts)
[08:27:43.540]                 }
[08:27:43.540]                 {
[08:27:43.540]                   {
[08:27:43.540]                     NULL
[08:27:43.540]                     RNGkind("Mersenne-Twister")
[08:27:43.540]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.540]                       inherits = FALSE)
[08:27:43.540]                   }
[08:27:43.540]                   options(future.plan = NULL)
[08:27:43.540]                   if (is.na(NA_character_)) 
[08:27:43.540]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.540]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.540]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.540]                     .init = FALSE)
[08:27:43.540]                 }
[08:27:43.540]             }
[08:27:43.540]         }
[08:27:43.540]     })
[08:27:43.540]     if (TRUE) {
[08:27:43.540]         base::sink(type = "output", split = FALSE)
[08:27:43.540]         if (TRUE) {
[08:27:43.540]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.540]         }
[08:27:43.540]         else {
[08:27:43.540]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.540]         }
[08:27:43.540]         base::close(...future.stdout)
[08:27:43.540]         ...future.stdout <- NULL
[08:27:43.540]     }
[08:27:43.540]     ...future.result$conditions <- ...future.conditions
[08:27:43.540]     ...future.result$finished <- base::Sys.time()
[08:27:43.540]     ...future.result
[08:27:43.540] }
[08:27:43.541] assign_globals() ...
[08:27:43.542] List of 1
[08:27:43.542]  $ a: num 1
[08:27:43.542]  - attr(*, "where")=List of 1
[08:27:43.542]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.542]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.542]  - attr(*, "resolved")= logi FALSE
[08:27:43.542]  - attr(*, "total_size")= num 39
[08:27:43.542]  - attr(*, "already-done")= logi TRUE
[08:27:43.544] - copied ‘a’ to environment
[08:27:43.544] assign_globals() ... done
[08:27:43.544] plan(): Setting new future strategy stack:
[08:27:43.544] List of future strategies:
[08:27:43.544] 1. sequential:
[08:27:43.544]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.544]    - tweaked: FALSE
[08:27:43.544]    - call: NULL
[08:27:43.545] plan(): nbrOfWorkers() = 1
[08:27:43.546] plan(): Setting new future strategy stack:
[08:27:43.546] List of future strategies:
[08:27:43.546] 1. sequential:
[08:27:43.546]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.546]    - tweaked: FALSE
[08:27:43.546]    - call: plan(strategy)
[08:27:43.546] plan(): nbrOfWorkers() = 1
[08:27:43.546] SequentialFuture started (and completed)
[08:27:43.546] - Launch lazy future ... done
[08:27:43.547] run() for ‘SequentialFuture’ ... done
[08:27:43.547] getGlobalsAndPackages() ...
[08:27:43.547] Searching for globals...
[08:27:43.548] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.548] Searching for globals ... DONE
[08:27:43.548] Resolving globals: FALSE
[08:27:43.548] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.549] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.549] - globals: [1] ‘a’
[08:27:43.549] 
[08:27:43.549] getGlobalsAndPackages() ... DONE
[08:27:43.549] run() for ‘Future’ ...
[08:27:43.549] - state: ‘created’
[08:27:43.549] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:43.550] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:43.550] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:43.550]   - Field: ‘label’
[08:27:43.550]   - Field: ‘local’
[08:27:43.550]   - Field: ‘owner’
[08:27:43.550]   - Field: ‘envir’
[08:27:43.550]   - Field: ‘packages’
[08:27:43.550]   - Field: ‘gc’
[08:27:43.551]   - Field: ‘conditions’
[08:27:43.551]   - Field: ‘expr’
[08:27:43.551]   - Field: ‘uuid’
[08:27:43.551]   - Field: ‘seed’
[08:27:43.551]   - Field: ‘version’
[08:27:43.551]   - Field: ‘result’
[08:27:43.551]   - Field: ‘asynchronous’
[08:27:43.551]   - Field: ‘calls’
[08:27:43.551]   - Field: ‘globals’
[08:27:43.551]   - Field: ‘stdout’
[08:27:43.551]   - Field: ‘earlySignal’
[08:27:43.551]   - Field: ‘lazy’
[08:27:43.552]   - Field: ‘state’
[08:27:43.552] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:43.552] - Launch lazy future ...
[08:27:43.552] Packages needed by the future expression (n = 0): <none>
[08:27:43.552] Packages needed by future strategies (n = 0): <none>
[08:27:43.552] {
[08:27:43.552]     {
[08:27:43.552]         {
[08:27:43.552]             ...future.startTime <- base::Sys.time()
[08:27:43.552]             {
[08:27:43.552]                 {
[08:27:43.552]                   {
[08:27:43.552]                     base::local({
[08:27:43.552]                       has_future <- base::requireNamespace("future", 
[08:27:43.552]                         quietly = TRUE)
[08:27:43.552]                       if (has_future) {
[08:27:43.552]                         ns <- base::getNamespace("future")
[08:27:43.552]                         version <- ns[[".package"]][["version"]]
[08:27:43.552]                         if (is.null(version)) 
[08:27:43.552]                           version <- utils::packageVersion("future")
[08:27:43.552]                       }
[08:27:43.552]                       else {
[08:27:43.552]                         version <- NULL
[08:27:43.552]                       }
[08:27:43.552]                       if (!has_future || version < "1.8.0") {
[08:27:43.552]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.552]                           "", base::R.version$version.string), 
[08:27:43.552]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:43.552]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.552]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.552]                             "release", "version")], collapse = " "), 
[08:27:43.552]                           hostname = base::Sys.info()[["nodename"]])
[08:27:43.552]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.552]                           info)
[08:27:43.552]                         info <- base::paste(info, collapse = "; ")
[08:27:43.552]                         if (!has_future) {
[08:27:43.552]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.552]                             info)
[08:27:43.552]                         }
[08:27:43.552]                         else {
[08:27:43.552]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.552]                             info, version)
[08:27:43.552]                         }
[08:27:43.552]                         base::stop(msg)
[08:27:43.552]                       }
[08:27:43.552]                     })
[08:27:43.552]                   }
[08:27:43.552]                   ...future.strategy.old <- future::plan("list")
[08:27:43.552]                   options(future.plan = NULL)
[08:27:43.552]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.552]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.552]                 }
[08:27:43.552]                 ...future.workdir <- getwd()
[08:27:43.552]             }
[08:27:43.552]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.552]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.552]         }
[08:27:43.552]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.552]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.552]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.552]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.552]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.552]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.552]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.552]             base::names(...future.oldOptions))
[08:27:43.552]     }
[08:27:43.552]     if (FALSE) {
[08:27:43.552]     }
[08:27:43.552]     else {
[08:27:43.552]         if (TRUE) {
[08:27:43.552]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.552]                 open = "w")
[08:27:43.552]         }
[08:27:43.552]         else {
[08:27:43.552]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.552]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.552]         }
[08:27:43.552]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.552]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.552]             base::sink(type = "output", split = FALSE)
[08:27:43.552]             base::close(...future.stdout)
[08:27:43.552]         }, add = TRUE)
[08:27:43.552]     }
[08:27:43.552]     ...future.frame <- base::sys.nframe()
[08:27:43.552]     ...future.conditions <- base::list()
[08:27:43.552]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.552]     if (FALSE) {
[08:27:43.552]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.552]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.552]     }
[08:27:43.552]     ...future.result <- base::tryCatch({
[08:27:43.552]         base::withCallingHandlers({
[08:27:43.552]             ...future.value <- base::withVisible(base::local({
[08:27:43.552]                 2 * a
[08:27:43.552]             }))
[08:27:43.552]             future::FutureResult(value = ...future.value$value, 
[08:27:43.552]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.552]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.552]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.552]                     ...future.globalenv.names))
[08:27:43.552]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.552]         }, condition = base::local({
[08:27:43.552]             c <- base::c
[08:27:43.552]             inherits <- base::inherits
[08:27:43.552]             invokeRestart <- base::invokeRestart
[08:27:43.552]             length <- base::length
[08:27:43.552]             list <- base::list
[08:27:43.552]             seq.int <- base::seq.int
[08:27:43.552]             signalCondition <- base::signalCondition
[08:27:43.552]             sys.calls <- base::sys.calls
[08:27:43.552]             `[[` <- base::`[[`
[08:27:43.552]             `+` <- base::`+`
[08:27:43.552]             `<<-` <- base::`<<-`
[08:27:43.552]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.552]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.552]                   3L)]
[08:27:43.552]             }
[08:27:43.552]             function(cond) {
[08:27:43.552]                 is_error <- inherits(cond, "error")
[08:27:43.552]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.552]                   NULL)
[08:27:43.552]                 if (is_error) {
[08:27:43.552]                   sessionInformation <- function() {
[08:27:43.552]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.552]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.552]                       search = base::search(), system = base::Sys.info())
[08:27:43.552]                   }
[08:27:43.552]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.552]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.552]                     cond$call), session = sessionInformation(), 
[08:27:43.552]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.552]                   signalCondition(cond)
[08:27:43.552]                 }
[08:27:43.552]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.552]                 "immediateCondition"))) {
[08:27:43.552]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.552]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.552]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.552]                   if (TRUE && !signal) {
[08:27:43.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.552]                     {
[08:27:43.552]                       inherits <- base::inherits
[08:27:43.552]                       invokeRestart <- base::invokeRestart
[08:27:43.552]                       is.null <- base::is.null
[08:27:43.552]                       muffled <- FALSE
[08:27:43.552]                       if (inherits(cond, "message")) {
[08:27:43.552]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.552]                         if (muffled) 
[08:27:43.552]                           invokeRestart("muffleMessage")
[08:27:43.552]                       }
[08:27:43.552]                       else if (inherits(cond, "warning")) {
[08:27:43.552]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.552]                         if (muffled) 
[08:27:43.552]                           invokeRestart("muffleWarning")
[08:27:43.552]                       }
[08:27:43.552]                       else if (inherits(cond, "condition")) {
[08:27:43.552]                         if (!is.null(pattern)) {
[08:27:43.552]                           computeRestarts <- base::computeRestarts
[08:27:43.552]                           grepl <- base::grepl
[08:27:43.552]                           restarts <- computeRestarts(cond)
[08:27:43.552]                           for (restart in restarts) {
[08:27:43.552]                             name <- restart$name
[08:27:43.552]                             if (is.null(name)) 
[08:27:43.552]                               next
[08:27:43.552]                             if (!grepl(pattern, name)) 
[08:27:43.552]                               next
[08:27:43.552]                             invokeRestart(restart)
[08:27:43.552]                             muffled <- TRUE
[08:27:43.552]                             break
[08:27:43.552]                           }
[08:27:43.552]                         }
[08:27:43.552]                       }
[08:27:43.552]                       invisible(muffled)
[08:27:43.552]                     }
[08:27:43.552]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.552]                   }
[08:27:43.552]                 }
[08:27:43.552]                 else {
[08:27:43.552]                   if (TRUE) {
[08:27:43.552]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.552]                     {
[08:27:43.552]                       inherits <- base::inherits
[08:27:43.552]                       invokeRestart <- base::invokeRestart
[08:27:43.552]                       is.null <- base::is.null
[08:27:43.552]                       muffled <- FALSE
[08:27:43.552]                       if (inherits(cond, "message")) {
[08:27:43.552]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.552]                         if (muffled) 
[08:27:43.552]                           invokeRestart("muffleMessage")
[08:27:43.552]                       }
[08:27:43.552]                       else if (inherits(cond, "warning")) {
[08:27:43.552]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.552]                         if (muffled) 
[08:27:43.552]                           invokeRestart("muffleWarning")
[08:27:43.552]                       }
[08:27:43.552]                       else if (inherits(cond, "condition")) {
[08:27:43.552]                         if (!is.null(pattern)) {
[08:27:43.552]                           computeRestarts <- base::computeRestarts
[08:27:43.552]                           grepl <- base::grepl
[08:27:43.552]                           restarts <- computeRestarts(cond)
[08:27:43.552]                           for (restart in restarts) {
[08:27:43.552]                             name <- restart$name
[08:27:43.552]                             if (is.null(name)) 
[08:27:43.552]                               next
[08:27:43.552]                             if (!grepl(pattern, name)) 
[08:27:43.552]                               next
[08:27:43.552]                             invokeRestart(restart)
[08:27:43.552]                             muffled <- TRUE
[08:27:43.552]                             break
[08:27:43.552]                           }
[08:27:43.552]                         }
[08:27:43.552]                       }
[08:27:43.552]                       invisible(muffled)
[08:27:43.552]                     }
[08:27:43.552]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.552]                   }
[08:27:43.552]                 }
[08:27:43.552]             }
[08:27:43.552]         }))
[08:27:43.552]     }, error = function(ex) {
[08:27:43.552]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.552]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.552]                 ...future.rng), started = ...future.startTime, 
[08:27:43.552]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.552]             version = "1.8"), class = "FutureResult")
[08:27:43.552]     }, finally = {
[08:27:43.552]         if (!identical(...future.workdir, getwd())) 
[08:27:43.552]             setwd(...future.workdir)
[08:27:43.552]         {
[08:27:43.552]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.552]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.552]             }
[08:27:43.552]             base::options(...future.oldOptions)
[08:27:43.552]             if (.Platform$OS.type == "windows") {
[08:27:43.552]                 old_names <- names(...future.oldEnvVars)
[08:27:43.552]                 envs <- base::Sys.getenv()
[08:27:43.552]                 names <- names(envs)
[08:27:43.552]                 common <- intersect(names, old_names)
[08:27:43.552]                 added <- setdiff(names, old_names)
[08:27:43.552]                 removed <- setdiff(old_names, names)
[08:27:43.552]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.552]                   envs[common]]
[08:27:43.552]                 NAMES <- toupper(changed)
[08:27:43.552]                 args <- list()
[08:27:43.552]                 for (kk in seq_along(NAMES)) {
[08:27:43.552]                   name <- changed[[kk]]
[08:27:43.552]                   NAME <- NAMES[[kk]]
[08:27:43.552]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.552]                     next
[08:27:43.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.552]                 }
[08:27:43.552]                 NAMES <- toupper(added)
[08:27:43.552]                 for (kk in seq_along(NAMES)) {
[08:27:43.552]                   name <- added[[kk]]
[08:27:43.552]                   NAME <- NAMES[[kk]]
[08:27:43.552]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.552]                     next
[08:27:43.552]                   args[[name]] <- ""
[08:27:43.552]                 }
[08:27:43.552]                 NAMES <- toupper(removed)
[08:27:43.552]                 for (kk in seq_along(NAMES)) {
[08:27:43.552]                   name <- removed[[kk]]
[08:27:43.552]                   NAME <- NAMES[[kk]]
[08:27:43.552]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.552]                     next
[08:27:43.552]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.552]                 }
[08:27:43.552]                 if (length(args) > 0) 
[08:27:43.552]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.552]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.552]             }
[08:27:43.552]             else {
[08:27:43.552]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.552]             }
[08:27:43.552]             {
[08:27:43.552]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.552]                   0L) {
[08:27:43.552]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.552]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.552]                   base::options(opts)
[08:27:43.552]                 }
[08:27:43.552]                 {
[08:27:43.552]                   {
[08:27:43.552]                     NULL
[08:27:43.552]                     RNGkind("Mersenne-Twister")
[08:27:43.552]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:43.552]                       inherits = FALSE)
[08:27:43.552]                   }
[08:27:43.552]                   options(future.plan = NULL)
[08:27:43.552]                   if (is.na(NA_character_)) 
[08:27:43.552]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.552]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.552]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.552]                     .init = FALSE)
[08:27:43.552]                 }
[08:27:43.552]             }
[08:27:43.552]         }
[08:27:43.552]     })
[08:27:43.552]     if (TRUE) {
[08:27:43.552]         base::sink(type = "output", split = FALSE)
[08:27:43.552]         if (TRUE) {
[08:27:43.552]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.552]         }
[08:27:43.552]         else {
[08:27:43.552]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.552]         }
[08:27:43.552]         base::close(...future.stdout)
[08:27:43.552]         ...future.stdout <- NULL
[08:27:43.552]     }
[08:27:43.552]     ...future.result$conditions <- ...future.conditions
[08:27:43.552]     ...future.result$finished <- base::Sys.time()
[08:27:43.552]     ...future.result
[08:27:43.552] }
[08:27:43.554] assign_globals() ...
[08:27:43.554] List of 1
[08:27:43.554]  $ a: num 1
[08:27:43.554]  - attr(*, "where")=List of 1
[08:27:43.554]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.554]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.554]  - attr(*, "resolved")= logi FALSE
[08:27:43.554]  - attr(*, "total_size")= num 39
[08:27:43.554]  - attr(*, "already-done")= logi TRUE
[08:27:43.557] - copied ‘a’ to environment
[08:27:43.557] assign_globals() ... done
[08:27:43.557] plan(): Setting new future strategy stack:
[08:27:43.557] List of future strategies:
[08:27:43.557] 1. sequential:
[08:27:43.557]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.557]    - tweaked: FALSE
[08:27:43.557]    - call: NULL
[08:27:43.558] plan(): nbrOfWorkers() = 1
[08:27:43.558] plan(): Setting new future strategy stack:
[08:27:43.558] List of future strategies:
[08:27:43.558] 1. sequential:
[08:27:43.558]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.558]    - tweaked: FALSE
[08:27:43.558]    - call: plan(strategy)
[08:27:43.559] plan(): nbrOfWorkers() = 1
[08:27:43.559] SequentialFuture started (and completed)
[08:27:43.559] - Launch lazy future ... done
[08:27:43.559] run() for ‘SequentialFuture’ ... done
*** futureAssign() with ‘sequential’ futures ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
*** futureAssign() with ‘multicore’ futures ...
[08:27:43.566] plan(): Setting new future strategy stack:
[08:27:43.566] List of future strategies:
[08:27:43.566] 1. multicore:
[08:27:43.566]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.566]    - tweaked: FALSE
[08:27:43.566]    - call: plan(strategy)
[08:27:43.568] plan(): nbrOfWorkers() = 2
[08:27:43.568] getGlobalsAndPackages() ...
[08:27:43.568] Searching for globals...
[08:27:43.569] - globals found: [1] ‘{’
[08:27:43.569] Searching for globals ... DONE
[08:27:43.569] Resolving globals: FALSE
[08:27:43.569] 
[08:27:43.570] 
[08:27:43.570] getGlobalsAndPackages() ... DONE
[08:27:43.570] run() for ‘Future’ ...
[08:27:43.570] - state: ‘created’
[08:27:43.570] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.572] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.572] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.572]   - Field: ‘label’
[08:27:43.572]   - Field: ‘local’
[08:27:43.572]   - Field: ‘owner’
[08:27:43.572]   - Field: ‘envir’
[08:27:43.572]   - Field: ‘workers’
[08:27:43.572]   - Field: ‘packages’
[08:27:43.572]   - Field: ‘gc’
[08:27:43.573]   - Field: ‘job’
[08:27:43.573]   - Field: ‘conditions’
[08:27:43.573]   - Field: ‘expr’
[08:27:43.573]   - Field: ‘uuid’
[08:27:43.573]   - Field: ‘seed’
[08:27:43.573]   - Field: ‘version’
[08:27:43.573]   - Field: ‘result’
[08:27:43.573]   - Field: ‘asynchronous’
[08:27:43.573]   - Field: ‘calls’
[08:27:43.573]   - Field: ‘globals’
[08:27:43.573]   - Field: ‘stdout’
[08:27:43.573]   - Field: ‘earlySignal’
[08:27:43.574]   - Field: ‘lazy’
[08:27:43.574]   - Field: ‘state’
[08:27:43.574] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.574] - Launch lazy future ...
[08:27:43.575] Packages needed by the future expression (n = 0): <none>
[08:27:43.575] Packages needed by future strategies (n = 0): <none>
[08:27:43.575] {
[08:27:43.575]     {
[08:27:43.575]         {
[08:27:43.575]             ...future.startTime <- base::Sys.time()
[08:27:43.575]             {
[08:27:43.575]                 {
[08:27:43.575]                   {
[08:27:43.575]                     {
[08:27:43.575]                       base::local({
[08:27:43.575]                         has_future <- base::requireNamespace("future", 
[08:27:43.575]                           quietly = TRUE)
[08:27:43.575]                         if (has_future) {
[08:27:43.575]                           ns <- base::getNamespace("future")
[08:27:43.575]                           version <- ns[[".package"]][["version"]]
[08:27:43.575]                           if (is.null(version)) 
[08:27:43.575]                             version <- utils::packageVersion("future")
[08:27:43.575]                         }
[08:27:43.575]                         else {
[08:27:43.575]                           version <- NULL
[08:27:43.575]                         }
[08:27:43.575]                         if (!has_future || version < "1.8.0") {
[08:27:43.575]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.575]                             "", base::R.version$version.string), 
[08:27:43.575]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.575]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.575]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.575]                               "release", "version")], collapse = " "), 
[08:27:43.575]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.575]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.575]                             info)
[08:27:43.575]                           info <- base::paste(info, collapse = "; ")
[08:27:43.575]                           if (!has_future) {
[08:27:43.575]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.575]                               info)
[08:27:43.575]                           }
[08:27:43.575]                           else {
[08:27:43.575]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.575]                               info, version)
[08:27:43.575]                           }
[08:27:43.575]                           base::stop(msg)
[08:27:43.575]                         }
[08:27:43.575]                       })
[08:27:43.575]                     }
[08:27:43.575]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.575]                     base::options(mc.cores = 1L)
[08:27:43.575]                   }
[08:27:43.575]                   ...future.strategy.old <- future::plan("list")
[08:27:43.575]                   options(future.plan = NULL)
[08:27:43.575]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.575]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.575]                 }
[08:27:43.575]                 ...future.workdir <- getwd()
[08:27:43.575]             }
[08:27:43.575]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.575]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.575]         }
[08:27:43.575]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.575]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.575]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.575]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.575]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.575]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.575]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.575]             base::names(...future.oldOptions))
[08:27:43.575]     }
[08:27:43.575]     if (FALSE) {
[08:27:43.575]     }
[08:27:43.575]     else {
[08:27:43.575]         if (TRUE) {
[08:27:43.575]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.575]                 open = "w")
[08:27:43.575]         }
[08:27:43.575]         else {
[08:27:43.575]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.575]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.575]         }
[08:27:43.575]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.575]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.575]             base::sink(type = "output", split = FALSE)
[08:27:43.575]             base::close(...future.stdout)
[08:27:43.575]         }, add = TRUE)
[08:27:43.575]     }
[08:27:43.575]     ...future.frame <- base::sys.nframe()
[08:27:43.575]     ...future.conditions <- base::list()
[08:27:43.575]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.575]     if (FALSE) {
[08:27:43.575]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.575]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.575]     }
[08:27:43.575]     ...future.result <- base::tryCatch({
[08:27:43.575]         base::withCallingHandlers({
[08:27:43.575]             ...future.value <- base::withVisible(base::local({
[08:27:43.575]                 withCallingHandlers({
[08:27:43.575]                   {
[08:27:43.575]                     2
[08:27:43.575]                   }
[08:27:43.575]                 }, immediateCondition = function(cond) {
[08:27:43.575]                   save_rds <- function (object, pathname, ...) 
[08:27:43.575]                   {
[08:27:43.575]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.575]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.575]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.575]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.575]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.575]                         fi_tmp[["mtime"]])
[08:27:43.575]                     }
[08:27:43.575]                     tryCatch({
[08:27:43.575]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.575]                     }, error = function(ex) {
[08:27:43.575]                       msg <- conditionMessage(ex)
[08:27:43.575]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.575]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.575]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.575]                         fi_tmp[["mtime"]], msg)
[08:27:43.575]                       ex$message <- msg
[08:27:43.575]                       stop(ex)
[08:27:43.575]                     })
[08:27:43.575]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.575]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.575]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.575]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.575]                       fi <- file.info(pathname)
[08:27:43.575]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.575]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.575]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.575]                         fi[["size"]], fi[["mtime"]])
[08:27:43.575]                       stop(msg)
[08:27:43.575]                     }
[08:27:43.575]                     invisible(pathname)
[08:27:43.575]                   }
[08:27:43.575]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.575]                     rootPath = tempdir()) 
[08:27:43.575]                   {
[08:27:43.575]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.575]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.575]                       tmpdir = path, fileext = ".rds")
[08:27:43.575]                     save_rds(obj, file)
[08:27:43.575]                   }
[08:27:43.575]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.575]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.575]                   {
[08:27:43.575]                     inherits <- base::inherits
[08:27:43.575]                     invokeRestart <- base::invokeRestart
[08:27:43.575]                     is.null <- base::is.null
[08:27:43.575]                     muffled <- FALSE
[08:27:43.575]                     if (inherits(cond, "message")) {
[08:27:43.575]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.575]                       if (muffled) 
[08:27:43.575]                         invokeRestart("muffleMessage")
[08:27:43.575]                     }
[08:27:43.575]                     else if (inherits(cond, "warning")) {
[08:27:43.575]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.575]                       if (muffled) 
[08:27:43.575]                         invokeRestart("muffleWarning")
[08:27:43.575]                     }
[08:27:43.575]                     else if (inherits(cond, "condition")) {
[08:27:43.575]                       if (!is.null(pattern)) {
[08:27:43.575]                         computeRestarts <- base::computeRestarts
[08:27:43.575]                         grepl <- base::grepl
[08:27:43.575]                         restarts <- computeRestarts(cond)
[08:27:43.575]                         for (restart in restarts) {
[08:27:43.575]                           name <- restart$name
[08:27:43.575]                           if (is.null(name)) 
[08:27:43.575]                             next
[08:27:43.575]                           if (!grepl(pattern, name)) 
[08:27:43.575]                             next
[08:27:43.575]                           invokeRestart(restart)
[08:27:43.575]                           muffled <- TRUE
[08:27:43.575]                           break
[08:27:43.575]                         }
[08:27:43.575]                       }
[08:27:43.575]                     }
[08:27:43.575]                     invisible(muffled)
[08:27:43.575]                   }
[08:27:43.575]                   muffleCondition(cond)
[08:27:43.575]                 })
[08:27:43.575]             }))
[08:27:43.575]             future::FutureResult(value = ...future.value$value, 
[08:27:43.575]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.575]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.575]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.575]                     ...future.globalenv.names))
[08:27:43.575]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.575]         }, condition = base::local({
[08:27:43.575]             c <- base::c
[08:27:43.575]             inherits <- base::inherits
[08:27:43.575]             invokeRestart <- base::invokeRestart
[08:27:43.575]             length <- base::length
[08:27:43.575]             list <- base::list
[08:27:43.575]             seq.int <- base::seq.int
[08:27:43.575]             signalCondition <- base::signalCondition
[08:27:43.575]             sys.calls <- base::sys.calls
[08:27:43.575]             `[[` <- base::`[[`
[08:27:43.575]             `+` <- base::`+`
[08:27:43.575]             `<<-` <- base::`<<-`
[08:27:43.575]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.575]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.575]                   3L)]
[08:27:43.575]             }
[08:27:43.575]             function(cond) {
[08:27:43.575]                 is_error <- inherits(cond, "error")
[08:27:43.575]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.575]                   NULL)
[08:27:43.575]                 if (is_error) {
[08:27:43.575]                   sessionInformation <- function() {
[08:27:43.575]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.575]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.575]                       search = base::search(), system = base::Sys.info())
[08:27:43.575]                   }
[08:27:43.575]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.575]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.575]                     cond$call), session = sessionInformation(), 
[08:27:43.575]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.575]                   signalCondition(cond)
[08:27:43.575]                 }
[08:27:43.575]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.575]                 "immediateCondition"))) {
[08:27:43.575]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.575]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.575]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.575]                   if (TRUE && !signal) {
[08:27:43.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.575]                     {
[08:27:43.575]                       inherits <- base::inherits
[08:27:43.575]                       invokeRestart <- base::invokeRestart
[08:27:43.575]                       is.null <- base::is.null
[08:27:43.575]                       muffled <- FALSE
[08:27:43.575]                       if (inherits(cond, "message")) {
[08:27:43.575]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.575]                         if (muffled) 
[08:27:43.575]                           invokeRestart("muffleMessage")
[08:27:43.575]                       }
[08:27:43.575]                       else if (inherits(cond, "warning")) {
[08:27:43.575]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.575]                         if (muffled) 
[08:27:43.575]                           invokeRestart("muffleWarning")
[08:27:43.575]                       }
[08:27:43.575]                       else if (inherits(cond, "condition")) {
[08:27:43.575]                         if (!is.null(pattern)) {
[08:27:43.575]                           computeRestarts <- base::computeRestarts
[08:27:43.575]                           grepl <- base::grepl
[08:27:43.575]                           restarts <- computeRestarts(cond)
[08:27:43.575]                           for (restart in restarts) {
[08:27:43.575]                             name <- restart$name
[08:27:43.575]                             if (is.null(name)) 
[08:27:43.575]                               next
[08:27:43.575]                             if (!grepl(pattern, name)) 
[08:27:43.575]                               next
[08:27:43.575]                             invokeRestart(restart)
[08:27:43.575]                             muffled <- TRUE
[08:27:43.575]                             break
[08:27:43.575]                           }
[08:27:43.575]                         }
[08:27:43.575]                       }
[08:27:43.575]                       invisible(muffled)
[08:27:43.575]                     }
[08:27:43.575]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.575]                   }
[08:27:43.575]                 }
[08:27:43.575]                 else {
[08:27:43.575]                   if (TRUE) {
[08:27:43.575]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.575]                     {
[08:27:43.575]                       inherits <- base::inherits
[08:27:43.575]                       invokeRestart <- base::invokeRestart
[08:27:43.575]                       is.null <- base::is.null
[08:27:43.575]                       muffled <- FALSE
[08:27:43.575]                       if (inherits(cond, "message")) {
[08:27:43.575]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.575]                         if (muffled) 
[08:27:43.575]                           invokeRestart("muffleMessage")
[08:27:43.575]                       }
[08:27:43.575]                       else if (inherits(cond, "warning")) {
[08:27:43.575]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.575]                         if (muffled) 
[08:27:43.575]                           invokeRestart("muffleWarning")
[08:27:43.575]                       }
[08:27:43.575]                       else if (inherits(cond, "condition")) {
[08:27:43.575]                         if (!is.null(pattern)) {
[08:27:43.575]                           computeRestarts <- base::computeRestarts
[08:27:43.575]                           grepl <- base::grepl
[08:27:43.575]                           restarts <- computeRestarts(cond)
[08:27:43.575]                           for (restart in restarts) {
[08:27:43.575]                             name <- restart$name
[08:27:43.575]                             if (is.null(name)) 
[08:27:43.575]                               next
[08:27:43.575]                             if (!grepl(pattern, name)) 
[08:27:43.575]                               next
[08:27:43.575]                             invokeRestart(restart)
[08:27:43.575]                             muffled <- TRUE
[08:27:43.575]                             break
[08:27:43.575]                           }
[08:27:43.575]                         }
[08:27:43.575]                       }
[08:27:43.575]                       invisible(muffled)
[08:27:43.575]                     }
[08:27:43.575]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.575]                   }
[08:27:43.575]                 }
[08:27:43.575]             }
[08:27:43.575]         }))
[08:27:43.575]     }, error = function(ex) {
[08:27:43.575]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.575]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.575]                 ...future.rng), started = ...future.startTime, 
[08:27:43.575]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.575]             version = "1.8"), class = "FutureResult")
[08:27:43.575]     }, finally = {
[08:27:43.575]         if (!identical(...future.workdir, getwd())) 
[08:27:43.575]             setwd(...future.workdir)
[08:27:43.575]         {
[08:27:43.575]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.575]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.575]             }
[08:27:43.575]             base::options(...future.oldOptions)
[08:27:43.575]             if (.Platform$OS.type == "windows") {
[08:27:43.575]                 old_names <- names(...future.oldEnvVars)
[08:27:43.575]                 envs <- base::Sys.getenv()
[08:27:43.575]                 names <- names(envs)
[08:27:43.575]                 common <- intersect(names, old_names)
[08:27:43.575]                 added <- setdiff(names, old_names)
[08:27:43.575]                 removed <- setdiff(old_names, names)
[08:27:43.575]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.575]                   envs[common]]
[08:27:43.575]                 NAMES <- toupper(changed)
[08:27:43.575]                 args <- list()
[08:27:43.575]                 for (kk in seq_along(NAMES)) {
[08:27:43.575]                   name <- changed[[kk]]
[08:27:43.575]                   NAME <- NAMES[[kk]]
[08:27:43.575]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.575]                     next
[08:27:43.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.575]                 }
[08:27:43.575]                 NAMES <- toupper(added)
[08:27:43.575]                 for (kk in seq_along(NAMES)) {
[08:27:43.575]                   name <- added[[kk]]
[08:27:43.575]                   NAME <- NAMES[[kk]]
[08:27:43.575]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.575]                     next
[08:27:43.575]                   args[[name]] <- ""
[08:27:43.575]                 }
[08:27:43.575]                 NAMES <- toupper(removed)
[08:27:43.575]                 for (kk in seq_along(NAMES)) {
[08:27:43.575]                   name <- removed[[kk]]
[08:27:43.575]                   NAME <- NAMES[[kk]]
[08:27:43.575]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.575]                     next
[08:27:43.575]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.575]                 }
[08:27:43.575]                 if (length(args) > 0) 
[08:27:43.575]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.575]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.575]             }
[08:27:43.575]             else {
[08:27:43.575]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.575]             }
[08:27:43.575]             {
[08:27:43.575]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.575]                   0L) {
[08:27:43.575]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.575]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.575]                   base::options(opts)
[08:27:43.575]                 }
[08:27:43.575]                 {
[08:27:43.575]                   {
[08:27:43.575]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.575]                     NULL
[08:27:43.575]                   }
[08:27:43.575]                   options(future.plan = NULL)
[08:27:43.575]                   if (is.na(NA_character_)) 
[08:27:43.575]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.575]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.575]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.575]                     .init = FALSE)
[08:27:43.575]                 }
[08:27:43.575]             }
[08:27:43.575]         }
[08:27:43.575]     })
[08:27:43.575]     if (TRUE) {
[08:27:43.575]         base::sink(type = "output", split = FALSE)
[08:27:43.575]         if (TRUE) {
[08:27:43.575]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.575]         }
[08:27:43.575]         else {
[08:27:43.575]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.575]         }
[08:27:43.575]         base::close(...future.stdout)
[08:27:43.575]         ...future.stdout <- NULL
[08:27:43.575]     }
[08:27:43.575]     ...future.result$conditions <- ...future.conditions
[08:27:43.575]     ...future.result$finished <- base::Sys.time()
[08:27:43.575]     ...future.result
[08:27:43.575] }
[08:27:43.578] requestCore(): workers = 2
[08:27:43.580] MulticoreFuture started
[08:27:43.581] - Launch lazy future ... done
[08:27:43.581] plan(): Setting new future strategy stack:
[08:27:43.581] run() for ‘MulticoreFuture’ ... done
[08:27:43.582] getGlobalsAndPackages() ...
[08:27:43.582] Searching for globals...
[08:27:43.581] List of future strategies:
[08:27:43.581] 1. sequential:
[08:27:43.581]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.581]    - tweaked: FALSE
[08:27:43.581]    - call: NULL
[08:27:43.582] plan(): nbrOfWorkers() = 1
[08:27:43.584] - globals found: [1] ‘{’
[08:27:43.584] Searching for globals ... DONE
[08:27:43.584] Resolving globals: FALSE
[08:27:43.584] plan(): Setting new future strategy stack:
[08:27:43.585] 
[08:27:43.584] List of future strategies:
[08:27:43.584] 1. multicore:
[08:27:43.584]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.584]    - tweaked: FALSE
[08:27:43.584]    - call: plan(strategy)
[08:27:43.585] 
[08:27:43.585] getGlobalsAndPackages() ... DONE
[08:27:43.585] run() for ‘Future’ ...
[08:27:43.586] - state: ‘created’
[08:27:43.586] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.588] plan(): nbrOfWorkers() = 2
[08:27:43.588] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.589] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.589]   - Field: ‘label’
[08:27:43.589]   - Field: ‘local’
[08:27:43.589]   - Field: ‘owner’
[08:27:43.589]   - Field: ‘envir’
[08:27:43.589]   - Field: ‘workers’
[08:27:43.589]   - Field: ‘packages’
[08:27:43.590]   - Field: ‘gc’
[08:27:43.590]   - Field: ‘job’
[08:27:43.590]   - Field: ‘conditions’
[08:27:43.590]   - Field: ‘expr’
[08:27:43.590]   - Field: ‘uuid’
[08:27:43.590]   - Field: ‘seed’
[08:27:43.590]   - Field: ‘version’
[08:27:43.590]   - Field: ‘result’
[08:27:43.591]   - Field: ‘asynchronous’
[08:27:43.591]   - Field: ‘calls’
[08:27:43.591]   - Field: ‘globals’
[08:27:43.591]   - Field: ‘stdout’
[08:27:43.591]   - Field: ‘earlySignal’
[08:27:43.591]   - Field: ‘lazy’
[08:27:43.591]   - Field: ‘state’
[08:27:43.591] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.592] - Launch lazy future ...
[08:27:43.592] Packages needed by the future expression (n = 0): <none>
[08:27:43.592] Packages needed by future strategies (n = 0): <none>
[08:27:43.593] {
[08:27:43.593]     {
[08:27:43.593]         {
[08:27:43.593]             ...future.startTime <- base::Sys.time()
[08:27:43.593]             {
[08:27:43.593]                 {
[08:27:43.593]                   {
[08:27:43.593]                     {
[08:27:43.593]                       base::local({
[08:27:43.593]                         has_future <- base::requireNamespace("future", 
[08:27:43.593]                           quietly = TRUE)
[08:27:43.593]                         if (has_future) {
[08:27:43.593]                           ns <- base::getNamespace("future")
[08:27:43.593]                           version <- ns[[".package"]][["version"]]
[08:27:43.593]                           if (is.null(version)) 
[08:27:43.593]                             version <- utils::packageVersion("future")
[08:27:43.593]                         }
[08:27:43.593]                         else {
[08:27:43.593]                           version <- NULL
[08:27:43.593]                         }
[08:27:43.593]                         if (!has_future || version < "1.8.0") {
[08:27:43.593]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.593]                             "", base::R.version$version.string), 
[08:27:43.593]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.593]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.593]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.593]                               "release", "version")], collapse = " "), 
[08:27:43.593]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.593]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.593]                             info)
[08:27:43.593]                           info <- base::paste(info, collapse = "; ")
[08:27:43.593]                           if (!has_future) {
[08:27:43.593]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.593]                               info)
[08:27:43.593]                           }
[08:27:43.593]                           else {
[08:27:43.593]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.593]                               info, version)
[08:27:43.593]                           }
[08:27:43.593]                           base::stop(msg)
[08:27:43.593]                         }
[08:27:43.593]                       })
[08:27:43.593]                     }
[08:27:43.593]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.593]                     base::options(mc.cores = 1L)
[08:27:43.593]                   }
[08:27:43.593]                   ...future.strategy.old <- future::plan("list")
[08:27:43.593]                   options(future.plan = NULL)
[08:27:43.593]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.593]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.593]                 }
[08:27:43.593]                 ...future.workdir <- getwd()
[08:27:43.593]             }
[08:27:43.593]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.593]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.593]         }
[08:27:43.593]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.593]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.593]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.593]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.593]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.593]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.593]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.593]             base::names(...future.oldOptions))
[08:27:43.593]     }
[08:27:43.593]     if (FALSE) {
[08:27:43.593]     }
[08:27:43.593]     else {
[08:27:43.593]         if (TRUE) {
[08:27:43.593]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.593]                 open = "w")
[08:27:43.593]         }
[08:27:43.593]         else {
[08:27:43.593]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.593]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.593]         }
[08:27:43.593]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.593]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.593]             base::sink(type = "output", split = FALSE)
[08:27:43.593]             base::close(...future.stdout)
[08:27:43.593]         }, add = TRUE)
[08:27:43.593]     }
[08:27:43.593]     ...future.frame <- base::sys.nframe()
[08:27:43.593]     ...future.conditions <- base::list()
[08:27:43.593]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.593]     if (FALSE) {
[08:27:43.593]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.593]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.593]     }
[08:27:43.593]     ...future.result <- base::tryCatch({
[08:27:43.593]         base::withCallingHandlers({
[08:27:43.593]             ...future.value <- base::withVisible(base::local({
[08:27:43.593]                 withCallingHandlers({
[08:27:43.593]                   {
[08:27:43.593]                     4
[08:27:43.593]                   }
[08:27:43.593]                 }, immediateCondition = function(cond) {
[08:27:43.593]                   save_rds <- function (object, pathname, ...) 
[08:27:43.593]                   {
[08:27:43.593]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.593]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.593]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.593]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.593]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.593]                         fi_tmp[["mtime"]])
[08:27:43.593]                     }
[08:27:43.593]                     tryCatch({
[08:27:43.593]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.593]                     }, error = function(ex) {
[08:27:43.593]                       msg <- conditionMessage(ex)
[08:27:43.593]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.593]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.593]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.593]                         fi_tmp[["mtime"]], msg)
[08:27:43.593]                       ex$message <- msg
[08:27:43.593]                       stop(ex)
[08:27:43.593]                     })
[08:27:43.593]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.593]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.593]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.593]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.593]                       fi <- file.info(pathname)
[08:27:43.593]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.593]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.593]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.593]                         fi[["size"]], fi[["mtime"]])
[08:27:43.593]                       stop(msg)
[08:27:43.593]                     }
[08:27:43.593]                     invisible(pathname)
[08:27:43.593]                   }
[08:27:43.593]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.593]                     rootPath = tempdir()) 
[08:27:43.593]                   {
[08:27:43.593]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.593]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.593]                       tmpdir = path, fileext = ".rds")
[08:27:43.593]                     save_rds(obj, file)
[08:27:43.593]                   }
[08:27:43.593]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.593]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.593]                   {
[08:27:43.593]                     inherits <- base::inherits
[08:27:43.593]                     invokeRestart <- base::invokeRestart
[08:27:43.593]                     is.null <- base::is.null
[08:27:43.593]                     muffled <- FALSE
[08:27:43.593]                     if (inherits(cond, "message")) {
[08:27:43.593]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.593]                       if (muffled) 
[08:27:43.593]                         invokeRestart("muffleMessage")
[08:27:43.593]                     }
[08:27:43.593]                     else if (inherits(cond, "warning")) {
[08:27:43.593]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.593]                       if (muffled) 
[08:27:43.593]                         invokeRestart("muffleWarning")
[08:27:43.593]                     }
[08:27:43.593]                     else if (inherits(cond, "condition")) {
[08:27:43.593]                       if (!is.null(pattern)) {
[08:27:43.593]                         computeRestarts <- base::computeRestarts
[08:27:43.593]                         grepl <- base::grepl
[08:27:43.593]                         restarts <- computeRestarts(cond)
[08:27:43.593]                         for (restart in restarts) {
[08:27:43.593]                           name <- restart$name
[08:27:43.593]                           if (is.null(name)) 
[08:27:43.593]                             next
[08:27:43.593]                           if (!grepl(pattern, name)) 
[08:27:43.593]                             next
[08:27:43.593]                           invokeRestart(restart)
[08:27:43.593]                           muffled <- TRUE
[08:27:43.593]                           break
[08:27:43.593]                         }
[08:27:43.593]                       }
[08:27:43.593]                     }
[08:27:43.593]                     invisible(muffled)
[08:27:43.593]                   }
[08:27:43.593]                   muffleCondition(cond)
[08:27:43.593]                 })
[08:27:43.593]             }))
[08:27:43.593]             future::FutureResult(value = ...future.value$value, 
[08:27:43.593]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.593]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.593]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.593]                     ...future.globalenv.names))
[08:27:43.593]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.593]         }, condition = base::local({
[08:27:43.593]             c <- base::c
[08:27:43.593]             inherits <- base::inherits
[08:27:43.593]             invokeRestart <- base::invokeRestart
[08:27:43.593]             length <- base::length
[08:27:43.593]             list <- base::list
[08:27:43.593]             seq.int <- base::seq.int
[08:27:43.593]             signalCondition <- base::signalCondition
[08:27:43.593]             sys.calls <- base::sys.calls
[08:27:43.593]             `[[` <- base::`[[`
[08:27:43.593]             `+` <- base::`+`
[08:27:43.593]             `<<-` <- base::`<<-`
[08:27:43.593]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.593]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.593]                   3L)]
[08:27:43.593]             }
[08:27:43.593]             function(cond) {
[08:27:43.593]                 is_error <- inherits(cond, "error")
[08:27:43.593]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.593]                   NULL)
[08:27:43.593]                 if (is_error) {
[08:27:43.593]                   sessionInformation <- function() {
[08:27:43.593]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.593]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.593]                       search = base::search(), system = base::Sys.info())
[08:27:43.593]                   }
[08:27:43.593]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.593]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.593]                     cond$call), session = sessionInformation(), 
[08:27:43.593]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.593]                   signalCondition(cond)
[08:27:43.593]                 }
[08:27:43.593]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.593]                 "immediateCondition"))) {
[08:27:43.593]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.593]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.593]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.593]                   if (TRUE && !signal) {
[08:27:43.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.593]                     {
[08:27:43.593]                       inherits <- base::inherits
[08:27:43.593]                       invokeRestart <- base::invokeRestart
[08:27:43.593]                       is.null <- base::is.null
[08:27:43.593]                       muffled <- FALSE
[08:27:43.593]                       if (inherits(cond, "message")) {
[08:27:43.593]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.593]                         if (muffled) 
[08:27:43.593]                           invokeRestart("muffleMessage")
[08:27:43.593]                       }
[08:27:43.593]                       else if (inherits(cond, "warning")) {
[08:27:43.593]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.593]                         if (muffled) 
[08:27:43.593]                           invokeRestart("muffleWarning")
[08:27:43.593]                       }
[08:27:43.593]                       else if (inherits(cond, "condition")) {
[08:27:43.593]                         if (!is.null(pattern)) {
[08:27:43.593]                           computeRestarts <- base::computeRestarts
[08:27:43.593]                           grepl <- base::grepl
[08:27:43.593]                           restarts <- computeRestarts(cond)
[08:27:43.593]                           for (restart in restarts) {
[08:27:43.593]                             name <- restart$name
[08:27:43.593]                             if (is.null(name)) 
[08:27:43.593]                               next
[08:27:43.593]                             if (!grepl(pattern, name)) 
[08:27:43.593]                               next
[08:27:43.593]                             invokeRestart(restart)
[08:27:43.593]                             muffled <- TRUE
[08:27:43.593]                             break
[08:27:43.593]                           }
[08:27:43.593]                         }
[08:27:43.593]                       }
[08:27:43.593]                       invisible(muffled)
[08:27:43.593]                     }
[08:27:43.593]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.593]                   }
[08:27:43.593]                 }
[08:27:43.593]                 else {
[08:27:43.593]                   if (TRUE) {
[08:27:43.593]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.593]                     {
[08:27:43.593]                       inherits <- base::inherits
[08:27:43.593]                       invokeRestart <- base::invokeRestart
[08:27:43.593]                       is.null <- base::is.null
[08:27:43.593]                       muffled <- FALSE
[08:27:43.593]                       if (inherits(cond, "message")) {
[08:27:43.593]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.593]                         if (muffled) 
[08:27:43.593]                           invokeRestart("muffleMessage")
[08:27:43.593]                       }
[08:27:43.593]                       else if (inherits(cond, "warning")) {
[08:27:43.593]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.593]                         if (muffled) 
[08:27:43.593]                           invokeRestart("muffleWarning")
[08:27:43.593]                       }
[08:27:43.593]                       else if (inherits(cond, "condition")) {
[08:27:43.593]                         if (!is.null(pattern)) {
[08:27:43.593]                           computeRestarts <- base::computeRestarts
[08:27:43.593]                           grepl <- base::grepl
[08:27:43.593]                           restarts <- computeRestarts(cond)
[08:27:43.593]                           for (restart in restarts) {
[08:27:43.593]                             name <- restart$name
[08:27:43.593]                             if (is.null(name)) 
[08:27:43.593]                               next
[08:27:43.593]                             if (!grepl(pattern, name)) 
[08:27:43.593]                               next
[08:27:43.593]                             invokeRestart(restart)
[08:27:43.593]                             muffled <- TRUE
[08:27:43.593]                             break
[08:27:43.593]                           }
[08:27:43.593]                         }
[08:27:43.593]                       }
[08:27:43.593]                       invisible(muffled)
[08:27:43.593]                     }
[08:27:43.593]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.593]                   }
[08:27:43.593]                 }
[08:27:43.593]             }
[08:27:43.593]         }))
[08:27:43.593]     }, error = function(ex) {
[08:27:43.593]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.593]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.593]                 ...future.rng), started = ...future.startTime, 
[08:27:43.593]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.593]             version = "1.8"), class = "FutureResult")
[08:27:43.593]     }, finally = {
[08:27:43.593]         if (!identical(...future.workdir, getwd())) 
[08:27:43.593]             setwd(...future.workdir)
[08:27:43.593]         {
[08:27:43.593]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.593]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.593]             }
[08:27:43.593]             base::options(...future.oldOptions)
[08:27:43.593]             if (.Platform$OS.type == "windows") {
[08:27:43.593]                 old_names <- names(...future.oldEnvVars)
[08:27:43.593]                 envs <- base::Sys.getenv()
[08:27:43.593]                 names <- names(envs)
[08:27:43.593]                 common <- intersect(names, old_names)
[08:27:43.593]                 added <- setdiff(names, old_names)
[08:27:43.593]                 removed <- setdiff(old_names, names)
[08:27:43.593]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.593]                   envs[common]]
[08:27:43.593]                 NAMES <- toupper(changed)
[08:27:43.593]                 args <- list()
[08:27:43.593]                 for (kk in seq_along(NAMES)) {
[08:27:43.593]                   name <- changed[[kk]]
[08:27:43.593]                   NAME <- NAMES[[kk]]
[08:27:43.593]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.593]                     next
[08:27:43.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.593]                 }
[08:27:43.593]                 NAMES <- toupper(added)
[08:27:43.593]                 for (kk in seq_along(NAMES)) {
[08:27:43.593]                   name <- added[[kk]]
[08:27:43.593]                   NAME <- NAMES[[kk]]
[08:27:43.593]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.593]                     next
[08:27:43.593]                   args[[name]] <- ""
[08:27:43.593]                 }
[08:27:43.593]                 NAMES <- toupper(removed)
[08:27:43.593]                 for (kk in seq_along(NAMES)) {
[08:27:43.593]                   name <- removed[[kk]]
[08:27:43.593]                   NAME <- NAMES[[kk]]
[08:27:43.593]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.593]                     next
[08:27:43.593]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.593]                 }
[08:27:43.593]                 if (length(args) > 0) 
[08:27:43.593]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.593]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.593]             }
[08:27:43.593]             else {
[08:27:43.593]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.593]             }
[08:27:43.593]             {
[08:27:43.593]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.593]                   0L) {
[08:27:43.593]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.593]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.593]                   base::options(opts)
[08:27:43.593]                 }
[08:27:43.593]                 {
[08:27:43.593]                   {
[08:27:43.593]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.593]                     NULL
[08:27:43.593]                   }
[08:27:43.593]                   options(future.plan = NULL)
[08:27:43.593]                   if (is.na(NA_character_)) 
[08:27:43.593]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.593]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.593]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.593]                     .init = FALSE)
[08:27:43.593]                 }
[08:27:43.593]             }
[08:27:43.593]         }
[08:27:43.593]     })
[08:27:43.593]     if (TRUE) {
[08:27:43.593]         base::sink(type = "output", split = FALSE)
[08:27:43.593]         if (TRUE) {
[08:27:43.593]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.593]         }
[08:27:43.593]         else {
[08:27:43.593]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.593]         }
[08:27:43.593]         base::close(...future.stdout)
[08:27:43.593]         ...future.stdout <- NULL
[08:27:43.593]     }
[08:27:43.593]     ...future.result$conditions <- ...future.conditions
[08:27:43.593]     ...future.result$finished <- base::Sys.time()
[08:27:43.593]     ...future.result
[08:27:43.593] }
[08:27:43.596] requestCore(): workers = 2
[08:27:43.603] MulticoreFuture started
[08:27:43.603] - Launch lazy future ... done
[08:27:43.603] run() for ‘MulticoreFuture’ ... done
[08:27:43.604] plan(): Setting new future strategy stack:
[08:27:43.604] result() for MulticoreFuture ...
[08:27:43.604] List of future strategies:
[08:27:43.604] 1. sequential:
[08:27:43.604]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.604]    - tweaked: FALSE
[08:27:43.604]    - call: NULL
[08:27:43.605] plan(): nbrOfWorkers() = 1
[08:27:43.607] result() for MulticoreFuture ...
[08:27:43.607] result() for MulticoreFuture ... done
[08:27:43.607] plan(): Setting new future strategy stack:
[08:27:43.607] result() for MulticoreFuture ... done
[08:27:43.607] result() for MulticoreFuture ...
[08:27:43.607] result() for MulticoreFuture ... done
u$a = 2
[08:27:43.607] List of future strategies:
[08:27:43.607] 1. multicore:
[08:27:43.607]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.607]    - tweaked: FALSE
[08:27:43.607]    - call: plan(strategy)
[08:27:43.608] result() for MulticoreFuture ...
[08:27:43.611] plan(): nbrOfWorkers() = 2
[08:27:43.611] result() for MulticoreFuture ...
[08:27:43.612] result() for MulticoreFuture ... done
[08:27:43.612] result() for MulticoreFuture ... done
[08:27:43.612] result() for MulticoreFuture ...
[08:27:43.612] result() for MulticoreFuture ... done
v$a = 4
[08:27:43.615] getGlobalsAndPackages() ...
[08:27:43.615] Searching for globals...
[08:27:43.617] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.617] Searching for globals ... DONE
[08:27:43.617] Resolving globals: FALSE
[08:27:43.618] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.618] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.618] - globals: [1] ‘a’
[08:27:43.619] 
[08:27:43.619] getGlobalsAndPackages() ... DONE
[08:27:43.619] run() for ‘Future’ ...
[08:27:43.619] - state: ‘created’
[08:27:43.619] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.621] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.621] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.622]   - Field: ‘label’
[08:27:43.622]   - Field: ‘local’
[08:27:43.622]   - Field: ‘owner’
[08:27:43.622]   - Field: ‘envir’
[08:27:43.622]   - Field: ‘workers’
[08:27:43.622]   - Field: ‘packages’
[08:27:43.622]   - Field: ‘gc’
[08:27:43.622]   - Field: ‘job’
[08:27:43.623]   - Field: ‘conditions’
[08:27:43.623]   - Field: ‘expr’
[08:27:43.623]   - Field: ‘uuid’
[08:27:43.623]   - Field: ‘seed’
[08:27:43.623]   - Field: ‘version’
[08:27:43.623]   - Field: ‘result’
[08:27:43.623]   - Field: ‘asynchronous’
[08:27:43.623]   - Field: ‘calls’
[08:27:43.623]   - Field: ‘globals’
[08:27:43.624]   - Field: ‘stdout’
[08:27:43.624]   - Field: ‘earlySignal’
[08:27:43.624]   - Field: ‘lazy’
[08:27:43.624]   - Field: ‘state’
[08:27:43.624] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.624] - Launch lazy future ...
[08:27:43.624] Packages needed by the future expression (n = 0): <none>
[08:27:43.625] Packages needed by future strategies (n = 0): <none>
[08:27:43.625] {
[08:27:43.625]     {
[08:27:43.625]         {
[08:27:43.625]             ...future.startTime <- base::Sys.time()
[08:27:43.625]             {
[08:27:43.625]                 {
[08:27:43.625]                   {
[08:27:43.625]                     {
[08:27:43.625]                       base::local({
[08:27:43.625]                         has_future <- base::requireNamespace("future", 
[08:27:43.625]                           quietly = TRUE)
[08:27:43.625]                         if (has_future) {
[08:27:43.625]                           ns <- base::getNamespace("future")
[08:27:43.625]                           version <- ns[[".package"]][["version"]]
[08:27:43.625]                           if (is.null(version)) 
[08:27:43.625]                             version <- utils::packageVersion("future")
[08:27:43.625]                         }
[08:27:43.625]                         else {
[08:27:43.625]                           version <- NULL
[08:27:43.625]                         }
[08:27:43.625]                         if (!has_future || version < "1.8.0") {
[08:27:43.625]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.625]                             "", base::R.version$version.string), 
[08:27:43.625]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.625]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.625]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.625]                               "release", "version")], collapse = " "), 
[08:27:43.625]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.625]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.625]                             info)
[08:27:43.625]                           info <- base::paste(info, collapse = "; ")
[08:27:43.625]                           if (!has_future) {
[08:27:43.625]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.625]                               info)
[08:27:43.625]                           }
[08:27:43.625]                           else {
[08:27:43.625]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.625]                               info, version)
[08:27:43.625]                           }
[08:27:43.625]                           base::stop(msg)
[08:27:43.625]                         }
[08:27:43.625]                       })
[08:27:43.625]                     }
[08:27:43.625]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.625]                     base::options(mc.cores = 1L)
[08:27:43.625]                   }
[08:27:43.625]                   ...future.strategy.old <- future::plan("list")
[08:27:43.625]                   options(future.plan = NULL)
[08:27:43.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.625]                 }
[08:27:43.625]                 ...future.workdir <- getwd()
[08:27:43.625]             }
[08:27:43.625]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.625]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.625]         }
[08:27:43.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.625]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.625]             base::names(...future.oldOptions))
[08:27:43.625]     }
[08:27:43.625]     if (FALSE) {
[08:27:43.625]     }
[08:27:43.625]     else {
[08:27:43.625]         if (TRUE) {
[08:27:43.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.625]                 open = "w")
[08:27:43.625]         }
[08:27:43.625]         else {
[08:27:43.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.625]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.625]         }
[08:27:43.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.625]             base::sink(type = "output", split = FALSE)
[08:27:43.625]             base::close(...future.stdout)
[08:27:43.625]         }, add = TRUE)
[08:27:43.625]     }
[08:27:43.625]     ...future.frame <- base::sys.nframe()
[08:27:43.625]     ...future.conditions <- base::list()
[08:27:43.625]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.625]     if (FALSE) {
[08:27:43.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.625]     }
[08:27:43.625]     ...future.result <- base::tryCatch({
[08:27:43.625]         base::withCallingHandlers({
[08:27:43.625]             ...future.value <- base::withVisible(base::local({
[08:27:43.625]                 withCallingHandlers({
[08:27:43.625]                   {
[08:27:43.625]                     2 * a
[08:27:43.625]                   }
[08:27:43.625]                 }, immediateCondition = function(cond) {
[08:27:43.625]                   save_rds <- function (object, pathname, ...) 
[08:27:43.625]                   {
[08:27:43.625]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.625]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.625]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.625]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.625]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.625]                         fi_tmp[["mtime"]])
[08:27:43.625]                     }
[08:27:43.625]                     tryCatch({
[08:27:43.625]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.625]                     }, error = function(ex) {
[08:27:43.625]                       msg <- conditionMessage(ex)
[08:27:43.625]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.625]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.625]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.625]                         fi_tmp[["mtime"]], msg)
[08:27:43.625]                       ex$message <- msg
[08:27:43.625]                       stop(ex)
[08:27:43.625]                     })
[08:27:43.625]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.625]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.625]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.625]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.625]                       fi <- file.info(pathname)
[08:27:43.625]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.625]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.625]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.625]                         fi[["size"]], fi[["mtime"]])
[08:27:43.625]                       stop(msg)
[08:27:43.625]                     }
[08:27:43.625]                     invisible(pathname)
[08:27:43.625]                   }
[08:27:43.625]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.625]                     rootPath = tempdir()) 
[08:27:43.625]                   {
[08:27:43.625]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.625]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.625]                       tmpdir = path, fileext = ".rds")
[08:27:43.625]                     save_rds(obj, file)
[08:27:43.625]                   }
[08:27:43.625]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.625]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.625]                   {
[08:27:43.625]                     inherits <- base::inherits
[08:27:43.625]                     invokeRestart <- base::invokeRestart
[08:27:43.625]                     is.null <- base::is.null
[08:27:43.625]                     muffled <- FALSE
[08:27:43.625]                     if (inherits(cond, "message")) {
[08:27:43.625]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.625]                       if (muffled) 
[08:27:43.625]                         invokeRestart("muffleMessage")
[08:27:43.625]                     }
[08:27:43.625]                     else if (inherits(cond, "warning")) {
[08:27:43.625]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.625]                       if (muffled) 
[08:27:43.625]                         invokeRestart("muffleWarning")
[08:27:43.625]                     }
[08:27:43.625]                     else if (inherits(cond, "condition")) {
[08:27:43.625]                       if (!is.null(pattern)) {
[08:27:43.625]                         computeRestarts <- base::computeRestarts
[08:27:43.625]                         grepl <- base::grepl
[08:27:43.625]                         restarts <- computeRestarts(cond)
[08:27:43.625]                         for (restart in restarts) {
[08:27:43.625]                           name <- restart$name
[08:27:43.625]                           if (is.null(name)) 
[08:27:43.625]                             next
[08:27:43.625]                           if (!grepl(pattern, name)) 
[08:27:43.625]                             next
[08:27:43.625]                           invokeRestart(restart)
[08:27:43.625]                           muffled <- TRUE
[08:27:43.625]                           break
[08:27:43.625]                         }
[08:27:43.625]                       }
[08:27:43.625]                     }
[08:27:43.625]                     invisible(muffled)
[08:27:43.625]                   }
[08:27:43.625]                   muffleCondition(cond)
[08:27:43.625]                 })
[08:27:43.625]             }))
[08:27:43.625]             future::FutureResult(value = ...future.value$value, 
[08:27:43.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.625]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.625]                     ...future.globalenv.names))
[08:27:43.625]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.625]         }, condition = base::local({
[08:27:43.625]             c <- base::c
[08:27:43.625]             inherits <- base::inherits
[08:27:43.625]             invokeRestart <- base::invokeRestart
[08:27:43.625]             length <- base::length
[08:27:43.625]             list <- base::list
[08:27:43.625]             seq.int <- base::seq.int
[08:27:43.625]             signalCondition <- base::signalCondition
[08:27:43.625]             sys.calls <- base::sys.calls
[08:27:43.625]             `[[` <- base::`[[`
[08:27:43.625]             `+` <- base::`+`
[08:27:43.625]             `<<-` <- base::`<<-`
[08:27:43.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.625]                   3L)]
[08:27:43.625]             }
[08:27:43.625]             function(cond) {
[08:27:43.625]                 is_error <- inherits(cond, "error")
[08:27:43.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.625]                   NULL)
[08:27:43.625]                 if (is_error) {
[08:27:43.625]                   sessionInformation <- function() {
[08:27:43.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.625]                       search = base::search(), system = base::Sys.info())
[08:27:43.625]                   }
[08:27:43.625]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.625]                     cond$call), session = sessionInformation(), 
[08:27:43.625]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.625]                   signalCondition(cond)
[08:27:43.625]                 }
[08:27:43.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.625]                 "immediateCondition"))) {
[08:27:43.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.625]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.625]                   if (TRUE && !signal) {
[08:27:43.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.625]                     {
[08:27:43.625]                       inherits <- base::inherits
[08:27:43.625]                       invokeRestart <- base::invokeRestart
[08:27:43.625]                       is.null <- base::is.null
[08:27:43.625]                       muffled <- FALSE
[08:27:43.625]                       if (inherits(cond, "message")) {
[08:27:43.625]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.625]                         if (muffled) 
[08:27:43.625]                           invokeRestart("muffleMessage")
[08:27:43.625]                       }
[08:27:43.625]                       else if (inherits(cond, "warning")) {
[08:27:43.625]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.625]                         if (muffled) 
[08:27:43.625]                           invokeRestart("muffleWarning")
[08:27:43.625]                       }
[08:27:43.625]                       else if (inherits(cond, "condition")) {
[08:27:43.625]                         if (!is.null(pattern)) {
[08:27:43.625]                           computeRestarts <- base::computeRestarts
[08:27:43.625]                           grepl <- base::grepl
[08:27:43.625]                           restarts <- computeRestarts(cond)
[08:27:43.625]                           for (restart in restarts) {
[08:27:43.625]                             name <- restart$name
[08:27:43.625]                             if (is.null(name)) 
[08:27:43.625]                               next
[08:27:43.625]                             if (!grepl(pattern, name)) 
[08:27:43.625]                               next
[08:27:43.625]                             invokeRestart(restart)
[08:27:43.625]                             muffled <- TRUE
[08:27:43.625]                             break
[08:27:43.625]                           }
[08:27:43.625]                         }
[08:27:43.625]                       }
[08:27:43.625]                       invisible(muffled)
[08:27:43.625]                     }
[08:27:43.625]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.625]                   }
[08:27:43.625]                 }
[08:27:43.625]                 else {
[08:27:43.625]                   if (TRUE) {
[08:27:43.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.625]                     {
[08:27:43.625]                       inherits <- base::inherits
[08:27:43.625]                       invokeRestart <- base::invokeRestart
[08:27:43.625]                       is.null <- base::is.null
[08:27:43.625]                       muffled <- FALSE
[08:27:43.625]                       if (inherits(cond, "message")) {
[08:27:43.625]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.625]                         if (muffled) 
[08:27:43.625]                           invokeRestart("muffleMessage")
[08:27:43.625]                       }
[08:27:43.625]                       else if (inherits(cond, "warning")) {
[08:27:43.625]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.625]                         if (muffled) 
[08:27:43.625]                           invokeRestart("muffleWarning")
[08:27:43.625]                       }
[08:27:43.625]                       else if (inherits(cond, "condition")) {
[08:27:43.625]                         if (!is.null(pattern)) {
[08:27:43.625]                           computeRestarts <- base::computeRestarts
[08:27:43.625]                           grepl <- base::grepl
[08:27:43.625]                           restarts <- computeRestarts(cond)
[08:27:43.625]                           for (restart in restarts) {
[08:27:43.625]                             name <- restart$name
[08:27:43.625]                             if (is.null(name)) 
[08:27:43.625]                               next
[08:27:43.625]                             if (!grepl(pattern, name)) 
[08:27:43.625]                               next
[08:27:43.625]                             invokeRestart(restart)
[08:27:43.625]                             muffled <- TRUE
[08:27:43.625]                             break
[08:27:43.625]                           }
[08:27:43.625]                         }
[08:27:43.625]                       }
[08:27:43.625]                       invisible(muffled)
[08:27:43.625]                     }
[08:27:43.625]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.625]                   }
[08:27:43.625]                 }
[08:27:43.625]             }
[08:27:43.625]         }))
[08:27:43.625]     }, error = function(ex) {
[08:27:43.625]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.625]                 ...future.rng), started = ...future.startTime, 
[08:27:43.625]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.625]             version = "1.8"), class = "FutureResult")
[08:27:43.625]     }, finally = {
[08:27:43.625]         if (!identical(...future.workdir, getwd())) 
[08:27:43.625]             setwd(...future.workdir)
[08:27:43.625]         {
[08:27:43.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.625]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.625]             }
[08:27:43.625]             base::options(...future.oldOptions)
[08:27:43.625]             if (.Platform$OS.type == "windows") {
[08:27:43.625]                 old_names <- names(...future.oldEnvVars)
[08:27:43.625]                 envs <- base::Sys.getenv()
[08:27:43.625]                 names <- names(envs)
[08:27:43.625]                 common <- intersect(names, old_names)
[08:27:43.625]                 added <- setdiff(names, old_names)
[08:27:43.625]                 removed <- setdiff(old_names, names)
[08:27:43.625]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.625]                   envs[common]]
[08:27:43.625]                 NAMES <- toupper(changed)
[08:27:43.625]                 args <- list()
[08:27:43.625]                 for (kk in seq_along(NAMES)) {
[08:27:43.625]                   name <- changed[[kk]]
[08:27:43.625]                   NAME <- NAMES[[kk]]
[08:27:43.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.625]                     next
[08:27:43.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.625]                 }
[08:27:43.625]                 NAMES <- toupper(added)
[08:27:43.625]                 for (kk in seq_along(NAMES)) {
[08:27:43.625]                   name <- added[[kk]]
[08:27:43.625]                   NAME <- NAMES[[kk]]
[08:27:43.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.625]                     next
[08:27:43.625]                   args[[name]] <- ""
[08:27:43.625]                 }
[08:27:43.625]                 NAMES <- toupper(removed)
[08:27:43.625]                 for (kk in seq_along(NAMES)) {
[08:27:43.625]                   name <- removed[[kk]]
[08:27:43.625]                   NAME <- NAMES[[kk]]
[08:27:43.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.625]                     next
[08:27:43.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.625]                 }
[08:27:43.625]                 if (length(args) > 0) 
[08:27:43.625]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.625]             }
[08:27:43.625]             else {
[08:27:43.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.625]             }
[08:27:43.625]             {
[08:27:43.625]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.625]                   0L) {
[08:27:43.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.625]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.625]                   base::options(opts)
[08:27:43.625]                 }
[08:27:43.625]                 {
[08:27:43.625]                   {
[08:27:43.625]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.625]                     NULL
[08:27:43.625]                   }
[08:27:43.625]                   options(future.plan = NULL)
[08:27:43.625]                   if (is.na(NA_character_)) 
[08:27:43.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.625]                     .init = FALSE)
[08:27:43.625]                 }
[08:27:43.625]             }
[08:27:43.625]         }
[08:27:43.625]     })
[08:27:43.625]     if (TRUE) {
[08:27:43.625]         base::sink(type = "output", split = FALSE)
[08:27:43.625]         if (TRUE) {
[08:27:43.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.625]         }
[08:27:43.625]         else {
[08:27:43.625]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.625]         }
[08:27:43.625]         base::close(...future.stdout)
[08:27:43.625]         ...future.stdout <- NULL
[08:27:43.625]     }
[08:27:43.625]     ...future.result$conditions <- ...future.conditions
[08:27:43.625]     ...future.result$finished <- base::Sys.time()
[08:27:43.625]     ...future.result
[08:27:43.625] }
[08:27:43.627] assign_globals() ...
[08:27:43.628] List of 1
[08:27:43.628]  $ a: num 1
[08:27:43.628]  - attr(*, "where")=List of 1
[08:27:43.628]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.628]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.628]  - attr(*, "resolved")= logi FALSE
[08:27:43.628]  - attr(*, "total_size")= num 39
[08:27:43.628]  - attr(*, "already-done")= logi TRUE
[08:27:43.631] - copied ‘a’ to environment
[08:27:43.631] assign_globals() ... done
[08:27:43.631] requestCore(): workers = 2
[08:27:43.633] MulticoreFuture started
[08:27:43.634] - Launch lazy future ... done
[08:27:43.634] run() for ‘MulticoreFuture’ ... done
[08:27:43.634] result() for MulticoreFuture ...
[08:27:43.634] plan(): Setting new future strategy stack:
[08:27:43.634] List of future strategies:
[08:27:43.634] 1. sequential:
[08:27:43.634]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.634]    - tweaked: FALSE
[08:27:43.634]    - call: NULL
[08:27:43.635] plan(): nbrOfWorkers() = 1
[08:27:43.637] plan(): Setting new future strategy stack:
[08:27:43.638] List of future strategies:
[08:27:43.638] 1. multicore:
[08:27:43.638]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.638]    - tweaked: FALSE
[08:27:43.638]    - call: plan(strategy)
[08:27:43.642] plan(): nbrOfWorkers() = 2
[08:27:43.643] result() for MulticoreFuture ...
[08:27:43.643] result() for MulticoreFuture ... done
[08:27:43.643] result() for MulticoreFuture ... done
[08:27:43.643] result() for MulticoreFuture ...
[08:27:43.643] result() for MulticoreFuture ... done
[08:27:43.644] getGlobalsAndPackages() ...
[08:27:43.644] Searching for globals...
[08:27:43.645] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.645] Searching for globals ... DONE
[08:27:43.645] Resolving globals: FALSE
[08:27:43.646] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.646] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.647] - globals: [1] ‘a’
[08:27:43.647] 
[08:27:43.647] getGlobalsAndPackages() ... DONE
[08:27:43.647] run() for ‘Future’ ...
[08:27:43.647] - state: ‘created’
[08:27:43.647] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.650] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.650] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.650]   - Field: ‘label’
[08:27:43.650]   - Field: ‘local’
[08:27:43.650]   - Field: ‘owner’
[08:27:43.650]   - Field: ‘envir’
[08:27:43.650]   - Field: ‘workers’
[08:27:43.651]   - Field: ‘packages’
[08:27:43.651]   - Field: ‘gc’
[08:27:43.651]   - Field: ‘job’
[08:27:43.651]   - Field: ‘conditions’
[08:27:43.651]   - Field: ‘expr’
[08:27:43.651]   - Field: ‘uuid’
[08:27:43.651]   - Field: ‘seed’
[08:27:43.651]   - Field: ‘version’
[08:27:43.651]   - Field: ‘result’
[08:27:43.651]   - Field: ‘asynchronous’
[08:27:43.652]   - Field: ‘calls’
[08:27:43.652]   - Field: ‘globals’
[08:27:43.652]   - Field: ‘stdout’
[08:27:43.652]   - Field: ‘earlySignal’
[08:27:43.652]   - Field: ‘lazy’
[08:27:43.652]   - Field: ‘state’
[08:27:43.652] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.652] - Launch lazy future ...
[08:27:43.653] Packages needed by the future expression (n = 0): <none>
[08:27:43.653] Packages needed by future strategies (n = 0): <none>
[08:27:43.653] {
[08:27:43.653]     {
[08:27:43.653]         {
[08:27:43.653]             ...future.startTime <- base::Sys.time()
[08:27:43.653]             {
[08:27:43.653]                 {
[08:27:43.653]                   {
[08:27:43.653]                     {
[08:27:43.653]                       base::local({
[08:27:43.653]                         has_future <- base::requireNamespace("future", 
[08:27:43.653]                           quietly = TRUE)
[08:27:43.653]                         if (has_future) {
[08:27:43.653]                           ns <- base::getNamespace("future")
[08:27:43.653]                           version <- ns[[".package"]][["version"]]
[08:27:43.653]                           if (is.null(version)) 
[08:27:43.653]                             version <- utils::packageVersion("future")
[08:27:43.653]                         }
[08:27:43.653]                         else {
[08:27:43.653]                           version <- NULL
[08:27:43.653]                         }
[08:27:43.653]                         if (!has_future || version < "1.8.0") {
[08:27:43.653]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.653]                             "", base::R.version$version.string), 
[08:27:43.653]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.653]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.653]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.653]                               "release", "version")], collapse = " "), 
[08:27:43.653]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.653]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.653]                             info)
[08:27:43.653]                           info <- base::paste(info, collapse = "; ")
[08:27:43.653]                           if (!has_future) {
[08:27:43.653]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.653]                               info)
[08:27:43.653]                           }
[08:27:43.653]                           else {
[08:27:43.653]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.653]                               info, version)
[08:27:43.653]                           }
[08:27:43.653]                           base::stop(msg)
[08:27:43.653]                         }
[08:27:43.653]                       })
[08:27:43.653]                     }
[08:27:43.653]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.653]                     base::options(mc.cores = 1L)
[08:27:43.653]                   }
[08:27:43.653]                   ...future.strategy.old <- future::plan("list")
[08:27:43.653]                   options(future.plan = NULL)
[08:27:43.653]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.653]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.653]                 }
[08:27:43.653]                 ...future.workdir <- getwd()
[08:27:43.653]             }
[08:27:43.653]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.653]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.653]         }
[08:27:43.653]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.653]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.653]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.653]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.653]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.653]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.653]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.653]             base::names(...future.oldOptions))
[08:27:43.653]     }
[08:27:43.653]     if (FALSE) {
[08:27:43.653]     }
[08:27:43.653]     else {
[08:27:43.653]         if (TRUE) {
[08:27:43.653]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.653]                 open = "w")
[08:27:43.653]         }
[08:27:43.653]         else {
[08:27:43.653]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.653]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.653]         }
[08:27:43.653]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.653]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.653]             base::sink(type = "output", split = FALSE)
[08:27:43.653]             base::close(...future.stdout)
[08:27:43.653]         }, add = TRUE)
[08:27:43.653]     }
[08:27:43.653]     ...future.frame <- base::sys.nframe()
[08:27:43.653]     ...future.conditions <- base::list()
[08:27:43.653]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.653]     if (FALSE) {
[08:27:43.653]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.653]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.653]     }
[08:27:43.653]     ...future.result <- base::tryCatch({
[08:27:43.653]         base::withCallingHandlers({
[08:27:43.653]             ...future.value <- base::withVisible(base::local({
[08:27:43.653]                 withCallingHandlers({
[08:27:43.653]                   {
[08:27:43.653]                     2 * a
[08:27:43.653]                   }
[08:27:43.653]                 }, immediateCondition = function(cond) {
[08:27:43.653]                   save_rds <- function (object, pathname, ...) 
[08:27:43.653]                   {
[08:27:43.653]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.653]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.653]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.653]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.653]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.653]                         fi_tmp[["mtime"]])
[08:27:43.653]                     }
[08:27:43.653]                     tryCatch({
[08:27:43.653]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.653]                     }, error = function(ex) {
[08:27:43.653]                       msg <- conditionMessage(ex)
[08:27:43.653]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.653]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.653]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.653]                         fi_tmp[["mtime"]], msg)
[08:27:43.653]                       ex$message <- msg
[08:27:43.653]                       stop(ex)
[08:27:43.653]                     })
[08:27:43.653]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.653]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.653]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.653]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.653]                       fi <- file.info(pathname)
[08:27:43.653]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.653]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.653]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.653]                         fi[["size"]], fi[["mtime"]])
[08:27:43.653]                       stop(msg)
[08:27:43.653]                     }
[08:27:43.653]                     invisible(pathname)
[08:27:43.653]                   }
[08:27:43.653]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.653]                     rootPath = tempdir()) 
[08:27:43.653]                   {
[08:27:43.653]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.653]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.653]                       tmpdir = path, fileext = ".rds")
[08:27:43.653]                     save_rds(obj, file)
[08:27:43.653]                   }
[08:27:43.653]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.653]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.653]                   {
[08:27:43.653]                     inherits <- base::inherits
[08:27:43.653]                     invokeRestart <- base::invokeRestart
[08:27:43.653]                     is.null <- base::is.null
[08:27:43.653]                     muffled <- FALSE
[08:27:43.653]                     if (inherits(cond, "message")) {
[08:27:43.653]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.653]                       if (muffled) 
[08:27:43.653]                         invokeRestart("muffleMessage")
[08:27:43.653]                     }
[08:27:43.653]                     else if (inherits(cond, "warning")) {
[08:27:43.653]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.653]                       if (muffled) 
[08:27:43.653]                         invokeRestart("muffleWarning")
[08:27:43.653]                     }
[08:27:43.653]                     else if (inherits(cond, "condition")) {
[08:27:43.653]                       if (!is.null(pattern)) {
[08:27:43.653]                         computeRestarts <- base::computeRestarts
[08:27:43.653]                         grepl <- base::grepl
[08:27:43.653]                         restarts <- computeRestarts(cond)
[08:27:43.653]                         for (restart in restarts) {
[08:27:43.653]                           name <- restart$name
[08:27:43.653]                           if (is.null(name)) 
[08:27:43.653]                             next
[08:27:43.653]                           if (!grepl(pattern, name)) 
[08:27:43.653]                             next
[08:27:43.653]                           invokeRestart(restart)
[08:27:43.653]                           muffled <- TRUE
[08:27:43.653]                           break
[08:27:43.653]                         }
[08:27:43.653]                       }
[08:27:43.653]                     }
[08:27:43.653]                     invisible(muffled)
[08:27:43.653]                   }
[08:27:43.653]                   muffleCondition(cond)
[08:27:43.653]                 })
[08:27:43.653]             }))
[08:27:43.653]             future::FutureResult(value = ...future.value$value, 
[08:27:43.653]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.653]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.653]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.653]                     ...future.globalenv.names))
[08:27:43.653]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.653]         }, condition = base::local({
[08:27:43.653]             c <- base::c
[08:27:43.653]             inherits <- base::inherits
[08:27:43.653]             invokeRestart <- base::invokeRestart
[08:27:43.653]             length <- base::length
[08:27:43.653]             list <- base::list
[08:27:43.653]             seq.int <- base::seq.int
[08:27:43.653]             signalCondition <- base::signalCondition
[08:27:43.653]             sys.calls <- base::sys.calls
[08:27:43.653]             `[[` <- base::`[[`
[08:27:43.653]             `+` <- base::`+`
[08:27:43.653]             `<<-` <- base::`<<-`
[08:27:43.653]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.653]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.653]                   3L)]
[08:27:43.653]             }
[08:27:43.653]             function(cond) {
[08:27:43.653]                 is_error <- inherits(cond, "error")
[08:27:43.653]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.653]                   NULL)
[08:27:43.653]                 if (is_error) {
[08:27:43.653]                   sessionInformation <- function() {
[08:27:43.653]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.653]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.653]                       search = base::search(), system = base::Sys.info())
[08:27:43.653]                   }
[08:27:43.653]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.653]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.653]                     cond$call), session = sessionInformation(), 
[08:27:43.653]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.653]                   signalCondition(cond)
[08:27:43.653]                 }
[08:27:43.653]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.653]                 "immediateCondition"))) {
[08:27:43.653]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.653]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.653]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.653]                   if (TRUE && !signal) {
[08:27:43.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.653]                     {
[08:27:43.653]                       inherits <- base::inherits
[08:27:43.653]                       invokeRestart <- base::invokeRestart
[08:27:43.653]                       is.null <- base::is.null
[08:27:43.653]                       muffled <- FALSE
[08:27:43.653]                       if (inherits(cond, "message")) {
[08:27:43.653]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.653]                         if (muffled) 
[08:27:43.653]                           invokeRestart("muffleMessage")
[08:27:43.653]                       }
[08:27:43.653]                       else if (inherits(cond, "warning")) {
[08:27:43.653]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.653]                         if (muffled) 
[08:27:43.653]                           invokeRestart("muffleWarning")
[08:27:43.653]                       }
[08:27:43.653]                       else if (inherits(cond, "condition")) {
[08:27:43.653]                         if (!is.null(pattern)) {
[08:27:43.653]                           computeRestarts <- base::computeRestarts
[08:27:43.653]                           grepl <- base::grepl
[08:27:43.653]                           restarts <- computeRestarts(cond)
[08:27:43.653]                           for (restart in restarts) {
[08:27:43.653]                             name <- restart$name
[08:27:43.653]                             if (is.null(name)) 
[08:27:43.653]                               next
[08:27:43.653]                             if (!grepl(pattern, name)) 
[08:27:43.653]                               next
[08:27:43.653]                             invokeRestart(restart)
[08:27:43.653]                             muffled <- TRUE
[08:27:43.653]                             break
[08:27:43.653]                           }
[08:27:43.653]                         }
[08:27:43.653]                       }
[08:27:43.653]                       invisible(muffled)
[08:27:43.653]                     }
[08:27:43.653]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.653]                   }
[08:27:43.653]                 }
[08:27:43.653]                 else {
[08:27:43.653]                   if (TRUE) {
[08:27:43.653]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.653]                     {
[08:27:43.653]                       inherits <- base::inherits
[08:27:43.653]                       invokeRestart <- base::invokeRestart
[08:27:43.653]                       is.null <- base::is.null
[08:27:43.653]                       muffled <- FALSE
[08:27:43.653]                       if (inherits(cond, "message")) {
[08:27:43.653]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.653]                         if (muffled) 
[08:27:43.653]                           invokeRestart("muffleMessage")
[08:27:43.653]                       }
[08:27:43.653]                       else if (inherits(cond, "warning")) {
[08:27:43.653]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.653]                         if (muffled) 
[08:27:43.653]                           invokeRestart("muffleWarning")
[08:27:43.653]                       }
[08:27:43.653]                       else if (inherits(cond, "condition")) {
[08:27:43.653]                         if (!is.null(pattern)) {
[08:27:43.653]                           computeRestarts <- base::computeRestarts
[08:27:43.653]                           grepl <- base::grepl
[08:27:43.653]                           restarts <- computeRestarts(cond)
[08:27:43.653]                           for (restart in restarts) {
[08:27:43.653]                             name <- restart$name
[08:27:43.653]                             if (is.null(name)) 
[08:27:43.653]                               next
[08:27:43.653]                             if (!grepl(pattern, name)) 
[08:27:43.653]                               next
[08:27:43.653]                             invokeRestart(restart)
[08:27:43.653]                             muffled <- TRUE
[08:27:43.653]                             break
[08:27:43.653]                           }
[08:27:43.653]                         }
[08:27:43.653]                       }
[08:27:43.653]                       invisible(muffled)
[08:27:43.653]                     }
[08:27:43.653]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.653]                   }
[08:27:43.653]                 }
[08:27:43.653]             }
[08:27:43.653]         }))
[08:27:43.653]     }, error = function(ex) {
[08:27:43.653]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.653]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.653]                 ...future.rng), started = ...future.startTime, 
[08:27:43.653]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.653]             version = "1.8"), class = "FutureResult")
[08:27:43.653]     }, finally = {
[08:27:43.653]         if (!identical(...future.workdir, getwd())) 
[08:27:43.653]             setwd(...future.workdir)
[08:27:43.653]         {
[08:27:43.653]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.653]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.653]             }
[08:27:43.653]             base::options(...future.oldOptions)
[08:27:43.653]             if (.Platform$OS.type == "windows") {
[08:27:43.653]                 old_names <- names(...future.oldEnvVars)
[08:27:43.653]                 envs <- base::Sys.getenv()
[08:27:43.653]                 names <- names(envs)
[08:27:43.653]                 common <- intersect(names, old_names)
[08:27:43.653]                 added <- setdiff(names, old_names)
[08:27:43.653]                 removed <- setdiff(old_names, names)
[08:27:43.653]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.653]                   envs[common]]
[08:27:43.653]                 NAMES <- toupper(changed)
[08:27:43.653]                 args <- list()
[08:27:43.653]                 for (kk in seq_along(NAMES)) {
[08:27:43.653]                   name <- changed[[kk]]
[08:27:43.653]                   NAME <- NAMES[[kk]]
[08:27:43.653]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.653]                     next
[08:27:43.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.653]                 }
[08:27:43.653]                 NAMES <- toupper(added)
[08:27:43.653]                 for (kk in seq_along(NAMES)) {
[08:27:43.653]                   name <- added[[kk]]
[08:27:43.653]                   NAME <- NAMES[[kk]]
[08:27:43.653]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.653]                     next
[08:27:43.653]                   args[[name]] <- ""
[08:27:43.653]                 }
[08:27:43.653]                 NAMES <- toupper(removed)
[08:27:43.653]                 for (kk in seq_along(NAMES)) {
[08:27:43.653]                   name <- removed[[kk]]
[08:27:43.653]                   NAME <- NAMES[[kk]]
[08:27:43.653]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.653]                     next
[08:27:43.653]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.653]                 }
[08:27:43.653]                 if (length(args) > 0) 
[08:27:43.653]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.653]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.653]             }
[08:27:43.653]             else {
[08:27:43.653]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.653]             }
[08:27:43.653]             {
[08:27:43.653]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.653]                   0L) {
[08:27:43.653]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.653]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.653]                   base::options(opts)
[08:27:43.653]                 }
[08:27:43.653]                 {
[08:27:43.653]                   {
[08:27:43.653]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.653]                     NULL
[08:27:43.653]                   }
[08:27:43.653]                   options(future.plan = NULL)
[08:27:43.653]                   if (is.na(NA_character_)) 
[08:27:43.653]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.653]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.653]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.653]                     .init = FALSE)
[08:27:43.653]                 }
[08:27:43.653]             }
[08:27:43.653]         }
[08:27:43.653]     })
[08:27:43.653]     if (TRUE) {
[08:27:43.653]         base::sink(type = "output", split = FALSE)
[08:27:43.653]         if (TRUE) {
[08:27:43.653]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.653]         }
[08:27:43.653]         else {
[08:27:43.653]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.653]         }
[08:27:43.653]         base::close(...future.stdout)
[08:27:43.653]         ...future.stdout <- NULL
[08:27:43.653]     }
[08:27:43.653]     ...future.result$conditions <- ...future.conditions
[08:27:43.653]     ...future.result$finished <- base::Sys.time()
[08:27:43.653]     ...future.result
[08:27:43.653] }
[08:27:43.656] assign_globals() ...
[08:27:43.656] List of 1
[08:27:43.656]  $ a: num 1
[08:27:43.656]  - attr(*, "where")=List of 1
[08:27:43.656]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.656]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.656]  - attr(*, "resolved")= logi FALSE
[08:27:43.656]  - attr(*, "total_size")= num 39
[08:27:43.656]  - attr(*, "already-done")= logi TRUE
[08:27:43.659] - copied ‘a’ to environment
[08:27:43.659] assign_globals() ... done
[08:27:43.660] requestCore(): workers = 2
[08:27:43.662] MulticoreFuture started
[08:27:43.662] - Launch lazy future ... done
[08:27:43.662] run() for ‘MulticoreFuture’ ... done
[08:27:43.663] result() for MulticoreFuture ...
[08:27:43.663] plan(): Setting new future strategy stack:
[08:27:43.663] List of future strategies:
[08:27:43.663] 1. sequential:
[08:27:43.663]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.663]    - tweaked: FALSE
[08:27:43.663]    - call: NULL
[08:27:43.664] plan(): nbrOfWorkers() = 1
[08:27:43.666] plan(): Setting new future strategy stack:
[08:27:43.666] List of future strategies:
[08:27:43.666] 1. multicore:
[08:27:43.666]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.666]    - tweaked: FALSE
[08:27:43.666]    - call: plan(strategy)
[08:27:43.669] plan(): nbrOfWorkers() = 2
[08:27:43.670] result() for MulticoreFuture ...
[08:27:43.670] result() for MulticoreFuture ... done
[08:27:43.670] result() for MulticoreFuture ... done
[08:27:43.670] result() for MulticoreFuture ...
[08:27:43.671] result() for MulticoreFuture ... done
[08:27:43.671] getGlobalsAndPackages() ...
[08:27:43.671] Searching for globals...
[08:27:43.672] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.672] Searching for globals ... DONE
[08:27:43.673] Resolving globals: FALSE
[08:27:43.673] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.676] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.676] - globals: [1] ‘a’
[08:27:43.677] 
[08:27:43.677] getGlobalsAndPackages() ... DONE
[08:27:43.677] run() for ‘Future’ ...
[08:27:43.677] - state: ‘created’
[08:27:43.677] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.680] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.680] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.680]   - Field: ‘label’
[08:27:43.680]   - Field: ‘local’
[08:27:43.680]   - Field: ‘owner’
[08:27:43.680]   - Field: ‘envir’
[08:27:43.680]   - Field: ‘workers’
[08:27:43.680]   - Field: ‘packages’
[08:27:43.681]   - Field: ‘gc’
[08:27:43.681]   - Field: ‘job’
[08:27:43.681]   - Field: ‘conditions’
[08:27:43.681]   - Field: ‘expr’
[08:27:43.681]   - Field: ‘uuid’
[08:27:43.681]   - Field: ‘seed’
[08:27:43.681]   - Field: ‘version’
[08:27:43.681]   - Field: ‘result’
[08:27:43.681]   - Field: ‘asynchronous’
[08:27:43.682]   - Field: ‘calls’
[08:27:43.682]   - Field: ‘globals’
[08:27:43.682]   - Field: ‘stdout’
[08:27:43.682]   - Field: ‘earlySignal’
[08:27:43.682]   - Field: ‘lazy’
[08:27:43.682]   - Field: ‘state’
[08:27:43.682] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.682] - Launch lazy future ...
[08:27:43.683] Packages needed by the future expression (n = 0): <none>
[08:27:43.683] Packages needed by future strategies (n = 0): <none>
[08:27:43.683] {
[08:27:43.683]     {
[08:27:43.683]         {
[08:27:43.683]             ...future.startTime <- base::Sys.time()
[08:27:43.683]             {
[08:27:43.683]                 {
[08:27:43.683]                   {
[08:27:43.683]                     {
[08:27:43.683]                       base::local({
[08:27:43.683]                         has_future <- base::requireNamespace("future", 
[08:27:43.683]                           quietly = TRUE)
[08:27:43.683]                         if (has_future) {
[08:27:43.683]                           ns <- base::getNamespace("future")
[08:27:43.683]                           version <- ns[[".package"]][["version"]]
[08:27:43.683]                           if (is.null(version)) 
[08:27:43.683]                             version <- utils::packageVersion("future")
[08:27:43.683]                         }
[08:27:43.683]                         else {
[08:27:43.683]                           version <- NULL
[08:27:43.683]                         }
[08:27:43.683]                         if (!has_future || version < "1.8.0") {
[08:27:43.683]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.683]                             "", base::R.version$version.string), 
[08:27:43.683]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.683]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.683]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.683]                               "release", "version")], collapse = " "), 
[08:27:43.683]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.683]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.683]                             info)
[08:27:43.683]                           info <- base::paste(info, collapse = "; ")
[08:27:43.683]                           if (!has_future) {
[08:27:43.683]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.683]                               info)
[08:27:43.683]                           }
[08:27:43.683]                           else {
[08:27:43.683]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.683]                               info, version)
[08:27:43.683]                           }
[08:27:43.683]                           base::stop(msg)
[08:27:43.683]                         }
[08:27:43.683]                       })
[08:27:43.683]                     }
[08:27:43.683]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.683]                     base::options(mc.cores = 1L)
[08:27:43.683]                   }
[08:27:43.683]                   ...future.strategy.old <- future::plan("list")
[08:27:43.683]                   options(future.plan = NULL)
[08:27:43.683]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.683]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.683]                 }
[08:27:43.683]                 ...future.workdir <- getwd()
[08:27:43.683]             }
[08:27:43.683]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.683]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.683]         }
[08:27:43.683]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.683]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.683]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.683]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.683]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.683]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.683]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.683]             base::names(...future.oldOptions))
[08:27:43.683]     }
[08:27:43.683]     if (FALSE) {
[08:27:43.683]     }
[08:27:43.683]     else {
[08:27:43.683]         if (TRUE) {
[08:27:43.683]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.683]                 open = "w")
[08:27:43.683]         }
[08:27:43.683]         else {
[08:27:43.683]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.683]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.683]         }
[08:27:43.683]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.683]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.683]             base::sink(type = "output", split = FALSE)
[08:27:43.683]             base::close(...future.stdout)
[08:27:43.683]         }, add = TRUE)
[08:27:43.683]     }
[08:27:43.683]     ...future.frame <- base::sys.nframe()
[08:27:43.683]     ...future.conditions <- base::list()
[08:27:43.683]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.683]     if (FALSE) {
[08:27:43.683]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.683]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.683]     }
[08:27:43.683]     ...future.result <- base::tryCatch({
[08:27:43.683]         base::withCallingHandlers({
[08:27:43.683]             ...future.value <- base::withVisible(base::local({
[08:27:43.683]                 withCallingHandlers({
[08:27:43.683]                   {
[08:27:43.683]                     2 * a
[08:27:43.683]                   }
[08:27:43.683]                 }, immediateCondition = function(cond) {
[08:27:43.683]                   save_rds <- function (object, pathname, ...) 
[08:27:43.683]                   {
[08:27:43.683]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.683]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.683]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.683]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.683]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.683]                         fi_tmp[["mtime"]])
[08:27:43.683]                     }
[08:27:43.683]                     tryCatch({
[08:27:43.683]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.683]                     }, error = function(ex) {
[08:27:43.683]                       msg <- conditionMessage(ex)
[08:27:43.683]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.683]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.683]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.683]                         fi_tmp[["mtime"]], msg)
[08:27:43.683]                       ex$message <- msg
[08:27:43.683]                       stop(ex)
[08:27:43.683]                     })
[08:27:43.683]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.683]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.683]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.683]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.683]                       fi <- file.info(pathname)
[08:27:43.683]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.683]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.683]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.683]                         fi[["size"]], fi[["mtime"]])
[08:27:43.683]                       stop(msg)
[08:27:43.683]                     }
[08:27:43.683]                     invisible(pathname)
[08:27:43.683]                   }
[08:27:43.683]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.683]                     rootPath = tempdir()) 
[08:27:43.683]                   {
[08:27:43.683]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.683]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.683]                       tmpdir = path, fileext = ".rds")
[08:27:43.683]                     save_rds(obj, file)
[08:27:43.683]                   }
[08:27:43.683]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.683]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.683]                   {
[08:27:43.683]                     inherits <- base::inherits
[08:27:43.683]                     invokeRestart <- base::invokeRestart
[08:27:43.683]                     is.null <- base::is.null
[08:27:43.683]                     muffled <- FALSE
[08:27:43.683]                     if (inherits(cond, "message")) {
[08:27:43.683]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.683]                       if (muffled) 
[08:27:43.683]                         invokeRestart("muffleMessage")
[08:27:43.683]                     }
[08:27:43.683]                     else if (inherits(cond, "warning")) {
[08:27:43.683]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.683]                       if (muffled) 
[08:27:43.683]                         invokeRestart("muffleWarning")
[08:27:43.683]                     }
[08:27:43.683]                     else if (inherits(cond, "condition")) {
[08:27:43.683]                       if (!is.null(pattern)) {
[08:27:43.683]                         computeRestarts <- base::computeRestarts
[08:27:43.683]                         grepl <- base::grepl
[08:27:43.683]                         restarts <- computeRestarts(cond)
[08:27:43.683]                         for (restart in restarts) {
[08:27:43.683]                           name <- restart$name
[08:27:43.683]                           if (is.null(name)) 
[08:27:43.683]                             next
[08:27:43.683]                           if (!grepl(pattern, name)) 
[08:27:43.683]                             next
[08:27:43.683]                           invokeRestart(restart)
[08:27:43.683]                           muffled <- TRUE
[08:27:43.683]                           break
[08:27:43.683]                         }
[08:27:43.683]                       }
[08:27:43.683]                     }
[08:27:43.683]                     invisible(muffled)
[08:27:43.683]                   }
[08:27:43.683]                   muffleCondition(cond)
[08:27:43.683]                 })
[08:27:43.683]             }))
[08:27:43.683]             future::FutureResult(value = ...future.value$value, 
[08:27:43.683]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.683]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.683]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.683]                     ...future.globalenv.names))
[08:27:43.683]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.683]         }, condition = base::local({
[08:27:43.683]             c <- base::c
[08:27:43.683]             inherits <- base::inherits
[08:27:43.683]             invokeRestart <- base::invokeRestart
[08:27:43.683]             length <- base::length
[08:27:43.683]             list <- base::list
[08:27:43.683]             seq.int <- base::seq.int
[08:27:43.683]             signalCondition <- base::signalCondition
[08:27:43.683]             sys.calls <- base::sys.calls
[08:27:43.683]             `[[` <- base::`[[`
[08:27:43.683]             `+` <- base::`+`
[08:27:43.683]             `<<-` <- base::`<<-`
[08:27:43.683]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.683]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.683]                   3L)]
[08:27:43.683]             }
[08:27:43.683]             function(cond) {
[08:27:43.683]                 is_error <- inherits(cond, "error")
[08:27:43.683]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.683]                   NULL)
[08:27:43.683]                 if (is_error) {
[08:27:43.683]                   sessionInformation <- function() {
[08:27:43.683]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.683]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.683]                       search = base::search(), system = base::Sys.info())
[08:27:43.683]                   }
[08:27:43.683]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.683]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.683]                     cond$call), session = sessionInformation(), 
[08:27:43.683]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.683]                   signalCondition(cond)
[08:27:43.683]                 }
[08:27:43.683]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.683]                 "immediateCondition"))) {
[08:27:43.683]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.683]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.683]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.683]                   if (TRUE && !signal) {
[08:27:43.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.683]                     {
[08:27:43.683]                       inherits <- base::inherits
[08:27:43.683]                       invokeRestart <- base::invokeRestart
[08:27:43.683]                       is.null <- base::is.null
[08:27:43.683]                       muffled <- FALSE
[08:27:43.683]                       if (inherits(cond, "message")) {
[08:27:43.683]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.683]                         if (muffled) 
[08:27:43.683]                           invokeRestart("muffleMessage")
[08:27:43.683]                       }
[08:27:43.683]                       else if (inherits(cond, "warning")) {
[08:27:43.683]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.683]                         if (muffled) 
[08:27:43.683]                           invokeRestart("muffleWarning")
[08:27:43.683]                       }
[08:27:43.683]                       else if (inherits(cond, "condition")) {
[08:27:43.683]                         if (!is.null(pattern)) {
[08:27:43.683]                           computeRestarts <- base::computeRestarts
[08:27:43.683]                           grepl <- base::grepl
[08:27:43.683]                           restarts <- computeRestarts(cond)
[08:27:43.683]                           for (restart in restarts) {
[08:27:43.683]                             name <- restart$name
[08:27:43.683]                             if (is.null(name)) 
[08:27:43.683]                               next
[08:27:43.683]                             if (!grepl(pattern, name)) 
[08:27:43.683]                               next
[08:27:43.683]                             invokeRestart(restart)
[08:27:43.683]                             muffled <- TRUE
[08:27:43.683]                             break
[08:27:43.683]                           }
[08:27:43.683]                         }
[08:27:43.683]                       }
[08:27:43.683]                       invisible(muffled)
[08:27:43.683]                     }
[08:27:43.683]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.683]                   }
[08:27:43.683]                 }
[08:27:43.683]                 else {
[08:27:43.683]                   if (TRUE) {
[08:27:43.683]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.683]                     {
[08:27:43.683]                       inherits <- base::inherits
[08:27:43.683]                       invokeRestart <- base::invokeRestart
[08:27:43.683]                       is.null <- base::is.null
[08:27:43.683]                       muffled <- FALSE
[08:27:43.683]                       if (inherits(cond, "message")) {
[08:27:43.683]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.683]                         if (muffled) 
[08:27:43.683]                           invokeRestart("muffleMessage")
[08:27:43.683]                       }
[08:27:43.683]                       else if (inherits(cond, "warning")) {
[08:27:43.683]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.683]                         if (muffled) 
[08:27:43.683]                           invokeRestart("muffleWarning")
[08:27:43.683]                       }
[08:27:43.683]                       else if (inherits(cond, "condition")) {
[08:27:43.683]                         if (!is.null(pattern)) {
[08:27:43.683]                           computeRestarts <- base::computeRestarts
[08:27:43.683]                           grepl <- base::grepl
[08:27:43.683]                           restarts <- computeRestarts(cond)
[08:27:43.683]                           for (restart in restarts) {
[08:27:43.683]                             name <- restart$name
[08:27:43.683]                             if (is.null(name)) 
[08:27:43.683]                               next
[08:27:43.683]                             if (!grepl(pattern, name)) 
[08:27:43.683]                               next
[08:27:43.683]                             invokeRestart(restart)
[08:27:43.683]                             muffled <- TRUE
[08:27:43.683]                             break
[08:27:43.683]                           }
[08:27:43.683]                         }
[08:27:43.683]                       }
[08:27:43.683]                       invisible(muffled)
[08:27:43.683]                     }
[08:27:43.683]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.683]                   }
[08:27:43.683]                 }
[08:27:43.683]             }
[08:27:43.683]         }))
[08:27:43.683]     }, error = function(ex) {
[08:27:43.683]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.683]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.683]                 ...future.rng), started = ...future.startTime, 
[08:27:43.683]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.683]             version = "1.8"), class = "FutureResult")
[08:27:43.683]     }, finally = {
[08:27:43.683]         if (!identical(...future.workdir, getwd())) 
[08:27:43.683]             setwd(...future.workdir)
[08:27:43.683]         {
[08:27:43.683]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.683]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.683]             }
[08:27:43.683]             base::options(...future.oldOptions)
[08:27:43.683]             if (.Platform$OS.type == "windows") {
[08:27:43.683]                 old_names <- names(...future.oldEnvVars)
[08:27:43.683]                 envs <- base::Sys.getenv()
[08:27:43.683]                 names <- names(envs)
[08:27:43.683]                 common <- intersect(names, old_names)
[08:27:43.683]                 added <- setdiff(names, old_names)
[08:27:43.683]                 removed <- setdiff(old_names, names)
[08:27:43.683]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.683]                   envs[common]]
[08:27:43.683]                 NAMES <- toupper(changed)
[08:27:43.683]                 args <- list()
[08:27:43.683]                 for (kk in seq_along(NAMES)) {
[08:27:43.683]                   name <- changed[[kk]]
[08:27:43.683]                   NAME <- NAMES[[kk]]
[08:27:43.683]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.683]                     next
[08:27:43.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.683]                 }
[08:27:43.683]                 NAMES <- toupper(added)
[08:27:43.683]                 for (kk in seq_along(NAMES)) {
[08:27:43.683]                   name <- added[[kk]]
[08:27:43.683]                   NAME <- NAMES[[kk]]
[08:27:43.683]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.683]                     next
[08:27:43.683]                   args[[name]] <- ""
[08:27:43.683]                 }
[08:27:43.683]                 NAMES <- toupper(removed)
[08:27:43.683]                 for (kk in seq_along(NAMES)) {
[08:27:43.683]                   name <- removed[[kk]]
[08:27:43.683]                   NAME <- NAMES[[kk]]
[08:27:43.683]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.683]                     next
[08:27:43.683]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.683]                 }
[08:27:43.683]                 if (length(args) > 0) 
[08:27:43.683]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.683]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.683]             }
[08:27:43.683]             else {
[08:27:43.683]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.683]             }
[08:27:43.683]             {
[08:27:43.683]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.683]                   0L) {
[08:27:43.683]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.683]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.683]                   base::options(opts)
[08:27:43.683]                 }
[08:27:43.683]                 {
[08:27:43.683]                   {
[08:27:43.683]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.683]                     NULL
[08:27:43.683]                   }
[08:27:43.683]                   options(future.plan = NULL)
[08:27:43.683]                   if (is.na(NA_character_)) 
[08:27:43.683]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.683]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.683]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.683]                     .init = FALSE)
[08:27:43.683]                 }
[08:27:43.683]             }
[08:27:43.683]         }
[08:27:43.683]     })
[08:27:43.683]     if (TRUE) {
[08:27:43.683]         base::sink(type = "output", split = FALSE)
[08:27:43.683]         if (TRUE) {
[08:27:43.683]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.683]         }
[08:27:43.683]         else {
[08:27:43.683]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.683]         }
[08:27:43.683]         base::close(...future.stdout)
[08:27:43.683]         ...future.stdout <- NULL
[08:27:43.683]     }
[08:27:43.683]     ...future.result$conditions <- ...future.conditions
[08:27:43.683]     ...future.result$finished <- base::Sys.time()
[08:27:43.683]     ...future.result
[08:27:43.683] }
[08:27:43.686] assign_globals() ...
[08:27:43.686] List of 1
[08:27:43.686]  $ a: num 1
[08:27:43.686]  - attr(*, "where")=List of 1
[08:27:43.686]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.686]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.686]  - attr(*, "resolved")= logi FALSE
[08:27:43.686]  - attr(*, "total_size")= num 39
[08:27:43.686]  - attr(*, "already-done")= logi TRUE
[08:27:43.689] - copied ‘a’ to environment
[08:27:43.689] assign_globals() ... done
[08:27:43.689] requestCore(): workers = 2
[08:27:43.691] MulticoreFuture started
[08:27:43.692] - Launch lazy future ... done
[08:27:43.692] run() for ‘MulticoreFuture’ ... done
[08:27:43.692] result() for MulticoreFuture ...
[08:27:43.692] plan(): Setting new future strategy stack:
[08:27:43.693] List of future strategies:
[08:27:43.693] 1. sequential:
[08:27:43.693]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.693]    - tweaked: FALSE
[08:27:43.693]    - call: NULL
[08:27:43.694] plan(): nbrOfWorkers() = 1
[08:27:43.696] plan(): Setting new future strategy stack:
[08:27:43.696] List of future strategies:
[08:27:43.696] 1. multicore:
[08:27:43.696]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.696]    - tweaked: FALSE
[08:27:43.696]    - call: plan(strategy)
[08:27:43.699] plan(): nbrOfWorkers() = 2
[08:27:43.700] result() for MulticoreFuture ...
[08:27:43.700] result() for MulticoreFuture ... done
[08:27:43.700] result() for MulticoreFuture ... done
[08:27:43.700] result() for MulticoreFuture ...
[08:27:43.701] result() for MulticoreFuture ... done
[08:27:43.701] getGlobalsAndPackages() ...
[08:27:43.701] Searching for globals...
[08:27:43.702] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.703] Searching for globals ... DONE
[08:27:43.703] Resolving globals: FALSE
[08:27:43.703] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.704] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.704] - globals: [1] ‘a’
[08:27:43.704] 
[08:27:43.704] getGlobalsAndPackages() ... DONE
[08:27:43.705] run() for ‘Future’ ...
[08:27:43.705] - state: ‘created’
[08:27:43.705] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.707] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.707] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.707]   - Field: ‘label’
[08:27:43.707]   - Field: ‘local’
[08:27:43.707]   - Field: ‘owner’
[08:27:43.708]   - Field: ‘envir’
[08:27:43.708]   - Field: ‘workers’
[08:27:43.708]   - Field: ‘packages’
[08:27:43.708]   - Field: ‘gc’
[08:27:43.708]   - Field: ‘job’
[08:27:43.708]   - Field: ‘conditions’
[08:27:43.708]   - Field: ‘expr’
[08:27:43.708]   - Field: ‘uuid’
[08:27:43.708]   - Field: ‘seed’
[08:27:43.709]   - Field: ‘version’
[08:27:43.709]   - Field: ‘result’
[08:27:43.709]   - Field: ‘asynchronous’
[08:27:43.709]   - Field: ‘calls’
[08:27:43.709]   - Field: ‘globals’
[08:27:43.709]   - Field: ‘stdout’
[08:27:43.709]   - Field: ‘earlySignal’
[08:27:43.709]   - Field: ‘lazy’
[08:27:43.709]   - Field: ‘state’
[08:27:43.710] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.710] - Launch lazy future ...
[08:27:43.710] Packages needed by the future expression (n = 0): <none>
[08:27:43.710] Packages needed by future strategies (n = 0): <none>
[08:27:43.711] {
[08:27:43.711]     {
[08:27:43.711]         {
[08:27:43.711]             ...future.startTime <- base::Sys.time()
[08:27:43.711]             {
[08:27:43.711]                 {
[08:27:43.711]                   {
[08:27:43.711]                     {
[08:27:43.711]                       base::local({
[08:27:43.711]                         has_future <- base::requireNamespace("future", 
[08:27:43.711]                           quietly = TRUE)
[08:27:43.711]                         if (has_future) {
[08:27:43.711]                           ns <- base::getNamespace("future")
[08:27:43.711]                           version <- ns[[".package"]][["version"]]
[08:27:43.711]                           if (is.null(version)) 
[08:27:43.711]                             version <- utils::packageVersion("future")
[08:27:43.711]                         }
[08:27:43.711]                         else {
[08:27:43.711]                           version <- NULL
[08:27:43.711]                         }
[08:27:43.711]                         if (!has_future || version < "1.8.0") {
[08:27:43.711]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.711]                             "", base::R.version$version.string), 
[08:27:43.711]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.711]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.711]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.711]                               "release", "version")], collapse = " "), 
[08:27:43.711]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.711]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.711]                             info)
[08:27:43.711]                           info <- base::paste(info, collapse = "; ")
[08:27:43.711]                           if (!has_future) {
[08:27:43.711]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.711]                               info)
[08:27:43.711]                           }
[08:27:43.711]                           else {
[08:27:43.711]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.711]                               info, version)
[08:27:43.711]                           }
[08:27:43.711]                           base::stop(msg)
[08:27:43.711]                         }
[08:27:43.711]                       })
[08:27:43.711]                     }
[08:27:43.711]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.711]                     base::options(mc.cores = 1L)
[08:27:43.711]                   }
[08:27:43.711]                   ...future.strategy.old <- future::plan("list")
[08:27:43.711]                   options(future.plan = NULL)
[08:27:43.711]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.711]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.711]                 }
[08:27:43.711]                 ...future.workdir <- getwd()
[08:27:43.711]             }
[08:27:43.711]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.711]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.711]         }
[08:27:43.711]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.711]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.711]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.711]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.711]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.711]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.711]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.711]             base::names(...future.oldOptions))
[08:27:43.711]     }
[08:27:43.711]     if (FALSE) {
[08:27:43.711]     }
[08:27:43.711]     else {
[08:27:43.711]         if (TRUE) {
[08:27:43.711]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.711]                 open = "w")
[08:27:43.711]         }
[08:27:43.711]         else {
[08:27:43.711]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.711]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.711]         }
[08:27:43.711]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.711]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.711]             base::sink(type = "output", split = FALSE)
[08:27:43.711]             base::close(...future.stdout)
[08:27:43.711]         }, add = TRUE)
[08:27:43.711]     }
[08:27:43.711]     ...future.frame <- base::sys.nframe()
[08:27:43.711]     ...future.conditions <- base::list()
[08:27:43.711]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.711]     if (FALSE) {
[08:27:43.711]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.711]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.711]     }
[08:27:43.711]     ...future.result <- base::tryCatch({
[08:27:43.711]         base::withCallingHandlers({
[08:27:43.711]             ...future.value <- base::withVisible(base::local({
[08:27:43.711]                 withCallingHandlers({
[08:27:43.711]                   {
[08:27:43.711]                     2 * a
[08:27:43.711]                   }
[08:27:43.711]                 }, immediateCondition = function(cond) {
[08:27:43.711]                   save_rds <- function (object, pathname, ...) 
[08:27:43.711]                   {
[08:27:43.711]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.711]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.711]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.711]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.711]                         fi_tmp[["mtime"]])
[08:27:43.711]                     }
[08:27:43.711]                     tryCatch({
[08:27:43.711]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.711]                     }, error = function(ex) {
[08:27:43.711]                       msg <- conditionMessage(ex)
[08:27:43.711]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.711]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.711]                         fi_tmp[["mtime"]], msg)
[08:27:43.711]                       ex$message <- msg
[08:27:43.711]                       stop(ex)
[08:27:43.711]                     })
[08:27:43.711]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.711]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.711]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.711]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.711]                       fi <- file.info(pathname)
[08:27:43.711]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.711]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.711]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.711]                         fi[["size"]], fi[["mtime"]])
[08:27:43.711]                       stop(msg)
[08:27:43.711]                     }
[08:27:43.711]                     invisible(pathname)
[08:27:43.711]                   }
[08:27:43.711]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.711]                     rootPath = tempdir()) 
[08:27:43.711]                   {
[08:27:43.711]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.711]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.711]                       tmpdir = path, fileext = ".rds")
[08:27:43.711]                     save_rds(obj, file)
[08:27:43.711]                   }
[08:27:43.711]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.711]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.711]                   {
[08:27:43.711]                     inherits <- base::inherits
[08:27:43.711]                     invokeRestart <- base::invokeRestart
[08:27:43.711]                     is.null <- base::is.null
[08:27:43.711]                     muffled <- FALSE
[08:27:43.711]                     if (inherits(cond, "message")) {
[08:27:43.711]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.711]                       if (muffled) 
[08:27:43.711]                         invokeRestart("muffleMessage")
[08:27:43.711]                     }
[08:27:43.711]                     else if (inherits(cond, "warning")) {
[08:27:43.711]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.711]                       if (muffled) 
[08:27:43.711]                         invokeRestart("muffleWarning")
[08:27:43.711]                     }
[08:27:43.711]                     else if (inherits(cond, "condition")) {
[08:27:43.711]                       if (!is.null(pattern)) {
[08:27:43.711]                         computeRestarts <- base::computeRestarts
[08:27:43.711]                         grepl <- base::grepl
[08:27:43.711]                         restarts <- computeRestarts(cond)
[08:27:43.711]                         for (restart in restarts) {
[08:27:43.711]                           name <- restart$name
[08:27:43.711]                           if (is.null(name)) 
[08:27:43.711]                             next
[08:27:43.711]                           if (!grepl(pattern, name)) 
[08:27:43.711]                             next
[08:27:43.711]                           invokeRestart(restart)
[08:27:43.711]                           muffled <- TRUE
[08:27:43.711]                           break
[08:27:43.711]                         }
[08:27:43.711]                       }
[08:27:43.711]                     }
[08:27:43.711]                     invisible(muffled)
[08:27:43.711]                   }
[08:27:43.711]                   muffleCondition(cond)
[08:27:43.711]                 })
[08:27:43.711]             }))
[08:27:43.711]             future::FutureResult(value = ...future.value$value, 
[08:27:43.711]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.711]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.711]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.711]                     ...future.globalenv.names))
[08:27:43.711]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.711]         }, condition = base::local({
[08:27:43.711]             c <- base::c
[08:27:43.711]             inherits <- base::inherits
[08:27:43.711]             invokeRestart <- base::invokeRestart
[08:27:43.711]             length <- base::length
[08:27:43.711]             list <- base::list
[08:27:43.711]             seq.int <- base::seq.int
[08:27:43.711]             signalCondition <- base::signalCondition
[08:27:43.711]             sys.calls <- base::sys.calls
[08:27:43.711]             `[[` <- base::`[[`
[08:27:43.711]             `+` <- base::`+`
[08:27:43.711]             `<<-` <- base::`<<-`
[08:27:43.711]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.711]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.711]                   3L)]
[08:27:43.711]             }
[08:27:43.711]             function(cond) {
[08:27:43.711]                 is_error <- inherits(cond, "error")
[08:27:43.711]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.711]                   NULL)
[08:27:43.711]                 if (is_error) {
[08:27:43.711]                   sessionInformation <- function() {
[08:27:43.711]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.711]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.711]                       search = base::search(), system = base::Sys.info())
[08:27:43.711]                   }
[08:27:43.711]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.711]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.711]                     cond$call), session = sessionInformation(), 
[08:27:43.711]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.711]                   signalCondition(cond)
[08:27:43.711]                 }
[08:27:43.711]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.711]                 "immediateCondition"))) {
[08:27:43.711]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.711]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.711]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.711]                   if (TRUE && !signal) {
[08:27:43.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.711]                     {
[08:27:43.711]                       inherits <- base::inherits
[08:27:43.711]                       invokeRestart <- base::invokeRestart
[08:27:43.711]                       is.null <- base::is.null
[08:27:43.711]                       muffled <- FALSE
[08:27:43.711]                       if (inherits(cond, "message")) {
[08:27:43.711]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.711]                         if (muffled) 
[08:27:43.711]                           invokeRestart("muffleMessage")
[08:27:43.711]                       }
[08:27:43.711]                       else if (inherits(cond, "warning")) {
[08:27:43.711]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.711]                         if (muffled) 
[08:27:43.711]                           invokeRestart("muffleWarning")
[08:27:43.711]                       }
[08:27:43.711]                       else if (inherits(cond, "condition")) {
[08:27:43.711]                         if (!is.null(pattern)) {
[08:27:43.711]                           computeRestarts <- base::computeRestarts
[08:27:43.711]                           grepl <- base::grepl
[08:27:43.711]                           restarts <- computeRestarts(cond)
[08:27:43.711]                           for (restart in restarts) {
[08:27:43.711]                             name <- restart$name
[08:27:43.711]                             if (is.null(name)) 
[08:27:43.711]                               next
[08:27:43.711]                             if (!grepl(pattern, name)) 
[08:27:43.711]                               next
[08:27:43.711]                             invokeRestart(restart)
[08:27:43.711]                             muffled <- TRUE
[08:27:43.711]                             break
[08:27:43.711]                           }
[08:27:43.711]                         }
[08:27:43.711]                       }
[08:27:43.711]                       invisible(muffled)
[08:27:43.711]                     }
[08:27:43.711]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.711]                   }
[08:27:43.711]                 }
[08:27:43.711]                 else {
[08:27:43.711]                   if (TRUE) {
[08:27:43.711]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.711]                     {
[08:27:43.711]                       inherits <- base::inherits
[08:27:43.711]                       invokeRestart <- base::invokeRestart
[08:27:43.711]                       is.null <- base::is.null
[08:27:43.711]                       muffled <- FALSE
[08:27:43.711]                       if (inherits(cond, "message")) {
[08:27:43.711]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.711]                         if (muffled) 
[08:27:43.711]                           invokeRestart("muffleMessage")
[08:27:43.711]                       }
[08:27:43.711]                       else if (inherits(cond, "warning")) {
[08:27:43.711]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.711]                         if (muffled) 
[08:27:43.711]                           invokeRestart("muffleWarning")
[08:27:43.711]                       }
[08:27:43.711]                       else if (inherits(cond, "condition")) {
[08:27:43.711]                         if (!is.null(pattern)) {
[08:27:43.711]                           computeRestarts <- base::computeRestarts
[08:27:43.711]                           grepl <- base::grepl
[08:27:43.711]                           restarts <- computeRestarts(cond)
[08:27:43.711]                           for (restart in restarts) {
[08:27:43.711]                             name <- restart$name
[08:27:43.711]                             if (is.null(name)) 
[08:27:43.711]                               next
[08:27:43.711]                             if (!grepl(pattern, name)) 
[08:27:43.711]                               next
[08:27:43.711]                             invokeRestart(restart)
[08:27:43.711]                             muffled <- TRUE
[08:27:43.711]                             break
[08:27:43.711]                           }
[08:27:43.711]                         }
[08:27:43.711]                       }
[08:27:43.711]                       invisible(muffled)
[08:27:43.711]                     }
[08:27:43.711]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.711]                   }
[08:27:43.711]                 }
[08:27:43.711]             }
[08:27:43.711]         }))
[08:27:43.711]     }, error = function(ex) {
[08:27:43.711]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.711]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.711]                 ...future.rng), started = ...future.startTime, 
[08:27:43.711]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.711]             version = "1.8"), class = "FutureResult")
[08:27:43.711]     }, finally = {
[08:27:43.711]         if (!identical(...future.workdir, getwd())) 
[08:27:43.711]             setwd(...future.workdir)
[08:27:43.711]         {
[08:27:43.711]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.711]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.711]             }
[08:27:43.711]             base::options(...future.oldOptions)
[08:27:43.711]             if (.Platform$OS.type == "windows") {
[08:27:43.711]                 old_names <- names(...future.oldEnvVars)
[08:27:43.711]                 envs <- base::Sys.getenv()
[08:27:43.711]                 names <- names(envs)
[08:27:43.711]                 common <- intersect(names, old_names)
[08:27:43.711]                 added <- setdiff(names, old_names)
[08:27:43.711]                 removed <- setdiff(old_names, names)
[08:27:43.711]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.711]                   envs[common]]
[08:27:43.711]                 NAMES <- toupper(changed)
[08:27:43.711]                 args <- list()
[08:27:43.711]                 for (kk in seq_along(NAMES)) {
[08:27:43.711]                   name <- changed[[kk]]
[08:27:43.711]                   NAME <- NAMES[[kk]]
[08:27:43.711]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.711]                     next
[08:27:43.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.711]                 }
[08:27:43.711]                 NAMES <- toupper(added)
[08:27:43.711]                 for (kk in seq_along(NAMES)) {
[08:27:43.711]                   name <- added[[kk]]
[08:27:43.711]                   NAME <- NAMES[[kk]]
[08:27:43.711]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.711]                     next
[08:27:43.711]                   args[[name]] <- ""
[08:27:43.711]                 }
[08:27:43.711]                 NAMES <- toupper(removed)
[08:27:43.711]                 for (kk in seq_along(NAMES)) {
[08:27:43.711]                   name <- removed[[kk]]
[08:27:43.711]                   NAME <- NAMES[[kk]]
[08:27:43.711]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.711]                     next
[08:27:43.711]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.711]                 }
[08:27:43.711]                 if (length(args) > 0) 
[08:27:43.711]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.711]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.711]             }
[08:27:43.711]             else {
[08:27:43.711]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.711]             }
[08:27:43.711]             {
[08:27:43.711]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.711]                   0L) {
[08:27:43.711]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.711]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.711]                   base::options(opts)
[08:27:43.711]                 }
[08:27:43.711]                 {
[08:27:43.711]                   {
[08:27:43.711]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.711]                     NULL
[08:27:43.711]                   }
[08:27:43.711]                   options(future.plan = NULL)
[08:27:43.711]                   if (is.na(NA_character_)) 
[08:27:43.711]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.711]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.711]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.711]                     .init = FALSE)
[08:27:43.711]                 }
[08:27:43.711]             }
[08:27:43.711]         }
[08:27:43.711]     })
[08:27:43.711]     if (TRUE) {
[08:27:43.711]         base::sink(type = "output", split = FALSE)
[08:27:43.711]         if (TRUE) {
[08:27:43.711]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.711]         }
[08:27:43.711]         else {
[08:27:43.711]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.711]         }
[08:27:43.711]         base::close(...future.stdout)
[08:27:43.711]         ...future.stdout <- NULL
[08:27:43.711]     }
[08:27:43.711]     ...future.result$conditions <- ...future.conditions
[08:27:43.711]     ...future.result$finished <- base::Sys.time()
[08:27:43.711]     ...future.result
[08:27:43.711] }
[08:27:43.713] assign_globals() ...
[08:27:43.714] List of 1
[08:27:43.714]  $ a: num 1
[08:27:43.714]  - attr(*, "where")=List of 1
[08:27:43.714]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.714]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.714]  - attr(*, "resolved")= logi FALSE
[08:27:43.714]  - attr(*, "total_size")= num 39
[08:27:43.714]  - attr(*, "already-done")= logi TRUE
[08:27:43.717] - copied ‘a’ to environment
[08:27:43.717] assign_globals() ... done
[08:27:43.717] requestCore(): workers = 2
[08:27:43.719] MulticoreFuture started
[08:27:43.719] - Launch lazy future ... done
[08:27:43.720] run() for ‘MulticoreFuture’ ... done
[08:27:43.720] result() for MulticoreFuture ...
[08:27:43.720] plan(): Setting new future strategy stack:
[08:27:43.720] List of future strategies:
[08:27:43.720] 1. sequential:
[08:27:43.720]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.720]    - tweaked: FALSE
[08:27:43.720]    - call: NULL
[08:27:43.721] plan(): nbrOfWorkers() = 1
[08:27:43.723] plan(): Setting new future strategy stack:
[08:27:43.723] List of future strategies:
[08:27:43.723] 1. multicore:
[08:27:43.723]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.723]    - tweaked: FALSE
[08:27:43.723]    - call: plan(strategy)
[08:27:43.727] plan(): nbrOfWorkers() = 2
[08:27:43.727] result() for MulticoreFuture ...
[08:27:43.728] result() for MulticoreFuture ... done
[08:27:43.728] result() for MulticoreFuture ... done
[08:27:43.728] result() for MulticoreFuture ...
[08:27:43.728] result() for MulticoreFuture ... done
[08:27:43.728] getGlobalsAndPackages() ...
[08:27:43.728] Searching for globals...
[08:27:43.730] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:43.730] Searching for globals ... DONE
[08:27:43.730] Resolving globals: FALSE
[08:27:43.731] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:43.731] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:43.731] - globals: [1] ‘a’
[08:27:43.731] 
[08:27:43.732] getGlobalsAndPackages() ... DONE
[08:27:43.732] run() for ‘Future’ ...
[08:27:43.732] - state: ‘created’
[08:27:43.732] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:27:43.737] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:43.737] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:27:43.738]   - Field: ‘label’
[08:27:43.738]   - Field: ‘local’
[08:27:43.738]   - Field: ‘owner’
[08:27:43.738]   - Field: ‘envir’
[08:27:43.738]   - Field: ‘workers’
[08:27:43.738]   - Field: ‘packages’
[08:27:43.738]   - Field: ‘gc’
[08:27:43.738]   - Field: ‘job’
[08:27:43.739]   - Field: ‘conditions’
[08:27:43.739]   - Field: ‘expr’
[08:27:43.739]   - Field: ‘uuid’
[08:27:43.739]   - Field: ‘seed’
[08:27:43.739]   - Field: ‘version’
[08:27:43.739]   - Field: ‘result’
[08:27:43.739]   - Field: ‘asynchronous’
[08:27:43.739]   - Field: ‘calls’
[08:27:43.740]   - Field: ‘globals’
[08:27:43.740]   - Field: ‘stdout’
[08:27:43.740]   - Field: ‘earlySignal’
[08:27:43.740]   - Field: ‘lazy’
[08:27:43.740]   - Field: ‘state’
[08:27:43.740] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:27:43.740] - Launch lazy future ...
[08:27:43.741] Packages needed by the future expression (n = 0): <none>
[08:27:43.741] Packages needed by future strategies (n = 0): <none>
[08:27:43.741] {
[08:27:43.741]     {
[08:27:43.741]         {
[08:27:43.741]             ...future.startTime <- base::Sys.time()
[08:27:43.741]             {
[08:27:43.741]                 {
[08:27:43.741]                   {
[08:27:43.741]                     {
[08:27:43.741]                       base::local({
[08:27:43.741]                         has_future <- base::requireNamespace("future", 
[08:27:43.741]                           quietly = TRUE)
[08:27:43.741]                         if (has_future) {
[08:27:43.741]                           ns <- base::getNamespace("future")
[08:27:43.741]                           version <- ns[[".package"]][["version"]]
[08:27:43.741]                           if (is.null(version)) 
[08:27:43.741]                             version <- utils::packageVersion("future")
[08:27:43.741]                         }
[08:27:43.741]                         else {
[08:27:43.741]                           version <- NULL
[08:27:43.741]                         }
[08:27:43.741]                         if (!has_future || version < "1.8.0") {
[08:27:43.741]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:43.741]                             "", base::R.version$version.string), 
[08:27:43.741]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:43.741]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:43.741]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:43.741]                               "release", "version")], collapse = " "), 
[08:27:43.741]                             hostname = base::Sys.info()[["nodename"]])
[08:27:43.741]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:43.741]                             info)
[08:27:43.741]                           info <- base::paste(info, collapse = "; ")
[08:27:43.741]                           if (!has_future) {
[08:27:43.741]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:43.741]                               info)
[08:27:43.741]                           }
[08:27:43.741]                           else {
[08:27:43.741]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:43.741]                               info, version)
[08:27:43.741]                           }
[08:27:43.741]                           base::stop(msg)
[08:27:43.741]                         }
[08:27:43.741]                       })
[08:27:43.741]                     }
[08:27:43.741]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:43.741]                     base::options(mc.cores = 1L)
[08:27:43.741]                   }
[08:27:43.741]                   ...future.strategy.old <- future::plan("list")
[08:27:43.741]                   options(future.plan = NULL)
[08:27:43.741]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.741]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:43.741]                 }
[08:27:43.741]                 ...future.workdir <- getwd()
[08:27:43.741]             }
[08:27:43.741]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:43.741]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:43.741]         }
[08:27:43.741]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:43.741]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:43.741]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:43.741]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:43.741]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:43.741]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:43.741]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:43.741]             base::names(...future.oldOptions))
[08:27:43.741]     }
[08:27:43.741]     if (FALSE) {
[08:27:43.741]     }
[08:27:43.741]     else {
[08:27:43.741]         if (TRUE) {
[08:27:43.741]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:43.741]                 open = "w")
[08:27:43.741]         }
[08:27:43.741]         else {
[08:27:43.741]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:43.741]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:43.741]         }
[08:27:43.741]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:43.741]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:43.741]             base::sink(type = "output", split = FALSE)
[08:27:43.741]             base::close(...future.stdout)
[08:27:43.741]         }, add = TRUE)
[08:27:43.741]     }
[08:27:43.741]     ...future.frame <- base::sys.nframe()
[08:27:43.741]     ...future.conditions <- base::list()
[08:27:43.741]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:43.741]     if (FALSE) {
[08:27:43.741]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:43.741]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:43.741]     }
[08:27:43.741]     ...future.result <- base::tryCatch({
[08:27:43.741]         base::withCallingHandlers({
[08:27:43.741]             ...future.value <- base::withVisible(base::local({
[08:27:43.741]                 withCallingHandlers({
[08:27:43.741]                   {
[08:27:43.741]                     2 * a
[08:27:43.741]                   }
[08:27:43.741]                 }, immediateCondition = function(cond) {
[08:27:43.741]                   save_rds <- function (object, pathname, ...) 
[08:27:43.741]                   {
[08:27:43.741]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:27:43.741]                     if (file_test("-f", pathname_tmp)) {
[08:27:43.741]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.741]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:27:43.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.741]                         fi_tmp[["mtime"]])
[08:27:43.741]                     }
[08:27:43.741]                     tryCatch({
[08:27:43.741]                       saveRDS(object, file = pathname_tmp, ...)
[08:27:43.741]                     }, error = function(ex) {
[08:27:43.741]                       msg <- conditionMessage(ex)
[08:27:43.741]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.741]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:27:43.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.741]                         fi_tmp[["mtime"]], msg)
[08:27:43.741]                       ex$message <- msg
[08:27:43.741]                       stop(ex)
[08:27:43.741]                     })
[08:27:43.741]                     stopifnot(file_test("-f", pathname_tmp))
[08:27:43.741]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:27:43.741]                     if (!res || file_test("-f", pathname_tmp)) {
[08:27:43.741]                       fi_tmp <- file.info(pathname_tmp)
[08:27:43.741]                       fi <- file.info(pathname)
[08:27:43.741]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:27:43.741]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:27:43.741]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:27:43.741]                         fi[["size"]], fi[["mtime"]])
[08:27:43.741]                       stop(msg)
[08:27:43.741]                     }
[08:27:43.741]                     invisible(pathname)
[08:27:43.741]                   }
[08:27:43.741]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:27:43.741]                     rootPath = tempdir()) 
[08:27:43.741]                   {
[08:27:43.741]                     obj <- list(time = Sys.time(), condition = cond)
[08:27:43.741]                     file <- tempfile(pattern = class(cond)[1], 
[08:27:43.741]                       tmpdir = path, fileext = ".rds")
[08:27:43.741]                     save_rds(obj, file)
[08:27:43.741]                   }
[08:27:43.741]                   saveImmediateCondition(cond, path = "/tmp/RtmpFitVgC/.future/immediateConditions")
[08:27:43.741]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.741]                   {
[08:27:43.741]                     inherits <- base::inherits
[08:27:43.741]                     invokeRestart <- base::invokeRestart
[08:27:43.741]                     is.null <- base::is.null
[08:27:43.741]                     muffled <- FALSE
[08:27:43.741]                     if (inherits(cond, "message")) {
[08:27:43.741]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:43.741]                       if (muffled) 
[08:27:43.741]                         invokeRestart("muffleMessage")
[08:27:43.741]                     }
[08:27:43.741]                     else if (inherits(cond, "warning")) {
[08:27:43.741]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:43.741]                       if (muffled) 
[08:27:43.741]                         invokeRestart("muffleWarning")
[08:27:43.741]                     }
[08:27:43.741]                     else if (inherits(cond, "condition")) {
[08:27:43.741]                       if (!is.null(pattern)) {
[08:27:43.741]                         computeRestarts <- base::computeRestarts
[08:27:43.741]                         grepl <- base::grepl
[08:27:43.741]                         restarts <- computeRestarts(cond)
[08:27:43.741]                         for (restart in restarts) {
[08:27:43.741]                           name <- restart$name
[08:27:43.741]                           if (is.null(name)) 
[08:27:43.741]                             next
[08:27:43.741]                           if (!grepl(pattern, name)) 
[08:27:43.741]                             next
[08:27:43.741]                           invokeRestart(restart)
[08:27:43.741]                           muffled <- TRUE
[08:27:43.741]                           break
[08:27:43.741]                         }
[08:27:43.741]                       }
[08:27:43.741]                     }
[08:27:43.741]                     invisible(muffled)
[08:27:43.741]                   }
[08:27:43.741]                   muffleCondition(cond)
[08:27:43.741]                 })
[08:27:43.741]             }))
[08:27:43.741]             future::FutureResult(value = ...future.value$value, 
[08:27:43.741]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.741]                   ...future.rng), globalenv = if (FALSE) 
[08:27:43.741]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:43.741]                     ...future.globalenv.names))
[08:27:43.741]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:43.741]         }, condition = base::local({
[08:27:43.741]             c <- base::c
[08:27:43.741]             inherits <- base::inherits
[08:27:43.741]             invokeRestart <- base::invokeRestart
[08:27:43.741]             length <- base::length
[08:27:43.741]             list <- base::list
[08:27:43.741]             seq.int <- base::seq.int
[08:27:43.741]             signalCondition <- base::signalCondition
[08:27:43.741]             sys.calls <- base::sys.calls
[08:27:43.741]             `[[` <- base::`[[`
[08:27:43.741]             `+` <- base::`+`
[08:27:43.741]             `<<-` <- base::`<<-`
[08:27:43.741]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:43.741]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:43.741]                   3L)]
[08:27:43.741]             }
[08:27:43.741]             function(cond) {
[08:27:43.741]                 is_error <- inherits(cond, "error")
[08:27:43.741]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:43.741]                   NULL)
[08:27:43.741]                 if (is_error) {
[08:27:43.741]                   sessionInformation <- function() {
[08:27:43.741]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:43.741]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:43.741]                       search = base::search(), system = base::Sys.info())
[08:27:43.741]                   }
[08:27:43.741]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.741]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:43.741]                     cond$call), session = sessionInformation(), 
[08:27:43.741]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:43.741]                   signalCondition(cond)
[08:27:43.741]                 }
[08:27:43.741]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:43.741]                 "immediateCondition"))) {
[08:27:43.741]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:43.741]                   ...future.conditions[[length(...future.conditions) + 
[08:27:43.741]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:43.741]                   if (TRUE && !signal) {
[08:27:43.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.741]                     {
[08:27:43.741]                       inherits <- base::inherits
[08:27:43.741]                       invokeRestart <- base::invokeRestart
[08:27:43.741]                       is.null <- base::is.null
[08:27:43.741]                       muffled <- FALSE
[08:27:43.741]                       if (inherits(cond, "message")) {
[08:27:43.741]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.741]                         if (muffled) 
[08:27:43.741]                           invokeRestart("muffleMessage")
[08:27:43.741]                       }
[08:27:43.741]                       else if (inherits(cond, "warning")) {
[08:27:43.741]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.741]                         if (muffled) 
[08:27:43.741]                           invokeRestart("muffleWarning")
[08:27:43.741]                       }
[08:27:43.741]                       else if (inherits(cond, "condition")) {
[08:27:43.741]                         if (!is.null(pattern)) {
[08:27:43.741]                           computeRestarts <- base::computeRestarts
[08:27:43.741]                           grepl <- base::grepl
[08:27:43.741]                           restarts <- computeRestarts(cond)
[08:27:43.741]                           for (restart in restarts) {
[08:27:43.741]                             name <- restart$name
[08:27:43.741]                             if (is.null(name)) 
[08:27:43.741]                               next
[08:27:43.741]                             if (!grepl(pattern, name)) 
[08:27:43.741]                               next
[08:27:43.741]                             invokeRestart(restart)
[08:27:43.741]                             muffled <- TRUE
[08:27:43.741]                             break
[08:27:43.741]                           }
[08:27:43.741]                         }
[08:27:43.741]                       }
[08:27:43.741]                       invisible(muffled)
[08:27:43.741]                     }
[08:27:43.741]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.741]                   }
[08:27:43.741]                 }
[08:27:43.741]                 else {
[08:27:43.741]                   if (TRUE) {
[08:27:43.741]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:43.741]                     {
[08:27:43.741]                       inherits <- base::inherits
[08:27:43.741]                       invokeRestart <- base::invokeRestart
[08:27:43.741]                       is.null <- base::is.null
[08:27:43.741]                       muffled <- FALSE
[08:27:43.741]                       if (inherits(cond, "message")) {
[08:27:43.741]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:43.741]                         if (muffled) 
[08:27:43.741]                           invokeRestart("muffleMessage")
[08:27:43.741]                       }
[08:27:43.741]                       else if (inherits(cond, "warning")) {
[08:27:43.741]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:43.741]                         if (muffled) 
[08:27:43.741]                           invokeRestart("muffleWarning")
[08:27:43.741]                       }
[08:27:43.741]                       else if (inherits(cond, "condition")) {
[08:27:43.741]                         if (!is.null(pattern)) {
[08:27:43.741]                           computeRestarts <- base::computeRestarts
[08:27:43.741]                           grepl <- base::grepl
[08:27:43.741]                           restarts <- computeRestarts(cond)
[08:27:43.741]                           for (restart in restarts) {
[08:27:43.741]                             name <- restart$name
[08:27:43.741]                             if (is.null(name)) 
[08:27:43.741]                               next
[08:27:43.741]                             if (!grepl(pattern, name)) 
[08:27:43.741]                               next
[08:27:43.741]                             invokeRestart(restart)
[08:27:43.741]                             muffled <- TRUE
[08:27:43.741]                             break
[08:27:43.741]                           }
[08:27:43.741]                         }
[08:27:43.741]                       }
[08:27:43.741]                       invisible(muffled)
[08:27:43.741]                     }
[08:27:43.741]                     muffleCondition(cond, pattern = "^muffle")
[08:27:43.741]                   }
[08:27:43.741]                 }
[08:27:43.741]             }
[08:27:43.741]         }))
[08:27:43.741]     }, error = function(ex) {
[08:27:43.741]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:43.741]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:43.741]                 ...future.rng), started = ...future.startTime, 
[08:27:43.741]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:43.741]             version = "1.8"), class = "FutureResult")
[08:27:43.741]     }, finally = {
[08:27:43.741]         if (!identical(...future.workdir, getwd())) 
[08:27:43.741]             setwd(...future.workdir)
[08:27:43.741]         {
[08:27:43.741]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:43.741]                 ...future.oldOptions$nwarnings <- NULL
[08:27:43.741]             }
[08:27:43.741]             base::options(...future.oldOptions)
[08:27:43.741]             if (.Platform$OS.type == "windows") {
[08:27:43.741]                 old_names <- names(...future.oldEnvVars)
[08:27:43.741]                 envs <- base::Sys.getenv()
[08:27:43.741]                 names <- names(envs)
[08:27:43.741]                 common <- intersect(names, old_names)
[08:27:43.741]                 added <- setdiff(names, old_names)
[08:27:43.741]                 removed <- setdiff(old_names, names)
[08:27:43.741]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:43.741]                   envs[common]]
[08:27:43.741]                 NAMES <- toupper(changed)
[08:27:43.741]                 args <- list()
[08:27:43.741]                 for (kk in seq_along(NAMES)) {
[08:27:43.741]                   name <- changed[[kk]]
[08:27:43.741]                   NAME <- NAMES[[kk]]
[08:27:43.741]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.741]                     next
[08:27:43.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.741]                 }
[08:27:43.741]                 NAMES <- toupper(added)
[08:27:43.741]                 for (kk in seq_along(NAMES)) {
[08:27:43.741]                   name <- added[[kk]]
[08:27:43.741]                   NAME <- NAMES[[kk]]
[08:27:43.741]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.741]                     next
[08:27:43.741]                   args[[name]] <- ""
[08:27:43.741]                 }
[08:27:43.741]                 NAMES <- toupper(removed)
[08:27:43.741]                 for (kk in seq_along(NAMES)) {
[08:27:43.741]                   name <- removed[[kk]]
[08:27:43.741]                   NAME <- NAMES[[kk]]
[08:27:43.741]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:43.741]                     next
[08:27:43.741]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:43.741]                 }
[08:27:43.741]                 if (length(args) > 0) 
[08:27:43.741]                   base::do.call(base::Sys.setenv, args = args)
[08:27:43.741]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:43.741]             }
[08:27:43.741]             else {
[08:27:43.741]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:43.741]             }
[08:27:43.741]             {
[08:27:43.741]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:43.741]                   0L) {
[08:27:43.741]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:43.741]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:43.741]                   base::options(opts)
[08:27:43.741]                 }
[08:27:43.741]                 {
[08:27:43.741]                   {
[08:27:43.741]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:43.741]                     NULL
[08:27:43.741]                   }
[08:27:43.741]                   options(future.plan = NULL)
[08:27:43.741]                   if (is.na(NA_character_)) 
[08:27:43.741]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:43.741]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:43.741]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:43.741]                     .init = FALSE)
[08:27:43.741]                 }
[08:27:43.741]             }
[08:27:43.741]         }
[08:27:43.741]     })
[08:27:43.741]     if (TRUE) {
[08:27:43.741]         base::sink(type = "output", split = FALSE)
[08:27:43.741]         if (TRUE) {
[08:27:43.741]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:43.741]         }
[08:27:43.741]         else {
[08:27:43.741]             ...future.result["stdout"] <- base::list(NULL)
[08:27:43.741]         }
[08:27:43.741]         base::close(...future.stdout)
[08:27:43.741]         ...future.stdout <- NULL
[08:27:43.741]     }
[08:27:43.741]     ...future.result$conditions <- ...future.conditions
[08:27:43.741]     ...future.result$finished <- base::Sys.time()
[08:27:43.741]     ...future.result
[08:27:43.741] }
[08:27:43.744] assign_globals() ...
[08:27:43.744] List of 1
[08:27:43.744]  $ a: num 1
[08:27:43.744]  - attr(*, "where")=List of 1
[08:27:43.744]   ..$ a:<environment: R_EmptyEnv> 
[08:27:43.744]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:43.744]  - attr(*, "resolved")= logi FALSE
[08:27:43.744]  - attr(*, "total_size")= num 39
[08:27:43.744]  - attr(*, "already-done")= logi TRUE
[08:27:43.747] - copied ‘a’ to environment
[08:27:43.747] assign_globals() ... done
[08:27:43.747] requestCore(): workers = 2
[08:27:43.750] MulticoreFuture started
[08:27:43.750] - Launch lazy future ... done
[08:27:43.750] run() for ‘MulticoreFuture’ ... done
[08:27:43.751] result() for MulticoreFuture ...
[08:27:43.751] plan(): Setting new future strategy stack:
[08:27:43.751] List of future strategies:
[08:27:43.751] 1. sequential:
[08:27:43.751]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:43.751]    - tweaked: FALSE
[08:27:43.751]    - call: NULL
[08:27:43.752] plan(): nbrOfWorkers() = 1
[08:27:43.754] plan(): Setting new future strategy stack:
[08:27:43.754] List of future strategies:
[08:27:43.754] 1. multicore:
[08:27:43.754]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:27:43.754]    - tweaked: FALSE
[08:27:43.754]    - call: plan(strategy)
[08:27:43.758] plan(): nbrOfWorkers() = 2
[08:27:43.758] result() for MulticoreFuture ...
[08:27:43.759] result() for MulticoreFuture ... done
[08:27:43.759] result() for MulticoreFuture ... done
[08:27:43.759] result() for MulticoreFuture ...
[08:27:43.759] result() for MulticoreFuture ... done
*** futureAssign() with ‘multicore’ futures ... DONE
*** futureAssign() with ‘multisession’ futures ...
[08:27:43.760] plan(): Setting new future strategy stack:
[08:27:43.760] List of future strategies:
[08:27:43.760] 1. multisession:
[08:27:43.760]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:27:43.760]    - tweaked: FALSE
[08:27:43.760]    - call: plan(strategy)
[08:27:43.761] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:27:43.761] multisession:
[08:27:43.761] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:27:43.761] - tweaked: FALSE
[08:27:43.761] - call: plan(strategy)
[08:27:43.765] getGlobalsAndPackages() ...
[08:27:43.766] Not searching for globals
[08:27:43.766] - globals: [0] <none>
[08:27:43.766] getGlobalsAndPackages() ... DONE
[08:27:44.259] Packages needed by the future expression (n = 0): <none>
[08:27:44.259] Packages needed by future strategies (n = 0): <none>
[08:27:44.259] {
[08:27:44.259]     {
[08:27:44.259]         {
[08:27:44.259]             ...future.startTime <- base::Sys.time()
[08:27:44.259]             {
[08:27:44.259]                 {
[08:27:44.259]                   {
[08:27:44.259]                     {
[08:27:44.259]                       base::local({
[08:27:44.259]                         has_future <- base::requireNamespace("future", 
[08:27:44.259]                           quietly = TRUE)
[08:27:44.259]                         if (has_future) {
[08:27:44.259]                           ns <- base::getNamespace("future")
[08:27:44.259]                           version <- ns[[".package"]][["version"]]
[08:27:44.259]                           if (is.null(version)) 
[08:27:44.259]                             version <- utils::packageVersion("future")
[08:27:44.259]                         }
[08:27:44.259]                         else {
[08:27:44.259]                           version <- NULL
[08:27:44.259]                         }
[08:27:44.259]                         if (!has_future || version < "1.8.0") {
[08:27:44.259]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.259]                             "", base::R.version$version.string), 
[08:27:44.259]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.259]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.259]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.259]                               "release", "version")], collapse = " "), 
[08:27:44.259]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.259]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.259]                             info)
[08:27:44.259]                           info <- base::paste(info, collapse = "; ")
[08:27:44.259]                           if (!has_future) {
[08:27:44.259]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.259]                               info)
[08:27:44.259]                           }
[08:27:44.259]                           else {
[08:27:44.259]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.259]                               info, version)
[08:27:44.259]                           }
[08:27:44.259]                           base::stop(msg)
[08:27:44.259]                         }
[08:27:44.259]                       })
[08:27:44.259]                     }
[08:27:44.259]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.259]                     base::options(mc.cores = 1L)
[08:27:44.259]                   }
[08:27:44.259]                   ...future.strategy.old <- future::plan("list")
[08:27:44.259]                   options(future.plan = NULL)
[08:27:44.259]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.259]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.259]                 }
[08:27:44.259]                 ...future.workdir <- getwd()
[08:27:44.259]             }
[08:27:44.259]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.259]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.259]         }
[08:27:44.259]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.259]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.259]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.259]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.259]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.259]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.259]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.259]             base::names(...future.oldOptions))
[08:27:44.259]     }
[08:27:44.259]     if (FALSE) {
[08:27:44.259]     }
[08:27:44.259]     else {
[08:27:44.259]         if (TRUE) {
[08:27:44.259]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.259]                 open = "w")
[08:27:44.259]         }
[08:27:44.259]         else {
[08:27:44.259]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.259]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.259]         }
[08:27:44.259]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.259]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.259]             base::sink(type = "output", split = FALSE)
[08:27:44.259]             base::close(...future.stdout)
[08:27:44.259]         }, add = TRUE)
[08:27:44.259]     }
[08:27:44.259]     ...future.frame <- base::sys.nframe()
[08:27:44.259]     ...future.conditions <- base::list()
[08:27:44.259]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.259]     if (FALSE) {
[08:27:44.259]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.259]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.259]     }
[08:27:44.259]     ...future.result <- base::tryCatch({
[08:27:44.259]         base::withCallingHandlers({
[08:27:44.259]             ...future.value <- base::withVisible(base::local({
[08:27:44.259]                 ...future.makeSendCondition <- base::local({
[08:27:44.259]                   sendCondition <- NULL
[08:27:44.259]                   function(frame = 1L) {
[08:27:44.259]                     if (is.function(sendCondition)) 
[08:27:44.259]                       return(sendCondition)
[08:27:44.259]                     ns <- getNamespace("parallel")
[08:27:44.259]                     if (exists("sendData", mode = "function", 
[08:27:44.259]                       envir = ns)) {
[08:27:44.259]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.259]                         envir = ns)
[08:27:44.259]                       envir <- sys.frame(frame)
[08:27:44.259]                       master <- NULL
[08:27:44.259]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.259]                         !identical(envir, emptyenv())) {
[08:27:44.259]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.259]                           inherits = FALSE)) {
[08:27:44.259]                           master <- get("master", mode = "list", 
[08:27:44.259]                             envir = envir, inherits = FALSE)
[08:27:44.259]                           if (inherits(master, c("SOCKnode", 
[08:27:44.259]                             "SOCK0node"))) {
[08:27:44.259]                             sendCondition <<- function(cond) {
[08:27:44.259]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.259]                                 success = TRUE)
[08:27:44.259]                               parallel_sendData(master, data)
[08:27:44.259]                             }
[08:27:44.259]                             return(sendCondition)
[08:27:44.259]                           }
[08:27:44.259]                         }
[08:27:44.259]                         frame <- frame + 1L
[08:27:44.259]                         envir <- sys.frame(frame)
[08:27:44.259]                       }
[08:27:44.259]                     }
[08:27:44.259]                     sendCondition <<- function(cond) NULL
[08:27:44.259]                   }
[08:27:44.259]                 })
[08:27:44.259]                 withCallingHandlers({
[08:27:44.259]                   NA
[08:27:44.259]                 }, immediateCondition = function(cond) {
[08:27:44.259]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.259]                   sendCondition(cond)
[08:27:44.259]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.259]                   {
[08:27:44.259]                     inherits <- base::inherits
[08:27:44.259]                     invokeRestart <- base::invokeRestart
[08:27:44.259]                     is.null <- base::is.null
[08:27:44.259]                     muffled <- FALSE
[08:27:44.259]                     if (inherits(cond, "message")) {
[08:27:44.259]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.259]                       if (muffled) 
[08:27:44.259]                         invokeRestart("muffleMessage")
[08:27:44.259]                     }
[08:27:44.259]                     else if (inherits(cond, "warning")) {
[08:27:44.259]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.259]                       if (muffled) 
[08:27:44.259]                         invokeRestart("muffleWarning")
[08:27:44.259]                     }
[08:27:44.259]                     else if (inherits(cond, "condition")) {
[08:27:44.259]                       if (!is.null(pattern)) {
[08:27:44.259]                         computeRestarts <- base::computeRestarts
[08:27:44.259]                         grepl <- base::grepl
[08:27:44.259]                         restarts <- computeRestarts(cond)
[08:27:44.259]                         for (restart in restarts) {
[08:27:44.259]                           name <- restart$name
[08:27:44.259]                           if (is.null(name)) 
[08:27:44.259]                             next
[08:27:44.259]                           if (!grepl(pattern, name)) 
[08:27:44.259]                             next
[08:27:44.259]                           invokeRestart(restart)
[08:27:44.259]                           muffled <- TRUE
[08:27:44.259]                           break
[08:27:44.259]                         }
[08:27:44.259]                       }
[08:27:44.259]                     }
[08:27:44.259]                     invisible(muffled)
[08:27:44.259]                   }
[08:27:44.259]                   muffleCondition(cond)
[08:27:44.259]                 })
[08:27:44.259]             }))
[08:27:44.259]             future::FutureResult(value = ...future.value$value, 
[08:27:44.259]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.259]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.259]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.259]                     ...future.globalenv.names))
[08:27:44.259]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.259]         }, condition = base::local({
[08:27:44.259]             c <- base::c
[08:27:44.259]             inherits <- base::inherits
[08:27:44.259]             invokeRestart <- base::invokeRestart
[08:27:44.259]             length <- base::length
[08:27:44.259]             list <- base::list
[08:27:44.259]             seq.int <- base::seq.int
[08:27:44.259]             signalCondition <- base::signalCondition
[08:27:44.259]             sys.calls <- base::sys.calls
[08:27:44.259]             `[[` <- base::`[[`
[08:27:44.259]             `+` <- base::`+`
[08:27:44.259]             `<<-` <- base::`<<-`
[08:27:44.259]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.259]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.259]                   3L)]
[08:27:44.259]             }
[08:27:44.259]             function(cond) {
[08:27:44.259]                 is_error <- inherits(cond, "error")
[08:27:44.259]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.259]                   NULL)
[08:27:44.259]                 if (is_error) {
[08:27:44.259]                   sessionInformation <- function() {
[08:27:44.259]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.259]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.259]                       search = base::search(), system = base::Sys.info())
[08:27:44.259]                   }
[08:27:44.259]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.259]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.259]                     cond$call), session = sessionInformation(), 
[08:27:44.259]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.259]                   signalCondition(cond)
[08:27:44.259]                 }
[08:27:44.259]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.259]                 "immediateCondition"))) {
[08:27:44.259]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.259]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.259]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.259]                   if (TRUE && !signal) {
[08:27:44.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.259]                     {
[08:27:44.259]                       inherits <- base::inherits
[08:27:44.259]                       invokeRestart <- base::invokeRestart
[08:27:44.259]                       is.null <- base::is.null
[08:27:44.259]                       muffled <- FALSE
[08:27:44.259]                       if (inherits(cond, "message")) {
[08:27:44.259]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.259]                         if (muffled) 
[08:27:44.259]                           invokeRestart("muffleMessage")
[08:27:44.259]                       }
[08:27:44.259]                       else if (inherits(cond, "warning")) {
[08:27:44.259]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.259]                         if (muffled) 
[08:27:44.259]                           invokeRestart("muffleWarning")
[08:27:44.259]                       }
[08:27:44.259]                       else if (inherits(cond, "condition")) {
[08:27:44.259]                         if (!is.null(pattern)) {
[08:27:44.259]                           computeRestarts <- base::computeRestarts
[08:27:44.259]                           grepl <- base::grepl
[08:27:44.259]                           restarts <- computeRestarts(cond)
[08:27:44.259]                           for (restart in restarts) {
[08:27:44.259]                             name <- restart$name
[08:27:44.259]                             if (is.null(name)) 
[08:27:44.259]                               next
[08:27:44.259]                             if (!grepl(pattern, name)) 
[08:27:44.259]                               next
[08:27:44.259]                             invokeRestart(restart)
[08:27:44.259]                             muffled <- TRUE
[08:27:44.259]                             break
[08:27:44.259]                           }
[08:27:44.259]                         }
[08:27:44.259]                       }
[08:27:44.259]                       invisible(muffled)
[08:27:44.259]                     }
[08:27:44.259]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.259]                   }
[08:27:44.259]                 }
[08:27:44.259]                 else {
[08:27:44.259]                   if (TRUE) {
[08:27:44.259]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.259]                     {
[08:27:44.259]                       inherits <- base::inherits
[08:27:44.259]                       invokeRestart <- base::invokeRestart
[08:27:44.259]                       is.null <- base::is.null
[08:27:44.259]                       muffled <- FALSE
[08:27:44.259]                       if (inherits(cond, "message")) {
[08:27:44.259]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.259]                         if (muffled) 
[08:27:44.259]                           invokeRestart("muffleMessage")
[08:27:44.259]                       }
[08:27:44.259]                       else if (inherits(cond, "warning")) {
[08:27:44.259]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.259]                         if (muffled) 
[08:27:44.259]                           invokeRestart("muffleWarning")
[08:27:44.259]                       }
[08:27:44.259]                       else if (inherits(cond, "condition")) {
[08:27:44.259]                         if (!is.null(pattern)) {
[08:27:44.259]                           computeRestarts <- base::computeRestarts
[08:27:44.259]                           grepl <- base::grepl
[08:27:44.259]                           restarts <- computeRestarts(cond)
[08:27:44.259]                           for (restart in restarts) {
[08:27:44.259]                             name <- restart$name
[08:27:44.259]                             if (is.null(name)) 
[08:27:44.259]                               next
[08:27:44.259]                             if (!grepl(pattern, name)) 
[08:27:44.259]                               next
[08:27:44.259]                             invokeRestart(restart)
[08:27:44.259]                             muffled <- TRUE
[08:27:44.259]                             break
[08:27:44.259]                           }
[08:27:44.259]                         }
[08:27:44.259]                       }
[08:27:44.259]                       invisible(muffled)
[08:27:44.259]                     }
[08:27:44.259]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.259]                   }
[08:27:44.259]                 }
[08:27:44.259]             }
[08:27:44.259]         }))
[08:27:44.259]     }, error = function(ex) {
[08:27:44.259]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.259]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.259]                 ...future.rng), started = ...future.startTime, 
[08:27:44.259]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.259]             version = "1.8"), class = "FutureResult")
[08:27:44.259]     }, finally = {
[08:27:44.259]         if (!identical(...future.workdir, getwd())) 
[08:27:44.259]             setwd(...future.workdir)
[08:27:44.259]         {
[08:27:44.259]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.259]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.259]             }
[08:27:44.259]             base::options(...future.oldOptions)
[08:27:44.259]             if (.Platform$OS.type == "windows") {
[08:27:44.259]                 old_names <- names(...future.oldEnvVars)
[08:27:44.259]                 envs <- base::Sys.getenv()
[08:27:44.259]                 names <- names(envs)
[08:27:44.259]                 common <- intersect(names, old_names)
[08:27:44.259]                 added <- setdiff(names, old_names)
[08:27:44.259]                 removed <- setdiff(old_names, names)
[08:27:44.259]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.259]                   envs[common]]
[08:27:44.259]                 NAMES <- toupper(changed)
[08:27:44.259]                 args <- list()
[08:27:44.259]                 for (kk in seq_along(NAMES)) {
[08:27:44.259]                   name <- changed[[kk]]
[08:27:44.259]                   NAME <- NAMES[[kk]]
[08:27:44.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.259]                     next
[08:27:44.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.259]                 }
[08:27:44.259]                 NAMES <- toupper(added)
[08:27:44.259]                 for (kk in seq_along(NAMES)) {
[08:27:44.259]                   name <- added[[kk]]
[08:27:44.259]                   NAME <- NAMES[[kk]]
[08:27:44.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.259]                     next
[08:27:44.259]                   args[[name]] <- ""
[08:27:44.259]                 }
[08:27:44.259]                 NAMES <- toupper(removed)
[08:27:44.259]                 for (kk in seq_along(NAMES)) {
[08:27:44.259]                   name <- removed[[kk]]
[08:27:44.259]                   NAME <- NAMES[[kk]]
[08:27:44.259]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.259]                     next
[08:27:44.259]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.259]                 }
[08:27:44.259]                 if (length(args) > 0) 
[08:27:44.259]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.259]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.259]             }
[08:27:44.259]             else {
[08:27:44.259]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.259]             }
[08:27:44.259]             {
[08:27:44.259]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.259]                   0L) {
[08:27:44.259]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.259]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.259]                   base::options(opts)
[08:27:44.259]                 }
[08:27:44.259]                 {
[08:27:44.259]                   {
[08:27:44.259]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.259]                     NULL
[08:27:44.259]                   }
[08:27:44.259]                   options(future.plan = NULL)
[08:27:44.259]                   if (is.na(NA_character_)) 
[08:27:44.259]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.259]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.259]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.259]                     .init = FALSE)
[08:27:44.259]                 }
[08:27:44.259]             }
[08:27:44.259]         }
[08:27:44.259]     })
[08:27:44.259]     if (TRUE) {
[08:27:44.259]         base::sink(type = "output", split = FALSE)
[08:27:44.259]         if (TRUE) {
[08:27:44.259]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.259]         }
[08:27:44.259]         else {
[08:27:44.259]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.259]         }
[08:27:44.259]         base::close(...future.stdout)
[08:27:44.259]         ...future.stdout <- NULL
[08:27:44.259]     }
[08:27:44.259]     ...future.result$conditions <- ...future.conditions
[08:27:44.259]     ...future.result$finished <- base::Sys.time()
[08:27:44.259]     ...future.result
[08:27:44.259] }
[08:27:44.314] MultisessionFuture started
[08:27:44.314] result() for ClusterFuture ...
[08:27:44.315] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.315] - Validating connection of MultisessionFuture
[08:27:44.347] - received message: FutureResult
[08:27:44.347] - Received FutureResult
[08:27:44.347] - Erased future from FutureRegistry
[08:27:44.347] result() for ClusterFuture ...
[08:27:44.347] - result already collected: FutureResult
[08:27:44.347] result() for ClusterFuture ... done
[08:27:44.347] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.348] result() for ClusterFuture ... done
[08:27:44.348] result() for ClusterFuture ...
[08:27:44.348] - result already collected: FutureResult
[08:27:44.348] result() for ClusterFuture ... done
[08:27:44.348] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:27:44.350] plan(): nbrOfWorkers() = 2
[08:27:44.350] getGlobalsAndPackages() ...
[08:27:44.350] Searching for globals...
[08:27:44.350] - globals found: [1] ‘{’
[08:27:44.351] Searching for globals ... DONE
[08:27:44.351] Resolving globals: FALSE
[08:27:44.351] 
[08:27:44.351] 
[08:27:44.351] getGlobalsAndPackages() ... DONE
[08:27:44.351] run() for ‘Future’ ...
[08:27:44.351] - state: ‘created’
[08:27:44.352] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.366] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.367] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.367]   - Field: ‘node’
[08:27:44.367]   - Field: ‘label’
[08:27:44.367]   - Field: ‘local’
[08:27:44.367]   - Field: ‘owner’
[08:27:44.367]   - Field: ‘envir’
[08:27:44.367]   - Field: ‘workers’
[08:27:44.367]   - Field: ‘packages’
[08:27:44.367]   - Field: ‘gc’
[08:27:44.367]   - Field: ‘conditions’
[08:27:44.367]   - Field: ‘persistent’
[08:27:44.368]   - Field: ‘expr’
[08:27:44.368]   - Field: ‘uuid’
[08:27:44.368]   - Field: ‘seed’
[08:27:44.368]   - Field: ‘version’
[08:27:44.368]   - Field: ‘result’
[08:27:44.368]   - Field: ‘asynchronous’
[08:27:44.368]   - Field: ‘calls’
[08:27:44.368]   - Field: ‘globals’
[08:27:44.368]   - Field: ‘stdout’
[08:27:44.368]   - Field: ‘earlySignal’
[08:27:44.368]   - Field: ‘lazy’
[08:27:44.368]   - Field: ‘state’
[08:27:44.369] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.369] - Launch lazy future ...
[08:27:44.369] Packages needed by the future expression (n = 0): <none>
[08:27:44.369] Packages needed by future strategies (n = 0): <none>
[08:27:44.369] {
[08:27:44.369]     {
[08:27:44.369]         {
[08:27:44.369]             ...future.startTime <- base::Sys.time()
[08:27:44.369]             {
[08:27:44.369]                 {
[08:27:44.369]                   {
[08:27:44.369]                     {
[08:27:44.369]                       base::local({
[08:27:44.369]                         has_future <- base::requireNamespace("future", 
[08:27:44.369]                           quietly = TRUE)
[08:27:44.369]                         if (has_future) {
[08:27:44.369]                           ns <- base::getNamespace("future")
[08:27:44.369]                           version <- ns[[".package"]][["version"]]
[08:27:44.369]                           if (is.null(version)) 
[08:27:44.369]                             version <- utils::packageVersion("future")
[08:27:44.369]                         }
[08:27:44.369]                         else {
[08:27:44.369]                           version <- NULL
[08:27:44.369]                         }
[08:27:44.369]                         if (!has_future || version < "1.8.0") {
[08:27:44.369]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.369]                             "", base::R.version$version.string), 
[08:27:44.369]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.369]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.369]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.369]                               "release", "version")], collapse = " "), 
[08:27:44.369]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.369]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.369]                             info)
[08:27:44.369]                           info <- base::paste(info, collapse = "; ")
[08:27:44.369]                           if (!has_future) {
[08:27:44.369]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.369]                               info)
[08:27:44.369]                           }
[08:27:44.369]                           else {
[08:27:44.369]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.369]                               info, version)
[08:27:44.369]                           }
[08:27:44.369]                           base::stop(msg)
[08:27:44.369]                         }
[08:27:44.369]                       })
[08:27:44.369]                     }
[08:27:44.369]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.369]                     base::options(mc.cores = 1L)
[08:27:44.369]                   }
[08:27:44.369]                   ...future.strategy.old <- future::plan("list")
[08:27:44.369]                   options(future.plan = NULL)
[08:27:44.369]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.369]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.369]                 }
[08:27:44.369]                 ...future.workdir <- getwd()
[08:27:44.369]             }
[08:27:44.369]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.369]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.369]         }
[08:27:44.369]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.369]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.369]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.369]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.369]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.369]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.369]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.369]             base::names(...future.oldOptions))
[08:27:44.369]     }
[08:27:44.369]     if (FALSE) {
[08:27:44.369]     }
[08:27:44.369]     else {
[08:27:44.369]         if (TRUE) {
[08:27:44.369]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.369]                 open = "w")
[08:27:44.369]         }
[08:27:44.369]         else {
[08:27:44.369]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.369]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.369]         }
[08:27:44.369]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.369]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.369]             base::sink(type = "output", split = FALSE)
[08:27:44.369]             base::close(...future.stdout)
[08:27:44.369]         }, add = TRUE)
[08:27:44.369]     }
[08:27:44.369]     ...future.frame <- base::sys.nframe()
[08:27:44.369]     ...future.conditions <- base::list()
[08:27:44.369]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.369]     if (FALSE) {
[08:27:44.369]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.369]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.369]     }
[08:27:44.369]     ...future.result <- base::tryCatch({
[08:27:44.369]         base::withCallingHandlers({
[08:27:44.369]             ...future.value <- base::withVisible(base::local({
[08:27:44.369]                 ...future.makeSendCondition <- base::local({
[08:27:44.369]                   sendCondition <- NULL
[08:27:44.369]                   function(frame = 1L) {
[08:27:44.369]                     if (is.function(sendCondition)) 
[08:27:44.369]                       return(sendCondition)
[08:27:44.369]                     ns <- getNamespace("parallel")
[08:27:44.369]                     if (exists("sendData", mode = "function", 
[08:27:44.369]                       envir = ns)) {
[08:27:44.369]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.369]                         envir = ns)
[08:27:44.369]                       envir <- sys.frame(frame)
[08:27:44.369]                       master <- NULL
[08:27:44.369]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.369]                         !identical(envir, emptyenv())) {
[08:27:44.369]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.369]                           inherits = FALSE)) {
[08:27:44.369]                           master <- get("master", mode = "list", 
[08:27:44.369]                             envir = envir, inherits = FALSE)
[08:27:44.369]                           if (inherits(master, c("SOCKnode", 
[08:27:44.369]                             "SOCK0node"))) {
[08:27:44.369]                             sendCondition <<- function(cond) {
[08:27:44.369]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.369]                                 success = TRUE)
[08:27:44.369]                               parallel_sendData(master, data)
[08:27:44.369]                             }
[08:27:44.369]                             return(sendCondition)
[08:27:44.369]                           }
[08:27:44.369]                         }
[08:27:44.369]                         frame <- frame + 1L
[08:27:44.369]                         envir <- sys.frame(frame)
[08:27:44.369]                       }
[08:27:44.369]                     }
[08:27:44.369]                     sendCondition <<- function(cond) NULL
[08:27:44.369]                   }
[08:27:44.369]                 })
[08:27:44.369]                 withCallingHandlers({
[08:27:44.369]                   {
[08:27:44.369]                     2
[08:27:44.369]                   }
[08:27:44.369]                 }, immediateCondition = function(cond) {
[08:27:44.369]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.369]                   sendCondition(cond)
[08:27:44.369]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.369]                   {
[08:27:44.369]                     inherits <- base::inherits
[08:27:44.369]                     invokeRestart <- base::invokeRestart
[08:27:44.369]                     is.null <- base::is.null
[08:27:44.369]                     muffled <- FALSE
[08:27:44.369]                     if (inherits(cond, "message")) {
[08:27:44.369]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.369]                       if (muffled) 
[08:27:44.369]                         invokeRestart("muffleMessage")
[08:27:44.369]                     }
[08:27:44.369]                     else if (inherits(cond, "warning")) {
[08:27:44.369]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.369]                       if (muffled) 
[08:27:44.369]                         invokeRestart("muffleWarning")
[08:27:44.369]                     }
[08:27:44.369]                     else if (inherits(cond, "condition")) {
[08:27:44.369]                       if (!is.null(pattern)) {
[08:27:44.369]                         computeRestarts <- base::computeRestarts
[08:27:44.369]                         grepl <- base::grepl
[08:27:44.369]                         restarts <- computeRestarts(cond)
[08:27:44.369]                         for (restart in restarts) {
[08:27:44.369]                           name <- restart$name
[08:27:44.369]                           if (is.null(name)) 
[08:27:44.369]                             next
[08:27:44.369]                           if (!grepl(pattern, name)) 
[08:27:44.369]                             next
[08:27:44.369]                           invokeRestart(restart)
[08:27:44.369]                           muffled <- TRUE
[08:27:44.369]                           break
[08:27:44.369]                         }
[08:27:44.369]                       }
[08:27:44.369]                     }
[08:27:44.369]                     invisible(muffled)
[08:27:44.369]                   }
[08:27:44.369]                   muffleCondition(cond)
[08:27:44.369]                 })
[08:27:44.369]             }))
[08:27:44.369]             future::FutureResult(value = ...future.value$value, 
[08:27:44.369]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.369]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.369]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.369]                     ...future.globalenv.names))
[08:27:44.369]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.369]         }, condition = base::local({
[08:27:44.369]             c <- base::c
[08:27:44.369]             inherits <- base::inherits
[08:27:44.369]             invokeRestart <- base::invokeRestart
[08:27:44.369]             length <- base::length
[08:27:44.369]             list <- base::list
[08:27:44.369]             seq.int <- base::seq.int
[08:27:44.369]             signalCondition <- base::signalCondition
[08:27:44.369]             sys.calls <- base::sys.calls
[08:27:44.369]             `[[` <- base::`[[`
[08:27:44.369]             `+` <- base::`+`
[08:27:44.369]             `<<-` <- base::`<<-`
[08:27:44.369]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.369]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.369]                   3L)]
[08:27:44.369]             }
[08:27:44.369]             function(cond) {
[08:27:44.369]                 is_error <- inherits(cond, "error")
[08:27:44.369]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.369]                   NULL)
[08:27:44.369]                 if (is_error) {
[08:27:44.369]                   sessionInformation <- function() {
[08:27:44.369]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.369]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.369]                       search = base::search(), system = base::Sys.info())
[08:27:44.369]                   }
[08:27:44.369]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.369]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.369]                     cond$call), session = sessionInformation(), 
[08:27:44.369]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.369]                   signalCondition(cond)
[08:27:44.369]                 }
[08:27:44.369]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.369]                 "immediateCondition"))) {
[08:27:44.369]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.369]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.369]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.369]                   if (TRUE && !signal) {
[08:27:44.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.369]                     {
[08:27:44.369]                       inherits <- base::inherits
[08:27:44.369]                       invokeRestart <- base::invokeRestart
[08:27:44.369]                       is.null <- base::is.null
[08:27:44.369]                       muffled <- FALSE
[08:27:44.369]                       if (inherits(cond, "message")) {
[08:27:44.369]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.369]                         if (muffled) 
[08:27:44.369]                           invokeRestart("muffleMessage")
[08:27:44.369]                       }
[08:27:44.369]                       else if (inherits(cond, "warning")) {
[08:27:44.369]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.369]                         if (muffled) 
[08:27:44.369]                           invokeRestart("muffleWarning")
[08:27:44.369]                       }
[08:27:44.369]                       else if (inherits(cond, "condition")) {
[08:27:44.369]                         if (!is.null(pattern)) {
[08:27:44.369]                           computeRestarts <- base::computeRestarts
[08:27:44.369]                           grepl <- base::grepl
[08:27:44.369]                           restarts <- computeRestarts(cond)
[08:27:44.369]                           for (restart in restarts) {
[08:27:44.369]                             name <- restart$name
[08:27:44.369]                             if (is.null(name)) 
[08:27:44.369]                               next
[08:27:44.369]                             if (!grepl(pattern, name)) 
[08:27:44.369]                               next
[08:27:44.369]                             invokeRestart(restart)
[08:27:44.369]                             muffled <- TRUE
[08:27:44.369]                             break
[08:27:44.369]                           }
[08:27:44.369]                         }
[08:27:44.369]                       }
[08:27:44.369]                       invisible(muffled)
[08:27:44.369]                     }
[08:27:44.369]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.369]                   }
[08:27:44.369]                 }
[08:27:44.369]                 else {
[08:27:44.369]                   if (TRUE) {
[08:27:44.369]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.369]                     {
[08:27:44.369]                       inherits <- base::inherits
[08:27:44.369]                       invokeRestart <- base::invokeRestart
[08:27:44.369]                       is.null <- base::is.null
[08:27:44.369]                       muffled <- FALSE
[08:27:44.369]                       if (inherits(cond, "message")) {
[08:27:44.369]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.369]                         if (muffled) 
[08:27:44.369]                           invokeRestart("muffleMessage")
[08:27:44.369]                       }
[08:27:44.369]                       else if (inherits(cond, "warning")) {
[08:27:44.369]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.369]                         if (muffled) 
[08:27:44.369]                           invokeRestart("muffleWarning")
[08:27:44.369]                       }
[08:27:44.369]                       else if (inherits(cond, "condition")) {
[08:27:44.369]                         if (!is.null(pattern)) {
[08:27:44.369]                           computeRestarts <- base::computeRestarts
[08:27:44.369]                           grepl <- base::grepl
[08:27:44.369]                           restarts <- computeRestarts(cond)
[08:27:44.369]                           for (restart in restarts) {
[08:27:44.369]                             name <- restart$name
[08:27:44.369]                             if (is.null(name)) 
[08:27:44.369]                               next
[08:27:44.369]                             if (!grepl(pattern, name)) 
[08:27:44.369]                               next
[08:27:44.369]                             invokeRestart(restart)
[08:27:44.369]                             muffled <- TRUE
[08:27:44.369]                             break
[08:27:44.369]                           }
[08:27:44.369]                         }
[08:27:44.369]                       }
[08:27:44.369]                       invisible(muffled)
[08:27:44.369]                     }
[08:27:44.369]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.369]                   }
[08:27:44.369]                 }
[08:27:44.369]             }
[08:27:44.369]         }))
[08:27:44.369]     }, error = function(ex) {
[08:27:44.369]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.369]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.369]                 ...future.rng), started = ...future.startTime, 
[08:27:44.369]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.369]             version = "1.8"), class = "FutureResult")
[08:27:44.369]     }, finally = {
[08:27:44.369]         if (!identical(...future.workdir, getwd())) 
[08:27:44.369]             setwd(...future.workdir)
[08:27:44.369]         {
[08:27:44.369]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.369]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.369]             }
[08:27:44.369]             base::options(...future.oldOptions)
[08:27:44.369]             if (.Platform$OS.type == "windows") {
[08:27:44.369]                 old_names <- names(...future.oldEnvVars)
[08:27:44.369]                 envs <- base::Sys.getenv()
[08:27:44.369]                 names <- names(envs)
[08:27:44.369]                 common <- intersect(names, old_names)
[08:27:44.369]                 added <- setdiff(names, old_names)
[08:27:44.369]                 removed <- setdiff(old_names, names)
[08:27:44.369]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.369]                   envs[common]]
[08:27:44.369]                 NAMES <- toupper(changed)
[08:27:44.369]                 args <- list()
[08:27:44.369]                 for (kk in seq_along(NAMES)) {
[08:27:44.369]                   name <- changed[[kk]]
[08:27:44.369]                   NAME <- NAMES[[kk]]
[08:27:44.369]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.369]                     next
[08:27:44.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.369]                 }
[08:27:44.369]                 NAMES <- toupper(added)
[08:27:44.369]                 for (kk in seq_along(NAMES)) {
[08:27:44.369]                   name <- added[[kk]]
[08:27:44.369]                   NAME <- NAMES[[kk]]
[08:27:44.369]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.369]                     next
[08:27:44.369]                   args[[name]] <- ""
[08:27:44.369]                 }
[08:27:44.369]                 NAMES <- toupper(removed)
[08:27:44.369]                 for (kk in seq_along(NAMES)) {
[08:27:44.369]                   name <- removed[[kk]]
[08:27:44.369]                   NAME <- NAMES[[kk]]
[08:27:44.369]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.369]                     next
[08:27:44.369]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.369]                 }
[08:27:44.369]                 if (length(args) > 0) 
[08:27:44.369]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.369]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.369]             }
[08:27:44.369]             else {
[08:27:44.369]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.369]             }
[08:27:44.369]             {
[08:27:44.369]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.369]                   0L) {
[08:27:44.369]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.369]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.369]                   base::options(opts)
[08:27:44.369]                 }
[08:27:44.369]                 {
[08:27:44.369]                   {
[08:27:44.369]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.369]                     NULL
[08:27:44.369]                   }
[08:27:44.369]                   options(future.plan = NULL)
[08:27:44.369]                   if (is.na(NA_character_)) 
[08:27:44.369]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.369]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.369]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.369]                     .init = FALSE)
[08:27:44.369]                 }
[08:27:44.369]             }
[08:27:44.369]         }
[08:27:44.369]     })
[08:27:44.369]     if (TRUE) {
[08:27:44.369]         base::sink(type = "output", split = FALSE)
[08:27:44.369]         if (TRUE) {
[08:27:44.369]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.369]         }
[08:27:44.369]         else {
[08:27:44.369]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.369]         }
[08:27:44.369]         base::close(...future.stdout)
[08:27:44.369]         ...future.stdout <- NULL
[08:27:44.369]     }
[08:27:44.369]     ...future.result$conditions <- ...future.conditions
[08:27:44.369]     ...future.result$finished <- base::Sys.time()
[08:27:44.369]     ...future.result
[08:27:44.369] }
[08:27:44.373] MultisessionFuture started
[08:27:44.373] - Launch lazy future ... done
[08:27:44.373] run() for ‘MultisessionFuture’ ... done
[08:27:44.373] getGlobalsAndPackages() ...
[08:27:44.373] Searching for globals...
[08:27:44.374] - globals found: [1] ‘{’
[08:27:44.374] Searching for globals ... DONE
[08:27:44.374] Resolving globals: FALSE
[08:27:44.374] 
[08:27:44.374] 
[08:27:44.375] getGlobalsAndPackages() ... DONE
[08:27:44.375] run() for ‘Future’ ...
[08:27:44.375] - state: ‘created’
[08:27:44.375] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.389] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.389] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.389]   - Field: ‘node’
[08:27:44.390]   - Field: ‘label’
[08:27:44.390]   - Field: ‘local’
[08:27:44.390]   - Field: ‘owner’
[08:27:44.390]   - Field: ‘envir’
[08:27:44.390]   - Field: ‘workers’
[08:27:44.390]   - Field: ‘packages’
[08:27:44.390]   - Field: ‘gc’
[08:27:44.390]   - Field: ‘conditions’
[08:27:44.390]   - Field: ‘persistent’
[08:27:44.390]   - Field: ‘expr’
[08:27:44.390]   - Field: ‘uuid’
[08:27:44.390]   - Field: ‘seed’
[08:27:44.391]   - Field: ‘version’
[08:27:44.391]   - Field: ‘result’
[08:27:44.391]   - Field: ‘asynchronous’
[08:27:44.391]   - Field: ‘calls’
[08:27:44.391]   - Field: ‘globals’
[08:27:44.391]   - Field: ‘stdout’
[08:27:44.391]   - Field: ‘earlySignal’
[08:27:44.391]   - Field: ‘lazy’
[08:27:44.391]   - Field: ‘state’
[08:27:44.391] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.391] - Launch lazy future ...
[08:27:44.392] Packages needed by the future expression (n = 0): <none>
[08:27:44.392] Packages needed by future strategies (n = 0): <none>
[08:27:44.392] {
[08:27:44.392]     {
[08:27:44.392]         {
[08:27:44.392]             ...future.startTime <- base::Sys.time()
[08:27:44.392]             {
[08:27:44.392]                 {
[08:27:44.392]                   {
[08:27:44.392]                     {
[08:27:44.392]                       base::local({
[08:27:44.392]                         has_future <- base::requireNamespace("future", 
[08:27:44.392]                           quietly = TRUE)
[08:27:44.392]                         if (has_future) {
[08:27:44.392]                           ns <- base::getNamespace("future")
[08:27:44.392]                           version <- ns[[".package"]][["version"]]
[08:27:44.392]                           if (is.null(version)) 
[08:27:44.392]                             version <- utils::packageVersion("future")
[08:27:44.392]                         }
[08:27:44.392]                         else {
[08:27:44.392]                           version <- NULL
[08:27:44.392]                         }
[08:27:44.392]                         if (!has_future || version < "1.8.0") {
[08:27:44.392]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.392]                             "", base::R.version$version.string), 
[08:27:44.392]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.392]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.392]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.392]                               "release", "version")], collapse = " "), 
[08:27:44.392]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.392]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.392]                             info)
[08:27:44.392]                           info <- base::paste(info, collapse = "; ")
[08:27:44.392]                           if (!has_future) {
[08:27:44.392]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.392]                               info)
[08:27:44.392]                           }
[08:27:44.392]                           else {
[08:27:44.392]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.392]                               info, version)
[08:27:44.392]                           }
[08:27:44.392]                           base::stop(msg)
[08:27:44.392]                         }
[08:27:44.392]                       })
[08:27:44.392]                     }
[08:27:44.392]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.392]                     base::options(mc.cores = 1L)
[08:27:44.392]                   }
[08:27:44.392]                   ...future.strategy.old <- future::plan("list")
[08:27:44.392]                   options(future.plan = NULL)
[08:27:44.392]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.392]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.392]                 }
[08:27:44.392]                 ...future.workdir <- getwd()
[08:27:44.392]             }
[08:27:44.392]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.392]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.392]         }
[08:27:44.392]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.392]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.392]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.392]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.392]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.392]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.392]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.392]             base::names(...future.oldOptions))
[08:27:44.392]     }
[08:27:44.392]     if (FALSE) {
[08:27:44.392]     }
[08:27:44.392]     else {
[08:27:44.392]         if (TRUE) {
[08:27:44.392]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.392]                 open = "w")
[08:27:44.392]         }
[08:27:44.392]         else {
[08:27:44.392]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.392]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.392]         }
[08:27:44.392]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.392]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.392]             base::sink(type = "output", split = FALSE)
[08:27:44.392]             base::close(...future.stdout)
[08:27:44.392]         }, add = TRUE)
[08:27:44.392]     }
[08:27:44.392]     ...future.frame <- base::sys.nframe()
[08:27:44.392]     ...future.conditions <- base::list()
[08:27:44.392]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.392]     if (FALSE) {
[08:27:44.392]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.392]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.392]     }
[08:27:44.392]     ...future.result <- base::tryCatch({
[08:27:44.392]         base::withCallingHandlers({
[08:27:44.392]             ...future.value <- base::withVisible(base::local({
[08:27:44.392]                 ...future.makeSendCondition <- base::local({
[08:27:44.392]                   sendCondition <- NULL
[08:27:44.392]                   function(frame = 1L) {
[08:27:44.392]                     if (is.function(sendCondition)) 
[08:27:44.392]                       return(sendCondition)
[08:27:44.392]                     ns <- getNamespace("parallel")
[08:27:44.392]                     if (exists("sendData", mode = "function", 
[08:27:44.392]                       envir = ns)) {
[08:27:44.392]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.392]                         envir = ns)
[08:27:44.392]                       envir <- sys.frame(frame)
[08:27:44.392]                       master <- NULL
[08:27:44.392]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.392]                         !identical(envir, emptyenv())) {
[08:27:44.392]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.392]                           inherits = FALSE)) {
[08:27:44.392]                           master <- get("master", mode = "list", 
[08:27:44.392]                             envir = envir, inherits = FALSE)
[08:27:44.392]                           if (inherits(master, c("SOCKnode", 
[08:27:44.392]                             "SOCK0node"))) {
[08:27:44.392]                             sendCondition <<- function(cond) {
[08:27:44.392]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.392]                                 success = TRUE)
[08:27:44.392]                               parallel_sendData(master, data)
[08:27:44.392]                             }
[08:27:44.392]                             return(sendCondition)
[08:27:44.392]                           }
[08:27:44.392]                         }
[08:27:44.392]                         frame <- frame + 1L
[08:27:44.392]                         envir <- sys.frame(frame)
[08:27:44.392]                       }
[08:27:44.392]                     }
[08:27:44.392]                     sendCondition <<- function(cond) NULL
[08:27:44.392]                   }
[08:27:44.392]                 })
[08:27:44.392]                 withCallingHandlers({
[08:27:44.392]                   {
[08:27:44.392]                     4
[08:27:44.392]                   }
[08:27:44.392]                 }, immediateCondition = function(cond) {
[08:27:44.392]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.392]                   sendCondition(cond)
[08:27:44.392]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.392]                   {
[08:27:44.392]                     inherits <- base::inherits
[08:27:44.392]                     invokeRestart <- base::invokeRestart
[08:27:44.392]                     is.null <- base::is.null
[08:27:44.392]                     muffled <- FALSE
[08:27:44.392]                     if (inherits(cond, "message")) {
[08:27:44.392]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.392]                       if (muffled) 
[08:27:44.392]                         invokeRestart("muffleMessage")
[08:27:44.392]                     }
[08:27:44.392]                     else if (inherits(cond, "warning")) {
[08:27:44.392]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.392]                       if (muffled) 
[08:27:44.392]                         invokeRestart("muffleWarning")
[08:27:44.392]                     }
[08:27:44.392]                     else if (inherits(cond, "condition")) {
[08:27:44.392]                       if (!is.null(pattern)) {
[08:27:44.392]                         computeRestarts <- base::computeRestarts
[08:27:44.392]                         grepl <- base::grepl
[08:27:44.392]                         restarts <- computeRestarts(cond)
[08:27:44.392]                         for (restart in restarts) {
[08:27:44.392]                           name <- restart$name
[08:27:44.392]                           if (is.null(name)) 
[08:27:44.392]                             next
[08:27:44.392]                           if (!grepl(pattern, name)) 
[08:27:44.392]                             next
[08:27:44.392]                           invokeRestart(restart)
[08:27:44.392]                           muffled <- TRUE
[08:27:44.392]                           break
[08:27:44.392]                         }
[08:27:44.392]                       }
[08:27:44.392]                     }
[08:27:44.392]                     invisible(muffled)
[08:27:44.392]                   }
[08:27:44.392]                   muffleCondition(cond)
[08:27:44.392]                 })
[08:27:44.392]             }))
[08:27:44.392]             future::FutureResult(value = ...future.value$value, 
[08:27:44.392]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.392]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.392]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.392]                     ...future.globalenv.names))
[08:27:44.392]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.392]         }, condition = base::local({
[08:27:44.392]             c <- base::c
[08:27:44.392]             inherits <- base::inherits
[08:27:44.392]             invokeRestart <- base::invokeRestart
[08:27:44.392]             length <- base::length
[08:27:44.392]             list <- base::list
[08:27:44.392]             seq.int <- base::seq.int
[08:27:44.392]             signalCondition <- base::signalCondition
[08:27:44.392]             sys.calls <- base::sys.calls
[08:27:44.392]             `[[` <- base::`[[`
[08:27:44.392]             `+` <- base::`+`
[08:27:44.392]             `<<-` <- base::`<<-`
[08:27:44.392]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.392]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.392]                   3L)]
[08:27:44.392]             }
[08:27:44.392]             function(cond) {
[08:27:44.392]                 is_error <- inherits(cond, "error")
[08:27:44.392]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.392]                   NULL)
[08:27:44.392]                 if (is_error) {
[08:27:44.392]                   sessionInformation <- function() {
[08:27:44.392]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.392]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.392]                       search = base::search(), system = base::Sys.info())
[08:27:44.392]                   }
[08:27:44.392]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.392]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.392]                     cond$call), session = sessionInformation(), 
[08:27:44.392]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.392]                   signalCondition(cond)
[08:27:44.392]                 }
[08:27:44.392]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.392]                 "immediateCondition"))) {
[08:27:44.392]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.392]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.392]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.392]                   if (TRUE && !signal) {
[08:27:44.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.392]                     {
[08:27:44.392]                       inherits <- base::inherits
[08:27:44.392]                       invokeRestart <- base::invokeRestart
[08:27:44.392]                       is.null <- base::is.null
[08:27:44.392]                       muffled <- FALSE
[08:27:44.392]                       if (inherits(cond, "message")) {
[08:27:44.392]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.392]                         if (muffled) 
[08:27:44.392]                           invokeRestart("muffleMessage")
[08:27:44.392]                       }
[08:27:44.392]                       else if (inherits(cond, "warning")) {
[08:27:44.392]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.392]                         if (muffled) 
[08:27:44.392]                           invokeRestart("muffleWarning")
[08:27:44.392]                       }
[08:27:44.392]                       else if (inherits(cond, "condition")) {
[08:27:44.392]                         if (!is.null(pattern)) {
[08:27:44.392]                           computeRestarts <- base::computeRestarts
[08:27:44.392]                           grepl <- base::grepl
[08:27:44.392]                           restarts <- computeRestarts(cond)
[08:27:44.392]                           for (restart in restarts) {
[08:27:44.392]                             name <- restart$name
[08:27:44.392]                             if (is.null(name)) 
[08:27:44.392]                               next
[08:27:44.392]                             if (!grepl(pattern, name)) 
[08:27:44.392]                               next
[08:27:44.392]                             invokeRestart(restart)
[08:27:44.392]                             muffled <- TRUE
[08:27:44.392]                             break
[08:27:44.392]                           }
[08:27:44.392]                         }
[08:27:44.392]                       }
[08:27:44.392]                       invisible(muffled)
[08:27:44.392]                     }
[08:27:44.392]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.392]                   }
[08:27:44.392]                 }
[08:27:44.392]                 else {
[08:27:44.392]                   if (TRUE) {
[08:27:44.392]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.392]                     {
[08:27:44.392]                       inherits <- base::inherits
[08:27:44.392]                       invokeRestart <- base::invokeRestart
[08:27:44.392]                       is.null <- base::is.null
[08:27:44.392]                       muffled <- FALSE
[08:27:44.392]                       if (inherits(cond, "message")) {
[08:27:44.392]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.392]                         if (muffled) 
[08:27:44.392]                           invokeRestart("muffleMessage")
[08:27:44.392]                       }
[08:27:44.392]                       else if (inherits(cond, "warning")) {
[08:27:44.392]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.392]                         if (muffled) 
[08:27:44.392]                           invokeRestart("muffleWarning")
[08:27:44.392]                       }
[08:27:44.392]                       else if (inherits(cond, "condition")) {
[08:27:44.392]                         if (!is.null(pattern)) {
[08:27:44.392]                           computeRestarts <- base::computeRestarts
[08:27:44.392]                           grepl <- base::grepl
[08:27:44.392]                           restarts <- computeRestarts(cond)
[08:27:44.392]                           for (restart in restarts) {
[08:27:44.392]                             name <- restart$name
[08:27:44.392]                             if (is.null(name)) 
[08:27:44.392]                               next
[08:27:44.392]                             if (!grepl(pattern, name)) 
[08:27:44.392]                               next
[08:27:44.392]                             invokeRestart(restart)
[08:27:44.392]                             muffled <- TRUE
[08:27:44.392]                             break
[08:27:44.392]                           }
[08:27:44.392]                         }
[08:27:44.392]                       }
[08:27:44.392]                       invisible(muffled)
[08:27:44.392]                     }
[08:27:44.392]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.392]                   }
[08:27:44.392]                 }
[08:27:44.392]             }
[08:27:44.392]         }))
[08:27:44.392]     }, error = function(ex) {
[08:27:44.392]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.392]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.392]                 ...future.rng), started = ...future.startTime, 
[08:27:44.392]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.392]             version = "1.8"), class = "FutureResult")
[08:27:44.392]     }, finally = {
[08:27:44.392]         if (!identical(...future.workdir, getwd())) 
[08:27:44.392]             setwd(...future.workdir)
[08:27:44.392]         {
[08:27:44.392]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.392]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.392]             }
[08:27:44.392]             base::options(...future.oldOptions)
[08:27:44.392]             if (.Platform$OS.type == "windows") {
[08:27:44.392]                 old_names <- names(...future.oldEnvVars)
[08:27:44.392]                 envs <- base::Sys.getenv()
[08:27:44.392]                 names <- names(envs)
[08:27:44.392]                 common <- intersect(names, old_names)
[08:27:44.392]                 added <- setdiff(names, old_names)
[08:27:44.392]                 removed <- setdiff(old_names, names)
[08:27:44.392]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.392]                   envs[common]]
[08:27:44.392]                 NAMES <- toupper(changed)
[08:27:44.392]                 args <- list()
[08:27:44.392]                 for (kk in seq_along(NAMES)) {
[08:27:44.392]                   name <- changed[[kk]]
[08:27:44.392]                   NAME <- NAMES[[kk]]
[08:27:44.392]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.392]                     next
[08:27:44.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.392]                 }
[08:27:44.392]                 NAMES <- toupper(added)
[08:27:44.392]                 for (kk in seq_along(NAMES)) {
[08:27:44.392]                   name <- added[[kk]]
[08:27:44.392]                   NAME <- NAMES[[kk]]
[08:27:44.392]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.392]                     next
[08:27:44.392]                   args[[name]] <- ""
[08:27:44.392]                 }
[08:27:44.392]                 NAMES <- toupper(removed)
[08:27:44.392]                 for (kk in seq_along(NAMES)) {
[08:27:44.392]                   name <- removed[[kk]]
[08:27:44.392]                   NAME <- NAMES[[kk]]
[08:27:44.392]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.392]                     next
[08:27:44.392]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.392]                 }
[08:27:44.392]                 if (length(args) > 0) 
[08:27:44.392]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.392]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.392]             }
[08:27:44.392]             else {
[08:27:44.392]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.392]             }
[08:27:44.392]             {
[08:27:44.392]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.392]                   0L) {
[08:27:44.392]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.392]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.392]                   base::options(opts)
[08:27:44.392]                 }
[08:27:44.392]                 {
[08:27:44.392]                   {
[08:27:44.392]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.392]                     NULL
[08:27:44.392]                   }
[08:27:44.392]                   options(future.plan = NULL)
[08:27:44.392]                   if (is.na(NA_character_)) 
[08:27:44.392]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.392]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.392]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.392]                     .init = FALSE)
[08:27:44.392]                 }
[08:27:44.392]             }
[08:27:44.392]         }
[08:27:44.392]     })
[08:27:44.392]     if (TRUE) {
[08:27:44.392]         base::sink(type = "output", split = FALSE)
[08:27:44.392]         if (TRUE) {
[08:27:44.392]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.392]         }
[08:27:44.392]         else {
[08:27:44.392]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.392]         }
[08:27:44.392]         base::close(...future.stdout)
[08:27:44.392]         ...future.stdout <- NULL
[08:27:44.392]     }
[08:27:44.392]     ...future.result$conditions <- ...future.conditions
[08:27:44.392]     ...future.result$finished <- base::Sys.time()
[08:27:44.392]     ...future.result
[08:27:44.392] }
[08:27:44.445] MultisessionFuture started
[08:27:44.446] - Launch lazy future ... done
[08:27:44.446] run() for ‘MultisessionFuture’ ... done
[08:27:44.446] result() for ClusterFuture ...
[08:27:44.446] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.446] - Validating connection of MultisessionFuture
[08:27:44.446] - received message: FutureResult
[08:27:44.447] - Received FutureResult
[08:27:44.447] - Erased future from FutureRegistry
[08:27:44.447] result() for ClusterFuture ...
[08:27:44.447] - result already collected: FutureResult
[08:27:44.447] result() for ClusterFuture ... done
[08:27:44.447] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.447] result() for ClusterFuture ... done
[08:27:44.447] result() for ClusterFuture ...
[08:27:44.447] - result already collected: FutureResult
[08:27:44.447] result() for ClusterFuture ... done
u$a = 2
[08:27:44.448] result() for ClusterFuture ...
[08:27:44.448] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.448] - Validating connection of MultisessionFuture
[08:27:44.477] - received message: FutureResult
[08:27:44.477] - Received FutureResult
[08:27:44.478] - Erased future from FutureRegistry
[08:27:44.478] result() for ClusterFuture ...
[08:27:44.478] - result already collected: FutureResult
[08:27:44.478] result() for ClusterFuture ... done
[08:27:44.478] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.478] result() for ClusterFuture ... done
[08:27:44.478] result() for ClusterFuture ...
[08:27:44.478] - result already collected: FutureResult
[08:27:44.478] result() for ClusterFuture ... done
v$a = 4
[08:27:44.479] getGlobalsAndPackages() ...
[08:27:44.479] Searching for globals...
[08:27:44.480] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:44.480] Searching for globals ... DONE
[08:27:44.480] Resolving globals: FALSE
[08:27:44.481] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:44.481] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:44.481] - globals: [1] ‘a’
[08:27:44.482] 
[08:27:44.482] getGlobalsAndPackages() ... DONE
[08:27:44.482] run() for ‘Future’ ...
[08:27:44.482] - state: ‘created’
[08:27:44.482] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.497] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.497] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.497]   - Field: ‘node’
[08:27:44.498]   - Field: ‘label’
[08:27:44.498]   - Field: ‘local’
[08:27:44.498]   - Field: ‘owner’
[08:27:44.498]   - Field: ‘envir’
[08:27:44.498]   - Field: ‘workers’
[08:27:44.498]   - Field: ‘packages’
[08:27:44.498]   - Field: ‘gc’
[08:27:44.498]   - Field: ‘conditions’
[08:27:44.498]   - Field: ‘persistent’
[08:27:44.498]   - Field: ‘expr’
[08:27:44.499]   - Field: ‘uuid’
[08:27:44.499]   - Field: ‘seed’
[08:27:44.499]   - Field: ‘version’
[08:27:44.499]   - Field: ‘result’
[08:27:44.499]   - Field: ‘asynchronous’
[08:27:44.499]   - Field: ‘calls’
[08:27:44.499]   - Field: ‘globals’
[08:27:44.499]   - Field: ‘stdout’
[08:27:44.499]   - Field: ‘earlySignal’
[08:27:44.500]   - Field: ‘lazy’
[08:27:44.500]   - Field: ‘state’
[08:27:44.500] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.500] - Launch lazy future ...
[08:27:44.500] Packages needed by the future expression (n = 0): <none>
[08:27:44.500] Packages needed by future strategies (n = 0): <none>
[08:27:44.501] {
[08:27:44.501]     {
[08:27:44.501]         {
[08:27:44.501]             ...future.startTime <- base::Sys.time()
[08:27:44.501]             {
[08:27:44.501]                 {
[08:27:44.501]                   {
[08:27:44.501]                     {
[08:27:44.501]                       base::local({
[08:27:44.501]                         has_future <- base::requireNamespace("future", 
[08:27:44.501]                           quietly = TRUE)
[08:27:44.501]                         if (has_future) {
[08:27:44.501]                           ns <- base::getNamespace("future")
[08:27:44.501]                           version <- ns[[".package"]][["version"]]
[08:27:44.501]                           if (is.null(version)) 
[08:27:44.501]                             version <- utils::packageVersion("future")
[08:27:44.501]                         }
[08:27:44.501]                         else {
[08:27:44.501]                           version <- NULL
[08:27:44.501]                         }
[08:27:44.501]                         if (!has_future || version < "1.8.0") {
[08:27:44.501]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.501]                             "", base::R.version$version.string), 
[08:27:44.501]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.501]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.501]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.501]                               "release", "version")], collapse = " "), 
[08:27:44.501]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.501]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.501]                             info)
[08:27:44.501]                           info <- base::paste(info, collapse = "; ")
[08:27:44.501]                           if (!has_future) {
[08:27:44.501]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.501]                               info)
[08:27:44.501]                           }
[08:27:44.501]                           else {
[08:27:44.501]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.501]                               info, version)
[08:27:44.501]                           }
[08:27:44.501]                           base::stop(msg)
[08:27:44.501]                         }
[08:27:44.501]                       })
[08:27:44.501]                     }
[08:27:44.501]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.501]                     base::options(mc.cores = 1L)
[08:27:44.501]                   }
[08:27:44.501]                   ...future.strategy.old <- future::plan("list")
[08:27:44.501]                   options(future.plan = NULL)
[08:27:44.501]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.501]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.501]                 }
[08:27:44.501]                 ...future.workdir <- getwd()
[08:27:44.501]             }
[08:27:44.501]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.501]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.501]         }
[08:27:44.501]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.501]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.501]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.501]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.501]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.501]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.501]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.501]             base::names(...future.oldOptions))
[08:27:44.501]     }
[08:27:44.501]     if (FALSE) {
[08:27:44.501]     }
[08:27:44.501]     else {
[08:27:44.501]         if (TRUE) {
[08:27:44.501]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.501]                 open = "w")
[08:27:44.501]         }
[08:27:44.501]         else {
[08:27:44.501]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.501]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.501]         }
[08:27:44.501]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.501]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.501]             base::sink(type = "output", split = FALSE)
[08:27:44.501]             base::close(...future.stdout)
[08:27:44.501]         }, add = TRUE)
[08:27:44.501]     }
[08:27:44.501]     ...future.frame <- base::sys.nframe()
[08:27:44.501]     ...future.conditions <- base::list()
[08:27:44.501]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.501]     if (FALSE) {
[08:27:44.501]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.501]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.501]     }
[08:27:44.501]     ...future.result <- base::tryCatch({
[08:27:44.501]         base::withCallingHandlers({
[08:27:44.501]             ...future.value <- base::withVisible(base::local({
[08:27:44.501]                 ...future.makeSendCondition <- base::local({
[08:27:44.501]                   sendCondition <- NULL
[08:27:44.501]                   function(frame = 1L) {
[08:27:44.501]                     if (is.function(sendCondition)) 
[08:27:44.501]                       return(sendCondition)
[08:27:44.501]                     ns <- getNamespace("parallel")
[08:27:44.501]                     if (exists("sendData", mode = "function", 
[08:27:44.501]                       envir = ns)) {
[08:27:44.501]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.501]                         envir = ns)
[08:27:44.501]                       envir <- sys.frame(frame)
[08:27:44.501]                       master <- NULL
[08:27:44.501]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.501]                         !identical(envir, emptyenv())) {
[08:27:44.501]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.501]                           inherits = FALSE)) {
[08:27:44.501]                           master <- get("master", mode = "list", 
[08:27:44.501]                             envir = envir, inherits = FALSE)
[08:27:44.501]                           if (inherits(master, c("SOCKnode", 
[08:27:44.501]                             "SOCK0node"))) {
[08:27:44.501]                             sendCondition <<- function(cond) {
[08:27:44.501]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.501]                                 success = TRUE)
[08:27:44.501]                               parallel_sendData(master, data)
[08:27:44.501]                             }
[08:27:44.501]                             return(sendCondition)
[08:27:44.501]                           }
[08:27:44.501]                         }
[08:27:44.501]                         frame <- frame + 1L
[08:27:44.501]                         envir <- sys.frame(frame)
[08:27:44.501]                       }
[08:27:44.501]                     }
[08:27:44.501]                     sendCondition <<- function(cond) NULL
[08:27:44.501]                   }
[08:27:44.501]                 })
[08:27:44.501]                 withCallingHandlers({
[08:27:44.501]                   {
[08:27:44.501]                     2 * a
[08:27:44.501]                   }
[08:27:44.501]                 }, immediateCondition = function(cond) {
[08:27:44.501]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.501]                   sendCondition(cond)
[08:27:44.501]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.501]                   {
[08:27:44.501]                     inherits <- base::inherits
[08:27:44.501]                     invokeRestart <- base::invokeRestart
[08:27:44.501]                     is.null <- base::is.null
[08:27:44.501]                     muffled <- FALSE
[08:27:44.501]                     if (inherits(cond, "message")) {
[08:27:44.501]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.501]                       if (muffled) 
[08:27:44.501]                         invokeRestart("muffleMessage")
[08:27:44.501]                     }
[08:27:44.501]                     else if (inherits(cond, "warning")) {
[08:27:44.501]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.501]                       if (muffled) 
[08:27:44.501]                         invokeRestart("muffleWarning")
[08:27:44.501]                     }
[08:27:44.501]                     else if (inherits(cond, "condition")) {
[08:27:44.501]                       if (!is.null(pattern)) {
[08:27:44.501]                         computeRestarts <- base::computeRestarts
[08:27:44.501]                         grepl <- base::grepl
[08:27:44.501]                         restarts <- computeRestarts(cond)
[08:27:44.501]                         for (restart in restarts) {
[08:27:44.501]                           name <- restart$name
[08:27:44.501]                           if (is.null(name)) 
[08:27:44.501]                             next
[08:27:44.501]                           if (!grepl(pattern, name)) 
[08:27:44.501]                             next
[08:27:44.501]                           invokeRestart(restart)
[08:27:44.501]                           muffled <- TRUE
[08:27:44.501]                           break
[08:27:44.501]                         }
[08:27:44.501]                       }
[08:27:44.501]                     }
[08:27:44.501]                     invisible(muffled)
[08:27:44.501]                   }
[08:27:44.501]                   muffleCondition(cond)
[08:27:44.501]                 })
[08:27:44.501]             }))
[08:27:44.501]             future::FutureResult(value = ...future.value$value, 
[08:27:44.501]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.501]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.501]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.501]                     ...future.globalenv.names))
[08:27:44.501]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.501]         }, condition = base::local({
[08:27:44.501]             c <- base::c
[08:27:44.501]             inherits <- base::inherits
[08:27:44.501]             invokeRestart <- base::invokeRestart
[08:27:44.501]             length <- base::length
[08:27:44.501]             list <- base::list
[08:27:44.501]             seq.int <- base::seq.int
[08:27:44.501]             signalCondition <- base::signalCondition
[08:27:44.501]             sys.calls <- base::sys.calls
[08:27:44.501]             `[[` <- base::`[[`
[08:27:44.501]             `+` <- base::`+`
[08:27:44.501]             `<<-` <- base::`<<-`
[08:27:44.501]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.501]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.501]                   3L)]
[08:27:44.501]             }
[08:27:44.501]             function(cond) {
[08:27:44.501]                 is_error <- inherits(cond, "error")
[08:27:44.501]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.501]                   NULL)
[08:27:44.501]                 if (is_error) {
[08:27:44.501]                   sessionInformation <- function() {
[08:27:44.501]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.501]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.501]                       search = base::search(), system = base::Sys.info())
[08:27:44.501]                   }
[08:27:44.501]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.501]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.501]                     cond$call), session = sessionInformation(), 
[08:27:44.501]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.501]                   signalCondition(cond)
[08:27:44.501]                 }
[08:27:44.501]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.501]                 "immediateCondition"))) {
[08:27:44.501]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.501]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.501]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.501]                   if (TRUE && !signal) {
[08:27:44.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.501]                     {
[08:27:44.501]                       inherits <- base::inherits
[08:27:44.501]                       invokeRestart <- base::invokeRestart
[08:27:44.501]                       is.null <- base::is.null
[08:27:44.501]                       muffled <- FALSE
[08:27:44.501]                       if (inherits(cond, "message")) {
[08:27:44.501]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.501]                         if (muffled) 
[08:27:44.501]                           invokeRestart("muffleMessage")
[08:27:44.501]                       }
[08:27:44.501]                       else if (inherits(cond, "warning")) {
[08:27:44.501]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.501]                         if (muffled) 
[08:27:44.501]                           invokeRestart("muffleWarning")
[08:27:44.501]                       }
[08:27:44.501]                       else if (inherits(cond, "condition")) {
[08:27:44.501]                         if (!is.null(pattern)) {
[08:27:44.501]                           computeRestarts <- base::computeRestarts
[08:27:44.501]                           grepl <- base::grepl
[08:27:44.501]                           restarts <- computeRestarts(cond)
[08:27:44.501]                           for (restart in restarts) {
[08:27:44.501]                             name <- restart$name
[08:27:44.501]                             if (is.null(name)) 
[08:27:44.501]                               next
[08:27:44.501]                             if (!grepl(pattern, name)) 
[08:27:44.501]                               next
[08:27:44.501]                             invokeRestart(restart)
[08:27:44.501]                             muffled <- TRUE
[08:27:44.501]                             break
[08:27:44.501]                           }
[08:27:44.501]                         }
[08:27:44.501]                       }
[08:27:44.501]                       invisible(muffled)
[08:27:44.501]                     }
[08:27:44.501]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.501]                   }
[08:27:44.501]                 }
[08:27:44.501]                 else {
[08:27:44.501]                   if (TRUE) {
[08:27:44.501]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.501]                     {
[08:27:44.501]                       inherits <- base::inherits
[08:27:44.501]                       invokeRestart <- base::invokeRestart
[08:27:44.501]                       is.null <- base::is.null
[08:27:44.501]                       muffled <- FALSE
[08:27:44.501]                       if (inherits(cond, "message")) {
[08:27:44.501]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.501]                         if (muffled) 
[08:27:44.501]                           invokeRestart("muffleMessage")
[08:27:44.501]                       }
[08:27:44.501]                       else if (inherits(cond, "warning")) {
[08:27:44.501]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.501]                         if (muffled) 
[08:27:44.501]                           invokeRestart("muffleWarning")
[08:27:44.501]                       }
[08:27:44.501]                       else if (inherits(cond, "condition")) {
[08:27:44.501]                         if (!is.null(pattern)) {
[08:27:44.501]                           computeRestarts <- base::computeRestarts
[08:27:44.501]                           grepl <- base::grepl
[08:27:44.501]                           restarts <- computeRestarts(cond)
[08:27:44.501]                           for (restart in restarts) {
[08:27:44.501]                             name <- restart$name
[08:27:44.501]                             if (is.null(name)) 
[08:27:44.501]                               next
[08:27:44.501]                             if (!grepl(pattern, name)) 
[08:27:44.501]                               next
[08:27:44.501]                             invokeRestart(restart)
[08:27:44.501]                             muffled <- TRUE
[08:27:44.501]                             break
[08:27:44.501]                           }
[08:27:44.501]                         }
[08:27:44.501]                       }
[08:27:44.501]                       invisible(muffled)
[08:27:44.501]                     }
[08:27:44.501]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.501]                   }
[08:27:44.501]                 }
[08:27:44.501]             }
[08:27:44.501]         }))
[08:27:44.501]     }, error = function(ex) {
[08:27:44.501]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.501]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.501]                 ...future.rng), started = ...future.startTime, 
[08:27:44.501]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.501]             version = "1.8"), class = "FutureResult")
[08:27:44.501]     }, finally = {
[08:27:44.501]         if (!identical(...future.workdir, getwd())) 
[08:27:44.501]             setwd(...future.workdir)
[08:27:44.501]         {
[08:27:44.501]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.501]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.501]             }
[08:27:44.501]             base::options(...future.oldOptions)
[08:27:44.501]             if (.Platform$OS.type == "windows") {
[08:27:44.501]                 old_names <- names(...future.oldEnvVars)
[08:27:44.501]                 envs <- base::Sys.getenv()
[08:27:44.501]                 names <- names(envs)
[08:27:44.501]                 common <- intersect(names, old_names)
[08:27:44.501]                 added <- setdiff(names, old_names)
[08:27:44.501]                 removed <- setdiff(old_names, names)
[08:27:44.501]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.501]                   envs[common]]
[08:27:44.501]                 NAMES <- toupper(changed)
[08:27:44.501]                 args <- list()
[08:27:44.501]                 for (kk in seq_along(NAMES)) {
[08:27:44.501]                   name <- changed[[kk]]
[08:27:44.501]                   NAME <- NAMES[[kk]]
[08:27:44.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.501]                     next
[08:27:44.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.501]                 }
[08:27:44.501]                 NAMES <- toupper(added)
[08:27:44.501]                 for (kk in seq_along(NAMES)) {
[08:27:44.501]                   name <- added[[kk]]
[08:27:44.501]                   NAME <- NAMES[[kk]]
[08:27:44.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.501]                     next
[08:27:44.501]                   args[[name]] <- ""
[08:27:44.501]                 }
[08:27:44.501]                 NAMES <- toupper(removed)
[08:27:44.501]                 for (kk in seq_along(NAMES)) {
[08:27:44.501]                   name <- removed[[kk]]
[08:27:44.501]                   NAME <- NAMES[[kk]]
[08:27:44.501]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.501]                     next
[08:27:44.501]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.501]                 }
[08:27:44.501]                 if (length(args) > 0) 
[08:27:44.501]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.501]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.501]             }
[08:27:44.501]             else {
[08:27:44.501]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.501]             }
[08:27:44.501]             {
[08:27:44.501]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.501]                   0L) {
[08:27:44.501]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.501]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.501]                   base::options(opts)
[08:27:44.501]                 }
[08:27:44.501]                 {
[08:27:44.501]                   {
[08:27:44.501]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.501]                     NULL
[08:27:44.501]                   }
[08:27:44.501]                   options(future.plan = NULL)
[08:27:44.501]                   if (is.na(NA_character_)) 
[08:27:44.501]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.501]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.501]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.501]                     .init = FALSE)
[08:27:44.501]                 }
[08:27:44.501]             }
[08:27:44.501]         }
[08:27:44.501]     })
[08:27:44.501]     if (TRUE) {
[08:27:44.501]         base::sink(type = "output", split = FALSE)
[08:27:44.501]         if (TRUE) {
[08:27:44.501]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.501]         }
[08:27:44.501]         else {
[08:27:44.501]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.501]         }
[08:27:44.501]         base::close(...future.stdout)
[08:27:44.501]         ...future.stdout <- NULL
[08:27:44.501]     }
[08:27:44.501]     ...future.result$conditions <- ...future.conditions
[08:27:44.501]     ...future.result$finished <- base::Sys.time()
[08:27:44.501]     ...future.result
[08:27:44.501] }
[08:27:44.504] Exporting 1 global objects (346 bytes) to cluster node #1 ...
[08:27:44.505] Exporting ‘a’ (39 bytes) to cluster node #1 ...
[08:27:44.509] Exporting ‘a’ (39 bytes) to cluster node #1 ... DONE
[08:27:44.509] Exporting 1 global objects (346 bytes) to cluster node #1 ... DONE
[08:27:44.510] MultisessionFuture started
[08:27:44.510] - Launch lazy future ... done
[08:27:44.510] run() for ‘MultisessionFuture’ ... done
[08:27:44.510] result() for ClusterFuture ...
[08:27:44.510] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.510] - Validating connection of MultisessionFuture
[08:27:44.553] - received message: FutureResult
[08:27:44.553] - Received FutureResult
[08:27:44.553] - Erased future from FutureRegistry
[08:27:44.553] result() for ClusterFuture ...
[08:27:44.553] - result already collected: FutureResult
[08:27:44.554] result() for ClusterFuture ... done
[08:27:44.554] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.554] result() for ClusterFuture ... done
[08:27:44.554] result() for ClusterFuture ...
[08:27:44.554] - result already collected: FutureResult
[08:27:44.554] result() for ClusterFuture ... done
[08:27:44.554] getGlobalsAndPackages() ...
[08:27:44.555] Searching for globals...
[08:27:44.556] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:44.556] Searching for globals ... DONE
[08:27:44.556] Resolving globals: FALSE
[08:27:44.556] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:44.557] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:44.557] - globals: [1] ‘a’
[08:27:44.557] 
[08:27:44.557] getGlobalsAndPackages() ... DONE
[08:27:44.558] run() for ‘Future’ ...
[08:27:44.558] - state: ‘created’
[08:27:44.558] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.573] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.574] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.574]   - Field: ‘node’
[08:27:44.574]   - Field: ‘label’
[08:27:44.574]   - Field: ‘local’
[08:27:44.574]   - Field: ‘owner’
[08:27:44.574]   - Field: ‘envir’
[08:27:44.574]   - Field: ‘workers’
[08:27:44.574]   - Field: ‘packages’
[08:27:44.574]   - Field: ‘gc’
[08:27:44.574]   - Field: ‘conditions’
[08:27:44.575]   - Field: ‘persistent’
[08:27:44.575]   - Field: ‘expr’
[08:27:44.575]   - Field: ‘uuid’
[08:27:44.575]   - Field: ‘seed’
[08:27:44.575]   - Field: ‘version’
[08:27:44.575]   - Field: ‘result’
[08:27:44.575]   - Field: ‘asynchronous’
[08:27:44.575]   - Field: ‘calls’
[08:27:44.575]   - Field: ‘globals’
[08:27:44.576]   - Field: ‘stdout’
[08:27:44.576]   - Field: ‘earlySignal’
[08:27:44.576]   - Field: ‘lazy’
[08:27:44.576]   - Field: ‘state’
[08:27:44.576] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.576] - Launch lazy future ...
[08:27:44.577] Packages needed by the future expression (n = 0): <none>
[08:27:44.577] Packages needed by future strategies (n = 0): <none>
[08:27:44.577] {
[08:27:44.577]     {
[08:27:44.577]         {
[08:27:44.577]             ...future.startTime <- base::Sys.time()
[08:27:44.577]             {
[08:27:44.577]                 {
[08:27:44.577]                   {
[08:27:44.577]                     {
[08:27:44.577]                       base::local({
[08:27:44.577]                         has_future <- base::requireNamespace("future", 
[08:27:44.577]                           quietly = TRUE)
[08:27:44.577]                         if (has_future) {
[08:27:44.577]                           ns <- base::getNamespace("future")
[08:27:44.577]                           version <- ns[[".package"]][["version"]]
[08:27:44.577]                           if (is.null(version)) 
[08:27:44.577]                             version <- utils::packageVersion("future")
[08:27:44.577]                         }
[08:27:44.577]                         else {
[08:27:44.577]                           version <- NULL
[08:27:44.577]                         }
[08:27:44.577]                         if (!has_future || version < "1.8.0") {
[08:27:44.577]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.577]                             "", base::R.version$version.string), 
[08:27:44.577]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.577]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.577]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.577]                               "release", "version")], collapse = " "), 
[08:27:44.577]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.577]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.577]                             info)
[08:27:44.577]                           info <- base::paste(info, collapse = "; ")
[08:27:44.577]                           if (!has_future) {
[08:27:44.577]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.577]                               info)
[08:27:44.577]                           }
[08:27:44.577]                           else {
[08:27:44.577]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.577]                               info, version)
[08:27:44.577]                           }
[08:27:44.577]                           base::stop(msg)
[08:27:44.577]                         }
[08:27:44.577]                       })
[08:27:44.577]                     }
[08:27:44.577]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.577]                     base::options(mc.cores = 1L)
[08:27:44.577]                   }
[08:27:44.577]                   ...future.strategy.old <- future::plan("list")
[08:27:44.577]                   options(future.plan = NULL)
[08:27:44.577]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.577]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.577]                 }
[08:27:44.577]                 ...future.workdir <- getwd()
[08:27:44.577]             }
[08:27:44.577]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.577]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.577]         }
[08:27:44.577]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.577]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.577]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.577]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.577]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.577]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.577]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.577]             base::names(...future.oldOptions))
[08:27:44.577]     }
[08:27:44.577]     if (FALSE) {
[08:27:44.577]     }
[08:27:44.577]     else {
[08:27:44.577]         if (TRUE) {
[08:27:44.577]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.577]                 open = "w")
[08:27:44.577]         }
[08:27:44.577]         else {
[08:27:44.577]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.577]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.577]         }
[08:27:44.577]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.577]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.577]             base::sink(type = "output", split = FALSE)
[08:27:44.577]             base::close(...future.stdout)
[08:27:44.577]         }, add = TRUE)
[08:27:44.577]     }
[08:27:44.577]     ...future.frame <- base::sys.nframe()
[08:27:44.577]     ...future.conditions <- base::list()
[08:27:44.577]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.577]     if (FALSE) {
[08:27:44.577]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.577]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.577]     }
[08:27:44.577]     ...future.result <- base::tryCatch({
[08:27:44.577]         base::withCallingHandlers({
[08:27:44.577]             ...future.value <- base::withVisible(base::local({
[08:27:44.577]                 ...future.makeSendCondition <- base::local({
[08:27:44.577]                   sendCondition <- NULL
[08:27:44.577]                   function(frame = 1L) {
[08:27:44.577]                     if (is.function(sendCondition)) 
[08:27:44.577]                       return(sendCondition)
[08:27:44.577]                     ns <- getNamespace("parallel")
[08:27:44.577]                     if (exists("sendData", mode = "function", 
[08:27:44.577]                       envir = ns)) {
[08:27:44.577]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.577]                         envir = ns)
[08:27:44.577]                       envir <- sys.frame(frame)
[08:27:44.577]                       master <- NULL
[08:27:44.577]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.577]                         !identical(envir, emptyenv())) {
[08:27:44.577]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.577]                           inherits = FALSE)) {
[08:27:44.577]                           master <- get("master", mode = "list", 
[08:27:44.577]                             envir = envir, inherits = FALSE)
[08:27:44.577]                           if (inherits(master, c("SOCKnode", 
[08:27:44.577]                             "SOCK0node"))) {
[08:27:44.577]                             sendCondition <<- function(cond) {
[08:27:44.577]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.577]                                 success = TRUE)
[08:27:44.577]                               parallel_sendData(master, data)
[08:27:44.577]                             }
[08:27:44.577]                             return(sendCondition)
[08:27:44.577]                           }
[08:27:44.577]                         }
[08:27:44.577]                         frame <- frame + 1L
[08:27:44.577]                         envir <- sys.frame(frame)
[08:27:44.577]                       }
[08:27:44.577]                     }
[08:27:44.577]                     sendCondition <<- function(cond) NULL
[08:27:44.577]                   }
[08:27:44.577]                 })
[08:27:44.577]                 withCallingHandlers({
[08:27:44.577]                   {
[08:27:44.577]                     2 * a
[08:27:44.577]                   }
[08:27:44.577]                 }, immediateCondition = function(cond) {
[08:27:44.577]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.577]                   sendCondition(cond)
[08:27:44.577]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.577]                   {
[08:27:44.577]                     inherits <- base::inherits
[08:27:44.577]                     invokeRestart <- base::invokeRestart
[08:27:44.577]                     is.null <- base::is.null
[08:27:44.577]                     muffled <- FALSE
[08:27:44.577]                     if (inherits(cond, "message")) {
[08:27:44.577]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.577]                       if (muffled) 
[08:27:44.577]                         invokeRestart("muffleMessage")
[08:27:44.577]                     }
[08:27:44.577]                     else if (inherits(cond, "warning")) {
[08:27:44.577]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.577]                       if (muffled) 
[08:27:44.577]                         invokeRestart("muffleWarning")
[08:27:44.577]                     }
[08:27:44.577]                     else if (inherits(cond, "condition")) {
[08:27:44.577]                       if (!is.null(pattern)) {
[08:27:44.577]                         computeRestarts <- base::computeRestarts
[08:27:44.577]                         grepl <- base::grepl
[08:27:44.577]                         restarts <- computeRestarts(cond)
[08:27:44.577]                         for (restart in restarts) {
[08:27:44.577]                           name <- restart$name
[08:27:44.577]                           if (is.null(name)) 
[08:27:44.577]                             next
[08:27:44.577]                           if (!grepl(pattern, name)) 
[08:27:44.577]                             next
[08:27:44.577]                           invokeRestart(restart)
[08:27:44.577]                           muffled <- TRUE
[08:27:44.577]                           break
[08:27:44.577]                         }
[08:27:44.577]                       }
[08:27:44.577]                     }
[08:27:44.577]                     invisible(muffled)
[08:27:44.577]                   }
[08:27:44.577]                   muffleCondition(cond)
[08:27:44.577]                 })
[08:27:44.577]             }))
[08:27:44.577]             future::FutureResult(value = ...future.value$value, 
[08:27:44.577]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.577]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.577]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.577]                     ...future.globalenv.names))
[08:27:44.577]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.577]         }, condition = base::local({
[08:27:44.577]             c <- base::c
[08:27:44.577]             inherits <- base::inherits
[08:27:44.577]             invokeRestart <- base::invokeRestart
[08:27:44.577]             length <- base::length
[08:27:44.577]             list <- base::list
[08:27:44.577]             seq.int <- base::seq.int
[08:27:44.577]             signalCondition <- base::signalCondition
[08:27:44.577]             sys.calls <- base::sys.calls
[08:27:44.577]             `[[` <- base::`[[`
[08:27:44.577]             `+` <- base::`+`
[08:27:44.577]             `<<-` <- base::`<<-`
[08:27:44.577]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.577]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.577]                   3L)]
[08:27:44.577]             }
[08:27:44.577]             function(cond) {
[08:27:44.577]                 is_error <- inherits(cond, "error")
[08:27:44.577]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.577]                   NULL)
[08:27:44.577]                 if (is_error) {
[08:27:44.577]                   sessionInformation <- function() {
[08:27:44.577]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.577]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.577]                       search = base::search(), system = base::Sys.info())
[08:27:44.577]                   }
[08:27:44.577]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.577]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.577]                     cond$call), session = sessionInformation(), 
[08:27:44.577]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.577]                   signalCondition(cond)
[08:27:44.577]                 }
[08:27:44.577]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.577]                 "immediateCondition"))) {
[08:27:44.577]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.577]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.577]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.577]                   if (TRUE && !signal) {
[08:27:44.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.577]                     {
[08:27:44.577]                       inherits <- base::inherits
[08:27:44.577]                       invokeRestart <- base::invokeRestart
[08:27:44.577]                       is.null <- base::is.null
[08:27:44.577]                       muffled <- FALSE
[08:27:44.577]                       if (inherits(cond, "message")) {
[08:27:44.577]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.577]                         if (muffled) 
[08:27:44.577]                           invokeRestart("muffleMessage")
[08:27:44.577]                       }
[08:27:44.577]                       else if (inherits(cond, "warning")) {
[08:27:44.577]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.577]                         if (muffled) 
[08:27:44.577]                           invokeRestart("muffleWarning")
[08:27:44.577]                       }
[08:27:44.577]                       else if (inherits(cond, "condition")) {
[08:27:44.577]                         if (!is.null(pattern)) {
[08:27:44.577]                           computeRestarts <- base::computeRestarts
[08:27:44.577]                           grepl <- base::grepl
[08:27:44.577]                           restarts <- computeRestarts(cond)
[08:27:44.577]                           for (restart in restarts) {
[08:27:44.577]                             name <- restart$name
[08:27:44.577]                             if (is.null(name)) 
[08:27:44.577]                               next
[08:27:44.577]                             if (!grepl(pattern, name)) 
[08:27:44.577]                               next
[08:27:44.577]                             invokeRestart(restart)
[08:27:44.577]                             muffled <- TRUE
[08:27:44.577]                             break
[08:27:44.577]                           }
[08:27:44.577]                         }
[08:27:44.577]                       }
[08:27:44.577]                       invisible(muffled)
[08:27:44.577]                     }
[08:27:44.577]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.577]                   }
[08:27:44.577]                 }
[08:27:44.577]                 else {
[08:27:44.577]                   if (TRUE) {
[08:27:44.577]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.577]                     {
[08:27:44.577]                       inherits <- base::inherits
[08:27:44.577]                       invokeRestart <- base::invokeRestart
[08:27:44.577]                       is.null <- base::is.null
[08:27:44.577]                       muffled <- FALSE
[08:27:44.577]                       if (inherits(cond, "message")) {
[08:27:44.577]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.577]                         if (muffled) 
[08:27:44.577]                           invokeRestart("muffleMessage")
[08:27:44.577]                       }
[08:27:44.577]                       else if (inherits(cond, "warning")) {
[08:27:44.577]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.577]                         if (muffled) 
[08:27:44.577]                           invokeRestart("muffleWarning")
[08:27:44.577]                       }
[08:27:44.577]                       else if (inherits(cond, "condition")) {
[08:27:44.577]                         if (!is.null(pattern)) {
[08:27:44.577]                           computeRestarts <- base::computeRestarts
[08:27:44.577]                           grepl <- base::grepl
[08:27:44.577]                           restarts <- computeRestarts(cond)
[08:27:44.577]                           for (restart in restarts) {
[08:27:44.577]                             name <- restart$name
[08:27:44.577]                             if (is.null(name)) 
[08:27:44.577]                               next
[08:27:44.577]                             if (!grepl(pattern, name)) 
[08:27:44.577]                               next
[08:27:44.577]                             invokeRestart(restart)
[08:27:44.577]                             muffled <- TRUE
[08:27:44.577]                             break
[08:27:44.577]                           }
[08:27:44.577]                         }
[08:27:44.577]                       }
[08:27:44.577]                       invisible(muffled)
[08:27:44.577]                     }
[08:27:44.577]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.577]                   }
[08:27:44.577]                 }
[08:27:44.577]             }
[08:27:44.577]         }))
[08:27:44.577]     }, error = function(ex) {
[08:27:44.577]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.577]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.577]                 ...future.rng), started = ...future.startTime, 
[08:27:44.577]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.577]             version = "1.8"), class = "FutureResult")
[08:27:44.577]     }, finally = {
[08:27:44.577]         if (!identical(...future.workdir, getwd())) 
[08:27:44.577]             setwd(...future.workdir)
[08:27:44.577]         {
[08:27:44.577]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.577]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.577]             }
[08:27:44.577]             base::options(...future.oldOptions)
[08:27:44.577]             if (.Platform$OS.type == "windows") {
[08:27:44.577]                 old_names <- names(...future.oldEnvVars)
[08:27:44.577]                 envs <- base::Sys.getenv()
[08:27:44.577]                 names <- names(envs)
[08:27:44.577]                 common <- intersect(names, old_names)
[08:27:44.577]                 added <- setdiff(names, old_names)
[08:27:44.577]                 removed <- setdiff(old_names, names)
[08:27:44.577]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.577]                   envs[common]]
[08:27:44.577]                 NAMES <- toupper(changed)
[08:27:44.577]                 args <- list()
[08:27:44.577]                 for (kk in seq_along(NAMES)) {
[08:27:44.577]                   name <- changed[[kk]]
[08:27:44.577]                   NAME <- NAMES[[kk]]
[08:27:44.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.577]                     next
[08:27:44.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.577]                 }
[08:27:44.577]                 NAMES <- toupper(added)
[08:27:44.577]                 for (kk in seq_along(NAMES)) {
[08:27:44.577]                   name <- added[[kk]]
[08:27:44.577]                   NAME <- NAMES[[kk]]
[08:27:44.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.577]                     next
[08:27:44.577]                   args[[name]] <- ""
[08:27:44.577]                 }
[08:27:44.577]                 NAMES <- toupper(removed)
[08:27:44.577]                 for (kk in seq_along(NAMES)) {
[08:27:44.577]                   name <- removed[[kk]]
[08:27:44.577]                   NAME <- NAMES[[kk]]
[08:27:44.577]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.577]                     next
[08:27:44.577]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.577]                 }
[08:27:44.577]                 if (length(args) > 0) 
[08:27:44.577]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.577]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.577]             }
[08:27:44.577]             else {
[08:27:44.577]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.577]             }
[08:27:44.577]             {
[08:27:44.577]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.577]                   0L) {
[08:27:44.577]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.577]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.577]                   base::options(opts)
[08:27:44.577]                 }
[08:27:44.577]                 {
[08:27:44.577]                   {
[08:27:44.577]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.577]                     NULL
[08:27:44.577]                   }
[08:27:44.577]                   options(future.plan = NULL)
[08:27:44.577]                   if (is.na(NA_character_)) 
[08:27:44.577]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.577]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.577]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.577]                     .init = FALSE)
[08:27:44.577]                 }
[08:27:44.577]             }
[08:27:44.577]         }
[08:27:44.577]     })
[08:27:44.577]     if (TRUE) {
[08:27:44.577]         base::sink(type = "output", split = FALSE)
[08:27:44.577]         if (TRUE) {
[08:27:44.577]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.577]         }
[08:27:44.577]         else {
[08:27:44.577]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.577]         }
[08:27:44.577]         base::close(...future.stdout)
[08:27:44.577]         ...future.stdout <- NULL
[08:27:44.577]     }
[08:27:44.577]     ...future.result$conditions <- ...future.conditions
[08:27:44.577]     ...future.result$finished <- base::Sys.time()
[08:27:44.577]     ...future.result
[08:27:44.577] }
[08:27:44.580] Exporting 1 global objects (346 bytes) to cluster node #1 ...
[08:27:44.581] Exporting ‘a’ (39 bytes) to cluster node #1 ...
[08:27:44.581] Exporting ‘a’ (39 bytes) to cluster node #1 ... DONE
[08:27:44.581] Exporting 1 global objects (346 bytes) to cluster node #1 ... DONE
[08:27:44.582] MultisessionFuture started
[08:27:44.582] - Launch lazy future ... done
[08:27:44.582] run() for ‘MultisessionFuture’ ... done
[08:27:44.582] result() for ClusterFuture ...
[08:27:44.583] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.583] - Validating connection of MultisessionFuture
[08:27:44.624] - received message: FutureResult
[08:27:44.625] - Received FutureResult
[08:27:44.625] - Erased future from FutureRegistry
[08:27:44.625] result() for ClusterFuture ...
[08:27:44.625] - result already collected: FutureResult
[08:27:44.625] result() for ClusterFuture ... done
[08:27:44.625] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.625] result() for ClusterFuture ... done
[08:27:44.626] result() for ClusterFuture ...
[08:27:44.626] - result already collected: FutureResult
[08:27:44.626] result() for ClusterFuture ... done
[08:27:44.626] getGlobalsAndPackages() ...
[08:27:44.626] Searching for globals...
[08:27:44.627] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:44.628] Searching for globals ... DONE
[08:27:44.628] Resolving globals: FALSE
[08:27:44.628] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:44.629] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:44.629] - globals: [1] ‘a’
[08:27:44.629] 
[08:27:44.629] getGlobalsAndPackages() ... DONE
[08:27:44.629] run() for ‘Future’ ...
[08:27:44.629] - state: ‘created’
[08:27:44.630] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.645] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.645] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.645]   - Field: ‘node’
[08:27:44.645]   - Field: ‘label’
[08:27:44.645]   - Field: ‘local’
[08:27:44.645]   - Field: ‘owner’
[08:27:44.645]   - Field: ‘envir’
[08:27:44.646]   - Field: ‘workers’
[08:27:44.646]   - Field: ‘packages’
[08:27:44.646]   - Field: ‘gc’
[08:27:44.646]   - Field: ‘conditions’
[08:27:44.646]   - Field: ‘persistent’
[08:27:44.646]   - Field: ‘expr’
[08:27:44.646]   - Field: ‘uuid’
[08:27:44.646]   - Field: ‘seed’
[08:27:44.646]   - Field: ‘version’
[08:27:44.646]   - Field: ‘result’
[08:27:44.647]   - Field: ‘asynchronous’
[08:27:44.647]   - Field: ‘calls’
[08:27:44.647]   - Field: ‘globals’
[08:27:44.647]   - Field: ‘stdout’
[08:27:44.647]   - Field: ‘earlySignal’
[08:27:44.647]   - Field: ‘lazy’
[08:27:44.647]   - Field: ‘state’
[08:27:44.647] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.647] - Launch lazy future ...
[08:27:44.648] Packages needed by the future expression (n = 0): <none>
[08:27:44.648] Packages needed by future strategies (n = 0): <none>
[08:27:44.649] {
[08:27:44.649]     {
[08:27:44.649]         {
[08:27:44.649]             ...future.startTime <- base::Sys.time()
[08:27:44.649]             {
[08:27:44.649]                 {
[08:27:44.649]                   {
[08:27:44.649]                     {
[08:27:44.649]                       base::local({
[08:27:44.649]                         has_future <- base::requireNamespace("future", 
[08:27:44.649]                           quietly = TRUE)
[08:27:44.649]                         if (has_future) {
[08:27:44.649]                           ns <- base::getNamespace("future")
[08:27:44.649]                           version <- ns[[".package"]][["version"]]
[08:27:44.649]                           if (is.null(version)) 
[08:27:44.649]                             version <- utils::packageVersion("future")
[08:27:44.649]                         }
[08:27:44.649]                         else {
[08:27:44.649]                           version <- NULL
[08:27:44.649]                         }
[08:27:44.649]                         if (!has_future || version < "1.8.0") {
[08:27:44.649]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.649]                             "", base::R.version$version.string), 
[08:27:44.649]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.649]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.649]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.649]                               "release", "version")], collapse = " "), 
[08:27:44.649]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.649]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.649]                             info)
[08:27:44.649]                           info <- base::paste(info, collapse = "; ")
[08:27:44.649]                           if (!has_future) {
[08:27:44.649]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.649]                               info)
[08:27:44.649]                           }
[08:27:44.649]                           else {
[08:27:44.649]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.649]                               info, version)
[08:27:44.649]                           }
[08:27:44.649]                           base::stop(msg)
[08:27:44.649]                         }
[08:27:44.649]                       })
[08:27:44.649]                     }
[08:27:44.649]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.649]                     base::options(mc.cores = 1L)
[08:27:44.649]                   }
[08:27:44.649]                   ...future.strategy.old <- future::plan("list")
[08:27:44.649]                   options(future.plan = NULL)
[08:27:44.649]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.649]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.649]                 }
[08:27:44.649]                 ...future.workdir <- getwd()
[08:27:44.649]             }
[08:27:44.649]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.649]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.649]         }
[08:27:44.649]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.649]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.649]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.649]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.649]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.649]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.649]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.649]             base::names(...future.oldOptions))
[08:27:44.649]     }
[08:27:44.649]     if (FALSE) {
[08:27:44.649]     }
[08:27:44.649]     else {
[08:27:44.649]         if (TRUE) {
[08:27:44.649]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.649]                 open = "w")
[08:27:44.649]         }
[08:27:44.649]         else {
[08:27:44.649]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.649]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.649]         }
[08:27:44.649]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.649]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.649]             base::sink(type = "output", split = FALSE)
[08:27:44.649]             base::close(...future.stdout)
[08:27:44.649]         }, add = TRUE)
[08:27:44.649]     }
[08:27:44.649]     ...future.frame <- base::sys.nframe()
[08:27:44.649]     ...future.conditions <- base::list()
[08:27:44.649]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.649]     if (FALSE) {
[08:27:44.649]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.649]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.649]     }
[08:27:44.649]     ...future.result <- base::tryCatch({
[08:27:44.649]         base::withCallingHandlers({
[08:27:44.649]             ...future.value <- base::withVisible(base::local({
[08:27:44.649]                 ...future.makeSendCondition <- base::local({
[08:27:44.649]                   sendCondition <- NULL
[08:27:44.649]                   function(frame = 1L) {
[08:27:44.649]                     if (is.function(sendCondition)) 
[08:27:44.649]                       return(sendCondition)
[08:27:44.649]                     ns <- getNamespace("parallel")
[08:27:44.649]                     if (exists("sendData", mode = "function", 
[08:27:44.649]                       envir = ns)) {
[08:27:44.649]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.649]                         envir = ns)
[08:27:44.649]                       envir <- sys.frame(frame)
[08:27:44.649]                       master <- NULL
[08:27:44.649]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.649]                         !identical(envir, emptyenv())) {
[08:27:44.649]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.649]                           inherits = FALSE)) {
[08:27:44.649]                           master <- get("master", mode = "list", 
[08:27:44.649]                             envir = envir, inherits = FALSE)
[08:27:44.649]                           if (inherits(master, c("SOCKnode", 
[08:27:44.649]                             "SOCK0node"))) {
[08:27:44.649]                             sendCondition <<- function(cond) {
[08:27:44.649]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.649]                                 success = TRUE)
[08:27:44.649]                               parallel_sendData(master, data)
[08:27:44.649]                             }
[08:27:44.649]                             return(sendCondition)
[08:27:44.649]                           }
[08:27:44.649]                         }
[08:27:44.649]                         frame <- frame + 1L
[08:27:44.649]                         envir <- sys.frame(frame)
[08:27:44.649]                       }
[08:27:44.649]                     }
[08:27:44.649]                     sendCondition <<- function(cond) NULL
[08:27:44.649]                   }
[08:27:44.649]                 })
[08:27:44.649]                 withCallingHandlers({
[08:27:44.649]                   {
[08:27:44.649]                     2 * a
[08:27:44.649]                   }
[08:27:44.649]                 }, immediateCondition = function(cond) {
[08:27:44.649]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.649]                   sendCondition(cond)
[08:27:44.649]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.649]                   {
[08:27:44.649]                     inherits <- base::inherits
[08:27:44.649]                     invokeRestart <- base::invokeRestart
[08:27:44.649]                     is.null <- base::is.null
[08:27:44.649]                     muffled <- FALSE
[08:27:44.649]                     if (inherits(cond, "message")) {
[08:27:44.649]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.649]                       if (muffled) 
[08:27:44.649]                         invokeRestart("muffleMessage")
[08:27:44.649]                     }
[08:27:44.649]                     else if (inherits(cond, "warning")) {
[08:27:44.649]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.649]                       if (muffled) 
[08:27:44.649]                         invokeRestart("muffleWarning")
[08:27:44.649]                     }
[08:27:44.649]                     else if (inherits(cond, "condition")) {
[08:27:44.649]                       if (!is.null(pattern)) {
[08:27:44.649]                         computeRestarts <- base::computeRestarts
[08:27:44.649]                         grepl <- base::grepl
[08:27:44.649]                         restarts <- computeRestarts(cond)
[08:27:44.649]                         for (restart in restarts) {
[08:27:44.649]                           name <- restart$name
[08:27:44.649]                           if (is.null(name)) 
[08:27:44.649]                             next
[08:27:44.649]                           if (!grepl(pattern, name)) 
[08:27:44.649]                             next
[08:27:44.649]                           invokeRestart(restart)
[08:27:44.649]                           muffled <- TRUE
[08:27:44.649]                           break
[08:27:44.649]                         }
[08:27:44.649]                       }
[08:27:44.649]                     }
[08:27:44.649]                     invisible(muffled)
[08:27:44.649]                   }
[08:27:44.649]                   muffleCondition(cond)
[08:27:44.649]                 })
[08:27:44.649]             }))
[08:27:44.649]             future::FutureResult(value = ...future.value$value, 
[08:27:44.649]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.649]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.649]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.649]                     ...future.globalenv.names))
[08:27:44.649]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.649]         }, condition = base::local({
[08:27:44.649]             c <- base::c
[08:27:44.649]             inherits <- base::inherits
[08:27:44.649]             invokeRestart <- base::invokeRestart
[08:27:44.649]             length <- base::length
[08:27:44.649]             list <- base::list
[08:27:44.649]             seq.int <- base::seq.int
[08:27:44.649]             signalCondition <- base::signalCondition
[08:27:44.649]             sys.calls <- base::sys.calls
[08:27:44.649]             `[[` <- base::`[[`
[08:27:44.649]             `+` <- base::`+`
[08:27:44.649]             `<<-` <- base::`<<-`
[08:27:44.649]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.649]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.649]                   3L)]
[08:27:44.649]             }
[08:27:44.649]             function(cond) {
[08:27:44.649]                 is_error <- inherits(cond, "error")
[08:27:44.649]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.649]                   NULL)
[08:27:44.649]                 if (is_error) {
[08:27:44.649]                   sessionInformation <- function() {
[08:27:44.649]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.649]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.649]                       search = base::search(), system = base::Sys.info())
[08:27:44.649]                   }
[08:27:44.649]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.649]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.649]                     cond$call), session = sessionInformation(), 
[08:27:44.649]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.649]                   signalCondition(cond)
[08:27:44.649]                 }
[08:27:44.649]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.649]                 "immediateCondition"))) {
[08:27:44.649]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.649]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.649]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.649]                   if (TRUE && !signal) {
[08:27:44.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.649]                     {
[08:27:44.649]                       inherits <- base::inherits
[08:27:44.649]                       invokeRestart <- base::invokeRestart
[08:27:44.649]                       is.null <- base::is.null
[08:27:44.649]                       muffled <- FALSE
[08:27:44.649]                       if (inherits(cond, "message")) {
[08:27:44.649]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.649]                         if (muffled) 
[08:27:44.649]                           invokeRestart("muffleMessage")
[08:27:44.649]                       }
[08:27:44.649]                       else if (inherits(cond, "warning")) {
[08:27:44.649]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.649]                         if (muffled) 
[08:27:44.649]                           invokeRestart("muffleWarning")
[08:27:44.649]                       }
[08:27:44.649]                       else if (inherits(cond, "condition")) {
[08:27:44.649]                         if (!is.null(pattern)) {
[08:27:44.649]                           computeRestarts <- base::computeRestarts
[08:27:44.649]                           grepl <- base::grepl
[08:27:44.649]                           restarts <- computeRestarts(cond)
[08:27:44.649]                           for (restart in restarts) {
[08:27:44.649]                             name <- restart$name
[08:27:44.649]                             if (is.null(name)) 
[08:27:44.649]                               next
[08:27:44.649]                             if (!grepl(pattern, name)) 
[08:27:44.649]                               next
[08:27:44.649]                             invokeRestart(restart)
[08:27:44.649]                             muffled <- TRUE
[08:27:44.649]                             break
[08:27:44.649]                           }
[08:27:44.649]                         }
[08:27:44.649]                       }
[08:27:44.649]                       invisible(muffled)
[08:27:44.649]                     }
[08:27:44.649]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.649]                   }
[08:27:44.649]                 }
[08:27:44.649]                 else {
[08:27:44.649]                   if (TRUE) {
[08:27:44.649]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.649]                     {
[08:27:44.649]                       inherits <- base::inherits
[08:27:44.649]                       invokeRestart <- base::invokeRestart
[08:27:44.649]                       is.null <- base::is.null
[08:27:44.649]                       muffled <- FALSE
[08:27:44.649]                       if (inherits(cond, "message")) {
[08:27:44.649]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.649]                         if (muffled) 
[08:27:44.649]                           invokeRestart("muffleMessage")
[08:27:44.649]                       }
[08:27:44.649]                       else if (inherits(cond, "warning")) {
[08:27:44.649]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.649]                         if (muffled) 
[08:27:44.649]                           invokeRestart("muffleWarning")
[08:27:44.649]                       }
[08:27:44.649]                       else if (inherits(cond, "condition")) {
[08:27:44.649]                         if (!is.null(pattern)) {
[08:27:44.649]                           computeRestarts <- base::computeRestarts
[08:27:44.649]                           grepl <- base::grepl
[08:27:44.649]                           restarts <- computeRestarts(cond)
[08:27:44.649]                           for (restart in restarts) {
[08:27:44.649]                             name <- restart$name
[08:27:44.649]                             if (is.null(name)) 
[08:27:44.649]                               next
[08:27:44.649]                             if (!grepl(pattern, name)) 
[08:27:44.649]                               next
[08:27:44.649]                             invokeRestart(restart)
[08:27:44.649]                             muffled <- TRUE
[08:27:44.649]                             break
[08:27:44.649]                           }
[08:27:44.649]                         }
[08:27:44.649]                       }
[08:27:44.649]                       invisible(muffled)
[08:27:44.649]                     }
[08:27:44.649]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.649]                   }
[08:27:44.649]                 }
[08:27:44.649]             }
[08:27:44.649]         }))
[08:27:44.649]     }, error = function(ex) {
[08:27:44.649]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.649]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.649]                 ...future.rng), started = ...future.startTime, 
[08:27:44.649]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.649]             version = "1.8"), class = "FutureResult")
[08:27:44.649]     }, finally = {
[08:27:44.649]         if (!identical(...future.workdir, getwd())) 
[08:27:44.649]             setwd(...future.workdir)
[08:27:44.649]         {
[08:27:44.649]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.649]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.649]             }
[08:27:44.649]             base::options(...future.oldOptions)
[08:27:44.649]             if (.Platform$OS.type == "windows") {
[08:27:44.649]                 old_names <- names(...future.oldEnvVars)
[08:27:44.649]                 envs <- base::Sys.getenv()
[08:27:44.649]                 names <- names(envs)
[08:27:44.649]                 common <- intersect(names, old_names)
[08:27:44.649]                 added <- setdiff(names, old_names)
[08:27:44.649]                 removed <- setdiff(old_names, names)
[08:27:44.649]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.649]                   envs[common]]
[08:27:44.649]                 NAMES <- toupper(changed)
[08:27:44.649]                 args <- list()
[08:27:44.649]                 for (kk in seq_along(NAMES)) {
[08:27:44.649]                   name <- changed[[kk]]
[08:27:44.649]                   NAME <- NAMES[[kk]]
[08:27:44.649]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.649]                     next
[08:27:44.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.649]                 }
[08:27:44.649]                 NAMES <- toupper(added)
[08:27:44.649]                 for (kk in seq_along(NAMES)) {
[08:27:44.649]                   name <- added[[kk]]
[08:27:44.649]                   NAME <- NAMES[[kk]]
[08:27:44.649]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.649]                     next
[08:27:44.649]                   args[[name]] <- ""
[08:27:44.649]                 }
[08:27:44.649]                 NAMES <- toupper(removed)
[08:27:44.649]                 for (kk in seq_along(NAMES)) {
[08:27:44.649]                   name <- removed[[kk]]
[08:27:44.649]                   NAME <- NAMES[[kk]]
[08:27:44.649]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.649]                     next
[08:27:44.649]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.649]                 }
[08:27:44.649]                 if (length(args) > 0) 
[08:27:44.649]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.649]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.649]             }
[08:27:44.649]             else {
[08:27:44.649]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.649]             }
[08:27:44.649]             {
[08:27:44.649]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.649]                   0L) {
[08:27:44.649]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.649]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.649]                   base::options(opts)
[08:27:44.649]                 }
[08:27:44.649]                 {
[08:27:44.649]                   {
[08:27:44.649]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.649]                     NULL
[08:27:44.649]                   }
[08:27:44.649]                   options(future.plan = NULL)
[08:27:44.649]                   if (is.na(NA_character_)) 
[08:27:44.649]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.649]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.649]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.649]                     .init = FALSE)
[08:27:44.649]                 }
[08:27:44.649]             }
[08:27:44.649]         }
[08:27:44.649]     })
[08:27:44.649]     if (TRUE) {
[08:27:44.649]         base::sink(type = "output", split = FALSE)
[08:27:44.649]         if (TRUE) {
[08:27:44.649]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.649]         }
[08:27:44.649]         else {
[08:27:44.649]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.649]         }
[08:27:44.649]         base::close(...future.stdout)
[08:27:44.649]         ...future.stdout <- NULL
[08:27:44.649]     }
[08:27:44.649]     ...future.result$conditions <- ...future.conditions
[08:27:44.649]     ...future.result$finished <- base::Sys.time()
[08:27:44.649]     ...future.result
[08:27:44.649] }
[08:27:44.652] Exporting 1 global objects (346 bytes) to cluster node #1 ...
[08:27:44.652] Exporting ‘a’ (39 bytes) to cluster node #1 ...
[08:27:44.653] Exporting ‘a’ (39 bytes) to cluster node #1 ... DONE
[08:27:44.653] Exporting 1 global objects (346 bytes) to cluster node #1 ... DONE
[08:27:44.653] MultisessionFuture started
[08:27:44.653] - Launch lazy future ... done
[08:27:44.654] run() for ‘MultisessionFuture’ ... done
[08:27:44.654] result() for ClusterFuture ...
[08:27:44.654] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.654] - Validating connection of MultisessionFuture
[08:27:44.695] - received message: FutureResult
[08:27:44.696] - Received FutureResult
[08:27:44.696] - Erased future from FutureRegistry
[08:27:44.696] result() for ClusterFuture ...
[08:27:44.696] - result already collected: FutureResult
[08:27:44.696] result() for ClusterFuture ... done
[08:27:44.696] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.697] result() for ClusterFuture ... done
[08:27:44.697] result() for ClusterFuture ...
[08:27:44.697] - result already collected: FutureResult
[08:27:44.697] result() for ClusterFuture ... done
[08:27:44.697] getGlobalsAndPackages() ...
[08:27:44.697] Searching for globals...
[08:27:44.698] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:44.699] Searching for globals ... DONE
[08:27:44.699] Resolving globals: FALSE
[08:27:44.699] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:44.700] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:44.700] - globals: [1] ‘a’
[08:27:44.700] 
[08:27:44.700] getGlobalsAndPackages() ... DONE
[08:27:44.700] run() for ‘Future’ ...
[08:27:44.701] - state: ‘created’
[08:27:44.701] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.718] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.718] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.718]   - Field: ‘node’
[08:27:44.719]   - Field: ‘label’
[08:27:44.719]   - Field: ‘local’
[08:27:44.719]   - Field: ‘owner’
[08:27:44.719]   - Field: ‘envir’
[08:27:44.719]   - Field: ‘workers’
[08:27:44.719]   - Field: ‘packages’
[08:27:44.719]   - Field: ‘gc’
[08:27:44.719]   - Field: ‘conditions’
[08:27:44.719]   - Field: ‘persistent’
[08:27:44.719]   - Field: ‘expr’
[08:27:44.719]   - Field: ‘uuid’
[08:27:44.719]   - Field: ‘seed’
[08:27:44.720]   - Field: ‘version’
[08:27:44.720]   - Field: ‘result’
[08:27:44.720]   - Field: ‘asynchronous’
[08:27:44.720]   - Field: ‘calls’
[08:27:44.720]   - Field: ‘globals’
[08:27:44.720]   - Field: ‘stdout’
[08:27:44.720]   - Field: ‘earlySignal’
[08:27:44.720]   - Field: ‘lazy’
[08:27:44.720]   - Field: ‘state’
[08:27:44.720] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.720] - Launch lazy future ...
[08:27:44.721] Packages needed by the future expression (n = 0): <none>
[08:27:44.721] Packages needed by future strategies (n = 0): <none>
[08:27:44.721] {
[08:27:44.721]     {
[08:27:44.721]         {
[08:27:44.721]             ...future.startTime <- base::Sys.time()
[08:27:44.721]             {
[08:27:44.721]                 {
[08:27:44.721]                   {
[08:27:44.721]                     {
[08:27:44.721]                       base::local({
[08:27:44.721]                         has_future <- base::requireNamespace("future", 
[08:27:44.721]                           quietly = TRUE)
[08:27:44.721]                         if (has_future) {
[08:27:44.721]                           ns <- base::getNamespace("future")
[08:27:44.721]                           version <- ns[[".package"]][["version"]]
[08:27:44.721]                           if (is.null(version)) 
[08:27:44.721]                             version <- utils::packageVersion("future")
[08:27:44.721]                         }
[08:27:44.721]                         else {
[08:27:44.721]                           version <- NULL
[08:27:44.721]                         }
[08:27:44.721]                         if (!has_future || version < "1.8.0") {
[08:27:44.721]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.721]                             "", base::R.version$version.string), 
[08:27:44.721]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.721]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.721]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.721]                               "release", "version")], collapse = " "), 
[08:27:44.721]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.721]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.721]                             info)
[08:27:44.721]                           info <- base::paste(info, collapse = "; ")
[08:27:44.721]                           if (!has_future) {
[08:27:44.721]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.721]                               info)
[08:27:44.721]                           }
[08:27:44.721]                           else {
[08:27:44.721]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.721]                               info, version)
[08:27:44.721]                           }
[08:27:44.721]                           base::stop(msg)
[08:27:44.721]                         }
[08:27:44.721]                       })
[08:27:44.721]                     }
[08:27:44.721]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.721]                     base::options(mc.cores = 1L)
[08:27:44.721]                   }
[08:27:44.721]                   ...future.strategy.old <- future::plan("list")
[08:27:44.721]                   options(future.plan = NULL)
[08:27:44.721]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.721]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.721]                 }
[08:27:44.721]                 ...future.workdir <- getwd()
[08:27:44.721]             }
[08:27:44.721]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.721]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.721]         }
[08:27:44.721]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.721]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.721]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.721]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.721]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.721]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.721]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.721]             base::names(...future.oldOptions))
[08:27:44.721]     }
[08:27:44.721]     if (FALSE) {
[08:27:44.721]     }
[08:27:44.721]     else {
[08:27:44.721]         if (TRUE) {
[08:27:44.721]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.721]                 open = "w")
[08:27:44.721]         }
[08:27:44.721]         else {
[08:27:44.721]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.721]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.721]         }
[08:27:44.721]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.721]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.721]             base::sink(type = "output", split = FALSE)
[08:27:44.721]             base::close(...future.stdout)
[08:27:44.721]         }, add = TRUE)
[08:27:44.721]     }
[08:27:44.721]     ...future.frame <- base::sys.nframe()
[08:27:44.721]     ...future.conditions <- base::list()
[08:27:44.721]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.721]     if (FALSE) {
[08:27:44.721]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.721]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.721]     }
[08:27:44.721]     ...future.result <- base::tryCatch({
[08:27:44.721]         base::withCallingHandlers({
[08:27:44.721]             ...future.value <- base::withVisible(base::local({
[08:27:44.721]                 ...future.makeSendCondition <- base::local({
[08:27:44.721]                   sendCondition <- NULL
[08:27:44.721]                   function(frame = 1L) {
[08:27:44.721]                     if (is.function(sendCondition)) 
[08:27:44.721]                       return(sendCondition)
[08:27:44.721]                     ns <- getNamespace("parallel")
[08:27:44.721]                     if (exists("sendData", mode = "function", 
[08:27:44.721]                       envir = ns)) {
[08:27:44.721]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.721]                         envir = ns)
[08:27:44.721]                       envir <- sys.frame(frame)
[08:27:44.721]                       master <- NULL
[08:27:44.721]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.721]                         !identical(envir, emptyenv())) {
[08:27:44.721]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.721]                           inherits = FALSE)) {
[08:27:44.721]                           master <- get("master", mode = "list", 
[08:27:44.721]                             envir = envir, inherits = FALSE)
[08:27:44.721]                           if (inherits(master, c("SOCKnode", 
[08:27:44.721]                             "SOCK0node"))) {
[08:27:44.721]                             sendCondition <<- function(cond) {
[08:27:44.721]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.721]                                 success = TRUE)
[08:27:44.721]                               parallel_sendData(master, data)
[08:27:44.721]                             }
[08:27:44.721]                             return(sendCondition)
[08:27:44.721]                           }
[08:27:44.721]                         }
[08:27:44.721]                         frame <- frame + 1L
[08:27:44.721]                         envir <- sys.frame(frame)
[08:27:44.721]                       }
[08:27:44.721]                     }
[08:27:44.721]                     sendCondition <<- function(cond) NULL
[08:27:44.721]                   }
[08:27:44.721]                 })
[08:27:44.721]                 withCallingHandlers({
[08:27:44.721]                   {
[08:27:44.721]                     2 * a
[08:27:44.721]                   }
[08:27:44.721]                 }, immediateCondition = function(cond) {
[08:27:44.721]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.721]                   sendCondition(cond)
[08:27:44.721]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.721]                   {
[08:27:44.721]                     inherits <- base::inherits
[08:27:44.721]                     invokeRestart <- base::invokeRestart
[08:27:44.721]                     is.null <- base::is.null
[08:27:44.721]                     muffled <- FALSE
[08:27:44.721]                     if (inherits(cond, "message")) {
[08:27:44.721]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.721]                       if (muffled) 
[08:27:44.721]                         invokeRestart("muffleMessage")
[08:27:44.721]                     }
[08:27:44.721]                     else if (inherits(cond, "warning")) {
[08:27:44.721]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.721]                       if (muffled) 
[08:27:44.721]                         invokeRestart("muffleWarning")
[08:27:44.721]                     }
[08:27:44.721]                     else if (inherits(cond, "condition")) {
[08:27:44.721]                       if (!is.null(pattern)) {
[08:27:44.721]                         computeRestarts <- base::computeRestarts
[08:27:44.721]                         grepl <- base::grepl
[08:27:44.721]                         restarts <- computeRestarts(cond)
[08:27:44.721]                         for (restart in restarts) {
[08:27:44.721]                           name <- restart$name
[08:27:44.721]                           if (is.null(name)) 
[08:27:44.721]                             next
[08:27:44.721]                           if (!grepl(pattern, name)) 
[08:27:44.721]                             next
[08:27:44.721]                           invokeRestart(restart)
[08:27:44.721]                           muffled <- TRUE
[08:27:44.721]                           break
[08:27:44.721]                         }
[08:27:44.721]                       }
[08:27:44.721]                     }
[08:27:44.721]                     invisible(muffled)
[08:27:44.721]                   }
[08:27:44.721]                   muffleCondition(cond)
[08:27:44.721]                 })
[08:27:44.721]             }))
[08:27:44.721]             future::FutureResult(value = ...future.value$value, 
[08:27:44.721]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.721]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.721]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.721]                     ...future.globalenv.names))
[08:27:44.721]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.721]         }, condition = base::local({
[08:27:44.721]             c <- base::c
[08:27:44.721]             inherits <- base::inherits
[08:27:44.721]             invokeRestart <- base::invokeRestart
[08:27:44.721]             length <- base::length
[08:27:44.721]             list <- base::list
[08:27:44.721]             seq.int <- base::seq.int
[08:27:44.721]             signalCondition <- base::signalCondition
[08:27:44.721]             sys.calls <- base::sys.calls
[08:27:44.721]             `[[` <- base::`[[`
[08:27:44.721]             `+` <- base::`+`
[08:27:44.721]             `<<-` <- base::`<<-`
[08:27:44.721]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.721]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.721]                   3L)]
[08:27:44.721]             }
[08:27:44.721]             function(cond) {
[08:27:44.721]                 is_error <- inherits(cond, "error")
[08:27:44.721]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.721]                   NULL)
[08:27:44.721]                 if (is_error) {
[08:27:44.721]                   sessionInformation <- function() {
[08:27:44.721]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.721]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.721]                       search = base::search(), system = base::Sys.info())
[08:27:44.721]                   }
[08:27:44.721]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.721]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.721]                     cond$call), session = sessionInformation(), 
[08:27:44.721]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.721]                   signalCondition(cond)
[08:27:44.721]                 }
[08:27:44.721]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.721]                 "immediateCondition"))) {
[08:27:44.721]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.721]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.721]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.721]                   if (TRUE && !signal) {
[08:27:44.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.721]                     {
[08:27:44.721]                       inherits <- base::inherits
[08:27:44.721]                       invokeRestart <- base::invokeRestart
[08:27:44.721]                       is.null <- base::is.null
[08:27:44.721]                       muffled <- FALSE
[08:27:44.721]                       if (inherits(cond, "message")) {
[08:27:44.721]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.721]                         if (muffled) 
[08:27:44.721]                           invokeRestart("muffleMessage")
[08:27:44.721]                       }
[08:27:44.721]                       else if (inherits(cond, "warning")) {
[08:27:44.721]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.721]                         if (muffled) 
[08:27:44.721]                           invokeRestart("muffleWarning")
[08:27:44.721]                       }
[08:27:44.721]                       else if (inherits(cond, "condition")) {
[08:27:44.721]                         if (!is.null(pattern)) {
[08:27:44.721]                           computeRestarts <- base::computeRestarts
[08:27:44.721]                           grepl <- base::grepl
[08:27:44.721]                           restarts <- computeRestarts(cond)
[08:27:44.721]                           for (restart in restarts) {
[08:27:44.721]                             name <- restart$name
[08:27:44.721]                             if (is.null(name)) 
[08:27:44.721]                               next
[08:27:44.721]                             if (!grepl(pattern, name)) 
[08:27:44.721]                               next
[08:27:44.721]                             invokeRestart(restart)
[08:27:44.721]                             muffled <- TRUE
[08:27:44.721]                             break
[08:27:44.721]                           }
[08:27:44.721]                         }
[08:27:44.721]                       }
[08:27:44.721]                       invisible(muffled)
[08:27:44.721]                     }
[08:27:44.721]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.721]                   }
[08:27:44.721]                 }
[08:27:44.721]                 else {
[08:27:44.721]                   if (TRUE) {
[08:27:44.721]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.721]                     {
[08:27:44.721]                       inherits <- base::inherits
[08:27:44.721]                       invokeRestart <- base::invokeRestart
[08:27:44.721]                       is.null <- base::is.null
[08:27:44.721]                       muffled <- FALSE
[08:27:44.721]                       if (inherits(cond, "message")) {
[08:27:44.721]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.721]                         if (muffled) 
[08:27:44.721]                           invokeRestart("muffleMessage")
[08:27:44.721]                       }
[08:27:44.721]                       else if (inherits(cond, "warning")) {
[08:27:44.721]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.721]                         if (muffled) 
[08:27:44.721]                           invokeRestart("muffleWarning")
[08:27:44.721]                       }
[08:27:44.721]                       else if (inherits(cond, "condition")) {
[08:27:44.721]                         if (!is.null(pattern)) {
[08:27:44.721]                           computeRestarts <- base::computeRestarts
[08:27:44.721]                           grepl <- base::grepl
[08:27:44.721]                           restarts <- computeRestarts(cond)
[08:27:44.721]                           for (restart in restarts) {
[08:27:44.721]                             name <- restart$name
[08:27:44.721]                             if (is.null(name)) 
[08:27:44.721]                               next
[08:27:44.721]                             if (!grepl(pattern, name)) 
[08:27:44.721]                               next
[08:27:44.721]                             invokeRestart(restart)
[08:27:44.721]                             muffled <- TRUE
[08:27:44.721]                             break
[08:27:44.721]                           }
[08:27:44.721]                         }
[08:27:44.721]                       }
[08:27:44.721]                       invisible(muffled)
[08:27:44.721]                     }
[08:27:44.721]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.721]                   }
[08:27:44.721]                 }
[08:27:44.721]             }
[08:27:44.721]         }))
[08:27:44.721]     }, error = function(ex) {
[08:27:44.721]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.721]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.721]                 ...future.rng), started = ...future.startTime, 
[08:27:44.721]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.721]             version = "1.8"), class = "FutureResult")
[08:27:44.721]     }, finally = {
[08:27:44.721]         if (!identical(...future.workdir, getwd())) 
[08:27:44.721]             setwd(...future.workdir)
[08:27:44.721]         {
[08:27:44.721]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.721]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.721]             }
[08:27:44.721]             base::options(...future.oldOptions)
[08:27:44.721]             if (.Platform$OS.type == "windows") {
[08:27:44.721]                 old_names <- names(...future.oldEnvVars)
[08:27:44.721]                 envs <- base::Sys.getenv()
[08:27:44.721]                 names <- names(envs)
[08:27:44.721]                 common <- intersect(names, old_names)
[08:27:44.721]                 added <- setdiff(names, old_names)
[08:27:44.721]                 removed <- setdiff(old_names, names)
[08:27:44.721]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.721]                   envs[common]]
[08:27:44.721]                 NAMES <- toupper(changed)
[08:27:44.721]                 args <- list()
[08:27:44.721]                 for (kk in seq_along(NAMES)) {
[08:27:44.721]                   name <- changed[[kk]]
[08:27:44.721]                   NAME <- NAMES[[kk]]
[08:27:44.721]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.721]                     next
[08:27:44.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.721]                 }
[08:27:44.721]                 NAMES <- toupper(added)
[08:27:44.721]                 for (kk in seq_along(NAMES)) {
[08:27:44.721]                   name <- added[[kk]]
[08:27:44.721]                   NAME <- NAMES[[kk]]
[08:27:44.721]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.721]                     next
[08:27:44.721]                   args[[name]] <- ""
[08:27:44.721]                 }
[08:27:44.721]                 NAMES <- toupper(removed)
[08:27:44.721]                 for (kk in seq_along(NAMES)) {
[08:27:44.721]                   name <- removed[[kk]]
[08:27:44.721]                   NAME <- NAMES[[kk]]
[08:27:44.721]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.721]                     next
[08:27:44.721]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.721]                 }
[08:27:44.721]                 if (length(args) > 0) 
[08:27:44.721]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.721]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.721]             }
[08:27:44.721]             else {
[08:27:44.721]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.721]             }
[08:27:44.721]             {
[08:27:44.721]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.721]                   0L) {
[08:27:44.721]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.721]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.721]                   base::options(opts)
[08:27:44.721]                 }
[08:27:44.721]                 {
[08:27:44.721]                   {
[08:27:44.721]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.721]                     NULL
[08:27:44.721]                   }
[08:27:44.721]                   options(future.plan = NULL)
[08:27:44.721]                   if (is.na(NA_character_)) 
[08:27:44.721]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.721]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.721]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.721]                     .init = FALSE)
[08:27:44.721]                 }
[08:27:44.721]             }
[08:27:44.721]         }
[08:27:44.721]     })
[08:27:44.721]     if (TRUE) {
[08:27:44.721]         base::sink(type = "output", split = FALSE)
[08:27:44.721]         if (TRUE) {
[08:27:44.721]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.721]         }
[08:27:44.721]         else {
[08:27:44.721]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.721]         }
[08:27:44.721]         base::close(...future.stdout)
[08:27:44.721]         ...future.stdout <- NULL
[08:27:44.721]     }
[08:27:44.721]     ...future.result$conditions <- ...future.conditions
[08:27:44.721]     ...future.result$finished <- base::Sys.time()
[08:27:44.721]     ...future.result
[08:27:44.721] }
[08:27:44.724] Exporting 1 global objects (346 bytes) to cluster node #1 ...
[08:27:44.724] Exporting ‘a’ (39 bytes) to cluster node #1 ...
[08:27:44.725] Exporting ‘a’ (39 bytes) to cluster node #1 ... DONE
[08:27:44.725] Exporting 1 global objects (346 bytes) to cluster node #1 ... DONE
[08:27:44.725] MultisessionFuture started
[08:27:44.725] - Launch lazy future ... done
[08:27:44.725] run() for ‘MultisessionFuture’ ... done
[08:27:44.726] result() for ClusterFuture ...
[08:27:44.726] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.726] - Validating connection of MultisessionFuture
[08:27:44.767] - received message: FutureResult
[08:27:44.768] - Received FutureResult
[08:27:44.768] - Erased future from FutureRegistry
[08:27:44.768] result() for ClusterFuture ...
[08:27:44.768] - result already collected: FutureResult
[08:27:44.768] result() for ClusterFuture ... done
[08:27:44.768] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.768] result() for ClusterFuture ... done
[08:27:44.768] result() for ClusterFuture ...
[08:27:44.768] - result already collected: FutureResult
[08:27:44.769] result() for ClusterFuture ... done
[08:27:44.769] getGlobalsAndPackages() ...
[08:27:44.769] Searching for globals...
[08:27:44.770] - globals found: [3] ‘{’, ‘*’, ‘a’
[08:27:44.770] Searching for globals ... DONE
[08:27:44.770] Resolving globals: FALSE
[08:27:44.770] The total size of the 1 globals is 39 bytes (39 bytes)
[08:27:44.771] The total size of the 1 globals exported for future expression (‘{; 2 * a; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[08:27:44.771] - globals: [1] ‘a’
[08:27:44.771] 
[08:27:44.771] getGlobalsAndPackages() ... DONE
[08:27:44.771] run() for ‘Future’ ...
[08:27:44.771] - state: ‘created’
[08:27:44.772] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:27:44.785] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:27:44.786] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:27:44.786]   - Field: ‘node’
[08:27:44.786]   - Field: ‘label’
[08:27:44.786]   - Field: ‘local’
[08:27:44.786]   - Field: ‘owner’
[08:27:44.786]   - Field: ‘envir’
[08:27:44.786]   - Field: ‘workers’
[08:27:44.786]   - Field: ‘packages’
[08:27:44.786]   - Field: ‘gc’
[08:27:44.786]   - Field: ‘conditions’
[08:27:44.786]   - Field: ‘persistent’
[08:27:44.787]   - Field: ‘expr’
[08:27:44.787]   - Field: ‘uuid’
[08:27:44.787]   - Field: ‘seed’
[08:27:44.787]   - Field: ‘version’
[08:27:44.787]   - Field: ‘result’
[08:27:44.787]   - Field: ‘asynchronous’
[08:27:44.787]   - Field: ‘calls’
[08:27:44.787]   - Field: ‘globals’
[08:27:44.787]   - Field: ‘stdout’
[08:27:44.787]   - Field: ‘earlySignal’
[08:27:44.787]   - Field: ‘lazy’
[08:27:44.787]   - Field: ‘state’
[08:27:44.787] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:27:44.788] - Launch lazy future ...
[08:27:44.788] Packages needed by the future expression (n = 0): <none>
[08:27:44.788] Packages needed by future strategies (n = 0): <none>
[08:27:44.788] {
[08:27:44.788]     {
[08:27:44.788]         {
[08:27:44.788]             ...future.startTime <- base::Sys.time()
[08:27:44.788]             {
[08:27:44.788]                 {
[08:27:44.788]                   {
[08:27:44.788]                     {
[08:27:44.788]                       base::local({
[08:27:44.788]                         has_future <- base::requireNamespace("future", 
[08:27:44.788]                           quietly = TRUE)
[08:27:44.788]                         if (has_future) {
[08:27:44.788]                           ns <- base::getNamespace("future")
[08:27:44.788]                           version <- ns[[".package"]][["version"]]
[08:27:44.788]                           if (is.null(version)) 
[08:27:44.788]                             version <- utils::packageVersion("future")
[08:27:44.788]                         }
[08:27:44.788]                         else {
[08:27:44.788]                           version <- NULL
[08:27:44.788]                         }
[08:27:44.788]                         if (!has_future || version < "1.8.0") {
[08:27:44.788]                           info <- base::c(r_version = base::gsub("R version ", 
[08:27:44.788]                             "", base::R.version$version.string), 
[08:27:44.788]                             platform = base::sprintf("%s (%s-bit)", 
[08:27:44.788]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:44.788]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:44.788]                               "release", "version")], collapse = " "), 
[08:27:44.788]                             hostname = base::Sys.info()[["nodename"]])
[08:27:44.788]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:27:44.788]                             info)
[08:27:44.788]                           info <- base::paste(info, collapse = "; ")
[08:27:44.788]                           if (!has_future) {
[08:27:44.788]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:44.788]                               info)
[08:27:44.788]                           }
[08:27:44.788]                           else {
[08:27:44.788]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:44.788]                               info, version)
[08:27:44.788]                           }
[08:27:44.788]                           base::stop(msg)
[08:27:44.788]                         }
[08:27:44.788]                       })
[08:27:44.788]                     }
[08:27:44.788]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:27:44.788]                     base::options(mc.cores = 1L)
[08:27:44.788]                   }
[08:27:44.788]                   ...future.strategy.old <- future::plan("list")
[08:27:44.788]                   options(future.plan = NULL)
[08:27:44.788]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.788]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:44.788]                 }
[08:27:44.788]                 ...future.workdir <- getwd()
[08:27:44.788]             }
[08:27:44.788]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:44.788]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:44.788]         }
[08:27:44.788]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:44.788]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:44.788]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:44.788]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:44.788]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:44.788]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:44.788]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:44.788]             base::names(...future.oldOptions))
[08:27:44.788]     }
[08:27:44.788]     if (FALSE) {
[08:27:44.788]     }
[08:27:44.788]     else {
[08:27:44.788]         if (TRUE) {
[08:27:44.788]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:44.788]                 open = "w")
[08:27:44.788]         }
[08:27:44.788]         else {
[08:27:44.788]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:44.788]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:44.788]         }
[08:27:44.788]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:44.788]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:44.788]             base::sink(type = "output", split = FALSE)
[08:27:44.788]             base::close(...future.stdout)
[08:27:44.788]         }, add = TRUE)
[08:27:44.788]     }
[08:27:44.788]     ...future.frame <- base::sys.nframe()
[08:27:44.788]     ...future.conditions <- base::list()
[08:27:44.788]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:44.788]     if (FALSE) {
[08:27:44.788]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:44.788]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:44.788]     }
[08:27:44.788]     ...future.result <- base::tryCatch({
[08:27:44.788]         base::withCallingHandlers({
[08:27:44.788]             ...future.value <- base::withVisible(base::local({
[08:27:44.788]                 ...future.makeSendCondition <- base::local({
[08:27:44.788]                   sendCondition <- NULL
[08:27:44.788]                   function(frame = 1L) {
[08:27:44.788]                     if (is.function(sendCondition)) 
[08:27:44.788]                       return(sendCondition)
[08:27:44.788]                     ns <- getNamespace("parallel")
[08:27:44.788]                     if (exists("sendData", mode = "function", 
[08:27:44.788]                       envir = ns)) {
[08:27:44.788]                       parallel_sendData <- get("sendData", mode = "function", 
[08:27:44.788]                         envir = ns)
[08:27:44.788]                       envir <- sys.frame(frame)
[08:27:44.788]                       master <- NULL
[08:27:44.788]                       while (!identical(envir, .GlobalEnv) && 
[08:27:44.788]                         !identical(envir, emptyenv())) {
[08:27:44.788]                         if (exists("master", mode = "list", envir = envir, 
[08:27:44.788]                           inherits = FALSE)) {
[08:27:44.788]                           master <- get("master", mode = "list", 
[08:27:44.788]                             envir = envir, inherits = FALSE)
[08:27:44.788]                           if (inherits(master, c("SOCKnode", 
[08:27:44.788]                             "SOCK0node"))) {
[08:27:44.788]                             sendCondition <<- function(cond) {
[08:27:44.788]                               data <- list(type = "VALUE", value = cond, 
[08:27:44.788]                                 success = TRUE)
[08:27:44.788]                               parallel_sendData(master, data)
[08:27:44.788]                             }
[08:27:44.788]                             return(sendCondition)
[08:27:44.788]                           }
[08:27:44.788]                         }
[08:27:44.788]                         frame <- frame + 1L
[08:27:44.788]                         envir <- sys.frame(frame)
[08:27:44.788]                       }
[08:27:44.788]                     }
[08:27:44.788]                     sendCondition <<- function(cond) NULL
[08:27:44.788]                   }
[08:27:44.788]                 })
[08:27:44.788]                 withCallingHandlers({
[08:27:44.788]                   {
[08:27:44.788]                     2 * a
[08:27:44.788]                   }
[08:27:44.788]                 }, immediateCondition = function(cond) {
[08:27:44.788]                   sendCondition <- ...future.makeSendCondition()
[08:27:44.788]                   sendCondition(cond)
[08:27:44.788]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.788]                   {
[08:27:44.788]                     inherits <- base::inherits
[08:27:44.788]                     invokeRestart <- base::invokeRestart
[08:27:44.788]                     is.null <- base::is.null
[08:27:44.788]                     muffled <- FALSE
[08:27:44.788]                     if (inherits(cond, "message")) {
[08:27:44.788]                       muffled <- grepl(pattern, "muffleMessage")
[08:27:44.788]                       if (muffled) 
[08:27:44.788]                         invokeRestart("muffleMessage")
[08:27:44.788]                     }
[08:27:44.788]                     else if (inherits(cond, "warning")) {
[08:27:44.788]                       muffled <- grepl(pattern, "muffleWarning")
[08:27:44.788]                       if (muffled) 
[08:27:44.788]                         invokeRestart("muffleWarning")
[08:27:44.788]                     }
[08:27:44.788]                     else if (inherits(cond, "condition")) {
[08:27:44.788]                       if (!is.null(pattern)) {
[08:27:44.788]                         computeRestarts <- base::computeRestarts
[08:27:44.788]                         grepl <- base::grepl
[08:27:44.788]                         restarts <- computeRestarts(cond)
[08:27:44.788]                         for (restart in restarts) {
[08:27:44.788]                           name <- restart$name
[08:27:44.788]                           if (is.null(name)) 
[08:27:44.788]                             next
[08:27:44.788]                           if (!grepl(pattern, name)) 
[08:27:44.788]                             next
[08:27:44.788]                           invokeRestart(restart)
[08:27:44.788]                           muffled <- TRUE
[08:27:44.788]                           break
[08:27:44.788]                         }
[08:27:44.788]                       }
[08:27:44.788]                     }
[08:27:44.788]                     invisible(muffled)
[08:27:44.788]                   }
[08:27:44.788]                   muffleCondition(cond)
[08:27:44.788]                 })
[08:27:44.788]             }))
[08:27:44.788]             future::FutureResult(value = ...future.value$value, 
[08:27:44.788]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.788]                   ...future.rng), globalenv = if (FALSE) 
[08:27:44.788]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:44.788]                     ...future.globalenv.names))
[08:27:44.788]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:44.788]         }, condition = base::local({
[08:27:44.788]             c <- base::c
[08:27:44.788]             inherits <- base::inherits
[08:27:44.788]             invokeRestart <- base::invokeRestart
[08:27:44.788]             length <- base::length
[08:27:44.788]             list <- base::list
[08:27:44.788]             seq.int <- base::seq.int
[08:27:44.788]             signalCondition <- base::signalCondition
[08:27:44.788]             sys.calls <- base::sys.calls
[08:27:44.788]             `[[` <- base::`[[`
[08:27:44.788]             `+` <- base::`+`
[08:27:44.788]             `<<-` <- base::`<<-`
[08:27:44.788]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:44.788]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:44.788]                   3L)]
[08:27:44.788]             }
[08:27:44.788]             function(cond) {
[08:27:44.788]                 is_error <- inherits(cond, "error")
[08:27:44.788]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:44.788]                   NULL)
[08:27:44.788]                 if (is_error) {
[08:27:44.788]                   sessionInformation <- function() {
[08:27:44.788]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:44.788]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:44.788]                       search = base::search(), system = base::Sys.info())
[08:27:44.788]                   }
[08:27:44.788]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.788]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:44.788]                     cond$call), session = sessionInformation(), 
[08:27:44.788]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:44.788]                   signalCondition(cond)
[08:27:44.788]                 }
[08:27:44.788]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:44.788]                 "immediateCondition"))) {
[08:27:44.788]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:44.788]                   ...future.conditions[[length(...future.conditions) + 
[08:27:44.788]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:44.788]                   if (TRUE && !signal) {
[08:27:44.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.788]                     {
[08:27:44.788]                       inherits <- base::inherits
[08:27:44.788]                       invokeRestart <- base::invokeRestart
[08:27:44.788]                       is.null <- base::is.null
[08:27:44.788]                       muffled <- FALSE
[08:27:44.788]                       if (inherits(cond, "message")) {
[08:27:44.788]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.788]                         if (muffled) 
[08:27:44.788]                           invokeRestart("muffleMessage")
[08:27:44.788]                       }
[08:27:44.788]                       else if (inherits(cond, "warning")) {
[08:27:44.788]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.788]                         if (muffled) 
[08:27:44.788]                           invokeRestart("muffleWarning")
[08:27:44.788]                       }
[08:27:44.788]                       else if (inherits(cond, "condition")) {
[08:27:44.788]                         if (!is.null(pattern)) {
[08:27:44.788]                           computeRestarts <- base::computeRestarts
[08:27:44.788]                           grepl <- base::grepl
[08:27:44.788]                           restarts <- computeRestarts(cond)
[08:27:44.788]                           for (restart in restarts) {
[08:27:44.788]                             name <- restart$name
[08:27:44.788]                             if (is.null(name)) 
[08:27:44.788]                               next
[08:27:44.788]                             if (!grepl(pattern, name)) 
[08:27:44.788]                               next
[08:27:44.788]                             invokeRestart(restart)
[08:27:44.788]                             muffled <- TRUE
[08:27:44.788]                             break
[08:27:44.788]                           }
[08:27:44.788]                         }
[08:27:44.788]                       }
[08:27:44.788]                       invisible(muffled)
[08:27:44.788]                     }
[08:27:44.788]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.788]                   }
[08:27:44.788]                 }
[08:27:44.788]                 else {
[08:27:44.788]                   if (TRUE) {
[08:27:44.788]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:44.788]                     {
[08:27:44.788]                       inherits <- base::inherits
[08:27:44.788]                       invokeRestart <- base::invokeRestart
[08:27:44.788]                       is.null <- base::is.null
[08:27:44.788]                       muffled <- FALSE
[08:27:44.788]                       if (inherits(cond, "message")) {
[08:27:44.788]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:44.788]                         if (muffled) 
[08:27:44.788]                           invokeRestart("muffleMessage")
[08:27:44.788]                       }
[08:27:44.788]                       else if (inherits(cond, "warning")) {
[08:27:44.788]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:44.788]                         if (muffled) 
[08:27:44.788]                           invokeRestart("muffleWarning")
[08:27:44.788]                       }
[08:27:44.788]                       else if (inherits(cond, "condition")) {
[08:27:44.788]                         if (!is.null(pattern)) {
[08:27:44.788]                           computeRestarts <- base::computeRestarts
[08:27:44.788]                           grepl <- base::grepl
[08:27:44.788]                           restarts <- computeRestarts(cond)
[08:27:44.788]                           for (restart in restarts) {
[08:27:44.788]                             name <- restart$name
[08:27:44.788]                             if (is.null(name)) 
[08:27:44.788]                               next
[08:27:44.788]                             if (!grepl(pattern, name)) 
[08:27:44.788]                               next
[08:27:44.788]                             invokeRestart(restart)
[08:27:44.788]                             muffled <- TRUE
[08:27:44.788]                             break
[08:27:44.788]                           }
[08:27:44.788]                         }
[08:27:44.788]                       }
[08:27:44.788]                       invisible(muffled)
[08:27:44.788]                     }
[08:27:44.788]                     muffleCondition(cond, pattern = "^muffle")
[08:27:44.788]                   }
[08:27:44.788]                 }
[08:27:44.788]             }
[08:27:44.788]         }))
[08:27:44.788]     }, error = function(ex) {
[08:27:44.788]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:44.788]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:44.788]                 ...future.rng), started = ...future.startTime, 
[08:27:44.788]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:44.788]             version = "1.8"), class = "FutureResult")
[08:27:44.788]     }, finally = {
[08:27:44.788]         if (!identical(...future.workdir, getwd())) 
[08:27:44.788]             setwd(...future.workdir)
[08:27:44.788]         {
[08:27:44.788]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:44.788]                 ...future.oldOptions$nwarnings <- NULL
[08:27:44.788]             }
[08:27:44.788]             base::options(...future.oldOptions)
[08:27:44.788]             if (.Platform$OS.type == "windows") {
[08:27:44.788]                 old_names <- names(...future.oldEnvVars)
[08:27:44.788]                 envs <- base::Sys.getenv()
[08:27:44.788]                 names <- names(envs)
[08:27:44.788]                 common <- intersect(names, old_names)
[08:27:44.788]                 added <- setdiff(names, old_names)
[08:27:44.788]                 removed <- setdiff(old_names, names)
[08:27:44.788]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:44.788]                   envs[common]]
[08:27:44.788]                 NAMES <- toupper(changed)
[08:27:44.788]                 args <- list()
[08:27:44.788]                 for (kk in seq_along(NAMES)) {
[08:27:44.788]                   name <- changed[[kk]]
[08:27:44.788]                   NAME <- NAMES[[kk]]
[08:27:44.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.788]                     next
[08:27:44.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.788]                 }
[08:27:44.788]                 NAMES <- toupper(added)
[08:27:44.788]                 for (kk in seq_along(NAMES)) {
[08:27:44.788]                   name <- added[[kk]]
[08:27:44.788]                   NAME <- NAMES[[kk]]
[08:27:44.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.788]                     next
[08:27:44.788]                   args[[name]] <- ""
[08:27:44.788]                 }
[08:27:44.788]                 NAMES <- toupper(removed)
[08:27:44.788]                 for (kk in seq_along(NAMES)) {
[08:27:44.788]                   name <- removed[[kk]]
[08:27:44.788]                   NAME <- NAMES[[kk]]
[08:27:44.788]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:44.788]                     next
[08:27:44.788]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:44.788]                 }
[08:27:44.788]                 if (length(args) > 0) 
[08:27:44.788]                   base::do.call(base::Sys.setenv, args = args)
[08:27:44.788]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:44.788]             }
[08:27:44.788]             else {
[08:27:44.788]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:44.788]             }
[08:27:44.788]             {
[08:27:44.788]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:44.788]                   0L) {
[08:27:44.788]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:44.788]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:44.788]                   base::options(opts)
[08:27:44.788]                 }
[08:27:44.788]                 {
[08:27:44.788]                   {
[08:27:44.788]                     base::options(mc.cores = ...future.mc.cores.old)
[08:27:44.788]                     NULL
[08:27:44.788]                   }
[08:27:44.788]                   options(future.plan = NULL)
[08:27:44.788]                   if (is.na(NA_character_)) 
[08:27:44.788]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:44.788]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:44.788]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:44.788]                     .init = FALSE)
[08:27:44.788]                 }
[08:27:44.788]             }
[08:27:44.788]         }
[08:27:44.788]     })
[08:27:44.788]     if (TRUE) {
[08:27:44.788]         base::sink(type = "output", split = FALSE)
[08:27:44.788]         if (TRUE) {
[08:27:44.788]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:44.788]         }
[08:27:44.788]         else {
[08:27:44.788]             ...future.result["stdout"] <- base::list(NULL)
[08:27:44.788]         }
[08:27:44.788]         base::close(...future.stdout)
[08:27:44.788]         ...future.stdout <- NULL
[08:27:44.788]     }
[08:27:44.788]     ...future.result$conditions <- ...future.conditions
[08:27:44.788]     ...future.result$finished <- base::Sys.time()
[08:27:44.788]     ...future.result
[08:27:44.788] }
[08:27:44.791] Exporting 1 global objects (346 bytes) to cluster node #1 ...
[08:27:44.791] Exporting ‘a’ (39 bytes) to cluster node #1 ...
[08:27:44.792] Exporting ‘a’ (39 bytes) to cluster node #1 ... DONE
[08:27:44.792] Exporting 1 global objects (346 bytes) to cluster node #1 ... DONE
[08:27:44.792] MultisessionFuture started
[08:27:44.793] - Launch lazy future ... done
[08:27:44.793] run() for ‘MultisessionFuture’ ... done
[08:27:44.793] result() for ClusterFuture ...
[08:27:44.793] receiveMessageFromWorker() for ClusterFuture ...
[08:27:44.793] - Validating connection of MultisessionFuture
[08:27:44.834] - received message: FutureResult
[08:27:44.835] - Received FutureResult
[08:27:44.835] - Erased future from FutureRegistry
[08:27:44.835] result() for ClusterFuture ...
[08:27:44.835] - result already collected: FutureResult
[08:27:44.835] result() for ClusterFuture ... done
[08:27:44.835] receiveMessageFromWorker() for ClusterFuture ... done
[08:27:44.835] result() for ClusterFuture ... done
[08:27:44.835] result() for ClusterFuture ...
[08:27:44.835] - result already collected: FutureResult
[08:27:44.835] result() for ClusterFuture ... done
*** futureAssign() with ‘multisession’ futures ... DONE
Testing with 2 cores ... DONE
> 
> message("*** futureAssign() - lazy = TRUE / FALSE ... DONE")
*** futureAssign() - lazy = TRUE / FALSE ... DONE
> 
> message("*** futureAssign() ... DONE")
*** futureAssign() ... DONE
> 
> source("incl/end.R")
[08:27:44.836] plan(): Setting new future strategy stack:
[08:27:44.836] List of future strategies:
[08:27:44.836] 1. FutureStrategy:
[08:27:44.836]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:44.836]    - tweaked: FALSE
[08:27:44.836]    - call: future::plan(oplan)
[08:27:44.837] plan(): nbrOfWorkers() = 1
> 
