
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:55.949] plan(): Setting new future strategy stack:
[08:27:55.949] List of future strategies:
[08:27:55.949] 1. sequential:
[08:27:55.949]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:55.949]    - tweaked: FALSE
[08:27:55.949]    - call: future::plan("sequential")
[08:27:55.965] plan(): nbrOfWorkers() = 1
> 
> message("*** futureSessionInfo() ...")
*** futureSessionInfo() ...
> 
> message(" - test = FALSE")
 - test = FALSE
> futureSessionInfo(test = FALSE)
*** Package versions
future 1.34.0, parallelly 1.43.0, parallel 4.4.3, globals 0.16.3, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
> 
> message(" - test = TRUE")
 - test = TRUE
> futureSessionInfo(test = TRUE)
*** Package versions
future 1.34.0, parallelly 1.43.0, parallel 4.4.3, globals 0.16.3, listenv 0.9.1

*** Allocations
availableCores():
           system /proc/self/status             nproc          mc.cores 
                4                 4                 4                 2 
availableWorkers():
$mc.cores
[1] "localhost" "localhost"

$nproc
[1] "localhost" "localhost" "localhost" "localhost"

$system
[1] "localhost" "localhost" "localhost" "localhost"


*** Settings
- future.plan=<not set>
- future.fork.multithreading.enable=<not set>
- future.globals.maxSize=<not set>
- future.globals.onReference=<not set>
- future.resolve.recursive=<not set>
- future.rng.onMisuse=<not set>
- future.wait.timeout=<not set>
- future.wait.interval=<not set>
- future.wait.alpha=<not set>
- future.startup.script=<not set>

*** Backends
Number of workers: 1
List of future strategies:
1. sequential:
   - args: function (..., envir = parent.frame(), workers = "<NULL>")
   - tweaked: FALSE
   - call: future::plan("sequential")

*** Basic tests
Main R session details:
    pid     r sysname           release
1 79572 4.4.3   Linux 6.11.0-1015-azure
                                              version nodename machine   login
1 #15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
[08:27:55.999] getGlobalsAndPackages() ...
[08:27:55.999] Searching for globals...
[08:27:56.006] - globals found: [9] ‘{’, ‘Sys.sleep’, ‘delay’, ‘data.frame’, ‘ii’, ‘Sys.getpid’, ‘getRversion’, ‘as.list’, ‘Sys.info’
[08:27:56.006] Searching for globals ... DONE
[08:27:56.006] Resolving globals: FALSE
[08:27:56.007] The total size of the 2 globals is 74 bytes (74 bytes)
[08:27:56.008] The total size of the 2 globals exported for future expression (‘{; Sys.sleep(delay); data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(),; as.list(Sys.info())); }’) is 74 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘delay’ (39 bytes of class ‘numeric’) and ‘ii’ (35 bytes of class ‘numeric’)
[08:27:56.008] - globals: [2] ‘delay’, ‘ii’
[08:27:56.008] 
[08:27:56.008] getGlobalsAndPackages() ... DONE
[08:27:56.009] run() for ‘Future’ ...
[08:27:56.009] - state: ‘created’
[08:27:56.009] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:56.009] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:56.009] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:56.009]   - Field: ‘label’
[08:27:56.009]   - Field: ‘local’
[08:27:56.010]   - Field: ‘owner’
[08:27:56.010]   - Field: ‘envir’
[08:27:56.010]   - Field: ‘packages’
[08:27:56.010]   - Field: ‘gc’
[08:27:56.010]   - Field: ‘conditions’
[08:27:56.010]   - Field: ‘expr’
[08:27:56.010]   - Field: ‘uuid’
[08:27:56.010]   - Field: ‘seed’
[08:27:56.010]   - Field: ‘version’
[08:27:56.010]   - Field: ‘result’
[08:27:56.011]   - Field: ‘asynchronous’
[08:27:56.011]   - Field: ‘calls’
[08:27:56.011]   - Field: ‘globals’
[08:27:56.011]   - Field: ‘stdout’
[08:27:56.011]   - Field: ‘earlySignal’
[08:27:56.011]   - Field: ‘lazy’
[08:27:56.011]   - Field: ‘state’
[08:27:56.011] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:56.011] - Launch lazy future ...
[08:27:56.015] Packages needed by the future expression (n = 0): <none>
[08:27:56.015] Packages needed by future strategies (n = 0): <none>
[08:27:56.016] {
[08:27:56.016]     {
[08:27:56.016]         {
[08:27:56.016]             ...future.startTime <- base::Sys.time()
[08:27:56.016]             {
[08:27:56.016]                 {
[08:27:56.016]                   {
[08:27:56.016]                     base::local({
[08:27:56.016]                       has_future <- base::requireNamespace("future", 
[08:27:56.016]                         quietly = TRUE)
[08:27:56.016]                       if (has_future) {
[08:27:56.016]                         ns <- base::getNamespace("future")
[08:27:56.016]                         version <- ns[[".package"]][["version"]]
[08:27:56.016]                         if (is.null(version)) 
[08:27:56.016]                           version <- utils::packageVersion("future")
[08:27:56.016]                       }
[08:27:56.016]                       else {
[08:27:56.016]                         version <- NULL
[08:27:56.016]                       }
[08:27:56.016]                       if (!has_future || version < "1.8.0") {
[08:27:56.016]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:56.016]                           "", base::R.version$version.string), 
[08:27:56.016]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:56.016]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:56.016]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:56.016]                             "release", "version")], collapse = " "), 
[08:27:56.016]                           hostname = base::Sys.info()[["nodename"]])
[08:27:56.016]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:56.016]                           info)
[08:27:56.016]                         info <- base::paste(info, collapse = "; ")
[08:27:56.016]                         if (!has_future) {
[08:27:56.016]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:56.016]                             info)
[08:27:56.016]                         }
[08:27:56.016]                         else {
[08:27:56.016]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:56.016]                             info, version)
[08:27:56.016]                         }
[08:27:56.016]                         base::stop(msg)
[08:27:56.016]                       }
[08:27:56.016]                     })
[08:27:56.016]                   }
[08:27:56.016]                   ...future.strategy.old <- future::plan("list")
[08:27:56.016]                   options(future.plan = NULL)
[08:27:56.016]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:56.016]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:56.016]                 }
[08:27:56.016]                 ...future.workdir <- getwd()
[08:27:56.016]             }
[08:27:56.016]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:56.016]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:56.016]         }
[08:27:56.016]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:56.016]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:56.016]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:56.016]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:56.016]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:56.016]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:56.016]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:56.016]             base::names(...future.oldOptions))
[08:27:56.016]     }
[08:27:56.016]     if (FALSE) {
[08:27:56.016]     }
[08:27:56.016]     else {
[08:27:56.016]         if (TRUE) {
[08:27:56.016]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:56.016]                 open = "w")
[08:27:56.016]         }
[08:27:56.016]         else {
[08:27:56.016]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:56.016]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:56.016]         }
[08:27:56.016]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:56.016]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:56.016]             base::sink(type = "output", split = FALSE)
[08:27:56.016]             base::close(...future.stdout)
[08:27:56.016]         }, add = TRUE)
[08:27:56.016]     }
[08:27:56.016]     ...future.frame <- base::sys.nframe()
[08:27:56.016]     ...future.conditions <- base::list()
[08:27:56.016]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:56.016]     if (FALSE) {
[08:27:56.016]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:56.016]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:56.016]     }
[08:27:56.016]     ...future.result <- base::tryCatch({
[08:27:56.016]         base::withCallingHandlers({
[08:27:56.016]             ...future.value <- base::withVisible(base::local({
[08:27:56.016]                 Sys.sleep(delay)
[08:27:56.016]                 data.frame(worker = ii, pid = Sys.getpid(), r = getRversion(), 
[08:27:56.016]                   as.list(Sys.info()))
[08:27:56.016]             }))
[08:27:56.016]             future::FutureResult(value = ...future.value$value, 
[08:27:56.016]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:56.016]                   ...future.rng), globalenv = if (FALSE) 
[08:27:56.016]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:56.016]                     ...future.globalenv.names))
[08:27:56.016]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:56.016]         }, condition = base::local({
[08:27:56.016]             c <- base::c
[08:27:56.016]             inherits <- base::inherits
[08:27:56.016]             invokeRestart <- base::invokeRestart
[08:27:56.016]             length <- base::length
[08:27:56.016]             list <- base::list
[08:27:56.016]             seq.int <- base::seq.int
[08:27:56.016]             signalCondition <- base::signalCondition
[08:27:56.016]             sys.calls <- base::sys.calls
[08:27:56.016]             `[[` <- base::`[[`
[08:27:56.016]             `+` <- base::`+`
[08:27:56.016]             `<<-` <- base::`<<-`
[08:27:56.016]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:56.016]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:56.016]                   3L)]
[08:27:56.016]             }
[08:27:56.016]             function(cond) {
[08:27:56.016]                 is_error <- inherits(cond, "error")
[08:27:56.016]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:56.016]                   NULL)
[08:27:56.016]                 if (is_error) {
[08:27:56.016]                   sessionInformation <- function() {
[08:27:56.016]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:56.016]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:56.016]                       search = base::search(), system = base::Sys.info())
[08:27:56.016]                   }
[08:27:56.016]                   ...future.conditions[[length(...future.conditions) + 
[08:27:56.016]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:56.016]                     cond$call), session = sessionInformation(), 
[08:27:56.016]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:56.016]                   signalCondition(cond)
[08:27:56.016]                 }
[08:27:56.016]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:56.016]                 "immediateCondition"))) {
[08:27:56.016]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:56.016]                   ...future.conditions[[length(...future.conditions) + 
[08:27:56.016]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:56.016]                   if (TRUE && !signal) {
[08:27:56.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:56.016]                     {
[08:27:56.016]                       inherits <- base::inherits
[08:27:56.016]                       invokeRestart <- base::invokeRestart
[08:27:56.016]                       is.null <- base::is.null
[08:27:56.016]                       muffled <- FALSE
[08:27:56.016]                       if (inherits(cond, "message")) {
[08:27:56.016]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:56.016]                         if (muffled) 
[08:27:56.016]                           invokeRestart("muffleMessage")
[08:27:56.016]                       }
[08:27:56.016]                       else if (inherits(cond, "warning")) {
[08:27:56.016]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:56.016]                         if (muffled) 
[08:27:56.016]                           invokeRestart("muffleWarning")
[08:27:56.016]                       }
[08:27:56.016]                       else if (inherits(cond, "condition")) {
[08:27:56.016]                         if (!is.null(pattern)) {
[08:27:56.016]                           computeRestarts <- base::computeRestarts
[08:27:56.016]                           grepl <- base::grepl
[08:27:56.016]                           restarts <- computeRestarts(cond)
[08:27:56.016]                           for (restart in restarts) {
[08:27:56.016]                             name <- restart$name
[08:27:56.016]                             if (is.null(name)) 
[08:27:56.016]                               next
[08:27:56.016]                             if (!grepl(pattern, name)) 
[08:27:56.016]                               next
[08:27:56.016]                             invokeRestart(restart)
[08:27:56.016]                             muffled <- TRUE
[08:27:56.016]                             break
[08:27:56.016]                           }
[08:27:56.016]                         }
[08:27:56.016]                       }
[08:27:56.016]                       invisible(muffled)
[08:27:56.016]                     }
[08:27:56.016]                     muffleCondition(cond, pattern = "^muffle")
[08:27:56.016]                   }
[08:27:56.016]                 }
[08:27:56.016]                 else {
[08:27:56.016]                   if (TRUE) {
[08:27:56.016]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:56.016]                     {
[08:27:56.016]                       inherits <- base::inherits
[08:27:56.016]                       invokeRestart <- base::invokeRestart
[08:27:56.016]                       is.null <- base::is.null
[08:27:56.016]                       muffled <- FALSE
[08:27:56.016]                       if (inherits(cond, "message")) {
[08:27:56.016]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:56.016]                         if (muffled) 
[08:27:56.016]                           invokeRestart("muffleMessage")
[08:27:56.016]                       }
[08:27:56.016]                       else if (inherits(cond, "warning")) {
[08:27:56.016]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:56.016]                         if (muffled) 
[08:27:56.016]                           invokeRestart("muffleWarning")
[08:27:56.016]                       }
[08:27:56.016]                       else if (inherits(cond, "condition")) {
[08:27:56.016]                         if (!is.null(pattern)) {
[08:27:56.016]                           computeRestarts <- base::computeRestarts
[08:27:56.016]                           grepl <- base::grepl
[08:27:56.016]                           restarts <- computeRestarts(cond)
[08:27:56.016]                           for (restart in restarts) {
[08:27:56.016]                             name <- restart$name
[08:27:56.016]                             if (is.null(name)) 
[08:27:56.016]                               next
[08:27:56.016]                             if (!grepl(pattern, name)) 
[08:27:56.016]                               next
[08:27:56.016]                             invokeRestart(restart)
[08:27:56.016]                             muffled <- TRUE
[08:27:56.016]                             break
[08:27:56.016]                           }
[08:27:56.016]                         }
[08:27:56.016]                       }
[08:27:56.016]                       invisible(muffled)
[08:27:56.016]                     }
[08:27:56.016]                     muffleCondition(cond, pattern = "^muffle")
[08:27:56.016]                   }
[08:27:56.016]                 }
[08:27:56.016]             }
[08:27:56.016]         }))
[08:27:56.016]     }, error = function(ex) {
[08:27:56.016]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:56.016]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:56.016]                 ...future.rng), started = ...future.startTime, 
[08:27:56.016]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:56.016]             version = "1.8"), class = "FutureResult")
[08:27:56.016]     }, finally = {
[08:27:56.016]         if (!identical(...future.workdir, getwd())) 
[08:27:56.016]             setwd(...future.workdir)
[08:27:56.016]         {
[08:27:56.016]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:56.016]                 ...future.oldOptions$nwarnings <- NULL
[08:27:56.016]             }
[08:27:56.016]             base::options(...future.oldOptions)
[08:27:56.016]             if (.Platform$OS.type == "windows") {
[08:27:56.016]                 old_names <- names(...future.oldEnvVars)
[08:27:56.016]                 envs <- base::Sys.getenv()
[08:27:56.016]                 names <- names(envs)
[08:27:56.016]                 common <- intersect(names, old_names)
[08:27:56.016]                 added <- setdiff(names, old_names)
[08:27:56.016]                 removed <- setdiff(old_names, names)
[08:27:56.016]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:56.016]                   envs[common]]
[08:27:56.016]                 NAMES <- toupper(changed)
[08:27:56.016]                 args <- list()
[08:27:56.016]                 for (kk in seq_along(NAMES)) {
[08:27:56.016]                   name <- changed[[kk]]
[08:27:56.016]                   NAME <- NAMES[[kk]]
[08:27:56.016]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:56.016]                     next
[08:27:56.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:56.016]                 }
[08:27:56.016]                 NAMES <- toupper(added)
[08:27:56.016]                 for (kk in seq_along(NAMES)) {
[08:27:56.016]                   name <- added[[kk]]
[08:27:56.016]                   NAME <- NAMES[[kk]]
[08:27:56.016]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:56.016]                     next
[08:27:56.016]                   args[[name]] <- ""
[08:27:56.016]                 }
[08:27:56.016]                 NAMES <- toupper(removed)
[08:27:56.016]                 for (kk in seq_along(NAMES)) {
[08:27:56.016]                   name <- removed[[kk]]
[08:27:56.016]                   NAME <- NAMES[[kk]]
[08:27:56.016]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:56.016]                     next
[08:27:56.016]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:56.016]                 }
[08:27:56.016]                 if (length(args) > 0) 
[08:27:56.016]                   base::do.call(base::Sys.setenv, args = args)
[08:27:56.016]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:56.016]             }
[08:27:56.016]             else {
[08:27:56.016]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:56.016]             }
[08:27:56.016]             {
[08:27:56.016]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:56.016]                   0L) {
[08:27:56.016]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:56.016]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:56.016]                   base::options(opts)
[08:27:56.016]                 }
[08:27:56.016]                 {
[08:27:56.016]                   {
[08:27:56.016]                     NULL
[08:27:56.016]                     RNGkind("Mersenne-Twister")
[08:27:56.016]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:56.016]                       inherits = FALSE)
[08:27:56.016]                   }
[08:27:56.016]                   options(future.plan = NULL)
[08:27:56.016]                   if (is.na(NA_character_)) 
[08:27:56.016]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:56.016]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:56.016]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:56.016]                     .init = FALSE)
[08:27:56.016]                 }
[08:27:56.016]             }
[08:27:56.016]         }
[08:27:56.016]     })
[08:27:56.016]     if (TRUE) {
[08:27:56.016]         base::sink(type = "output", split = FALSE)
[08:27:56.016]         if (TRUE) {
[08:27:56.016]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:56.016]         }
[08:27:56.016]         else {
[08:27:56.016]             ...future.result["stdout"] <- base::list(NULL)
[08:27:56.016]         }
[08:27:56.016]         base::close(...future.stdout)
[08:27:56.016]         ...future.stdout <- NULL
[08:27:56.016]     }
[08:27:56.016]     ...future.result$conditions <- ...future.conditions
[08:27:56.016]     ...future.result$finished <- base::Sys.time()
[08:27:56.016]     ...future.result
[08:27:56.016] }
[08:27:56.018] assign_globals() ...
[08:27:56.018] List of 2
[08:27:56.018]  $ delay: num 1
[08:27:56.018]  $ ii   : int 1
[08:27:56.018]  - attr(*, "where")=List of 2
[08:27:56.018]   ..$ delay:<environment: R_EmptyEnv> 
[08:27:56.018]   ..$ ii   :<environment: R_EmptyEnv> 
[08:27:56.018]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:56.018]  - attr(*, "resolved")= logi FALSE
[08:27:56.018]  - attr(*, "total_size")= num 74
[08:27:56.018]  - attr(*, "already-done")= logi TRUE
[08:27:56.022] - copied ‘delay’ to environment
[08:27:56.023] - copied ‘ii’ to environment
[08:27:56.023] assign_globals() ... done
[08:27:56.023] plan(): Setting new future strategy stack:
[08:27:56.023] List of future strategies:
[08:27:56.023] 1. sequential:
[08:27:56.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:56.023]    - tweaked: FALSE
[08:27:56.023]    - call: NULL
[08:27:56.024] plan(): nbrOfWorkers() = 1
[08:27:57.027] plan(): Setting new future strategy stack:
[08:27:57.027] List of future strategies:
[08:27:57.027] 1. sequential:
[08:27:57.027]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:57.027]    - tweaked: FALSE
[08:27:57.027]    - call: future::plan("sequential")
[08:27:57.028] plan(): nbrOfWorkers() = 1
[08:27:57.028] SequentialFuture started (and completed)
[08:27:57.028] - Launch lazy future ... done
[08:27:57.029] run() for ‘SequentialFuture’ ... done
[08:27:57.029] resolve() on list ...
[08:27:57.029]  recursive: 0
[08:27:57.029]  length: 1
[08:27:57.029] 
[08:27:57.030] resolved() for ‘SequentialFuture’ ...
[08:27:57.030] - state: ‘finished’
[08:27:57.030] - run: TRUE
[08:27:57.030] - result: ‘FutureResult’
[08:27:57.030] resolved() for ‘SequentialFuture’ ... done
[08:27:57.030] Future #1
[08:27:57.030] signalConditionsASAP(SequentialFuture, pos=1) ...
[08:27:57.030] - nx: 1
[08:27:57.031] - relay: TRUE
[08:27:57.031] - stdout: TRUE
[08:27:57.031] - signal: TRUE
[08:27:57.031] - resignal: FALSE
[08:27:57.031] - force: TRUE
[08:27:57.031] - relayed: [n=1] FALSE
[08:27:57.031] - queued futures: [n=1] FALSE
[08:27:57.031]  - until=1
[08:27:57.031]  - relaying element #1
[08:27:57.031] - relayed: [n=1] TRUE
[08:27:57.031] - queued futures: [n=1] TRUE
[08:27:57.032] signalConditionsASAP(SequentialFuture, pos=1) ... done
[08:27:57.032]  length: 0 (resolved future 1)
[08:27:57.032] Relaying remaining futures
[08:27:57.032] signalConditionsASAP(NULL, pos=0) ...
[08:27:57.032] - nx: 1
[08:27:57.032] - relay: TRUE
[08:27:57.032] - stdout: TRUE
[08:27:57.032] - signal: TRUE
[08:27:57.032] - resignal: FALSE
[08:27:57.032] - force: TRUE
[08:27:57.032] - relayed: [n=1] TRUE
[08:27:57.032] - queued futures: [n=1] TRUE
 - flush all
[08:27:57.033] - relayed: [n=1] TRUE
[08:27:57.033] - queued futures: [n=1] TRUE
[08:27:57.033] signalConditionsASAP(NULL, pos=0) ... done
[08:27:57.033] resolve() on list ... DONE
Worker R session details:
  worker   pid     r sysname           release
1      1 79572 4.4.3   Linux 6.11.0-1015-azure
                                              version nodename machine   login
1 #15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025  host001  x86_64 user002
     user effective_user
1 user001        user001
Number of unique worker PIDs: 1 (as expected)
> 
> message("*** futureSessionInfo() ... DONE")
*** futureSessionInfo() ... DONE
> 
> source("incl/end.R")
[08:27:57.036] plan(): Setting new future strategy stack:
[08:27:57.036] List of future strategies:
[08:27:57.036] 1. FutureStrategy:
[08:27:57.036]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:57.036]    - tweaked: FALSE
[08:27:57.036]    - call: future::plan(oplan)
[08:27:57.049] plan(): nbrOfWorkers() = 1
> 
