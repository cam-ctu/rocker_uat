
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:29:48.948] plan(): Setting new future strategy stack:
[08:29:48.948] List of future strategies:
[08:29:48.948] 1. sequential:
[08:29:48.948]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:48.948]    - tweaked: FALSE
[08:29:48.948]    - call: future::plan("sequential")
[08:29:48.962] plan(): nbrOfWorkers() = 1
> 
> message("*** Standard output ...")
*** Standard output ...
> 
> truth_rows <- utils::capture.output({
+   print(1:50)
+   str(1:50)
+   cat(letters, sep = "-")
+   cat(1:6, collapse = "\n")
+   write.table(datasets::iris[1:10,], sep = "\t")
+ })
> truth <- paste0(paste(truth_rows, collapse = "\n"), "\n")
> print(truth)
[1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n int [1:50] 1 2 3 4 5 6 7 8 9 10 ...\na-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 \n\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\"\n\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\"\n\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\"\n\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\"\n\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\"\n\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\"\n\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\"\n\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\"\n\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\"\n\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\"\n\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\"\n"
> 
> for (cores in seq_len(min(2L, availCores))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   for (strategy in supportedStrategies(cores)) {
+     message(sprintf("%s ...", strategy))
+     plan(strategy)
+ 
+     for (stdout in c(TRUE, FALSE, NA)) {
+       message(sprintf("- stdout = %s", stdout))
+ 
+       f <- future({
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       }, stdout = stdout)
+       r <- result(f)
+       str(r)
+       stopifnot(value(f) == 42L)
+       if (is.na(stdout)) {
+         stopifnot(is.null(r$stdout) || r$stdout == "")
+       } else if (stdout) {
+         print(r)
+         stopifnot(identical(r$stdout, truth))
+       } else {
+         stopifnot(is.null(r$stdout))
+       }
+ 
+       v %<-% {
+         print(1:50)
+         str(1:50)
+         cat(letters, sep = "-")
+         cat(1:6, collapse = "\n")
+         write.table(datasets::iris[1:10,], sep = "\t")
+         42L
+       } %stdout% stdout
+       out <- utils::capture.output(y <- v)
+       stopifnot(y == 42L)
+       if (is.na(stdout)) {
+         ## Single-core multisession => sequential
+         if (cores > 1L || strategy != "multisession") {
+           stopifnot(out == "")
+         }
+       } else if (stdout) {
+         print(out)
+         stopifnot(identical(out, truth_rows))
+       } else {
+         stopifnot(out == "")
+       }
+ 
+       message("- stdout = structure(TRUE, drop = TRUE)")
+       f <- future(print(42), stdout = structure(TRUE, drop = TRUE))
+       r <- result(f)
+       stopifnot(inherits(r$stdout, "character"))
+       v <- value(f)
+       r <- result(f)
+       stopifnot(is.null(r$stdout))
+     } ## for (stdout ...)
+ 
+     message(sprintf("%s ... done", strategy))
+   } ## for (strategy ...)
+ 
+   message(sprintf("Testing with %d cores ... done", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
sequential ...
[08:29:49.014] plan(): Setting new future strategy stack:
[08:29:49.014] List of future strategies:
[08:29:49.014] 1. sequential:
[08:29:49.014]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.014]    - tweaked: FALSE
[08:29:49.014]    - call: plan(strategy)
[08:29:49.025] plan(): nbrOfWorkers() = 1
- stdout = TRUE
[08:29:49.026] getGlobalsAndPackages() ...
[08:29:49.026] Searching for globals...
[08:29:49.034] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.035] Searching for globals ... DONE
[08:29:49.035] Resolving globals: FALSE
[08:29:49.035] 
[08:29:49.035] - packages: [1] ‘utils’
[08:29:49.036] getGlobalsAndPackages() ... DONE
[08:29:49.036] run() for ‘Future’ ...
[08:29:49.036] - state: ‘created’
[08:29:49.036] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.037] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.037] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.037]   - Field: ‘label’
[08:29:49.037]   - Field: ‘local’
[08:29:49.037]   - Field: ‘owner’
[08:29:49.037]   - Field: ‘envir’
[08:29:49.037]   - Field: ‘packages’
[08:29:49.037]   - Field: ‘gc’
[08:29:49.037]   - Field: ‘conditions’
[08:29:49.038]   - Field: ‘expr’
[08:29:49.038]   - Field: ‘uuid’
[08:29:49.038]   - Field: ‘seed’
[08:29:49.038]   - Field: ‘version’
[08:29:49.038]   - Field: ‘result’
[08:29:49.038]   - Field: ‘asynchronous’
[08:29:49.038]   - Field: ‘calls’
[08:29:49.038]   - Field: ‘globals’
[08:29:49.038]   - Field: ‘stdout’
[08:29:49.038]   - Field: ‘earlySignal’
[08:29:49.038]   - Field: ‘lazy’
[08:29:49.038]   - Field: ‘state’
[08:29:49.039] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.039] - Launch lazy future ...
[08:29:49.039] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.039] Packages needed by future strategies (n = 0): <none>
[08:29:49.040] {
[08:29:49.040]     {
[08:29:49.040]         {
[08:29:49.040]             ...future.startTime <- base::Sys.time()
[08:29:49.040]             {
[08:29:49.040]                 {
[08:29:49.040]                   {
[08:29:49.040]                     {
[08:29:49.040]                       base::local({
[08:29:49.040]                         has_future <- base::requireNamespace("future", 
[08:29:49.040]                           quietly = TRUE)
[08:29:49.040]                         if (has_future) {
[08:29:49.040]                           ns <- base::getNamespace("future")
[08:29:49.040]                           version <- ns[[".package"]][["version"]]
[08:29:49.040]                           if (is.null(version)) 
[08:29:49.040]                             version <- utils::packageVersion("future")
[08:29:49.040]                         }
[08:29:49.040]                         else {
[08:29:49.040]                           version <- NULL
[08:29:49.040]                         }
[08:29:49.040]                         if (!has_future || version < "1.8.0") {
[08:29:49.040]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.040]                             "", base::R.version$version.string), 
[08:29:49.040]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.040]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.040]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.040]                               "release", "version")], collapse = " "), 
[08:29:49.040]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.040]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.040]                             info)
[08:29:49.040]                           info <- base::paste(info, collapse = "; ")
[08:29:49.040]                           if (!has_future) {
[08:29:49.040]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.040]                               info)
[08:29:49.040]                           }
[08:29:49.040]                           else {
[08:29:49.040]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.040]                               info, version)
[08:29:49.040]                           }
[08:29:49.040]                           base::stop(msg)
[08:29:49.040]                         }
[08:29:49.040]                       })
[08:29:49.040]                     }
[08:29:49.040]                     base::local({
[08:29:49.040]                       for (pkg in "utils") {
[08:29:49.040]                         base::loadNamespace(pkg)
[08:29:49.040]                         base::library(pkg, character.only = TRUE)
[08:29:49.040]                       }
[08:29:49.040]                     })
[08:29:49.040]                   }
[08:29:49.040]                   ...future.strategy.old <- future::plan("list")
[08:29:49.040]                   options(future.plan = NULL)
[08:29:49.040]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.040]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.040]                 }
[08:29:49.040]                 ...future.workdir <- getwd()
[08:29:49.040]             }
[08:29:49.040]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.040]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.040]         }
[08:29:49.040]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.040]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.040]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.040]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.040]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.040]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.040]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.040]             base::names(...future.oldOptions))
[08:29:49.040]     }
[08:29:49.040]     if (FALSE) {
[08:29:49.040]     }
[08:29:49.040]     else {
[08:29:49.040]         if (TRUE) {
[08:29:49.040]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.040]                 open = "w")
[08:29:49.040]         }
[08:29:49.040]         else {
[08:29:49.040]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.040]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.040]         }
[08:29:49.040]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.040]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.040]             base::sink(type = "output", split = FALSE)
[08:29:49.040]             base::close(...future.stdout)
[08:29:49.040]         }, add = TRUE)
[08:29:49.040]     }
[08:29:49.040]     ...future.frame <- base::sys.nframe()
[08:29:49.040]     ...future.conditions <- base::list()
[08:29:49.040]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.040]     if (FALSE) {
[08:29:49.040]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.040]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.040]     }
[08:29:49.040]     ...future.result <- base::tryCatch({
[08:29:49.040]         base::withCallingHandlers({
[08:29:49.040]             ...future.value <- base::withVisible(base::local({
[08:29:49.040]                 print(1:50)
[08:29:49.040]                 str(1:50)
[08:29:49.040]                 cat(letters, sep = "-")
[08:29:49.040]                 cat(1:6, collapse = "\n")
[08:29:49.040]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.040]                 42L
[08:29:49.040]             }))
[08:29:49.040]             future::FutureResult(value = ...future.value$value, 
[08:29:49.040]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.040]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.040]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.040]                     ...future.globalenv.names))
[08:29:49.040]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.040]         }, condition = base::local({
[08:29:49.040]             c <- base::c
[08:29:49.040]             inherits <- base::inherits
[08:29:49.040]             invokeRestart <- base::invokeRestart
[08:29:49.040]             length <- base::length
[08:29:49.040]             list <- base::list
[08:29:49.040]             seq.int <- base::seq.int
[08:29:49.040]             signalCondition <- base::signalCondition
[08:29:49.040]             sys.calls <- base::sys.calls
[08:29:49.040]             `[[` <- base::`[[`
[08:29:49.040]             `+` <- base::`+`
[08:29:49.040]             `<<-` <- base::`<<-`
[08:29:49.040]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.040]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.040]                   3L)]
[08:29:49.040]             }
[08:29:49.040]             function(cond) {
[08:29:49.040]                 is_error <- inherits(cond, "error")
[08:29:49.040]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.040]                   NULL)
[08:29:49.040]                 if (is_error) {
[08:29:49.040]                   sessionInformation <- function() {
[08:29:49.040]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.040]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.040]                       search = base::search(), system = base::Sys.info())
[08:29:49.040]                   }
[08:29:49.040]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.040]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.040]                     cond$call), session = sessionInformation(), 
[08:29:49.040]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.040]                   signalCondition(cond)
[08:29:49.040]                 }
[08:29:49.040]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.040]                 "immediateCondition"))) {
[08:29:49.040]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.040]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.040]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.040]                   if (TRUE && !signal) {
[08:29:49.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.040]                     {
[08:29:49.040]                       inherits <- base::inherits
[08:29:49.040]                       invokeRestart <- base::invokeRestart
[08:29:49.040]                       is.null <- base::is.null
[08:29:49.040]                       muffled <- FALSE
[08:29:49.040]                       if (inherits(cond, "message")) {
[08:29:49.040]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.040]                         if (muffled) 
[08:29:49.040]                           invokeRestart("muffleMessage")
[08:29:49.040]                       }
[08:29:49.040]                       else if (inherits(cond, "warning")) {
[08:29:49.040]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.040]                         if (muffled) 
[08:29:49.040]                           invokeRestart("muffleWarning")
[08:29:49.040]                       }
[08:29:49.040]                       else if (inherits(cond, "condition")) {
[08:29:49.040]                         if (!is.null(pattern)) {
[08:29:49.040]                           computeRestarts <- base::computeRestarts
[08:29:49.040]                           grepl <- base::grepl
[08:29:49.040]                           restarts <- computeRestarts(cond)
[08:29:49.040]                           for (restart in restarts) {
[08:29:49.040]                             name <- restart$name
[08:29:49.040]                             if (is.null(name)) 
[08:29:49.040]                               next
[08:29:49.040]                             if (!grepl(pattern, name)) 
[08:29:49.040]                               next
[08:29:49.040]                             invokeRestart(restart)
[08:29:49.040]                             muffled <- TRUE
[08:29:49.040]                             break
[08:29:49.040]                           }
[08:29:49.040]                         }
[08:29:49.040]                       }
[08:29:49.040]                       invisible(muffled)
[08:29:49.040]                     }
[08:29:49.040]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.040]                   }
[08:29:49.040]                 }
[08:29:49.040]                 else {
[08:29:49.040]                   if (TRUE) {
[08:29:49.040]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.040]                     {
[08:29:49.040]                       inherits <- base::inherits
[08:29:49.040]                       invokeRestart <- base::invokeRestart
[08:29:49.040]                       is.null <- base::is.null
[08:29:49.040]                       muffled <- FALSE
[08:29:49.040]                       if (inherits(cond, "message")) {
[08:29:49.040]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.040]                         if (muffled) 
[08:29:49.040]                           invokeRestart("muffleMessage")
[08:29:49.040]                       }
[08:29:49.040]                       else if (inherits(cond, "warning")) {
[08:29:49.040]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.040]                         if (muffled) 
[08:29:49.040]                           invokeRestart("muffleWarning")
[08:29:49.040]                       }
[08:29:49.040]                       else if (inherits(cond, "condition")) {
[08:29:49.040]                         if (!is.null(pattern)) {
[08:29:49.040]                           computeRestarts <- base::computeRestarts
[08:29:49.040]                           grepl <- base::grepl
[08:29:49.040]                           restarts <- computeRestarts(cond)
[08:29:49.040]                           for (restart in restarts) {
[08:29:49.040]                             name <- restart$name
[08:29:49.040]                             if (is.null(name)) 
[08:29:49.040]                               next
[08:29:49.040]                             if (!grepl(pattern, name)) 
[08:29:49.040]                               next
[08:29:49.040]                             invokeRestart(restart)
[08:29:49.040]                             muffled <- TRUE
[08:29:49.040]                             break
[08:29:49.040]                           }
[08:29:49.040]                         }
[08:29:49.040]                       }
[08:29:49.040]                       invisible(muffled)
[08:29:49.040]                     }
[08:29:49.040]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.040]                   }
[08:29:49.040]                 }
[08:29:49.040]             }
[08:29:49.040]         }))
[08:29:49.040]     }, error = function(ex) {
[08:29:49.040]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.040]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.040]                 ...future.rng), started = ...future.startTime, 
[08:29:49.040]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.040]             version = "1.8"), class = "FutureResult")
[08:29:49.040]     }, finally = {
[08:29:49.040]         if (!identical(...future.workdir, getwd())) 
[08:29:49.040]             setwd(...future.workdir)
[08:29:49.040]         {
[08:29:49.040]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.040]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.040]             }
[08:29:49.040]             base::options(...future.oldOptions)
[08:29:49.040]             if (.Platform$OS.type == "windows") {
[08:29:49.040]                 old_names <- names(...future.oldEnvVars)
[08:29:49.040]                 envs <- base::Sys.getenv()
[08:29:49.040]                 names <- names(envs)
[08:29:49.040]                 common <- intersect(names, old_names)
[08:29:49.040]                 added <- setdiff(names, old_names)
[08:29:49.040]                 removed <- setdiff(old_names, names)
[08:29:49.040]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.040]                   envs[common]]
[08:29:49.040]                 NAMES <- toupper(changed)
[08:29:49.040]                 args <- list()
[08:29:49.040]                 for (kk in seq_along(NAMES)) {
[08:29:49.040]                   name <- changed[[kk]]
[08:29:49.040]                   NAME <- NAMES[[kk]]
[08:29:49.040]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.040]                     next
[08:29:49.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.040]                 }
[08:29:49.040]                 NAMES <- toupper(added)
[08:29:49.040]                 for (kk in seq_along(NAMES)) {
[08:29:49.040]                   name <- added[[kk]]
[08:29:49.040]                   NAME <- NAMES[[kk]]
[08:29:49.040]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.040]                     next
[08:29:49.040]                   args[[name]] <- ""
[08:29:49.040]                 }
[08:29:49.040]                 NAMES <- toupper(removed)
[08:29:49.040]                 for (kk in seq_along(NAMES)) {
[08:29:49.040]                   name <- removed[[kk]]
[08:29:49.040]                   NAME <- NAMES[[kk]]
[08:29:49.040]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.040]                     next
[08:29:49.040]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.040]                 }
[08:29:49.040]                 if (length(args) > 0) 
[08:29:49.040]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.040]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.040]             }
[08:29:49.040]             else {
[08:29:49.040]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.040]             }
[08:29:49.040]             {
[08:29:49.040]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.040]                   0L) {
[08:29:49.040]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.040]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.040]                   base::options(opts)
[08:29:49.040]                 }
[08:29:49.040]                 {
[08:29:49.040]                   {
[08:29:49.040]                     NULL
[08:29:49.040]                     RNGkind("Mersenne-Twister")
[08:29:49.040]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.040]                       inherits = FALSE)
[08:29:49.040]                   }
[08:29:49.040]                   options(future.plan = NULL)
[08:29:49.040]                   if (is.na(NA_character_)) 
[08:29:49.040]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.040]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.040]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.040]                     .init = FALSE)
[08:29:49.040]                 }
[08:29:49.040]             }
[08:29:49.040]         }
[08:29:49.040]     })
[08:29:49.040]     if (TRUE) {
[08:29:49.040]         base::sink(type = "output", split = FALSE)
[08:29:49.040]         if (TRUE) {
[08:29:49.040]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.040]         }
[08:29:49.040]         else {
[08:29:49.040]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.040]         }
[08:29:49.040]         base::close(...future.stdout)
[08:29:49.040]         ...future.stdout <- NULL
[08:29:49.040]     }
[08:29:49.040]     ...future.result$conditions <- ...future.conditions
[08:29:49.040]     ...future.result$finished <- base::Sys.time()
[08:29:49.040]     ...future.result
[08:29:49.040] }
[08:29:49.042] plan(): Setting new future strategy stack:
[08:29:49.042] List of future strategies:
[08:29:49.042] 1. sequential:
[08:29:49.042]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.042]    - tweaked: FALSE
[08:29:49.042]    - call: NULL
[08:29:49.043] plan(): nbrOfWorkers() = 1
[08:29:49.044] plan(): Setting new future strategy stack:
[08:29:49.045] List of future strategies:
[08:29:49.045] 1. sequential:
[08:29:49.045]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.045]    - tweaked: FALSE
[08:29:49.045]    - call: plan(strategy)
[08:29:49.045] plan(): nbrOfWorkers() = 1
[08:29:49.045] SequentialFuture started (and completed)
[08:29:49.046] - Launch lazy future ... done
[08:29:49.046] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "f51d19c2-2e72-ddae-aef8-c0bafe8ed1a3"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85025
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:48"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.003260374 secs (started 2025-06-17 08:29:49.04242)
version: 1.8
[08:29:49.055] getGlobalsAndPackages() ...
[08:29:49.055] Searching for globals...
[08:29:49.059] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.059] Searching for globals ... DONE
[08:29:49.060] Resolving globals: FALSE
[08:29:49.060] 
[08:29:49.060] - packages: [1] ‘utils’
[08:29:49.060] getGlobalsAndPackages() ... DONE
[08:29:49.060] run() for ‘Future’ ...
[08:29:49.061] - state: ‘created’
[08:29:49.061] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.061] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.061] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.061]   - Field: ‘label’
[08:29:49.061]   - Field: ‘local’
[08:29:49.061]   - Field: ‘owner’
[08:29:49.061]   - Field: ‘envir’
[08:29:49.061]   - Field: ‘packages’
[08:29:49.062]   - Field: ‘gc’
[08:29:49.062]   - Field: ‘conditions’
[08:29:49.062]   - Field: ‘expr’
[08:29:49.062]   - Field: ‘uuid’
[08:29:49.062]   - Field: ‘seed’
[08:29:49.062]   - Field: ‘version’
[08:29:49.062]   - Field: ‘result’
[08:29:49.062]   - Field: ‘asynchronous’
[08:29:49.062]   - Field: ‘calls’
[08:29:49.062]   - Field: ‘globals’
[08:29:49.062]   - Field: ‘stdout’
[08:29:49.062]   - Field: ‘earlySignal’
[08:29:49.063]   - Field: ‘lazy’
[08:29:49.063]   - Field: ‘state’
[08:29:49.063] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.063] - Launch lazy future ...
[08:29:49.063] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.063] Packages needed by future strategies (n = 0): <none>
[08:29:49.064] {
[08:29:49.064]     {
[08:29:49.064]         {
[08:29:49.064]             ...future.startTime <- base::Sys.time()
[08:29:49.064]             {
[08:29:49.064]                 {
[08:29:49.064]                   {
[08:29:49.064]                     {
[08:29:49.064]                       base::local({
[08:29:49.064]                         has_future <- base::requireNamespace("future", 
[08:29:49.064]                           quietly = TRUE)
[08:29:49.064]                         if (has_future) {
[08:29:49.064]                           ns <- base::getNamespace("future")
[08:29:49.064]                           version <- ns[[".package"]][["version"]]
[08:29:49.064]                           if (is.null(version)) 
[08:29:49.064]                             version <- utils::packageVersion("future")
[08:29:49.064]                         }
[08:29:49.064]                         else {
[08:29:49.064]                           version <- NULL
[08:29:49.064]                         }
[08:29:49.064]                         if (!has_future || version < "1.8.0") {
[08:29:49.064]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.064]                             "", base::R.version$version.string), 
[08:29:49.064]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.064]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.064]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.064]                               "release", "version")], collapse = " "), 
[08:29:49.064]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.064]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.064]                             info)
[08:29:49.064]                           info <- base::paste(info, collapse = "; ")
[08:29:49.064]                           if (!has_future) {
[08:29:49.064]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.064]                               info)
[08:29:49.064]                           }
[08:29:49.064]                           else {
[08:29:49.064]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.064]                               info, version)
[08:29:49.064]                           }
[08:29:49.064]                           base::stop(msg)
[08:29:49.064]                         }
[08:29:49.064]                       })
[08:29:49.064]                     }
[08:29:49.064]                     base::local({
[08:29:49.064]                       for (pkg in "utils") {
[08:29:49.064]                         base::loadNamespace(pkg)
[08:29:49.064]                         base::library(pkg, character.only = TRUE)
[08:29:49.064]                       }
[08:29:49.064]                     })
[08:29:49.064]                   }
[08:29:49.064]                   ...future.strategy.old <- future::plan("list")
[08:29:49.064]                   options(future.plan = NULL)
[08:29:49.064]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.064]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.064]                 }
[08:29:49.064]                 ...future.workdir <- getwd()
[08:29:49.064]             }
[08:29:49.064]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.064]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.064]         }
[08:29:49.064]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.064]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.064]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.064]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.064]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.064]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.064]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.064]             base::names(...future.oldOptions))
[08:29:49.064]     }
[08:29:49.064]     if (FALSE) {
[08:29:49.064]     }
[08:29:49.064]     else {
[08:29:49.064]         if (TRUE) {
[08:29:49.064]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.064]                 open = "w")
[08:29:49.064]         }
[08:29:49.064]         else {
[08:29:49.064]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.064]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.064]         }
[08:29:49.064]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.064]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.064]             base::sink(type = "output", split = FALSE)
[08:29:49.064]             base::close(...future.stdout)
[08:29:49.064]         }, add = TRUE)
[08:29:49.064]     }
[08:29:49.064]     ...future.frame <- base::sys.nframe()
[08:29:49.064]     ...future.conditions <- base::list()
[08:29:49.064]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.064]     if (FALSE) {
[08:29:49.064]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.064]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.064]     }
[08:29:49.064]     ...future.result <- base::tryCatch({
[08:29:49.064]         base::withCallingHandlers({
[08:29:49.064]             ...future.value <- base::withVisible(base::local({
[08:29:49.064]                 print(1:50)
[08:29:49.064]                 str(1:50)
[08:29:49.064]                 cat(letters, sep = "-")
[08:29:49.064]                 cat(1:6, collapse = "\n")
[08:29:49.064]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.064]                 42L
[08:29:49.064]             }))
[08:29:49.064]             future::FutureResult(value = ...future.value$value, 
[08:29:49.064]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.064]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.064]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.064]                     ...future.globalenv.names))
[08:29:49.064]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.064]         }, condition = base::local({
[08:29:49.064]             c <- base::c
[08:29:49.064]             inherits <- base::inherits
[08:29:49.064]             invokeRestart <- base::invokeRestart
[08:29:49.064]             length <- base::length
[08:29:49.064]             list <- base::list
[08:29:49.064]             seq.int <- base::seq.int
[08:29:49.064]             signalCondition <- base::signalCondition
[08:29:49.064]             sys.calls <- base::sys.calls
[08:29:49.064]             `[[` <- base::`[[`
[08:29:49.064]             `+` <- base::`+`
[08:29:49.064]             `<<-` <- base::`<<-`
[08:29:49.064]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.064]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.064]                   3L)]
[08:29:49.064]             }
[08:29:49.064]             function(cond) {
[08:29:49.064]                 is_error <- inherits(cond, "error")
[08:29:49.064]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.064]                   NULL)
[08:29:49.064]                 if (is_error) {
[08:29:49.064]                   sessionInformation <- function() {
[08:29:49.064]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.064]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.064]                       search = base::search(), system = base::Sys.info())
[08:29:49.064]                   }
[08:29:49.064]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.064]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.064]                     cond$call), session = sessionInformation(), 
[08:29:49.064]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.064]                   signalCondition(cond)
[08:29:49.064]                 }
[08:29:49.064]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.064]                 "immediateCondition"))) {
[08:29:49.064]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.064]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.064]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.064]                   if (TRUE && !signal) {
[08:29:49.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.064]                     {
[08:29:49.064]                       inherits <- base::inherits
[08:29:49.064]                       invokeRestart <- base::invokeRestart
[08:29:49.064]                       is.null <- base::is.null
[08:29:49.064]                       muffled <- FALSE
[08:29:49.064]                       if (inherits(cond, "message")) {
[08:29:49.064]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.064]                         if (muffled) 
[08:29:49.064]                           invokeRestart("muffleMessage")
[08:29:49.064]                       }
[08:29:49.064]                       else if (inherits(cond, "warning")) {
[08:29:49.064]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.064]                         if (muffled) 
[08:29:49.064]                           invokeRestart("muffleWarning")
[08:29:49.064]                       }
[08:29:49.064]                       else if (inherits(cond, "condition")) {
[08:29:49.064]                         if (!is.null(pattern)) {
[08:29:49.064]                           computeRestarts <- base::computeRestarts
[08:29:49.064]                           grepl <- base::grepl
[08:29:49.064]                           restarts <- computeRestarts(cond)
[08:29:49.064]                           for (restart in restarts) {
[08:29:49.064]                             name <- restart$name
[08:29:49.064]                             if (is.null(name)) 
[08:29:49.064]                               next
[08:29:49.064]                             if (!grepl(pattern, name)) 
[08:29:49.064]                               next
[08:29:49.064]                             invokeRestart(restart)
[08:29:49.064]                             muffled <- TRUE
[08:29:49.064]                             break
[08:29:49.064]                           }
[08:29:49.064]                         }
[08:29:49.064]                       }
[08:29:49.064]                       invisible(muffled)
[08:29:49.064]                     }
[08:29:49.064]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.064]                   }
[08:29:49.064]                 }
[08:29:49.064]                 else {
[08:29:49.064]                   if (TRUE) {
[08:29:49.064]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.064]                     {
[08:29:49.064]                       inherits <- base::inherits
[08:29:49.064]                       invokeRestart <- base::invokeRestart
[08:29:49.064]                       is.null <- base::is.null
[08:29:49.064]                       muffled <- FALSE
[08:29:49.064]                       if (inherits(cond, "message")) {
[08:29:49.064]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.064]                         if (muffled) 
[08:29:49.064]                           invokeRestart("muffleMessage")
[08:29:49.064]                       }
[08:29:49.064]                       else if (inherits(cond, "warning")) {
[08:29:49.064]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.064]                         if (muffled) 
[08:29:49.064]                           invokeRestart("muffleWarning")
[08:29:49.064]                       }
[08:29:49.064]                       else if (inherits(cond, "condition")) {
[08:29:49.064]                         if (!is.null(pattern)) {
[08:29:49.064]                           computeRestarts <- base::computeRestarts
[08:29:49.064]                           grepl <- base::grepl
[08:29:49.064]                           restarts <- computeRestarts(cond)
[08:29:49.064]                           for (restart in restarts) {
[08:29:49.064]                             name <- restart$name
[08:29:49.064]                             if (is.null(name)) 
[08:29:49.064]                               next
[08:29:49.064]                             if (!grepl(pattern, name)) 
[08:29:49.064]                               next
[08:29:49.064]                             invokeRestart(restart)
[08:29:49.064]                             muffled <- TRUE
[08:29:49.064]                             break
[08:29:49.064]                           }
[08:29:49.064]                         }
[08:29:49.064]                       }
[08:29:49.064]                       invisible(muffled)
[08:29:49.064]                     }
[08:29:49.064]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.064]                   }
[08:29:49.064]                 }
[08:29:49.064]             }
[08:29:49.064]         }))
[08:29:49.064]     }, error = function(ex) {
[08:29:49.064]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.064]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.064]                 ...future.rng), started = ...future.startTime, 
[08:29:49.064]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.064]             version = "1.8"), class = "FutureResult")
[08:29:49.064]     }, finally = {
[08:29:49.064]         if (!identical(...future.workdir, getwd())) 
[08:29:49.064]             setwd(...future.workdir)
[08:29:49.064]         {
[08:29:49.064]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.064]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.064]             }
[08:29:49.064]             base::options(...future.oldOptions)
[08:29:49.064]             if (.Platform$OS.type == "windows") {
[08:29:49.064]                 old_names <- names(...future.oldEnvVars)
[08:29:49.064]                 envs <- base::Sys.getenv()
[08:29:49.064]                 names <- names(envs)
[08:29:49.064]                 common <- intersect(names, old_names)
[08:29:49.064]                 added <- setdiff(names, old_names)
[08:29:49.064]                 removed <- setdiff(old_names, names)
[08:29:49.064]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.064]                   envs[common]]
[08:29:49.064]                 NAMES <- toupper(changed)
[08:29:49.064]                 args <- list()
[08:29:49.064]                 for (kk in seq_along(NAMES)) {
[08:29:49.064]                   name <- changed[[kk]]
[08:29:49.064]                   NAME <- NAMES[[kk]]
[08:29:49.064]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.064]                     next
[08:29:49.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.064]                 }
[08:29:49.064]                 NAMES <- toupper(added)
[08:29:49.064]                 for (kk in seq_along(NAMES)) {
[08:29:49.064]                   name <- added[[kk]]
[08:29:49.064]                   NAME <- NAMES[[kk]]
[08:29:49.064]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.064]                     next
[08:29:49.064]                   args[[name]] <- ""
[08:29:49.064]                 }
[08:29:49.064]                 NAMES <- toupper(removed)
[08:29:49.064]                 for (kk in seq_along(NAMES)) {
[08:29:49.064]                   name <- removed[[kk]]
[08:29:49.064]                   NAME <- NAMES[[kk]]
[08:29:49.064]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.064]                     next
[08:29:49.064]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.064]                 }
[08:29:49.064]                 if (length(args) > 0) 
[08:29:49.064]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.064]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.064]             }
[08:29:49.064]             else {
[08:29:49.064]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.064]             }
[08:29:49.064]             {
[08:29:49.064]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.064]                   0L) {
[08:29:49.064]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.064]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.064]                   base::options(opts)
[08:29:49.064]                 }
[08:29:49.064]                 {
[08:29:49.064]                   {
[08:29:49.064]                     NULL
[08:29:49.064]                     RNGkind("Mersenne-Twister")
[08:29:49.064]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.064]                       inherits = FALSE)
[08:29:49.064]                   }
[08:29:49.064]                   options(future.plan = NULL)
[08:29:49.064]                   if (is.na(NA_character_)) 
[08:29:49.064]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.064]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.064]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.064]                     .init = FALSE)
[08:29:49.064]                 }
[08:29:49.064]             }
[08:29:49.064]         }
[08:29:49.064]     })
[08:29:49.064]     if (TRUE) {
[08:29:49.064]         base::sink(type = "output", split = FALSE)
[08:29:49.064]         if (TRUE) {
[08:29:49.064]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.064]         }
[08:29:49.064]         else {
[08:29:49.064]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.064]         }
[08:29:49.064]         base::close(...future.stdout)
[08:29:49.064]         ...future.stdout <- NULL
[08:29:49.064]     }
[08:29:49.064]     ...future.result$conditions <- ...future.conditions
[08:29:49.064]     ...future.result$finished <- base::Sys.time()
[08:29:49.064]     ...future.result
[08:29:49.064] }
[08:29:49.065] plan(): Setting new future strategy stack:
[08:29:49.066] List of future strategies:
[08:29:49.066] 1. sequential:
[08:29:49.066]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.066]    - tweaked: FALSE
[08:29:49.066]    - call: NULL
[08:29:49.066] plan(): nbrOfWorkers() = 1
[08:29:49.067] plan(): Setting new future strategy stack:
[08:29:49.067] List of future strategies:
[08:29:49.067] 1. sequential:
[08:29:49.067]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.067]    - tweaked: FALSE
[08:29:49.067]    - call: plan(strategy)
[08:29:49.068] plan(): nbrOfWorkers() = 1
[08:29:49.068] SequentialFuture started (and completed)
[08:29:49.068] - Launch lazy future ... done
[08:29:49.068] run() for ‘SequentialFuture’ ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.069] getGlobalsAndPackages() ...
[08:29:49.069] Searching for globals...
[08:29:49.069] - globals found: [1] ‘print’
[08:29:49.069] Searching for globals ... DONE
[08:29:49.069] Resolving globals: FALSE
[08:29:49.070] 
[08:29:49.070] 
[08:29:49.070] getGlobalsAndPackages() ... DONE
[08:29:49.070] run() for ‘Future’ ...
[08:29:49.070] - state: ‘created’
[08:29:49.070] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.070] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.070] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.071]   - Field: ‘label’
[08:29:49.071]   - Field: ‘local’
[08:29:49.071]   - Field: ‘owner’
[08:29:49.071]   - Field: ‘envir’
[08:29:49.071]   - Field: ‘packages’
[08:29:49.071]   - Field: ‘gc’
[08:29:49.071]   - Field: ‘conditions’
[08:29:49.071]   - Field: ‘expr’
[08:29:49.071]   - Field: ‘uuid’
[08:29:49.071]   - Field: ‘seed’
[08:29:49.071]   - Field: ‘version’
[08:29:49.071]   - Field: ‘result’
[08:29:49.072]   - Field: ‘asynchronous’
[08:29:49.072]   - Field: ‘calls’
[08:29:49.072]   - Field: ‘globals’
[08:29:49.072]   - Field: ‘stdout’
[08:29:49.072]   - Field: ‘earlySignal’
[08:29:49.072]   - Field: ‘lazy’
[08:29:49.072]   - Field: ‘state’
[08:29:49.072] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.072] - Launch lazy future ...
[08:29:49.072] Packages needed by the future expression (n = 0): <none>
[08:29:49.072] Packages needed by future strategies (n = 0): <none>
[08:29:49.073] {
[08:29:49.073]     {
[08:29:49.073]         {
[08:29:49.073]             ...future.startTime <- base::Sys.time()
[08:29:49.073]             {
[08:29:49.073]                 {
[08:29:49.073]                   {
[08:29:49.073]                     base::local({
[08:29:49.073]                       has_future <- base::requireNamespace("future", 
[08:29:49.073]                         quietly = TRUE)
[08:29:49.073]                       if (has_future) {
[08:29:49.073]                         ns <- base::getNamespace("future")
[08:29:49.073]                         version <- ns[[".package"]][["version"]]
[08:29:49.073]                         if (is.null(version)) 
[08:29:49.073]                           version <- utils::packageVersion("future")
[08:29:49.073]                       }
[08:29:49.073]                       else {
[08:29:49.073]                         version <- NULL
[08:29:49.073]                       }
[08:29:49.073]                       if (!has_future || version < "1.8.0") {
[08:29:49.073]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.073]                           "", base::R.version$version.string), 
[08:29:49.073]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:49.073]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.073]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.073]                             "release", "version")], collapse = " "), 
[08:29:49.073]                           hostname = base::Sys.info()[["nodename"]])
[08:29:49.073]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.073]                           info)
[08:29:49.073]                         info <- base::paste(info, collapse = "; ")
[08:29:49.073]                         if (!has_future) {
[08:29:49.073]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.073]                             info)
[08:29:49.073]                         }
[08:29:49.073]                         else {
[08:29:49.073]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.073]                             info, version)
[08:29:49.073]                         }
[08:29:49.073]                         base::stop(msg)
[08:29:49.073]                       }
[08:29:49.073]                     })
[08:29:49.073]                   }
[08:29:49.073]                   ...future.strategy.old <- future::plan("list")
[08:29:49.073]                   options(future.plan = NULL)
[08:29:49.073]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.073]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.073]                 }
[08:29:49.073]                 ...future.workdir <- getwd()
[08:29:49.073]             }
[08:29:49.073]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.073]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.073]         }
[08:29:49.073]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.073]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.073]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.073]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.073]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.073]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.073]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.073]             base::names(...future.oldOptions))
[08:29:49.073]     }
[08:29:49.073]     if (FALSE) {
[08:29:49.073]     }
[08:29:49.073]     else {
[08:29:49.073]         if (TRUE) {
[08:29:49.073]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.073]                 open = "w")
[08:29:49.073]         }
[08:29:49.073]         else {
[08:29:49.073]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.073]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.073]         }
[08:29:49.073]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.073]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.073]             base::sink(type = "output", split = FALSE)
[08:29:49.073]             base::close(...future.stdout)
[08:29:49.073]         }, add = TRUE)
[08:29:49.073]     }
[08:29:49.073]     ...future.frame <- base::sys.nframe()
[08:29:49.073]     ...future.conditions <- base::list()
[08:29:49.073]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.073]     if (FALSE) {
[08:29:49.073]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.073]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.073]     }
[08:29:49.073]     ...future.result <- base::tryCatch({
[08:29:49.073]         base::withCallingHandlers({
[08:29:49.073]             ...future.value <- base::withVisible(base::local(print(42)))
[08:29:49.073]             future::FutureResult(value = ...future.value$value, 
[08:29:49.073]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.073]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.073]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.073]                     ...future.globalenv.names))
[08:29:49.073]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.073]         }, condition = base::local({
[08:29:49.073]             c <- base::c
[08:29:49.073]             inherits <- base::inherits
[08:29:49.073]             invokeRestart <- base::invokeRestart
[08:29:49.073]             length <- base::length
[08:29:49.073]             list <- base::list
[08:29:49.073]             seq.int <- base::seq.int
[08:29:49.073]             signalCondition <- base::signalCondition
[08:29:49.073]             sys.calls <- base::sys.calls
[08:29:49.073]             `[[` <- base::`[[`
[08:29:49.073]             `+` <- base::`+`
[08:29:49.073]             `<<-` <- base::`<<-`
[08:29:49.073]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.073]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.073]                   3L)]
[08:29:49.073]             }
[08:29:49.073]             function(cond) {
[08:29:49.073]                 is_error <- inherits(cond, "error")
[08:29:49.073]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.073]                   NULL)
[08:29:49.073]                 if (is_error) {
[08:29:49.073]                   sessionInformation <- function() {
[08:29:49.073]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.073]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.073]                       search = base::search(), system = base::Sys.info())
[08:29:49.073]                   }
[08:29:49.073]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.073]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.073]                     cond$call), session = sessionInformation(), 
[08:29:49.073]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.073]                   signalCondition(cond)
[08:29:49.073]                 }
[08:29:49.073]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.073]                 "immediateCondition"))) {
[08:29:49.073]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.073]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.073]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.073]                   if (TRUE && !signal) {
[08:29:49.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.073]                     {
[08:29:49.073]                       inherits <- base::inherits
[08:29:49.073]                       invokeRestart <- base::invokeRestart
[08:29:49.073]                       is.null <- base::is.null
[08:29:49.073]                       muffled <- FALSE
[08:29:49.073]                       if (inherits(cond, "message")) {
[08:29:49.073]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.073]                         if (muffled) 
[08:29:49.073]                           invokeRestart("muffleMessage")
[08:29:49.073]                       }
[08:29:49.073]                       else if (inherits(cond, "warning")) {
[08:29:49.073]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.073]                         if (muffled) 
[08:29:49.073]                           invokeRestart("muffleWarning")
[08:29:49.073]                       }
[08:29:49.073]                       else if (inherits(cond, "condition")) {
[08:29:49.073]                         if (!is.null(pattern)) {
[08:29:49.073]                           computeRestarts <- base::computeRestarts
[08:29:49.073]                           grepl <- base::grepl
[08:29:49.073]                           restarts <- computeRestarts(cond)
[08:29:49.073]                           for (restart in restarts) {
[08:29:49.073]                             name <- restart$name
[08:29:49.073]                             if (is.null(name)) 
[08:29:49.073]                               next
[08:29:49.073]                             if (!grepl(pattern, name)) 
[08:29:49.073]                               next
[08:29:49.073]                             invokeRestart(restart)
[08:29:49.073]                             muffled <- TRUE
[08:29:49.073]                             break
[08:29:49.073]                           }
[08:29:49.073]                         }
[08:29:49.073]                       }
[08:29:49.073]                       invisible(muffled)
[08:29:49.073]                     }
[08:29:49.073]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.073]                   }
[08:29:49.073]                 }
[08:29:49.073]                 else {
[08:29:49.073]                   if (TRUE) {
[08:29:49.073]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.073]                     {
[08:29:49.073]                       inherits <- base::inherits
[08:29:49.073]                       invokeRestart <- base::invokeRestart
[08:29:49.073]                       is.null <- base::is.null
[08:29:49.073]                       muffled <- FALSE
[08:29:49.073]                       if (inherits(cond, "message")) {
[08:29:49.073]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.073]                         if (muffled) 
[08:29:49.073]                           invokeRestart("muffleMessage")
[08:29:49.073]                       }
[08:29:49.073]                       else if (inherits(cond, "warning")) {
[08:29:49.073]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.073]                         if (muffled) 
[08:29:49.073]                           invokeRestart("muffleWarning")
[08:29:49.073]                       }
[08:29:49.073]                       else if (inherits(cond, "condition")) {
[08:29:49.073]                         if (!is.null(pattern)) {
[08:29:49.073]                           computeRestarts <- base::computeRestarts
[08:29:49.073]                           grepl <- base::grepl
[08:29:49.073]                           restarts <- computeRestarts(cond)
[08:29:49.073]                           for (restart in restarts) {
[08:29:49.073]                             name <- restart$name
[08:29:49.073]                             if (is.null(name)) 
[08:29:49.073]                               next
[08:29:49.073]                             if (!grepl(pattern, name)) 
[08:29:49.073]                               next
[08:29:49.073]                             invokeRestart(restart)
[08:29:49.073]                             muffled <- TRUE
[08:29:49.073]                             break
[08:29:49.073]                           }
[08:29:49.073]                         }
[08:29:49.073]                       }
[08:29:49.073]                       invisible(muffled)
[08:29:49.073]                     }
[08:29:49.073]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.073]                   }
[08:29:49.073]                 }
[08:29:49.073]             }
[08:29:49.073]         }))
[08:29:49.073]     }, error = function(ex) {
[08:29:49.073]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.073]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.073]                 ...future.rng), started = ...future.startTime, 
[08:29:49.073]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.073]             version = "1.8"), class = "FutureResult")
[08:29:49.073]     }, finally = {
[08:29:49.073]         if (!identical(...future.workdir, getwd())) 
[08:29:49.073]             setwd(...future.workdir)
[08:29:49.073]         {
[08:29:49.073]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.073]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.073]             }
[08:29:49.073]             base::options(...future.oldOptions)
[08:29:49.073]             if (.Platform$OS.type == "windows") {
[08:29:49.073]                 old_names <- names(...future.oldEnvVars)
[08:29:49.073]                 envs <- base::Sys.getenv()
[08:29:49.073]                 names <- names(envs)
[08:29:49.073]                 common <- intersect(names, old_names)
[08:29:49.073]                 added <- setdiff(names, old_names)
[08:29:49.073]                 removed <- setdiff(old_names, names)
[08:29:49.073]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.073]                   envs[common]]
[08:29:49.073]                 NAMES <- toupper(changed)
[08:29:49.073]                 args <- list()
[08:29:49.073]                 for (kk in seq_along(NAMES)) {
[08:29:49.073]                   name <- changed[[kk]]
[08:29:49.073]                   NAME <- NAMES[[kk]]
[08:29:49.073]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.073]                     next
[08:29:49.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.073]                 }
[08:29:49.073]                 NAMES <- toupper(added)
[08:29:49.073]                 for (kk in seq_along(NAMES)) {
[08:29:49.073]                   name <- added[[kk]]
[08:29:49.073]                   NAME <- NAMES[[kk]]
[08:29:49.073]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.073]                     next
[08:29:49.073]                   args[[name]] <- ""
[08:29:49.073]                 }
[08:29:49.073]                 NAMES <- toupper(removed)
[08:29:49.073]                 for (kk in seq_along(NAMES)) {
[08:29:49.073]                   name <- removed[[kk]]
[08:29:49.073]                   NAME <- NAMES[[kk]]
[08:29:49.073]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.073]                     next
[08:29:49.073]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.073]                 }
[08:29:49.073]                 if (length(args) > 0) 
[08:29:49.073]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.073]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.073]             }
[08:29:49.073]             else {
[08:29:49.073]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.073]             }
[08:29:49.073]             {
[08:29:49.073]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.073]                   0L) {
[08:29:49.073]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.073]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.073]                   base::options(opts)
[08:29:49.073]                 }
[08:29:49.073]                 {
[08:29:49.073]                   {
[08:29:49.073]                     NULL
[08:29:49.073]                     RNGkind("Mersenne-Twister")
[08:29:49.073]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.073]                       inherits = FALSE)
[08:29:49.073]                   }
[08:29:49.073]                   options(future.plan = NULL)
[08:29:49.073]                   if (is.na(NA_character_)) 
[08:29:49.073]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.073]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.073]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.073]                     .init = FALSE)
[08:29:49.073]                 }
[08:29:49.073]             }
[08:29:49.073]         }
[08:29:49.073]     })
[08:29:49.073]     if (TRUE) {
[08:29:49.073]         base::sink(type = "output", split = FALSE)
[08:29:49.073]         if (TRUE) {
[08:29:49.073]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.073]         }
[08:29:49.073]         else {
[08:29:49.073]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.073]         }
[08:29:49.073]         base::close(...future.stdout)
[08:29:49.073]         ...future.stdout <- NULL
[08:29:49.073]     }
[08:29:49.073]     ...future.result$conditions <- ...future.conditions
[08:29:49.073]     ...future.result$finished <- base::Sys.time()
[08:29:49.073]     ...future.result
[08:29:49.073] }
[08:29:49.075] plan(): Setting new future strategy stack:
[08:29:49.075] List of future strategies:
[08:29:49.075] 1. sequential:
[08:29:49.075]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.075]    - tweaked: FALSE
[08:29:49.075]    - call: NULL
[08:29:49.075] plan(): nbrOfWorkers() = 1
[08:29:49.076] plan(): Setting new future strategy stack:
[08:29:49.076] List of future strategies:
[08:29:49.076] 1. sequential:
[08:29:49.076]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.076]    - tweaked: FALSE
[08:29:49.076]    - call: plan(strategy)
[08:29:49.076] plan(): nbrOfWorkers() = 1
[08:29:49.076] SequentialFuture started (and completed)
[08:29:49.077] - Launch lazy future ... done
[08:29:49.077] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = FALSE
[08:29:49.077] getGlobalsAndPackages() ...
[08:29:49.077] Searching for globals...
[08:29:49.080] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.080] Searching for globals ... DONE
[08:29:49.080] Resolving globals: FALSE
[08:29:49.080] 
[08:29:49.080] - packages: [1] ‘utils’
[08:29:49.080] getGlobalsAndPackages() ... DONE
[08:29:49.081] run() for ‘Future’ ...
[08:29:49.081] - state: ‘created’
[08:29:49.081] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.081] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.081] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.081]   - Field: ‘label’
[08:29:49.081]   - Field: ‘local’
[08:29:49.081]   - Field: ‘owner’
[08:29:49.082]   - Field: ‘envir’
[08:29:49.082]   - Field: ‘packages’
[08:29:49.082]   - Field: ‘gc’
[08:29:49.082]   - Field: ‘conditions’
[08:29:49.082]   - Field: ‘expr’
[08:29:49.082]   - Field: ‘uuid’
[08:29:49.082]   - Field: ‘seed’
[08:29:49.082]   - Field: ‘version’
[08:29:49.082]   - Field: ‘result’
[08:29:49.082]   - Field: ‘asynchronous’
[08:29:49.082]   - Field: ‘calls’
[08:29:49.083]   - Field: ‘globals’
[08:29:49.083]   - Field: ‘stdout’
[08:29:49.083]   - Field: ‘earlySignal’
[08:29:49.083]   - Field: ‘lazy’
[08:29:49.083]   - Field: ‘state’
[08:29:49.083] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.083] - Launch lazy future ...
[08:29:49.083] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.083] Packages needed by future strategies (n = 0): <none>
[08:29:49.085] {
[08:29:49.085]     {
[08:29:49.085]         {
[08:29:49.085]             ...future.startTime <- base::Sys.time()
[08:29:49.085]             {
[08:29:49.085]                 {
[08:29:49.085]                   {
[08:29:49.085]                     {
[08:29:49.085]                       base::local({
[08:29:49.085]                         has_future <- base::requireNamespace("future", 
[08:29:49.085]                           quietly = TRUE)
[08:29:49.085]                         if (has_future) {
[08:29:49.085]                           ns <- base::getNamespace("future")
[08:29:49.085]                           version <- ns[[".package"]][["version"]]
[08:29:49.085]                           if (is.null(version)) 
[08:29:49.085]                             version <- utils::packageVersion("future")
[08:29:49.085]                         }
[08:29:49.085]                         else {
[08:29:49.085]                           version <- NULL
[08:29:49.085]                         }
[08:29:49.085]                         if (!has_future || version < "1.8.0") {
[08:29:49.085]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.085]                             "", base::R.version$version.string), 
[08:29:49.085]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.085]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.085]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.085]                               "release", "version")], collapse = " "), 
[08:29:49.085]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.085]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.085]                             info)
[08:29:49.085]                           info <- base::paste(info, collapse = "; ")
[08:29:49.085]                           if (!has_future) {
[08:29:49.085]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.085]                               info)
[08:29:49.085]                           }
[08:29:49.085]                           else {
[08:29:49.085]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.085]                               info, version)
[08:29:49.085]                           }
[08:29:49.085]                           base::stop(msg)
[08:29:49.085]                         }
[08:29:49.085]                       })
[08:29:49.085]                     }
[08:29:49.085]                     base::local({
[08:29:49.085]                       for (pkg in "utils") {
[08:29:49.085]                         base::loadNamespace(pkg)
[08:29:49.085]                         base::library(pkg, character.only = TRUE)
[08:29:49.085]                       }
[08:29:49.085]                     })
[08:29:49.085]                   }
[08:29:49.085]                   ...future.strategy.old <- future::plan("list")
[08:29:49.085]                   options(future.plan = NULL)
[08:29:49.085]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.085]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.085]                 }
[08:29:49.085]                 ...future.workdir <- getwd()
[08:29:49.085]             }
[08:29:49.085]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.085]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.085]         }
[08:29:49.085]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.085]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.085]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.085]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.085]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.085]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.085]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.085]             base::names(...future.oldOptions))
[08:29:49.085]     }
[08:29:49.085]     if (FALSE) {
[08:29:49.085]     }
[08:29:49.085]     else {
[08:29:49.085]         if (FALSE) {
[08:29:49.085]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.085]                 open = "w")
[08:29:49.085]         }
[08:29:49.085]         else {
[08:29:49.085]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.085]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.085]         }
[08:29:49.085]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.085]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.085]             base::sink(type = "output", split = FALSE)
[08:29:49.085]             base::close(...future.stdout)
[08:29:49.085]         }, add = TRUE)
[08:29:49.085]     }
[08:29:49.085]     ...future.frame <- base::sys.nframe()
[08:29:49.085]     ...future.conditions <- base::list()
[08:29:49.085]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.085]     if (FALSE) {
[08:29:49.085]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.085]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.085]     }
[08:29:49.085]     ...future.result <- base::tryCatch({
[08:29:49.085]         base::withCallingHandlers({
[08:29:49.085]             ...future.value <- base::withVisible(base::local({
[08:29:49.085]                 print(1:50)
[08:29:49.085]                 str(1:50)
[08:29:49.085]                 cat(letters, sep = "-")
[08:29:49.085]                 cat(1:6, collapse = "\n")
[08:29:49.085]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.085]                 42L
[08:29:49.085]             }))
[08:29:49.085]             future::FutureResult(value = ...future.value$value, 
[08:29:49.085]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.085]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.085]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.085]                     ...future.globalenv.names))
[08:29:49.085]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.085]         }, condition = base::local({
[08:29:49.085]             c <- base::c
[08:29:49.085]             inherits <- base::inherits
[08:29:49.085]             invokeRestart <- base::invokeRestart
[08:29:49.085]             length <- base::length
[08:29:49.085]             list <- base::list
[08:29:49.085]             seq.int <- base::seq.int
[08:29:49.085]             signalCondition <- base::signalCondition
[08:29:49.085]             sys.calls <- base::sys.calls
[08:29:49.085]             `[[` <- base::`[[`
[08:29:49.085]             `+` <- base::`+`
[08:29:49.085]             `<<-` <- base::`<<-`
[08:29:49.085]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.085]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.085]                   3L)]
[08:29:49.085]             }
[08:29:49.085]             function(cond) {
[08:29:49.085]                 is_error <- inherits(cond, "error")
[08:29:49.085]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.085]                   NULL)
[08:29:49.085]                 if (is_error) {
[08:29:49.085]                   sessionInformation <- function() {
[08:29:49.085]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.085]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.085]                       search = base::search(), system = base::Sys.info())
[08:29:49.085]                   }
[08:29:49.085]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.085]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.085]                     cond$call), session = sessionInformation(), 
[08:29:49.085]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.085]                   signalCondition(cond)
[08:29:49.085]                 }
[08:29:49.085]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.085]                 "immediateCondition"))) {
[08:29:49.085]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.085]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.085]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.085]                   if (TRUE && !signal) {
[08:29:49.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.085]                     {
[08:29:49.085]                       inherits <- base::inherits
[08:29:49.085]                       invokeRestart <- base::invokeRestart
[08:29:49.085]                       is.null <- base::is.null
[08:29:49.085]                       muffled <- FALSE
[08:29:49.085]                       if (inherits(cond, "message")) {
[08:29:49.085]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.085]                         if (muffled) 
[08:29:49.085]                           invokeRestart("muffleMessage")
[08:29:49.085]                       }
[08:29:49.085]                       else if (inherits(cond, "warning")) {
[08:29:49.085]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.085]                         if (muffled) 
[08:29:49.085]                           invokeRestart("muffleWarning")
[08:29:49.085]                       }
[08:29:49.085]                       else if (inherits(cond, "condition")) {
[08:29:49.085]                         if (!is.null(pattern)) {
[08:29:49.085]                           computeRestarts <- base::computeRestarts
[08:29:49.085]                           grepl <- base::grepl
[08:29:49.085]                           restarts <- computeRestarts(cond)
[08:29:49.085]                           for (restart in restarts) {
[08:29:49.085]                             name <- restart$name
[08:29:49.085]                             if (is.null(name)) 
[08:29:49.085]                               next
[08:29:49.085]                             if (!grepl(pattern, name)) 
[08:29:49.085]                               next
[08:29:49.085]                             invokeRestart(restart)
[08:29:49.085]                             muffled <- TRUE
[08:29:49.085]                             break
[08:29:49.085]                           }
[08:29:49.085]                         }
[08:29:49.085]                       }
[08:29:49.085]                       invisible(muffled)
[08:29:49.085]                     }
[08:29:49.085]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.085]                   }
[08:29:49.085]                 }
[08:29:49.085]                 else {
[08:29:49.085]                   if (TRUE) {
[08:29:49.085]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.085]                     {
[08:29:49.085]                       inherits <- base::inherits
[08:29:49.085]                       invokeRestart <- base::invokeRestart
[08:29:49.085]                       is.null <- base::is.null
[08:29:49.085]                       muffled <- FALSE
[08:29:49.085]                       if (inherits(cond, "message")) {
[08:29:49.085]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.085]                         if (muffled) 
[08:29:49.085]                           invokeRestart("muffleMessage")
[08:29:49.085]                       }
[08:29:49.085]                       else if (inherits(cond, "warning")) {
[08:29:49.085]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.085]                         if (muffled) 
[08:29:49.085]                           invokeRestart("muffleWarning")
[08:29:49.085]                       }
[08:29:49.085]                       else if (inherits(cond, "condition")) {
[08:29:49.085]                         if (!is.null(pattern)) {
[08:29:49.085]                           computeRestarts <- base::computeRestarts
[08:29:49.085]                           grepl <- base::grepl
[08:29:49.085]                           restarts <- computeRestarts(cond)
[08:29:49.085]                           for (restart in restarts) {
[08:29:49.085]                             name <- restart$name
[08:29:49.085]                             if (is.null(name)) 
[08:29:49.085]                               next
[08:29:49.085]                             if (!grepl(pattern, name)) 
[08:29:49.085]                               next
[08:29:49.085]                             invokeRestart(restart)
[08:29:49.085]                             muffled <- TRUE
[08:29:49.085]                             break
[08:29:49.085]                           }
[08:29:49.085]                         }
[08:29:49.085]                       }
[08:29:49.085]                       invisible(muffled)
[08:29:49.085]                     }
[08:29:49.085]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.085]                   }
[08:29:49.085]                 }
[08:29:49.085]             }
[08:29:49.085]         }))
[08:29:49.085]     }, error = function(ex) {
[08:29:49.085]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.085]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.085]                 ...future.rng), started = ...future.startTime, 
[08:29:49.085]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.085]             version = "1.8"), class = "FutureResult")
[08:29:49.085]     }, finally = {
[08:29:49.085]         if (!identical(...future.workdir, getwd())) 
[08:29:49.085]             setwd(...future.workdir)
[08:29:49.085]         {
[08:29:49.085]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.085]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.085]             }
[08:29:49.085]             base::options(...future.oldOptions)
[08:29:49.085]             if (.Platform$OS.type == "windows") {
[08:29:49.085]                 old_names <- names(...future.oldEnvVars)
[08:29:49.085]                 envs <- base::Sys.getenv()
[08:29:49.085]                 names <- names(envs)
[08:29:49.085]                 common <- intersect(names, old_names)
[08:29:49.085]                 added <- setdiff(names, old_names)
[08:29:49.085]                 removed <- setdiff(old_names, names)
[08:29:49.085]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.085]                   envs[common]]
[08:29:49.085]                 NAMES <- toupper(changed)
[08:29:49.085]                 args <- list()
[08:29:49.085]                 for (kk in seq_along(NAMES)) {
[08:29:49.085]                   name <- changed[[kk]]
[08:29:49.085]                   NAME <- NAMES[[kk]]
[08:29:49.085]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.085]                     next
[08:29:49.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.085]                 }
[08:29:49.085]                 NAMES <- toupper(added)
[08:29:49.085]                 for (kk in seq_along(NAMES)) {
[08:29:49.085]                   name <- added[[kk]]
[08:29:49.085]                   NAME <- NAMES[[kk]]
[08:29:49.085]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.085]                     next
[08:29:49.085]                   args[[name]] <- ""
[08:29:49.085]                 }
[08:29:49.085]                 NAMES <- toupper(removed)
[08:29:49.085]                 for (kk in seq_along(NAMES)) {
[08:29:49.085]                   name <- removed[[kk]]
[08:29:49.085]                   NAME <- NAMES[[kk]]
[08:29:49.085]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.085]                     next
[08:29:49.085]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.085]                 }
[08:29:49.085]                 if (length(args) > 0) 
[08:29:49.085]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.085]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.085]             }
[08:29:49.085]             else {
[08:29:49.085]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.085]             }
[08:29:49.085]             {
[08:29:49.085]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.085]                   0L) {
[08:29:49.085]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.085]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.085]                   base::options(opts)
[08:29:49.085]                 }
[08:29:49.085]                 {
[08:29:49.085]                   {
[08:29:49.085]                     NULL
[08:29:49.085]                     RNGkind("Mersenne-Twister")
[08:29:49.085]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.085]                       inherits = FALSE)
[08:29:49.085]                   }
[08:29:49.085]                   options(future.plan = NULL)
[08:29:49.085]                   if (is.na(NA_character_)) 
[08:29:49.085]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.085]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.085]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.085]                     .init = FALSE)
[08:29:49.085]                 }
[08:29:49.085]             }
[08:29:49.085]         }
[08:29:49.085]     })
[08:29:49.085]     if (TRUE) {
[08:29:49.085]         base::sink(type = "output", split = FALSE)
[08:29:49.085]         if (FALSE) {
[08:29:49.085]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.085]         }
[08:29:49.085]         else {
[08:29:49.085]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.085]         }
[08:29:49.085]         base::close(...future.stdout)
[08:29:49.085]         ...future.stdout <- NULL
[08:29:49.085]     }
[08:29:49.085]     ...future.result$conditions <- ...future.conditions
[08:29:49.085]     ...future.result$finished <- base::Sys.time()
[08:29:49.085]     ...future.result
[08:29:49.085] }
[08:29:49.087] plan(): Setting new future strategy stack:
[08:29:49.087] List of future strategies:
[08:29:49.087] 1. sequential:
[08:29:49.087]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.087]    - tweaked: FALSE
[08:29:49.087]    - call: NULL
[08:29:49.087] plan(): nbrOfWorkers() = 1
[08:29:49.089] plan(): Setting new future strategy stack:
[08:29:49.089] List of future strategies:
[08:29:49.089] 1. sequential:
[08:29:49.089]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.089]    - tweaked: FALSE
[08:29:49.089]    - call: plan(strategy)
[08:29:49.089] plan(): nbrOfWorkers() = 1
[08:29:49.089] SequentialFuture started (and completed)
[08:29:49.089] - Launch lazy future ... done
[08:29:49.089] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "f51d19c2-2e72-ddae-aef8-c0bafe8ed1a3"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85025
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:48"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:49.097] getGlobalsAndPackages() ...
[08:29:49.097] Searching for globals...
[08:29:49.099] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.099] Searching for globals ... DONE
[08:29:49.100] Resolving globals: FALSE
[08:29:49.100] 
[08:29:49.100] - packages: [1] ‘utils’
[08:29:49.100] getGlobalsAndPackages() ... DONE
[08:29:49.100] run() for ‘Future’ ...
[08:29:49.101] - state: ‘created’
[08:29:49.101] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.101] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.101] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.101]   - Field: ‘label’
[08:29:49.101]   - Field: ‘local’
[08:29:49.101]   - Field: ‘owner’
[08:29:49.101]   - Field: ‘envir’
[08:29:49.101]   - Field: ‘packages’
[08:29:49.101]   - Field: ‘gc’
[08:29:49.102]   - Field: ‘conditions’
[08:29:49.102]   - Field: ‘expr’
[08:29:49.102]   - Field: ‘uuid’
[08:29:49.102]   - Field: ‘seed’
[08:29:49.102]   - Field: ‘version’
[08:29:49.102]   - Field: ‘result’
[08:29:49.102]   - Field: ‘asynchronous’
[08:29:49.102]   - Field: ‘calls’
[08:29:49.102]   - Field: ‘globals’
[08:29:49.102]   - Field: ‘stdout’
[08:29:49.102]   - Field: ‘earlySignal’
[08:29:49.102]   - Field: ‘lazy’
[08:29:49.103]   - Field: ‘state’
[08:29:49.103] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.103] - Launch lazy future ...
[08:29:49.103] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.103] Packages needed by future strategies (n = 0): <none>
[08:29:49.103] {
[08:29:49.103]     {
[08:29:49.103]         {
[08:29:49.103]             ...future.startTime <- base::Sys.time()
[08:29:49.103]             {
[08:29:49.103]                 {
[08:29:49.103]                   {
[08:29:49.103]                     {
[08:29:49.103]                       base::local({
[08:29:49.103]                         has_future <- base::requireNamespace("future", 
[08:29:49.103]                           quietly = TRUE)
[08:29:49.103]                         if (has_future) {
[08:29:49.103]                           ns <- base::getNamespace("future")
[08:29:49.103]                           version <- ns[[".package"]][["version"]]
[08:29:49.103]                           if (is.null(version)) 
[08:29:49.103]                             version <- utils::packageVersion("future")
[08:29:49.103]                         }
[08:29:49.103]                         else {
[08:29:49.103]                           version <- NULL
[08:29:49.103]                         }
[08:29:49.103]                         if (!has_future || version < "1.8.0") {
[08:29:49.103]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.103]                             "", base::R.version$version.string), 
[08:29:49.103]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.103]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.103]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.103]                               "release", "version")], collapse = " "), 
[08:29:49.103]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.103]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.103]                             info)
[08:29:49.103]                           info <- base::paste(info, collapse = "; ")
[08:29:49.103]                           if (!has_future) {
[08:29:49.103]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.103]                               info)
[08:29:49.103]                           }
[08:29:49.103]                           else {
[08:29:49.103]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.103]                               info, version)
[08:29:49.103]                           }
[08:29:49.103]                           base::stop(msg)
[08:29:49.103]                         }
[08:29:49.103]                       })
[08:29:49.103]                     }
[08:29:49.103]                     base::local({
[08:29:49.103]                       for (pkg in "utils") {
[08:29:49.103]                         base::loadNamespace(pkg)
[08:29:49.103]                         base::library(pkg, character.only = TRUE)
[08:29:49.103]                       }
[08:29:49.103]                     })
[08:29:49.103]                   }
[08:29:49.103]                   ...future.strategy.old <- future::plan("list")
[08:29:49.103]                   options(future.plan = NULL)
[08:29:49.103]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.103]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.103]                 }
[08:29:49.103]                 ...future.workdir <- getwd()
[08:29:49.103]             }
[08:29:49.103]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.103]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.103]         }
[08:29:49.103]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.103]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.103]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.103]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.103]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.103]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.103]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.103]             base::names(...future.oldOptions))
[08:29:49.103]     }
[08:29:49.103]     if (FALSE) {
[08:29:49.103]     }
[08:29:49.103]     else {
[08:29:49.103]         if (FALSE) {
[08:29:49.103]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.103]                 open = "w")
[08:29:49.103]         }
[08:29:49.103]         else {
[08:29:49.103]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.103]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.103]         }
[08:29:49.103]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.103]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.103]             base::sink(type = "output", split = FALSE)
[08:29:49.103]             base::close(...future.stdout)
[08:29:49.103]         }, add = TRUE)
[08:29:49.103]     }
[08:29:49.103]     ...future.frame <- base::sys.nframe()
[08:29:49.103]     ...future.conditions <- base::list()
[08:29:49.103]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.103]     if (FALSE) {
[08:29:49.103]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.103]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.103]     }
[08:29:49.103]     ...future.result <- base::tryCatch({
[08:29:49.103]         base::withCallingHandlers({
[08:29:49.103]             ...future.value <- base::withVisible(base::local({
[08:29:49.103]                 print(1:50)
[08:29:49.103]                 str(1:50)
[08:29:49.103]                 cat(letters, sep = "-")
[08:29:49.103]                 cat(1:6, collapse = "\n")
[08:29:49.103]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.103]                 42L
[08:29:49.103]             }))
[08:29:49.103]             future::FutureResult(value = ...future.value$value, 
[08:29:49.103]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.103]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.103]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.103]                     ...future.globalenv.names))
[08:29:49.103]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.103]         }, condition = base::local({
[08:29:49.103]             c <- base::c
[08:29:49.103]             inherits <- base::inherits
[08:29:49.103]             invokeRestart <- base::invokeRestart
[08:29:49.103]             length <- base::length
[08:29:49.103]             list <- base::list
[08:29:49.103]             seq.int <- base::seq.int
[08:29:49.103]             signalCondition <- base::signalCondition
[08:29:49.103]             sys.calls <- base::sys.calls
[08:29:49.103]             `[[` <- base::`[[`
[08:29:49.103]             `+` <- base::`+`
[08:29:49.103]             `<<-` <- base::`<<-`
[08:29:49.103]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.103]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.103]                   3L)]
[08:29:49.103]             }
[08:29:49.103]             function(cond) {
[08:29:49.103]                 is_error <- inherits(cond, "error")
[08:29:49.103]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.103]                   NULL)
[08:29:49.103]                 if (is_error) {
[08:29:49.103]                   sessionInformation <- function() {
[08:29:49.103]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.103]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.103]                       search = base::search(), system = base::Sys.info())
[08:29:49.103]                   }
[08:29:49.103]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.103]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.103]                     cond$call), session = sessionInformation(), 
[08:29:49.103]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.103]                   signalCondition(cond)
[08:29:49.103]                 }
[08:29:49.103]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.103]                 "immediateCondition"))) {
[08:29:49.103]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.103]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.103]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.103]                   if (TRUE && !signal) {
[08:29:49.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.103]                     {
[08:29:49.103]                       inherits <- base::inherits
[08:29:49.103]                       invokeRestart <- base::invokeRestart
[08:29:49.103]                       is.null <- base::is.null
[08:29:49.103]                       muffled <- FALSE
[08:29:49.103]                       if (inherits(cond, "message")) {
[08:29:49.103]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.103]                         if (muffled) 
[08:29:49.103]                           invokeRestart("muffleMessage")
[08:29:49.103]                       }
[08:29:49.103]                       else if (inherits(cond, "warning")) {
[08:29:49.103]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.103]                         if (muffled) 
[08:29:49.103]                           invokeRestart("muffleWarning")
[08:29:49.103]                       }
[08:29:49.103]                       else if (inherits(cond, "condition")) {
[08:29:49.103]                         if (!is.null(pattern)) {
[08:29:49.103]                           computeRestarts <- base::computeRestarts
[08:29:49.103]                           grepl <- base::grepl
[08:29:49.103]                           restarts <- computeRestarts(cond)
[08:29:49.103]                           for (restart in restarts) {
[08:29:49.103]                             name <- restart$name
[08:29:49.103]                             if (is.null(name)) 
[08:29:49.103]                               next
[08:29:49.103]                             if (!grepl(pattern, name)) 
[08:29:49.103]                               next
[08:29:49.103]                             invokeRestart(restart)
[08:29:49.103]                             muffled <- TRUE
[08:29:49.103]                             break
[08:29:49.103]                           }
[08:29:49.103]                         }
[08:29:49.103]                       }
[08:29:49.103]                       invisible(muffled)
[08:29:49.103]                     }
[08:29:49.103]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.103]                   }
[08:29:49.103]                 }
[08:29:49.103]                 else {
[08:29:49.103]                   if (TRUE) {
[08:29:49.103]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.103]                     {
[08:29:49.103]                       inherits <- base::inherits
[08:29:49.103]                       invokeRestart <- base::invokeRestart
[08:29:49.103]                       is.null <- base::is.null
[08:29:49.103]                       muffled <- FALSE
[08:29:49.103]                       if (inherits(cond, "message")) {
[08:29:49.103]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.103]                         if (muffled) 
[08:29:49.103]                           invokeRestart("muffleMessage")
[08:29:49.103]                       }
[08:29:49.103]                       else if (inherits(cond, "warning")) {
[08:29:49.103]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.103]                         if (muffled) 
[08:29:49.103]                           invokeRestart("muffleWarning")
[08:29:49.103]                       }
[08:29:49.103]                       else if (inherits(cond, "condition")) {
[08:29:49.103]                         if (!is.null(pattern)) {
[08:29:49.103]                           computeRestarts <- base::computeRestarts
[08:29:49.103]                           grepl <- base::grepl
[08:29:49.103]                           restarts <- computeRestarts(cond)
[08:29:49.103]                           for (restart in restarts) {
[08:29:49.103]                             name <- restart$name
[08:29:49.103]                             if (is.null(name)) 
[08:29:49.103]                               next
[08:29:49.103]                             if (!grepl(pattern, name)) 
[08:29:49.103]                               next
[08:29:49.103]                             invokeRestart(restart)
[08:29:49.103]                             muffled <- TRUE
[08:29:49.103]                             break
[08:29:49.103]                           }
[08:29:49.103]                         }
[08:29:49.103]                       }
[08:29:49.103]                       invisible(muffled)
[08:29:49.103]                     }
[08:29:49.103]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.103]                   }
[08:29:49.103]                 }
[08:29:49.103]             }
[08:29:49.103]         }))
[08:29:49.103]     }, error = function(ex) {
[08:29:49.103]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.103]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.103]                 ...future.rng), started = ...future.startTime, 
[08:29:49.103]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.103]             version = "1.8"), class = "FutureResult")
[08:29:49.103]     }, finally = {
[08:29:49.103]         if (!identical(...future.workdir, getwd())) 
[08:29:49.103]             setwd(...future.workdir)
[08:29:49.103]         {
[08:29:49.103]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.103]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.103]             }
[08:29:49.103]             base::options(...future.oldOptions)
[08:29:49.103]             if (.Platform$OS.type == "windows") {
[08:29:49.103]                 old_names <- names(...future.oldEnvVars)
[08:29:49.103]                 envs <- base::Sys.getenv()
[08:29:49.103]                 names <- names(envs)
[08:29:49.103]                 common <- intersect(names, old_names)
[08:29:49.103]                 added <- setdiff(names, old_names)
[08:29:49.103]                 removed <- setdiff(old_names, names)
[08:29:49.103]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.103]                   envs[common]]
[08:29:49.103]                 NAMES <- toupper(changed)
[08:29:49.103]                 args <- list()
[08:29:49.103]                 for (kk in seq_along(NAMES)) {
[08:29:49.103]                   name <- changed[[kk]]
[08:29:49.103]                   NAME <- NAMES[[kk]]
[08:29:49.103]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.103]                     next
[08:29:49.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.103]                 }
[08:29:49.103]                 NAMES <- toupper(added)
[08:29:49.103]                 for (kk in seq_along(NAMES)) {
[08:29:49.103]                   name <- added[[kk]]
[08:29:49.103]                   NAME <- NAMES[[kk]]
[08:29:49.103]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.103]                     next
[08:29:49.103]                   args[[name]] <- ""
[08:29:49.103]                 }
[08:29:49.103]                 NAMES <- toupper(removed)
[08:29:49.103]                 for (kk in seq_along(NAMES)) {
[08:29:49.103]                   name <- removed[[kk]]
[08:29:49.103]                   NAME <- NAMES[[kk]]
[08:29:49.103]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.103]                     next
[08:29:49.103]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.103]                 }
[08:29:49.103]                 if (length(args) > 0) 
[08:29:49.103]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.103]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.103]             }
[08:29:49.103]             else {
[08:29:49.103]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.103]             }
[08:29:49.103]             {
[08:29:49.103]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.103]                   0L) {
[08:29:49.103]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.103]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.103]                   base::options(opts)
[08:29:49.103]                 }
[08:29:49.103]                 {
[08:29:49.103]                   {
[08:29:49.103]                     NULL
[08:29:49.103]                     RNGkind("Mersenne-Twister")
[08:29:49.103]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.103]                       inherits = FALSE)
[08:29:49.103]                   }
[08:29:49.103]                   options(future.plan = NULL)
[08:29:49.103]                   if (is.na(NA_character_)) 
[08:29:49.103]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.103]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.103]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.103]                     .init = FALSE)
[08:29:49.103]                 }
[08:29:49.103]             }
[08:29:49.103]         }
[08:29:49.103]     })
[08:29:49.103]     if (TRUE) {
[08:29:49.103]         base::sink(type = "output", split = FALSE)
[08:29:49.103]         if (FALSE) {
[08:29:49.103]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.103]         }
[08:29:49.103]         else {
[08:29:49.103]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.103]         }
[08:29:49.103]         base::close(...future.stdout)
[08:29:49.103]         ...future.stdout <- NULL
[08:29:49.103]     }
[08:29:49.103]     ...future.result$conditions <- ...future.conditions
[08:29:49.103]     ...future.result$finished <- base::Sys.time()
[08:29:49.103]     ...future.result
[08:29:49.103] }
[08:29:49.105] plan(): Setting new future strategy stack:
[08:29:49.105] List of future strategies:
[08:29:49.105] 1. sequential:
[08:29:49.105]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.105]    - tweaked: FALSE
[08:29:49.105]    - call: NULL
[08:29:49.106] plan(): nbrOfWorkers() = 1
[08:29:49.107] plan(): Setting new future strategy stack:
[08:29:49.107] List of future strategies:
[08:29:49.107] 1. sequential:
[08:29:49.107]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.107]    - tweaked: FALSE
[08:29:49.107]    - call: plan(strategy)
[08:29:49.108] plan(): nbrOfWorkers() = 1
[08:29:49.108] SequentialFuture started (and completed)
[08:29:49.108] - Launch lazy future ... done
[08:29:49.108] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.108] getGlobalsAndPackages() ...
[08:29:49.109] Searching for globals...
[08:29:49.109] - globals found: [1] ‘print’
[08:29:49.109] Searching for globals ... DONE
[08:29:49.109] Resolving globals: FALSE
[08:29:49.109] 
[08:29:49.109] 
[08:29:49.110] getGlobalsAndPackages() ... DONE
[08:29:49.110] run() for ‘Future’ ...
[08:29:49.110] - state: ‘created’
[08:29:49.110] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.110] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.111] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.112]   - Field: ‘label’
[08:29:49.112]   - Field: ‘local’
[08:29:49.112]   - Field: ‘owner’
[08:29:49.112]   - Field: ‘envir’
[08:29:49.112]   - Field: ‘packages’
[08:29:49.112]   - Field: ‘gc’
[08:29:49.112]   - Field: ‘conditions’
[08:29:49.112]   - Field: ‘expr’
[08:29:49.112]   - Field: ‘uuid’
[08:29:49.112]   - Field: ‘seed’
[08:29:49.112]   - Field: ‘version’
[08:29:49.113]   - Field: ‘result’
[08:29:49.113]   - Field: ‘asynchronous’
[08:29:49.113]   - Field: ‘calls’
[08:29:49.113]   - Field: ‘globals’
[08:29:49.113]   - Field: ‘stdout’
[08:29:49.113]   - Field: ‘earlySignal’
[08:29:49.113]   - Field: ‘lazy’
[08:29:49.113]   - Field: ‘state’
[08:29:49.113] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.113] - Launch lazy future ...
[08:29:49.113] Packages needed by the future expression (n = 0): <none>
[08:29:49.114] Packages needed by future strategies (n = 0): <none>
[08:29:49.114] {
[08:29:49.114]     {
[08:29:49.114]         {
[08:29:49.114]             ...future.startTime <- base::Sys.time()
[08:29:49.114]             {
[08:29:49.114]                 {
[08:29:49.114]                   {
[08:29:49.114]                     base::local({
[08:29:49.114]                       has_future <- base::requireNamespace("future", 
[08:29:49.114]                         quietly = TRUE)
[08:29:49.114]                       if (has_future) {
[08:29:49.114]                         ns <- base::getNamespace("future")
[08:29:49.114]                         version <- ns[[".package"]][["version"]]
[08:29:49.114]                         if (is.null(version)) 
[08:29:49.114]                           version <- utils::packageVersion("future")
[08:29:49.114]                       }
[08:29:49.114]                       else {
[08:29:49.114]                         version <- NULL
[08:29:49.114]                       }
[08:29:49.114]                       if (!has_future || version < "1.8.0") {
[08:29:49.114]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.114]                           "", base::R.version$version.string), 
[08:29:49.114]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:49.114]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.114]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.114]                             "release", "version")], collapse = " "), 
[08:29:49.114]                           hostname = base::Sys.info()[["nodename"]])
[08:29:49.114]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.114]                           info)
[08:29:49.114]                         info <- base::paste(info, collapse = "; ")
[08:29:49.114]                         if (!has_future) {
[08:29:49.114]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.114]                             info)
[08:29:49.114]                         }
[08:29:49.114]                         else {
[08:29:49.114]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.114]                             info, version)
[08:29:49.114]                         }
[08:29:49.114]                         base::stop(msg)
[08:29:49.114]                       }
[08:29:49.114]                     })
[08:29:49.114]                   }
[08:29:49.114]                   ...future.strategy.old <- future::plan("list")
[08:29:49.114]                   options(future.plan = NULL)
[08:29:49.114]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.114]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.114]                 }
[08:29:49.114]                 ...future.workdir <- getwd()
[08:29:49.114]             }
[08:29:49.114]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.114]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.114]         }
[08:29:49.114]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.114]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.114]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.114]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.114]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.114]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.114]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.114]             base::names(...future.oldOptions))
[08:29:49.114]     }
[08:29:49.114]     if (FALSE) {
[08:29:49.114]     }
[08:29:49.114]     else {
[08:29:49.114]         if (TRUE) {
[08:29:49.114]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.114]                 open = "w")
[08:29:49.114]         }
[08:29:49.114]         else {
[08:29:49.114]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.114]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.114]         }
[08:29:49.114]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.114]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.114]             base::sink(type = "output", split = FALSE)
[08:29:49.114]             base::close(...future.stdout)
[08:29:49.114]         }, add = TRUE)
[08:29:49.114]     }
[08:29:49.114]     ...future.frame <- base::sys.nframe()
[08:29:49.114]     ...future.conditions <- base::list()
[08:29:49.114]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.114]     if (FALSE) {
[08:29:49.114]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.114]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.114]     }
[08:29:49.114]     ...future.result <- base::tryCatch({
[08:29:49.114]         base::withCallingHandlers({
[08:29:49.114]             ...future.value <- base::withVisible(base::local(print(42)))
[08:29:49.114]             future::FutureResult(value = ...future.value$value, 
[08:29:49.114]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.114]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.114]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.114]                     ...future.globalenv.names))
[08:29:49.114]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.114]         }, condition = base::local({
[08:29:49.114]             c <- base::c
[08:29:49.114]             inherits <- base::inherits
[08:29:49.114]             invokeRestart <- base::invokeRestart
[08:29:49.114]             length <- base::length
[08:29:49.114]             list <- base::list
[08:29:49.114]             seq.int <- base::seq.int
[08:29:49.114]             signalCondition <- base::signalCondition
[08:29:49.114]             sys.calls <- base::sys.calls
[08:29:49.114]             `[[` <- base::`[[`
[08:29:49.114]             `+` <- base::`+`
[08:29:49.114]             `<<-` <- base::`<<-`
[08:29:49.114]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.114]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.114]                   3L)]
[08:29:49.114]             }
[08:29:49.114]             function(cond) {
[08:29:49.114]                 is_error <- inherits(cond, "error")
[08:29:49.114]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.114]                   NULL)
[08:29:49.114]                 if (is_error) {
[08:29:49.114]                   sessionInformation <- function() {
[08:29:49.114]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.114]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.114]                       search = base::search(), system = base::Sys.info())
[08:29:49.114]                   }
[08:29:49.114]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.114]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.114]                     cond$call), session = sessionInformation(), 
[08:29:49.114]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.114]                   signalCondition(cond)
[08:29:49.114]                 }
[08:29:49.114]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.114]                 "immediateCondition"))) {
[08:29:49.114]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.114]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.114]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.114]                   if (TRUE && !signal) {
[08:29:49.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.114]                     {
[08:29:49.114]                       inherits <- base::inherits
[08:29:49.114]                       invokeRestart <- base::invokeRestart
[08:29:49.114]                       is.null <- base::is.null
[08:29:49.114]                       muffled <- FALSE
[08:29:49.114]                       if (inherits(cond, "message")) {
[08:29:49.114]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.114]                         if (muffled) 
[08:29:49.114]                           invokeRestart("muffleMessage")
[08:29:49.114]                       }
[08:29:49.114]                       else if (inherits(cond, "warning")) {
[08:29:49.114]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.114]                         if (muffled) 
[08:29:49.114]                           invokeRestart("muffleWarning")
[08:29:49.114]                       }
[08:29:49.114]                       else if (inherits(cond, "condition")) {
[08:29:49.114]                         if (!is.null(pattern)) {
[08:29:49.114]                           computeRestarts <- base::computeRestarts
[08:29:49.114]                           grepl <- base::grepl
[08:29:49.114]                           restarts <- computeRestarts(cond)
[08:29:49.114]                           for (restart in restarts) {
[08:29:49.114]                             name <- restart$name
[08:29:49.114]                             if (is.null(name)) 
[08:29:49.114]                               next
[08:29:49.114]                             if (!grepl(pattern, name)) 
[08:29:49.114]                               next
[08:29:49.114]                             invokeRestart(restart)
[08:29:49.114]                             muffled <- TRUE
[08:29:49.114]                             break
[08:29:49.114]                           }
[08:29:49.114]                         }
[08:29:49.114]                       }
[08:29:49.114]                       invisible(muffled)
[08:29:49.114]                     }
[08:29:49.114]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.114]                   }
[08:29:49.114]                 }
[08:29:49.114]                 else {
[08:29:49.114]                   if (TRUE) {
[08:29:49.114]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.114]                     {
[08:29:49.114]                       inherits <- base::inherits
[08:29:49.114]                       invokeRestart <- base::invokeRestart
[08:29:49.114]                       is.null <- base::is.null
[08:29:49.114]                       muffled <- FALSE
[08:29:49.114]                       if (inherits(cond, "message")) {
[08:29:49.114]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.114]                         if (muffled) 
[08:29:49.114]                           invokeRestart("muffleMessage")
[08:29:49.114]                       }
[08:29:49.114]                       else if (inherits(cond, "warning")) {
[08:29:49.114]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.114]                         if (muffled) 
[08:29:49.114]                           invokeRestart("muffleWarning")
[08:29:49.114]                       }
[08:29:49.114]                       else if (inherits(cond, "condition")) {
[08:29:49.114]                         if (!is.null(pattern)) {
[08:29:49.114]                           computeRestarts <- base::computeRestarts
[08:29:49.114]                           grepl <- base::grepl
[08:29:49.114]                           restarts <- computeRestarts(cond)
[08:29:49.114]                           for (restart in restarts) {
[08:29:49.114]                             name <- restart$name
[08:29:49.114]                             if (is.null(name)) 
[08:29:49.114]                               next
[08:29:49.114]                             if (!grepl(pattern, name)) 
[08:29:49.114]                               next
[08:29:49.114]                             invokeRestart(restart)
[08:29:49.114]                             muffled <- TRUE
[08:29:49.114]                             break
[08:29:49.114]                           }
[08:29:49.114]                         }
[08:29:49.114]                       }
[08:29:49.114]                       invisible(muffled)
[08:29:49.114]                     }
[08:29:49.114]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.114]                   }
[08:29:49.114]                 }
[08:29:49.114]             }
[08:29:49.114]         }))
[08:29:49.114]     }, error = function(ex) {
[08:29:49.114]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.114]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.114]                 ...future.rng), started = ...future.startTime, 
[08:29:49.114]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.114]             version = "1.8"), class = "FutureResult")
[08:29:49.114]     }, finally = {
[08:29:49.114]         if (!identical(...future.workdir, getwd())) 
[08:29:49.114]             setwd(...future.workdir)
[08:29:49.114]         {
[08:29:49.114]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.114]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.114]             }
[08:29:49.114]             base::options(...future.oldOptions)
[08:29:49.114]             if (.Platform$OS.type == "windows") {
[08:29:49.114]                 old_names <- names(...future.oldEnvVars)
[08:29:49.114]                 envs <- base::Sys.getenv()
[08:29:49.114]                 names <- names(envs)
[08:29:49.114]                 common <- intersect(names, old_names)
[08:29:49.114]                 added <- setdiff(names, old_names)
[08:29:49.114]                 removed <- setdiff(old_names, names)
[08:29:49.114]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.114]                   envs[common]]
[08:29:49.114]                 NAMES <- toupper(changed)
[08:29:49.114]                 args <- list()
[08:29:49.114]                 for (kk in seq_along(NAMES)) {
[08:29:49.114]                   name <- changed[[kk]]
[08:29:49.114]                   NAME <- NAMES[[kk]]
[08:29:49.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.114]                     next
[08:29:49.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.114]                 }
[08:29:49.114]                 NAMES <- toupper(added)
[08:29:49.114]                 for (kk in seq_along(NAMES)) {
[08:29:49.114]                   name <- added[[kk]]
[08:29:49.114]                   NAME <- NAMES[[kk]]
[08:29:49.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.114]                     next
[08:29:49.114]                   args[[name]] <- ""
[08:29:49.114]                 }
[08:29:49.114]                 NAMES <- toupper(removed)
[08:29:49.114]                 for (kk in seq_along(NAMES)) {
[08:29:49.114]                   name <- removed[[kk]]
[08:29:49.114]                   NAME <- NAMES[[kk]]
[08:29:49.114]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.114]                     next
[08:29:49.114]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.114]                 }
[08:29:49.114]                 if (length(args) > 0) 
[08:29:49.114]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.114]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.114]             }
[08:29:49.114]             else {
[08:29:49.114]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.114]             }
[08:29:49.114]             {
[08:29:49.114]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.114]                   0L) {
[08:29:49.114]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.114]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.114]                   base::options(opts)
[08:29:49.114]                 }
[08:29:49.114]                 {
[08:29:49.114]                   {
[08:29:49.114]                     NULL
[08:29:49.114]                     RNGkind("Mersenne-Twister")
[08:29:49.114]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.114]                       inherits = FALSE)
[08:29:49.114]                   }
[08:29:49.114]                   options(future.plan = NULL)
[08:29:49.114]                   if (is.na(NA_character_)) 
[08:29:49.114]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.114]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.114]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.114]                     .init = FALSE)
[08:29:49.114]                 }
[08:29:49.114]             }
[08:29:49.114]         }
[08:29:49.114]     })
[08:29:49.114]     if (TRUE) {
[08:29:49.114]         base::sink(type = "output", split = FALSE)
[08:29:49.114]         if (TRUE) {
[08:29:49.114]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.114]         }
[08:29:49.114]         else {
[08:29:49.114]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.114]         }
[08:29:49.114]         base::close(...future.stdout)
[08:29:49.114]         ...future.stdout <- NULL
[08:29:49.114]     }
[08:29:49.114]     ...future.result$conditions <- ...future.conditions
[08:29:49.114]     ...future.result$finished <- base::Sys.time()
[08:29:49.114]     ...future.result
[08:29:49.114] }
[08:29:49.116] plan(): Setting new future strategy stack:
[08:29:49.116] List of future strategies:
[08:29:49.116] 1. sequential:
[08:29:49.116]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.116]    - tweaked: FALSE
[08:29:49.116]    - call: NULL
[08:29:49.116] plan(): nbrOfWorkers() = 1
[08:29:49.117] plan(): Setting new future strategy stack:
[08:29:49.117] List of future strategies:
[08:29:49.117] 1. sequential:
[08:29:49.117]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.117]    - tweaked: FALSE
[08:29:49.117]    - call: plan(strategy)
[08:29:49.117] plan(): nbrOfWorkers() = 1
[08:29:49.118] SequentialFuture started (and completed)
[08:29:49.118] - Launch lazy future ... done
[08:29:49.118] run() for ‘SequentialFuture’ ... done
[1] 42
- stdout = NA
[08:29:49.118] getGlobalsAndPackages() ...
[08:29:49.118] Searching for globals...
[08:29:49.121] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.121] Searching for globals ... DONE
[08:29:49.121] Resolving globals: FALSE
[08:29:49.121] 
[08:29:49.121] - packages: [1] ‘utils’
[08:29:49.122] getGlobalsAndPackages() ... DONE
[08:29:49.122] run() for ‘Future’ ...
[08:29:49.122] - state: ‘created’
[08:29:49.122] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.122] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.122] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.122]   - Field: ‘label’
[08:29:49.123]   - Field: ‘local’
[08:29:49.123]   - Field: ‘owner’
[08:29:49.123]   - Field: ‘envir’
[08:29:49.123]   - Field: ‘packages’
[08:29:49.123]   - Field: ‘gc’
[08:29:49.123]   - Field: ‘conditions’
[08:29:49.123]   - Field: ‘expr’
[08:29:49.123]   - Field: ‘uuid’
[08:29:49.123]   - Field: ‘seed’
[08:29:49.123]   - Field: ‘version’
[08:29:49.123]   - Field: ‘result’
[08:29:49.123]   - Field: ‘asynchronous’
[08:29:49.124]   - Field: ‘calls’
[08:29:49.124]   - Field: ‘globals’
[08:29:49.124]   - Field: ‘stdout’
[08:29:49.124]   - Field: ‘earlySignal’
[08:29:49.124]   - Field: ‘lazy’
[08:29:49.124]   - Field: ‘state’
[08:29:49.124] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.124] - Launch lazy future ...
[08:29:49.124] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.124] Packages needed by future strategies (n = 0): <none>
[08:29:49.125] {
[08:29:49.125]     {
[08:29:49.125]         {
[08:29:49.125]             ...future.startTime <- base::Sys.time()
[08:29:49.125]             {
[08:29:49.125]                 {
[08:29:49.125]                   {
[08:29:49.125]                     {
[08:29:49.125]                       base::local({
[08:29:49.125]                         has_future <- base::requireNamespace("future", 
[08:29:49.125]                           quietly = TRUE)
[08:29:49.125]                         if (has_future) {
[08:29:49.125]                           ns <- base::getNamespace("future")
[08:29:49.125]                           version <- ns[[".package"]][["version"]]
[08:29:49.125]                           if (is.null(version)) 
[08:29:49.125]                             version <- utils::packageVersion("future")
[08:29:49.125]                         }
[08:29:49.125]                         else {
[08:29:49.125]                           version <- NULL
[08:29:49.125]                         }
[08:29:49.125]                         if (!has_future || version < "1.8.0") {
[08:29:49.125]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.125]                             "", base::R.version$version.string), 
[08:29:49.125]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.125]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.125]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.125]                               "release", "version")], collapse = " "), 
[08:29:49.125]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.125]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.125]                             info)
[08:29:49.125]                           info <- base::paste(info, collapse = "; ")
[08:29:49.125]                           if (!has_future) {
[08:29:49.125]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.125]                               info)
[08:29:49.125]                           }
[08:29:49.125]                           else {
[08:29:49.125]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.125]                               info, version)
[08:29:49.125]                           }
[08:29:49.125]                           base::stop(msg)
[08:29:49.125]                         }
[08:29:49.125]                       })
[08:29:49.125]                     }
[08:29:49.125]                     base::local({
[08:29:49.125]                       for (pkg in "utils") {
[08:29:49.125]                         base::loadNamespace(pkg)
[08:29:49.125]                         base::library(pkg, character.only = TRUE)
[08:29:49.125]                       }
[08:29:49.125]                     })
[08:29:49.125]                   }
[08:29:49.125]                   ...future.strategy.old <- future::plan("list")
[08:29:49.125]                   options(future.plan = NULL)
[08:29:49.125]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.125]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.125]                 }
[08:29:49.125]                 ...future.workdir <- getwd()
[08:29:49.125]             }
[08:29:49.125]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.125]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.125]         }
[08:29:49.125]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.125]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.125]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.125]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.125]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.125]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.125]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.125]             base::names(...future.oldOptions))
[08:29:49.125]     }
[08:29:49.125]     if (TRUE) {
[08:29:49.125]     }
[08:29:49.125]     else {
[08:29:49.125]         if (NA) {
[08:29:49.125]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.125]                 open = "w")
[08:29:49.125]         }
[08:29:49.125]         else {
[08:29:49.125]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.125]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.125]         }
[08:29:49.125]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.125]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.125]             base::sink(type = "output", split = FALSE)
[08:29:49.125]             base::close(...future.stdout)
[08:29:49.125]         }, add = TRUE)
[08:29:49.125]     }
[08:29:49.125]     ...future.frame <- base::sys.nframe()
[08:29:49.125]     ...future.conditions <- base::list()
[08:29:49.125]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.125]     if (FALSE) {
[08:29:49.125]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.125]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.125]     }
[08:29:49.125]     ...future.result <- base::tryCatch({
[08:29:49.125]         base::withCallingHandlers({
[08:29:49.125]             ...future.value <- base::withVisible(base::local({
[08:29:49.125]                 print(1:50)
[08:29:49.125]                 str(1:50)
[08:29:49.125]                 cat(letters, sep = "-")
[08:29:49.125]                 cat(1:6, collapse = "\n")
[08:29:49.125]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.125]                 42L
[08:29:49.125]             }))
[08:29:49.125]             future::FutureResult(value = ...future.value$value, 
[08:29:49.125]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.125]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.125]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.125]                     ...future.globalenv.names))
[08:29:49.125]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.125]         }, condition = base::local({
[08:29:49.125]             c <- base::c
[08:29:49.125]             inherits <- base::inherits
[08:29:49.125]             invokeRestart <- base::invokeRestart
[08:29:49.125]             length <- base::length
[08:29:49.125]             list <- base::list
[08:29:49.125]             seq.int <- base::seq.int
[08:29:49.125]             signalCondition <- base::signalCondition
[08:29:49.125]             sys.calls <- base::sys.calls
[08:29:49.125]             `[[` <- base::`[[`
[08:29:49.125]             `+` <- base::`+`
[08:29:49.125]             `<<-` <- base::`<<-`
[08:29:49.125]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.125]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.125]                   3L)]
[08:29:49.125]             }
[08:29:49.125]             function(cond) {
[08:29:49.125]                 is_error <- inherits(cond, "error")
[08:29:49.125]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.125]                   NULL)
[08:29:49.125]                 if (is_error) {
[08:29:49.125]                   sessionInformation <- function() {
[08:29:49.125]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.125]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.125]                       search = base::search(), system = base::Sys.info())
[08:29:49.125]                   }
[08:29:49.125]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.125]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.125]                     cond$call), session = sessionInformation(), 
[08:29:49.125]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.125]                   signalCondition(cond)
[08:29:49.125]                 }
[08:29:49.125]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.125]                 "immediateCondition"))) {
[08:29:49.125]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.125]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.125]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.125]                   if (TRUE && !signal) {
[08:29:49.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.125]                     {
[08:29:49.125]                       inherits <- base::inherits
[08:29:49.125]                       invokeRestart <- base::invokeRestart
[08:29:49.125]                       is.null <- base::is.null
[08:29:49.125]                       muffled <- FALSE
[08:29:49.125]                       if (inherits(cond, "message")) {
[08:29:49.125]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.125]                         if (muffled) 
[08:29:49.125]                           invokeRestart("muffleMessage")
[08:29:49.125]                       }
[08:29:49.125]                       else if (inherits(cond, "warning")) {
[08:29:49.125]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.125]                         if (muffled) 
[08:29:49.125]                           invokeRestart("muffleWarning")
[08:29:49.125]                       }
[08:29:49.125]                       else if (inherits(cond, "condition")) {
[08:29:49.125]                         if (!is.null(pattern)) {
[08:29:49.125]                           computeRestarts <- base::computeRestarts
[08:29:49.125]                           grepl <- base::grepl
[08:29:49.125]                           restarts <- computeRestarts(cond)
[08:29:49.125]                           for (restart in restarts) {
[08:29:49.125]                             name <- restart$name
[08:29:49.125]                             if (is.null(name)) 
[08:29:49.125]                               next
[08:29:49.125]                             if (!grepl(pattern, name)) 
[08:29:49.125]                               next
[08:29:49.125]                             invokeRestart(restart)
[08:29:49.125]                             muffled <- TRUE
[08:29:49.125]                             break
[08:29:49.125]                           }
[08:29:49.125]                         }
[08:29:49.125]                       }
[08:29:49.125]                       invisible(muffled)
[08:29:49.125]                     }
[08:29:49.125]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.125]                   }
[08:29:49.125]                 }
[08:29:49.125]                 else {
[08:29:49.125]                   if (TRUE) {
[08:29:49.125]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.125]                     {
[08:29:49.125]                       inherits <- base::inherits
[08:29:49.125]                       invokeRestart <- base::invokeRestart
[08:29:49.125]                       is.null <- base::is.null
[08:29:49.125]                       muffled <- FALSE
[08:29:49.125]                       if (inherits(cond, "message")) {
[08:29:49.125]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.125]                         if (muffled) 
[08:29:49.125]                           invokeRestart("muffleMessage")
[08:29:49.125]                       }
[08:29:49.125]                       else if (inherits(cond, "warning")) {
[08:29:49.125]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.125]                         if (muffled) 
[08:29:49.125]                           invokeRestart("muffleWarning")
[08:29:49.125]                       }
[08:29:49.125]                       else if (inherits(cond, "condition")) {
[08:29:49.125]                         if (!is.null(pattern)) {
[08:29:49.125]                           computeRestarts <- base::computeRestarts
[08:29:49.125]                           grepl <- base::grepl
[08:29:49.125]                           restarts <- computeRestarts(cond)
[08:29:49.125]                           for (restart in restarts) {
[08:29:49.125]                             name <- restart$name
[08:29:49.125]                             if (is.null(name)) 
[08:29:49.125]                               next
[08:29:49.125]                             if (!grepl(pattern, name)) 
[08:29:49.125]                               next
[08:29:49.125]                             invokeRestart(restart)
[08:29:49.125]                             muffled <- TRUE
[08:29:49.125]                             break
[08:29:49.125]                           }
[08:29:49.125]                         }
[08:29:49.125]                       }
[08:29:49.125]                       invisible(muffled)
[08:29:49.125]                     }
[08:29:49.125]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.125]                   }
[08:29:49.125]                 }
[08:29:49.125]             }
[08:29:49.125]         }))
[08:29:49.125]     }, error = function(ex) {
[08:29:49.125]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.125]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.125]                 ...future.rng), started = ...future.startTime, 
[08:29:49.125]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.125]             version = "1.8"), class = "FutureResult")
[08:29:49.125]     }, finally = {
[08:29:49.125]         if (!identical(...future.workdir, getwd())) 
[08:29:49.125]             setwd(...future.workdir)
[08:29:49.125]         {
[08:29:49.125]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.125]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.125]             }
[08:29:49.125]             base::options(...future.oldOptions)
[08:29:49.125]             if (.Platform$OS.type == "windows") {
[08:29:49.125]                 old_names <- names(...future.oldEnvVars)
[08:29:49.125]                 envs <- base::Sys.getenv()
[08:29:49.125]                 names <- names(envs)
[08:29:49.125]                 common <- intersect(names, old_names)
[08:29:49.125]                 added <- setdiff(names, old_names)
[08:29:49.125]                 removed <- setdiff(old_names, names)
[08:29:49.125]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.125]                   envs[common]]
[08:29:49.125]                 NAMES <- toupper(changed)
[08:29:49.125]                 args <- list()
[08:29:49.125]                 for (kk in seq_along(NAMES)) {
[08:29:49.125]                   name <- changed[[kk]]
[08:29:49.125]                   NAME <- NAMES[[kk]]
[08:29:49.125]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.125]                     next
[08:29:49.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.125]                 }
[08:29:49.125]                 NAMES <- toupper(added)
[08:29:49.125]                 for (kk in seq_along(NAMES)) {
[08:29:49.125]                   name <- added[[kk]]
[08:29:49.125]                   NAME <- NAMES[[kk]]
[08:29:49.125]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.125]                     next
[08:29:49.125]                   args[[name]] <- ""
[08:29:49.125]                 }
[08:29:49.125]                 NAMES <- toupper(removed)
[08:29:49.125]                 for (kk in seq_along(NAMES)) {
[08:29:49.125]                   name <- removed[[kk]]
[08:29:49.125]                   NAME <- NAMES[[kk]]
[08:29:49.125]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.125]                     next
[08:29:49.125]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.125]                 }
[08:29:49.125]                 if (length(args) > 0) 
[08:29:49.125]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.125]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.125]             }
[08:29:49.125]             else {
[08:29:49.125]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.125]             }
[08:29:49.125]             {
[08:29:49.125]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.125]                   0L) {
[08:29:49.125]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.125]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.125]                   base::options(opts)
[08:29:49.125]                 }
[08:29:49.125]                 {
[08:29:49.125]                   {
[08:29:49.125]                     NULL
[08:29:49.125]                     RNGkind("Mersenne-Twister")
[08:29:49.125]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.125]                       inherits = FALSE)
[08:29:49.125]                   }
[08:29:49.125]                   options(future.plan = NULL)
[08:29:49.125]                   if (is.na(NA_character_)) 
[08:29:49.125]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.125]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.125]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.125]                     .init = FALSE)
[08:29:49.125]                 }
[08:29:49.125]             }
[08:29:49.125]         }
[08:29:49.125]     })
[08:29:49.125]     if (FALSE) {
[08:29:49.125]         base::sink(type = "output", split = FALSE)
[08:29:49.125]         if (NA) {
[08:29:49.125]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.125]         }
[08:29:49.125]         else {
[08:29:49.125]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.125]         }
[08:29:49.125]         base::close(...future.stdout)
[08:29:49.125]         ...future.stdout <- NULL
[08:29:49.125]     }
[08:29:49.125]     ...future.result$conditions <- ...future.conditions
[08:29:49.125]     ...future.result$finished <- base::Sys.time()
[08:29:49.125]     ...future.result
[08:29:49.125] }
[08:29:49.127] plan(): Setting new future strategy stack:
[08:29:49.127] List of future strategies:
[08:29:49.127] 1. sequential:
[08:29:49.127]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.127]    - tweaked: FALSE
[08:29:49.127]    - call: NULL
[08:29:49.127] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:29:49.129] plan(): Setting new future strategy stack:
[08:29:49.129] List of future strategies:
[08:29:49.129] 1. sequential:
[08:29:49.129]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.129]    - tweaked: FALSE
[08:29:49.129]    - call: plan(strategy)
[08:29:49.129] plan(): nbrOfWorkers() = 1
[08:29:49.129] SequentialFuture started (and completed)
[08:29:49.130] - Launch lazy future ... done
[08:29:49.130] run() for ‘SequentialFuture’ ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "f51d19c2-2e72-ddae-aef8-c0bafe8ed1a3"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85025
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:48"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:49.138] getGlobalsAndPackages() ...
[08:29:49.139] Searching for globals...
[08:29:49.141] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.141] Searching for globals ... DONE
[08:29:49.142] Resolving globals: FALSE
[08:29:49.142] 
[08:29:49.142] - packages: [1] ‘utils’
[08:29:49.142] getGlobalsAndPackages() ... DONE
[08:29:49.143] run() for ‘Future’ ...
[08:29:49.143] - state: ‘created’
[08:29:49.143] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.143] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.143] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.143]   - Field: ‘label’
[08:29:49.143]   - Field: ‘local’
[08:29:49.143]   - Field: ‘owner’
[08:29:49.143]   - Field: ‘envir’
[08:29:49.144]   - Field: ‘packages’
[08:29:49.144]   - Field: ‘gc’
[08:29:49.144]   - Field: ‘conditions’
[08:29:49.144]   - Field: ‘expr’
[08:29:49.144]   - Field: ‘uuid’
[08:29:49.144]   - Field: ‘seed’
[08:29:49.144]   - Field: ‘version’
[08:29:49.144]   - Field: ‘result’
[08:29:49.144]   - Field: ‘asynchronous’
[08:29:49.144]   - Field: ‘calls’
[08:29:49.144]   - Field: ‘globals’
[08:29:49.144]   - Field: ‘stdout’
[08:29:49.145]   - Field: ‘earlySignal’
[08:29:49.145]   - Field: ‘lazy’
[08:29:49.145]   - Field: ‘state’
[08:29:49.145] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.145] - Launch lazy future ...
[08:29:49.145] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.145] Packages needed by future strategies (n = 0): <none>
[08:29:49.146] {
[08:29:49.146]     {
[08:29:49.146]         {
[08:29:49.146]             ...future.startTime <- base::Sys.time()
[08:29:49.146]             {
[08:29:49.146]                 {
[08:29:49.146]                   {
[08:29:49.146]                     {
[08:29:49.146]                       base::local({
[08:29:49.146]                         has_future <- base::requireNamespace("future", 
[08:29:49.146]                           quietly = TRUE)
[08:29:49.146]                         if (has_future) {
[08:29:49.146]                           ns <- base::getNamespace("future")
[08:29:49.146]                           version <- ns[[".package"]][["version"]]
[08:29:49.146]                           if (is.null(version)) 
[08:29:49.146]                             version <- utils::packageVersion("future")
[08:29:49.146]                         }
[08:29:49.146]                         else {
[08:29:49.146]                           version <- NULL
[08:29:49.146]                         }
[08:29:49.146]                         if (!has_future || version < "1.8.0") {
[08:29:49.146]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.146]                             "", base::R.version$version.string), 
[08:29:49.146]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.146]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.146]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.146]                               "release", "version")], collapse = " "), 
[08:29:49.146]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.146]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.146]                             info)
[08:29:49.146]                           info <- base::paste(info, collapse = "; ")
[08:29:49.146]                           if (!has_future) {
[08:29:49.146]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.146]                               info)
[08:29:49.146]                           }
[08:29:49.146]                           else {
[08:29:49.146]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.146]                               info, version)
[08:29:49.146]                           }
[08:29:49.146]                           base::stop(msg)
[08:29:49.146]                         }
[08:29:49.146]                       })
[08:29:49.146]                     }
[08:29:49.146]                     base::local({
[08:29:49.146]                       for (pkg in "utils") {
[08:29:49.146]                         base::loadNamespace(pkg)
[08:29:49.146]                         base::library(pkg, character.only = TRUE)
[08:29:49.146]                       }
[08:29:49.146]                     })
[08:29:49.146]                   }
[08:29:49.146]                   ...future.strategy.old <- future::plan("list")
[08:29:49.146]                   options(future.plan = NULL)
[08:29:49.146]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.146]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.146]                 }
[08:29:49.146]                 ...future.workdir <- getwd()
[08:29:49.146]             }
[08:29:49.146]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.146]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.146]         }
[08:29:49.146]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.146]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.146]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.146]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.146]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.146]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.146]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.146]             base::names(...future.oldOptions))
[08:29:49.146]     }
[08:29:49.146]     if (TRUE) {
[08:29:49.146]     }
[08:29:49.146]     else {
[08:29:49.146]         if (NA) {
[08:29:49.146]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.146]                 open = "w")
[08:29:49.146]         }
[08:29:49.146]         else {
[08:29:49.146]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.146]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.146]         }
[08:29:49.146]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.146]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.146]             base::sink(type = "output", split = FALSE)
[08:29:49.146]             base::close(...future.stdout)
[08:29:49.146]         }, add = TRUE)
[08:29:49.146]     }
[08:29:49.146]     ...future.frame <- base::sys.nframe()
[08:29:49.146]     ...future.conditions <- base::list()
[08:29:49.146]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.146]     if (FALSE) {
[08:29:49.146]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.146]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.146]     }
[08:29:49.146]     ...future.result <- base::tryCatch({
[08:29:49.146]         base::withCallingHandlers({
[08:29:49.146]             ...future.value <- base::withVisible(base::local({
[08:29:49.146]                 print(1:50)
[08:29:49.146]                 str(1:50)
[08:29:49.146]                 cat(letters, sep = "-")
[08:29:49.146]                 cat(1:6, collapse = "\n")
[08:29:49.146]                 write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.146]                 42L
[08:29:49.146]             }))
[08:29:49.146]             future::FutureResult(value = ...future.value$value, 
[08:29:49.146]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.146]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.146]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.146]                     ...future.globalenv.names))
[08:29:49.146]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.146]         }, condition = base::local({
[08:29:49.146]             c <- base::c
[08:29:49.146]             inherits <- base::inherits
[08:29:49.146]             invokeRestart <- base::invokeRestart
[08:29:49.146]             length <- base::length
[08:29:49.146]             list <- base::list
[08:29:49.146]             seq.int <- base::seq.int
[08:29:49.146]             signalCondition <- base::signalCondition
[08:29:49.146]             sys.calls <- base::sys.calls
[08:29:49.146]             `[[` <- base::`[[`
[08:29:49.146]             `+` <- base::`+`
[08:29:49.146]             `<<-` <- base::`<<-`
[08:29:49.146]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.146]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.146]                   3L)]
[08:29:49.146]             }
[08:29:49.146]             function(cond) {
[08:29:49.146]                 is_error <- inherits(cond, "error")
[08:29:49.146]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.146]                   NULL)
[08:29:49.146]                 if (is_error) {
[08:29:49.146]                   sessionInformation <- function() {
[08:29:49.146]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.146]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.146]                       search = base::search(), system = base::Sys.info())
[08:29:49.146]                   }
[08:29:49.146]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.146]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.146]                     cond$call), session = sessionInformation(), 
[08:29:49.146]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.146]                   signalCondition(cond)
[08:29:49.146]                 }
[08:29:49.146]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.146]                 "immediateCondition"))) {
[08:29:49.146]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.146]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.146]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.146]                   if (TRUE && !signal) {
[08:29:49.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.146]                     {
[08:29:49.146]                       inherits <- base::inherits
[08:29:49.146]                       invokeRestart <- base::invokeRestart
[08:29:49.146]                       is.null <- base::is.null
[08:29:49.146]                       muffled <- FALSE
[08:29:49.146]                       if (inherits(cond, "message")) {
[08:29:49.146]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.146]                         if (muffled) 
[08:29:49.146]                           invokeRestart("muffleMessage")
[08:29:49.146]                       }
[08:29:49.146]                       else if (inherits(cond, "warning")) {
[08:29:49.146]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.146]                         if (muffled) 
[08:29:49.146]                           invokeRestart("muffleWarning")
[08:29:49.146]                       }
[08:29:49.146]                       else if (inherits(cond, "condition")) {
[08:29:49.146]                         if (!is.null(pattern)) {
[08:29:49.146]                           computeRestarts <- base::computeRestarts
[08:29:49.146]                           grepl <- base::grepl
[08:29:49.146]                           restarts <- computeRestarts(cond)
[08:29:49.146]                           for (restart in restarts) {
[08:29:49.146]                             name <- restart$name
[08:29:49.146]                             if (is.null(name)) 
[08:29:49.146]                               next
[08:29:49.146]                             if (!grepl(pattern, name)) 
[08:29:49.146]                               next
[08:29:49.146]                             invokeRestart(restart)
[08:29:49.146]                             muffled <- TRUE
[08:29:49.146]                             break
[08:29:49.146]                           }
[08:29:49.146]                         }
[08:29:49.146]                       }
[08:29:49.146]                       invisible(muffled)
[08:29:49.146]                     }
[08:29:49.146]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.146]                   }
[08:29:49.146]                 }
[08:29:49.146]                 else {
[08:29:49.146]                   if (TRUE) {
[08:29:49.146]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.146]                     {
[08:29:49.146]                       inherits <- base::inherits
[08:29:49.146]                       invokeRestart <- base::invokeRestart
[08:29:49.146]                       is.null <- base::is.null
[08:29:49.146]                       muffled <- FALSE
[08:29:49.146]                       if (inherits(cond, "message")) {
[08:29:49.146]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.146]                         if (muffled) 
[08:29:49.146]                           invokeRestart("muffleMessage")
[08:29:49.146]                       }
[08:29:49.146]                       else if (inherits(cond, "warning")) {
[08:29:49.146]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.146]                         if (muffled) 
[08:29:49.146]                           invokeRestart("muffleWarning")
[08:29:49.146]                       }
[08:29:49.146]                       else if (inherits(cond, "condition")) {
[08:29:49.146]                         if (!is.null(pattern)) {
[08:29:49.146]                           computeRestarts <- base::computeRestarts
[08:29:49.146]                           grepl <- base::grepl
[08:29:49.146]                           restarts <- computeRestarts(cond)
[08:29:49.146]                           for (restart in restarts) {
[08:29:49.146]                             name <- restart$name
[08:29:49.146]                             if (is.null(name)) 
[08:29:49.146]                               next
[08:29:49.146]                             if (!grepl(pattern, name)) 
[08:29:49.146]                               next
[08:29:49.146]                             invokeRestart(restart)
[08:29:49.146]                             muffled <- TRUE
[08:29:49.146]                             break
[08:29:49.146]                           }
[08:29:49.146]                         }
[08:29:49.146]                       }
[08:29:49.146]                       invisible(muffled)
[08:29:49.146]                     }
[08:29:49.146]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.146]                   }
[08:29:49.146]                 }
[08:29:49.146]             }
[08:29:49.146]         }))
[08:29:49.146]     }, error = function(ex) {
[08:29:49.146]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.146]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.146]                 ...future.rng), started = ...future.startTime, 
[08:29:49.146]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.146]             version = "1.8"), class = "FutureResult")
[08:29:49.146]     }, finally = {
[08:29:49.146]         if (!identical(...future.workdir, getwd())) 
[08:29:49.146]             setwd(...future.workdir)
[08:29:49.146]         {
[08:29:49.146]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.146]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.146]             }
[08:29:49.146]             base::options(...future.oldOptions)
[08:29:49.146]             if (.Platform$OS.type == "windows") {
[08:29:49.146]                 old_names <- names(...future.oldEnvVars)
[08:29:49.146]                 envs <- base::Sys.getenv()
[08:29:49.146]                 names <- names(envs)
[08:29:49.146]                 common <- intersect(names, old_names)
[08:29:49.146]                 added <- setdiff(names, old_names)
[08:29:49.146]                 removed <- setdiff(old_names, names)
[08:29:49.146]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.146]                   envs[common]]
[08:29:49.146]                 NAMES <- toupper(changed)
[08:29:49.146]                 args <- list()
[08:29:49.146]                 for (kk in seq_along(NAMES)) {
[08:29:49.146]                   name <- changed[[kk]]
[08:29:49.146]                   NAME <- NAMES[[kk]]
[08:29:49.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.146]                     next
[08:29:49.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.146]                 }
[08:29:49.146]                 NAMES <- toupper(added)
[08:29:49.146]                 for (kk in seq_along(NAMES)) {
[08:29:49.146]                   name <- added[[kk]]
[08:29:49.146]                   NAME <- NAMES[[kk]]
[08:29:49.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.146]                     next
[08:29:49.146]                   args[[name]] <- ""
[08:29:49.146]                 }
[08:29:49.146]                 NAMES <- toupper(removed)
[08:29:49.146]                 for (kk in seq_along(NAMES)) {
[08:29:49.146]                   name <- removed[[kk]]
[08:29:49.146]                   NAME <- NAMES[[kk]]
[08:29:49.146]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.146]                     next
[08:29:49.146]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.146]                 }
[08:29:49.146]                 if (length(args) > 0) 
[08:29:49.146]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.146]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.146]             }
[08:29:49.146]             else {
[08:29:49.146]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.146]             }
[08:29:49.146]             {
[08:29:49.146]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.146]                   0L) {
[08:29:49.146]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.146]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.146]                   base::options(opts)
[08:29:49.146]                 }
[08:29:49.146]                 {
[08:29:49.146]                   {
[08:29:49.146]                     NULL
[08:29:49.146]                     RNGkind("Mersenne-Twister")
[08:29:49.146]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.146]                       inherits = FALSE)
[08:29:49.146]                   }
[08:29:49.146]                   options(future.plan = NULL)
[08:29:49.146]                   if (is.na(NA_character_)) 
[08:29:49.146]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.146]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.146]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.146]                     .init = FALSE)
[08:29:49.146]                 }
[08:29:49.146]             }
[08:29:49.146]         }
[08:29:49.146]     })
[08:29:49.146]     if (FALSE) {
[08:29:49.146]         base::sink(type = "output", split = FALSE)
[08:29:49.146]         if (NA) {
[08:29:49.146]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.146]         }
[08:29:49.146]         else {
[08:29:49.146]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.146]         }
[08:29:49.146]         base::close(...future.stdout)
[08:29:49.146]         ...future.stdout <- NULL
[08:29:49.146]     }
[08:29:49.146]     ...future.result$conditions <- ...future.conditions
[08:29:49.146]     ...future.result$finished <- base::Sys.time()
[08:29:49.146]     ...future.result
[08:29:49.146] }
[08:29:49.148] plan(): Setting new future strategy stack:
[08:29:49.148] List of future strategies:
[08:29:49.148] 1. sequential:
[08:29:49.148]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.148]    - tweaked: FALSE
[08:29:49.148]    - call: NULL
[08:29:49.148] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:29:49.150] plan(): Setting new future strategy stack:
[08:29:49.150] List of future strategies:
[08:29:49.150] 1. sequential:
[08:29:49.150]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.150]    - tweaked: FALSE
[08:29:49.150]    - call: plan(strategy)
[08:29:49.150] plan(): nbrOfWorkers() = 1
[08:29:49.150] SequentialFuture started (and completed)
[08:29:49.150] - Launch lazy future ... done
[08:29:49.151] run() for ‘SequentialFuture’ ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.151] getGlobalsAndPackages() ...
[08:29:49.151] Searching for globals...
[08:29:49.151] - globals found: [1] ‘print’
[08:29:49.152] Searching for globals ... DONE
[08:29:49.152] Resolving globals: FALSE
[08:29:49.152] 
[08:29:49.152] 
[08:29:49.152] getGlobalsAndPackages() ... DONE
[08:29:49.152] run() for ‘Future’ ...
[08:29:49.152] - state: ‘created’
[08:29:49.152] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:29:49.153] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:29:49.153] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:29:49.153]   - Field: ‘label’
[08:29:49.153]   - Field: ‘local’
[08:29:49.153]   - Field: ‘owner’
[08:29:49.153]   - Field: ‘envir’
[08:29:49.153]   - Field: ‘packages’
[08:29:49.153]   - Field: ‘gc’
[08:29:49.153]   - Field: ‘conditions’
[08:29:49.154]   - Field: ‘expr’
[08:29:49.154]   - Field: ‘uuid’
[08:29:49.154]   - Field: ‘seed’
[08:29:49.154]   - Field: ‘version’
[08:29:49.154]   - Field: ‘result’
[08:29:49.154]   - Field: ‘asynchronous’
[08:29:49.154]   - Field: ‘calls’
[08:29:49.154]   - Field: ‘globals’
[08:29:49.154]   - Field: ‘stdout’
[08:29:49.154]   - Field: ‘earlySignal’
[08:29:49.154]   - Field: ‘lazy’
[08:29:49.154]   - Field: ‘state’
[08:29:49.155] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:29:49.155] - Launch lazy future ...
[08:29:49.155] Packages needed by the future expression (n = 0): <none>
[08:29:49.155] Packages needed by future strategies (n = 0): <none>
[08:29:49.155] {
[08:29:49.155]     {
[08:29:49.155]         {
[08:29:49.155]             ...future.startTime <- base::Sys.time()
[08:29:49.155]             {
[08:29:49.155]                 {
[08:29:49.155]                   {
[08:29:49.155]                     base::local({
[08:29:49.155]                       has_future <- base::requireNamespace("future", 
[08:29:49.155]                         quietly = TRUE)
[08:29:49.155]                       if (has_future) {
[08:29:49.155]                         ns <- base::getNamespace("future")
[08:29:49.155]                         version <- ns[[".package"]][["version"]]
[08:29:49.155]                         if (is.null(version)) 
[08:29:49.155]                           version <- utils::packageVersion("future")
[08:29:49.155]                       }
[08:29:49.155]                       else {
[08:29:49.155]                         version <- NULL
[08:29:49.155]                       }
[08:29:49.155]                       if (!has_future || version < "1.8.0") {
[08:29:49.155]                         info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.155]                           "", base::R.version$version.string), 
[08:29:49.155]                           platform = base::sprintf("%s (%s-bit)", 
[08:29:49.155]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.155]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.155]                             "release", "version")], collapse = " "), 
[08:29:49.155]                           hostname = base::Sys.info()[["nodename"]])
[08:29:49.155]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.155]                           info)
[08:29:49.155]                         info <- base::paste(info, collapse = "; ")
[08:29:49.155]                         if (!has_future) {
[08:29:49.155]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.155]                             info)
[08:29:49.155]                         }
[08:29:49.155]                         else {
[08:29:49.155]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.155]                             info, version)
[08:29:49.155]                         }
[08:29:49.155]                         base::stop(msg)
[08:29:49.155]                       }
[08:29:49.155]                     })
[08:29:49.155]                   }
[08:29:49.155]                   ...future.strategy.old <- future::plan("list")
[08:29:49.155]                   options(future.plan = NULL)
[08:29:49.155]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.155]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.155]                 }
[08:29:49.155]                 ...future.workdir <- getwd()
[08:29:49.155]             }
[08:29:49.155]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.155]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.155]         }
[08:29:49.155]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.155]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.155]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.155]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.155]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.155]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.155]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.155]             base::names(...future.oldOptions))
[08:29:49.155]     }
[08:29:49.155]     if (FALSE) {
[08:29:49.155]     }
[08:29:49.155]     else {
[08:29:49.155]         if (TRUE) {
[08:29:49.155]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.155]                 open = "w")
[08:29:49.155]         }
[08:29:49.155]         else {
[08:29:49.155]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.155]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.155]         }
[08:29:49.155]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.155]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.155]             base::sink(type = "output", split = FALSE)
[08:29:49.155]             base::close(...future.stdout)
[08:29:49.155]         }, add = TRUE)
[08:29:49.155]     }
[08:29:49.155]     ...future.frame <- base::sys.nframe()
[08:29:49.155]     ...future.conditions <- base::list()
[08:29:49.155]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.155]     if (FALSE) {
[08:29:49.155]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.155]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.155]     }
[08:29:49.155]     ...future.result <- base::tryCatch({
[08:29:49.155]         base::withCallingHandlers({
[08:29:49.155]             ...future.value <- base::withVisible(base::local(print(42)))
[08:29:49.155]             future::FutureResult(value = ...future.value$value, 
[08:29:49.155]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.155]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.155]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.155]                     ...future.globalenv.names))
[08:29:49.155]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.155]         }, condition = base::local({
[08:29:49.155]             c <- base::c
[08:29:49.155]             inherits <- base::inherits
[08:29:49.155]             invokeRestart <- base::invokeRestart
[08:29:49.155]             length <- base::length
[08:29:49.155]             list <- base::list
[08:29:49.155]             seq.int <- base::seq.int
[08:29:49.155]             signalCondition <- base::signalCondition
[08:29:49.155]             sys.calls <- base::sys.calls
[08:29:49.155]             `[[` <- base::`[[`
[08:29:49.155]             `+` <- base::`+`
[08:29:49.155]             `<<-` <- base::`<<-`
[08:29:49.155]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.155]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.155]                   3L)]
[08:29:49.155]             }
[08:29:49.155]             function(cond) {
[08:29:49.155]                 is_error <- inherits(cond, "error")
[08:29:49.155]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.155]                   NULL)
[08:29:49.155]                 if (is_error) {
[08:29:49.155]                   sessionInformation <- function() {
[08:29:49.155]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.155]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.155]                       search = base::search(), system = base::Sys.info())
[08:29:49.155]                   }
[08:29:49.155]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.155]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.155]                     cond$call), session = sessionInformation(), 
[08:29:49.155]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.155]                   signalCondition(cond)
[08:29:49.155]                 }
[08:29:49.155]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.155]                 "immediateCondition"))) {
[08:29:49.155]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.155]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.155]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.155]                   if (TRUE && !signal) {
[08:29:49.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.155]                     {
[08:29:49.155]                       inherits <- base::inherits
[08:29:49.155]                       invokeRestart <- base::invokeRestart
[08:29:49.155]                       is.null <- base::is.null
[08:29:49.155]                       muffled <- FALSE
[08:29:49.155]                       if (inherits(cond, "message")) {
[08:29:49.155]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.155]                         if (muffled) 
[08:29:49.155]                           invokeRestart("muffleMessage")
[08:29:49.155]                       }
[08:29:49.155]                       else if (inherits(cond, "warning")) {
[08:29:49.155]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.155]                         if (muffled) 
[08:29:49.155]                           invokeRestart("muffleWarning")
[08:29:49.155]                       }
[08:29:49.155]                       else if (inherits(cond, "condition")) {
[08:29:49.155]                         if (!is.null(pattern)) {
[08:29:49.155]                           computeRestarts <- base::computeRestarts
[08:29:49.155]                           grepl <- base::grepl
[08:29:49.155]                           restarts <- computeRestarts(cond)
[08:29:49.155]                           for (restart in restarts) {
[08:29:49.155]                             name <- restart$name
[08:29:49.155]                             if (is.null(name)) 
[08:29:49.155]                               next
[08:29:49.155]                             if (!grepl(pattern, name)) 
[08:29:49.155]                               next
[08:29:49.155]                             invokeRestart(restart)
[08:29:49.155]                             muffled <- TRUE
[08:29:49.155]                             break
[08:29:49.155]                           }
[08:29:49.155]                         }
[08:29:49.155]                       }
[08:29:49.155]                       invisible(muffled)
[08:29:49.155]                     }
[08:29:49.155]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.155]                   }
[08:29:49.155]                 }
[08:29:49.155]                 else {
[08:29:49.155]                   if (TRUE) {
[08:29:49.155]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.155]                     {
[08:29:49.155]                       inherits <- base::inherits
[08:29:49.155]                       invokeRestart <- base::invokeRestart
[08:29:49.155]                       is.null <- base::is.null
[08:29:49.155]                       muffled <- FALSE
[08:29:49.155]                       if (inherits(cond, "message")) {
[08:29:49.155]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.155]                         if (muffled) 
[08:29:49.155]                           invokeRestart("muffleMessage")
[08:29:49.155]                       }
[08:29:49.155]                       else if (inherits(cond, "warning")) {
[08:29:49.155]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.155]                         if (muffled) 
[08:29:49.155]                           invokeRestart("muffleWarning")
[08:29:49.155]                       }
[08:29:49.155]                       else if (inherits(cond, "condition")) {
[08:29:49.155]                         if (!is.null(pattern)) {
[08:29:49.155]                           computeRestarts <- base::computeRestarts
[08:29:49.155]                           grepl <- base::grepl
[08:29:49.155]                           restarts <- computeRestarts(cond)
[08:29:49.155]                           for (restart in restarts) {
[08:29:49.155]                             name <- restart$name
[08:29:49.155]                             if (is.null(name)) 
[08:29:49.155]                               next
[08:29:49.155]                             if (!grepl(pattern, name)) 
[08:29:49.155]                               next
[08:29:49.155]                             invokeRestart(restart)
[08:29:49.155]                             muffled <- TRUE
[08:29:49.155]                             break
[08:29:49.155]                           }
[08:29:49.155]                         }
[08:29:49.155]                       }
[08:29:49.155]                       invisible(muffled)
[08:29:49.155]                     }
[08:29:49.155]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.155]                   }
[08:29:49.155]                 }
[08:29:49.155]             }
[08:29:49.155]         }))
[08:29:49.155]     }, error = function(ex) {
[08:29:49.155]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.155]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.155]                 ...future.rng), started = ...future.startTime, 
[08:29:49.155]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.155]             version = "1.8"), class = "FutureResult")
[08:29:49.155]     }, finally = {
[08:29:49.155]         if (!identical(...future.workdir, getwd())) 
[08:29:49.155]             setwd(...future.workdir)
[08:29:49.155]         {
[08:29:49.155]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.155]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.155]             }
[08:29:49.155]             base::options(...future.oldOptions)
[08:29:49.155]             if (.Platform$OS.type == "windows") {
[08:29:49.155]                 old_names <- names(...future.oldEnvVars)
[08:29:49.155]                 envs <- base::Sys.getenv()
[08:29:49.155]                 names <- names(envs)
[08:29:49.155]                 common <- intersect(names, old_names)
[08:29:49.155]                 added <- setdiff(names, old_names)
[08:29:49.155]                 removed <- setdiff(old_names, names)
[08:29:49.155]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.155]                   envs[common]]
[08:29:49.155]                 NAMES <- toupper(changed)
[08:29:49.155]                 args <- list()
[08:29:49.155]                 for (kk in seq_along(NAMES)) {
[08:29:49.155]                   name <- changed[[kk]]
[08:29:49.155]                   NAME <- NAMES[[kk]]
[08:29:49.155]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.155]                     next
[08:29:49.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.155]                 }
[08:29:49.155]                 NAMES <- toupper(added)
[08:29:49.155]                 for (kk in seq_along(NAMES)) {
[08:29:49.155]                   name <- added[[kk]]
[08:29:49.155]                   NAME <- NAMES[[kk]]
[08:29:49.155]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.155]                     next
[08:29:49.155]                   args[[name]] <- ""
[08:29:49.155]                 }
[08:29:49.155]                 NAMES <- toupper(removed)
[08:29:49.155]                 for (kk in seq_along(NAMES)) {
[08:29:49.155]                   name <- removed[[kk]]
[08:29:49.155]                   NAME <- NAMES[[kk]]
[08:29:49.155]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.155]                     next
[08:29:49.155]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.155]                 }
[08:29:49.155]                 if (length(args) > 0) 
[08:29:49.155]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.155]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.155]             }
[08:29:49.155]             else {
[08:29:49.155]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.155]             }
[08:29:49.155]             {
[08:29:49.155]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.155]                   0L) {
[08:29:49.155]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.155]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.155]                   base::options(opts)
[08:29:49.155]                 }
[08:29:49.155]                 {
[08:29:49.155]                   {
[08:29:49.155]                     NULL
[08:29:49.155]                     RNGkind("Mersenne-Twister")
[08:29:49.155]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:29:49.155]                       inherits = FALSE)
[08:29:49.155]                   }
[08:29:49.155]                   options(future.plan = NULL)
[08:29:49.155]                   if (is.na(NA_character_)) 
[08:29:49.155]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.155]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.155]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.155]                     .init = FALSE)
[08:29:49.155]                 }
[08:29:49.155]             }
[08:29:49.155]         }
[08:29:49.155]     })
[08:29:49.155]     if (TRUE) {
[08:29:49.155]         base::sink(type = "output", split = FALSE)
[08:29:49.155]         if (TRUE) {
[08:29:49.155]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.155]         }
[08:29:49.155]         else {
[08:29:49.155]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.155]         }
[08:29:49.155]         base::close(...future.stdout)
[08:29:49.155]         ...future.stdout <- NULL
[08:29:49.155]     }
[08:29:49.155]     ...future.result$conditions <- ...future.conditions
[08:29:49.155]     ...future.result$finished <- base::Sys.time()
[08:29:49.155]     ...future.result
[08:29:49.155] }
[08:29:49.157] plan(): Setting new future strategy stack:
[08:29:49.157] List of future strategies:
[08:29:49.157] 1. sequential:
[08:29:49.157]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.157]    - tweaked: FALSE
[08:29:49.157]    - call: NULL
[08:29:49.158] plan(): nbrOfWorkers() = 1
[08:29:49.158] plan(): Setting new future strategy stack:
[08:29:49.158] List of future strategies:
[08:29:49.158] 1. sequential:
[08:29:49.158]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.158]    - tweaked: FALSE
[08:29:49.158]    - call: plan(strategy)
[08:29:49.159] plan(): nbrOfWorkers() = 1
[08:29:49.159] SequentialFuture started (and completed)
[08:29:49.159] - Launch lazy future ... done
[08:29:49.159] run() for ‘SequentialFuture’ ... done
[1] 42
sequential ... done
Testing with 1 cores ... done
Testing with 2 cores ...
multicore ...
[08:29:49.166] plan(): Setting new future strategy stack:
[08:29:49.166] List of future strategies:
[08:29:49.166] 1. multicore:
[08:29:49.166]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.166]    - tweaked: FALSE
[08:29:49.166]    - call: plan(strategy)
[08:29:49.168] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[08:29:49.168] getGlobalsAndPackages() ...
[08:29:49.168] Searching for globals...
[08:29:49.171] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.171] Searching for globals ... DONE
[08:29:49.171] Resolving globals: FALSE
[08:29:49.172] 
[08:29:49.172] - packages: [1] ‘utils’
[08:29:49.172] getGlobalsAndPackages() ... DONE
[08:29:49.172] run() for ‘Future’ ...
[08:29:49.172] - state: ‘created’
[08:29:49.172] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.174] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.174] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.174]   - Field: ‘label’
[08:29:49.174]   - Field: ‘local’
[08:29:49.174]   - Field: ‘owner’
[08:29:49.174]   - Field: ‘envir’
[08:29:49.174]   - Field: ‘workers’
[08:29:49.175]   - Field: ‘packages’
[08:29:49.175]   - Field: ‘gc’
[08:29:49.175]   - Field: ‘job’
[08:29:49.175]   - Field: ‘conditions’
[08:29:49.175]   - Field: ‘expr’
[08:29:49.175]   - Field: ‘uuid’
[08:29:49.175]   - Field: ‘seed’
[08:29:49.175]   - Field: ‘version’
[08:29:49.175]   - Field: ‘result’
[08:29:49.175]   - Field: ‘asynchronous’
[08:29:49.175]   - Field: ‘calls’
[08:29:49.175]   - Field: ‘globals’
[08:29:49.176]   - Field: ‘stdout’
[08:29:49.176]   - Field: ‘earlySignal’
[08:29:49.176]   - Field: ‘lazy’
[08:29:49.176]   - Field: ‘state’
[08:29:49.176] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.176] - Launch lazy future ...
[08:29:49.177] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.177] Packages needed by future strategies (n = 0): <none>
[08:29:49.177] {
[08:29:49.177]     {
[08:29:49.177]         {
[08:29:49.177]             ...future.startTime <- base::Sys.time()
[08:29:49.177]             {
[08:29:49.177]                 {
[08:29:49.177]                   {
[08:29:49.177]                     {
[08:29:49.177]                       {
[08:29:49.177]                         base::local({
[08:29:49.177]                           has_future <- base::requireNamespace("future", 
[08:29:49.177]                             quietly = TRUE)
[08:29:49.177]                           if (has_future) {
[08:29:49.177]                             ns <- base::getNamespace("future")
[08:29:49.177]                             version <- ns[[".package"]][["version"]]
[08:29:49.177]                             if (is.null(version)) 
[08:29:49.177]                               version <- utils::packageVersion("future")
[08:29:49.177]                           }
[08:29:49.177]                           else {
[08:29:49.177]                             version <- NULL
[08:29:49.177]                           }
[08:29:49.177]                           if (!has_future || version < "1.8.0") {
[08:29:49.177]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.177]                               "", base::R.version$version.string), 
[08:29:49.177]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.177]                                 base::R.version$platform, 8 * 
[08:29:49.177]                                   base::.Machine$sizeof.pointer), 
[08:29:49.177]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.177]                                 "release", "version")], collapse = " "), 
[08:29:49.177]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.177]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.177]                               info)
[08:29:49.177]                             info <- base::paste(info, collapse = "; ")
[08:29:49.177]                             if (!has_future) {
[08:29:49.177]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.177]                                 info)
[08:29:49.177]                             }
[08:29:49.177]                             else {
[08:29:49.177]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.177]                                 info, version)
[08:29:49.177]                             }
[08:29:49.177]                             base::stop(msg)
[08:29:49.177]                           }
[08:29:49.177]                         })
[08:29:49.177]                       }
[08:29:49.177]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.177]                       base::options(mc.cores = 1L)
[08:29:49.177]                     }
[08:29:49.177]                     base::local({
[08:29:49.177]                       for (pkg in "utils") {
[08:29:49.177]                         base::loadNamespace(pkg)
[08:29:49.177]                         base::library(pkg, character.only = TRUE)
[08:29:49.177]                       }
[08:29:49.177]                     })
[08:29:49.177]                   }
[08:29:49.177]                   ...future.strategy.old <- future::plan("list")
[08:29:49.177]                   options(future.plan = NULL)
[08:29:49.177]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.177]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.177]                 }
[08:29:49.177]                 ...future.workdir <- getwd()
[08:29:49.177]             }
[08:29:49.177]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.177]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.177]         }
[08:29:49.177]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.177]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.177]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.177]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.177]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.177]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.177]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.177]             base::names(...future.oldOptions))
[08:29:49.177]     }
[08:29:49.177]     if (FALSE) {
[08:29:49.177]     }
[08:29:49.177]     else {
[08:29:49.177]         if (TRUE) {
[08:29:49.177]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.177]                 open = "w")
[08:29:49.177]         }
[08:29:49.177]         else {
[08:29:49.177]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.177]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.177]         }
[08:29:49.177]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.177]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.177]             base::sink(type = "output", split = FALSE)
[08:29:49.177]             base::close(...future.stdout)
[08:29:49.177]         }, add = TRUE)
[08:29:49.177]     }
[08:29:49.177]     ...future.frame <- base::sys.nframe()
[08:29:49.177]     ...future.conditions <- base::list()
[08:29:49.177]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.177]     if (FALSE) {
[08:29:49.177]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.177]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.177]     }
[08:29:49.177]     ...future.result <- base::tryCatch({
[08:29:49.177]         base::withCallingHandlers({
[08:29:49.177]             ...future.value <- base::withVisible(base::local({
[08:29:49.177]                 withCallingHandlers({
[08:29:49.177]                   {
[08:29:49.177]                     print(1:50)
[08:29:49.177]                     str(1:50)
[08:29:49.177]                     cat(letters, sep = "-")
[08:29:49.177]                     cat(1:6, collapse = "\n")
[08:29:49.177]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.177]                     42L
[08:29:49.177]                   }
[08:29:49.177]                 }, immediateCondition = function(cond) {
[08:29:49.177]                   save_rds <- function (object, pathname, ...) 
[08:29:49.177]                   {
[08:29:49.177]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.177]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.177]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.177]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.177]                         fi_tmp[["mtime"]])
[08:29:49.177]                     }
[08:29:49.177]                     tryCatch({
[08:29:49.177]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.177]                     }, error = function(ex) {
[08:29:49.177]                       msg <- conditionMessage(ex)
[08:29:49.177]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.177]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.177]                         fi_tmp[["mtime"]], msg)
[08:29:49.177]                       ex$message <- msg
[08:29:49.177]                       stop(ex)
[08:29:49.177]                     })
[08:29:49.177]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.177]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.177]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.177]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.177]                       fi <- file.info(pathname)
[08:29:49.177]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.177]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.177]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.177]                         fi[["size"]], fi[["mtime"]])
[08:29:49.177]                       stop(msg)
[08:29:49.177]                     }
[08:29:49.177]                     invisible(pathname)
[08:29:49.177]                   }
[08:29:49.177]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.177]                     rootPath = tempdir()) 
[08:29:49.177]                   {
[08:29:49.177]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.177]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.177]                       tmpdir = path, fileext = ".rds")
[08:29:49.177]                     save_rds(obj, file)
[08:29:49.177]                   }
[08:29:49.177]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.177]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.177]                   {
[08:29:49.177]                     inherits <- base::inherits
[08:29:49.177]                     invokeRestart <- base::invokeRestart
[08:29:49.177]                     is.null <- base::is.null
[08:29:49.177]                     muffled <- FALSE
[08:29:49.177]                     if (inherits(cond, "message")) {
[08:29:49.177]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.177]                       if (muffled) 
[08:29:49.177]                         invokeRestart("muffleMessage")
[08:29:49.177]                     }
[08:29:49.177]                     else if (inherits(cond, "warning")) {
[08:29:49.177]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.177]                       if (muffled) 
[08:29:49.177]                         invokeRestart("muffleWarning")
[08:29:49.177]                     }
[08:29:49.177]                     else if (inherits(cond, "condition")) {
[08:29:49.177]                       if (!is.null(pattern)) {
[08:29:49.177]                         computeRestarts <- base::computeRestarts
[08:29:49.177]                         grepl <- base::grepl
[08:29:49.177]                         restarts <- computeRestarts(cond)
[08:29:49.177]                         for (restart in restarts) {
[08:29:49.177]                           name <- restart$name
[08:29:49.177]                           if (is.null(name)) 
[08:29:49.177]                             next
[08:29:49.177]                           if (!grepl(pattern, name)) 
[08:29:49.177]                             next
[08:29:49.177]                           invokeRestart(restart)
[08:29:49.177]                           muffled <- TRUE
[08:29:49.177]                           break
[08:29:49.177]                         }
[08:29:49.177]                       }
[08:29:49.177]                     }
[08:29:49.177]                     invisible(muffled)
[08:29:49.177]                   }
[08:29:49.177]                   muffleCondition(cond)
[08:29:49.177]                 })
[08:29:49.177]             }))
[08:29:49.177]             future::FutureResult(value = ...future.value$value, 
[08:29:49.177]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.177]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.177]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.177]                     ...future.globalenv.names))
[08:29:49.177]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.177]         }, condition = base::local({
[08:29:49.177]             c <- base::c
[08:29:49.177]             inherits <- base::inherits
[08:29:49.177]             invokeRestart <- base::invokeRestart
[08:29:49.177]             length <- base::length
[08:29:49.177]             list <- base::list
[08:29:49.177]             seq.int <- base::seq.int
[08:29:49.177]             signalCondition <- base::signalCondition
[08:29:49.177]             sys.calls <- base::sys.calls
[08:29:49.177]             `[[` <- base::`[[`
[08:29:49.177]             `+` <- base::`+`
[08:29:49.177]             `<<-` <- base::`<<-`
[08:29:49.177]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.177]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.177]                   3L)]
[08:29:49.177]             }
[08:29:49.177]             function(cond) {
[08:29:49.177]                 is_error <- inherits(cond, "error")
[08:29:49.177]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.177]                   NULL)
[08:29:49.177]                 if (is_error) {
[08:29:49.177]                   sessionInformation <- function() {
[08:29:49.177]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.177]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.177]                       search = base::search(), system = base::Sys.info())
[08:29:49.177]                   }
[08:29:49.177]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.177]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.177]                     cond$call), session = sessionInformation(), 
[08:29:49.177]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.177]                   signalCondition(cond)
[08:29:49.177]                 }
[08:29:49.177]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.177]                 "immediateCondition"))) {
[08:29:49.177]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.177]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.177]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.177]                   if (TRUE && !signal) {
[08:29:49.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.177]                     {
[08:29:49.177]                       inherits <- base::inherits
[08:29:49.177]                       invokeRestart <- base::invokeRestart
[08:29:49.177]                       is.null <- base::is.null
[08:29:49.177]                       muffled <- FALSE
[08:29:49.177]                       if (inherits(cond, "message")) {
[08:29:49.177]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.177]                         if (muffled) 
[08:29:49.177]                           invokeRestart("muffleMessage")
[08:29:49.177]                       }
[08:29:49.177]                       else if (inherits(cond, "warning")) {
[08:29:49.177]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.177]                         if (muffled) 
[08:29:49.177]                           invokeRestart("muffleWarning")
[08:29:49.177]                       }
[08:29:49.177]                       else if (inherits(cond, "condition")) {
[08:29:49.177]                         if (!is.null(pattern)) {
[08:29:49.177]                           computeRestarts <- base::computeRestarts
[08:29:49.177]                           grepl <- base::grepl
[08:29:49.177]                           restarts <- computeRestarts(cond)
[08:29:49.177]                           for (restart in restarts) {
[08:29:49.177]                             name <- restart$name
[08:29:49.177]                             if (is.null(name)) 
[08:29:49.177]                               next
[08:29:49.177]                             if (!grepl(pattern, name)) 
[08:29:49.177]                               next
[08:29:49.177]                             invokeRestart(restart)
[08:29:49.177]                             muffled <- TRUE
[08:29:49.177]                             break
[08:29:49.177]                           }
[08:29:49.177]                         }
[08:29:49.177]                       }
[08:29:49.177]                       invisible(muffled)
[08:29:49.177]                     }
[08:29:49.177]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.177]                   }
[08:29:49.177]                 }
[08:29:49.177]                 else {
[08:29:49.177]                   if (TRUE) {
[08:29:49.177]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.177]                     {
[08:29:49.177]                       inherits <- base::inherits
[08:29:49.177]                       invokeRestart <- base::invokeRestart
[08:29:49.177]                       is.null <- base::is.null
[08:29:49.177]                       muffled <- FALSE
[08:29:49.177]                       if (inherits(cond, "message")) {
[08:29:49.177]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.177]                         if (muffled) 
[08:29:49.177]                           invokeRestart("muffleMessage")
[08:29:49.177]                       }
[08:29:49.177]                       else if (inherits(cond, "warning")) {
[08:29:49.177]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.177]                         if (muffled) 
[08:29:49.177]                           invokeRestart("muffleWarning")
[08:29:49.177]                       }
[08:29:49.177]                       else if (inherits(cond, "condition")) {
[08:29:49.177]                         if (!is.null(pattern)) {
[08:29:49.177]                           computeRestarts <- base::computeRestarts
[08:29:49.177]                           grepl <- base::grepl
[08:29:49.177]                           restarts <- computeRestarts(cond)
[08:29:49.177]                           for (restart in restarts) {
[08:29:49.177]                             name <- restart$name
[08:29:49.177]                             if (is.null(name)) 
[08:29:49.177]                               next
[08:29:49.177]                             if (!grepl(pattern, name)) 
[08:29:49.177]                               next
[08:29:49.177]                             invokeRestart(restart)
[08:29:49.177]                             muffled <- TRUE
[08:29:49.177]                             break
[08:29:49.177]                           }
[08:29:49.177]                         }
[08:29:49.177]                       }
[08:29:49.177]                       invisible(muffled)
[08:29:49.177]                     }
[08:29:49.177]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.177]                   }
[08:29:49.177]                 }
[08:29:49.177]             }
[08:29:49.177]         }))
[08:29:49.177]     }, error = function(ex) {
[08:29:49.177]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.177]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.177]                 ...future.rng), started = ...future.startTime, 
[08:29:49.177]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.177]             version = "1.8"), class = "FutureResult")
[08:29:49.177]     }, finally = {
[08:29:49.177]         if (!identical(...future.workdir, getwd())) 
[08:29:49.177]             setwd(...future.workdir)
[08:29:49.177]         {
[08:29:49.177]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.177]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.177]             }
[08:29:49.177]             base::options(...future.oldOptions)
[08:29:49.177]             if (.Platform$OS.type == "windows") {
[08:29:49.177]                 old_names <- names(...future.oldEnvVars)
[08:29:49.177]                 envs <- base::Sys.getenv()
[08:29:49.177]                 names <- names(envs)
[08:29:49.177]                 common <- intersect(names, old_names)
[08:29:49.177]                 added <- setdiff(names, old_names)
[08:29:49.177]                 removed <- setdiff(old_names, names)
[08:29:49.177]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.177]                   envs[common]]
[08:29:49.177]                 NAMES <- toupper(changed)
[08:29:49.177]                 args <- list()
[08:29:49.177]                 for (kk in seq_along(NAMES)) {
[08:29:49.177]                   name <- changed[[kk]]
[08:29:49.177]                   NAME <- NAMES[[kk]]
[08:29:49.177]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.177]                     next
[08:29:49.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.177]                 }
[08:29:49.177]                 NAMES <- toupper(added)
[08:29:49.177]                 for (kk in seq_along(NAMES)) {
[08:29:49.177]                   name <- added[[kk]]
[08:29:49.177]                   NAME <- NAMES[[kk]]
[08:29:49.177]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.177]                     next
[08:29:49.177]                   args[[name]] <- ""
[08:29:49.177]                 }
[08:29:49.177]                 NAMES <- toupper(removed)
[08:29:49.177]                 for (kk in seq_along(NAMES)) {
[08:29:49.177]                   name <- removed[[kk]]
[08:29:49.177]                   NAME <- NAMES[[kk]]
[08:29:49.177]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.177]                     next
[08:29:49.177]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.177]                 }
[08:29:49.177]                 if (length(args) > 0) 
[08:29:49.177]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.177]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.177]             }
[08:29:49.177]             else {
[08:29:49.177]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.177]             }
[08:29:49.177]             {
[08:29:49.177]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.177]                   0L) {
[08:29:49.177]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.177]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.177]                   base::options(opts)
[08:29:49.177]                 }
[08:29:49.177]                 {
[08:29:49.177]                   {
[08:29:49.177]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.177]                     NULL
[08:29:49.177]                   }
[08:29:49.177]                   options(future.plan = NULL)
[08:29:49.177]                   if (is.na(NA_character_)) 
[08:29:49.177]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.177]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.177]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.177]                     .init = FALSE)
[08:29:49.177]                 }
[08:29:49.177]             }
[08:29:49.177]         }
[08:29:49.177]     })
[08:29:49.177]     if (TRUE) {
[08:29:49.177]         base::sink(type = "output", split = FALSE)
[08:29:49.177]         if (TRUE) {
[08:29:49.177]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.177]         }
[08:29:49.177]         else {
[08:29:49.177]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.177]         }
[08:29:49.177]         base::close(...future.stdout)
[08:29:49.177]         ...future.stdout <- NULL
[08:29:49.177]     }
[08:29:49.177]     ...future.result$conditions <- ...future.conditions
[08:29:49.177]     ...future.result$finished <- base::Sys.time()
[08:29:49.177]     ...future.result
[08:29:49.177] }
[08:29:49.180] requestCore(): workers = 2
[08:29:49.183] MulticoreFuture started
[08:29:49.183] - Launch lazy future ... done
[08:29:49.183] run() for ‘MulticoreFuture’ ... done
[08:29:49.184] plan(): Setting new future strategy stack:
[08:29:49.184] result() for MulticoreFuture ...
[08:29:49.184] List of future strategies:
[08:29:49.184] 1. sequential:
[08:29:49.184]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.184]    - tweaked: FALSE
[08:29:49.184]    - call: NULL
[08:29:49.185] plan(): nbrOfWorkers() = 1
[08:29:49.188] plan(): Setting new future strategy stack:
[08:29:49.189] List of future strategies:
[08:29:49.189] 1. multicore:
[08:29:49.189]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.189]    - tweaked: FALSE
[08:29:49.189]    - call: plan(strategy)
[08:29:49.192] plan(): nbrOfWorkers() = 2
[08:29:49.196] result() for MulticoreFuture ...
[08:29:49.196] result() for MulticoreFuture ... done
[08:29:49.196] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "6238298e-be57-6393-0bc3-b388a0ea3e5b"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85047
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:49.208] result() for MulticoreFuture ...
[08:29:49.208] result() for MulticoreFuture ... done
[08:29:49.209] result() for MulticoreFuture ...
[08:29:49.209] result() for MulticoreFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.00908041 secs (started 2025-06-17 08:29:49.183225)
version: 1.8
[08:29:49.209] getGlobalsAndPackages() ...
[08:29:49.210] Searching for globals...
[08:29:49.213] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.214] Searching for globals ... DONE
[08:29:49.214] Resolving globals: FALSE
[08:29:49.214] 
[08:29:49.214] - packages: [1] ‘utils’
[08:29:49.214] getGlobalsAndPackages() ... DONE
[08:29:49.215] run() for ‘Future’ ...
[08:29:49.215] - state: ‘created’
[08:29:49.215] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.217] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.217] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.217]   - Field: ‘label’
[08:29:49.217]   - Field: ‘local’
[08:29:49.217]   - Field: ‘owner’
[08:29:49.218]   - Field: ‘envir’
[08:29:49.218]   - Field: ‘workers’
[08:29:49.218]   - Field: ‘packages’
[08:29:49.218]   - Field: ‘gc’
[08:29:49.218]   - Field: ‘job’
[08:29:49.218]   - Field: ‘conditions’
[08:29:49.218]   - Field: ‘expr’
[08:29:49.218]   - Field: ‘uuid’
[08:29:49.218]   - Field: ‘seed’
[08:29:49.218]   - Field: ‘version’
[08:29:49.219]   - Field: ‘result’
[08:29:49.219]   - Field: ‘asynchronous’
[08:29:49.219]   - Field: ‘calls’
[08:29:49.219]   - Field: ‘globals’
[08:29:49.219]   - Field: ‘stdout’
[08:29:49.219]   - Field: ‘earlySignal’
[08:29:49.219]   - Field: ‘lazy’
[08:29:49.219]   - Field: ‘state’
[08:29:49.219] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.219] - Launch lazy future ...
[08:29:49.220] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.220] Packages needed by future strategies (n = 0): <none>
[08:29:49.221] {
[08:29:49.221]     {
[08:29:49.221]         {
[08:29:49.221]             ...future.startTime <- base::Sys.time()
[08:29:49.221]             {
[08:29:49.221]                 {
[08:29:49.221]                   {
[08:29:49.221]                     {
[08:29:49.221]                       {
[08:29:49.221]                         base::local({
[08:29:49.221]                           has_future <- base::requireNamespace("future", 
[08:29:49.221]                             quietly = TRUE)
[08:29:49.221]                           if (has_future) {
[08:29:49.221]                             ns <- base::getNamespace("future")
[08:29:49.221]                             version <- ns[[".package"]][["version"]]
[08:29:49.221]                             if (is.null(version)) 
[08:29:49.221]                               version <- utils::packageVersion("future")
[08:29:49.221]                           }
[08:29:49.221]                           else {
[08:29:49.221]                             version <- NULL
[08:29:49.221]                           }
[08:29:49.221]                           if (!has_future || version < "1.8.0") {
[08:29:49.221]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.221]                               "", base::R.version$version.string), 
[08:29:49.221]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.221]                                 base::R.version$platform, 8 * 
[08:29:49.221]                                   base::.Machine$sizeof.pointer), 
[08:29:49.221]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.221]                                 "release", "version")], collapse = " "), 
[08:29:49.221]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.221]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.221]                               info)
[08:29:49.221]                             info <- base::paste(info, collapse = "; ")
[08:29:49.221]                             if (!has_future) {
[08:29:49.221]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.221]                                 info)
[08:29:49.221]                             }
[08:29:49.221]                             else {
[08:29:49.221]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.221]                                 info, version)
[08:29:49.221]                             }
[08:29:49.221]                             base::stop(msg)
[08:29:49.221]                           }
[08:29:49.221]                         })
[08:29:49.221]                       }
[08:29:49.221]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.221]                       base::options(mc.cores = 1L)
[08:29:49.221]                     }
[08:29:49.221]                     base::local({
[08:29:49.221]                       for (pkg in "utils") {
[08:29:49.221]                         base::loadNamespace(pkg)
[08:29:49.221]                         base::library(pkg, character.only = TRUE)
[08:29:49.221]                       }
[08:29:49.221]                     })
[08:29:49.221]                   }
[08:29:49.221]                   ...future.strategy.old <- future::plan("list")
[08:29:49.221]                   options(future.plan = NULL)
[08:29:49.221]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.221]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.221]                 }
[08:29:49.221]                 ...future.workdir <- getwd()
[08:29:49.221]             }
[08:29:49.221]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.221]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.221]         }
[08:29:49.221]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.221]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.221]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.221]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.221]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.221]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.221]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.221]             base::names(...future.oldOptions))
[08:29:49.221]     }
[08:29:49.221]     if (FALSE) {
[08:29:49.221]     }
[08:29:49.221]     else {
[08:29:49.221]         if (TRUE) {
[08:29:49.221]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.221]                 open = "w")
[08:29:49.221]         }
[08:29:49.221]         else {
[08:29:49.221]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.221]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.221]         }
[08:29:49.221]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.221]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.221]             base::sink(type = "output", split = FALSE)
[08:29:49.221]             base::close(...future.stdout)
[08:29:49.221]         }, add = TRUE)
[08:29:49.221]     }
[08:29:49.221]     ...future.frame <- base::sys.nframe()
[08:29:49.221]     ...future.conditions <- base::list()
[08:29:49.221]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.221]     if (FALSE) {
[08:29:49.221]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.221]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.221]     }
[08:29:49.221]     ...future.result <- base::tryCatch({
[08:29:49.221]         base::withCallingHandlers({
[08:29:49.221]             ...future.value <- base::withVisible(base::local({
[08:29:49.221]                 withCallingHandlers({
[08:29:49.221]                   {
[08:29:49.221]                     print(1:50)
[08:29:49.221]                     str(1:50)
[08:29:49.221]                     cat(letters, sep = "-")
[08:29:49.221]                     cat(1:6, collapse = "\n")
[08:29:49.221]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.221]                     42L
[08:29:49.221]                   }
[08:29:49.221]                 }, immediateCondition = function(cond) {
[08:29:49.221]                   save_rds <- function (object, pathname, ...) 
[08:29:49.221]                   {
[08:29:49.221]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.221]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.221]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.221]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.221]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.221]                         fi_tmp[["mtime"]])
[08:29:49.221]                     }
[08:29:49.221]                     tryCatch({
[08:29:49.221]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.221]                     }, error = function(ex) {
[08:29:49.221]                       msg <- conditionMessage(ex)
[08:29:49.221]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.221]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.221]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.221]                         fi_tmp[["mtime"]], msg)
[08:29:49.221]                       ex$message <- msg
[08:29:49.221]                       stop(ex)
[08:29:49.221]                     })
[08:29:49.221]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.221]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.221]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.221]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.221]                       fi <- file.info(pathname)
[08:29:49.221]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.221]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.221]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.221]                         fi[["size"]], fi[["mtime"]])
[08:29:49.221]                       stop(msg)
[08:29:49.221]                     }
[08:29:49.221]                     invisible(pathname)
[08:29:49.221]                   }
[08:29:49.221]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.221]                     rootPath = tempdir()) 
[08:29:49.221]                   {
[08:29:49.221]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.221]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.221]                       tmpdir = path, fileext = ".rds")
[08:29:49.221]                     save_rds(obj, file)
[08:29:49.221]                   }
[08:29:49.221]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.221]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.221]                   {
[08:29:49.221]                     inherits <- base::inherits
[08:29:49.221]                     invokeRestart <- base::invokeRestart
[08:29:49.221]                     is.null <- base::is.null
[08:29:49.221]                     muffled <- FALSE
[08:29:49.221]                     if (inherits(cond, "message")) {
[08:29:49.221]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.221]                       if (muffled) 
[08:29:49.221]                         invokeRestart("muffleMessage")
[08:29:49.221]                     }
[08:29:49.221]                     else if (inherits(cond, "warning")) {
[08:29:49.221]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.221]                       if (muffled) 
[08:29:49.221]                         invokeRestart("muffleWarning")
[08:29:49.221]                     }
[08:29:49.221]                     else if (inherits(cond, "condition")) {
[08:29:49.221]                       if (!is.null(pattern)) {
[08:29:49.221]                         computeRestarts <- base::computeRestarts
[08:29:49.221]                         grepl <- base::grepl
[08:29:49.221]                         restarts <- computeRestarts(cond)
[08:29:49.221]                         for (restart in restarts) {
[08:29:49.221]                           name <- restart$name
[08:29:49.221]                           if (is.null(name)) 
[08:29:49.221]                             next
[08:29:49.221]                           if (!grepl(pattern, name)) 
[08:29:49.221]                             next
[08:29:49.221]                           invokeRestart(restart)
[08:29:49.221]                           muffled <- TRUE
[08:29:49.221]                           break
[08:29:49.221]                         }
[08:29:49.221]                       }
[08:29:49.221]                     }
[08:29:49.221]                     invisible(muffled)
[08:29:49.221]                   }
[08:29:49.221]                   muffleCondition(cond)
[08:29:49.221]                 })
[08:29:49.221]             }))
[08:29:49.221]             future::FutureResult(value = ...future.value$value, 
[08:29:49.221]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.221]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.221]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.221]                     ...future.globalenv.names))
[08:29:49.221]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.221]         }, condition = base::local({
[08:29:49.221]             c <- base::c
[08:29:49.221]             inherits <- base::inherits
[08:29:49.221]             invokeRestart <- base::invokeRestart
[08:29:49.221]             length <- base::length
[08:29:49.221]             list <- base::list
[08:29:49.221]             seq.int <- base::seq.int
[08:29:49.221]             signalCondition <- base::signalCondition
[08:29:49.221]             sys.calls <- base::sys.calls
[08:29:49.221]             `[[` <- base::`[[`
[08:29:49.221]             `+` <- base::`+`
[08:29:49.221]             `<<-` <- base::`<<-`
[08:29:49.221]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.221]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.221]                   3L)]
[08:29:49.221]             }
[08:29:49.221]             function(cond) {
[08:29:49.221]                 is_error <- inherits(cond, "error")
[08:29:49.221]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.221]                   NULL)
[08:29:49.221]                 if (is_error) {
[08:29:49.221]                   sessionInformation <- function() {
[08:29:49.221]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.221]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.221]                       search = base::search(), system = base::Sys.info())
[08:29:49.221]                   }
[08:29:49.221]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.221]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.221]                     cond$call), session = sessionInformation(), 
[08:29:49.221]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.221]                   signalCondition(cond)
[08:29:49.221]                 }
[08:29:49.221]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.221]                 "immediateCondition"))) {
[08:29:49.221]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.221]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.221]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.221]                   if (TRUE && !signal) {
[08:29:49.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.221]                     {
[08:29:49.221]                       inherits <- base::inherits
[08:29:49.221]                       invokeRestart <- base::invokeRestart
[08:29:49.221]                       is.null <- base::is.null
[08:29:49.221]                       muffled <- FALSE
[08:29:49.221]                       if (inherits(cond, "message")) {
[08:29:49.221]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.221]                         if (muffled) 
[08:29:49.221]                           invokeRestart("muffleMessage")
[08:29:49.221]                       }
[08:29:49.221]                       else if (inherits(cond, "warning")) {
[08:29:49.221]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.221]                         if (muffled) 
[08:29:49.221]                           invokeRestart("muffleWarning")
[08:29:49.221]                       }
[08:29:49.221]                       else if (inherits(cond, "condition")) {
[08:29:49.221]                         if (!is.null(pattern)) {
[08:29:49.221]                           computeRestarts <- base::computeRestarts
[08:29:49.221]                           grepl <- base::grepl
[08:29:49.221]                           restarts <- computeRestarts(cond)
[08:29:49.221]                           for (restart in restarts) {
[08:29:49.221]                             name <- restart$name
[08:29:49.221]                             if (is.null(name)) 
[08:29:49.221]                               next
[08:29:49.221]                             if (!grepl(pattern, name)) 
[08:29:49.221]                               next
[08:29:49.221]                             invokeRestart(restart)
[08:29:49.221]                             muffled <- TRUE
[08:29:49.221]                             break
[08:29:49.221]                           }
[08:29:49.221]                         }
[08:29:49.221]                       }
[08:29:49.221]                       invisible(muffled)
[08:29:49.221]                     }
[08:29:49.221]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.221]                   }
[08:29:49.221]                 }
[08:29:49.221]                 else {
[08:29:49.221]                   if (TRUE) {
[08:29:49.221]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.221]                     {
[08:29:49.221]                       inherits <- base::inherits
[08:29:49.221]                       invokeRestart <- base::invokeRestart
[08:29:49.221]                       is.null <- base::is.null
[08:29:49.221]                       muffled <- FALSE
[08:29:49.221]                       if (inherits(cond, "message")) {
[08:29:49.221]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.221]                         if (muffled) 
[08:29:49.221]                           invokeRestart("muffleMessage")
[08:29:49.221]                       }
[08:29:49.221]                       else if (inherits(cond, "warning")) {
[08:29:49.221]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.221]                         if (muffled) 
[08:29:49.221]                           invokeRestart("muffleWarning")
[08:29:49.221]                       }
[08:29:49.221]                       else if (inherits(cond, "condition")) {
[08:29:49.221]                         if (!is.null(pattern)) {
[08:29:49.221]                           computeRestarts <- base::computeRestarts
[08:29:49.221]                           grepl <- base::grepl
[08:29:49.221]                           restarts <- computeRestarts(cond)
[08:29:49.221]                           for (restart in restarts) {
[08:29:49.221]                             name <- restart$name
[08:29:49.221]                             if (is.null(name)) 
[08:29:49.221]                               next
[08:29:49.221]                             if (!grepl(pattern, name)) 
[08:29:49.221]                               next
[08:29:49.221]                             invokeRestart(restart)
[08:29:49.221]                             muffled <- TRUE
[08:29:49.221]                             break
[08:29:49.221]                           }
[08:29:49.221]                         }
[08:29:49.221]                       }
[08:29:49.221]                       invisible(muffled)
[08:29:49.221]                     }
[08:29:49.221]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.221]                   }
[08:29:49.221]                 }
[08:29:49.221]             }
[08:29:49.221]         }))
[08:29:49.221]     }, error = function(ex) {
[08:29:49.221]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.221]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.221]                 ...future.rng), started = ...future.startTime, 
[08:29:49.221]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.221]             version = "1.8"), class = "FutureResult")
[08:29:49.221]     }, finally = {
[08:29:49.221]         if (!identical(...future.workdir, getwd())) 
[08:29:49.221]             setwd(...future.workdir)
[08:29:49.221]         {
[08:29:49.221]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.221]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.221]             }
[08:29:49.221]             base::options(...future.oldOptions)
[08:29:49.221]             if (.Platform$OS.type == "windows") {
[08:29:49.221]                 old_names <- names(...future.oldEnvVars)
[08:29:49.221]                 envs <- base::Sys.getenv()
[08:29:49.221]                 names <- names(envs)
[08:29:49.221]                 common <- intersect(names, old_names)
[08:29:49.221]                 added <- setdiff(names, old_names)
[08:29:49.221]                 removed <- setdiff(old_names, names)
[08:29:49.221]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.221]                   envs[common]]
[08:29:49.221]                 NAMES <- toupper(changed)
[08:29:49.221]                 args <- list()
[08:29:49.221]                 for (kk in seq_along(NAMES)) {
[08:29:49.221]                   name <- changed[[kk]]
[08:29:49.221]                   NAME <- NAMES[[kk]]
[08:29:49.221]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.221]                     next
[08:29:49.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.221]                 }
[08:29:49.221]                 NAMES <- toupper(added)
[08:29:49.221]                 for (kk in seq_along(NAMES)) {
[08:29:49.221]                   name <- added[[kk]]
[08:29:49.221]                   NAME <- NAMES[[kk]]
[08:29:49.221]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.221]                     next
[08:29:49.221]                   args[[name]] <- ""
[08:29:49.221]                 }
[08:29:49.221]                 NAMES <- toupper(removed)
[08:29:49.221]                 for (kk in seq_along(NAMES)) {
[08:29:49.221]                   name <- removed[[kk]]
[08:29:49.221]                   NAME <- NAMES[[kk]]
[08:29:49.221]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.221]                     next
[08:29:49.221]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.221]                 }
[08:29:49.221]                 if (length(args) > 0) 
[08:29:49.221]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.221]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.221]             }
[08:29:49.221]             else {
[08:29:49.221]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.221]             }
[08:29:49.221]             {
[08:29:49.221]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.221]                   0L) {
[08:29:49.221]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.221]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.221]                   base::options(opts)
[08:29:49.221]                 }
[08:29:49.221]                 {
[08:29:49.221]                   {
[08:29:49.221]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.221]                     NULL
[08:29:49.221]                   }
[08:29:49.221]                   options(future.plan = NULL)
[08:29:49.221]                   if (is.na(NA_character_)) 
[08:29:49.221]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.221]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.221]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.221]                     .init = FALSE)
[08:29:49.221]                 }
[08:29:49.221]             }
[08:29:49.221]         }
[08:29:49.221]     })
[08:29:49.221]     if (TRUE) {
[08:29:49.221]         base::sink(type = "output", split = FALSE)
[08:29:49.221]         if (TRUE) {
[08:29:49.221]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.221]         }
[08:29:49.221]         else {
[08:29:49.221]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.221]         }
[08:29:49.221]         base::close(...future.stdout)
[08:29:49.221]         ...future.stdout <- NULL
[08:29:49.221]     }
[08:29:49.221]     ...future.result$conditions <- ...future.conditions
[08:29:49.221]     ...future.result$finished <- base::Sys.time()
[08:29:49.221]     ...future.result
[08:29:49.221] }
[08:29:49.223] requestCore(): workers = 2
[08:29:49.225] MulticoreFuture started
[08:29:49.226] - Launch lazy future ... done
[08:29:49.226] run() for ‘MulticoreFuture’ ... done
[08:29:49.226] plan(): Setting new future strategy stack:
[08:29:49.227] result() for MulticoreFuture ...
[08:29:49.227] List of future strategies:
[08:29:49.227] 1. sequential:
[08:29:49.227]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.227]    - tweaked: FALSE
[08:29:49.227]    - call: NULL
[08:29:49.228] plan(): nbrOfWorkers() = 1
[08:29:49.231] plan(): Setting new future strategy stack:
[08:29:49.231] List of future strategies:
[08:29:49.231] 1. multicore:
[08:29:49.231]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.231]    - tweaked: FALSE
[08:29:49.231]    - call: plan(strategy)
[08:29:49.234] plan(): nbrOfWorkers() = 2
[08:29:49.235] result() for MulticoreFuture ...
[08:29:49.235] result() for MulticoreFuture ... done
[08:29:49.236] result() for MulticoreFuture ... done
[08:29:49.236] result() for MulticoreFuture ...
[08:29:49.236] result() for MulticoreFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.236] getGlobalsAndPackages() ...
[08:29:49.237] Searching for globals...
[08:29:49.237] - globals found: [1] ‘print’
[08:29:49.238] Searching for globals ... DONE
[08:29:49.238] Resolving globals: FALSE
[08:29:49.238] 
[08:29:49.238] 
[08:29:49.238] getGlobalsAndPackages() ... DONE
[08:29:49.239] run() for ‘Future’ ...
[08:29:49.239] - state: ‘created’
[08:29:49.239] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.241] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.241] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.241]   - Field: ‘label’
[08:29:49.241]   - Field: ‘local’
[08:29:49.242]   - Field: ‘owner’
[08:29:49.242]   - Field: ‘envir’
[08:29:49.242]   - Field: ‘workers’
[08:29:49.242]   - Field: ‘packages’
[08:29:49.242]   - Field: ‘gc’
[08:29:49.242]   - Field: ‘job’
[08:29:49.242]   - Field: ‘conditions’
[08:29:49.242]   - Field: ‘expr’
[08:29:49.242]   - Field: ‘uuid’
[08:29:49.243]   - Field: ‘seed’
[08:29:49.243]   - Field: ‘version’
[08:29:49.243]   - Field: ‘result’
[08:29:49.243]   - Field: ‘asynchronous’
[08:29:49.243]   - Field: ‘calls’
[08:29:49.243]   - Field: ‘globals’
[08:29:49.243]   - Field: ‘stdout’
[08:29:49.243]   - Field: ‘earlySignal’
[08:29:49.243]   - Field: ‘lazy’
[08:29:49.244]   - Field: ‘state’
[08:29:49.244] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.244] - Launch lazy future ...
[08:29:49.244] Packages needed by the future expression (n = 0): <none>
[08:29:49.244] Packages needed by future strategies (n = 0): <none>
[08:29:49.245] {
[08:29:49.245]     {
[08:29:49.245]         {
[08:29:49.245]             ...future.startTime <- base::Sys.time()
[08:29:49.245]             {
[08:29:49.245]                 {
[08:29:49.245]                   {
[08:29:49.245]                     {
[08:29:49.245]                       base::local({
[08:29:49.245]                         has_future <- base::requireNamespace("future", 
[08:29:49.245]                           quietly = TRUE)
[08:29:49.245]                         if (has_future) {
[08:29:49.245]                           ns <- base::getNamespace("future")
[08:29:49.245]                           version <- ns[[".package"]][["version"]]
[08:29:49.245]                           if (is.null(version)) 
[08:29:49.245]                             version <- utils::packageVersion("future")
[08:29:49.245]                         }
[08:29:49.245]                         else {
[08:29:49.245]                           version <- NULL
[08:29:49.245]                         }
[08:29:49.245]                         if (!has_future || version < "1.8.0") {
[08:29:49.245]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.245]                             "", base::R.version$version.string), 
[08:29:49.245]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.245]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.245]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.245]                               "release", "version")], collapse = " "), 
[08:29:49.245]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.245]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.245]                             info)
[08:29:49.245]                           info <- base::paste(info, collapse = "; ")
[08:29:49.245]                           if (!has_future) {
[08:29:49.245]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.245]                               info)
[08:29:49.245]                           }
[08:29:49.245]                           else {
[08:29:49.245]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.245]                               info, version)
[08:29:49.245]                           }
[08:29:49.245]                           base::stop(msg)
[08:29:49.245]                         }
[08:29:49.245]                       })
[08:29:49.245]                     }
[08:29:49.245]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.245]                     base::options(mc.cores = 1L)
[08:29:49.245]                   }
[08:29:49.245]                   ...future.strategy.old <- future::plan("list")
[08:29:49.245]                   options(future.plan = NULL)
[08:29:49.245]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.245]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.245]                 }
[08:29:49.245]                 ...future.workdir <- getwd()
[08:29:49.245]             }
[08:29:49.245]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.245]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.245]         }
[08:29:49.245]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.245]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.245]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.245]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.245]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.245]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.245]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.245]             base::names(...future.oldOptions))
[08:29:49.245]     }
[08:29:49.245]     if (FALSE) {
[08:29:49.245]     }
[08:29:49.245]     else {
[08:29:49.245]         if (TRUE) {
[08:29:49.245]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.245]                 open = "w")
[08:29:49.245]         }
[08:29:49.245]         else {
[08:29:49.245]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.245]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.245]         }
[08:29:49.245]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.245]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.245]             base::sink(type = "output", split = FALSE)
[08:29:49.245]             base::close(...future.stdout)
[08:29:49.245]         }, add = TRUE)
[08:29:49.245]     }
[08:29:49.245]     ...future.frame <- base::sys.nframe()
[08:29:49.245]     ...future.conditions <- base::list()
[08:29:49.245]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.245]     if (FALSE) {
[08:29:49.245]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.245]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.245]     }
[08:29:49.245]     ...future.result <- base::tryCatch({
[08:29:49.245]         base::withCallingHandlers({
[08:29:49.245]             ...future.value <- base::withVisible(base::local({
[08:29:49.245]                 withCallingHandlers({
[08:29:49.245]                   print(42)
[08:29:49.245]                 }, immediateCondition = function(cond) {
[08:29:49.245]                   save_rds <- function (object, pathname, ...) 
[08:29:49.245]                   {
[08:29:49.245]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.245]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.245]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.245]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.245]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.245]                         fi_tmp[["mtime"]])
[08:29:49.245]                     }
[08:29:49.245]                     tryCatch({
[08:29:49.245]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.245]                     }, error = function(ex) {
[08:29:49.245]                       msg <- conditionMessage(ex)
[08:29:49.245]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.245]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.245]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.245]                         fi_tmp[["mtime"]], msg)
[08:29:49.245]                       ex$message <- msg
[08:29:49.245]                       stop(ex)
[08:29:49.245]                     })
[08:29:49.245]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.245]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.245]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.245]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.245]                       fi <- file.info(pathname)
[08:29:49.245]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.245]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.245]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.245]                         fi[["size"]], fi[["mtime"]])
[08:29:49.245]                       stop(msg)
[08:29:49.245]                     }
[08:29:49.245]                     invisible(pathname)
[08:29:49.245]                   }
[08:29:49.245]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.245]                     rootPath = tempdir()) 
[08:29:49.245]                   {
[08:29:49.245]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.245]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.245]                       tmpdir = path, fileext = ".rds")
[08:29:49.245]                     save_rds(obj, file)
[08:29:49.245]                   }
[08:29:49.245]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.245]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.245]                   {
[08:29:49.245]                     inherits <- base::inherits
[08:29:49.245]                     invokeRestart <- base::invokeRestart
[08:29:49.245]                     is.null <- base::is.null
[08:29:49.245]                     muffled <- FALSE
[08:29:49.245]                     if (inherits(cond, "message")) {
[08:29:49.245]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.245]                       if (muffled) 
[08:29:49.245]                         invokeRestart("muffleMessage")
[08:29:49.245]                     }
[08:29:49.245]                     else if (inherits(cond, "warning")) {
[08:29:49.245]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.245]                       if (muffled) 
[08:29:49.245]                         invokeRestart("muffleWarning")
[08:29:49.245]                     }
[08:29:49.245]                     else if (inherits(cond, "condition")) {
[08:29:49.245]                       if (!is.null(pattern)) {
[08:29:49.245]                         computeRestarts <- base::computeRestarts
[08:29:49.245]                         grepl <- base::grepl
[08:29:49.245]                         restarts <- computeRestarts(cond)
[08:29:49.245]                         for (restart in restarts) {
[08:29:49.245]                           name <- restart$name
[08:29:49.245]                           if (is.null(name)) 
[08:29:49.245]                             next
[08:29:49.245]                           if (!grepl(pattern, name)) 
[08:29:49.245]                             next
[08:29:49.245]                           invokeRestart(restart)
[08:29:49.245]                           muffled <- TRUE
[08:29:49.245]                           break
[08:29:49.245]                         }
[08:29:49.245]                       }
[08:29:49.245]                     }
[08:29:49.245]                     invisible(muffled)
[08:29:49.245]                   }
[08:29:49.245]                   muffleCondition(cond)
[08:29:49.245]                 })
[08:29:49.245]             }))
[08:29:49.245]             future::FutureResult(value = ...future.value$value, 
[08:29:49.245]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.245]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.245]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.245]                     ...future.globalenv.names))
[08:29:49.245]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.245]         }, condition = base::local({
[08:29:49.245]             c <- base::c
[08:29:49.245]             inherits <- base::inherits
[08:29:49.245]             invokeRestart <- base::invokeRestart
[08:29:49.245]             length <- base::length
[08:29:49.245]             list <- base::list
[08:29:49.245]             seq.int <- base::seq.int
[08:29:49.245]             signalCondition <- base::signalCondition
[08:29:49.245]             sys.calls <- base::sys.calls
[08:29:49.245]             `[[` <- base::`[[`
[08:29:49.245]             `+` <- base::`+`
[08:29:49.245]             `<<-` <- base::`<<-`
[08:29:49.245]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.245]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.245]                   3L)]
[08:29:49.245]             }
[08:29:49.245]             function(cond) {
[08:29:49.245]                 is_error <- inherits(cond, "error")
[08:29:49.245]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.245]                   NULL)
[08:29:49.245]                 if (is_error) {
[08:29:49.245]                   sessionInformation <- function() {
[08:29:49.245]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.245]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.245]                       search = base::search(), system = base::Sys.info())
[08:29:49.245]                   }
[08:29:49.245]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.245]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.245]                     cond$call), session = sessionInformation(), 
[08:29:49.245]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.245]                   signalCondition(cond)
[08:29:49.245]                 }
[08:29:49.245]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.245]                 "immediateCondition"))) {
[08:29:49.245]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.245]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.245]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.245]                   if (TRUE && !signal) {
[08:29:49.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.245]                     {
[08:29:49.245]                       inherits <- base::inherits
[08:29:49.245]                       invokeRestart <- base::invokeRestart
[08:29:49.245]                       is.null <- base::is.null
[08:29:49.245]                       muffled <- FALSE
[08:29:49.245]                       if (inherits(cond, "message")) {
[08:29:49.245]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.245]                         if (muffled) 
[08:29:49.245]                           invokeRestart("muffleMessage")
[08:29:49.245]                       }
[08:29:49.245]                       else if (inherits(cond, "warning")) {
[08:29:49.245]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.245]                         if (muffled) 
[08:29:49.245]                           invokeRestart("muffleWarning")
[08:29:49.245]                       }
[08:29:49.245]                       else if (inherits(cond, "condition")) {
[08:29:49.245]                         if (!is.null(pattern)) {
[08:29:49.245]                           computeRestarts <- base::computeRestarts
[08:29:49.245]                           grepl <- base::grepl
[08:29:49.245]                           restarts <- computeRestarts(cond)
[08:29:49.245]                           for (restart in restarts) {
[08:29:49.245]                             name <- restart$name
[08:29:49.245]                             if (is.null(name)) 
[08:29:49.245]                               next
[08:29:49.245]                             if (!grepl(pattern, name)) 
[08:29:49.245]                               next
[08:29:49.245]                             invokeRestart(restart)
[08:29:49.245]                             muffled <- TRUE
[08:29:49.245]                             break
[08:29:49.245]                           }
[08:29:49.245]                         }
[08:29:49.245]                       }
[08:29:49.245]                       invisible(muffled)
[08:29:49.245]                     }
[08:29:49.245]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.245]                   }
[08:29:49.245]                 }
[08:29:49.245]                 else {
[08:29:49.245]                   if (TRUE) {
[08:29:49.245]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.245]                     {
[08:29:49.245]                       inherits <- base::inherits
[08:29:49.245]                       invokeRestart <- base::invokeRestart
[08:29:49.245]                       is.null <- base::is.null
[08:29:49.245]                       muffled <- FALSE
[08:29:49.245]                       if (inherits(cond, "message")) {
[08:29:49.245]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.245]                         if (muffled) 
[08:29:49.245]                           invokeRestart("muffleMessage")
[08:29:49.245]                       }
[08:29:49.245]                       else if (inherits(cond, "warning")) {
[08:29:49.245]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.245]                         if (muffled) 
[08:29:49.245]                           invokeRestart("muffleWarning")
[08:29:49.245]                       }
[08:29:49.245]                       else if (inherits(cond, "condition")) {
[08:29:49.245]                         if (!is.null(pattern)) {
[08:29:49.245]                           computeRestarts <- base::computeRestarts
[08:29:49.245]                           grepl <- base::grepl
[08:29:49.245]                           restarts <- computeRestarts(cond)
[08:29:49.245]                           for (restart in restarts) {
[08:29:49.245]                             name <- restart$name
[08:29:49.245]                             if (is.null(name)) 
[08:29:49.245]                               next
[08:29:49.245]                             if (!grepl(pattern, name)) 
[08:29:49.245]                               next
[08:29:49.245]                             invokeRestart(restart)
[08:29:49.245]                             muffled <- TRUE
[08:29:49.245]                             break
[08:29:49.245]                           }
[08:29:49.245]                         }
[08:29:49.245]                       }
[08:29:49.245]                       invisible(muffled)
[08:29:49.245]                     }
[08:29:49.245]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.245]                   }
[08:29:49.245]                 }
[08:29:49.245]             }
[08:29:49.245]         }))
[08:29:49.245]     }, error = function(ex) {
[08:29:49.245]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.245]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.245]                 ...future.rng), started = ...future.startTime, 
[08:29:49.245]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.245]             version = "1.8"), class = "FutureResult")
[08:29:49.245]     }, finally = {
[08:29:49.245]         if (!identical(...future.workdir, getwd())) 
[08:29:49.245]             setwd(...future.workdir)
[08:29:49.245]         {
[08:29:49.245]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.245]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.245]             }
[08:29:49.245]             base::options(...future.oldOptions)
[08:29:49.245]             if (.Platform$OS.type == "windows") {
[08:29:49.245]                 old_names <- names(...future.oldEnvVars)
[08:29:49.245]                 envs <- base::Sys.getenv()
[08:29:49.245]                 names <- names(envs)
[08:29:49.245]                 common <- intersect(names, old_names)
[08:29:49.245]                 added <- setdiff(names, old_names)
[08:29:49.245]                 removed <- setdiff(old_names, names)
[08:29:49.245]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.245]                   envs[common]]
[08:29:49.245]                 NAMES <- toupper(changed)
[08:29:49.245]                 args <- list()
[08:29:49.245]                 for (kk in seq_along(NAMES)) {
[08:29:49.245]                   name <- changed[[kk]]
[08:29:49.245]                   NAME <- NAMES[[kk]]
[08:29:49.245]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.245]                     next
[08:29:49.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.245]                 }
[08:29:49.245]                 NAMES <- toupper(added)
[08:29:49.245]                 for (kk in seq_along(NAMES)) {
[08:29:49.245]                   name <- added[[kk]]
[08:29:49.245]                   NAME <- NAMES[[kk]]
[08:29:49.245]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.245]                     next
[08:29:49.245]                   args[[name]] <- ""
[08:29:49.245]                 }
[08:29:49.245]                 NAMES <- toupper(removed)
[08:29:49.245]                 for (kk in seq_along(NAMES)) {
[08:29:49.245]                   name <- removed[[kk]]
[08:29:49.245]                   NAME <- NAMES[[kk]]
[08:29:49.245]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.245]                     next
[08:29:49.245]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.245]                 }
[08:29:49.245]                 if (length(args) > 0) 
[08:29:49.245]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.245]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.245]             }
[08:29:49.245]             else {
[08:29:49.245]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.245]             }
[08:29:49.245]             {
[08:29:49.245]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.245]                   0L) {
[08:29:49.245]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.245]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.245]                   base::options(opts)
[08:29:49.245]                 }
[08:29:49.245]                 {
[08:29:49.245]                   {
[08:29:49.245]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.245]                     NULL
[08:29:49.245]                   }
[08:29:49.245]                   options(future.plan = NULL)
[08:29:49.245]                   if (is.na(NA_character_)) 
[08:29:49.245]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.245]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.245]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.245]                     .init = FALSE)
[08:29:49.245]                 }
[08:29:49.245]             }
[08:29:49.245]         }
[08:29:49.245]     })
[08:29:49.245]     if (TRUE) {
[08:29:49.245]         base::sink(type = "output", split = FALSE)
[08:29:49.245]         if (TRUE) {
[08:29:49.245]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.245]         }
[08:29:49.245]         else {
[08:29:49.245]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.245]         }
[08:29:49.245]         base::close(...future.stdout)
[08:29:49.245]         ...future.stdout <- NULL
[08:29:49.245]     }
[08:29:49.245]     ...future.result$conditions <- ...future.conditions
[08:29:49.245]     ...future.result$finished <- base::Sys.time()
[08:29:49.245]     ...future.result
[08:29:49.245] }
[08:29:49.247] requestCore(): workers = 2
[08:29:49.249] MulticoreFuture started
[08:29:49.250] - Launch lazy future ... done
[08:29:49.250] run() for ‘MulticoreFuture’ ... done
[08:29:49.250] plan(): Setting new future strategy stack:
[08:29:49.250] result() for MulticoreFuture ...
[08:29:49.250] List of future strategies:
[08:29:49.250] 1. sequential:
[08:29:49.250]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.250]    - tweaked: FALSE
[08:29:49.250]    - call: NULL
[08:29:49.251] plan(): nbrOfWorkers() = 1
[08:29:49.253] plan(): Setting new future strategy stack:
[08:29:49.253] List of future strategies:
[08:29:49.253] 1. multicore:
[08:29:49.253]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.253]    - tweaked: FALSE
[08:29:49.253]    - call: plan(strategy)
[08:29:49.257] plan(): nbrOfWorkers() = 2
[08:29:49.257] result() for MulticoreFuture ...
[08:29:49.258] result() for MulticoreFuture ... done
[08:29:49.258] result() for MulticoreFuture ... done
[08:29:49.258] result() for MulticoreFuture ...
[08:29:49.258] result() for MulticoreFuture ... done
[08:29:49.258] result() for MulticoreFuture ...
[08:29:49.258] result() for MulticoreFuture ... done
[1] 42
[08:29:49.258] result() for MulticoreFuture ...
[08:29:49.259] result() for MulticoreFuture ... done
- stdout = FALSE
[08:29:49.259] getGlobalsAndPackages() ...
[08:29:49.259] Searching for globals...
[08:29:49.266] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.266] Searching for globals ... DONE
[08:29:49.266] Resolving globals: FALSE
[08:29:49.267] 
[08:29:49.267] - packages: [1] ‘utils’
[08:29:49.267] getGlobalsAndPackages() ... DONE
[08:29:49.267] run() for ‘Future’ ...
[08:29:49.267] - state: ‘created’
[08:29:49.268] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.270] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.270] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.270]   - Field: ‘label’
[08:29:49.270]   - Field: ‘local’
[08:29:49.270]   - Field: ‘owner’
[08:29:49.270]   - Field: ‘envir’
[08:29:49.270]   - Field: ‘workers’
[08:29:49.270]   - Field: ‘packages’
[08:29:49.271]   - Field: ‘gc’
[08:29:49.271]   - Field: ‘job’
[08:29:49.271]   - Field: ‘conditions’
[08:29:49.271]   - Field: ‘expr’
[08:29:49.271]   - Field: ‘uuid’
[08:29:49.271]   - Field: ‘seed’
[08:29:49.271]   - Field: ‘version’
[08:29:49.271]   - Field: ‘result’
[08:29:49.271]   - Field: ‘asynchronous’
[08:29:49.272]   - Field: ‘calls’
[08:29:49.272]   - Field: ‘globals’
[08:29:49.272]   - Field: ‘stdout’
[08:29:49.272]   - Field: ‘earlySignal’
[08:29:49.272]   - Field: ‘lazy’
[08:29:49.272]   - Field: ‘state’
[08:29:49.272] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.272] - Launch lazy future ...
[08:29:49.273] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.273] Packages needed by future strategies (n = 0): <none>
[08:29:49.273] {
[08:29:49.273]     {
[08:29:49.273]         {
[08:29:49.273]             ...future.startTime <- base::Sys.time()
[08:29:49.273]             {
[08:29:49.273]                 {
[08:29:49.273]                   {
[08:29:49.273]                     {
[08:29:49.273]                       {
[08:29:49.273]                         base::local({
[08:29:49.273]                           has_future <- base::requireNamespace("future", 
[08:29:49.273]                             quietly = TRUE)
[08:29:49.273]                           if (has_future) {
[08:29:49.273]                             ns <- base::getNamespace("future")
[08:29:49.273]                             version <- ns[[".package"]][["version"]]
[08:29:49.273]                             if (is.null(version)) 
[08:29:49.273]                               version <- utils::packageVersion("future")
[08:29:49.273]                           }
[08:29:49.273]                           else {
[08:29:49.273]                             version <- NULL
[08:29:49.273]                           }
[08:29:49.273]                           if (!has_future || version < "1.8.0") {
[08:29:49.273]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.273]                               "", base::R.version$version.string), 
[08:29:49.273]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.273]                                 base::R.version$platform, 8 * 
[08:29:49.273]                                   base::.Machine$sizeof.pointer), 
[08:29:49.273]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.273]                                 "release", "version")], collapse = " "), 
[08:29:49.273]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.273]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.273]                               info)
[08:29:49.273]                             info <- base::paste(info, collapse = "; ")
[08:29:49.273]                             if (!has_future) {
[08:29:49.273]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.273]                                 info)
[08:29:49.273]                             }
[08:29:49.273]                             else {
[08:29:49.273]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.273]                                 info, version)
[08:29:49.273]                             }
[08:29:49.273]                             base::stop(msg)
[08:29:49.273]                           }
[08:29:49.273]                         })
[08:29:49.273]                       }
[08:29:49.273]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.273]                       base::options(mc.cores = 1L)
[08:29:49.273]                     }
[08:29:49.273]                     base::local({
[08:29:49.273]                       for (pkg in "utils") {
[08:29:49.273]                         base::loadNamespace(pkg)
[08:29:49.273]                         base::library(pkg, character.only = TRUE)
[08:29:49.273]                       }
[08:29:49.273]                     })
[08:29:49.273]                   }
[08:29:49.273]                   ...future.strategy.old <- future::plan("list")
[08:29:49.273]                   options(future.plan = NULL)
[08:29:49.273]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.273]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.273]                 }
[08:29:49.273]                 ...future.workdir <- getwd()
[08:29:49.273]             }
[08:29:49.273]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.273]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.273]         }
[08:29:49.273]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.273]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.273]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.273]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.273]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.273]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.273]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.273]             base::names(...future.oldOptions))
[08:29:49.273]     }
[08:29:49.273]     if (FALSE) {
[08:29:49.273]     }
[08:29:49.273]     else {
[08:29:49.273]         if (FALSE) {
[08:29:49.273]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.273]                 open = "w")
[08:29:49.273]         }
[08:29:49.273]         else {
[08:29:49.273]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.273]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.273]         }
[08:29:49.273]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.273]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.273]             base::sink(type = "output", split = FALSE)
[08:29:49.273]             base::close(...future.stdout)
[08:29:49.273]         }, add = TRUE)
[08:29:49.273]     }
[08:29:49.273]     ...future.frame <- base::sys.nframe()
[08:29:49.273]     ...future.conditions <- base::list()
[08:29:49.273]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.273]     if (FALSE) {
[08:29:49.273]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.273]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.273]     }
[08:29:49.273]     ...future.result <- base::tryCatch({
[08:29:49.273]         base::withCallingHandlers({
[08:29:49.273]             ...future.value <- base::withVisible(base::local({
[08:29:49.273]                 withCallingHandlers({
[08:29:49.273]                   {
[08:29:49.273]                     print(1:50)
[08:29:49.273]                     str(1:50)
[08:29:49.273]                     cat(letters, sep = "-")
[08:29:49.273]                     cat(1:6, collapse = "\n")
[08:29:49.273]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.273]                     42L
[08:29:49.273]                   }
[08:29:49.273]                 }, immediateCondition = function(cond) {
[08:29:49.273]                   save_rds <- function (object, pathname, ...) 
[08:29:49.273]                   {
[08:29:49.273]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.273]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.273]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.273]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.273]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.273]                         fi_tmp[["mtime"]])
[08:29:49.273]                     }
[08:29:49.273]                     tryCatch({
[08:29:49.273]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.273]                     }, error = function(ex) {
[08:29:49.273]                       msg <- conditionMessage(ex)
[08:29:49.273]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.273]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.273]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.273]                         fi_tmp[["mtime"]], msg)
[08:29:49.273]                       ex$message <- msg
[08:29:49.273]                       stop(ex)
[08:29:49.273]                     })
[08:29:49.273]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.273]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.273]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.273]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.273]                       fi <- file.info(pathname)
[08:29:49.273]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.273]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.273]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.273]                         fi[["size"]], fi[["mtime"]])
[08:29:49.273]                       stop(msg)
[08:29:49.273]                     }
[08:29:49.273]                     invisible(pathname)
[08:29:49.273]                   }
[08:29:49.273]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.273]                     rootPath = tempdir()) 
[08:29:49.273]                   {
[08:29:49.273]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.273]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.273]                       tmpdir = path, fileext = ".rds")
[08:29:49.273]                     save_rds(obj, file)
[08:29:49.273]                   }
[08:29:49.273]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.273]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.273]                   {
[08:29:49.273]                     inherits <- base::inherits
[08:29:49.273]                     invokeRestart <- base::invokeRestart
[08:29:49.273]                     is.null <- base::is.null
[08:29:49.273]                     muffled <- FALSE
[08:29:49.273]                     if (inherits(cond, "message")) {
[08:29:49.273]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.273]                       if (muffled) 
[08:29:49.273]                         invokeRestart("muffleMessage")
[08:29:49.273]                     }
[08:29:49.273]                     else if (inherits(cond, "warning")) {
[08:29:49.273]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.273]                       if (muffled) 
[08:29:49.273]                         invokeRestart("muffleWarning")
[08:29:49.273]                     }
[08:29:49.273]                     else if (inherits(cond, "condition")) {
[08:29:49.273]                       if (!is.null(pattern)) {
[08:29:49.273]                         computeRestarts <- base::computeRestarts
[08:29:49.273]                         grepl <- base::grepl
[08:29:49.273]                         restarts <- computeRestarts(cond)
[08:29:49.273]                         for (restart in restarts) {
[08:29:49.273]                           name <- restart$name
[08:29:49.273]                           if (is.null(name)) 
[08:29:49.273]                             next
[08:29:49.273]                           if (!grepl(pattern, name)) 
[08:29:49.273]                             next
[08:29:49.273]                           invokeRestart(restart)
[08:29:49.273]                           muffled <- TRUE
[08:29:49.273]                           break
[08:29:49.273]                         }
[08:29:49.273]                       }
[08:29:49.273]                     }
[08:29:49.273]                     invisible(muffled)
[08:29:49.273]                   }
[08:29:49.273]                   muffleCondition(cond)
[08:29:49.273]                 })
[08:29:49.273]             }))
[08:29:49.273]             future::FutureResult(value = ...future.value$value, 
[08:29:49.273]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.273]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.273]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.273]                     ...future.globalenv.names))
[08:29:49.273]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.273]         }, condition = base::local({
[08:29:49.273]             c <- base::c
[08:29:49.273]             inherits <- base::inherits
[08:29:49.273]             invokeRestart <- base::invokeRestart
[08:29:49.273]             length <- base::length
[08:29:49.273]             list <- base::list
[08:29:49.273]             seq.int <- base::seq.int
[08:29:49.273]             signalCondition <- base::signalCondition
[08:29:49.273]             sys.calls <- base::sys.calls
[08:29:49.273]             `[[` <- base::`[[`
[08:29:49.273]             `+` <- base::`+`
[08:29:49.273]             `<<-` <- base::`<<-`
[08:29:49.273]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.273]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.273]                   3L)]
[08:29:49.273]             }
[08:29:49.273]             function(cond) {
[08:29:49.273]                 is_error <- inherits(cond, "error")
[08:29:49.273]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.273]                   NULL)
[08:29:49.273]                 if (is_error) {
[08:29:49.273]                   sessionInformation <- function() {
[08:29:49.273]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.273]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.273]                       search = base::search(), system = base::Sys.info())
[08:29:49.273]                   }
[08:29:49.273]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.273]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.273]                     cond$call), session = sessionInformation(), 
[08:29:49.273]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.273]                   signalCondition(cond)
[08:29:49.273]                 }
[08:29:49.273]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.273]                 "immediateCondition"))) {
[08:29:49.273]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.273]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.273]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.273]                   if (TRUE && !signal) {
[08:29:49.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.273]                     {
[08:29:49.273]                       inherits <- base::inherits
[08:29:49.273]                       invokeRestart <- base::invokeRestart
[08:29:49.273]                       is.null <- base::is.null
[08:29:49.273]                       muffled <- FALSE
[08:29:49.273]                       if (inherits(cond, "message")) {
[08:29:49.273]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.273]                         if (muffled) 
[08:29:49.273]                           invokeRestart("muffleMessage")
[08:29:49.273]                       }
[08:29:49.273]                       else if (inherits(cond, "warning")) {
[08:29:49.273]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.273]                         if (muffled) 
[08:29:49.273]                           invokeRestart("muffleWarning")
[08:29:49.273]                       }
[08:29:49.273]                       else if (inherits(cond, "condition")) {
[08:29:49.273]                         if (!is.null(pattern)) {
[08:29:49.273]                           computeRestarts <- base::computeRestarts
[08:29:49.273]                           grepl <- base::grepl
[08:29:49.273]                           restarts <- computeRestarts(cond)
[08:29:49.273]                           for (restart in restarts) {
[08:29:49.273]                             name <- restart$name
[08:29:49.273]                             if (is.null(name)) 
[08:29:49.273]                               next
[08:29:49.273]                             if (!grepl(pattern, name)) 
[08:29:49.273]                               next
[08:29:49.273]                             invokeRestart(restart)
[08:29:49.273]                             muffled <- TRUE
[08:29:49.273]                             break
[08:29:49.273]                           }
[08:29:49.273]                         }
[08:29:49.273]                       }
[08:29:49.273]                       invisible(muffled)
[08:29:49.273]                     }
[08:29:49.273]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.273]                   }
[08:29:49.273]                 }
[08:29:49.273]                 else {
[08:29:49.273]                   if (TRUE) {
[08:29:49.273]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.273]                     {
[08:29:49.273]                       inherits <- base::inherits
[08:29:49.273]                       invokeRestart <- base::invokeRestart
[08:29:49.273]                       is.null <- base::is.null
[08:29:49.273]                       muffled <- FALSE
[08:29:49.273]                       if (inherits(cond, "message")) {
[08:29:49.273]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.273]                         if (muffled) 
[08:29:49.273]                           invokeRestart("muffleMessage")
[08:29:49.273]                       }
[08:29:49.273]                       else if (inherits(cond, "warning")) {
[08:29:49.273]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.273]                         if (muffled) 
[08:29:49.273]                           invokeRestart("muffleWarning")
[08:29:49.273]                       }
[08:29:49.273]                       else if (inherits(cond, "condition")) {
[08:29:49.273]                         if (!is.null(pattern)) {
[08:29:49.273]                           computeRestarts <- base::computeRestarts
[08:29:49.273]                           grepl <- base::grepl
[08:29:49.273]                           restarts <- computeRestarts(cond)
[08:29:49.273]                           for (restart in restarts) {
[08:29:49.273]                             name <- restart$name
[08:29:49.273]                             if (is.null(name)) 
[08:29:49.273]                               next
[08:29:49.273]                             if (!grepl(pattern, name)) 
[08:29:49.273]                               next
[08:29:49.273]                             invokeRestart(restart)
[08:29:49.273]                             muffled <- TRUE
[08:29:49.273]                             break
[08:29:49.273]                           }
[08:29:49.273]                         }
[08:29:49.273]                       }
[08:29:49.273]                       invisible(muffled)
[08:29:49.273]                     }
[08:29:49.273]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.273]                   }
[08:29:49.273]                 }
[08:29:49.273]             }
[08:29:49.273]         }))
[08:29:49.273]     }, error = function(ex) {
[08:29:49.273]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.273]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.273]                 ...future.rng), started = ...future.startTime, 
[08:29:49.273]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.273]             version = "1.8"), class = "FutureResult")
[08:29:49.273]     }, finally = {
[08:29:49.273]         if (!identical(...future.workdir, getwd())) 
[08:29:49.273]             setwd(...future.workdir)
[08:29:49.273]         {
[08:29:49.273]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.273]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.273]             }
[08:29:49.273]             base::options(...future.oldOptions)
[08:29:49.273]             if (.Platform$OS.type == "windows") {
[08:29:49.273]                 old_names <- names(...future.oldEnvVars)
[08:29:49.273]                 envs <- base::Sys.getenv()
[08:29:49.273]                 names <- names(envs)
[08:29:49.273]                 common <- intersect(names, old_names)
[08:29:49.273]                 added <- setdiff(names, old_names)
[08:29:49.273]                 removed <- setdiff(old_names, names)
[08:29:49.273]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.273]                   envs[common]]
[08:29:49.273]                 NAMES <- toupper(changed)
[08:29:49.273]                 args <- list()
[08:29:49.273]                 for (kk in seq_along(NAMES)) {
[08:29:49.273]                   name <- changed[[kk]]
[08:29:49.273]                   NAME <- NAMES[[kk]]
[08:29:49.273]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.273]                     next
[08:29:49.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.273]                 }
[08:29:49.273]                 NAMES <- toupper(added)
[08:29:49.273]                 for (kk in seq_along(NAMES)) {
[08:29:49.273]                   name <- added[[kk]]
[08:29:49.273]                   NAME <- NAMES[[kk]]
[08:29:49.273]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.273]                     next
[08:29:49.273]                   args[[name]] <- ""
[08:29:49.273]                 }
[08:29:49.273]                 NAMES <- toupper(removed)
[08:29:49.273]                 for (kk in seq_along(NAMES)) {
[08:29:49.273]                   name <- removed[[kk]]
[08:29:49.273]                   NAME <- NAMES[[kk]]
[08:29:49.273]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.273]                     next
[08:29:49.273]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.273]                 }
[08:29:49.273]                 if (length(args) > 0) 
[08:29:49.273]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.273]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.273]             }
[08:29:49.273]             else {
[08:29:49.273]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.273]             }
[08:29:49.273]             {
[08:29:49.273]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.273]                   0L) {
[08:29:49.273]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.273]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.273]                   base::options(opts)
[08:29:49.273]                 }
[08:29:49.273]                 {
[08:29:49.273]                   {
[08:29:49.273]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.273]                     NULL
[08:29:49.273]                   }
[08:29:49.273]                   options(future.plan = NULL)
[08:29:49.273]                   if (is.na(NA_character_)) 
[08:29:49.273]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.273]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.273]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.273]                     .init = FALSE)
[08:29:49.273]                 }
[08:29:49.273]             }
[08:29:49.273]         }
[08:29:49.273]     })
[08:29:49.273]     if (TRUE) {
[08:29:49.273]         base::sink(type = "output", split = FALSE)
[08:29:49.273]         if (FALSE) {
[08:29:49.273]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.273]         }
[08:29:49.273]         else {
[08:29:49.273]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.273]         }
[08:29:49.273]         base::close(...future.stdout)
[08:29:49.273]         ...future.stdout <- NULL
[08:29:49.273]     }
[08:29:49.273]     ...future.result$conditions <- ...future.conditions
[08:29:49.273]     ...future.result$finished <- base::Sys.time()
[08:29:49.273]     ...future.result
[08:29:49.273] }
[08:29:49.276] requestCore(): workers = 2
[08:29:49.278] MulticoreFuture started
[08:29:49.278] - Launch lazy future ... done
[08:29:49.279] run() for ‘MulticoreFuture’ ... done
[08:29:49.279] result() for MulticoreFuture ...
[08:29:49.279] plan(): Setting new future strategy stack:
[08:29:49.279] List of future strategies:
[08:29:49.279] 1. sequential:
[08:29:49.279]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.279]    - tweaked: FALSE
[08:29:49.279]    - call: NULL
[08:29:49.280] plan(): nbrOfWorkers() = 1
[08:29:49.284] plan(): Setting new future strategy stack:
[08:29:49.284] List of future strategies:
[08:29:49.284] 1. multicore:
[08:29:49.284]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.284]    - tweaked: FALSE
[08:29:49.284]    - call: plan(strategy)
[08:29:49.287] plan(): nbrOfWorkers() = 2
[08:29:49.288] result() for MulticoreFuture ...
[08:29:49.288] result() for MulticoreFuture ... done
[08:29:49.288] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "b44bbe18-5109-dbaa-86de-3df88200a66d"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85050
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:49.298] result() for MulticoreFuture ...
[08:29:49.298] result() for MulticoreFuture ... done
[08:29:49.298] result() for MulticoreFuture ...
[08:29:49.298] result() for MulticoreFuture ... done
[08:29:49.298] getGlobalsAndPackages() ...
[08:29:49.298] Searching for globals...
[08:29:49.302] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.302] Searching for globals ... DONE
[08:29:49.303] Resolving globals: FALSE
[08:29:49.303] 
[08:29:49.305] - packages: [1] ‘utils’
[08:29:49.306] getGlobalsAndPackages() ... DONE
[08:29:49.306] run() for ‘Future’ ...
[08:29:49.306] - state: ‘created’
[08:29:49.306] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.309] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.309] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.309]   - Field: ‘label’
[08:29:49.309]   - Field: ‘local’
[08:29:49.309]   - Field: ‘owner’
[08:29:49.309]   - Field: ‘envir’
[08:29:49.309]   - Field: ‘workers’
[08:29:49.310]   - Field: ‘packages’
[08:29:49.310]   - Field: ‘gc’
[08:29:49.310]   - Field: ‘job’
[08:29:49.310]   - Field: ‘conditions’
[08:29:49.310]   - Field: ‘expr’
[08:29:49.310]   - Field: ‘uuid’
[08:29:49.310]   - Field: ‘seed’
[08:29:49.310]   - Field: ‘version’
[08:29:49.310]   - Field: ‘result’
[08:29:49.311]   - Field: ‘asynchronous’
[08:29:49.311]   - Field: ‘calls’
[08:29:49.311]   - Field: ‘globals’
[08:29:49.311]   - Field: ‘stdout’
[08:29:49.311]   - Field: ‘earlySignal’
[08:29:49.311]   - Field: ‘lazy’
[08:29:49.311]   - Field: ‘state’
[08:29:49.311] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.311] - Launch lazy future ...
[08:29:49.312] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.312] Packages needed by future strategies (n = 0): <none>
[08:29:49.312] {
[08:29:49.312]     {
[08:29:49.312]         {
[08:29:49.312]             ...future.startTime <- base::Sys.time()
[08:29:49.312]             {
[08:29:49.312]                 {
[08:29:49.312]                   {
[08:29:49.312]                     {
[08:29:49.312]                       {
[08:29:49.312]                         base::local({
[08:29:49.312]                           has_future <- base::requireNamespace("future", 
[08:29:49.312]                             quietly = TRUE)
[08:29:49.312]                           if (has_future) {
[08:29:49.312]                             ns <- base::getNamespace("future")
[08:29:49.312]                             version <- ns[[".package"]][["version"]]
[08:29:49.312]                             if (is.null(version)) 
[08:29:49.312]                               version <- utils::packageVersion("future")
[08:29:49.312]                           }
[08:29:49.312]                           else {
[08:29:49.312]                             version <- NULL
[08:29:49.312]                           }
[08:29:49.312]                           if (!has_future || version < "1.8.0") {
[08:29:49.312]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.312]                               "", base::R.version$version.string), 
[08:29:49.312]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.312]                                 base::R.version$platform, 8 * 
[08:29:49.312]                                   base::.Machine$sizeof.pointer), 
[08:29:49.312]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.312]                                 "release", "version")], collapse = " "), 
[08:29:49.312]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.312]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.312]                               info)
[08:29:49.312]                             info <- base::paste(info, collapse = "; ")
[08:29:49.312]                             if (!has_future) {
[08:29:49.312]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.312]                                 info)
[08:29:49.312]                             }
[08:29:49.312]                             else {
[08:29:49.312]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.312]                                 info, version)
[08:29:49.312]                             }
[08:29:49.312]                             base::stop(msg)
[08:29:49.312]                           }
[08:29:49.312]                         })
[08:29:49.312]                       }
[08:29:49.312]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.312]                       base::options(mc.cores = 1L)
[08:29:49.312]                     }
[08:29:49.312]                     base::local({
[08:29:49.312]                       for (pkg in "utils") {
[08:29:49.312]                         base::loadNamespace(pkg)
[08:29:49.312]                         base::library(pkg, character.only = TRUE)
[08:29:49.312]                       }
[08:29:49.312]                     })
[08:29:49.312]                   }
[08:29:49.312]                   ...future.strategy.old <- future::plan("list")
[08:29:49.312]                   options(future.plan = NULL)
[08:29:49.312]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.312]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.312]                 }
[08:29:49.312]                 ...future.workdir <- getwd()
[08:29:49.312]             }
[08:29:49.312]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.312]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.312]         }
[08:29:49.312]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.312]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.312]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.312]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.312]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.312]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.312]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.312]             base::names(...future.oldOptions))
[08:29:49.312]     }
[08:29:49.312]     if (FALSE) {
[08:29:49.312]     }
[08:29:49.312]     else {
[08:29:49.312]         if (FALSE) {
[08:29:49.312]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.312]                 open = "w")
[08:29:49.312]         }
[08:29:49.312]         else {
[08:29:49.312]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.312]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.312]         }
[08:29:49.312]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.312]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.312]             base::sink(type = "output", split = FALSE)
[08:29:49.312]             base::close(...future.stdout)
[08:29:49.312]         }, add = TRUE)
[08:29:49.312]     }
[08:29:49.312]     ...future.frame <- base::sys.nframe()
[08:29:49.312]     ...future.conditions <- base::list()
[08:29:49.312]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.312]     if (FALSE) {
[08:29:49.312]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.312]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.312]     }
[08:29:49.312]     ...future.result <- base::tryCatch({
[08:29:49.312]         base::withCallingHandlers({
[08:29:49.312]             ...future.value <- base::withVisible(base::local({
[08:29:49.312]                 withCallingHandlers({
[08:29:49.312]                   {
[08:29:49.312]                     print(1:50)
[08:29:49.312]                     str(1:50)
[08:29:49.312]                     cat(letters, sep = "-")
[08:29:49.312]                     cat(1:6, collapse = "\n")
[08:29:49.312]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.312]                     42L
[08:29:49.312]                   }
[08:29:49.312]                 }, immediateCondition = function(cond) {
[08:29:49.312]                   save_rds <- function (object, pathname, ...) 
[08:29:49.312]                   {
[08:29:49.312]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.312]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.312]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.312]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.312]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.312]                         fi_tmp[["mtime"]])
[08:29:49.312]                     }
[08:29:49.312]                     tryCatch({
[08:29:49.312]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.312]                     }, error = function(ex) {
[08:29:49.312]                       msg <- conditionMessage(ex)
[08:29:49.312]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.312]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.312]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.312]                         fi_tmp[["mtime"]], msg)
[08:29:49.312]                       ex$message <- msg
[08:29:49.312]                       stop(ex)
[08:29:49.312]                     })
[08:29:49.312]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.312]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.312]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.312]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.312]                       fi <- file.info(pathname)
[08:29:49.312]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.312]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.312]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.312]                         fi[["size"]], fi[["mtime"]])
[08:29:49.312]                       stop(msg)
[08:29:49.312]                     }
[08:29:49.312]                     invisible(pathname)
[08:29:49.312]                   }
[08:29:49.312]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.312]                     rootPath = tempdir()) 
[08:29:49.312]                   {
[08:29:49.312]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.312]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.312]                       tmpdir = path, fileext = ".rds")
[08:29:49.312]                     save_rds(obj, file)
[08:29:49.312]                   }
[08:29:49.312]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.312]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.312]                   {
[08:29:49.312]                     inherits <- base::inherits
[08:29:49.312]                     invokeRestart <- base::invokeRestart
[08:29:49.312]                     is.null <- base::is.null
[08:29:49.312]                     muffled <- FALSE
[08:29:49.312]                     if (inherits(cond, "message")) {
[08:29:49.312]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.312]                       if (muffled) 
[08:29:49.312]                         invokeRestart("muffleMessage")
[08:29:49.312]                     }
[08:29:49.312]                     else if (inherits(cond, "warning")) {
[08:29:49.312]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.312]                       if (muffled) 
[08:29:49.312]                         invokeRestart("muffleWarning")
[08:29:49.312]                     }
[08:29:49.312]                     else if (inherits(cond, "condition")) {
[08:29:49.312]                       if (!is.null(pattern)) {
[08:29:49.312]                         computeRestarts <- base::computeRestarts
[08:29:49.312]                         grepl <- base::grepl
[08:29:49.312]                         restarts <- computeRestarts(cond)
[08:29:49.312]                         for (restart in restarts) {
[08:29:49.312]                           name <- restart$name
[08:29:49.312]                           if (is.null(name)) 
[08:29:49.312]                             next
[08:29:49.312]                           if (!grepl(pattern, name)) 
[08:29:49.312]                             next
[08:29:49.312]                           invokeRestart(restart)
[08:29:49.312]                           muffled <- TRUE
[08:29:49.312]                           break
[08:29:49.312]                         }
[08:29:49.312]                       }
[08:29:49.312]                     }
[08:29:49.312]                     invisible(muffled)
[08:29:49.312]                   }
[08:29:49.312]                   muffleCondition(cond)
[08:29:49.312]                 })
[08:29:49.312]             }))
[08:29:49.312]             future::FutureResult(value = ...future.value$value, 
[08:29:49.312]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.312]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.312]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.312]                     ...future.globalenv.names))
[08:29:49.312]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.312]         }, condition = base::local({
[08:29:49.312]             c <- base::c
[08:29:49.312]             inherits <- base::inherits
[08:29:49.312]             invokeRestart <- base::invokeRestart
[08:29:49.312]             length <- base::length
[08:29:49.312]             list <- base::list
[08:29:49.312]             seq.int <- base::seq.int
[08:29:49.312]             signalCondition <- base::signalCondition
[08:29:49.312]             sys.calls <- base::sys.calls
[08:29:49.312]             `[[` <- base::`[[`
[08:29:49.312]             `+` <- base::`+`
[08:29:49.312]             `<<-` <- base::`<<-`
[08:29:49.312]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.312]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.312]                   3L)]
[08:29:49.312]             }
[08:29:49.312]             function(cond) {
[08:29:49.312]                 is_error <- inherits(cond, "error")
[08:29:49.312]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.312]                   NULL)
[08:29:49.312]                 if (is_error) {
[08:29:49.312]                   sessionInformation <- function() {
[08:29:49.312]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.312]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.312]                       search = base::search(), system = base::Sys.info())
[08:29:49.312]                   }
[08:29:49.312]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.312]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.312]                     cond$call), session = sessionInformation(), 
[08:29:49.312]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.312]                   signalCondition(cond)
[08:29:49.312]                 }
[08:29:49.312]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.312]                 "immediateCondition"))) {
[08:29:49.312]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.312]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.312]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.312]                   if (TRUE && !signal) {
[08:29:49.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.312]                     {
[08:29:49.312]                       inherits <- base::inherits
[08:29:49.312]                       invokeRestart <- base::invokeRestart
[08:29:49.312]                       is.null <- base::is.null
[08:29:49.312]                       muffled <- FALSE
[08:29:49.312]                       if (inherits(cond, "message")) {
[08:29:49.312]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.312]                         if (muffled) 
[08:29:49.312]                           invokeRestart("muffleMessage")
[08:29:49.312]                       }
[08:29:49.312]                       else if (inherits(cond, "warning")) {
[08:29:49.312]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.312]                         if (muffled) 
[08:29:49.312]                           invokeRestart("muffleWarning")
[08:29:49.312]                       }
[08:29:49.312]                       else if (inherits(cond, "condition")) {
[08:29:49.312]                         if (!is.null(pattern)) {
[08:29:49.312]                           computeRestarts <- base::computeRestarts
[08:29:49.312]                           grepl <- base::grepl
[08:29:49.312]                           restarts <- computeRestarts(cond)
[08:29:49.312]                           for (restart in restarts) {
[08:29:49.312]                             name <- restart$name
[08:29:49.312]                             if (is.null(name)) 
[08:29:49.312]                               next
[08:29:49.312]                             if (!grepl(pattern, name)) 
[08:29:49.312]                               next
[08:29:49.312]                             invokeRestart(restart)
[08:29:49.312]                             muffled <- TRUE
[08:29:49.312]                             break
[08:29:49.312]                           }
[08:29:49.312]                         }
[08:29:49.312]                       }
[08:29:49.312]                       invisible(muffled)
[08:29:49.312]                     }
[08:29:49.312]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.312]                   }
[08:29:49.312]                 }
[08:29:49.312]                 else {
[08:29:49.312]                   if (TRUE) {
[08:29:49.312]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.312]                     {
[08:29:49.312]                       inherits <- base::inherits
[08:29:49.312]                       invokeRestart <- base::invokeRestart
[08:29:49.312]                       is.null <- base::is.null
[08:29:49.312]                       muffled <- FALSE
[08:29:49.312]                       if (inherits(cond, "message")) {
[08:29:49.312]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.312]                         if (muffled) 
[08:29:49.312]                           invokeRestart("muffleMessage")
[08:29:49.312]                       }
[08:29:49.312]                       else if (inherits(cond, "warning")) {
[08:29:49.312]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.312]                         if (muffled) 
[08:29:49.312]                           invokeRestart("muffleWarning")
[08:29:49.312]                       }
[08:29:49.312]                       else if (inherits(cond, "condition")) {
[08:29:49.312]                         if (!is.null(pattern)) {
[08:29:49.312]                           computeRestarts <- base::computeRestarts
[08:29:49.312]                           grepl <- base::grepl
[08:29:49.312]                           restarts <- computeRestarts(cond)
[08:29:49.312]                           for (restart in restarts) {
[08:29:49.312]                             name <- restart$name
[08:29:49.312]                             if (is.null(name)) 
[08:29:49.312]                               next
[08:29:49.312]                             if (!grepl(pattern, name)) 
[08:29:49.312]                               next
[08:29:49.312]                             invokeRestart(restart)
[08:29:49.312]                             muffled <- TRUE
[08:29:49.312]                             break
[08:29:49.312]                           }
[08:29:49.312]                         }
[08:29:49.312]                       }
[08:29:49.312]                       invisible(muffled)
[08:29:49.312]                     }
[08:29:49.312]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.312]                   }
[08:29:49.312]                 }
[08:29:49.312]             }
[08:29:49.312]         }))
[08:29:49.312]     }, error = function(ex) {
[08:29:49.312]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.312]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.312]                 ...future.rng), started = ...future.startTime, 
[08:29:49.312]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.312]             version = "1.8"), class = "FutureResult")
[08:29:49.312]     }, finally = {
[08:29:49.312]         if (!identical(...future.workdir, getwd())) 
[08:29:49.312]             setwd(...future.workdir)
[08:29:49.312]         {
[08:29:49.312]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.312]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.312]             }
[08:29:49.312]             base::options(...future.oldOptions)
[08:29:49.312]             if (.Platform$OS.type == "windows") {
[08:29:49.312]                 old_names <- names(...future.oldEnvVars)
[08:29:49.312]                 envs <- base::Sys.getenv()
[08:29:49.312]                 names <- names(envs)
[08:29:49.312]                 common <- intersect(names, old_names)
[08:29:49.312]                 added <- setdiff(names, old_names)
[08:29:49.312]                 removed <- setdiff(old_names, names)
[08:29:49.312]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.312]                   envs[common]]
[08:29:49.312]                 NAMES <- toupper(changed)
[08:29:49.312]                 args <- list()
[08:29:49.312]                 for (kk in seq_along(NAMES)) {
[08:29:49.312]                   name <- changed[[kk]]
[08:29:49.312]                   NAME <- NAMES[[kk]]
[08:29:49.312]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.312]                     next
[08:29:49.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.312]                 }
[08:29:49.312]                 NAMES <- toupper(added)
[08:29:49.312]                 for (kk in seq_along(NAMES)) {
[08:29:49.312]                   name <- added[[kk]]
[08:29:49.312]                   NAME <- NAMES[[kk]]
[08:29:49.312]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.312]                     next
[08:29:49.312]                   args[[name]] <- ""
[08:29:49.312]                 }
[08:29:49.312]                 NAMES <- toupper(removed)
[08:29:49.312]                 for (kk in seq_along(NAMES)) {
[08:29:49.312]                   name <- removed[[kk]]
[08:29:49.312]                   NAME <- NAMES[[kk]]
[08:29:49.312]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.312]                     next
[08:29:49.312]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.312]                 }
[08:29:49.312]                 if (length(args) > 0) 
[08:29:49.312]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.312]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.312]             }
[08:29:49.312]             else {
[08:29:49.312]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.312]             }
[08:29:49.312]             {
[08:29:49.312]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.312]                   0L) {
[08:29:49.312]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.312]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.312]                   base::options(opts)
[08:29:49.312]                 }
[08:29:49.312]                 {
[08:29:49.312]                   {
[08:29:49.312]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.312]                     NULL
[08:29:49.312]                   }
[08:29:49.312]                   options(future.plan = NULL)
[08:29:49.312]                   if (is.na(NA_character_)) 
[08:29:49.312]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.312]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.312]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.312]                     .init = FALSE)
[08:29:49.312]                 }
[08:29:49.312]             }
[08:29:49.312]         }
[08:29:49.312]     })
[08:29:49.312]     if (TRUE) {
[08:29:49.312]         base::sink(type = "output", split = FALSE)
[08:29:49.312]         if (FALSE) {
[08:29:49.312]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.312]         }
[08:29:49.312]         else {
[08:29:49.312]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.312]         }
[08:29:49.312]         base::close(...future.stdout)
[08:29:49.312]         ...future.stdout <- NULL
[08:29:49.312]     }
[08:29:49.312]     ...future.result$conditions <- ...future.conditions
[08:29:49.312]     ...future.result$finished <- base::Sys.time()
[08:29:49.312]     ...future.result
[08:29:49.312] }
[08:29:49.315] requestCore(): workers = 2
[08:29:49.317] MulticoreFuture started
[08:29:49.318] - Launch lazy future ... done
[08:29:49.318] run() for ‘MulticoreFuture’ ... done
[08:29:49.318] plan(): Setting new future strategy stack:
[08:29:49.319] result() for MulticoreFuture ...
[08:29:49.318] List of future strategies:
[08:29:49.318] 1. sequential:
[08:29:49.318]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.318]    - tweaked: FALSE
[08:29:49.318]    - call: NULL
[08:29:49.319] plan(): nbrOfWorkers() = 1
[08:29:49.323] plan(): Setting new future strategy stack:
[08:29:49.323] List of future strategies:
[08:29:49.323] 1. multicore:
[08:29:49.323]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.323]    - tweaked: FALSE
[08:29:49.323]    - call: plan(strategy)
[08:29:49.326] plan(): nbrOfWorkers() = 2
[08:29:49.327] result() for MulticoreFuture ...
[08:29:49.327] result() for MulticoreFuture ... done
[08:29:49.327] result() for MulticoreFuture ... done
[08:29:49.327] result() for MulticoreFuture ...
[08:29:49.328] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.328] getGlobalsAndPackages() ...
[08:29:49.328] Searching for globals...
[08:29:49.329] - globals found: [1] ‘print’
[08:29:49.329] Searching for globals ... DONE
[08:29:49.329] Resolving globals: FALSE
[08:29:49.330] 
[08:29:49.330] 
[08:29:49.330] getGlobalsAndPackages() ... DONE
[08:29:49.330] run() for ‘Future’ ...
[08:29:49.330] - state: ‘created’
[08:29:49.330] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.333] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.333] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.333]   - Field: ‘label’
[08:29:49.333]   - Field: ‘local’
[08:29:49.333]   - Field: ‘owner’
[08:29:49.333]   - Field: ‘envir’
[08:29:49.333]   - Field: ‘workers’
[08:29:49.334]   - Field: ‘packages’
[08:29:49.334]   - Field: ‘gc’
[08:29:49.334]   - Field: ‘job’
[08:29:49.334]   - Field: ‘conditions’
[08:29:49.334]   - Field: ‘expr’
[08:29:49.334]   - Field: ‘uuid’
[08:29:49.334]   - Field: ‘seed’
[08:29:49.334]   - Field: ‘version’
[08:29:49.334]   - Field: ‘result’
[08:29:49.335]   - Field: ‘asynchronous’
[08:29:49.335]   - Field: ‘calls’
[08:29:49.335]   - Field: ‘globals’
[08:29:49.335]   - Field: ‘stdout’
[08:29:49.335]   - Field: ‘earlySignal’
[08:29:49.335]   - Field: ‘lazy’
[08:29:49.335]   - Field: ‘state’
[08:29:49.335] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.336] - Launch lazy future ...
[08:29:49.336] Packages needed by the future expression (n = 0): <none>
[08:29:49.336] Packages needed by future strategies (n = 0): <none>
[08:29:49.337] {
[08:29:49.337]     {
[08:29:49.337]         {
[08:29:49.337]             ...future.startTime <- base::Sys.time()
[08:29:49.337]             {
[08:29:49.337]                 {
[08:29:49.337]                   {
[08:29:49.337]                     {
[08:29:49.337]                       base::local({
[08:29:49.337]                         has_future <- base::requireNamespace("future", 
[08:29:49.337]                           quietly = TRUE)
[08:29:49.337]                         if (has_future) {
[08:29:49.337]                           ns <- base::getNamespace("future")
[08:29:49.337]                           version <- ns[[".package"]][["version"]]
[08:29:49.337]                           if (is.null(version)) 
[08:29:49.337]                             version <- utils::packageVersion("future")
[08:29:49.337]                         }
[08:29:49.337]                         else {
[08:29:49.337]                           version <- NULL
[08:29:49.337]                         }
[08:29:49.337]                         if (!has_future || version < "1.8.0") {
[08:29:49.337]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.337]                             "", base::R.version$version.string), 
[08:29:49.337]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.337]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.337]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.337]                               "release", "version")], collapse = " "), 
[08:29:49.337]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.337]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.337]                             info)
[08:29:49.337]                           info <- base::paste(info, collapse = "; ")
[08:29:49.337]                           if (!has_future) {
[08:29:49.337]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.337]                               info)
[08:29:49.337]                           }
[08:29:49.337]                           else {
[08:29:49.337]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.337]                               info, version)
[08:29:49.337]                           }
[08:29:49.337]                           base::stop(msg)
[08:29:49.337]                         }
[08:29:49.337]                       })
[08:29:49.337]                     }
[08:29:49.337]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.337]                     base::options(mc.cores = 1L)
[08:29:49.337]                   }
[08:29:49.337]                   ...future.strategy.old <- future::plan("list")
[08:29:49.337]                   options(future.plan = NULL)
[08:29:49.337]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.337]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.337]                 }
[08:29:49.337]                 ...future.workdir <- getwd()
[08:29:49.337]             }
[08:29:49.337]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.337]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.337]         }
[08:29:49.337]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.337]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.337]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.337]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.337]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.337]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.337]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.337]             base::names(...future.oldOptions))
[08:29:49.337]     }
[08:29:49.337]     if (FALSE) {
[08:29:49.337]     }
[08:29:49.337]     else {
[08:29:49.337]         if (TRUE) {
[08:29:49.337]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.337]                 open = "w")
[08:29:49.337]         }
[08:29:49.337]         else {
[08:29:49.337]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.337]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.337]         }
[08:29:49.337]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.337]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.337]             base::sink(type = "output", split = FALSE)
[08:29:49.337]             base::close(...future.stdout)
[08:29:49.337]         }, add = TRUE)
[08:29:49.337]     }
[08:29:49.337]     ...future.frame <- base::sys.nframe()
[08:29:49.337]     ...future.conditions <- base::list()
[08:29:49.337]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.337]     if (FALSE) {
[08:29:49.337]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.337]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.337]     }
[08:29:49.337]     ...future.result <- base::tryCatch({
[08:29:49.337]         base::withCallingHandlers({
[08:29:49.337]             ...future.value <- base::withVisible(base::local({
[08:29:49.337]                 withCallingHandlers({
[08:29:49.337]                   print(42)
[08:29:49.337]                 }, immediateCondition = function(cond) {
[08:29:49.337]                   save_rds <- function (object, pathname, ...) 
[08:29:49.337]                   {
[08:29:49.337]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.337]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.337]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.337]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.337]                         fi_tmp[["mtime"]])
[08:29:49.337]                     }
[08:29:49.337]                     tryCatch({
[08:29:49.337]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.337]                     }, error = function(ex) {
[08:29:49.337]                       msg <- conditionMessage(ex)
[08:29:49.337]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.337]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.337]                         fi_tmp[["mtime"]], msg)
[08:29:49.337]                       ex$message <- msg
[08:29:49.337]                       stop(ex)
[08:29:49.337]                     })
[08:29:49.337]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.337]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.337]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.337]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.337]                       fi <- file.info(pathname)
[08:29:49.337]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.337]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.337]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.337]                         fi[["size"]], fi[["mtime"]])
[08:29:49.337]                       stop(msg)
[08:29:49.337]                     }
[08:29:49.337]                     invisible(pathname)
[08:29:49.337]                   }
[08:29:49.337]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.337]                     rootPath = tempdir()) 
[08:29:49.337]                   {
[08:29:49.337]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.337]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.337]                       tmpdir = path, fileext = ".rds")
[08:29:49.337]                     save_rds(obj, file)
[08:29:49.337]                   }
[08:29:49.337]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.337]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.337]                   {
[08:29:49.337]                     inherits <- base::inherits
[08:29:49.337]                     invokeRestart <- base::invokeRestart
[08:29:49.337]                     is.null <- base::is.null
[08:29:49.337]                     muffled <- FALSE
[08:29:49.337]                     if (inherits(cond, "message")) {
[08:29:49.337]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.337]                       if (muffled) 
[08:29:49.337]                         invokeRestart("muffleMessage")
[08:29:49.337]                     }
[08:29:49.337]                     else if (inherits(cond, "warning")) {
[08:29:49.337]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.337]                       if (muffled) 
[08:29:49.337]                         invokeRestart("muffleWarning")
[08:29:49.337]                     }
[08:29:49.337]                     else if (inherits(cond, "condition")) {
[08:29:49.337]                       if (!is.null(pattern)) {
[08:29:49.337]                         computeRestarts <- base::computeRestarts
[08:29:49.337]                         grepl <- base::grepl
[08:29:49.337]                         restarts <- computeRestarts(cond)
[08:29:49.337]                         for (restart in restarts) {
[08:29:49.337]                           name <- restart$name
[08:29:49.337]                           if (is.null(name)) 
[08:29:49.337]                             next
[08:29:49.337]                           if (!grepl(pattern, name)) 
[08:29:49.337]                             next
[08:29:49.337]                           invokeRestart(restart)
[08:29:49.337]                           muffled <- TRUE
[08:29:49.337]                           break
[08:29:49.337]                         }
[08:29:49.337]                       }
[08:29:49.337]                     }
[08:29:49.337]                     invisible(muffled)
[08:29:49.337]                   }
[08:29:49.337]                   muffleCondition(cond)
[08:29:49.337]                 })
[08:29:49.337]             }))
[08:29:49.337]             future::FutureResult(value = ...future.value$value, 
[08:29:49.337]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.337]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.337]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.337]                     ...future.globalenv.names))
[08:29:49.337]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.337]         }, condition = base::local({
[08:29:49.337]             c <- base::c
[08:29:49.337]             inherits <- base::inherits
[08:29:49.337]             invokeRestart <- base::invokeRestart
[08:29:49.337]             length <- base::length
[08:29:49.337]             list <- base::list
[08:29:49.337]             seq.int <- base::seq.int
[08:29:49.337]             signalCondition <- base::signalCondition
[08:29:49.337]             sys.calls <- base::sys.calls
[08:29:49.337]             `[[` <- base::`[[`
[08:29:49.337]             `+` <- base::`+`
[08:29:49.337]             `<<-` <- base::`<<-`
[08:29:49.337]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.337]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.337]                   3L)]
[08:29:49.337]             }
[08:29:49.337]             function(cond) {
[08:29:49.337]                 is_error <- inherits(cond, "error")
[08:29:49.337]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.337]                   NULL)
[08:29:49.337]                 if (is_error) {
[08:29:49.337]                   sessionInformation <- function() {
[08:29:49.337]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.337]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.337]                       search = base::search(), system = base::Sys.info())
[08:29:49.337]                   }
[08:29:49.337]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.337]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.337]                     cond$call), session = sessionInformation(), 
[08:29:49.337]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.337]                   signalCondition(cond)
[08:29:49.337]                 }
[08:29:49.337]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.337]                 "immediateCondition"))) {
[08:29:49.337]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.337]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.337]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.337]                   if (TRUE && !signal) {
[08:29:49.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.337]                     {
[08:29:49.337]                       inherits <- base::inherits
[08:29:49.337]                       invokeRestart <- base::invokeRestart
[08:29:49.337]                       is.null <- base::is.null
[08:29:49.337]                       muffled <- FALSE
[08:29:49.337]                       if (inherits(cond, "message")) {
[08:29:49.337]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.337]                         if (muffled) 
[08:29:49.337]                           invokeRestart("muffleMessage")
[08:29:49.337]                       }
[08:29:49.337]                       else if (inherits(cond, "warning")) {
[08:29:49.337]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.337]                         if (muffled) 
[08:29:49.337]                           invokeRestart("muffleWarning")
[08:29:49.337]                       }
[08:29:49.337]                       else if (inherits(cond, "condition")) {
[08:29:49.337]                         if (!is.null(pattern)) {
[08:29:49.337]                           computeRestarts <- base::computeRestarts
[08:29:49.337]                           grepl <- base::grepl
[08:29:49.337]                           restarts <- computeRestarts(cond)
[08:29:49.337]                           for (restart in restarts) {
[08:29:49.337]                             name <- restart$name
[08:29:49.337]                             if (is.null(name)) 
[08:29:49.337]                               next
[08:29:49.337]                             if (!grepl(pattern, name)) 
[08:29:49.337]                               next
[08:29:49.337]                             invokeRestart(restart)
[08:29:49.337]                             muffled <- TRUE
[08:29:49.337]                             break
[08:29:49.337]                           }
[08:29:49.337]                         }
[08:29:49.337]                       }
[08:29:49.337]                       invisible(muffled)
[08:29:49.337]                     }
[08:29:49.337]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.337]                   }
[08:29:49.337]                 }
[08:29:49.337]                 else {
[08:29:49.337]                   if (TRUE) {
[08:29:49.337]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.337]                     {
[08:29:49.337]                       inherits <- base::inherits
[08:29:49.337]                       invokeRestart <- base::invokeRestart
[08:29:49.337]                       is.null <- base::is.null
[08:29:49.337]                       muffled <- FALSE
[08:29:49.337]                       if (inherits(cond, "message")) {
[08:29:49.337]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.337]                         if (muffled) 
[08:29:49.337]                           invokeRestart("muffleMessage")
[08:29:49.337]                       }
[08:29:49.337]                       else if (inherits(cond, "warning")) {
[08:29:49.337]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.337]                         if (muffled) 
[08:29:49.337]                           invokeRestart("muffleWarning")
[08:29:49.337]                       }
[08:29:49.337]                       else if (inherits(cond, "condition")) {
[08:29:49.337]                         if (!is.null(pattern)) {
[08:29:49.337]                           computeRestarts <- base::computeRestarts
[08:29:49.337]                           grepl <- base::grepl
[08:29:49.337]                           restarts <- computeRestarts(cond)
[08:29:49.337]                           for (restart in restarts) {
[08:29:49.337]                             name <- restart$name
[08:29:49.337]                             if (is.null(name)) 
[08:29:49.337]                               next
[08:29:49.337]                             if (!grepl(pattern, name)) 
[08:29:49.337]                               next
[08:29:49.337]                             invokeRestart(restart)
[08:29:49.337]                             muffled <- TRUE
[08:29:49.337]                             break
[08:29:49.337]                           }
[08:29:49.337]                         }
[08:29:49.337]                       }
[08:29:49.337]                       invisible(muffled)
[08:29:49.337]                     }
[08:29:49.337]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.337]                   }
[08:29:49.337]                 }
[08:29:49.337]             }
[08:29:49.337]         }))
[08:29:49.337]     }, error = function(ex) {
[08:29:49.337]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.337]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.337]                 ...future.rng), started = ...future.startTime, 
[08:29:49.337]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.337]             version = "1.8"), class = "FutureResult")
[08:29:49.337]     }, finally = {
[08:29:49.337]         if (!identical(...future.workdir, getwd())) 
[08:29:49.337]             setwd(...future.workdir)
[08:29:49.337]         {
[08:29:49.337]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.337]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.337]             }
[08:29:49.337]             base::options(...future.oldOptions)
[08:29:49.337]             if (.Platform$OS.type == "windows") {
[08:29:49.337]                 old_names <- names(...future.oldEnvVars)
[08:29:49.337]                 envs <- base::Sys.getenv()
[08:29:49.337]                 names <- names(envs)
[08:29:49.337]                 common <- intersect(names, old_names)
[08:29:49.337]                 added <- setdiff(names, old_names)
[08:29:49.337]                 removed <- setdiff(old_names, names)
[08:29:49.337]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.337]                   envs[common]]
[08:29:49.337]                 NAMES <- toupper(changed)
[08:29:49.337]                 args <- list()
[08:29:49.337]                 for (kk in seq_along(NAMES)) {
[08:29:49.337]                   name <- changed[[kk]]
[08:29:49.337]                   NAME <- NAMES[[kk]]
[08:29:49.337]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.337]                     next
[08:29:49.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.337]                 }
[08:29:49.337]                 NAMES <- toupper(added)
[08:29:49.337]                 for (kk in seq_along(NAMES)) {
[08:29:49.337]                   name <- added[[kk]]
[08:29:49.337]                   NAME <- NAMES[[kk]]
[08:29:49.337]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.337]                     next
[08:29:49.337]                   args[[name]] <- ""
[08:29:49.337]                 }
[08:29:49.337]                 NAMES <- toupper(removed)
[08:29:49.337]                 for (kk in seq_along(NAMES)) {
[08:29:49.337]                   name <- removed[[kk]]
[08:29:49.337]                   NAME <- NAMES[[kk]]
[08:29:49.337]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.337]                     next
[08:29:49.337]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.337]                 }
[08:29:49.337]                 if (length(args) > 0) 
[08:29:49.337]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.337]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.337]             }
[08:29:49.337]             else {
[08:29:49.337]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.337]             }
[08:29:49.337]             {
[08:29:49.337]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.337]                   0L) {
[08:29:49.337]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.337]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.337]                   base::options(opts)
[08:29:49.337]                 }
[08:29:49.337]                 {
[08:29:49.337]                   {
[08:29:49.337]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.337]                     NULL
[08:29:49.337]                   }
[08:29:49.337]                   options(future.plan = NULL)
[08:29:49.337]                   if (is.na(NA_character_)) 
[08:29:49.337]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.337]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.337]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.337]                     .init = FALSE)
[08:29:49.337]                 }
[08:29:49.337]             }
[08:29:49.337]         }
[08:29:49.337]     })
[08:29:49.337]     if (TRUE) {
[08:29:49.337]         base::sink(type = "output", split = FALSE)
[08:29:49.337]         if (TRUE) {
[08:29:49.337]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.337]         }
[08:29:49.337]         else {
[08:29:49.337]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.337]         }
[08:29:49.337]         base::close(...future.stdout)
[08:29:49.337]         ...future.stdout <- NULL
[08:29:49.337]     }
[08:29:49.337]     ...future.result$conditions <- ...future.conditions
[08:29:49.337]     ...future.result$finished <- base::Sys.time()
[08:29:49.337]     ...future.result
[08:29:49.337] }
[08:29:49.339] requestCore(): workers = 2
[08:29:49.341] MulticoreFuture started
[08:29:49.342] - Launch lazy future ... done
[08:29:49.342] run() for ‘MulticoreFuture’ ... done
[08:29:49.342] plan(): Setting new future strategy stack:
[08:29:49.342] result() for MulticoreFuture ...
[08:29:49.342] List of future strategies:
[08:29:49.342] 1. sequential:
[08:29:49.342]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.342]    - tweaked: FALSE
[08:29:49.342]    - call: NULL
[08:29:49.343] plan(): nbrOfWorkers() = 1
[08:29:49.345] plan(): Setting new future strategy stack:
[08:29:49.345] List of future strategies:
[08:29:49.345] 1. multicore:
[08:29:49.345]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.345]    - tweaked: FALSE
[08:29:49.345]    - call: plan(strategy)
[08:29:49.349] plan(): nbrOfWorkers() = 2
[08:29:49.349] result() for MulticoreFuture ...
[08:29:49.350] result() for MulticoreFuture ... done
[08:29:49.350] result() for MulticoreFuture ... done
[08:29:49.350] result() for MulticoreFuture ...
[08:29:49.350] result() for MulticoreFuture ... done
[08:29:49.350] result() for MulticoreFuture ...
[08:29:49.350] result() for MulticoreFuture ... done
[1] 42
[08:29:49.351] result() for MulticoreFuture ...
[08:29:49.351] result() for MulticoreFuture ... done
- stdout = NA
[08:29:49.351] getGlobalsAndPackages() ...
[08:29:49.351] Searching for globals...
[08:29:49.355] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.355] Searching for globals ... DONE
[08:29:49.355] Resolving globals: FALSE
[08:29:49.356] 
[08:29:49.356] - packages: [1] ‘utils’
[08:29:49.356] getGlobalsAndPackages() ... DONE
[08:29:49.357] run() for ‘Future’ ...
[08:29:49.357] - state: ‘created’
[08:29:49.357] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.359] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.359] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.359]   - Field: ‘label’
[08:29:49.359]   - Field: ‘local’
[08:29:49.360]   - Field: ‘owner’
[08:29:49.360]   - Field: ‘envir’
[08:29:49.360]   - Field: ‘workers’
[08:29:49.360]   - Field: ‘packages’
[08:29:49.360]   - Field: ‘gc’
[08:29:49.360]   - Field: ‘job’
[08:29:49.360]   - Field: ‘conditions’
[08:29:49.360]   - Field: ‘expr’
[08:29:49.360]   - Field: ‘uuid’
[08:29:49.361]   - Field: ‘seed’
[08:29:49.361]   - Field: ‘version’
[08:29:49.361]   - Field: ‘result’
[08:29:49.363]   - Field: ‘asynchronous’
[08:29:49.363]   - Field: ‘calls’
[08:29:49.364]   - Field: ‘globals’
[08:29:49.364]   - Field: ‘stdout’
[08:29:49.364]   - Field: ‘earlySignal’
[08:29:49.364]   - Field: ‘lazy’
[08:29:49.364]   - Field: ‘state’
[08:29:49.364] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.364] - Launch lazy future ...
[08:29:49.365] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.365] Packages needed by future strategies (n = 0): <none>
[08:29:49.366] {
[08:29:49.366]     {
[08:29:49.366]         {
[08:29:49.366]             ...future.startTime <- base::Sys.time()
[08:29:49.366]             {
[08:29:49.366]                 {
[08:29:49.366]                   {
[08:29:49.366]                     {
[08:29:49.366]                       {
[08:29:49.366]                         base::local({
[08:29:49.366]                           has_future <- base::requireNamespace("future", 
[08:29:49.366]                             quietly = TRUE)
[08:29:49.366]                           if (has_future) {
[08:29:49.366]                             ns <- base::getNamespace("future")
[08:29:49.366]                             version <- ns[[".package"]][["version"]]
[08:29:49.366]                             if (is.null(version)) 
[08:29:49.366]                               version <- utils::packageVersion("future")
[08:29:49.366]                           }
[08:29:49.366]                           else {
[08:29:49.366]                             version <- NULL
[08:29:49.366]                           }
[08:29:49.366]                           if (!has_future || version < "1.8.0") {
[08:29:49.366]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.366]                               "", base::R.version$version.string), 
[08:29:49.366]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.366]                                 base::R.version$platform, 8 * 
[08:29:49.366]                                   base::.Machine$sizeof.pointer), 
[08:29:49.366]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.366]                                 "release", "version")], collapse = " "), 
[08:29:49.366]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.366]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.366]                               info)
[08:29:49.366]                             info <- base::paste(info, collapse = "; ")
[08:29:49.366]                             if (!has_future) {
[08:29:49.366]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.366]                                 info)
[08:29:49.366]                             }
[08:29:49.366]                             else {
[08:29:49.366]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.366]                                 info, version)
[08:29:49.366]                             }
[08:29:49.366]                             base::stop(msg)
[08:29:49.366]                           }
[08:29:49.366]                         })
[08:29:49.366]                       }
[08:29:49.366]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.366]                       base::options(mc.cores = 1L)
[08:29:49.366]                     }
[08:29:49.366]                     base::local({
[08:29:49.366]                       for (pkg in "utils") {
[08:29:49.366]                         base::loadNamespace(pkg)
[08:29:49.366]                         base::library(pkg, character.only = TRUE)
[08:29:49.366]                       }
[08:29:49.366]                     })
[08:29:49.366]                   }
[08:29:49.366]                   ...future.strategy.old <- future::plan("list")
[08:29:49.366]                   options(future.plan = NULL)
[08:29:49.366]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.366]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.366]                 }
[08:29:49.366]                 ...future.workdir <- getwd()
[08:29:49.366]             }
[08:29:49.366]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.366]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.366]         }
[08:29:49.366]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.366]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.366]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.366]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.366]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.366]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.366]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.366]             base::names(...future.oldOptions))
[08:29:49.366]     }
[08:29:49.366]     if (TRUE) {
[08:29:49.366]     }
[08:29:49.366]     else {
[08:29:49.366]         if (NA) {
[08:29:49.366]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.366]                 open = "w")
[08:29:49.366]         }
[08:29:49.366]         else {
[08:29:49.366]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.366]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.366]         }
[08:29:49.366]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.366]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.366]             base::sink(type = "output", split = FALSE)
[08:29:49.366]             base::close(...future.stdout)
[08:29:49.366]         }, add = TRUE)
[08:29:49.366]     }
[08:29:49.366]     ...future.frame <- base::sys.nframe()
[08:29:49.366]     ...future.conditions <- base::list()
[08:29:49.366]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.366]     if (FALSE) {
[08:29:49.366]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.366]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.366]     }
[08:29:49.366]     ...future.result <- base::tryCatch({
[08:29:49.366]         base::withCallingHandlers({
[08:29:49.366]             ...future.value <- base::withVisible(base::local({
[08:29:49.366]                 withCallingHandlers({
[08:29:49.366]                   {
[08:29:49.366]                     print(1:50)
[08:29:49.366]                     str(1:50)
[08:29:49.366]                     cat(letters, sep = "-")
[08:29:49.366]                     cat(1:6, collapse = "\n")
[08:29:49.366]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.366]                     42L
[08:29:49.366]                   }
[08:29:49.366]                 }, immediateCondition = function(cond) {
[08:29:49.366]                   save_rds <- function (object, pathname, ...) 
[08:29:49.366]                   {
[08:29:49.366]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.366]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.366]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.366]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.366]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.366]                         fi_tmp[["mtime"]])
[08:29:49.366]                     }
[08:29:49.366]                     tryCatch({
[08:29:49.366]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.366]                     }, error = function(ex) {
[08:29:49.366]                       msg <- conditionMessage(ex)
[08:29:49.366]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.366]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.366]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.366]                         fi_tmp[["mtime"]], msg)
[08:29:49.366]                       ex$message <- msg
[08:29:49.366]                       stop(ex)
[08:29:49.366]                     })
[08:29:49.366]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.366]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.366]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.366]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.366]                       fi <- file.info(pathname)
[08:29:49.366]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.366]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.366]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.366]                         fi[["size"]], fi[["mtime"]])
[08:29:49.366]                       stop(msg)
[08:29:49.366]                     }
[08:29:49.366]                     invisible(pathname)
[08:29:49.366]                   }
[08:29:49.366]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.366]                     rootPath = tempdir()) 
[08:29:49.366]                   {
[08:29:49.366]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.366]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.366]                       tmpdir = path, fileext = ".rds")
[08:29:49.366]                     save_rds(obj, file)
[08:29:49.366]                   }
[08:29:49.366]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.366]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.366]                   {
[08:29:49.366]                     inherits <- base::inherits
[08:29:49.366]                     invokeRestart <- base::invokeRestart
[08:29:49.366]                     is.null <- base::is.null
[08:29:49.366]                     muffled <- FALSE
[08:29:49.366]                     if (inherits(cond, "message")) {
[08:29:49.366]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.366]                       if (muffled) 
[08:29:49.366]                         invokeRestart("muffleMessage")
[08:29:49.366]                     }
[08:29:49.366]                     else if (inherits(cond, "warning")) {
[08:29:49.366]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.366]                       if (muffled) 
[08:29:49.366]                         invokeRestart("muffleWarning")
[08:29:49.366]                     }
[08:29:49.366]                     else if (inherits(cond, "condition")) {
[08:29:49.366]                       if (!is.null(pattern)) {
[08:29:49.366]                         computeRestarts <- base::computeRestarts
[08:29:49.366]                         grepl <- base::grepl
[08:29:49.366]                         restarts <- computeRestarts(cond)
[08:29:49.366]                         for (restart in restarts) {
[08:29:49.366]                           name <- restart$name
[08:29:49.366]                           if (is.null(name)) 
[08:29:49.366]                             next
[08:29:49.366]                           if (!grepl(pattern, name)) 
[08:29:49.366]                             next
[08:29:49.366]                           invokeRestart(restart)
[08:29:49.366]                           muffled <- TRUE
[08:29:49.366]                           break
[08:29:49.366]                         }
[08:29:49.366]                       }
[08:29:49.366]                     }
[08:29:49.366]                     invisible(muffled)
[08:29:49.366]                   }
[08:29:49.366]                   muffleCondition(cond)
[08:29:49.366]                 })
[08:29:49.366]             }))
[08:29:49.366]             future::FutureResult(value = ...future.value$value, 
[08:29:49.366]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.366]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.366]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.366]                     ...future.globalenv.names))
[08:29:49.366]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.366]         }, condition = base::local({
[08:29:49.366]             c <- base::c
[08:29:49.366]             inherits <- base::inherits
[08:29:49.366]             invokeRestart <- base::invokeRestart
[08:29:49.366]             length <- base::length
[08:29:49.366]             list <- base::list
[08:29:49.366]             seq.int <- base::seq.int
[08:29:49.366]             signalCondition <- base::signalCondition
[08:29:49.366]             sys.calls <- base::sys.calls
[08:29:49.366]             `[[` <- base::`[[`
[08:29:49.366]             `+` <- base::`+`
[08:29:49.366]             `<<-` <- base::`<<-`
[08:29:49.366]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.366]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.366]                   3L)]
[08:29:49.366]             }
[08:29:49.366]             function(cond) {
[08:29:49.366]                 is_error <- inherits(cond, "error")
[08:29:49.366]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.366]                   NULL)
[08:29:49.366]                 if (is_error) {
[08:29:49.366]                   sessionInformation <- function() {
[08:29:49.366]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.366]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.366]                       search = base::search(), system = base::Sys.info())
[08:29:49.366]                   }
[08:29:49.366]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.366]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.366]                     cond$call), session = sessionInformation(), 
[08:29:49.366]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.366]                   signalCondition(cond)
[08:29:49.366]                 }
[08:29:49.366]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.366]                 "immediateCondition"))) {
[08:29:49.366]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.366]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.366]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.366]                   if (TRUE && !signal) {
[08:29:49.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.366]                     {
[08:29:49.366]                       inherits <- base::inherits
[08:29:49.366]                       invokeRestart <- base::invokeRestart
[08:29:49.366]                       is.null <- base::is.null
[08:29:49.366]                       muffled <- FALSE
[08:29:49.366]                       if (inherits(cond, "message")) {
[08:29:49.366]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.366]                         if (muffled) 
[08:29:49.366]                           invokeRestart("muffleMessage")
[08:29:49.366]                       }
[08:29:49.366]                       else if (inherits(cond, "warning")) {
[08:29:49.366]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.366]                         if (muffled) 
[08:29:49.366]                           invokeRestart("muffleWarning")
[08:29:49.366]                       }
[08:29:49.366]                       else if (inherits(cond, "condition")) {
[08:29:49.366]                         if (!is.null(pattern)) {
[08:29:49.366]                           computeRestarts <- base::computeRestarts
[08:29:49.366]                           grepl <- base::grepl
[08:29:49.366]                           restarts <- computeRestarts(cond)
[08:29:49.366]                           for (restart in restarts) {
[08:29:49.366]                             name <- restart$name
[08:29:49.366]                             if (is.null(name)) 
[08:29:49.366]                               next
[08:29:49.366]                             if (!grepl(pattern, name)) 
[08:29:49.366]                               next
[08:29:49.366]                             invokeRestart(restart)
[08:29:49.366]                             muffled <- TRUE
[08:29:49.366]                             break
[08:29:49.366]                           }
[08:29:49.366]                         }
[08:29:49.366]                       }
[08:29:49.366]                       invisible(muffled)
[08:29:49.366]                     }
[08:29:49.366]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.366]                   }
[08:29:49.366]                 }
[08:29:49.366]                 else {
[08:29:49.366]                   if (TRUE) {
[08:29:49.366]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.366]                     {
[08:29:49.366]                       inherits <- base::inherits
[08:29:49.366]                       invokeRestart <- base::invokeRestart
[08:29:49.366]                       is.null <- base::is.null
[08:29:49.366]                       muffled <- FALSE
[08:29:49.366]                       if (inherits(cond, "message")) {
[08:29:49.366]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.366]                         if (muffled) 
[08:29:49.366]                           invokeRestart("muffleMessage")
[08:29:49.366]                       }
[08:29:49.366]                       else if (inherits(cond, "warning")) {
[08:29:49.366]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.366]                         if (muffled) 
[08:29:49.366]                           invokeRestart("muffleWarning")
[08:29:49.366]                       }
[08:29:49.366]                       else if (inherits(cond, "condition")) {
[08:29:49.366]                         if (!is.null(pattern)) {
[08:29:49.366]                           computeRestarts <- base::computeRestarts
[08:29:49.366]                           grepl <- base::grepl
[08:29:49.366]                           restarts <- computeRestarts(cond)
[08:29:49.366]                           for (restart in restarts) {
[08:29:49.366]                             name <- restart$name
[08:29:49.366]                             if (is.null(name)) 
[08:29:49.366]                               next
[08:29:49.366]                             if (!grepl(pattern, name)) 
[08:29:49.366]                               next
[08:29:49.366]                             invokeRestart(restart)
[08:29:49.366]                             muffled <- TRUE
[08:29:49.366]                             break
[08:29:49.366]                           }
[08:29:49.366]                         }
[08:29:49.366]                       }
[08:29:49.366]                       invisible(muffled)
[08:29:49.366]                     }
[08:29:49.366]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.366]                   }
[08:29:49.366]                 }
[08:29:49.366]             }
[08:29:49.366]         }))
[08:29:49.366]     }, error = function(ex) {
[08:29:49.366]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.366]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.366]                 ...future.rng), started = ...future.startTime, 
[08:29:49.366]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.366]             version = "1.8"), class = "FutureResult")
[08:29:49.366]     }, finally = {
[08:29:49.366]         if (!identical(...future.workdir, getwd())) 
[08:29:49.366]             setwd(...future.workdir)
[08:29:49.366]         {
[08:29:49.366]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.366]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.366]             }
[08:29:49.366]             base::options(...future.oldOptions)
[08:29:49.366]             if (.Platform$OS.type == "windows") {
[08:29:49.366]                 old_names <- names(...future.oldEnvVars)
[08:29:49.366]                 envs <- base::Sys.getenv()
[08:29:49.366]                 names <- names(envs)
[08:29:49.366]                 common <- intersect(names, old_names)
[08:29:49.366]                 added <- setdiff(names, old_names)
[08:29:49.366]                 removed <- setdiff(old_names, names)
[08:29:49.366]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.366]                   envs[common]]
[08:29:49.366]                 NAMES <- toupper(changed)
[08:29:49.366]                 args <- list()
[08:29:49.366]                 for (kk in seq_along(NAMES)) {
[08:29:49.366]                   name <- changed[[kk]]
[08:29:49.366]                   NAME <- NAMES[[kk]]
[08:29:49.366]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.366]                     next
[08:29:49.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.366]                 }
[08:29:49.366]                 NAMES <- toupper(added)
[08:29:49.366]                 for (kk in seq_along(NAMES)) {
[08:29:49.366]                   name <- added[[kk]]
[08:29:49.366]                   NAME <- NAMES[[kk]]
[08:29:49.366]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.366]                     next
[08:29:49.366]                   args[[name]] <- ""
[08:29:49.366]                 }
[08:29:49.366]                 NAMES <- toupper(removed)
[08:29:49.366]                 for (kk in seq_along(NAMES)) {
[08:29:49.366]                   name <- removed[[kk]]
[08:29:49.366]                   NAME <- NAMES[[kk]]
[08:29:49.366]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.366]                     next
[08:29:49.366]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.366]                 }
[08:29:49.366]                 if (length(args) > 0) 
[08:29:49.366]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.366]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.366]             }
[08:29:49.366]             else {
[08:29:49.366]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.366]             }
[08:29:49.366]             {
[08:29:49.366]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.366]                   0L) {
[08:29:49.366]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.366]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.366]                   base::options(opts)
[08:29:49.366]                 }
[08:29:49.366]                 {
[08:29:49.366]                   {
[08:29:49.366]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.366]                     NULL
[08:29:49.366]                   }
[08:29:49.366]                   options(future.plan = NULL)
[08:29:49.366]                   if (is.na(NA_character_)) 
[08:29:49.366]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.366]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.366]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.366]                     .init = FALSE)
[08:29:49.366]                 }
[08:29:49.366]             }
[08:29:49.366]         }
[08:29:49.366]     })
[08:29:49.366]     if (FALSE) {
[08:29:49.366]         base::sink(type = "output", split = FALSE)
[08:29:49.366]         if (NA) {
[08:29:49.366]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.366]         }
[08:29:49.366]         else {
[08:29:49.366]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.366]         }
[08:29:49.366]         base::close(...future.stdout)
[08:29:49.366]         ...future.stdout <- NULL
[08:29:49.366]     }
[08:29:49.366]     ...future.result$conditions <- ...future.conditions
[08:29:49.366]     ...future.result$finished <- base::Sys.time()
[08:29:49.366]     ...future.result
[08:29:49.366] }
[08:29:49.368] requestCore(): workers = 2
[08:29:49.370] MulticoreFuture started
[08:29:49.371] - Launch lazy future ... done
[08:29:49.371] run() for ‘MulticoreFuture’ ... done
[08:29:49.371] result() for MulticoreFuture ...
[08:29:49.371] plan(): Setting new future strategy stack:
[08:29:49.372] List of future strategies:
[08:29:49.372] 1. sequential:
[08:29:49.372]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.372]    - tweaked: FALSE
[08:29:49.372]    - call: NULL
[08:29:49.373] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:29:49.376] plan(): Setting new future strategy stack:
[08:29:49.376] List of future strategies:
[08:29:49.376] 1. multicore:
[08:29:49.376]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.376]    - tweaked: FALSE
[08:29:49.376]    - call: plan(strategy)
[08:29:49.379] plan(): nbrOfWorkers() = 2
[08:29:49.380] result() for MulticoreFuture ...
[08:29:49.380] result() for MulticoreFuture ... done
[08:29:49.381] result() for MulticoreFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:49"
 $ session_uuid: chr "c75c18a3-7398-2ad4-3b9e-0aeb8e08f967"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85053
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:49.390] result() for MulticoreFuture ...
[08:29:49.390] result() for MulticoreFuture ... done
[08:29:49.390] result() for MulticoreFuture ...
[08:29:49.390] result() for MulticoreFuture ... done
[08:29:49.391] getGlobalsAndPackages() ...
[08:29:49.391] Searching for globals...
[08:29:49.395] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:49.395] Searching for globals ... DONE
[08:29:49.395] Resolving globals: FALSE
[08:29:49.396] 
[08:29:49.396] - packages: [1] ‘utils’
[08:29:49.396] getGlobalsAndPackages() ... DONE
[08:29:49.396] run() for ‘Future’ ...
[08:29:49.396] - state: ‘created’
[08:29:49.396] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.399] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.399] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.399]   - Field: ‘label’
[08:29:49.399]   - Field: ‘local’
[08:29:49.399]   - Field: ‘owner’
[08:29:49.399]   - Field: ‘envir’
[08:29:49.399]   - Field: ‘workers’
[08:29:49.399]   - Field: ‘packages’
[08:29:49.400]   - Field: ‘gc’
[08:29:49.400]   - Field: ‘job’
[08:29:49.400]   - Field: ‘conditions’
[08:29:49.400]   - Field: ‘expr’
[08:29:49.400]   - Field: ‘uuid’
[08:29:49.400]   - Field: ‘seed’
[08:29:49.400]   - Field: ‘version’
[08:29:49.400]   - Field: ‘result’
[08:29:49.400]   - Field: ‘asynchronous’
[08:29:49.400]   - Field: ‘calls’
[08:29:49.401]   - Field: ‘globals’
[08:29:49.401]   - Field: ‘stdout’
[08:29:49.401]   - Field: ‘earlySignal’
[08:29:49.401]   - Field: ‘lazy’
[08:29:49.401]   - Field: ‘state’
[08:29:49.401] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.401] - Launch lazy future ...
[08:29:49.401] Packages needed by the future expression (n = 1): ‘utils’
[08:29:49.402] Packages needed by future strategies (n = 0): <none>
[08:29:49.402] {
[08:29:49.402]     {
[08:29:49.402]         {
[08:29:49.402]             ...future.startTime <- base::Sys.time()
[08:29:49.402]             {
[08:29:49.402]                 {
[08:29:49.402]                   {
[08:29:49.402]                     {
[08:29:49.402]                       {
[08:29:49.402]                         base::local({
[08:29:49.402]                           has_future <- base::requireNamespace("future", 
[08:29:49.402]                             quietly = TRUE)
[08:29:49.402]                           if (has_future) {
[08:29:49.402]                             ns <- base::getNamespace("future")
[08:29:49.402]                             version <- ns[[".package"]][["version"]]
[08:29:49.402]                             if (is.null(version)) 
[08:29:49.402]                               version <- utils::packageVersion("future")
[08:29:49.402]                           }
[08:29:49.402]                           else {
[08:29:49.402]                             version <- NULL
[08:29:49.402]                           }
[08:29:49.402]                           if (!has_future || version < "1.8.0") {
[08:29:49.402]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.402]                               "", base::R.version$version.string), 
[08:29:49.402]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:49.402]                                 base::R.version$platform, 8 * 
[08:29:49.402]                                   base::.Machine$sizeof.pointer), 
[08:29:49.402]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.402]                                 "release", "version")], collapse = " "), 
[08:29:49.402]                               hostname = base::Sys.info()[["nodename"]])
[08:29:49.402]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.402]                               info)
[08:29:49.402]                             info <- base::paste(info, collapse = "; ")
[08:29:49.402]                             if (!has_future) {
[08:29:49.402]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.402]                                 info)
[08:29:49.402]                             }
[08:29:49.402]                             else {
[08:29:49.402]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.402]                                 info, version)
[08:29:49.402]                             }
[08:29:49.402]                             base::stop(msg)
[08:29:49.402]                           }
[08:29:49.402]                         })
[08:29:49.402]                       }
[08:29:49.402]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.402]                       base::options(mc.cores = 1L)
[08:29:49.402]                     }
[08:29:49.402]                     base::local({
[08:29:49.402]                       for (pkg in "utils") {
[08:29:49.402]                         base::loadNamespace(pkg)
[08:29:49.402]                         base::library(pkg, character.only = TRUE)
[08:29:49.402]                       }
[08:29:49.402]                     })
[08:29:49.402]                   }
[08:29:49.402]                   ...future.strategy.old <- future::plan("list")
[08:29:49.402]                   options(future.plan = NULL)
[08:29:49.402]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.402]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.402]                 }
[08:29:49.402]                 ...future.workdir <- getwd()
[08:29:49.402]             }
[08:29:49.402]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.402]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.402]         }
[08:29:49.402]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.402]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.402]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.402]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.402]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.402]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.402]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.402]             base::names(...future.oldOptions))
[08:29:49.402]     }
[08:29:49.402]     if (TRUE) {
[08:29:49.402]     }
[08:29:49.402]     else {
[08:29:49.402]         if (NA) {
[08:29:49.402]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.402]                 open = "w")
[08:29:49.402]         }
[08:29:49.402]         else {
[08:29:49.402]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.402]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.402]         }
[08:29:49.402]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.402]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.402]             base::sink(type = "output", split = FALSE)
[08:29:49.402]             base::close(...future.stdout)
[08:29:49.402]         }, add = TRUE)
[08:29:49.402]     }
[08:29:49.402]     ...future.frame <- base::sys.nframe()
[08:29:49.402]     ...future.conditions <- base::list()
[08:29:49.402]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.402]     if (FALSE) {
[08:29:49.402]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.402]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.402]     }
[08:29:49.402]     ...future.result <- base::tryCatch({
[08:29:49.402]         base::withCallingHandlers({
[08:29:49.402]             ...future.value <- base::withVisible(base::local({
[08:29:49.402]                 withCallingHandlers({
[08:29:49.402]                   {
[08:29:49.402]                     print(1:50)
[08:29:49.402]                     str(1:50)
[08:29:49.402]                     cat(letters, sep = "-")
[08:29:49.402]                     cat(1:6, collapse = "\n")
[08:29:49.402]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:49.402]                     42L
[08:29:49.402]                   }
[08:29:49.402]                 }, immediateCondition = function(cond) {
[08:29:49.402]                   save_rds <- function (object, pathname, ...) 
[08:29:49.402]                   {
[08:29:49.402]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.402]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.402]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.402]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.402]                         fi_tmp[["mtime"]])
[08:29:49.402]                     }
[08:29:49.402]                     tryCatch({
[08:29:49.402]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.402]                     }, error = function(ex) {
[08:29:49.402]                       msg <- conditionMessage(ex)
[08:29:49.402]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.402]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.402]                         fi_tmp[["mtime"]], msg)
[08:29:49.402]                       ex$message <- msg
[08:29:49.402]                       stop(ex)
[08:29:49.402]                     })
[08:29:49.402]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.402]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.402]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.402]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.402]                       fi <- file.info(pathname)
[08:29:49.402]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.402]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.402]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.402]                         fi[["size"]], fi[["mtime"]])
[08:29:49.402]                       stop(msg)
[08:29:49.402]                     }
[08:29:49.402]                     invisible(pathname)
[08:29:49.402]                   }
[08:29:49.402]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.402]                     rootPath = tempdir()) 
[08:29:49.402]                   {
[08:29:49.402]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.402]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.402]                       tmpdir = path, fileext = ".rds")
[08:29:49.402]                     save_rds(obj, file)
[08:29:49.402]                   }
[08:29:49.402]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.402]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.402]                   {
[08:29:49.402]                     inherits <- base::inherits
[08:29:49.402]                     invokeRestart <- base::invokeRestart
[08:29:49.402]                     is.null <- base::is.null
[08:29:49.402]                     muffled <- FALSE
[08:29:49.402]                     if (inherits(cond, "message")) {
[08:29:49.402]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.402]                       if (muffled) 
[08:29:49.402]                         invokeRestart("muffleMessage")
[08:29:49.402]                     }
[08:29:49.402]                     else if (inherits(cond, "warning")) {
[08:29:49.402]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.402]                       if (muffled) 
[08:29:49.402]                         invokeRestart("muffleWarning")
[08:29:49.402]                     }
[08:29:49.402]                     else if (inherits(cond, "condition")) {
[08:29:49.402]                       if (!is.null(pattern)) {
[08:29:49.402]                         computeRestarts <- base::computeRestarts
[08:29:49.402]                         grepl <- base::grepl
[08:29:49.402]                         restarts <- computeRestarts(cond)
[08:29:49.402]                         for (restart in restarts) {
[08:29:49.402]                           name <- restart$name
[08:29:49.402]                           if (is.null(name)) 
[08:29:49.402]                             next
[08:29:49.402]                           if (!grepl(pattern, name)) 
[08:29:49.402]                             next
[08:29:49.402]                           invokeRestart(restart)
[08:29:49.402]                           muffled <- TRUE
[08:29:49.402]                           break
[08:29:49.402]                         }
[08:29:49.402]                       }
[08:29:49.402]                     }
[08:29:49.402]                     invisible(muffled)
[08:29:49.402]                   }
[08:29:49.402]                   muffleCondition(cond)
[08:29:49.402]                 })
[08:29:49.402]             }))
[08:29:49.402]             future::FutureResult(value = ...future.value$value, 
[08:29:49.402]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.402]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.402]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.402]                     ...future.globalenv.names))
[08:29:49.402]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.402]         }, condition = base::local({
[08:29:49.402]             c <- base::c
[08:29:49.402]             inherits <- base::inherits
[08:29:49.402]             invokeRestart <- base::invokeRestart
[08:29:49.402]             length <- base::length
[08:29:49.402]             list <- base::list
[08:29:49.402]             seq.int <- base::seq.int
[08:29:49.402]             signalCondition <- base::signalCondition
[08:29:49.402]             sys.calls <- base::sys.calls
[08:29:49.402]             `[[` <- base::`[[`
[08:29:49.402]             `+` <- base::`+`
[08:29:49.402]             `<<-` <- base::`<<-`
[08:29:49.402]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.402]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.402]                   3L)]
[08:29:49.402]             }
[08:29:49.402]             function(cond) {
[08:29:49.402]                 is_error <- inherits(cond, "error")
[08:29:49.402]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.402]                   NULL)
[08:29:49.402]                 if (is_error) {
[08:29:49.402]                   sessionInformation <- function() {
[08:29:49.402]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.402]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.402]                       search = base::search(), system = base::Sys.info())
[08:29:49.402]                   }
[08:29:49.402]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.402]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.402]                     cond$call), session = sessionInformation(), 
[08:29:49.402]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.402]                   signalCondition(cond)
[08:29:49.402]                 }
[08:29:49.402]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.402]                 "immediateCondition"))) {
[08:29:49.402]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.402]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.402]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.402]                   if (TRUE && !signal) {
[08:29:49.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.402]                     {
[08:29:49.402]                       inherits <- base::inherits
[08:29:49.402]                       invokeRestart <- base::invokeRestart
[08:29:49.402]                       is.null <- base::is.null
[08:29:49.402]                       muffled <- FALSE
[08:29:49.402]                       if (inherits(cond, "message")) {
[08:29:49.402]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.402]                         if (muffled) 
[08:29:49.402]                           invokeRestart("muffleMessage")
[08:29:49.402]                       }
[08:29:49.402]                       else if (inherits(cond, "warning")) {
[08:29:49.402]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.402]                         if (muffled) 
[08:29:49.402]                           invokeRestart("muffleWarning")
[08:29:49.402]                       }
[08:29:49.402]                       else if (inherits(cond, "condition")) {
[08:29:49.402]                         if (!is.null(pattern)) {
[08:29:49.402]                           computeRestarts <- base::computeRestarts
[08:29:49.402]                           grepl <- base::grepl
[08:29:49.402]                           restarts <- computeRestarts(cond)
[08:29:49.402]                           for (restart in restarts) {
[08:29:49.402]                             name <- restart$name
[08:29:49.402]                             if (is.null(name)) 
[08:29:49.402]                               next
[08:29:49.402]                             if (!grepl(pattern, name)) 
[08:29:49.402]                               next
[08:29:49.402]                             invokeRestart(restart)
[08:29:49.402]                             muffled <- TRUE
[08:29:49.402]                             break
[08:29:49.402]                           }
[08:29:49.402]                         }
[08:29:49.402]                       }
[08:29:49.402]                       invisible(muffled)
[08:29:49.402]                     }
[08:29:49.402]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.402]                   }
[08:29:49.402]                 }
[08:29:49.402]                 else {
[08:29:49.402]                   if (TRUE) {
[08:29:49.402]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.402]                     {
[08:29:49.402]                       inherits <- base::inherits
[08:29:49.402]                       invokeRestart <- base::invokeRestart
[08:29:49.402]                       is.null <- base::is.null
[08:29:49.402]                       muffled <- FALSE
[08:29:49.402]                       if (inherits(cond, "message")) {
[08:29:49.402]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.402]                         if (muffled) 
[08:29:49.402]                           invokeRestart("muffleMessage")
[08:29:49.402]                       }
[08:29:49.402]                       else if (inherits(cond, "warning")) {
[08:29:49.402]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.402]                         if (muffled) 
[08:29:49.402]                           invokeRestart("muffleWarning")
[08:29:49.402]                       }
[08:29:49.402]                       else if (inherits(cond, "condition")) {
[08:29:49.402]                         if (!is.null(pattern)) {
[08:29:49.402]                           computeRestarts <- base::computeRestarts
[08:29:49.402]                           grepl <- base::grepl
[08:29:49.402]                           restarts <- computeRestarts(cond)
[08:29:49.402]                           for (restart in restarts) {
[08:29:49.402]                             name <- restart$name
[08:29:49.402]                             if (is.null(name)) 
[08:29:49.402]                               next
[08:29:49.402]                             if (!grepl(pattern, name)) 
[08:29:49.402]                               next
[08:29:49.402]                             invokeRestart(restart)
[08:29:49.402]                             muffled <- TRUE
[08:29:49.402]                             break
[08:29:49.402]                           }
[08:29:49.402]                         }
[08:29:49.402]                       }
[08:29:49.402]                       invisible(muffled)
[08:29:49.402]                     }
[08:29:49.402]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.402]                   }
[08:29:49.402]                 }
[08:29:49.402]             }
[08:29:49.402]         }))
[08:29:49.402]     }, error = function(ex) {
[08:29:49.402]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.402]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.402]                 ...future.rng), started = ...future.startTime, 
[08:29:49.402]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.402]             version = "1.8"), class = "FutureResult")
[08:29:49.402]     }, finally = {
[08:29:49.402]         if (!identical(...future.workdir, getwd())) 
[08:29:49.402]             setwd(...future.workdir)
[08:29:49.402]         {
[08:29:49.402]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.402]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.402]             }
[08:29:49.402]             base::options(...future.oldOptions)
[08:29:49.402]             if (.Platform$OS.type == "windows") {
[08:29:49.402]                 old_names <- names(...future.oldEnvVars)
[08:29:49.402]                 envs <- base::Sys.getenv()
[08:29:49.402]                 names <- names(envs)
[08:29:49.402]                 common <- intersect(names, old_names)
[08:29:49.402]                 added <- setdiff(names, old_names)
[08:29:49.402]                 removed <- setdiff(old_names, names)
[08:29:49.402]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.402]                   envs[common]]
[08:29:49.402]                 NAMES <- toupper(changed)
[08:29:49.402]                 args <- list()
[08:29:49.402]                 for (kk in seq_along(NAMES)) {
[08:29:49.402]                   name <- changed[[kk]]
[08:29:49.402]                   NAME <- NAMES[[kk]]
[08:29:49.402]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.402]                     next
[08:29:49.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.402]                 }
[08:29:49.402]                 NAMES <- toupper(added)
[08:29:49.402]                 for (kk in seq_along(NAMES)) {
[08:29:49.402]                   name <- added[[kk]]
[08:29:49.402]                   NAME <- NAMES[[kk]]
[08:29:49.402]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.402]                     next
[08:29:49.402]                   args[[name]] <- ""
[08:29:49.402]                 }
[08:29:49.402]                 NAMES <- toupper(removed)
[08:29:49.402]                 for (kk in seq_along(NAMES)) {
[08:29:49.402]                   name <- removed[[kk]]
[08:29:49.402]                   NAME <- NAMES[[kk]]
[08:29:49.402]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.402]                     next
[08:29:49.402]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.402]                 }
[08:29:49.402]                 if (length(args) > 0) 
[08:29:49.402]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.402]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.402]             }
[08:29:49.402]             else {
[08:29:49.402]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.402]             }
[08:29:49.402]             {
[08:29:49.402]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.402]                   0L) {
[08:29:49.402]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.402]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.402]                   base::options(opts)
[08:29:49.402]                 }
[08:29:49.402]                 {
[08:29:49.402]                   {
[08:29:49.402]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.402]                     NULL
[08:29:49.402]                   }
[08:29:49.402]                   options(future.plan = NULL)
[08:29:49.402]                   if (is.na(NA_character_)) 
[08:29:49.402]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.402]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.402]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.402]                     .init = FALSE)
[08:29:49.402]                 }
[08:29:49.402]             }
[08:29:49.402]         }
[08:29:49.402]     })
[08:29:49.402]     if (FALSE) {
[08:29:49.402]         base::sink(type = "output", split = FALSE)
[08:29:49.402]         if (NA) {
[08:29:49.402]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.402]         }
[08:29:49.402]         else {
[08:29:49.402]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.402]         }
[08:29:49.402]         base::close(...future.stdout)
[08:29:49.402]         ...future.stdout <- NULL
[08:29:49.402]     }
[08:29:49.402]     ...future.result$conditions <- ...future.conditions
[08:29:49.402]     ...future.result$finished <- base::Sys.time()
[08:29:49.402]     ...future.result
[08:29:49.402] }
[08:29:49.405] requestCore(): workers = 2
[08:29:49.407] MulticoreFuture started
[08:29:49.407] - Launch lazy future ... done
[08:29:49.407] run() for ‘MulticoreFuture’ ... done
[08:29:49.408] result() for MulticoreFuture ...
[08:29:49.408] plan(): Setting new future strategy stack:
[08:29:49.408] List of future strategies:
[08:29:49.408] 1. sequential:
[08:29:49.408]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.408]    - tweaked: FALSE
[08:29:49.408]    - call: NULL
[08:29:49.409] plan(): nbrOfWorkers() = 1
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
[08:29:49.417] plan(): Setting new future strategy stack:
[08:29:49.418] List of future strategies:
[08:29:49.418] 1. multicore:
[08:29:49.418]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.418]    - tweaked: FALSE
[08:29:49.418]    - call: plan(strategy)
[08:29:49.421] plan(): nbrOfWorkers() = 2
[08:29:49.422] result() for MulticoreFuture ...
[08:29:49.422] result() for MulticoreFuture ... done
[08:29:49.422] result() for MulticoreFuture ... done
[08:29:49.422] result() for MulticoreFuture ...
[08:29:49.425] result() for MulticoreFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:49.425] getGlobalsAndPackages() ...
[08:29:49.425] Searching for globals...
[08:29:49.426] - globals found: [1] ‘print’
[08:29:49.426] Searching for globals ... DONE
[08:29:49.427] Resolving globals: FALSE
[08:29:49.427] 
[08:29:49.427] 
[08:29:49.427] getGlobalsAndPackages() ... DONE
[08:29:49.428] run() for ‘Future’ ...
[08:29:49.428] - state: ‘created’
[08:29:49.428] - Future backend: ‘FutureStrategy’, ‘multicore’, ‘multiprocess’, ‘future’, ‘function’
[08:29:49.430] - Future class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:49.430] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ...
[08:29:49.430]   - Field: ‘label’
[08:29:49.430]   - Field: ‘local’
[08:29:49.430]   - Field: ‘owner’
[08:29:49.431]   - Field: ‘envir’
[08:29:49.431]   - Field: ‘workers’
[08:29:49.431]   - Field: ‘packages’
[08:29:49.431]   - Field: ‘gc’
[08:29:49.431]   - Field: ‘job’
[08:29:49.431]   - Field: ‘conditions’
[08:29:49.431]   - Field: ‘expr’
[08:29:49.431]   - Field: ‘uuid’
[08:29:49.431]   - Field: ‘seed’
[08:29:49.432]   - Field: ‘version’
[08:29:49.432]   - Field: ‘result’
[08:29:49.432]   - Field: ‘asynchronous’
[08:29:49.432]   - Field: ‘calls’
[08:29:49.432]   - Field: ‘globals’
[08:29:49.432]   - Field: ‘stdout’
[08:29:49.432]   - Field: ‘earlySignal’
[08:29:49.432]   - Field: ‘lazy’
[08:29:49.432]   - Field: ‘state’
[08:29:49.433] - Copy elements of temporary ‘MulticoreFuture’ to final ‘Future’ object ... done
[08:29:49.433] - Launch lazy future ...
[08:29:49.433] Packages needed by the future expression (n = 0): <none>
[08:29:49.433] Packages needed by future strategies (n = 0): <none>
[08:29:49.434] {
[08:29:49.434]     {
[08:29:49.434]         {
[08:29:49.434]             ...future.startTime <- base::Sys.time()
[08:29:49.434]             {
[08:29:49.434]                 {
[08:29:49.434]                   {
[08:29:49.434]                     {
[08:29:49.434]                       base::local({
[08:29:49.434]                         has_future <- base::requireNamespace("future", 
[08:29:49.434]                           quietly = TRUE)
[08:29:49.434]                         if (has_future) {
[08:29:49.434]                           ns <- base::getNamespace("future")
[08:29:49.434]                           version <- ns[[".package"]][["version"]]
[08:29:49.434]                           if (is.null(version)) 
[08:29:49.434]                             version <- utils::packageVersion("future")
[08:29:49.434]                         }
[08:29:49.434]                         else {
[08:29:49.434]                           version <- NULL
[08:29:49.434]                         }
[08:29:49.434]                         if (!has_future || version < "1.8.0") {
[08:29:49.434]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.434]                             "", base::R.version$version.string), 
[08:29:49.434]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.434]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.434]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.434]                               "release", "version")], collapse = " "), 
[08:29:49.434]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.434]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.434]                             info)
[08:29:49.434]                           info <- base::paste(info, collapse = "; ")
[08:29:49.434]                           if (!has_future) {
[08:29:49.434]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.434]                               info)
[08:29:49.434]                           }
[08:29:49.434]                           else {
[08:29:49.434]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.434]                               info, version)
[08:29:49.434]                           }
[08:29:49.434]                           base::stop(msg)
[08:29:49.434]                         }
[08:29:49.434]                       })
[08:29:49.434]                     }
[08:29:49.434]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.434]                     base::options(mc.cores = 1L)
[08:29:49.434]                   }
[08:29:49.434]                   ...future.strategy.old <- future::plan("list")
[08:29:49.434]                   options(future.plan = NULL)
[08:29:49.434]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.434]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.434]                 }
[08:29:49.434]                 ...future.workdir <- getwd()
[08:29:49.434]             }
[08:29:49.434]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.434]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.434]         }
[08:29:49.434]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.434]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.434]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.434]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.434]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.434]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.434]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.434]             base::names(...future.oldOptions))
[08:29:49.434]     }
[08:29:49.434]     if (FALSE) {
[08:29:49.434]     }
[08:29:49.434]     else {
[08:29:49.434]         if (TRUE) {
[08:29:49.434]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.434]                 open = "w")
[08:29:49.434]         }
[08:29:49.434]         else {
[08:29:49.434]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.434]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.434]         }
[08:29:49.434]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.434]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.434]             base::sink(type = "output", split = FALSE)
[08:29:49.434]             base::close(...future.stdout)
[08:29:49.434]         }, add = TRUE)
[08:29:49.434]     }
[08:29:49.434]     ...future.frame <- base::sys.nframe()
[08:29:49.434]     ...future.conditions <- base::list()
[08:29:49.434]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.434]     if (FALSE) {
[08:29:49.434]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.434]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.434]     }
[08:29:49.434]     ...future.result <- base::tryCatch({
[08:29:49.434]         base::withCallingHandlers({
[08:29:49.434]             ...future.value <- base::withVisible(base::local({
[08:29:49.434]                 withCallingHandlers({
[08:29:49.434]                   print(42)
[08:29:49.434]                 }, immediateCondition = function(cond) {
[08:29:49.434]                   save_rds <- function (object, pathname, ...) 
[08:29:49.434]                   {
[08:29:49.434]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[08:29:49.434]                     if (file_test("-f", pathname_tmp)) {
[08:29:49.434]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.434]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[08:29:49.434]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.434]                         fi_tmp[["mtime"]])
[08:29:49.434]                     }
[08:29:49.434]                     tryCatch({
[08:29:49.434]                       saveRDS(object, file = pathname_tmp, ...)
[08:29:49.434]                     }, error = function(ex) {
[08:29:49.434]                       msg <- conditionMessage(ex)
[08:29:49.434]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.434]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[08:29:49.434]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.434]                         fi_tmp[["mtime"]], msg)
[08:29:49.434]                       ex$message <- msg
[08:29:49.434]                       stop(ex)
[08:29:49.434]                     })
[08:29:49.434]                     stopifnot(file_test("-f", pathname_tmp))
[08:29:49.434]                     res <- file.rename(from = pathname_tmp, to = pathname)
[08:29:49.434]                     if (!res || file_test("-f", pathname_tmp)) {
[08:29:49.434]                       fi_tmp <- file.info(pathname_tmp)
[08:29:49.434]                       fi <- file.info(pathname)
[08:29:49.434]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[08:29:49.434]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[08:29:49.434]                         fi_tmp[["mtime"]], sQuote(pathname), 
[08:29:49.434]                         fi[["size"]], fi[["mtime"]])
[08:29:49.434]                       stop(msg)
[08:29:49.434]                     }
[08:29:49.434]                     invisible(pathname)
[08:29:49.434]                   }
[08:29:49.434]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[08:29:49.434]                     rootPath = tempdir()) 
[08:29:49.434]                   {
[08:29:49.434]                     obj <- list(time = Sys.time(), condition = cond)
[08:29:49.434]                     file <- tempfile(pattern = class(cond)[1], 
[08:29:49.434]                       tmpdir = path, fileext = ".rds")
[08:29:49.434]                     save_rds(obj, file)
[08:29:49.434]                   }
[08:29:49.434]                   saveImmediateCondition(cond, path = "/tmp/RtmphJJ9kj/.future/immediateConditions")
[08:29:49.434]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.434]                   {
[08:29:49.434]                     inherits <- base::inherits
[08:29:49.434]                     invokeRestart <- base::invokeRestart
[08:29:49.434]                     is.null <- base::is.null
[08:29:49.434]                     muffled <- FALSE
[08:29:49.434]                     if (inherits(cond, "message")) {
[08:29:49.434]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.434]                       if (muffled) 
[08:29:49.434]                         invokeRestart("muffleMessage")
[08:29:49.434]                     }
[08:29:49.434]                     else if (inherits(cond, "warning")) {
[08:29:49.434]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.434]                       if (muffled) 
[08:29:49.434]                         invokeRestart("muffleWarning")
[08:29:49.434]                     }
[08:29:49.434]                     else if (inherits(cond, "condition")) {
[08:29:49.434]                       if (!is.null(pattern)) {
[08:29:49.434]                         computeRestarts <- base::computeRestarts
[08:29:49.434]                         grepl <- base::grepl
[08:29:49.434]                         restarts <- computeRestarts(cond)
[08:29:49.434]                         for (restart in restarts) {
[08:29:49.434]                           name <- restart$name
[08:29:49.434]                           if (is.null(name)) 
[08:29:49.434]                             next
[08:29:49.434]                           if (!grepl(pattern, name)) 
[08:29:49.434]                             next
[08:29:49.434]                           invokeRestart(restart)
[08:29:49.434]                           muffled <- TRUE
[08:29:49.434]                           break
[08:29:49.434]                         }
[08:29:49.434]                       }
[08:29:49.434]                     }
[08:29:49.434]                     invisible(muffled)
[08:29:49.434]                   }
[08:29:49.434]                   muffleCondition(cond)
[08:29:49.434]                 })
[08:29:49.434]             }))
[08:29:49.434]             future::FutureResult(value = ...future.value$value, 
[08:29:49.434]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.434]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.434]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.434]                     ...future.globalenv.names))
[08:29:49.434]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.434]         }, condition = base::local({
[08:29:49.434]             c <- base::c
[08:29:49.434]             inherits <- base::inherits
[08:29:49.434]             invokeRestart <- base::invokeRestart
[08:29:49.434]             length <- base::length
[08:29:49.434]             list <- base::list
[08:29:49.434]             seq.int <- base::seq.int
[08:29:49.434]             signalCondition <- base::signalCondition
[08:29:49.434]             sys.calls <- base::sys.calls
[08:29:49.434]             `[[` <- base::`[[`
[08:29:49.434]             `+` <- base::`+`
[08:29:49.434]             `<<-` <- base::`<<-`
[08:29:49.434]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.434]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.434]                   3L)]
[08:29:49.434]             }
[08:29:49.434]             function(cond) {
[08:29:49.434]                 is_error <- inherits(cond, "error")
[08:29:49.434]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.434]                   NULL)
[08:29:49.434]                 if (is_error) {
[08:29:49.434]                   sessionInformation <- function() {
[08:29:49.434]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.434]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.434]                       search = base::search(), system = base::Sys.info())
[08:29:49.434]                   }
[08:29:49.434]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.434]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.434]                     cond$call), session = sessionInformation(), 
[08:29:49.434]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.434]                   signalCondition(cond)
[08:29:49.434]                 }
[08:29:49.434]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.434]                 "immediateCondition"))) {
[08:29:49.434]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.434]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.434]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.434]                   if (TRUE && !signal) {
[08:29:49.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.434]                     {
[08:29:49.434]                       inherits <- base::inherits
[08:29:49.434]                       invokeRestart <- base::invokeRestart
[08:29:49.434]                       is.null <- base::is.null
[08:29:49.434]                       muffled <- FALSE
[08:29:49.434]                       if (inherits(cond, "message")) {
[08:29:49.434]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.434]                         if (muffled) 
[08:29:49.434]                           invokeRestart("muffleMessage")
[08:29:49.434]                       }
[08:29:49.434]                       else if (inherits(cond, "warning")) {
[08:29:49.434]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.434]                         if (muffled) 
[08:29:49.434]                           invokeRestart("muffleWarning")
[08:29:49.434]                       }
[08:29:49.434]                       else if (inherits(cond, "condition")) {
[08:29:49.434]                         if (!is.null(pattern)) {
[08:29:49.434]                           computeRestarts <- base::computeRestarts
[08:29:49.434]                           grepl <- base::grepl
[08:29:49.434]                           restarts <- computeRestarts(cond)
[08:29:49.434]                           for (restart in restarts) {
[08:29:49.434]                             name <- restart$name
[08:29:49.434]                             if (is.null(name)) 
[08:29:49.434]                               next
[08:29:49.434]                             if (!grepl(pattern, name)) 
[08:29:49.434]                               next
[08:29:49.434]                             invokeRestart(restart)
[08:29:49.434]                             muffled <- TRUE
[08:29:49.434]                             break
[08:29:49.434]                           }
[08:29:49.434]                         }
[08:29:49.434]                       }
[08:29:49.434]                       invisible(muffled)
[08:29:49.434]                     }
[08:29:49.434]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.434]                   }
[08:29:49.434]                 }
[08:29:49.434]                 else {
[08:29:49.434]                   if (TRUE) {
[08:29:49.434]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.434]                     {
[08:29:49.434]                       inherits <- base::inherits
[08:29:49.434]                       invokeRestart <- base::invokeRestart
[08:29:49.434]                       is.null <- base::is.null
[08:29:49.434]                       muffled <- FALSE
[08:29:49.434]                       if (inherits(cond, "message")) {
[08:29:49.434]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.434]                         if (muffled) 
[08:29:49.434]                           invokeRestart("muffleMessage")
[08:29:49.434]                       }
[08:29:49.434]                       else if (inherits(cond, "warning")) {
[08:29:49.434]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.434]                         if (muffled) 
[08:29:49.434]                           invokeRestart("muffleWarning")
[08:29:49.434]                       }
[08:29:49.434]                       else if (inherits(cond, "condition")) {
[08:29:49.434]                         if (!is.null(pattern)) {
[08:29:49.434]                           computeRestarts <- base::computeRestarts
[08:29:49.434]                           grepl <- base::grepl
[08:29:49.434]                           restarts <- computeRestarts(cond)
[08:29:49.434]                           for (restart in restarts) {
[08:29:49.434]                             name <- restart$name
[08:29:49.434]                             if (is.null(name)) 
[08:29:49.434]                               next
[08:29:49.434]                             if (!grepl(pattern, name)) 
[08:29:49.434]                               next
[08:29:49.434]                             invokeRestart(restart)
[08:29:49.434]                             muffled <- TRUE
[08:29:49.434]                             break
[08:29:49.434]                           }
[08:29:49.434]                         }
[08:29:49.434]                       }
[08:29:49.434]                       invisible(muffled)
[08:29:49.434]                     }
[08:29:49.434]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.434]                   }
[08:29:49.434]                 }
[08:29:49.434]             }
[08:29:49.434]         }))
[08:29:49.434]     }, error = function(ex) {
[08:29:49.434]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.434]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.434]                 ...future.rng), started = ...future.startTime, 
[08:29:49.434]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.434]             version = "1.8"), class = "FutureResult")
[08:29:49.434]     }, finally = {
[08:29:49.434]         if (!identical(...future.workdir, getwd())) 
[08:29:49.434]             setwd(...future.workdir)
[08:29:49.434]         {
[08:29:49.434]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.434]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.434]             }
[08:29:49.434]             base::options(...future.oldOptions)
[08:29:49.434]             if (.Platform$OS.type == "windows") {
[08:29:49.434]                 old_names <- names(...future.oldEnvVars)
[08:29:49.434]                 envs <- base::Sys.getenv()
[08:29:49.434]                 names <- names(envs)
[08:29:49.434]                 common <- intersect(names, old_names)
[08:29:49.434]                 added <- setdiff(names, old_names)
[08:29:49.434]                 removed <- setdiff(old_names, names)
[08:29:49.434]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.434]                   envs[common]]
[08:29:49.434]                 NAMES <- toupper(changed)
[08:29:49.434]                 args <- list()
[08:29:49.434]                 for (kk in seq_along(NAMES)) {
[08:29:49.434]                   name <- changed[[kk]]
[08:29:49.434]                   NAME <- NAMES[[kk]]
[08:29:49.434]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.434]                     next
[08:29:49.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.434]                 }
[08:29:49.434]                 NAMES <- toupper(added)
[08:29:49.434]                 for (kk in seq_along(NAMES)) {
[08:29:49.434]                   name <- added[[kk]]
[08:29:49.434]                   NAME <- NAMES[[kk]]
[08:29:49.434]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.434]                     next
[08:29:49.434]                   args[[name]] <- ""
[08:29:49.434]                 }
[08:29:49.434]                 NAMES <- toupper(removed)
[08:29:49.434]                 for (kk in seq_along(NAMES)) {
[08:29:49.434]                   name <- removed[[kk]]
[08:29:49.434]                   NAME <- NAMES[[kk]]
[08:29:49.434]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.434]                     next
[08:29:49.434]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.434]                 }
[08:29:49.434]                 if (length(args) > 0) 
[08:29:49.434]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.434]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.434]             }
[08:29:49.434]             else {
[08:29:49.434]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.434]             }
[08:29:49.434]             {
[08:29:49.434]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.434]                   0L) {
[08:29:49.434]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.434]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.434]                   base::options(opts)
[08:29:49.434]                 }
[08:29:49.434]                 {
[08:29:49.434]                   {
[08:29:49.434]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.434]                     NULL
[08:29:49.434]                   }
[08:29:49.434]                   options(future.plan = NULL)
[08:29:49.434]                   if (is.na(NA_character_)) 
[08:29:49.434]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.434]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.434]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.434]                     .init = FALSE)
[08:29:49.434]                 }
[08:29:49.434]             }
[08:29:49.434]         }
[08:29:49.434]     })
[08:29:49.434]     if (TRUE) {
[08:29:49.434]         base::sink(type = "output", split = FALSE)
[08:29:49.434]         if (TRUE) {
[08:29:49.434]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.434]         }
[08:29:49.434]         else {
[08:29:49.434]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.434]         }
[08:29:49.434]         base::close(...future.stdout)
[08:29:49.434]         ...future.stdout <- NULL
[08:29:49.434]     }
[08:29:49.434]     ...future.result$conditions <- ...future.conditions
[08:29:49.434]     ...future.result$finished <- base::Sys.time()
[08:29:49.434]     ...future.result
[08:29:49.434] }
[08:29:49.436] requestCore(): workers = 2
[08:29:49.438] MulticoreFuture started
[08:29:49.438] - Launch lazy future ... done
[08:29:49.438] run() for ‘MulticoreFuture’ ... done
[08:29:49.439] result() for MulticoreFuture ...
[08:29:49.439] plan(): Setting new future strategy stack:
[08:29:49.439] List of future strategies:
[08:29:49.439] 1. sequential:
[08:29:49.439]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:49.439]    - tweaked: FALSE
[08:29:49.439]    - call: NULL
[08:29:49.440] plan(): nbrOfWorkers() = 1
[08:29:49.442] plan(): Setting new future strategy stack:
[08:29:49.442] List of future strategies:
[08:29:49.442] 1. multicore:
[08:29:49.442]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:29:49.442]    - tweaked: FALSE
[08:29:49.442]    - call: plan(strategy)
[08:29:49.445] plan(): nbrOfWorkers() = 2
[08:29:49.446] result() for MulticoreFuture ...
[08:29:49.446] result() for MulticoreFuture ... done
[08:29:49.446] result() for MulticoreFuture ... done
[08:29:49.446] result() for MulticoreFuture ...
[08:29:49.447] result() for MulticoreFuture ... done
[08:29:49.447] result() for MulticoreFuture ...
[08:29:49.447] result() for MulticoreFuture ... done
[1] 42
[08:29:49.447] result() for MulticoreFuture ...
[08:29:49.447] result() for MulticoreFuture ... done
multicore ... done
multisession ...
[08:29:49.448] plan(): Setting new future strategy stack:
[08:29:49.448] List of future strategies:
[08:29:49.448] 1. multisession:
[08:29:49.448]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:49.448]    - tweaked: FALSE
[08:29:49.448]    - call: plan(strategy)
[08:29:49.448] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:29:49.448] multisession:
[08:29:49.448] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:29:49.448] - tweaked: FALSE
[08:29:49.448] - call: plan(strategy)
[08:29:49.453] getGlobalsAndPackages() ...
[08:29:49.453] Not searching for globals
[08:29:49.454] - globals: [0] <none>
[08:29:49.454] getGlobalsAndPackages() ... DONE
[08:29:49.941] Packages needed by the future expression (n = 0): <none>
[08:29:49.941] Packages needed by future strategies (n = 0): <none>
[08:29:49.941] {
[08:29:49.941]     {
[08:29:49.941]         {
[08:29:49.941]             ...future.startTime <- base::Sys.time()
[08:29:49.941]             {
[08:29:49.941]                 {
[08:29:49.941]                   {
[08:29:49.941]                     {
[08:29:49.941]                       base::local({
[08:29:49.941]                         has_future <- base::requireNamespace("future", 
[08:29:49.941]                           quietly = TRUE)
[08:29:49.941]                         if (has_future) {
[08:29:49.941]                           ns <- base::getNamespace("future")
[08:29:49.941]                           version <- ns[[".package"]][["version"]]
[08:29:49.941]                           if (is.null(version)) 
[08:29:49.941]                             version <- utils::packageVersion("future")
[08:29:49.941]                         }
[08:29:49.941]                         else {
[08:29:49.941]                           version <- NULL
[08:29:49.941]                         }
[08:29:49.941]                         if (!has_future || version < "1.8.0") {
[08:29:49.941]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:49.941]                             "", base::R.version$version.string), 
[08:29:49.941]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:49.941]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:49.941]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:49.941]                               "release", "version")], collapse = " "), 
[08:29:49.941]                             hostname = base::Sys.info()[["nodename"]])
[08:29:49.941]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:49.941]                             info)
[08:29:49.941]                           info <- base::paste(info, collapse = "; ")
[08:29:49.941]                           if (!has_future) {
[08:29:49.941]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:49.941]                               info)
[08:29:49.941]                           }
[08:29:49.941]                           else {
[08:29:49.941]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:49.941]                               info, version)
[08:29:49.941]                           }
[08:29:49.941]                           base::stop(msg)
[08:29:49.941]                         }
[08:29:49.941]                       })
[08:29:49.941]                     }
[08:29:49.941]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:49.941]                     base::options(mc.cores = 1L)
[08:29:49.941]                   }
[08:29:49.941]                   ...future.strategy.old <- future::plan("list")
[08:29:49.941]                   options(future.plan = NULL)
[08:29:49.941]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.941]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:49.941]                 }
[08:29:49.941]                 ...future.workdir <- getwd()
[08:29:49.941]             }
[08:29:49.941]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:49.941]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:49.941]         }
[08:29:49.941]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:49.941]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:49.941]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:49.941]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:49.941]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:49.941]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:49.941]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:49.941]             base::names(...future.oldOptions))
[08:29:49.941]     }
[08:29:49.941]     if (FALSE) {
[08:29:49.941]     }
[08:29:49.941]     else {
[08:29:49.941]         if (TRUE) {
[08:29:49.941]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:49.941]                 open = "w")
[08:29:49.941]         }
[08:29:49.941]         else {
[08:29:49.941]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:49.941]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:49.941]         }
[08:29:49.941]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:49.941]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:49.941]             base::sink(type = "output", split = FALSE)
[08:29:49.941]             base::close(...future.stdout)
[08:29:49.941]         }, add = TRUE)
[08:29:49.941]     }
[08:29:49.941]     ...future.frame <- base::sys.nframe()
[08:29:49.941]     ...future.conditions <- base::list()
[08:29:49.941]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:49.941]     if (FALSE) {
[08:29:49.941]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:49.941]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:49.941]     }
[08:29:49.941]     ...future.result <- base::tryCatch({
[08:29:49.941]         base::withCallingHandlers({
[08:29:49.941]             ...future.value <- base::withVisible(base::local({
[08:29:49.941]                 ...future.makeSendCondition <- base::local({
[08:29:49.941]                   sendCondition <- NULL
[08:29:49.941]                   function(frame = 1L) {
[08:29:49.941]                     if (is.function(sendCondition)) 
[08:29:49.941]                       return(sendCondition)
[08:29:49.941]                     ns <- getNamespace("parallel")
[08:29:49.941]                     if (exists("sendData", mode = "function", 
[08:29:49.941]                       envir = ns)) {
[08:29:49.941]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:49.941]                         envir = ns)
[08:29:49.941]                       envir <- sys.frame(frame)
[08:29:49.941]                       master <- NULL
[08:29:49.941]                       while (!identical(envir, .GlobalEnv) && 
[08:29:49.941]                         !identical(envir, emptyenv())) {
[08:29:49.941]                         if (exists("master", mode = "list", envir = envir, 
[08:29:49.941]                           inherits = FALSE)) {
[08:29:49.941]                           master <- get("master", mode = "list", 
[08:29:49.941]                             envir = envir, inherits = FALSE)
[08:29:49.941]                           if (inherits(master, c("SOCKnode", 
[08:29:49.941]                             "SOCK0node"))) {
[08:29:49.941]                             sendCondition <<- function(cond) {
[08:29:49.941]                               data <- list(type = "VALUE", value = cond, 
[08:29:49.941]                                 success = TRUE)
[08:29:49.941]                               parallel_sendData(master, data)
[08:29:49.941]                             }
[08:29:49.941]                             return(sendCondition)
[08:29:49.941]                           }
[08:29:49.941]                         }
[08:29:49.941]                         frame <- frame + 1L
[08:29:49.941]                         envir <- sys.frame(frame)
[08:29:49.941]                       }
[08:29:49.941]                     }
[08:29:49.941]                     sendCondition <<- function(cond) NULL
[08:29:49.941]                   }
[08:29:49.941]                 })
[08:29:49.941]                 withCallingHandlers({
[08:29:49.941]                   NA
[08:29:49.941]                 }, immediateCondition = function(cond) {
[08:29:49.941]                   sendCondition <- ...future.makeSendCondition()
[08:29:49.941]                   sendCondition(cond)
[08:29:49.941]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.941]                   {
[08:29:49.941]                     inherits <- base::inherits
[08:29:49.941]                     invokeRestart <- base::invokeRestart
[08:29:49.941]                     is.null <- base::is.null
[08:29:49.941]                     muffled <- FALSE
[08:29:49.941]                     if (inherits(cond, "message")) {
[08:29:49.941]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:49.941]                       if (muffled) 
[08:29:49.941]                         invokeRestart("muffleMessage")
[08:29:49.941]                     }
[08:29:49.941]                     else if (inherits(cond, "warning")) {
[08:29:49.941]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:49.941]                       if (muffled) 
[08:29:49.941]                         invokeRestart("muffleWarning")
[08:29:49.941]                     }
[08:29:49.941]                     else if (inherits(cond, "condition")) {
[08:29:49.941]                       if (!is.null(pattern)) {
[08:29:49.941]                         computeRestarts <- base::computeRestarts
[08:29:49.941]                         grepl <- base::grepl
[08:29:49.941]                         restarts <- computeRestarts(cond)
[08:29:49.941]                         for (restart in restarts) {
[08:29:49.941]                           name <- restart$name
[08:29:49.941]                           if (is.null(name)) 
[08:29:49.941]                             next
[08:29:49.941]                           if (!grepl(pattern, name)) 
[08:29:49.941]                             next
[08:29:49.941]                           invokeRestart(restart)
[08:29:49.941]                           muffled <- TRUE
[08:29:49.941]                           break
[08:29:49.941]                         }
[08:29:49.941]                       }
[08:29:49.941]                     }
[08:29:49.941]                     invisible(muffled)
[08:29:49.941]                   }
[08:29:49.941]                   muffleCondition(cond)
[08:29:49.941]                 })
[08:29:49.941]             }))
[08:29:49.941]             future::FutureResult(value = ...future.value$value, 
[08:29:49.941]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.941]                   ...future.rng), globalenv = if (FALSE) 
[08:29:49.941]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:49.941]                     ...future.globalenv.names))
[08:29:49.941]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:49.941]         }, condition = base::local({
[08:29:49.941]             c <- base::c
[08:29:49.941]             inherits <- base::inherits
[08:29:49.941]             invokeRestart <- base::invokeRestart
[08:29:49.941]             length <- base::length
[08:29:49.941]             list <- base::list
[08:29:49.941]             seq.int <- base::seq.int
[08:29:49.941]             signalCondition <- base::signalCondition
[08:29:49.941]             sys.calls <- base::sys.calls
[08:29:49.941]             `[[` <- base::`[[`
[08:29:49.941]             `+` <- base::`+`
[08:29:49.941]             `<<-` <- base::`<<-`
[08:29:49.941]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:49.941]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:49.941]                   3L)]
[08:29:49.941]             }
[08:29:49.941]             function(cond) {
[08:29:49.941]                 is_error <- inherits(cond, "error")
[08:29:49.941]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:49.941]                   NULL)
[08:29:49.941]                 if (is_error) {
[08:29:49.941]                   sessionInformation <- function() {
[08:29:49.941]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:49.941]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:49.941]                       search = base::search(), system = base::Sys.info())
[08:29:49.941]                   }
[08:29:49.941]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.941]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:49.941]                     cond$call), session = sessionInformation(), 
[08:29:49.941]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:49.941]                   signalCondition(cond)
[08:29:49.941]                 }
[08:29:49.941]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:49.941]                 "immediateCondition"))) {
[08:29:49.941]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:49.941]                   ...future.conditions[[length(...future.conditions) + 
[08:29:49.941]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:49.941]                   if (TRUE && !signal) {
[08:29:49.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.941]                     {
[08:29:49.941]                       inherits <- base::inherits
[08:29:49.941]                       invokeRestart <- base::invokeRestart
[08:29:49.941]                       is.null <- base::is.null
[08:29:49.941]                       muffled <- FALSE
[08:29:49.941]                       if (inherits(cond, "message")) {
[08:29:49.941]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.941]                         if (muffled) 
[08:29:49.941]                           invokeRestart("muffleMessage")
[08:29:49.941]                       }
[08:29:49.941]                       else if (inherits(cond, "warning")) {
[08:29:49.941]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.941]                         if (muffled) 
[08:29:49.941]                           invokeRestart("muffleWarning")
[08:29:49.941]                       }
[08:29:49.941]                       else if (inherits(cond, "condition")) {
[08:29:49.941]                         if (!is.null(pattern)) {
[08:29:49.941]                           computeRestarts <- base::computeRestarts
[08:29:49.941]                           grepl <- base::grepl
[08:29:49.941]                           restarts <- computeRestarts(cond)
[08:29:49.941]                           for (restart in restarts) {
[08:29:49.941]                             name <- restart$name
[08:29:49.941]                             if (is.null(name)) 
[08:29:49.941]                               next
[08:29:49.941]                             if (!grepl(pattern, name)) 
[08:29:49.941]                               next
[08:29:49.941]                             invokeRestart(restart)
[08:29:49.941]                             muffled <- TRUE
[08:29:49.941]                             break
[08:29:49.941]                           }
[08:29:49.941]                         }
[08:29:49.941]                       }
[08:29:49.941]                       invisible(muffled)
[08:29:49.941]                     }
[08:29:49.941]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.941]                   }
[08:29:49.941]                 }
[08:29:49.941]                 else {
[08:29:49.941]                   if (TRUE) {
[08:29:49.941]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:49.941]                     {
[08:29:49.941]                       inherits <- base::inherits
[08:29:49.941]                       invokeRestart <- base::invokeRestart
[08:29:49.941]                       is.null <- base::is.null
[08:29:49.941]                       muffled <- FALSE
[08:29:49.941]                       if (inherits(cond, "message")) {
[08:29:49.941]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:49.941]                         if (muffled) 
[08:29:49.941]                           invokeRestart("muffleMessage")
[08:29:49.941]                       }
[08:29:49.941]                       else if (inherits(cond, "warning")) {
[08:29:49.941]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:49.941]                         if (muffled) 
[08:29:49.941]                           invokeRestart("muffleWarning")
[08:29:49.941]                       }
[08:29:49.941]                       else if (inherits(cond, "condition")) {
[08:29:49.941]                         if (!is.null(pattern)) {
[08:29:49.941]                           computeRestarts <- base::computeRestarts
[08:29:49.941]                           grepl <- base::grepl
[08:29:49.941]                           restarts <- computeRestarts(cond)
[08:29:49.941]                           for (restart in restarts) {
[08:29:49.941]                             name <- restart$name
[08:29:49.941]                             if (is.null(name)) 
[08:29:49.941]                               next
[08:29:49.941]                             if (!grepl(pattern, name)) 
[08:29:49.941]                               next
[08:29:49.941]                             invokeRestart(restart)
[08:29:49.941]                             muffled <- TRUE
[08:29:49.941]                             break
[08:29:49.941]                           }
[08:29:49.941]                         }
[08:29:49.941]                       }
[08:29:49.941]                       invisible(muffled)
[08:29:49.941]                     }
[08:29:49.941]                     muffleCondition(cond, pattern = "^muffle")
[08:29:49.941]                   }
[08:29:49.941]                 }
[08:29:49.941]             }
[08:29:49.941]         }))
[08:29:49.941]     }, error = function(ex) {
[08:29:49.941]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:49.941]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:49.941]                 ...future.rng), started = ...future.startTime, 
[08:29:49.941]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:49.941]             version = "1.8"), class = "FutureResult")
[08:29:49.941]     }, finally = {
[08:29:49.941]         if (!identical(...future.workdir, getwd())) 
[08:29:49.941]             setwd(...future.workdir)
[08:29:49.941]         {
[08:29:49.941]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:49.941]                 ...future.oldOptions$nwarnings <- NULL
[08:29:49.941]             }
[08:29:49.941]             base::options(...future.oldOptions)
[08:29:49.941]             if (.Platform$OS.type == "windows") {
[08:29:49.941]                 old_names <- names(...future.oldEnvVars)
[08:29:49.941]                 envs <- base::Sys.getenv()
[08:29:49.941]                 names <- names(envs)
[08:29:49.941]                 common <- intersect(names, old_names)
[08:29:49.941]                 added <- setdiff(names, old_names)
[08:29:49.941]                 removed <- setdiff(old_names, names)
[08:29:49.941]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:49.941]                   envs[common]]
[08:29:49.941]                 NAMES <- toupper(changed)
[08:29:49.941]                 args <- list()
[08:29:49.941]                 for (kk in seq_along(NAMES)) {
[08:29:49.941]                   name <- changed[[kk]]
[08:29:49.941]                   NAME <- NAMES[[kk]]
[08:29:49.941]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.941]                     next
[08:29:49.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.941]                 }
[08:29:49.941]                 NAMES <- toupper(added)
[08:29:49.941]                 for (kk in seq_along(NAMES)) {
[08:29:49.941]                   name <- added[[kk]]
[08:29:49.941]                   NAME <- NAMES[[kk]]
[08:29:49.941]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.941]                     next
[08:29:49.941]                   args[[name]] <- ""
[08:29:49.941]                 }
[08:29:49.941]                 NAMES <- toupper(removed)
[08:29:49.941]                 for (kk in seq_along(NAMES)) {
[08:29:49.941]                   name <- removed[[kk]]
[08:29:49.941]                   NAME <- NAMES[[kk]]
[08:29:49.941]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:49.941]                     next
[08:29:49.941]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:49.941]                 }
[08:29:49.941]                 if (length(args) > 0) 
[08:29:49.941]                   base::do.call(base::Sys.setenv, args = args)
[08:29:49.941]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:49.941]             }
[08:29:49.941]             else {
[08:29:49.941]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:49.941]             }
[08:29:49.941]             {
[08:29:49.941]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:49.941]                   0L) {
[08:29:49.941]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:49.941]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:49.941]                   base::options(opts)
[08:29:49.941]                 }
[08:29:49.941]                 {
[08:29:49.941]                   {
[08:29:49.941]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:49.941]                     NULL
[08:29:49.941]                   }
[08:29:49.941]                   options(future.plan = NULL)
[08:29:49.941]                   if (is.na(NA_character_)) 
[08:29:49.941]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:49.941]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:49.941]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:49.941]                     .init = FALSE)
[08:29:49.941]                 }
[08:29:49.941]             }
[08:29:49.941]         }
[08:29:49.941]     })
[08:29:49.941]     if (TRUE) {
[08:29:49.941]         base::sink(type = "output", split = FALSE)
[08:29:49.941]         if (TRUE) {
[08:29:49.941]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:49.941]         }
[08:29:49.941]         else {
[08:29:49.941]             ...future.result["stdout"] <- base::list(NULL)
[08:29:49.941]         }
[08:29:49.941]         base::close(...future.stdout)
[08:29:49.941]         ...future.stdout <- NULL
[08:29:49.941]     }
[08:29:49.941]     ...future.result$conditions <- ...future.conditions
[08:29:49.941]     ...future.result$finished <- base::Sys.time()
[08:29:49.941]     ...future.result
[08:29:49.941] }
[08:29:49.995] MultisessionFuture started
[08:29:49.996] result() for ClusterFuture ...
[08:29:49.996] receiveMessageFromWorker() for ClusterFuture ...
[08:29:49.996] - Validating connection of MultisessionFuture
[08:29:50.027] - received message: FutureResult
[08:29:50.027] - Received FutureResult
[08:29:50.027] - Erased future from FutureRegistry
[08:29:50.027] result() for ClusterFuture ...
[08:29:50.027] - result already collected: FutureResult
[08:29:50.027] result() for ClusterFuture ... done
[08:29:50.027] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.028] result() for ClusterFuture ... done
[08:29:50.028] result() for ClusterFuture ...
[08:29:50.028] - result already collected: FutureResult
[08:29:50.028] result() for ClusterFuture ... done
[08:29:50.028] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:29:50.029] plan(): nbrOfWorkers() = 2
- stdout = TRUE
[08:29:50.030] getGlobalsAndPackages() ...
[08:29:50.030] Searching for globals...
[08:29:50.032] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.033] Searching for globals ... DONE
[08:29:50.033] Resolving globals: FALSE
[08:29:50.033] 
[08:29:50.033] - packages: [1] ‘utils’
[08:29:50.033] getGlobalsAndPackages() ... DONE
[08:29:50.034] run() for ‘Future’ ...
[08:29:50.034] - state: ‘created’
[08:29:50.034] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.047] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.047] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.048]   - Field: ‘node’
[08:29:50.048]   - Field: ‘label’
[08:29:50.048]   - Field: ‘local’
[08:29:50.048]   - Field: ‘owner’
[08:29:50.048]   - Field: ‘envir’
[08:29:50.048]   - Field: ‘workers’
[08:29:50.048]   - Field: ‘packages’
[08:29:50.048]   - Field: ‘gc’
[08:29:50.048]   - Field: ‘conditions’
[08:29:50.048]   - Field: ‘persistent’
[08:29:50.048]   - Field: ‘expr’
[08:29:50.048]   - Field: ‘uuid’
[08:29:50.049]   - Field: ‘seed’
[08:29:50.049]   - Field: ‘version’
[08:29:50.049]   - Field: ‘result’
[08:29:50.049]   - Field: ‘asynchronous’
[08:29:50.049]   - Field: ‘calls’
[08:29:50.049]   - Field: ‘globals’
[08:29:50.049]   - Field: ‘stdout’
[08:29:50.049]   - Field: ‘earlySignal’
[08:29:50.049]   - Field: ‘lazy’
[08:29:50.049]   - Field: ‘state’
[08:29:50.049] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.049] - Launch lazy future ...
[08:29:50.050] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.050] Packages needed by future strategies (n = 0): <none>
[08:29:50.050] {
[08:29:50.050]     {
[08:29:50.050]         {
[08:29:50.050]             ...future.startTime <- base::Sys.time()
[08:29:50.050]             {
[08:29:50.050]                 {
[08:29:50.050]                   {
[08:29:50.050]                     {
[08:29:50.050]                       {
[08:29:50.050]                         base::local({
[08:29:50.050]                           has_future <- base::requireNamespace("future", 
[08:29:50.050]                             quietly = TRUE)
[08:29:50.050]                           if (has_future) {
[08:29:50.050]                             ns <- base::getNamespace("future")
[08:29:50.050]                             version <- ns[[".package"]][["version"]]
[08:29:50.050]                             if (is.null(version)) 
[08:29:50.050]                               version <- utils::packageVersion("future")
[08:29:50.050]                           }
[08:29:50.050]                           else {
[08:29:50.050]                             version <- NULL
[08:29:50.050]                           }
[08:29:50.050]                           if (!has_future || version < "1.8.0") {
[08:29:50.050]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.050]                               "", base::R.version$version.string), 
[08:29:50.050]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.050]                                 base::R.version$platform, 8 * 
[08:29:50.050]                                   base::.Machine$sizeof.pointer), 
[08:29:50.050]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.050]                                 "release", "version")], collapse = " "), 
[08:29:50.050]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.050]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.050]                               info)
[08:29:50.050]                             info <- base::paste(info, collapse = "; ")
[08:29:50.050]                             if (!has_future) {
[08:29:50.050]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.050]                                 info)
[08:29:50.050]                             }
[08:29:50.050]                             else {
[08:29:50.050]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.050]                                 info, version)
[08:29:50.050]                             }
[08:29:50.050]                             base::stop(msg)
[08:29:50.050]                           }
[08:29:50.050]                         })
[08:29:50.050]                       }
[08:29:50.050]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.050]                       base::options(mc.cores = 1L)
[08:29:50.050]                     }
[08:29:50.050]                     base::local({
[08:29:50.050]                       for (pkg in "utils") {
[08:29:50.050]                         base::loadNamespace(pkg)
[08:29:50.050]                         base::library(pkg, character.only = TRUE)
[08:29:50.050]                       }
[08:29:50.050]                     })
[08:29:50.050]                   }
[08:29:50.050]                   ...future.strategy.old <- future::plan("list")
[08:29:50.050]                   options(future.plan = NULL)
[08:29:50.050]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.050]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.050]                 }
[08:29:50.050]                 ...future.workdir <- getwd()
[08:29:50.050]             }
[08:29:50.050]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.050]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.050]         }
[08:29:50.050]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.050]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.050]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.050]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.050]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.050]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.050]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.050]             base::names(...future.oldOptions))
[08:29:50.050]     }
[08:29:50.050]     if (FALSE) {
[08:29:50.050]     }
[08:29:50.050]     else {
[08:29:50.050]         if (TRUE) {
[08:29:50.050]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.050]                 open = "w")
[08:29:50.050]         }
[08:29:50.050]         else {
[08:29:50.050]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.050]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.050]         }
[08:29:50.050]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.050]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.050]             base::sink(type = "output", split = FALSE)
[08:29:50.050]             base::close(...future.stdout)
[08:29:50.050]         }, add = TRUE)
[08:29:50.050]     }
[08:29:50.050]     ...future.frame <- base::sys.nframe()
[08:29:50.050]     ...future.conditions <- base::list()
[08:29:50.050]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.050]     if (FALSE) {
[08:29:50.050]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.050]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.050]     }
[08:29:50.050]     ...future.result <- base::tryCatch({
[08:29:50.050]         base::withCallingHandlers({
[08:29:50.050]             ...future.value <- base::withVisible(base::local({
[08:29:50.050]                 ...future.makeSendCondition <- base::local({
[08:29:50.050]                   sendCondition <- NULL
[08:29:50.050]                   function(frame = 1L) {
[08:29:50.050]                     if (is.function(sendCondition)) 
[08:29:50.050]                       return(sendCondition)
[08:29:50.050]                     ns <- getNamespace("parallel")
[08:29:50.050]                     if (exists("sendData", mode = "function", 
[08:29:50.050]                       envir = ns)) {
[08:29:50.050]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.050]                         envir = ns)
[08:29:50.050]                       envir <- sys.frame(frame)
[08:29:50.050]                       master <- NULL
[08:29:50.050]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.050]                         !identical(envir, emptyenv())) {
[08:29:50.050]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.050]                           inherits = FALSE)) {
[08:29:50.050]                           master <- get("master", mode = "list", 
[08:29:50.050]                             envir = envir, inherits = FALSE)
[08:29:50.050]                           if (inherits(master, c("SOCKnode", 
[08:29:50.050]                             "SOCK0node"))) {
[08:29:50.050]                             sendCondition <<- function(cond) {
[08:29:50.050]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.050]                                 success = TRUE)
[08:29:50.050]                               parallel_sendData(master, data)
[08:29:50.050]                             }
[08:29:50.050]                             return(sendCondition)
[08:29:50.050]                           }
[08:29:50.050]                         }
[08:29:50.050]                         frame <- frame + 1L
[08:29:50.050]                         envir <- sys.frame(frame)
[08:29:50.050]                       }
[08:29:50.050]                     }
[08:29:50.050]                     sendCondition <<- function(cond) NULL
[08:29:50.050]                   }
[08:29:50.050]                 })
[08:29:50.050]                 withCallingHandlers({
[08:29:50.050]                   {
[08:29:50.050]                     print(1:50)
[08:29:50.050]                     str(1:50)
[08:29:50.050]                     cat(letters, sep = "-")
[08:29:50.050]                     cat(1:6, collapse = "\n")
[08:29:50.050]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.050]                     42L
[08:29:50.050]                   }
[08:29:50.050]                 }, immediateCondition = function(cond) {
[08:29:50.050]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.050]                   sendCondition(cond)
[08:29:50.050]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.050]                   {
[08:29:50.050]                     inherits <- base::inherits
[08:29:50.050]                     invokeRestart <- base::invokeRestart
[08:29:50.050]                     is.null <- base::is.null
[08:29:50.050]                     muffled <- FALSE
[08:29:50.050]                     if (inherits(cond, "message")) {
[08:29:50.050]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.050]                       if (muffled) 
[08:29:50.050]                         invokeRestart("muffleMessage")
[08:29:50.050]                     }
[08:29:50.050]                     else if (inherits(cond, "warning")) {
[08:29:50.050]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.050]                       if (muffled) 
[08:29:50.050]                         invokeRestart("muffleWarning")
[08:29:50.050]                     }
[08:29:50.050]                     else if (inherits(cond, "condition")) {
[08:29:50.050]                       if (!is.null(pattern)) {
[08:29:50.050]                         computeRestarts <- base::computeRestarts
[08:29:50.050]                         grepl <- base::grepl
[08:29:50.050]                         restarts <- computeRestarts(cond)
[08:29:50.050]                         for (restart in restarts) {
[08:29:50.050]                           name <- restart$name
[08:29:50.050]                           if (is.null(name)) 
[08:29:50.050]                             next
[08:29:50.050]                           if (!grepl(pattern, name)) 
[08:29:50.050]                             next
[08:29:50.050]                           invokeRestart(restart)
[08:29:50.050]                           muffled <- TRUE
[08:29:50.050]                           break
[08:29:50.050]                         }
[08:29:50.050]                       }
[08:29:50.050]                     }
[08:29:50.050]                     invisible(muffled)
[08:29:50.050]                   }
[08:29:50.050]                   muffleCondition(cond)
[08:29:50.050]                 })
[08:29:50.050]             }))
[08:29:50.050]             future::FutureResult(value = ...future.value$value, 
[08:29:50.050]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.050]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.050]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.050]                     ...future.globalenv.names))
[08:29:50.050]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.050]         }, condition = base::local({
[08:29:50.050]             c <- base::c
[08:29:50.050]             inherits <- base::inherits
[08:29:50.050]             invokeRestart <- base::invokeRestart
[08:29:50.050]             length <- base::length
[08:29:50.050]             list <- base::list
[08:29:50.050]             seq.int <- base::seq.int
[08:29:50.050]             signalCondition <- base::signalCondition
[08:29:50.050]             sys.calls <- base::sys.calls
[08:29:50.050]             `[[` <- base::`[[`
[08:29:50.050]             `+` <- base::`+`
[08:29:50.050]             `<<-` <- base::`<<-`
[08:29:50.050]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.050]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.050]                   3L)]
[08:29:50.050]             }
[08:29:50.050]             function(cond) {
[08:29:50.050]                 is_error <- inherits(cond, "error")
[08:29:50.050]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.050]                   NULL)
[08:29:50.050]                 if (is_error) {
[08:29:50.050]                   sessionInformation <- function() {
[08:29:50.050]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.050]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.050]                       search = base::search(), system = base::Sys.info())
[08:29:50.050]                   }
[08:29:50.050]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.050]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.050]                     cond$call), session = sessionInformation(), 
[08:29:50.050]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.050]                   signalCondition(cond)
[08:29:50.050]                 }
[08:29:50.050]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.050]                 "immediateCondition"))) {
[08:29:50.050]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.050]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.050]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.050]                   if (TRUE && !signal) {
[08:29:50.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.050]                     {
[08:29:50.050]                       inherits <- base::inherits
[08:29:50.050]                       invokeRestart <- base::invokeRestart
[08:29:50.050]                       is.null <- base::is.null
[08:29:50.050]                       muffled <- FALSE
[08:29:50.050]                       if (inherits(cond, "message")) {
[08:29:50.050]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.050]                         if (muffled) 
[08:29:50.050]                           invokeRestart("muffleMessage")
[08:29:50.050]                       }
[08:29:50.050]                       else if (inherits(cond, "warning")) {
[08:29:50.050]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.050]                         if (muffled) 
[08:29:50.050]                           invokeRestart("muffleWarning")
[08:29:50.050]                       }
[08:29:50.050]                       else if (inherits(cond, "condition")) {
[08:29:50.050]                         if (!is.null(pattern)) {
[08:29:50.050]                           computeRestarts <- base::computeRestarts
[08:29:50.050]                           grepl <- base::grepl
[08:29:50.050]                           restarts <- computeRestarts(cond)
[08:29:50.050]                           for (restart in restarts) {
[08:29:50.050]                             name <- restart$name
[08:29:50.050]                             if (is.null(name)) 
[08:29:50.050]                               next
[08:29:50.050]                             if (!grepl(pattern, name)) 
[08:29:50.050]                               next
[08:29:50.050]                             invokeRestart(restart)
[08:29:50.050]                             muffled <- TRUE
[08:29:50.050]                             break
[08:29:50.050]                           }
[08:29:50.050]                         }
[08:29:50.050]                       }
[08:29:50.050]                       invisible(muffled)
[08:29:50.050]                     }
[08:29:50.050]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.050]                   }
[08:29:50.050]                 }
[08:29:50.050]                 else {
[08:29:50.050]                   if (TRUE) {
[08:29:50.050]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.050]                     {
[08:29:50.050]                       inherits <- base::inherits
[08:29:50.050]                       invokeRestart <- base::invokeRestart
[08:29:50.050]                       is.null <- base::is.null
[08:29:50.050]                       muffled <- FALSE
[08:29:50.050]                       if (inherits(cond, "message")) {
[08:29:50.050]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.050]                         if (muffled) 
[08:29:50.050]                           invokeRestart("muffleMessage")
[08:29:50.050]                       }
[08:29:50.050]                       else if (inherits(cond, "warning")) {
[08:29:50.050]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.050]                         if (muffled) 
[08:29:50.050]                           invokeRestart("muffleWarning")
[08:29:50.050]                       }
[08:29:50.050]                       else if (inherits(cond, "condition")) {
[08:29:50.050]                         if (!is.null(pattern)) {
[08:29:50.050]                           computeRestarts <- base::computeRestarts
[08:29:50.050]                           grepl <- base::grepl
[08:29:50.050]                           restarts <- computeRestarts(cond)
[08:29:50.050]                           for (restart in restarts) {
[08:29:50.050]                             name <- restart$name
[08:29:50.050]                             if (is.null(name)) 
[08:29:50.050]                               next
[08:29:50.050]                             if (!grepl(pattern, name)) 
[08:29:50.050]                               next
[08:29:50.050]                             invokeRestart(restart)
[08:29:50.050]                             muffled <- TRUE
[08:29:50.050]                             break
[08:29:50.050]                           }
[08:29:50.050]                         }
[08:29:50.050]                       }
[08:29:50.050]                       invisible(muffled)
[08:29:50.050]                     }
[08:29:50.050]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.050]                   }
[08:29:50.050]                 }
[08:29:50.050]             }
[08:29:50.050]         }))
[08:29:50.050]     }, error = function(ex) {
[08:29:50.050]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.050]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.050]                 ...future.rng), started = ...future.startTime, 
[08:29:50.050]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.050]             version = "1.8"), class = "FutureResult")
[08:29:50.050]     }, finally = {
[08:29:50.050]         if (!identical(...future.workdir, getwd())) 
[08:29:50.050]             setwd(...future.workdir)
[08:29:50.050]         {
[08:29:50.050]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.050]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.050]             }
[08:29:50.050]             base::options(...future.oldOptions)
[08:29:50.050]             if (.Platform$OS.type == "windows") {
[08:29:50.050]                 old_names <- names(...future.oldEnvVars)
[08:29:50.050]                 envs <- base::Sys.getenv()
[08:29:50.050]                 names <- names(envs)
[08:29:50.050]                 common <- intersect(names, old_names)
[08:29:50.050]                 added <- setdiff(names, old_names)
[08:29:50.050]                 removed <- setdiff(old_names, names)
[08:29:50.050]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.050]                   envs[common]]
[08:29:50.050]                 NAMES <- toupper(changed)
[08:29:50.050]                 args <- list()
[08:29:50.050]                 for (kk in seq_along(NAMES)) {
[08:29:50.050]                   name <- changed[[kk]]
[08:29:50.050]                   NAME <- NAMES[[kk]]
[08:29:50.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.050]                     next
[08:29:50.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.050]                 }
[08:29:50.050]                 NAMES <- toupper(added)
[08:29:50.050]                 for (kk in seq_along(NAMES)) {
[08:29:50.050]                   name <- added[[kk]]
[08:29:50.050]                   NAME <- NAMES[[kk]]
[08:29:50.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.050]                     next
[08:29:50.050]                   args[[name]] <- ""
[08:29:50.050]                 }
[08:29:50.050]                 NAMES <- toupper(removed)
[08:29:50.050]                 for (kk in seq_along(NAMES)) {
[08:29:50.050]                   name <- removed[[kk]]
[08:29:50.050]                   NAME <- NAMES[[kk]]
[08:29:50.050]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.050]                     next
[08:29:50.050]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.050]                 }
[08:29:50.050]                 if (length(args) > 0) 
[08:29:50.050]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.050]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.050]             }
[08:29:50.050]             else {
[08:29:50.050]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.050]             }
[08:29:50.050]             {
[08:29:50.050]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.050]                   0L) {
[08:29:50.050]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.050]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.050]                   base::options(opts)
[08:29:50.050]                 }
[08:29:50.050]                 {
[08:29:50.050]                   {
[08:29:50.050]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.050]                     NULL
[08:29:50.050]                   }
[08:29:50.050]                   options(future.plan = NULL)
[08:29:50.050]                   if (is.na(NA_character_)) 
[08:29:50.050]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.050]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.050]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.050]                     .init = FALSE)
[08:29:50.050]                 }
[08:29:50.050]             }
[08:29:50.050]         }
[08:29:50.050]     })
[08:29:50.050]     if (TRUE) {
[08:29:50.050]         base::sink(type = "output", split = FALSE)
[08:29:50.050]         if (TRUE) {
[08:29:50.050]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.050]         }
[08:29:50.050]         else {
[08:29:50.050]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.050]         }
[08:29:50.050]         base::close(...future.stdout)
[08:29:50.050]         ...future.stdout <- NULL
[08:29:50.050]     }
[08:29:50.050]     ...future.result$conditions <- ...future.conditions
[08:29:50.050]     ...future.result$finished <- base::Sys.time()
[08:29:50.050]     ...future.result
[08:29:50.050] }
[08:29:50.053] MultisessionFuture started
[08:29:50.054] - Launch lazy future ... done
[08:29:50.054] run() for ‘MultisessionFuture’ ... done
[08:29:50.054] result() for ClusterFuture ...
[08:29:50.054] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.054] - Validating connection of MultisessionFuture
[08:29:50.103] - received message: FutureResult
[08:29:50.103] - Received FutureResult
[08:29:50.103] - Erased future from FutureRegistry
[08:29:50.103] result() for ClusterFuture ...
[08:29:50.103] - result already collected: FutureResult
[08:29:50.103] result() for ClusterFuture ... done
[08:29:50.104] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.104] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : chr " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31 32 33 3"| __truncated__
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ session_uuid: chr "80408dad-174e-9062-8845-63af4fba1b75"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85088
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:50.112] result() for ClusterFuture ...
[08:29:50.112] - result already collected: FutureResult
[08:29:50.112] result() for ClusterFuture ... done
[08:29:50.112] result() for ClusterFuture ...
[08:29:50.112] - result already collected: FutureResult
[08:29:50.113] result() for ClusterFuture ... done
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 int [1:50] 1 2 3 4 5 6 7 8 9 10 ...
a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 
"Sepal.Length"	"Sepal.Width"	"Petal.Length"	"Petal.Width"	"Species"
"1"	5.1	3.5	1.4	0.2	"setosa"
"2"	4.9	3	1.4	0.2	"setosa"
"3"	4.7	3.2	1.3	0.2	"setosa"
"4"	4.6	3.1	1.5	0.2	"setosa"
"5"	5	3.6	1.4	0.2	"setosa"
"6"	5.4	3.9	1.7	0.4	"setosa"
"7"	4.6	3.4	1.4	0.3	"setosa"
"8"	5	3.4	1.5	0.2	"setosa"
"9"	4.4	2.9	1.4	0.2	"setosa"
"10"	4.9	3.1	1.5	0.1	"setosa"
FutureResult:
value: ‘integer’
visible: TRUE
stdout: character
conditions: [n = 0] 
RNG used: FALSE
duration: 0.007785797 secs (started 2025-06-17 08:29:50.095297)
version: 1.8
[08:29:50.113] getGlobalsAndPackages() ...
[08:29:50.113] Searching for globals...
[08:29:50.117] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.117] Searching for globals ... DONE
[08:29:50.117] Resolving globals: FALSE
[08:29:50.118] 
[08:29:50.118] - packages: [1] ‘utils’
[08:29:50.118] getGlobalsAndPackages() ... DONE
[08:29:50.119] run() for ‘Future’ ...
[08:29:50.119] - state: ‘created’
[08:29:50.119] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.134] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.134] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.134]   - Field: ‘node’
[08:29:50.134]   - Field: ‘label’
[08:29:50.134]   - Field: ‘local’
[08:29:50.134]   - Field: ‘owner’
[08:29:50.134]   - Field: ‘envir’
[08:29:50.134]   - Field: ‘workers’
[08:29:50.134]   - Field: ‘packages’
[08:29:50.134]   - Field: ‘gc’
[08:29:50.135]   - Field: ‘conditions’
[08:29:50.135]   - Field: ‘persistent’
[08:29:50.135]   - Field: ‘expr’
[08:29:50.135]   - Field: ‘uuid’
[08:29:50.135]   - Field: ‘seed’
[08:29:50.135]   - Field: ‘version’
[08:29:50.135]   - Field: ‘result’
[08:29:50.135]   - Field: ‘asynchronous’
[08:29:50.135]   - Field: ‘calls’
[08:29:50.135]   - Field: ‘globals’
[08:29:50.136]   - Field: ‘stdout’
[08:29:50.136]   - Field: ‘earlySignal’
[08:29:50.136]   - Field: ‘lazy’
[08:29:50.136]   - Field: ‘state’
[08:29:50.136] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.136] - Launch lazy future ...
[08:29:50.136] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.137] Packages needed by future strategies (n = 0): <none>
[08:29:50.137] {
[08:29:50.137]     {
[08:29:50.137]         {
[08:29:50.137]             ...future.startTime <- base::Sys.time()
[08:29:50.137]             {
[08:29:50.137]                 {
[08:29:50.137]                   {
[08:29:50.137]                     {
[08:29:50.137]                       {
[08:29:50.137]                         base::local({
[08:29:50.137]                           has_future <- base::requireNamespace("future", 
[08:29:50.137]                             quietly = TRUE)
[08:29:50.137]                           if (has_future) {
[08:29:50.137]                             ns <- base::getNamespace("future")
[08:29:50.137]                             version <- ns[[".package"]][["version"]]
[08:29:50.137]                             if (is.null(version)) 
[08:29:50.137]                               version <- utils::packageVersion("future")
[08:29:50.137]                           }
[08:29:50.137]                           else {
[08:29:50.137]                             version <- NULL
[08:29:50.137]                           }
[08:29:50.137]                           if (!has_future || version < "1.8.0") {
[08:29:50.137]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.137]                               "", base::R.version$version.string), 
[08:29:50.137]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.137]                                 base::R.version$platform, 8 * 
[08:29:50.137]                                   base::.Machine$sizeof.pointer), 
[08:29:50.137]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.137]                                 "release", "version")], collapse = " "), 
[08:29:50.137]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.137]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.137]                               info)
[08:29:50.137]                             info <- base::paste(info, collapse = "; ")
[08:29:50.137]                             if (!has_future) {
[08:29:50.137]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.137]                                 info)
[08:29:50.137]                             }
[08:29:50.137]                             else {
[08:29:50.137]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.137]                                 info, version)
[08:29:50.137]                             }
[08:29:50.137]                             base::stop(msg)
[08:29:50.137]                           }
[08:29:50.137]                         })
[08:29:50.137]                       }
[08:29:50.137]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.137]                       base::options(mc.cores = 1L)
[08:29:50.137]                     }
[08:29:50.137]                     base::local({
[08:29:50.137]                       for (pkg in "utils") {
[08:29:50.137]                         base::loadNamespace(pkg)
[08:29:50.137]                         base::library(pkg, character.only = TRUE)
[08:29:50.137]                       }
[08:29:50.137]                     })
[08:29:50.137]                   }
[08:29:50.137]                   ...future.strategy.old <- future::plan("list")
[08:29:50.137]                   options(future.plan = NULL)
[08:29:50.137]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.137]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.137]                 }
[08:29:50.137]                 ...future.workdir <- getwd()
[08:29:50.137]             }
[08:29:50.137]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.137]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.137]         }
[08:29:50.137]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.137]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.137]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.137]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.137]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.137]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.137]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.137]             base::names(...future.oldOptions))
[08:29:50.137]     }
[08:29:50.137]     if (FALSE) {
[08:29:50.137]     }
[08:29:50.137]     else {
[08:29:50.137]         if (TRUE) {
[08:29:50.137]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.137]                 open = "w")
[08:29:50.137]         }
[08:29:50.137]         else {
[08:29:50.137]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.137]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.137]         }
[08:29:50.137]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.137]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.137]             base::sink(type = "output", split = FALSE)
[08:29:50.137]             base::close(...future.stdout)
[08:29:50.137]         }, add = TRUE)
[08:29:50.137]     }
[08:29:50.137]     ...future.frame <- base::sys.nframe()
[08:29:50.137]     ...future.conditions <- base::list()
[08:29:50.137]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.137]     if (FALSE) {
[08:29:50.137]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.137]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.137]     }
[08:29:50.137]     ...future.result <- base::tryCatch({
[08:29:50.137]         base::withCallingHandlers({
[08:29:50.137]             ...future.value <- base::withVisible(base::local({
[08:29:50.137]                 ...future.makeSendCondition <- base::local({
[08:29:50.137]                   sendCondition <- NULL
[08:29:50.137]                   function(frame = 1L) {
[08:29:50.137]                     if (is.function(sendCondition)) 
[08:29:50.137]                       return(sendCondition)
[08:29:50.137]                     ns <- getNamespace("parallel")
[08:29:50.137]                     if (exists("sendData", mode = "function", 
[08:29:50.137]                       envir = ns)) {
[08:29:50.137]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.137]                         envir = ns)
[08:29:50.137]                       envir <- sys.frame(frame)
[08:29:50.137]                       master <- NULL
[08:29:50.137]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.137]                         !identical(envir, emptyenv())) {
[08:29:50.137]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.137]                           inherits = FALSE)) {
[08:29:50.137]                           master <- get("master", mode = "list", 
[08:29:50.137]                             envir = envir, inherits = FALSE)
[08:29:50.137]                           if (inherits(master, c("SOCKnode", 
[08:29:50.137]                             "SOCK0node"))) {
[08:29:50.137]                             sendCondition <<- function(cond) {
[08:29:50.137]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.137]                                 success = TRUE)
[08:29:50.137]                               parallel_sendData(master, data)
[08:29:50.137]                             }
[08:29:50.137]                             return(sendCondition)
[08:29:50.137]                           }
[08:29:50.137]                         }
[08:29:50.137]                         frame <- frame + 1L
[08:29:50.137]                         envir <- sys.frame(frame)
[08:29:50.137]                       }
[08:29:50.137]                     }
[08:29:50.137]                     sendCondition <<- function(cond) NULL
[08:29:50.137]                   }
[08:29:50.137]                 })
[08:29:50.137]                 withCallingHandlers({
[08:29:50.137]                   {
[08:29:50.137]                     print(1:50)
[08:29:50.137]                     str(1:50)
[08:29:50.137]                     cat(letters, sep = "-")
[08:29:50.137]                     cat(1:6, collapse = "\n")
[08:29:50.137]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.137]                     42L
[08:29:50.137]                   }
[08:29:50.137]                 }, immediateCondition = function(cond) {
[08:29:50.137]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.137]                   sendCondition(cond)
[08:29:50.137]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.137]                   {
[08:29:50.137]                     inherits <- base::inherits
[08:29:50.137]                     invokeRestart <- base::invokeRestart
[08:29:50.137]                     is.null <- base::is.null
[08:29:50.137]                     muffled <- FALSE
[08:29:50.137]                     if (inherits(cond, "message")) {
[08:29:50.137]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.137]                       if (muffled) 
[08:29:50.137]                         invokeRestart("muffleMessage")
[08:29:50.137]                     }
[08:29:50.137]                     else if (inherits(cond, "warning")) {
[08:29:50.137]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.137]                       if (muffled) 
[08:29:50.137]                         invokeRestart("muffleWarning")
[08:29:50.137]                     }
[08:29:50.137]                     else if (inherits(cond, "condition")) {
[08:29:50.137]                       if (!is.null(pattern)) {
[08:29:50.137]                         computeRestarts <- base::computeRestarts
[08:29:50.137]                         grepl <- base::grepl
[08:29:50.137]                         restarts <- computeRestarts(cond)
[08:29:50.137]                         for (restart in restarts) {
[08:29:50.137]                           name <- restart$name
[08:29:50.137]                           if (is.null(name)) 
[08:29:50.137]                             next
[08:29:50.137]                           if (!grepl(pattern, name)) 
[08:29:50.137]                             next
[08:29:50.137]                           invokeRestart(restart)
[08:29:50.137]                           muffled <- TRUE
[08:29:50.137]                           break
[08:29:50.137]                         }
[08:29:50.137]                       }
[08:29:50.137]                     }
[08:29:50.137]                     invisible(muffled)
[08:29:50.137]                   }
[08:29:50.137]                   muffleCondition(cond)
[08:29:50.137]                 })
[08:29:50.137]             }))
[08:29:50.137]             future::FutureResult(value = ...future.value$value, 
[08:29:50.137]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.137]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.137]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.137]                     ...future.globalenv.names))
[08:29:50.137]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.137]         }, condition = base::local({
[08:29:50.137]             c <- base::c
[08:29:50.137]             inherits <- base::inherits
[08:29:50.137]             invokeRestart <- base::invokeRestart
[08:29:50.137]             length <- base::length
[08:29:50.137]             list <- base::list
[08:29:50.137]             seq.int <- base::seq.int
[08:29:50.137]             signalCondition <- base::signalCondition
[08:29:50.137]             sys.calls <- base::sys.calls
[08:29:50.137]             `[[` <- base::`[[`
[08:29:50.137]             `+` <- base::`+`
[08:29:50.137]             `<<-` <- base::`<<-`
[08:29:50.137]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.137]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.137]                   3L)]
[08:29:50.137]             }
[08:29:50.137]             function(cond) {
[08:29:50.137]                 is_error <- inherits(cond, "error")
[08:29:50.137]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.137]                   NULL)
[08:29:50.137]                 if (is_error) {
[08:29:50.137]                   sessionInformation <- function() {
[08:29:50.137]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.137]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.137]                       search = base::search(), system = base::Sys.info())
[08:29:50.137]                   }
[08:29:50.137]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.137]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.137]                     cond$call), session = sessionInformation(), 
[08:29:50.137]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.137]                   signalCondition(cond)
[08:29:50.137]                 }
[08:29:50.137]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.137]                 "immediateCondition"))) {
[08:29:50.137]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.137]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.137]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.137]                   if (TRUE && !signal) {
[08:29:50.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.137]                     {
[08:29:50.137]                       inherits <- base::inherits
[08:29:50.137]                       invokeRestart <- base::invokeRestart
[08:29:50.137]                       is.null <- base::is.null
[08:29:50.137]                       muffled <- FALSE
[08:29:50.137]                       if (inherits(cond, "message")) {
[08:29:50.137]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.137]                         if (muffled) 
[08:29:50.137]                           invokeRestart("muffleMessage")
[08:29:50.137]                       }
[08:29:50.137]                       else if (inherits(cond, "warning")) {
[08:29:50.137]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.137]                         if (muffled) 
[08:29:50.137]                           invokeRestart("muffleWarning")
[08:29:50.137]                       }
[08:29:50.137]                       else if (inherits(cond, "condition")) {
[08:29:50.137]                         if (!is.null(pattern)) {
[08:29:50.137]                           computeRestarts <- base::computeRestarts
[08:29:50.137]                           grepl <- base::grepl
[08:29:50.137]                           restarts <- computeRestarts(cond)
[08:29:50.137]                           for (restart in restarts) {
[08:29:50.137]                             name <- restart$name
[08:29:50.137]                             if (is.null(name)) 
[08:29:50.137]                               next
[08:29:50.137]                             if (!grepl(pattern, name)) 
[08:29:50.137]                               next
[08:29:50.137]                             invokeRestart(restart)
[08:29:50.137]                             muffled <- TRUE
[08:29:50.137]                             break
[08:29:50.137]                           }
[08:29:50.137]                         }
[08:29:50.137]                       }
[08:29:50.137]                       invisible(muffled)
[08:29:50.137]                     }
[08:29:50.137]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.137]                   }
[08:29:50.137]                 }
[08:29:50.137]                 else {
[08:29:50.137]                   if (TRUE) {
[08:29:50.137]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.137]                     {
[08:29:50.137]                       inherits <- base::inherits
[08:29:50.137]                       invokeRestart <- base::invokeRestart
[08:29:50.137]                       is.null <- base::is.null
[08:29:50.137]                       muffled <- FALSE
[08:29:50.137]                       if (inherits(cond, "message")) {
[08:29:50.137]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.137]                         if (muffled) 
[08:29:50.137]                           invokeRestart("muffleMessage")
[08:29:50.137]                       }
[08:29:50.137]                       else if (inherits(cond, "warning")) {
[08:29:50.137]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.137]                         if (muffled) 
[08:29:50.137]                           invokeRestart("muffleWarning")
[08:29:50.137]                       }
[08:29:50.137]                       else if (inherits(cond, "condition")) {
[08:29:50.137]                         if (!is.null(pattern)) {
[08:29:50.137]                           computeRestarts <- base::computeRestarts
[08:29:50.137]                           grepl <- base::grepl
[08:29:50.137]                           restarts <- computeRestarts(cond)
[08:29:50.137]                           for (restart in restarts) {
[08:29:50.137]                             name <- restart$name
[08:29:50.137]                             if (is.null(name)) 
[08:29:50.137]                               next
[08:29:50.137]                             if (!grepl(pattern, name)) 
[08:29:50.137]                               next
[08:29:50.137]                             invokeRestart(restart)
[08:29:50.137]                             muffled <- TRUE
[08:29:50.137]                             break
[08:29:50.137]                           }
[08:29:50.137]                         }
[08:29:50.137]                       }
[08:29:50.137]                       invisible(muffled)
[08:29:50.137]                     }
[08:29:50.137]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.137]                   }
[08:29:50.137]                 }
[08:29:50.137]             }
[08:29:50.137]         }))
[08:29:50.137]     }, error = function(ex) {
[08:29:50.137]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.137]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.137]                 ...future.rng), started = ...future.startTime, 
[08:29:50.137]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.137]             version = "1.8"), class = "FutureResult")
[08:29:50.137]     }, finally = {
[08:29:50.137]         if (!identical(...future.workdir, getwd())) 
[08:29:50.137]             setwd(...future.workdir)
[08:29:50.137]         {
[08:29:50.137]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.137]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.137]             }
[08:29:50.137]             base::options(...future.oldOptions)
[08:29:50.137]             if (.Platform$OS.type == "windows") {
[08:29:50.137]                 old_names <- names(...future.oldEnvVars)
[08:29:50.137]                 envs <- base::Sys.getenv()
[08:29:50.137]                 names <- names(envs)
[08:29:50.137]                 common <- intersect(names, old_names)
[08:29:50.137]                 added <- setdiff(names, old_names)
[08:29:50.137]                 removed <- setdiff(old_names, names)
[08:29:50.137]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.137]                   envs[common]]
[08:29:50.137]                 NAMES <- toupper(changed)
[08:29:50.137]                 args <- list()
[08:29:50.137]                 for (kk in seq_along(NAMES)) {
[08:29:50.137]                   name <- changed[[kk]]
[08:29:50.137]                   NAME <- NAMES[[kk]]
[08:29:50.137]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.137]                     next
[08:29:50.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.137]                 }
[08:29:50.137]                 NAMES <- toupper(added)
[08:29:50.137]                 for (kk in seq_along(NAMES)) {
[08:29:50.137]                   name <- added[[kk]]
[08:29:50.137]                   NAME <- NAMES[[kk]]
[08:29:50.137]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.137]                     next
[08:29:50.137]                   args[[name]] <- ""
[08:29:50.137]                 }
[08:29:50.137]                 NAMES <- toupper(removed)
[08:29:50.137]                 for (kk in seq_along(NAMES)) {
[08:29:50.137]                   name <- removed[[kk]]
[08:29:50.137]                   NAME <- NAMES[[kk]]
[08:29:50.137]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.137]                     next
[08:29:50.137]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.137]                 }
[08:29:50.137]                 if (length(args) > 0) 
[08:29:50.137]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.137]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.137]             }
[08:29:50.137]             else {
[08:29:50.137]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.137]             }
[08:29:50.137]             {
[08:29:50.137]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.137]                   0L) {
[08:29:50.137]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.137]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.137]                   base::options(opts)
[08:29:50.137]                 }
[08:29:50.137]                 {
[08:29:50.137]                   {
[08:29:50.137]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.137]                     NULL
[08:29:50.137]                   }
[08:29:50.137]                   options(future.plan = NULL)
[08:29:50.137]                   if (is.na(NA_character_)) 
[08:29:50.137]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.137]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.137]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.137]                     .init = FALSE)
[08:29:50.137]                 }
[08:29:50.137]             }
[08:29:50.137]         }
[08:29:50.137]     })
[08:29:50.137]     if (TRUE) {
[08:29:50.137]         base::sink(type = "output", split = FALSE)
[08:29:50.137]         if (TRUE) {
[08:29:50.137]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.137]         }
[08:29:50.137]         else {
[08:29:50.137]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.137]         }
[08:29:50.137]         base::close(...future.stdout)
[08:29:50.137]         ...future.stdout <- NULL
[08:29:50.137]     }
[08:29:50.137]     ...future.result$conditions <- ...future.conditions
[08:29:50.137]     ...future.result$finished <- base::Sys.time()
[08:29:50.137]     ...future.result
[08:29:50.137] }
[08:29:50.141] MultisessionFuture started
[08:29:50.141] - Launch lazy future ... done
[08:29:50.141] run() for ‘MultisessionFuture’ ... done
[08:29:50.141] result() for ClusterFuture ...
[08:29:50.141] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.142] - Validating connection of MultisessionFuture
[08:29:50.184] - received message: FutureResult
[08:29:50.184] - Received FutureResult
[08:29:50.184] - Erased future from FutureRegistry
[08:29:50.184] result() for ClusterFuture ...
[08:29:50.184] - result already collected: FutureResult
[08:29:50.185] result() for ClusterFuture ... done
[08:29:50.185] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.185] result() for ClusterFuture ... done
[08:29:50.185] result() for ClusterFuture ...
[08:29:50.185] - result already collected: FutureResult
[08:29:50.185] result() for ClusterFuture ... done
 [1] " [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25"  
 [2] "[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"  
 [3] " int [1:50] 1 2 3 4 5 6 7 8 9 10 ..."                                             
 [4] "a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z1 2 3 4 5 6 "                  
 [5] "\"Sepal.Length\"\t\"Sepal.Width\"\t\"Petal.Length\"\t\"Petal.Width\"\t\"Species\""
 [6] "\"1\"\t5.1\t3.5\t1.4\t0.2\t\"setosa\""                                            
 [7] "\"2\"\t4.9\t3\t1.4\t0.2\t\"setosa\""                                              
 [8] "\"3\"\t4.7\t3.2\t1.3\t0.2\t\"setosa\""                                            
 [9] "\"4\"\t4.6\t3.1\t1.5\t0.2\t\"setosa\""                                            
[10] "\"5\"\t5\t3.6\t1.4\t0.2\t\"setosa\""                                              
[11] "\"6\"\t5.4\t3.9\t1.7\t0.4\t\"setosa\""                                            
[12] "\"7\"\t4.6\t3.4\t1.4\t0.3\t\"setosa\""                                            
[13] "\"8\"\t5\t3.4\t1.5\t0.2\t\"setosa\""                                              
[14] "\"9\"\t4.4\t2.9\t1.4\t0.2\t\"setosa\""                                            
[15] "\"10\"\t4.9\t3.1\t1.5\t0.1\t\"setosa\""                                           
- stdout = structure(TRUE, drop = TRUE)
[08:29:50.186] getGlobalsAndPackages() ...
[08:29:50.186] Searching for globals...
[08:29:50.186] - globals found: [1] ‘print’
[08:29:50.186] Searching for globals ... DONE
[08:29:50.187] Resolving globals: FALSE
[08:29:50.187] 
[08:29:50.187] 
[08:29:50.187] getGlobalsAndPackages() ... DONE
[08:29:50.187] run() for ‘Future’ ...
[08:29:50.187] - state: ‘created’
[08:29:50.188] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.202] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.202] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.202]   - Field: ‘node’
[08:29:50.203]   - Field: ‘label’
[08:29:50.203]   - Field: ‘local’
[08:29:50.203]   - Field: ‘owner’
[08:29:50.203]   - Field: ‘envir’
[08:29:50.203]   - Field: ‘workers’
[08:29:50.203]   - Field: ‘packages’
[08:29:50.203]   - Field: ‘gc’
[08:29:50.203]   - Field: ‘conditions’
[08:29:50.203]   - Field: ‘persistent’
[08:29:50.203]   - Field: ‘expr’
[08:29:50.204]   - Field: ‘uuid’
[08:29:50.204]   - Field: ‘seed’
[08:29:50.204]   - Field: ‘version’
[08:29:50.204]   - Field: ‘result’
[08:29:50.204]   - Field: ‘asynchronous’
[08:29:50.204]   - Field: ‘calls’
[08:29:50.204]   - Field: ‘globals’
[08:29:50.204]   - Field: ‘stdout’
[08:29:50.204]   - Field: ‘earlySignal’
[08:29:50.204]   - Field: ‘lazy’
[08:29:50.205]   - Field: ‘state’
[08:29:50.205] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.205] - Launch lazy future ...
[08:29:50.205] Packages needed by the future expression (n = 0): <none>
[08:29:50.205] Packages needed by future strategies (n = 0): <none>
[08:29:50.206] {
[08:29:50.206]     {
[08:29:50.206]         {
[08:29:50.206]             ...future.startTime <- base::Sys.time()
[08:29:50.206]             {
[08:29:50.206]                 {
[08:29:50.206]                   {
[08:29:50.206]                     {
[08:29:50.206]                       base::local({
[08:29:50.206]                         has_future <- base::requireNamespace("future", 
[08:29:50.206]                           quietly = TRUE)
[08:29:50.206]                         if (has_future) {
[08:29:50.206]                           ns <- base::getNamespace("future")
[08:29:50.206]                           version <- ns[[".package"]][["version"]]
[08:29:50.206]                           if (is.null(version)) 
[08:29:50.206]                             version <- utils::packageVersion("future")
[08:29:50.206]                         }
[08:29:50.206]                         else {
[08:29:50.206]                           version <- NULL
[08:29:50.206]                         }
[08:29:50.206]                         if (!has_future || version < "1.8.0") {
[08:29:50.206]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.206]                             "", base::R.version$version.string), 
[08:29:50.206]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:50.206]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:50.206]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.206]                               "release", "version")], collapse = " "), 
[08:29:50.206]                             hostname = base::Sys.info()[["nodename"]])
[08:29:50.206]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.206]                             info)
[08:29:50.206]                           info <- base::paste(info, collapse = "; ")
[08:29:50.206]                           if (!has_future) {
[08:29:50.206]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.206]                               info)
[08:29:50.206]                           }
[08:29:50.206]                           else {
[08:29:50.206]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.206]                               info, version)
[08:29:50.206]                           }
[08:29:50.206]                           base::stop(msg)
[08:29:50.206]                         }
[08:29:50.206]                       })
[08:29:50.206]                     }
[08:29:50.206]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.206]                     base::options(mc.cores = 1L)
[08:29:50.206]                   }
[08:29:50.206]                   ...future.strategy.old <- future::plan("list")
[08:29:50.206]                   options(future.plan = NULL)
[08:29:50.206]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.206]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.206]                 }
[08:29:50.206]                 ...future.workdir <- getwd()
[08:29:50.206]             }
[08:29:50.206]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.206]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.206]         }
[08:29:50.206]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.206]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.206]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.206]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.206]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.206]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.206]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.206]             base::names(...future.oldOptions))
[08:29:50.206]     }
[08:29:50.206]     if (FALSE) {
[08:29:50.206]     }
[08:29:50.206]     else {
[08:29:50.206]         if (TRUE) {
[08:29:50.206]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.206]                 open = "w")
[08:29:50.206]         }
[08:29:50.206]         else {
[08:29:50.206]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.206]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.206]         }
[08:29:50.206]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.206]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.206]             base::sink(type = "output", split = FALSE)
[08:29:50.206]             base::close(...future.stdout)
[08:29:50.206]         }, add = TRUE)
[08:29:50.206]     }
[08:29:50.206]     ...future.frame <- base::sys.nframe()
[08:29:50.206]     ...future.conditions <- base::list()
[08:29:50.206]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.206]     if (FALSE) {
[08:29:50.206]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.206]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.206]     }
[08:29:50.206]     ...future.result <- base::tryCatch({
[08:29:50.206]         base::withCallingHandlers({
[08:29:50.206]             ...future.value <- base::withVisible(base::local({
[08:29:50.206]                 ...future.makeSendCondition <- base::local({
[08:29:50.206]                   sendCondition <- NULL
[08:29:50.206]                   function(frame = 1L) {
[08:29:50.206]                     if (is.function(sendCondition)) 
[08:29:50.206]                       return(sendCondition)
[08:29:50.206]                     ns <- getNamespace("parallel")
[08:29:50.206]                     if (exists("sendData", mode = "function", 
[08:29:50.206]                       envir = ns)) {
[08:29:50.206]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.206]                         envir = ns)
[08:29:50.206]                       envir <- sys.frame(frame)
[08:29:50.206]                       master <- NULL
[08:29:50.206]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.206]                         !identical(envir, emptyenv())) {
[08:29:50.206]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.206]                           inherits = FALSE)) {
[08:29:50.206]                           master <- get("master", mode = "list", 
[08:29:50.206]                             envir = envir, inherits = FALSE)
[08:29:50.206]                           if (inherits(master, c("SOCKnode", 
[08:29:50.206]                             "SOCK0node"))) {
[08:29:50.206]                             sendCondition <<- function(cond) {
[08:29:50.206]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.206]                                 success = TRUE)
[08:29:50.206]                               parallel_sendData(master, data)
[08:29:50.206]                             }
[08:29:50.206]                             return(sendCondition)
[08:29:50.206]                           }
[08:29:50.206]                         }
[08:29:50.206]                         frame <- frame + 1L
[08:29:50.206]                         envir <- sys.frame(frame)
[08:29:50.206]                       }
[08:29:50.206]                     }
[08:29:50.206]                     sendCondition <<- function(cond) NULL
[08:29:50.206]                   }
[08:29:50.206]                 })
[08:29:50.206]                 withCallingHandlers({
[08:29:50.206]                   print(42)
[08:29:50.206]                 }, immediateCondition = function(cond) {
[08:29:50.206]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.206]                   sendCondition(cond)
[08:29:50.206]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.206]                   {
[08:29:50.206]                     inherits <- base::inherits
[08:29:50.206]                     invokeRestart <- base::invokeRestart
[08:29:50.206]                     is.null <- base::is.null
[08:29:50.206]                     muffled <- FALSE
[08:29:50.206]                     if (inherits(cond, "message")) {
[08:29:50.206]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.206]                       if (muffled) 
[08:29:50.206]                         invokeRestart("muffleMessage")
[08:29:50.206]                     }
[08:29:50.206]                     else if (inherits(cond, "warning")) {
[08:29:50.206]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.206]                       if (muffled) 
[08:29:50.206]                         invokeRestart("muffleWarning")
[08:29:50.206]                     }
[08:29:50.206]                     else if (inherits(cond, "condition")) {
[08:29:50.206]                       if (!is.null(pattern)) {
[08:29:50.206]                         computeRestarts <- base::computeRestarts
[08:29:50.206]                         grepl <- base::grepl
[08:29:50.206]                         restarts <- computeRestarts(cond)
[08:29:50.206]                         for (restart in restarts) {
[08:29:50.206]                           name <- restart$name
[08:29:50.206]                           if (is.null(name)) 
[08:29:50.206]                             next
[08:29:50.206]                           if (!grepl(pattern, name)) 
[08:29:50.206]                             next
[08:29:50.206]                           invokeRestart(restart)
[08:29:50.206]                           muffled <- TRUE
[08:29:50.206]                           break
[08:29:50.206]                         }
[08:29:50.206]                       }
[08:29:50.206]                     }
[08:29:50.206]                     invisible(muffled)
[08:29:50.206]                   }
[08:29:50.206]                   muffleCondition(cond)
[08:29:50.206]                 })
[08:29:50.206]             }))
[08:29:50.206]             future::FutureResult(value = ...future.value$value, 
[08:29:50.206]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.206]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.206]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.206]                     ...future.globalenv.names))
[08:29:50.206]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.206]         }, condition = base::local({
[08:29:50.206]             c <- base::c
[08:29:50.206]             inherits <- base::inherits
[08:29:50.206]             invokeRestart <- base::invokeRestart
[08:29:50.206]             length <- base::length
[08:29:50.206]             list <- base::list
[08:29:50.206]             seq.int <- base::seq.int
[08:29:50.206]             signalCondition <- base::signalCondition
[08:29:50.206]             sys.calls <- base::sys.calls
[08:29:50.206]             `[[` <- base::`[[`
[08:29:50.206]             `+` <- base::`+`
[08:29:50.206]             `<<-` <- base::`<<-`
[08:29:50.206]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.206]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.206]                   3L)]
[08:29:50.206]             }
[08:29:50.206]             function(cond) {
[08:29:50.206]                 is_error <- inherits(cond, "error")
[08:29:50.206]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.206]                   NULL)
[08:29:50.206]                 if (is_error) {
[08:29:50.206]                   sessionInformation <- function() {
[08:29:50.206]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.206]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.206]                       search = base::search(), system = base::Sys.info())
[08:29:50.206]                   }
[08:29:50.206]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.206]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.206]                     cond$call), session = sessionInformation(), 
[08:29:50.206]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.206]                   signalCondition(cond)
[08:29:50.206]                 }
[08:29:50.206]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.206]                 "immediateCondition"))) {
[08:29:50.206]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.206]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.206]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.206]                   if (TRUE && !signal) {
[08:29:50.206]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.206]                     {
[08:29:50.206]                       inherits <- base::inherits
[08:29:50.206]                       invokeRestart <- base::invokeRestart
[08:29:50.206]                       is.null <- base::is.null
[08:29:50.206]                       muffled <- FALSE
[08:29:50.206]                       if (inherits(cond, "message")) {
[08:29:50.206]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.206]                         if (muffled) 
[08:29:50.206]                           invokeRestart("muffleMessage")
[08:29:50.206]                       }
[08:29:50.206]                       else if (inherits(cond, "warning")) {
[08:29:50.206]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.206]                         if (muffled) 
[08:29:50.206]                           invokeRestart("muffleWarning")
[08:29:50.206]                       }
[08:29:50.206]                       else if (inherits(cond, "condition")) {
[08:29:50.206]                         if (!is.null(pattern)) {
[08:29:50.206]                           computeRestarts <- base::computeRestarts
[08:29:50.206]                           grepl <- base::grepl
[08:29:50.206]                           restarts <- computeRestarts(cond)
[08:29:50.206]                           for (restart in restarts) {
[08:29:50.206]                             name <- restart$name
[08:29:50.206]                             if (is.null(name)) 
[08:29:50.206]                               next
[08:29:50.206]                             if (!grepl(pattern, name)) 
[08:29:50.206]                               next
[08:29:50.206]                             invokeRestart(restart)
[08:29:50.206]                             muffled <- TRUE
[08:29:50.206]                             break
[08:29:50.206]                           }
[08:29:50.206]                         }
[08:29:50.206]                       }
[08:29:50.206]                       invisible(muffled)
[08:29:50.206]                     }
[08:29:50.206]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.206]                   }
[08:29:50.206]                 }
[08:29:50.206]                 else {
[08:29:50.206]                   if (TRUE) {
[08:29:50.206]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.206]                     {
[08:29:50.206]                       inherits <- base::inherits
[08:29:50.206]                       invokeRestart <- base::invokeRestart
[08:29:50.206]                       is.null <- base::is.null
[08:29:50.206]                       muffled <- FALSE
[08:29:50.206]                       if (inherits(cond, "message")) {
[08:29:50.206]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.206]                         if (muffled) 
[08:29:50.206]                           invokeRestart("muffleMessage")
[08:29:50.206]                       }
[08:29:50.206]                       else if (inherits(cond, "warning")) {
[08:29:50.206]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.206]                         if (muffled) 
[08:29:50.206]                           invokeRestart("muffleWarning")
[08:29:50.206]                       }
[08:29:50.206]                       else if (inherits(cond, "condition")) {
[08:29:50.206]                         if (!is.null(pattern)) {
[08:29:50.206]                           computeRestarts <- base::computeRestarts
[08:29:50.206]                           grepl <- base::grepl
[08:29:50.206]                           restarts <- computeRestarts(cond)
[08:29:50.206]                           for (restart in restarts) {
[08:29:50.206]                             name <- restart$name
[08:29:50.206]                             if (is.null(name)) 
[08:29:50.206]                               next
[08:29:50.206]                             if (!grepl(pattern, name)) 
[08:29:50.206]                               next
[08:29:50.206]                             invokeRestart(restart)
[08:29:50.206]                             muffled <- TRUE
[08:29:50.206]                             break
[08:29:50.206]                           }
[08:29:50.206]                         }
[08:29:50.206]                       }
[08:29:50.206]                       invisible(muffled)
[08:29:50.206]                     }
[08:29:50.206]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.206]                   }
[08:29:50.206]                 }
[08:29:50.206]             }
[08:29:50.206]         }))
[08:29:50.206]     }, error = function(ex) {
[08:29:50.206]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.206]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.206]                 ...future.rng), started = ...future.startTime, 
[08:29:50.206]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.206]             version = "1.8"), class = "FutureResult")
[08:29:50.206]     }, finally = {
[08:29:50.206]         if (!identical(...future.workdir, getwd())) 
[08:29:50.206]             setwd(...future.workdir)
[08:29:50.206]         {
[08:29:50.206]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.206]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.206]             }
[08:29:50.206]             base::options(...future.oldOptions)
[08:29:50.206]             if (.Platform$OS.type == "windows") {
[08:29:50.206]                 old_names <- names(...future.oldEnvVars)
[08:29:50.206]                 envs <- base::Sys.getenv()
[08:29:50.206]                 names <- names(envs)
[08:29:50.206]                 common <- intersect(names, old_names)
[08:29:50.206]                 added <- setdiff(names, old_names)
[08:29:50.206]                 removed <- setdiff(old_names, names)
[08:29:50.206]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.206]                   envs[common]]
[08:29:50.206]                 NAMES <- toupper(changed)
[08:29:50.206]                 args <- list()
[08:29:50.206]                 for (kk in seq_along(NAMES)) {
[08:29:50.206]                   name <- changed[[kk]]
[08:29:50.206]                   NAME <- NAMES[[kk]]
[08:29:50.206]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.206]                     next
[08:29:50.206]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.206]                 }
[08:29:50.206]                 NAMES <- toupper(added)
[08:29:50.206]                 for (kk in seq_along(NAMES)) {
[08:29:50.206]                   name <- added[[kk]]
[08:29:50.206]                   NAME <- NAMES[[kk]]
[08:29:50.206]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.206]                     next
[08:29:50.206]                   args[[name]] <- ""
[08:29:50.206]                 }
[08:29:50.206]                 NAMES <- toupper(removed)
[08:29:50.206]                 for (kk in seq_along(NAMES)) {
[08:29:50.206]                   name <- removed[[kk]]
[08:29:50.206]                   NAME <- NAMES[[kk]]
[08:29:50.206]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.206]                     next
[08:29:50.206]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.206]                 }
[08:29:50.206]                 if (length(args) > 0) 
[08:29:50.206]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.206]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.206]             }
[08:29:50.206]             else {
[08:29:50.206]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.206]             }
[08:29:50.206]             {
[08:29:50.206]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.206]                   0L) {
[08:29:50.206]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.206]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.206]                   base::options(opts)
[08:29:50.206]                 }
[08:29:50.206]                 {
[08:29:50.206]                   {
[08:29:50.206]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.206]                     NULL
[08:29:50.206]                   }
[08:29:50.206]                   options(future.plan = NULL)
[08:29:50.206]                   if (is.na(NA_character_)) 
[08:29:50.206]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.206]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.206]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.206]                     .init = FALSE)
[08:29:50.206]                 }
[08:29:50.206]             }
[08:29:50.206]         }
[08:29:50.206]     })
[08:29:50.206]     if (TRUE) {
[08:29:50.206]         base::sink(type = "output", split = FALSE)
[08:29:50.206]         if (TRUE) {
[08:29:50.206]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.206]         }
[08:29:50.206]         else {
[08:29:50.206]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.206]         }
[08:29:50.206]         base::close(...future.stdout)
[08:29:50.206]         ...future.stdout <- NULL
[08:29:50.206]     }
[08:29:50.206]     ...future.result$conditions <- ...future.conditions
[08:29:50.206]     ...future.result$finished <- base::Sys.time()
[08:29:50.206]     ...future.result
[08:29:50.206] }
[08:29:50.209] MultisessionFuture started
[08:29:50.209] - Launch lazy future ... done
[08:29:50.209] run() for ‘MultisessionFuture’ ... done
[08:29:50.209] result() for ClusterFuture ...
[08:29:50.210] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.210] - Validating connection of MultisessionFuture
[08:29:50.251] - received message: FutureResult
[08:29:50.251] - Received FutureResult
[08:29:50.251] - Erased future from FutureRegistry
[08:29:50.251] result() for ClusterFuture ...
[08:29:50.252] - result already collected: FutureResult
[08:29:50.252] result() for ClusterFuture ... done
[08:29:50.252] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.252] result() for ClusterFuture ... done
[08:29:50.252] result() for ClusterFuture ...
[08:29:50.252] - result already collected: FutureResult
[08:29:50.252] result() for ClusterFuture ... done
[08:29:50.252] result() for ClusterFuture ...
[08:29:50.252] - result already collected: FutureResult
[08:29:50.253] result() for ClusterFuture ... done
[1] 42
[08:29:50.253] result() for ClusterFuture ...
[08:29:50.253] - result already collected: FutureResult
[08:29:50.253] result() for ClusterFuture ... done
- stdout = FALSE
[08:29:50.253] getGlobalsAndPackages() ...
[08:29:50.253] Searching for globals...
[08:29:50.259] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.259] Searching for globals ... DONE
[08:29:50.259] Resolving globals: FALSE
[08:29:50.260] 
[08:29:50.260] - packages: [1] ‘utils’
[08:29:50.260] getGlobalsAndPackages() ... DONE
[08:29:50.261] run() for ‘Future’ ...
[08:29:50.261] - state: ‘created’
[08:29:50.261] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.278] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.278] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.278]   - Field: ‘node’
[08:29:50.278]   - Field: ‘label’
[08:29:50.278]   - Field: ‘local’
[08:29:50.278]   - Field: ‘owner’
[08:29:50.278]   - Field: ‘envir’
[08:29:50.278]   - Field: ‘workers’
[08:29:50.279]   - Field: ‘packages’
[08:29:50.279]   - Field: ‘gc’
[08:29:50.279]   - Field: ‘conditions’
[08:29:50.279]   - Field: ‘persistent’
[08:29:50.279]   - Field: ‘expr’
[08:29:50.279]   - Field: ‘uuid’
[08:29:50.279]   - Field: ‘seed’
[08:29:50.279]   - Field: ‘version’
[08:29:50.279]   - Field: ‘result’
[08:29:50.280]   - Field: ‘asynchronous’
[08:29:50.280]   - Field: ‘calls’
[08:29:50.280]   - Field: ‘globals’
[08:29:50.280]   - Field: ‘stdout’
[08:29:50.280]   - Field: ‘earlySignal’
[08:29:50.280]   - Field: ‘lazy’
[08:29:50.280]   - Field: ‘state’
[08:29:50.280] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.280] - Launch lazy future ...
[08:29:50.281] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.281] Packages needed by future strategies (n = 0): <none>
[08:29:50.282] {
[08:29:50.282]     {
[08:29:50.282]         {
[08:29:50.282]             ...future.startTime <- base::Sys.time()
[08:29:50.282]             {
[08:29:50.282]                 {
[08:29:50.282]                   {
[08:29:50.282]                     {
[08:29:50.282]                       {
[08:29:50.282]                         base::local({
[08:29:50.282]                           has_future <- base::requireNamespace("future", 
[08:29:50.282]                             quietly = TRUE)
[08:29:50.282]                           if (has_future) {
[08:29:50.282]                             ns <- base::getNamespace("future")
[08:29:50.282]                             version <- ns[[".package"]][["version"]]
[08:29:50.282]                             if (is.null(version)) 
[08:29:50.282]                               version <- utils::packageVersion("future")
[08:29:50.282]                           }
[08:29:50.282]                           else {
[08:29:50.282]                             version <- NULL
[08:29:50.282]                           }
[08:29:50.282]                           if (!has_future || version < "1.8.0") {
[08:29:50.282]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.282]                               "", base::R.version$version.string), 
[08:29:50.282]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.282]                                 base::R.version$platform, 8 * 
[08:29:50.282]                                   base::.Machine$sizeof.pointer), 
[08:29:50.282]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.282]                                 "release", "version")], collapse = " "), 
[08:29:50.282]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.282]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.282]                               info)
[08:29:50.282]                             info <- base::paste(info, collapse = "; ")
[08:29:50.282]                             if (!has_future) {
[08:29:50.282]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.282]                                 info)
[08:29:50.282]                             }
[08:29:50.282]                             else {
[08:29:50.282]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.282]                                 info, version)
[08:29:50.282]                             }
[08:29:50.282]                             base::stop(msg)
[08:29:50.282]                           }
[08:29:50.282]                         })
[08:29:50.282]                       }
[08:29:50.282]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.282]                       base::options(mc.cores = 1L)
[08:29:50.282]                     }
[08:29:50.282]                     base::local({
[08:29:50.282]                       for (pkg in "utils") {
[08:29:50.282]                         base::loadNamespace(pkg)
[08:29:50.282]                         base::library(pkg, character.only = TRUE)
[08:29:50.282]                       }
[08:29:50.282]                     })
[08:29:50.282]                   }
[08:29:50.282]                   ...future.strategy.old <- future::plan("list")
[08:29:50.282]                   options(future.plan = NULL)
[08:29:50.282]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.282]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.282]                 }
[08:29:50.282]                 ...future.workdir <- getwd()
[08:29:50.282]             }
[08:29:50.282]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.282]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.282]         }
[08:29:50.282]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.282]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.282]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.282]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.282]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.282]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.282]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.282]             base::names(...future.oldOptions))
[08:29:50.282]     }
[08:29:50.282]     if (FALSE) {
[08:29:50.282]     }
[08:29:50.282]     else {
[08:29:50.282]         if (FALSE) {
[08:29:50.282]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.282]                 open = "w")
[08:29:50.282]         }
[08:29:50.282]         else {
[08:29:50.282]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.282]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.282]         }
[08:29:50.282]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.282]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.282]             base::sink(type = "output", split = FALSE)
[08:29:50.282]             base::close(...future.stdout)
[08:29:50.282]         }, add = TRUE)
[08:29:50.282]     }
[08:29:50.282]     ...future.frame <- base::sys.nframe()
[08:29:50.282]     ...future.conditions <- base::list()
[08:29:50.282]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.282]     if (FALSE) {
[08:29:50.282]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.282]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.282]     }
[08:29:50.282]     ...future.result <- base::tryCatch({
[08:29:50.282]         base::withCallingHandlers({
[08:29:50.282]             ...future.value <- base::withVisible(base::local({
[08:29:50.282]                 ...future.makeSendCondition <- base::local({
[08:29:50.282]                   sendCondition <- NULL
[08:29:50.282]                   function(frame = 1L) {
[08:29:50.282]                     if (is.function(sendCondition)) 
[08:29:50.282]                       return(sendCondition)
[08:29:50.282]                     ns <- getNamespace("parallel")
[08:29:50.282]                     if (exists("sendData", mode = "function", 
[08:29:50.282]                       envir = ns)) {
[08:29:50.282]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.282]                         envir = ns)
[08:29:50.282]                       envir <- sys.frame(frame)
[08:29:50.282]                       master <- NULL
[08:29:50.282]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.282]                         !identical(envir, emptyenv())) {
[08:29:50.282]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.282]                           inherits = FALSE)) {
[08:29:50.282]                           master <- get("master", mode = "list", 
[08:29:50.282]                             envir = envir, inherits = FALSE)
[08:29:50.282]                           if (inherits(master, c("SOCKnode", 
[08:29:50.282]                             "SOCK0node"))) {
[08:29:50.282]                             sendCondition <<- function(cond) {
[08:29:50.282]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.282]                                 success = TRUE)
[08:29:50.282]                               parallel_sendData(master, data)
[08:29:50.282]                             }
[08:29:50.282]                             return(sendCondition)
[08:29:50.282]                           }
[08:29:50.282]                         }
[08:29:50.282]                         frame <- frame + 1L
[08:29:50.282]                         envir <- sys.frame(frame)
[08:29:50.282]                       }
[08:29:50.282]                     }
[08:29:50.282]                     sendCondition <<- function(cond) NULL
[08:29:50.282]                   }
[08:29:50.282]                 })
[08:29:50.282]                 withCallingHandlers({
[08:29:50.282]                   {
[08:29:50.282]                     print(1:50)
[08:29:50.282]                     str(1:50)
[08:29:50.282]                     cat(letters, sep = "-")
[08:29:50.282]                     cat(1:6, collapse = "\n")
[08:29:50.282]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.282]                     42L
[08:29:50.282]                   }
[08:29:50.282]                 }, immediateCondition = function(cond) {
[08:29:50.282]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.282]                   sendCondition(cond)
[08:29:50.282]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.282]                   {
[08:29:50.282]                     inherits <- base::inherits
[08:29:50.282]                     invokeRestart <- base::invokeRestart
[08:29:50.282]                     is.null <- base::is.null
[08:29:50.282]                     muffled <- FALSE
[08:29:50.282]                     if (inherits(cond, "message")) {
[08:29:50.282]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.282]                       if (muffled) 
[08:29:50.282]                         invokeRestart("muffleMessage")
[08:29:50.282]                     }
[08:29:50.282]                     else if (inherits(cond, "warning")) {
[08:29:50.282]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.282]                       if (muffled) 
[08:29:50.282]                         invokeRestart("muffleWarning")
[08:29:50.282]                     }
[08:29:50.282]                     else if (inherits(cond, "condition")) {
[08:29:50.282]                       if (!is.null(pattern)) {
[08:29:50.282]                         computeRestarts <- base::computeRestarts
[08:29:50.282]                         grepl <- base::grepl
[08:29:50.282]                         restarts <- computeRestarts(cond)
[08:29:50.282]                         for (restart in restarts) {
[08:29:50.282]                           name <- restart$name
[08:29:50.282]                           if (is.null(name)) 
[08:29:50.282]                             next
[08:29:50.282]                           if (!grepl(pattern, name)) 
[08:29:50.282]                             next
[08:29:50.282]                           invokeRestart(restart)
[08:29:50.282]                           muffled <- TRUE
[08:29:50.282]                           break
[08:29:50.282]                         }
[08:29:50.282]                       }
[08:29:50.282]                     }
[08:29:50.282]                     invisible(muffled)
[08:29:50.282]                   }
[08:29:50.282]                   muffleCondition(cond)
[08:29:50.282]                 })
[08:29:50.282]             }))
[08:29:50.282]             future::FutureResult(value = ...future.value$value, 
[08:29:50.282]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.282]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.282]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.282]                     ...future.globalenv.names))
[08:29:50.282]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.282]         }, condition = base::local({
[08:29:50.282]             c <- base::c
[08:29:50.282]             inherits <- base::inherits
[08:29:50.282]             invokeRestart <- base::invokeRestart
[08:29:50.282]             length <- base::length
[08:29:50.282]             list <- base::list
[08:29:50.282]             seq.int <- base::seq.int
[08:29:50.282]             signalCondition <- base::signalCondition
[08:29:50.282]             sys.calls <- base::sys.calls
[08:29:50.282]             `[[` <- base::`[[`
[08:29:50.282]             `+` <- base::`+`
[08:29:50.282]             `<<-` <- base::`<<-`
[08:29:50.282]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.282]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.282]                   3L)]
[08:29:50.282]             }
[08:29:50.282]             function(cond) {
[08:29:50.282]                 is_error <- inherits(cond, "error")
[08:29:50.282]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.282]                   NULL)
[08:29:50.282]                 if (is_error) {
[08:29:50.282]                   sessionInformation <- function() {
[08:29:50.282]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.282]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.282]                       search = base::search(), system = base::Sys.info())
[08:29:50.282]                   }
[08:29:50.282]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.282]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.282]                     cond$call), session = sessionInformation(), 
[08:29:50.282]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.282]                   signalCondition(cond)
[08:29:50.282]                 }
[08:29:50.282]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.282]                 "immediateCondition"))) {
[08:29:50.282]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.282]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.282]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.282]                   if (TRUE && !signal) {
[08:29:50.282]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.282]                     {
[08:29:50.282]                       inherits <- base::inherits
[08:29:50.282]                       invokeRestart <- base::invokeRestart
[08:29:50.282]                       is.null <- base::is.null
[08:29:50.282]                       muffled <- FALSE
[08:29:50.282]                       if (inherits(cond, "message")) {
[08:29:50.282]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.282]                         if (muffled) 
[08:29:50.282]                           invokeRestart("muffleMessage")
[08:29:50.282]                       }
[08:29:50.282]                       else if (inherits(cond, "warning")) {
[08:29:50.282]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.282]                         if (muffled) 
[08:29:50.282]                           invokeRestart("muffleWarning")
[08:29:50.282]                       }
[08:29:50.282]                       else if (inherits(cond, "condition")) {
[08:29:50.282]                         if (!is.null(pattern)) {
[08:29:50.282]                           computeRestarts <- base::computeRestarts
[08:29:50.282]                           grepl <- base::grepl
[08:29:50.282]                           restarts <- computeRestarts(cond)
[08:29:50.282]                           for (restart in restarts) {
[08:29:50.282]                             name <- restart$name
[08:29:50.282]                             if (is.null(name)) 
[08:29:50.282]                               next
[08:29:50.282]                             if (!grepl(pattern, name)) 
[08:29:50.282]                               next
[08:29:50.282]                             invokeRestart(restart)
[08:29:50.282]                             muffled <- TRUE
[08:29:50.282]                             break
[08:29:50.282]                           }
[08:29:50.282]                         }
[08:29:50.282]                       }
[08:29:50.282]                       invisible(muffled)
[08:29:50.282]                     }
[08:29:50.282]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.282]                   }
[08:29:50.282]                 }
[08:29:50.282]                 else {
[08:29:50.282]                   if (TRUE) {
[08:29:50.282]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.282]                     {
[08:29:50.282]                       inherits <- base::inherits
[08:29:50.282]                       invokeRestart <- base::invokeRestart
[08:29:50.282]                       is.null <- base::is.null
[08:29:50.282]                       muffled <- FALSE
[08:29:50.282]                       if (inherits(cond, "message")) {
[08:29:50.282]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.282]                         if (muffled) 
[08:29:50.282]                           invokeRestart("muffleMessage")
[08:29:50.282]                       }
[08:29:50.282]                       else if (inherits(cond, "warning")) {
[08:29:50.282]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.282]                         if (muffled) 
[08:29:50.282]                           invokeRestart("muffleWarning")
[08:29:50.282]                       }
[08:29:50.282]                       else if (inherits(cond, "condition")) {
[08:29:50.282]                         if (!is.null(pattern)) {
[08:29:50.282]                           computeRestarts <- base::computeRestarts
[08:29:50.282]                           grepl <- base::grepl
[08:29:50.282]                           restarts <- computeRestarts(cond)
[08:29:50.282]                           for (restart in restarts) {
[08:29:50.282]                             name <- restart$name
[08:29:50.282]                             if (is.null(name)) 
[08:29:50.282]                               next
[08:29:50.282]                             if (!grepl(pattern, name)) 
[08:29:50.282]                               next
[08:29:50.282]                             invokeRestart(restart)
[08:29:50.282]                             muffled <- TRUE
[08:29:50.282]                             break
[08:29:50.282]                           }
[08:29:50.282]                         }
[08:29:50.282]                       }
[08:29:50.282]                       invisible(muffled)
[08:29:50.282]                     }
[08:29:50.282]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.282]                   }
[08:29:50.282]                 }
[08:29:50.282]             }
[08:29:50.282]         }))
[08:29:50.282]     }, error = function(ex) {
[08:29:50.282]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.282]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.282]                 ...future.rng), started = ...future.startTime, 
[08:29:50.282]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.282]             version = "1.8"), class = "FutureResult")
[08:29:50.282]     }, finally = {
[08:29:50.282]         if (!identical(...future.workdir, getwd())) 
[08:29:50.282]             setwd(...future.workdir)
[08:29:50.282]         {
[08:29:50.282]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.282]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.282]             }
[08:29:50.282]             base::options(...future.oldOptions)
[08:29:50.282]             if (.Platform$OS.type == "windows") {
[08:29:50.282]                 old_names <- names(...future.oldEnvVars)
[08:29:50.282]                 envs <- base::Sys.getenv()
[08:29:50.282]                 names <- names(envs)
[08:29:50.282]                 common <- intersect(names, old_names)
[08:29:50.282]                 added <- setdiff(names, old_names)
[08:29:50.282]                 removed <- setdiff(old_names, names)
[08:29:50.282]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.282]                   envs[common]]
[08:29:50.282]                 NAMES <- toupper(changed)
[08:29:50.282]                 args <- list()
[08:29:50.282]                 for (kk in seq_along(NAMES)) {
[08:29:50.282]                   name <- changed[[kk]]
[08:29:50.282]                   NAME <- NAMES[[kk]]
[08:29:50.282]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.282]                     next
[08:29:50.282]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.282]                 }
[08:29:50.282]                 NAMES <- toupper(added)
[08:29:50.282]                 for (kk in seq_along(NAMES)) {
[08:29:50.282]                   name <- added[[kk]]
[08:29:50.282]                   NAME <- NAMES[[kk]]
[08:29:50.282]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.282]                     next
[08:29:50.282]                   args[[name]] <- ""
[08:29:50.282]                 }
[08:29:50.282]                 NAMES <- toupper(removed)
[08:29:50.282]                 for (kk in seq_along(NAMES)) {
[08:29:50.282]                   name <- removed[[kk]]
[08:29:50.282]                   NAME <- NAMES[[kk]]
[08:29:50.282]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.282]                     next
[08:29:50.282]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.282]                 }
[08:29:50.282]                 if (length(args) > 0) 
[08:29:50.282]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.282]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.282]             }
[08:29:50.282]             else {
[08:29:50.282]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.282]             }
[08:29:50.282]             {
[08:29:50.282]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.282]                   0L) {
[08:29:50.282]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.282]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.282]                   base::options(opts)
[08:29:50.282]                 }
[08:29:50.282]                 {
[08:29:50.282]                   {
[08:29:50.282]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.282]                     NULL
[08:29:50.282]                   }
[08:29:50.282]                   options(future.plan = NULL)
[08:29:50.282]                   if (is.na(NA_character_)) 
[08:29:50.282]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.282]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.282]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.282]                     .init = FALSE)
[08:29:50.282]                 }
[08:29:50.282]             }
[08:29:50.282]         }
[08:29:50.282]     })
[08:29:50.282]     if (TRUE) {
[08:29:50.282]         base::sink(type = "output", split = FALSE)
[08:29:50.282]         if (FALSE) {
[08:29:50.282]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.282]         }
[08:29:50.282]         else {
[08:29:50.282]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.282]         }
[08:29:50.282]         base::close(...future.stdout)
[08:29:50.282]         ...future.stdout <- NULL
[08:29:50.282]     }
[08:29:50.282]     ...future.result$conditions <- ...future.conditions
[08:29:50.282]     ...future.result$finished <- base::Sys.time()
[08:29:50.282]     ...future.result
[08:29:50.282] }
[08:29:50.285] MultisessionFuture started
[08:29:50.286] - Launch lazy future ... done
[08:29:50.286] run() for ‘MultisessionFuture’ ... done
[08:29:50.286] result() for ClusterFuture ...
[08:29:50.286] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.286] - Validating connection of MultisessionFuture
[08:29:50.328] - received message: FutureResult
[08:29:50.328] - Received FutureResult
[08:29:50.328] - Erased future from FutureRegistry
[08:29:50.329] result() for ClusterFuture ...
[08:29:50.329] - result already collected: FutureResult
[08:29:50.329] result() for ClusterFuture ... done
[08:29:50.329] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.331] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ session_uuid: chr "80408dad-174e-9062-8845-63af4fba1b75"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85088
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:50.338] result() for ClusterFuture ...
[08:29:50.338] - result already collected: FutureResult
[08:29:50.338] result() for ClusterFuture ... done
[08:29:50.339] result() for ClusterFuture ...
[08:29:50.339] - result already collected: FutureResult
[08:29:50.339] result() for ClusterFuture ... done
[08:29:50.339] getGlobalsAndPackages() ...
[08:29:50.339] Searching for globals...
[08:29:50.342] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.342] Searching for globals ... DONE
[08:29:50.342] Resolving globals: FALSE
[08:29:50.343] 
[08:29:50.343] - packages: [1] ‘utils’
[08:29:50.343] getGlobalsAndPackages() ... DONE
[08:29:50.343] run() for ‘Future’ ...
[08:29:50.343] - state: ‘created’
[08:29:50.343] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.357] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.357] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.357]   - Field: ‘node’
[08:29:50.357]   - Field: ‘label’
[08:29:50.357]   - Field: ‘local’
[08:29:50.357]   - Field: ‘owner’
[08:29:50.357]   - Field: ‘envir’
[08:29:50.358]   - Field: ‘workers’
[08:29:50.358]   - Field: ‘packages’
[08:29:50.358]   - Field: ‘gc’
[08:29:50.358]   - Field: ‘conditions’
[08:29:50.358]   - Field: ‘persistent’
[08:29:50.358]   - Field: ‘expr’
[08:29:50.358]   - Field: ‘uuid’
[08:29:50.358]   - Field: ‘seed’
[08:29:50.358]   - Field: ‘version’
[08:29:50.358]   - Field: ‘result’
[08:29:50.358]   - Field: ‘asynchronous’
[08:29:50.358]   - Field: ‘calls’
[08:29:50.359]   - Field: ‘globals’
[08:29:50.359]   - Field: ‘stdout’
[08:29:50.359]   - Field: ‘earlySignal’
[08:29:50.359]   - Field: ‘lazy’
[08:29:50.359]   - Field: ‘state’
[08:29:50.359] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.359] - Launch lazy future ...
[08:29:50.359] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.359] Packages needed by future strategies (n = 0): <none>
[08:29:50.360] {
[08:29:50.360]     {
[08:29:50.360]         {
[08:29:50.360]             ...future.startTime <- base::Sys.time()
[08:29:50.360]             {
[08:29:50.360]                 {
[08:29:50.360]                   {
[08:29:50.360]                     {
[08:29:50.360]                       {
[08:29:50.360]                         base::local({
[08:29:50.360]                           has_future <- base::requireNamespace("future", 
[08:29:50.360]                             quietly = TRUE)
[08:29:50.360]                           if (has_future) {
[08:29:50.360]                             ns <- base::getNamespace("future")
[08:29:50.360]                             version <- ns[[".package"]][["version"]]
[08:29:50.360]                             if (is.null(version)) 
[08:29:50.360]                               version <- utils::packageVersion("future")
[08:29:50.360]                           }
[08:29:50.360]                           else {
[08:29:50.360]                             version <- NULL
[08:29:50.360]                           }
[08:29:50.360]                           if (!has_future || version < "1.8.0") {
[08:29:50.360]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.360]                               "", base::R.version$version.string), 
[08:29:50.360]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.360]                                 base::R.version$platform, 8 * 
[08:29:50.360]                                   base::.Machine$sizeof.pointer), 
[08:29:50.360]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.360]                                 "release", "version")], collapse = " "), 
[08:29:50.360]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.360]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.360]                               info)
[08:29:50.360]                             info <- base::paste(info, collapse = "; ")
[08:29:50.360]                             if (!has_future) {
[08:29:50.360]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.360]                                 info)
[08:29:50.360]                             }
[08:29:50.360]                             else {
[08:29:50.360]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.360]                                 info, version)
[08:29:50.360]                             }
[08:29:50.360]                             base::stop(msg)
[08:29:50.360]                           }
[08:29:50.360]                         })
[08:29:50.360]                       }
[08:29:50.360]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.360]                       base::options(mc.cores = 1L)
[08:29:50.360]                     }
[08:29:50.360]                     base::local({
[08:29:50.360]                       for (pkg in "utils") {
[08:29:50.360]                         base::loadNamespace(pkg)
[08:29:50.360]                         base::library(pkg, character.only = TRUE)
[08:29:50.360]                       }
[08:29:50.360]                     })
[08:29:50.360]                   }
[08:29:50.360]                   ...future.strategy.old <- future::plan("list")
[08:29:50.360]                   options(future.plan = NULL)
[08:29:50.360]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.360]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.360]                 }
[08:29:50.360]                 ...future.workdir <- getwd()
[08:29:50.360]             }
[08:29:50.360]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.360]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.360]         }
[08:29:50.360]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.360]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.360]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.360]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.360]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.360]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.360]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.360]             base::names(...future.oldOptions))
[08:29:50.360]     }
[08:29:50.360]     if (FALSE) {
[08:29:50.360]     }
[08:29:50.360]     else {
[08:29:50.360]         if (FALSE) {
[08:29:50.360]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.360]                 open = "w")
[08:29:50.360]         }
[08:29:50.360]         else {
[08:29:50.360]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.360]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.360]         }
[08:29:50.360]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.360]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.360]             base::sink(type = "output", split = FALSE)
[08:29:50.360]             base::close(...future.stdout)
[08:29:50.360]         }, add = TRUE)
[08:29:50.360]     }
[08:29:50.360]     ...future.frame <- base::sys.nframe()
[08:29:50.360]     ...future.conditions <- base::list()
[08:29:50.360]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.360]     if (FALSE) {
[08:29:50.360]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.360]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.360]     }
[08:29:50.360]     ...future.result <- base::tryCatch({
[08:29:50.360]         base::withCallingHandlers({
[08:29:50.360]             ...future.value <- base::withVisible(base::local({
[08:29:50.360]                 ...future.makeSendCondition <- base::local({
[08:29:50.360]                   sendCondition <- NULL
[08:29:50.360]                   function(frame = 1L) {
[08:29:50.360]                     if (is.function(sendCondition)) 
[08:29:50.360]                       return(sendCondition)
[08:29:50.360]                     ns <- getNamespace("parallel")
[08:29:50.360]                     if (exists("sendData", mode = "function", 
[08:29:50.360]                       envir = ns)) {
[08:29:50.360]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.360]                         envir = ns)
[08:29:50.360]                       envir <- sys.frame(frame)
[08:29:50.360]                       master <- NULL
[08:29:50.360]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.360]                         !identical(envir, emptyenv())) {
[08:29:50.360]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.360]                           inherits = FALSE)) {
[08:29:50.360]                           master <- get("master", mode = "list", 
[08:29:50.360]                             envir = envir, inherits = FALSE)
[08:29:50.360]                           if (inherits(master, c("SOCKnode", 
[08:29:50.360]                             "SOCK0node"))) {
[08:29:50.360]                             sendCondition <<- function(cond) {
[08:29:50.360]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.360]                                 success = TRUE)
[08:29:50.360]                               parallel_sendData(master, data)
[08:29:50.360]                             }
[08:29:50.360]                             return(sendCondition)
[08:29:50.360]                           }
[08:29:50.360]                         }
[08:29:50.360]                         frame <- frame + 1L
[08:29:50.360]                         envir <- sys.frame(frame)
[08:29:50.360]                       }
[08:29:50.360]                     }
[08:29:50.360]                     sendCondition <<- function(cond) NULL
[08:29:50.360]                   }
[08:29:50.360]                 })
[08:29:50.360]                 withCallingHandlers({
[08:29:50.360]                   {
[08:29:50.360]                     print(1:50)
[08:29:50.360]                     str(1:50)
[08:29:50.360]                     cat(letters, sep = "-")
[08:29:50.360]                     cat(1:6, collapse = "\n")
[08:29:50.360]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.360]                     42L
[08:29:50.360]                   }
[08:29:50.360]                 }, immediateCondition = function(cond) {
[08:29:50.360]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.360]                   sendCondition(cond)
[08:29:50.360]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.360]                   {
[08:29:50.360]                     inherits <- base::inherits
[08:29:50.360]                     invokeRestart <- base::invokeRestart
[08:29:50.360]                     is.null <- base::is.null
[08:29:50.360]                     muffled <- FALSE
[08:29:50.360]                     if (inherits(cond, "message")) {
[08:29:50.360]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.360]                       if (muffled) 
[08:29:50.360]                         invokeRestart("muffleMessage")
[08:29:50.360]                     }
[08:29:50.360]                     else if (inherits(cond, "warning")) {
[08:29:50.360]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.360]                       if (muffled) 
[08:29:50.360]                         invokeRestart("muffleWarning")
[08:29:50.360]                     }
[08:29:50.360]                     else if (inherits(cond, "condition")) {
[08:29:50.360]                       if (!is.null(pattern)) {
[08:29:50.360]                         computeRestarts <- base::computeRestarts
[08:29:50.360]                         grepl <- base::grepl
[08:29:50.360]                         restarts <- computeRestarts(cond)
[08:29:50.360]                         for (restart in restarts) {
[08:29:50.360]                           name <- restart$name
[08:29:50.360]                           if (is.null(name)) 
[08:29:50.360]                             next
[08:29:50.360]                           if (!grepl(pattern, name)) 
[08:29:50.360]                             next
[08:29:50.360]                           invokeRestart(restart)
[08:29:50.360]                           muffled <- TRUE
[08:29:50.360]                           break
[08:29:50.360]                         }
[08:29:50.360]                       }
[08:29:50.360]                     }
[08:29:50.360]                     invisible(muffled)
[08:29:50.360]                   }
[08:29:50.360]                   muffleCondition(cond)
[08:29:50.360]                 })
[08:29:50.360]             }))
[08:29:50.360]             future::FutureResult(value = ...future.value$value, 
[08:29:50.360]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.360]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.360]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.360]                     ...future.globalenv.names))
[08:29:50.360]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.360]         }, condition = base::local({
[08:29:50.360]             c <- base::c
[08:29:50.360]             inherits <- base::inherits
[08:29:50.360]             invokeRestart <- base::invokeRestart
[08:29:50.360]             length <- base::length
[08:29:50.360]             list <- base::list
[08:29:50.360]             seq.int <- base::seq.int
[08:29:50.360]             signalCondition <- base::signalCondition
[08:29:50.360]             sys.calls <- base::sys.calls
[08:29:50.360]             `[[` <- base::`[[`
[08:29:50.360]             `+` <- base::`+`
[08:29:50.360]             `<<-` <- base::`<<-`
[08:29:50.360]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.360]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.360]                   3L)]
[08:29:50.360]             }
[08:29:50.360]             function(cond) {
[08:29:50.360]                 is_error <- inherits(cond, "error")
[08:29:50.360]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.360]                   NULL)
[08:29:50.360]                 if (is_error) {
[08:29:50.360]                   sessionInformation <- function() {
[08:29:50.360]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.360]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.360]                       search = base::search(), system = base::Sys.info())
[08:29:50.360]                   }
[08:29:50.360]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.360]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.360]                     cond$call), session = sessionInformation(), 
[08:29:50.360]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.360]                   signalCondition(cond)
[08:29:50.360]                 }
[08:29:50.360]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.360]                 "immediateCondition"))) {
[08:29:50.360]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.360]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.360]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.360]                   if (TRUE && !signal) {
[08:29:50.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.360]                     {
[08:29:50.360]                       inherits <- base::inherits
[08:29:50.360]                       invokeRestart <- base::invokeRestart
[08:29:50.360]                       is.null <- base::is.null
[08:29:50.360]                       muffled <- FALSE
[08:29:50.360]                       if (inherits(cond, "message")) {
[08:29:50.360]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.360]                         if (muffled) 
[08:29:50.360]                           invokeRestart("muffleMessage")
[08:29:50.360]                       }
[08:29:50.360]                       else if (inherits(cond, "warning")) {
[08:29:50.360]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.360]                         if (muffled) 
[08:29:50.360]                           invokeRestart("muffleWarning")
[08:29:50.360]                       }
[08:29:50.360]                       else if (inherits(cond, "condition")) {
[08:29:50.360]                         if (!is.null(pattern)) {
[08:29:50.360]                           computeRestarts <- base::computeRestarts
[08:29:50.360]                           grepl <- base::grepl
[08:29:50.360]                           restarts <- computeRestarts(cond)
[08:29:50.360]                           for (restart in restarts) {
[08:29:50.360]                             name <- restart$name
[08:29:50.360]                             if (is.null(name)) 
[08:29:50.360]                               next
[08:29:50.360]                             if (!grepl(pattern, name)) 
[08:29:50.360]                               next
[08:29:50.360]                             invokeRestart(restart)
[08:29:50.360]                             muffled <- TRUE
[08:29:50.360]                             break
[08:29:50.360]                           }
[08:29:50.360]                         }
[08:29:50.360]                       }
[08:29:50.360]                       invisible(muffled)
[08:29:50.360]                     }
[08:29:50.360]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.360]                   }
[08:29:50.360]                 }
[08:29:50.360]                 else {
[08:29:50.360]                   if (TRUE) {
[08:29:50.360]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.360]                     {
[08:29:50.360]                       inherits <- base::inherits
[08:29:50.360]                       invokeRestart <- base::invokeRestart
[08:29:50.360]                       is.null <- base::is.null
[08:29:50.360]                       muffled <- FALSE
[08:29:50.360]                       if (inherits(cond, "message")) {
[08:29:50.360]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.360]                         if (muffled) 
[08:29:50.360]                           invokeRestart("muffleMessage")
[08:29:50.360]                       }
[08:29:50.360]                       else if (inherits(cond, "warning")) {
[08:29:50.360]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.360]                         if (muffled) 
[08:29:50.360]                           invokeRestart("muffleWarning")
[08:29:50.360]                       }
[08:29:50.360]                       else if (inherits(cond, "condition")) {
[08:29:50.360]                         if (!is.null(pattern)) {
[08:29:50.360]                           computeRestarts <- base::computeRestarts
[08:29:50.360]                           grepl <- base::grepl
[08:29:50.360]                           restarts <- computeRestarts(cond)
[08:29:50.360]                           for (restart in restarts) {
[08:29:50.360]                             name <- restart$name
[08:29:50.360]                             if (is.null(name)) 
[08:29:50.360]                               next
[08:29:50.360]                             if (!grepl(pattern, name)) 
[08:29:50.360]                               next
[08:29:50.360]                             invokeRestart(restart)
[08:29:50.360]                             muffled <- TRUE
[08:29:50.360]                             break
[08:29:50.360]                           }
[08:29:50.360]                         }
[08:29:50.360]                       }
[08:29:50.360]                       invisible(muffled)
[08:29:50.360]                     }
[08:29:50.360]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.360]                   }
[08:29:50.360]                 }
[08:29:50.360]             }
[08:29:50.360]         }))
[08:29:50.360]     }, error = function(ex) {
[08:29:50.360]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.360]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.360]                 ...future.rng), started = ...future.startTime, 
[08:29:50.360]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.360]             version = "1.8"), class = "FutureResult")
[08:29:50.360]     }, finally = {
[08:29:50.360]         if (!identical(...future.workdir, getwd())) 
[08:29:50.360]             setwd(...future.workdir)
[08:29:50.360]         {
[08:29:50.360]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.360]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.360]             }
[08:29:50.360]             base::options(...future.oldOptions)
[08:29:50.360]             if (.Platform$OS.type == "windows") {
[08:29:50.360]                 old_names <- names(...future.oldEnvVars)
[08:29:50.360]                 envs <- base::Sys.getenv()
[08:29:50.360]                 names <- names(envs)
[08:29:50.360]                 common <- intersect(names, old_names)
[08:29:50.360]                 added <- setdiff(names, old_names)
[08:29:50.360]                 removed <- setdiff(old_names, names)
[08:29:50.360]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.360]                   envs[common]]
[08:29:50.360]                 NAMES <- toupper(changed)
[08:29:50.360]                 args <- list()
[08:29:50.360]                 for (kk in seq_along(NAMES)) {
[08:29:50.360]                   name <- changed[[kk]]
[08:29:50.360]                   NAME <- NAMES[[kk]]
[08:29:50.360]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.360]                     next
[08:29:50.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.360]                 }
[08:29:50.360]                 NAMES <- toupper(added)
[08:29:50.360]                 for (kk in seq_along(NAMES)) {
[08:29:50.360]                   name <- added[[kk]]
[08:29:50.360]                   NAME <- NAMES[[kk]]
[08:29:50.360]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.360]                     next
[08:29:50.360]                   args[[name]] <- ""
[08:29:50.360]                 }
[08:29:50.360]                 NAMES <- toupper(removed)
[08:29:50.360]                 for (kk in seq_along(NAMES)) {
[08:29:50.360]                   name <- removed[[kk]]
[08:29:50.360]                   NAME <- NAMES[[kk]]
[08:29:50.360]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.360]                     next
[08:29:50.360]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.360]                 }
[08:29:50.360]                 if (length(args) > 0) 
[08:29:50.360]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.360]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.360]             }
[08:29:50.360]             else {
[08:29:50.360]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.360]             }
[08:29:50.360]             {
[08:29:50.360]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.360]                   0L) {
[08:29:50.360]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.360]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.360]                   base::options(opts)
[08:29:50.360]                 }
[08:29:50.360]                 {
[08:29:50.360]                   {
[08:29:50.360]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.360]                     NULL
[08:29:50.360]                   }
[08:29:50.360]                   options(future.plan = NULL)
[08:29:50.360]                   if (is.na(NA_character_)) 
[08:29:50.360]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.360]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.360]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.360]                     .init = FALSE)
[08:29:50.360]                 }
[08:29:50.360]             }
[08:29:50.360]         }
[08:29:50.360]     })
[08:29:50.360]     if (TRUE) {
[08:29:50.360]         base::sink(type = "output", split = FALSE)
[08:29:50.360]         if (FALSE) {
[08:29:50.360]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.360]         }
[08:29:50.360]         else {
[08:29:50.360]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.360]         }
[08:29:50.360]         base::close(...future.stdout)
[08:29:50.360]         ...future.stdout <- NULL
[08:29:50.360]     }
[08:29:50.360]     ...future.result$conditions <- ...future.conditions
[08:29:50.360]     ...future.result$finished <- base::Sys.time()
[08:29:50.360]     ...future.result
[08:29:50.360] }
[08:29:50.363] MultisessionFuture started
[08:29:50.363] - Launch lazy future ... done
[08:29:50.363] run() for ‘MultisessionFuture’ ... done
[08:29:50.363] result() for ClusterFuture ...
[08:29:50.364] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.364] - Validating connection of MultisessionFuture
[08:29:50.406] - received message: FutureResult
[08:29:50.406] - Received FutureResult
[08:29:50.406] - Erased future from FutureRegistry
[08:29:50.406] result() for ClusterFuture ...
[08:29:50.407] - result already collected: FutureResult
[08:29:50.407] result() for ClusterFuture ... done
[08:29:50.407] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.407] result() for ClusterFuture ... done
[08:29:50.407] result() for ClusterFuture ...
[08:29:50.407] - result already collected: FutureResult
[08:29:50.407] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:50.407] getGlobalsAndPackages() ...
[08:29:50.407] Searching for globals...
[08:29:50.408] - globals found: [1] ‘print’
[08:29:50.408] Searching for globals ... DONE
[08:29:50.408] Resolving globals: FALSE
[08:29:50.408] 
[08:29:50.408] 
[08:29:50.409] getGlobalsAndPackages() ... DONE
[08:29:50.409] run() for ‘Future’ ...
[08:29:50.409] - state: ‘created’
[08:29:50.409] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.423] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.423] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.423]   - Field: ‘node’
[08:29:50.423]   - Field: ‘label’
[08:29:50.423]   - Field: ‘local’
[08:29:50.424]   - Field: ‘owner’
[08:29:50.424]   - Field: ‘envir’
[08:29:50.424]   - Field: ‘workers’
[08:29:50.424]   - Field: ‘packages’
[08:29:50.424]   - Field: ‘gc’
[08:29:50.424]   - Field: ‘conditions’
[08:29:50.424]   - Field: ‘persistent’
[08:29:50.424]   - Field: ‘expr’
[08:29:50.424]   - Field: ‘uuid’
[08:29:50.424]   - Field: ‘seed’
[08:29:50.424]   - Field: ‘version’
[08:29:50.424]   - Field: ‘result’
[08:29:50.425]   - Field: ‘asynchronous’
[08:29:50.425]   - Field: ‘calls’
[08:29:50.425]   - Field: ‘globals’
[08:29:50.425]   - Field: ‘stdout’
[08:29:50.425]   - Field: ‘earlySignal’
[08:29:50.425]   - Field: ‘lazy’
[08:29:50.425]   - Field: ‘state’
[08:29:50.425] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.425] - Launch lazy future ...
[08:29:50.425] Packages needed by the future expression (n = 0): <none>
[08:29:50.426] Packages needed by future strategies (n = 0): <none>
[08:29:50.426] {
[08:29:50.426]     {
[08:29:50.426]         {
[08:29:50.426]             ...future.startTime <- base::Sys.time()
[08:29:50.426]             {
[08:29:50.426]                 {
[08:29:50.426]                   {
[08:29:50.426]                     {
[08:29:50.426]                       base::local({
[08:29:50.426]                         has_future <- base::requireNamespace("future", 
[08:29:50.426]                           quietly = TRUE)
[08:29:50.426]                         if (has_future) {
[08:29:50.426]                           ns <- base::getNamespace("future")
[08:29:50.426]                           version <- ns[[".package"]][["version"]]
[08:29:50.426]                           if (is.null(version)) 
[08:29:50.426]                             version <- utils::packageVersion("future")
[08:29:50.426]                         }
[08:29:50.426]                         else {
[08:29:50.426]                           version <- NULL
[08:29:50.426]                         }
[08:29:50.426]                         if (!has_future || version < "1.8.0") {
[08:29:50.426]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.426]                             "", base::R.version$version.string), 
[08:29:50.426]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:50.426]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:50.426]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.426]                               "release", "version")], collapse = " "), 
[08:29:50.426]                             hostname = base::Sys.info()[["nodename"]])
[08:29:50.426]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.426]                             info)
[08:29:50.426]                           info <- base::paste(info, collapse = "; ")
[08:29:50.426]                           if (!has_future) {
[08:29:50.426]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.426]                               info)
[08:29:50.426]                           }
[08:29:50.426]                           else {
[08:29:50.426]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.426]                               info, version)
[08:29:50.426]                           }
[08:29:50.426]                           base::stop(msg)
[08:29:50.426]                         }
[08:29:50.426]                       })
[08:29:50.426]                     }
[08:29:50.426]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.426]                     base::options(mc.cores = 1L)
[08:29:50.426]                   }
[08:29:50.426]                   ...future.strategy.old <- future::plan("list")
[08:29:50.426]                   options(future.plan = NULL)
[08:29:50.426]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.426]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.426]                 }
[08:29:50.426]                 ...future.workdir <- getwd()
[08:29:50.426]             }
[08:29:50.426]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.426]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.426]         }
[08:29:50.426]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.426]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.426]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.426]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.426]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.426]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.426]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.426]             base::names(...future.oldOptions))
[08:29:50.426]     }
[08:29:50.426]     if (FALSE) {
[08:29:50.426]     }
[08:29:50.426]     else {
[08:29:50.426]         if (TRUE) {
[08:29:50.426]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.426]                 open = "w")
[08:29:50.426]         }
[08:29:50.426]         else {
[08:29:50.426]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.426]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.426]         }
[08:29:50.426]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.426]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.426]             base::sink(type = "output", split = FALSE)
[08:29:50.426]             base::close(...future.stdout)
[08:29:50.426]         }, add = TRUE)
[08:29:50.426]     }
[08:29:50.426]     ...future.frame <- base::sys.nframe()
[08:29:50.426]     ...future.conditions <- base::list()
[08:29:50.426]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.426]     if (FALSE) {
[08:29:50.426]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.426]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.426]     }
[08:29:50.426]     ...future.result <- base::tryCatch({
[08:29:50.426]         base::withCallingHandlers({
[08:29:50.426]             ...future.value <- base::withVisible(base::local({
[08:29:50.426]                 ...future.makeSendCondition <- base::local({
[08:29:50.426]                   sendCondition <- NULL
[08:29:50.426]                   function(frame = 1L) {
[08:29:50.426]                     if (is.function(sendCondition)) 
[08:29:50.426]                       return(sendCondition)
[08:29:50.426]                     ns <- getNamespace("parallel")
[08:29:50.426]                     if (exists("sendData", mode = "function", 
[08:29:50.426]                       envir = ns)) {
[08:29:50.426]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.426]                         envir = ns)
[08:29:50.426]                       envir <- sys.frame(frame)
[08:29:50.426]                       master <- NULL
[08:29:50.426]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.426]                         !identical(envir, emptyenv())) {
[08:29:50.426]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.426]                           inherits = FALSE)) {
[08:29:50.426]                           master <- get("master", mode = "list", 
[08:29:50.426]                             envir = envir, inherits = FALSE)
[08:29:50.426]                           if (inherits(master, c("SOCKnode", 
[08:29:50.426]                             "SOCK0node"))) {
[08:29:50.426]                             sendCondition <<- function(cond) {
[08:29:50.426]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.426]                                 success = TRUE)
[08:29:50.426]                               parallel_sendData(master, data)
[08:29:50.426]                             }
[08:29:50.426]                             return(sendCondition)
[08:29:50.426]                           }
[08:29:50.426]                         }
[08:29:50.426]                         frame <- frame + 1L
[08:29:50.426]                         envir <- sys.frame(frame)
[08:29:50.426]                       }
[08:29:50.426]                     }
[08:29:50.426]                     sendCondition <<- function(cond) NULL
[08:29:50.426]                   }
[08:29:50.426]                 })
[08:29:50.426]                 withCallingHandlers({
[08:29:50.426]                   print(42)
[08:29:50.426]                 }, immediateCondition = function(cond) {
[08:29:50.426]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.426]                   sendCondition(cond)
[08:29:50.426]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.426]                   {
[08:29:50.426]                     inherits <- base::inherits
[08:29:50.426]                     invokeRestart <- base::invokeRestart
[08:29:50.426]                     is.null <- base::is.null
[08:29:50.426]                     muffled <- FALSE
[08:29:50.426]                     if (inherits(cond, "message")) {
[08:29:50.426]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.426]                       if (muffled) 
[08:29:50.426]                         invokeRestart("muffleMessage")
[08:29:50.426]                     }
[08:29:50.426]                     else if (inherits(cond, "warning")) {
[08:29:50.426]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.426]                       if (muffled) 
[08:29:50.426]                         invokeRestart("muffleWarning")
[08:29:50.426]                     }
[08:29:50.426]                     else if (inherits(cond, "condition")) {
[08:29:50.426]                       if (!is.null(pattern)) {
[08:29:50.426]                         computeRestarts <- base::computeRestarts
[08:29:50.426]                         grepl <- base::grepl
[08:29:50.426]                         restarts <- computeRestarts(cond)
[08:29:50.426]                         for (restart in restarts) {
[08:29:50.426]                           name <- restart$name
[08:29:50.426]                           if (is.null(name)) 
[08:29:50.426]                             next
[08:29:50.426]                           if (!grepl(pattern, name)) 
[08:29:50.426]                             next
[08:29:50.426]                           invokeRestart(restart)
[08:29:50.426]                           muffled <- TRUE
[08:29:50.426]                           break
[08:29:50.426]                         }
[08:29:50.426]                       }
[08:29:50.426]                     }
[08:29:50.426]                     invisible(muffled)
[08:29:50.426]                   }
[08:29:50.426]                   muffleCondition(cond)
[08:29:50.426]                 })
[08:29:50.426]             }))
[08:29:50.426]             future::FutureResult(value = ...future.value$value, 
[08:29:50.426]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.426]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.426]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.426]                     ...future.globalenv.names))
[08:29:50.426]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.426]         }, condition = base::local({
[08:29:50.426]             c <- base::c
[08:29:50.426]             inherits <- base::inherits
[08:29:50.426]             invokeRestart <- base::invokeRestart
[08:29:50.426]             length <- base::length
[08:29:50.426]             list <- base::list
[08:29:50.426]             seq.int <- base::seq.int
[08:29:50.426]             signalCondition <- base::signalCondition
[08:29:50.426]             sys.calls <- base::sys.calls
[08:29:50.426]             `[[` <- base::`[[`
[08:29:50.426]             `+` <- base::`+`
[08:29:50.426]             `<<-` <- base::`<<-`
[08:29:50.426]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.426]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.426]                   3L)]
[08:29:50.426]             }
[08:29:50.426]             function(cond) {
[08:29:50.426]                 is_error <- inherits(cond, "error")
[08:29:50.426]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.426]                   NULL)
[08:29:50.426]                 if (is_error) {
[08:29:50.426]                   sessionInformation <- function() {
[08:29:50.426]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.426]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.426]                       search = base::search(), system = base::Sys.info())
[08:29:50.426]                   }
[08:29:50.426]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.426]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.426]                     cond$call), session = sessionInformation(), 
[08:29:50.426]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.426]                   signalCondition(cond)
[08:29:50.426]                 }
[08:29:50.426]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.426]                 "immediateCondition"))) {
[08:29:50.426]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.426]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.426]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.426]                   if (TRUE && !signal) {
[08:29:50.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.426]                     {
[08:29:50.426]                       inherits <- base::inherits
[08:29:50.426]                       invokeRestart <- base::invokeRestart
[08:29:50.426]                       is.null <- base::is.null
[08:29:50.426]                       muffled <- FALSE
[08:29:50.426]                       if (inherits(cond, "message")) {
[08:29:50.426]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.426]                         if (muffled) 
[08:29:50.426]                           invokeRestart("muffleMessage")
[08:29:50.426]                       }
[08:29:50.426]                       else if (inherits(cond, "warning")) {
[08:29:50.426]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.426]                         if (muffled) 
[08:29:50.426]                           invokeRestart("muffleWarning")
[08:29:50.426]                       }
[08:29:50.426]                       else if (inherits(cond, "condition")) {
[08:29:50.426]                         if (!is.null(pattern)) {
[08:29:50.426]                           computeRestarts <- base::computeRestarts
[08:29:50.426]                           grepl <- base::grepl
[08:29:50.426]                           restarts <- computeRestarts(cond)
[08:29:50.426]                           for (restart in restarts) {
[08:29:50.426]                             name <- restart$name
[08:29:50.426]                             if (is.null(name)) 
[08:29:50.426]                               next
[08:29:50.426]                             if (!grepl(pattern, name)) 
[08:29:50.426]                               next
[08:29:50.426]                             invokeRestart(restart)
[08:29:50.426]                             muffled <- TRUE
[08:29:50.426]                             break
[08:29:50.426]                           }
[08:29:50.426]                         }
[08:29:50.426]                       }
[08:29:50.426]                       invisible(muffled)
[08:29:50.426]                     }
[08:29:50.426]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.426]                   }
[08:29:50.426]                 }
[08:29:50.426]                 else {
[08:29:50.426]                   if (TRUE) {
[08:29:50.426]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.426]                     {
[08:29:50.426]                       inherits <- base::inherits
[08:29:50.426]                       invokeRestart <- base::invokeRestart
[08:29:50.426]                       is.null <- base::is.null
[08:29:50.426]                       muffled <- FALSE
[08:29:50.426]                       if (inherits(cond, "message")) {
[08:29:50.426]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.426]                         if (muffled) 
[08:29:50.426]                           invokeRestart("muffleMessage")
[08:29:50.426]                       }
[08:29:50.426]                       else if (inherits(cond, "warning")) {
[08:29:50.426]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.426]                         if (muffled) 
[08:29:50.426]                           invokeRestart("muffleWarning")
[08:29:50.426]                       }
[08:29:50.426]                       else if (inherits(cond, "condition")) {
[08:29:50.426]                         if (!is.null(pattern)) {
[08:29:50.426]                           computeRestarts <- base::computeRestarts
[08:29:50.426]                           grepl <- base::grepl
[08:29:50.426]                           restarts <- computeRestarts(cond)
[08:29:50.426]                           for (restart in restarts) {
[08:29:50.426]                             name <- restart$name
[08:29:50.426]                             if (is.null(name)) 
[08:29:50.426]                               next
[08:29:50.426]                             if (!grepl(pattern, name)) 
[08:29:50.426]                               next
[08:29:50.426]                             invokeRestart(restart)
[08:29:50.426]                             muffled <- TRUE
[08:29:50.426]                             break
[08:29:50.426]                           }
[08:29:50.426]                         }
[08:29:50.426]                       }
[08:29:50.426]                       invisible(muffled)
[08:29:50.426]                     }
[08:29:50.426]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.426]                   }
[08:29:50.426]                 }
[08:29:50.426]             }
[08:29:50.426]         }))
[08:29:50.426]     }, error = function(ex) {
[08:29:50.426]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.426]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.426]                 ...future.rng), started = ...future.startTime, 
[08:29:50.426]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.426]             version = "1.8"), class = "FutureResult")
[08:29:50.426]     }, finally = {
[08:29:50.426]         if (!identical(...future.workdir, getwd())) 
[08:29:50.426]             setwd(...future.workdir)
[08:29:50.426]         {
[08:29:50.426]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.426]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.426]             }
[08:29:50.426]             base::options(...future.oldOptions)
[08:29:50.426]             if (.Platform$OS.type == "windows") {
[08:29:50.426]                 old_names <- names(...future.oldEnvVars)
[08:29:50.426]                 envs <- base::Sys.getenv()
[08:29:50.426]                 names <- names(envs)
[08:29:50.426]                 common <- intersect(names, old_names)
[08:29:50.426]                 added <- setdiff(names, old_names)
[08:29:50.426]                 removed <- setdiff(old_names, names)
[08:29:50.426]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.426]                   envs[common]]
[08:29:50.426]                 NAMES <- toupper(changed)
[08:29:50.426]                 args <- list()
[08:29:50.426]                 for (kk in seq_along(NAMES)) {
[08:29:50.426]                   name <- changed[[kk]]
[08:29:50.426]                   NAME <- NAMES[[kk]]
[08:29:50.426]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.426]                     next
[08:29:50.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.426]                 }
[08:29:50.426]                 NAMES <- toupper(added)
[08:29:50.426]                 for (kk in seq_along(NAMES)) {
[08:29:50.426]                   name <- added[[kk]]
[08:29:50.426]                   NAME <- NAMES[[kk]]
[08:29:50.426]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.426]                     next
[08:29:50.426]                   args[[name]] <- ""
[08:29:50.426]                 }
[08:29:50.426]                 NAMES <- toupper(removed)
[08:29:50.426]                 for (kk in seq_along(NAMES)) {
[08:29:50.426]                   name <- removed[[kk]]
[08:29:50.426]                   NAME <- NAMES[[kk]]
[08:29:50.426]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.426]                     next
[08:29:50.426]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.426]                 }
[08:29:50.426]                 if (length(args) > 0) 
[08:29:50.426]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.426]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.426]             }
[08:29:50.426]             else {
[08:29:50.426]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.426]             }
[08:29:50.426]             {
[08:29:50.426]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.426]                   0L) {
[08:29:50.426]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.426]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.426]                   base::options(opts)
[08:29:50.426]                 }
[08:29:50.426]                 {
[08:29:50.426]                   {
[08:29:50.426]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.426]                     NULL
[08:29:50.426]                   }
[08:29:50.426]                   options(future.plan = NULL)
[08:29:50.426]                   if (is.na(NA_character_)) 
[08:29:50.426]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.426]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.426]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.426]                     .init = FALSE)
[08:29:50.426]                 }
[08:29:50.426]             }
[08:29:50.426]         }
[08:29:50.426]     })
[08:29:50.426]     if (TRUE) {
[08:29:50.426]         base::sink(type = "output", split = FALSE)
[08:29:50.426]         if (TRUE) {
[08:29:50.426]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.426]         }
[08:29:50.426]         else {
[08:29:50.426]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.426]         }
[08:29:50.426]         base::close(...future.stdout)
[08:29:50.426]         ...future.stdout <- NULL
[08:29:50.426]     }
[08:29:50.426]     ...future.result$conditions <- ...future.conditions
[08:29:50.426]     ...future.result$finished <- base::Sys.time()
[08:29:50.426]     ...future.result
[08:29:50.426] }
[08:29:50.429] MultisessionFuture started
[08:29:50.429] - Launch lazy future ... done
[08:29:50.429] run() for ‘MultisessionFuture’ ... done
[08:29:50.429] result() for ClusterFuture ...
[08:29:50.429] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.430] - Validating connection of MultisessionFuture
[08:29:50.471] - received message: FutureResult
[08:29:50.471] - Received FutureResult
[08:29:50.471] - Erased future from FutureRegistry
[08:29:50.471] result() for ClusterFuture ...
[08:29:50.472] - result already collected: FutureResult
[08:29:50.472] result() for ClusterFuture ... done
[08:29:50.472] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.472] result() for ClusterFuture ... done
[08:29:50.472] result() for ClusterFuture ...
[08:29:50.472] - result already collected: FutureResult
[08:29:50.472] result() for ClusterFuture ... done
[08:29:50.472] result() for ClusterFuture ...
[08:29:50.472] - result already collected: FutureResult
[08:29:50.472] result() for ClusterFuture ... done
[1] 42
[08:29:50.472] result() for ClusterFuture ...
[08:29:50.472] - result already collected: FutureResult
[08:29:50.473] result() for ClusterFuture ... done
- stdout = NA
[08:29:50.473] getGlobalsAndPackages() ...
[08:29:50.473] Searching for globals...
[08:29:50.476] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.476] Searching for globals ... DONE
[08:29:50.476] Resolving globals: FALSE
[08:29:50.476] 
[08:29:50.476] - packages: [1] ‘utils’
[08:29:50.477] getGlobalsAndPackages() ... DONE
[08:29:50.477] run() for ‘Future’ ...
[08:29:50.477] - state: ‘created’
[08:29:50.477] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.491] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.491] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.491]   - Field: ‘node’
[08:29:50.491]   - Field: ‘label’
[08:29:50.491]   - Field: ‘local’
[08:29:50.491]   - Field: ‘owner’
[08:29:50.491]   - Field: ‘envir’
[08:29:50.492]   - Field: ‘workers’
[08:29:50.492]   - Field: ‘packages’
[08:29:50.492]   - Field: ‘gc’
[08:29:50.492]   - Field: ‘conditions’
[08:29:50.492]   - Field: ‘persistent’
[08:29:50.492]   - Field: ‘expr’
[08:29:50.492]   - Field: ‘uuid’
[08:29:50.492]   - Field: ‘seed’
[08:29:50.492]   - Field: ‘version’
[08:29:50.492]   - Field: ‘result’
[08:29:50.492]   - Field: ‘asynchronous’
[08:29:50.492]   - Field: ‘calls’
[08:29:50.493]   - Field: ‘globals’
[08:29:50.493]   - Field: ‘stdout’
[08:29:50.493]   - Field: ‘earlySignal’
[08:29:50.493]   - Field: ‘lazy’
[08:29:50.493]   - Field: ‘state’
[08:29:50.493] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.493] - Launch lazy future ...
[08:29:50.493] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.493] Packages needed by future strategies (n = 0): <none>
[08:29:50.494] {
[08:29:50.494]     {
[08:29:50.494]         {
[08:29:50.494]             ...future.startTime <- base::Sys.time()
[08:29:50.494]             {
[08:29:50.494]                 {
[08:29:50.494]                   {
[08:29:50.494]                     {
[08:29:50.494]                       {
[08:29:50.494]                         base::local({
[08:29:50.494]                           has_future <- base::requireNamespace("future", 
[08:29:50.494]                             quietly = TRUE)
[08:29:50.494]                           if (has_future) {
[08:29:50.494]                             ns <- base::getNamespace("future")
[08:29:50.494]                             version <- ns[[".package"]][["version"]]
[08:29:50.494]                             if (is.null(version)) 
[08:29:50.494]                               version <- utils::packageVersion("future")
[08:29:50.494]                           }
[08:29:50.494]                           else {
[08:29:50.494]                             version <- NULL
[08:29:50.494]                           }
[08:29:50.494]                           if (!has_future || version < "1.8.0") {
[08:29:50.494]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.494]                               "", base::R.version$version.string), 
[08:29:50.494]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.494]                                 base::R.version$platform, 8 * 
[08:29:50.494]                                   base::.Machine$sizeof.pointer), 
[08:29:50.494]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.494]                                 "release", "version")], collapse = " "), 
[08:29:50.494]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.494]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.494]                               info)
[08:29:50.494]                             info <- base::paste(info, collapse = "; ")
[08:29:50.494]                             if (!has_future) {
[08:29:50.494]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.494]                                 info)
[08:29:50.494]                             }
[08:29:50.494]                             else {
[08:29:50.494]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.494]                                 info, version)
[08:29:50.494]                             }
[08:29:50.494]                             base::stop(msg)
[08:29:50.494]                           }
[08:29:50.494]                         })
[08:29:50.494]                       }
[08:29:50.494]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.494]                       base::options(mc.cores = 1L)
[08:29:50.494]                     }
[08:29:50.494]                     base::local({
[08:29:50.494]                       for (pkg in "utils") {
[08:29:50.494]                         base::loadNamespace(pkg)
[08:29:50.494]                         base::library(pkg, character.only = TRUE)
[08:29:50.494]                       }
[08:29:50.494]                     })
[08:29:50.494]                   }
[08:29:50.494]                   ...future.strategy.old <- future::plan("list")
[08:29:50.494]                   options(future.plan = NULL)
[08:29:50.494]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.494]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.494]                 }
[08:29:50.494]                 ...future.workdir <- getwd()
[08:29:50.494]             }
[08:29:50.494]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.494]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.494]         }
[08:29:50.494]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.494]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.494]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.494]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.494]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.494]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.494]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.494]             base::names(...future.oldOptions))
[08:29:50.494]     }
[08:29:50.494]     if (TRUE) {
[08:29:50.494]     }
[08:29:50.494]     else {
[08:29:50.494]         if (NA) {
[08:29:50.494]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.494]                 open = "w")
[08:29:50.494]         }
[08:29:50.494]         else {
[08:29:50.494]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.494]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.494]         }
[08:29:50.494]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.494]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.494]             base::sink(type = "output", split = FALSE)
[08:29:50.494]             base::close(...future.stdout)
[08:29:50.494]         }, add = TRUE)
[08:29:50.494]     }
[08:29:50.494]     ...future.frame <- base::sys.nframe()
[08:29:50.494]     ...future.conditions <- base::list()
[08:29:50.494]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.494]     if (FALSE) {
[08:29:50.494]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.494]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.494]     }
[08:29:50.494]     ...future.result <- base::tryCatch({
[08:29:50.494]         base::withCallingHandlers({
[08:29:50.494]             ...future.value <- base::withVisible(base::local({
[08:29:50.494]                 ...future.makeSendCondition <- base::local({
[08:29:50.494]                   sendCondition <- NULL
[08:29:50.494]                   function(frame = 1L) {
[08:29:50.494]                     if (is.function(sendCondition)) 
[08:29:50.494]                       return(sendCondition)
[08:29:50.494]                     ns <- getNamespace("parallel")
[08:29:50.494]                     if (exists("sendData", mode = "function", 
[08:29:50.494]                       envir = ns)) {
[08:29:50.494]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.494]                         envir = ns)
[08:29:50.494]                       envir <- sys.frame(frame)
[08:29:50.494]                       master <- NULL
[08:29:50.494]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.494]                         !identical(envir, emptyenv())) {
[08:29:50.494]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.494]                           inherits = FALSE)) {
[08:29:50.494]                           master <- get("master", mode = "list", 
[08:29:50.494]                             envir = envir, inherits = FALSE)
[08:29:50.494]                           if (inherits(master, c("SOCKnode", 
[08:29:50.494]                             "SOCK0node"))) {
[08:29:50.494]                             sendCondition <<- function(cond) {
[08:29:50.494]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.494]                                 success = TRUE)
[08:29:50.494]                               parallel_sendData(master, data)
[08:29:50.494]                             }
[08:29:50.494]                             return(sendCondition)
[08:29:50.494]                           }
[08:29:50.494]                         }
[08:29:50.494]                         frame <- frame + 1L
[08:29:50.494]                         envir <- sys.frame(frame)
[08:29:50.494]                       }
[08:29:50.494]                     }
[08:29:50.494]                     sendCondition <<- function(cond) NULL
[08:29:50.494]                   }
[08:29:50.494]                 })
[08:29:50.494]                 withCallingHandlers({
[08:29:50.494]                   {
[08:29:50.494]                     print(1:50)
[08:29:50.494]                     str(1:50)
[08:29:50.494]                     cat(letters, sep = "-")
[08:29:50.494]                     cat(1:6, collapse = "\n")
[08:29:50.494]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.494]                     42L
[08:29:50.494]                   }
[08:29:50.494]                 }, immediateCondition = function(cond) {
[08:29:50.494]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.494]                   sendCondition(cond)
[08:29:50.494]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.494]                   {
[08:29:50.494]                     inherits <- base::inherits
[08:29:50.494]                     invokeRestart <- base::invokeRestart
[08:29:50.494]                     is.null <- base::is.null
[08:29:50.494]                     muffled <- FALSE
[08:29:50.494]                     if (inherits(cond, "message")) {
[08:29:50.494]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.494]                       if (muffled) 
[08:29:50.494]                         invokeRestart("muffleMessage")
[08:29:50.494]                     }
[08:29:50.494]                     else if (inherits(cond, "warning")) {
[08:29:50.494]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.494]                       if (muffled) 
[08:29:50.494]                         invokeRestart("muffleWarning")
[08:29:50.494]                     }
[08:29:50.494]                     else if (inherits(cond, "condition")) {
[08:29:50.494]                       if (!is.null(pattern)) {
[08:29:50.494]                         computeRestarts <- base::computeRestarts
[08:29:50.494]                         grepl <- base::grepl
[08:29:50.494]                         restarts <- computeRestarts(cond)
[08:29:50.494]                         for (restart in restarts) {
[08:29:50.494]                           name <- restart$name
[08:29:50.494]                           if (is.null(name)) 
[08:29:50.494]                             next
[08:29:50.494]                           if (!grepl(pattern, name)) 
[08:29:50.494]                             next
[08:29:50.494]                           invokeRestart(restart)
[08:29:50.494]                           muffled <- TRUE
[08:29:50.494]                           break
[08:29:50.494]                         }
[08:29:50.494]                       }
[08:29:50.494]                     }
[08:29:50.494]                     invisible(muffled)
[08:29:50.494]                   }
[08:29:50.494]                   muffleCondition(cond)
[08:29:50.494]                 })
[08:29:50.494]             }))
[08:29:50.494]             future::FutureResult(value = ...future.value$value, 
[08:29:50.494]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.494]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.494]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.494]                     ...future.globalenv.names))
[08:29:50.494]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.494]         }, condition = base::local({
[08:29:50.494]             c <- base::c
[08:29:50.494]             inherits <- base::inherits
[08:29:50.494]             invokeRestart <- base::invokeRestart
[08:29:50.494]             length <- base::length
[08:29:50.494]             list <- base::list
[08:29:50.494]             seq.int <- base::seq.int
[08:29:50.494]             signalCondition <- base::signalCondition
[08:29:50.494]             sys.calls <- base::sys.calls
[08:29:50.494]             `[[` <- base::`[[`
[08:29:50.494]             `+` <- base::`+`
[08:29:50.494]             `<<-` <- base::`<<-`
[08:29:50.494]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.494]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.494]                   3L)]
[08:29:50.494]             }
[08:29:50.494]             function(cond) {
[08:29:50.494]                 is_error <- inherits(cond, "error")
[08:29:50.494]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.494]                   NULL)
[08:29:50.494]                 if (is_error) {
[08:29:50.494]                   sessionInformation <- function() {
[08:29:50.494]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.494]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.494]                       search = base::search(), system = base::Sys.info())
[08:29:50.494]                   }
[08:29:50.494]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.494]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.494]                     cond$call), session = sessionInformation(), 
[08:29:50.494]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.494]                   signalCondition(cond)
[08:29:50.494]                 }
[08:29:50.494]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.494]                 "immediateCondition"))) {
[08:29:50.494]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.494]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.494]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.494]                   if (TRUE && !signal) {
[08:29:50.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.494]                     {
[08:29:50.494]                       inherits <- base::inherits
[08:29:50.494]                       invokeRestart <- base::invokeRestart
[08:29:50.494]                       is.null <- base::is.null
[08:29:50.494]                       muffled <- FALSE
[08:29:50.494]                       if (inherits(cond, "message")) {
[08:29:50.494]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.494]                         if (muffled) 
[08:29:50.494]                           invokeRestart("muffleMessage")
[08:29:50.494]                       }
[08:29:50.494]                       else if (inherits(cond, "warning")) {
[08:29:50.494]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.494]                         if (muffled) 
[08:29:50.494]                           invokeRestart("muffleWarning")
[08:29:50.494]                       }
[08:29:50.494]                       else if (inherits(cond, "condition")) {
[08:29:50.494]                         if (!is.null(pattern)) {
[08:29:50.494]                           computeRestarts <- base::computeRestarts
[08:29:50.494]                           grepl <- base::grepl
[08:29:50.494]                           restarts <- computeRestarts(cond)
[08:29:50.494]                           for (restart in restarts) {
[08:29:50.494]                             name <- restart$name
[08:29:50.494]                             if (is.null(name)) 
[08:29:50.494]                               next
[08:29:50.494]                             if (!grepl(pattern, name)) 
[08:29:50.494]                               next
[08:29:50.494]                             invokeRestart(restart)
[08:29:50.494]                             muffled <- TRUE
[08:29:50.494]                             break
[08:29:50.494]                           }
[08:29:50.494]                         }
[08:29:50.494]                       }
[08:29:50.494]                       invisible(muffled)
[08:29:50.494]                     }
[08:29:50.494]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.494]                   }
[08:29:50.494]                 }
[08:29:50.494]                 else {
[08:29:50.494]                   if (TRUE) {
[08:29:50.494]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.494]                     {
[08:29:50.494]                       inherits <- base::inherits
[08:29:50.494]                       invokeRestart <- base::invokeRestart
[08:29:50.494]                       is.null <- base::is.null
[08:29:50.494]                       muffled <- FALSE
[08:29:50.494]                       if (inherits(cond, "message")) {
[08:29:50.494]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.494]                         if (muffled) 
[08:29:50.494]                           invokeRestart("muffleMessage")
[08:29:50.494]                       }
[08:29:50.494]                       else if (inherits(cond, "warning")) {
[08:29:50.494]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.494]                         if (muffled) 
[08:29:50.494]                           invokeRestart("muffleWarning")
[08:29:50.494]                       }
[08:29:50.494]                       else if (inherits(cond, "condition")) {
[08:29:50.494]                         if (!is.null(pattern)) {
[08:29:50.494]                           computeRestarts <- base::computeRestarts
[08:29:50.494]                           grepl <- base::grepl
[08:29:50.494]                           restarts <- computeRestarts(cond)
[08:29:50.494]                           for (restart in restarts) {
[08:29:50.494]                             name <- restart$name
[08:29:50.494]                             if (is.null(name)) 
[08:29:50.494]                               next
[08:29:50.494]                             if (!grepl(pattern, name)) 
[08:29:50.494]                               next
[08:29:50.494]                             invokeRestart(restart)
[08:29:50.494]                             muffled <- TRUE
[08:29:50.494]                             break
[08:29:50.494]                           }
[08:29:50.494]                         }
[08:29:50.494]                       }
[08:29:50.494]                       invisible(muffled)
[08:29:50.494]                     }
[08:29:50.494]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.494]                   }
[08:29:50.494]                 }
[08:29:50.494]             }
[08:29:50.494]         }))
[08:29:50.494]     }, error = function(ex) {
[08:29:50.494]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.494]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.494]                 ...future.rng), started = ...future.startTime, 
[08:29:50.494]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.494]             version = "1.8"), class = "FutureResult")
[08:29:50.494]     }, finally = {
[08:29:50.494]         if (!identical(...future.workdir, getwd())) 
[08:29:50.494]             setwd(...future.workdir)
[08:29:50.494]         {
[08:29:50.494]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.494]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.494]             }
[08:29:50.494]             base::options(...future.oldOptions)
[08:29:50.494]             if (.Platform$OS.type == "windows") {
[08:29:50.494]                 old_names <- names(...future.oldEnvVars)
[08:29:50.494]                 envs <- base::Sys.getenv()
[08:29:50.494]                 names <- names(envs)
[08:29:50.494]                 common <- intersect(names, old_names)
[08:29:50.494]                 added <- setdiff(names, old_names)
[08:29:50.494]                 removed <- setdiff(old_names, names)
[08:29:50.494]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.494]                   envs[common]]
[08:29:50.494]                 NAMES <- toupper(changed)
[08:29:50.494]                 args <- list()
[08:29:50.494]                 for (kk in seq_along(NAMES)) {
[08:29:50.494]                   name <- changed[[kk]]
[08:29:50.494]                   NAME <- NAMES[[kk]]
[08:29:50.494]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.494]                     next
[08:29:50.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.494]                 }
[08:29:50.494]                 NAMES <- toupper(added)
[08:29:50.494]                 for (kk in seq_along(NAMES)) {
[08:29:50.494]                   name <- added[[kk]]
[08:29:50.494]                   NAME <- NAMES[[kk]]
[08:29:50.494]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.494]                     next
[08:29:50.494]                   args[[name]] <- ""
[08:29:50.494]                 }
[08:29:50.494]                 NAMES <- toupper(removed)
[08:29:50.494]                 for (kk in seq_along(NAMES)) {
[08:29:50.494]                   name <- removed[[kk]]
[08:29:50.494]                   NAME <- NAMES[[kk]]
[08:29:50.494]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.494]                     next
[08:29:50.494]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.494]                 }
[08:29:50.494]                 if (length(args) > 0) 
[08:29:50.494]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.494]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.494]             }
[08:29:50.494]             else {
[08:29:50.494]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.494]             }
[08:29:50.494]             {
[08:29:50.494]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.494]                   0L) {
[08:29:50.494]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.494]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.494]                   base::options(opts)
[08:29:50.494]                 }
[08:29:50.494]                 {
[08:29:50.494]                   {
[08:29:50.494]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.494]                     NULL
[08:29:50.494]                   }
[08:29:50.494]                   options(future.plan = NULL)
[08:29:50.494]                   if (is.na(NA_character_)) 
[08:29:50.494]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.494]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.494]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.494]                     .init = FALSE)
[08:29:50.494]                 }
[08:29:50.494]             }
[08:29:50.494]         }
[08:29:50.494]     })
[08:29:50.494]     if (FALSE) {
[08:29:50.494]         base::sink(type = "output", split = FALSE)
[08:29:50.494]         if (NA) {
[08:29:50.494]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.494]         }
[08:29:50.494]         else {
[08:29:50.494]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.494]         }
[08:29:50.494]         base::close(...future.stdout)
[08:29:50.494]         ...future.stdout <- NULL
[08:29:50.494]     }
[08:29:50.494]     ...future.result$conditions <- ...future.conditions
[08:29:50.494]     ...future.result$finished <- base::Sys.time()
[08:29:50.494]     ...future.result
[08:29:50.494] }
[08:29:50.497] MultisessionFuture started
[08:29:50.497] - Launch lazy future ... done
[08:29:50.497] run() for ‘MultisessionFuture’ ... done
[08:29:50.497] result() for ClusterFuture ...
[08:29:50.497] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.498] - Validating connection of MultisessionFuture
[08:29:50.540] - received message: FutureResult
[08:29:50.540] - Received FutureResult
[08:29:50.540] - Erased future from FutureRegistry
[08:29:50.540] result() for ClusterFuture ...
[08:29:50.540] - result already collected: FutureResult
[08:29:50.541] result() for ClusterFuture ... done
[08:29:50.541] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.541] result() for ClusterFuture ... done
List of 11
 $ value       : int 42
 $ visible     : logi TRUE
 $ stdout      : NULL
 $ conditions  : list()
 $ rng         : logi FALSE
 $ globalenv   : NULL
 $ started     : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ finished    : POSIXct[1:1], format: "2025-06-17 08:29:50"
 $ session_uuid: chr "80408dad-174e-9062-8845-63af4fba1b75"
  ..- attr(*, "source")=List of 5
  .. ..$ host  : Named chr "e9e776910d73"
  .. .. ..- attr(*, "names")= chr "HOSTNAME"
  .. ..$ info  : Named chr [1:8] "Linux" "6.11.0-1015-azure" "#15~24.04.1-Ubuntu SMP Thu May  1 02:52:08 UTC 2025" "e9e776910d73" ...
  .. .. ..- attr(*, "names")= chr [1:8] "sysname" "release" "version" "nodename" ...
  .. ..$ pid   : int 85088
  .. ..$ time  : POSIXct[1:1], format: "2025-06-17 08:29:49"
  .. ..$ random: int 2147483647
 $ r_info      :List of 4
  ..$ version      :Classes 'R_system_version', 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 4 3
  ..$ os           : chr "unix"
  ..$ os_name      : chr "Linux"
  ..$ captures_utf8: logi TRUE
 $ version     : chr "1.8"
 - attr(*, "class")= chr "FutureResult"
[08:29:50.548] result() for ClusterFuture ...
[08:29:50.548] - result already collected: FutureResult
[08:29:50.548] result() for ClusterFuture ... done
[08:29:50.548] result() for ClusterFuture ...
[08:29:50.548] - result already collected: FutureResult
[08:29:50.548] result() for ClusterFuture ... done
[08:29:50.549] getGlobalsAndPackages() ...
[08:29:50.549] Searching for globals...
[08:29:50.552] - globals found: [9] ‘{’, ‘print’, ‘:’, ‘str’, ‘cat’, ‘letters’, ‘write.table’, ‘[’, ‘::’
[08:29:50.552] Searching for globals ... DONE
[08:29:50.552] Resolving globals: FALSE
[08:29:50.552] 
[08:29:50.552] - packages: [1] ‘utils’
[08:29:50.553] getGlobalsAndPackages() ... DONE
[08:29:50.553] run() for ‘Future’ ...
[08:29:50.553] - state: ‘created’
[08:29:50.553] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.567] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.567] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.567]   - Field: ‘node’
[08:29:50.567]   - Field: ‘label’
[08:29:50.567]   - Field: ‘local’
[08:29:50.568]   - Field: ‘owner’
[08:29:50.568]   - Field: ‘envir’
[08:29:50.568]   - Field: ‘workers’
[08:29:50.568]   - Field: ‘packages’
[08:29:50.568]   - Field: ‘gc’
[08:29:50.568]   - Field: ‘conditions’
[08:29:50.568]   - Field: ‘persistent’
[08:29:50.568]   - Field: ‘expr’
[08:29:50.568]   - Field: ‘uuid’
[08:29:50.568]   - Field: ‘seed’
[08:29:50.568]   - Field: ‘version’
[08:29:50.568]   - Field: ‘result’
[08:29:50.569]   - Field: ‘asynchronous’
[08:29:50.569]   - Field: ‘calls’
[08:29:50.569]   - Field: ‘globals’
[08:29:50.569]   - Field: ‘stdout’
[08:29:50.569]   - Field: ‘earlySignal’
[08:29:50.569]   - Field: ‘lazy’
[08:29:50.569]   - Field: ‘state’
[08:29:50.569] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.569] - Launch lazy future ...
[08:29:50.570] Packages needed by the future expression (n = 1): ‘utils’
[08:29:50.570] Packages needed by future strategies (n = 0): <none>
[08:29:50.570] {
[08:29:50.570]     {
[08:29:50.570]         {
[08:29:50.570]             ...future.startTime <- base::Sys.time()
[08:29:50.570]             {
[08:29:50.570]                 {
[08:29:50.570]                   {
[08:29:50.570]                     {
[08:29:50.570]                       {
[08:29:50.570]                         base::local({
[08:29:50.570]                           has_future <- base::requireNamespace("future", 
[08:29:50.570]                             quietly = TRUE)
[08:29:50.570]                           if (has_future) {
[08:29:50.570]                             ns <- base::getNamespace("future")
[08:29:50.570]                             version <- ns[[".package"]][["version"]]
[08:29:50.570]                             if (is.null(version)) 
[08:29:50.570]                               version <- utils::packageVersion("future")
[08:29:50.570]                           }
[08:29:50.570]                           else {
[08:29:50.570]                             version <- NULL
[08:29:50.570]                           }
[08:29:50.570]                           if (!has_future || version < "1.8.0") {
[08:29:50.570]                             info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.570]                               "", base::R.version$version.string), 
[08:29:50.570]                               platform = base::sprintf("%s (%s-bit)", 
[08:29:50.570]                                 base::R.version$platform, 8 * 
[08:29:50.570]                                   base::.Machine$sizeof.pointer), 
[08:29:50.570]                               os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.570]                                 "release", "version")], collapse = " "), 
[08:29:50.570]                               hostname = base::Sys.info()[["nodename"]])
[08:29:50.570]                             info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.570]                               info)
[08:29:50.570]                             info <- base::paste(info, collapse = "; ")
[08:29:50.570]                             if (!has_future) {
[08:29:50.570]                               msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.570]                                 info)
[08:29:50.570]                             }
[08:29:50.570]                             else {
[08:29:50.570]                               msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.570]                                 info, version)
[08:29:50.570]                             }
[08:29:50.570]                             base::stop(msg)
[08:29:50.570]                           }
[08:29:50.570]                         })
[08:29:50.570]                       }
[08:29:50.570]                       ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.570]                       base::options(mc.cores = 1L)
[08:29:50.570]                     }
[08:29:50.570]                     base::local({
[08:29:50.570]                       for (pkg in "utils") {
[08:29:50.570]                         base::loadNamespace(pkg)
[08:29:50.570]                         base::library(pkg, character.only = TRUE)
[08:29:50.570]                       }
[08:29:50.570]                     })
[08:29:50.570]                   }
[08:29:50.570]                   ...future.strategy.old <- future::plan("list")
[08:29:50.570]                   options(future.plan = NULL)
[08:29:50.570]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.570]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.570]                 }
[08:29:50.570]                 ...future.workdir <- getwd()
[08:29:50.570]             }
[08:29:50.570]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.570]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.570]         }
[08:29:50.570]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.570]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.570]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.570]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.570]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.570]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.570]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.570]             base::names(...future.oldOptions))
[08:29:50.570]     }
[08:29:50.570]     if (TRUE) {
[08:29:50.570]     }
[08:29:50.570]     else {
[08:29:50.570]         if (NA) {
[08:29:50.570]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.570]                 open = "w")
[08:29:50.570]         }
[08:29:50.570]         else {
[08:29:50.570]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.570]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.570]         }
[08:29:50.570]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.570]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.570]             base::sink(type = "output", split = FALSE)
[08:29:50.570]             base::close(...future.stdout)
[08:29:50.570]         }, add = TRUE)
[08:29:50.570]     }
[08:29:50.570]     ...future.frame <- base::sys.nframe()
[08:29:50.570]     ...future.conditions <- base::list()
[08:29:50.570]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.570]     if (FALSE) {
[08:29:50.570]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.570]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.570]     }
[08:29:50.570]     ...future.result <- base::tryCatch({
[08:29:50.570]         base::withCallingHandlers({
[08:29:50.570]             ...future.value <- base::withVisible(base::local({
[08:29:50.570]                 ...future.makeSendCondition <- base::local({
[08:29:50.570]                   sendCondition <- NULL
[08:29:50.570]                   function(frame = 1L) {
[08:29:50.570]                     if (is.function(sendCondition)) 
[08:29:50.570]                       return(sendCondition)
[08:29:50.570]                     ns <- getNamespace("parallel")
[08:29:50.570]                     if (exists("sendData", mode = "function", 
[08:29:50.570]                       envir = ns)) {
[08:29:50.570]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.570]                         envir = ns)
[08:29:50.570]                       envir <- sys.frame(frame)
[08:29:50.570]                       master <- NULL
[08:29:50.570]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.570]                         !identical(envir, emptyenv())) {
[08:29:50.570]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.570]                           inherits = FALSE)) {
[08:29:50.570]                           master <- get("master", mode = "list", 
[08:29:50.570]                             envir = envir, inherits = FALSE)
[08:29:50.570]                           if (inherits(master, c("SOCKnode", 
[08:29:50.570]                             "SOCK0node"))) {
[08:29:50.570]                             sendCondition <<- function(cond) {
[08:29:50.570]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.570]                                 success = TRUE)
[08:29:50.570]                               parallel_sendData(master, data)
[08:29:50.570]                             }
[08:29:50.570]                             return(sendCondition)
[08:29:50.570]                           }
[08:29:50.570]                         }
[08:29:50.570]                         frame <- frame + 1L
[08:29:50.570]                         envir <- sys.frame(frame)
[08:29:50.570]                       }
[08:29:50.570]                     }
[08:29:50.570]                     sendCondition <<- function(cond) NULL
[08:29:50.570]                   }
[08:29:50.570]                 })
[08:29:50.570]                 withCallingHandlers({
[08:29:50.570]                   {
[08:29:50.570]                     print(1:50)
[08:29:50.570]                     str(1:50)
[08:29:50.570]                     cat(letters, sep = "-")
[08:29:50.570]                     cat(1:6, collapse = "\n")
[08:29:50.570]                     write.table(datasets::iris[1:10, ], sep = "\t")
[08:29:50.570]                     42L
[08:29:50.570]                   }
[08:29:50.570]                 }, immediateCondition = function(cond) {
[08:29:50.570]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.570]                   sendCondition(cond)
[08:29:50.570]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.570]                   {
[08:29:50.570]                     inherits <- base::inherits
[08:29:50.570]                     invokeRestart <- base::invokeRestart
[08:29:50.570]                     is.null <- base::is.null
[08:29:50.570]                     muffled <- FALSE
[08:29:50.570]                     if (inherits(cond, "message")) {
[08:29:50.570]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.570]                       if (muffled) 
[08:29:50.570]                         invokeRestart("muffleMessage")
[08:29:50.570]                     }
[08:29:50.570]                     else if (inherits(cond, "warning")) {
[08:29:50.570]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.570]                       if (muffled) 
[08:29:50.570]                         invokeRestart("muffleWarning")
[08:29:50.570]                     }
[08:29:50.570]                     else if (inherits(cond, "condition")) {
[08:29:50.570]                       if (!is.null(pattern)) {
[08:29:50.570]                         computeRestarts <- base::computeRestarts
[08:29:50.570]                         grepl <- base::grepl
[08:29:50.570]                         restarts <- computeRestarts(cond)
[08:29:50.570]                         for (restart in restarts) {
[08:29:50.570]                           name <- restart$name
[08:29:50.570]                           if (is.null(name)) 
[08:29:50.570]                             next
[08:29:50.570]                           if (!grepl(pattern, name)) 
[08:29:50.570]                             next
[08:29:50.570]                           invokeRestart(restart)
[08:29:50.570]                           muffled <- TRUE
[08:29:50.570]                           break
[08:29:50.570]                         }
[08:29:50.570]                       }
[08:29:50.570]                     }
[08:29:50.570]                     invisible(muffled)
[08:29:50.570]                   }
[08:29:50.570]                   muffleCondition(cond)
[08:29:50.570]                 })
[08:29:50.570]             }))
[08:29:50.570]             future::FutureResult(value = ...future.value$value, 
[08:29:50.570]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.570]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.570]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.570]                     ...future.globalenv.names))
[08:29:50.570]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.570]         }, condition = base::local({
[08:29:50.570]             c <- base::c
[08:29:50.570]             inherits <- base::inherits
[08:29:50.570]             invokeRestart <- base::invokeRestart
[08:29:50.570]             length <- base::length
[08:29:50.570]             list <- base::list
[08:29:50.570]             seq.int <- base::seq.int
[08:29:50.570]             signalCondition <- base::signalCondition
[08:29:50.570]             sys.calls <- base::sys.calls
[08:29:50.570]             `[[` <- base::`[[`
[08:29:50.570]             `+` <- base::`+`
[08:29:50.570]             `<<-` <- base::`<<-`
[08:29:50.570]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.570]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.570]                   3L)]
[08:29:50.570]             }
[08:29:50.570]             function(cond) {
[08:29:50.570]                 is_error <- inherits(cond, "error")
[08:29:50.570]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.570]                   NULL)
[08:29:50.570]                 if (is_error) {
[08:29:50.570]                   sessionInformation <- function() {
[08:29:50.570]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.570]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.570]                       search = base::search(), system = base::Sys.info())
[08:29:50.570]                   }
[08:29:50.570]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.570]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.570]                     cond$call), session = sessionInformation(), 
[08:29:50.570]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.570]                   signalCondition(cond)
[08:29:50.570]                 }
[08:29:50.570]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.570]                 "immediateCondition"))) {
[08:29:50.570]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.570]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.570]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.570]                   if (TRUE && !signal) {
[08:29:50.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.570]                     {
[08:29:50.570]                       inherits <- base::inherits
[08:29:50.570]                       invokeRestart <- base::invokeRestart
[08:29:50.570]                       is.null <- base::is.null
[08:29:50.570]                       muffled <- FALSE
[08:29:50.570]                       if (inherits(cond, "message")) {
[08:29:50.570]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.570]                         if (muffled) 
[08:29:50.570]                           invokeRestart("muffleMessage")
[08:29:50.570]                       }
[08:29:50.570]                       else if (inherits(cond, "warning")) {
[08:29:50.570]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.570]                         if (muffled) 
[08:29:50.570]                           invokeRestart("muffleWarning")
[08:29:50.570]                       }
[08:29:50.570]                       else if (inherits(cond, "condition")) {
[08:29:50.570]                         if (!is.null(pattern)) {
[08:29:50.570]                           computeRestarts <- base::computeRestarts
[08:29:50.570]                           grepl <- base::grepl
[08:29:50.570]                           restarts <- computeRestarts(cond)
[08:29:50.570]                           for (restart in restarts) {
[08:29:50.570]                             name <- restart$name
[08:29:50.570]                             if (is.null(name)) 
[08:29:50.570]                               next
[08:29:50.570]                             if (!grepl(pattern, name)) 
[08:29:50.570]                               next
[08:29:50.570]                             invokeRestart(restart)
[08:29:50.570]                             muffled <- TRUE
[08:29:50.570]                             break
[08:29:50.570]                           }
[08:29:50.570]                         }
[08:29:50.570]                       }
[08:29:50.570]                       invisible(muffled)
[08:29:50.570]                     }
[08:29:50.570]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.570]                   }
[08:29:50.570]                 }
[08:29:50.570]                 else {
[08:29:50.570]                   if (TRUE) {
[08:29:50.570]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.570]                     {
[08:29:50.570]                       inherits <- base::inherits
[08:29:50.570]                       invokeRestart <- base::invokeRestart
[08:29:50.570]                       is.null <- base::is.null
[08:29:50.570]                       muffled <- FALSE
[08:29:50.570]                       if (inherits(cond, "message")) {
[08:29:50.570]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.570]                         if (muffled) 
[08:29:50.570]                           invokeRestart("muffleMessage")
[08:29:50.570]                       }
[08:29:50.570]                       else if (inherits(cond, "warning")) {
[08:29:50.570]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.570]                         if (muffled) 
[08:29:50.570]                           invokeRestart("muffleWarning")
[08:29:50.570]                       }
[08:29:50.570]                       else if (inherits(cond, "condition")) {
[08:29:50.570]                         if (!is.null(pattern)) {
[08:29:50.570]                           computeRestarts <- base::computeRestarts
[08:29:50.570]                           grepl <- base::grepl
[08:29:50.570]                           restarts <- computeRestarts(cond)
[08:29:50.570]                           for (restart in restarts) {
[08:29:50.570]                             name <- restart$name
[08:29:50.570]                             if (is.null(name)) 
[08:29:50.570]                               next
[08:29:50.570]                             if (!grepl(pattern, name)) 
[08:29:50.570]                               next
[08:29:50.570]                             invokeRestart(restart)
[08:29:50.570]                             muffled <- TRUE
[08:29:50.570]                             break
[08:29:50.570]                           }
[08:29:50.570]                         }
[08:29:50.570]                       }
[08:29:50.570]                       invisible(muffled)
[08:29:50.570]                     }
[08:29:50.570]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.570]                   }
[08:29:50.570]                 }
[08:29:50.570]             }
[08:29:50.570]         }))
[08:29:50.570]     }, error = function(ex) {
[08:29:50.570]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.570]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.570]                 ...future.rng), started = ...future.startTime, 
[08:29:50.570]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.570]             version = "1.8"), class = "FutureResult")
[08:29:50.570]     }, finally = {
[08:29:50.570]         if (!identical(...future.workdir, getwd())) 
[08:29:50.570]             setwd(...future.workdir)
[08:29:50.570]         {
[08:29:50.570]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.570]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.570]             }
[08:29:50.570]             base::options(...future.oldOptions)
[08:29:50.570]             if (.Platform$OS.type == "windows") {
[08:29:50.570]                 old_names <- names(...future.oldEnvVars)
[08:29:50.570]                 envs <- base::Sys.getenv()
[08:29:50.570]                 names <- names(envs)
[08:29:50.570]                 common <- intersect(names, old_names)
[08:29:50.570]                 added <- setdiff(names, old_names)
[08:29:50.570]                 removed <- setdiff(old_names, names)
[08:29:50.570]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.570]                   envs[common]]
[08:29:50.570]                 NAMES <- toupper(changed)
[08:29:50.570]                 args <- list()
[08:29:50.570]                 for (kk in seq_along(NAMES)) {
[08:29:50.570]                   name <- changed[[kk]]
[08:29:50.570]                   NAME <- NAMES[[kk]]
[08:29:50.570]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.570]                     next
[08:29:50.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.570]                 }
[08:29:50.570]                 NAMES <- toupper(added)
[08:29:50.570]                 for (kk in seq_along(NAMES)) {
[08:29:50.570]                   name <- added[[kk]]
[08:29:50.570]                   NAME <- NAMES[[kk]]
[08:29:50.570]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.570]                     next
[08:29:50.570]                   args[[name]] <- ""
[08:29:50.570]                 }
[08:29:50.570]                 NAMES <- toupper(removed)
[08:29:50.570]                 for (kk in seq_along(NAMES)) {
[08:29:50.570]                   name <- removed[[kk]]
[08:29:50.570]                   NAME <- NAMES[[kk]]
[08:29:50.570]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.570]                     next
[08:29:50.570]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.570]                 }
[08:29:50.570]                 if (length(args) > 0) 
[08:29:50.570]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.570]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.570]             }
[08:29:50.570]             else {
[08:29:50.570]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.570]             }
[08:29:50.570]             {
[08:29:50.570]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.570]                   0L) {
[08:29:50.570]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.570]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.570]                   base::options(opts)
[08:29:50.570]                 }
[08:29:50.570]                 {
[08:29:50.570]                   {
[08:29:50.570]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.570]                     NULL
[08:29:50.570]                   }
[08:29:50.570]                   options(future.plan = NULL)
[08:29:50.570]                   if (is.na(NA_character_)) 
[08:29:50.570]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.570]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.570]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.570]                     .init = FALSE)
[08:29:50.570]                 }
[08:29:50.570]             }
[08:29:50.570]         }
[08:29:50.570]     })
[08:29:50.570]     if (FALSE) {
[08:29:50.570]         base::sink(type = "output", split = FALSE)
[08:29:50.570]         if (NA) {
[08:29:50.570]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.570]         }
[08:29:50.570]         else {
[08:29:50.570]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.570]         }
[08:29:50.570]         base::close(...future.stdout)
[08:29:50.570]         ...future.stdout <- NULL
[08:29:50.570]     }
[08:29:50.570]     ...future.result$conditions <- ...future.conditions
[08:29:50.570]     ...future.result$finished <- base::Sys.time()
[08:29:50.570]     ...future.result
[08:29:50.570] }
[08:29:50.574] MultisessionFuture started
[08:29:50.574] - Launch lazy future ... done
[08:29:50.574] run() for ‘MultisessionFuture’ ... done
[08:29:50.574] result() for ClusterFuture ...
[08:29:50.574] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.574] - Validating connection of MultisessionFuture
[08:29:50.617] - received message: FutureResult
[08:29:50.618] - Received FutureResult
[08:29:50.618] - Erased future from FutureRegistry
[08:29:50.618] result() for ClusterFuture ...
[08:29:50.618] - result already collected: FutureResult
[08:29:50.618] result() for ClusterFuture ... done
[08:29:50.618] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.618] result() for ClusterFuture ... done
[08:29:50.618] result() for ClusterFuture ...
[08:29:50.618] - result already collected: FutureResult
[08:29:50.618] result() for ClusterFuture ... done
- stdout = structure(TRUE, drop = TRUE)
[08:29:50.619] getGlobalsAndPackages() ...
[08:29:50.619] Searching for globals...
[08:29:50.620] - globals found: [1] ‘print’
[08:29:50.620] Searching for globals ... DONE
[08:29:50.620] Resolving globals: FALSE
[08:29:50.620] 
[08:29:50.623] 
[08:29:50.623] getGlobalsAndPackages() ... DONE
[08:29:50.623] run() for ‘Future’ ...
[08:29:50.623] - state: ‘created’
[08:29:50.623] - Future backend: ‘FutureStrategy’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:29:50.637] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:29:50.637] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[08:29:50.638]   - Field: ‘node’
[08:29:50.638]   - Field: ‘label’
[08:29:50.638]   - Field: ‘local’
[08:29:50.638]   - Field: ‘owner’
[08:29:50.638]   - Field: ‘envir’
[08:29:50.638]   - Field: ‘workers’
[08:29:50.638]   - Field: ‘packages’
[08:29:50.638]   - Field: ‘gc’
[08:29:50.638]   - Field: ‘conditions’
[08:29:50.638]   - Field: ‘persistent’
[08:29:50.638]   - Field: ‘expr’
[08:29:50.638]   - Field: ‘uuid’
[08:29:50.639]   - Field: ‘seed’
[08:29:50.639]   - Field: ‘version’
[08:29:50.639]   - Field: ‘result’
[08:29:50.639]   - Field: ‘asynchronous’
[08:29:50.639]   - Field: ‘calls’
[08:29:50.639]   - Field: ‘globals’
[08:29:50.639]   - Field: ‘stdout’
[08:29:50.639]   - Field: ‘earlySignal’
[08:29:50.639]   - Field: ‘lazy’
[08:29:50.639]   - Field: ‘state’
[08:29:50.639] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[08:29:50.640] - Launch lazy future ...
[08:29:50.640] Packages needed by the future expression (n = 0): <none>
[08:29:50.640] Packages needed by future strategies (n = 0): <none>
[08:29:50.640] {
[08:29:50.640]     {
[08:29:50.640]         {
[08:29:50.640]             ...future.startTime <- base::Sys.time()
[08:29:50.640]             {
[08:29:50.640]                 {
[08:29:50.640]                   {
[08:29:50.640]                     {
[08:29:50.640]                       base::local({
[08:29:50.640]                         has_future <- base::requireNamespace("future", 
[08:29:50.640]                           quietly = TRUE)
[08:29:50.640]                         if (has_future) {
[08:29:50.640]                           ns <- base::getNamespace("future")
[08:29:50.640]                           version <- ns[[".package"]][["version"]]
[08:29:50.640]                           if (is.null(version)) 
[08:29:50.640]                             version <- utils::packageVersion("future")
[08:29:50.640]                         }
[08:29:50.640]                         else {
[08:29:50.640]                           version <- NULL
[08:29:50.640]                         }
[08:29:50.640]                         if (!has_future || version < "1.8.0") {
[08:29:50.640]                           info <- base::c(r_version = base::gsub("R version ", 
[08:29:50.640]                             "", base::R.version$version.string), 
[08:29:50.640]                             platform = base::sprintf("%s (%s-bit)", 
[08:29:50.640]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:29:50.640]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:29:50.640]                               "release", "version")], collapse = " "), 
[08:29:50.640]                             hostname = base::Sys.info()[["nodename"]])
[08:29:50.640]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:29:50.640]                             info)
[08:29:50.640]                           info <- base::paste(info, collapse = "; ")
[08:29:50.640]                           if (!has_future) {
[08:29:50.640]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:29:50.640]                               info)
[08:29:50.640]                           }
[08:29:50.640]                           else {
[08:29:50.640]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:29:50.640]                               info, version)
[08:29:50.640]                           }
[08:29:50.640]                           base::stop(msg)
[08:29:50.640]                         }
[08:29:50.640]                       })
[08:29:50.640]                     }
[08:29:50.640]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:29:50.640]                     base::options(mc.cores = 1L)
[08:29:50.640]                   }
[08:29:50.640]                   ...future.strategy.old <- future::plan("list")
[08:29:50.640]                   options(future.plan = NULL)
[08:29:50.640]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.640]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:29:50.640]                 }
[08:29:50.640]                 ...future.workdir <- getwd()
[08:29:50.640]             }
[08:29:50.640]             ...future.oldOptions <- base::as.list(base::.Options)
[08:29:50.640]             ...future.oldEnvVars <- base::Sys.getenv()
[08:29:50.640]         }
[08:29:50.640]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:29:50.640]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:29:50.640]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:29:50.640]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:29:50.640]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:29:50.640]             future.stdout.windows.reencode = NULL, width = 80L)
[08:29:50.640]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:29:50.640]             base::names(...future.oldOptions))
[08:29:50.640]     }
[08:29:50.640]     if (FALSE) {
[08:29:50.640]     }
[08:29:50.640]     else {
[08:29:50.640]         if (TRUE) {
[08:29:50.640]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:29:50.640]                 open = "w")
[08:29:50.640]         }
[08:29:50.640]         else {
[08:29:50.640]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:29:50.640]                 windows = "NUL", "/dev/null"), open = "w")
[08:29:50.640]         }
[08:29:50.640]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:29:50.640]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:29:50.640]             base::sink(type = "output", split = FALSE)
[08:29:50.640]             base::close(...future.stdout)
[08:29:50.640]         }, add = TRUE)
[08:29:50.640]     }
[08:29:50.640]     ...future.frame <- base::sys.nframe()
[08:29:50.640]     ...future.conditions <- base::list()
[08:29:50.640]     ...future.rng <- base::globalenv()$.Random.seed
[08:29:50.640]     if (FALSE) {
[08:29:50.640]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:29:50.640]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:29:50.640]     }
[08:29:50.640]     ...future.result <- base::tryCatch({
[08:29:50.640]         base::withCallingHandlers({
[08:29:50.640]             ...future.value <- base::withVisible(base::local({
[08:29:50.640]                 ...future.makeSendCondition <- base::local({
[08:29:50.640]                   sendCondition <- NULL
[08:29:50.640]                   function(frame = 1L) {
[08:29:50.640]                     if (is.function(sendCondition)) 
[08:29:50.640]                       return(sendCondition)
[08:29:50.640]                     ns <- getNamespace("parallel")
[08:29:50.640]                     if (exists("sendData", mode = "function", 
[08:29:50.640]                       envir = ns)) {
[08:29:50.640]                       parallel_sendData <- get("sendData", mode = "function", 
[08:29:50.640]                         envir = ns)
[08:29:50.640]                       envir <- sys.frame(frame)
[08:29:50.640]                       master <- NULL
[08:29:50.640]                       while (!identical(envir, .GlobalEnv) && 
[08:29:50.640]                         !identical(envir, emptyenv())) {
[08:29:50.640]                         if (exists("master", mode = "list", envir = envir, 
[08:29:50.640]                           inherits = FALSE)) {
[08:29:50.640]                           master <- get("master", mode = "list", 
[08:29:50.640]                             envir = envir, inherits = FALSE)
[08:29:50.640]                           if (inherits(master, c("SOCKnode", 
[08:29:50.640]                             "SOCK0node"))) {
[08:29:50.640]                             sendCondition <<- function(cond) {
[08:29:50.640]                               data <- list(type = "VALUE", value = cond, 
[08:29:50.640]                                 success = TRUE)
[08:29:50.640]                               parallel_sendData(master, data)
[08:29:50.640]                             }
[08:29:50.640]                             return(sendCondition)
[08:29:50.640]                           }
[08:29:50.640]                         }
[08:29:50.640]                         frame <- frame + 1L
[08:29:50.640]                         envir <- sys.frame(frame)
[08:29:50.640]                       }
[08:29:50.640]                     }
[08:29:50.640]                     sendCondition <<- function(cond) NULL
[08:29:50.640]                   }
[08:29:50.640]                 })
[08:29:50.640]                 withCallingHandlers({
[08:29:50.640]                   print(42)
[08:29:50.640]                 }, immediateCondition = function(cond) {
[08:29:50.640]                   sendCondition <- ...future.makeSendCondition()
[08:29:50.640]                   sendCondition(cond)
[08:29:50.640]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.640]                   {
[08:29:50.640]                     inherits <- base::inherits
[08:29:50.640]                     invokeRestart <- base::invokeRestart
[08:29:50.640]                     is.null <- base::is.null
[08:29:50.640]                     muffled <- FALSE
[08:29:50.640]                     if (inherits(cond, "message")) {
[08:29:50.640]                       muffled <- grepl(pattern, "muffleMessage")
[08:29:50.640]                       if (muffled) 
[08:29:50.640]                         invokeRestart("muffleMessage")
[08:29:50.640]                     }
[08:29:50.640]                     else if (inherits(cond, "warning")) {
[08:29:50.640]                       muffled <- grepl(pattern, "muffleWarning")
[08:29:50.640]                       if (muffled) 
[08:29:50.640]                         invokeRestart("muffleWarning")
[08:29:50.640]                     }
[08:29:50.640]                     else if (inherits(cond, "condition")) {
[08:29:50.640]                       if (!is.null(pattern)) {
[08:29:50.640]                         computeRestarts <- base::computeRestarts
[08:29:50.640]                         grepl <- base::grepl
[08:29:50.640]                         restarts <- computeRestarts(cond)
[08:29:50.640]                         for (restart in restarts) {
[08:29:50.640]                           name <- restart$name
[08:29:50.640]                           if (is.null(name)) 
[08:29:50.640]                             next
[08:29:50.640]                           if (!grepl(pattern, name)) 
[08:29:50.640]                             next
[08:29:50.640]                           invokeRestart(restart)
[08:29:50.640]                           muffled <- TRUE
[08:29:50.640]                           break
[08:29:50.640]                         }
[08:29:50.640]                       }
[08:29:50.640]                     }
[08:29:50.640]                     invisible(muffled)
[08:29:50.640]                   }
[08:29:50.640]                   muffleCondition(cond)
[08:29:50.640]                 })
[08:29:50.640]             }))
[08:29:50.640]             future::FutureResult(value = ...future.value$value, 
[08:29:50.640]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.640]                   ...future.rng), globalenv = if (FALSE) 
[08:29:50.640]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:29:50.640]                     ...future.globalenv.names))
[08:29:50.640]                 else NULL, started = ...future.startTime, version = "1.8")
[08:29:50.640]         }, condition = base::local({
[08:29:50.640]             c <- base::c
[08:29:50.640]             inherits <- base::inherits
[08:29:50.640]             invokeRestart <- base::invokeRestart
[08:29:50.640]             length <- base::length
[08:29:50.640]             list <- base::list
[08:29:50.640]             seq.int <- base::seq.int
[08:29:50.640]             signalCondition <- base::signalCondition
[08:29:50.640]             sys.calls <- base::sys.calls
[08:29:50.640]             `[[` <- base::`[[`
[08:29:50.640]             `+` <- base::`+`
[08:29:50.640]             `<<-` <- base::`<<-`
[08:29:50.640]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:29:50.640]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:29:50.640]                   3L)]
[08:29:50.640]             }
[08:29:50.640]             function(cond) {
[08:29:50.640]                 is_error <- inherits(cond, "error")
[08:29:50.640]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:29:50.640]                   NULL)
[08:29:50.640]                 if (is_error) {
[08:29:50.640]                   sessionInformation <- function() {
[08:29:50.640]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:29:50.640]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:29:50.640]                       search = base::search(), system = base::Sys.info())
[08:29:50.640]                   }
[08:29:50.640]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.640]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:29:50.640]                     cond$call), session = sessionInformation(), 
[08:29:50.640]                     timestamp = base::Sys.time(), signaled = 0L)
[08:29:50.640]                   signalCondition(cond)
[08:29:50.640]                 }
[08:29:50.640]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:29:50.640]                 "immediateCondition"))) {
[08:29:50.640]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:29:50.640]                   ...future.conditions[[length(...future.conditions) + 
[08:29:50.640]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:29:50.640]                   if (TRUE && !signal) {
[08:29:50.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.640]                     {
[08:29:50.640]                       inherits <- base::inherits
[08:29:50.640]                       invokeRestart <- base::invokeRestart
[08:29:50.640]                       is.null <- base::is.null
[08:29:50.640]                       muffled <- FALSE
[08:29:50.640]                       if (inherits(cond, "message")) {
[08:29:50.640]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.640]                         if (muffled) 
[08:29:50.640]                           invokeRestart("muffleMessage")
[08:29:50.640]                       }
[08:29:50.640]                       else if (inherits(cond, "warning")) {
[08:29:50.640]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.640]                         if (muffled) 
[08:29:50.640]                           invokeRestart("muffleWarning")
[08:29:50.640]                       }
[08:29:50.640]                       else if (inherits(cond, "condition")) {
[08:29:50.640]                         if (!is.null(pattern)) {
[08:29:50.640]                           computeRestarts <- base::computeRestarts
[08:29:50.640]                           grepl <- base::grepl
[08:29:50.640]                           restarts <- computeRestarts(cond)
[08:29:50.640]                           for (restart in restarts) {
[08:29:50.640]                             name <- restart$name
[08:29:50.640]                             if (is.null(name)) 
[08:29:50.640]                               next
[08:29:50.640]                             if (!grepl(pattern, name)) 
[08:29:50.640]                               next
[08:29:50.640]                             invokeRestart(restart)
[08:29:50.640]                             muffled <- TRUE
[08:29:50.640]                             break
[08:29:50.640]                           }
[08:29:50.640]                         }
[08:29:50.640]                       }
[08:29:50.640]                       invisible(muffled)
[08:29:50.640]                     }
[08:29:50.640]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.640]                   }
[08:29:50.640]                 }
[08:29:50.640]                 else {
[08:29:50.640]                   if (TRUE) {
[08:29:50.640]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:29:50.640]                     {
[08:29:50.640]                       inherits <- base::inherits
[08:29:50.640]                       invokeRestart <- base::invokeRestart
[08:29:50.640]                       is.null <- base::is.null
[08:29:50.640]                       muffled <- FALSE
[08:29:50.640]                       if (inherits(cond, "message")) {
[08:29:50.640]                         muffled <- grepl(pattern, "muffleMessage")
[08:29:50.640]                         if (muffled) 
[08:29:50.640]                           invokeRestart("muffleMessage")
[08:29:50.640]                       }
[08:29:50.640]                       else if (inherits(cond, "warning")) {
[08:29:50.640]                         muffled <- grepl(pattern, "muffleWarning")
[08:29:50.640]                         if (muffled) 
[08:29:50.640]                           invokeRestart("muffleWarning")
[08:29:50.640]                       }
[08:29:50.640]                       else if (inherits(cond, "condition")) {
[08:29:50.640]                         if (!is.null(pattern)) {
[08:29:50.640]                           computeRestarts <- base::computeRestarts
[08:29:50.640]                           grepl <- base::grepl
[08:29:50.640]                           restarts <- computeRestarts(cond)
[08:29:50.640]                           for (restart in restarts) {
[08:29:50.640]                             name <- restart$name
[08:29:50.640]                             if (is.null(name)) 
[08:29:50.640]                               next
[08:29:50.640]                             if (!grepl(pattern, name)) 
[08:29:50.640]                               next
[08:29:50.640]                             invokeRestart(restart)
[08:29:50.640]                             muffled <- TRUE
[08:29:50.640]                             break
[08:29:50.640]                           }
[08:29:50.640]                         }
[08:29:50.640]                       }
[08:29:50.640]                       invisible(muffled)
[08:29:50.640]                     }
[08:29:50.640]                     muffleCondition(cond, pattern = "^muffle")
[08:29:50.640]                   }
[08:29:50.640]                 }
[08:29:50.640]             }
[08:29:50.640]         }))
[08:29:50.640]     }, error = function(ex) {
[08:29:50.640]         base::structure(base::list(value = NULL, visible = NULL, 
[08:29:50.640]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:29:50.640]                 ...future.rng), started = ...future.startTime, 
[08:29:50.640]             finished = Sys.time(), session_uuid = NA_character_, 
[08:29:50.640]             version = "1.8"), class = "FutureResult")
[08:29:50.640]     }, finally = {
[08:29:50.640]         if (!identical(...future.workdir, getwd())) 
[08:29:50.640]             setwd(...future.workdir)
[08:29:50.640]         {
[08:29:50.640]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:29:50.640]                 ...future.oldOptions$nwarnings <- NULL
[08:29:50.640]             }
[08:29:50.640]             base::options(...future.oldOptions)
[08:29:50.640]             if (.Platform$OS.type == "windows") {
[08:29:50.640]                 old_names <- names(...future.oldEnvVars)
[08:29:50.640]                 envs <- base::Sys.getenv()
[08:29:50.640]                 names <- names(envs)
[08:29:50.640]                 common <- intersect(names, old_names)
[08:29:50.640]                 added <- setdiff(names, old_names)
[08:29:50.640]                 removed <- setdiff(old_names, names)
[08:29:50.640]                 changed <- common[...future.oldEnvVars[common] != 
[08:29:50.640]                   envs[common]]
[08:29:50.640]                 NAMES <- toupper(changed)
[08:29:50.640]                 args <- list()
[08:29:50.640]                 for (kk in seq_along(NAMES)) {
[08:29:50.640]                   name <- changed[[kk]]
[08:29:50.640]                   NAME <- NAMES[[kk]]
[08:29:50.640]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.640]                     next
[08:29:50.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.640]                 }
[08:29:50.640]                 NAMES <- toupper(added)
[08:29:50.640]                 for (kk in seq_along(NAMES)) {
[08:29:50.640]                   name <- added[[kk]]
[08:29:50.640]                   NAME <- NAMES[[kk]]
[08:29:50.640]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.640]                     next
[08:29:50.640]                   args[[name]] <- ""
[08:29:50.640]                 }
[08:29:50.640]                 NAMES <- toupper(removed)
[08:29:50.640]                 for (kk in seq_along(NAMES)) {
[08:29:50.640]                   name <- removed[[kk]]
[08:29:50.640]                   NAME <- NAMES[[kk]]
[08:29:50.640]                   if (name != NAME && is.element(NAME, old_names)) 
[08:29:50.640]                     next
[08:29:50.640]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:29:50.640]                 }
[08:29:50.640]                 if (length(args) > 0) 
[08:29:50.640]                   base::do.call(base::Sys.setenv, args = args)
[08:29:50.640]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:29:50.640]             }
[08:29:50.640]             else {
[08:29:50.640]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:29:50.640]             }
[08:29:50.640]             {
[08:29:50.640]                 if (base::length(...future.futureOptionsAdded) > 
[08:29:50.640]                   0L) {
[08:29:50.640]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:29:50.640]                   base::names(opts) <- ...future.futureOptionsAdded
[08:29:50.640]                   base::options(opts)
[08:29:50.640]                 }
[08:29:50.640]                 {
[08:29:50.640]                   {
[08:29:50.640]                     base::options(mc.cores = ...future.mc.cores.old)
[08:29:50.640]                     NULL
[08:29:50.640]                   }
[08:29:50.640]                   options(future.plan = NULL)
[08:29:50.640]                   if (is.na(NA_character_)) 
[08:29:50.640]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:29:50.640]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:29:50.640]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:29:50.640]                     .init = FALSE)
[08:29:50.640]                 }
[08:29:50.640]             }
[08:29:50.640]         }
[08:29:50.640]     })
[08:29:50.640]     if (TRUE) {
[08:29:50.640]         base::sink(type = "output", split = FALSE)
[08:29:50.640]         if (TRUE) {
[08:29:50.640]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:29:50.640]         }
[08:29:50.640]         else {
[08:29:50.640]             ...future.result["stdout"] <- base::list(NULL)
[08:29:50.640]         }
[08:29:50.640]         base::close(...future.stdout)
[08:29:50.640]         ...future.stdout <- NULL
[08:29:50.640]     }
[08:29:50.640]     ...future.result$conditions <- ...future.conditions
[08:29:50.640]     ...future.result$finished <- base::Sys.time()
[08:29:50.640]     ...future.result
[08:29:50.640] }
[08:29:50.644] MultisessionFuture started
[08:29:50.644] - Launch lazy future ... done
[08:29:50.644] run() for ‘MultisessionFuture’ ... done
[08:29:50.644] result() for ClusterFuture ...
[08:29:50.644] receiveMessageFromWorker() for ClusterFuture ...
[08:29:50.644] - Validating connection of MultisessionFuture
[08:29:50.687] - received message: FutureResult
[08:29:50.687] - Received FutureResult
[08:29:50.687] - Erased future from FutureRegistry
[08:29:50.687] result() for ClusterFuture ...
[08:29:50.687] - result already collected: FutureResult
[08:29:50.687] result() for ClusterFuture ... done
[08:29:50.687] receiveMessageFromWorker() for ClusterFuture ... done
[08:29:50.688] result() for ClusterFuture ... done
[08:29:50.688] result() for ClusterFuture ...
[08:29:50.688] - result already collected: FutureResult
[08:29:50.688] result() for ClusterFuture ... done
[08:29:50.688] result() for ClusterFuture ...
[08:29:50.688] - result already collected: FutureResult
[08:29:50.688] result() for ClusterFuture ... done
[1] 42
[08:29:50.688] result() for ClusterFuture ...
[08:29:50.688] - result already collected: FutureResult
[08:29:50.688] result() for ClusterFuture ... done
multisession ... done
Testing with 2 cores ... done
> 
> message("*** Standard output ... DONE")
*** Standard output ... DONE
> 
> source("incl/end.R")
[08:29:50.689] plan(): Setting new future strategy stack:
[08:29:50.689] List of future strategies:
[08:29:50.689] 1. FutureStrategy:
[08:29:50.689]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:29:50.689]    - tweaked: FALSE
[08:29:50.689]    - call: future::plan(oplan)
[08:29:50.690] plan(): nbrOfWorkers() = 1
> 
