
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:52.856] plan(): Setting new future strategy stack:
[08:28:52.856] List of future strategies:
[08:28:52.856] 1. sequential:
[08:28:52.856]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:52.856]    - tweaked: FALSE
[08:28:52.856]    - call: future::plan("sequential")
[08:28:52.871] plan(): nbrOfWorkers() = 1
> 
> message("*** requestNode() ...")
*** requestNode() ...
> 
> message("*** requestNode() - exceptions ...")
*** requestNode() - exceptions ...
> 
> workers <- makeClusterPSOCK(2L)
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)
> 
> res <- tryCatch({
+   requestNode(function() {}, workers = workers, timeout = -1.0)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> res <- tryCatch({
+   requestNode(function() {}, workers = workers, alpha = 0)
+ }, error = identity)
> stopifnot(inherits(res, "error"))
> 
> parallel::stopCluster(workers)
> 
> message("*** requestNode() - exceptions ... DONE")
*** requestNode() - exceptions ... DONE
> 
> message("*** requestNode() - timeout ...")
*** requestNode() - timeout ...
> 
> plan(cluster, workers = "localhost")
[08:28:53.362] plan(): Setting new future strategy stack:
[08:28:53.362] List of future strategies:
[08:28:53.362] 1. cluster:
[08:28:53.362]    - args: function (..., workers = "localhost", envir = parent.frame())
[08:28:53.362]    - tweaked: TRUE
[08:28:53.362]    - call: plan(cluster, workers = "localhost")
[08:28:53.381] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:53.381] cluster:
[08:28:53.381] - args: function (..., workers = "localhost", envir = parent.frame())
[08:28:53.381] - tweaked: TRUE
[08:28:53.381] - call: plan(cluster, workers = "localhost")
[08:28:53.382] getGlobalsAndPackages() ...
[08:28:53.382] Not searching for globals
[08:28:53.383] - globals: [0] <none>
[08:28:53.383] getGlobalsAndPackages() ... DONE
[08:28:53.578] Packages needed by the future expression (n = 0): <none>
[08:28:53.579] Packages needed by future strategies (n = 0): <none>
[08:28:53.579] {
[08:28:53.579]     {
[08:28:53.579]         {
[08:28:53.579]             ...future.startTime <- base::Sys.time()
[08:28:53.579]             {
[08:28:53.579]                 {
[08:28:53.579]                   {
[08:28:53.579]                     base::local({
[08:28:53.579]                       has_future <- base::requireNamespace("future", 
[08:28:53.579]                         quietly = TRUE)
[08:28:53.579]                       if (has_future) {
[08:28:53.579]                         ns <- base::getNamespace("future")
[08:28:53.579]                         version <- ns[[".package"]][["version"]]
[08:28:53.579]                         if (is.null(version)) 
[08:28:53.579]                           version <- utils::packageVersion("future")
[08:28:53.579]                       }
[08:28:53.579]                       else {
[08:28:53.579]                         version <- NULL
[08:28:53.579]                       }
[08:28:53.579]                       if (!has_future || version < "1.8.0") {
[08:28:53.579]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:53.579]                           "", base::R.version$version.string), 
[08:28:53.579]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:53.579]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:53.579]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:53.579]                             "release", "version")], collapse = " "), 
[08:28:53.579]                           hostname = base::Sys.info()[["nodename"]])
[08:28:53.579]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:53.579]                           info)
[08:28:53.579]                         info <- base::paste(info, collapse = "; ")
[08:28:53.579]                         if (!has_future) {
[08:28:53.579]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:53.579]                             info)
[08:28:53.579]                         }
[08:28:53.579]                         else {
[08:28:53.579]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:53.579]                             info, version)
[08:28:53.579]                         }
[08:28:53.579]                         base::stop(msg)
[08:28:53.579]                       }
[08:28:53.579]                     })
[08:28:53.579]                   }
[08:28:53.579]                   ...future.strategy.old <- future::plan("list")
[08:28:53.579]                   options(future.plan = NULL)
[08:28:53.579]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:53.579]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:53.579]                 }
[08:28:53.579]                 ...future.workdir <- getwd()
[08:28:53.579]             }
[08:28:53.579]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:53.579]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:53.579]         }
[08:28:53.579]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:53.579]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:53.579]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:53.579]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:53.579]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:53.579]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:53.579]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:53.579]             base::names(...future.oldOptions))
[08:28:53.579]     }
[08:28:53.579]     if (FALSE) {
[08:28:53.579]     }
[08:28:53.579]     else {
[08:28:53.579]         if (TRUE) {
[08:28:53.579]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:53.579]                 open = "w")
[08:28:53.579]         }
[08:28:53.579]         else {
[08:28:53.579]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:53.579]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:53.579]         }
[08:28:53.579]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:53.579]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:53.579]             base::sink(type = "output", split = FALSE)
[08:28:53.579]             base::close(...future.stdout)
[08:28:53.579]         }, add = TRUE)
[08:28:53.579]     }
[08:28:53.579]     ...future.frame <- base::sys.nframe()
[08:28:53.579]     ...future.conditions <- base::list()
[08:28:53.579]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:53.579]     if (FALSE) {
[08:28:53.579]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:53.579]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:53.579]     }
[08:28:53.579]     ...future.result <- base::tryCatch({
[08:28:53.579]         base::withCallingHandlers({
[08:28:53.579]             ...future.value <- base::withVisible(base::local({
[08:28:53.579]                 ...future.makeSendCondition <- base::local({
[08:28:53.579]                   sendCondition <- NULL
[08:28:53.579]                   function(frame = 1L) {
[08:28:53.579]                     if (is.function(sendCondition)) 
[08:28:53.579]                       return(sendCondition)
[08:28:53.579]                     ns <- getNamespace("parallel")
[08:28:53.579]                     if (exists("sendData", mode = "function", 
[08:28:53.579]                       envir = ns)) {
[08:28:53.579]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:53.579]                         envir = ns)
[08:28:53.579]                       envir <- sys.frame(frame)
[08:28:53.579]                       master <- NULL
[08:28:53.579]                       while (!identical(envir, .GlobalEnv) && 
[08:28:53.579]                         !identical(envir, emptyenv())) {
[08:28:53.579]                         if (exists("master", mode = "list", envir = envir, 
[08:28:53.579]                           inherits = FALSE)) {
[08:28:53.579]                           master <- get("master", mode = "list", 
[08:28:53.579]                             envir = envir, inherits = FALSE)
[08:28:53.579]                           if (inherits(master, c("SOCKnode", 
[08:28:53.579]                             "SOCK0node"))) {
[08:28:53.579]                             sendCondition <<- function(cond) {
[08:28:53.579]                               data <- list(type = "VALUE", value = cond, 
[08:28:53.579]                                 success = TRUE)
[08:28:53.579]                               parallel_sendData(master, data)
[08:28:53.579]                             }
[08:28:53.579]                             return(sendCondition)
[08:28:53.579]                           }
[08:28:53.579]                         }
[08:28:53.579]                         frame <- frame + 1L
[08:28:53.579]                         envir <- sys.frame(frame)
[08:28:53.579]                       }
[08:28:53.579]                     }
[08:28:53.579]                     sendCondition <<- function(cond) NULL
[08:28:53.579]                   }
[08:28:53.579]                 })
[08:28:53.579]                 withCallingHandlers({
[08:28:53.579]                   NA
[08:28:53.579]                 }, immediateCondition = function(cond) {
[08:28:53.579]                   sendCondition <- ...future.makeSendCondition()
[08:28:53.579]                   sendCondition(cond)
[08:28:53.579]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.579]                   {
[08:28:53.579]                     inherits <- base::inherits
[08:28:53.579]                     invokeRestart <- base::invokeRestart
[08:28:53.579]                     is.null <- base::is.null
[08:28:53.579]                     muffled <- FALSE
[08:28:53.579]                     if (inherits(cond, "message")) {
[08:28:53.579]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:53.579]                       if (muffled) 
[08:28:53.579]                         invokeRestart("muffleMessage")
[08:28:53.579]                     }
[08:28:53.579]                     else if (inherits(cond, "warning")) {
[08:28:53.579]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:53.579]                       if (muffled) 
[08:28:53.579]                         invokeRestart("muffleWarning")
[08:28:53.579]                     }
[08:28:53.579]                     else if (inherits(cond, "condition")) {
[08:28:53.579]                       if (!is.null(pattern)) {
[08:28:53.579]                         computeRestarts <- base::computeRestarts
[08:28:53.579]                         grepl <- base::grepl
[08:28:53.579]                         restarts <- computeRestarts(cond)
[08:28:53.579]                         for (restart in restarts) {
[08:28:53.579]                           name <- restart$name
[08:28:53.579]                           if (is.null(name)) 
[08:28:53.579]                             next
[08:28:53.579]                           if (!grepl(pattern, name)) 
[08:28:53.579]                             next
[08:28:53.579]                           invokeRestart(restart)
[08:28:53.579]                           muffled <- TRUE
[08:28:53.579]                           break
[08:28:53.579]                         }
[08:28:53.579]                       }
[08:28:53.579]                     }
[08:28:53.579]                     invisible(muffled)
[08:28:53.579]                   }
[08:28:53.579]                   muffleCondition(cond)
[08:28:53.579]                 })
[08:28:53.579]             }))
[08:28:53.579]             future::FutureResult(value = ...future.value$value, 
[08:28:53.579]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:53.579]                   ...future.rng), globalenv = if (FALSE) 
[08:28:53.579]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:53.579]                     ...future.globalenv.names))
[08:28:53.579]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:53.579]         }, condition = base::local({
[08:28:53.579]             c <- base::c
[08:28:53.579]             inherits <- base::inherits
[08:28:53.579]             invokeRestart <- base::invokeRestart
[08:28:53.579]             length <- base::length
[08:28:53.579]             list <- base::list
[08:28:53.579]             seq.int <- base::seq.int
[08:28:53.579]             signalCondition <- base::signalCondition
[08:28:53.579]             sys.calls <- base::sys.calls
[08:28:53.579]             `[[` <- base::`[[`
[08:28:53.579]             `+` <- base::`+`
[08:28:53.579]             `<<-` <- base::`<<-`
[08:28:53.579]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:53.579]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:53.579]                   3L)]
[08:28:53.579]             }
[08:28:53.579]             function(cond) {
[08:28:53.579]                 is_error <- inherits(cond, "error")
[08:28:53.579]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:53.579]                   NULL)
[08:28:53.579]                 if (is_error) {
[08:28:53.579]                   sessionInformation <- function() {
[08:28:53.579]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:53.579]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:53.579]                       search = base::search(), system = base::Sys.info())
[08:28:53.579]                   }
[08:28:53.579]                   ...future.conditions[[length(...future.conditions) + 
[08:28:53.579]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:53.579]                     cond$call), session = sessionInformation(), 
[08:28:53.579]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:53.579]                   signalCondition(cond)
[08:28:53.579]                 }
[08:28:53.579]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:53.579]                 "immediateCondition"))) {
[08:28:53.579]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:53.579]                   ...future.conditions[[length(...future.conditions) + 
[08:28:53.579]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:53.579]                   if (TRUE && !signal) {
[08:28:53.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.579]                     {
[08:28:53.579]                       inherits <- base::inherits
[08:28:53.579]                       invokeRestart <- base::invokeRestart
[08:28:53.579]                       is.null <- base::is.null
[08:28:53.579]                       muffled <- FALSE
[08:28:53.579]                       if (inherits(cond, "message")) {
[08:28:53.579]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:53.579]                         if (muffled) 
[08:28:53.579]                           invokeRestart("muffleMessage")
[08:28:53.579]                       }
[08:28:53.579]                       else if (inherits(cond, "warning")) {
[08:28:53.579]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:53.579]                         if (muffled) 
[08:28:53.579]                           invokeRestart("muffleWarning")
[08:28:53.579]                       }
[08:28:53.579]                       else if (inherits(cond, "condition")) {
[08:28:53.579]                         if (!is.null(pattern)) {
[08:28:53.579]                           computeRestarts <- base::computeRestarts
[08:28:53.579]                           grepl <- base::grepl
[08:28:53.579]                           restarts <- computeRestarts(cond)
[08:28:53.579]                           for (restart in restarts) {
[08:28:53.579]                             name <- restart$name
[08:28:53.579]                             if (is.null(name)) 
[08:28:53.579]                               next
[08:28:53.579]                             if (!grepl(pattern, name)) 
[08:28:53.579]                               next
[08:28:53.579]                             invokeRestart(restart)
[08:28:53.579]                             muffled <- TRUE
[08:28:53.579]                             break
[08:28:53.579]                           }
[08:28:53.579]                         }
[08:28:53.579]                       }
[08:28:53.579]                       invisible(muffled)
[08:28:53.579]                     }
[08:28:53.579]                     muffleCondition(cond, pattern = "^muffle")
[08:28:53.579]                   }
[08:28:53.579]                 }
[08:28:53.579]                 else {
[08:28:53.579]                   if (TRUE) {
[08:28:53.579]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.579]                     {
[08:28:53.579]                       inherits <- base::inherits
[08:28:53.579]                       invokeRestart <- base::invokeRestart
[08:28:53.579]                       is.null <- base::is.null
[08:28:53.579]                       muffled <- FALSE
[08:28:53.579]                       if (inherits(cond, "message")) {
[08:28:53.579]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:53.579]                         if (muffled) 
[08:28:53.579]                           invokeRestart("muffleMessage")
[08:28:53.579]                       }
[08:28:53.579]                       else if (inherits(cond, "warning")) {
[08:28:53.579]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:53.579]                         if (muffled) 
[08:28:53.579]                           invokeRestart("muffleWarning")
[08:28:53.579]                       }
[08:28:53.579]                       else if (inherits(cond, "condition")) {
[08:28:53.579]                         if (!is.null(pattern)) {
[08:28:53.579]                           computeRestarts <- base::computeRestarts
[08:28:53.579]                           grepl <- base::grepl
[08:28:53.579]                           restarts <- computeRestarts(cond)
[08:28:53.579]                           for (restart in restarts) {
[08:28:53.579]                             name <- restart$name
[08:28:53.579]                             if (is.null(name)) 
[08:28:53.579]                               next
[08:28:53.579]                             if (!grepl(pattern, name)) 
[08:28:53.579]                               next
[08:28:53.579]                             invokeRestart(restart)
[08:28:53.579]                             muffled <- TRUE
[08:28:53.579]                             break
[08:28:53.579]                           }
[08:28:53.579]                         }
[08:28:53.579]                       }
[08:28:53.579]                       invisible(muffled)
[08:28:53.579]                     }
[08:28:53.579]                     muffleCondition(cond, pattern = "^muffle")
[08:28:53.579]                   }
[08:28:53.579]                 }
[08:28:53.579]             }
[08:28:53.579]         }))
[08:28:53.579]     }, error = function(ex) {
[08:28:53.579]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:53.579]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:53.579]                 ...future.rng), started = ...future.startTime, 
[08:28:53.579]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:53.579]             version = "1.8"), class = "FutureResult")
[08:28:53.579]     }, finally = {
[08:28:53.579]         if (!identical(...future.workdir, getwd())) 
[08:28:53.579]             setwd(...future.workdir)
[08:28:53.579]         {
[08:28:53.579]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:53.579]                 ...future.oldOptions$nwarnings <- NULL
[08:28:53.579]             }
[08:28:53.579]             base::options(...future.oldOptions)
[08:28:53.579]             if (.Platform$OS.type == "windows") {
[08:28:53.579]                 old_names <- names(...future.oldEnvVars)
[08:28:53.579]                 envs <- base::Sys.getenv()
[08:28:53.579]                 names <- names(envs)
[08:28:53.579]                 common <- intersect(names, old_names)
[08:28:53.579]                 added <- setdiff(names, old_names)
[08:28:53.579]                 removed <- setdiff(old_names, names)
[08:28:53.579]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:53.579]                   envs[common]]
[08:28:53.579]                 NAMES <- toupper(changed)
[08:28:53.579]                 args <- list()
[08:28:53.579]                 for (kk in seq_along(NAMES)) {
[08:28:53.579]                   name <- changed[[kk]]
[08:28:53.579]                   NAME <- NAMES[[kk]]
[08:28:53.579]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.579]                     next
[08:28:53.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:53.579]                 }
[08:28:53.579]                 NAMES <- toupper(added)
[08:28:53.579]                 for (kk in seq_along(NAMES)) {
[08:28:53.579]                   name <- added[[kk]]
[08:28:53.579]                   NAME <- NAMES[[kk]]
[08:28:53.579]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.579]                     next
[08:28:53.579]                   args[[name]] <- ""
[08:28:53.579]                 }
[08:28:53.579]                 NAMES <- toupper(removed)
[08:28:53.579]                 for (kk in seq_along(NAMES)) {
[08:28:53.579]                   name <- removed[[kk]]
[08:28:53.579]                   NAME <- NAMES[[kk]]
[08:28:53.579]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.579]                     next
[08:28:53.579]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:53.579]                 }
[08:28:53.579]                 if (length(args) > 0) 
[08:28:53.579]                   base::do.call(base::Sys.setenv, args = args)
[08:28:53.579]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:53.579]             }
[08:28:53.579]             else {
[08:28:53.579]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:53.579]             }
[08:28:53.579]             {
[08:28:53.579]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:53.579]                   0L) {
[08:28:53.579]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:53.579]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:53.579]                   base::options(opts)
[08:28:53.579]                 }
[08:28:53.579]                 {
[08:28:53.579]                   NULL
[08:28:53.579]                   options(future.plan = NULL)
[08:28:53.579]                   if (is.na(NA_character_)) 
[08:28:53.579]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:53.579]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:53.579]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:53.579]                     .init = FALSE)
[08:28:53.579]                 }
[08:28:53.579]             }
[08:28:53.579]         }
[08:28:53.579]     })
[08:28:53.579]     if (TRUE) {
[08:28:53.579]         base::sink(type = "output", split = FALSE)
[08:28:53.579]         if (TRUE) {
[08:28:53.579]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:53.579]         }
[08:28:53.579]         else {
[08:28:53.579]             ...future.result["stdout"] <- base::list(NULL)
[08:28:53.579]         }
[08:28:53.579]         base::close(...future.stdout)
[08:28:53.579]         ...future.stdout <- NULL
[08:28:53.579]     }
[08:28:53.579]     ...future.result$conditions <- ...future.conditions
[08:28:53.579]     ...future.result$finished <- base::Sys.time()
[08:28:53.579]     ...future.result
[08:28:53.579] }
[08:28:53.634] ClusterFuture started
[08:28:53.634] result() for ClusterFuture ...
[08:28:53.635] receiveMessageFromWorker() for ClusterFuture ...
[08:28:53.635] - Validating connection of ClusterFuture
[08:28:53.666] - received message: FutureResult
[08:28:53.666] - Received FutureResult
[08:28:53.669] - Erased future from FutureRegistry
[08:28:53.669] result() for ClusterFuture ...
[08:28:53.669] - result already collected: FutureResult
[08:28:53.669] result() for ClusterFuture ... done
[08:28:53.669] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:53.669] result() for ClusterFuture ... done
[08:28:53.670] result() for ClusterFuture ...
[08:28:53.670] - result already collected: FutureResult
[08:28:53.670] result() for ClusterFuture ... done
[08:28:53.670] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:53.670] plan(): nbrOfWorkers() = 1
> f <- future({ Sys.sleep(5); 1 })
[08:28:53.670] getGlobalsAndPackages() ...
[08:28:53.670] Searching for globals...
[08:28:53.678] - globals found: [2] ‘{’, ‘Sys.sleep’
[08:28:53.678] Searching for globals ... DONE
[08:28:53.678] Resolving globals: FALSE
[08:28:53.679] 
[08:28:53.679] 
[08:28:53.679] getGlobalsAndPackages() ... DONE
[08:28:53.680] run() for ‘Future’ ...
[08:28:53.680] - state: ‘created’
[08:28:53.680] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[08:28:53.687] - Future class: ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[08:28:53.687] - Copy elements of temporary ‘ClusterFuture’ to final ‘Future’ object ...
[08:28:53.687]   - Field: ‘node’
[08:28:53.687]   - Field: ‘label’
[08:28:53.687]   - Field: ‘local’
[08:28:53.687]   - Field: ‘owner’
[08:28:53.687]   - Field: ‘envir’
[08:28:53.688]   - Field: ‘workers’
[08:28:53.688]   - Field: ‘packages’
[08:28:53.688]   - Field: ‘gc’
[08:28:53.688]   - Field: ‘conditions’
[08:28:53.688]   - Field: ‘persistent’
[08:28:53.688]   - Field: ‘expr’
[08:28:53.688]   - Field: ‘uuid’
[08:28:53.688]   - Field: ‘seed’
[08:28:53.688]   - Field: ‘version’
[08:28:53.689]   - Field: ‘result’
[08:28:53.689]   - Field: ‘asynchronous’
[08:28:53.689]   - Field: ‘calls’
[08:28:53.689]   - Field: ‘globals’
[08:28:53.689]   - Field: ‘stdout’
[08:28:53.689]   - Field: ‘earlySignal’
[08:28:53.689]   - Field: ‘lazy’
[08:28:53.689]   - Field: ‘state’
[08:28:53.689] - Copy elements of temporary ‘ClusterFuture’ to final ‘Future’ object ... done
[08:28:53.690] - Launch lazy future ...
[08:28:53.690] Packages needed by the future expression (n = 0): <none>
[08:28:53.690] Packages needed by future strategies (n = 0): <none>
[08:28:53.690] {
[08:28:53.690]     {
[08:28:53.690]         {
[08:28:53.690]             ...future.startTime <- base::Sys.time()
[08:28:53.690]             {
[08:28:53.690]                 {
[08:28:53.690]                   {
[08:28:53.690]                     base::local({
[08:28:53.690]                       has_future <- base::requireNamespace("future", 
[08:28:53.690]                         quietly = TRUE)
[08:28:53.690]                       if (has_future) {
[08:28:53.690]                         ns <- base::getNamespace("future")
[08:28:53.690]                         version <- ns[[".package"]][["version"]]
[08:28:53.690]                         if (is.null(version)) 
[08:28:53.690]                           version <- utils::packageVersion("future")
[08:28:53.690]                       }
[08:28:53.690]                       else {
[08:28:53.690]                         version <- NULL
[08:28:53.690]                       }
[08:28:53.690]                       if (!has_future || version < "1.8.0") {
[08:28:53.690]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:53.690]                           "", base::R.version$version.string), 
[08:28:53.690]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:53.690]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:53.690]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:53.690]                             "release", "version")], collapse = " "), 
[08:28:53.690]                           hostname = base::Sys.info()[["nodename"]])
[08:28:53.690]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:53.690]                           info)
[08:28:53.690]                         info <- base::paste(info, collapse = "; ")
[08:28:53.690]                         if (!has_future) {
[08:28:53.690]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:53.690]                             info)
[08:28:53.690]                         }
[08:28:53.690]                         else {
[08:28:53.690]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:53.690]                             info, version)
[08:28:53.690]                         }
[08:28:53.690]                         base::stop(msg)
[08:28:53.690]                       }
[08:28:53.690]                     })
[08:28:53.690]                   }
[08:28:53.690]                   ...future.strategy.old <- future::plan("list")
[08:28:53.690]                   options(future.plan = NULL)
[08:28:53.690]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:53.690]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:53.690]                 }
[08:28:53.690]                 ...future.workdir <- getwd()
[08:28:53.690]             }
[08:28:53.690]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:53.690]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:53.690]         }
[08:28:53.690]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:53.690]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:53.690]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:53.690]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:53.690]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:53.690]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:53.690]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:53.690]             base::names(...future.oldOptions))
[08:28:53.690]     }
[08:28:53.690]     if (FALSE) {
[08:28:53.690]     }
[08:28:53.690]     else {
[08:28:53.690]         if (TRUE) {
[08:28:53.690]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:53.690]                 open = "w")
[08:28:53.690]         }
[08:28:53.690]         else {
[08:28:53.690]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:53.690]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:53.690]         }
[08:28:53.690]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:53.690]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:53.690]             base::sink(type = "output", split = FALSE)
[08:28:53.690]             base::close(...future.stdout)
[08:28:53.690]         }, add = TRUE)
[08:28:53.690]     }
[08:28:53.690]     ...future.frame <- base::sys.nframe()
[08:28:53.690]     ...future.conditions <- base::list()
[08:28:53.690]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:53.690]     if (FALSE) {
[08:28:53.690]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:53.690]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:53.690]     }
[08:28:53.690]     ...future.result <- base::tryCatch({
[08:28:53.690]         base::withCallingHandlers({
[08:28:53.690]             ...future.value <- base::withVisible(base::local({
[08:28:53.690]                 ...future.makeSendCondition <- base::local({
[08:28:53.690]                   sendCondition <- NULL
[08:28:53.690]                   function(frame = 1L) {
[08:28:53.690]                     if (is.function(sendCondition)) 
[08:28:53.690]                       return(sendCondition)
[08:28:53.690]                     ns <- getNamespace("parallel")
[08:28:53.690]                     if (exists("sendData", mode = "function", 
[08:28:53.690]                       envir = ns)) {
[08:28:53.690]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:53.690]                         envir = ns)
[08:28:53.690]                       envir <- sys.frame(frame)
[08:28:53.690]                       master <- NULL
[08:28:53.690]                       while (!identical(envir, .GlobalEnv) && 
[08:28:53.690]                         !identical(envir, emptyenv())) {
[08:28:53.690]                         if (exists("master", mode = "list", envir = envir, 
[08:28:53.690]                           inherits = FALSE)) {
[08:28:53.690]                           master <- get("master", mode = "list", 
[08:28:53.690]                             envir = envir, inherits = FALSE)
[08:28:53.690]                           if (inherits(master, c("SOCKnode", 
[08:28:53.690]                             "SOCK0node"))) {
[08:28:53.690]                             sendCondition <<- function(cond) {
[08:28:53.690]                               data <- list(type = "VALUE", value = cond, 
[08:28:53.690]                                 success = TRUE)
[08:28:53.690]                               parallel_sendData(master, data)
[08:28:53.690]                             }
[08:28:53.690]                             return(sendCondition)
[08:28:53.690]                           }
[08:28:53.690]                         }
[08:28:53.690]                         frame <- frame + 1L
[08:28:53.690]                         envir <- sys.frame(frame)
[08:28:53.690]                       }
[08:28:53.690]                     }
[08:28:53.690]                     sendCondition <<- function(cond) NULL
[08:28:53.690]                   }
[08:28:53.690]                 })
[08:28:53.690]                 withCallingHandlers({
[08:28:53.690]                   {
[08:28:53.690]                     Sys.sleep(5)
[08:28:53.690]                     1
[08:28:53.690]                   }
[08:28:53.690]                 }, immediateCondition = function(cond) {
[08:28:53.690]                   sendCondition <- ...future.makeSendCondition()
[08:28:53.690]                   sendCondition(cond)
[08:28:53.690]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.690]                   {
[08:28:53.690]                     inherits <- base::inherits
[08:28:53.690]                     invokeRestart <- base::invokeRestart
[08:28:53.690]                     is.null <- base::is.null
[08:28:53.690]                     muffled <- FALSE
[08:28:53.690]                     if (inherits(cond, "message")) {
[08:28:53.690]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:53.690]                       if (muffled) 
[08:28:53.690]                         invokeRestart("muffleMessage")
[08:28:53.690]                     }
[08:28:53.690]                     else if (inherits(cond, "warning")) {
[08:28:53.690]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:53.690]                       if (muffled) 
[08:28:53.690]                         invokeRestart("muffleWarning")
[08:28:53.690]                     }
[08:28:53.690]                     else if (inherits(cond, "condition")) {
[08:28:53.690]                       if (!is.null(pattern)) {
[08:28:53.690]                         computeRestarts <- base::computeRestarts
[08:28:53.690]                         grepl <- base::grepl
[08:28:53.690]                         restarts <- computeRestarts(cond)
[08:28:53.690]                         for (restart in restarts) {
[08:28:53.690]                           name <- restart$name
[08:28:53.690]                           if (is.null(name)) 
[08:28:53.690]                             next
[08:28:53.690]                           if (!grepl(pattern, name)) 
[08:28:53.690]                             next
[08:28:53.690]                           invokeRestart(restart)
[08:28:53.690]                           muffled <- TRUE
[08:28:53.690]                           break
[08:28:53.690]                         }
[08:28:53.690]                       }
[08:28:53.690]                     }
[08:28:53.690]                     invisible(muffled)
[08:28:53.690]                   }
[08:28:53.690]                   muffleCondition(cond)
[08:28:53.690]                 })
[08:28:53.690]             }))
[08:28:53.690]             future::FutureResult(value = ...future.value$value, 
[08:28:53.690]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:53.690]                   ...future.rng), globalenv = if (FALSE) 
[08:28:53.690]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:53.690]                     ...future.globalenv.names))
[08:28:53.690]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:53.690]         }, condition = base::local({
[08:28:53.690]             c <- base::c
[08:28:53.690]             inherits <- base::inherits
[08:28:53.690]             invokeRestart <- base::invokeRestart
[08:28:53.690]             length <- base::length
[08:28:53.690]             list <- base::list
[08:28:53.690]             seq.int <- base::seq.int
[08:28:53.690]             signalCondition <- base::signalCondition
[08:28:53.690]             sys.calls <- base::sys.calls
[08:28:53.690]             `[[` <- base::`[[`
[08:28:53.690]             `+` <- base::`+`
[08:28:53.690]             `<<-` <- base::`<<-`
[08:28:53.690]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:53.690]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:53.690]                   3L)]
[08:28:53.690]             }
[08:28:53.690]             function(cond) {
[08:28:53.690]                 is_error <- inherits(cond, "error")
[08:28:53.690]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:53.690]                   NULL)
[08:28:53.690]                 if (is_error) {
[08:28:53.690]                   sessionInformation <- function() {
[08:28:53.690]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:53.690]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:53.690]                       search = base::search(), system = base::Sys.info())
[08:28:53.690]                   }
[08:28:53.690]                   ...future.conditions[[length(...future.conditions) + 
[08:28:53.690]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:53.690]                     cond$call), session = sessionInformation(), 
[08:28:53.690]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:53.690]                   signalCondition(cond)
[08:28:53.690]                 }
[08:28:53.690]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:53.690]                 "immediateCondition"))) {
[08:28:53.690]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:53.690]                   ...future.conditions[[length(...future.conditions) + 
[08:28:53.690]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:53.690]                   if (TRUE && !signal) {
[08:28:53.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.690]                     {
[08:28:53.690]                       inherits <- base::inherits
[08:28:53.690]                       invokeRestart <- base::invokeRestart
[08:28:53.690]                       is.null <- base::is.null
[08:28:53.690]                       muffled <- FALSE
[08:28:53.690]                       if (inherits(cond, "message")) {
[08:28:53.690]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:53.690]                         if (muffled) 
[08:28:53.690]                           invokeRestart("muffleMessage")
[08:28:53.690]                       }
[08:28:53.690]                       else if (inherits(cond, "warning")) {
[08:28:53.690]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:53.690]                         if (muffled) 
[08:28:53.690]                           invokeRestart("muffleWarning")
[08:28:53.690]                       }
[08:28:53.690]                       else if (inherits(cond, "condition")) {
[08:28:53.690]                         if (!is.null(pattern)) {
[08:28:53.690]                           computeRestarts <- base::computeRestarts
[08:28:53.690]                           grepl <- base::grepl
[08:28:53.690]                           restarts <- computeRestarts(cond)
[08:28:53.690]                           for (restart in restarts) {
[08:28:53.690]                             name <- restart$name
[08:28:53.690]                             if (is.null(name)) 
[08:28:53.690]                               next
[08:28:53.690]                             if (!grepl(pattern, name)) 
[08:28:53.690]                               next
[08:28:53.690]                             invokeRestart(restart)
[08:28:53.690]                             muffled <- TRUE
[08:28:53.690]                             break
[08:28:53.690]                           }
[08:28:53.690]                         }
[08:28:53.690]                       }
[08:28:53.690]                       invisible(muffled)
[08:28:53.690]                     }
[08:28:53.690]                     muffleCondition(cond, pattern = "^muffle")
[08:28:53.690]                   }
[08:28:53.690]                 }
[08:28:53.690]                 else {
[08:28:53.690]                   if (TRUE) {
[08:28:53.690]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:53.690]                     {
[08:28:53.690]                       inherits <- base::inherits
[08:28:53.690]                       invokeRestart <- base::invokeRestart
[08:28:53.690]                       is.null <- base::is.null
[08:28:53.690]                       muffled <- FALSE
[08:28:53.690]                       if (inherits(cond, "message")) {
[08:28:53.690]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:53.690]                         if (muffled) 
[08:28:53.690]                           invokeRestart("muffleMessage")
[08:28:53.690]                       }
[08:28:53.690]                       else if (inherits(cond, "warning")) {
[08:28:53.690]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:53.690]                         if (muffled) 
[08:28:53.690]                           invokeRestart("muffleWarning")
[08:28:53.690]                       }
[08:28:53.690]                       else if (inherits(cond, "condition")) {
[08:28:53.690]                         if (!is.null(pattern)) {
[08:28:53.690]                           computeRestarts <- base::computeRestarts
[08:28:53.690]                           grepl <- base::grepl
[08:28:53.690]                           restarts <- computeRestarts(cond)
[08:28:53.690]                           for (restart in restarts) {
[08:28:53.690]                             name <- restart$name
[08:28:53.690]                             if (is.null(name)) 
[08:28:53.690]                               next
[08:28:53.690]                             if (!grepl(pattern, name)) 
[08:28:53.690]                               next
[08:28:53.690]                             invokeRestart(restart)
[08:28:53.690]                             muffled <- TRUE
[08:28:53.690]                             break
[08:28:53.690]                           }
[08:28:53.690]                         }
[08:28:53.690]                       }
[08:28:53.690]                       invisible(muffled)
[08:28:53.690]                     }
[08:28:53.690]                     muffleCondition(cond, pattern = "^muffle")
[08:28:53.690]                   }
[08:28:53.690]                 }
[08:28:53.690]             }
[08:28:53.690]         }))
[08:28:53.690]     }, error = function(ex) {
[08:28:53.690]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:53.690]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:53.690]                 ...future.rng), started = ...future.startTime, 
[08:28:53.690]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:53.690]             version = "1.8"), class = "FutureResult")
[08:28:53.690]     }, finally = {
[08:28:53.690]         if (!identical(...future.workdir, getwd())) 
[08:28:53.690]             setwd(...future.workdir)
[08:28:53.690]         {
[08:28:53.690]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:53.690]                 ...future.oldOptions$nwarnings <- NULL
[08:28:53.690]             }
[08:28:53.690]             base::options(...future.oldOptions)
[08:28:53.690]             if (.Platform$OS.type == "windows") {
[08:28:53.690]                 old_names <- names(...future.oldEnvVars)
[08:28:53.690]                 envs <- base::Sys.getenv()
[08:28:53.690]                 names <- names(envs)
[08:28:53.690]                 common <- intersect(names, old_names)
[08:28:53.690]                 added <- setdiff(names, old_names)
[08:28:53.690]                 removed <- setdiff(old_names, names)
[08:28:53.690]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:53.690]                   envs[common]]
[08:28:53.690]                 NAMES <- toupper(changed)
[08:28:53.690]                 args <- list()
[08:28:53.690]                 for (kk in seq_along(NAMES)) {
[08:28:53.690]                   name <- changed[[kk]]
[08:28:53.690]                   NAME <- NAMES[[kk]]
[08:28:53.690]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.690]                     next
[08:28:53.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:53.690]                 }
[08:28:53.690]                 NAMES <- toupper(added)
[08:28:53.690]                 for (kk in seq_along(NAMES)) {
[08:28:53.690]                   name <- added[[kk]]
[08:28:53.690]                   NAME <- NAMES[[kk]]
[08:28:53.690]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.690]                     next
[08:28:53.690]                   args[[name]] <- ""
[08:28:53.690]                 }
[08:28:53.690]                 NAMES <- toupper(removed)
[08:28:53.690]                 for (kk in seq_along(NAMES)) {
[08:28:53.690]                   name <- removed[[kk]]
[08:28:53.690]                   NAME <- NAMES[[kk]]
[08:28:53.690]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:53.690]                     next
[08:28:53.690]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:53.690]                 }
[08:28:53.690]                 if (length(args) > 0) 
[08:28:53.690]                   base::do.call(base::Sys.setenv, args = args)
[08:28:53.690]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:53.690]             }
[08:28:53.690]             else {
[08:28:53.690]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:53.690]             }
[08:28:53.690]             {
[08:28:53.690]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:53.690]                   0L) {
[08:28:53.690]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:53.690]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:53.690]                   base::options(opts)
[08:28:53.690]                 }
[08:28:53.690]                 {
[08:28:53.690]                   NULL
[08:28:53.690]                   options(future.plan = NULL)
[08:28:53.690]                   if (is.na(NA_character_)) 
[08:28:53.690]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:53.690]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:53.690]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:53.690]                     .init = FALSE)
[08:28:53.690]                 }
[08:28:53.690]             }
[08:28:53.690]         }
[08:28:53.690]     })
[08:28:53.690]     if (TRUE) {
[08:28:53.690]         base::sink(type = "output", split = FALSE)
[08:28:53.690]         if (TRUE) {
[08:28:53.690]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:53.690]         }
[08:28:53.690]         else {
[08:28:53.690]             ...future.result["stdout"] <- base::list(NULL)
[08:28:53.690]         }
[08:28:53.690]         base::close(...future.stdout)
[08:28:53.690]         ...future.stdout <- NULL
[08:28:53.690]     }
[08:28:53.690]     ...future.result$conditions <- ...future.conditions
[08:28:53.690]     ...future.result$finished <- base::Sys.time()
[08:28:53.690]     ...future.result
[08:28:53.690] }
[08:28:53.694] ClusterFuture started
[08:28:53.694] - Launch lazy future ... done
[08:28:53.694] run() for ‘ClusterFuture’ ... done
> 
> res <- tryCatch({
+   requestNode(function() { }, workers = f$workers, timeout = 0.5, delta = 0.1)
+ }, error = identity)
[08:28:53.694] Poll #1 (0): usedNodes() = 1, workers = 1
[08:28:53.795] Poll #2 (0.1 secs): usedNodes() = 1, workers = 1
[08:28:53.898] Poll #3 (0.2 secs): usedNodes() = 1, workers = 1
[08:28:54.001] Poll #4 (0.31 secs): usedNodes() = 1, workers = 1
[08:28:54.105] Poll #5 (0.41 secs): usedNodes() = 1, workers = 1
[08:28:54.210] TIMEOUT: All 1 cluster nodes are still occupied after 0.52 secs (polled 6 times)
> stopifnot(inherits(res, "error"))
> 
> v <- value(f)
[08:28:54.210] result() for ClusterFuture ...
[08:28:54.211] receiveMessageFromWorker() for ClusterFuture ...
[08:28:54.211] - Validating connection of ClusterFuture
[08:28:58.742] - received message: FutureResult
[08:28:58.742] - Received FutureResult
[08:28:58.742] - Erased future from FutureRegistry
[08:28:58.742] result() for ClusterFuture ...
[08:28:58.742] - result already collected: FutureResult
[08:28:58.743] result() for ClusterFuture ... done
[08:28:58.743] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:58.743] result() for ClusterFuture ... done
[08:28:58.743] result() for ClusterFuture ...
[08:28:58.743] - result already collected: FutureResult
[08:28:58.743] result() for ClusterFuture ... done
> print(v)
[1] 1
> stopifnot(v == 1L)
> 
> message("*** requestNode() - timeout ... DONE")
*** requestNode() - timeout ... DONE
> 
> message("*** requestNode() ... DONE")
*** requestNode() ... DONE
> 
> source("incl/end.R")
[08:28:58.744] plan(): Setting new future strategy stack:
[08:28:58.744] List of future strategies:
[08:28:58.744] 1. FutureStrategy:
[08:28:58.744]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:58.744]    - tweaked: FALSE
[08:28:58.744]    - call: future::plan(oplan)
[08:28:58.745] plan(): nbrOfWorkers() = 1
> 
