
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:28:30.934] plan(): Setting new future strategy stack:
[08:28:30.934] List of future strategies:
[08:28:30.934] 1. sequential:
[08:28:30.934]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:30.934]    - tweaked: FALSE
[08:28:30.934]    - call: future::plan("sequential")
[08:28:30.949] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[08:28:30.973] plan(): Setting new future strategy stack:
[08:28:30.974] List of future strategies:
[08:28:30.974] 1. sequential:
[08:28:30.974]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:30.974]    - tweaked: FALSE
[08:28:30.974]    - call: plan(strategy)
[08:28:30.986] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[08:28:31.014] plan(): Setting new future strategy stack:
[08:28:31.014] List of future strategies:
[08:28:31.014] 1. multisession:
[08:28:31.014]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:31.014]    - tweaked: FALSE
[08:28:31.014]    - call: plan(strategy)
[08:28:31.015] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:31.015] multisession:
[08:28:31.015] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[08:28:31.015] - tweaked: FALSE
[08:28:31.015] - call: plan(strategy)
[08:28:31.019] getGlobalsAndPackages() ...
[08:28:31.019] Not searching for globals
[08:28:31.019] - globals: [0] <none>
[08:28:31.019] getGlobalsAndPackages() ... DONE
[08:28:31.508] Packages needed by the future expression (n = 0): <none>
[08:28:31.508] Packages needed by future strategies (n = 0): <none>
[08:28:31.509] {
[08:28:31.509]     {
[08:28:31.509]         {
[08:28:31.509]             ...future.startTime <- base::Sys.time()
[08:28:31.509]             {
[08:28:31.509]                 {
[08:28:31.509]                   {
[08:28:31.509]                     {
[08:28:31.509]                       base::local({
[08:28:31.509]                         has_future <- base::requireNamespace("future", 
[08:28:31.509]                           quietly = TRUE)
[08:28:31.509]                         if (has_future) {
[08:28:31.509]                           ns <- base::getNamespace("future")
[08:28:31.509]                           version <- ns[[".package"]][["version"]]
[08:28:31.509]                           if (is.null(version)) 
[08:28:31.509]                             version <- utils::packageVersion("future")
[08:28:31.509]                         }
[08:28:31.509]                         else {
[08:28:31.509]                           version <- NULL
[08:28:31.509]                         }
[08:28:31.509]                         if (!has_future || version < "1.8.0") {
[08:28:31.509]                           info <- base::c(r_version = base::gsub("R version ", 
[08:28:31.509]                             "", base::R.version$version.string), 
[08:28:31.509]                             platform = base::sprintf("%s (%s-bit)", 
[08:28:31.509]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:31.509]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:31.509]                               "release", "version")], collapse = " "), 
[08:28:31.509]                             hostname = base::Sys.info()[["nodename"]])
[08:28:31.509]                           info <- base::sprintf("%s: %s", base::names(info), 
[08:28:31.509]                             info)
[08:28:31.509]                           info <- base::paste(info, collapse = "; ")
[08:28:31.509]                           if (!has_future) {
[08:28:31.509]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:31.509]                               info)
[08:28:31.509]                           }
[08:28:31.509]                           else {
[08:28:31.509]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:31.509]                               info, version)
[08:28:31.509]                           }
[08:28:31.509]                           base::stop(msg)
[08:28:31.509]                         }
[08:28:31.509]                       })
[08:28:31.509]                     }
[08:28:31.509]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[08:28:31.509]                     base::options(mc.cores = 1L)
[08:28:31.509]                   }
[08:28:31.509]                   ...future.strategy.old <- future::plan("list")
[08:28:31.509]                   options(future.plan = NULL)
[08:28:31.509]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.509]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:31.509]                 }
[08:28:31.509]                 ...future.workdir <- getwd()
[08:28:31.509]             }
[08:28:31.509]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:31.509]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:31.509]         }
[08:28:31.509]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:31.509]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:31.509]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:31.509]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:31.509]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:31.509]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:31.509]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:31.509]             base::names(...future.oldOptions))
[08:28:31.509]     }
[08:28:31.509]     if (FALSE) {
[08:28:31.509]     }
[08:28:31.509]     else {
[08:28:31.509]         if (TRUE) {
[08:28:31.509]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:31.509]                 open = "w")
[08:28:31.509]         }
[08:28:31.509]         else {
[08:28:31.509]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:31.509]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:31.509]         }
[08:28:31.509]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:31.509]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:31.509]             base::sink(type = "output", split = FALSE)
[08:28:31.509]             base::close(...future.stdout)
[08:28:31.509]         }, add = TRUE)
[08:28:31.509]     }
[08:28:31.509]     ...future.frame <- base::sys.nframe()
[08:28:31.509]     ...future.conditions <- base::list()
[08:28:31.509]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:31.509]     if (FALSE) {
[08:28:31.509]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:31.509]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:31.509]     }
[08:28:31.509]     ...future.result <- base::tryCatch({
[08:28:31.509]         base::withCallingHandlers({
[08:28:31.509]             ...future.value <- base::withVisible(base::local({
[08:28:31.509]                 ...future.makeSendCondition <- base::local({
[08:28:31.509]                   sendCondition <- NULL
[08:28:31.509]                   function(frame = 1L) {
[08:28:31.509]                     if (is.function(sendCondition)) 
[08:28:31.509]                       return(sendCondition)
[08:28:31.509]                     ns <- getNamespace("parallel")
[08:28:31.509]                     if (exists("sendData", mode = "function", 
[08:28:31.509]                       envir = ns)) {
[08:28:31.509]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:31.509]                         envir = ns)
[08:28:31.509]                       envir <- sys.frame(frame)
[08:28:31.509]                       master <- NULL
[08:28:31.509]                       while (!identical(envir, .GlobalEnv) && 
[08:28:31.509]                         !identical(envir, emptyenv())) {
[08:28:31.509]                         if (exists("master", mode = "list", envir = envir, 
[08:28:31.509]                           inherits = FALSE)) {
[08:28:31.509]                           master <- get("master", mode = "list", 
[08:28:31.509]                             envir = envir, inherits = FALSE)
[08:28:31.509]                           if (inherits(master, c("SOCKnode", 
[08:28:31.509]                             "SOCK0node"))) {
[08:28:31.509]                             sendCondition <<- function(cond) {
[08:28:31.509]                               data <- list(type = "VALUE", value = cond, 
[08:28:31.509]                                 success = TRUE)
[08:28:31.509]                               parallel_sendData(master, data)
[08:28:31.509]                             }
[08:28:31.509]                             return(sendCondition)
[08:28:31.509]                           }
[08:28:31.509]                         }
[08:28:31.509]                         frame <- frame + 1L
[08:28:31.509]                         envir <- sys.frame(frame)
[08:28:31.509]                       }
[08:28:31.509]                     }
[08:28:31.509]                     sendCondition <<- function(cond) NULL
[08:28:31.509]                   }
[08:28:31.509]                 })
[08:28:31.509]                 withCallingHandlers({
[08:28:31.509]                   NA
[08:28:31.509]                 }, immediateCondition = function(cond) {
[08:28:31.509]                   sendCondition <- ...future.makeSendCondition()
[08:28:31.509]                   sendCondition(cond)
[08:28:31.509]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.509]                   {
[08:28:31.509]                     inherits <- base::inherits
[08:28:31.509]                     invokeRestart <- base::invokeRestart
[08:28:31.509]                     is.null <- base::is.null
[08:28:31.509]                     muffled <- FALSE
[08:28:31.509]                     if (inherits(cond, "message")) {
[08:28:31.509]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:31.509]                       if (muffled) 
[08:28:31.509]                         invokeRestart("muffleMessage")
[08:28:31.509]                     }
[08:28:31.509]                     else if (inherits(cond, "warning")) {
[08:28:31.509]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:31.509]                       if (muffled) 
[08:28:31.509]                         invokeRestart("muffleWarning")
[08:28:31.509]                     }
[08:28:31.509]                     else if (inherits(cond, "condition")) {
[08:28:31.509]                       if (!is.null(pattern)) {
[08:28:31.509]                         computeRestarts <- base::computeRestarts
[08:28:31.509]                         grepl <- base::grepl
[08:28:31.509]                         restarts <- computeRestarts(cond)
[08:28:31.509]                         for (restart in restarts) {
[08:28:31.509]                           name <- restart$name
[08:28:31.509]                           if (is.null(name)) 
[08:28:31.509]                             next
[08:28:31.509]                           if (!grepl(pattern, name)) 
[08:28:31.509]                             next
[08:28:31.509]                           invokeRestart(restart)
[08:28:31.509]                           muffled <- TRUE
[08:28:31.509]                           break
[08:28:31.509]                         }
[08:28:31.509]                       }
[08:28:31.509]                     }
[08:28:31.509]                     invisible(muffled)
[08:28:31.509]                   }
[08:28:31.509]                   muffleCondition(cond)
[08:28:31.509]                 })
[08:28:31.509]             }))
[08:28:31.509]             future::FutureResult(value = ...future.value$value, 
[08:28:31.509]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.509]                   ...future.rng), globalenv = if (FALSE) 
[08:28:31.509]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:31.509]                     ...future.globalenv.names))
[08:28:31.509]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:31.509]         }, condition = base::local({
[08:28:31.509]             c <- base::c
[08:28:31.509]             inherits <- base::inherits
[08:28:31.509]             invokeRestart <- base::invokeRestart
[08:28:31.509]             length <- base::length
[08:28:31.509]             list <- base::list
[08:28:31.509]             seq.int <- base::seq.int
[08:28:31.509]             signalCondition <- base::signalCondition
[08:28:31.509]             sys.calls <- base::sys.calls
[08:28:31.509]             `[[` <- base::`[[`
[08:28:31.509]             `+` <- base::`+`
[08:28:31.509]             `<<-` <- base::`<<-`
[08:28:31.509]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:31.509]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:31.509]                   3L)]
[08:28:31.509]             }
[08:28:31.509]             function(cond) {
[08:28:31.509]                 is_error <- inherits(cond, "error")
[08:28:31.509]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:31.509]                   NULL)
[08:28:31.509]                 if (is_error) {
[08:28:31.509]                   sessionInformation <- function() {
[08:28:31.509]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:31.509]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:31.509]                       search = base::search(), system = base::Sys.info())
[08:28:31.509]                   }
[08:28:31.509]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.509]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:31.509]                     cond$call), session = sessionInformation(), 
[08:28:31.509]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:31.509]                   signalCondition(cond)
[08:28:31.509]                 }
[08:28:31.509]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:31.509]                 "immediateCondition"))) {
[08:28:31.509]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:31.509]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.509]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:31.509]                   if (TRUE && !signal) {
[08:28:31.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.509]                     {
[08:28:31.509]                       inherits <- base::inherits
[08:28:31.509]                       invokeRestart <- base::invokeRestart
[08:28:31.509]                       is.null <- base::is.null
[08:28:31.509]                       muffled <- FALSE
[08:28:31.509]                       if (inherits(cond, "message")) {
[08:28:31.509]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.509]                         if (muffled) 
[08:28:31.509]                           invokeRestart("muffleMessage")
[08:28:31.509]                       }
[08:28:31.509]                       else if (inherits(cond, "warning")) {
[08:28:31.509]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.509]                         if (muffled) 
[08:28:31.509]                           invokeRestart("muffleWarning")
[08:28:31.509]                       }
[08:28:31.509]                       else if (inherits(cond, "condition")) {
[08:28:31.509]                         if (!is.null(pattern)) {
[08:28:31.509]                           computeRestarts <- base::computeRestarts
[08:28:31.509]                           grepl <- base::grepl
[08:28:31.509]                           restarts <- computeRestarts(cond)
[08:28:31.509]                           for (restart in restarts) {
[08:28:31.509]                             name <- restart$name
[08:28:31.509]                             if (is.null(name)) 
[08:28:31.509]                               next
[08:28:31.509]                             if (!grepl(pattern, name)) 
[08:28:31.509]                               next
[08:28:31.509]                             invokeRestart(restart)
[08:28:31.509]                             muffled <- TRUE
[08:28:31.509]                             break
[08:28:31.509]                           }
[08:28:31.509]                         }
[08:28:31.509]                       }
[08:28:31.509]                       invisible(muffled)
[08:28:31.509]                     }
[08:28:31.509]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.509]                   }
[08:28:31.509]                 }
[08:28:31.509]                 else {
[08:28:31.509]                   if (TRUE) {
[08:28:31.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.509]                     {
[08:28:31.509]                       inherits <- base::inherits
[08:28:31.509]                       invokeRestart <- base::invokeRestart
[08:28:31.509]                       is.null <- base::is.null
[08:28:31.509]                       muffled <- FALSE
[08:28:31.509]                       if (inherits(cond, "message")) {
[08:28:31.509]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.509]                         if (muffled) 
[08:28:31.509]                           invokeRestart("muffleMessage")
[08:28:31.509]                       }
[08:28:31.509]                       else if (inherits(cond, "warning")) {
[08:28:31.509]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.509]                         if (muffled) 
[08:28:31.509]                           invokeRestart("muffleWarning")
[08:28:31.509]                       }
[08:28:31.509]                       else if (inherits(cond, "condition")) {
[08:28:31.509]                         if (!is.null(pattern)) {
[08:28:31.509]                           computeRestarts <- base::computeRestarts
[08:28:31.509]                           grepl <- base::grepl
[08:28:31.509]                           restarts <- computeRestarts(cond)
[08:28:31.509]                           for (restart in restarts) {
[08:28:31.509]                             name <- restart$name
[08:28:31.509]                             if (is.null(name)) 
[08:28:31.509]                               next
[08:28:31.509]                             if (!grepl(pattern, name)) 
[08:28:31.509]                               next
[08:28:31.509]                             invokeRestart(restart)
[08:28:31.509]                             muffled <- TRUE
[08:28:31.509]                             break
[08:28:31.509]                           }
[08:28:31.509]                         }
[08:28:31.509]                       }
[08:28:31.509]                       invisible(muffled)
[08:28:31.509]                     }
[08:28:31.509]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.509]                   }
[08:28:31.509]                 }
[08:28:31.509]             }
[08:28:31.509]         }))
[08:28:31.509]     }, error = function(ex) {
[08:28:31.509]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:31.509]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.509]                 ...future.rng), started = ...future.startTime, 
[08:28:31.509]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:31.509]             version = "1.8"), class = "FutureResult")
[08:28:31.509]     }, finally = {
[08:28:31.509]         if (!identical(...future.workdir, getwd())) 
[08:28:31.509]             setwd(...future.workdir)
[08:28:31.509]         {
[08:28:31.509]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:31.509]                 ...future.oldOptions$nwarnings <- NULL
[08:28:31.509]             }
[08:28:31.509]             base::options(...future.oldOptions)
[08:28:31.509]             if (.Platform$OS.type == "windows") {
[08:28:31.509]                 old_names <- names(...future.oldEnvVars)
[08:28:31.509]                 envs <- base::Sys.getenv()
[08:28:31.509]                 names <- names(envs)
[08:28:31.509]                 common <- intersect(names, old_names)
[08:28:31.509]                 added <- setdiff(names, old_names)
[08:28:31.509]                 removed <- setdiff(old_names, names)
[08:28:31.509]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:31.509]                   envs[common]]
[08:28:31.509]                 NAMES <- toupper(changed)
[08:28:31.509]                 args <- list()
[08:28:31.509]                 for (kk in seq_along(NAMES)) {
[08:28:31.509]                   name <- changed[[kk]]
[08:28:31.509]                   NAME <- NAMES[[kk]]
[08:28:31.509]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.509]                     next
[08:28:31.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.509]                 }
[08:28:31.509]                 NAMES <- toupper(added)
[08:28:31.509]                 for (kk in seq_along(NAMES)) {
[08:28:31.509]                   name <- added[[kk]]
[08:28:31.509]                   NAME <- NAMES[[kk]]
[08:28:31.509]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.509]                     next
[08:28:31.509]                   args[[name]] <- ""
[08:28:31.509]                 }
[08:28:31.509]                 NAMES <- toupper(removed)
[08:28:31.509]                 for (kk in seq_along(NAMES)) {
[08:28:31.509]                   name <- removed[[kk]]
[08:28:31.509]                   NAME <- NAMES[[kk]]
[08:28:31.509]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.509]                     next
[08:28:31.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.509]                 }
[08:28:31.509]                 if (length(args) > 0) 
[08:28:31.509]                   base::do.call(base::Sys.setenv, args = args)
[08:28:31.509]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:31.509]             }
[08:28:31.509]             else {
[08:28:31.509]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:31.509]             }
[08:28:31.509]             {
[08:28:31.509]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:31.509]                   0L) {
[08:28:31.509]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:31.509]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:31.509]                   base::options(opts)
[08:28:31.509]                 }
[08:28:31.509]                 {
[08:28:31.509]                   {
[08:28:31.509]                     base::options(mc.cores = ...future.mc.cores.old)
[08:28:31.509]                     NULL
[08:28:31.509]                   }
[08:28:31.509]                   options(future.plan = NULL)
[08:28:31.509]                   if (is.na(NA_character_)) 
[08:28:31.509]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.509]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:31.509]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:31.509]                     .init = FALSE)
[08:28:31.509]                 }
[08:28:31.509]             }
[08:28:31.509]         }
[08:28:31.509]     })
[08:28:31.509]     if (TRUE) {
[08:28:31.509]         base::sink(type = "output", split = FALSE)
[08:28:31.509]         if (TRUE) {
[08:28:31.509]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:31.509]         }
[08:28:31.509]         else {
[08:28:31.509]             ...future.result["stdout"] <- base::list(NULL)
[08:28:31.509]         }
[08:28:31.509]         base::close(...future.stdout)
[08:28:31.509]         ...future.stdout <- NULL
[08:28:31.509]     }
[08:28:31.509]     ...future.result$conditions <- ...future.conditions
[08:28:31.509]     ...future.result$finished <- base::Sys.time()
[08:28:31.509]     ...future.result
[08:28:31.509] }
[08:28:31.564] MultisessionFuture started
[08:28:31.565] result() for ClusterFuture ...
[08:28:31.565] receiveMessageFromWorker() for ClusterFuture ...
[08:28:31.565] - Validating connection of MultisessionFuture
[08:28:31.597] - received message: FutureResult
[08:28:31.597] - Received FutureResult
[08:28:31.600] - Erased future from FutureRegistry
[08:28:31.600] result() for ClusterFuture ...
[08:28:31.600] - result already collected: FutureResult
[08:28:31.600] result() for ClusterFuture ... done
[08:28:31.600] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:31.601] result() for ClusterFuture ... done
[08:28:31.601] result() for ClusterFuture ...
[08:28:31.601] - result already collected: FutureResult
[08:28:31.601] result() for ClusterFuture ... done
[08:28:31.601] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:31.602] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[08:28:31.606] getGlobalsAndPackages() ...
[08:28:31.606] 
[08:28:31.606] - globals: [0] <none>
[08:28:31.606] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[08:28:31.622] getGlobalsAndPackages() ...
[08:28:31.622] 
[08:28:31.622] - globals: [0] <none>
[08:28:31.622] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[08:28:31.635] plan(): Setting new future strategy stack:
[08:28:31.635] List of future strategies:
[08:28:31.635] 1. multisession:
[08:28:31.635]    - args: function (..., workers = 1L, envir = parent.frame())
[08:28:31.635]    - tweaked: TRUE
[08:28:31.635]    - call: plan(strategy, workers = 1L)
[08:28:31.636] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:31.636] multisession:
[08:28:31.636] - args: function (..., workers = 1L, envir = parent.frame())
[08:28:31.636] - tweaked: TRUE
[08:28:31.636] - call: plan(strategy, workers = 1L)
[08:28:31.637] getGlobalsAndPackages() ...
[08:28:31.637] Not searching for globals
[08:28:31.637] - globals: [0] <none>
[08:28:31.638] getGlobalsAndPackages() ... DONE
[08:28:31.639] Packages needed by the future expression (n = 0): <none>
[08:28:31.639] Packages needed by future strategies (n = 0): <none>
[08:28:31.639] {
[08:28:31.639]     {
[08:28:31.639]         {
[08:28:31.639]             ...future.startTime <- base::Sys.time()
[08:28:31.639]             {
[08:28:31.639]                 {
[08:28:31.639]                   {
[08:28:31.639]                     base::local({
[08:28:31.639]                       has_future <- base::requireNamespace("future", 
[08:28:31.639]                         quietly = TRUE)
[08:28:31.639]                       if (has_future) {
[08:28:31.639]                         ns <- base::getNamespace("future")
[08:28:31.639]                         version <- ns[[".package"]][["version"]]
[08:28:31.639]                         if (is.null(version)) 
[08:28:31.639]                           version <- utils::packageVersion("future")
[08:28:31.639]                       }
[08:28:31.639]                       else {
[08:28:31.639]                         version <- NULL
[08:28:31.639]                       }
[08:28:31.639]                       if (!has_future || version < "1.8.0") {
[08:28:31.639]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:31.639]                           "", base::R.version$version.string), 
[08:28:31.639]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:31.639]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:31.639]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:31.639]                             "release", "version")], collapse = " "), 
[08:28:31.639]                           hostname = base::Sys.info()[["nodename"]])
[08:28:31.639]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:31.639]                           info)
[08:28:31.639]                         info <- base::paste(info, collapse = "; ")
[08:28:31.639]                         if (!has_future) {
[08:28:31.639]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:31.639]                             info)
[08:28:31.639]                         }
[08:28:31.639]                         else {
[08:28:31.639]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:31.639]                             info, version)
[08:28:31.639]                         }
[08:28:31.639]                         base::stop(msg)
[08:28:31.639]                       }
[08:28:31.639]                     })
[08:28:31.639]                   }
[08:28:31.639]                   ...future.strategy.old <- future::plan("list")
[08:28:31.639]                   options(future.plan = NULL)
[08:28:31.639]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.639]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:31.639]                 }
[08:28:31.639]                 ...future.workdir <- getwd()
[08:28:31.639]             }
[08:28:31.639]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:31.639]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:31.639]         }
[08:28:31.639]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:31.639]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:31.639]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:31.639]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:31.639]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:31.639]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:31.639]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:31.639]             base::names(...future.oldOptions))
[08:28:31.639]     }
[08:28:31.639]     if (FALSE) {
[08:28:31.639]     }
[08:28:31.639]     else {
[08:28:31.639]         if (TRUE) {
[08:28:31.639]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:31.639]                 open = "w")
[08:28:31.639]         }
[08:28:31.639]         else {
[08:28:31.639]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:31.639]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:31.639]         }
[08:28:31.639]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:31.639]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:31.639]             base::sink(type = "output", split = FALSE)
[08:28:31.639]             base::close(...future.stdout)
[08:28:31.639]         }, add = TRUE)
[08:28:31.639]     }
[08:28:31.639]     ...future.frame <- base::sys.nframe()
[08:28:31.639]     ...future.conditions <- base::list()
[08:28:31.639]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:31.639]     if (FALSE) {
[08:28:31.639]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:31.639]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:31.639]     }
[08:28:31.639]     ...future.result <- base::tryCatch({
[08:28:31.639]         base::withCallingHandlers({
[08:28:31.639]             ...future.value <- base::withVisible(base::local(NA))
[08:28:31.639]             future::FutureResult(value = ...future.value$value, 
[08:28:31.639]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.639]                   ...future.rng), globalenv = if (FALSE) 
[08:28:31.639]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:31.639]                     ...future.globalenv.names))
[08:28:31.639]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:31.639]         }, condition = base::local({
[08:28:31.639]             c <- base::c
[08:28:31.639]             inherits <- base::inherits
[08:28:31.639]             invokeRestart <- base::invokeRestart
[08:28:31.639]             length <- base::length
[08:28:31.639]             list <- base::list
[08:28:31.639]             seq.int <- base::seq.int
[08:28:31.639]             signalCondition <- base::signalCondition
[08:28:31.639]             sys.calls <- base::sys.calls
[08:28:31.639]             `[[` <- base::`[[`
[08:28:31.639]             `+` <- base::`+`
[08:28:31.639]             `<<-` <- base::`<<-`
[08:28:31.639]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:31.639]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:31.639]                   3L)]
[08:28:31.639]             }
[08:28:31.639]             function(cond) {
[08:28:31.639]                 is_error <- inherits(cond, "error")
[08:28:31.639]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:31.639]                   NULL)
[08:28:31.639]                 if (is_error) {
[08:28:31.639]                   sessionInformation <- function() {
[08:28:31.639]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:31.639]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:31.639]                       search = base::search(), system = base::Sys.info())
[08:28:31.639]                   }
[08:28:31.639]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.639]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:31.639]                     cond$call), session = sessionInformation(), 
[08:28:31.639]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:31.639]                   signalCondition(cond)
[08:28:31.639]                 }
[08:28:31.639]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:31.639]                 "immediateCondition"))) {
[08:28:31.639]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:31.639]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.639]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:31.639]                   if (TRUE && !signal) {
[08:28:31.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.639]                     {
[08:28:31.639]                       inherits <- base::inherits
[08:28:31.639]                       invokeRestart <- base::invokeRestart
[08:28:31.639]                       is.null <- base::is.null
[08:28:31.639]                       muffled <- FALSE
[08:28:31.639]                       if (inherits(cond, "message")) {
[08:28:31.639]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.639]                         if (muffled) 
[08:28:31.639]                           invokeRestart("muffleMessage")
[08:28:31.639]                       }
[08:28:31.639]                       else if (inherits(cond, "warning")) {
[08:28:31.639]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.639]                         if (muffled) 
[08:28:31.639]                           invokeRestart("muffleWarning")
[08:28:31.639]                       }
[08:28:31.639]                       else if (inherits(cond, "condition")) {
[08:28:31.639]                         if (!is.null(pattern)) {
[08:28:31.639]                           computeRestarts <- base::computeRestarts
[08:28:31.639]                           grepl <- base::grepl
[08:28:31.639]                           restarts <- computeRestarts(cond)
[08:28:31.639]                           for (restart in restarts) {
[08:28:31.639]                             name <- restart$name
[08:28:31.639]                             if (is.null(name)) 
[08:28:31.639]                               next
[08:28:31.639]                             if (!grepl(pattern, name)) 
[08:28:31.639]                               next
[08:28:31.639]                             invokeRestart(restart)
[08:28:31.639]                             muffled <- TRUE
[08:28:31.639]                             break
[08:28:31.639]                           }
[08:28:31.639]                         }
[08:28:31.639]                       }
[08:28:31.639]                       invisible(muffled)
[08:28:31.639]                     }
[08:28:31.639]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.639]                   }
[08:28:31.639]                 }
[08:28:31.639]                 else {
[08:28:31.639]                   if (TRUE) {
[08:28:31.639]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.639]                     {
[08:28:31.639]                       inherits <- base::inherits
[08:28:31.639]                       invokeRestart <- base::invokeRestart
[08:28:31.639]                       is.null <- base::is.null
[08:28:31.639]                       muffled <- FALSE
[08:28:31.639]                       if (inherits(cond, "message")) {
[08:28:31.639]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.639]                         if (muffled) 
[08:28:31.639]                           invokeRestart("muffleMessage")
[08:28:31.639]                       }
[08:28:31.639]                       else if (inherits(cond, "warning")) {
[08:28:31.639]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.639]                         if (muffled) 
[08:28:31.639]                           invokeRestart("muffleWarning")
[08:28:31.639]                       }
[08:28:31.639]                       else if (inherits(cond, "condition")) {
[08:28:31.639]                         if (!is.null(pattern)) {
[08:28:31.639]                           computeRestarts <- base::computeRestarts
[08:28:31.639]                           grepl <- base::grepl
[08:28:31.639]                           restarts <- computeRestarts(cond)
[08:28:31.639]                           for (restart in restarts) {
[08:28:31.639]                             name <- restart$name
[08:28:31.639]                             if (is.null(name)) 
[08:28:31.639]                               next
[08:28:31.639]                             if (!grepl(pattern, name)) 
[08:28:31.639]                               next
[08:28:31.639]                             invokeRestart(restart)
[08:28:31.639]                             muffled <- TRUE
[08:28:31.639]                             break
[08:28:31.639]                           }
[08:28:31.639]                         }
[08:28:31.639]                       }
[08:28:31.639]                       invisible(muffled)
[08:28:31.639]                     }
[08:28:31.639]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.639]                   }
[08:28:31.639]                 }
[08:28:31.639]             }
[08:28:31.639]         }))
[08:28:31.639]     }, error = function(ex) {
[08:28:31.639]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:31.639]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.639]                 ...future.rng), started = ...future.startTime, 
[08:28:31.639]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:31.639]             version = "1.8"), class = "FutureResult")
[08:28:31.639]     }, finally = {
[08:28:31.639]         if (!identical(...future.workdir, getwd())) 
[08:28:31.639]             setwd(...future.workdir)
[08:28:31.639]         {
[08:28:31.639]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:31.639]                 ...future.oldOptions$nwarnings <- NULL
[08:28:31.639]             }
[08:28:31.639]             base::options(...future.oldOptions)
[08:28:31.639]             if (.Platform$OS.type == "windows") {
[08:28:31.639]                 old_names <- names(...future.oldEnvVars)
[08:28:31.639]                 envs <- base::Sys.getenv()
[08:28:31.639]                 names <- names(envs)
[08:28:31.639]                 common <- intersect(names, old_names)
[08:28:31.639]                 added <- setdiff(names, old_names)
[08:28:31.639]                 removed <- setdiff(old_names, names)
[08:28:31.639]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:31.639]                   envs[common]]
[08:28:31.639]                 NAMES <- toupper(changed)
[08:28:31.639]                 args <- list()
[08:28:31.639]                 for (kk in seq_along(NAMES)) {
[08:28:31.639]                   name <- changed[[kk]]
[08:28:31.639]                   NAME <- NAMES[[kk]]
[08:28:31.639]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.639]                     next
[08:28:31.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.639]                 }
[08:28:31.639]                 NAMES <- toupper(added)
[08:28:31.639]                 for (kk in seq_along(NAMES)) {
[08:28:31.639]                   name <- added[[kk]]
[08:28:31.639]                   NAME <- NAMES[[kk]]
[08:28:31.639]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.639]                     next
[08:28:31.639]                   args[[name]] <- ""
[08:28:31.639]                 }
[08:28:31.639]                 NAMES <- toupper(removed)
[08:28:31.639]                 for (kk in seq_along(NAMES)) {
[08:28:31.639]                   name <- removed[[kk]]
[08:28:31.639]                   NAME <- NAMES[[kk]]
[08:28:31.639]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.639]                     next
[08:28:31.639]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.639]                 }
[08:28:31.639]                 if (length(args) > 0) 
[08:28:31.639]                   base::do.call(base::Sys.setenv, args = args)
[08:28:31.639]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:31.639]             }
[08:28:31.639]             else {
[08:28:31.639]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:31.639]             }
[08:28:31.639]             {
[08:28:31.639]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:31.639]                   0L) {
[08:28:31.639]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:31.639]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:31.639]                   base::options(opts)
[08:28:31.639]                 }
[08:28:31.639]                 {
[08:28:31.639]                   {
[08:28:31.639]                     NULL
[08:28:31.639]                     RNGkind("Mersenne-Twister")
[08:28:31.639]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:31.639]                       inherits = FALSE)
[08:28:31.639]                   }
[08:28:31.639]                   options(future.plan = NULL)
[08:28:31.639]                   if (is.na(NA_character_)) 
[08:28:31.639]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.639]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:31.639]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:31.639]                     .init = FALSE)
[08:28:31.639]                 }
[08:28:31.639]             }
[08:28:31.639]         }
[08:28:31.639]     })
[08:28:31.639]     if (TRUE) {
[08:28:31.639]         base::sink(type = "output", split = FALSE)
[08:28:31.639]         if (TRUE) {
[08:28:31.639]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:31.639]         }
[08:28:31.639]         else {
[08:28:31.639]             ...future.result["stdout"] <- base::list(NULL)
[08:28:31.639]         }
[08:28:31.639]         base::close(...future.stdout)
[08:28:31.639]         ...future.stdout <- NULL
[08:28:31.639]     }
[08:28:31.639]     ...future.result$conditions <- ...future.conditions
[08:28:31.639]     ...future.result$finished <- base::Sys.time()
[08:28:31.639]     ...future.result
[08:28:31.639] }
[08:28:31.643] plan(): Setting new future strategy stack:
[08:28:31.643] List of future strategies:
[08:28:31.643] 1. sequential:
[08:28:31.643]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:31.643]    - tweaked: FALSE
[08:28:31.643]    - call: NULL
[08:28:31.644] plan(): nbrOfWorkers() = 1
[08:28:31.645] plan(): Setting new future strategy stack:
[08:28:31.646] List of future strategies:
[08:28:31.646] 1. multisession:
[08:28:31.646]    - args: function (..., workers = 1L, envir = parent.frame())
[08:28:31.646]    - tweaked: TRUE
[08:28:31.646]    - call: plan(strategy, workers = 1L)
[08:28:31.646] plan(): nbrOfWorkers() = 1
[08:28:31.647] SequentialFuture started (and completed)
[08:28:31.647] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:31.647] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[08:28:31.648] getGlobalsAndPackages() ...
[08:28:31.648] Searching for globals...
[08:28:31.651] 
[08:28:31.652] Searching for globals ... DONE
[08:28:31.652] - globals: [0] <none>
[08:28:31.652] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[08:28:31.653] getGlobalsAndPackages() ...
[08:28:31.653] Searching for globals...
[08:28:31.653] 
[08:28:31.653] Searching for globals ... DONE
[08:28:31.653] - globals: [0] <none>
[08:28:31.654] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[08:28:31.654] plan(): Setting new future strategy stack:
[08:28:31.654] List of future strategies:
[08:28:31.654] 1. multisession:
[08:28:31.654]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[08:28:31.654]    - tweaked: TRUE
[08:28:31.654]    - call: plan(strategy, workers = allButOneCore)
[08:28:31.655] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:31.655] multisession:
[08:28:31.655] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[08:28:31.655] - tweaked: TRUE
[08:28:31.655] - call: plan(strategy, workers = allButOneCore)
[08:28:31.657] getGlobalsAndPackages() ...
[08:28:31.657] Not searching for globals
[08:28:31.657] - globals: [0] <none>
[08:28:31.657] getGlobalsAndPackages() ... DONE
[08:28:31.658] Packages needed by the future expression (n = 0): <none>
[08:28:31.658] Packages needed by future strategies (n = 0): <none>
[08:28:31.658] {
[08:28:31.658]     {
[08:28:31.658]         {
[08:28:31.658]             ...future.startTime <- base::Sys.time()
[08:28:31.658]             {
[08:28:31.658]                 {
[08:28:31.658]                   {
[08:28:31.658]                     base::local({
[08:28:31.658]                       has_future <- base::requireNamespace("future", 
[08:28:31.658]                         quietly = TRUE)
[08:28:31.658]                       if (has_future) {
[08:28:31.658]                         ns <- base::getNamespace("future")
[08:28:31.658]                         version <- ns[[".package"]][["version"]]
[08:28:31.658]                         if (is.null(version)) 
[08:28:31.658]                           version <- utils::packageVersion("future")
[08:28:31.658]                       }
[08:28:31.658]                       else {
[08:28:31.658]                         version <- NULL
[08:28:31.658]                       }
[08:28:31.658]                       if (!has_future || version < "1.8.0") {
[08:28:31.658]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:31.658]                           "", base::R.version$version.string), 
[08:28:31.658]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:31.658]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:31.658]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:31.658]                             "release", "version")], collapse = " "), 
[08:28:31.658]                           hostname = base::Sys.info()[["nodename"]])
[08:28:31.658]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:31.658]                           info)
[08:28:31.658]                         info <- base::paste(info, collapse = "; ")
[08:28:31.658]                         if (!has_future) {
[08:28:31.658]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:31.658]                             info)
[08:28:31.658]                         }
[08:28:31.658]                         else {
[08:28:31.658]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:31.658]                             info, version)
[08:28:31.658]                         }
[08:28:31.658]                         base::stop(msg)
[08:28:31.658]                       }
[08:28:31.658]                     })
[08:28:31.658]                   }
[08:28:31.658]                   ...future.strategy.old <- future::plan("list")
[08:28:31.658]                   options(future.plan = NULL)
[08:28:31.658]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.658]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:31.658]                 }
[08:28:31.658]                 ...future.workdir <- getwd()
[08:28:31.658]             }
[08:28:31.658]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:31.658]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:31.658]         }
[08:28:31.658]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:31.658]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:31.658]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:31.658]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:31.658]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:31.658]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:31.658]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:31.658]             base::names(...future.oldOptions))
[08:28:31.658]     }
[08:28:31.658]     if (FALSE) {
[08:28:31.658]     }
[08:28:31.658]     else {
[08:28:31.658]         if (TRUE) {
[08:28:31.658]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:31.658]                 open = "w")
[08:28:31.658]         }
[08:28:31.658]         else {
[08:28:31.658]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:31.658]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:31.658]         }
[08:28:31.658]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:31.658]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:31.658]             base::sink(type = "output", split = FALSE)
[08:28:31.658]             base::close(...future.stdout)
[08:28:31.658]         }, add = TRUE)
[08:28:31.658]     }
[08:28:31.658]     ...future.frame <- base::sys.nframe()
[08:28:31.658]     ...future.conditions <- base::list()
[08:28:31.658]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:31.658]     if (FALSE) {
[08:28:31.658]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:31.658]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:31.658]     }
[08:28:31.658]     ...future.result <- base::tryCatch({
[08:28:31.658]         base::withCallingHandlers({
[08:28:31.658]             ...future.value <- base::withVisible(base::local(NA))
[08:28:31.658]             future::FutureResult(value = ...future.value$value, 
[08:28:31.658]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.658]                   ...future.rng), globalenv = if (FALSE) 
[08:28:31.658]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:31.658]                     ...future.globalenv.names))
[08:28:31.658]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:31.658]         }, condition = base::local({
[08:28:31.658]             c <- base::c
[08:28:31.658]             inherits <- base::inherits
[08:28:31.658]             invokeRestart <- base::invokeRestart
[08:28:31.658]             length <- base::length
[08:28:31.658]             list <- base::list
[08:28:31.658]             seq.int <- base::seq.int
[08:28:31.658]             signalCondition <- base::signalCondition
[08:28:31.658]             sys.calls <- base::sys.calls
[08:28:31.658]             `[[` <- base::`[[`
[08:28:31.658]             `+` <- base::`+`
[08:28:31.658]             `<<-` <- base::`<<-`
[08:28:31.658]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:31.658]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:31.658]                   3L)]
[08:28:31.658]             }
[08:28:31.658]             function(cond) {
[08:28:31.658]                 is_error <- inherits(cond, "error")
[08:28:31.658]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:31.658]                   NULL)
[08:28:31.658]                 if (is_error) {
[08:28:31.658]                   sessionInformation <- function() {
[08:28:31.658]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:31.658]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:31.658]                       search = base::search(), system = base::Sys.info())
[08:28:31.658]                   }
[08:28:31.658]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.658]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:31.658]                     cond$call), session = sessionInformation(), 
[08:28:31.658]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:31.658]                   signalCondition(cond)
[08:28:31.658]                 }
[08:28:31.658]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:31.658]                 "immediateCondition"))) {
[08:28:31.658]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:31.658]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.658]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:31.658]                   if (TRUE && !signal) {
[08:28:31.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.658]                     {
[08:28:31.658]                       inherits <- base::inherits
[08:28:31.658]                       invokeRestart <- base::invokeRestart
[08:28:31.658]                       is.null <- base::is.null
[08:28:31.658]                       muffled <- FALSE
[08:28:31.658]                       if (inherits(cond, "message")) {
[08:28:31.658]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.658]                         if (muffled) 
[08:28:31.658]                           invokeRestart("muffleMessage")
[08:28:31.658]                       }
[08:28:31.658]                       else if (inherits(cond, "warning")) {
[08:28:31.658]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.658]                         if (muffled) 
[08:28:31.658]                           invokeRestart("muffleWarning")
[08:28:31.658]                       }
[08:28:31.658]                       else if (inherits(cond, "condition")) {
[08:28:31.658]                         if (!is.null(pattern)) {
[08:28:31.658]                           computeRestarts <- base::computeRestarts
[08:28:31.658]                           grepl <- base::grepl
[08:28:31.658]                           restarts <- computeRestarts(cond)
[08:28:31.658]                           for (restart in restarts) {
[08:28:31.658]                             name <- restart$name
[08:28:31.658]                             if (is.null(name)) 
[08:28:31.658]                               next
[08:28:31.658]                             if (!grepl(pattern, name)) 
[08:28:31.658]                               next
[08:28:31.658]                             invokeRestart(restart)
[08:28:31.658]                             muffled <- TRUE
[08:28:31.658]                             break
[08:28:31.658]                           }
[08:28:31.658]                         }
[08:28:31.658]                       }
[08:28:31.658]                       invisible(muffled)
[08:28:31.658]                     }
[08:28:31.658]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.658]                   }
[08:28:31.658]                 }
[08:28:31.658]                 else {
[08:28:31.658]                   if (TRUE) {
[08:28:31.658]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.658]                     {
[08:28:31.658]                       inherits <- base::inherits
[08:28:31.658]                       invokeRestart <- base::invokeRestart
[08:28:31.658]                       is.null <- base::is.null
[08:28:31.658]                       muffled <- FALSE
[08:28:31.658]                       if (inherits(cond, "message")) {
[08:28:31.658]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.658]                         if (muffled) 
[08:28:31.658]                           invokeRestart("muffleMessage")
[08:28:31.658]                       }
[08:28:31.658]                       else if (inherits(cond, "warning")) {
[08:28:31.658]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.658]                         if (muffled) 
[08:28:31.658]                           invokeRestart("muffleWarning")
[08:28:31.658]                       }
[08:28:31.658]                       else if (inherits(cond, "condition")) {
[08:28:31.658]                         if (!is.null(pattern)) {
[08:28:31.658]                           computeRestarts <- base::computeRestarts
[08:28:31.658]                           grepl <- base::grepl
[08:28:31.658]                           restarts <- computeRestarts(cond)
[08:28:31.658]                           for (restart in restarts) {
[08:28:31.658]                             name <- restart$name
[08:28:31.658]                             if (is.null(name)) 
[08:28:31.658]                               next
[08:28:31.658]                             if (!grepl(pattern, name)) 
[08:28:31.658]                               next
[08:28:31.658]                             invokeRestart(restart)
[08:28:31.658]                             muffled <- TRUE
[08:28:31.658]                             break
[08:28:31.658]                           }
[08:28:31.658]                         }
[08:28:31.658]                       }
[08:28:31.658]                       invisible(muffled)
[08:28:31.658]                     }
[08:28:31.658]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.658]                   }
[08:28:31.658]                 }
[08:28:31.658]             }
[08:28:31.658]         }))
[08:28:31.658]     }, error = function(ex) {
[08:28:31.658]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:31.658]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.658]                 ...future.rng), started = ...future.startTime, 
[08:28:31.658]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:31.658]             version = "1.8"), class = "FutureResult")
[08:28:31.658]     }, finally = {
[08:28:31.658]         if (!identical(...future.workdir, getwd())) 
[08:28:31.658]             setwd(...future.workdir)
[08:28:31.658]         {
[08:28:31.658]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:31.658]                 ...future.oldOptions$nwarnings <- NULL
[08:28:31.658]             }
[08:28:31.658]             base::options(...future.oldOptions)
[08:28:31.658]             if (.Platform$OS.type == "windows") {
[08:28:31.658]                 old_names <- names(...future.oldEnvVars)
[08:28:31.658]                 envs <- base::Sys.getenv()
[08:28:31.658]                 names <- names(envs)
[08:28:31.658]                 common <- intersect(names, old_names)
[08:28:31.658]                 added <- setdiff(names, old_names)
[08:28:31.658]                 removed <- setdiff(old_names, names)
[08:28:31.658]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:31.658]                   envs[common]]
[08:28:31.658]                 NAMES <- toupper(changed)
[08:28:31.658]                 args <- list()
[08:28:31.658]                 for (kk in seq_along(NAMES)) {
[08:28:31.658]                   name <- changed[[kk]]
[08:28:31.658]                   NAME <- NAMES[[kk]]
[08:28:31.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.658]                     next
[08:28:31.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.658]                 }
[08:28:31.658]                 NAMES <- toupper(added)
[08:28:31.658]                 for (kk in seq_along(NAMES)) {
[08:28:31.658]                   name <- added[[kk]]
[08:28:31.658]                   NAME <- NAMES[[kk]]
[08:28:31.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.658]                     next
[08:28:31.658]                   args[[name]] <- ""
[08:28:31.658]                 }
[08:28:31.658]                 NAMES <- toupper(removed)
[08:28:31.658]                 for (kk in seq_along(NAMES)) {
[08:28:31.658]                   name <- removed[[kk]]
[08:28:31.658]                   NAME <- NAMES[[kk]]
[08:28:31.658]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.658]                     next
[08:28:31.658]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.658]                 }
[08:28:31.658]                 if (length(args) > 0) 
[08:28:31.658]                   base::do.call(base::Sys.setenv, args = args)
[08:28:31.658]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:31.658]             }
[08:28:31.658]             else {
[08:28:31.658]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:31.658]             }
[08:28:31.658]             {
[08:28:31.658]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:31.658]                   0L) {
[08:28:31.658]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:31.658]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:31.658]                   base::options(opts)
[08:28:31.658]                 }
[08:28:31.658]                 {
[08:28:31.658]                   {
[08:28:31.658]                     NULL
[08:28:31.658]                     RNGkind("Mersenne-Twister")
[08:28:31.658]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:28:31.658]                       inherits = FALSE)
[08:28:31.658]                   }
[08:28:31.658]                   options(future.plan = NULL)
[08:28:31.658]                   if (is.na(NA_character_)) 
[08:28:31.658]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.658]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:31.658]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:31.658]                     .init = FALSE)
[08:28:31.658]                 }
[08:28:31.658]             }
[08:28:31.658]         }
[08:28:31.658]     })
[08:28:31.658]     if (TRUE) {
[08:28:31.658]         base::sink(type = "output", split = FALSE)
[08:28:31.658]         if (TRUE) {
[08:28:31.658]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:31.658]         }
[08:28:31.658]         else {
[08:28:31.658]             ...future.result["stdout"] <- base::list(NULL)
[08:28:31.658]         }
[08:28:31.658]         base::close(...future.stdout)
[08:28:31.658]         ...future.stdout <- NULL
[08:28:31.658]     }
[08:28:31.658]     ...future.result$conditions <- ...future.conditions
[08:28:31.658]     ...future.result$finished <- base::Sys.time()
[08:28:31.658]     ...future.result
[08:28:31.658] }
[08:28:31.661] plan(): Setting new future strategy stack:
[08:28:31.661] List of future strategies:
[08:28:31.661] 1. sequential:
[08:28:31.661]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:31.661]    - tweaked: FALSE
[08:28:31.661]    - call: NULL
[08:28:31.661] plan(): nbrOfWorkers() = 1
[08:28:31.662] plan(): Setting new future strategy stack:
[08:28:31.662] List of future strategies:
[08:28:31.662] 1. multisession:
[08:28:31.662]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[08:28:31.662]    - tweaked: TRUE
[08:28:31.662]    - call: plan(strategy, workers = allButOneCore)
[08:28:31.666] plan(): nbrOfWorkers() = 1
[08:28:31.666] SequentialFuture started (and completed)
[08:28:31.667] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:31.668] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[08:28:31.673] getGlobalsAndPackages() ...
[08:28:31.673] Searching for globals...
[08:28:31.673] 
[08:28:31.673] Searching for globals ... DONE
[08:28:31.673] - globals: [0] <none>
[08:28:31.674] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[08:28:31.677] getGlobalsAndPackages() ...
[08:28:31.677] Searching for globals...
[08:28:31.677] 
[08:28:31.677] Searching for globals ... DONE
[08:28:31.677] - globals: [0] <none>
[08:28:31.677] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[08:28:31.680] plan(): Setting new future strategy stack:
[08:28:31.680] List of future strategies:
[08:28:31.680] 1. multicore:
[08:28:31.680]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[08:28:31.680]    - tweaked: FALSE
[08:28:31.680]    - call: plan(strategy)
[08:28:31.682] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[08:28:31.687] plan(): Setting new future strategy stack:
[08:28:31.687] List of future strategies:
[08:28:31.687] 1. multicore:
[08:28:31.687]    - args: function (..., workers = 1L, envir = parent.frame())
[08:28:31.687]    - tweaked: TRUE
[08:28:31.687]    - call: plan(strategy, workers = 1L)
[08:28:31.688] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[08:28:31.689] plan(): Setting new future strategy stack:
[08:28:31.689] List of future strategies:
[08:28:31.689] 1. multicore:
[08:28:31.689]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x55599d266f80>>", envir = parent.frame())
[08:28:31.689]    - tweaked: TRUE
[08:28:31.689]    - call: plan(strategy, workers = allButOneCore)
[08:28:31.691] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[08:28:31.696] plan(): Setting new future strategy stack:
[08:28:31.696] List of future strategies:
[08:28:31.696] 1. cluster:
[08:28:31.696]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[08:28:31.696]    - tweaked: TRUE
[08:28:31.696]    - call: plan(cluster, workers = workers)
[08:28:31.696] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:31.696] cluster:
[08:28:31.696] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[08:28:31.696] - tweaked: TRUE
[08:28:31.696] - call: plan(cluster, workers = workers)
[08:28:31.697] getGlobalsAndPackages() ...
[08:28:31.697] Not searching for globals
[08:28:31.697] - globals: [0] <none>
[08:28:31.697] getGlobalsAndPackages() ... DONE
[08:28:31.961] Packages needed by the future expression (n = 0): <none>
[08:28:31.961] Packages needed by future strategies (n = 0): <none>
[08:28:31.962] {
[08:28:31.962]     {
[08:28:31.962]         {
[08:28:31.962]             ...future.startTime <- base::Sys.time()
[08:28:31.962]             {
[08:28:31.962]                 {
[08:28:31.962]                   {
[08:28:31.962]                     base::local({
[08:28:31.962]                       has_future <- base::requireNamespace("future", 
[08:28:31.962]                         quietly = TRUE)
[08:28:31.962]                       if (has_future) {
[08:28:31.962]                         ns <- base::getNamespace("future")
[08:28:31.962]                         version <- ns[[".package"]][["version"]]
[08:28:31.962]                         if (is.null(version)) 
[08:28:31.962]                           version <- utils::packageVersion("future")
[08:28:31.962]                       }
[08:28:31.962]                       else {
[08:28:31.962]                         version <- NULL
[08:28:31.962]                       }
[08:28:31.962]                       if (!has_future || version < "1.8.0") {
[08:28:31.962]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:31.962]                           "", base::R.version$version.string), 
[08:28:31.962]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:31.962]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:31.962]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:31.962]                             "release", "version")], collapse = " "), 
[08:28:31.962]                           hostname = base::Sys.info()[["nodename"]])
[08:28:31.962]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:31.962]                           info)
[08:28:31.962]                         info <- base::paste(info, collapse = "; ")
[08:28:31.962]                         if (!has_future) {
[08:28:31.962]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:31.962]                             info)
[08:28:31.962]                         }
[08:28:31.962]                         else {
[08:28:31.962]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:31.962]                             info, version)
[08:28:31.962]                         }
[08:28:31.962]                         base::stop(msg)
[08:28:31.962]                       }
[08:28:31.962]                     })
[08:28:31.962]                   }
[08:28:31.962]                   ...future.strategy.old <- future::plan("list")
[08:28:31.962]                   options(future.plan = NULL)
[08:28:31.962]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.962]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:31.962]                 }
[08:28:31.962]                 ...future.workdir <- getwd()
[08:28:31.962]             }
[08:28:31.962]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:31.962]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:31.962]         }
[08:28:31.962]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:31.962]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:31.962]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:31.962]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:31.962]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:31.962]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:31.962]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:31.962]             base::names(...future.oldOptions))
[08:28:31.962]     }
[08:28:31.962]     if (FALSE) {
[08:28:31.962]     }
[08:28:31.962]     else {
[08:28:31.962]         if (TRUE) {
[08:28:31.962]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:31.962]                 open = "w")
[08:28:31.962]         }
[08:28:31.962]         else {
[08:28:31.962]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:31.962]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:31.962]         }
[08:28:31.962]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:31.962]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:31.962]             base::sink(type = "output", split = FALSE)
[08:28:31.962]             base::close(...future.stdout)
[08:28:31.962]         }, add = TRUE)
[08:28:31.962]     }
[08:28:31.962]     ...future.frame <- base::sys.nframe()
[08:28:31.962]     ...future.conditions <- base::list()
[08:28:31.962]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:31.962]     if (FALSE) {
[08:28:31.962]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:31.962]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:31.962]     }
[08:28:31.962]     ...future.result <- base::tryCatch({
[08:28:31.962]         base::withCallingHandlers({
[08:28:31.962]             ...future.value <- base::withVisible(base::local({
[08:28:31.962]                 ...future.makeSendCondition <- base::local({
[08:28:31.962]                   sendCondition <- NULL
[08:28:31.962]                   function(frame = 1L) {
[08:28:31.962]                     if (is.function(sendCondition)) 
[08:28:31.962]                       return(sendCondition)
[08:28:31.962]                     ns <- getNamespace("parallel")
[08:28:31.962]                     if (exists("sendData", mode = "function", 
[08:28:31.962]                       envir = ns)) {
[08:28:31.962]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:31.962]                         envir = ns)
[08:28:31.962]                       envir <- sys.frame(frame)
[08:28:31.962]                       master <- NULL
[08:28:31.962]                       while (!identical(envir, .GlobalEnv) && 
[08:28:31.962]                         !identical(envir, emptyenv())) {
[08:28:31.962]                         if (exists("master", mode = "list", envir = envir, 
[08:28:31.962]                           inherits = FALSE)) {
[08:28:31.962]                           master <- get("master", mode = "list", 
[08:28:31.962]                             envir = envir, inherits = FALSE)
[08:28:31.962]                           if (inherits(master, c("SOCKnode", 
[08:28:31.962]                             "SOCK0node"))) {
[08:28:31.962]                             sendCondition <<- function(cond) {
[08:28:31.962]                               data <- list(type = "VALUE", value = cond, 
[08:28:31.962]                                 success = TRUE)
[08:28:31.962]                               parallel_sendData(master, data)
[08:28:31.962]                             }
[08:28:31.962]                             return(sendCondition)
[08:28:31.962]                           }
[08:28:31.962]                         }
[08:28:31.962]                         frame <- frame + 1L
[08:28:31.962]                         envir <- sys.frame(frame)
[08:28:31.962]                       }
[08:28:31.962]                     }
[08:28:31.962]                     sendCondition <<- function(cond) NULL
[08:28:31.962]                   }
[08:28:31.962]                 })
[08:28:31.962]                 withCallingHandlers({
[08:28:31.962]                   NA
[08:28:31.962]                 }, immediateCondition = function(cond) {
[08:28:31.962]                   sendCondition <- ...future.makeSendCondition()
[08:28:31.962]                   sendCondition(cond)
[08:28:31.962]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.962]                   {
[08:28:31.962]                     inherits <- base::inherits
[08:28:31.962]                     invokeRestart <- base::invokeRestart
[08:28:31.962]                     is.null <- base::is.null
[08:28:31.962]                     muffled <- FALSE
[08:28:31.962]                     if (inherits(cond, "message")) {
[08:28:31.962]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:31.962]                       if (muffled) 
[08:28:31.962]                         invokeRestart("muffleMessage")
[08:28:31.962]                     }
[08:28:31.962]                     else if (inherits(cond, "warning")) {
[08:28:31.962]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:31.962]                       if (muffled) 
[08:28:31.962]                         invokeRestart("muffleWarning")
[08:28:31.962]                     }
[08:28:31.962]                     else if (inherits(cond, "condition")) {
[08:28:31.962]                       if (!is.null(pattern)) {
[08:28:31.962]                         computeRestarts <- base::computeRestarts
[08:28:31.962]                         grepl <- base::grepl
[08:28:31.962]                         restarts <- computeRestarts(cond)
[08:28:31.962]                         for (restart in restarts) {
[08:28:31.962]                           name <- restart$name
[08:28:31.962]                           if (is.null(name)) 
[08:28:31.962]                             next
[08:28:31.962]                           if (!grepl(pattern, name)) 
[08:28:31.962]                             next
[08:28:31.962]                           invokeRestart(restart)
[08:28:31.962]                           muffled <- TRUE
[08:28:31.962]                           break
[08:28:31.962]                         }
[08:28:31.962]                       }
[08:28:31.962]                     }
[08:28:31.962]                     invisible(muffled)
[08:28:31.962]                   }
[08:28:31.962]                   muffleCondition(cond)
[08:28:31.962]                 })
[08:28:31.962]             }))
[08:28:31.962]             future::FutureResult(value = ...future.value$value, 
[08:28:31.962]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.962]                   ...future.rng), globalenv = if (FALSE) 
[08:28:31.962]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:31.962]                     ...future.globalenv.names))
[08:28:31.962]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:31.962]         }, condition = base::local({
[08:28:31.962]             c <- base::c
[08:28:31.962]             inherits <- base::inherits
[08:28:31.962]             invokeRestart <- base::invokeRestart
[08:28:31.962]             length <- base::length
[08:28:31.962]             list <- base::list
[08:28:31.962]             seq.int <- base::seq.int
[08:28:31.962]             signalCondition <- base::signalCondition
[08:28:31.962]             sys.calls <- base::sys.calls
[08:28:31.962]             `[[` <- base::`[[`
[08:28:31.962]             `+` <- base::`+`
[08:28:31.962]             `<<-` <- base::`<<-`
[08:28:31.962]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:31.962]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:31.962]                   3L)]
[08:28:31.962]             }
[08:28:31.962]             function(cond) {
[08:28:31.962]                 is_error <- inherits(cond, "error")
[08:28:31.962]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:31.962]                   NULL)
[08:28:31.962]                 if (is_error) {
[08:28:31.962]                   sessionInformation <- function() {
[08:28:31.962]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:31.962]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:31.962]                       search = base::search(), system = base::Sys.info())
[08:28:31.962]                   }
[08:28:31.962]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.962]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:31.962]                     cond$call), session = sessionInformation(), 
[08:28:31.962]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:31.962]                   signalCondition(cond)
[08:28:31.962]                 }
[08:28:31.962]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:31.962]                 "immediateCondition"))) {
[08:28:31.962]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:31.962]                   ...future.conditions[[length(...future.conditions) + 
[08:28:31.962]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:31.962]                   if (TRUE && !signal) {
[08:28:31.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.962]                     {
[08:28:31.962]                       inherits <- base::inherits
[08:28:31.962]                       invokeRestart <- base::invokeRestart
[08:28:31.962]                       is.null <- base::is.null
[08:28:31.962]                       muffled <- FALSE
[08:28:31.962]                       if (inherits(cond, "message")) {
[08:28:31.962]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.962]                         if (muffled) 
[08:28:31.962]                           invokeRestart("muffleMessage")
[08:28:31.962]                       }
[08:28:31.962]                       else if (inherits(cond, "warning")) {
[08:28:31.962]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.962]                         if (muffled) 
[08:28:31.962]                           invokeRestart("muffleWarning")
[08:28:31.962]                       }
[08:28:31.962]                       else if (inherits(cond, "condition")) {
[08:28:31.962]                         if (!is.null(pattern)) {
[08:28:31.962]                           computeRestarts <- base::computeRestarts
[08:28:31.962]                           grepl <- base::grepl
[08:28:31.962]                           restarts <- computeRestarts(cond)
[08:28:31.962]                           for (restart in restarts) {
[08:28:31.962]                             name <- restart$name
[08:28:31.962]                             if (is.null(name)) 
[08:28:31.962]                               next
[08:28:31.962]                             if (!grepl(pattern, name)) 
[08:28:31.962]                               next
[08:28:31.962]                             invokeRestart(restart)
[08:28:31.962]                             muffled <- TRUE
[08:28:31.962]                             break
[08:28:31.962]                           }
[08:28:31.962]                         }
[08:28:31.962]                       }
[08:28:31.962]                       invisible(muffled)
[08:28:31.962]                     }
[08:28:31.962]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.962]                   }
[08:28:31.962]                 }
[08:28:31.962]                 else {
[08:28:31.962]                   if (TRUE) {
[08:28:31.962]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:31.962]                     {
[08:28:31.962]                       inherits <- base::inherits
[08:28:31.962]                       invokeRestart <- base::invokeRestart
[08:28:31.962]                       is.null <- base::is.null
[08:28:31.962]                       muffled <- FALSE
[08:28:31.962]                       if (inherits(cond, "message")) {
[08:28:31.962]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:31.962]                         if (muffled) 
[08:28:31.962]                           invokeRestart("muffleMessage")
[08:28:31.962]                       }
[08:28:31.962]                       else if (inherits(cond, "warning")) {
[08:28:31.962]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:31.962]                         if (muffled) 
[08:28:31.962]                           invokeRestart("muffleWarning")
[08:28:31.962]                       }
[08:28:31.962]                       else if (inherits(cond, "condition")) {
[08:28:31.962]                         if (!is.null(pattern)) {
[08:28:31.962]                           computeRestarts <- base::computeRestarts
[08:28:31.962]                           grepl <- base::grepl
[08:28:31.962]                           restarts <- computeRestarts(cond)
[08:28:31.962]                           for (restart in restarts) {
[08:28:31.962]                             name <- restart$name
[08:28:31.962]                             if (is.null(name)) 
[08:28:31.962]                               next
[08:28:31.962]                             if (!grepl(pattern, name)) 
[08:28:31.962]                               next
[08:28:31.962]                             invokeRestart(restart)
[08:28:31.962]                             muffled <- TRUE
[08:28:31.962]                             break
[08:28:31.962]                           }
[08:28:31.962]                         }
[08:28:31.962]                       }
[08:28:31.962]                       invisible(muffled)
[08:28:31.962]                     }
[08:28:31.962]                     muffleCondition(cond, pattern = "^muffle")
[08:28:31.962]                   }
[08:28:31.962]                 }
[08:28:31.962]             }
[08:28:31.962]         }))
[08:28:31.962]     }, error = function(ex) {
[08:28:31.962]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:31.962]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:31.962]                 ...future.rng), started = ...future.startTime, 
[08:28:31.962]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:31.962]             version = "1.8"), class = "FutureResult")
[08:28:31.962]     }, finally = {
[08:28:31.962]         if (!identical(...future.workdir, getwd())) 
[08:28:31.962]             setwd(...future.workdir)
[08:28:31.962]         {
[08:28:31.962]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:31.962]                 ...future.oldOptions$nwarnings <- NULL
[08:28:31.962]             }
[08:28:31.962]             base::options(...future.oldOptions)
[08:28:31.962]             if (.Platform$OS.type == "windows") {
[08:28:31.962]                 old_names <- names(...future.oldEnvVars)
[08:28:31.962]                 envs <- base::Sys.getenv()
[08:28:31.962]                 names <- names(envs)
[08:28:31.962]                 common <- intersect(names, old_names)
[08:28:31.962]                 added <- setdiff(names, old_names)
[08:28:31.962]                 removed <- setdiff(old_names, names)
[08:28:31.962]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:31.962]                   envs[common]]
[08:28:31.962]                 NAMES <- toupper(changed)
[08:28:31.962]                 args <- list()
[08:28:31.962]                 for (kk in seq_along(NAMES)) {
[08:28:31.962]                   name <- changed[[kk]]
[08:28:31.962]                   NAME <- NAMES[[kk]]
[08:28:31.962]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.962]                     next
[08:28:31.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.962]                 }
[08:28:31.962]                 NAMES <- toupper(added)
[08:28:31.962]                 for (kk in seq_along(NAMES)) {
[08:28:31.962]                   name <- added[[kk]]
[08:28:31.962]                   NAME <- NAMES[[kk]]
[08:28:31.962]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.962]                     next
[08:28:31.962]                   args[[name]] <- ""
[08:28:31.962]                 }
[08:28:31.962]                 NAMES <- toupper(removed)
[08:28:31.962]                 for (kk in seq_along(NAMES)) {
[08:28:31.962]                   name <- removed[[kk]]
[08:28:31.962]                   NAME <- NAMES[[kk]]
[08:28:31.962]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:31.962]                     next
[08:28:31.962]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:31.962]                 }
[08:28:31.962]                 if (length(args) > 0) 
[08:28:31.962]                   base::do.call(base::Sys.setenv, args = args)
[08:28:31.962]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:31.962]             }
[08:28:31.962]             else {
[08:28:31.962]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:31.962]             }
[08:28:31.962]             {
[08:28:31.962]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:31.962]                   0L) {
[08:28:31.962]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:31.962]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:31.962]                   base::options(opts)
[08:28:31.962]                 }
[08:28:31.962]                 {
[08:28:31.962]                   NULL
[08:28:31.962]                   options(future.plan = NULL)
[08:28:31.962]                   if (is.na(NA_character_)) 
[08:28:31.962]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:31.962]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:31.962]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:31.962]                     .init = FALSE)
[08:28:31.962]                 }
[08:28:31.962]             }
[08:28:31.962]         }
[08:28:31.962]     })
[08:28:31.962]     if (TRUE) {
[08:28:31.962]         base::sink(type = "output", split = FALSE)
[08:28:31.962]         if (TRUE) {
[08:28:31.962]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:31.962]         }
[08:28:31.962]         else {
[08:28:31.962]             ...future.result["stdout"] <- base::list(NULL)
[08:28:31.962]         }
[08:28:31.962]         base::close(...future.stdout)
[08:28:31.962]         ...future.stdout <- NULL
[08:28:31.962]     }
[08:28:31.962]     ...future.result$conditions <- ...future.conditions
[08:28:31.962]     ...future.result$finished <- base::Sys.time()
[08:28:31.962]     ...future.result
[08:28:31.962] }
[08:28:32.017] ClusterFuture started
[08:28:32.017] result() for ClusterFuture ...
[08:28:32.017] receiveMessageFromWorker() for ClusterFuture ...
[08:28:32.018] - Validating connection of ClusterFuture
[08:28:32.050] - received message: FutureResult
[08:28:32.050] - Received FutureResult
[08:28:32.050] - Erased future from FutureRegistry
[08:28:32.050] result() for ClusterFuture ...
[08:28:32.050] - result already collected: FutureResult
[08:28:32.050] result() for ClusterFuture ... done
[08:28:32.050] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:32.050] result() for ClusterFuture ... done
[08:28:32.051] result() for ClusterFuture ...
[08:28:32.051] - result already collected: FutureResult
[08:28:32.051] result() for ClusterFuture ... done
[08:28:32.051] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:32.051] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[08:28:32.052] plan(): Setting new future strategy stack:
[08:28:32.052] List of future strategies:
[08:28:32.052] 1. cluster:
[08:28:32.052]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[08:28:32.052]    - tweaked: TRUE
[08:28:32.052]    - call: plan(cluster, workers = allButOneWorker)
[08:28:32.054] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:32.054] cluster:
[08:28:32.054] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[08:28:32.054] - tweaked: TRUE
[08:28:32.054] - call: plan(cluster, workers = allButOneWorker)
[08:28:32.055] getGlobalsAndPackages() ...
[08:28:32.055] Not searching for globals
[08:28:32.055] - globals: [0] <none>
[08:28:32.055] getGlobalsAndPackages() ... DONE
[08:28:32.253] Packages needed by the future expression (n = 0): <none>
[08:28:32.254] Packages needed by future strategies (n = 0): <none>
[08:28:32.254] {
[08:28:32.254]     {
[08:28:32.254]         {
[08:28:32.254]             ...future.startTime <- base::Sys.time()
[08:28:32.254]             {
[08:28:32.254]                 {
[08:28:32.254]                   {
[08:28:32.254]                     base::local({
[08:28:32.254]                       has_future <- base::requireNamespace("future", 
[08:28:32.254]                         quietly = TRUE)
[08:28:32.254]                       if (has_future) {
[08:28:32.254]                         ns <- base::getNamespace("future")
[08:28:32.254]                         version <- ns[[".package"]][["version"]]
[08:28:32.254]                         if (is.null(version)) 
[08:28:32.254]                           version <- utils::packageVersion("future")
[08:28:32.254]                       }
[08:28:32.254]                       else {
[08:28:32.254]                         version <- NULL
[08:28:32.254]                       }
[08:28:32.254]                       if (!has_future || version < "1.8.0") {
[08:28:32.254]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:32.254]                           "", base::R.version$version.string), 
[08:28:32.254]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:32.254]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:32.254]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:32.254]                             "release", "version")], collapse = " "), 
[08:28:32.254]                           hostname = base::Sys.info()[["nodename"]])
[08:28:32.254]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:32.254]                           info)
[08:28:32.254]                         info <- base::paste(info, collapse = "; ")
[08:28:32.254]                         if (!has_future) {
[08:28:32.254]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:32.254]                             info)
[08:28:32.254]                         }
[08:28:32.254]                         else {
[08:28:32.254]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:32.254]                             info, version)
[08:28:32.254]                         }
[08:28:32.254]                         base::stop(msg)
[08:28:32.254]                       }
[08:28:32.254]                     })
[08:28:32.254]                   }
[08:28:32.254]                   ...future.strategy.old <- future::plan("list")
[08:28:32.254]                   options(future.plan = NULL)
[08:28:32.254]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:32.254]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:32.254]                 }
[08:28:32.254]                 ...future.workdir <- getwd()
[08:28:32.254]             }
[08:28:32.254]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:32.254]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:32.254]         }
[08:28:32.254]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:32.254]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:32.254]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:32.254]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:32.254]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:32.254]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:32.254]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:32.254]             base::names(...future.oldOptions))
[08:28:32.254]     }
[08:28:32.254]     if (FALSE) {
[08:28:32.254]     }
[08:28:32.254]     else {
[08:28:32.254]         if (TRUE) {
[08:28:32.254]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:32.254]                 open = "w")
[08:28:32.254]         }
[08:28:32.254]         else {
[08:28:32.254]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:32.254]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:32.254]         }
[08:28:32.254]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:32.254]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:32.254]             base::sink(type = "output", split = FALSE)
[08:28:32.254]             base::close(...future.stdout)
[08:28:32.254]         }, add = TRUE)
[08:28:32.254]     }
[08:28:32.254]     ...future.frame <- base::sys.nframe()
[08:28:32.254]     ...future.conditions <- base::list()
[08:28:32.254]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:32.254]     if (FALSE) {
[08:28:32.254]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:32.254]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:32.254]     }
[08:28:32.254]     ...future.result <- base::tryCatch({
[08:28:32.254]         base::withCallingHandlers({
[08:28:32.254]             ...future.value <- base::withVisible(base::local({
[08:28:32.254]                 ...future.makeSendCondition <- base::local({
[08:28:32.254]                   sendCondition <- NULL
[08:28:32.254]                   function(frame = 1L) {
[08:28:32.254]                     if (is.function(sendCondition)) 
[08:28:32.254]                       return(sendCondition)
[08:28:32.254]                     ns <- getNamespace("parallel")
[08:28:32.254]                     if (exists("sendData", mode = "function", 
[08:28:32.254]                       envir = ns)) {
[08:28:32.254]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:32.254]                         envir = ns)
[08:28:32.254]                       envir <- sys.frame(frame)
[08:28:32.254]                       master <- NULL
[08:28:32.254]                       while (!identical(envir, .GlobalEnv) && 
[08:28:32.254]                         !identical(envir, emptyenv())) {
[08:28:32.254]                         if (exists("master", mode = "list", envir = envir, 
[08:28:32.254]                           inherits = FALSE)) {
[08:28:32.254]                           master <- get("master", mode = "list", 
[08:28:32.254]                             envir = envir, inherits = FALSE)
[08:28:32.254]                           if (inherits(master, c("SOCKnode", 
[08:28:32.254]                             "SOCK0node"))) {
[08:28:32.254]                             sendCondition <<- function(cond) {
[08:28:32.254]                               data <- list(type = "VALUE", value = cond, 
[08:28:32.254]                                 success = TRUE)
[08:28:32.254]                               parallel_sendData(master, data)
[08:28:32.254]                             }
[08:28:32.254]                             return(sendCondition)
[08:28:32.254]                           }
[08:28:32.254]                         }
[08:28:32.254]                         frame <- frame + 1L
[08:28:32.254]                         envir <- sys.frame(frame)
[08:28:32.254]                       }
[08:28:32.254]                     }
[08:28:32.254]                     sendCondition <<- function(cond) NULL
[08:28:32.254]                   }
[08:28:32.254]                 })
[08:28:32.254]                 withCallingHandlers({
[08:28:32.254]                   NA
[08:28:32.254]                 }, immediateCondition = function(cond) {
[08:28:32.254]                   sendCondition <- ...future.makeSendCondition()
[08:28:32.254]                   sendCondition(cond)
[08:28:32.254]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.254]                   {
[08:28:32.254]                     inherits <- base::inherits
[08:28:32.254]                     invokeRestart <- base::invokeRestart
[08:28:32.254]                     is.null <- base::is.null
[08:28:32.254]                     muffled <- FALSE
[08:28:32.254]                     if (inherits(cond, "message")) {
[08:28:32.254]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:32.254]                       if (muffled) 
[08:28:32.254]                         invokeRestart("muffleMessage")
[08:28:32.254]                     }
[08:28:32.254]                     else if (inherits(cond, "warning")) {
[08:28:32.254]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:32.254]                       if (muffled) 
[08:28:32.254]                         invokeRestart("muffleWarning")
[08:28:32.254]                     }
[08:28:32.254]                     else if (inherits(cond, "condition")) {
[08:28:32.254]                       if (!is.null(pattern)) {
[08:28:32.254]                         computeRestarts <- base::computeRestarts
[08:28:32.254]                         grepl <- base::grepl
[08:28:32.254]                         restarts <- computeRestarts(cond)
[08:28:32.254]                         for (restart in restarts) {
[08:28:32.254]                           name <- restart$name
[08:28:32.254]                           if (is.null(name)) 
[08:28:32.254]                             next
[08:28:32.254]                           if (!grepl(pattern, name)) 
[08:28:32.254]                             next
[08:28:32.254]                           invokeRestart(restart)
[08:28:32.254]                           muffled <- TRUE
[08:28:32.254]                           break
[08:28:32.254]                         }
[08:28:32.254]                       }
[08:28:32.254]                     }
[08:28:32.254]                     invisible(muffled)
[08:28:32.254]                   }
[08:28:32.254]                   muffleCondition(cond)
[08:28:32.254]                 })
[08:28:32.254]             }))
[08:28:32.254]             future::FutureResult(value = ...future.value$value, 
[08:28:32.254]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:32.254]                   ...future.rng), globalenv = if (FALSE) 
[08:28:32.254]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:32.254]                     ...future.globalenv.names))
[08:28:32.254]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:32.254]         }, condition = base::local({
[08:28:32.254]             c <- base::c
[08:28:32.254]             inherits <- base::inherits
[08:28:32.254]             invokeRestart <- base::invokeRestart
[08:28:32.254]             length <- base::length
[08:28:32.254]             list <- base::list
[08:28:32.254]             seq.int <- base::seq.int
[08:28:32.254]             signalCondition <- base::signalCondition
[08:28:32.254]             sys.calls <- base::sys.calls
[08:28:32.254]             `[[` <- base::`[[`
[08:28:32.254]             `+` <- base::`+`
[08:28:32.254]             `<<-` <- base::`<<-`
[08:28:32.254]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:32.254]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:32.254]                   3L)]
[08:28:32.254]             }
[08:28:32.254]             function(cond) {
[08:28:32.254]                 is_error <- inherits(cond, "error")
[08:28:32.254]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:32.254]                   NULL)
[08:28:32.254]                 if (is_error) {
[08:28:32.254]                   sessionInformation <- function() {
[08:28:32.254]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:32.254]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:32.254]                       search = base::search(), system = base::Sys.info())
[08:28:32.254]                   }
[08:28:32.254]                   ...future.conditions[[length(...future.conditions) + 
[08:28:32.254]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:32.254]                     cond$call), session = sessionInformation(), 
[08:28:32.254]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:32.254]                   signalCondition(cond)
[08:28:32.254]                 }
[08:28:32.254]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:32.254]                 "immediateCondition"))) {
[08:28:32.254]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:32.254]                   ...future.conditions[[length(...future.conditions) + 
[08:28:32.254]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:32.254]                   if (TRUE && !signal) {
[08:28:32.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.254]                     {
[08:28:32.254]                       inherits <- base::inherits
[08:28:32.254]                       invokeRestart <- base::invokeRestart
[08:28:32.254]                       is.null <- base::is.null
[08:28:32.254]                       muffled <- FALSE
[08:28:32.254]                       if (inherits(cond, "message")) {
[08:28:32.254]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:32.254]                         if (muffled) 
[08:28:32.254]                           invokeRestart("muffleMessage")
[08:28:32.254]                       }
[08:28:32.254]                       else if (inherits(cond, "warning")) {
[08:28:32.254]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:32.254]                         if (muffled) 
[08:28:32.254]                           invokeRestart("muffleWarning")
[08:28:32.254]                       }
[08:28:32.254]                       else if (inherits(cond, "condition")) {
[08:28:32.254]                         if (!is.null(pattern)) {
[08:28:32.254]                           computeRestarts <- base::computeRestarts
[08:28:32.254]                           grepl <- base::grepl
[08:28:32.254]                           restarts <- computeRestarts(cond)
[08:28:32.254]                           for (restart in restarts) {
[08:28:32.254]                             name <- restart$name
[08:28:32.254]                             if (is.null(name)) 
[08:28:32.254]                               next
[08:28:32.254]                             if (!grepl(pattern, name)) 
[08:28:32.254]                               next
[08:28:32.254]                             invokeRestart(restart)
[08:28:32.254]                             muffled <- TRUE
[08:28:32.254]                             break
[08:28:32.254]                           }
[08:28:32.254]                         }
[08:28:32.254]                       }
[08:28:32.254]                       invisible(muffled)
[08:28:32.254]                     }
[08:28:32.254]                     muffleCondition(cond, pattern = "^muffle")
[08:28:32.254]                   }
[08:28:32.254]                 }
[08:28:32.254]                 else {
[08:28:32.254]                   if (TRUE) {
[08:28:32.254]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.254]                     {
[08:28:32.254]                       inherits <- base::inherits
[08:28:32.254]                       invokeRestart <- base::invokeRestart
[08:28:32.254]                       is.null <- base::is.null
[08:28:32.254]                       muffled <- FALSE
[08:28:32.254]                       if (inherits(cond, "message")) {
[08:28:32.254]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:32.254]                         if (muffled) 
[08:28:32.254]                           invokeRestart("muffleMessage")
[08:28:32.254]                       }
[08:28:32.254]                       else if (inherits(cond, "warning")) {
[08:28:32.254]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:32.254]                         if (muffled) 
[08:28:32.254]                           invokeRestart("muffleWarning")
[08:28:32.254]                       }
[08:28:32.254]                       else if (inherits(cond, "condition")) {
[08:28:32.254]                         if (!is.null(pattern)) {
[08:28:32.254]                           computeRestarts <- base::computeRestarts
[08:28:32.254]                           grepl <- base::grepl
[08:28:32.254]                           restarts <- computeRestarts(cond)
[08:28:32.254]                           for (restart in restarts) {
[08:28:32.254]                             name <- restart$name
[08:28:32.254]                             if (is.null(name)) 
[08:28:32.254]                               next
[08:28:32.254]                             if (!grepl(pattern, name)) 
[08:28:32.254]                               next
[08:28:32.254]                             invokeRestart(restart)
[08:28:32.254]                             muffled <- TRUE
[08:28:32.254]                             break
[08:28:32.254]                           }
[08:28:32.254]                         }
[08:28:32.254]                       }
[08:28:32.254]                       invisible(muffled)
[08:28:32.254]                     }
[08:28:32.254]                     muffleCondition(cond, pattern = "^muffle")
[08:28:32.254]                   }
[08:28:32.254]                 }
[08:28:32.254]             }
[08:28:32.254]         }))
[08:28:32.254]     }, error = function(ex) {
[08:28:32.254]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:32.254]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:32.254]                 ...future.rng), started = ...future.startTime, 
[08:28:32.254]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:32.254]             version = "1.8"), class = "FutureResult")
[08:28:32.254]     }, finally = {
[08:28:32.254]         if (!identical(...future.workdir, getwd())) 
[08:28:32.254]             setwd(...future.workdir)
[08:28:32.254]         {
[08:28:32.254]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:32.254]                 ...future.oldOptions$nwarnings <- NULL
[08:28:32.254]             }
[08:28:32.254]             base::options(...future.oldOptions)
[08:28:32.254]             if (.Platform$OS.type == "windows") {
[08:28:32.254]                 old_names <- names(...future.oldEnvVars)
[08:28:32.254]                 envs <- base::Sys.getenv()
[08:28:32.254]                 names <- names(envs)
[08:28:32.254]                 common <- intersect(names, old_names)
[08:28:32.254]                 added <- setdiff(names, old_names)
[08:28:32.254]                 removed <- setdiff(old_names, names)
[08:28:32.254]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:32.254]                   envs[common]]
[08:28:32.254]                 NAMES <- toupper(changed)
[08:28:32.254]                 args <- list()
[08:28:32.254]                 for (kk in seq_along(NAMES)) {
[08:28:32.254]                   name <- changed[[kk]]
[08:28:32.254]                   NAME <- NAMES[[kk]]
[08:28:32.254]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.254]                     next
[08:28:32.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:32.254]                 }
[08:28:32.254]                 NAMES <- toupper(added)
[08:28:32.254]                 for (kk in seq_along(NAMES)) {
[08:28:32.254]                   name <- added[[kk]]
[08:28:32.254]                   NAME <- NAMES[[kk]]
[08:28:32.254]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.254]                     next
[08:28:32.254]                   args[[name]] <- ""
[08:28:32.254]                 }
[08:28:32.254]                 NAMES <- toupper(removed)
[08:28:32.254]                 for (kk in seq_along(NAMES)) {
[08:28:32.254]                   name <- removed[[kk]]
[08:28:32.254]                   NAME <- NAMES[[kk]]
[08:28:32.254]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.254]                     next
[08:28:32.254]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:32.254]                 }
[08:28:32.254]                 if (length(args) > 0) 
[08:28:32.254]                   base::do.call(base::Sys.setenv, args = args)
[08:28:32.254]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:32.254]             }
[08:28:32.254]             else {
[08:28:32.254]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:32.254]             }
[08:28:32.254]             {
[08:28:32.254]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:32.254]                   0L) {
[08:28:32.254]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:32.254]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:32.254]                   base::options(opts)
[08:28:32.254]                 }
[08:28:32.254]                 {
[08:28:32.254]                   NULL
[08:28:32.254]                   options(future.plan = NULL)
[08:28:32.254]                   if (is.na(NA_character_)) 
[08:28:32.254]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:32.254]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:32.254]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:32.254]                     .init = FALSE)
[08:28:32.254]                 }
[08:28:32.254]             }
[08:28:32.254]         }
[08:28:32.254]     })
[08:28:32.254]     if (TRUE) {
[08:28:32.254]         base::sink(type = "output", split = FALSE)
[08:28:32.254]         if (TRUE) {
[08:28:32.254]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:32.254]         }
[08:28:32.254]         else {
[08:28:32.254]             ...future.result["stdout"] <- base::list(NULL)
[08:28:32.254]         }
[08:28:32.254]         base::close(...future.stdout)
[08:28:32.254]         ...future.stdout <- NULL
[08:28:32.254]     }
[08:28:32.254]     ...future.result$conditions <- ...future.conditions
[08:28:32.254]     ...future.result$finished <- base::Sys.time()
[08:28:32.254]     ...future.result
[08:28:32.254] }
[08:28:32.307] ClusterFuture started
[08:28:32.308] result() for ClusterFuture ...
[08:28:32.308] receiveMessageFromWorker() for ClusterFuture ...
[08:28:32.308] - Validating connection of ClusterFuture
[08:28:32.339] - received message: FutureResult
[08:28:32.340] - Received FutureResult
[08:28:32.340] - Erased future from FutureRegistry
[08:28:32.340] result() for ClusterFuture ...
[08:28:32.340] - result already collected: FutureResult
[08:28:32.340] result() for ClusterFuture ... done
[08:28:32.340] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:32.340] result() for ClusterFuture ... done
[08:28:32.340] result() for ClusterFuture ...
[08:28:32.340] - result already collected: FutureResult
[08:28:32.340] result() for ClusterFuture ... done
[08:28:32.341] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:32.344] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[08:28:32.607] plan(): Setting new future strategy stack:
[08:28:32.607] List of future strategies:
[08:28:32.607] 1. cluster:
[08:28:32.607]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[08:28:32.607]    - tweaked: TRUE
[08:28:32.607]    - call: plan(cluster, workers = workers)
[08:28:32.609] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[08:28:32.609] cluster:
[08:28:32.609] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[08:28:32.609] - tweaked: TRUE
[08:28:32.609] - call: plan(cluster, workers = workers)
[08:28:32.611] getGlobalsAndPackages() ...
[08:28:32.611] Not searching for globals
[08:28:32.611] - globals: [0] <none>
[08:28:32.611] getGlobalsAndPackages() ... DONE
[08:28:32.624] Packages needed by the future expression (n = 0): <none>
[08:28:32.624] Packages needed by future strategies (n = 0): <none>
[08:28:32.625] {
[08:28:32.625]     {
[08:28:32.625]         {
[08:28:32.625]             ...future.startTime <- base::Sys.time()
[08:28:32.625]             {
[08:28:32.625]                 {
[08:28:32.625]                   {
[08:28:32.625]                     base::local({
[08:28:32.625]                       has_future <- base::requireNamespace("future", 
[08:28:32.625]                         quietly = TRUE)
[08:28:32.625]                       if (has_future) {
[08:28:32.625]                         ns <- base::getNamespace("future")
[08:28:32.625]                         version <- ns[[".package"]][["version"]]
[08:28:32.625]                         if (is.null(version)) 
[08:28:32.625]                           version <- utils::packageVersion("future")
[08:28:32.625]                       }
[08:28:32.625]                       else {
[08:28:32.625]                         version <- NULL
[08:28:32.625]                       }
[08:28:32.625]                       if (!has_future || version < "1.8.0") {
[08:28:32.625]                         info <- base::c(r_version = base::gsub("R version ", 
[08:28:32.625]                           "", base::R.version$version.string), 
[08:28:32.625]                           platform = base::sprintf("%s (%s-bit)", 
[08:28:32.625]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:28:32.625]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:28:32.625]                             "release", "version")], collapse = " "), 
[08:28:32.625]                           hostname = base::Sys.info()[["nodename"]])
[08:28:32.625]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:28:32.625]                           info)
[08:28:32.625]                         info <- base::paste(info, collapse = "; ")
[08:28:32.625]                         if (!has_future) {
[08:28:32.625]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:28:32.625]                             info)
[08:28:32.625]                         }
[08:28:32.625]                         else {
[08:28:32.625]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:28:32.625]                             info, version)
[08:28:32.625]                         }
[08:28:32.625]                         base::stop(msg)
[08:28:32.625]                       }
[08:28:32.625]                     })
[08:28:32.625]                   }
[08:28:32.625]                   ...future.strategy.old <- future::plan("list")
[08:28:32.625]                   options(future.plan = NULL)
[08:28:32.625]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:28:32.625]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:28:32.625]                 }
[08:28:32.625]                 ...future.workdir <- getwd()
[08:28:32.625]             }
[08:28:32.625]             ...future.oldOptions <- base::as.list(base::.Options)
[08:28:32.625]             ...future.oldEnvVars <- base::Sys.getenv()
[08:28:32.625]         }
[08:28:32.625]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:28:32.625]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:28:32.625]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:28:32.625]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:28:32.625]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:28:32.625]             future.stdout.windows.reencode = NULL, width = 80L)
[08:28:32.625]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:28:32.625]             base::names(...future.oldOptions))
[08:28:32.625]     }
[08:28:32.625]     if (FALSE) {
[08:28:32.625]     }
[08:28:32.625]     else {
[08:28:32.625]         if (TRUE) {
[08:28:32.625]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:28:32.625]                 open = "w")
[08:28:32.625]         }
[08:28:32.625]         else {
[08:28:32.625]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:28:32.625]                 windows = "NUL", "/dev/null"), open = "w")
[08:28:32.625]         }
[08:28:32.625]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:28:32.625]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:28:32.625]             base::sink(type = "output", split = FALSE)
[08:28:32.625]             base::close(...future.stdout)
[08:28:32.625]         }, add = TRUE)
[08:28:32.625]     }
[08:28:32.625]     ...future.frame <- base::sys.nframe()
[08:28:32.625]     ...future.conditions <- base::list()
[08:28:32.625]     ...future.rng <- base::globalenv()$.Random.seed
[08:28:32.625]     if (FALSE) {
[08:28:32.625]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:28:32.625]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:28:32.625]     }
[08:28:32.625]     ...future.result <- base::tryCatch({
[08:28:32.625]         base::withCallingHandlers({
[08:28:32.625]             ...future.value <- base::withVisible(base::local({
[08:28:32.625]                 ...future.makeSendCondition <- base::local({
[08:28:32.625]                   sendCondition <- NULL
[08:28:32.625]                   function(frame = 1L) {
[08:28:32.625]                     if (is.function(sendCondition)) 
[08:28:32.625]                       return(sendCondition)
[08:28:32.625]                     ns <- getNamespace("parallel")
[08:28:32.625]                     if (exists("sendData", mode = "function", 
[08:28:32.625]                       envir = ns)) {
[08:28:32.625]                       parallel_sendData <- get("sendData", mode = "function", 
[08:28:32.625]                         envir = ns)
[08:28:32.625]                       envir <- sys.frame(frame)
[08:28:32.625]                       master <- NULL
[08:28:32.625]                       while (!identical(envir, .GlobalEnv) && 
[08:28:32.625]                         !identical(envir, emptyenv())) {
[08:28:32.625]                         if (exists("master", mode = "list", envir = envir, 
[08:28:32.625]                           inherits = FALSE)) {
[08:28:32.625]                           master <- get("master", mode = "list", 
[08:28:32.625]                             envir = envir, inherits = FALSE)
[08:28:32.625]                           if (inherits(master, c("SOCKnode", 
[08:28:32.625]                             "SOCK0node"))) {
[08:28:32.625]                             sendCondition <<- function(cond) {
[08:28:32.625]                               data <- list(type = "VALUE", value = cond, 
[08:28:32.625]                                 success = TRUE)
[08:28:32.625]                               parallel_sendData(master, data)
[08:28:32.625]                             }
[08:28:32.625]                             return(sendCondition)
[08:28:32.625]                           }
[08:28:32.625]                         }
[08:28:32.625]                         frame <- frame + 1L
[08:28:32.625]                         envir <- sys.frame(frame)
[08:28:32.625]                       }
[08:28:32.625]                     }
[08:28:32.625]                     sendCondition <<- function(cond) NULL
[08:28:32.625]                   }
[08:28:32.625]                 })
[08:28:32.625]                 withCallingHandlers({
[08:28:32.625]                   NA
[08:28:32.625]                 }, immediateCondition = function(cond) {
[08:28:32.625]                   sendCondition <- ...future.makeSendCondition()
[08:28:32.625]                   sendCondition(cond)
[08:28:32.625]                   muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.625]                   {
[08:28:32.625]                     inherits <- base::inherits
[08:28:32.625]                     invokeRestart <- base::invokeRestart
[08:28:32.625]                     is.null <- base::is.null
[08:28:32.625]                     muffled <- FALSE
[08:28:32.625]                     if (inherits(cond, "message")) {
[08:28:32.625]                       muffled <- grepl(pattern, "muffleMessage")
[08:28:32.625]                       if (muffled) 
[08:28:32.625]                         invokeRestart("muffleMessage")
[08:28:32.625]                     }
[08:28:32.625]                     else if (inherits(cond, "warning")) {
[08:28:32.625]                       muffled <- grepl(pattern, "muffleWarning")
[08:28:32.625]                       if (muffled) 
[08:28:32.625]                         invokeRestart("muffleWarning")
[08:28:32.625]                     }
[08:28:32.625]                     else if (inherits(cond, "condition")) {
[08:28:32.625]                       if (!is.null(pattern)) {
[08:28:32.625]                         computeRestarts <- base::computeRestarts
[08:28:32.625]                         grepl <- base::grepl
[08:28:32.625]                         restarts <- computeRestarts(cond)
[08:28:32.625]                         for (restart in restarts) {
[08:28:32.625]                           name <- restart$name
[08:28:32.625]                           if (is.null(name)) 
[08:28:32.625]                             next
[08:28:32.625]                           if (!grepl(pattern, name)) 
[08:28:32.625]                             next
[08:28:32.625]                           invokeRestart(restart)
[08:28:32.625]                           muffled <- TRUE
[08:28:32.625]                           break
[08:28:32.625]                         }
[08:28:32.625]                       }
[08:28:32.625]                     }
[08:28:32.625]                     invisible(muffled)
[08:28:32.625]                   }
[08:28:32.625]                   muffleCondition(cond)
[08:28:32.625]                 })
[08:28:32.625]             }))
[08:28:32.625]             future::FutureResult(value = ...future.value$value, 
[08:28:32.625]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:32.625]                   ...future.rng), globalenv = if (FALSE) 
[08:28:32.625]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:28:32.625]                     ...future.globalenv.names))
[08:28:32.625]                 else NULL, started = ...future.startTime, version = "1.8")
[08:28:32.625]         }, condition = base::local({
[08:28:32.625]             c <- base::c
[08:28:32.625]             inherits <- base::inherits
[08:28:32.625]             invokeRestart <- base::invokeRestart
[08:28:32.625]             length <- base::length
[08:28:32.625]             list <- base::list
[08:28:32.625]             seq.int <- base::seq.int
[08:28:32.625]             signalCondition <- base::signalCondition
[08:28:32.625]             sys.calls <- base::sys.calls
[08:28:32.625]             `[[` <- base::`[[`
[08:28:32.625]             `+` <- base::`+`
[08:28:32.625]             `<<-` <- base::`<<-`
[08:28:32.625]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:28:32.625]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:28:32.625]                   3L)]
[08:28:32.625]             }
[08:28:32.625]             function(cond) {
[08:28:32.625]                 is_error <- inherits(cond, "error")
[08:28:32.625]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:28:32.625]                   NULL)
[08:28:32.625]                 if (is_error) {
[08:28:32.625]                   sessionInformation <- function() {
[08:28:32.625]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:28:32.625]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:28:32.625]                       search = base::search(), system = base::Sys.info())
[08:28:32.625]                   }
[08:28:32.625]                   ...future.conditions[[length(...future.conditions) + 
[08:28:32.625]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:28:32.625]                     cond$call), session = sessionInformation(), 
[08:28:32.625]                     timestamp = base::Sys.time(), signaled = 0L)
[08:28:32.625]                   signalCondition(cond)
[08:28:32.625]                 }
[08:28:32.625]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:28:32.625]                 "immediateCondition"))) {
[08:28:32.625]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:28:32.625]                   ...future.conditions[[length(...future.conditions) + 
[08:28:32.625]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:28:32.625]                   if (TRUE && !signal) {
[08:28:32.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.625]                     {
[08:28:32.625]                       inherits <- base::inherits
[08:28:32.625]                       invokeRestart <- base::invokeRestart
[08:28:32.625]                       is.null <- base::is.null
[08:28:32.625]                       muffled <- FALSE
[08:28:32.625]                       if (inherits(cond, "message")) {
[08:28:32.625]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:32.625]                         if (muffled) 
[08:28:32.625]                           invokeRestart("muffleMessage")
[08:28:32.625]                       }
[08:28:32.625]                       else if (inherits(cond, "warning")) {
[08:28:32.625]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:32.625]                         if (muffled) 
[08:28:32.625]                           invokeRestart("muffleWarning")
[08:28:32.625]                       }
[08:28:32.625]                       else if (inherits(cond, "condition")) {
[08:28:32.625]                         if (!is.null(pattern)) {
[08:28:32.625]                           computeRestarts <- base::computeRestarts
[08:28:32.625]                           grepl <- base::grepl
[08:28:32.625]                           restarts <- computeRestarts(cond)
[08:28:32.625]                           for (restart in restarts) {
[08:28:32.625]                             name <- restart$name
[08:28:32.625]                             if (is.null(name)) 
[08:28:32.625]                               next
[08:28:32.625]                             if (!grepl(pattern, name)) 
[08:28:32.625]                               next
[08:28:32.625]                             invokeRestart(restart)
[08:28:32.625]                             muffled <- TRUE
[08:28:32.625]                             break
[08:28:32.625]                           }
[08:28:32.625]                         }
[08:28:32.625]                       }
[08:28:32.625]                       invisible(muffled)
[08:28:32.625]                     }
[08:28:32.625]                     muffleCondition(cond, pattern = "^muffle")
[08:28:32.625]                   }
[08:28:32.625]                 }
[08:28:32.625]                 else {
[08:28:32.625]                   if (TRUE) {
[08:28:32.625]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:28:32.625]                     {
[08:28:32.625]                       inherits <- base::inherits
[08:28:32.625]                       invokeRestart <- base::invokeRestart
[08:28:32.625]                       is.null <- base::is.null
[08:28:32.625]                       muffled <- FALSE
[08:28:32.625]                       if (inherits(cond, "message")) {
[08:28:32.625]                         muffled <- grepl(pattern, "muffleMessage")
[08:28:32.625]                         if (muffled) 
[08:28:32.625]                           invokeRestart("muffleMessage")
[08:28:32.625]                       }
[08:28:32.625]                       else if (inherits(cond, "warning")) {
[08:28:32.625]                         muffled <- grepl(pattern, "muffleWarning")
[08:28:32.625]                         if (muffled) 
[08:28:32.625]                           invokeRestart("muffleWarning")
[08:28:32.625]                       }
[08:28:32.625]                       else if (inherits(cond, "condition")) {
[08:28:32.625]                         if (!is.null(pattern)) {
[08:28:32.625]                           computeRestarts <- base::computeRestarts
[08:28:32.625]                           grepl <- base::grepl
[08:28:32.625]                           restarts <- computeRestarts(cond)
[08:28:32.625]                           for (restart in restarts) {
[08:28:32.625]                             name <- restart$name
[08:28:32.625]                             if (is.null(name)) 
[08:28:32.625]                               next
[08:28:32.625]                             if (!grepl(pattern, name)) 
[08:28:32.625]                               next
[08:28:32.625]                             invokeRestart(restart)
[08:28:32.625]                             muffled <- TRUE
[08:28:32.625]                             break
[08:28:32.625]                           }
[08:28:32.625]                         }
[08:28:32.625]                       }
[08:28:32.625]                       invisible(muffled)
[08:28:32.625]                     }
[08:28:32.625]                     muffleCondition(cond, pattern = "^muffle")
[08:28:32.625]                   }
[08:28:32.625]                 }
[08:28:32.625]             }
[08:28:32.625]         }))
[08:28:32.625]     }, error = function(ex) {
[08:28:32.625]         base::structure(base::list(value = NULL, visible = NULL, 
[08:28:32.625]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:28:32.625]                 ...future.rng), started = ...future.startTime, 
[08:28:32.625]             finished = Sys.time(), session_uuid = NA_character_, 
[08:28:32.625]             version = "1.8"), class = "FutureResult")
[08:28:32.625]     }, finally = {
[08:28:32.625]         if (!identical(...future.workdir, getwd())) 
[08:28:32.625]             setwd(...future.workdir)
[08:28:32.625]         {
[08:28:32.625]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:28:32.625]                 ...future.oldOptions$nwarnings <- NULL
[08:28:32.625]             }
[08:28:32.625]             base::options(...future.oldOptions)
[08:28:32.625]             if (.Platform$OS.type == "windows") {
[08:28:32.625]                 old_names <- names(...future.oldEnvVars)
[08:28:32.625]                 envs <- base::Sys.getenv()
[08:28:32.625]                 names <- names(envs)
[08:28:32.625]                 common <- intersect(names, old_names)
[08:28:32.625]                 added <- setdiff(names, old_names)
[08:28:32.625]                 removed <- setdiff(old_names, names)
[08:28:32.625]                 changed <- common[...future.oldEnvVars[common] != 
[08:28:32.625]                   envs[common]]
[08:28:32.625]                 NAMES <- toupper(changed)
[08:28:32.625]                 args <- list()
[08:28:32.625]                 for (kk in seq_along(NAMES)) {
[08:28:32.625]                   name <- changed[[kk]]
[08:28:32.625]                   NAME <- NAMES[[kk]]
[08:28:32.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.625]                     next
[08:28:32.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:32.625]                 }
[08:28:32.625]                 NAMES <- toupper(added)
[08:28:32.625]                 for (kk in seq_along(NAMES)) {
[08:28:32.625]                   name <- added[[kk]]
[08:28:32.625]                   NAME <- NAMES[[kk]]
[08:28:32.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.625]                     next
[08:28:32.625]                   args[[name]] <- ""
[08:28:32.625]                 }
[08:28:32.625]                 NAMES <- toupper(removed)
[08:28:32.625]                 for (kk in seq_along(NAMES)) {
[08:28:32.625]                   name <- removed[[kk]]
[08:28:32.625]                   NAME <- NAMES[[kk]]
[08:28:32.625]                   if (name != NAME && is.element(NAME, old_names)) 
[08:28:32.625]                     next
[08:28:32.625]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:28:32.625]                 }
[08:28:32.625]                 if (length(args) > 0) 
[08:28:32.625]                   base::do.call(base::Sys.setenv, args = args)
[08:28:32.625]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:28:32.625]             }
[08:28:32.625]             else {
[08:28:32.625]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:28:32.625]             }
[08:28:32.625]             {
[08:28:32.625]                 if (base::length(...future.futureOptionsAdded) > 
[08:28:32.625]                   0L) {
[08:28:32.625]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:28:32.625]                   base::names(opts) <- ...future.futureOptionsAdded
[08:28:32.625]                   base::options(opts)
[08:28:32.625]                 }
[08:28:32.625]                 {
[08:28:32.625]                   NULL
[08:28:32.625]                   options(future.plan = NULL)
[08:28:32.625]                   if (is.na(NA_character_)) 
[08:28:32.625]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:28:32.625]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:28:32.625]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:28:32.625]                     .init = FALSE)
[08:28:32.625]                 }
[08:28:32.625]             }
[08:28:32.625]         }
[08:28:32.625]     })
[08:28:32.625]     if (TRUE) {
[08:28:32.625]         base::sink(type = "output", split = FALSE)
[08:28:32.625]         if (TRUE) {
[08:28:32.625]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:28:32.625]         }
[08:28:32.625]         else {
[08:28:32.625]             ...future.result["stdout"] <- base::list(NULL)
[08:28:32.625]         }
[08:28:32.625]         base::close(...future.stdout)
[08:28:32.625]         ...future.stdout <- NULL
[08:28:32.625]     }
[08:28:32.625]     ...future.result$conditions <- ...future.conditions
[08:28:32.625]     ...future.result$finished <- base::Sys.time()
[08:28:32.625]     ...future.result
[08:28:32.625] }
[08:28:32.678] ClusterFuture started
[08:28:32.679] result() for ClusterFuture ...
[08:28:32.679] receiveMessageFromWorker() for ClusterFuture ...
[08:28:32.679] - Validating connection of ClusterFuture
[08:28:32.711] - received message: FutureResult
[08:28:32.711] - Received FutureResult
[08:28:32.711] - Erased future from FutureRegistry
[08:28:32.711] result() for ClusterFuture ...
[08:28:32.711] - result already collected: FutureResult
[08:28:32.711] result() for ClusterFuture ... done
[08:28:32.711] receiveMessageFromWorker() for ClusterFuture ... done
[08:28:32.711] result() for ClusterFuture ... done
[08:28:32.712] result() for ClusterFuture ...
[08:28:32.712] - result already collected: FutureResult
[08:28:32.712] result() for ClusterFuture ... done
[08:28:32.712] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[08:28:32.712] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[08:28:32.713] plan(): Setting new future strategy stack:
[08:28:32.713] List of future strategies:
[08:28:32.713] 1. FutureStrategy:
[08:28:32.713]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:28:32.713]    - tweaked: FALSE
[08:28:32.713]    - call: future::plan(oplan)
[08:28:32.714] plan(): nbrOfWorkers() = 1
> 
