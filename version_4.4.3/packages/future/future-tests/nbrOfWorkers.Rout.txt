
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:02:08.134] plan(): Setting new future strategy stack:
[11:02:08.135] List of future strategies:
[11:02:08.135] 1. sequential:
[11:02:08.135]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:08.135]    - tweaked: FALSE
[11:02:08.135]    - call: future::plan("sequential")
[11:02:08.148] plan(): nbrOfWorkers() = 1
> 
> message("*** nbrOfWorkers() ...")
*** nbrOfWorkers() ...
> 
> strategies <- c("sequential")
> for (strategy in strategies) {
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == 1L)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == 1L)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+   stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: sequential
nbrOfWorkers: 1
[11:02:08.170] plan(): Setting new future strategy stack:
[11:02:08.170] List of future strategies:
[11:02:08.170] 1. sequential:
[11:02:08.170]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:08.170]    - tweaked: FALSE
[11:02:08.170]    - call: plan(strategy)
[11:02:08.181] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 0
> 
> 
> strategies <- c("cluster", "multisession", "multicore")
> strategies <- intersect(strategies, supportedStrategies())
> cores <- availableCores()
> message("Number of available cores: ", cores)
Number of available cores: 2
> workers <- availableWorkers()
> nworkers <- length(workers)
> message(sprintf("Available workers: [n = %d] %s", nworkers, hpaste(sQuote(workers))))
Available workers: [n = 2] ‘localhost’, ‘localhost’
> 
> allButOneCore <- function() max(1L, future::availableCores() - 1L)
> allButOneWorker <- function() {
+   w <- future::availableWorkers()
+   if (length(w) > 1) w[-1] else w
+ }
> 
> for (strategy in strategies) {
+   ## Speed up CRAN checks: Skip on CRAN Windows 32-bit
+   if (!fullTest && isWin32) next
+ 
+   message("Type of future: ", strategy)
+ 
+   evaluator <- get(strategy, mode = "function")
+   n <- nbrOfWorkers(evaluator)
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   plan(strategy)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == nworkers)
+ 
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == nworkers)
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = 1L)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ 
+   plan(strategy, workers = allButOneCore)
+   n <- nbrOfWorkers()
+   message(sprintf("nbrOfWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers()
+   message(sprintf("nbrOfFreeWorkers: %d", n))
+   stopifnot(n == max(1L, nworkers - 1L))
+   
+   n <- nbrOfFreeWorkers(background = TRUE)
+   message(sprintf("nbrOfFreeWorkers(background = TRUE): %d", n))
+ # FIXME  stopifnot(n == 0L)
+ } ## for (strategy ...)
Type of future: multisession
nbrOfWorkers: 2
[11:02:08.206] plan(): Setting new future strategy stack:
[11:02:08.206] List of future strategies:
[11:02:08.206] 1. multisession:
[11:02:08.206]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:02:08.206]    - tweaked: FALSE
[11:02:08.206]    - call: plan(strategy)
[11:02:08.206] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:08.207] multisession:
[11:02:08.207] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:02:08.207] - tweaked: FALSE
[11:02:08.207] - call: plan(strategy)
[11:02:08.210] getGlobalsAndPackages() ...
[11:02:08.210] Not searching for globals
[11:02:08.211] - globals: [0] <none>
[11:02:08.211] getGlobalsAndPackages() ... DONE
[11:02:08.671] Packages needed by the future expression (n = 0): <none>
[11:02:08.672] Packages needed by future strategies (n = 0): <none>
[11:02:08.672] {
[11:02:08.672]     {
[11:02:08.672]         {
[11:02:08.672]             ...future.startTime <- base::Sys.time()
[11:02:08.672]             {
[11:02:08.672]                 {
[11:02:08.672]                   {
[11:02:08.672]                     {
[11:02:08.672]                       base::local({
[11:02:08.672]                         has_future <- base::requireNamespace("future", 
[11:02:08.672]                           quietly = TRUE)
[11:02:08.672]                         if (has_future) {
[11:02:08.672]                           ns <- base::getNamespace("future")
[11:02:08.672]                           version <- ns[[".package"]][["version"]]
[11:02:08.672]                           if (is.null(version)) 
[11:02:08.672]                             version <- utils::packageVersion("future")
[11:02:08.672]                         }
[11:02:08.672]                         else {
[11:02:08.672]                           version <- NULL
[11:02:08.672]                         }
[11:02:08.672]                         if (!has_future || version < "1.8.0") {
[11:02:08.672]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:08.672]                             "", base::R.version$version.string), 
[11:02:08.672]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:08.672]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:08.672]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:08.672]                               "release", "version")], collapse = " "), 
[11:02:08.672]                             hostname = base::Sys.info()[["nodename"]])
[11:02:08.672]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:08.672]                             info)
[11:02:08.672]                           info <- base::paste(info, collapse = "; ")
[11:02:08.672]                           if (!has_future) {
[11:02:08.672]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:08.672]                               info)
[11:02:08.672]                           }
[11:02:08.672]                           else {
[11:02:08.672]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:08.672]                               info, version)
[11:02:08.672]                           }
[11:02:08.672]                           base::stop(msg)
[11:02:08.672]                         }
[11:02:08.672]                       })
[11:02:08.672]                     }
[11:02:08.672]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:08.672]                     base::options(mc.cores = 1L)
[11:02:08.672]                   }
[11:02:08.672]                   ...future.strategy.old <- future::plan("list")
[11:02:08.672]                   options(future.plan = NULL)
[11:02:08.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:08.672]                 }
[11:02:08.672]                 ...future.workdir <- getwd()
[11:02:08.672]             }
[11:02:08.672]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:08.672]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:08.672]         }
[11:02:08.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:08.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:08.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:08.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:08.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:08.672]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:08.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:08.672]             base::names(...future.oldOptions))
[11:02:08.672]     }
[11:02:08.672]     if (FALSE) {
[11:02:08.672]     }
[11:02:08.672]     else {
[11:02:08.672]         if (TRUE) {
[11:02:08.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:08.672]                 open = "w")
[11:02:08.672]         }
[11:02:08.672]         else {
[11:02:08.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:08.672]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:08.672]         }
[11:02:08.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:08.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:08.672]             base::sink(type = "output", split = FALSE)
[11:02:08.672]             base::close(...future.stdout)
[11:02:08.672]         }, add = TRUE)
[11:02:08.672]     }
[11:02:08.672]     ...future.frame <- base::sys.nframe()
[11:02:08.672]     ...future.conditions <- base::list()
[11:02:08.672]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:08.672]     if (FALSE) {
[11:02:08.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:08.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:08.672]     }
[11:02:08.672]     ...future.result <- base::tryCatch({
[11:02:08.672]         base::withCallingHandlers({
[11:02:08.672]             ...future.value <- base::withVisible(base::local({
[11:02:08.672]                 ...future.makeSendCondition <- base::local({
[11:02:08.672]                   sendCondition <- NULL
[11:02:08.672]                   function(frame = 1L) {
[11:02:08.672]                     if (is.function(sendCondition)) 
[11:02:08.672]                       return(sendCondition)
[11:02:08.672]                     ns <- getNamespace("parallel")
[11:02:08.672]                     if (exists("sendData", mode = "function", 
[11:02:08.672]                       envir = ns)) {
[11:02:08.672]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:08.672]                         envir = ns)
[11:02:08.672]                       envir <- sys.frame(frame)
[11:02:08.672]                       master <- NULL
[11:02:08.672]                       while (!identical(envir, .GlobalEnv) && 
[11:02:08.672]                         !identical(envir, emptyenv())) {
[11:02:08.672]                         if (exists("master", mode = "list", envir = envir, 
[11:02:08.672]                           inherits = FALSE)) {
[11:02:08.672]                           master <- get("master", mode = "list", 
[11:02:08.672]                             envir = envir, inherits = FALSE)
[11:02:08.672]                           if (inherits(master, c("SOCKnode", 
[11:02:08.672]                             "SOCK0node"))) {
[11:02:08.672]                             sendCondition <<- function(cond) {
[11:02:08.672]                               data <- list(type = "VALUE", value = cond, 
[11:02:08.672]                                 success = TRUE)
[11:02:08.672]                               parallel_sendData(master, data)
[11:02:08.672]                             }
[11:02:08.672]                             return(sendCondition)
[11:02:08.672]                           }
[11:02:08.672]                         }
[11:02:08.672]                         frame <- frame + 1L
[11:02:08.672]                         envir <- sys.frame(frame)
[11:02:08.672]                       }
[11:02:08.672]                     }
[11:02:08.672]                     sendCondition <<- function(cond) NULL
[11:02:08.672]                   }
[11:02:08.672]                 })
[11:02:08.672]                 withCallingHandlers({
[11:02:08.672]                   NA
[11:02:08.672]                 }, immediateCondition = function(cond) {
[11:02:08.672]                   sendCondition <- ...future.makeSendCondition()
[11:02:08.672]                   sendCondition(cond)
[11:02:08.672]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.672]                   {
[11:02:08.672]                     inherits <- base::inherits
[11:02:08.672]                     invokeRestart <- base::invokeRestart
[11:02:08.672]                     is.null <- base::is.null
[11:02:08.672]                     muffled <- FALSE
[11:02:08.672]                     if (inherits(cond, "message")) {
[11:02:08.672]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:08.672]                       if (muffled) 
[11:02:08.672]                         invokeRestart("muffleMessage")
[11:02:08.672]                     }
[11:02:08.672]                     else if (inherits(cond, "warning")) {
[11:02:08.672]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:08.672]                       if (muffled) 
[11:02:08.672]                         invokeRestart("muffleWarning")
[11:02:08.672]                     }
[11:02:08.672]                     else if (inherits(cond, "condition")) {
[11:02:08.672]                       if (!is.null(pattern)) {
[11:02:08.672]                         computeRestarts <- base::computeRestarts
[11:02:08.672]                         grepl <- base::grepl
[11:02:08.672]                         restarts <- computeRestarts(cond)
[11:02:08.672]                         for (restart in restarts) {
[11:02:08.672]                           name <- restart$name
[11:02:08.672]                           if (is.null(name)) 
[11:02:08.672]                             next
[11:02:08.672]                           if (!grepl(pattern, name)) 
[11:02:08.672]                             next
[11:02:08.672]                           invokeRestart(restart)
[11:02:08.672]                           muffled <- TRUE
[11:02:08.672]                           break
[11:02:08.672]                         }
[11:02:08.672]                       }
[11:02:08.672]                     }
[11:02:08.672]                     invisible(muffled)
[11:02:08.672]                   }
[11:02:08.672]                   muffleCondition(cond)
[11:02:08.672]                 })
[11:02:08.672]             }))
[11:02:08.672]             future::FutureResult(value = ...future.value$value, 
[11:02:08.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.672]                   ...future.rng), globalenv = if (FALSE) 
[11:02:08.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:08.672]                     ...future.globalenv.names))
[11:02:08.672]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:08.672]         }, condition = base::local({
[11:02:08.672]             c <- base::c
[11:02:08.672]             inherits <- base::inherits
[11:02:08.672]             invokeRestart <- base::invokeRestart
[11:02:08.672]             length <- base::length
[11:02:08.672]             list <- base::list
[11:02:08.672]             seq.int <- base::seq.int
[11:02:08.672]             signalCondition <- base::signalCondition
[11:02:08.672]             sys.calls <- base::sys.calls
[11:02:08.672]             `[[` <- base::`[[`
[11:02:08.672]             `+` <- base::`+`
[11:02:08.672]             `<<-` <- base::`<<-`
[11:02:08.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:08.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:08.672]                   3L)]
[11:02:08.672]             }
[11:02:08.672]             function(cond) {
[11:02:08.672]                 is_error <- inherits(cond, "error")
[11:02:08.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:08.672]                   NULL)
[11:02:08.672]                 if (is_error) {
[11:02:08.672]                   sessionInformation <- function() {
[11:02:08.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:08.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:08.672]                       search = base::search(), system = base::Sys.info())
[11:02:08.672]                   }
[11:02:08.672]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:08.672]                     cond$call), session = sessionInformation(), 
[11:02:08.672]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:08.672]                   signalCondition(cond)
[11:02:08.672]                 }
[11:02:08.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:08.672]                 "immediateCondition"))) {
[11:02:08.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:08.672]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:08.672]                   if (TRUE && !signal) {
[11:02:08.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.672]                     {
[11:02:08.672]                       inherits <- base::inherits
[11:02:08.672]                       invokeRestart <- base::invokeRestart
[11:02:08.672]                       is.null <- base::is.null
[11:02:08.672]                       muffled <- FALSE
[11:02:08.672]                       if (inherits(cond, "message")) {
[11:02:08.672]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.672]                         if (muffled) 
[11:02:08.672]                           invokeRestart("muffleMessage")
[11:02:08.672]                       }
[11:02:08.672]                       else if (inherits(cond, "warning")) {
[11:02:08.672]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.672]                         if (muffled) 
[11:02:08.672]                           invokeRestart("muffleWarning")
[11:02:08.672]                       }
[11:02:08.672]                       else if (inherits(cond, "condition")) {
[11:02:08.672]                         if (!is.null(pattern)) {
[11:02:08.672]                           computeRestarts <- base::computeRestarts
[11:02:08.672]                           grepl <- base::grepl
[11:02:08.672]                           restarts <- computeRestarts(cond)
[11:02:08.672]                           for (restart in restarts) {
[11:02:08.672]                             name <- restart$name
[11:02:08.672]                             if (is.null(name)) 
[11:02:08.672]                               next
[11:02:08.672]                             if (!grepl(pattern, name)) 
[11:02:08.672]                               next
[11:02:08.672]                             invokeRestart(restart)
[11:02:08.672]                             muffled <- TRUE
[11:02:08.672]                             break
[11:02:08.672]                           }
[11:02:08.672]                         }
[11:02:08.672]                       }
[11:02:08.672]                       invisible(muffled)
[11:02:08.672]                     }
[11:02:08.672]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.672]                   }
[11:02:08.672]                 }
[11:02:08.672]                 else {
[11:02:08.672]                   if (TRUE) {
[11:02:08.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.672]                     {
[11:02:08.672]                       inherits <- base::inherits
[11:02:08.672]                       invokeRestart <- base::invokeRestart
[11:02:08.672]                       is.null <- base::is.null
[11:02:08.672]                       muffled <- FALSE
[11:02:08.672]                       if (inherits(cond, "message")) {
[11:02:08.672]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.672]                         if (muffled) 
[11:02:08.672]                           invokeRestart("muffleMessage")
[11:02:08.672]                       }
[11:02:08.672]                       else if (inherits(cond, "warning")) {
[11:02:08.672]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.672]                         if (muffled) 
[11:02:08.672]                           invokeRestart("muffleWarning")
[11:02:08.672]                       }
[11:02:08.672]                       else if (inherits(cond, "condition")) {
[11:02:08.672]                         if (!is.null(pattern)) {
[11:02:08.672]                           computeRestarts <- base::computeRestarts
[11:02:08.672]                           grepl <- base::grepl
[11:02:08.672]                           restarts <- computeRestarts(cond)
[11:02:08.672]                           for (restart in restarts) {
[11:02:08.672]                             name <- restart$name
[11:02:08.672]                             if (is.null(name)) 
[11:02:08.672]                               next
[11:02:08.672]                             if (!grepl(pattern, name)) 
[11:02:08.672]                               next
[11:02:08.672]                             invokeRestart(restart)
[11:02:08.672]                             muffled <- TRUE
[11:02:08.672]                             break
[11:02:08.672]                           }
[11:02:08.672]                         }
[11:02:08.672]                       }
[11:02:08.672]                       invisible(muffled)
[11:02:08.672]                     }
[11:02:08.672]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.672]                   }
[11:02:08.672]                 }
[11:02:08.672]             }
[11:02:08.672]         }))
[11:02:08.672]     }, error = function(ex) {
[11:02:08.672]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:08.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.672]                 ...future.rng), started = ...future.startTime, 
[11:02:08.672]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:08.672]             version = "1.8"), class = "FutureResult")
[11:02:08.672]     }, finally = {
[11:02:08.672]         if (!identical(...future.workdir, getwd())) 
[11:02:08.672]             setwd(...future.workdir)
[11:02:08.672]         {
[11:02:08.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:08.672]                 ...future.oldOptions$nwarnings <- NULL
[11:02:08.672]             }
[11:02:08.672]             base::options(...future.oldOptions)
[11:02:08.672]             if (.Platform$OS.type == "windows") {
[11:02:08.672]                 old_names <- names(...future.oldEnvVars)
[11:02:08.672]                 envs <- base::Sys.getenv()
[11:02:08.672]                 names <- names(envs)
[11:02:08.672]                 common <- intersect(names, old_names)
[11:02:08.672]                 added <- setdiff(names, old_names)
[11:02:08.672]                 removed <- setdiff(old_names, names)
[11:02:08.672]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:08.672]                   envs[common]]
[11:02:08.672]                 NAMES <- toupper(changed)
[11:02:08.672]                 args <- list()
[11:02:08.672]                 for (kk in seq_along(NAMES)) {
[11:02:08.672]                   name <- changed[[kk]]
[11:02:08.672]                   NAME <- NAMES[[kk]]
[11:02:08.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.672]                     next
[11:02:08.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.672]                 }
[11:02:08.672]                 NAMES <- toupper(added)
[11:02:08.672]                 for (kk in seq_along(NAMES)) {
[11:02:08.672]                   name <- added[[kk]]
[11:02:08.672]                   NAME <- NAMES[[kk]]
[11:02:08.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.672]                     next
[11:02:08.672]                   args[[name]] <- ""
[11:02:08.672]                 }
[11:02:08.672]                 NAMES <- toupper(removed)
[11:02:08.672]                 for (kk in seq_along(NAMES)) {
[11:02:08.672]                   name <- removed[[kk]]
[11:02:08.672]                   NAME <- NAMES[[kk]]
[11:02:08.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.672]                     next
[11:02:08.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.672]                 }
[11:02:08.672]                 if (length(args) > 0) 
[11:02:08.672]                   base::do.call(base::Sys.setenv, args = args)
[11:02:08.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:08.672]             }
[11:02:08.672]             else {
[11:02:08.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:08.672]             }
[11:02:08.672]             {
[11:02:08.672]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:08.672]                   0L) {
[11:02:08.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:08.672]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:08.672]                   base::options(opts)
[11:02:08.672]                 }
[11:02:08.672]                 {
[11:02:08.672]                   {
[11:02:08.672]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:08.672]                     NULL
[11:02:08.672]                   }
[11:02:08.672]                   options(future.plan = NULL)
[11:02:08.672]                   if (is.na(NA_character_)) 
[11:02:08.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:08.672]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:08.672]                     .init = FALSE)
[11:02:08.672]                 }
[11:02:08.672]             }
[11:02:08.672]         }
[11:02:08.672]     })
[11:02:08.672]     if (TRUE) {
[11:02:08.672]         base::sink(type = "output", split = FALSE)
[11:02:08.672]         if (TRUE) {
[11:02:08.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:08.672]         }
[11:02:08.672]         else {
[11:02:08.672]             ...future.result["stdout"] <- base::list(NULL)
[11:02:08.672]         }
[11:02:08.672]         base::close(...future.stdout)
[11:02:08.672]         ...future.stdout <- NULL
[11:02:08.672]     }
[11:02:08.672]     ...future.result$conditions <- ...future.conditions
[11:02:08.672]     ...future.result$finished <- base::Sys.time()
[11:02:08.672]     ...future.result
[11:02:08.672] }
[11:02:08.724] MultisessionFuture started
[11:02:08.725] result() for ClusterFuture ...
[11:02:08.725] receiveMessageFromWorker() for ClusterFuture ...
[11:02:08.725] - Validating connection of MultisessionFuture
[11:02:08.756] - received message: FutureResult
[11:02:08.756] - Received FutureResult
[11:02:08.758] - Erased future from FutureRegistry
[11:02:08.759] result() for ClusterFuture ...
[11:02:08.759] - result already collected: FutureResult
[11:02:08.759] result() for ClusterFuture ... done
[11:02:08.759] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:08.759] result() for ClusterFuture ... done
[11:02:08.759] result() for ClusterFuture ...
[11:02:08.759] - result already collected: FutureResult
[11:02:08.759] result() for ClusterFuture ... done
[11:02:08.759] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:08.761] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
[11:02:08.764] getGlobalsAndPackages() ...
[11:02:08.764] 
[11:02:08.765] - globals: [0] <none>
[11:02:08.765] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 2
[11:02:08.780] getGlobalsAndPackages() ...
[11:02:08.780] 
[11:02:08.780] - globals: [0] <none>
[11:02:08.780] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 2
[11:02:08.794] plan(): Setting new future strategy stack:
[11:02:08.794] List of future strategies:
[11:02:08.794] 1. multisession:
[11:02:08.794]    - args: function (..., workers = 1L, envir = parent.frame())
[11:02:08.794]    - tweaked: TRUE
[11:02:08.794]    - call: plan(strategy, workers = 1L)
[11:02:08.794] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:08.795] multisession:
[11:02:08.795] - args: function (..., workers = 1L, envir = parent.frame())
[11:02:08.795] - tweaked: TRUE
[11:02:08.795] - call: plan(strategy, workers = 1L)
[11:02:08.795] getGlobalsAndPackages() ...
[11:02:08.796] Not searching for globals
[11:02:08.796] - globals: [0] <none>
[11:02:08.796] getGlobalsAndPackages() ... DONE
[11:02:08.797] Packages needed by the future expression (n = 0): <none>
[11:02:08.797] Packages needed by future strategies (n = 0): <none>
[11:02:08.798] {
[11:02:08.798]     {
[11:02:08.798]         {
[11:02:08.798]             ...future.startTime <- base::Sys.time()
[11:02:08.798]             {
[11:02:08.798]                 {
[11:02:08.798]                   {
[11:02:08.798]                     base::local({
[11:02:08.798]                       has_future <- base::requireNamespace("future", 
[11:02:08.798]                         quietly = TRUE)
[11:02:08.798]                       if (has_future) {
[11:02:08.798]                         ns <- base::getNamespace("future")
[11:02:08.798]                         version <- ns[[".package"]][["version"]]
[11:02:08.798]                         if (is.null(version)) 
[11:02:08.798]                           version <- utils::packageVersion("future")
[11:02:08.798]                       }
[11:02:08.798]                       else {
[11:02:08.798]                         version <- NULL
[11:02:08.798]                       }
[11:02:08.798]                       if (!has_future || version < "1.8.0") {
[11:02:08.798]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:08.798]                           "", base::R.version$version.string), 
[11:02:08.798]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:08.798]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:08.798]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:08.798]                             "release", "version")], collapse = " "), 
[11:02:08.798]                           hostname = base::Sys.info()[["nodename"]])
[11:02:08.798]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:08.798]                           info)
[11:02:08.798]                         info <- base::paste(info, collapse = "; ")
[11:02:08.798]                         if (!has_future) {
[11:02:08.798]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:08.798]                             info)
[11:02:08.798]                         }
[11:02:08.798]                         else {
[11:02:08.798]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:08.798]                             info, version)
[11:02:08.798]                         }
[11:02:08.798]                         base::stop(msg)
[11:02:08.798]                       }
[11:02:08.798]                     })
[11:02:08.798]                   }
[11:02:08.798]                   ...future.strategy.old <- future::plan("list")
[11:02:08.798]                   options(future.plan = NULL)
[11:02:08.798]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.798]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:08.798]                 }
[11:02:08.798]                 ...future.workdir <- getwd()
[11:02:08.798]             }
[11:02:08.798]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:08.798]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:08.798]         }
[11:02:08.798]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:08.798]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:08.798]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:08.798]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:08.798]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:08.798]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:08.798]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:08.798]             base::names(...future.oldOptions))
[11:02:08.798]     }
[11:02:08.798]     if (FALSE) {
[11:02:08.798]     }
[11:02:08.798]     else {
[11:02:08.798]         if (TRUE) {
[11:02:08.798]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:08.798]                 open = "w")
[11:02:08.798]         }
[11:02:08.798]         else {
[11:02:08.798]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:08.798]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:08.798]         }
[11:02:08.798]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:08.798]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:08.798]             base::sink(type = "output", split = FALSE)
[11:02:08.798]             base::close(...future.stdout)
[11:02:08.798]         }, add = TRUE)
[11:02:08.798]     }
[11:02:08.798]     ...future.frame <- base::sys.nframe()
[11:02:08.798]     ...future.conditions <- base::list()
[11:02:08.798]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:08.798]     if (FALSE) {
[11:02:08.798]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:08.798]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:08.798]     }
[11:02:08.798]     ...future.result <- base::tryCatch({
[11:02:08.798]         base::withCallingHandlers({
[11:02:08.798]             ...future.value <- base::withVisible(base::local(NA))
[11:02:08.798]             future::FutureResult(value = ...future.value$value, 
[11:02:08.798]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.798]                   ...future.rng), globalenv = if (FALSE) 
[11:02:08.798]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:08.798]                     ...future.globalenv.names))
[11:02:08.798]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:08.798]         }, condition = base::local({
[11:02:08.798]             c <- base::c
[11:02:08.798]             inherits <- base::inherits
[11:02:08.798]             invokeRestart <- base::invokeRestart
[11:02:08.798]             length <- base::length
[11:02:08.798]             list <- base::list
[11:02:08.798]             seq.int <- base::seq.int
[11:02:08.798]             signalCondition <- base::signalCondition
[11:02:08.798]             sys.calls <- base::sys.calls
[11:02:08.798]             `[[` <- base::`[[`
[11:02:08.798]             `+` <- base::`+`
[11:02:08.798]             `<<-` <- base::`<<-`
[11:02:08.798]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:08.798]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:08.798]                   3L)]
[11:02:08.798]             }
[11:02:08.798]             function(cond) {
[11:02:08.798]                 is_error <- inherits(cond, "error")
[11:02:08.798]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:08.798]                   NULL)
[11:02:08.798]                 if (is_error) {
[11:02:08.798]                   sessionInformation <- function() {
[11:02:08.798]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:08.798]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:08.798]                       search = base::search(), system = base::Sys.info())
[11:02:08.798]                   }
[11:02:08.798]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.798]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:08.798]                     cond$call), session = sessionInformation(), 
[11:02:08.798]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:08.798]                   signalCondition(cond)
[11:02:08.798]                 }
[11:02:08.798]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:08.798]                 "immediateCondition"))) {
[11:02:08.798]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:08.798]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.798]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:08.798]                   if (TRUE && !signal) {
[11:02:08.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.798]                     {
[11:02:08.798]                       inherits <- base::inherits
[11:02:08.798]                       invokeRestart <- base::invokeRestart
[11:02:08.798]                       is.null <- base::is.null
[11:02:08.798]                       muffled <- FALSE
[11:02:08.798]                       if (inherits(cond, "message")) {
[11:02:08.798]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.798]                         if (muffled) 
[11:02:08.798]                           invokeRestart("muffleMessage")
[11:02:08.798]                       }
[11:02:08.798]                       else if (inherits(cond, "warning")) {
[11:02:08.798]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.798]                         if (muffled) 
[11:02:08.798]                           invokeRestart("muffleWarning")
[11:02:08.798]                       }
[11:02:08.798]                       else if (inherits(cond, "condition")) {
[11:02:08.798]                         if (!is.null(pattern)) {
[11:02:08.798]                           computeRestarts <- base::computeRestarts
[11:02:08.798]                           grepl <- base::grepl
[11:02:08.798]                           restarts <- computeRestarts(cond)
[11:02:08.798]                           for (restart in restarts) {
[11:02:08.798]                             name <- restart$name
[11:02:08.798]                             if (is.null(name)) 
[11:02:08.798]                               next
[11:02:08.798]                             if (!grepl(pattern, name)) 
[11:02:08.798]                               next
[11:02:08.798]                             invokeRestart(restart)
[11:02:08.798]                             muffled <- TRUE
[11:02:08.798]                             break
[11:02:08.798]                           }
[11:02:08.798]                         }
[11:02:08.798]                       }
[11:02:08.798]                       invisible(muffled)
[11:02:08.798]                     }
[11:02:08.798]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.798]                   }
[11:02:08.798]                 }
[11:02:08.798]                 else {
[11:02:08.798]                   if (TRUE) {
[11:02:08.798]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.798]                     {
[11:02:08.798]                       inherits <- base::inherits
[11:02:08.798]                       invokeRestart <- base::invokeRestart
[11:02:08.798]                       is.null <- base::is.null
[11:02:08.798]                       muffled <- FALSE
[11:02:08.798]                       if (inherits(cond, "message")) {
[11:02:08.798]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.798]                         if (muffled) 
[11:02:08.798]                           invokeRestart("muffleMessage")
[11:02:08.798]                       }
[11:02:08.798]                       else if (inherits(cond, "warning")) {
[11:02:08.798]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.798]                         if (muffled) 
[11:02:08.798]                           invokeRestart("muffleWarning")
[11:02:08.798]                       }
[11:02:08.798]                       else if (inherits(cond, "condition")) {
[11:02:08.798]                         if (!is.null(pattern)) {
[11:02:08.798]                           computeRestarts <- base::computeRestarts
[11:02:08.798]                           grepl <- base::grepl
[11:02:08.798]                           restarts <- computeRestarts(cond)
[11:02:08.798]                           for (restart in restarts) {
[11:02:08.798]                             name <- restart$name
[11:02:08.798]                             if (is.null(name)) 
[11:02:08.798]                               next
[11:02:08.798]                             if (!grepl(pattern, name)) 
[11:02:08.798]                               next
[11:02:08.798]                             invokeRestart(restart)
[11:02:08.798]                             muffled <- TRUE
[11:02:08.798]                             break
[11:02:08.798]                           }
[11:02:08.798]                         }
[11:02:08.798]                       }
[11:02:08.798]                       invisible(muffled)
[11:02:08.798]                     }
[11:02:08.798]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.798]                   }
[11:02:08.798]                 }
[11:02:08.798]             }
[11:02:08.798]         }))
[11:02:08.798]     }, error = function(ex) {
[11:02:08.798]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:08.798]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.798]                 ...future.rng), started = ...future.startTime, 
[11:02:08.798]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:08.798]             version = "1.8"), class = "FutureResult")
[11:02:08.798]     }, finally = {
[11:02:08.798]         if (!identical(...future.workdir, getwd())) 
[11:02:08.798]             setwd(...future.workdir)
[11:02:08.798]         {
[11:02:08.798]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:08.798]                 ...future.oldOptions$nwarnings <- NULL
[11:02:08.798]             }
[11:02:08.798]             base::options(...future.oldOptions)
[11:02:08.798]             if (.Platform$OS.type == "windows") {
[11:02:08.798]                 old_names <- names(...future.oldEnvVars)
[11:02:08.798]                 envs <- base::Sys.getenv()
[11:02:08.798]                 names <- names(envs)
[11:02:08.798]                 common <- intersect(names, old_names)
[11:02:08.798]                 added <- setdiff(names, old_names)
[11:02:08.798]                 removed <- setdiff(old_names, names)
[11:02:08.798]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:08.798]                   envs[common]]
[11:02:08.798]                 NAMES <- toupper(changed)
[11:02:08.798]                 args <- list()
[11:02:08.798]                 for (kk in seq_along(NAMES)) {
[11:02:08.798]                   name <- changed[[kk]]
[11:02:08.798]                   NAME <- NAMES[[kk]]
[11:02:08.798]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.798]                     next
[11:02:08.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.798]                 }
[11:02:08.798]                 NAMES <- toupper(added)
[11:02:08.798]                 for (kk in seq_along(NAMES)) {
[11:02:08.798]                   name <- added[[kk]]
[11:02:08.798]                   NAME <- NAMES[[kk]]
[11:02:08.798]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.798]                     next
[11:02:08.798]                   args[[name]] <- ""
[11:02:08.798]                 }
[11:02:08.798]                 NAMES <- toupper(removed)
[11:02:08.798]                 for (kk in seq_along(NAMES)) {
[11:02:08.798]                   name <- removed[[kk]]
[11:02:08.798]                   NAME <- NAMES[[kk]]
[11:02:08.798]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.798]                     next
[11:02:08.798]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.798]                 }
[11:02:08.798]                 if (length(args) > 0) 
[11:02:08.798]                   base::do.call(base::Sys.setenv, args = args)
[11:02:08.798]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:08.798]             }
[11:02:08.798]             else {
[11:02:08.798]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:08.798]             }
[11:02:08.798]             {
[11:02:08.798]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:08.798]                   0L) {
[11:02:08.798]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:08.798]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:08.798]                   base::options(opts)
[11:02:08.798]                 }
[11:02:08.798]                 {
[11:02:08.798]                   {
[11:02:08.798]                     NULL
[11:02:08.798]                     RNGkind("Mersenne-Twister")
[11:02:08.798]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:08.798]                       inherits = FALSE)
[11:02:08.798]                   }
[11:02:08.798]                   options(future.plan = NULL)
[11:02:08.798]                   if (is.na(NA_character_)) 
[11:02:08.798]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.798]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:08.798]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:08.798]                     .init = FALSE)
[11:02:08.798]                 }
[11:02:08.798]             }
[11:02:08.798]         }
[11:02:08.798]     })
[11:02:08.798]     if (TRUE) {
[11:02:08.798]         base::sink(type = "output", split = FALSE)
[11:02:08.798]         if (TRUE) {
[11:02:08.798]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:08.798]         }
[11:02:08.798]         else {
[11:02:08.798]             ...future.result["stdout"] <- base::list(NULL)
[11:02:08.798]         }
[11:02:08.798]         base::close(...future.stdout)
[11:02:08.798]         ...future.stdout <- NULL
[11:02:08.798]     }
[11:02:08.798]     ...future.result$conditions <- ...future.conditions
[11:02:08.798]     ...future.result$finished <- base::Sys.time()
[11:02:08.798]     ...future.result
[11:02:08.798] }
[11:02:08.801] plan(): Setting new future strategy stack:
[11:02:08.801] List of future strategies:
[11:02:08.801] 1. sequential:
[11:02:08.801]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:08.801]    - tweaked: FALSE
[11:02:08.801]    - call: NULL
[11:02:08.802] plan(): nbrOfWorkers() = 1
[11:02:08.803] plan(): Setting new future strategy stack:
[11:02:08.804] List of future strategies:
[11:02:08.804] 1. multisession:
[11:02:08.804]    - args: function (..., workers = 1L, envir = parent.frame())
[11:02:08.804]    - tweaked: TRUE
[11:02:08.804]    - call: plan(strategy, workers = 1L)
[11:02:08.804] plan(): nbrOfWorkers() = 1
[11:02:08.804] SequentialFuture started (and completed)
[11:02:08.805] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:08.805] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[11:02:08.806] getGlobalsAndPackages() ...
[11:02:08.806] Searching for globals...
[11:02:08.809] 
[11:02:08.810] Searching for globals ... DONE
[11:02:08.810] - globals: [0] <none>
[11:02:08.810] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[11:02:08.810] getGlobalsAndPackages() ...
[11:02:08.810] Searching for globals...
[11:02:08.811] 
[11:02:08.811] Searching for globals ... DONE
[11:02:08.811] - globals: [0] <none>
[11:02:08.811] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
[11:02:08.812] plan(): Setting new future strategy stack:
[11:02:08.812] List of future strategies:
[11:02:08.812] 1. multisession:
[11:02:08.812]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[11:02:08.812]    - tweaked: TRUE
[11:02:08.812]    - call: plan(strategy, workers = allButOneCore)
[11:02:08.813] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:08.813] multisession:
[11:02:08.813] - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[11:02:08.813] - tweaked: TRUE
[11:02:08.813] - call: plan(strategy, workers = allButOneCore)
[11:02:08.815] getGlobalsAndPackages() ...
[11:02:08.815] Not searching for globals
[11:02:08.815] - globals: [0] <none>
[11:02:08.815] getGlobalsAndPackages() ... DONE
[11:02:08.815] Packages needed by the future expression (n = 0): <none>
[11:02:08.816] Packages needed by future strategies (n = 0): <none>
[11:02:08.816] {
[11:02:08.816]     {
[11:02:08.816]         {
[11:02:08.816]             ...future.startTime <- base::Sys.time()
[11:02:08.816]             {
[11:02:08.816]                 {
[11:02:08.816]                   {
[11:02:08.816]                     base::local({
[11:02:08.816]                       has_future <- base::requireNamespace("future", 
[11:02:08.816]                         quietly = TRUE)
[11:02:08.816]                       if (has_future) {
[11:02:08.816]                         ns <- base::getNamespace("future")
[11:02:08.816]                         version <- ns[[".package"]][["version"]]
[11:02:08.816]                         if (is.null(version)) 
[11:02:08.816]                           version <- utils::packageVersion("future")
[11:02:08.816]                       }
[11:02:08.816]                       else {
[11:02:08.816]                         version <- NULL
[11:02:08.816]                       }
[11:02:08.816]                       if (!has_future || version < "1.8.0") {
[11:02:08.816]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:08.816]                           "", base::R.version$version.string), 
[11:02:08.816]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:08.816]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:08.816]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:08.816]                             "release", "version")], collapse = " "), 
[11:02:08.816]                           hostname = base::Sys.info()[["nodename"]])
[11:02:08.816]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:08.816]                           info)
[11:02:08.816]                         info <- base::paste(info, collapse = "; ")
[11:02:08.816]                         if (!has_future) {
[11:02:08.816]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:08.816]                             info)
[11:02:08.816]                         }
[11:02:08.816]                         else {
[11:02:08.816]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:08.816]                             info, version)
[11:02:08.816]                         }
[11:02:08.816]                         base::stop(msg)
[11:02:08.816]                       }
[11:02:08.816]                     })
[11:02:08.816]                   }
[11:02:08.816]                   ...future.strategy.old <- future::plan("list")
[11:02:08.816]                   options(future.plan = NULL)
[11:02:08.816]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.816]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:08.816]                 }
[11:02:08.816]                 ...future.workdir <- getwd()
[11:02:08.816]             }
[11:02:08.816]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:08.816]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:08.816]         }
[11:02:08.816]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:08.816]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:08.816]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:08.816]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:08.816]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:08.816]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:08.816]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:08.816]             base::names(...future.oldOptions))
[11:02:08.816]     }
[11:02:08.816]     if (FALSE) {
[11:02:08.816]     }
[11:02:08.816]     else {
[11:02:08.816]         if (TRUE) {
[11:02:08.816]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:08.816]                 open = "w")
[11:02:08.816]         }
[11:02:08.816]         else {
[11:02:08.816]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:08.816]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:08.816]         }
[11:02:08.816]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:08.816]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:08.816]             base::sink(type = "output", split = FALSE)
[11:02:08.816]             base::close(...future.stdout)
[11:02:08.816]         }, add = TRUE)
[11:02:08.816]     }
[11:02:08.816]     ...future.frame <- base::sys.nframe()
[11:02:08.816]     ...future.conditions <- base::list()
[11:02:08.816]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:08.816]     if (FALSE) {
[11:02:08.816]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:08.816]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:08.816]     }
[11:02:08.816]     ...future.result <- base::tryCatch({
[11:02:08.816]         base::withCallingHandlers({
[11:02:08.816]             ...future.value <- base::withVisible(base::local(NA))
[11:02:08.816]             future::FutureResult(value = ...future.value$value, 
[11:02:08.816]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.816]                   ...future.rng), globalenv = if (FALSE) 
[11:02:08.816]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:08.816]                     ...future.globalenv.names))
[11:02:08.816]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:08.816]         }, condition = base::local({
[11:02:08.816]             c <- base::c
[11:02:08.816]             inherits <- base::inherits
[11:02:08.816]             invokeRestart <- base::invokeRestart
[11:02:08.816]             length <- base::length
[11:02:08.816]             list <- base::list
[11:02:08.816]             seq.int <- base::seq.int
[11:02:08.816]             signalCondition <- base::signalCondition
[11:02:08.816]             sys.calls <- base::sys.calls
[11:02:08.816]             `[[` <- base::`[[`
[11:02:08.816]             `+` <- base::`+`
[11:02:08.816]             `<<-` <- base::`<<-`
[11:02:08.816]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:08.816]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:08.816]                   3L)]
[11:02:08.816]             }
[11:02:08.816]             function(cond) {
[11:02:08.816]                 is_error <- inherits(cond, "error")
[11:02:08.816]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:08.816]                   NULL)
[11:02:08.816]                 if (is_error) {
[11:02:08.816]                   sessionInformation <- function() {
[11:02:08.816]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:08.816]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:08.816]                       search = base::search(), system = base::Sys.info())
[11:02:08.816]                   }
[11:02:08.816]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.816]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:08.816]                     cond$call), session = sessionInformation(), 
[11:02:08.816]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:08.816]                   signalCondition(cond)
[11:02:08.816]                 }
[11:02:08.816]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:08.816]                 "immediateCondition"))) {
[11:02:08.816]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:08.816]                   ...future.conditions[[length(...future.conditions) + 
[11:02:08.816]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:08.816]                   if (TRUE && !signal) {
[11:02:08.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.816]                     {
[11:02:08.816]                       inherits <- base::inherits
[11:02:08.816]                       invokeRestart <- base::invokeRestart
[11:02:08.816]                       is.null <- base::is.null
[11:02:08.816]                       muffled <- FALSE
[11:02:08.816]                       if (inherits(cond, "message")) {
[11:02:08.816]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.816]                         if (muffled) 
[11:02:08.816]                           invokeRestart("muffleMessage")
[11:02:08.816]                       }
[11:02:08.816]                       else if (inherits(cond, "warning")) {
[11:02:08.816]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.816]                         if (muffled) 
[11:02:08.816]                           invokeRestart("muffleWarning")
[11:02:08.816]                       }
[11:02:08.816]                       else if (inherits(cond, "condition")) {
[11:02:08.816]                         if (!is.null(pattern)) {
[11:02:08.816]                           computeRestarts <- base::computeRestarts
[11:02:08.816]                           grepl <- base::grepl
[11:02:08.816]                           restarts <- computeRestarts(cond)
[11:02:08.816]                           for (restart in restarts) {
[11:02:08.816]                             name <- restart$name
[11:02:08.816]                             if (is.null(name)) 
[11:02:08.816]                               next
[11:02:08.816]                             if (!grepl(pattern, name)) 
[11:02:08.816]                               next
[11:02:08.816]                             invokeRestart(restart)
[11:02:08.816]                             muffled <- TRUE
[11:02:08.816]                             break
[11:02:08.816]                           }
[11:02:08.816]                         }
[11:02:08.816]                       }
[11:02:08.816]                       invisible(muffled)
[11:02:08.816]                     }
[11:02:08.816]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.816]                   }
[11:02:08.816]                 }
[11:02:08.816]                 else {
[11:02:08.816]                   if (TRUE) {
[11:02:08.816]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:08.816]                     {
[11:02:08.816]                       inherits <- base::inherits
[11:02:08.816]                       invokeRestart <- base::invokeRestart
[11:02:08.816]                       is.null <- base::is.null
[11:02:08.816]                       muffled <- FALSE
[11:02:08.816]                       if (inherits(cond, "message")) {
[11:02:08.816]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:08.816]                         if (muffled) 
[11:02:08.816]                           invokeRestart("muffleMessage")
[11:02:08.816]                       }
[11:02:08.816]                       else if (inherits(cond, "warning")) {
[11:02:08.816]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:08.816]                         if (muffled) 
[11:02:08.816]                           invokeRestart("muffleWarning")
[11:02:08.816]                       }
[11:02:08.816]                       else if (inherits(cond, "condition")) {
[11:02:08.816]                         if (!is.null(pattern)) {
[11:02:08.816]                           computeRestarts <- base::computeRestarts
[11:02:08.816]                           grepl <- base::grepl
[11:02:08.816]                           restarts <- computeRestarts(cond)
[11:02:08.816]                           for (restart in restarts) {
[11:02:08.816]                             name <- restart$name
[11:02:08.816]                             if (is.null(name)) 
[11:02:08.816]                               next
[11:02:08.816]                             if (!grepl(pattern, name)) 
[11:02:08.816]                               next
[11:02:08.816]                             invokeRestart(restart)
[11:02:08.816]                             muffled <- TRUE
[11:02:08.816]                             break
[11:02:08.816]                           }
[11:02:08.816]                         }
[11:02:08.816]                       }
[11:02:08.816]                       invisible(muffled)
[11:02:08.816]                     }
[11:02:08.816]                     muffleCondition(cond, pattern = "^muffle")
[11:02:08.816]                   }
[11:02:08.816]                 }
[11:02:08.816]             }
[11:02:08.816]         }))
[11:02:08.816]     }, error = function(ex) {
[11:02:08.816]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:08.816]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:08.816]                 ...future.rng), started = ...future.startTime, 
[11:02:08.816]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:08.816]             version = "1.8"), class = "FutureResult")
[11:02:08.816]     }, finally = {
[11:02:08.816]         if (!identical(...future.workdir, getwd())) 
[11:02:08.816]             setwd(...future.workdir)
[11:02:08.816]         {
[11:02:08.816]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:08.816]                 ...future.oldOptions$nwarnings <- NULL
[11:02:08.816]             }
[11:02:08.816]             base::options(...future.oldOptions)
[11:02:08.816]             if (.Platform$OS.type == "windows") {
[11:02:08.816]                 old_names <- names(...future.oldEnvVars)
[11:02:08.816]                 envs <- base::Sys.getenv()
[11:02:08.816]                 names <- names(envs)
[11:02:08.816]                 common <- intersect(names, old_names)
[11:02:08.816]                 added <- setdiff(names, old_names)
[11:02:08.816]                 removed <- setdiff(old_names, names)
[11:02:08.816]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:08.816]                   envs[common]]
[11:02:08.816]                 NAMES <- toupper(changed)
[11:02:08.816]                 args <- list()
[11:02:08.816]                 for (kk in seq_along(NAMES)) {
[11:02:08.816]                   name <- changed[[kk]]
[11:02:08.816]                   NAME <- NAMES[[kk]]
[11:02:08.816]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.816]                     next
[11:02:08.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.816]                 }
[11:02:08.816]                 NAMES <- toupper(added)
[11:02:08.816]                 for (kk in seq_along(NAMES)) {
[11:02:08.816]                   name <- added[[kk]]
[11:02:08.816]                   NAME <- NAMES[[kk]]
[11:02:08.816]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.816]                     next
[11:02:08.816]                   args[[name]] <- ""
[11:02:08.816]                 }
[11:02:08.816]                 NAMES <- toupper(removed)
[11:02:08.816]                 for (kk in seq_along(NAMES)) {
[11:02:08.816]                   name <- removed[[kk]]
[11:02:08.816]                   NAME <- NAMES[[kk]]
[11:02:08.816]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:08.816]                     next
[11:02:08.816]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:08.816]                 }
[11:02:08.816]                 if (length(args) > 0) 
[11:02:08.816]                   base::do.call(base::Sys.setenv, args = args)
[11:02:08.816]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:08.816]             }
[11:02:08.816]             else {
[11:02:08.816]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:08.816]             }
[11:02:08.816]             {
[11:02:08.816]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:08.816]                   0L) {
[11:02:08.816]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:08.816]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:08.816]                   base::options(opts)
[11:02:08.816]                 }
[11:02:08.816]                 {
[11:02:08.816]                   {
[11:02:08.816]                     NULL
[11:02:08.816]                     RNGkind("Mersenne-Twister")
[11:02:08.816]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:08.816]                       inherits = FALSE)
[11:02:08.816]                   }
[11:02:08.816]                   options(future.plan = NULL)
[11:02:08.816]                   if (is.na(NA_character_)) 
[11:02:08.816]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:08.816]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:08.816]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:08.816]                     .init = FALSE)
[11:02:08.816]                 }
[11:02:08.816]             }
[11:02:08.816]         }
[11:02:08.816]     })
[11:02:08.816]     if (TRUE) {
[11:02:08.816]         base::sink(type = "output", split = FALSE)
[11:02:08.816]         if (TRUE) {
[11:02:08.816]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:08.816]         }
[11:02:08.816]         else {
[11:02:08.816]             ...future.result["stdout"] <- base::list(NULL)
[11:02:08.816]         }
[11:02:08.816]         base::close(...future.stdout)
[11:02:08.816]         ...future.stdout <- NULL
[11:02:08.816]     }
[11:02:08.816]     ...future.result$conditions <- ...future.conditions
[11:02:08.816]     ...future.result$finished <- base::Sys.time()
[11:02:08.816]     ...future.result
[11:02:08.816] }
[11:02:08.818] plan(): Setting new future strategy stack:
[11:02:08.818] List of future strategies:
[11:02:08.818] 1. sequential:
[11:02:08.818]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:08.818]    - tweaked: FALSE
[11:02:08.818]    - call: NULL
[11:02:08.819] plan(): nbrOfWorkers() = 1
[11:02:08.819] plan(): Setting new future strategy stack:
[11:02:08.820] List of future strategies:
[11:02:08.820] 1. multisession:
[11:02:08.820]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L)>", envir = parent.frame())
[11:02:08.820]    - tweaked: TRUE
[11:02:08.820]    - call: plan(strategy, workers = allButOneCore)
[11:02:08.823] plan(): nbrOfWorkers() = 1
[11:02:08.823] SequentialFuture started (and completed)
[11:02:08.824] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:08.825] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
[11:02:08.829] getGlobalsAndPackages() ...
[11:02:08.829] Searching for globals...
[11:02:08.830] 
[11:02:08.830] Searching for globals ... DONE
[11:02:08.830] - globals: [0] <none>
[11:02:08.830] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers: 1
[11:02:08.833] getGlobalsAndPackages() ...
[11:02:08.833] Searching for globals...
[11:02:08.834] 
[11:02:08.834] Searching for globals ... DONE
[11:02:08.834] - globals: [0] <none>
[11:02:08.834] getGlobalsAndPackages() ... DONE
nbrOfFreeWorkers(background = TRUE): 0
Type of future: multicore
nbrOfWorkers: 2
[11:02:08.836] plan(): Setting new future strategy stack:
[11:02:08.836] List of future strategies:
[11:02:08.836] 1. multicore:
[11:02:08.836]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:08.836]    - tweaked: FALSE
[11:02:08.836]    - call: plan(strategy)
[11:02:08.838] plan(): nbrOfWorkers() = 2
nbrOfWorkers: 2
nbrOfFreeWorkers: 2
nbrOfFreeWorkers(background = TRUE): 2
[11:02:08.843] plan(): Setting new future strategy stack:
[11:02:08.843] List of future strategies:
[11:02:08.843] 1. multicore:
[11:02:08.843]    - args: function (..., workers = 1L, envir = parent.frame())
[11:02:08.843]    - tweaked: TRUE
[11:02:08.843]    - call: plan(strategy, workers = 1L)
[11:02:08.844] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
[11:02:08.845] plan(): Setting new future strategy stack:
[11:02:08.845] List of future strategies:
[11:02:08.845] 1. multicore:
[11:02:08.845]    - args: function (..., workers = "<function () ; max(1L, future::availableCores() - 1L); <bytecode: 0x559dd9eb5510>>", envir = parent.frame())
[11:02:08.845]    - tweaked: TRUE
[11:02:08.845]    - call: plan(strategy, workers = allButOneCore)
[11:02:08.847] plan(): nbrOfWorkers() = 1
nbrOfWorkers: 1
nbrOfFreeWorkers: 1
nbrOfFreeWorkers(background = TRUE): 1
> 
> 
> message("Type of future: cluster")
Type of future: cluster
> workers <- rep("localhost", times = 2L)
> plan(cluster, workers = workers)
[11:02:08.852] plan(): Setting new future strategy stack:
[11:02:08.852] List of future strategies:
[11:02:08.852] 1. cluster:
[11:02:08.852]    - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[11:02:08.852]    - tweaked: TRUE
[11:02:08.852]    - call: plan(cluster, workers = workers)
[11:02:08.852] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:08.852] cluster:
[11:02:08.852] - args: function (..., workers = c("localhost", "localhost"), envir = parent.frame())
[11:02:08.852] - tweaked: TRUE
[11:02:08.852] - call: plan(cluster, workers = workers)
[11:02:08.853] getGlobalsAndPackages() ...
[11:02:08.853] Not searching for globals
[11:02:08.853] - globals: [0] <none>
[11:02:08.853] getGlobalsAndPackages() ... DONE
[11:02:09.118] Packages needed by the future expression (n = 0): <none>
[11:02:09.118] Packages needed by future strategies (n = 0): <none>
[11:02:09.119] {
[11:02:09.119]     {
[11:02:09.119]         {
[11:02:09.119]             ...future.startTime <- base::Sys.time()
[11:02:09.119]             {
[11:02:09.119]                 {
[11:02:09.119]                   {
[11:02:09.119]                     base::local({
[11:02:09.119]                       has_future <- base::requireNamespace("future", 
[11:02:09.119]                         quietly = TRUE)
[11:02:09.119]                       if (has_future) {
[11:02:09.119]                         ns <- base::getNamespace("future")
[11:02:09.119]                         version <- ns[[".package"]][["version"]]
[11:02:09.119]                         if (is.null(version)) 
[11:02:09.119]                           version <- utils::packageVersion("future")
[11:02:09.119]                       }
[11:02:09.119]                       else {
[11:02:09.119]                         version <- NULL
[11:02:09.119]                       }
[11:02:09.119]                       if (!has_future || version < "1.8.0") {
[11:02:09.119]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:09.119]                           "", base::R.version$version.string), 
[11:02:09.119]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:09.119]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:09.119]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:09.119]                             "release", "version")], collapse = " "), 
[11:02:09.119]                           hostname = base::Sys.info()[["nodename"]])
[11:02:09.119]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:09.119]                           info)
[11:02:09.119]                         info <- base::paste(info, collapse = "; ")
[11:02:09.119]                         if (!has_future) {
[11:02:09.119]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:09.119]                             info)
[11:02:09.119]                         }
[11:02:09.119]                         else {
[11:02:09.119]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:09.119]                             info, version)
[11:02:09.119]                         }
[11:02:09.119]                         base::stop(msg)
[11:02:09.119]                       }
[11:02:09.119]                     })
[11:02:09.119]                   }
[11:02:09.119]                   ...future.strategy.old <- future::plan("list")
[11:02:09.119]                   options(future.plan = NULL)
[11:02:09.119]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.119]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:09.119]                 }
[11:02:09.119]                 ...future.workdir <- getwd()
[11:02:09.119]             }
[11:02:09.119]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:09.119]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:09.119]         }
[11:02:09.119]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:09.119]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:09.119]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:09.119]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:09.119]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:09.119]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:09.119]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:09.119]             base::names(...future.oldOptions))
[11:02:09.119]     }
[11:02:09.119]     if (FALSE) {
[11:02:09.119]     }
[11:02:09.119]     else {
[11:02:09.119]         if (TRUE) {
[11:02:09.119]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:09.119]                 open = "w")
[11:02:09.119]         }
[11:02:09.119]         else {
[11:02:09.119]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:09.119]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:09.119]         }
[11:02:09.119]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:09.119]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:09.119]             base::sink(type = "output", split = FALSE)
[11:02:09.119]             base::close(...future.stdout)
[11:02:09.119]         }, add = TRUE)
[11:02:09.119]     }
[11:02:09.119]     ...future.frame <- base::sys.nframe()
[11:02:09.119]     ...future.conditions <- base::list()
[11:02:09.119]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:09.119]     if (FALSE) {
[11:02:09.119]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:09.119]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:09.119]     }
[11:02:09.119]     ...future.result <- base::tryCatch({
[11:02:09.119]         base::withCallingHandlers({
[11:02:09.119]             ...future.value <- base::withVisible(base::local({
[11:02:09.119]                 ...future.makeSendCondition <- base::local({
[11:02:09.119]                   sendCondition <- NULL
[11:02:09.119]                   function(frame = 1L) {
[11:02:09.119]                     if (is.function(sendCondition)) 
[11:02:09.119]                       return(sendCondition)
[11:02:09.119]                     ns <- getNamespace("parallel")
[11:02:09.119]                     if (exists("sendData", mode = "function", 
[11:02:09.119]                       envir = ns)) {
[11:02:09.119]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:09.119]                         envir = ns)
[11:02:09.119]                       envir <- sys.frame(frame)
[11:02:09.119]                       master <- NULL
[11:02:09.119]                       while (!identical(envir, .GlobalEnv) && 
[11:02:09.119]                         !identical(envir, emptyenv())) {
[11:02:09.119]                         if (exists("master", mode = "list", envir = envir, 
[11:02:09.119]                           inherits = FALSE)) {
[11:02:09.119]                           master <- get("master", mode = "list", 
[11:02:09.119]                             envir = envir, inherits = FALSE)
[11:02:09.119]                           if (inherits(master, c("SOCKnode", 
[11:02:09.119]                             "SOCK0node"))) {
[11:02:09.119]                             sendCondition <<- function(cond) {
[11:02:09.119]                               data <- list(type = "VALUE", value = cond, 
[11:02:09.119]                                 success = TRUE)
[11:02:09.119]                               parallel_sendData(master, data)
[11:02:09.119]                             }
[11:02:09.119]                             return(sendCondition)
[11:02:09.119]                           }
[11:02:09.119]                         }
[11:02:09.119]                         frame <- frame + 1L
[11:02:09.119]                         envir <- sys.frame(frame)
[11:02:09.119]                       }
[11:02:09.119]                     }
[11:02:09.119]                     sendCondition <<- function(cond) NULL
[11:02:09.119]                   }
[11:02:09.119]                 })
[11:02:09.119]                 withCallingHandlers({
[11:02:09.119]                   NA
[11:02:09.119]                 }, immediateCondition = function(cond) {
[11:02:09.119]                   sendCondition <- ...future.makeSendCondition()
[11:02:09.119]                   sendCondition(cond)
[11:02:09.119]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.119]                   {
[11:02:09.119]                     inherits <- base::inherits
[11:02:09.119]                     invokeRestart <- base::invokeRestart
[11:02:09.119]                     is.null <- base::is.null
[11:02:09.119]                     muffled <- FALSE
[11:02:09.119]                     if (inherits(cond, "message")) {
[11:02:09.119]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:09.119]                       if (muffled) 
[11:02:09.119]                         invokeRestart("muffleMessage")
[11:02:09.119]                     }
[11:02:09.119]                     else if (inherits(cond, "warning")) {
[11:02:09.119]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:09.119]                       if (muffled) 
[11:02:09.119]                         invokeRestart("muffleWarning")
[11:02:09.119]                     }
[11:02:09.119]                     else if (inherits(cond, "condition")) {
[11:02:09.119]                       if (!is.null(pattern)) {
[11:02:09.119]                         computeRestarts <- base::computeRestarts
[11:02:09.119]                         grepl <- base::grepl
[11:02:09.119]                         restarts <- computeRestarts(cond)
[11:02:09.119]                         for (restart in restarts) {
[11:02:09.119]                           name <- restart$name
[11:02:09.119]                           if (is.null(name)) 
[11:02:09.119]                             next
[11:02:09.119]                           if (!grepl(pattern, name)) 
[11:02:09.119]                             next
[11:02:09.119]                           invokeRestart(restart)
[11:02:09.119]                           muffled <- TRUE
[11:02:09.119]                           break
[11:02:09.119]                         }
[11:02:09.119]                       }
[11:02:09.119]                     }
[11:02:09.119]                     invisible(muffled)
[11:02:09.119]                   }
[11:02:09.119]                   muffleCondition(cond)
[11:02:09.119]                 })
[11:02:09.119]             }))
[11:02:09.119]             future::FutureResult(value = ...future.value$value, 
[11:02:09.119]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.119]                   ...future.rng), globalenv = if (FALSE) 
[11:02:09.119]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:09.119]                     ...future.globalenv.names))
[11:02:09.119]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:09.119]         }, condition = base::local({
[11:02:09.119]             c <- base::c
[11:02:09.119]             inherits <- base::inherits
[11:02:09.119]             invokeRestart <- base::invokeRestart
[11:02:09.119]             length <- base::length
[11:02:09.119]             list <- base::list
[11:02:09.119]             seq.int <- base::seq.int
[11:02:09.119]             signalCondition <- base::signalCondition
[11:02:09.119]             sys.calls <- base::sys.calls
[11:02:09.119]             `[[` <- base::`[[`
[11:02:09.119]             `+` <- base::`+`
[11:02:09.119]             `<<-` <- base::`<<-`
[11:02:09.119]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:09.119]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:09.119]                   3L)]
[11:02:09.119]             }
[11:02:09.119]             function(cond) {
[11:02:09.119]                 is_error <- inherits(cond, "error")
[11:02:09.119]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:09.119]                   NULL)
[11:02:09.119]                 if (is_error) {
[11:02:09.119]                   sessionInformation <- function() {
[11:02:09.119]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:09.119]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:09.119]                       search = base::search(), system = base::Sys.info())
[11:02:09.119]                   }
[11:02:09.119]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.119]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:09.119]                     cond$call), session = sessionInformation(), 
[11:02:09.119]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:09.119]                   signalCondition(cond)
[11:02:09.119]                 }
[11:02:09.119]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:09.119]                 "immediateCondition"))) {
[11:02:09.119]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:09.119]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.119]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:09.119]                   if (TRUE && !signal) {
[11:02:09.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.119]                     {
[11:02:09.119]                       inherits <- base::inherits
[11:02:09.119]                       invokeRestart <- base::invokeRestart
[11:02:09.119]                       is.null <- base::is.null
[11:02:09.119]                       muffled <- FALSE
[11:02:09.119]                       if (inherits(cond, "message")) {
[11:02:09.119]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.119]                         if (muffled) 
[11:02:09.119]                           invokeRestart("muffleMessage")
[11:02:09.119]                       }
[11:02:09.119]                       else if (inherits(cond, "warning")) {
[11:02:09.119]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.119]                         if (muffled) 
[11:02:09.119]                           invokeRestart("muffleWarning")
[11:02:09.119]                       }
[11:02:09.119]                       else if (inherits(cond, "condition")) {
[11:02:09.119]                         if (!is.null(pattern)) {
[11:02:09.119]                           computeRestarts <- base::computeRestarts
[11:02:09.119]                           grepl <- base::grepl
[11:02:09.119]                           restarts <- computeRestarts(cond)
[11:02:09.119]                           for (restart in restarts) {
[11:02:09.119]                             name <- restart$name
[11:02:09.119]                             if (is.null(name)) 
[11:02:09.119]                               next
[11:02:09.119]                             if (!grepl(pattern, name)) 
[11:02:09.119]                               next
[11:02:09.119]                             invokeRestart(restart)
[11:02:09.119]                             muffled <- TRUE
[11:02:09.119]                             break
[11:02:09.119]                           }
[11:02:09.119]                         }
[11:02:09.119]                       }
[11:02:09.119]                       invisible(muffled)
[11:02:09.119]                     }
[11:02:09.119]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.119]                   }
[11:02:09.119]                 }
[11:02:09.119]                 else {
[11:02:09.119]                   if (TRUE) {
[11:02:09.119]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.119]                     {
[11:02:09.119]                       inherits <- base::inherits
[11:02:09.119]                       invokeRestart <- base::invokeRestart
[11:02:09.119]                       is.null <- base::is.null
[11:02:09.119]                       muffled <- FALSE
[11:02:09.119]                       if (inherits(cond, "message")) {
[11:02:09.119]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.119]                         if (muffled) 
[11:02:09.119]                           invokeRestart("muffleMessage")
[11:02:09.119]                       }
[11:02:09.119]                       else if (inherits(cond, "warning")) {
[11:02:09.119]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.119]                         if (muffled) 
[11:02:09.119]                           invokeRestart("muffleWarning")
[11:02:09.119]                       }
[11:02:09.119]                       else if (inherits(cond, "condition")) {
[11:02:09.119]                         if (!is.null(pattern)) {
[11:02:09.119]                           computeRestarts <- base::computeRestarts
[11:02:09.119]                           grepl <- base::grepl
[11:02:09.119]                           restarts <- computeRestarts(cond)
[11:02:09.119]                           for (restart in restarts) {
[11:02:09.119]                             name <- restart$name
[11:02:09.119]                             if (is.null(name)) 
[11:02:09.119]                               next
[11:02:09.119]                             if (!grepl(pattern, name)) 
[11:02:09.119]                               next
[11:02:09.119]                             invokeRestart(restart)
[11:02:09.119]                             muffled <- TRUE
[11:02:09.119]                             break
[11:02:09.119]                           }
[11:02:09.119]                         }
[11:02:09.119]                       }
[11:02:09.119]                       invisible(muffled)
[11:02:09.119]                     }
[11:02:09.119]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.119]                   }
[11:02:09.119]                 }
[11:02:09.119]             }
[11:02:09.119]         }))
[11:02:09.119]     }, error = function(ex) {
[11:02:09.119]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:09.119]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.119]                 ...future.rng), started = ...future.startTime, 
[11:02:09.119]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:09.119]             version = "1.8"), class = "FutureResult")
[11:02:09.119]     }, finally = {
[11:02:09.119]         if (!identical(...future.workdir, getwd())) 
[11:02:09.119]             setwd(...future.workdir)
[11:02:09.119]         {
[11:02:09.119]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:09.119]                 ...future.oldOptions$nwarnings <- NULL
[11:02:09.119]             }
[11:02:09.119]             base::options(...future.oldOptions)
[11:02:09.119]             if (.Platform$OS.type == "windows") {
[11:02:09.119]                 old_names <- names(...future.oldEnvVars)
[11:02:09.119]                 envs <- base::Sys.getenv()
[11:02:09.119]                 names <- names(envs)
[11:02:09.119]                 common <- intersect(names, old_names)
[11:02:09.119]                 added <- setdiff(names, old_names)
[11:02:09.119]                 removed <- setdiff(old_names, names)
[11:02:09.119]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:09.119]                   envs[common]]
[11:02:09.119]                 NAMES <- toupper(changed)
[11:02:09.119]                 args <- list()
[11:02:09.119]                 for (kk in seq_along(NAMES)) {
[11:02:09.119]                   name <- changed[[kk]]
[11:02:09.119]                   NAME <- NAMES[[kk]]
[11:02:09.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.119]                     next
[11:02:09.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.119]                 }
[11:02:09.119]                 NAMES <- toupper(added)
[11:02:09.119]                 for (kk in seq_along(NAMES)) {
[11:02:09.119]                   name <- added[[kk]]
[11:02:09.119]                   NAME <- NAMES[[kk]]
[11:02:09.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.119]                     next
[11:02:09.119]                   args[[name]] <- ""
[11:02:09.119]                 }
[11:02:09.119]                 NAMES <- toupper(removed)
[11:02:09.119]                 for (kk in seq_along(NAMES)) {
[11:02:09.119]                   name <- removed[[kk]]
[11:02:09.119]                   NAME <- NAMES[[kk]]
[11:02:09.119]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.119]                     next
[11:02:09.119]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.119]                 }
[11:02:09.119]                 if (length(args) > 0) 
[11:02:09.119]                   base::do.call(base::Sys.setenv, args = args)
[11:02:09.119]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:09.119]             }
[11:02:09.119]             else {
[11:02:09.119]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:09.119]             }
[11:02:09.119]             {
[11:02:09.119]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:09.119]                   0L) {
[11:02:09.119]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:09.119]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:09.119]                   base::options(opts)
[11:02:09.119]                 }
[11:02:09.119]                 {
[11:02:09.119]                   NULL
[11:02:09.119]                   options(future.plan = NULL)
[11:02:09.119]                   if (is.na(NA_character_)) 
[11:02:09.119]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.119]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:09.119]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:09.119]                     .init = FALSE)
[11:02:09.119]                 }
[11:02:09.119]             }
[11:02:09.119]         }
[11:02:09.119]     })
[11:02:09.119]     if (TRUE) {
[11:02:09.119]         base::sink(type = "output", split = FALSE)
[11:02:09.119]         if (TRUE) {
[11:02:09.119]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:09.119]         }
[11:02:09.119]         else {
[11:02:09.119]             ...future.result["stdout"] <- base::list(NULL)
[11:02:09.119]         }
[11:02:09.119]         base::close(...future.stdout)
[11:02:09.119]         ...future.stdout <- NULL
[11:02:09.119]     }
[11:02:09.119]     ...future.result$conditions <- ...future.conditions
[11:02:09.119]     ...future.result$finished <- base::Sys.time()
[11:02:09.119]     ...future.result
[11:02:09.119] }
[11:02:09.170] ClusterFuture started
[11:02:09.170] result() for ClusterFuture ...
[11:02:09.170] receiveMessageFromWorker() for ClusterFuture ...
[11:02:09.170] - Validating connection of ClusterFuture
[11:02:09.200] - received message: FutureResult
[11:02:09.200] - Received FutureResult
[11:02:09.200] - Erased future from FutureRegistry
[11:02:09.201] result() for ClusterFuture ...
[11:02:09.201] - result already collected: FutureResult
[11:02:09.201] result() for ClusterFuture ... done
[11:02:09.201] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:09.201] result() for ClusterFuture ... done
[11:02:09.201] result() for ClusterFuture ...
[11:02:09.201] - result already collected: FutureResult
[11:02:09.201] result() for ClusterFuture ... done
[11:02:09.201] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:09.201] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> plan(cluster, workers = allButOneWorker)
[11:02:09.202] plan(): Setting new future strategy stack:
[11:02:09.202] List of future strategies:
[11:02:09.202] 1. cluster:
[11:02:09.202]    - args: function (..., workers = "<function ()  >", envir = parent.frame())
[11:02:09.202]    - tweaked: TRUE
[11:02:09.202]    - call: plan(cluster, workers = allButOneWorker)
[11:02:09.204] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:09.204] cluster:
[11:02:09.204] - args: function (..., workers = "<function ()  >", envir = parent.frame())
[11:02:09.204] - tweaked: TRUE
[11:02:09.204] - call: plan(cluster, workers = allButOneWorker)
[11:02:09.206] getGlobalsAndPackages() ...
[11:02:09.206] Not searching for globals
[11:02:09.206] - globals: [0] <none>
[11:02:09.206] getGlobalsAndPackages() ... DONE
[11:02:09.398] Packages needed by the future expression (n = 0): <none>
[11:02:09.399] Packages needed by future strategies (n = 0): <none>
[11:02:09.399] {
[11:02:09.399]     {
[11:02:09.399]         {
[11:02:09.399]             ...future.startTime <- base::Sys.time()
[11:02:09.399]             {
[11:02:09.399]                 {
[11:02:09.399]                   {
[11:02:09.399]                     base::local({
[11:02:09.399]                       has_future <- base::requireNamespace("future", 
[11:02:09.399]                         quietly = TRUE)
[11:02:09.399]                       if (has_future) {
[11:02:09.399]                         ns <- base::getNamespace("future")
[11:02:09.399]                         version <- ns[[".package"]][["version"]]
[11:02:09.399]                         if (is.null(version)) 
[11:02:09.399]                           version <- utils::packageVersion("future")
[11:02:09.399]                       }
[11:02:09.399]                       else {
[11:02:09.399]                         version <- NULL
[11:02:09.399]                       }
[11:02:09.399]                       if (!has_future || version < "1.8.0") {
[11:02:09.399]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:09.399]                           "", base::R.version$version.string), 
[11:02:09.399]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:09.399]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:09.399]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:09.399]                             "release", "version")], collapse = " "), 
[11:02:09.399]                           hostname = base::Sys.info()[["nodename"]])
[11:02:09.399]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:09.399]                           info)
[11:02:09.399]                         info <- base::paste(info, collapse = "; ")
[11:02:09.399]                         if (!has_future) {
[11:02:09.399]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:09.399]                             info)
[11:02:09.399]                         }
[11:02:09.399]                         else {
[11:02:09.399]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:09.399]                             info, version)
[11:02:09.399]                         }
[11:02:09.399]                         base::stop(msg)
[11:02:09.399]                       }
[11:02:09.399]                     })
[11:02:09.399]                   }
[11:02:09.399]                   ...future.strategy.old <- future::plan("list")
[11:02:09.399]                   options(future.plan = NULL)
[11:02:09.399]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.399]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:09.399]                 }
[11:02:09.399]                 ...future.workdir <- getwd()
[11:02:09.399]             }
[11:02:09.399]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:09.399]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:09.399]         }
[11:02:09.399]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:09.399]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:09.399]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:09.399]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:09.399]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:09.399]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:09.399]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:09.399]             base::names(...future.oldOptions))
[11:02:09.399]     }
[11:02:09.399]     if (FALSE) {
[11:02:09.399]     }
[11:02:09.399]     else {
[11:02:09.399]         if (TRUE) {
[11:02:09.399]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:09.399]                 open = "w")
[11:02:09.399]         }
[11:02:09.399]         else {
[11:02:09.399]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:09.399]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:09.399]         }
[11:02:09.399]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:09.399]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:09.399]             base::sink(type = "output", split = FALSE)
[11:02:09.399]             base::close(...future.stdout)
[11:02:09.399]         }, add = TRUE)
[11:02:09.399]     }
[11:02:09.399]     ...future.frame <- base::sys.nframe()
[11:02:09.399]     ...future.conditions <- base::list()
[11:02:09.399]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:09.399]     if (FALSE) {
[11:02:09.399]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:09.399]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:09.399]     }
[11:02:09.399]     ...future.result <- base::tryCatch({
[11:02:09.399]         base::withCallingHandlers({
[11:02:09.399]             ...future.value <- base::withVisible(base::local({
[11:02:09.399]                 ...future.makeSendCondition <- base::local({
[11:02:09.399]                   sendCondition <- NULL
[11:02:09.399]                   function(frame = 1L) {
[11:02:09.399]                     if (is.function(sendCondition)) 
[11:02:09.399]                       return(sendCondition)
[11:02:09.399]                     ns <- getNamespace("parallel")
[11:02:09.399]                     if (exists("sendData", mode = "function", 
[11:02:09.399]                       envir = ns)) {
[11:02:09.399]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:09.399]                         envir = ns)
[11:02:09.399]                       envir <- sys.frame(frame)
[11:02:09.399]                       master <- NULL
[11:02:09.399]                       while (!identical(envir, .GlobalEnv) && 
[11:02:09.399]                         !identical(envir, emptyenv())) {
[11:02:09.399]                         if (exists("master", mode = "list", envir = envir, 
[11:02:09.399]                           inherits = FALSE)) {
[11:02:09.399]                           master <- get("master", mode = "list", 
[11:02:09.399]                             envir = envir, inherits = FALSE)
[11:02:09.399]                           if (inherits(master, c("SOCKnode", 
[11:02:09.399]                             "SOCK0node"))) {
[11:02:09.399]                             sendCondition <<- function(cond) {
[11:02:09.399]                               data <- list(type = "VALUE", value = cond, 
[11:02:09.399]                                 success = TRUE)
[11:02:09.399]                               parallel_sendData(master, data)
[11:02:09.399]                             }
[11:02:09.399]                             return(sendCondition)
[11:02:09.399]                           }
[11:02:09.399]                         }
[11:02:09.399]                         frame <- frame + 1L
[11:02:09.399]                         envir <- sys.frame(frame)
[11:02:09.399]                       }
[11:02:09.399]                     }
[11:02:09.399]                     sendCondition <<- function(cond) NULL
[11:02:09.399]                   }
[11:02:09.399]                 })
[11:02:09.399]                 withCallingHandlers({
[11:02:09.399]                   NA
[11:02:09.399]                 }, immediateCondition = function(cond) {
[11:02:09.399]                   sendCondition <- ...future.makeSendCondition()
[11:02:09.399]                   sendCondition(cond)
[11:02:09.399]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.399]                   {
[11:02:09.399]                     inherits <- base::inherits
[11:02:09.399]                     invokeRestart <- base::invokeRestart
[11:02:09.399]                     is.null <- base::is.null
[11:02:09.399]                     muffled <- FALSE
[11:02:09.399]                     if (inherits(cond, "message")) {
[11:02:09.399]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:09.399]                       if (muffled) 
[11:02:09.399]                         invokeRestart("muffleMessage")
[11:02:09.399]                     }
[11:02:09.399]                     else if (inherits(cond, "warning")) {
[11:02:09.399]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:09.399]                       if (muffled) 
[11:02:09.399]                         invokeRestart("muffleWarning")
[11:02:09.399]                     }
[11:02:09.399]                     else if (inherits(cond, "condition")) {
[11:02:09.399]                       if (!is.null(pattern)) {
[11:02:09.399]                         computeRestarts <- base::computeRestarts
[11:02:09.399]                         grepl <- base::grepl
[11:02:09.399]                         restarts <- computeRestarts(cond)
[11:02:09.399]                         for (restart in restarts) {
[11:02:09.399]                           name <- restart$name
[11:02:09.399]                           if (is.null(name)) 
[11:02:09.399]                             next
[11:02:09.399]                           if (!grepl(pattern, name)) 
[11:02:09.399]                             next
[11:02:09.399]                           invokeRestart(restart)
[11:02:09.399]                           muffled <- TRUE
[11:02:09.399]                           break
[11:02:09.399]                         }
[11:02:09.399]                       }
[11:02:09.399]                     }
[11:02:09.399]                     invisible(muffled)
[11:02:09.399]                   }
[11:02:09.399]                   muffleCondition(cond)
[11:02:09.399]                 })
[11:02:09.399]             }))
[11:02:09.399]             future::FutureResult(value = ...future.value$value, 
[11:02:09.399]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.399]                   ...future.rng), globalenv = if (FALSE) 
[11:02:09.399]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:09.399]                     ...future.globalenv.names))
[11:02:09.399]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:09.399]         }, condition = base::local({
[11:02:09.399]             c <- base::c
[11:02:09.399]             inherits <- base::inherits
[11:02:09.399]             invokeRestart <- base::invokeRestart
[11:02:09.399]             length <- base::length
[11:02:09.399]             list <- base::list
[11:02:09.399]             seq.int <- base::seq.int
[11:02:09.399]             signalCondition <- base::signalCondition
[11:02:09.399]             sys.calls <- base::sys.calls
[11:02:09.399]             `[[` <- base::`[[`
[11:02:09.399]             `+` <- base::`+`
[11:02:09.399]             `<<-` <- base::`<<-`
[11:02:09.399]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:09.399]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:09.399]                   3L)]
[11:02:09.399]             }
[11:02:09.399]             function(cond) {
[11:02:09.399]                 is_error <- inherits(cond, "error")
[11:02:09.399]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:09.399]                   NULL)
[11:02:09.399]                 if (is_error) {
[11:02:09.399]                   sessionInformation <- function() {
[11:02:09.399]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:09.399]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:09.399]                       search = base::search(), system = base::Sys.info())
[11:02:09.399]                   }
[11:02:09.399]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.399]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:09.399]                     cond$call), session = sessionInformation(), 
[11:02:09.399]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:09.399]                   signalCondition(cond)
[11:02:09.399]                 }
[11:02:09.399]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:09.399]                 "immediateCondition"))) {
[11:02:09.399]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:09.399]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.399]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:09.399]                   if (TRUE && !signal) {
[11:02:09.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.399]                     {
[11:02:09.399]                       inherits <- base::inherits
[11:02:09.399]                       invokeRestart <- base::invokeRestart
[11:02:09.399]                       is.null <- base::is.null
[11:02:09.399]                       muffled <- FALSE
[11:02:09.399]                       if (inherits(cond, "message")) {
[11:02:09.399]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.399]                         if (muffled) 
[11:02:09.399]                           invokeRestart("muffleMessage")
[11:02:09.399]                       }
[11:02:09.399]                       else if (inherits(cond, "warning")) {
[11:02:09.399]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.399]                         if (muffled) 
[11:02:09.399]                           invokeRestart("muffleWarning")
[11:02:09.399]                       }
[11:02:09.399]                       else if (inherits(cond, "condition")) {
[11:02:09.399]                         if (!is.null(pattern)) {
[11:02:09.399]                           computeRestarts <- base::computeRestarts
[11:02:09.399]                           grepl <- base::grepl
[11:02:09.399]                           restarts <- computeRestarts(cond)
[11:02:09.399]                           for (restart in restarts) {
[11:02:09.399]                             name <- restart$name
[11:02:09.399]                             if (is.null(name)) 
[11:02:09.399]                               next
[11:02:09.399]                             if (!grepl(pattern, name)) 
[11:02:09.399]                               next
[11:02:09.399]                             invokeRestart(restart)
[11:02:09.399]                             muffled <- TRUE
[11:02:09.399]                             break
[11:02:09.399]                           }
[11:02:09.399]                         }
[11:02:09.399]                       }
[11:02:09.399]                       invisible(muffled)
[11:02:09.399]                     }
[11:02:09.399]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.399]                   }
[11:02:09.399]                 }
[11:02:09.399]                 else {
[11:02:09.399]                   if (TRUE) {
[11:02:09.399]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.399]                     {
[11:02:09.399]                       inherits <- base::inherits
[11:02:09.399]                       invokeRestart <- base::invokeRestart
[11:02:09.399]                       is.null <- base::is.null
[11:02:09.399]                       muffled <- FALSE
[11:02:09.399]                       if (inherits(cond, "message")) {
[11:02:09.399]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.399]                         if (muffled) 
[11:02:09.399]                           invokeRestart("muffleMessage")
[11:02:09.399]                       }
[11:02:09.399]                       else if (inherits(cond, "warning")) {
[11:02:09.399]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.399]                         if (muffled) 
[11:02:09.399]                           invokeRestart("muffleWarning")
[11:02:09.399]                       }
[11:02:09.399]                       else if (inherits(cond, "condition")) {
[11:02:09.399]                         if (!is.null(pattern)) {
[11:02:09.399]                           computeRestarts <- base::computeRestarts
[11:02:09.399]                           grepl <- base::grepl
[11:02:09.399]                           restarts <- computeRestarts(cond)
[11:02:09.399]                           for (restart in restarts) {
[11:02:09.399]                             name <- restart$name
[11:02:09.399]                             if (is.null(name)) 
[11:02:09.399]                               next
[11:02:09.399]                             if (!grepl(pattern, name)) 
[11:02:09.399]                               next
[11:02:09.399]                             invokeRestart(restart)
[11:02:09.399]                             muffled <- TRUE
[11:02:09.399]                             break
[11:02:09.399]                           }
[11:02:09.399]                         }
[11:02:09.399]                       }
[11:02:09.399]                       invisible(muffled)
[11:02:09.399]                     }
[11:02:09.399]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.399]                   }
[11:02:09.399]                 }
[11:02:09.399]             }
[11:02:09.399]         }))
[11:02:09.399]     }, error = function(ex) {
[11:02:09.399]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:09.399]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.399]                 ...future.rng), started = ...future.startTime, 
[11:02:09.399]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:09.399]             version = "1.8"), class = "FutureResult")
[11:02:09.399]     }, finally = {
[11:02:09.399]         if (!identical(...future.workdir, getwd())) 
[11:02:09.399]             setwd(...future.workdir)
[11:02:09.399]         {
[11:02:09.399]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:09.399]                 ...future.oldOptions$nwarnings <- NULL
[11:02:09.399]             }
[11:02:09.399]             base::options(...future.oldOptions)
[11:02:09.399]             if (.Platform$OS.type == "windows") {
[11:02:09.399]                 old_names <- names(...future.oldEnvVars)
[11:02:09.399]                 envs <- base::Sys.getenv()
[11:02:09.399]                 names <- names(envs)
[11:02:09.399]                 common <- intersect(names, old_names)
[11:02:09.399]                 added <- setdiff(names, old_names)
[11:02:09.399]                 removed <- setdiff(old_names, names)
[11:02:09.399]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:09.399]                   envs[common]]
[11:02:09.399]                 NAMES <- toupper(changed)
[11:02:09.399]                 args <- list()
[11:02:09.399]                 for (kk in seq_along(NAMES)) {
[11:02:09.399]                   name <- changed[[kk]]
[11:02:09.399]                   NAME <- NAMES[[kk]]
[11:02:09.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.399]                     next
[11:02:09.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.399]                 }
[11:02:09.399]                 NAMES <- toupper(added)
[11:02:09.399]                 for (kk in seq_along(NAMES)) {
[11:02:09.399]                   name <- added[[kk]]
[11:02:09.399]                   NAME <- NAMES[[kk]]
[11:02:09.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.399]                     next
[11:02:09.399]                   args[[name]] <- ""
[11:02:09.399]                 }
[11:02:09.399]                 NAMES <- toupper(removed)
[11:02:09.399]                 for (kk in seq_along(NAMES)) {
[11:02:09.399]                   name <- removed[[kk]]
[11:02:09.399]                   NAME <- NAMES[[kk]]
[11:02:09.399]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.399]                     next
[11:02:09.399]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.399]                 }
[11:02:09.399]                 if (length(args) > 0) 
[11:02:09.399]                   base::do.call(base::Sys.setenv, args = args)
[11:02:09.399]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:09.399]             }
[11:02:09.399]             else {
[11:02:09.399]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:09.399]             }
[11:02:09.399]             {
[11:02:09.399]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:09.399]                   0L) {
[11:02:09.399]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:09.399]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:09.399]                   base::options(opts)
[11:02:09.399]                 }
[11:02:09.399]                 {
[11:02:09.399]                   NULL
[11:02:09.399]                   options(future.plan = NULL)
[11:02:09.399]                   if (is.na(NA_character_)) 
[11:02:09.399]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.399]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:09.399]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:09.399]                     .init = FALSE)
[11:02:09.399]                 }
[11:02:09.399]             }
[11:02:09.399]         }
[11:02:09.399]     })
[11:02:09.399]     if (TRUE) {
[11:02:09.399]         base::sink(type = "output", split = FALSE)
[11:02:09.399]         if (TRUE) {
[11:02:09.399]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:09.399]         }
[11:02:09.399]         else {
[11:02:09.399]             ...future.result["stdout"] <- base::list(NULL)
[11:02:09.399]         }
[11:02:09.399]         base::close(...future.stdout)
[11:02:09.399]         ...future.stdout <- NULL
[11:02:09.399]     }
[11:02:09.399]     ...future.result$conditions <- ...future.conditions
[11:02:09.399]     ...future.result$finished <- base::Sys.time()
[11:02:09.399]     ...future.result
[11:02:09.399] }
[11:02:09.450] ClusterFuture started
[11:02:09.450] result() for ClusterFuture ...
[11:02:09.450] receiveMessageFromWorker() for ClusterFuture ...
[11:02:09.450] - Validating connection of ClusterFuture
[11:02:09.481] - received message: FutureResult
[11:02:09.481] - Received FutureResult
[11:02:09.481] - Erased future from FutureRegistry
[11:02:09.481] result() for ClusterFuture ...
[11:02:09.481] - result already collected: FutureResult
[11:02:09.481] result() for ClusterFuture ... done
[11:02:09.481] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:09.481] result() for ClusterFuture ... done
[11:02:09.482] result() for ClusterFuture ...
[11:02:09.482] - result already collected: FutureResult
[11:02:09.482] result() for ClusterFuture ... done
[11:02:09.482] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:09.485] plan(): nbrOfWorkers() = 1
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == max(1L, nworkers - 1L))
> 
> message("Type of future: constant")
Type of future: constant
> n <- nbrOfWorkers(constant)
> message(sprintf("nbrOfWorkers: %d", n))
nbrOfWorkers: 1
> stopifnot(n == 1)
> 
> message("Type of future: <future>")
Type of future: <future>
> foo <- structure(function(...) NULL, class = c("future"))
> n <- nbrOfWorkers(foo)
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: Inf
> stopifnot(n >= 0, is.infinite(n))
> 
> 
> message("Type of future: cluster with workers = <cluster object>")
Type of future: cluster with workers = <cluster object>
> 
> workers <- makeClusterPSOCK(2L)
> print(workers)
Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)
> plan(cluster, workers = workers)
[11:02:09.738] plan(): Setting new future strategy stack:
[11:02:09.738] List of future strategies:
[11:02:09.738] 1. cluster:
[11:02:09.738]    - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[11:02:09.738]    - tweaked: TRUE
[11:02:09.738]    - call: plan(cluster, workers = workers)
[11:02:09.740] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:02:09.740] cluster:
[11:02:09.740] - args: function (..., workers = "<Socket cluster with 2 nodes where 2 nodes are on host ‘localhost’ (R version 4.4.3 (2025-02-28), platform x86_64-pc-linux-gnu)>", envir = parent.frame())
[11:02:09.740] - tweaked: TRUE
[11:02:09.740] - call: plan(cluster, workers = workers)
[11:02:09.742] getGlobalsAndPackages() ...
[11:02:09.742] Not searching for globals
[11:02:09.742] - globals: [0] <none>
[11:02:09.742] getGlobalsAndPackages() ... DONE
[11:02:09.755] Packages needed by the future expression (n = 0): <none>
[11:02:09.756] Packages needed by future strategies (n = 0): <none>
[11:02:09.756] {
[11:02:09.756]     {
[11:02:09.756]         {
[11:02:09.756]             ...future.startTime <- base::Sys.time()
[11:02:09.756]             {
[11:02:09.756]                 {
[11:02:09.756]                   {
[11:02:09.756]                     base::local({
[11:02:09.756]                       has_future <- base::requireNamespace("future", 
[11:02:09.756]                         quietly = TRUE)
[11:02:09.756]                       if (has_future) {
[11:02:09.756]                         ns <- base::getNamespace("future")
[11:02:09.756]                         version <- ns[[".package"]][["version"]]
[11:02:09.756]                         if (is.null(version)) 
[11:02:09.756]                           version <- utils::packageVersion("future")
[11:02:09.756]                       }
[11:02:09.756]                       else {
[11:02:09.756]                         version <- NULL
[11:02:09.756]                       }
[11:02:09.756]                       if (!has_future || version < "1.8.0") {
[11:02:09.756]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:09.756]                           "", base::R.version$version.string), 
[11:02:09.756]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:09.756]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:09.756]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:09.756]                             "release", "version")], collapse = " "), 
[11:02:09.756]                           hostname = base::Sys.info()[["nodename"]])
[11:02:09.756]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:09.756]                           info)
[11:02:09.756]                         info <- base::paste(info, collapse = "; ")
[11:02:09.756]                         if (!has_future) {
[11:02:09.756]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:09.756]                             info)
[11:02:09.756]                         }
[11:02:09.756]                         else {
[11:02:09.756]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:09.756]                             info, version)
[11:02:09.756]                         }
[11:02:09.756]                         base::stop(msg)
[11:02:09.756]                       }
[11:02:09.756]                     })
[11:02:09.756]                   }
[11:02:09.756]                   ...future.strategy.old <- future::plan("list")
[11:02:09.756]                   options(future.plan = NULL)
[11:02:09.756]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.756]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:09.756]                 }
[11:02:09.756]                 ...future.workdir <- getwd()
[11:02:09.756]             }
[11:02:09.756]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:09.756]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:09.756]         }
[11:02:09.756]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:09.756]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:09.756]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:09.756]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:09.756]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:09.756]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:09.756]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:09.756]             base::names(...future.oldOptions))
[11:02:09.756]     }
[11:02:09.756]     if (FALSE) {
[11:02:09.756]     }
[11:02:09.756]     else {
[11:02:09.756]         if (TRUE) {
[11:02:09.756]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:09.756]                 open = "w")
[11:02:09.756]         }
[11:02:09.756]         else {
[11:02:09.756]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:09.756]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:09.756]         }
[11:02:09.756]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:09.756]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:09.756]             base::sink(type = "output", split = FALSE)
[11:02:09.756]             base::close(...future.stdout)
[11:02:09.756]         }, add = TRUE)
[11:02:09.756]     }
[11:02:09.756]     ...future.frame <- base::sys.nframe()
[11:02:09.756]     ...future.conditions <- base::list()
[11:02:09.756]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:09.756]     if (FALSE) {
[11:02:09.756]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:09.756]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:09.756]     }
[11:02:09.756]     ...future.result <- base::tryCatch({
[11:02:09.756]         base::withCallingHandlers({
[11:02:09.756]             ...future.value <- base::withVisible(base::local({
[11:02:09.756]                 ...future.makeSendCondition <- base::local({
[11:02:09.756]                   sendCondition <- NULL
[11:02:09.756]                   function(frame = 1L) {
[11:02:09.756]                     if (is.function(sendCondition)) 
[11:02:09.756]                       return(sendCondition)
[11:02:09.756]                     ns <- getNamespace("parallel")
[11:02:09.756]                     if (exists("sendData", mode = "function", 
[11:02:09.756]                       envir = ns)) {
[11:02:09.756]                       parallel_sendData <- get("sendData", mode = "function", 
[11:02:09.756]                         envir = ns)
[11:02:09.756]                       envir <- sys.frame(frame)
[11:02:09.756]                       master <- NULL
[11:02:09.756]                       while (!identical(envir, .GlobalEnv) && 
[11:02:09.756]                         !identical(envir, emptyenv())) {
[11:02:09.756]                         if (exists("master", mode = "list", envir = envir, 
[11:02:09.756]                           inherits = FALSE)) {
[11:02:09.756]                           master <- get("master", mode = "list", 
[11:02:09.756]                             envir = envir, inherits = FALSE)
[11:02:09.756]                           if (inherits(master, c("SOCKnode", 
[11:02:09.756]                             "SOCK0node"))) {
[11:02:09.756]                             sendCondition <<- function(cond) {
[11:02:09.756]                               data <- list(type = "VALUE", value = cond, 
[11:02:09.756]                                 success = TRUE)
[11:02:09.756]                               parallel_sendData(master, data)
[11:02:09.756]                             }
[11:02:09.756]                             return(sendCondition)
[11:02:09.756]                           }
[11:02:09.756]                         }
[11:02:09.756]                         frame <- frame + 1L
[11:02:09.756]                         envir <- sys.frame(frame)
[11:02:09.756]                       }
[11:02:09.756]                     }
[11:02:09.756]                     sendCondition <<- function(cond) NULL
[11:02:09.756]                   }
[11:02:09.756]                 })
[11:02:09.756]                 withCallingHandlers({
[11:02:09.756]                   NA
[11:02:09.756]                 }, immediateCondition = function(cond) {
[11:02:09.756]                   sendCondition <- ...future.makeSendCondition()
[11:02:09.756]                   sendCondition(cond)
[11:02:09.756]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.756]                   {
[11:02:09.756]                     inherits <- base::inherits
[11:02:09.756]                     invokeRestart <- base::invokeRestart
[11:02:09.756]                     is.null <- base::is.null
[11:02:09.756]                     muffled <- FALSE
[11:02:09.756]                     if (inherits(cond, "message")) {
[11:02:09.756]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:09.756]                       if (muffled) 
[11:02:09.756]                         invokeRestart("muffleMessage")
[11:02:09.756]                     }
[11:02:09.756]                     else if (inherits(cond, "warning")) {
[11:02:09.756]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:09.756]                       if (muffled) 
[11:02:09.756]                         invokeRestart("muffleWarning")
[11:02:09.756]                     }
[11:02:09.756]                     else if (inherits(cond, "condition")) {
[11:02:09.756]                       if (!is.null(pattern)) {
[11:02:09.756]                         computeRestarts <- base::computeRestarts
[11:02:09.756]                         grepl <- base::grepl
[11:02:09.756]                         restarts <- computeRestarts(cond)
[11:02:09.756]                         for (restart in restarts) {
[11:02:09.756]                           name <- restart$name
[11:02:09.756]                           if (is.null(name)) 
[11:02:09.756]                             next
[11:02:09.756]                           if (!grepl(pattern, name)) 
[11:02:09.756]                             next
[11:02:09.756]                           invokeRestart(restart)
[11:02:09.756]                           muffled <- TRUE
[11:02:09.756]                           break
[11:02:09.756]                         }
[11:02:09.756]                       }
[11:02:09.756]                     }
[11:02:09.756]                     invisible(muffled)
[11:02:09.756]                   }
[11:02:09.756]                   muffleCondition(cond)
[11:02:09.756]                 })
[11:02:09.756]             }))
[11:02:09.756]             future::FutureResult(value = ...future.value$value, 
[11:02:09.756]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.756]                   ...future.rng), globalenv = if (FALSE) 
[11:02:09.756]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:09.756]                     ...future.globalenv.names))
[11:02:09.756]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:09.756]         }, condition = base::local({
[11:02:09.756]             c <- base::c
[11:02:09.756]             inherits <- base::inherits
[11:02:09.756]             invokeRestart <- base::invokeRestart
[11:02:09.756]             length <- base::length
[11:02:09.756]             list <- base::list
[11:02:09.756]             seq.int <- base::seq.int
[11:02:09.756]             signalCondition <- base::signalCondition
[11:02:09.756]             sys.calls <- base::sys.calls
[11:02:09.756]             `[[` <- base::`[[`
[11:02:09.756]             `+` <- base::`+`
[11:02:09.756]             `<<-` <- base::`<<-`
[11:02:09.756]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:09.756]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:09.756]                   3L)]
[11:02:09.756]             }
[11:02:09.756]             function(cond) {
[11:02:09.756]                 is_error <- inherits(cond, "error")
[11:02:09.756]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:09.756]                   NULL)
[11:02:09.756]                 if (is_error) {
[11:02:09.756]                   sessionInformation <- function() {
[11:02:09.756]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:09.756]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:09.756]                       search = base::search(), system = base::Sys.info())
[11:02:09.756]                   }
[11:02:09.756]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.756]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:09.756]                     cond$call), session = sessionInformation(), 
[11:02:09.756]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:09.756]                   signalCondition(cond)
[11:02:09.756]                 }
[11:02:09.756]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:09.756]                 "immediateCondition"))) {
[11:02:09.756]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:09.756]                   ...future.conditions[[length(...future.conditions) + 
[11:02:09.756]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:09.756]                   if (TRUE && !signal) {
[11:02:09.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.756]                     {
[11:02:09.756]                       inherits <- base::inherits
[11:02:09.756]                       invokeRestart <- base::invokeRestart
[11:02:09.756]                       is.null <- base::is.null
[11:02:09.756]                       muffled <- FALSE
[11:02:09.756]                       if (inherits(cond, "message")) {
[11:02:09.756]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.756]                         if (muffled) 
[11:02:09.756]                           invokeRestart("muffleMessage")
[11:02:09.756]                       }
[11:02:09.756]                       else if (inherits(cond, "warning")) {
[11:02:09.756]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.756]                         if (muffled) 
[11:02:09.756]                           invokeRestart("muffleWarning")
[11:02:09.756]                       }
[11:02:09.756]                       else if (inherits(cond, "condition")) {
[11:02:09.756]                         if (!is.null(pattern)) {
[11:02:09.756]                           computeRestarts <- base::computeRestarts
[11:02:09.756]                           grepl <- base::grepl
[11:02:09.756]                           restarts <- computeRestarts(cond)
[11:02:09.756]                           for (restart in restarts) {
[11:02:09.756]                             name <- restart$name
[11:02:09.756]                             if (is.null(name)) 
[11:02:09.756]                               next
[11:02:09.756]                             if (!grepl(pattern, name)) 
[11:02:09.756]                               next
[11:02:09.756]                             invokeRestart(restart)
[11:02:09.756]                             muffled <- TRUE
[11:02:09.756]                             break
[11:02:09.756]                           }
[11:02:09.756]                         }
[11:02:09.756]                       }
[11:02:09.756]                       invisible(muffled)
[11:02:09.756]                     }
[11:02:09.756]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.756]                   }
[11:02:09.756]                 }
[11:02:09.756]                 else {
[11:02:09.756]                   if (TRUE) {
[11:02:09.756]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:09.756]                     {
[11:02:09.756]                       inherits <- base::inherits
[11:02:09.756]                       invokeRestart <- base::invokeRestart
[11:02:09.756]                       is.null <- base::is.null
[11:02:09.756]                       muffled <- FALSE
[11:02:09.756]                       if (inherits(cond, "message")) {
[11:02:09.756]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:09.756]                         if (muffled) 
[11:02:09.756]                           invokeRestart("muffleMessage")
[11:02:09.756]                       }
[11:02:09.756]                       else if (inherits(cond, "warning")) {
[11:02:09.756]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:09.756]                         if (muffled) 
[11:02:09.756]                           invokeRestart("muffleWarning")
[11:02:09.756]                       }
[11:02:09.756]                       else if (inherits(cond, "condition")) {
[11:02:09.756]                         if (!is.null(pattern)) {
[11:02:09.756]                           computeRestarts <- base::computeRestarts
[11:02:09.756]                           grepl <- base::grepl
[11:02:09.756]                           restarts <- computeRestarts(cond)
[11:02:09.756]                           for (restart in restarts) {
[11:02:09.756]                             name <- restart$name
[11:02:09.756]                             if (is.null(name)) 
[11:02:09.756]                               next
[11:02:09.756]                             if (!grepl(pattern, name)) 
[11:02:09.756]                               next
[11:02:09.756]                             invokeRestart(restart)
[11:02:09.756]                             muffled <- TRUE
[11:02:09.756]                             break
[11:02:09.756]                           }
[11:02:09.756]                         }
[11:02:09.756]                       }
[11:02:09.756]                       invisible(muffled)
[11:02:09.756]                     }
[11:02:09.756]                     muffleCondition(cond, pattern = "^muffle")
[11:02:09.756]                   }
[11:02:09.756]                 }
[11:02:09.756]             }
[11:02:09.756]         }))
[11:02:09.756]     }, error = function(ex) {
[11:02:09.756]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:09.756]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:09.756]                 ...future.rng), started = ...future.startTime, 
[11:02:09.756]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:09.756]             version = "1.8"), class = "FutureResult")
[11:02:09.756]     }, finally = {
[11:02:09.756]         if (!identical(...future.workdir, getwd())) 
[11:02:09.756]             setwd(...future.workdir)
[11:02:09.756]         {
[11:02:09.756]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:09.756]                 ...future.oldOptions$nwarnings <- NULL
[11:02:09.756]             }
[11:02:09.756]             base::options(...future.oldOptions)
[11:02:09.756]             if (.Platform$OS.type == "windows") {
[11:02:09.756]                 old_names <- names(...future.oldEnvVars)
[11:02:09.756]                 envs <- base::Sys.getenv()
[11:02:09.756]                 names <- names(envs)
[11:02:09.756]                 common <- intersect(names, old_names)
[11:02:09.756]                 added <- setdiff(names, old_names)
[11:02:09.756]                 removed <- setdiff(old_names, names)
[11:02:09.756]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:09.756]                   envs[common]]
[11:02:09.756]                 NAMES <- toupper(changed)
[11:02:09.756]                 args <- list()
[11:02:09.756]                 for (kk in seq_along(NAMES)) {
[11:02:09.756]                   name <- changed[[kk]]
[11:02:09.756]                   NAME <- NAMES[[kk]]
[11:02:09.756]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.756]                     next
[11:02:09.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.756]                 }
[11:02:09.756]                 NAMES <- toupper(added)
[11:02:09.756]                 for (kk in seq_along(NAMES)) {
[11:02:09.756]                   name <- added[[kk]]
[11:02:09.756]                   NAME <- NAMES[[kk]]
[11:02:09.756]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.756]                     next
[11:02:09.756]                   args[[name]] <- ""
[11:02:09.756]                 }
[11:02:09.756]                 NAMES <- toupper(removed)
[11:02:09.756]                 for (kk in seq_along(NAMES)) {
[11:02:09.756]                   name <- removed[[kk]]
[11:02:09.756]                   NAME <- NAMES[[kk]]
[11:02:09.756]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:09.756]                     next
[11:02:09.756]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:09.756]                 }
[11:02:09.756]                 if (length(args) > 0) 
[11:02:09.756]                   base::do.call(base::Sys.setenv, args = args)
[11:02:09.756]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:09.756]             }
[11:02:09.756]             else {
[11:02:09.756]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:09.756]             }
[11:02:09.756]             {
[11:02:09.756]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:09.756]                   0L) {
[11:02:09.756]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:09.756]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:09.756]                   base::options(opts)
[11:02:09.756]                 }
[11:02:09.756]                 {
[11:02:09.756]                   NULL
[11:02:09.756]                   options(future.plan = NULL)
[11:02:09.756]                   if (is.na(NA_character_)) 
[11:02:09.756]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:09.756]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:09.756]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:09.756]                     .init = FALSE)
[11:02:09.756]                 }
[11:02:09.756]             }
[11:02:09.756]         }
[11:02:09.756]     })
[11:02:09.756]     if (TRUE) {
[11:02:09.756]         base::sink(type = "output", split = FALSE)
[11:02:09.756]         if (TRUE) {
[11:02:09.756]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:09.756]         }
[11:02:09.756]         else {
[11:02:09.756]             ...future.result["stdout"] <- base::list(NULL)
[11:02:09.756]         }
[11:02:09.756]         base::close(...future.stdout)
[11:02:09.756]         ...future.stdout <- NULL
[11:02:09.756]     }
[11:02:09.756]     ...future.result$conditions <- ...future.conditions
[11:02:09.756]     ...future.result$finished <- base::Sys.time()
[11:02:09.756]     ...future.result
[11:02:09.756] }
[11:02:09.807] ClusterFuture started
[11:02:09.807] result() for ClusterFuture ...
[11:02:09.807] receiveMessageFromWorker() for ClusterFuture ...
[11:02:09.808] - Validating connection of ClusterFuture
[11:02:09.838] - received message: FutureResult
[11:02:09.838] - Received FutureResult
[11:02:09.838] - Erased future from FutureRegistry
[11:02:09.838] result() for ClusterFuture ...
[11:02:09.838] - result already collected: FutureResult
[11:02:09.838] result() for ClusterFuture ... done
[11:02:09.838] receiveMessageFromWorker() for ClusterFuture ... done
[11:02:09.838] result() for ClusterFuture ... done
[11:02:09.838] result() for ClusterFuture ...
[11:02:09.839] - result already collected: FutureResult
[11:02:09.839] result() for ClusterFuture ... done
[11:02:09.839] plan(): plan_init() of ‘tweaked’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:02:09.839] plan(): nbrOfWorkers() = 2
> n <- nbrOfWorkers()
> message(sprintf("nbrOfWorkers: %g", n))
nbrOfWorkers: 2
> stopifnot(n == length(workers))
> parallel::stopCluster(workers)
> 
> message("*** nbrOfWorkers() ... DONE")
*** nbrOfWorkers() ... DONE
> 
> source("incl/end.R")
[11:02:09.840] plan(): Setting new future strategy stack:
[11:02:09.840] List of future strategies:
[11:02:09.840] 1. FutureStrategy:
[11:02:09.840]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:09.840]    - tweaked: FALSE
[11:02:09.840]    - call: future::plan(oplan)
[11:02:09.841] plan(): nbrOfWorkers() = 1
> 
