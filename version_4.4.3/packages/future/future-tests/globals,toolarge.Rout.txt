
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:49.532] plan(): Setting new future strategy stack:
[11:01:49.532] List of future strategies:
[11:01:49.532] 1. sequential:
[11:01:49.532]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:49.532]    - tweaked: FALSE
[11:01:49.532]    - call: future::plan("sequential")
[11:01:49.545] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** Globals - too large ...")
*** Globals - too large ...
> 
> a <- integer(length = 1000)
> ooptsT <- options(future.globals.maxSize = object.size(a) - 100L)
> limit <- getOption("future.globals.maxSize")
> cat(sprintf("Max total size of globals: %g bytes\n", limit))
Max total size of globals: 3948 bytes
> 
> plan(multisession)
[11:01:49.563] plan(): Setting new future strategy stack:
[11:01:49.563] List of future strategies:
[11:01:49.563] 1. multisession:
[11:01:49.563]    - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:49.563]    - tweaked: FALSE
[11:01:49.563]    - call: plan(multisession)
[11:01:49.573] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:01:49.573] multisession:
[11:01:49.573] - args: function (..., workers = availableCores(), lazy = FALSE, rscript_libs = .libPaths(), envir = parent.frame())
[11:01:49.573] - tweaked: FALSE
[11:01:49.573] - call: plan(multisession)
[11:01:49.577] getGlobalsAndPackages() ...
[11:01:49.577] Not searching for globals
[11:01:49.577] - globals: [0] <none>
[11:01:49.577] getGlobalsAndPackages() ... DONE
[11:01:50.040] Packages needed by the future expression (n = 0): <none>
[11:01:50.041] Packages needed by future strategies (n = 0): <none>
[11:01:50.041] {
[11:01:50.041]     {
[11:01:50.041]         {
[11:01:50.041]             ...future.startTime <- base::Sys.time()
[11:01:50.041]             {
[11:01:50.041]                 {
[11:01:50.041]                   {
[11:01:50.041]                     {
[11:01:50.041]                       base::local({
[11:01:50.041]                         has_future <- base::requireNamespace("future", 
[11:01:50.041]                           quietly = TRUE)
[11:01:50.041]                         if (has_future) {
[11:01:50.041]                           ns <- base::getNamespace("future")
[11:01:50.041]                           version <- ns[[".package"]][["version"]]
[11:01:50.041]                           if (is.null(version)) 
[11:01:50.041]                             version <- utils::packageVersion("future")
[11:01:50.041]                         }
[11:01:50.041]                         else {
[11:01:50.041]                           version <- NULL
[11:01:50.041]                         }
[11:01:50.041]                         if (!has_future || version < "1.8.0") {
[11:01:50.041]                           info <- base::c(r_version = base::gsub("R version ", 
[11:01:50.041]                             "", base::R.version$version.string), 
[11:01:50.041]                             platform = base::sprintf("%s (%s-bit)", 
[11:01:50.041]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:50.041]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:50.041]                               "release", "version")], collapse = " "), 
[11:01:50.041]                             hostname = base::Sys.info()[["nodename"]])
[11:01:50.041]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:01:50.041]                             info)
[11:01:50.041]                           info <- base::paste(info, collapse = "; ")
[11:01:50.041]                           if (!has_future) {
[11:01:50.041]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:50.041]                               info)
[11:01:50.041]                           }
[11:01:50.041]                           else {
[11:01:50.041]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:50.041]                               info, version)
[11:01:50.041]                           }
[11:01:50.041]                           base::stop(msg)
[11:01:50.041]                         }
[11:01:50.041]                       })
[11:01:50.041]                     }
[11:01:50.041]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:01:50.041]                     base::options(mc.cores = 1L)
[11:01:50.041]                   }
[11:01:50.041]                   ...future.strategy.old <- future::plan("list")
[11:01:50.041]                   options(future.plan = NULL)
[11:01:50.041]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:50.041]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:50.041]                 }
[11:01:50.041]                 ...future.workdir <- getwd()
[11:01:50.041]             }
[11:01:50.041]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:50.041]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:50.041]         }
[11:01:50.041]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:50.041]             future.globals.maxSize = 3948, future.globals.method = NULL, 
[11:01:50.041]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:50.041]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:50.041]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:50.041]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:50.041]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:50.041]             base::names(...future.oldOptions))
[11:01:50.041]     }
[11:01:50.041]     if (FALSE) {
[11:01:50.041]     }
[11:01:50.041]     else {
[11:01:50.041]         if (TRUE) {
[11:01:50.041]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:50.041]                 open = "w")
[11:01:50.041]         }
[11:01:50.041]         else {
[11:01:50.041]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:50.041]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:50.041]         }
[11:01:50.041]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:50.041]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:50.041]             base::sink(type = "output", split = FALSE)
[11:01:50.041]             base::close(...future.stdout)
[11:01:50.041]         }, add = TRUE)
[11:01:50.041]     }
[11:01:50.041]     ...future.frame <- base::sys.nframe()
[11:01:50.041]     ...future.conditions <- base::list()
[11:01:50.041]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:50.041]     if (FALSE) {
[11:01:50.041]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:50.041]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:50.041]     }
[11:01:50.041]     ...future.result <- base::tryCatch({
[11:01:50.041]         base::withCallingHandlers({
[11:01:50.041]             ...future.value <- base::withVisible(base::local({
[11:01:50.041]                 ...future.makeSendCondition <- base::local({
[11:01:50.041]                   sendCondition <- NULL
[11:01:50.041]                   function(frame = 1L) {
[11:01:50.041]                     if (is.function(sendCondition)) 
[11:01:50.041]                       return(sendCondition)
[11:01:50.041]                     ns <- getNamespace("parallel")
[11:01:50.041]                     if (exists("sendData", mode = "function", 
[11:01:50.041]                       envir = ns)) {
[11:01:50.041]                       parallel_sendData <- get("sendData", mode = "function", 
[11:01:50.041]                         envir = ns)
[11:01:50.041]                       envir <- sys.frame(frame)
[11:01:50.041]                       master <- NULL
[11:01:50.041]                       while (!identical(envir, .GlobalEnv) && 
[11:01:50.041]                         !identical(envir, emptyenv())) {
[11:01:50.041]                         if (exists("master", mode = "list", envir = envir, 
[11:01:50.041]                           inherits = FALSE)) {
[11:01:50.041]                           master <- get("master", mode = "list", 
[11:01:50.041]                             envir = envir, inherits = FALSE)
[11:01:50.041]                           if (inherits(master, c("SOCKnode", 
[11:01:50.041]                             "SOCK0node"))) {
[11:01:50.041]                             sendCondition <<- function(cond) {
[11:01:50.041]                               data <- list(type = "VALUE", value = cond, 
[11:01:50.041]                                 success = TRUE)
[11:01:50.041]                               parallel_sendData(master, data)
[11:01:50.041]                             }
[11:01:50.041]                             return(sendCondition)
[11:01:50.041]                           }
[11:01:50.041]                         }
[11:01:50.041]                         frame <- frame + 1L
[11:01:50.041]                         envir <- sys.frame(frame)
[11:01:50.041]                       }
[11:01:50.041]                     }
[11:01:50.041]                     sendCondition <<- function(cond) NULL
[11:01:50.041]                   }
[11:01:50.041]                 })
[11:01:50.041]                 withCallingHandlers({
[11:01:50.041]                   NA
[11:01:50.041]                 }, immediateCondition = function(cond) {
[11:01:50.041]                   sendCondition <- ...future.makeSendCondition()
[11:01:50.041]                   sendCondition(cond)
[11:01:50.041]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:50.041]                   {
[11:01:50.041]                     inherits <- base::inherits
[11:01:50.041]                     invokeRestart <- base::invokeRestart
[11:01:50.041]                     is.null <- base::is.null
[11:01:50.041]                     muffled <- FALSE
[11:01:50.041]                     if (inherits(cond, "message")) {
[11:01:50.041]                       muffled <- grepl(pattern, "muffleMessage")
[11:01:50.041]                       if (muffled) 
[11:01:50.041]                         invokeRestart("muffleMessage")
[11:01:50.041]                     }
[11:01:50.041]                     else if (inherits(cond, "warning")) {
[11:01:50.041]                       muffled <- grepl(pattern, "muffleWarning")
[11:01:50.041]                       if (muffled) 
[11:01:50.041]                         invokeRestart("muffleWarning")
[11:01:50.041]                     }
[11:01:50.041]                     else if (inherits(cond, "condition")) {
[11:01:50.041]                       if (!is.null(pattern)) {
[11:01:50.041]                         computeRestarts <- base::computeRestarts
[11:01:50.041]                         grepl <- base::grepl
[11:01:50.041]                         restarts <- computeRestarts(cond)
[11:01:50.041]                         for (restart in restarts) {
[11:01:50.041]                           name <- restart$name
[11:01:50.041]                           if (is.null(name)) 
[11:01:50.041]                             next
[11:01:50.041]                           if (!grepl(pattern, name)) 
[11:01:50.041]                             next
[11:01:50.041]                           invokeRestart(restart)
[11:01:50.041]                           muffled <- TRUE
[11:01:50.041]                           break
[11:01:50.041]                         }
[11:01:50.041]                       }
[11:01:50.041]                     }
[11:01:50.041]                     invisible(muffled)
[11:01:50.041]                   }
[11:01:50.041]                   muffleCondition(cond)
[11:01:50.041]                 })
[11:01:50.041]             }))
[11:01:50.041]             future::FutureResult(value = ...future.value$value, 
[11:01:50.041]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:50.041]                   ...future.rng), globalenv = if (FALSE) 
[11:01:50.041]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:50.041]                     ...future.globalenv.names))
[11:01:50.041]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:50.041]         }, condition = base::local({
[11:01:50.041]             c <- base::c
[11:01:50.041]             inherits <- base::inherits
[11:01:50.041]             invokeRestart <- base::invokeRestart
[11:01:50.041]             length <- base::length
[11:01:50.041]             list <- base::list
[11:01:50.041]             seq.int <- base::seq.int
[11:01:50.041]             signalCondition <- base::signalCondition
[11:01:50.041]             sys.calls <- base::sys.calls
[11:01:50.041]             `[[` <- base::`[[`
[11:01:50.041]             `+` <- base::`+`
[11:01:50.041]             `<<-` <- base::`<<-`
[11:01:50.041]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:50.041]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:50.041]                   3L)]
[11:01:50.041]             }
[11:01:50.041]             function(cond) {
[11:01:50.041]                 is_error <- inherits(cond, "error")
[11:01:50.041]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:50.041]                   NULL)
[11:01:50.041]                 if (is_error) {
[11:01:50.041]                   sessionInformation <- function() {
[11:01:50.041]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:50.041]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:50.041]                       search = base::search(), system = base::Sys.info())
[11:01:50.041]                   }
[11:01:50.041]                   ...future.conditions[[length(...future.conditions) + 
[11:01:50.041]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:50.041]                     cond$call), session = sessionInformation(), 
[11:01:50.041]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:50.041]                   signalCondition(cond)
[11:01:50.041]                 }
[11:01:50.041]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:50.041]                 "immediateCondition"))) {
[11:01:50.041]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:50.041]                   ...future.conditions[[length(...future.conditions) + 
[11:01:50.041]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:50.041]                   if (TRUE && !signal) {
[11:01:50.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:50.041]                     {
[11:01:50.041]                       inherits <- base::inherits
[11:01:50.041]                       invokeRestart <- base::invokeRestart
[11:01:50.041]                       is.null <- base::is.null
[11:01:50.041]                       muffled <- FALSE
[11:01:50.041]                       if (inherits(cond, "message")) {
[11:01:50.041]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:50.041]                         if (muffled) 
[11:01:50.041]                           invokeRestart("muffleMessage")
[11:01:50.041]                       }
[11:01:50.041]                       else if (inherits(cond, "warning")) {
[11:01:50.041]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:50.041]                         if (muffled) 
[11:01:50.041]                           invokeRestart("muffleWarning")
[11:01:50.041]                       }
[11:01:50.041]                       else if (inherits(cond, "condition")) {
[11:01:50.041]                         if (!is.null(pattern)) {
[11:01:50.041]                           computeRestarts <- base::computeRestarts
[11:01:50.041]                           grepl <- base::grepl
[11:01:50.041]                           restarts <- computeRestarts(cond)
[11:01:50.041]                           for (restart in restarts) {
[11:01:50.041]                             name <- restart$name
[11:01:50.041]                             if (is.null(name)) 
[11:01:50.041]                               next
[11:01:50.041]                             if (!grepl(pattern, name)) 
[11:01:50.041]                               next
[11:01:50.041]                             invokeRestart(restart)
[11:01:50.041]                             muffled <- TRUE
[11:01:50.041]                             break
[11:01:50.041]                           }
[11:01:50.041]                         }
[11:01:50.041]                       }
[11:01:50.041]                       invisible(muffled)
[11:01:50.041]                     }
[11:01:50.041]                     muffleCondition(cond, pattern = "^muffle")
[11:01:50.041]                   }
[11:01:50.041]                 }
[11:01:50.041]                 else {
[11:01:50.041]                   if (TRUE) {
[11:01:50.041]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:50.041]                     {
[11:01:50.041]                       inherits <- base::inherits
[11:01:50.041]                       invokeRestart <- base::invokeRestart
[11:01:50.041]                       is.null <- base::is.null
[11:01:50.041]                       muffled <- FALSE
[11:01:50.041]                       if (inherits(cond, "message")) {
[11:01:50.041]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:50.041]                         if (muffled) 
[11:01:50.041]                           invokeRestart("muffleMessage")
[11:01:50.041]                       }
[11:01:50.041]                       else if (inherits(cond, "warning")) {
[11:01:50.041]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:50.041]                         if (muffled) 
[11:01:50.041]                           invokeRestart("muffleWarning")
[11:01:50.041]                       }
[11:01:50.041]                       else if (inherits(cond, "condition")) {
[11:01:50.041]                         if (!is.null(pattern)) {
[11:01:50.041]                           computeRestarts <- base::computeRestarts
[11:01:50.041]                           grepl <- base::grepl
[11:01:50.041]                           restarts <- computeRestarts(cond)
[11:01:50.041]                           for (restart in restarts) {
[11:01:50.041]                             name <- restart$name
[11:01:50.041]                             if (is.null(name)) 
[11:01:50.041]                               next
[11:01:50.041]                             if (!grepl(pattern, name)) 
[11:01:50.041]                               next
[11:01:50.041]                             invokeRestart(restart)
[11:01:50.041]                             muffled <- TRUE
[11:01:50.041]                             break
[11:01:50.041]                           }
[11:01:50.041]                         }
[11:01:50.041]                       }
[11:01:50.041]                       invisible(muffled)
[11:01:50.041]                     }
[11:01:50.041]                     muffleCondition(cond, pattern = "^muffle")
[11:01:50.041]                   }
[11:01:50.041]                 }
[11:01:50.041]             }
[11:01:50.041]         }))
[11:01:50.041]     }, error = function(ex) {
[11:01:50.041]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:50.041]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:50.041]                 ...future.rng), started = ...future.startTime, 
[11:01:50.041]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:50.041]             version = "1.8"), class = "FutureResult")
[11:01:50.041]     }, finally = {
[11:01:50.041]         if (!identical(...future.workdir, getwd())) 
[11:01:50.041]             setwd(...future.workdir)
[11:01:50.041]         {
[11:01:50.041]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:50.041]                 ...future.oldOptions$nwarnings <- NULL
[11:01:50.041]             }
[11:01:50.041]             base::options(...future.oldOptions)
[11:01:50.041]             if (.Platform$OS.type == "windows") {
[11:01:50.041]                 old_names <- names(...future.oldEnvVars)
[11:01:50.041]                 envs <- base::Sys.getenv()
[11:01:50.041]                 names <- names(envs)
[11:01:50.041]                 common <- intersect(names, old_names)
[11:01:50.041]                 added <- setdiff(names, old_names)
[11:01:50.041]                 removed <- setdiff(old_names, names)
[11:01:50.041]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:50.041]                   envs[common]]
[11:01:50.041]                 NAMES <- toupper(changed)
[11:01:50.041]                 args <- list()
[11:01:50.041]                 for (kk in seq_along(NAMES)) {
[11:01:50.041]                   name <- changed[[kk]]
[11:01:50.041]                   NAME <- NAMES[[kk]]
[11:01:50.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:50.041]                     next
[11:01:50.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:50.041]                 }
[11:01:50.041]                 NAMES <- toupper(added)
[11:01:50.041]                 for (kk in seq_along(NAMES)) {
[11:01:50.041]                   name <- added[[kk]]
[11:01:50.041]                   NAME <- NAMES[[kk]]
[11:01:50.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:50.041]                     next
[11:01:50.041]                   args[[name]] <- ""
[11:01:50.041]                 }
[11:01:50.041]                 NAMES <- toupper(removed)
[11:01:50.041]                 for (kk in seq_along(NAMES)) {
[11:01:50.041]                   name <- removed[[kk]]
[11:01:50.041]                   NAME <- NAMES[[kk]]
[11:01:50.041]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:50.041]                     next
[11:01:50.041]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:50.041]                 }
[11:01:50.041]                 if (length(args) > 0) 
[11:01:50.041]                   base::do.call(base::Sys.setenv, args = args)
[11:01:50.041]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:50.041]             }
[11:01:50.041]             else {
[11:01:50.041]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:50.041]             }
[11:01:50.041]             {
[11:01:50.041]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:50.041]                   0L) {
[11:01:50.041]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:50.041]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:50.041]                   base::options(opts)
[11:01:50.041]                 }
[11:01:50.041]                 {
[11:01:50.041]                   {
[11:01:50.041]                     base::options(mc.cores = ...future.mc.cores.old)
[11:01:50.041]                     NULL
[11:01:50.041]                   }
[11:01:50.041]                   options(future.plan = NULL)
[11:01:50.041]                   if (is.na(NA_character_)) 
[11:01:50.041]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:50.041]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:50.041]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:50.041]                     .init = FALSE)
[11:01:50.041]                 }
[11:01:50.041]             }
[11:01:50.041]         }
[11:01:50.041]     })
[11:01:50.041]     if (TRUE) {
[11:01:50.041]         base::sink(type = "output", split = FALSE)
[11:01:50.041]         if (TRUE) {
[11:01:50.041]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:50.041]         }
[11:01:50.041]         else {
[11:01:50.041]             ...future.result["stdout"] <- base::list(NULL)
[11:01:50.041]         }
[11:01:50.041]         base::close(...future.stdout)
[11:01:50.041]         ...future.stdout <- NULL
[11:01:50.041]     }
[11:01:50.041]     ...future.result$conditions <- ...future.conditions
[11:01:50.041]     ...future.result$finished <- base::Sys.time()
[11:01:50.041]     ...future.result
[11:01:50.041] }
[11:01:50.093] MultisessionFuture started
[11:01:50.093] result() for ClusterFuture ...
[11:01:50.094] receiveMessageFromWorker() for ClusterFuture ...
[11:01:50.094] - Validating connection of MultisessionFuture
[11:01:50.124] - received message: FutureResult
[11:01:50.124] - Received FutureResult
[11:01:50.127] - Erased future from FutureRegistry
[11:01:50.127] result() for ClusterFuture ...
[11:01:50.127] - result already collected: FutureResult
[11:01:50.127] result() for ClusterFuture ... done
[11:01:50.127] receiveMessageFromWorker() for ClusterFuture ... done
[11:01:50.127] result() for ClusterFuture ... done
[11:01:50.127] result() for ClusterFuture ...
[11:01:50.127] - result already collected: FutureResult
[11:01:50.127] result() for ClusterFuture ... done
[11:01:50.128] plan(): plan_init() of ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:01:50.129] plan(): nbrOfWorkers() = 2
> 
> exprs <- list(
+   A = substitute({ a                 }, env = list()),
+   B = substitute({ a * b             }, env = list()),
+   C = substitute({ a * b * c         }, env = list()),
+   D = substitute({ a * b * c * d     }, env = list()),
+   E = substitute({ a * b * c * d * e }, env = list())
+ )
> 
> a <- integer(length = 1000)
> b <- integer(length =  900)
> c <- integer(length =  800)
> d <- integer(length =  700)
> e <- integer(length =    1)
> 
> for (name in names(exprs)) {
+   message(sprintf("Expression %s:", name))
+   expr <- exprs[[name]]
+   print(expr)
+   res <- tryCatch({
+     f <- future(expr, substitute = FALSE)
+   }, error = function(ex) ex)
+   print(res)
+   stopifnot(inherits(res, "error"))
+   msg <- conditionMessage(res)
+   stopifnot(grepl("exceeds the maximum allowed size", msg))
+ }
Expression A:
{
    a
}
[11:01:50.135] getGlobalsAndPackages() ...
[11:01:50.136] Searching for globals...
[11:01:50.138] - globals found: [2] ‘{’, ‘a’
[11:01:50.138] Searching for globals ... DONE
[11:01:50.139] Resolving globals: FALSE
[11:01:50.139] The total size of the 1 globals is 3.94 KiB (4031 bytes)
[11:01:50.140] The total size of the 1 globals exported for future expression (‘{; a; }’) is 3.94 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (3.94 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 1 globals exported for future expression (‘{; a; }’) is 3.94 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There is one global: ‘a’ (3.94 KiB of class ‘numeric’)>
Expression B:
{
    a * b
}
[11:01:50.140] getGlobalsAndPackages() ...
[11:01:50.140] Searching for globals...
[11:01:50.144] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[11:01:50.144] Searching for globals ... DONE
[11:01:50.144] Resolving globals: FALSE
[11:01:50.145] The total size of the 2 globals is 7.48 KiB (7662 bytes)
[11:01:50.145] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 7.48 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (3.94 KiB of class ‘numeric’) and ‘b’ (3.55 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 7.48 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (3.94 KiB of class ‘numeric’) and ‘b’ (3.55 KiB of class ‘numeric’)>
Expression C:
{
    a * b * c
}
[11:01:50.145] getGlobalsAndPackages() ...
[11:01:50.145] Searching for globals...
[11:01:50.146] - globals found: [5] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’
[11:01:50.146] Searching for globals ... DONE
[11:01:50.147] Resolving globals: FALSE
[11:01:50.147] The total size of the 3 globals is 10.64 KiB (10893 bytes)
[11:01:50.147] The total size of the 3 globals exported for future expression (‘{; a * b * c; }’) is 10.64 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There are three globals: ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 3 globals exported for future expression (‘{; a * b * c; }’) is 10.64 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). There are three globals: ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>
Expression D:
{
    a * b * c * d
}
[11:01:50.148] getGlobalsAndPackages() ...
[11:01:50.148] Searching for globals...
[11:01:50.149] - globals found: [6] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’
[11:01:50.149] Searching for globals ... DONE
[11:01:50.149] Resolving globals: FALSE
[11:01:50.150] The total size of the 4 globals is 13.40 KiB (13724 bytes)
[11:01:50.150] The total size of the 4 globals exported for future expression (‘{; a * b * c * d; }’) is 13.40 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 4 globals exported for future expression (‘{; a * b * c * d; }’) is 13.40 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>
Expression E:
{
    a * b * c * d * e
}
[11:01:50.151] getGlobalsAndPackages() ...
[11:01:50.151] Searching for globals...
[11:01:50.152] - globals found: [7] ‘{’, ‘*’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’
[11:01:50.153] Searching for globals ... DONE
[11:01:50.153] Resolving globals: FALSE
[11:01:50.153] The total size of the 5 globals is 13.44 KiB (13759 bytes)
[11:01:50.154] The total size of the 5 globals exported for future expression (‘{; a * b * c * d * e; }’) is 13.44 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)
<simpleError in getGlobalsAndPackages(expr, envir = envir, tweak = tweakExpression,     globals = globals): The total size of the 5 globals exported for future expression (‘{; a * b * c * d * e; }’) is 13.44 KiB.. This exceeds the maximum allowed size of 3.86 KiB (option 'future.globals.maxSize'). The three largest globals are ‘a’ (3.94 KiB of class ‘numeric’), ‘b’ (3.55 KiB of class ‘numeric’) and ‘c’ (3.16 KiB of class ‘numeric’)>
> 
> message("*** Globals - too large ... DONE")
*** Globals - too large ... DONE
> 
> source("incl/end.R")
[11:01:50.155] plan(): Setting new future strategy stack:
[11:01:50.155] List of future strategies:
[11:01:50.155] 1. FutureStrategy:
[11:01:50.155]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:50.155]    - tweaked: FALSE
[11:01:50.155]    - call: future::plan(oplan)
[11:01:50.156] plan(): nbrOfWorkers() = 1
> 
