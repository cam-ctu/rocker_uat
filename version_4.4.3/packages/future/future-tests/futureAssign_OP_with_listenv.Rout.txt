
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:01:19.463] plan(): Setting new future strategy stack:
[11:01:19.464] List of future strategies:
[11:01:19.464] 1. sequential:
[11:01:19.464]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.464]    - tweaked: FALSE
[11:01:19.464]    - call: future::plan("sequential")
[11:01:19.477] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[11:01:19.496] getGlobalsAndPackages() ...
[11:01:19.496] Searching for globals...
[11:01:19.498] - globals found: [1] ‘{’
[11:01:19.498] Searching for globals ... DONE
[11:01:19.499] Resolving globals: FALSE
[11:01:19.499] 
[11:01:19.499] 
[11:01:19.499] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[11:01:19.500] getGlobalsAndPackages() ...
[11:01:19.500] Searching for globals...
[11:01:19.501] - globals found: [1] ‘{’
[11:01:19.501] Searching for globals ... DONE
[11:01:19.501] Resolving globals: FALSE
[11:01:19.501] 
[11:01:19.501] 
[11:01:19.501] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[11:01:19.502] getGlobalsAndPackages() ...
[11:01:19.502] Searching for globals...
[11:01:19.502] - globals found: [1] ‘{’
[11:01:19.502] Searching for globals ... DONE
[11:01:19.503] Resolving globals: FALSE
[11:01:19.503] 
[11:01:19.503] 
[11:01:19.503] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[11:01:19.504] getGlobalsAndPackages() ...
[11:01:19.504] Searching for globals...
[11:01:19.504] - globals found: [1] ‘{’
[11:01:19.504] Searching for globals ... DONE
[11:01:19.505] Resolving globals: FALSE
[11:01:19.505] 
[11:01:19.505] 
[11:01:19.505] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[11:01:19.506] run() for ‘Future’ ...
[11:01:19.506] - state: ‘created’
[11:01:19.506] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.506] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.506] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.506]   - Field: ‘label’
[11:01:19.507]   - Field: ‘local’
[11:01:19.507]   - Field: ‘owner’
[11:01:19.507]   - Field: ‘envir’
[11:01:19.507]   - Field: ‘packages’
[11:01:19.507]   - Field: ‘gc’
[11:01:19.507]   - Field: ‘conditions’
[11:01:19.507]   - Field: ‘expr’
[11:01:19.507]   - Field: ‘uuid’
[11:01:19.507]   - Field: ‘seed’
[11:01:19.507]   - Field: ‘version’
[11:01:19.507]   - Field: ‘result’
[11:01:19.508]   - Field: ‘asynchronous’
[11:01:19.508]   - Field: ‘calls’
[11:01:19.508]   - Field: ‘globals’
[11:01:19.508]   - Field: ‘stdout’
[11:01:19.508]   - Field: ‘earlySignal’
[11:01:19.508]   - Field: ‘lazy’
[11:01:19.508]   - Field: ‘state’
[11:01:19.508] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.508] - Launch lazy future ...
[11:01:19.509] Packages needed by the future expression (n = 0): <none>
[11:01:19.509] Packages needed by future strategies (n = 0): <none>
[11:01:19.510] {
[11:01:19.510]     {
[11:01:19.510]         {
[11:01:19.510]             ...future.startTime <- base::Sys.time()
[11:01:19.510]             {
[11:01:19.510]                 {
[11:01:19.510]                   {
[11:01:19.510]                     base::local({
[11:01:19.510]                       has_future <- base::requireNamespace("future", 
[11:01:19.510]                         quietly = TRUE)
[11:01:19.510]                       if (has_future) {
[11:01:19.510]                         ns <- base::getNamespace("future")
[11:01:19.510]                         version <- ns[[".package"]][["version"]]
[11:01:19.510]                         if (is.null(version)) 
[11:01:19.510]                           version <- utils::packageVersion("future")
[11:01:19.510]                       }
[11:01:19.510]                       else {
[11:01:19.510]                         version <- NULL
[11:01:19.510]                       }
[11:01:19.510]                       if (!has_future || version < "1.8.0") {
[11:01:19.510]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.510]                           "", base::R.version$version.string), 
[11:01:19.510]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.510]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.510]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.510]                             "release", "version")], collapse = " "), 
[11:01:19.510]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.510]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.510]                           info)
[11:01:19.510]                         info <- base::paste(info, collapse = "; ")
[11:01:19.510]                         if (!has_future) {
[11:01:19.510]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.510]                             info)
[11:01:19.510]                         }
[11:01:19.510]                         else {
[11:01:19.510]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.510]                             info, version)
[11:01:19.510]                         }
[11:01:19.510]                         base::stop(msg)
[11:01:19.510]                       }
[11:01:19.510]                     })
[11:01:19.510]                   }
[11:01:19.510]                   ...future.strategy.old <- future::plan("list")
[11:01:19.510]                   options(future.plan = NULL)
[11:01:19.510]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.510]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.510]                 }
[11:01:19.510]                 ...future.workdir <- getwd()
[11:01:19.510]             }
[11:01:19.510]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.510]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.510]         }
[11:01:19.510]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.510]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.510]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.510]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.510]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.510]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.510]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.510]             base::names(...future.oldOptions))
[11:01:19.510]     }
[11:01:19.510]     if (FALSE) {
[11:01:19.510]     }
[11:01:19.510]     else {
[11:01:19.510]         if (TRUE) {
[11:01:19.510]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.510]                 open = "w")
[11:01:19.510]         }
[11:01:19.510]         else {
[11:01:19.510]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.510]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.510]         }
[11:01:19.510]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.510]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.510]             base::sink(type = "output", split = FALSE)
[11:01:19.510]             base::close(...future.stdout)
[11:01:19.510]         }, add = TRUE)
[11:01:19.510]     }
[11:01:19.510]     ...future.frame <- base::sys.nframe()
[11:01:19.510]     ...future.conditions <- base::list()
[11:01:19.510]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.510]     if (FALSE) {
[11:01:19.510]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.510]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.510]     }
[11:01:19.510]     ...future.result <- base::tryCatch({
[11:01:19.510]         base::withCallingHandlers({
[11:01:19.510]             ...future.value <- base::withVisible(base::local({
[11:01:19.510]                 2
[11:01:19.510]             }))
[11:01:19.510]             future::FutureResult(value = ...future.value$value, 
[11:01:19.510]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.510]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.510]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.510]                     ...future.globalenv.names))
[11:01:19.510]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.510]         }, condition = base::local({
[11:01:19.510]             c <- base::c
[11:01:19.510]             inherits <- base::inherits
[11:01:19.510]             invokeRestart <- base::invokeRestart
[11:01:19.510]             length <- base::length
[11:01:19.510]             list <- base::list
[11:01:19.510]             seq.int <- base::seq.int
[11:01:19.510]             signalCondition <- base::signalCondition
[11:01:19.510]             sys.calls <- base::sys.calls
[11:01:19.510]             `[[` <- base::`[[`
[11:01:19.510]             `+` <- base::`+`
[11:01:19.510]             `<<-` <- base::`<<-`
[11:01:19.510]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.510]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.510]                   3L)]
[11:01:19.510]             }
[11:01:19.510]             function(cond) {
[11:01:19.510]                 is_error <- inherits(cond, "error")
[11:01:19.510]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.510]                   NULL)
[11:01:19.510]                 if (is_error) {
[11:01:19.510]                   sessionInformation <- function() {
[11:01:19.510]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.510]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.510]                       search = base::search(), system = base::Sys.info())
[11:01:19.510]                   }
[11:01:19.510]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.510]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.510]                     cond$call), session = sessionInformation(), 
[11:01:19.510]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.510]                   signalCondition(cond)
[11:01:19.510]                 }
[11:01:19.510]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.510]                 "immediateCondition"))) {
[11:01:19.510]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.510]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.510]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.510]                   if (TRUE && !signal) {
[11:01:19.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.510]                     {
[11:01:19.510]                       inherits <- base::inherits
[11:01:19.510]                       invokeRestart <- base::invokeRestart
[11:01:19.510]                       is.null <- base::is.null
[11:01:19.510]                       muffled <- FALSE
[11:01:19.510]                       if (inherits(cond, "message")) {
[11:01:19.510]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.510]                         if (muffled) 
[11:01:19.510]                           invokeRestart("muffleMessage")
[11:01:19.510]                       }
[11:01:19.510]                       else if (inherits(cond, "warning")) {
[11:01:19.510]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.510]                         if (muffled) 
[11:01:19.510]                           invokeRestart("muffleWarning")
[11:01:19.510]                       }
[11:01:19.510]                       else if (inherits(cond, "condition")) {
[11:01:19.510]                         if (!is.null(pattern)) {
[11:01:19.510]                           computeRestarts <- base::computeRestarts
[11:01:19.510]                           grepl <- base::grepl
[11:01:19.510]                           restarts <- computeRestarts(cond)
[11:01:19.510]                           for (restart in restarts) {
[11:01:19.510]                             name <- restart$name
[11:01:19.510]                             if (is.null(name)) 
[11:01:19.510]                               next
[11:01:19.510]                             if (!grepl(pattern, name)) 
[11:01:19.510]                               next
[11:01:19.510]                             invokeRestart(restart)
[11:01:19.510]                             muffled <- TRUE
[11:01:19.510]                             break
[11:01:19.510]                           }
[11:01:19.510]                         }
[11:01:19.510]                       }
[11:01:19.510]                       invisible(muffled)
[11:01:19.510]                     }
[11:01:19.510]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.510]                   }
[11:01:19.510]                 }
[11:01:19.510]                 else {
[11:01:19.510]                   if (TRUE) {
[11:01:19.510]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.510]                     {
[11:01:19.510]                       inherits <- base::inherits
[11:01:19.510]                       invokeRestart <- base::invokeRestart
[11:01:19.510]                       is.null <- base::is.null
[11:01:19.510]                       muffled <- FALSE
[11:01:19.510]                       if (inherits(cond, "message")) {
[11:01:19.510]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.510]                         if (muffled) 
[11:01:19.510]                           invokeRestart("muffleMessage")
[11:01:19.510]                       }
[11:01:19.510]                       else if (inherits(cond, "warning")) {
[11:01:19.510]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.510]                         if (muffled) 
[11:01:19.510]                           invokeRestart("muffleWarning")
[11:01:19.510]                       }
[11:01:19.510]                       else if (inherits(cond, "condition")) {
[11:01:19.510]                         if (!is.null(pattern)) {
[11:01:19.510]                           computeRestarts <- base::computeRestarts
[11:01:19.510]                           grepl <- base::grepl
[11:01:19.510]                           restarts <- computeRestarts(cond)
[11:01:19.510]                           for (restart in restarts) {
[11:01:19.510]                             name <- restart$name
[11:01:19.510]                             if (is.null(name)) 
[11:01:19.510]                               next
[11:01:19.510]                             if (!grepl(pattern, name)) 
[11:01:19.510]                               next
[11:01:19.510]                             invokeRestart(restart)
[11:01:19.510]                             muffled <- TRUE
[11:01:19.510]                             break
[11:01:19.510]                           }
[11:01:19.510]                         }
[11:01:19.510]                       }
[11:01:19.510]                       invisible(muffled)
[11:01:19.510]                     }
[11:01:19.510]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.510]                   }
[11:01:19.510]                 }
[11:01:19.510]             }
[11:01:19.510]         }))
[11:01:19.510]     }, error = function(ex) {
[11:01:19.510]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.510]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.510]                 ...future.rng), started = ...future.startTime, 
[11:01:19.510]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.510]             version = "1.8"), class = "FutureResult")
[11:01:19.510]     }, finally = {
[11:01:19.510]         if (!identical(...future.workdir, getwd())) 
[11:01:19.510]             setwd(...future.workdir)
[11:01:19.510]         {
[11:01:19.510]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.510]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.510]             }
[11:01:19.510]             base::options(...future.oldOptions)
[11:01:19.510]             if (.Platform$OS.type == "windows") {
[11:01:19.510]                 old_names <- names(...future.oldEnvVars)
[11:01:19.510]                 envs <- base::Sys.getenv()
[11:01:19.510]                 names <- names(envs)
[11:01:19.510]                 common <- intersect(names, old_names)
[11:01:19.510]                 added <- setdiff(names, old_names)
[11:01:19.510]                 removed <- setdiff(old_names, names)
[11:01:19.510]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.510]                   envs[common]]
[11:01:19.510]                 NAMES <- toupper(changed)
[11:01:19.510]                 args <- list()
[11:01:19.510]                 for (kk in seq_along(NAMES)) {
[11:01:19.510]                   name <- changed[[kk]]
[11:01:19.510]                   NAME <- NAMES[[kk]]
[11:01:19.510]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.510]                     next
[11:01:19.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.510]                 }
[11:01:19.510]                 NAMES <- toupper(added)
[11:01:19.510]                 for (kk in seq_along(NAMES)) {
[11:01:19.510]                   name <- added[[kk]]
[11:01:19.510]                   NAME <- NAMES[[kk]]
[11:01:19.510]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.510]                     next
[11:01:19.510]                   args[[name]] <- ""
[11:01:19.510]                 }
[11:01:19.510]                 NAMES <- toupper(removed)
[11:01:19.510]                 for (kk in seq_along(NAMES)) {
[11:01:19.510]                   name <- removed[[kk]]
[11:01:19.510]                   NAME <- NAMES[[kk]]
[11:01:19.510]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.510]                     next
[11:01:19.510]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.510]                 }
[11:01:19.510]                 if (length(args) > 0) 
[11:01:19.510]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.510]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.510]             }
[11:01:19.510]             else {
[11:01:19.510]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.510]             }
[11:01:19.510]             {
[11:01:19.510]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.510]                   0L) {
[11:01:19.510]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.510]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.510]                   base::options(opts)
[11:01:19.510]                 }
[11:01:19.510]                 {
[11:01:19.510]                   {
[11:01:19.510]                     NULL
[11:01:19.510]                     RNGkind("Mersenne-Twister")
[11:01:19.510]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.510]                       inherits = FALSE)
[11:01:19.510]                   }
[11:01:19.510]                   options(future.plan = NULL)
[11:01:19.510]                   if (is.na(NA_character_)) 
[11:01:19.510]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.510]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.510]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.510]                     .init = FALSE)
[11:01:19.510]                 }
[11:01:19.510]             }
[11:01:19.510]         }
[11:01:19.510]     })
[11:01:19.510]     if (TRUE) {
[11:01:19.510]         base::sink(type = "output", split = FALSE)
[11:01:19.510]         if (TRUE) {
[11:01:19.510]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.510]         }
[11:01:19.510]         else {
[11:01:19.510]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.510]         }
[11:01:19.510]         base::close(...future.stdout)
[11:01:19.510]         ...future.stdout <- NULL
[11:01:19.510]     }
[11:01:19.510]     ...future.result$conditions <- ...future.conditions
[11:01:19.510]     ...future.result$finished <- base::Sys.time()
[11:01:19.510]     ...future.result
[11:01:19.510] }
[11:01:19.512] plan(): Setting new future strategy stack:
[11:01:19.512] List of future strategies:
[11:01:19.512] 1. sequential:
[11:01:19.512]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.512]    - tweaked: FALSE
[11:01:19.512]    - call: NULL
[11:01:19.512] plan(): nbrOfWorkers() = 1
[11:01:19.513] plan(): Setting new future strategy stack:
[11:01:19.513] List of future strategies:
[11:01:19.513] 1. sequential:
[11:01:19.513]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.513]    - tweaked: FALSE
[11:01:19.513]    - call: future::plan("sequential")
[11:01:19.514] plan(): nbrOfWorkers() = 1
[11:01:19.514] SequentialFuture started (and completed)
[11:01:19.514] - Launch lazy future ... done
[11:01:19.514] run() for ‘SequentialFuture’ ... done
[11:01:19.514] run() for ‘Future’ ...
[11:01:19.515] - state: ‘created’
[11:01:19.515] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.515] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.515] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.515]   - Field: ‘label’
[11:01:19.515]   - Field: ‘local’
[11:01:19.515]   - Field: ‘owner’
[11:01:19.515]   - Field: ‘envir’
[11:01:19.516]   - Field: ‘packages’
[11:01:19.516]   - Field: ‘gc’
[11:01:19.516]   - Field: ‘conditions’
[11:01:19.516]   - Field: ‘expr’
[11:01:19.516]   - Field: ‘uuid’
[11:01:19.516]   - Field: ‘seed’
[11:01:19.516]   - Field: ‘version’
[11:01:19.516]   - Field: ‘result’
[11:01:19.516]   - Field: ‘asynchronous’
[11:01:19.516]   - Field: ‘calls’
[11:01:19.516]   - Field: ‘globals’
[11:01:19.516]   - Field: ‘stdout’
[11:01:19.517]   - Field: ‘earlySignal’
[11:01:19.517]   - Field: ‘lazy’
[11:01:19.517]   - Field: ‘state’
[11:01:19.517] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.517] - Launch lazy future ...
[11:01:19.517] Packages needed by the future expression (n = 0): <none>
[11:01:19.517] Packages needed by future strategies (n = 0): <none>
[11:01:19.518] {
[11:01:19.518]     {
[11:01:19.518]         {
[11:01:19.518]             ...future.startTime <- base::Sys.time()
[11:01:19.518]             {
[11:01:19.518]                 {
[11:01:19.518]                   {
[11:01:19.518]                     base::local({
[11:01:19.518]                       has_future <- base::requireNamespace("future", 
[11:01:19.518]                         quietly = TRUE)
[11:01:19.518]                       if (has_future) {
[11:01:19.518]                         ns <- base::getNamespace("future")
[11:01:19.518]                         version <- ns[[".package"]][["version"]]
[11:01:19.518]                         if (is.null(version)) 
[11:01:19.518]                           version <- utils::packageVersion("future")
[11:01:19.518]                       }
[11:01:19.518]                       else {
[11:01:19.518]                         version <- NULL
[11:01:19.518]                       }
[11:01:19.518]                       if (!has_future || version < "1.8.0") {
[11:01:19.518]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.518]                           "", base::R.version$version.string), 
[11:01:19.518]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.518]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.518]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.518]                             "release", "version")], collapse = " "), 
[11:01:19.518]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.518]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.518]                           info)
[11:01:19.518]                         info <- base::paste(info, collapse = "; ")
[11:01:19.518]                         if (!has_future) {
[11:01:19.518]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.518]                             info)
[11:01:19.518]                         }
[11:01:19.518]                         else {
[11:01:19.518]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.518]                             info, version)
[11:01:19.518]                         }
[11:01:19.518]                         base::stop(msg)
[11:01:19.518]                       }
[11:01:19.518]                     })
[11:01:19.518]                   }
[11:01:19.518]                   ...future.strategy.old <- future::plan("list")
[11:01:19.518]                   options(future.plan = NULL)
[11:01:19.518]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.518]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.518]                 }
[11:01:19.518]                 ...future.workdir <- getwd()
[11:01:19.518]             }
[11:01:19.518]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.518]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.518]         }
[11:01:19.518]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.518]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.518]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.518]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.518]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.518]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.518]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.518]             base::names(...future.oldOptions))
[11:01:19.518]     }
[11:01:19.518]     if (FALSE) {
[11:01:19.518]     }
[11:01:19.518]     else {
[11:01:19.518]         if (TRUE) {
[11:01:19.518]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.518]                 open = "w")
[11:01:19.518]         }
[11:01:19.518]         else {
[11:01:19.518]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.518]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.518]         }
[11:01:19.518]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.518]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.518]             base::sink(type = "output", split = FALSE)
[11:01:19.518]             base::close(...future.stdout)
[11:01:19.518]         }, add = TRUE)
[11:01:19.518]     }
[11:01:19.518]     ...future.frame <- base::sys.nframe()
[11:01:19.518]     ...future.conditions <- base::list()
[11:01:19.518]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.518]     if (FALSE) {
[11:01:19.518]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.518]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.518]     }
[11:01:19.518]     ...future.result <- base::tryCatch({
[11:01:19.518]         base::withCallingHandlers({
[11:01:19.518]             ...future.value <- base::withVisible(base::local({
[11:01:19.518]                 "async!"
[11:01:19.518]             }))
[11:01:19.518]             future::FutureResult(value = ...future.value$value, 
[11:01:19.518]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.518]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.518]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.518]                     ...future.globalenv.names))
[11:01:19.518]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.518]         }, condition = base::local({
[11:01:19.518]             c <- base::c
[11:01:19.518]             inherits <- base::inherits
[11:01:19.518]             invokeRestart <- base::invokeRestart
[11:01:19.518]             length <- base::length
[11:01:19.518]             list <- base::list
[11:01:19.518]             seq.int <- base::seq.int
[11:01:19.518]             signalCondition <- base::signalCondition
[11:01:19.518]             sys.calls <- base::sys.calls
[11:01:19.518]             `[[` <- base::`[[`
[11:01:19.518]             `+` <- base::`+`
[11:01:19.518]             `<<-` <- base::`<<-`
[11:01:19.518]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.518]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.518]                   3L)]
[11:01:19.518]             }
[11:01:19.518]             function(cond) {
[11:01:19.518]                 is_error <- inherits(cond, "error")
[11:01:19.518]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.518]                   NULL)
[11:01:19.518]                 if (is_error) {
[11:01:19.518]                   sessionInformation <- function() {
[11:01:19.518]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.518]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.518]                       search = base::search(), system = base::Sys.info())
[11:01:19.518]                   }
[11:01:19.518]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.518]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.518]                     cond$call), session = sessionInformation(), 
[11:01:19.518]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.518]                   signalCondition(cond)
[11:01:19.518]                 }
[11:01:19.518]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.518]                 "immediateCondition"))) {
[11:01:19.518]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.518]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.518]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.518]                   if (TRUE && !signal) {
[11:01:19.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.518]                     {
[11:01:19.518]                       inherits <- base::inherits
[11:01:19.518]                       invokeRestart <- base::invokeRestart
[11:01:19.518]                       is.null <- base::is.null
[11:01:19.518]                       muffled <- FALSE
[11:01:19.518]                       if (inherits(cond, "message")) {
[11:01:19.518]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.518]                         if (muffled) 
[11:01:19.518]                           invokeRestart("muffleMessage")
[11:01:19.518]                       }
[11:01:19.518]                       else if (inherits(cond, "warning")) {
[11:01:19.518]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.518]                         if (muffled) 
[11:01:19.518]                           invokeRestart("muffleWarning")
[11:01:19.518]                       }
[11:01:19.518]                       else if (inherits(cond, "condition")) {
[11:01:19.518]                         if (!is.null(pattern)) {
[11:01:19.518]                           computeRestarts <- base::computeRestarts
[11:01:19.518]                           grepl <- base::grepl
[11:01:19.518]                           restarts <- computeRestarts(cond)
[11:01:19.518]                           for (restart in restarts) {
[11:01:19.518]                             name <- restart$name
[11:01:19.518]                             if (is.null(name)) 
[11:01:19.518]                               next
[11:01:19.518]                             if (!grepl(pattern, name)) 
[11:01:19.518]                               next
[11:01:19.518]                             invokeRestart(restart)
[11:01:19.518]                             muffled <- TRUE
[11:01:19.518]                             break
[11:01:19.518]                           }
[11:01:19.518]                         }
[11:01:19.518]                       }
[11:01:19.518]                       invisible(muffled)
[11:01:19.518]                     }
[11:01:19.518]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.518]                   }
[11:01:19.518]                 }
[11:01:19.518]                 else {
[11:01:19.518]                   if (TRUE) {
[11:01:19.518]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.518]                     {
[11:01:19.518]                       inherits <- base::inherits
[11:01:19.518]                       invokeRestart <- base::invokeRestart
[11:01:19.518]                       is.null <- base::is.null
[11:01:19.518]                       muffled <- FALSE
[11:01:19.518]                       if (inherits(cond, "message")) {
[11:01:19.518]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.518]                         if (muffled) 
[11:01:19.518]                           invokeRestart("muffleMessage")
[11:01:19.518]                       }
[11:01:19.518]                       else if (inherits(cond, "warning")) {
[11:01:19.518]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.518]                         if (muffled) 
[11:01:19.518]                           invokeRestart("muffleWarning")
[11:01:19.518]                       }
[11:01:19.518]                       else if (inherits(cond, "condition")) {
[11:01:19.518]                         if (!is.null(pattern)) {
[11:01:19.518]                           computeRestarts <- base::computeRestarts
[11:01:19.518]                           grepl <- base::grepl
[11:01:19.518]                           restarts <- computeRestarts(cond)
[11:01:19.518]                           for (restart in restarts) {
[11:01:19.518]                             name <- restart$name
[11:01:19.518]                             if (is.null(name)) 
[11:01:19.518]                               next
[11:01:19.518]                             if (!grepl(pattern, name)) 
[11:01:19.518]                               next
[11:01:19.518]                             invokeRestart(restart)
[11:01:19.518]                             muffled <- TRUE
[11:01:19.518]                             break
[11:01:19.518]                           }
[11:01:19.518]                         }
[11:01:19.518]                       }
[11:01:19.518]                       invisible(muffled)
[11:01:19.518]                     }
[11:01:19.518]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.518]                   }
[11:01:19.518]                 }
[11:01:19.518]             }
[11:01:19.518]         }))
[11:01:19.518]     }, error = function(ex) {
[11:01:19.518]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.518]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.518]                 ...future.rng), started = ...future.startTime, 
[11:01:19.518]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.518]             version = "1.8"), class = "FutureResult")
[11:01:19.518]     }, finally = {
[11:01:19.518]         if (!identical(...future.workdir, getwd())) 
[11:01:19.518]             setwd(...future.workdir)
[11:01:19.518]         {
[11:01:19.518]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.518]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.518]             }
[11:01:19.518]             base::options(...future.oldOptions)
[11:01:19.518]             if (.Platform$OS.type == "windows") {
[11:01:19.518]                 old_names <- names(...future.oldEnvVars)
[11:01:19.518]                 envs <- base::Sys.getenv()
[11:01:19.518]                 names <- names(envs)
[11:01:19.518]                 common <- intersect(names, old_names)
[11:01:19.518]                 added <- setdiff(names, old_names)
[11:01:19.518]                 removed <- setdiff(old_names, names)
[11:01:19.518]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.518]                   envs[common]]
[11:01:19.518]                 NAMES <- toupper(changed)
[11:01:19.518]                 args <- list()
[11:01:19.518]                 for (kk in seq_along(NAMES)) {
[11:01:19.518]                   name <- changed[[kk]]
[11:01:19.518]                   NAME <- NAMES[[kk]]
[11:01:19.518]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.518]                     next
[11:01:19.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.518]                 }
[11:01:19.518]                 NAMES <- toupper(added)
[11:01:19.518]                 for (kk in seq_along(NAMES)) {
[11:01:19.518]                   name <- added[[kk]]
[11:01:19.518]                   NAME <- NAMES[[kk]]
[11:01:19.518]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.518]                     next
[11:01:19.518]                   args[[name]] <- ""
[11:01:19.518]                 }
[11:01:19.518]                 NAMES <- toupper(removed)
[11:01:19.518]                 for (kk in seq_along(NAMES)) {
[11:01:19.518]                   name <- removed[[kk]]
[11:01:19.518]                   NAME <- NAMES[[kk]]
[11:01:19.518]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.518]                     next
[11:01:19.518]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.518]                 }
[11:01:19.518]                 if (length(args) > 0) 
[11:01:19.518]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.518]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.518]             }
[11:01:19.518]             else {
[11:01:19.518]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.518]             }
[11:01:19.518]             {
[11:01:19.518]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.518]                   0L) {
[11:01:19.518]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.518]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.518]                   base::options(opts)
[11:01:19.518]                 }
[11:01:19.518]                 {
[11:01:19.518]                   {
[11:01:19.518]                     NULL
[11:01:19.518]                     RNGkind("Mersenne-Twister")
[11:01:19.518]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.518]                       inherits = FALSE)
[11:01:19.518]                   }
[11:01:19.518]                   options(future.plan = NULL)
[11:01:19.518]                   if (is.na(NA_character_)) 
[11:01:19.518]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.518]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.518]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.518]                     .init = FALSE)
[11:01:19.518]                 }
[11:01:19.518]             }
[11:01:19.518]         }
[11:01:19.518]     })
[11:01:19.518]     if (TRUE) {
[11:01:19.518]         base::sink(type = "output", split = FALSE)
[11:01:19.518]         if (TRUE) {
[11:01:19.518]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.518]         }
[11:01:19.518]         else {
[11:01:19.518]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.518]         }
[11:01:19.518]         base::close(...future.stdout)
[11:01:19.518]         ...future.stdout <- NULL
[11:01:19.518]     }
[11:01:19.518]     ...future.result$conditions <- ...future.conditions
[11:01:19.518]     ...future.result$finished <- base::Sys.time()
[11:01:19.518]     ...future.result
[11:01:19.518] }
[11:01:19.519] plan(): Setting new future strategy stack:
[11:01:19.520] List of future strategies:
[11:01:19.520] 1. sequential:
[11:01:19.520]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.520]    - tweaked: FALSE
[11:01:19.520]    - call: NULL
[11:01:19.520] plan(): nbrOfWorkers() = 1
[11:01:19.521] plan(): Setting new future strategy stack:
[11:01:19.521] List of future strategies:
[11:01:19.521] 1. sequential:
[11:01:19.521]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.521]    - tweaked: FALSE
[11:01:19.521]    - call: future::plan("sequential")
[11:01:19.521] plan(): nbrOfWorkers() = 1
[11:01:19.521] SequentialFuture started (and completed)
[11:01:19.522] - Launch lazy future ... done
[11:01:19.522] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[11:01:19.527] getGlobalsAndPackages() ...
[11:01:19.528] Searching for globals...
[11:01:19.528] - globals found: [1] ‘{’
[11:01:19.528] Searching for globals ... DONE
[11:01:19.528] Resolving globals: FALSE
[11:01:19.529] 
[11:01:19.529] 
[11:01:19.529] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[11:01:19.529] getGlobalsAndPackages() ...
[11:01:19.530] Searching for globals...
[11:01:19.530] - globals found: [1] ‘{’
[11:01:19.530] Searching for globals ... DONE
[11:01:19.530] Resolving globals: FALSE
[11:01:19.531] 
[11:01:19.531] 
[11:01:19.531] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[11:01:19.531] run() for ‘Future’ ...
[11:01:19.531] - state: ‘created’
[11:01:19.532] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.532] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.532] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.532]   - Field: ‘label’
[11:01:19.532]   - Field: ‘local’
[11:01:19.532]   - Field: ‘owner’
[11:01:19.532]   - Field: ‘envir’
[11:01:19.532]   - Field: ‘packages’
[11:01:19.533]   - Field: ‘gc’
[11:01:19.533]   - Field: ‘conditions’
[11:01:19.533]   - Field: ‘expr’
[11:01:19.533]   - Field: ‘uuid’
[11:01:19.533]   - Field: ‘seed’
[11:01:19.533]   - Field: ‘version’
[11:01:19.533]   - Field: ‘result’
[11:01:19.533]   - Field: ‘asynchronous’
[11:01:19.533]   - Field: ‘calls’
[11:01:19.533]   - Field: ‘globals’
[11:01:19.533]   - Field: ‘stdout’
[11:01:19.533]   - Field: ‘earlySignal’
[11:01:19.534]   - Field: ‘lazy’
[11:01:19.534]   - Field: ‘state’
[11:01:19.534] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.534] - Launch lazy future ...
[11:01:19.534] Packages needed by the future expression (n = 0): <none>
[11:01:19.534] Packages needed by future strategies (n = 0): <none>
[11:01:19.534] {
[11:01:19.534]     {
[11:01:19.534]         {
[11:01:19.534]             ...future.startTime <- base::Sys.time()
[11:01:19.534]             {
[11:01:19.534]                 {
[11:01:19.534]                   {
[11:01:19.534]                     base::local({
[11:01:19.534]                       has_future <- base::requireNamespace("future", 
[11:01:19.534]                         quietly = TRUE)
[11:01:19.534]                       if (has_future) {
[11:01:19.534]                         ns <- base::getNamespace("future")
[11:01:19.534]                         version <- ns[[".package"]][["version"]]
[11:01:19.534]                         if (is.null(version)) 
[11:01:19.534]                           version <- utils::packageVersion("future")
[11:01:19.534]                       }
[11:01:19.534]                       else {
[11:01:19.534]                         version <- NULL
[11:01:19.534]                       }
[11:01:19.534]                       if (!has_future || version < "1.8.0") {
[11:01:19.534]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.534]                           "", base::R.version$version.string), 
[11:01:19.534]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.534]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.534]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.534]                             "release", "version")], collapse = " "), 
[11:01:19.534]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.534]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.534]                           info)
[11:01:19.534]                         info <- base::paste(info, collapse = "; ")
[11:01:19.534]                         if (!has_future) {
[11:01:19.534]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.534]                             info)
[11:01:19.534]                         }
[11:01:19.534]                         else {
[11:01:19.534]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.534]                             info, version)
[11:01:19.534]                         }
[11:01:19.534]                         base::stop(msg)
[11:01:19.534]                       }
[11:01:19.534]                     })
[11:01:19.534]                   }
[11:01:19.534]                   ...future.strategy.old <- future::plan("list")
[11:01:19.534]                   options(future.plan = NULL)
[11:01:19.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.534]                 }
[11:01:19.534]                 ...future.workdir <- getwd()
[11:01:19.534]             }
[11:01:19.534]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.534]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.534]         }
[11:01:19.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.534]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.534]             base::names(...future.oldOptions))
[11:01:19.534]     }
[11:01:19.534]     if (FALSE) {
[11:01:19.534]     }
[11:01:19.534]     else {
[11:01:19.534]         if (TRUE) {
[11:01:19.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.534]                 open = "w")
[11:01:19.534]         }
[11:01:19.534]         else {
[11:01:19.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.534]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.534]         }
[11:01:19.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.534]             base::sink(type = "output", split = FALSE)
[11:01:19.534]             base::close(...future.stdout)
[11:01:19.534]         }, add = TRUE)
[11:01:19.534]     }
[11:01:19.534]     ...future.frame <- base::sys.nframe()
[11:01:19.534]     ...future.conditions <- base::list()
[11:01:19.534]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.534]     if (FALSE) {
[11:01:19.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.534]     }
[11:01:19.534]     ...future.result <- base::tryCatch({
[11:01:19.534]         base::withCallingHandlers({
[11:01:19.534]             ...future.value <- base::withVisible(base::local({
[11:01:19.534]                 1
[11:01:19.534]             }))
[11:01:19.534]             future::FutureResult(value = ...future.value$value, 
[11:01:19.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.534]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.534]                     ...future.globalenv.names))
[11:01:19.534]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.534]         }, condition = base::local({
[11:01:19.534]             c <- base::c
[11:01:19.534]             inherits <- base::inherits
[11:01:19.534]             invokeRestart <- base::invokeRestart
[11:01:19.534]             length <- base::length
[11:01:19.534]             list <- base::list
[11:01:19.534]             seq.int <- base::seq.int
[11:01:19.534]             signalCondition <- base::signalCondition
[11:01:19.534]             sys.calls <- base::sys.calls
[11:01:19.534]             `[[` <- base::`[[`
[11:01:19.534]             `+` <- base::`+`
[11:01:19.534]             `<<-` <- base::`<<-`
[11:01:19.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.534]                   3L)]
[11:01:19.534]             }
[11:01:19.534]             function(cond) {
[11:01:19.534]                 is_error <- inherits(cond, "error")
[11:01:19.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.534]                   NULL)
[11:01:19.534]                 if (is_error) {
[11:01:19.534]                   sessionInformation <- function() {
[11:01:19.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.534]                       search = base::search(), system = base::Sys.info())
[11:01:19.534]                   }
[11:01:19.534]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.534]                     cond$call), session = sessionInformation(), 
[11:01:19.534]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.534]                   signalCondition(cond)
[11:01:19.534]                 }
[11:01:19.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.534]                 "immediateCondition"))) {
[11:01:19.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.534]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.534]                   if (TRUE && !signal) {
[11:01:19.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.534]                     {
[11:01:19.534]                       inherits <- base::inherits
[11:01:19.534]                       invokeRestart <- base::invokeRestart
[11:01:19.534]                       is.null <- base::is.null
[11:01:19.534]                       muffled <- FALSE
[11:01:19.534]                       if (inherits(cond, "message")) {
[11:01:19.534]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.534]                         if (muffled) 
[11:01:19.534]                           invokeRestart("muffleMessage")
[11:01:19.534]                       }
[11:01:19.534]                       else if (inherits(cond, "warning")) {
[11:01:19.534]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.534]                         if (muffled) 
[11:01:19.534]                           invokeRestart("muffleWarning")
[11:01:19.534]                       }
[11:01:19.534]                       else if (inherits(cond, "condition")) {
[11:01:19.534]                         if (!is.null(pattern)) {
[11:01:19.534]                           computeRestarts <- base::computeRestarts
[11:01:19.534]                           grepl <- base::grepl
[11:01:19.534]                           restarts <- computeRestarts(cond)
[11:01:19.534]                           for (restart in restarts) {
[11:01:19.534]                             name <- restart$name
[11:01:19.534]                             if (is.null(name)) 
[11:01:19.534]                               next
[11:01:19.534]                             if (!grepl(pattern, name)) 
[11:01:19.534]                               next
[11:01:19.534]                             invokeRestart(restart)
[11:01:19.534]                             muffled <- TRUE
[11:01:19.534]                             break
[11:01:19.534]                           }
[11:01:19.534]                         }
[11:01:19.534]                       }
[11:01:19.534]                       invisible(muffled)
[11:01:19.534]                     }
[11:01:19.534]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.534]                   }
[11:01:19.534]                 }
[11:01:19.534]                 else {
[11:01:19.534]                   if (TRUE) {
[11:01:19.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.534]                     {
[11:01:19.534]                       inherits <- base::inherits
[11:01:19.534]                       invokeRestart <- base::invokeRestart
[11:01:19.534]                       is.null <- base::is.null
[11:01:19.534]                       muffled <- FALSE
[11:01:19.534]                       if (inherits(cond, "message")) {
[11:01:19.534]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.534]                         if (muffled) 
[11:01:19.534]                           invokeRestart("muffleMessage")
[11:01:19.534]                       }
[11:01:19.534]                       else if (inherits(cond, "warning")) {
[11:01:19.534]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.534]                         if (muffled) 
[11:01:19.534]                           invokeRestart("muffleWarning")
[11:01:19.534]                       }
[11:01:19.534]                       else if (inherits(cond, "condition")) {
[11:01:19.534]                         if (!is.null(pattern)) {
[11:01:19.534]                           computeRestarts <- base::computeRestarts
[11:01:19.534]                           grepl <- base::grepl
[11:01:19.534]                           restarts <- computeRestarts(cond)
[11:01:19.534]                           for (restart in restarts) {
[11:01:19.534]                             name <- restart$name
[11:01:19.534]                             if (is.null(name)) 
[11:01:19.534]                               next
[11:01:19.534]                             if (!grepl(pattern, name)) 
[11:01:19.534]                               next
[11:01:19.534]                             invokeRestart(restart)
[11:01:19.534]                             muffled <- TRUE
[11:01:19.534]                             break
[11:01:19.534]                           }
[11:01:19.534]                         }
[11:01:19.534]                       }
[11:01:19.534]                       invisible(muffled)
[11:01:19.534]                     }
[11:01:19.534]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.534]                   }
[11:01:19.534]                 }
[11:01:19.534]             }
[11:01:19.534]         }))
[11:01:19.534]     }, error = function(ex) {
[11:01:19.534]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.534]                 ...future.rng), started = ...future.startTime, 
[11:01:19.534]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.534]             version = "1.8"), class = "FutureResult")
[11:01:19.534]     }, finally = {
[11:01:19.534]         if (!identical(...future.workdir, getwd())) 
[11:01:19.534]             setwd(...future.workdir)
[11:01:19.534]         {
[11:01:19.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.534]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.534]             }
[11:01:19.534]             base::options(...future.oldOptions)
[11:01:19.534]             if (.Platform$OS.type == "windows") {
[11:01:19.534]                 old_names <- names(...future.oldEnvVars)
[11:01:19.534]                 envs <- base::Sys.getenv()
[11:01:19.534]                 names <- names(envs)
[11:01:19.534]                 common <- intersect(names, old_names)
[11:01:19.534]                 added <- setdiff(names, old_names)
[11:01:19.534]                 removed <- setdiff(old_names, names)
[11:01:19.534]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.534]                   envs[common]]
[11:01:19.534]                 NAMES <- toupper(changed)
[11:01:19.534]                 args <- list()
[11:01:19.534]                 for (kk in seq_along(NAMES)) {
[11:01:19.534]                   name <- changed[[kk]]
[11:01:19.534]                   NAME <- NAMES[[kk]]
[11:01:19.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.534]                     next
[11:01:19.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.534]                 }
[11:01:19.534]                 NAMES <- toupper(added)
[11:01:19.534]                 for (kk in seq_along(NAMES)) {
[11:01:19.534]                   name <- added[[kk]]
[11:01:19.534]                   NAME <- NAMES[[kk]]
[11:01:19.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.534]                     next
[11:01:19.534]                   args[[name]] <- ""
[11:01:19.534]                 }
[11:01:19.534]                 NAMES <- toupper(removed)
[11:01:19.534]                 for (kk in seq_along(NAMES)) {
[11:01:19.534]                   name <- removed[[kk]]
[11:01:19.534]                   NAME <- NAMES[[kk]]
[11:01:19.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.534]                     next
[11:01:19.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.534]                 }
[11:01:19.534]                 if (length(args) > 0) 
[11:01:19.534]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.534]             }
[11:01:19.534]             else {
[11:01:19.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.534]             }
[11:01:19.534]             {
[11:01:19.534]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.534]                   0L) {
[11:01:19.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.534]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.534]                   base::options(opts)
[11:01:19.534]                 }
[11:01:19.534]                 {
[11:01:19.534]                   {
[11:01:19.534]                     NULL
[11:01:19.534]                     RNGkind("Mersenne-Twister")
[11:01:19.534]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.534]                       inherits = FALSE)
[11:01:19.534]                   }
[11:01:19.534]                   options(future.plan = NULL)
[11:01:19.534]                   if (is.na(NA_character_)) 
[11:01:19.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.534]                     .init = FALSE)
[11:01:19.534]                 }
[11:01:19.534]             }
[11:01:19.534]         }
[11:01:19.534]     })
[11:01:19.534]     if (TRUE) {
[11:01:19.534]         base::sink(type = "output", split = FALSE)
[11:01:19.534]         if (TRUE) {
[11:01:19.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.534]         }
[11:01:19.534]         else {
[11:01:19.534]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.534]         }
[11:01:19.534]         base::close(...future.stdout)
[11:01:19.534]         ...future.stdout <- NULL
[11:01:19.534]     }
[11:01:19.534]     ...future.result$conditions <- ...future.conditions
[11:01:19.534]     ...future.result$finished <- base::Sys.time()
[11:01:19.534]     ...future.result
[11:01:19.534] }
[11:01:19.536] plan(): Setting new future strategy stack:
[11:01:19.536] List of future strategies:
[11:01:19.536] 1. sequential:
[11:01:19.536]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.536]    - tweaked: FALSE
[11:01:19.536]    - call: NULL
[11:01:19.537] plan(): nbrOfWorkers() = 1
[11:01:19.537] plan(): Setting new future strategy stack:
[11:01:19.537] List of future strategies:
[11:01:19.537] 1. sequential:
[11:01:19.537]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.537]    - tweaked: FALSE
[11:01:19.537]    - call: future::plan("sequential")
[11:01:19.538] plan(): nbrOfWorkers() = 1
[11:01:19.538] SequentialFuture started (and completed)
[11:01:19.538] - Launch lazy future ... done
[11:01:19.538] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[11:01:19.538] run() for ‘Future’ ...
[11:01:19.539] - state: ‘created’
[11:01:19.539] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.539] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.539] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.539]   - Field: ‘label’
[11:01:19.539]   - Field: ‘local’
[11:01:19.539]   - Field: ‘owner’
[11:01:19.539]   - Field: ‘envir’
[11:01:19.539]   - Field: ‘packages’
[11:01:19.540]   - Field: ‘gc’
[11:01:19.540]   - Field: ‘conditions’
[11:01:19.540]   - Field: ‘expr’
[11:01:19.540]   - Field: ‘uuid’
[11:01:19.540]   - Field: ‘seed’
[11:01:19.540]   - Field: ‘version’
[11:01:19.540]   - Field: ‘result’
[11:01:19.540]   - Field: ‘asynchronous’
[11:01:19.540]   - Field: ‘calls’
[11:01:19.540]   - Field: ‘globals’
[11:01:19.540]   - Field: ‘stdout’
[11:01:19.540]   - Field: ‘earlySignal’
[11:01:19.540]   - Field: ‘lazy’
[11:01:19.541]   - Field: ‘state’
[11:01:19.541] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.541] - Launch lazy future ...
[11:01:19.541] Packages needed by the future expression (n = 0): <none>
[11:01:19.541] Packages needed by future strategies (n = 0): <none>
[11:01:19.541] {
[11:01:19.541]     {
[11:01:19.541]         {
[11:01:19.541]             ...future.startTime <- base::Sys.time()
[11:01:19.541]             {
[11:01:19.541]                 {
[11:01:19.541]                   {
[11:01:19.541]                     base::local({
[11:01:19.541]                       has_future <- base::requireNamespace("future", 
[11:01:19.541]                         quietly = TRUE)
[11:01:19.541]                       if (has_future) {
[11:01:19.541]                         ns <- base::getNamespace("future")
[11:01:19.541]                         version <- ns[[".package"]][["version"]]
[11:01:19.541]                         if (is.null(version)) 
[11:01:19.541]                           version <- utils::packageVersion("future")
[11:01:19.541]                       }
[11:01:19.541]                       else {
[11:01:19.541]                         version <- NULL
[11:01:19.541]                       }
[11:01:19.541]                       if (!has_future || version < "1.8.0") {
[11:01:19.541]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.541]                           "", base::R.version$version.string), 
[11:01:19.541]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.541]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.541]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.541]                             "release", "version")], collapse = " "), 
[11:01:19.541]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.541]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.541]                           info)
[11:01:19.541]                         info <- base::paste(info, collapse = "; ")
[11:01:19.541]                         if (!has_future) {
[11:01:19.541]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.541]                             info)
[11:01:19.541]                         }
[11:01:19.541]                         else {
[11:01:19.541]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.541]                             info, version)
[11:01:19.541]                         }
[11:01:19.541]                         base::stop(msg)
[11:01:19.541]                       }
[11:01:19.541]                     })
[11:01:19.541]                   }
[11:01:19.541]                   ...future.strategy.old <- future::plan("list")
[11:01:19.541]                   options(future.plan = NULL)
[11:01:19.541]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.541]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.541]                 }
[11:01:19.541]                 ...future.workdir <- getwd()
[11:01:19.541]             }
[11:01:19.541]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.541]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.541]         }
[11:01:19.541]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.541]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.541]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.541]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.541]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.541]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.541]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.541]             base::names(...future.oldOptions))
[11:01:19.541]     }
[11:01:19.541]     if (FALSE) {
[11:01:19.541]     }
[11:01:19.541]     else {
[11:01:19.541]         if (TRUE) {
[11:01:19.541]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.541]                 open = "w")
[11:01:19.541]         }
[11:01:19.541]         else {
[11:01:19.541]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.541]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.541]         }
[11:01:19.541]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.541]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.541]             base::sink(type = "output", split = FALSE)
[11:01:19.541]             base::close(...future.stdout)
[11:01:19.541]         }, add = TRUE)
[11:01:19.541]     }
[11:01:19.541]     ...future.frame <- base::sys.nframe()
[11:01:19.541]     ...future.conditions <- base::list()
[11:01:19.541]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.541]     if (FALSE) {
[11:01:19.541]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.541]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.541]     }
[11:01:19.541]     ...future.result <- base::tryCatch({
[11:01:19.541]         base::withCallingHandlers({
[11:01:19.541]             ...future.value <- base::withVisible(base::local({
[11:01:19.541]                 2
[11:01:19.541]             }))
[11:01:19.541]             future::FutureResult(value = ...future.value$value, 
[11:01:19.541]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.541]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.541]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.541]                     ...future.globalenv.names))
[11:01:19.541]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.541]         }, condition = base::local({
[11:01:19.541]             c <- base::c
[11:01:19.541]             inherits <- base::inherits
[11:01:19.541]             invokeRestart <- base::invokeRestart
[11:01:19.541]             length <- base::length
[11:01:19.541]             list <- base::list
[11:01:19.541]             seq.int <- base::seq.int
[11:01:19.541]             signalCondition <- base::signalCondition
[11:01:19.541]             sys.calls <- base::sys.calls
[11:01:19.541]             `[[` <- base::`[[`
[11:01:19.541]             `+` <- base::`+`
[11:01:19.541]             `<<-` <- base::`<<-`
[11:01:19.541]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.541]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.541]                   3L)]
[11:01:19.541]             }
[11:01:19.541]             function(cond) {
[11:01:19.541]                 is_error <- inherits(cond, "error")
[11:01:19.541]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.541]                   NULL)
[11:01:19.541]                 if (is_error) {
[11:01:19.541]                   sessionInformation <- function() {
[11:01:19.541]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.541]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.541]                       search = base::search(), system = base::Sys.info())
[11:01:19.541]                   }
[11:01:19.541]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.541]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.541]                     cond$call), session = sessionInformation(), 
[11:01:19.541]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.541]                   signalCondition(cond)
[11:01:19.541]                 }
[11:01:19.541]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.541]                 "immediateCondition"))) {
[11:01:19.541]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.541]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.541]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.541]                   if (TRUE && !signal) {
[11:01:19.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.541]                     {
[11:01:19.541]                       inherits <- base::inherits
[11:01:19.541]                       invokeRestart <- base::invokeRestart
[11:01:19.541]                       is.null <- base::is.null
[11:01:19.541]                       muffled <- FALSE
[11:01:19.541]                       if (inherits(cond, "message")) {
[11:01:19.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.541]                         if (muffled) 
[11:01:19.541]                           invokeRestart("muffleMessage")
[11:01:19.541]                       }
[11:01:19.541]                       else if (inherits(cond, "warning")) {
[11:01:19.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.541]                         if (muffled) 
[11:01:19.541]                           invokeRestart("muffleWarning")
[11:01:19.541]                       }
[11:01:19.541]                       else if (inherits(cond, "condition")) {
[11:01:19.541]                         if (!is.null(pattern)) {
[11:01:19.541]                           computeRestarts <- base::computeRestarts
[11:01:19.541]                           grepl <- base::grepl
[11:01:19.541]                           restarts <- computeRestarts(cond)
[11:01:19.541]                           for (restart in restarts) {
[11:01:19.541]                             name <- restart$name
[11:01:19.541]                             if (is.null(name)) 
[11:01:19.541]                               next
[11:01:19.541]                             if (!grepl(pattern, name)) 
[11:01:19.541]                               next
[11:01:19.541]                             invokeRestart(restart)
[11:01:19.541]                             muffled <- TRUE
[11:01:19.541]                             break
[11:01:19.541]                           }
[11:01:19.541]                         }
[11:01:19.541]                       }
[11:01:19.541]                       invisible(muffled)
[11:01:19.541]                     }
[11:01:19.541]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.541]                   }
[11:01:19.541]                 }
[11:01:19.541]                 else {
[11:01:19.541]                   if (TRUE) {
[11:01:19.541]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.541]                     {
[11:01:19.541]                       inherits <- base::inherits
[11:01:19.541]                       invokeRestart <- base::invokeRestart
[11:01:19.541]                       is.null <- base::is.null
[11:01:19.541]                       muffled <- FALSE
[11:01:19.541]                       if (inherits(cond, "message")) {
[11:01:19.541]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.541]                         if (muffled) 
[11:01:19.541]                           invokeRestart("muffleMessage")
[11:01:19.541]                       }
[11:01:19.541]                       else if (inherits(cond, "warning")) {
[11:01:19.541]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.541]                         if (muffled) 
[11:01:19.541]                           invokeRestart("muffleWarning")
[11:01:19.541]                       }
[11:01:19.541]                       else if (inherits(cond, "condition")) {
[11:01:19.541]                         if (!is.null(pattern)) {
[11:01:19.541]                           computeRestarts <- base::computeRestarts
[11:01:19.541]                           grepl <- base::grepl
[11:01:19.541]                           restarts <- computeRestarts(cond)
[11:01:19.541]                           for (restart in restarts) {
[11:01:19.541]                             name <- restart$name
[11:01:19.541]                             if (is.null(name)) 
[11:01:19.541]                               next
[11:01:19.541]                             if (!grepl(pattern, name)) 
[11:01:19.541]                               next
[11:01:19.541]                             invokeRestart(restart)
[11:01:19.541]                             muffled <- TRUE
[11:01:19.541]                             break
[11:01:19.541]                           }
[11:01:19.541]                         }
[11:01:19.541]                       }
[11:01:19.541]                       invisible(muffled)
[11:01:19.541]                     }
[11:01:19.541]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.541]                   }
[11:01:19.541]                 }
[11:01:19.541]             }
[11:01:19.541]         }))
[11:01:19.541]     }, error = function(ex) {
[11:01:19.541]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.541]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.541]                 ...future.rng), started = ...future.startTime, 
[11:01:19.541]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.541]             version = "1.8"), class = "FutureResult")
[11:01:19.541]     }, finally = {
[11:01:19.541]         if (!identical(...future.workdir, getwd())) 
[11:01:19.541]             setwd(...future.workdir)
[11:01:19.541]         {
[11:01:19.541]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.541]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.541]             }
[11:01:19.541]             base::options(...future.oldOptions)
[11:01:19.541]             if (.Platform$OS.type == "windows") {
[11:01:19.541]                 old_names <- names(...future.oldEnvVars)
[11:01:19.541]                 envs <- base::Sys.getenv()
[11:01:19.541]                 names <- names(envs)
[11:01:19.541]                 common <- intersect(names, old_names)
[11:01:19.541]                 added <- setdiff(names, old_names)
[11:01:19.541]                 removed <- setdiff(old_names, names)
[11:01:19.541]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.541]                   envs[common]]
[11:01:19.541]                 NAMES <- toupper(changed)
[11:01:19.541]                 args <- list()
[11:01:19.541]                 for (kk in seq_along(NAMES)) {
[11:01:19.541]                   name <- changed[[kk]]
[11:01:19.541]                   NAME <- NAMES[[kk]]
[11:01:19.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.541]                     next
[11:01:19.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.541]                 }
[11:01:19.541]                 NAMES <- toupper(added)
[11:01:19.541]                 for (kk in seq_along(NAMES)) {
[11:01:19.541]                   name <- added[[kk]]
[11:01:19.541]                   NAME <- NAMES[[kk]]
[11:01:19.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.541]                     next
[11:01:19.541]                   args[[name]] <- ""
[11:01:19.541]                 }
[11:01:19.541]                 NAMES <- toupper(removed)
[11:01:19.541]                 for (kk in seq_along(NAMES)) {
[11:01:19.541]                   name <- removed[[kk]]
[11:01:19.541]                   NAME <- NAMES[[kk]]
[11:01:19.541]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.541]                     next
[11:01:19.541]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.541]                 }
[11:01:19.541]                 if (length(args) > 0) 
[11:01:19.541]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.541]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.541]             }
[11:01:19.541]             else {
[11:01:19.541]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.541]             }
[11:01:19.541]             {
[11:01:19.541]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.541]                   0L) {
[11:01:19.541]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.541]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.541]                   base::options(opts)
[11:01:19.541]                 }
[11:01:19.541]                 {
[11:01:19.541]                   {
[11:01:19.541]                     NULL
[11:01:19.541]                     RNGkind("Mersenne-Twister")
[11:01:19.541]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.541]                       inherits = FALSE)
[11:01:19.541]                   }
[11:01:19.541]                   options(future.plan = NULL)
[11:01:19.541]                   if (is.na(NA_character_)) 
[11:01:19.541]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.541]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.541]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.541]                     .init = FALSE)
[11:01:19.541]                 }
[11:01:19.541]             }
[11:01:19.541]         }
[11:01:19.541]     })
[11:01:19.541]     if (TRUE) {
[11:01:19.541]         base::sink(type = "output", split = FALSE)
[11:01:19.541]         if (TRUE) {
[11:01:19.541]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.541]         }
[11:01:19.541]         else {
[11:01:19.541]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.541]         }
[11:01:19.541]         base::close(...future.stdout)
[11:01:19.541]         ...future.stdout <- NULL
[11:01:19.541]     }
[11:01:19.541]     ...future.result$conditions <- ...future.conditions
[11:01:19.541]     ...future.result$finished <- base::Sys.time()
[11:01:19.541]     ...future.result
[11:01:19.541] }
[11:01:19.543] plan(): Setting new future strategy stack:
[11:01:19.543] List of future strategies:
[11:01:19.543] 1. sequential:
[11:01:19.543]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.543]    - tweaked: FALSE
[11:01:19.543]    - call: NULL
[11:01:19.544] plan(): nbrOfWorkers() = 1
[11:01:19.544] plan(): Setting new future strategy stack:
[11:01:19.544] List of future strategies:
[11:01:19.544] 1. sequential:
[11:01:19.544]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.544]    - tweaked: FALSE
[11:01:19.544]    - call: future::plan("sequential")
[11:01:19.545] plan(): nbrOfWorkers() = 1
[11:01:19.545] SequentialFuture started (and completed)
[11:01:19.545] - Launch lazy future ... done
[11:01:19.545] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[11:01:19.550] getGlobalsAndPackages() ...
[11:01:19.551] Searching for globals...
[11:01:19.552] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.552] Searching for globals ... DONE
[11:01:19.552] Resolving globals: FALSE
[11:01:19.553] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.553] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.553] - globals: [2] ‘rr’, ‘cc’
[11:01:19.554] 
[11:01:19.554] getGlobalsAndPackages() ... DONE
[11:01:19.554] getGlobalsAndPackages() ...
[11:01:19.554] Searching for globals...
[11:01:19.556] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.556] Searching for globals ... DONE
[11:01:19.556] Resolving globals: FALSE
[11:01:19.556] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.557] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.557] - globals: [2] ‘rr’, ‘cc’
[11:01:19.557] 
[11:01:19.557] getGlobalsAndPackages() ... DONE
[11:01:19.558] getGlobalsAndPackages() ...
[11:01:19.558] Searching for globals...
[11:01:19.558] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.558] Searching for globals ... DONE
[11:01:19.558] Resolving globals: FALSE
[11:01:19.559] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.559] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.559] - globals: [2] ‘rr’, ‘cc’
[11:01:19.559] 
[11:01:19.559] getGlobalsAndPackages() ... DONE
[11:01:19.560] getGlobalsAndPackages() ...
[11:01:19.560] Searching for globals...
[11:01:19.560] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.561] Searching for globals ... DONE
[11:01:19.561] Resolving globals: FALSE
[11:01:19.561] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.561] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.561] - globals: [2] ‘rr’, ‘cc’
[11:01:19.562] 
[11:01:19.562] getGlobalsAndPackages() ... DONE
[11:01:19.562] getGlobalsAndPackages() ...
[11:01:19.562] Searching for globals...
[11:01:19.563] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.563] Searching for globals ... DONE
[11:01:19.563] Resolving globals: FALSE
[11:01:19.563] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.564] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.564] - globals: [2] ‘rr’, ‘cc’
[11:01:19.564] 
[11:01:19.564] getGlobalsAndPackages() ... DONE
[11:01:19.564] getGlobalsAndPackages() ...
[11:01:19.564] Searching for globals...
[11:01:19.565] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[11:01:19.565] Searching for globals ... DONE
[11:01:19.565] Resolving globals: FALSE
[11:01:19.565] The total size of the 2 globals is 70 bytes (70 bytes)
[11:01:19.566] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[11:01:19.566] - globals: [2] ‘rr’, ‘cc’
[11:01:19.566] 
[11:01:19.566] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[11:01:19.566] run() for ‘Future’ ...
[11:01:19.566] - state: ‘created’
[11:01:19.567] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.567] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.567] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.567]   - Field: ‘label’
[11:01:19.567]   - Field: ‘local’
[11:01:19.567]   - Field: ‘owner’
[11:01:19.567]   - Field: ‘envir’
[11:01:19.567]   - Field: ‘packages’
[11:01:19.567]   - Field: ‘gc’
[11:01:19.568]   - Field: ‘conditions’
[11:01:19.568]   - Field: ‘expr’
[11:01:19.568]   - Field: ‘uuid’
[11:01:19.568]   - Field: ‘seed’
[11:01:19.568]   - Field: ‘version’
[11:01:19.568]   - Field: ‘result’
[11:01:19.568]   - Field: ‘asynchronous’
[11:01:19.568]   - Field: ‘calls’
[11:01:19.568]   - Field: ‘globals’
[11:01:19.568]   - Field: ‘stdout’
[11:01:19.568]   - Field: ‘earlySignal’
[11:01:19.568]   - Field: ‘lazy’
[11:01:19.569]   - Field: ‘state’
[11:01:19.569] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.569] - Launch lazy future ...
[11:01:19.569] Packages needed by the future expression (n = 0): <none>
[11:01:19.569] Packages needed by future strategies (n = 0): <none>
[11:01:19.569] {
[11:01:19.569]     {
[11:01:19.569]         {
[11:01:19.569]             ...future.startTime <- base::Sys.time()
[11:01:19.569]             {
[11:01:19.569]                 {
[11:01:19.569]                   {
[11:01:19.569]                     base::local({
[11:01:19.569]                       has_future <- base::requireNamespace("future", 
[11:01:19.569]                         quietly = TRUE)
[11:01:19.569]                       if (has_future) {
[11:01:19.569]                         ns <- base::getNamespace("future")
[11:01:19.569]                         version <- ns[[".package"]][["version"]]
[11:01:19.569]                         if (is.null(version)) 
[11:01:19.569]                           version <- utils::packageVersion("future")
[11:01:19.569]                       }
[11:01:19.569]                       else {
[11:01:19.569]                         version <- NULL
[11:01:19.569]                       }
[11:01:19.569]                       if (!has_future || version < "1.8.0") {
[11:01:19.569]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.569]                           "", base::R.version$version.string), 
[11:01:19.569]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.569]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.569]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.569]                             "release", "version")], collapse = " "), 
[11:01:19.569]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.569]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.569]                           info)
[11:01:19.569]                         info <- base::paste(info, collapse = "; ")
[11:01:19.569]                         if (!has_future) {
[11:01:19.569]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.569]                             info)
[11:01:19.569]                         }
[11:01:19.569]                         else {
[11:01:19.569]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.569]                             info, version)
[11:01:19.569]                         }
[11:01:19.569]                         base::stop(msg)
[11:01:19.569]                       }
[11:01:19.569]                     })
[11:01:19.569]                   }
[11:01:19.569]                   ...future.strategy.old <- future::plan("list")
[11:01:19.569]                   options(future.plan = NULL)
[11:01:19.569]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.569]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.569]                 }
[11:01:19.569]                 ...future.workdir <- getwd()
[11:01:19.569]             }
[11:01:19.569]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.569]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.569]         }
[11:01:19.569]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.569]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.569]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.569]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.569]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.569]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.569]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.569]             base::names(...future.oldOptions))
[11:01:19.569]     }
[11:01:19.569]     if (FALSE) {
[11:01:19.569]     }
[11:01:19.569]     else {
[11:01:19.569]         if (TRUE) {
[11:01:19.569]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.569]                 open = "w")
[11:01:19.569]         }
[11:01:19.569]         else {
[11:01:19.569]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.569]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.569]         }
[11:01:19.569]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.569]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.569]             base::sink(type = "output", split = FALSE)
[11:01:19.569]             base::close(...future.stdout)
[11:01:19.569]         }, add = TRUE)
[11:01:19.569]     }
[11:01:19.569]     ...future.frame <- base::sys.nframe()
[11:01:19.569]     ...future.conditions <- base::list()
[11:01:19.569]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.569]     if (FALSE) {
[11:01:19.569]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.569]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.569]     }
[11:01:19.569]     ...future.result <- base::tryCatch({
[11:01:19.569]         base::withCallingHandlers({
[11:01:19.569]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.569]                 rr, cc)))
[11:01:19.569]             future::FutureResult(value = ...future.value$value, 
[11:01:19.569]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.569]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.569]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.569]                     ...future.globalenv.names))
[11:01:19.569]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.569]         }, condition = base::local({
[11:01:19.569]             c <- base::c
[11:01:19.569]             inherits <- base::inherits
[11:01:19.569]             invokeRestart <- base::invokeRestart
[11:01:19.569]             length <- base::length
[11:01:19.569]             list <- base::list
[11:01:19.569]             seq.int <- base::seq.int
[11:01:19.569]             signalCondition <- base::signalCondition
[11:01:19.569]             sys.calls <- base::sys.calls
[11:01:19.569]             `[[` <- base::`[[`
[11:01:19.569]             `+` <- base::`+`
[11:01:19.569]             `<<-` <- base::`<<-`
[11:01:19.569]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.569]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.569]                   3L)]
[11:01:19.569]             }
[11:01:19.569]             function(cond) {
[11:01:19.569]                 is_error <- inherits(cond, "error")
[11:01:19.569]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.569]                   NULL)
[11:01:19.569]                 if (is_error) {
[11:01:19.569]                   sessionInformation <- function() {
[11:01:19.569]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.569]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.569]                       search = base::search(), system = base::Sys.info())
[11:01:19.569]                   }
[11:01:19.569]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.569]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.569]                     cond$call), session = sessionInformation(), 
[11:01:19.569]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.569]                   signalCondition(cond)
[11:01:19.569]                 }
[11:01:19.569]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.569]                 "immediateCondition"))) {
[11:01:19.569]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.569]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.569]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.569]                   if (TRUE && !signal) {
[11:01:19.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.569]                     {
[11:01:19.569]                       inherits <- base::inherits
[11:01:19.569]                       invokeRestart <- base::invokeRestart
[11:01:19.569]                       is.null <- base::is.null
[11:01:19.569]                       muffled <- FALSE
[11:01:19.569]                       if (inherits(cond, "message")) {
[11:01:19.569]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.569]                         if (muffled) 
[11:01:19.569]                           invokeRestart("muffleMessage")
[11:01:19.569]                       }
[11:01:19.569]                       else if (inherits(cond, "warning")) {
[11:01:19.569]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.569]                         if (muffled) 
[11:01:19.569]                           invokeRestart("muffleWarning")
[11:01:19.569]                       }
[11:01:19.569]                       else if (inherits(cond, "condition")) {
[11:01:19.569]                         if (!is.null(pattern)) {
[11:01:19.569]                           computeRestarts <- base::computeRestarts
[11:01:19.569]                           grepl <- base::grepl
[11:01:19.569]                           restarts <- computeRestarts(cond)
[11:01:19.569]                           for (restart in restarts) {
[11:01:19.569]                             name <- restart$name
[11:01:19.569]                             if (is.null(name)) 
[11:01:19.569]                               next
[11:01:19.569]                             if (!grepl(pattern, name)) 
[11:01:19.569]                               next
[11:01:19.569]                             invokeRestart(restart)
[11:01:19.569]                             muffled <- TRUE
[11:01:19.569]                             break
[11:01:19.569]                           }
[11:01:19.569]                         }
[11:01:19.569]                       }
[11:01:19.569]                       invisible(muffled)
[11:01:19.569]                     }
[11:01:19.569]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.569]                   }
[11:01:19.569]                 }
[11:01:19.569]                 else {
[11:01:19.569]                   if (TRUE) {
[11:01:19.569]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.569]                     {
[11:01:19.569]                       inherits <- base::inherits
[11:01:19.569]                       invokeRestart <- base::invokeRestart
[11:01:19.569]                       is.null <- base::is.null
[11:01:19.569]                       muffled <- FALSE
[11:01:19.569]                       if (inherits(cond, "message")) {
[11:01:19.569]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.569]                         if (muffled) 
[11:01:19.569]                           invokeRestart("muffleMessage")
[11:01:19.569]                       }
[11:01:19.569]                       else if (inherits(cond, "warning")) {
[11:01:19.569]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.569]                         if (muffled) 
[11:01:19.569]                           invokeRestart("muffleWarning")
[11:01:19.569]                       }
[11:01:19.569]                       else if (inherits(cond, "condition")) {
[11:01:19.569]                         if (!is.null(pattern)) {
[11:01:19.569]                           computeRestarts <- base::computeRestarts
[11:01:19.569]                           grepl <- base::grepl
[11:01:19.569]                           restarts <- computeRestarts(cond)
[11:01:19.569]                           for (restart in restarts) {
[11:01:19.569]                             name <- restart$name
[11:01:19.569]                             if (is.null(name)) 
[11:01:19.569]                               next
[11:01:19.569]                             if (!grepl(pattern, name)) 
[11:01:19.569]                               next
[11:01:19.569]                             invokeRestart(restart)
[11:01:19.569]                             muffled <- TRUE
[11:01:19.569]                             break
[11:01:19.569]                           }
[11:01:19.569]                         }
[11:01:19.569]                       }
[11:01:19.569]                       invisible(muffled)
[11:01:19.569]                     }
[11:01:19.569]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.569]                   }
[11:01:19.569]                 }
[11:01:19.569]             }
[11:01:19.569]         }))
[11:01:19.569]     }, error = function(ex) {
[11:01:19.569]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.569]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.569]                 ...future.rng), started = ...future.startTime, 
[11:01:19.569]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.569]             version = "1.8"), class = "FutureResult")
[11:01:19.569]     }, finally = {
[11:01:19.569]         if (!identical(...future.workdir, getwd())) 
[11:01:19.569]             setwd(...future.workdir)
[11:01:19.569]         {
[11:01:19.569]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.569]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.569]             }
[11:01:19.569]             base::options(...future.oldOptions)
[11:01:19.569]             if (.Platform$OS.type == "windows") {
[11:01:19.569]                 old_names <- names(...future.oldEnvVars)
[11:01:19.569]                 envs <- base::Sys.getenv()
[11:01:19.569]                 names <- names(envs)
[11:01:19.569]                 common <- intersect(names, old_names)
[11:01:19.569]                 added <- setdiff(names, old_names)
[11:01:19.569]                 removed <- setdiff(old_names, names)
[11:01:19.569]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.569]                   envs[common]]
[11:01:19.569]                 NAMES <- toupper(changed)
[11:01:19.569]                 args <- list()
[11:01:19.569]                 for (kk in seq_along(NAMES)) {
[11:01:19.569]                   name <- changed[[kk]]
[11:01:19.569]                   NAME <- NAMES[[kk]]
[11:01:19.569]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.569]                     next
[11:01:19.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.569]                 }
[11:01:19.569]                 NAMES <- toupper(added)
[11:01:19.569]                 for (kk in seq_along(NAMES)) {
[11:01:19.569]                   name <- added[[kk]]
[11:01:19.569]                   NAME <- NAMES[[kk]]
[11:01:19.569]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.569]                     next
[11:01:19.569]                   args[[name]] <- ""
[11:01:19.569]                 }
[11:01:19.569]                 NAMES <- toupper(removed)
[11:01:19.569]                 for (kk in seq_along(NAMES)) {
[11:01:19.569]                   name <- removed[[kk]]
[11:01:19.569]                   NAME <- NAMES[[kk]]
[11:01:19.569]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.569]                     next
[11:01:19.569]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.569]                 }
[11:01:19.569]                 if (length(args) > 0) 
[11:01:19.569]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.569]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.569]             }
[11:01:19.569]             else {
[11:01:19.569]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.569]             }
[11:01:19.569]             {
[11:01:19.569]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.569]                   0L) {
[11:01:19.569]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.569]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.569]                   base::options(opts)
[11:01:19.569]                 }
[11:01:19.569]                 {
[11:01:19.569]                   {
[11:01:19.569]                     NULL
[11:01:19.569]                     RNGkind("Mersenne-Twister")
[11:01:19.569]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.569]                       inherits = FALSE)
[11:01:19.569]                   }
[11:01:19.569]                   options(future.plan = NULL)
[11:01:19.569]                   if (is.na(NA_character_)) 
[11:01:19.569]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.569]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.569]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.569]                     .init = FALSE)
[11:01:19.569]                 }
[11:01:19.569]             }
[11:01:19.569]         }
[11:01:19.569]     })
[11:01:19.569]     if (TRUE) {
[11:01:19.569]         base::sink(type = "output", split = FALSE)
[11:01:19.569]         if (TRUE) {
[11:01:19.569]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.569]         }
[11:01:19.569]         else {
[11:01:19.569]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.569]         }
[11:01:19.569]         base::close(...future.stdout)
[11:01:19.569]         ...future.stdout <- NULL
[11:01:19.569]     }
[11:01:19.569]     ...future.result$conditions <- ...future.conditions
[11:01:19.569]     ...future.result$finished <- base::Sys.time()
[11:01:19.569]     ...future.result
[11:01:19.569] }
[11:01:19.571] assign_globals() ...
[11:01:19.571] List of 2
[11:01:19.571]  $ rr: int 1
[11:01:19.571]  $ cc: int 1
[11:01:19.571]  - attr(*, "where")=List of 2
[11:01:19.571]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.571]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.571]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.571]  - attr(*, "resolved")= logi FALSE
[11:01:19.571]  - attr(*, "total_size")= num 70
[11:01:19.571]  - attr(*, "already-done")= logi TRUE
[11:01:19.574] - copied ‘rr’ to environment
[11:01:19.574] - copied ‘cc’ to environment
[11:01:19.574] assign_globals() ... done
[11:01:19.574] plan(): Setting new future strategy stack:
[11:01:19.574] List of future strategies:
[11:01:19.574] 1. sequential:
[11:01:19.574]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.574]    - tweaked: FALSE
[11:01:19.574]    - call: NULL
[11:01:19.575] plan(): nbrOfWorkers() = 1
[11:01:19.576] plan(): Setting new future strategy stack:
[11:01:19.576] List of future strategies:
[11:01:19.576] 1. sequential:
[11:01:19.576]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.576]    - tweaked: FALSE
[11:01:19.576]    - call: future::plan("sequential")
[11:01:19.576] plan(): nbrOfWorkers() = 1
[11:01:19.576] SequentialFuture started (and completed)
[11:01:19.576] - Launch lazy future ... done
[11:01:19.576] run() for ‘SequentialFuture’ ... done
[11:01:19.577] run() for ‘Future’ ...
[11:01:19.577] - state: ‘created’
[11:01:19.577] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.577] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.577] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.577]   - Field: ‘label’
[11:01:19.577]   - Field: ‘local’
[11:01:19.577]   - Field: ‘owner’
[11:01:19.577]   - Field: ‘envir’
[11:01:19.578]   - Field: ‘packages’
[11:01:19.578]   - Field: ‘gc’
[11:01:19.578]   - Field: ‘conditions’
[11:01:19.578]   - Field: ‘expr’
[11:01:19.578]   - Field: ‘uuid’
[11:01:19.578]   - Field: ‘seed’
[11:01:19.578]   - Field: ‘version’
[11:01:19.578]   - Field: ‘result’
[11:01:19.578]   - Field: ‘asynchronous’
[11:01:19.578]   - Field: ‘calls’
[11:01:19.578]   - Field: ‘globals’
[11:01:19.578]   - Field: ‘stdout’
[11:01:19.579]   - Field: ‘earlySignal’
[11:01:19.579]   - Field: ‘lazy’
[11:01:19.579]   - Field: ‘state’
[11:01:19.579] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.579] - Launch lazy future ...
[11:01:19.579] Packages needed by the future expression (n = 0): <none>
[11:01:19.579] Packages needed by future strategies (n = 0): <none>
[11:01:19.580] {
[11:01:19.580]     {
[11:01:19.580]         {
[11:01:19.580]             ...future.startTime <- base::Sys.time()
[11:01:19.580]             {
[11:01:19.580]                 {
[11:01:19.580]                   {
[11:01:19.580]                     base::local({
[11:01:19.580]                       has_future <- base::requireNamespace("future", 
[11:01:19.580]                         quietly = TRUE)
[11:01:19.580]                       if (has_future) {
[11:01:19.580]                         ns <- base::getNamespace("future")
[11:01:19.580]                         version <- ns[[".package"]][["version"]]
[11:01:19.580]                         if (is.null(version)) 
[11:01:19.580]                           version <- utils::packageVersion("future")
[11:01:19.580]                       }
[11:01:19.580]                       else {
[11:01:19.580]                         version <- NULL
[11:01:19.580]                       }
[11:01:19.580]                       if (!has_future || version < "1.8.0") {
[11:01:19.580]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.580]                           "", base::R.version$version.string), 
[11:01:19.580]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.580]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.580]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.580]                             "release", "version")], collapse = " "), 
[11:01:19.580]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.580]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.580]                           info)
[11:01:19.580]                         info <- base::paste(info, collapse = "; ")
[11:01:19.580]                         if (!has_future) {
[11:01:19.580]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.580]                             info)
[11:01:19.580]                         }
[11:01:19.580]                         else {
[11:01:19.580]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.580]                             info, version)
[11:01:19.580]                         }
[11:01:19.580]                         base::stop(msg)
[11:01:19.580]                       }
[11:01:19.580]                     })
[11:01:19.580]                   }
[11:01:19.580]                   ...future.strategy.old <- future::plan("list")
[11:01:19.580]                   options(future.plan = NULL)
[11:01:19.580]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.580]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.580]                 }
[11:01:19.580]                 ...future.workdir <- getwd()
[11:01:19.580]             }
[11:01:19.580]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.580]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.580]         }
[11:01:19.580]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.580]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.580]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.580]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.580]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.580]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.580]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.580]             base::names(...future.oldOptions))
[11:01:19.580]     }
[11:01:19.580]     if (FALSE) {
[11:01:19.580]     }
[11:01:19.580]     else {
[11:01:19.580]         if (TRUE) {
[11:01:19.580]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.580]                 open = "w")
[11:01:19.580]         }
[11:01:19.580]         else {
[11:01:19.580]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.580]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.580]         }
[11:01:19.580]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.580]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.580]             base::sink(type = "output", split = FALSE)
[11:01:19.580]             base::close(...future.stdout)
[11:01:19.580]         }, add = TRUE)
[11:01:19.580]     }
[11:01:19.580]     ...future.frame <- base::sys.nframe()
[11:01:19.580]     ...future.conditions <- base::list()
[11:01:19.580]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.580]     if (FALSE) {
[11:01:19.580]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.580]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.580]     }
[11:01:19.580]     ...future.result <- base::tryCatch({
[11:01:19.580]         base::withCallingHandlers({
[11:01:19.580]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.580]                 rr, cc)))
[11:01:19.580]             future::FutureResult(value = ...future.value$value, 
[11:01:19.580]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.580]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.580]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.580]                     ...future.globalenv.names))
[11:01:19.580]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.580]         }, condition = base::local({
[11:01:19.580]             c <- base::c
[11:01:19.580]             inherits <- base::inherits
[11:01:19.580]             invokeRestart <- base::invokeRestart
[11:01:19.580]             length <- base::length
[11:01:19.580]             list <- base::list
[11:01:19.580]             seq.int <- base::seq.int
[11:01:19.580]             signalCondition <- base::signalCondition
[11:01:19.580]             sys.calls <- base::sys.calls
[11:01:19.580]             `[[` <- base::`[[`
[11:01:19.580]             `+` <- base::`+`
[11:01:19.580]             `<<-` <- base::`<<-`
[11:01:19.580]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.580]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.580]                   3L)]
[11:01:19.580]             }
[11:01:19.580]             function(cond) {
[11:01:19.580]                 is_error <- inherits(cond, "error")
[11:01:19.580]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.580]                   NULL)
[11:01:19.580]                 if (is_error) {
[11:01:19.580]                   sessionInformation <- function() {
[11:01:19.580]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.580]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.580]                       search = base::search(), system = base::Sys.info())
[11:01:19.580]                   }
[11:01:19.580]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.580]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.580]                     cond$call), session = sessionInformation(), 
[11:01:19.580]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.580]                   signalCondition(cond)
[11:01:19.580]                 }
[11:01:19.580]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.580]                 "immediateCondition"))) {
[11:01:19.580]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.580]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.580]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.580]                   if (TRUE && !signal) {
[11:01:19.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.580]                     {
[11:01:19.580]                       inherits <- base::inherits
[11:01:19.580]                       invokeRestart <- base::invokeRestart
[11:01:19.580]                       is.null <- base::is.null
[11:01:19.580]                       muffled <- FALSE
[11:01:19.580]                       if (inherits(cond, "message")) {
[11:01:19.580]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.580]                         if (muffled) 
[11:01:19.580]                           invokeRestart("muffleMessage")
[11:01:19.580]                       }
[11:01:19.580]                       else if (inherits(cond, "warning")) {
[11:01:19.580]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.580]                         if (muffled) 
[11:01:19.580]                           invokeRestart("muffleWarning")
[11:01:19.580]                       }
[11:01:19.580]                       else if (inherits(cond, "condition")) {
[11:01:19.580]                         if (!is.null(pattern)) {
[11:01:19.580]                           computeRestarts <- base::computeRestarts
[11:01:19.580]                           grepl <- base::grepl
[11:01:19.580]                           restarts <- computeRestarts(cond)
[11:01:19.580]                           for (restart in restarts) {
[11:01:19.580]                             name <- restart$name
[11:01:19.580]                             if (is.null(name)) 
[11:01:19.580]                               next
[11:01:19.580]                             if (!grepl(pattern, name)) 
[11:01:19.580]                               next
[11:01:19.580]                             invokeRestart(restart)
[11:01:19.580]                             muffled <- TRUE
[11:01:19.580]                             break
[11:01:19.580]                           }
[11:01:19.580]                         }
[11:01:19.580]                       }
[11:01:19.580]                       invisible(muffled)
[11:01:19.580]                     }
[11:01:19.580]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.580]                   }
[11:01:19.580]                 }
[11:01:19.580]                 else {
[11:01:19.580]                   if (TRUE) {
[11:01:19.580]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.580]                     {
[11:01:19.580]                       inherits <- base::inherits
[11:01:19.580]                       invokeRestart <- base::invokeRestart
[11:01:19.580]                       is.null <- base::is.null
[11:01:19.580]                       muffled <- FALSE
[11:01:19.580]                       if (inherits(cond, "message")) {
[11:01:19.580]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.580]                         if (muffled) 
[11:01:19.580]                           invokeRestart("muffleMessage")
[11:01:19.580]                       }
[11:01:19.580]                       else if (inherits(cond, "warning")) {
[11:01:19.580]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.580]                         if (muffled) 
[11:01:19.580]                           invokeRestart("muffleWarning")
[11:01:19.580]                       }
[11:01:19.580]                       else if (inherits(cond, "condition")) {
[11:01:19.580]                         if (!is.null(pattern)) {
[11:01:19.580]                           computeRestarts <- base::computeRestarts
[11:01:19.580]                           grepl <- base::grepl
[11:01:19.580]                           restarts <- computeRestarts(cond)
[11:01:19.580]                           for (restart in restarts) {
[11:01:19.580]                             name <- restart$name
[11:01:19.580]                             if (is.null(name)) 
[11:01:19.580]                               next
[11:01:19.580]                             if (!grepl(pattern, name)) 
[11:01:19.580]                               next
[11:01:19.580]                             invokeRestart(restart)
[11:01:19.580]                             muffled <- TRUE
[11:01:19.580]                             break
[11:01:19.580]                           }
[11:01:19.580]                         }
[11:01:19.580]                       }
[11:01:19.580]                       invisible(muffled)
[11:01:19.580]                     }
[11:01:19.580]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.580]                   }
[11:01:19.580]                 }
[11:01:19.580]             }
[11:01:19.580]         }))
[11:01:19.580]     }, error = function(ex) {
[11:01:19.580]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.580]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.580]                 ...future.rng), started = ...future.startTime, 
[11:01:19.580]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.580]             version = "1.8"), class = "FutureResult")
[11:01:19.580]     }, finally = {
[11:01:19.580]         if (!identical(...future.workdir, getwd())) 
[11:01:19.580]             setwd(...future.workdir)
[11:01:19.580]         {
[11:01:19.580]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.580]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.580]             }
[11:01:19.580]             base::options(...future.oldOptions)
[11:01:19.580]             if (.Platform$OS.type == "windows") {
[11:01:19.580]                 old_names <- names(...future.oldEnvVars)
[11:01:19.580]                 envs <- base::Sys.getenv()
[11:01:19.580]                 names <- names(envs)
[11:01:19.580]                 common <- intersect(names, old_names)
[11:01:19.580]                 added <- setdiff(names, old_names)
[11:01:19.580]                 removed <- setdiff(old_names, names)
[11:01:19.580]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.580]                   envs[common]]
[11:01:19.580]                 NAMES <- toupper(changed)
[11:01:19.580]                 args <- list()
[11:01:19.580]                 for (kk in seq_along(NAMES)) {
[11:01:19.580]                   name <- changed[[kk]]
[11:01:19.580]                   NAME <- NAMES[[kk]]
[11:01:19.580]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.580]                     next
[11:01:19.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.580]                 }
[11:01:19.580]                 NAMES <- toupper(added)
[11:01:19.580]                 for (kk in seq_along(NAMES)) {
[11:01:19.580]                   name <- added[[kk]]
[11:01:19.580]                   NAME <- NAMES[[kk]]
[11:01:19.580]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.580]                     next
[11:01:19.580]                   args[[name]] <- ""
[11:01:19.580]                 }
[11:01:19.580]                 NAMES <- toupper(removed)
[11:01:19.580]                 for (kk in seq_along(NAMES)) {
[11:01:19.580]                   name <- removed[[kk]]
[11:01:19.580]                   NAME <- NAMES[[kk]]
[11:01:19.580]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.580]                     next
[11:01:19.580]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.580]                 }
[11:01:19.580]                 if (length(args) > 0) 
[11:01:19.580]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.580]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.580]             }
[11:01:19.580]             else {
[11:01:19.580]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.580]             }
[11:01:19.580]             {
[11:01:19.580]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.580]                   0L) {
[11:01:19.580]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.580]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.580]                   base::options(opts)
[11:01:19.580]                 }
[11:01:19.580]                 {
[11:01:19.580]                   {
[11:01:19.580]                     NULL
[11:01:19.580]                     RNGkind("Mersenne-Twister")
[11:01:19.580]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.580]                       inherits = FALSE)
[11:01:19.580]                   }
[11:01:19.580]                   options(future.plan = NULL)
[11:01:19.580]                   if (is.na(NA_character_)) 
[11:01:19.580]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.580]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.580]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.580]                     .init = FALSE)
[11:01:19.580]                 }
[11:01:19.580]             }
[11:01:19.580]         }
[11:01:19.580]     })
[11:01:19.580]     if (TRUE) {
[11:01:19.580]         base::sink(type = "output", split = FALSE)
[11:01:19.580]         if (TRUE) {
[11:01:19.580]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.580]         }
[11:01:19.580]         else {
[11:01:19.580]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.580]         }
[11:01:19.580]         base::close(...future.stdout)
[11:01:19.580]         ...future.stdout <- NULL
[11:01:19.580]     }
[11:01:19.580]     ...future.result$conditions <- ...future.conditions
[11:01:19.580]     ...future.result$finished <- base::Sys.time()
[11:01:19.580]     ...future.result
[11:01:19.580] }
[11:01:19.581] assign_globals() ...
[11:01:19.581] List of 2
[11:01:19.581]  $ rr: int 2
[11:01:19.581]  $ cc: int 1
[11:01:19.581]  - attr(*, "where")=List of 2
[11:01:19.581]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.581]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.581]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.581]  - attr(*, "resolved")= logi FALSE
[11:01:19.581]  - attr(*, "total_size")= num 70
[11:01:19.581]  - attr(*, "already-done")= logi TRUE
[11:01:19.585] - copied ‘rr’ to environment
[11:01:19.585] - copied ‘cc’ to environment
[11:01:19.585] assign_globals() ... done
[11:01:19.585] plan(): Setting new future strategy stack:
[11:01:19.585] List of future strategies:
[11:01:19.585] 1. sequential:
[11:01:19.585]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.585]    - tweaked: FALSE
[11:01:19.585]    - call: NULL
[11:01:19.586] plan(): nbrOfWorkers() = 1
[11:01:19.586] plan(): Setting new future strategy stack:
[11:01:19.586] List of future strategies:
[11:01:19.586] 1. sequential:
[11:01:19.586]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.586]    - tweaked: FALSE
[11:01:19.586]    - call: future::plan("sequential")
[11:01:19.587] plan(): nbrOfWorkers() = 1
[11:01:19.587] SequentialFuture started (and completed)
[11:01:19.587] - Launch lazy future ... done
[11:01:19.587] run() for ‘SequentialFuture’ ... done
[11:01:19.587] run() for ‘Future’ ...
[11:01:19.588] - state: ‘created’
[11:01:19.588] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.588] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.588] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.588]   - Field: ‘label’
[11:01:19.588]   - Field: ‘local’
[11:01:19.588]   - Field: ‘owner’
[11:01:19.588]   - Field: ‘envir’
[11:01:19.588]   - Field: ‘packages’
[11:01:19.589]   - Field: ‘gc’
[11:01:19.589]   - Field: ‘conditions’
[11:01:19.589]   - Field: ‘expr’
[11:01:19.589]   - Field: ‘uuid’
[11:01:19.589]   - Field: ‘seed’
[11:01:19.589]   - Field: ‘version’
[11:01:19.589]   - Field: ‘result’
[11:01:19.589]   - Field: ‘asynchronous’
[11:01:19.589]   - Field: ‘calls’
[11:01:19.589]   - Field: ‘globals’
[11:01:19.589]   - Field: ‘stdout’
[11:01:19.589]   - Field: ‘earlySignal’
[11:01:19.589]   - Field: ‘lazy’
[11:01:19.590]   - Field: ‘state’
[11:01:19.590] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.590] - Launch lazy future ...
[11:01:19.590] Packages needed by the future expression (n = 0): <none>
[11:01:19.590] Packages needed by future strategies (n = 0): <none>
[11:01:19.590] {
[11:01:19.590]     {
[11:01:19.590]         {
[11:01:19.590]             ...future.startTime <- base::Sys.time()
[11:01:19.590]             {
[11:01:19.590]                 {
[11:01:19.590]                   {
[11:01:19.590]                     base::local({
[11:01:19.590]                       has_future <- base::requireNamespace("future", 
[11:01:19.590]                         quietly = TRUE)
[11:01:19.590]                       if (has_future) {
[11:01:19.590]                         ns <- base::getNamespace("future")
[11:01:19.590]                         version <- ns[[".package"]][["version"]]
[11:01:19.590]                         if (is.null(version)) 
[11:01:19.590]                           version <- utils::packageVersion("future")
[11:01:19.590]                       }
[11:01:19.590]                       else {
[11:01:19.590]                         version <- NULL
[11:01:19.590]                       }
[11:01:19.590]                       if (!has_future || version < "1.8.0") {
[11:01:19.590]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.590]                           "", base::R.version$version.string), 
[11:01:19.590]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.590]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.590]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.590]                             "release", "version")], collapse = " "), 
[11:01:19.590]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.590]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.590]                           info)
[11:01:19.590]                         info <- base::paste(info, collapse = "; ")
[11:01:19.590]                         if (!has_future) {
[11:01:19.590]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.590]                             info)
[11:01:19.590]                         }
[11:01:19.590]                         else {
[11:01:19.590]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.590]                             info, version)
[11:01:19.590]                         }
[11:01:19.590]                         base::stop(msg)
[11:01:19.590]                       }
[11:01:19.590]                     })
[11:01:19.590]                   }
[11:01:19.590]                   ...future.strategy.old <- future::plan("list")
[11:01:19.590]                   options(future.plan = NULL)
[11:01:19.590]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.590]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.590]                 }
[11:01:19.590]                 ...future.workdir <- getwd()
[11:01:19.590]             }
[11:01:19.590]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.590]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.590]         }
[11:01:19.590]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.590]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.590]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.590]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.590]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.590]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.590]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.590]             base::names(...future.oldOptions))
[11:01:19.590]     }
[11:01:19.590]     if (FALSE) {
[11:01:19.590]     }
[11:01:19.590]     else {
[11:01:19.590]         if (TRUE) {
[11:01:19.590]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.590]                 open = "w")
[11:01:19.590]         }
[11:01:19.590]         else {
[11:01:19.590]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.590]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.590]         }
[11:01:19.590]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.590]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.590]             base::sink(type = "output", split = FALSE)
[11:01:19.590]             base::close(...future.stdout)
[11:01:19.590]         }, add = TRUE)
[11:01:19.590]     }
[11:01:19.590]     ...future.frame <- base::sys.nframe()
[11:01:19.590]     ...future.conditions <- base::list()
[11:01:19.590]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.590]     if (FALSE) {
[11:01:19.590]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.590]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.590]     }
[11:01:19.590]     ...future.result <- base::tryCatch({
[11:01:19.590]         base::withCallingHandlers({
[11:01:19.590]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.590]                 rr, cc)))
[11:01:19.590]             future::FutureResult(value = ...future.value$value, 
[11:01:19.590]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.590]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.590]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.590]                     ...future.globalenv.names))
[11:01:19.590]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.590]         }, condition = base::local({
[11:01:19.590]             c <- base::c
[11:01:19.590]             inherits <- base::inherits
[11:01:19.590]             invokeRestart <- base::invokeRestart
[11:01:19.590]             length <- base::length
[11:01:19.590]             list <- base::list
[11:01:19.590]             seq.int <- base::seq.int
[11:01:19.590]             signalCondition <- base::signalCondition
[11:01:19.590]             sys.calls <- base::sys.calls
[11:01:19.590]             `[[` <- base::`[[`
[11:01:19.590]             `+` <- base::`+`
[11:01:19.590]             `<<-` <- base::`<<-`
[11:01:19.590]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.590]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.590]                   3L)]
[11:01:19.590]             }
[11:01:19.590]             function(cond) {
[11:01:19.590]                 is_error <- inherits(cond, "error")
[11:01:19.590]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.590]                   NULL)
[11:01:19.590]                 if (is_error) {
[11:01:19.590]                   sessionInformation <- function() {
[11:01:19.590]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.590]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.590]                       search = base::search(), system = base::Sys.info())
[11:01:19.590]                   }
[11:01:19.590]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.590]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.590]                     cond$call), session = sessionInformation(), 
[11:01:19.590]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.590]                   signalCondition(cond)
[11:01:19.590]                 }
[11:01:19.590]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.590]                 "immediateCondition"))) {
[11:01:19.590]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.590]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.590]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.590]                   if (TRUE && !signal) {
[11:01:19.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.590]                     {
[11:01:19.590]                       inherits <- base::inherits
[11:01:19.590]                       invokeRestart <- base::invokeRestart
[11:01:19.590]                       is.null <- base::is.null
[11:01:19.590]                       muffled <- FALSE
[11:01:19.590]                       if (inherits(cond, "message")) {
[11:01:19.590]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.590]                         if (muffled) 
[11:01:19.590]                           invokeRestart("muffleMessage")
[11:01:19.590]                       }
[11:01:19.590]                       else if (inherits(cond, "warning")) {
[11:01:19.590]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.590]                         if (muffled) 
[11:01:19.590]                           invokeRestart("muffleWarning")
[11:01:19.590]                       }
[11:01:19.590]                       else if (inherits(cond, "condition")) {
[11:01:19.590]                         if (!is.null(pattern)) {
[11:01:19.590]                           computeRestarts <- base::computeRestarts
[11:01:19.590]                           grepl <- base::grepl
[11:01:19.590]                           restarts <- computeRestarts(cond)
[11:01:19.590]                           for (restart in restarts) {
[11:01:19.590]                             name <- restart$name
[11:01:19.590]                             if (is.null(name)) 
[11:01:19.590]                               next
[11:01:19.590]                             if (!grepl(pattern, name)) 
[11:01:19.590]                               next
[11:01:19.590]                             invokeRestart(restart)
[11:01:19.590]                             muffled <- TRUE
[11:01:19.590]                             break
[11:01:19.590]                           }
[11:01:19.590]                         }
[11:01:19.590]                       }
[11:01:19.590]                       invisible(muffled)
[11:01:19.590]                     }
[11:01:19.590]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.590]                   }
[11:01:19.590]                 }
[11:01:19.590]                 else {
[11:01:19.590]                   if (TRUE) {
[11:01:19.590]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.590]                     {
[11:01:19.590]                       inherits <- base::inherits
[11:01:19.590]                       invokeRestart <- base::invokeRestart
[11:01:19.590]                       is.null <- base::is.null
[11:01:19.590]                       muffled <- FALSE
[11:01:19.590]                       if (inherits(cond, "message")) {
[11:01:19.590]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.590]                         if (muffled) 
[11:01:19.590]                           invokeRestart("muffleMessage")
[11:01:19.590]                       }
[11:01:19.590]                       else if (inherits(cond, "warning")) {
[11:01:19.590]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.590]                         if (muffled) 
[11:01:19.590]                           invokeRestart("muffleWarning")
[11:01:19.590]                       }
[11:01:19.590]                       else if (inherits(cond, "condition")) {
[11:01:19.590]                         if (!is.null(pattern)) {
[11:01:19.590]                           computeRestarts <- base::computeRestarts
[11:01:19.590]                           grepl <- base::grepl
[11:01:19.590]                           restarts <- computeRestarts(cond)
[11:01:19.590]                           for (restart in restarts) {
[11:01:19.590]                             name <- restart$name
[11:01:19.590]                             if (is.null(name)) 
[11:01:19.590]                               next
[11:01:19.590]                             if (!grepl(pattern, name)) 
[11:01:19.590]                               next
[11:01:19.590]                             invokeRestart(restart)
[11:01:19.590]                             muffled <- TRUE
[11:01:19.590]                             break
[11:01:19.590]                           }
[11:01:19.590]                         }
[11:01:19.590]                       }
[11:01:19.590]                       invisible(muffled)
[11:01:19.590]                     }
[11:01:19.590]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.590]                   }
[11:01:19.590]                 }
[11:01:19.590]             }
[11:01:19.590]         }))
[11:01:19.590]     }, error = function(ex) {
[11:01:19.590]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.590]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.590]                 ...future.rng), started = ...future.startTime, 
[11:01:19.590]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.590]             version = "1.8"), class = "FutureResult")
[11:01:19.590]     }, finally = {
[11:01:19.590]         if (!identical(...future.workdir, getwd())) 
[11:01:19.590]             setwd(...future.workdir)
[11:01:19.590]         {
[11:01:19.590]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.590]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.590]             }
[11:01:19.590]             base::options(...future.oldOptions)
[11:01:19.590]             if (.Platform$OS.type == "windows") {
[11:01:19.590]                 old_names <- names(...future.oldEnvVars)
[11:01:19.590]                 envs <- base::Sys.getenv()
[11:01:19.590]                 names <- names(envs)
[11:01:19.590]                 common <- intersect(names, old_names)
[11:01:19.590]                 added <- setdiff(names, old_names)
[11:01:19.590]                 removed <- setdiff(old_names, names)
[11:01:19.590]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.590]                   envs[common]]
[11:01:19.590]                 NAMES <- toupper(changed)
[11:01:19.590]                 args <- list()
[11:01:19.590]                 for (kk in seq_along(NAMES)) {
[11:01:19.590]                   name <- changed[[kk]]
[11:01:19.590]                   NAME <- NAMES[[kk]]
[11:01:19.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.590]                     next
[11:01:19.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.590]                 }
[11:01:19.590]                 NAMES <- toupper(added)
[11:01:19.590]                 for (kk in seq_along(NAMES)) {
[11:01:19.590]                   name <- added[[kk]]
[11:01:19.590]                   NAME <- NAMES[[kk]]
[11:01:19.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.590]                     next
[11:01:19.590]                   args[[name]] <- ""
[11:01:19.590]                 }
[11:01:19.590]                 NAMES <- toupper(removed)
[11:01:19.590]                 for (kk in seq_along(NAMES)) {
[11:01:19.590]                   name <- removed[[kk]]
[11:01:19.590]                   NAME <- NAMES[[kk]]
[11:01:19.590]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.590]                     next
[11:01:19.590]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.590]                 }
[11:01:19.590]                 if (length(args) > 0) 
[11:01:19.590]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.590]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.590]             }
[11:01:19.590]             else {
[11:01:19.590]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.590]             }
[11:01:19.590]             {
[11:01:19.590]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.590]                   0L) {
[11:01:19.590]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.590]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.590]                   base::options(opts)
[11:01:19.590]                 }
[11:01:19.590]                 {
[11:01:19.590]                   {
[11:01:19.590]                     NULL
[11:01:19.590]                     RNGkind("Mersenne-Twister")
[11:01:19.590]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.590]                       inherits = FALSE)
[11:01:19.590]                   }
[11:01:19.590]                   options(future.plan = NULL)
[11:01:19.590]                   if (is.na(NA_character_)) 
[11:01:19.590]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.590]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.590]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.590]                     .init = FALSE)
[11:01:19.590]                 }
[11:01:19.590]             }
[11:01:19.590]         }
[11:01:19.590]     })
[11:01:19.590]     if (TRUE) {
[11:01:19.590]         base::sink(type = "output", split = FALSE)
[11:01:19.590]         if (TRUE) {
[11:01:19.590]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.590]         }
[11:01:19.590]         else {
[11:01:19.590]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.590]         }
[11:01:19.590]         base::close(...future.stdout)
[11:01:19.590]         ...future.stdout <- NULL
[11:01:19.590]     }
[11:01:19.590]     ...future.result$conditions <- ...future.conditions
[11:01:19.590]     ...future.result$finished <- base::Sys.time()
[11:01:19.590]     ...future.result
[11:01:19.590] }
[11:01:19.592] assign_globals() ...
[11:01:19.592] List of 2
[11:01:19.592]  $ rr: int 3
[11:01:19.592]  $ cc: int 1
[11:01:19.592]  - attr(*, "where")=List of 2
[11:01:19.592]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.592]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.592]  - attr(*, "resolved")= logi FALSE
[11:01:19.592]  - attr(*, "total_size")= num 70
[11:01:19.592]  - attr(*, "already-done")= logi TRUE
[11:01:19.595] - copied ‘rr’ to environment
[11:01:19.595] - copied ‘cc’ to environment
[11:01:19.595] assign_globals() ... done
[11:01:19.595] plan(): Setting new future strategy stack:
[11:01:19.595] List of future strategies:
[11:01:19.595] 1. sequential:
[11:01:19.595]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.595]    - tweaked: FALSE
[11:01:19.595]    - call: NULL
[11:01:19.596] plan(): nbrOfWorkers() = 1
[11:01:19.596] plan(): Setting new future strategy stack:
[11:01:19.596] List of future strategies:
[11:01:19.596] 1. sequential:
[11:01:19.596]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.596]    - tweaked: FALSE
[11:01:19.596]    - call: future::plan("sequential")
[11:01:19.597] plan(): nbrOfWorkers() = 1
[11:01:19.597] SequentialFuture started (and completed)
[11:01:19.597] - Launch lazy future ... done
[11:01:19.597] run() for ‘SequentialFuture’ ... done
[11:01:19.597] run() for ‘Future’ ...
[11:01:19.597] - state: ‘created’
[11:01:19.598] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.598] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.598] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.598]   - Field: ‘label’
[11:01:19.598]   - Field: ‘local’
[11:01:19.598]   - Field: ‘owner’
[11:01:19.598]   - Field: ‘envir’
[11:01:19.598]   - Field: ‘packages’
[11:01:19.598]   - Field: ‘gc’
[11:01:19.598]   - Field: ‘conditions’
[11:01:19.599]   - Field: ‘expr’
[11:01:19.599]   - Field: ‘uuid’
[11:01:19.599]   - Field: ‘seed’
[11:01:19.599]   - Field: ‘version’
[11:01:19.599]   - Field: ‘result’
[11:01:19.599]   - Field: ‘asynchronous’
[11:01:19.599]   - Field: ‘calls’
[11:01:19.599]   - Field: ‘globals’
[11:01:19.599]   - Field: ‘stdout’
[11:01:19.599]   - Field: ‘earlySignal’
[11:01:19.599]   - Field: ‘lazy’
[11:01:19.599]   - Field: ‘state’
[11:01:19.600] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.600] - Launch lazy future ...
[11:01:19.600] Packages needed by the future expression (n = 0): <none>
[11:01:19.600] Packages needed by future strategies (n = 0): <none>
[11:01:19.600] {
[11:01:19.600]     {
[11:01:19.600]         {
[11:01:19.600]             ...future.startTime <- base::Sys.time()
[11:01:19.600]             {
[11:01:19.600]                 {
[11:01:19.600]                   {
[11:01:19.600]                     base::local({
[11:01:19.600]                       has_future <- base::requireNamespace("future", 
[11:01:19.600]                         quietly = TRUE)
[11:01:19.600]                       if (has_future) {
[11:01:19.600]                         ns <- base::getNamespace("future")
[11:01:19.600]                         version <- ns[[".package"]][["version"]]
[11:01:19.600]                         if (is.null(version)) 
[11:01:19.600]                           version <- utils::packageVersion("future")
[11:01:19.600]                       }
[11:01:19.600]                       else {
[11:01:19.600]                         version <- NULL
[11:01:19.600]                       }
[11:01:19.600]                       if (!has_future || version < "1.8.0") {
[11:01:19.600]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.600]                           "", base::R.version$version.string), 
[11:01:19.600]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.600]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.600]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.600]                             "release", "version")], collapse = " "), 
[11:01:19.600]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.600]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.600]                           info)
[11:01:19.600]                         info <- base::paste(info, collapse = "; ")
[11:01:19.600]                         if (!has_future) {
[11:01:19.600]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.600]                             info)
[11:01:19.600]                         }
[11:01:19.600]                         else {
[11:01:19.600]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.600]                             info, version)
[11:01:19.600]                         }
[11:01:19.600]                         base::stop(msg)
[11:01:19.600]                       }
[11:01:19.600]                     })
[11:01:19.600]                   }
[11:01:19.600]                   ...future.strategy.old <- future::plan("list")
[11:01:19.600]                   options(future.plan = NULL)
[11:01:19.600]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.600]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.600]                 }
[11:01:19.600]                 ...future.workdir <- getwd()
[11:01:19.600]             }
[11:01:19.600]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.600]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.600]         }
[11:01:19.600]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.600]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.600]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.600]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.600]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.600]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.600]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.600]             base::names(...future.oldOptions))
[11:01:19.600]     }
[11:01:19.600]     if (FALSE) {
[11:01:19.600]     }
[11:01:19.600]     else {
[11:01:19.600]         if (TRUE) {
[11:01:19.600]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.600]                 open = "w")
[11:01:19.600]         }
[11:01:19.600]         else {
[11:01:19.600]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.600]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.600]         }
[11:01:19.600]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.600]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.600]             base::sink(type = "output", split = FALSE)
[11:01:19.600]             base::close(...future.stdout)
[11:01:19.600]         }, add = TRUE)
[11:01:19.600]     }
[11:01:19.600]     ...future.frame <- base::sys.nframe()
[11:01:19.600]     ...future.conditions <- base::list()
[11:01:19.600]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.600]     if (FALSE) {
[11:01:19.600]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.600]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.600]     }
[11:01:19.600]     ...future.result <- base::tryCatch({
[11:01:19.600]         base::withCallingHandlers({
[11:01:19.600]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.600]                 rr, cc)))
[11:01:19.600]             future::FutureResult(value = ...future.value$value, 
[11:01:19.600]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.600]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.600]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.600]                     ...future.globalenv.names))
[11:01:19.600]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.600]         }, condition = base::local({
[11:01:19.600]             c <- base::c
[11:01:19.600]             inherits <- base::inherits
[11:01:19.600]             invokeRestart <- base::invokeRestart
[11:01:19.600]             length <- base::length
[11:01:19.600]             list <- base::list
[11:01:19.600]             seq.int <- base::seq.int
[11:01:19.600]             signalCondition <- base::signalCondition
[11:01:19.600]             sys.calls <- base::sys.calls
[11:01:19.600]             `[[` <- base::`[[`
[11:01:19.600]             `+` <- base::`+`
[11:01:19.600]             `<<-` <- base::`<<-`
[11:01:19.600]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.600]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.600]                   3L)]
[11:01:19.600]             }
[11:01:19.600]             function(cond) {
[11:01:19.600]                 is_error <- inherits(cond, "error")
[11:01:19.600]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.600]                   NULL)
[11:01:19.600]                 if (is_error) {
[11:01:19.600]                   sessionInformation <- function() {
[11:01:19.600]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.600]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.600]                       search = base::search(), system = base::Sys.info())
[11:01:19.600]                   }
[11:01:19.600]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.600]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.600]                     cond$call), session = sessionInformation(), 
[11:01:19.600]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.600]                   signalCondition(cond)
[11:01:19.600]                 }
[11:01:19.600]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.600]                 "immediateCondition"))) {
[11:01:19.600]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.600]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.600]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.600]                   if (TRUE && !signal) {
[11:01:19.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.600]                     {
[11:01:19.600]                       inherits <- base::inherits
[11:01:19.600]                       invokeRestart <- base::invokeRestart
[11:01:19.600]                       is.null <- base::is.null
[11:01:19.600]                       muffled <- FALSE
[11:01:19.600]                       if (inherits(cond, "message")) {
[11:01:19.600]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.600]                         if (muffled) 
[11:01:19.600]                           invokeRestart("muffleMessage")
[11:01:19.600]                       }
[11:01:19.600]                       else if (inherits(cond, "warning")) {
[11:01:19.600]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.600]                         if (muffled) 
[11:01:19.600]                           invokeRestart("muffleWarning")
[11:01:19.600]                       }
[11:01:19.600]                       else if (inherits(cond, "condition")) {
[11:01:19.600]                         if (!is.null(pattern)) {
[11:01:19.600]                           computeRestarts <- base::computeRestarts
[11:01:19.600]                           grepl <- base::grepl
[11:01:19.600]                           restarts <- computeRestarts(cond)
[11:01:19.600]                           for (restart in restarts) {
[11:01:19.600]                             name <- restart$name
[11:01:19.600]                             if (is.null(name)) 
[11:01:19.600]                               next
[11:01:19.600]                             if (!grepl(pattern, name)) 
[11:01:19.600]                               next
[11:01:19.600]                             invokeRestart(restart)
[11:01:19.600]                             muffled <- TRUE
[11:01:19.600]                             break
[11:01:19.600]                           }
[11:01:19.600]                         }
[11:01:19.600]                       }
[11:01:19.600]                       invisible(muffled)
[11:01:19.600]                     }
[11:01:19.600]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.600]                   }
[11:01:19.600]                 }
[11:01:19.600]                 else {
[11:01:19.600]                   if (TRUE) {
[11:01:19.600]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.600]                     {
[11:01:19.600]                       inherits <- base::inherits
[11:01:19.600]                       invokeRestart <- base::invokeRestart
[11:01:19.600]                       is.null <- base::is.null
[11:01:19.600]                       muffled <- FALSE
[11:01:19.600]                       if (inherits(cond, "message")) {
[11:01:19.600]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.600]                         if (muffled) 
[11:01:19.600]                           invokeRestart("muffleMessage")
[11:01:19.600]                       }
[11:01:19.600]                       else if (inherits(cond, "warning")) {
[11:01:19.600]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.600]                         if (muffled) 
[11:01:19.600]                           invokeRestart("muffleWarning")
[11:01:19.600]                       }
[11:01:19.600]                       else if (inherits(cond, "condition")) {
[11:01:19.600]                         if (!is.null(pattern)) {
[11:01:19.600]                           computeRestarts <- base::computeRestarts
[11:01:19.600]                           grepl <- base::grepl
[11:01:19.600]                           restarts <- computeRestarts(cond)
[11:01:19.600]                           for (restart in restarts) {
[11:01:19.600]                             name <- restart$name
[11:01:19.600]                             if (is.null(name)) 
[11:01:19.600]                               next
[11:01:19.600]                             if (!grepl(pattern, name)) 
[11:01:19.600]                               next
[11:01:19.600]                             invokeRestart(restart)
[11:01:19.600]                             muffled <- TRUE
[11:01:19.600]                             break
[11:01:19.600]                           }
[11:01:19.600]                         }
[11:01:19.600]                       }
[11:01:19.600]                       invisible(muffled)
[11:01:19.600]                     }
[11:01:19.600]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.600]                   }
[11:01:19.600]                 }
[11:01:19.600]             }
[11:01:19.600]         }))
[11:01:19.600]     }, error = function(ex) {
[11:01:19.600]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.600]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.600]                 ...future.rng), started = ...future.startTime, 
[11:01:19.600]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.600]             version = "1.8"), class = "FutureResult")
[11:01:19.600]     }, finally = {
[11:01:19.600]         if (!identical(...future.workdir, getwd())) 
[11:01:19.600]             setwd(...future.workdir)
[11:01:19.600]         {
[11:01:19.600]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.600]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.600]             }
[11:01:19.600]             base::options(...future.oldOptions)
[11:01:19.600]             if (.Platform$OS.type == "windows") {
[11:01:19.600]                 old_names <- names(...future.oldEnvVars)
[11:01:19.600]                 envs <- base::Sys.getenv()
[11:01:19.600]                 names <- names(envs)
[11:01:19.600]                 common <- intersect(names, old_names)
[11:01:19.600]                 added <- setdiff(names, old_names)
[11:01:19.600]                 removed <- setdiff(old_names, names)
[11:01:19.600]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.600]                   envs[common]]
[11:01:19.600]                 NAMES <- toupper(changed)
[11:01:19.600]                 args <- list()
[11:01:19.600]                 for (kk in seq_along(NAMES)) {
[11:01:19.600]                   name <- changed[[kk]]
[11:01:19.600]                   NAME <- NAMES[[kk]]
[11:01:19.600]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.600]                     next
[11:01:19.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.600]                 }
[11:01:19.600]                 NAMES <- toupper(added)
[11:01:19.600]                 for (kk in seq_along(NAMES)) {
[11:01:19.600]                   name <- added[[kk]]
[11:01:19.600]                   NAME <- NAMES[[kk]]
[11:01:19.600]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.600]                     next
[11:01:19.600]                   args[[name]] <- ""
[11:01:19.600]                 }
[11:01:19.600]                 NAMES <- toupper(removed)
[11:01:19.600]                 for (kk in seq_along(NAMES)) {
[11:01:19.600]                   name <- removed[[kk]]
[11:01:19.600]                   NAME <- NAMES[[kk]]
[11:01:19.600]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.600]                     next
[11:01:19.600]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.600]                 }
[11:01:19.600]                 if (length(args) > 0) 
[11:01:19.600]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.600]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.600]             }
[11:01:19.600]             else {
[11:01:19.600]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.600]             }
[11:01:19.600]             {
[11:01:19.600]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.600]                   0L) {
[11:01:19.600]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.600]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.600]                   base::options(opts)
[11:01:19.600]                 }
[11:01:19.600]                 {
[11:01:19.600]                   {
[11:01:19.600]                     NULL
[11:01:19.600]                     RNGkind("Mersenne-Twister")
[11:01:19.600]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.600]                       inherits = FALSE)
[11:01:19.600]                   }
[11:01:19.600]                   options(future.plan = NULL)
[11:01:19.600]                   if (is.na(NA_character_)) 
[11:01:19.600]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.600]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.600]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.600]                     .init = FALSE)
[11:01:19.600]                 }
[11:01:19.600]             }
[11:01:19.600]         }
[11:01:19.600]     })
[11:01:19.600]     if (TRUE) {
[11:01:19.600]         base::sink(type = "output", split = FALSE)
[11:01:19.600]         if (TRUE) {
[11:01:19.600]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.600]         }
[11:01:19.600]         else {
[11:01:19.600]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.600]         }
[11:01:19.600]         base::close(...future.stdout)
[11:01:19.600]         ...future.stdout <- NULL
[11:01:19.600]     }
[11:01:19.600]     ...future.result$conditions <- ...future.conditions
[11:01:19.600]     ...future.result$finished <- base::Sys.time()
[11:01:19.600]     ...future.result
[11:01:19.600] }
[11:01:19.602] assign_globals() ...
[11:01:19.602] List of 2
[11:01:19.602]  $ rr: int 1
[11:01:19.602]  $ cc: int 2
[11:01:19.602]  - attr(*, "where")=List of 2
[11:01:19.602]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.602]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.602]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.602]  - attr(*, "resolved")= logi FALSE
[11:01:19.602]  - attr(*, "total_size")= num 70
[11:01:19.602]  - attr(*, "already-done")= logi TRUE
[11:01:19.605] - copied ‘rr’ to environment
[11:01:19.605] - copied ‘cc’ to environment
[11:01:19.605] assign_globals() ... done
[11:01:19.605] plan(): Setting new future strategy stack:
[11:01:19.605] List of future strategies:
[11:01:19.605] 1. sequential:
[11:01:19.605]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.605]    - tweaked: FALSE
[11:01:19.605]    - call: NULL
[11:01:19.606] plan(): nbrOfWorkers() = 1
[11:01:19.606] plan(): Setting new future strategy stack:
[11:01:19.606] List of future strategies:
[11:01:19.606] 1. sequential:
[11:01:19.606]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.606]    - tweaked: FALSE
[11:01:19.606]    - call: future::plan("sequential")
[11:01:19.607] plan(): nbrOfWorkers() = 1
[11:01:19.607] SequentialFuture started (and completed)
[11:01:19.607] - Launch lazy future ... done
[11:01:19.607] run() for ‘SequentialFuture’ ... done
[11:01:19.607] run() for ‘Future’ ...
[11:01:19.607] - state: ‘created’
[11:01:19.607] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.608] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.608] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.608]   - Field: ‘label’
[11:01:19.608]   - Field: ‘local’
[11:01:19.608]   - Field: ‘owner’
[11:01:19.608]   - Field: ‘envir’
[11:01:19.609]   - Field: ‘packages’
[11:01:19.609]   - Field: ‘gc’
[11:01:19.609]   - Field: ‘conditions’
[11:01:19.609]   - Field: ‘expr’
[11:01:19.609]   - Field: ‘uuid’
[11:01:19.609]   - Field: ‘seed’
[11:01:19.609]   - Field: ‘version’
[11:01:19.610]   - Field: ‘result’
[11:01:19.610]   - Field: ‘asynchronous’
[11:01:19.610]   - Field: ‘calls’
[11:01:19.610]   - Field: ‘globals’
[11:01:19.610]   - Field: ‘stdout’
[11:01:19.610]   - Field: ‘earlySignal’
[11:01:19.610]   - Field: ‘lazy’
[11:01:19.610]   - Field: ‘state’
[11:01:19.610] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.610] - Launch lazy future ...
[11:01:19.610] Packages needed by the future expression (n = 0): <none>
[11:01:19.611] Packages needed by future strategies (n = 0): <none>
[11:01:19.611] {
[11:01:19.611]     {
[11:01:19.611]         {
[11:01:19.611]             ...future.startTime <- base::Sys.time()
[11:01:19.611]             {
[11:01:19.611]                 {
[11:01:19.611]                   {
[11:01:19.611]                     base::local({
[11:01:19.611]                       has_future <- base::requireNamespace("future", 
[11:01:19.611]                         quietly = TRUE)
[11:01:19.611]                       if (has_future) {
[11:01:19.611]                         ns <- base::getNamespace("future")
[11:01:19.611]                         version <- ns[[".package"]][["version"]]
[11:01:19.611]                         if (is.null(version)) 
[11:01:19.611]                           version <- utils::packageVersion("future")
[11:01:19.611]                       }
[11:01:19.611]                       else {
[11:01:19.611]                         version <- NULL
[11:01:19.611]                       }
[11:01:19.611]                       if (!has_future || version < "1.8.0") {
[11:01:19.611]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.611]                           "", base::R.version$version.string), 
[11:01:19.611]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.611]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.611]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.611]                             "release", "version")], collapse = " "), 
[11:01:19.611]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.611]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.611]                           info)
[11:01:19.611]                         info <- base::paste(info, collapse = "; ")
[11:01:19.611]                         if (!has_future) {
[11:01:19.611]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.611]                             info)
[11:01:19.611]                         }
[11:01:19.611]                         else {
[11:01:19.611]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.611]                             info, version)
[11:01:19.611]                         }
[11:01:19.611]                         base::stop(msg)
[11:01:19.611]                       }
[11:01:19.611]                     })
[11:01:19.611]                   }
[11:01:19.611]                   ...future.strategy.old <- future::plan("list")
[11:01:19.611]                   options(future.plan = NULL)
[11:01:19.611]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.611]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.611]                 }
[11:01:19.611]                 ...future.workdir <- getwd()
[11:01:19.611]             }
[11:01:19.611]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.611]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.611]         }
[11:01:19.611]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.611]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.611]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.611]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.611]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.611]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.611]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.611]             base::names(...future.oldOptions))
[11:01:19.611]     }
[11:01:19.611]     if (FALSE) {
[11:01:19.611]     }
[11:01:19.611]     else {
[11:01:19.611]         if (TRUE) {
[11:01:19.611]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.611]                 open = "w")
[11:01:19.611]         }
[11:01:19.611]         else {
[11:01:19.611]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.611]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.611]         }
[11:01:19.611]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.611]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.611]             base::sink(type = "output", split = FALSE)
[11:01:19.611]             base::close(...future.stdout)
[11:01:19.611]         }, add = TRUE)
[11:01:19.611]     }
[11:01:19.611]     ...future.frame <- base::sys.nframe()
[11:01:19.611]     ...future.conditions <- base::list()
[11:01:19.611]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.611]     if (FALSE) {
[11:01:19.611]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.611]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.611]     }
[11:01:19.611]     ...future.result <- base::tryCatch({
[11:01:19.611]         base::withCallingHandlers({
[11:01:19.611]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.611]                 rr, cc)))
[11:01:19.611]             future::FutureResult(value = ...future.value$value, 
[11:01:19.611]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.611]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.611]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.611]                     ...future.globalenv.names))
[11:01:19.611]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.611]         }, condition = base::local({
[11:01:19.611]             c <- base::c
[11:01:19.611]             inherits <- base::inherits
[11:01:19.611]             invokeRestart <- base::invokeRestart
[11:01:19.611]             length <- base::length
[11:01:19.611]             list <- base::list
[11:01:19.611]             seq.int <- base::seq.int
[11:01:19.611]             signalCondition <- base::signalCondition
[11:01:19.611]             sys.calls <- base::sys.calls
[11:01:19.611]             `[[` <- base::`[[`
[11:01:19.611]             `+` <- base::`+`
[11:01:19.611]             `<<-` <- base::`<<-`
[11:01:19.611]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.611]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.611]                   3L)]
[11:01:19.611]             }
[11:01:19.611]             function(cond) {
[11:01:19.611]                 is_error <- inherits(cond, "error")
[11:01:19.611]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.611]                   NULL)
[11:01:19.611]                 if (is_error) {
[11:01:19.611]                   sessionInformation <- function() {
[11:01:19.611]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.611]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.611]                       search = base::search(), system = base::Sys.info())
[11:01:19.611]                   }
[11:01:19.611]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.611]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.611]                     cond$call), session = sessionInformation(), 
[11:01:19.611]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.611]                   signalCondition(cond)
[11:01:19.611]                 }
[11:01:19.611]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.611]                 "immediateCondition"))) {
[11:01:19.611]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.611]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.611]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.611]                   if (TRUE && !signal) {
[11:01:19.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.611]                     {
[11:01:19.611]                       inherits <- base::inherits
[11:01:19.611]                       invokeRestart <- base::invokeRestart
[11:01:19.611]                       is.null <- base::is.null
[11:01:19.611]                       muffled <- FALSE
[11:01:19.611]                       if (inherits(cond, "message")) {
[11:01:19.611]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.611]                         if (muffled) 
[11:01:19.611]                           invokeRestart("muffleMessage")
[11:01:19.611]                       }
[11:01:19.611]                       else if (inherits(cond, "warning")) {
[11:01:19.611]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.611]                         if (muffled) 
[11:01:19.611]                           invokeRestart("muffleWarning")
[11:01:19.611]                       }
[11:01:19.611]                       else if (inherits(cond, "condition")) {
[11:01:19.611]                         if (!is.null(pattern)) {
[11:01:19.611]                           computeRestarts <- base::computeRestarts
[11:01:19.611]                           grepl <- base::grepl
[11:01:19.611]                           restarts <- computeRestarts(cond)
[11:01:19.611]                           for (restart in restarts) {
[11:01:19.611]                             name <- restart$name
[11:01:19.611]                             if (is.null(name)) 
[11:01:19.611]                               next
[11:01:19.611]                             if (!grepl(pattern, name)) 
[11:01:19.611]                               next
[11:01:19.611]                             invokeRestart(restart)
[11:01:19.611]                             muffled <- TRUE
[11:01:19.611]                             break
[11:01:19.611]                           }
[11:01:19.611]                         }
[11:01:19.611]                       }
[11:01:19.611]                       invisible(muffled)
[11:01:19.611]                     }
[11:01:19.611]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.611]                   }
[11:01:19.611]                 }
[11:01:19.611]                 else {
[11:01:19.611]                   if (TRUE) {
[11:01:19.611]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.611]                     {
[11:01:19.611]                       inherits <- base::inherits
[11:01:19.611]                       invokeRestart <- base::invokeRestart
[11:01:19.611]                       is.null <- base::is.null
[11:01:19.611]                       muffled <- FALSE
[11:01:19.611]                       if (inherits(cond, "message")) {
[11:01:19.611]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.611]                         if (muffled) 
[11:01:19.611]                           invokeRestart("muffleMessage")
[11:01:19.611]                       }
[11:01:19.611]                       else if (inherits(cond, "warning")) {
[11:01:19.611]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.611]                         if (muffled) 
[11:01:19.611]                           invokeRestart("muffleWarning")
[11:01:19.611]                       }
[11:01:19.611]                       else if (inherits(cond, "condition")) {
[11:01:19.611]                         if (!is.null(pattern)) {
[11:01:19.611]                           computeRestarts <- base::computeRestarts
[11:01:19.611]                           grepl <- base::grepl
[11:01:19.611]                           restarts <- computeRestarts(cond)
[11:01:19.611]                           for (restart in restarts) {
[11:01:19.611]                             name <- restart$name
[11:01:19.611]                             if (is.null(name)) 
[11:01:19.611]                               next
[11:01:19.611]                             if (!grepl(pattern, name)) 
[11:01:19.611]                               next
[11:01:19.611]                             invokeRestart(restart)
[11:01:19.611]                             muffled <- TRUE
[11:01:19.611]                             break
[11:01:19.611]                           }
[11:01:19.611]                         }
[11:01:19.611]                       }
[11:01:19.611]                       invisible(muffled)
[11:01:19.611]                     }
[11:01:19.611]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.611]                   }
[11:01:19.611]                 }
[11:01:19.611]             }
[11:01:19.611]         }))
[11:01:19.611]     }, error = function(ex) {
[11:01:19.611]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.611]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.611]                 ...future.rng), started = ...future.startTime, 
[11:01:19.611]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.611]             version = "1.8"), class = "FutureResult")
[11:01:19.611]     }, finally = {
[11:01:19.611]         if (!identical(...future.workdir, getwd())) 
[11:01:19.611]             setwd(...future.workdir)
[11:01:19.611]         {
[11:01:19.611]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.611]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.611]             }
[11:01:19.611]             base::options(...future.oldOptions)
[11:01:19.611]             if (.Platform$OS.type == "windows") {
[11:01:19.611]                 old_names <- names(...future.oldEnvVars)
[11:01:19.611]                 envs <- base::Sys.getenv()
[11:01:19.611]                 names <- names(envs)
[11:01:19.611]                 common <- intersect(names, old_names)
[11:01:19.611]                 added <- setdiff(names, old_names)
[11:01:19.611]                 removed <- setdiff(old_names, names)
[11:01:19.611]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.611]                   envs[common]]
[11:01:19.611]                 NAMES <- toupper(changed)
[11:01:19.611]                 args <- list()
[11:01:19.611]                 for (kk in seq_along(NAMES)) {
[11:01:19.611]                   name <- changed[[kk]]
[11:01:19.611]                   NAME <- NAMES[[kk]]
[11:01:19.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.611]                     next
[11:01:19.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.611]                 }
[11:01:19.611]                 NAMES <- toupper(added)
[11:01:19.611]                 for (kk in seq_along(NAMES)) {
[11:01:19.611]                   name <- added[[kk]]
[11:01:19.611]                   NAME <- NAMES[[kk]]
[11:01:19.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.611]                     next
[11:01:19.611]                   args[[name]] <- ""
[11:01:19.611]                 }
[11:01:19.611]                 NAMES <- toupper(removed)
[11:01:19.611]                 for (kk in seq_along(NAMES)) {
[11:01:19.611]                   name <- removed[[kk]]
[11:01:19.611]                   NAME <- NAMES[[kk]]
[11:01:19.611]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.611]                     next
[11:01:19.611]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.611]                 }
[11:01:19.611]                 if (length(args) > 0) 
[11:01:19.611]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.611]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.611]             }
[11:01:19.611]             else {
[11:01:19.611]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.611]             }
[11:01:19.611]             {
[11:01:19.611]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.611]                   0L) {
[11:01:19.611]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.611]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.611]                   base::options(opts)
[11:01:19.611]                 }
[11:01:19.611]                 {
[11:01:19.611]                   {
[11:01:19.611]                     NULL
[11:01:19.611]                     RNGkind("Mersenne-Twister")
[11:01:19.611]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.611]                       inherits = FALSE)
[11:01:19.611]                   }
[11:01:19.611]                   options(future.plan = NULL)
[11:01:19.611]                   if (is.na(NA_character_)) 
[11:01:19.611]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.611]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.611]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.611]                     .init = FALSE)
[11:01:19.611]                 }
[11:01:19.611]             }
[11:01:19.611]         }
[11:01:19.611]     })
[11:01:19.611]     if (TRUE) {
[11:01:19.611]         base::sink(type = "output", split = FALSE)
[11:01:19.611]         if (TRUE) {
[11:01:19.611]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.611]         }
[11:01:19.611]         else {
[11:01:19.611]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.611]         }
[11:01:19.611]         base::close(...future.stdout)
[11:01:19.611]         ...future.stdout <- NULL
[11:01:19.611]     }
[11:01:19.611]     ...future.result$conditions <- ...future.conditions
[11:01:19.611]     ...future.result$finished <- base::Sys.time()
[11:01:19.611]     ...future.result
[11:01:19.611] }
[11:01:19.613] assign_globals() ...
[11:01:19.613] List of 2
[11:01:19.613]  $ rr: int 2
[11:01:19.613]  $ cc: int 2
[11:01:19.613]  - attr(*, "where")=List of 2
[11:01:19.613]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.613]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.613]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.613]  - attr(*, "resolved")= logi FALSE
[11:01:19.613]  - attr(*, "total_size")= num 70
[11:01:19.613]  - attr(*, "already-done")= logi TRUE
[11:01:19.615] - copied ‘rr’ to environment
[11:01:19.615] - copied ‘cc’ to environment
[11:01:19.616] assign_globals() ... done
[11:01:19.616] plan(): Setting new future strategy stack:
[11:01:19.616] List of future strategies:
[11:01:19.616] 1. sequential:
[11:01:19.616]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.616]    - tweaked: FALSE
[11:01:19.616]    - call: NULL
[11:01:19.616] plan(): nbrOfWorkers() = 1
[11:01:19.617] plan(): Setting new future strategy stack:
[11:01:19.617] List of future strategies:
[11:01:19.617] 1. sequential:
[11:01:19.617]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.617]    - tweaked: FALSE
[11:01:19.617]    - call: future::plan("sequential")
[11:01:19.617] plan(): nbrOfWorkers() = 1
[11:01:19.618] SequentialFuture started (and completed)
[11:01:19.618] - Launch lazy future ... done
[11:01:19.618] run() for ‘SequentialFuture’ ... done
[11:01:19.618] run() for ‘Future’ ...
[11:01:19.618] - state: ‘created’
[11:01:19.618] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[11:01:19.618] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:01:19.618] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[11:01:19.619]   - Field: ‘label’
[11:01:19.619]   - Field: ‘local’
[11:01:19.619]   - Field: ‘owner’
[11:01:19.619]   - Field: ‘envir’
[11:01:19.619]   - Field: ‘packages’
[11:01:19.619]   - Field: ‘gc’
[11:01:19.619]   - Field: ‘conditions’
[11:01:19.619]   - Field: ‘expr’
[11:01:19.619]   - Field: ‘uuid’
[11:01:19.619]   - Field: ‘seed’
[11:01:19.619]   - Field: ‘version’
[11:01:19.619]   - Field: ‘result’
[11:01:19.619]   - Field: ‘asynchronous’
[11:01:19.620]   - Field: ‘calls’
[11:01:19.620]   - Field: ‘globals’
[11:01:19.620]   - Field: ‘stdout’
[11:01:19.620]   - Field: ‘earlySignal’
[11:01:19.620]   - Field: ‘lazy’
[11:01:19.620]   - Field: ‘state’
[11:01:19.620] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[11:01:19.620] - Launch lazy future ...
[11:01:19.620] Packages needed by the future expression (n = 0): <none>
[11:01:19.620] Packages needed by future strategies (n = 0): <none>
[11:01:19.621] {
[11:01:19.621]     {
[11:01:19.621]         {
[11:01:19.621]             ...future.startTime <- base::Sys.time()
[11:01:19.621]             {
[11:01:19.621]                 {
[11:01:19.621]                   {
[11:01:19.621]                     base::local({
[11:01:19.621]                       has_future <- base::requireNamespace("future", 
[11:01:19.621]                         quietly = TRUE)
[11:01:19.621]                       if (has_future) {
[11:01:19.621]                         ns <- base::getNamespace("future")
[11:01:19.621]                         version <- ns[[".package"]][["version"]]
[11:01:19.621]                         if (is.null(version)) 
[11:01:19.621]                           version <- utils::packageVersion("future")
[11:01:19.621]                       }
[11:01:19.621]                       else {
[11:01:19.621]                         version <- NULL
[11:01:19.621]                       }
[11:01:19.621]                       if (!has_future || version < "1.8.0") {
[11:01:19.621]                         info <- base::c(r_version = base::gsub("R version ", 
[11:01:19.621]                           "", base::R.version$version.string), 
[11:01:19.621]                           platform = base::sprintf("%s (%s-bit)", 
[11:01:19.621]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:01:19.621]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:01:19.621]                             "release", "version")], collapse = " "), 
[11:01:19.621]                           hostname = base::Sys.info()[["nodename"]])
[11:01:19.621]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:01:19.621]                           info)
[11:01:19.621]                         info <- base::paste(info, collapse = "; ")
[11:01:19.621]                         if (!has_future) {
[11:01:19.621]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:01:19.621]                             info)
[11:01:19.621]                         }
[11:01:19.621]                         else {
[11:01:19.621]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:01:19.621]                             info, version)
[11:01:19.621]                         }
[11:01:19.621]                         base::stop(msg)
[11:01:19.621]                       }
[11:01:19.621]                     })
[11:01:19.621]                   }
[11:01:19.621]                   ...future.strategy.old <- future::plan("list")
[11:01:19.621]                   options(future.plan = NULL)
[11:01:19.621]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.621]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:01:19.621]                 }
[11:01:19.621]                 ...future.workdir <- getwd()
[11:01:19.621]             }
[11:01:19.621]             ...future.oldOptions <- base::as.list(base::.Options)
[11:01:19.621]             ...future.oldEnvVars <- base::Sys.getenv()
[11:01:19.621]         }
[11:01:19.621]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:01:19.621]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:01:19.621]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:01:19.621]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:01:19.621]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:01:19.621]             future.stdout.windows.reencode = NULL, width = 80L)
[11:01:19.621]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:01:19.621]             base::names(...future.oldOptions))
[11:01:19.621]     }
[11:01:19.621]     if (FALSE) {
[11:01:19.621]     }
[11:01:19.621]     else {
[11:01:19.621]         if (TRUE) {
[11:01:19.621]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:01:19.621]                 open = "w")
[11:01:19.621]         }
[11:01:19.621]         else {
[11:01:19.621]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:01:19.621]                 windows = "NUL", "/dev/null"), open = "w")
[11:01:19.621]         }
[11:01:19.621]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:01:19.621]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:01:19.621]             base::sink(type = "output", split = FALSE)
[11:01:19.621]             base::close(...future.stdout)
[11:01:19.621]         }, add = TRUE)
[11:01:19.621]     }
[11:01:19.621]     ...future.frame <- base::sys.nframe()
[11:01:19.621]     ...future.conditions <- base::list()
[11:01:19.621]     ...future.rng <- base::globalenv()$.Random.seed
[11:01:19.621]     if (FALSE) {
[11:01:19.621]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:01:19.621]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:01:19.621]     }
[11:01:19.621]     ...future.result <- base::tryCatch({
[11:01:19.621]         base::withCallingHandlers({
[11:01:19.621]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[11:01:19.621]                 rr, cc)))
[11:01:19.621]             future::FutureResult(value = ...future.value$value, 
[11:01:19.621]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.621]                   ...future.rng), globalenv = if (FALSE) 
[11:01:19.621]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:01:19.621]                     ...future.globalenv.names))
[11:01:19.621]                 else NULL, started = ...future.startTime, version = "1.8")
[11:01:19.621]         }, condition = base::local({
[11:01:19.621]             c <- base::c
[11:01:19.621]             inherits <- base::inherits
[11:01:19.621]             invokeRestart <- base::invokeRestart
[11:01:19.621]             length <- base::length
[11:01:19.621]             list <- base::list
[11:01:19.621]             seq.int <- base::seq.int
[11:01:19.621]             signalCondition <- base::signalCondition
[11:01:19.621]             sys.calls <- base::sys.calls
[11:01:19.621]             `[[` <- base::`[[`
[11:01:19.621]             `+` <- base::`+`
[11:01:19.621]             `<<-` <- base::`<<-`
[11:01:19.621]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:01:19.621]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:01:19.621]                   3L)]
[11:01:19.621]             }
[11:01:19.621]             function(cond) {
[11:01:19.621]                 is_error <- inherits(cond, "error")
[11:01:19.621]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:01:19.621]                   NULL)
[11:01:19.621]                 if (is_error) {
[11:01:19.621]                   sessionInformation <- function() {
[11:01:19.621]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:01:19.621]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:01:19.621]                       search = base::search(), system = base::Sys.info())
[11:01:19.621]                   }
[11:01:19.621]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.621]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:01:19.621]                     cond$call), session = sessionInformation(), 
[11:01:19.621]                     timestamp = base::Sys.time(), signaled = 0L)
[11:01:19.621]                   signalCondition(cond)
[11:01:19.621]                 }
[11:01:19.621]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:01:19.621]                 "immediateCondition"))) {
[11:01:19.621]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:01:19.621]                   ...future.conditions[[length(...future.conditions) + 
[11:01:19.621]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:01:19.621]                   if (TRUE && !signal) {
[11:01:19.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.621]                     {
[11:01:19.621]                       inherits <- base::inherits
[11:01:19.621]                       invokeRestart <- base::invokeRestart
[11:01:19.621]                       is.null <- base::is.null
[11:01:19.621]                       muffled <- FALSE
[11:01:19.621]                       if (inherits(cond, "message")) {
[11:01:19.621]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.621]                         if (muffled) 
[11:01:19.621]                           invokeRestart("muffleMessage")
[11:01:19.621]                       }
[11:01:19.621]                       else if (inherits(cond, "warning")) {
[11:01:19.621]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.621]                         if (muffled) 
[11:01:19.621]                           invokeRestart("muffleWarning")
[11:01:19.621]                       }
[11:01:19.621]                       else if (inherits(cond, "condition")) {
[11:01:19.621]                         if (!is.null(pattern)) {
[11:01:19.621]                           computeRestarts <- base::computeRestarts
[11:01:19.621]                           grepl <- base::grepl
[11:01:19.621]                           restarts <- computeRestarts(cond)
[11:01:19.621]                           for (restart in restarts) {
[11:01:19.621]                             name <- restart$name
[11:01:19.621]                             if (is.null(name)) 
[11:01:19.621]                               next
[11:01:19.621]                             if (!grepl(pattern, name)) 
[11:01:19.621]                               next
[11:01:19.621]                             invokeRestart(restart)
[11:01:19.621]                             muffled <- TRUE
[11:01:19.621]                             break
[11:01:19.621]                           }
[11:01:19.621]                         }
[11:01:19.621]                       }
[11:01:19.621]                       invisible(muffled)
[11:01:19.621]                     }
[11:01:19.621]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.621]                   }
[11:01:19.621]                 }
[11:01:19.621]                 else {
[11:01:19.621]                   if (TRUE) {
[11:01:19.621]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:01:19.621]                     {
[11:01:19.621]                       inherits <- base::inherits
[11:01:19.621]                       invokeRestart <- base::invokeRestart
[11:01:19.621]                       is.null <- base::is.null
[11:01:19.621]                       muffled <- FALSE
[11:01:19.621]                       if (inherits(cond, "message")) {
[11:01:19.621]                         muffled <- grepl(pattern, "muffleMessage")
[11:01:19.621]                         if (muffled) 
[11:01:19.621]                           invokeRestart("muffleMessage")
[11:01:19.621]                       }
[11:01:19.621]                       else if (inherits(cond, "warning")) {
[11:01:19.621]                         muffled <- grepl(pattern, "muffleWarning")
[11:01:19.621]                         if (muffled) 
[11:01:19.621]                           invokeRestart("muffleWarning")
[11:01:19.621]                       }
[11:01:19.621]                       else if (inherits(cond, "condition")) {
[11:01:19.621]                         if (!is.null(pattern)) {
[11:01:19.621]                           computeRestarts <- base::computeRestarts
[11:01:19.621]                           grepl <- base::grepl
[11:01:19.621]                           restarts <- computeRestarts(cond)
[11:01:19.621]                           for (restart in restarts) {
[11:01:19.621]                             name <- restart$name
[11:01:19.621]                             if (is.null(name)) 
[11:01:19.621]                               next
[11:01:19.621]                             if (!grepl(pattern, name)) 
[11:01:19.621]                               next
[11:01:19.621]                             invokeRestart(restart)
[11:01:19.621]                             muffled <- TRUE
[11:01:19.621]                             break
[11:01:19.621]                           }
[11:01:19.621]                         }
[11:01:19.621]                       }
[11:01:19.621]                       invisible(muffled)
[11:01:19.621]                     }
[11:01:19.621]                     muffleCondition(cond, pattern = "^muffle")
[11:01:19.621]                   }
[11:01:19.621]                 }
[11:01:19.621]             }
[11:01:19.621]         }))
[11:01:19.621]     }, error = function(ex) {
[11:01:19.621]         base::structure(base::list(value = NULL, visible = NULL, 
[11:01:19.621]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:01:19.621]                 ...future.rng), started = ...future.startTime, 
[11:01:19.621]             finished = Sys.time(), session_uuid = NA_character_, 
[11:01:19.621]             version = "1.8"), class = "FutureResult")
[11:01:19.621]     }, finally = {
[11:01:19.621]         if (!identical(...future.workdir, getwd())) 
[11:01:19.621]             setwd(...future.workdir)
[11:01:19.621]         {
[11:01:19.621]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:01:19.621]                 ...future.oldOptions$nwarnings <- NULL
[11:01:19.621]             }
[11:01:19.621]             base::options(...future.oldOptions)
[11:01:19.621]             if (.Platform$OS.type == "windows") {
[11:01:19.621]                 old_names <- names(...future.oldEnvVars)
[11:01:19.621]                 envs <- base::Sys.getenv()
[11:01:19.621]                 names <- names(envs)
[11:01:19.621]                 common <- intersect(names, old_names)
[11:01:19.621]                 added <- setdiff(names, old_names)
[11:01:19.621]                 removed <- setdiff(old_names, names)
[11:01:19.621]                 changed <- common[...future.oldEnvVars[common] != 
[11:01:19.621]                   envs[common]]
[11:01:19.621]                 NAMES <- toupper(changed)
[11:01:19.621]                 args <- list()
[11:01:19.621]                 for (kk in seq_along(NAMES)) {
[11:01:19.621]                   name <- changed[[kk]]
[11:01:19.621]                   NAME <- NAMES[[kk]]
[11:01:19.621]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.621]                     next
[11:01:19.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.621]                 }
[11:01:19.621]                 NAMES <- toupper(added)
[11:01:19.621]                 for (kk in seq_along(NAMES)) {
[11:01:19.621]                   name <- added[[kk]]
[11:01:19.621]                   NAME <- NAMES[[kk]]
[11:01:19.621]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.621]                     next
[11:01:19.621]                   args[[name]] <- ""
[11:01:19.621]                 }
[11:01:19.621]                 NAMES <- toupper(removed)
[11:01:19.621]                 for (kk in seq_along(NAMES)) {
[11:01:19.621]                   name <- removed[[kk]]
[11:01:19.621]                   NAME <- NAMES[[kk]]
[11:01:19.621]                   if (name != NAME && is.element(NAME, old_names)) 
[11:01:19.621]                     next
[11:01:19.621]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:01:19.621]                 }
[11:01:19.621]                 if (length(args) > 0) 
[11:01:19.621]                   base::do.call(base::Sys.setenv, args = args)
[11:01:19.621]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:01:19.621]             }
[11:01:19.621]             else {
[11:01:19.621]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:01:19.621]             }
[11:01:19.621]             {
[11:01:19.621]                 if (base::length(...future.futureOptionsAdded) > 
[11:01:19.621]                   0L) {
[11:01:19.621]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:01:19.621]                   base::names(opts) <- ...future.futureOptionsAdded
[11:01:19.621]                   base::options(opts)
[11:01:19.621]                 }
[11:01:19.621]                 {
[11:01:19.621]                   {
[11:01:19.621]                     NULL
[11:01:19.621]                     RNGkind("Mersenne-Twister")
[11:01:19.621]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:01:19.621]                       inherits = FALSE)
[11:01:19.621]                   }
[11:01:19.621]                   options(future.plan = NULL)
[11:01:19.621]                   if (is.na(NA_character_)) 
[11:01:19.621]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:01:19.621]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:01:19.621]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:01:19.621]                     .init = FALSE)
[11:01:19.621]                 }
[11:01:19.621]             }
[11:01:19.621]         }
[11:01:19.621]     })
[11:01:19.621]     if (TRUE) {
[11:01:19.621]         base::sink(type = "output", split = FALSE)
[11:01:19.621]         if (TRUE) {
[11:01:19.621]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:01:19.621]         }
[11:01:19.621]         else {
[11:01:19.621]             ...future.result["stdout"] <- base::list(NULL)
[11:01:19.621]         }
[11:01:19.621]         base::close(...future.stdout)
[11:01:19.621]         ...future.stdout <- NULL
[11:01:19.621]     }
[11:01:19.621]     ...future.result$conditions <- ...future.conditions
[11:01:19.621]     ...future.result$finished <- base::Sys.time()
[11:01:19.621]     ...future.result
[11:01:19.621] }
[11:01:19.622] assign_globals() ...
[11:01:19.622] List of 2
[11:01:19.622]  $ rr: int 3
[11:01:19.622]  $ cc: int 2
[11:01:19.622]  - attr(*, "where")=List of 2
[11:01:19.622]   ..$ rr:<environment: R_EmptyEnv> 
[11:01:19.622]   ..$ cc:<environment: R_EmptyEnv> 
[11:01:19.622]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:01:19.622]  - attr(*, "resolved")= logi FALSE
[11:01:19.622]  - attr(*, "total_size")= num 70
[11:01:19.622]  - attr(*, "already-done")= logi TRUE
[11:01:19.625] - copied ‘rr’ to environment
[11:01:19.625] - copied ‘cc’ to environment
[11:01:19.625] assign_globals() ... done
[11:01:19.626] plan(): Setting new future strategy stack:
[11:01:19.626] List of future strategies:
[11:01:19.626] 1. sequential:
[11:01:19.626]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.626]    - tweaked: FALSE
[11:01:19.626]    - call: NULL
[11:01:19.626] plan(): nbrOfWorkers() = 1
[11:01:19.627] plan(): Setting new future strategy stack:
[11:01:19.627] List of future strategies:
[11:01:19.627] 1. sequential:
[11:01:19.627]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.627]    - tweaked: FALSE
[11:01:19.627]    - call: future::plan("sequential")
[11:01:19.627] plan(): nbrOfWorkers() = 1
[11:01:19.627] SequentialFuture started (and completed)
[11:01:19.627] - Launch lazy future ... done
[11:01:19.628] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[11:01:19.628] plan(): Setting new future strategy stack:
[11:01:19.628] List of future strategies:
[11:01:19.628] 1. FutureStrategy:
[11:01:19.628]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:01:19.628]    - tweaked: FALSE
[11:01:19.628]    - call: future::plan(oplan)
[11:01:19.640] plan(): nbrOfWorkers() = 1
> 
