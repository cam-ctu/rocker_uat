
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[08:27:40.576] plan(): Setting new future strategy stack:
[08:27:40.577] List of future strategies:
[08:27:40.577] 1. sequential:
[08:27:40.577]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.577]    - tweaked: FALSE
[08:27:40.577]    - call: future::plan("sequential")
[08:27:40.592] plan(): nbrOfWorkers() = 1
> library("listenv")
> 
> message("*** %<-% to listenv ...")
*** %<-% to listenv ...
> 
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> ## Future assignment via infix operator
> ## - - - - - - - - - - - - - - - - - - - - - - - - - - - -
> z <- listenv()
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Assign by index")
*** %<-% to listenv: Assign by index
> z[[1]] %<-% { 2 } %lazy% TRUE
[08:27:40.613] getGlobalsAndPackages() ...
[08:27:40.613] Searching for globals...
[08:27:40.616] - globals found: [1] ‘{’
[08:27:40.616] Searching for globals ... DONE
[08:27:40.617] Resolving globals: FALSE
[08:27:40.617] 
[08:27:40.617] 
[08:27:40.617] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[1]] %<-% { 2 } %lazy% TRUE
[08:27:40.618] getGlobalsAndPackages() ...
[08:27:40.618] Searching for globals...
[08:27:40.619] - globals found: [1] ‘{’
[08:27:40.619] Searching for globals ... DONE
[08:27:40.619] Resolving globals: FALSE
[08:27:40.619] 
[08:27:40.619] 
[08:27:40.619] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 1)
> stopifnot(length(names(z)) == 0)
> 
> z[[4]] %<-% { "async!" } %lazy% TRUE
[08:27:40.620] getGlobalsAndPackages() ...
[08:27:40.620] Searching for globals...
[08:27:40.621] - globals found: [1] ‘{’
[08:27:40.621] Searching for globals ... DONE
[08:27:40.621] Resolving globals: FALSE
[08:27:40.621] 
[08:27:40.621] 
[08:27:40.621] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(length(names(z)) == 0)
> 
> message("*** %<-% to listenv: Update names")
*** %<-% to listenv: Update names
> names(z) <- c("A", "B", "C", "D")
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Assign by name (existing)")
*** %<-% to listenv: Assign by name (existing)
> z$B %<-% { TRUE } %lazy% TRUE
[08:27:40.622] getGlobalsAndPackages() ...
[08:27:40.622] Searching for globals...
[08:27:40.623] - globals found: [1] ‘{’
[08:27:40.623] Searching for globals ... DONE
[08:27:40.623] Resolving globals: FALSE
[08:27:40.623] 
[08:27:40.623] 
[08:27:40.623] getGlobalsAndPackages() ... DONE
> stopifnot(length(z) == 4)
> stopifnot(identical(names(z), c("A", "B", "C", "D")))
> 
> y <- as.list(z)
[08:27:40.624] run() for ‘Future’ ...
[08:27:40.624] - state: ‘created’
[08:27:40.624] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.625] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.625] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.625]   - Field: ‘label’
[08:27:40.625]   - Field: ‘local’
[08:27:40.625]   - Field: ‘owner’
[08:27:40.625]   - Field: ‘envir’
[08:27:40.625]   - Field: ‘packages’
[08:27:40.625]   - Field: ‘gc’
[08:27:40.625]   - Field: ‘conditions’
[08:27:40.626]   - Field: ‘expr’
[08:27:40.626]   - Field: ‘uuid’
[08:27:40.626]   - Field: ‘seed’
[08:27:40.626]   - Field: ‘version’
[08:27:40.626]   - Field: ‘result’
[08:27:40.626]   - Field: ‘asynchronous’
[08:27:40.626]   - Field: ‘calls’
[08:27:40.626]   - Field: ‘globals’
[08:27:40.626]   - Field: ‘stdout’
[08:27:40.626]   - Field: ‘earlySignal’
[08:27:40.626]   - Field: ‘lazy’
[08:27:40.627]   - Field: ‘state’
[08:27:40.627] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.627] - Launch lazy future ...
[08:27:40.627] Packages needed by the future expression (n = 0): <none>
[08:27:40.628] Packages needed by future strategies (n = 0): <none>
[08:27:40.628] {
[08:27:40.628]     {
[08:27:40.628]         {
[08:27:40.628]             ...future.startTime <- base::Sys.time()
[08:27:40.628]             {
[08:27:40.628]                 {
[08:27:40.628]                   {
[08:27:40.628]                     base::local({
[08:27:40.628]                       has_future <- base::requireNamespace("future", 
[08:27:40.628]                         quietly = TRUE)
[08:27:40.628]                       if (has_future) {
[08:27:40.628]                         ns <- base::getNamespace("future")
[08:27:40.628]                         version <- ns[[".package"]][["version"]]
[08:27:40.628]                         if (is.null(version)) 
[08:27:40.628]                           version <- utils::packageVersion("future")
[08:27:40.628]                       }
[08:27:40.628]                       else {
[08:27:40.628]                         version <- NULL
[08:27:40.628]                       }
[08:27:40.628]                       if (!has_future || version < "1.8.0") {
[08:27:40.628]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.628]                           "", base::R.version$version.string), 
[08:27:40.628]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.628]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.628]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.628]                             "release", "version")], collapse = " "), 
[08:27:40.628]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.628]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.628]                           info)
[08:27:40.628]                         info <- base::paste(info, collapse = "; ")
[08:27:40.628]                         if (!has_future) {
[08:27:40.628]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.628]                             info)
[08:27:40.628]                         }
[08:27:40.628]                         else {
[08:27:40.628]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.628]                             info, version)
[08:27:40.628]                         }
[08:27:40.628]                         base::stop(msg)
[08:27:40.628]                       }
[08:27:40.628]                     })
[08:27:40.628]                   }
[08:27:40.628]                   ...future.strategy.old <- future::plan("list")
[08:27:40.628]                   options(future.plan = NULL)
[08:27:40.628]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.628]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.628]                 }
[08:27:40.628]                 ...future.workdir <- getwd()
[08:27:40.628]             }
[08:27:40.628]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.628]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.628]         }
[08:27:40.628]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.628]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.628]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.628]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.628]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.628]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.628]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.628]             base::names(...future.oldOptions))
[08:27:40.628]     }
[08:27:40.628]     if (FALSE) {
[08:27:40.628]     }
[08:27:40.628]     else {
[08:27:40.628]         if (TRUE) {
[08:27:40.628]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.628]                 open = "w")
[08:27:40.628]         }
[08:27:40.628]         else {
[08:27:40.628]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.628]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.628]         }
[08:27:40.628]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.628]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.628]             base::sink(type = "output", split = FALSE)
[08:27:40.628]             base::close(...future.stdout)
[08:27:40.628]         }, add = TRUE)
[08:27:40.628]     }
[08:27:40.628]     ...future.frame <- base::sys.nframe()
[08:27:40.628]     ...future.conditions <- base::list()
[08:27:40.628]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.628]     if (FALSE) {
[08:27:40.628]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.628]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.628]     }
[08:27:40.628]     ...future.result <- base::tryCatch({
[08:27:40.628]         base::withCallingHandlers({
[08:27:40.628]             ...future.value <- base::withVisible(base::local({
[08:27:40.628]                 2
[08:27:40.628]             }))
[08:27:40.628]             future::FutureResult(value = ...future.value$value, 
[08:27:40.628]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.628]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.628]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.628]                     ...future.globalenv.names))
[08:27:40.628]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.628]         }, condition = base::local({
[08:27:40.628]             c <- base::c
[08:27:40.628]             inherits <- base::inherits
[08:27:40.628]             invokeRestart <- base::invokeRestart
[08:27:40.628]             length <- base::length
[08:27:40.628]             list <- base::list
[08:27:40.628]             seq.int <- base::seq.int
[08:27:40.628]             signalCondition <- base::signalCondition
[08:27:40.628]             sys.calls <- base::sys.calls
[08:27:40.628]             `[[` <- base::`[[`
[08:27:40.628]             `+` <- base::`+`
[08:27:40.628]             `<<-` <- base::`<<-`
[08:27:40.628]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.628]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.628]                   3L)]
[08:27:40.628]             }
[08:27:40.628]             function(cond) {
[08:27:40.628]                 is_error <- inherits(cond, "error")
[08:27:40.628]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.628]                   NULL)
[08:27:40.628]                 if (is_error) {
[08:27:40.628]                   sessionInformation <- function() {
[08:27:40.628]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.628]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.628]                       search = base::search(), system = base::Sys.info())
[08:27:40.628]                   }
[08:27:40.628]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.628]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.628]                     cond$call), session = sessionInformation(), 
[08:27:40.628]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.628]                   signalCondition(cond)
[08:27:40.628]                 }
[08:27:40.628]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.628]                 "immediateCondition"))) {
[08:27:40.628]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.628]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.628]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.628]                   if (TRUE && !signal) {
[08:27:40.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.628]                     {
[08:27:40.628]                       inherits <- base::inherits
[08:27:40.628]                       invokeRestart <- base::invokeRestart
[08:27:40.628]                       is.null <- base::is.null
[08:27:40.628]                       muffled <- FALSE
[08:27:40.628]                       if (inherits(cond, "message")) {
[08:27:40.628]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.628]                         if (muffled) 
[08:27:40.628]                           invokeRestart("muffleMessage")
[08:27:40.628]                       }
[08:27:40.628]                       else if (inherits(cond, "warning")) {
[08:27:40.628]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.628]                         if (muffled) 
[08:27:40.628]                           invokeRestart("muffleWarning")
[08:27:40.628]                       }
[08:27:40.628]                       else if (inherits(cond, "condition")) {
[08:27:40.628]                         if (!is.null(pattern)) {
[08:27:40.628]                           computeRestarts <- base::computeRestarts
[08:27:40.628]                           grepl <- base::grepl
[08:27:40.628]                           restarts <- computeRestarts(cond)
[08:27:40.628]                           for (restart in restarts) {
[08:27:40.628]                             name <- restart$name
[08:27:40.628]                             if (is.null(name)) 
[08:27:40.628]                               next
[08:27:40.628]                             if (!grepl(pattern, name)) 
[08:27:40.628]                               next
[08:27:40.628]                             invokeRestart(restart)
[08:27:40.628]                             muffled <- TRUE
[08:27:40.628]                             break
[08:27:40.628]                           }
[08:27:40.628]                         }
[08:27:40.628]                       }
[08:27:40.628]                       invisible(muffled)
[08:27:40.628]                     }
[08:27:40.628]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.628]                   }
[08:27:40.628]                 }
[08:27:40.628]                 else {
[08:27:40.628]                   if (TRUE) {
[08:27:40.628]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.628]                     {
[08:27:40.628]                       inherits <- base::inherits
[08:27:40.628]                       invokeRestart <- base::invokeRestart
[08:27:40.628]                       is.null <- base::is.null
[08:27:40.628]                       muffled <- FALSE
[08:27:40.628]                       if (inherits(cond, "message")) {
[08:27:40.628]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.628]                         if (muffled) 
[08:27:40.628]                           invokeRestart("muffleMessage")
[08:27:40.628]                       }
[08:27:40.628]                       else if (inherits(cond, "warning")) {
[08:27:40.628]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.628]                         if (muffled) 
[08:27:40.628]                           invokeRestart("muffleWarning")
[08:27:40.628]                       }
[08:27:40.628]                       else if (inherits(cond, "condition")) {
[08:27:40.628]                         if (!is.null(pattern)) {
[08:27:40.628]                           computeRestarts <- base::computeRestarts
[08:27:40.628]                           grepl <- base::grepl
[08:27:40.628]                           restarts <- computeRestarts(cond)
[08:27:40.628]                           for (restart in restarts) {
[08:27:40.628]                             name <- restart$name
[08:27:40.628]                             if (is.null(name)) 
[08:27:40.628]                               next
[08:27:40.628]                             if (!grepl(pattern, name)) 
[08:27:40.628]                               next
[08:27:40.628]                             invokeRestart(restart)
[08:27:40.628]                             muffled <- TRUE
[08:27:40.628]                             break
[08:27:40.628]                           }
[08:27:40.628]                         }
[08:27:40.628]                       }
[08:27:40.628]                       invisible(muffled)
[08:27:40.628]                     }
[08:27:40.628]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.628]                   }
[08:27:40.628]                 }
[08:27:40.628]             }
[08:27:40.628]         }))
[08:27:40.628]     }, error = function(ex) {
[08:27:40.628]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.628]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.628]                 ...future.rng), started = ...future.startTime, 
[08:27:40.628]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.628]             version = "1.8"), class = "FutureResult")
[08:27:40.628]     }, finally = {
[08:27:40.628]         if (!identical(...future.workdir, getwd())) 
[08:27:40.628]             setwd(...future.workdir)
[08:27:40.628]         {
[08:27:40.628]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.628]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.628]             }
[08:27:40.628]             base::options(...future.oldOptions)
[08:27:40.628]             if (.Platform$OS.type == "windows") {
[08:27:40.628]                 old_names <- names(...future.oldEnvVars)
[08:27:40.628]                 envs <- base::Sys.getenv()
[08:27:40.628]                 names <- names(envs)
[08:27:40.628]                 common <- intersect(names, old_names)
[08:27:40.628]                 added <- setdiff(names, old_names)
[08:27:40.628]                 removed <- setdiff(old_names, names)
[08:27:40.628]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.628]                   envs[common]]
[08:27:40.628]                 NAMES <- toupper(changed)
[08:27:40.628]                 args <- list()
[08:27:40.628]                 for (kk in seq_along(NAMES)) {
[08:27:40.628]                   name <- changed[[kk]]
[08:27:40.628]                   NAME <- NAMES[[kk]]
[08:27:40.628]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.628]                     next
[08:27:40.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.628]                 }
[08:27:40.628]                 NAMES <- toupper(added)
[08:27:40.628]                 for (kk in seq_along(NAMES)) {
[08:27:40.628]                   name <- added[[kk]]
[08:27:40.628]                   NAME <- NAMES[[kk]]
[08:27:40.628]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.628]                     next
[08:27:40.628]                   args[[name]] <- ""
[08:27:40.628]                 }
[08:27:40.628]                 NAMES <- toupper(removed)
[08:27:40.628]                 for (kk in seq_along(NAMES)) {
[08:27:40.628]                   name <- removed[[kk]]
[08:27:40.628]                   NAME <- NAMES[[kk]]
[08:27:40.628]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.628]                     next
[08:27:40.628]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.628]                 }
[08:27:40.628]                 if (length(args) > 0) 
[08:27:40.628]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.628]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.628]             }
[08:27:40.628]             else {
[08:27:40.628]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.628]             }
[08:27:40.628]             {
[08:27:40.628]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.628]                   0L) {
[08:27:40.628]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.628]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.628]                   base::options(opts)
[08:27:40.628]                 }
[08:27:40.628]                 {
[08:27:40.628]                   {
[08:27:40.628]                     NULL
[08:27:40.628]                     RNGkind("Mersenne-Twister")
[08:27:40.628]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.628]                       inherits = FALSE)
[08:27:40.628]                   }
[08:27:40.628]                   options(future.plan = NULL)
[08:27:40.628]                   if (is.na(NA_character_)) 
[08:27:40.628]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.628]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.628]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.628]                     .init = FALSE)
[08:27:40.628]                 }
[08:27:40.628]             }
[08:27:40.628]         }
[08:27:40.628]     })
[08:27:40.628]     if (TRUE) {
[08:27:40.628]         base::sink(type = "output", split = FALSE)
[08:27:40.628]         if (TRUE) {
[08:27:40.628]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.628]         }
[08:27:40.628]         else {
[08:27:40.628]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.628]         }
[08:27:40.628]         base::close(...future.stdout)
[08:27:40.628]         ...future.stdout <- NULL
[08:27:40.628]     }
[08:27:40.628]     ...future.result$conditions <- ...future.conditions
[08:27:40.628]     ...future.result$finished <- base::Sys.time()
[08:27:40.628]     ...future.result
[08:27:40.628] }
[08:27:40.630] plan(): Setting new future strategy stack:
[08:27:40.630] List of future strategies:
[08:27:40.630] 1. sequential:
[08:27:40.630]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.630]    - tweaked: FALSE
[08:27:40.630]    - call: NULL
[08:27:40.631] plan(): nbrOfWorkers() = 1
[08:27:40.632] plan(): Setting new future strategy stack:
[08:27:40.632] List of future strategies:
[08:27:40.632] 1. sequential:
[08:27:40.632]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.632]    - tweaked: FALSE
[08:27:40.632]    - call: future::plan("sequential")
[08:27:40.633] plan(): nbrOfWorkers() = 1
[08:27:40.633] SequentialFuture started (and completed)
[08:27:40.633] - Launch lazy future ... done
[08:27:40.633] run() for ‘SequentialFuture’ ... done
[08:27:40.634] run() for ‘Future’ ...
[08:27:40.634] - state: ‘created’
[08:27:40.634] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.634] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.634] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.634]   - Field: ‘label’
[08:27:40.634]   - Field: ‘local’
[08:27:40.635]   - Field: ‘owner’
[08:27:40.635]   - Field: ‘envir’
[08:27:40.635]   - Field: ‘packages’
[08:27:40.635]   - Field: ‘gc’
[08:27:40.635]   - Field: ‘conditions’
[08:27:40.635]   - Field: ‘expr’
[08:27:40.635]   - Field: ‘uuid’
[08:27:40.635]   - Field: ‘seed’
[08:27:40.635]   - Field: ‘version’
[08:27:40.635]   - Field: ‘result’
[08:27:40.635]   - Field: ‘asynchronous’
[08:27:40.635]   - Field: ‘calls’
[08:27:40.636]   - Field: ‘globals’
[08:27:40.636]   - Field: ‘stdout’
[08:27:40.636]   - Field: ‘earlySignal’
[08:27:40.636]   - Field: ‘lazy’
[08:27:40.636]   - Field: ‘state’
[08:27:40.636] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.636] - Launch lazy future ...
[08:27:40.636] Packages needed by the future expression (n = 0): <none>
[08:27:40.636] Packages needed by future strategies (n = 0): <none>
[08:27:40.637] {
[08:27:40.637]     {
[08:27:40.637]         {
[08:27:40.637]             ...future.startTime <- base::Sys.time()
[08:27:40.637]             {
[08:27:40.637]                 {
[08:27:40.637]                   {
[08:27:40.637]                     base::local({
[08:27:40.637]                       has_future <- base::requireNamespace("future", 
[08:27:40.637]                         quietly = TRUE)
[08:27:40.637]                       if (has_future) {
[08:27:40.637]                         ns <- base::getNamespace("future")
[08:27:40.637]                         version <- ns[[".package"]][["version"]]
[08:27:40.637]                         if (is.null(version)) 
[08:27:40.637]                           version <- utils::packageVersion("future")
[08:27:40.637]                       }
[08:27:40.637]                       else {
[08:27:40.637]                         version <- NULL
[08:27:40.637]                       }
[08:27:40.637]                       if (!has_future || version < "1.8.0") {
[08:27:40.637]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.637]                           "", base::R.version$version.string), 
[08:27:40.637]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.637]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.637]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.637]                             "release", "version")], collapse = " "), 
[08:27:40.637]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.637]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.637]                           info)
[08:27:40.637]                         info <- base::paste(info, collapse = "; ")
[08:27:40.637]                         if (!has_future) {
[08:27:40.637]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.637]                             info)
[08:27:40.637]                         }
[08:27:40.637]                         else {
[08:27:40.637]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.637]                             info, version)
[08:27:40.637]                         }
[08:27:40.637]                         base::stop(msg)
[08:27:40.637]                       }
[08:27:40.637]                     })
[08:27:40.637]                   }
[08:27:40.637]                   ...future.strategy.old <- future::plan("list")
[08:27:40.637]                   options(future.plan = NULL)
[08:27:40.637]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.637]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.637]                 }
[08:27:40.637]                 ...future.workdir <- getwd()
[08:27:40.637]             }
[08:27:40.637]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.637]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.637]         }
[08:27:40.637]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.637]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.637]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.637]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.637]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.637]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.637]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.637]             base::names(...future.oldOptions))
[08:27:40.637]     }
[08:27:40.637]     if (FALSE) {
[08:27:40.637]     }
[08:27:40.637]     else {
[08:27:40.637]         if (TRUE) {
[08:27:40.637]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.637]                 open = "w")
[08:27:40.637]         }
[08:27:40.637]         else {
[08:27:40.637]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.637]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.637]         }
[08:27:40.637]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.637]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.637]             base::sink(type = "output", split = FALSE)
[08:27:40.637]             base::close(...future.stdout)
[08:27:40.637]         }, add = TRUE)
[08:27:40.637]     }
[08:27:40.637]     ...future.frame <- base::sys.nframe()
[08:27:40.637]     ...future.conditions <- base::list()
[08:27:40.637]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.637]     if (FALSE) {
[08:27:40.637]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.637]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.637]     }
[08:27:40.637]     ...future.result <- base::tryCatch({
[08:27:40.637]         base::withCallingHandlers({
[08:27:40.637]             ...future.value <- base::withVisible(base::local({
[08:27:40.637]                 "async!"
[08:27:40.637]             }))
[08:27:40.637]             future::FutureResult(value = ...future.value$value, 
[08:27:40.637]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.637]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.637]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.637]                     ...future.globalenv.names))
[08:27:40.637]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.637]         }, condition = base::local({
[08:27:40.637]             c <- base::c
[08:27:40.637]             inherits <- base::inherits
[08:27:40.637]             invokeRestart <- base::invokeRestart
[08:27:40.637]             length <- base::length
[08:27:40.637]             list <- base::list
[08:27:40.637]             seq.int <- base::seq.int
[08:27:40.637]             signalCondition <- base::signalCondition
[08:27:40.637]             sys.calls <- base::sys.calls
[08:27:40.637]             `[[` <- base::`[[`
[08:27:40.637]             `+` <- base::`+`
[08:27:40.637]             `<<-` <- base::`<<-`
[08:27:40.637]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.637]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.637]                   3L)]
[08:27:40.637]             }
[08:27:40.637]             function(cond) {
[08:27:40.637]                 is_error <- inherits(cond, "error")
[08:27:40.637]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.637]                   NULL)
[08:27:40.637]                 if (is_error) {
[08:27:40.637]                   sessionInformation <- function() {
[08:27:40.637]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.637]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.637]                       search = base::search(), system = base::Sys.info())
[08:27:40.637]                   }
[08:27:40.637]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.637]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.637]                     cond$call), session = sessionInformation(), 
[08:27:40.637]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.637]                   signalCondition(cond)
[08:27:40.637]                 }
[08:27:40.637]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.637]                 "immediateCondition"))) {
[08:27:40.637]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.637]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.637]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.637]                   if (TRUE && !signal) {
[08:27:40.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.637]                     {
[08:27:40.637]                       inherits <- base::inherits
[08:27:40.637]                       invokeRestart <- base::invokeRestart
[08:27:40.637]                       is.null <- base::is.null
[08:27:40.637]                       muffled <- FALSE
[08:27:40.637]                       if (inherits(cond, "message")) {
[08:27:40.637]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.637]                         if (muffled) 
[08:27:40.637]                           invokeRestart("muffleMessage")
[08:27:40.637]                       }
[08:27:40.637]                       else if (inherits(cond, "warning")) {
[08:27:40.637]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.637]                         if (muffled) 
[08:27:40.637]                           invokeRestart("muffleWarning")
[08:27:40.637]                       }
[08:27:40.637]                       else if (inherits(cond, "condition")) {
[08:27:40.637]                         if (!is.null(pattern)) {
[08:27:40.637]                           computeRestarts <- base::computeRestarts
[08:27:40.637]                           grepl <- base::grepl
[08:27:40.637]                           restarts <- computeRestarts(cond)
[08:27:40.637]                           for (restart in restarts) {
[08:27:40.637]                             name <- restart$name
[08:27:40.637]                             if (is.null(name)) 
[08:27:40.637]                               next
[08:27:40.637]                             if (!grepl(pattern, name)) 
[08:27:40.637]                               next
[08:27:40.637]                             invokeRestart(restart)
[08:27:40.637]                             muffled <- TRUE
[08:27:40.637]                             break
[08:27:40.637]                           }
[08:27:40.637]                         }
[08:27:40.637]                       }
[08:27:40.637]                       invisible(muffled)
[08:27:40.637]                     }
[08:27:40.637]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.637]                   }
[08:27:40.637]                 }
[08:27:40.637]                 else {
[08:27:40.637]                   if (TRUE) {
[08:27:40.637]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.637]                     {
[08:27:40.637]                       inherits <- base::inherits
[08:27:40.637]                       invokeRestart <- base::invokeRestart
[08:27:40.637]                       is.null <- base::is.null
[08:27:40.637]                       muffled <- FALSE
[08:27:40.637]                       if (inherits(cond, "message")) {
[08:27:40.637]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.637]                         if (muffled) 
[08:27:40.637]                           invokeRestart("muffleMessage")
[08:27:40.637]                       }
[08:27:40.637]                       else if (inherits(cond, "warning")) {
[08:27:40.637]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.637]                         if (muffled) 
[08:27:40.637]                           invokeRestart("muffleWarning")
[08:27:40.637]                       }
[08:27:40.637]                       else if (inherits(cond, "condition")) {
[08:27:40.637]                         if (!is.null(pattern)) {
[08:27:40.637]                           computeRestarts <- base::computeRestarts
[08:27:40.637]                           grepl <- base::grepl
[08:27:40.637]                           restarts <- computeRestarts(cond)
[08:27:40.637]                           for (restart in restarts) {
[08:27:40.637]                             name <- restart$name
[08:27:40.637]                             if (is.null(name)) 
[08:27:40.637]                               next
[08:27:40.637]                             if (!grepl(pattern, name)) 
[08:27:40.637]                               next
[08:27:40.637]                             invokeRestart(restart)
[08:27:40.637]                             muffled <- TRUE
[08:27:40.637]                             break
[08:27:40.637]                           }
[08:27:40.637]                         }
[08:27:40.637]                       }
[08:27:40.637]                       invisible(muffled)
[08:27:40.637]                     }
[08:27:40.637]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.637]                   }
[08:27:40.637]                 }
[08:27:40.637]             }
[08:27:40.637]         }))
[08:27:40.637]     }, error = function(ex) {
[08:27:40.637]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.637]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.637]                 ...future.rng), started = ...future.startTime, 
[08:27:40.637]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.637]             version = "1.8"), class = "FutureResult")
[08:27:40.637]     }, finally = {
[08:27:40.637]         if (!identical(...future.workdir, getwd())) 
[08:27:40.637]             setwd(...future.workdir)
[08:27:40.637]         {
[08:27:40.637]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.637]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.637]             }
[08:27:40.637]             base::options(...future.oldOptions)
[08:27:40.637]             if (.Platform$OS.type == "windows") {
[08:27:40.637]                 old_names <- names(...future.oldEnvVars)
[08:27:40.637]                 envs <- base::Sys.getenv()
[08:27:40.637]                 names <- names(envs)
[08:27:40.637]                 common <- intersect(names, old_names)
[08:27:40.637]                 added <- setdiff(names, old_names)
[08:27:40.637]                 removed <- setdiff(old_names, names)
[08:27:40.637]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.637]                   envs[common]]
[08:27:40.637]                 NAMES <- toupper(changed)
[08:27:40.637]                 args <- list()
[08:27:40.637]                 for (kk in seq_along(NAMES)) {
[08:27:40.637]                   name <- changed[[kk]]
[08:27:40.637]                   NAME <- NAMES[[kk]]
[08:27:40.637]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.637]                     next
[08:27:40.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.637]                 }
[08:27:40.637]                 NAMES <- toupper(added)
[08:27:40.637]                 for (kk in seq_along(NAMES)) {
[08:27:40.637]                   name <- added[[kk]]
[08:27:40.637]                   NAME <- NAMES[[kk]]
[08:27:40.637]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.637]                     next
[08:27:40.637]                   args[[name]] <- ""
[08:27:40.637]                 }
[08:27:40.637]                 NAMES <- toupper(removed)
[08:27:40.637]                 for (kk in seq_along(NAMES)) {
[08:27:40.637]                   name <- removed[[kk]]
[08:27:40.637]                   NAME <- NAMES[[kk]]
[08:27:40.637]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.637]                     next
[08:27:40.637]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.637]                 }
[08:27:40.637]                 if (length(args) > 0) 
[08:27:40.637]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.637]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.637]             }
[08:27:40.637]             else {
[08:27:40.637]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.637]             }
[08:27:40.637]             {
[08:27:40.637]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.637]                   0L) {
[08:27:40.637]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.637]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.637]                   base::options(opts)
[08:27:40.637]                 }
[08:27:40.637]                 {
[08:27:40.637]                   {
[08:27:40.637]                     NULL
[08:27:40.637]                     RNGkind("Mersenne-Twister")
[08:27:40.637]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.637]                       inherits = FALSE)
[08:27:40.637]                   }
[08:27:40.637]                   options(future.plan = NULL)
[08:27:40.637]                   if (is.na(NA_character_)) 
[08:27:40.637]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.637]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.637]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.637]                     .init = FALSE)
[08:27:40.637]                 }
[08:27:40.637]             }
[08:27:40.637]         }
[08:27:40.637]     })
[08:27:40.637]     if (TRUE) {
[08:27:40.637]         base::sink(type = "output", split = FALSE)
[08:27:40.637]         if (TRUE) {
[08:27:40.637]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.637]         }
[08:27:40.637]         else {
[08:27:40.637]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.637]         }
[08:27:40.637]         base::close(...future.stdout)
[08:27:40.637]         ...future.stdout <- NULL
[08:27:40.637]     }
[08:27:40.637]     ...future.result$conditions <- ...future.conditions
[08:27:40.637]     ...future.result$finished <- base::Sys.time()
[08:27:40.637]     ...future.result
[08:27:40.637] }
[08:27:40.639] plan(): Setting new future strategy stack:
[08:27:40.639] List of future strategies:
[08:27:40.639] 1. sequential:
[08:27:40.639]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.639]    - tweaked: FALSE
[08:27:40.639]    - call: NULL
[08:27:40.639] plan(): nbrOfWorkers() = 1
[08:27:40.640] plan(): Setting new future strategy stack:
[08:27:40.640] List of future strategies:
[08:27:40.640] 1. sequential:
[08:27:40.640]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.640]    - tweaked: FALSE
[08:27:40.640]    - call: future::plan("sequential")
[08:27:40.641] plan(): nbrOfWorkers() = 1
[08:27:40.641] SequentialFuture started (and completed)
[08:27:40.641] - Launch lazy future ... done
[08:27:40.641] run() for ‘SequentialFuture’ ... done
> str(y)
List of 4
 $ A: num 2
 $ B: NULL
 $ C: NULL
 $ D: chr "async!"
> stopifnot(length(y) == 4)
> stopifnot(identical(names(y), c("A", "B", "C", "D")))
> 
> 
> message("*** %<-% to listenv: Asserting no name clashes among futures")
*** %<-% to listenv: Asserting no name clashes among futures
> u <- listenv()
> u$a %<-% { 1 } %lazy% TRUE
[08:27:40.649] getGlobalsAndPackages() ...
[08:27:40.649] Searching for globals...
[08:27:40.649] - globals found: [1] ‘{’
[08:27:40.650] Searching for globals ... DONE
[08:27:40.650] Resolving globals: FALSE
[08:27:40.650] 
[08:27:40.650] 
[08:27:40.650] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(u), "a"))
> fu <- futureOf(u$a)
> 
> v <- listenv()
> v$a %<-% { 2 } %lazy% TRUE
[08:27:40.651] getGlobalsAndPackages() ...
[08:27:40.651] Searching for globals...
[08:27:40.652] - globals found: [1] ‘{’
[08:27:40.652] Searching for globals ... DONE
[08:27:40.652] Resolving globals: FALSE
[08:27:40.652] 
[08:27:40.652] 
[08:27:40.652] getGlobalsAndPackages() ... DONE
> stopifnot(identical(names(v), "a"))
> fv <- futureOf(v$a)
> stopifnot(!identical(fu, fv))
> 
> fu <- futureOf(u$a)
> stopifnot(!identical(fu, fv))
> 
> stopifnot(identical(u$a, 1))
[08:27:40.653] run() for ‘Future’ ...
[08:27:40.653] - state: ‘created’
[08:27:40.653] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.654] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.654] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.654]   - Field: ‘label’
[08:27:40.654]   - Field: ‘local’
[08:27:40.654]   - Field: ‘owner’
[08:27:40.654]   - Field: ‘envir’
[08:27:40.654]   - Field: ‘packages’
[08:27:40.654]   - Field: ‘gc’
[08:27:40.654]   - Field: ‘conditions’
[08:27:40.654]   - Field: ‘expr’
[08:27:40.654]   - Field: ‘uuid’
[08:27:40.655]   - Field: ‘seed’
[08:27:40.655]   - Field: ‘version’
[08:27:40.655]   - Field: ‘result’
[08:27:40.655]   - Field: ‘asynchronous’
[08:27:40.655]   - Field: ‘calls’
[08:27:40.655]   - Field: ‘globals’
[08:27:40.655]   - Field: ‘stdout’
[08:27:40.655]   - Field: ‘earlySignal’
[08:27:40.655]   - Field: ‘lazy’
[08:27:40.655]   - Field: ‘state’
[08:27:40.655] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.656] - Launch lazy future ...
[08:27:40.656] Packages needed by the future expression (n = 0): <none>
[08:27:40.656] Packages needed by future strategies (n = 0): <none>
[08:27:40.656] {
[08:27:40.656]     {
[08:27:40.656]         {
[08:27:40.656]             ...future.startTime <- base::Sys.time()
[08:27:40.656]             {
[08:27:40.656]                 {
[08:27:40.656]                   {
[08:27:40.656]                     base::local({
[08:27:40.656]                       has_future <- base::requireNamespace("future", 
[08:27:40.656]                         quietly = TRUE)
[08:27:40.656]                       if (has_future) {
[08:27:40.656]                         ns <- base::getNamespace("future")
[08:27:40.656]                         version <- ns[[".package"]][["version"]]
[08:27:40.656]                         if (is.null(version)) 
[08:27:40.656]                           version <- utils::packageVersion("future")
[08:27:40.656]                       }
[08:27:40.656]                       else {
[08:27:40.656]                         version <- NULL
[08:27:40.656]                       }
[08:27:40.656]                       if (!has_future || version < "1.8.0") {
[08:27:40.656]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.656]                           "", base::R.version$version.string), 
[08:27:40.656]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.656]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.656]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.656]                             "release", "version")], collapse = " "), 
[08:27:40.656]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.656]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.656]                           info)
[08:27:40.656]                         info <- base::paste(info, collapse = "; ")
[08:27:40.656]                         if (!has_future) {
[08:27:40.656]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.656]                             info)
[08:27:40.656]                         }
[08:27:40.656]                         else {
[08:27:40.656]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.656]                             info, version)
[08:27:40.656]                         }
[08:27:40.656]                         base::stop(msg)
[08:27:40.656]                       }
[08:27:40.656]                     })
[08:27:40.656]                   }
[08:27:40.656]                   ...future.strategy.old <- future::plan("list")
[08:27:40.656]                   options(future.plan = NULL)
[08:27:40.656]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.656]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.656]                 }
[08:27:40.656]                 ...future.workdir <- getwd()
[08:27:40.656]             }
[08:27:40.656]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.656]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.656]         }
[08:27:40.656]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.656]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.656]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.656]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.656]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.656]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.656]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.656]             base::names(...future.oldOptions))
[08:27:40.656]     }
[08:27:40.656]     if (FALSE) {
[08:27:40.656]     }
[08:27:40.656]     else {
[08:27:40.656]         if (TRUE) {
[08:27:40.656]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.656]                 open = "w")
[08:27:40.656]         }
[08:27:40.656]         else {
[08:27:40.656]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.656]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.656]         }
[08:27:40.656]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.656]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.656]             base::sink(type = "output", split = FALSE)
[08:27:40.656]             base::close(...future.stdout)
[08:27:40.656]         }, add = TRUE)
[08:27:40.656]     }
[08:27:40.656]     ...future.frame <- base::sys.nframe()
[08:27:40.656]     ...future.conditions <- base::list()
[08:27:40.656]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.656]     if (FALSE) {
[08:27:40.656]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.656]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.656]     }
[08:27:40.656]     ...future.result <- base::tryCatch({
[08:27:40.656]         base::withCallingHandlers({
[08:27:40.656]             ...future.value <- base::withVisible(base::local({
[08:27:40.656]                 1
[08:27:40.656]             }))
[08:27:40.656]             future::FutureResult(value = ...future.value$value, 
[08:27:40.656]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.656]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.656]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.656]                     ...future.globalenv.names))
[08:27:40.656]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.656]         }, condition = base::local({
[08:27:40.656]             c <- base::c
[08:27:40.656]             inherits <- base::inherits
[08:27:40.656]             invokeRestart <- base::invokeRestart
[08:27:40.656]             length <- base::length
[08:27:40.656]             list <- base::list
[08:27:40.656]             seq.int <- base::seq.int
[08:27:40.656]             signalCondition <- base::signalCondition
[08:27:40.656]             sys.calls <- base::sys.calls
[08:27:40.656]             `[[` <- base::`[[`
[08:27:40.656]             `+` <- base::`+`
[08:27:40.656]             `<<-` <- base::`<<-`
[08:27:40.656]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.656]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.656]                   3L)]
[08:27:40.656]             }
[08:27:40.656]             function(cond) {
[08:27:40.656]                 is_error <- inherits(cond, "error")
[08:27:40.656]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.656]                   NULL)
[08:27:40.656]                 if (is_error) {
[08:27:40.656]                   sessionInformation <- function() {
[08:27:40.656]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.656]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.656]                       search = base::search(), system = base::Sys.info())
[08:27:40.656]                   }
[08:27:40.656]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.656]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.656]                     cond$call), session = sessionInformation(), 
[08:27:40.656]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.656]                   signalCondition(cond)
[08:27:40.656]                 }
[08:27:40.656]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.656]                 "immediateCondition"))) {
[08:27:40.656]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.656]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.656]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.656]                   if (TRUE && !signal) {
[08:27:40.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.656]                     {
[08:27:40.656]                       inherits <- base::inherits
[08:27:40.656]                       invokeRestart <- base::invokeRestart
[08:27:40.656]                       is.null <- base::is.null
[08:27:40.656]                       muffled <- FALSE
[08:27:40.656]                       if (inherits(cond, "message")) {
[08:27:40.656]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.656]                         if (muffled) 
[08:27:40.656]                           invokeRestart("muffleMessage")
[08:27:40.656]                       }
[08:27:40.656]                       else if (inherits(cond, "warning")) {
[08:27:40.656]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.656]                         if (muffled) 
[08:27:40.656]                           invokeRestart("muffleWarning")
[08:27:40.656]                       }
[08:27:40.656]                       else if (inherits(cond, "condition")) {
[08:27:40.656]                         if (!is.null(pattern)) {
[08:27:40.656]                           computeRestarts <- base::computeRestarts
[08:27:40.656]                           grepl <- base::grepl
[08:27:40.656]                           restarts <- computeRestarts(cond)
[08:27:40.656]                           for (restart in restarts) {
[08:27:40.656]                             name <- restart$name
[08:27:40.656]                             if (is.null(name)) 
[08:27:40.656]                               next
[08:27:40.656]                             if (!grepl(pattern, name)) 
[08:27:40.656]                               next
[08:27:40.656]                             invokeRestart(restart)
[08:27:40.656]                             muffled <- TRUE
[08:27:40.656]                             break
[08:27:40.656]                           }
[08:27:40.656]                         }
[08:27:40.656]                       }
[08:27:40.656]                       invisible(muffled)
[08:27:40.656]                     }
[08:27:40.656]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.656]                   }
[08:27:40.656]                 }
[08:27:40.656]                 else {
[08:27:40.656]                   if (TRUE) {
[08:27:40.656]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.656]                     {
[08:27:40.656]                       inherits <- base::inherits
[08:27:40.656]                       invokeRestart <- base::invokeRestart
[08:27:40.656]                       is.null <- base::is.null
[08:27:40.656]                       muffled <- FALSE
[08:27:40.656]                       if (inherits(cond, "message")) {
[08:27:40.656]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.656]                         if (muffled) 
[08:27:40.656]                           invokeRestart("muffleMessage")
[08:27:40.656]                       }
[08:27:40.656]                       else if (inherits(cond, "warning")) {
[08:27:40.656]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.656]                         if (muffled) 
[08:27:40.656]                           invokeRestart("muffleWarning")
[08:27:40.656]                       }
[08:27:40.656]                       else if (inherits(cond, "condition")) {
[08:27:40.656]                         if (!is.null(pattern)) {
[08:27:40.656]                           computeRestarts <- base::computeRestarts
[08:27:40.656]                           grepl <- base::grepl
[08:27:40.656]                           restarts <- computeRestarts(cond)
[08:27:40.656]                           for (restart in restarts) {
[08:27:40.656]                             name <- restart$name
[08:27:40.656]                             if (is.null(name)) 
[08:27:40.656]                               next
[08:27:40.656]                             if (!grepl(pattern, name)) 
[08:27:40.656]                               next
[08:27:40.656]                             invokeRestart(restart)
[08:27:40.656]                             muffled <- TRUE
[08:27:40.656]                             break
[08:27:40.656]                           }
[08:27:40.656]                         }
[08:27:40.656]                       }
[08:27:40.656]                       invisible(muffled)
[08:27:40.656]                     }
[08:27:40.656]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.656]                   }
[08:27:40.656]                 }
[08:27:40.656]             }
[08:27:40.656]         }))
[08:27:40.656]     }, error = function(ex) {
[08:27:40.656]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.656]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.656]                 ...future.rng), started = ...future.startTime, 
[08:27:40.656]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.656]             version = "1.8"), class = "FutureResult")
[08:27:40.656]     }, finally = {
[08:27:40.656]         if (!identical(...future.workdir, getwd())) 
[08:27:40.656]             setwd(...future.workdir)
[08:27:40.656]         {
[08:27:40.656]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.656]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.656]             }
[08:27:40.656]             base::options(...future.oldOptions)
[08:27:40.656]             if (.Platform$OS.type == "windows") {
[08:27:40.656]                 old_names <- names(...future.oldEnvVars)
[08:27:40.656]                 envs <- base::Sys.getenv()
[08:27:40.656]                 names <- names(envs)
[08:27:40.656]                 common <- intersect(names, old_names)
[08:27:40.656]                 added <- setdiff(names, old_names)
[08:27:40.656]                 removed <- setdiff(old_names, names)
[08:27:40.656]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.656]                   envs[common]]
[08:27:40.656]                 NAMES <- toupper(changed)
[08:27:40.656]                 args <- list()
[08:27:40.656]                 for (kk in seq_along(NAMES)) {
[08:27:40.656]                   name <- changed[[kk]]
[08:27:40.656]                   NAME <- NAMES[[kk]]
[08:27:40.656]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.656]                     next
[08:27:40.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.656]                 }
[08:27:40.656]                 NAMES <- toupper(added)
[08:27:40.656]                 for (kk in seq_along(NAMES)) {
[08:27:40.656]                   name <- added[[kk]]
[08:27:40.656]                   NAME <- NAMES[[kk]]
[08:27:40.656]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.656]                     next
[08:27:40.656]                   args[[name]] <- ""
[08:27:40.656]                 }
[08:27:40.656]                 NAMES <- toupper(removed)
[08:27:40.656]                 for (kk in seq_along(NAMES)) {
[08:27:40.656]                   name <- removed[[kk]]
[08:27:40.656]                   NAME <- NAMES[[kk]]
[08:27:40.656]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.656]                     next
[08:27:40.656]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.656]                 }
[08:27:40.656]                 if (length(args) > 0) 
[08:27:40.656]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.656]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.656]             }
[08:27:40.656]             else {
[08:27:40.656]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.656]             }
[08:27:40.656]             {
[08:27:40.656]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.656]                   0L) {
[08:27:40.656]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.656]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.656]                   base::options(opts)
[08:27:40.656]                 }
[08:27:40.656]                 {
[08:27:40.656]                   {
[08:27:40.656]                     NULL
[08:27:40.656]                     RNGkind("Mersenne-Twister")
[08:27:40.656]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.656]                       inherits = FALSE)
[08:27:40.656]                   }
[08:27:40.656]                   options(future.plan = NULL)
[08:27:40.656]                   if (is.na(NA_character_)) 
[08:27:40.656]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.656]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.656]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.656]                     .init = FALSE)
[08:27:40.656]                 }
[08:27:40.656]             }
[08:27:40.656]         }
[08:27:40.656]     })
[08:27:40.656]     if (TRUE) {
[08:27:40.656]         base::sink(type = "output", split = FALSE)
[08:27:40.656]         if (TRUE) {
[08:27:40.656]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.656]         }
[08:27:40.656]         else {
[08:27:40.656]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.656]         }
[08:27:40.656]         base::close(...future.stdout)
[08:27:40.656]         ...future.stdout <- NULL
[08:27:40.656]     }
[08:27:40.656]     ...future.result$conditions <- ...future.conditions
[08:27:40.656]     ...future.result$finished <- base::Sys.time()
[08:27:40.656]     ...future.result
[08:27:40.656] }
[08:27:40.658] plan(): Setting new future strategy stack:
[08:27:40.658] List of future strategies:
[08:27:40.658] 1. sequential:
[08:27:40.658]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.658]    - tweaked: FALSE
[08:27:40.658]    - call: NULL
[08:27:40.659] plan(): nbrOfWorkers() = 1
[08:27:40.659] plan(): Setting new future strategy stack:
[08:27:40.660] List of future strategies:
[08:27:40.660] 1. sequential:
[08:27:40.660]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.660]    - tweaked: FALSE
[08:27:40.660]    - call: future::plan("sequential")
[08:27:40.660] plan(): nbrOfWorkers() = 1
[08:27:40.660] SequentialFuture started (and completed)
[08:27:40.660] - Launch lazy future ... done
[08:27:40.660] run() for ‘SequentialFuture’ ... done
> stopifnot(identical(v$a, 2))
[08:27:40.661] run() for ‘Future’ ...
[08:27:40.661] - state: ‘created’
[08:27:40.661] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.661] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.661] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.661]   - Field: ‘label’
[08:27:40.661]   - Field: ‘local’
[08:27:40.662]   - Field: ‘owner’
[08:27:40.662]   - Field: ‘envir’
[08:27:40.662]   - Field: ‘packages’
[08:27:40.662]   - Field: ‘gc’
[08:27:40.662]   - Field: ‘conditions’
[08:27:40.662]   - Field: ‘expr’
[08:27:40.662]   - Field: ‘uuid’
[08:27:40.662]   - Field: ‘seed’
[08:27:40.662]   - Field: ‘version’
[08:27:40.662]   - Field: ‘result’
[08:27:40.662]   - Field: ‘asynchronous’
[08:27:40.662]   - Field: ‘calls’
[08:27:40.663]   - Field: ‘globals’
[08:27:40.663]   - Field: ‘stdout’
[08:27:40.663]   - Field: ‘earlySignal’
[08:27:40.663]   - Field: ‘lazy’
[08:27:40.663]   - Field: ‘state’
[08:27:40.663] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.663] - Launch lazy future ...
[08:27:40.663] Packages needed by the future expression (n = 0): <none>
[08:27:40.663] Packages needed by future strategies (n = 0): <none>
[08:27:40.664] {
[08:27:40.664]     {
[08:27:40.664]         {
[08:27:40.664]             ...future.startTime <- base::Sys.time()
[08:27:40.664]             {
[08:27:40.664]                 {
[08:27:40.664]                   {
[08:27:40.664]                     base::local({
[08:27:40.664]                       has_future <- base::requireNamespace("future", 
[08:27:40.664]                         quietly = TRUE)
[08:27:40.664]                       if (has_future) {
[08:27:40.664]                         ns <- base::getNamespace("future")
[08:27:40.664]                         version <- ns[[".package"]][["version"]]
[08:27:40.664]                         if (is.null(version)) 
[08:27:40.664]                           version <- utils::packageVersion("future")
[08:27:40.664]                       }
[08:27:40.664]                       else {
[08:27:40.664]                         version <- NULL
[08:27:40.664]                       }
[08:27:40.664]                       if (!has_future || version < "1.8.0") {
[08:27:40.664]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.664]                           "", base::R.version$version.string), 
[08:27:40.664]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.664]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.664]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.664]                             "release", "version")], collapse = " "), 
[08:27:40.664]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.664]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.664]                           info)
[08:27:40.664]                         info <- base::paste(info, collapse = "; ")
[08:27:40.664]                         if (!has_future) {
[08:27:40.664]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.664]                             info)
[08:27:40.664]                         }
[08:27:40.664]                         else {
[08:27:40.664]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.664]                             info, version)
[08:27:40.664]                         }
[08:27:40.664]                         base::stop(msg)
[08:27:40.664]                       }
[08:27:40.664]                     })
[08:27:40.664]                   }
[08:27:40.664]                   ...future.strategy.old <- future::plan("list")
[08:27:40.664]                   options(future.plan = NULL)
[08:27:40.664]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.664]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.664]                 }
[08:27:40.664]                 ...future.workdir <- getwd()
[08:27:40.664]             }
[08:27:40.664]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.664]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.664]         }
[08:27:40.664]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.664]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.664]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.664]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.664]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.664]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.664]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.664]             base::names(...future.oldOptions))
[08:27:40.664]     }
[08:27:40.664]     if (FALSE) {
[08:27:40.664]     }
[08:27:40.664]     else {
[08:27:40.664]         if (TRUE) {
[08:27:40.664]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.664]                 open = "w")
[08:27:40.664]         }
[08:27:40.664]         else {
[08:27:40.664]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.664]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.664]         }
[08:27:40.664]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.664]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.664]             base::sink(type = "output", split = FALSE)
[08:27:40.664]             base::close(...future.stdout)
[08:27:40.664]         }, add = TRUE)
[08:27:40.664]     }
[08:27:40.664]     ...future.frame <- base::sys.nframe()
[08:27:40.664]     ...future.conditions <- base::list()
[08:27:40.664]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.664]     if (FALSE) {
[08:27:40.664]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.664]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.664]     }
[08:27:40.664]     ...future.result <- base::tryCatch({
[08:27:40.664]         base::withCallingHandlers({
[08:27:40.664]             ...future.value <- base::withVisible(base::local({
[08:27:40.664]                 2
[08:27:40.664]             }))
[08:27:40.664]             future::FutureResult(value = ...future.value$value, 
[08:27:40.664]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.664]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.664]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.664]                     ...future.globalenv.names))
[08:27:40.664]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.664]         }, condition = base::local({
[08:27:40.664]             c <- base::c
[08:27:40.664]             inherits <- base::inherits
[08:27:40.664]             invokeRestart <- base::invokeRestart
[08:27:40.664]             length <- base::length
[08:27:40.664]             list <- base::list
[08:27:40.664]             seq.int <- base::seq.int
[08:27:40.664]             signalCondition <- base::signalCondition
[08:27:40.664]             sys.calls <- base::sys.calls
[08:27:40.664]             `[[` <- base::`[[`
[08:27:40.664]             `+` <- base::`+`
[08:27:40.664]             `<<-` <- base::`<<-`
[08:27:40.664]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.664]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.664]                   3L)]
[08:27:40.664]             }
[08:27:40.664]             function(cond) {
[08:27:40.664]                 is_error <- inherits(cond, "error")
[08:27:40.664]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.664]                   NULL)
[08:27:40.664]                 if (is_error) {
[08:27:40.664]                   sessionInformation <- function() {
[08:27:40.664]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.664]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.664]                       search = base::search(), system = base::Sys.info())
[08:27:40.664]                   }
[08:27:40.664]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.664]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.664]                     cond$call), session = sessionInformation(), 
[08:27:40.664]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.664]                   signalCondition(cond)
[08:27:40.664]                 }
[08:27:40.664]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.664]                 "immediateCondition"))) {
[08:27:40.664]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.664]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.664]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.664]                   if (TRUE && !signal) {
[08:27:40.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.664]                     {
[08:27:40.664]                       inherits <- base::inherits
[08:27:40.664]                       invokeRestart <- base::invokeRestart
[08:27:40.664]                       is.null <- base::is.null
[08:27:40.664]                       muffled <- FALSE
[08:27:40.664]                       if (inherits(cond, "message")) {
[08:27:40.664]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.664]                         if (muffled) 
[08:27:40.664]                           invokeRestart("muffleMessage")
[08:27:40.664]                       }
[08:27:40.664]                       else if (inherits(cond, "warning")) {
[08:27:40.664]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.664]                         if (muffled) 
[08:27:40.664]                           invokeRestart("muffleWarning")
[08:27:40.664]                       }
[08:27:40.664]                       else if (inherits(cond, "condition")) {
[08:27:40.664]                         if (!is.null(pattern)) {
[08:27:40.664]                           computeRestarts <- base::computeRestarts
[08:27:40.664]                           grepl <- base::grepl
[08:27:40.664]                           restarts <- computeRestarts(cond)
[08:27:40.664]                           for (restart in restarts) {
[08:27:40.664]                             name <- restart$name
[08:27:40.664]                             if (is.null(name)) 
[08:27:40.664]                               next
[08:27:40.664]                             if (!grepl(pattern, name)) 
[08:27:40.664]                               next
[08:27:40.664]                             invokeRestart(restart)
[08:27:40.664]                             muffled <- TRUE
[08:27:40.664]                             break
[08:27:40.664]                           }
[08:27:40.664]                         }
[08:27:40.664]                       }
[08:27:40.664]                       invisible(muffled)
[08:27:40.664]                     }
[08:27:40.664]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.664]                   }
[08:27:40.664]                 }
[08:27:40.664]                 else {
[08:27:40.664]                   if (TRUE) {
[08:27:40.664]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.664]                     {
[08:27:40.664]                       inherits <- base::inherits
[08:27:40.664]                       invokeRestart <- base::invokeRestart
[08:27:40.664]                       is.null <- base::is.null
[08:27:40.664]                       muffled <- FALSE
[08:27:40.664]                       if (inherits(cond, "message")) {
[08:27:40.664]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.664]                         if (muffled) 
[08:27:40.664]                           invokeRestart("muffleMessage")
[08:27:40.664]                       }
[08:27:40.664]                       else if (inherits(cond, "warning")) {
[08:27:40.664]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.664]                         if (muffled) 
[08:27:40.664]                           invokeRestart("muffleWarning")
[08:27:40.664]                       }
[08:27:40.664]                       else if (inherits(cond, "condition")) {
[08:27:40.664]                         if (!is.null(pattern)) {
[08:27:40.664]                           computeRestarts <- base::computeRestarts
[08:27:40.664]                           grepl <- base::grepl
[08:27:40.664]                           restarts <- computeRestarts(cond)
[08:27:40.664]                           for (restart in restarts) {
[08:27:40.664]                             name <- restart$name
[08:27:40.664]                             if (is.null(name)) 
[08:27:40.664]                               next
[08:27:40.664]                             if (!grepl(pattern, name)) 
[08:27:40.664]                               next
[08:27:40.664]                             invokeRestart(restart)
[08:27:40.664]                             muffled <- TRUE
[08:27:40.664]                             break
[08:27:40.664]                           }
[08:27:40.664]                         }
[08:27:40.664]                       }
[08:27:40.664]                       invisible(muffled)
[08:27:40.664]                     }
[08:27:40.664]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.664]                   }
[08:27:40.664]                 }
[08:27:40.664]             }
[08:27:40.664]         }))
[08:27:40.664]     }, error = function(ex) {
[08:27:40.664]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.664]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.664]                 ...future.rng), started = ...future.startTime, 
[08:27:40.664]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.664]             version = "1.8"), class = "FutureResult")
[08:27:40.664]     }, finally = {
[08:27:40.664]         if (!identical(...future.workdir, getwd())) 
[08:27:40.664]             setwd(...future.workdir)
[08:27:40.664]         {
[08:27:40.664]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.664]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.664]             }
[08:27:40.664]             base::options(...future.oldOptions)
[08:27:40.664]             if (.Platform$OS.type == "windows") {
[08:27:40.664]                 old_names <- names(...future.oldEnvVars)
[08:27:40.664]                 envs <- base::Sys.getenv()
[08:27:40.664]                 names <- names(envs)
[08:27:40.664]                 common <- intersect(names, old_names)
[08:27:40.664]                 added <- setdiff(names, old_names)
[08:27:40.664]                 removed <- setdiff(old_names, names)
[08:27:40.664]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.664]                   envs[common]]
[08:27:40.664]                 NAMES <- toupper(changed)
[08:27:40.664]                 args <- list()
[08:27:40.664]                 for (kk in seq_along(NAMES)) {
[08:27:40.664]                   name <- changed[[kk]]
[08:27:40.664]                   NAME <- NAMES[[kk]]
[08:27:40.664]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.664]                     next
[08:27:40.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.664]                 }
[08:27:40.664]                 NAMES <- toupper(added)
[08:27:40.664]                 for (kk in seq_along(NAMES)) {
[08:27:40.664]                   name <- added[[kk]]
[08:27:40.664]                   NAME <- NAMES[[kk]]
[08:27:40.664]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.664]                     next
[08:27:40.664]                   args[[name]] <- ""
[08:27:40.664]                 }
[08:27:40.664]                 NAMES <- toupper(removed)
[08:27:40.664]                 for (kk in seq_along(NAMES)) {
[08:27:40.664]                   name <- removed[[kk]]
[08:27:40.664]                   NAME <- NAMES[[kk]]
[08:27:40.664]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.664]                     next
[08:27:40.664]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.664]                 }
[08:27:40.664]                 if (length(args) > 0) 
[08:27:40.664]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.664]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.664]             }
[08:27:40.664]             else {
[08:27:40.664]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.664]             }
[08:27:40.664]             {
[08:27:40.664]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.664]                   0L) {
[08:27:40.664]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.664]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.664]                   base::options(opts)
[08:27:40.664]                 }
[08:27:40.664]                 {
[08:27:40.664]                   {
[08:27:40.664]                     NULL
[08:27:40.664]                     RNGkind("Mersenne-Twister")
[08:27:40.664]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.664]                       inherits = FALSE)
[08:27:40.664]                   }
[08:27:40.664]                   options(future.plan = NULL)
[08:27:40.664]                   if (is.na(NA_character_)) 
[08:27:40.664]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.664]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.664]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.664]                     .init = FALSE)
[08:27:40.664]                 }
[08:27:40.664]             }
[08:27:40.664]         }
[08:27:40.664]     })
[08:27:40.664]     if (TRUE) {
[08:27:40.664]         base::sink(type = "output", split = FALSE)
[08:27:40.664]         if (TRUE) {
[08:27:40.664]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.664]         }
[08:27:40.664]         else {
[08:27:40.664]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.664]         }
[08:27:40.664]         base::close(...future.stdout)
[08:27:40.664]         ...future.stdout <- NULL
[08:27:40.664]     }
[08:27:40.664]     ...future.result$conditions <- ...future.conditions
[08:27:40.664]     ...future.result$finished <- base::Sys.time()
[08:27:40.664]     ...future.result
[08:27:40.664] }
[08:27:40.666] plan(): Setting new future strategy stack:
[08:27:40.666] List of future strategies:
[08:27:40.666] 1. sequential:
[08:27:40.666]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.666]    - tweaked: FALSE
[08:27:40.666]    - call: NULL
[08:27:40.666] plan(): nbrOfWorkers() = 1
[08:27:40.667] plan(): Setting new future strategy stack:
[08:27:40.667] List of future strategies:
[08:27:40.667] 1. sequential:
[08:27:40.667]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.667]    - tweaked: FALSE
[08:27:40.667]    - call: future::plan("sequential")
[08:27:40.667] plan(): nbrOfWorkers() = 1
[08:27:40.668] SequentialFuture started (and completed)
[08:27:40.668] - Launch lazy future ... done
[08:27:40.668] run() for ‘SequentialFuture’ ... done
> 
> 
> message("*** %<-% to listenv: multiple dimensions ...")
*** %<-% to listenv: multiple dimensions ...
> 
> x0 <- list()
> length(x0) <- 6
> dim(x0) <- c(3, 2)
> 
> x <- listenv()
> length(x) <- 6
> dim(x) <- c(3, 2)
> 
> for (cc in 1:ncol(x)) {
+   for (rr in 1:nrow(x)) {
+     x0[[rr, cc]] <- sprintf("(%s, %s)", rr, cc)
+     x[[rr, cc]] %<-% sprintf("(%s, %s)", rr, cc) %lazy% TRUE
+   }
+ }
[08:27:40.674] getGlobalsAndPackages() ...
[08:27:40.674] Searching for globals...
[08:27:40.675] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.676] Searching for globals ... DONE
[08:27:40.676] Resolving globals: FALSE
[08:27:40.676] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.677] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.677] - globals: [2] ‘rr’, ‘cc’
[08:27:40.677] 
[08:27:40.677] getGlobalsAndPackages() ... DONE
[08:27:40.678] getGlobalsAndPackages() ...
[08:27:40.678] Searching for globals...
[08:27:40.681] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.681] Searching for globals ... DONE
[08:27:40.681] Resolving globals: FALSE
[08:27:40.681] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.682] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.682] - globals: [2] ‘rr’, ‘cc’
[08:27:40.682] 
[08:27:40.682] getGlobalsAndPackages() ... DONE
[08:27:40.682] getGlobalsAndPackages() ...
[08:27:40.683] Searching for globals...
[08:27:40.683] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.683] Searching for globals ... DONE
[08:27:40.683] Resolving globals: FALSE
[08:27:40.684] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.684] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.684] - globals: [2] ‘rr’, ‘cc’
[08:27:40.684] 
[08:27:40.684] getGlobalsAndPackages() ... DONE
[08:27:40.685] getGlobalsAndPackages() ...
[08:27:40.685] Searching for globals...
[08:27:40.686] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.686] Searching for globals ... DONE
[08:27:40.686] Resolving globals: FALSE
[08:27:40.686] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.687] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.687] - globals: [2] ‘rr’, ‘cc’
[08:27:40.687] 
[08:27:40.687] getGlobalsAndPackages() ... DONE
[08:27:40.687] getGlobalsAndPackages() ...
[08:27:40.687] Searching for globals...
[08:27:40.688] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.688] Searching for globals ... DONE
[08:27:40.688] Resolving globals: FALSE
[08:27:40.689] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.689] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.689] - globals: [2] ‘rr’, ‘cc’
[08:27:40.689] 
[08:27:40.689] getGlobalsAndPackages() ... DONE
[08:27:40.690] getGlobalsAndPackages() ...
[08:27:40.690] Searching for globals...
[08:27:40.690] - globals found: [3] ‘sprintf’, ‘rr’, ‘cc’
[08:27:40.691] Searching for globals ... DONE
[08:27:40.691] Resolving globals: FALSE
[08:27:40.691] The total size of the 2 globals is 70 bytes (70 bytes)
[08:27:40.691] The total size of the 2 globals exported for future expression (‘sprintf("(%s, %s)", rr, cc)’) is 70 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘rr’ (35 bytes of class ‘numeric’) and ‘cc’ (35 bytes of class ‘numeric’)
[08:27:40.691] - globals: [2] ‘rr’, ‘cc’
[08:27:40.692] 
[08:27:40.692] getGlobalsAndPackages() ... DONE
> 
> y <- as.list(x)
[08:27:40.692] run() for ‘Future’ ...
[08:27:40.692] - state: ‘created’
[08:27:40.692] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.692] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.693] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.693]   - Field: ‘label’
[08:27:40.693]   - Field: ‘local’
[08:27:40.693]   - Field: ‘owner’
[08:27:40.693]   - Field: ‘envir’
[08:27:40.693]   - Field: ‘packages’
[08:27:40.693]   - Field: ‘gc’
[08:27:40.693]   - Field: ‘conditions’
[08:27:40.693]   - Field: ‘expr’
[08:27:40.693]   - Field: ‘uuid’
[08:27:40.694]   - Field: ‘seed’
[08:27:40.694]   - Field: ‘version’
[08:27:40.694]   - Field: ‘result’
[08:27:40.694]   - Field: ‘asynchronous’
[08:27:40.694]   - Field: ‘calls’
[08:27:40.694]   - Field: ‘globals’
[08:27:40.694]   - Field: ‘stdout’
[08:27:40.694]   - Field: ‘earlySignal’
[08:27:40.694]   - Field: ‘lazy’
[08:27:40.694]   - Field: ‘state’
[08:27:40.694] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.694] - Launch lazy future ...
[08:27:40.695] Packages needed by the future expression (n = 0): <none>
[08:27:40.695] Packages needed by future strategies (n = 0): <none>
[08:27:40.695] {
[08:27:40.695]     {
[08:27:40.695]         {
[08:27:40.695]             ...future.startTime <- base::Sys.time()
[08:27:40.695]             {
[08:27:40.695]                 {
[08:27:40.695]                   {
[08:27:40.695]                     base::local({
[08:27:40.695]                       has_future <- base::requireNamespace("future", 
[08:27:40.695]                         quietly = TRUE)
[08:27:40.695]                       if (has_future) {
[08:27:40.695]                         ns <- base::getNamespace("future")
[08:27:40.695]                         version <- ns[[".package"]][["version"]]
[08:27:40.695]                         if (is.null(version)) 
[08:27:40.695]                           version <- utils::packageVersion("future")
[08:27:40.695]                       }
[08:27:40.695]                       else {
[08:27:40.695]                         version <- NULL
[08:27:40.695]                       }
[08:27:40.695]                       if (!has_future || version < "1.8.0") {
[08:27:40.695]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.695]                           "", base::R.version$version.string), 
[08:27:40.695]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.695]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.695]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.695]                             "release", "version")], collapse = " "), 
[08:27:40.695]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.695]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.695]                           info)
[08:27:40.695]                         info <- base::paste(info, collapse = "; ")
[08:27:40.695]                         if (!has_future) {
[08:27:40.695]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.695]                             info)
[08:27:40.695]                         }
[08:27:40.695]                         else {
[08:27:40.695]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.695]                             info, version)
[08:27:40.695]                         }
[08:27:40.695]                         base::stop(msg)
[08:27:40.695]                       }
[08:27:40.695]                     })
[08:27:40.695]                   }
[08:27:40.695]                   ...future.strategy.old <- future::plan("list")
[08:27:40.695]                   options(future.plan = NULL)
[08:27:40.695]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.695]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.695]                 }
[08:27:40.695]                 ...future.workdir <- getwd()
[08:27:40.695]             }
[08:27:40.695]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.695]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.695]         }
[08:27:40.695]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.695]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.695]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.695]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.695]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.695]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.695]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.695]             base::names(...future.oldOptions))
[08:27:40.695]     }
[08:27:40.695]     if (FALSE) {
[08:27:40.695]     }
[08:27:40.695]     else {
[08:27:40.695]         if (TRUE) {
[08:27:40.695]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.695]                 open = "w")
[08:27:40.695]         }
[08:27:40.695]         else {
[08:27:40.695]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.695]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.695]         }
[08:27:40.695]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.695]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.695]             base::sink(type = "output", split = FALSE)
[08:27:40.695]             base::close(...future.stdout)
[08:27:40.695]         }, add = TRUE)
[08:27:40.695]     }
[08:27:40.695]     ...future.frame <- base::sys.nframe()
[08:27:40.695]     ...future.conditions <- base::list()
[08:27:40.695]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.695]     if (FALSE) {
[08:27:40.695]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.695]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.695]     }
[08:27:40.695]     ...future.result <- base::tryCatch({
[08:27:40.695]         base::withCallingHandlers({
[08:27:40.695]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.695]                 rr, cc)))
[08:27:40.695]             future::FutureResult(value = ...future.value$value, 
[08:27:40.695]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.695]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.695]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.695]                     ...future.globalenv.names))
[08:27:40.695]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.695]         }, condition = base::local({
[08:27:40.695]             c <- base::c
[08:27:40.695]             inherits <- base::inherits
[08:27:40.695]             invokeRestart <- base::invokeRestart
[08:27:40.695]             length <- base::length
[08:27:40.695]             list <- base::list
[08:27:40.695]             seq.int <- base::seq.int
[08:27:40.695]             signalCondition <- base::signalCondition
[08:27:40.695]             sys.calls <- base::sys.calls
[08:27:40.695]             `[[` <- base::`[[`
[08:27:40.695]             `+` <- base::`+`
[08:27:40.695]             `<<-` <- base::`<<-`
[08:27:40.695]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.695]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.695]                   3L)]
[08:27:40.695]             }
[08:27:40.695]             function(cond) {
[08:27:40.695]                 is_error <- inherits(cond, "error")
[08:27:40.695]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.695]                   NULL)
[08:27:40.695]                 if (is_error) {
[08:27:40.695]                   sessionInformation <- function() {
[08:27:40.695]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.695]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.695]                       search = base::search(), system = base::Sys.info())
[08:27:40.695]                   }
[08:27:40.695]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.695]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.695]                     cond$call), session = sessionInformation(), 
[08:27:40.695]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.695]                   signalCondition(cond)
[08:27:40.695]                 }
[08:27:40.695]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.695]                 "immediateCondition"))) {
[08:27:40.695]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.695]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.695]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.695]                   if (TRUE && !signal) {
[08:27:40.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.695]                     {
[08:27:40.695]                       inherits <- base::inherits
[08:27:40.695]                       invokeRestart <- base::invokeRestart
[08:27:40.695]                       is.null <- base::is.null
[08:27:40.695]                       muffled <- FALSE
[08:27:40.695]                       if (inherits(cond, "message")) {
[08:27:40.695]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.695]                         if (muffled) 
[08:27:40.695]                           invokeRestart("muffleMessage")
[08:27:40.695]                       }
[08:27:40.695]                       else if (inherits(cond, "warning")) {
[08:27:40.695]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.695]                         if (muffled) 
[08:27:40.695]                           invokeRestart("muffleWarning")
[08:27:40.695]                       }
[08:27:40.695]                       else if (inherits(cond, "condition")) {
[08:27:40.695]                         if (!is.null(pattern)) {
[08:27:40.695]                           computeRestarts <- base::computeRestarts
[08:27:40.695]                           grepl <- base::grepl
[08:27:40.695]                           restarts <- computeRestarts(cond)
[08:27:40.695]                           for (restart in restarts) {
[08:27:40.695]                             name <- restart$name
[08:27:40.695]                             if (is.null(name)) 
[08:27:40.695]                               next
[08:27:40.695]                             if (!grepl(pattern, name)) 
[08:27:40.695]                               next
[08:27:40.695]                             invokeRestart(restart)
[08:27:40.695]                             muffled <- TRUE
[08:27:40.695]                             break
[08:27:40.695]                           }
[08:27:40.695]                         }
[08:27:40.695]                       }
[08:27:40.695]                       invisible(muffled)
[08:27:40.695]                     }
[08:27:40.695]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.695]                   }
[08:27:40.695]                 }
[08:27:40.695]                 else {
[08:27:40.695]                   if (TRUE) {
[08:27:40.695]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.695]                     {
[08:27:40.695]                       inherits <- base::inherits
[08:27:40.695]                       invokeRestart <- base::invokeRestart
[08:27:40.695]                       is.null <- base::is.null
[08:27:40.695]                       muffled <- FALSE
[08:27:40.695]                       if (inherits(cond, "message")) {
[08:27:40.695]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.695]                         if (muffled) 
[08:27:40.695]                           invokeRestart("muffleMessage")
[08:27:40.695]                       }
[08:27:40.695]                       else if (inherits(cond, "warning")) {
[08:27:40.695]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.695]                         if (muffled) 
[08:27:40.695]                           invokeRestart("muffleWarning")
[08:27:40.695]                       }
[08:27:40.695]                       else if (inherits(cond, "condition")) {
[08:27:40.695]                         if (!is.null(pattern)) {
[08:27:40.695]                           computeRestarts <- base::computeRestarts
[08:27:40.695]                           grepl <- base::grepl
[08:27:40.695]                           restarts <- computeRestarts(cond)
[08:27:40.695]                           for (restart in restarts) {
[08:27:40.695]                             name <- restart$name
[08:27:40.695]                             if (is.null(name)) 
[08:27:40.695]                               next
[08:27:40.695]                             if (!grepl(pattern, name)) 
[08:27:40.695]                               next
[08:27:40.695]                             invokeRestart(restart)
[08:27:40.695]                             muffled <- TRUE
[08:27:40.695]                             break
[08:27:40.695]                           }
[08:27:40.695]                         }
[08:27:40.695]                       }
[08:27:40.695]                       invisible(muffled)
[08:27:40.695]                     }
[08:27:40.695]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.695]                   }
[08:27:40.695]                 }
[08:27:40.695]             }
[08:27:40.695]         }))
[08:27:40.695]     }, error = function(ex) {
[08:27:40.695]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.695]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.695]                 ...future.rng), started = ...future.startTime, 
[08:27:40.695]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.695]             version = "1.8"), class = "FutureResult")
[08:27:40.695]     }, finally = {
[08:27:40.695]         if (!identical(...future.workdir, getwd())) 
[08:27:40.695]             setwd(...future.workdir)
[08:27:40.695]         {
[08:27:40.695]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.695]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.695]             }
[08:27:40.695]             base::options(...future.oldOptions)
[08:27:40.695]             if (.Platform$OS.type == "windows") {
[08:27:40.695]                 old_names <- names(...future.oldEnvVars)
[08:27:40.695]                 envs <- base::Sys.getenv()
[08:27:40.695]                 names <- names(envs)
[08:27:40.695]                 common <- intersect(names, old_names)
[08:27:40.695]                 added <- setdiff(names, old_names)
[08:27:40.695]                 removed <- setdiff(old_names, names)
[08:27:40.695]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.695]                   envs[common]]
[08:27:40.695]                 NAMES <- toupper(changed)
[08:27:40.695]                 args <- list()
[08:27:40.695]                 for (kk in seq_along(NAMES)) {
[08:27:40.695]                   name <- changed[[kk]]
[08:27:40.695]                   NAME <- NAMES[[kk]]
[08:27:40.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.695]                     next
[08:27:40.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.695]                 }
[08:27:40.695]                 NAMES <- toupper(added)
[08:27:40.695]                 for (kk in seq_along(NAMES)) {
[08:27:40.695]                   name <- added[[kk]]
[08:27:40.695]                   NAME <- NAMES[[kk]]
[08:27:40.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.695]                     next
[08:27:40.695]                   args[[name]] <- ""
[08:27:40.695]                 }
[08:27:40.695]                 NAMES <- toupper(removed)
[08:27:40.695]                 for (kk in seq_along(NAMES)) {
[08:27:40.695]                   name <- removed[[kk]]
[08:27:40.695]                   NAME <- NAMES[[kk]]
[08:27:40.695]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.695]                     next
[08:27:40.695]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.695]                 }
[08:27:40.695]                 if (length(args) > 0) 
[08:27:40.695]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.695]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.695]             }
[08:27:40.695]             else {
[08:27:40.695]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.695]             }
[08:27:40.695]             {
[08:27:40.695]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.695]                   0L) {
[08:27:40.695]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.695]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.695]                   base::options(opts)
[08:27:40.695]                 }
[08:27:40.695]                 {
[08:27:40.695]                   {
[08:27:40.695]                     NULL
[08:27:40.695]                     RNGkind("Mersenne-Twister")
[08:27:40.695]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.695]                       inherits = FALSE)
[08:27:40.695]                   }
[08:27:40.695]                   options(future.plan = NULL)
[08:27:40.695]                   if (is.na(NA_character_)) 
[08:27:40.695]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.695]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.695]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.695]                     .init = FALSE)
[08:27:40.695]                 }
[08:27:40.695]             }
[08:27:40.695]         }
[08:27:40.695]     })
[08:27:40.695]     if (TRUE) {
[08:27:40.695]         base::sink(type = "output", split = FALSE)
[08:27:40.695]         if (TRUE) {
[08:27:40.695]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.695]         }
[08:27:40.695]         else {
[08:27:40.695]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.695]         }
[08:27:40.695]         base::close(...future.stdout)
[08:27:40.695]         ...future.stdout <- NULL
[08:27:40.695]     }
[08:27:40.695]     ...future.result$conditions <- ...future.conditions
[08:27:40.695]     ...future.result$finished <- base::Sys.time()
[08:27:40.695]     ...future.result
[08:27:40.695] }
[08:27:40.697] assign_globals() ...
[08:27:40.697] List of 2
[08:27:40.697]  $ rr: int 1
[08:27:40.697]  $ cc: int 1
[08:27:40.697]  - attr(*, "where")=List of 2
[08:27:40.697]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.697]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.697]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.697]  - attr(*, "resolved")= logi FALSE
[08:27:40.697]  - attr(*, "total_size")= num 70
[08:27:40.697]  - attr(*, "already-done")= logi TRUE
[08:27:40.700] - copied ‘rr’ to environment
[08:27:40.700] - copied ‘cc’ to environment
[08:27:40.700] assign_globals() ... done
[08:27:40.701] plan(): Setting new future strategy stack:
[08:27:40.701] List of future strategies:
[08:27:40.701] 1. sequential:
[08:27:40.701]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.701]    - tweaked: FALSE
[08:27:40.701]    - call: NULL
[08:27:40.701] plan(): nbrOfWorkers() = 1
[08:27:40.702] plan(): Setting new future strategy stack:
[08:27:40.702] List of future strategies:
[08:27:40.702] 1. sequential:
[08:27:40.702]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.702]    - tweaked: FALSE
[08:27:40.702]    - call: future::plan("sequential")
[08:27:40.703] plan(): nbrOfWorkers() = 1
[08:27:40.703] SequentialFuture started (and completed)
[08:27:40.703] - Launch lazy future ... done
[08:27:40.703] run() for ‘SequentialFuture’ ... done
[08:27:40.703] run() for ‘Future’ ...
[08:27:40.703] - state: ‘created’
[08:27:40.704] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.704] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.704] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.704]   - Field: ‘label’
[08:27:40.704]   - Field: ‘local’
[08:27:40.704]   - Field: ‘owner’
[08:27:40.704]   - Field: ‘envir’
[08:27:40.704]   - Field: ‘packages’
[08:27:40.704]   - Field: ‘gc’
[08:27:40.705]   - Field: ‘conditions’
[08:27:40.705]   - Field: ‘expr’
[08:27:40.705]   - Field: ‘uuid’
[08:27:40.705]   - Field: ‘seed’
[08:27:40.705]   - Field: ‘version’
[08:27:40.705]   - Field: ‘result’
[08:27:40.705]   - Field: ‘asynchronous’
[08:27:40.705]   - Field: ‘calls’
[08:27:40.705]   - Field: ‘globals’
[08:27:40.705]   - Field: ‘stdout’
[08:27:40.705]   - Field: ‘earlySignal’
[08:27:40.706]   - Field: ‘lazy’
[08:27:40.706]   - Field: ‘state’
[08:27:40.706] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.706] - Launch lazy future ...
[08:27:40.706] Packages needed by the future expression (n = 0): <none>
[08:27:40.706] Packages needed by future strategies (n = 0): <none>
[08:27:40.706] {
[08:27:40.706]     {
[08:27:40.706]         {
[08:27:40.706]             ...future.startTime <- base::Sys.time()
[08:27:40.706]             {
[08:27:40.706]                 {
[08:27:40.706]                   {
[08:27:40.706]                     base::local({
[08:27:40.706]                       has_future <- base::requireNamespace("future", 
[08:27:40.706]                         quietly = TRUE)
[08:27:40.706]                       if (has_future) {
[08:27:40.706]                         ns <- base::getNamespace("future")
[08:27:40.706]                         version <- ns[[".package"]][["version"]]
[08:27:40.706]                         if (is.null(version)) 
[08:27:40.706]                           version <- utils::packageVersion("future")
[08:27:40.706]                       }
[08:27:40.706]                       else {
[08:27:40.706]                         version <- NULL
[08:27:40.706]                       }
[08:27:40.706]                       if (!has_future || version < "1.8.0") {
[08:27:40.706]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.706]                           "", base::R.version$version.string), 
[08:27:40.706]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.706]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.706]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.706]                             "release", "version")], collapse = " "), 
[08:27:40.706]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.706]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.706]                           info)
[08:27:40.706]                         info <- base::paste(info, collapse = "; ")
[08:27:40.706]                         if (!has_future) {
[08:27:40.706]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.706]                             info)
[08:27:40.706]                         }
[08:27:40.706]                         else {
[08:27:40.706]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.706]                             info, version)
[08:27:40.706]                         }
[08:27:40.706]                         base::stop(msg)
[08:27:40.706]                       }
[08:27:40.706]                     })
[08:27:40.706]                   }
[08:27:40.706]                   ...future.strategy.old <- future::plan("list")
[08:27:40.706]                   options(future.plan = NULL)
[08:27:40.706]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.706]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.706]                 }
[08:27:40.706]                 ...future.workdir <- getwd()
[08:27:40.706]             }
[08:27:40.706]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.706]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.706]         }
[08:27:40.706]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.706]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.706]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.706]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.706]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.706]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.706]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.706]             base::names(...future.oldOptions))
[08:27:40.706]     }
[08:27:40.706]     if (FALSE) {
[08:27:40.706]     }
[08:27:40.706]     else {
[08:27:40.706]         if (TRUE) {
[08:27:40.706]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.706]                 open = "w")
[08:27:40.706]         }
[08:27:40.706]         else {
[08:27:40.706]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.706]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.706]         }
[08:27:40.706]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.706]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.706]             base::sink(type = "output", split = FALSE)
[08:27:40.706]             base::close(...future.stdout)
[08:27:40.706]         }, add = TRUE)
[08:27:40.706]     }
[08:27:40.706]     ...future.frame <- base::sys.nframe()
[08:27:40.706]     ...future.conditions <- base::list()
[08:27:40.706]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.706]     if (FALSE) {
[08:27:40.706]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.706]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.706]     }
[08:27:40.706]     ...future.result <- base::tryCatch({
[08:27:40.706]         base::withCallingHandlers({
[08:27:40.706]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.706]                 rr, cc)))
[08:27:40.706]             future::FutureResult(value = ...future.value$value, 
[08:27:40.706]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.706]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.706]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.706]                     ...future.globalenv.names))
[08:27:40.706]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.706]         }, condition = base::local({
[08:27:40.706]             c <- base::c
[08:27:40.706]             inherits <- base::inherits
[08:27:40.706]             invokeRestart <- base::invokeRestart
[08:27:40.706]             length <- base::length
[08:27:40.706]             list <- base::list
[08:27:40.706]             seq.int <- base::seq.int
[08:27:40.706]             signalCondition <- base::signalCondition
[08:27:40.706]             sys.calls <- base::sys.calls
[08:27:40.706]             `[[` <- base::`[[`
[08:27:40.706]             `+` <- base::`+`
[08:27:40.706]             `<<-` <- base::`<<-`
[08:27:40.706]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.706]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.706]                   3L)]
[08:27:40.706]             }
[08:27:40.706]             function(cond) {
[08:27:40.706]                 is_error <- inherits(cond, "error")
[08:27:40.706]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.706]                   NULL)
[08:27:40.706]                 if (is_error) {
[08:27:40.706]                   sessionInformation <- function() {
[08:27:40.706]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.706]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.706]                       search = base::search(), system = base::Sys.info())
[08:27:40.706]                   }
[08:27:40.706]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.706]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.706]                     cond$call), session = sessionInformation(), 
[08:27:40.706]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.706]                   signalCondition(cond)
[08:27:40.706]                 }
[08:27:40.706]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.706]                 "immediateCondition"))) {
[08:27:40.706]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.706]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.706]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.706]                   if (TRUE && !signal) {
[08:27:40.706]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.706]                     {
[08:27:40.706]                       inherits <- base::inherits
[08:27:40.706]                       invokeRestart <- base::invokeRestart
[08:27:40.706]                       is.null <- base::is.null
[08:27:40.706]                       muffled <- FALSE
[08:27:40.706]                       if (inherits(cond, "message")) {
[08:27:40.706]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.706]                         if (muffled) 
[08:27:40.706]                           invokeRestart("muffleMessage")
[08:27:40.706]                       }
[08:27:40.706]                       else if (inherits(cond, "warning")) {
[08:27:40.706]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.706]                         if (muffled) 
[08:27:40.706]                           invokeRestart("muffleWarning")
[08:27:40.706]                       }
[08:27:40.706]                       else if (inherits(cond, "condition")) {
[08:27:40.706]                         if (!is.null(pattern)) {
[08:27:40.706]                           computeRestarts <- base::computeRestarts
[08:27:40.706]                           grepl <- base::grepl
[08:27:40.706]                           restarts <- computeRestarts(cond)
[08:27:40.706]                           for (restart in restarts) {
[08:27:40.706]                             name <- restart$name
[08:27:40.706]                             if (is.null(name)) 
[08:27:40.706]                               next
[08:27:40.706]                             if (!grepl(pattern, name)) 
[08:27:40.706]                               next
[08:27:40.706]                             invokeRestart(restart)
[08:27:40.706]                             muffled <- TRUE
[08:27:40.706]                             break
[08:27:40.706]                           }
[08:27:40.706]                         }
[08:27:40.706]                       }
[08:27:40.706]                       invisible(muffled)
[08:27:40.706]                     }
[08:27:40.706]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.706]                   }
[08:27:40.706]                 }
[08:27:40.706]                 else {
[08:27:40.706]                   if (TRUE) {
[08:27:40.706]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.706]                     {
[08:27:40.706]                       inherits <- base::inherits
[08:27:40.706]                       invokeRestart <- base::invokeRestart
[08:27:40.706]                       is.null <- base::is.null
[08:27:40.706]                       muffled <- FALSE
[08:27:40.706]                       if (inherits(cond, "message")) {
[08:27:40.706]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.706]                         if (muffled) 
[08:27:40.706]                           invokeRestart("muffleMessage")
[08:27:40.706]                       }
[08:27:40.706]                       else if (inherits(cond, "warning")) {
[08:27:40.706]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.706]                         if (muffled) 
[08:27:40.706]                           invokeRestart("muffleWarning")
[08:27:40.706]                       }
[08:27:40.706]                       else if (inherits(cond, "condition")) {
[08:27:40.706]                         if (!is.null(pattern)) {
[08:27:40.706]                           computeRestarts <- base::computeRestarts
[08:27:40.706]                           grepl <- base::grepl
[08:27:40.706]                           restarts <- computeRestarts(cond)
[08:27:40.706]                           for (restart in restarts) {
[08:27:40.706]                             name <- restart$name
[08:27:40.706]                             if (is.null(name)) 
[08:27:40.706]                               next
[08:27:40.706]                             if (!grepl(pattern, name)) 
[08:27:40.706]                               next
[08:27:40.706]                             invokeRestart(restart)
[08:27:40.706]                             muffled <- TRUE
[08:27:40.706]                             break
[08:27:40.706]                           }
[08:27:40.706]                         }
[08:27:40.706]                       }
[08:27:40.706]                       invisible(muffled)
[08:27:40.706]                     }
[08:27:40.706]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.706]                   }
[08:27:40.706]                 }
[08:27:40.706]             }
[08:27:40.706]         }))
[08:27:40.706]     }, error = function(ex) {
[08:27:40.706]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.706]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.706]                 ...future.rng), started = ...future.startTime, 
[08:27:40.706]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.706]             version = "1.8"), class = "FutureResult")
[08:27:40.706]     }, finally = {
[08:27:40.706]         if (!identical(...future.workdir, getwd())) 
[08:27:40.706]             setwd(...future.workdir)
[08:27:40.706]         {
[08:27:40.706]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.706]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.706]             }
[08:27:40.706]             base::options(...future.oldOptions)
[08:27:40.706]             if (.Platform$OS.type == "windows") {
[08:27:40.706]                 old_names <- names(...future.oldEnvVars)
[08:27:40.706]                 envs <- base::Sys.getenv()
[08:27:40.706]                 names <- names(envs)
[08:27:40.706]                 common <- intersect(names, old_names)
[08:27:40.706]                 added <- setdiff(names, old_names)
[08:27:40.706]                 removed <- setdiff(old_names, names)
[08:27:40.706]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.706]                   envs[common]]
[08:27:40.706]                 NAMES <- toupper(changed)
[08:27:40.706]                 args <- list()
[08:27:40.706]                 for (kk in seq_along(NAMES)) {
[08:27:40.706]                   name <- changed[[kk]]
[08:27:40.706]                   NAME <- NAMES[[kk]]
[08:27:40.706]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.706]                     next
[08:27:40.706]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.706]                 }
[08:27:40.706]                 NAMES <- toupper(added)
[08:27:40.706]                 for (kk in seq_along(NAMES)) {
[08:27:40.706]                   name <- added[[kk]]
[08:27:40.706]                   NAME <- NAMES[[kk]]
[08:27:40.706]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.706]                     next
[08:27:40.706]                   args[[name]] <- ""
[08:27:40.706]                 }
[08:27:40.706]                 NAMES <- toupper(removed)
[08:27:40.706]                 for (kk in seq_along(NAMES)) {
[08:27:40.706]                   name <- removed[[kk]]
[08:27:40.706]                   NAME <- NAMES[[kk]]
[08:27:40.706]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.706]                     next
[08:27:40.706]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.706]                 }
[08:27:40.706]                 if (length(args) > 0) 
[08:27:40.706]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.706]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.706]             }
[08:27:40.706]             else {
[08:27:40.706]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.706]             }
[08:27:40.706]             {
[08:27:40.706]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.706]                   0L) {
[08:27:40.706]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.706]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.706]                   base::options(opts)
[08:27:40.706]                 }
[08:27:40.706]                 {
[08:27:40.706]                   {
[08:27:40.706]                     NULL
[08:27:40.706]                     RNGkind("Mersenne-Twister")
[08:27:40.706]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.706]                       inherits = FALSE)
[08:27:40.706]                   }
[08:27:40.706]                   options(future.plan = NULL)
[08:27:40.706]                   if (is.na(NA_character_)) 
[08:27:40.706]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.706]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.706]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.706]                     .init = FALSE)
[08:27:40.706]                 }
[08:27:40.706]             }
[08:27:40.706]         }
[08:27:40.706]     })
[08:27:40.706]     if (TRUE) {
[08:27:40.706]         base::sink(type = "output", split = FALSE)
[08:27:40.706]         if (TRUE) {
[08:27:40.706]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.706]         }
[08:27:40.706]         else {
[08:27:40.706]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.706]         }
[08:27:40.706]         base::close(...future.stdout)
[08:27:40.706]         ...future.stdout <- NULL
[08:27:40.706]     }
[08:27:40.706]     ...future.result$conditions <- ...future.conditions
[08:27:40.706]     ...future.result$finished <- base::Sys.time()
[08:27:40.706]     ...future.result
[08:27:40.706] }
[08:27:40.708] assign_globals() ...
[08:27:40.708] List of 2
[08:27:40.708]  $ rr: int 2
[08:27:40.708]  $ cc: int 1
[08:27:40.708]  - attr(*, "where")=List of 2
[08:27:40.708]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.708]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.708]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.708]  - attr(*, "resolved")= logi FALSE
[08:27:40.708]  - attr(*, "total_size")= num 70
[08:27:40.708]  - attr(*, "already-done")= logi TRUE
[08:27:40.713] - copied ‘rr’ to environment
[08:27:40.713] - copied ‘cc’ to environment
[08:27:40.713] assign_globals() ... done
[08:27:40.714] plan(): Setting new future strategy stack:
[08:27:40.714] List of future strategies:
[08:27:40.714] 1. sequential:
[08:27:40.714]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.714]    - tweaked: FALSE
[08:27:40.714]    - call: NULL
[08:27:40.714] plan(): nbrOfWorkers() = 1
[08:27:40.715] plan(): Setting new future strategy stack:
[08:27:40.715] List of future strategies:
[08:27:40.715] 1. sequential:
[08:27:40.715]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.715]    - tweaked: FALSE
[08:27:40.715]    - call: future::plan("sequential")
[08:27:40.716] plan(): nbrOfWorkers() = 1
[08:27:40.716] SequentialFuture started (and completed)
[08:27:40.716] - Launch lazy future ... done
[08:27:40.716] run() for ‘SequentialFuture’ ... done
[08:27:40.716] run() for ‘Future’ ...
[08:27:40.716] - state: ‘created’
[08:27:40.716] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.717] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.717] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.717]   - Field: ‘label’
[08:27:40.717]   - Field: ‘local’
[08:27:40.717]   - Field: ‘owner’
[08:27:40.717]   - Field: ‘envir’
[08:27:40.717]   - Field: ‘packages’
[08:27:40.717]   - Field: ‘gc’
[08:27:40.717]   - Field: ‘conditions’
[08:27:40.718]   - Field: ‘expr’
[08:27:40.718]   - Field: ‘uuid’
[08:27:40.718]   - Field: ‘seed’
[08:27:40.718]   - Field: ‘version’
[08:27:40.718]   - Field: ‘result’
[08:27:40.718]   - Field: ‘asynchronous’
[08:27:40.718]   - Field: ‘calls’
[08:27:40.718]   - Field: ‘globals’
[08:27:40.718]   - Field: ‘stdout’
[08:27:40.718]   - Field: ‘earlySignal’
[08:27:40.718]   - Field: ‘lazy’
[08:27:40.718]   - Field: ‘state’
[08:27:40.719] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.719] - Launch lazy future ...
[08:27:40.719] Packages needed by the future expression (n = 0): <none>
[08:27:40.719] Packages needed by future strategies (n = 0): <none>
[08:27:40.719] {
[08:27:40.719]     {
[08:27:40.719]         {
[08:27:40.719]             ...future.startTime <- base::Sys.time()
[08:27:40.719]             {
[08:27:40.719]                 {
[08:27:40.719]                   {
[08:27:40.719]                     base::local({
[08:27:40.719]                       has_future <- base::requireNamespace("future", 
[08:27:40.719]                         quietly = TRUE)
[08:27:40.719]                       if (has_future) {
[08:27:40.719]                         ns <- base::getNamespace("future")
[08:27:40.719]                         version <- ns[[".package"]][["version"]]
[08:27:40.719]                         if (is.null(version)) 
[08:27:40.719]                           version <- utils::packageVersion("future")
[08:27:40.719]                       }
[08:27:40.719]                       else {
[08:27:40.719]                         version <- NULL
[08:27:40.719]                       }
[08:27:40.719]                       if (!has_future || version < "1.8.0") {
[08:27:40.719]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.719]                           "", base::R.version$version.string), 
[08:27:40.719]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.719]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.719]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.719]                             "release", "version")], collapse = " "), 
[08:27:40.719]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.719]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.719]                           info)
[08:27:40.719]                         info <- base::paste(info, collapse = "; ")
[08:27:40.719]                         if (!has_future) {
[08:27:40.719]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.719]                             info)
[08:27:40.719]                         }
[08:27:40.719]                         else {
[08:27:40.719]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.719]                             info, version)
[08:27:40.719]                         }
[08:27:40.719]                         base::stop(msg)
[08:27:40.719]                       }
[08:27:40.719]                     })
[08:27:40.719]                   }
[08:27:40.719]                   ...future.strategy.old <- future::plan("list")
[08:27:40.719]                   options(future.plan = NULL)
[08:27:40.719]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.719]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.719]                 }
[08:27:40.719]                 ...future.workdir <- getwd()
[08:27:40.719]             }
[08:27:40.719]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.719]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.719]         }
[08:27:40.719]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.719]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.719]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.719]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.719]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.719]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.719]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.719]             base::names(...future.oldOptions))
[08:27:40.719]     }
[08:27:40.719]     if (FALSE) {
[08:27:40.719]     }
[08:27:40.719]     else {
[08:27:40.719]         if (TRUE) {
[08:27:40.719]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.719]                 open = "w")
[08:27:40.719]         }
[08:27:40.719]         else {
[08:27:40.719]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.719]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.719]         }
[08:27:40.719]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.719]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.719]             base::sink(type = "output", split = FALSE)
[08:27:40.719]             base::close(...future.stdout)
[08:27:40.719]         }, add = TRUE)
[08:27:40.719]     }
[08:27:40.719]     ...future.frame <- base::sys.nframe()
[08:27:40.719]     ...future.conditions <- base::list()
[08:27:40.719]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.719]     if (FALSE) {
[08:27:40.719]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.719]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.719]     }
[08:27:40.719]     ...future.result <- base::tryCatch({
[08:27:40.719]         base::withCallingHandlers({
[08:27:40.719]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.719]                 rr, cc)))
[08:27:40.719]             future::FutureResult(value = ...future.value$value, 
[08:27:40.719]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.719]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.719]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.719]                     ...future.globalenv.names))
[08:27:40.719]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.719]         }, condition = base::local({
[08:27:40.719]             c <- base::c
[08:27:40.719]             inherits <- base::inherits
[08:27:40.719]             invokeRestart <- base::invokeRestart
[08:27:40.719]             length <- base::length
[08:27:40.719]             list <- base::list
[08:27:40.719]             seq.int <- base::seq.int
[08:27:40.719]             signalCondition <- base::signalCondition
[08:27:40.719]             sys.calls <- base::sys.calls
[08:27:40.719]             `[[` <- base::`[[`
[08:27:40.719]             `+` <- base::`+`
[08:27:40.719]             `<<-` <- base::`<<-`
[08:27:40.719]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.719]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.719]                   3L)]
[08:27:40.719]             }
[08:27:40.719]             function(cond) {
[08:27:40.719]                 is_error <- inherits(cond, "error")
[08:27:40.719]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.719]                   NULL)
[08:27:40.719]                 if (is_error) {
[08:27:40.719]                   sessionInformation <- function() {
[08:27:40.719]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.719]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.719]                       search = base::search(), system = base::Sys.info())
[08:27:40.719]                   }
[08:27:40.719]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.719]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.719]                     cond$call), session = sessionInformation(), 
[08:27:40.719]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.719]                   signalCondition(cond)
[08:27:40.719]                 }
[08:27:40.719]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.719]                 "immediateCondition"))) {
[08:27:40.719]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.719]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.719]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.719]                   if (TRUE && !signal) {
[08:27:40.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.719]                     {
[08:27:40.719]                       inherits <- base::inherits
[08:27:40.719]                       invokeRestart <- base::invokeRestart
[08:27:40.719]                       is.null <- base::is.null
[08:27:40.719]                       muffled <- FALSE
[08:27:40.719]                       if (inherits(cond, "message")) {
[08:27:40.719]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.719]                         if (muffled) 
[08:27:40.719]                           invokeRestart("muffleMessage")
[08:27:40.719]                       }
[08:27:40.719]                       else if (inherits(cond, "warning")) {
[08:27:40.719]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.719]                         if (muffled) 
[08:27:40.719]                           invokeRestart("muffleWarning")
[08:27:40.719]                       }
[08:27:40.719]                       else if (inherits(cond, "condition")) {
[08:27:40.719]                         if (!is.null(pattern)) {
[08:27:40.719]                           computeRestarts <- base::computeRestarts
[08:27:40.719]                           grepl <- base::grepl
[08:27:40.719]                           restarts <- computeRestarts(cond)
[08:27:40.719]                           for (restart in restarts) {
[08:27:40.719]                             name <- restart$name
[08:27:40.719]                             if (is.null(name)) 
[08:27:40.719]                               next
[08:27:40.719]                             if (!grepl(pattern, name)) 
[08:27:40.719]                               next
[08:27:40.719]                             invokeRestart(restart)
[08:27:40.719]                             muffled <- TRUE
[08:27:40.719]                             break
[08:27:40.719]                           }
[08:27:40.719]                         }
[08:27:40.719]                       }
[08:27:40.719]                       invisible(muffled)
[08:27:40.719]                     }
[08:27:40.719]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.719]                   }
[08:27:40.719]                 }
[08:27:40.719]                 else {
[08:27:40.719]                   if (TRUE) {
[08:27:40.719]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.719]                     {
[08:27:40.719]                       inherits <- base::inherits
[08:27:40.719]                       invokeRestart <- base::invokeRestart
[08:27:40.719]                       is.null <- base::is.null
[08:27:40.719]                       muffled <- FALSE
[08:27:40.719]                       if (inherits(cond, "message")) {
[08:27:40.719]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.719]                         if (muffled) 
[08:27:40.719]                           invokeRestart("muffleMessage")
[08:27:40.719]                       }
[08:27:40.719]                       else if (inherits(cond, "warning")) {
[08:27:40.719]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.719]                         if (muffled) 
[08:27:40.719]                           invokeRestart("muffleWarning")
[08:27:40.719]                       }
[08:27:40.719]                       else if (inherits(cond, "condition")) {
[08:27:40.719]                         if (!is.null(pattern)) {
[08:27:40.719]                           computeRestarts <- base::computeRestarts
[08:27:40.719]                           grepl <- base::grepl
[08:27:40.719]                           restarts <- computeRestarts(cond)
[08:27:40.719]                           for (restart in restarts) {
[08:27:40.719]                             name <- restart$name
[08:27:40.719]                             if (is.null(name)) 
[08:27:40.719]                               next
[08:27:40.719]                             if (!grepl(pattern, name)) 
[08:27:40.719]                               next
[08:27:40.719]                             invokeRestart(restart)
[08:27:40.719]                             muffled <- TRUE
[08:27:40.719]                             break
[08:27:40.719]                           }
[08:27:40.719]                         }
[08:27:40.719]                       }
[08:27:40.719]                       invisible(muffled)
[08:27:40.719]                     }
[08:27:40.719]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.719]                   }
[08:27:40.719]                 }
[08:27:40.719]             }
[08:27:40.719]         }))
[08:27:40.719]     }, error = function(ex) {
[08:27:40.719]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.719]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.719]                 ...future.rng), started = ...future.startTime, 
[08:27:40.719]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.719]             version = "1.8"), class = "FutureResult")
[08:27:40.719]     }, finally = {
[08:27:40.719]         if (!identical(...future.workdir, getwd())) 
[08:27:40.719]             setwd(...future.workdir)
[08:27:40.719]         {
[08:27:40.719]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.719]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.719]             }
[08:27:40.719]             base::options(...future.oldOptions)
[08:27:40.719]             if (.Platform$OS.type == "windows") {
[08:27:40.719]                 old_names <- names(...future.oldEnvVars)
[08:27:40.719]                 envs <- base::Sys.getenv()
[08:27:40.719]                 names <- names(envs)
[08:27:40.719]                 common <- intersect(names, old_names)
[08:27:40.719]                 added <- setdiff(names, old_names)
[08:27:40.719]                 removed <- setdiff(old_names, names)
[08:27:40.719]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.719]                   envs[common]]
[08:27:40.719]                 NAMES <- toupper(changed)
[08:27:40.719]                 args <- list()
[08:27:40.719]                 for (kk in seq_along(NAMES)) {
[08:27:40.719]                   name <- changed[[kk]]
[08:27:40.719]                   NAME <- NAMES[[kk]]
[08:27:40.719]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.719]                     next
[08:27:40.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.719]                 }
[08:27:40.719]                 NAMES <- toupper(added)
[08:27:40.719]                 for (kk in seq_along(NAMES)) {
[08:27:40.719]                   name <- added[[kk]]
[08:27:40.719]                   NAME <- NAMES[[kk]]
[08:27:40.719]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.719]                     next
[08:27:40.719]                   args[[name]] <- ""
[08:27:40.719]                 }
[08:27:40.719]                 NAMES <- toupper(removed)
[08:27:40.719]                 for (kk in seq_along(NAMES)) {
[08:27:40.719]                   name <- removed[[kk]]
[08:27:40.719]                   NAME <- NAMES[[kk]]
[08:27:40.719]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.719]                     next
[08:27:40.719]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.719]                 }
[08:27:40.719]                 if (length(args) > 0) 
[08:27:40.719]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.719]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.719]             }
[08:27:40.719]             else {
[08:27:40.719]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.719]             }
[08:27:40.719]             {
[08:27:40.719]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.719]                   0L) {
[08:27:40.719]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.719]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.719]                   base::options(opts)
[08:27:40.719]                 }
[08:27:40.719]                 {
[08:27:40.719]                   {
[08:27:40.719]                     NULL
[08:27:40.719]                     RNGkind("Mersenne-Twister")
[08:27:40.719]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.719]                       inherits = FALSE)
[08:27:40.719]                   }
[08:27:40.719]                   options(future.plan = NULL)
[08:27:40.719]                   if (is.na(NA_character_)) 
[08:27:40.719]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.719]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.719]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.719]                     .init = FALSE)
[08:27:40.719]                 }
[08:27:40.719]             }
[08:27:40.719]         }
[08:27:40.719]     })
[08:27:40.719]     if (TRUE) {
[08:27:40.719]         base::sink(type = "output", split = FALSE)
[08:27:40.719]         if (TRUE) {
[08:27:40.719]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.719]         }
[08:27:40.719]         else {
[08:27:40.719]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.719]         }
[08:27:40.719]         base::close(...future.stdout)
[08:27:40.719]         ...future.stdout <- NULL
[08:27:40.719]     }
[08:27:40.719]     ...future.result$conditions <- ...future.conditions
[08:27:40.719]     ...future.result$finished <- base::Sys.time()
[08:27:40.719]     ...future.result
[08:27:40.719] }
[08:27:40.721] assign_globals() ...
[08:27:40.721] List of 2
[08:27:40.721]  $ rr: int 3
[08:27:40.721]  $ cc: int 1
[08:27:40.721]  - attr(*, "where")=List of 2
[08:27:40.721]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.721]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.721]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.721]  - attr(*, "resolved")= logi FALSE
[08:27:40.721]  - attr(*, "total_size")= num 70
[08:27:40.721]  - attr(*, "already-done")= logi TRUE
[08:27:40.724] - copied ‘rr’ to environment
[08:27:40.724] - copied ‘cc’ to environment
[08:27:40.724] assign_globals() ... done
[08:27:40.724] plan(): Setting new future strategy stack:
[08:27:40.725] List of future strategies:
[08:27:40.725] 1. sequential:
[08:27:40.725]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.725]    - tweaked: FALSE
[08:27:40.725]    - call: NULL
[08:27:40.725] plan(): nbrOfWorkers() = 1
[08:27:40.726] plan(): Setting new future strategy stack:
[08:27:40.726] List of future strategies:
[08:27:40.726] 1. sequential:
[08:27:40.726]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.726]    - tweaked: FALSE
[08:27:40.726]    - call: future::plan("sequential")
[08:27:40.726] plan(): nbrOfWorkers() = 1
[08:27:40.727] SequentialFuture started (and completed)
[08:27:40.727] - Launch lazy future ... done
[08:27:40.727] run() for ‘SequentialFuture’ ... done
[08:27:40.727] run() for ‘Future’ ...
[08:27:40.727] - state: ‘created’
[08:27:40.727] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.727] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.728] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.728]   - Field: ‘label’
[08:27:40.728]   - Field: ‘local’
[08:27:40.728]   - Field: ‘owner’
[08:27:40.728]   - Field: ‘envir’
[08:27:40.728]   - Field: ‘packages’
[08:27:40.728]   - Field: ‘gc’
[08:27:40.728]   - Field: ‘conditions’
[08:27:40.728]   - Field: ‘expr’
[08:27:40.728]   - Field: ‘uuid’
[08:27:40.728]   - Field: ‘seed’
[08:27:40.728]   - Field: ‘version’
[08:27:40.729]   - Field: ‘result’
[08:27:40.729]   - Field: ‘asynchronous’
[08:27:40.729]   - Field: ‘calls’
[08:27:40.729]   - Field: ‘globals’
[08:27:40.729]   - Field: ‘stdout’
[08:27:40.729]   - Field: ‘earlySignal’
[08:27:40.729]   - Field: ‘lazy’
[08:27:40.729]   - Field: ‘state’
[08:27:40.729] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.729] - Launch lazy future ...
[08:27:40.730] Packages needed by the future expression (n = 0): <none>
[08:27:40.730] Packages needed by future strategies (n = 0): <none>
[08:27:40.730] {
[08:27:40.730]     {
[08:27:40.730]         {
[08:27:40.730]             ...future.startTime <- base::Sys.time()
[08:27:40.730]             {
[08:27:40.730]                 {
[08:27:40.730]                   {
[08:27:40.730]                     base::local({
[08:27:40.730]                       has_future <- base::requireNamespace("future", 
[08:27:40.730]                         quietly = TRUE)
[08:27:40.730]                       if (has_future) {
[08:27:40.730]                         ns <- base::getNamespace("future")
[08:27:40.730]                         version <- ns[[".package"]][["version"]]
[08:27:40.730]                         if (is.null(version)) 
[08:27:40.730]                           version <- utils::packageVersion("future")
[08:27:40.730]                       }
[08:27:40.730]                       else {
[08:27:40.730]                         version <- NULL
[08:27:40.730]                       }
[08:27:40.730]                       if (!has_future || version < "1.8.0") {
[08:27:40.730]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.730]                           "", base::R.version$version.string), 
[08:27:40.730]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.730]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.730]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.730]                             "release", "version")], collapse = " "), 
[08:27:40.730]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.730]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.730]                           info)
[08:27:40.730]                         info <- base::paste(info, collapse = "; ")
[08:27:40.730]                         if (!has_future) {
[08:27:40.730]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.730]                             info)
[08:27:40.730]                         }
[08:27:40.730]                         else {
[08:27:40.730]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.730]                             info, version)
[08:27:40.730]                         }
[08:27:40.730]                         base::stop(msg)
[08:27:40.730]                       }
[08:27:40.730]                     })
[08:27:40.730]                   }
[08:27:40.730]                   ...future.strategy.old <- future::plan("list")
[08:27:40.730]                   options(future.plan = NULL)
[08:27:40.730]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.730]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.730]                 }
[08:27:40.730]                 ...future.workdir <- getwd()
[08:27:40.730]             }
[08:27:40.730]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.730]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.730]         }
[08:27:40.730]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.730]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.730]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.730]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.730]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.730]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.730]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.730]             base::names(...future.oldOptions))
[08:27:40.730]     }
[08:27:40.730]     if (FALSE) {
[08:27:40.730]     }
[08:27:40.730]     else {
[08:27:40.730]         if (TRUE) {
[08:27:40.730]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.730]                 open = "w")
[08:27:40.730]         }
[08:27:40.730]         else {
[08:27:40.730]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.730]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.730]         }
[08:27:40.730]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.730]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.730]             base::sink(type = "output", split = FALSE)
[08:27:40.730]             base::close(...future.stdout)
[08:27:40.730]         }, add = TRUE)
[08:27:40.730]     }
[08:27:40.730]     ...future.frame <- base::sys.nframe()
[08:27:40.730]     ...future.conditions <- base::list()
[08:27:40.730]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.730]     if (FALSE) {
[08:27:40.730]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.730]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.730]     }
[08:27:40.730]     ...future.result <- base::tryCatch({
[08:27:40.730]         base::withCallingHandlers({
[08:27:40.730]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.730]                 rr, cc)))
[08:27:40.730]             future::FutureResult(value = ...future.value$value, 
[08:27:40.730]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.730]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.730]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.730]                     ...future.globalenv.names))
[08:27:40.730]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.730]         }, condition = base::local({
[08:27:40.730]             c <- base::c
[08:27:40.730]             inherits <- base::inherits
[08:27:40.730]             invokeRestart <- base::invokeRestart
[08:27:40.730]             length <- base::length
[08:27:40.730]             list <- base::list
[08:27:40.730]             seq.int <- base::seq.int
[08:27:40.730]             signalCondition <- base::signalCondition
[08:27:40.730]             sys.calls <- base::sys.calls
[08:27:40.730]             `[[` <- base::`[[`
[08:27:40.730]             `+` <- base::`+`
[08:27:40.730]             `<<-` <- base::`<<-`
[08:27:40.730]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.730]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.730]                   3L)]
[08:27:40.730]             }
[08:27:40.730]             function(cond) {
[08:27:40.730]                 is_error <- inherits(cond, "error")
[08:27:40.730]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.730]                   NULL)
[08:27:40.730]                 if (is_error) {
[08:27:40.730]                   sessionInformation <- function() {
[08:27:40.730]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.730]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.730]                       search = base::search(), system = base::Sys.info())
[08:27:40.730]                   }
[08:27:40.730]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.730]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.730]                     cond$call), session = sessionInformation(), 
[08:27:40.730]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.730]                   signalCondition(cond)
[08:27:40.730]                 }
[08:27:40.730]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.730]                 "immediateCondition"))) {
[08:27:40.730]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.730]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.730]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.730]                   if (TRUE && !signal) {
[08:27:40.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.730]                     {
[08:27:40.730]                       inherits <- base::inherits
[08:27:40.730]                       invokeRestart <- base::invokeRestart
[08:27:40.730]                       is.null <- base::is.null
[08:27:40.730]                       muffled <- FALSE
[08:27:40.730]                       if (inherits(cond, "message")) {
[08:27:40.730]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.730]                         if (muffled) 
[08:27:40.730]                           invokeRestart("muffleMessage")
[08:27:40.730]                       }
[08:27:40.730]                       else if (inherits(cond, "warning")) {
[08:27:40.730]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.730]                         if (muffled) 
[08:27:40.730]                           invokeRestart("muffleWarning")
[08:27:40.730]                       }
[08:27:40.730]                       else if (inherits(cond, "condition")) {
[08:27:40.730]                         if (!is.null(pattern)) {
[08:27:40.730]                           computeRestarts <- base::computeRestarts
[08:27:40.730]                           grepl <- base::grepl
[08:27:40.730]                           restarts <- computeRestarts(cond)
[08:27:40.730]                           for (restart in restarts) {
[08:27:40.730]                             name <- restart$name
[08:27:40.730]                             if (is.null(name)) 
[08:27:40.730]                               next
[08:27:40.730]                             if (!grepl(pattern, name)) 
[08:27:40.730]                               next
[08:27:40.730]                             invokeRestart(restart)
[08:27:40.730]                             muffled <- TRUE
[08:27:40.730]                             break
[08:27:40.730]                           }
[08:27:40.730]                         }
[08:27:40.730]                       }
[08:27:40.730]                       invisible(muffled)
[08:27:40.730]                     }
[08:27:40.730]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.730]                   }
[08:27:40.730]                 }
[08:27:40.730]                 else {
[08:27:40.730]                   if (TRUE) {
[08:27:40.730]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.730]                     {
[08:27:40.730]                       inherits <- base::inherits
[08:27:40.730]                       invokeRestart <- base::invokeRestart
[08:27:40.730]                       is.null <- base::is.null
[08:27:40.730]                       muffled <- FALSE
[08:27:40.730]                       if (inherits(cond, "message")) {
[08:27:40.730]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.730]                         if (muffled) 
[08:27:40.730]                           invokeRestart("muffleMessage")
[08:27:40.730]                       }
[08:27:40.730]                       else if (inherits(cond, "warning")) {
[08:27:40.730]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.730]                         if (muffled) 
[08:27:40.730]                           invokeRestart("muffleWarning")
[08:27:40.730]                       }
[08:27:40.730]                       else if (inherits(cond, "condition")) {
[08:27:40.730]                         if (!is.null(pattern)) {
[08:27:40.730]                           computeRestarts <- base::computeRestarts
[08:27:40.730]                           grepl <- base::grepl
[08:27:40.730]                           restarts <- computeRestarts(cond)
[08:27:40.730]                           for (restart in restarts) {
[08:27:40.730]                             name <- restart$name
[08:27:40.730]                             if (is.null(name)) 
[08:27:40.730]                               next
[08:27:40.730]                             if (!grepl(pattern, name)) 
[08:27:40.730]                               next
[08:27:40.730]                             invokeRestart(restart)
[08:27:40.730]                             muffled <- TRUE
[08:27:40.730]                             break
[08:27:40.730]                           }
[08:27:40.730]                         }
[08:27:40.730]                       }
[08:27:40.730]                       invisible(muffled)
[08:27:40.730]                     }
[08:27:40.730]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.730]                   }
[08:27:40.730]                 }
[08:27:40.730]             }
[08:27:40.730]         }))
[08:27:40.730]     }, error = function(ex) {
[08:27:40.730]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.730]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.730]                 ...future.rng), started = ...future.startTime, 
[08:27:40.730]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.730]             version = "1.8"), class = "FutureResult")
[08:27:40.730]     }, finally = {
[08:27:40.730]         if (!identical(...future.workdir, getwd())) 
[08:27:40.730]             setwd(...future.workdir)
[08:27:40.730]         {
[08:27:40.730]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.730]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.730]             }
[08:27:40.730]             base::options(...future.oldOptions)
[08:27:40.730]             if (.Platform$OS.type == "windows") {
[08:27:40.730]                 old_names <- names(...future.oldEnvVars)
[08:27:40.730]                 envs <- base::Sys.getenv()
[08:27:40.730]                 names <- names(envs)
[08:27:40.730]                 common <- intersect(names, old_names)
[08:27:40.730]                 added <- setdiff(names, old_names)
[08:27:40.730]                 removed <- setdiff(old_names, names)
[08:27:40.730]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.730]                   envs[common]]
[08:27:40.730]                 NAMES <- toupper(changed)
[08:27:40.730]                 args <- list()
[08:27:40.730]                 for (kk in seq_along(NAMES)) {
[08:27:40.730]                   name <- changed[[kk]]
[08:27:40.730]                   NAME <- NAMES[[kk]]
[08:27:40.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.730]                     next
[08:27:40.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.730]                 }
[08:27:40.730]                 NAMES <- toupper(added)
[08:27:40.730]                 for (kk in seq_along(NAMES)) {
[08:27:40.730]                   name <- added[[kk]]
[08:27:40.730]                   NAME <- NAMES[[kk]]
[08:27:40.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.730]                     next
[08:27:40.730]                   args[[name]] <- ""
[08:27:40.730]                 }
[08:27:40.730]                 NAMES <- toupper(removed)
[08:27:40.730]                 for (kk in seq_along(NAMES)) {
[08:27:40.730]                   name <- removed[[kk]]
[08:27:40.730]                   NAME <- NAMES[[kk]]
[08:27:40.730]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.730]                     next
[08:27:40.730]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.730]                 }
[08:27:40.730]                 if (length(args) > 0) 
[08:27:40.730]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.730]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.730]             }
[08:27:40.730]             else {
[08:27:40.730]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.730]             }
[08:27:40.730]             {
[08:27:40.730]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.730]                   0L) {
[08:27:40.730]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.730]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.730]                   base::options(opts)
[08:27:40.730]                 }
[08:27:40.730]                 {
[08:27:40.730]                   {
[08:27:40.730]                     NULL
[08:27:40.730]                     RNGkind("Mersenne-Twister")
[08:27:40.730]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.730]                       inherits = FALSE)
[08:27:40.730]                   }
[08:27:40.730]                   options(future.plan = NULL)
[08:27:40.730]                   if (is.na(NA_character_)) 
[08:27:40.730]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.730]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.730]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.730]                     .init = FALSE)
[08:27:40.730]                 }
[08:27:40.730]             }
[08:27:40.730]         }
[08:27:40.730]     })
[08:27:40.730]     if (TRUE) {
[08:27:40.730]         base::sink(type = "output", split = FALSE)
[08:27:40.730]         if (TRUE) {
[08:27:40.730]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.730]         }
[08:27:40.730]         else {
[08:27:40.730]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.730]         }
[08:27:40.730]         base::close(...future.stdout)
[08:27:40.730]         ...future.stdout <- NULL
[08:27:40.730]     }
[08:27:40.730]     ...future.result$conditions <- ...future.conditions
[08:27:40.730]     ...future.result$finished <- base::Sys.time()
[08:27:40.730]     ...future.result
[08:27:40.730] }
[08:27:40.732] assign_globals() ...
[08:27:40.732] List of 2
[08:27:40.732]  $ rr: int 1
[08:27:40.732]  $ cc: int 2
[08:27:40.732]  - attr(*, "where")=List of 2
[08:27:40.732]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.732]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.732]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.732]  - attr(*, "resolved")= logi FALSE
[08:27:40.732]  - attr(*, "total_size")= num 70
[08:27:40.732]  - attr(*, "already-done")= logi TRUE
[08:27:40.735] - copied ‘rr’ to environment
[08:27:40.735] - copied ‘cc’ to environment
[08:27:40.735] assign_globals() ... done
[08:27:40.735] plan(): Setting new future strategy stack:
[08:27:40.735] List of future strategies:
[08:27:40.735] 1. sequential:
[08:27:40.735]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.735]    - tweaked: FALSE
[08:27:40.735]    - call: NULL
[08:27:40.736] plan(): nbrOfWorkers() = 1
[08:27:40.736] plan(): Setting new future strategy stack:
[08:27:40.737] List of future strategies:
[08:27:40.737] 1. sequential:
[08:27:40.737]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.737]    - tweaked: FALSE
[08:27:40.737]    - call: future::plan("sequential")
[08:27:40.737] plan(): nbrOfWorkers() = 1
[08:27:40.737] SequentialFuture started (and completed)
[08:27:40.737] - Launch lazy future ... done
[08:27:40.737] run() for ‘SequentialFuture’ ... done
[08:27:40.738] run() for ‘Future’ ...
[08:27:40.738] - state: ‘created’
[08:27:40.738] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.738] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.738] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.738]   - Field: ‘label’
[08:27:40.738]   - Field: ‘local’
[08:27:40.739]   - Field: ‘owner’
[08:27:40.739]   - Field: ‘envir’
[08:27:40.741]   - Field: ‘packages’
[08:27:40.741]   - Field: ‘gc’
[08:27:40.741]   - Field: ‘conditions’
[08:27:40.741]   - Field: ‘expr’
[08:27:40.741]   - Field: ‘uuid’
[08:27:40.741]   - Field: ‘seed’
[08:27:40.741]   - Field: ‘version’
[08:27:40.741]   - Field: ‘result’
[08:27:40.741]   - Field: ‘asynchronous’
[08:27:40.741]   - Field: ‘calls’
[08:27:40.742]   - Field: ‘globals’
[08:27:40.742]   - Field: ‘stdout’
[08:27:40.742]   - Field: ‘earlySignal’
[08:27:40.742]   - Field: ‘lazy’
[08:27:40.742]   - Field: ‘state’
[08:27:40.742] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.742] - Launch lazy future ...
[08:27:40.742] Packages needed by the future expression (n = 0): <none>
[08:27:40.742] Packages needed by future strategies (n = 0): <none>
[08:27:40.743] {
[08:27:40.743]     {
[08:27:40.743]         {
[08:27:40.743]             ...future.startTime <- base::Sys.time()
[08:27:40.743]             {
[08:27:40.743]                 {
[08:27:40.743]                   {
[08:27:40.743]                     base::local({
[08:27:40.743]                       has_future <- base::requireNamespace("future", 
[08:27:40.743]                         quietly = TRUE)
[08:27:40.743]                       if (has_future) {
[08:27:40.743]                         ns <- base::getNamespace("future")
[08:27:40.743]                         version <- ns[[".package"]][["version"]]
[08:27:40.743]                         if (is.null(version)) 
[08:27:40.743]                           version <- utils::packageVersion("future")
[08:27:40.743]                       }
[08:27:40.743]                       else {
[08:27:40.743]                         version <- NULL
[08:27:40.743]                       }
[08:27:40.743]                       if (!has_future || version < "1.8.0") {
[08:27:40.743]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.743]                           "", base::R.version$version.string), 
[08:27:40.743]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.743]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.743]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.743]                             "release", "version")], collapse = " "), 
[08:27:40.743]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.743]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.743]                           info)
[08:27:40.743]                         info <- base::paste(info, collapse = "; ")
[08:27:40.743]                         if (!has_future) {
[08:27:40.743]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.743]                             info)
[08:27:40.743]                         }
[08:27:40.743]                         else {
[08:27:40.743]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.743]                             info, version)
[08:27:40.743]                         }
[08:27:40.743]                         base::stop(msg)
[08:27:40.743]                       }
[08:27:40.743]                     })
[08:27:40.743]                   }
[08:27:40.743]                   ...future.strategy.old <- future::plan("list")
[08:27:40.743]                   options(future.plan = NULL)
[08:27:40.743]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.743]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.743]                 }
[08:27:40.743]                 ...future.workdir <- getwd()
[08:27:40.743]             }
[08:27:40.743]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.743]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.743]         }
[08:27:40.743]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.743]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.743]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.743]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.743]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.743]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.743]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.743]             base::names(...future.oldOptions))
[08:27:40.743]     }
[08:27:40.743]     if (FALSE) {
[08:27:40.743]     }
[08:27:40.743]     else {
[08:27:40.743]         if (TRUE) {
[08:27:40.743]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.743]                 open = "w")
[08:27:40.743]         }
[08:27:40.743]         else {
[08:27:40.743]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.743]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.743]         }
[08:27:40.743]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.743]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.743]             base::sink(type = "output", split = FALSE)
[08:27:40.743]             base::close(...future.stdout)
[08:27:40.743]         }, add = TRUE)
[08:27:40.743]     }
[08:27:40.743]     ...future.frame <- base::sys.nframe()
[08:27:40.743]     ...future.conditions <- base::list()
[08:27:40.743]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.743]     if (FALSE) {
[08:27:40.743]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.743]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.743]     }
[08:27:40.743]     ...future.result <- base::tryCatch({
[08:27:40.743]         base::withCallingHandlers({
[08:27:40.743]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.743]                 rr, cc)))
[08:27:40.743]             future::FutureResult(value = ...future.value$value, 
[08:27:40.743]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.743]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.743]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.743]                     ...future.globalenv.names))
[08:27:40.743]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.743]         }, condition = base::local({
[08:27:40.743]             c <- base::c
[08:27:40.743]             inherits <- base::inherits
[08:27:40.743]             invokeRestart <- base::invokeRestart
[08:27:40.743]             length <- base::length
[08:27:40.743]             list <- base::list
[08:27:40.743]             seq.int <- base::seq.int
[08:27:40.743]             signalCondition <- base::signalCondition
[08:27:40.743]             sys.calls <- base::sys.calls
[08:27:40.743]             `[[` <- base::`[[`
[08:27:40.743]             `+` <- base::`+`
[08:27:40.743]             `<<-` <- base::`<<-`
[08:27:40.743]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.743]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.743]                   3L)]
[08:27:40.743]             }
[08:27:40.743]             function(cond) {
[08:27:40.743]                 is_error <- inherits(cond, "error")
[08:27:40.743]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.743]                   NULL)
[08:27:40.743]                 if (is_error) {
[08:27:40.743]                   sessionInformation <- function() {
[08:27:40.743]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.743]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.743]                       search = base::search(), system = base::Sys.info())
[08:27:40.743]                   }
[08:27:40.743]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.743]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.743]                     cond$call), session = sessionInformation(), 
[08:27:40.743]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.743]                   signalCondition(cond)
[08:27:40.743]                 }
[08:27:40.743]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.743]                 "immediateCondition"))) {
[08:27:40.743]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.743]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.743]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.743]                   if (TRUE && !signal) {
[08:27:40.743]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.743]                     {
[08:27:40.743]                       inherits <- base::inherits
[08:27:40.743]                       invokeRestart <- base::invokeRestart
[08:27:40.743]                       is.null <- base::is.null
[08:27:40.743]                       muffled <- FALSE
[08:27:40.743]                       if (inherits(cond, "message")) {
[08:27:40.743]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.743]                         if (muffled) 
[08:27:40.743]                           invokeRestart("muffleMessage")
[08:27:40.743]                       }
[08:27:40.743]                       else if (inherits(cond, "warning")) {
[08:27:40.743]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.743]                         if (muffled) 
[08:27:40.743]                           invokeRestart("muffleWarning")
[08:27:40.743]                       }
[08:27:40.743]                       else if (inherits(cond, "condition")) {
[08:27:40.743]                         if (!is.null(pattern)) {
[08:27:40.743]                           computeRestarts <- base::computeRestarts
[08:27:40.743]                           grepl <- base::grepl
[08:27:40.743]                           restarts <- computeRestarts(cond)
[08:27:40.743]                           for (restart in restarts) {
[08:27:40.743]                             name <- restart$name
[08:27:40.743]                             if (is.null(name)) 
[08:27:40.743]                               next
[08:27:40.743]                             if (!grepl(pattern, name)) 
[08:27:40.743]                               next
[08:27:40.743]                             invokeRestart(restart)
[08:27:40.743]                             muffled <- TRUE
[08:27:40.743]                             break
[08:27:40.743]                           }
[08:27:40.743]                         }
[08:27:40.743]                       }
[08:27:40.743]                       invisible(muffled)
[08:27:40.743]                     }
[08:27:40.743]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.743]                   }
[08:27:40.743]                 }
[08:27:40.743]                 else {
[08:27:40.743]                   if (TRUE) {
[08:27:40.743]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.743]                     {
[08:27:40.743]                       inherits <- base::inherits
[08:27:40.743]                       invokeRestart <- base::invokeRestart
[08:27:40.743]                       is.null <- base::is.null
[08:27:40.743]                       muffled <- FALSE
[08:27:40.743]                       if (inherits(cond, "message")) {
[08:27:40.743]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.743]                         if (muffled) 
[08:27:40.743]                           invokeRestart("muffleMessage")
[08:27:40.743]                       }
[08:27:40.743]                       else if (inherits(cond, "warning")) {
[08:27:40.743]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.743]                         if (muffled) 
[08:27:40.743]                           invokeRestart("muffleWarning")
[08:27:40.743]                       }
[08:27:40.743]                       else if (inherits(cond, "condition")) {
[08:27:40.743]                         if (!is.null(pattern)) {
[08:27:40.743]                           computeRestarts <- base::computeRestarts
[08:27:40.743]                           grepl <- base::grepl
[08:27:40.743]                           restarts <- computeRestarts(cond)
[08:27:40.743]                           for (restart in restarts) {
[08:27:40.743]                             name <- restart$name
[08:27:40.743]                             if (is.null(name)) 
[08:27:40.743]                               next
[08:27:40.743]                             if (!grepl(pattern, name)) 
[08:27:40.743]                               next
[08:27:40.743]                             invokeRestart(restart)
[08:27:40.743]                             muffled <- TRUE
[08:27:40.743]                             break
[08:27:40.743]                           }
[08:27:40.743]                         }
[08:27:40.743]                       }
[08:27:40.743]                       invisible(muffled)
[08:27:40.743]                     }
[08:27:40.743]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.743]                   }
[08:27:40.743]                 }
[08:27:40.743]             }
[08:27:40.743]         }))
[08:27:40.743]     }, error = function(ex) {
[08:27:40.743]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.743]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.743]                 ...future.rng), started = ...future.startTime, 
[08:27:40.743]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.743]             version = "1.8"), class = "FutureResult")
[08:27:40.743]     }, finally = {
[08:27:40.743]         if (!identical(...future.workdir, getwd())) 
[08:27:40.743]             setwd(...future.workdir)
[08:27:40.743]         {
[08:27:40.743]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.743]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.743]             }
[08:27:40.743]             base::options(...future.oldOptions)
[08:27:40.743]             if (.Platform$OS.type == "windows") {
[08:27:40.743]                 old_names <- names(...future.oldEnvVars)
[08:27:40.743]                 envs <- base::Sys.getenv()
[08:27:40.743]                 names <- names(envs)
[08:27:40.743]                 common <- intersect(names, old_names)
[08:27:40.743]                 added <- setdiff(names, old_names)
[08:27:40.743]                 removed <- setdiff(old_names, names)
[08:27:40.743]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.743]                   envs[common]]
[08:27:40.743]                 NAMES <- toupper(changed)
[08:27:40.743]                 args <- list()
[08:27:40.743]                 for (kk in seq_along(NAMES)) {
[08:27:40.743]                   name <- changed[[kk]]
[08:27:40.743]                   NAME <- NAMES[[kk]]
[08:27:40.743]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.743]                     next
[08:27:40.743]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.743]                 }
[08:27:40.743]                 NAMES <- toupper(added)
[08:27:40.743]                 for (kk in seq_along(NAMES)) {
[08:27:40.743]                   name <- added[[kk]]
[08:27:40.743]                   NAME <- NAMES[[kk]]
[08:27:40.743]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.743]                     next
[08:27:40.743]                   args[[name]] <- ""
[08:27:40.743]                 }
[08:27:40.743]                 NAMES <- toupper(removed)
[08:27:40.743]                 for (kk in seq_along(NAMES)) {
[08:27:40.743]                   name <- removed[[kk]]
[08:27:40.743]                   NAME <- NAMES[[kk]]
[08:27:40.743]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.743]                     next
[08:27:40.743]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.743]                 }
[08:27:40.743]                 if (length(args) > 0) 
[08:27:40.743]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.743]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.743]             }
[08:27:40.743]             else {
[08:27:40.743]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.743]             }
[08:27:40.743]             {
[08:27:40.743]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.743]                   0L) {
[08:27:40.743]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.743]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.743]                   base::options(opts)
[08:27:40.743]                 }
[08:27:40.743]                 {
[08:27:40.743]                   {
[08:27:40.743]                     NULL
[08:27:40.743]                     RNGkind("Mersenne-Twister")
[08:27:40.743]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.743]                       inherits = FALSE)
[08:27:40.743]                   }
[08:27:40.743]                   options(future.plan = NULL)
[08:27:40.743]                   if (is.na(NA_character_)) 
[08:27:40.743]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.743]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.743]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.743]                     .init = FALSE)
[08:27:40.743]                 }
[08:27:40.743]             }
[08:27:40.743]         }
[08:27:40.743]     })
[08:27:40.743]     if (TRUE) {
[08:27:40.743]         base::sink(type = "output", split = FALSE)
[08:27:40.743]         if (TRUE) {
[08:27:40.743]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.743]         }
[08:27:40.743]         else {
[08:27:40.743]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.743]         }
[08:27:40.743]         base::close(...future.stdout)
[08:27:40.743]         ...future.stdout <- NULL
[08:27:40.743]     }
[08:27:40.743]     ...future.result$conditions <- ...future.conditions
[08:27:40.743]     ...future.result$finished <- base::Sys.time()
[08:27:40.743]     ...future.result
[08:27:40.743] }
[08:27:40.745] assign_globals() ...
[08:27:40.745] List of 2
[08:27:40.745]  $ rr: int 2
[08:27:40.745]  $ cc: int 2
[08:27:40.745]  - attr(*, "where")=List of 2
[08:27:40.745]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.745]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.745]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.745]  - attr(*, "resolved")= logi FALSE
[08:27:40.745]  - attr(*, "total_size")= num 70
[08:27:40.745]  - attr(*, "already-done")= logi TRUE
[08:27:40.748] - copied ‘rr’ to environment
[08:27:40.748] - copied ‘cc’ to environment
[08:27:40.748] assign_globals() ... done
[08:27:40.748] plan(): Setting new future strategy stack:
[08:27:40.748] List of future strategies:
[08:27:40.748] 1. sequential:
[08:27:40.748]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.748]    - tweaked: FALSE
[08:27:40.748]    - call: NULL
[08:27:40.749] plan(): nbrOfWorkers() = 1
[08:27:40.749] plan(): Setting new future strategy stack:
[08:27:40.749] List of future strategies:
[08:27:40.749] 1. sequential:
[08:27:40.749]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.749]    - tweaked: FALSE
[08:27:40.749]    - call: future::plan("sequential")
[08:27:40.750] plan(): nbrOfWorkers() = 1
[08:27:40.750] SequentialFuture started (and completed)
[08:27:40.750] - Launch lazy future ... done
[08:27:40.750] run() for ‘SequentialFuture’ ... done
[08:27:40.750] run() for ‘Future’ ...
[08:27:40.751] - state: ‘created’
[08:27:40.751] - Future backend: ‘FutureStrategy’, ‘sequential’, ‘uniprocess’, ‘future’, ‘function’
[08:27:40.751] - Future class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[08:27:40.751] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ...
[08:27:40.751]   - Field: ‘label’
[08:27:40.751]   - Field: ‘local’
[08:27:40.751]   - Field: ‘owner’
[08:27:40.751]   - Field: ‘envir’
[08:27:40.752]   - Field: ‘packages’
[08:27:40.752]   - Field: ‘gc’
[08:27:40.752]   - Field: ‘conditions’
[08:27:40.752]   - Field: ‘expr’
[08:27:40.752]   - Field: ‘uuid’
[08:27:40.752]   - Field: ‘seed’
[08:27:40.752]   - Field: ‘version’
[08:27:40.752]   - Field: ‘result’
[08:27:40.752]   - Field: ‘asynchronous’
[08:27:40.752]   - Field: ‘calls’
[08:27:40.752]   - Field: ‘globals’
[08:27:40.753]   - Field: ‘stdout’
[08:27:40.753]   - Field: ‘earlySignal’
[08:27:40.753]   - Field: ‘lazy’
[08:27:40.753]   - Field: ‘state’
[08:27:40.753] - Copy elements of temporary ‘SequentialFuture’ to final ‘Future’ object ... done
[08:27:40.753] - Launch lazy future ...
[08:27:40.753] Packages needed by the future expression (n = 0): <none>
[08:27:40.753] Packages needed by future strategies (n = 0): <none>
[08:27:40.754] {
[08:27:40.754]     {
[08:27:40.754]         {
[08:27:40.754]             ...future.startTime <- base::Sys.time()
[08:27:40.754]             {
[08:27:40.754]                 {
[08:27:40.754]                   {
[08:27:40.754]                     base::local({
[08:27:40.754]                       has_future <- base::requireNamespace("future", 
[08:27:40.754]                         quietly = TRUE)
[08:27:40.754]                       if (has_future) {
[08:27:40.754]                         ns <- base::getNamespace("future")
[08:27:40.754]                         version <- ns[[".package"]][["version"]]
[08:27:40.754]                         if (is.null(version)) 
[08:27:40.754]                           version <- utils::packageVersion("future")
[08:27:40.754]                       }
[08:27:40.754]                       else {
[08:27:40.754]                         version <- NULL
[08:27:40.754]                       }
[08:27:40.754]                       if (!has_future || version < "1.8.0") {
[08:27:40.754]                         info <- base::c(r_version = base::gsub("R version ", 
[08:27:40.754]                           "", base::R.version$version.string), 
[08:27:40.754]                           platform = base::sprintf("%s (%s-bit)", 
[08:27:40.754]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[08:27:40.754]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[08:27:40.754]                             "release", "version")], collapse = " "), 
[08:27:40.754]                           hostname = base::Sys.info()[["nodename"]])
[08:27:40.754]                         info <- base::sprintf("%s: %s", base::names(info), 
[08:27:40.754]                           info)
[08:27:40.754]                         info <- base::paste(info, collapse = "; ")
[08:27:40.754]                         if (!has_future) {
[08:27:40.754]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[08:27:40.754]                             info)
[08:27:40.754]                         }
[08:27:40.754]                         else {
[08:27:40.754]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[08:27:40.754]                             info, version)
[08:27:40.754]                         }
[08:27:40.754]                         base::stop(msg)
[08:27:40.754]                       }
[08:27:40.754]                     })
[08:27:40.754]                   }
[08:27:40.754]                   ...future.strategy.old <- future::plan("list")
[08:27:40.754]                   options(future.plan = NULL)
[08:27:40.754]                   Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.754]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[08:27:40.754]                 }
[08:27:40.754]                 ...future.workdir <- getwd()
[08:27:40.754]             }
[08:27:40.754]             ...future.oldOptions <- base::as.list(base::.Options)
[08:27:40.754]             ...future.oldEnvVars <- base::Sys.getenv()
[08:27:40.754]         }
[08:27:40.754]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[08:27:40.754]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[08:27:40.754]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[08:27:40.754]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[08:27:40.754]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[08:27:40.754]             future.stdout.windows.reencode = NULL, width = 80L)
[08:27:40.754]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[08:27:40.754]             base::names(...future.oldOptions))
[08:27:40.754]     }
[08:27:40.754]     if (FALSE) {
[08:27:40.754]     }
[08:27:40.754]     else {
[08:27:40.754]         if (TRUE) {
[08:27:40.754]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[08:27:40.754]                 open = "w")
[08:27:40.754]         }
[08:27:40.754]         else {
[08:27:40.754]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[08:27:40.754]                 windows = "NUL", "/dev/null"), open = "w")
[08:27:40.754]         }
[08:27:40.754]         base::sink(...future.stdout, type = "output", split = FALSE)
[08:27:40.754]         base::on.exit(if (!base::is.null(...future.stdout)) {
[08:27:40.754]             base::sink(type = "output", split = FALSE)
[08:27:40.754]             base::close(...future.stdout)
[08:27:40.754]         }, add = TRUE)
[08:27:40.754]     }
[08:27:40.754]     ...future.frame <- base::sys.nframe()
[08:27:40.754]     ...future.conditions <- base::list()
[08:27:40.754]     ...future.rng <- base::globalenv()$.Random.seed
[08:27:40.754]     if (FALSE) {
[08:27:40.754]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[08:27:40.754]             "...future.value", "...future.globalenv.names", ".Random.seed")
[08:27:40.754]     }
[08:27:40.754]     ...future.result <- base::tryCatch({
[08:27:40.754]         base::withCallingHandlers({
[08:27:40.754]             ...future.value <- base::withVisible(base::local(sprintf("(%s, %s)", 
[08:27:40.754]                 rr, cc)))
[08:27:40.754]             future::FutureResult(value = ...future.value$value, 
[08:27:40.754]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.754]                   ...future.rng), globalenv = if (FALSE) 
[08:27:40.754]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[08:27:40.754]                     ...future.globalenv.names))
[08:27:40.754]                 else NULL, started = ...future.startTime, version = "1.8")
[08:27:40.754]         }, condition = base::local({
[08:27:40.754]             c <- base::c
[08:27:40.754]             inherits <- base::inherits
[08:27:40.754]             invokeRestart <- base::invokeRestart
[08:27:40.754]             length <- base::length
[08:27:40.754]             list <- base::list
[08:27:40.754]             seq.int <- base::seq.int
[08:27:40.754]             signalCondition <- base::signalCondition
[08:27:40.754]             sys.calls <- base::sys.calls
[08:27:40.754]             `[[` <- base::`[[`
[08:27:40.754]             `+` <- base::`+`
[08:27:40.754]             `<<-` <- base::`<<-`
[08:27:40.754]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[08:27:40.754]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[08:27:40.754]                   3L)]
[08:27:40.754]             }
[08:27:40.754]             function(cond) {
[08:27:40.754]                 is_error <- inherits(cond, "error")
[08:27:40.754]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[08:27:40.754]                   NULL)
[08:27:40.754]                 if (is_error) {
[08:27:40.754]                   sessionInformation <- function() {
[08:27:40.754]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[08:27:40.754]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[08:27:40.754]                       search = base::search(), system = base::Sys.info())
[08:27:40.754]                   }
[08:27:40.754]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.754]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[08:27:40.754]                     cond$call), session = sessionInformation(), 
[08:27:40.754]                     timestamp = base::Sys.time(), signaled = 0L)
[08:27:40.754]                   signalCondition(cond)
[08:27:40.754]                 }
[08:27:40.754]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[08:27:40.754]                 "immediateCondition"))) {
[08:27:40.754]                   signal <- TRUE && inherits(cond, "immediateCondition")
[08:27:40.754]                   ...future.conditions[[length(...future.conditions) + 
[08:27:40.754]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[08:27:40.754]                   if (TRUE && !signal) {
[08:27:40.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.754]                     {
[08:27:40.754]                       inherits <- base::inherits
[08:27:40.754]                       invokeRestart <- base::invokeRestart
[08:27:40.754]                       is.null <- base::is.null
[08:27:40.754]                       muffled <- FALSE
[08:27:40.754]                       if (inherits(cond, "message")) {
[08:27:40.754]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.754]                         if (muffled) 
[08:27:40.754]                           invokeRestart("muffleMessage")
[08:27:40.754]                       }
[08:27:40.754]                       else if (inherits(cond, "warning")) {
[08:27:40.754]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.754]                         if (muffled) 
[08:27:40.754]                           invokeRestart("muffleWarning")
[08:27:40.754]                       }
[08:27:40.754]                       else if (inherits(cond, "condition")) {
[08:27:40.754]                         if (!is.null(pattern)) {
[08:27:40.754]                           computeRestarts <- base::computeRestarts
[08:27:40.754]                           grepl <- base::grepl
[08:27:40.754]                           restarts <- computeRestarts(cond)
[08:27:40.754]                           for (restart in restarts) {
[08:27:40.754]                             name <- restart$name
[08:27:40.754]                             if (is.null(name)) 
[08:27:40.754]                               next
[08:27:40.754]                             if (!grepl(pattern, name)) 
[08:27:40.754]                               next
[08:27:40.754]                             invokeRestart(restart)
[08:27:40.754]                             muffled <- TRUE
[08:27:40.754]                             break
[08:27:40.754]                           }
[08:27:40.754]                         }
[08:27:40.754]                       }
[08:27:40.754]                       invisible(muffled)
[08:27:40.754]                     }
[08:27:40.754]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.754]                   }
[08:27:40.754]                 }
[08:27:40.754]                 else {
[08:27:40.754]                   if (TRUE) {
[08:27:40.754]                     muffleCondition <- function (cond, pattern = "^muffle") 
[08:27:40.754]                     {
[08:27:40.754]                       inherits <- base::inherits
[08:27:40.754]                       invokeRestart <- base::invokeRestart
[08:27:40.754]                       is.null <- base::is.null
[08:27:40.754]                       muffled <- FALSE
[08:27:40.754]                       if (inherits(cond, "message")) {
[08:27:40.754]                         muffled <- grepl(pattern, "muffleMessage")
[08:27:40.754]                         if (muffled) 
[08:27:40.754]                           invokeRestart("muffleMessage")
[08:27:40.754]                       }
[08:27:40.754]                       else if (inherits(cond, "warning")) {
[08:27:40.754]                         muffled <- grepl(pattern, "muffleWarning")
[08:27:40.754]                         if (muffled) 
[08:27:40.754]                           invokeRestart("muffleWarning")
[08:27:40.754]                       }
[08:27:40.754]                       else if (inherits(cond, "condition")) {
[08:27:40.754]                         if (!is.null(pattern)) {
[08:27:40.754]                           computeRestarts <- base::computeRestarts
[08:27:40.754]                           grepl <- base::grepl
[08:27:40.754]                           restarts <- computeRestarts(cond)
[08:27:40.754]                           for (restart in restarts) {
[08:27:40.754]                             name <- restart$name
[08:27:40.754]                             if (is.null(name)) 
[08:27:40.754]                               next
[08:27:40.754]                             if (!grepl(pattern, name)) 
[08:27:40.754]                               next
[08:27:40.754]                             invokeRestart(restart)
[08:27:40.754]                             muffled <- TRUE
[08:27:40.754]                             break
[08:27:40.754]                           }
[08:27:40.754]                         }
[08:27:40.754]                       }
[08:27:40.754]                       invisible(muffled)
[08:27:40.754]                     }
[08:27:40.754]                     muffleCondition(cond, pattern = "^muffle")
[08:27:40.754]                   }
[08:27:40.754]                 }
[08:27:40.754]             }
[08:27:40.754]         }))
[08:27:40.754]     }, error = function(ex) {
[08:27:40.754]         base::structure(base::list(value = NULL, visible = NULL, 
[08:27:40.754]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[08:27:40.754]                 ...future.rng), started = ...future.startTime, 
[08:27:40.754]             finished = Sys.time(), session_uuid = NA_character_, 
[08:27:40.754]             version = "1.8"), class = "FutureResult")
[08:27:40.754]     }, finally = {
[08:27:40.754]         if (!identical(...future.workdir, getwd())) 
[08:27:40.754]             setwd(...future.workdir)
[08:27:40.754]         {
[08:27:40.754]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[08:27:40.754]                 ...future.oldOptions$nwarnings <- NULL
[08:27:40.754]             }
[08:27:40.754]             base::options(...future.oldOptions)
[08:27:40.754]             if (.Platform$OS.type == "windows") {
[08:27:40.754]                 old_names <- names(...future.oldEnvVars)
[08:27:40.754]                 envs <- base::Sys.getenv()
[08:27:40.754]                 names <- names(envs)
[08:27:40.754]                 common <- intersect(names, old_names)
[08:27:40.754]                 added <- setdiff(names, old_names)
[08:27:40.754]                 removed <- setdiff(old_names, names)
[08:27:40.754]                 changed <- common[...future.oldEnvVars[common] != 
[08:27:40.754]                   envs[common]]
[08:27:40.754]                 NAMES <- toupper(changed)
[08:27:40.754]                 args <- list()
[08:27:40.754]                 for (kk in seq_along(NAMES)) {
[08:27:40.754]                   name <- changed[[kk]]
[08:27:40.754]                   NAME <- NAMES[[kk]]
[08:27:40.754]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.754]                     next
[08:27:40.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.754]                 }
[08:27:40.754]                 NAMES <- toupper(added)
[08:27:40.754]                 for (kk in seq_along(NAMES)) {
[08:27:40.754]                   name <- added[[kk]]
[08:27:40.754]                   NAME <- NAMES[[kk]]
[08:27:40.754]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.754]                     next
[08:27:40.754]                   args[[name]] <- ""
[08:27:40.754]                 }
[08:27:40.754]                 NAMES <- toupper(removed)
[08:27:40.754]                 for (kk in seq_along(NAMES)) {
[08:27:40.754]                   name <- removed[[kk]]
[08:27:40.754]                   NAME <- NAMES[[kk]]
[08:27:40.754]                   if (name != NAME && is.element(NAME, old_names)) 
[08:27:40.754]                     next
[08:27:40.754]                   args[[name]] <- ...future.oldEnvVars[[name]]
[08:27:40.754]                 }
[08:27:40.754]                 if (length(args) > 0) 
[08:27:40.754]                   base::do.call(base::Sys.setenv, args = args)
[08:27:40.754]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[08:27:40.754]             }
[08:27:40.754]             else {
[08:27:40.754]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[08:27:40.754]             }
[08:27:40.754]             {
[08:27:40.754]                 if (base::length(...future.futureOptionsAdded) > 
[08:27:40.754]                   0L) {
[08:27:40.754]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[08:27:40.754]                   base::names(opts) <- ...future.futureOptionsAdded
[08:27:40.754]                   base::options(opts)
[08:27:40.754]                 }
[08:27:40.754]                 {
[08:27:40.754]                   {
[08:27:40.754]                     NULL
[08:27:40.754]                     RNGkind("Mersenne-Twister")
[08:27:40.754]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[08:27:40.754]                       inherits = FALSE)
[08:27:40.754]                   }
[08:27:40.754]                   options(future.plan = NULL)
[08:27:40.754]                   if (is.na(NA_character_)) 
[08:27:40.754]                     Sys.unsetenv("R_FUTURE_PLAN")
[08:27:40.754]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[08:27:40.754]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[08:27:40.754]                     .init = FALSE)
[08:27:40.754]                 }
[08:27:40.754]             }
[08:27:40.754]         }
[08:27:40.754]     })
[08:27:40.754]     if (TRUE) {
[08:27:40.754]         base::sink(type = "output", split = FALSE)
[08:27:40.754]         if (TRUE) {
[08:27:40.754]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[08:27:40.754]         }
[08:27:40.754]         else {
[08:27:40.754]             ...future.result["stdout"] <- base::list(NULL)
[08:27:40.754]         }
[08:27:40.754]         base::close(...future.stdout)
[08:27:40.754]         ...future.stdout <- NULL
[08:27:40.754]     }
[08:27:40.754]     ...future.result$conditions <- ...future.conditions
[08:27:40.754]     ...future.result$finished <- base::Sys.time()
[08:27:40.754]     ...future.result
[08:27:40.754] }
[08:27:40.755] assign_globals() ...
[08:27:40.756] List of 2
[08:27:40.756]  $ rr: int 3
[08:27:40.756]  $ cc: int 2
[08:27:40.756]  - attr(*, "where")=List of 2
[08:27:40.756]   ..$ rr:<environment: R_EmptyEnv> 
[08:27:40.756]   ..$ cc:<environment: R_EmptyEnv> 
[08:27:40.756]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[08:27:40.756]  - attr(*, "resolved")= logi FALSE
[08:27:40.756]  - attr(*, "total_size")= num 70
[08:27:40.756]  - attr(*, "already-done")= logi TRUE
[08:27:40.758] - copied ‘rr’ to environment
[08:27:40.759] - copied ‘cc’ to environment
[08:27:40.759] assign_globals() ... done
[08:27:40.759] plan(): Setting new future strategy stack:
[08:27:40.759] List of future strategies:
[08:27:40.759] 1. sequential:
[08:27:40.759]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.759]    - tweaked: FALSE
[08:27:40.759]    - call: NULL
[08:27:40.759] plan(): nbrOfWorkers() = 1
[08:27:40.760] plan(): Setting new future strategy stack:
[08:27:40.760] List of future strategies:
[08:27:40.760] 1. sequential:
[08:27:40.760]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.760]    - tweaked: FALSE
[08:27:40.760]    - call: future::plan("sequential")
[08:27:40.761] plan(): nbrOfWorkers() = 1
[08:27:40.761] SequentialFuture started (and completed)
[08:27:40.761] - Launch lazy future ... done
[08:27:40.761] run() for ‘SequentialFuture’ ... done
> dim(y) <- dim(x)
> stopifnot(identical(y, x0))
> 
> message("*** %<-% to listenv: multiple dimensions ... DONE")
*** %<-% to listenv: multiple dimensions ... DONE
> 
> message("*** %<-% to listenv ... DONE")
*** %<-% to listenv ... DONE
> 
> source("incl/end.R")
[08:27:40.762] plan(): Setting new future strategy stack:
[08:27:40.762] List of future strategies:
[08:27:40.762] 1. FutureStrategy:
[08:27:40.762]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[08:27:40.762]    - tweaked: FALSE
[08:27:40.762]    - call: future::plan(oplan)
[08:27:40.776] plan(): nbrOfWorkers() = 1
> 
