
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:02:04.330] plan(): Setting new future strategy stack:
[11:02:04.330] List of future strategies:
[11:02:04.330] 1. sequential:
[11:02:04.330]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.330]    - tweaked: FALSE
[11:02:04.330]    - call: future::plan("sequential")
[11:02:04.343] plan(): nbrOfWorkers() = 1
> library("listenv")
> plan(multicore)
[11:02:04.360] plan(): Setting new future strategy stack:
[11:02:04.360] List of future strategies:
[11:02:04.360] 1. multicore:
[11:02:04.360]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.360]    - tweaked: FALSE
[11:02:04.360]    - call: plan(multicore)
[11:02:04.372] plan(): nbrOfWorkers() = 2
> 
> message("*** multicore() ...")
*** multicore() ...
> 
> for (cores in 1:min(2L, availableCores("multicore"))) {
+   message(sprintf("Testing with %d cores ...", cores))
+   options(mc.cores = cores)
+ 
+   if (!supportsMulticore()) {
+     message(sprintf("Multicore futures are not supporting on '%s'. Falling back to use synchronous sequential futures", .Platform$OS.type))
+   }
+ 
+   nworkers <- nbrOfWorkers()
+   message("Number of workers: ", nworkers)
+   stopifnot(nworkers == cores)
+   
+   for (globals in c(FALSE, TRUE)) {
+ 
+     message(sprintf("*** multicore(..., globals = %s) without globals", globals))
+   
+     f <- multicore({
+       42L
+     }, globals = globals)
+     stopifnot(inherits(f, "MulticoreFuture") || ((cores ==1 || !supportsMulticore()) && inherits(f, "SequentialFuture")))
+   
+     print(resolved(f))
+     y <- value(f)
+     print(y)
+     stopifnot(y == 42L)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals", globals))
+     ## A global variable
+     a <- 0
+     f <- multicore({
+       b <- 3
+       c <- 2
+       a * b * c
+     }, globals = globals)
+     print(f)
+   
+   
+     ## A multicore future is evaluated in a separated
+     ## forked process.  Changing the value of a global
+     ## variable should not affect the result of the
+     ## future.
+     a <- 7  ## Make sure globals are frozen
+     v <- value(f)
+     print(v)
+     stopifnot(v == 0)
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) with globals and blocking", globals))
+     x <- listenv()
+     for (ii in 1:4) {
+       message(sprintf(" - Creating multicore future #%d ...", ii))
+       x[[ii]] <- multicore({ ii }, globals = globals)
+     }
+     message(sprintf(" - Resolving %d multicore futures", length(x)))
+     v <- sapply(x, FUN = value)
+     stopifnot(all(v == 1:4))
+   
+   
+     message(sprintf("*** multicore(..., globals = %s) and errors", globals))
+     f <- multicore({
+       stop("Whoops!")
+       1
+     }, globals = globals)
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "simpleError"))
+   
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+   
+     ## Error is repeated
+     res <- try(value(f), silent = TRUE)
+     print(res)
+     stopifnot(inherits(res, "try-error"))
+ 
+     ## Custom error class
+     f <- multicore({
+       stop(structure(list(message = "boom"),
+                      class = c("MyError", "error", "condition")))
+     })
+     print(f)
+     v <- value(f, signal = FALSE)
+     print(v)
+     stopifnot(inherits(v, "error"), inherits(v, "MyError"))
+   
+     ## Make sure error is signaled
+     res <- tryCatch(value(f), error = identity)
+     stopifnot(inherits(res, "error"))
+   
+     ## Issue #200: Custom condition class attributes are lost 
+     stopifnot(inherits(res, "MyError"))    
+   } # for (globals ...)
+ 
+ 
+   message("*** multicore(..., workers = 1L) ...")
+ 
+   a <- 2
+   b <- 3
+   yTruth <- a * b
+ 
+   f <- multicore({ a * b }, globals = TRUE, workers = 1L)
+   rm(list = c("a", "b"))
+ 
+   v <- value(f)
+   print(v)
+   stopifnot(v == yTruth)
+ 
+   message("*** multicore(..., workers = 1L) ... DONE")
+ 
+   message(sprintf("Testing with %d cores ... DONE", cores))
+ } ## for (cores ...)
Testing with 1 cores ...
Number of workers: 1
*** multicore(..., globals = FALSE) without globals
[11:02:04.420] getGlobalsAndPackages() ...
[11:02:04.420] Not searching for globals
[11:02:04.421] - globals: [0] <none>
[11:02:04.421] getGlobalsAndPackages() ... DONE
[11:02:04.422] Packages needed by the future expression (n = 0): <none>
[11:02:04.422] Packages needed by future strategies (n = 0): <none>
[11:02:04.422] {
[11:02:04.422]     {
[11:02:04.422]         {
[11:02:04.422]             ...future.startTime <- base::Sys.time()
[11:02:04.422]             {
[11:02:04.422]                 {
[11:02:04.422]                   {
[11:02:04.422]                     base::local({
[11:02:04.422]                       has_future <- base::requireNamespace("future", 
[11:02:04.422]                         quietly = TRUE)
[11:02:04.422]                       if (has_future) {
[11:02:04.422]                         ns <- base::getNamespace("future")
[11:02:04.422]                         version <- ns[[".package"]][["version"]]
[11:02:04.422]                         if (is.null(version)) 
[11:02:04.422]                           version <- utils::packageVersion("future")
[11:02:04.422]                       }
[11:02:04.422]                       else {
[11:02:04.422]                         version <- NULL
[11:02:04.422]                       }
[11:02:04.422]                       if (!has_future || version < "1.8.0") {
[11:02:04.422]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.422]                           "", base::R.version$version.string), 
[11:02:04.422]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.422]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.422]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.422]                             "release", "version")], collapse = " "), 
[11:02:04.422]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.422]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.422]                           info)
[11:02:04.422]                         info <- base::paste(info, collapse = "; ")
[11:02:04.422]                         if (!has_future) {
[11:02:04.422]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.422]                             info)
[11:02:04.422]                         }
[11:02:04.422]                         else {
[11:02:04.422]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.422]                             info, version)
[11:02:04.422]                         }
[11:02:04.422]                         base::stop(msg)
[11:02:04.422]                       }
[11:02:04.422]                     })
[11:02:04.422]                   }
[11:02:04.422]                   ...future.strategy.old <- future::plan("list")
[11:02:04.422]                   options(future.plan = NULL)
[11:02:04.422]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.422]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.422]                 }
[11:02:04.422]                 ...future.workdir <- getwd()
[11:02:04.422]             }
[11:02:04.422]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.422]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.422]         }
[11:02:04.422]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.422]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.422]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.422]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.422]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.422]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.422]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.422]             base::names(...future.oldOptions))
[11:02:04.422]     }
[11:02:04.422]     if (FALSE) {
[11:02:04.422]     }
[11:02:04.422]     else {
[11:02:04.422]         if (TRUE) {
[11:02:04.422]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.422]                 open = "w")
[11:02:04.422]         }
[11:02:04.422]         else {
[11:02:04.422]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.422]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.422]         }
[11:02:04.422]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.422]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.422]             base::sink(type = "output", split = FALSE)
[11:02:04.422]             base::close(...future.stdout)
[11:02:04.422]         }, add = TRUE)
[11:02:04.422]     }
[11:02:04.422]     ...future.frame <- base::sys.nframe()
[11:02:04.422]     ...future.conditions <- base::list()
[11:02:04.422]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.422]     if (FALSE) {
[11:02:04.422]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.422]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.422]     }
[11:02:04.422]     ...future.result <- base::tryCatch({
[11:02:04.422]         base::withCallingHandlers({
[11:02:04.422]             ...future.value <- base::withVisible(base::local({
[11:02:04.422]                 42L
[11:02:04.422]             }))
[11:02:04.422]             future::FutureResult(value = ...future.value$value, 
[11:02:04.422]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.422]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.422]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.422]                     ...future.globalenv.names))
[11:02:04.422]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.422]         }, condition = base::local({
[11:02:04.422]             c <- base::c
[11:02:04.422]             inherits <- base::inherits
[11:02:04.422]             invokeRestart <- base::invokeRestart
[11:02:04.422]             length <- base::length
[11:02:04.422]             list <- base::list
[11:02:04.422]             seq.int <- base::seq.int
[11:02:04.422]             signalCondition <- base::signalCondition
[11:02:04.422]             sys.calls <- base::sys.calls
[11:02:04.422]             `[[` <- base::`[[`
[11:02:04.422]             `+` <- base::`+`
[11:02:04.422]             `<<-` <- base::`<<-`
[11:02:04.422]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.422]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.422]                   3L)]
[11:02:04.422]             }
[11:02:04.422]             function(cond) {
[11:02:04.422]                 is_error <- inherits(cond, "error")
[11:02:04.422]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.422]                   NULL)
[11:02:04.422]                 if (is_error) {
[11:02:04.422]                   sessionInformation <- function() {
[11:02:04.422]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.422]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.422]                       search = base::search(), system = base::Sys.info())
[11:02:04.422]                   }
[11:02:04.422]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.422]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.422]                     cond$call), session = sessionInformation(), 
[11:02:04.422]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.422]                   signalCondition(cond)
[11:02:04.422]                 }
[11:02:04.422]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.422]                 "immediateCondition"))) {
[11:02:04.422]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.422]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.422]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.422]                   if (TRUE && !signal) {
[11:02:04.422]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.422]                     {
[11:02:04.422]                       inherits <- base::inherits
[11:02:04.422]                       invokeRestart <- base::invokeRestart
[11:02:04.422]                       is.null <- base::is.null
[11:02:04.422]                       muffled <- FALSE
[11:02:04.422]                       if (inherits(cond, "message")) {
[11:02:04.422]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.422]                         if (muffled) 
[11:02:04.422]                           invokeRestart("muffleMessage")
[11:02:04.422]                       }
[11:02:04.422]                       else if (inherits(cond, "warning")) {
[11:02:04.422]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.422]                         if (muffled) 
[11:02:04.422]                           invokeRestart("muffleWarning")
[11:02:04.422]                       }
[11:02:04.422]                       else if (inherits(cond, "condition")) {
[11:02:04.422]                         if (!is.null(pattern)) {
[11:02:04.422]                           computeRestarts <- base::computeRestarts
[11:02:04.422]                           grepl <- base::grepl
[11:02:04.422]                           restarts <- computeRestarts(cond)
[11:02:04.422]                           for (restart in restarts) {
[11:02:04.422]                             name <- restart$name
[11:02:04.422]                             if (is.null(name)) 
[11:02:04.422]                               next
[11:02:04.422]                             if (!grepl(pattern, name)) 
[11:02:04.422]                               next
[11:02:04.422]                             invokeRestart(restart)
[11:02:04.422]                             muffled <- TRUE
[11:02:04.422]                             break
[11:02:04.422]                           }
[11:02:04.422]                         }
[11:02:04.422]                       }
[11:02:04.422]                       invisible(muffled)
[11:02:04.422]                     }
[11:02:04.422]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.422]                   }
[11:02:04.422]                 }
[11:02:04.422]                 else {
[11:02:04.422]                   if (TRUE) {
[11:02:04.422]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.422]                     {
[11:02:04.422]                       inherits <- base::inherits
[11:02:04.422]                       invokeRestart <- base::invokeRestart
[11:02:04.422]                       is.null <- base::is.null
[11:02:04.422]                       muffled <- FALSE
[11:02:04.422]                       if (inherits(cond, "message")) {
[11:02:04.422]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.422]                         if (muffled) 
[11:02:04.422]                           invokeRestart("muffleMessage")
[11:02:04.422]                       }
[11:02:04.422]                       else if (inherits(cond, "warning")) {
[11:02:04.422]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.422]                         if (muffled) 
[11:02:04.422]                           invokeRestart("muffleWarning")
[11:02:04.422]                       }
[11:02:04.422]                       else if (inherits(cond, "condition")) {
[11:02:04.422]                         if (!is.null(pattern)) {
[11:02:04.422]                           computeRestarts <- base::computeRestarts
[11:02:04.422]                           grepl <- base::grepl
[11:02:04.422]                           restarts <- computeRestarts(cond)
[11:02:04.422]                           for (restart in restarts) {
[11:02:04.422]                             name <- restart$name
[11:02:04.422]                             if (is.null(name)) 
[11:02:04.422]                               next
[11:02:04.422]                             if (!grepl(pattern, name)) 
[11:02:04.422]                               next
[11:02:04.422]                             invokeRestart(restart)
[11:02:04.422]                             muffled <- TRUE
[11:02:04.422]                             break
[11:02:04.422]                           }
[11:02:04.422]                         }
[11:02:04.422]                       }
[11:02:04.422]                       invisible(muffled)
[11:02:04.422]                     }
[11:02:04.422]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.422]                   }
[11:02:04.422]                 }
[11:02:04.422]             }
[11:02:04.422]         }))
[11:02:04.422]     }, error = function(ex) {
[11:02:04.422]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.422]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.422]                 ...future.rng), started = ...future.startTime, 
[11:02:04.422]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.422]             version = "1.8"), class = "FutureResult")
[11:02:04.422]     }, finally = {
[11:02:04.422]         if (!identical(...future.workdir, getwd())) 
[11:02:04.422]             setwd(...future.workdir)
[11:02:04.422]         {
[11:02:04.422]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.422]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.422]             }
[11:02:04.422]             base::options(...future.oldOptions)
[11:02:04.422]             if (.Platform$OS.type == "windows") {
[11:02:04.422]                 old_names <- names(...future.oldEnvVars)
[11:02:04.422]                 envs <- base::Sys.getenv()
[11:02:04.422]                 names <- names(envs)
[11:02:04.422]                 common <- intersect(names, old_names)
[11:02:04.422]                 added <- setdiff(names, old_names)
[11:02:04.422]                 removed <- setdiff(old_names, names)
[11:02:04.422]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.422]                   envs[common]]
[11:02:04.422]                 NAMES <- toupper(changed)
[11:02:04.422]                 args <- list()
[11:02:04.422]                 for (kk in seq_along(NAMES)) {
[11:02:04.422]                   name <- changed[[kk]]
[11:02:04.422]                   NAME <- NAMES[[kk]]
[11:02:04.422]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.422]                     next
[11:02:04.422]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.422]                 }
[11:02:04.422]                 NAMES <- toupper(added)
[11:02:04.422]                 for (kk in seq_along(NAMES)) {
[11:02:04.422]                   name <- added[[kk]]
[11:02:04.422]                   NAME <- NAMES[[kk]]
[11:02:04.422]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.422]                     next
[11:02:04.422]                   args[[name]] <- ""
[11:02:04.422]                 }
[11:02:04.422]                 NAMES <- toupper(removed)
[11:02:04.422]                 for (kk in seq_along(NAMES)) {
[11:02:04.422]                   name <- removed[[kk]]
[11:02:04.422]                   NAME <- NAMES[[kk]]
[11:02:04.422]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.422]                     next
[11:02:04.422]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.422]                 }
[11:02:04.422]                 if (length(args) > 0) 
[11:02:04.422]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.422]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.422]             }
[11:02:04.422]             else {
[11:02:04.422]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.422]             }
[11:02:04.422]             {
[11:02:04.422]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.422]                   0L) {
[11:02:04.422]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.422]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.422]                   base::options(opts)
[11:02:04.422]                 }
[11:02:04.422]                 {
[11:02:04.422]                   {
[11:02:04.422]                     NULL
[11:02:04.422]                     RNGkind("Mersenne-Twister")
[11:02:04.422]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.422]                       inherits = FALSE)
[11:02:04.422]                   }
[11:02:04.422]                   options(future.plan = NULL)
[11:02:04.422]                   if (is.na(NA_character_)) 
[11:02:04.422]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.422]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.422]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.422]                     .init = FALSE)
[11:02:04.422]                 }
[11:02:04.422]             }
[11:02:04.422]         }
[11:02:04.422]     })
[11:02:04.422]     if (TRUE) {
[11:02:04.422]         base::sink(type = "output", split = FALSE)
[11:02:04.422]         if (TRUE) {
[11:02:04.422]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.422]         }
[11:02:04.422]         else {
[11:02:04.422]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.422]         }
[11:02:04.422]         base::close(...future.stdout)
[11:02:04.422]         ...future.stdout <- NULL
[11:02:04.422]     }
[11:02:04.422]     ...future.result$conditions <- ...future.conditions
[11:02:04.422]     ...future.result$finished <- base::Sys.time()
[11:02:04.422]     ...future.result
[11:02:04.422] }
[11:02:04.424] plan(): Setting new future strategy stack:
[11:02:04.424] List of future strategies:
[11:02:04.424] 1. sequential:
[11:02:04.424]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.424]    - tweaked: FALSE
[11:02:04.424]    - call: NULL
[11:02:04.425] plan(): nbrOfWorkers() = 1
[11:02:04.426] plan(): Setting new future strategy stack:
[11:02:04.426] List of future strategies:
[11:02:04.426] 1. multicore:
[11:02:04.426]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.426]    - tweaked: FALSE
[11:02:04.426]    - call: plan(multicore)
[11:02:04.427] plan(): nbrOfWorkers() = 1
[11:02:04.427] SequentialFuture started (and completed)
[11:02:04.428] resolved() for ‘SequentialFuture’ ...
[11:02:04.428] - state: ‘finished’
[11:02:04.428] - run: TRUE
[11:02:04.428] - result: ‘FutureResult’
[11:02:04.428] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = FALSE) with globals
[11:02:04.430] getGlobalsAndPackages() ...
[11:02:04.430] Not searching for globals
[11:02:04.430] - globals: [0] <none>
[11:02:04.430] getGlobalsAndPackages() ... DONE
[11:02:04.431] Packages needed by the future expression (n = 0): <none>
[11:02:04.431] Packages needed by future strategies (n = 0): <none>
[11:02:04.431] {
[11:02:04.431]     {
[11:02:04.431]         {
[11:02:04.431]             ...future.startTime <- base::Sys.time()
[11:02:04.431]             {
[11:02:04.431]                 {
[11:02:04.431]                   {
[11:02:04.431]                     base::local({
[11:02:04.431]                       has_future <- base::requireNamespace("future", 
[11:02:04.431]                         quietly = TRUE)
[11:02:04.431]                       if (has_future) {
[11:02:04.431]                         ns <- base::getNamespace("future")
[11:02:04.431]                         version <- ns[[".package"]][["version"]]
[11:02:04.431]                         if (is.null(version)) 
[11:02:04.431]                           version <- utils::packageVersion("future")
[11:02:04.431]                       }
[11:02:04.431]                       else {
[11:02:04.431]                         version <- NULL
[11:02:04.431]                       }
[11:02:04.431]                       if (!has_future || version < "1.8.0") {
[11:02:04.431]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.431]                           "", base::R.version$version.string), 
[11:02:04.431]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.431]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.431]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.431]                             "release", "version")], collapse = " "), 
[11:02:04.431]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.431]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.431]                           info)
[11:02:04.431]                         info <- base::paste(info, collapse = "; ")
[11:02:04.431]                         if (!has_future) {
[11:02:04.431]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.431]                             info)
[11:02:04.431]                         }
[11:02:04.431]                         else {
[11:02:04.431]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.431]                             info, version)
[11:02:04.431]                         }
[11:02:04.431]                         base::stop(msg)
[11:02:04.431]                       }
[11:02:04.431]                     })
[11:02:04.431]                   }
[11:02:04.431]                   ...future.strategy.old <- future::plan("list")
[11:02:04.431]                   options(future.plan = NULL)
[11:02:04.431]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.431]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.431]                 }
[11:02:04.431]                 ...future.workdir <- getwd()
[11:02:04.431]             }
[11:02:04.431]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.431]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.431]         }
[11:02:04.431]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.431]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.431]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.431]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.431]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.431]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.431]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.431]             base::names(...future.oldOptions))
[11:02:04.431]     }
[11:02:04.431]     if (FALSE) {
[11:02:04.431]     }
[11:02:04.431]     else {
[11:02:04.431]         if (TRUE) {
[11:02:04.431]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.431]                 open = "w")
[11:02:04.431]         }
[11:02:04.431]         else {
[11:02:04.431]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.431]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.431]         }
[11:02:04.431]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.431]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.431]             base::sink(type = "output", split = FALSE)
[11:02:04.431]             base::close(...future.stdout)
[11:02:04.431]         }, add = TRUE)
[11:02:04.431]     }
[11:02:04.431]     ...future.frame <- base::sys.nframe()
[11:02:04.431]     ...future.conditions <- base::list()
[11:02:04.431]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.431]     if (FALSE) {
[11:02:04.431]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.431]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.431]     }
[11:02:04.431]     ...future.result <- base::tryCatch({
[11:02:04.431]         base::withCallingHandlers({
[11:02:04.431]             ...future.value <- base::withVisible(base::local({
[11:02:04.431]                 b <- 3
[11:02:04.431]                 c <- 2
[11:02:04.431]                 a * b * c
[11:02:04.431]             }))
[11:02:04.431]             future::FutureResult(value = ...future.value$value, 
[11:02:04.431]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.431]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.431]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.431]                     ...future.globalenv.names))
[11:02:04.431]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.431]         }, condition = base::local({
[11:02:04.431]             c <- base::c
[11:02:04.431]             inherits <- base::inherits
[11:02:04.431]             invokeRestart <- base::invokeRestart
[11:02:04.431]             length <- base::length
[11:02:04.431]             list <- base::list
[11:02:04.431]             seq.int <- base::seq.int
[11:02:04.431]             signalCondition <- base::signalCondition
[11:02:04.431]             sys.calls <- base::sys.calls
[11:02:04.431]             `[[` <- base::`[[`
[11:02:04.431]             `+` <- base::`+`
[11:02:04.431]             `<<-` <- base::`<<-`
[11:02:04.431]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.431]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.431]                   3L)]
[11:02:04.431]             }
[11:02:04.431]             function(cond) {
[11:02:04.431]                 is_error <- inherits(cond, "error")
[11:02:04.431]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.431]                   NULL)
[11:02:04.431]                 if (is_error) {
[11:02:04.431]                   sessionInformation <- function() {
[11:02:04.431]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.431]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.431]                       search = base::search(), system = base::Sys.info())
[11:02:04.431]                   }
[11:02:04.431]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.431]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.431]                     cond$call), session = sessionInformation(), 
[11:02:04.431]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.431]                   signalCondition(cond)
[11:02:04.431]                 }
[11:02:04.431]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.431]                 "immediateCondition"))) {
[11:02:04.431]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.431]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.431]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.431]                   if (TRUE && !signal) {
[11:02:04.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.431]                     {
[11:02:04.431]                       inherits <- base::inherits
[11:02:04.431]                       invokeRestart <- base::invokeRestart
[11:02:04.431]                       is.null <- base::is.null
[11:02:04.431]                       muffled <- FALSE
[11:02:04.431]                       if (inherits(cond, "message")) {
[11:02:04.431]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.431]                         if (muffled) 
[11:02:04.431]                           invokeRestart("muffleMessage")
[11:02:04.431]                       }
[11:02:04.431]                       else if (inherits(cond, "warning")) {
[11:02:04.431]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.431]                         if (muffled) 
[11:02:04.431]                           invokeRestart("muffleWarning")
[11:02:04.431]                       }
[11:02:04.431]                       else if (inherits(cond, "condition")) {
[11:02:04.431]                         if (!is.null(pattern)) {
[11:02:04.431]                           computeRestarts <- base::computeRestarts
[11:02:04.431]                           grepl <- base::grepl
[11:02:04.431]                           restarts <- computeRestarts(cond)
[11:02:04.431]                           for (restart in restarts) {
[11:02:04.431]                             name <- restart$name
[11:02:04.431]                             if (is.null(name)) 
[11:02:04.431]                               next
[11:02:04.431]                             if (!grepl(pattern, name)) 
[11:02:04.431]                               next
[11:02:04.431]                             invokeRestart(restart)
[11:02:04.431]                             muffled <- TRUE
[11:02:04.431]                             break
[11:02:04.431]                           }
[11:02:04.431]                         }
[11:02:04.431]                       }
[11:02:04.431]                       invisible(muffled)
[11:02:04.431]                     }
[11:02:04.431]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.431]                   }
[11:02:04.431]                 }
[11:02:04.431]                 else {
[11:02:04.431]                   if (TRUE) {
[11:02:04.431]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.431]                     {
[11:02:04.431]                       inherits <- base::inherits
[11:02:04.431]                       invokeRestart <- base::invokeRestart
[11:02:04.431]                       is.null <- base::is.null
[11:02:04.431]                       muffled <- FALSE
[11:02:04.431]                       if (inherits(cond, "message")) {
[11:02:04.431]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.431]                         if (muffled) 
[11:02:04.431]                           invokeRestart("muffleMessage")
[11:02:04.431]                       }
[11:02:04.431]                       else if (inherits(cond, "warning")) {
[11:02:04.431]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.431]                         if (muffled) 
[11:02:04.431]                           invokeRestart("muffleWarning")
[11:02:04.431]                       }
[11:02:04.431]                       else if (inherits(cond, "condition")) {
[11:02:04.431]                         if (!is.null(pattern)) {
[11:02:04.431]                           computeRestarts <- base::computeRestarts
[11:02:04.431]                           grepl <- base::grepl
[11:02:04.431]                           restarts <- computeRestarts(cond)
[11:02:04.431]                           for (restart in restarts) {
[11:02:04.431]                             name <- restart$name
[11:02:04.431]                             if (is.null(name)) 
[11:02:04.431]                               next
[11:02:04.431]                             if (!grepl(pattern, name)) 
[11:02:04.431]                               next
[11:02:04.431]                             invokeRestart(restart)
[11:02:04.431]                             muffled <- TRUE
[11:02:04.431]                             break
[11:02:04.431]                           }
[11:02:04.431]                         }
[11:02:04.431]                       }
[11:02:04.431]                       invisible(muffled)
[11:02:04.431]                     }
[11:02:04.431]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.431]                   }
[11:02:04.431]                 }
[11:02:04.431]             }
[11:02:04.431]         }))
[11:02:04.431]     }, error = function(ex) {
[11:02:04.431]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.431]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.431]                 ...future.rng), started = ...future.startTime, 
[11:02:04.431]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.431]             version = "1.8"), class = "FutureResult")
[11:02:04.431]     }, finally = {
[11:02:04.431]         if (!identical(...future.workdir, getwd())) 
[11:02:04.431]             setwd(...future.workdir)
[11:02:04.431]         {
[11:02:04.431]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.431]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.431]             }
[11:02:04.431]             base::options(...future.oldOptions)
[11:02:04.431]             if (.Platform$OS.type == "windows") {
[11:02:04.431]                 old_names <- names(...future.oldEnvVars)
[11:02:04.431]                 envs <- base::Sys.getenv()
[11:02:04.431]                 names <- names(envs)
[11:02:04.431]                 common <- intersect(names, old_names)
[11:02:04.431]                 added <- setdiff(names, old_names)
[11:02:04.431]                 removed <- setdiff(old_names, names)
[11:02:04.431]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.431]                   envs[common]]
[11:02:04.431]                 NAMES <- toupper(changed)
[11:02:04.431]                 args <- list()
[11:02:04.431]                 for (kk in seq_along(NAMES)) {
[11:02:04.431]                   name <- changed[[kk]]
[11:02:04.431]                   NAME <- NAMES[[kk]]
[11:02:04.431]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.431]                     next
[11:02:04.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.431]                 }
[11:02:04.431]                 NAMES <- toupper(added)
[11:02:04.431]                 for (kk in seq_along(NAMES)) {
[11:02:04.431]                   name <- added[[kk]]
[11:02:04.431]                   NAME <- NAMES[[kk]]
[11:02:04.431]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.431]                     next
[11:02:04.431]                   args[[name]] <- ""
[11:02:04.431]                 }
[11:02:04.431]                 NAMES <- toupper(removed)
[11:02:04.431]                 for (kk in seq_along(NAMES)) {
[11:02:04.431]                   name <- removed[[kk]]
[11:02:04.431]                   NAME <- NAMES[[kk]]
[11:02:04.431]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.431]                     next
[11:02:04.431]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.431]                 }
[11:02:04.431]                 if (length(args) > 0) 
[11:02:04.431]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.431]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.431]             }
[11:02:04.431]             else {
[11:02:04.431]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.431]             }
[11:02:04.431]             {
[11:02:04.431]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.431]                   0L) {
[11:02:04.431]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.431]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.431]                   base::options(opts)
[11:02:04.431]                 }
[11:02:04.431]                 {
[11:02:04.431]                   {
[11:02:04.431]                     NULL
[11:02:04.431]                     RNGkind("Mersenne-Twister")
[11:02:04.431]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.431]                       inherits = FALSE)
[11:02:04.431]                   }
[11:02:04.431]                   options(future.plan = NULL)
[11:02:04.431]                   if (is.na(NA_character_)) 
[11:02:04.431]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.431]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.431]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.431]                     .init = FALSE)
[11:02:04.431]                 }
[11:02:04.431]             }
[11:02:04.431]         }
[11:02:04.431]     })
[11:02:04.431]     if (TRUE) {
[11:02:04.431]         base::sink(type = "output", split = FALSE)
[11:02:04.431]         if (TRUE) {
[11:02:04.431]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.431]         }
[11:02:04.431]         else {
[11:02:04.431]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.431]         }
[11:02:04.431]         base::close(...future.stdout)
[11:02:04.431]         ...future.stdout <- NULL
[11:02:04.431]     }
[11:02:04.431]     ...future.result$conditions <- ...future.conditions
[11:02:04.431]     ...future.result$finished <- base::Sys.time()
[11:02:04.431]     ...future.result
[11:02:04.431] }
[11:02:04.433] plan(): Setting new future strategy stack:
[11:02:04.433] List of future strategies:
[11:02:04.433] 1. sequential:
[11:02:04.433]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.433]    - tweaked: FALSE
[11:02:04.433]    - call: NULL
[11:02:04.433] plan(): nbrOfWorkers() = 1
[11:02:04.434] plan(): Setting new future strategy stack:
[11:02:04.434] List of future strategies:
[11:02:04.434] 1. multicore:
[11:02:04.434]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.434]    - tweaked: FALSE
[11:02:04.434]    - call: plan(multicore)
[11:02:04.435] plan(): nbrOfWorkers() = 1
[11:02:04.436] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[11:02:04.438] getGlobalsAndPackages() ...
[11:02:04.438] Not searching for globals
[11:02:04.438] - globals: [0] <none>
[11:02:04.438] getGlobalsAndPackages() ... DONE
[11:02:04.439] Packages needed by the future expression (n = 0): <none>
[11:02:04.439] Packages needed by future strategies (n = 0): <none>
[11:02:04.439] {
[11:02:04.439]     {
[11:02:04.439]         {
[11:02:04.439]             ...future.startTime <- base::Sys.time()
[11:02:04.439]             {
[11:02:04.439]                 {
[11:02:04.439]                   {
[11:02:04.439]                     base::local({
[11:02:04.439]                       has_future <- base::requireNamespace("future", 
[11:02:04.439]                         quietly = TRUE)
[11:02:04.439]                       if (has_future) {
[11:02:04.439]                         ns <- base::getNamespace("future")
[11:02:04.439]                         version <- ns[[".package"]][["version"]]
[11:02:04.439]                         if (is.null(version)) 
[11:02:04.439]                           version <- utils::packageVersion("future")
[11:02:04.439]                       }
[11:02:04.439]                       else {
[11:02:04.439]                         version <- NULL
[11:02:04.439]                       }
[11:02:04.439]                       if (!has_future || version < "1.8.0") {
[11:02:04.439]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.439]                           "", base::R.version$version.string), 
[11:02:04.439]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.439]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.439]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.439]                             "release", "version")], collapse = " "), 
[11:02:04.439]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.439]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.439]                           info)
[11:02:04.439]                         info <- base::paste(info, collapse = "; ")
[11:02:04.439]                         if (!has_future) {
[11:02:04.439]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.439]                             info)
[11:02:04.439]                         }
[11:02:04.439]                         else {
[11:02:04.439]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.439]                             info, version)
[11:02:04.439]                         }
[11:02:04.439]                         base::stop(msg)
[11:02:04.439]                       }
[11:02:04.439]                     })
[11:02:04.439]                   }
[11:02:04.439]                   ...future.strategy.old <- future::plan("list")
[11:02:04.439]                   options(future.plan = NULL)
[11:02:04.439]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.439]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.439]                 }
[11:02:04.439]                 ...future.workdir <- getwd()
[11:02:04.439]             }
[11:02:04.439]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.439]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.439]         }
[11:02:04.439]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.439]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.439]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.439]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.439]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.439]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.439]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.439]             base::names(...future.oldOptions))
[11:02:04.439]     }
[11:02:04.439]     if (FALSE) {
[11:02:04.439]     }
[11:02:04.439]     else {
[11:02:04.439]         if (TRUE) {
[11:02:04.439]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.439]                 open = "w")
[11:02:04.439]         }
[11:02:04.439]         else {
[11:02:04.439]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.439]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.439]         }
[11:02:04.439]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.439]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.439]             base::sink(type = "output", split = FALSE)
[11:02:04.439]             base::close(...future.stdout)
[11:02:04.439]         }, add = TRUE)
[11:02:04.439]     }
[11:02:04.439]     ...future.frame <- base::sys.nframe()
[11:02:04.439]     ...future.conditions <- base::list()
[11:02:04.439]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.439]     if (FALSE) {
[11:02:04.439]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.439]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.439]     }
[11:02:04.439]     ...future.result <- base::tryCatch({
[11:02:04.439]         base::withCallingHandlers({
[11:02:04.439]             ...future.value <- base::withVisible(base::local({
[11:02:04.439]                 ii
[11:02:04.439]             }))
[11:02:04.439]             future::FutureResult(value = ...future.value$value, 
[11:02:04.439]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.439]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.439]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.439]                     ...future.globalenv.names))
[11:02:04.439]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.439]         }, condition = base::local({
[11:02:04.439]             c <- base::c
[11:02:04.439]             inherits <- base::inherits
[11:02:04.439]             invokeRestart <- base::invokeRestart
[11:02:04.439]             length <- base::length
[11:02:04.439]             list <- base::list
[11:02:04.439]             seq.int <- base::seq.int
[11:02:04.439]             signalCondition <- base::signalCondition
[11:02:04.439]             sys.calls <- base::sys.calls
[11:02:04.439]             `[[` <- base::`[[`
[11:02:04.439]             `+` <- base::`+`
[11:02:04.439]             `<<-` <- base::`<<-`
[11:02:04.439]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.439]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.439]                   3L)]
[11:02:04.439]             }
[11:02:04.439]             function(cond) {
[11:02:04.439]                 is_error <- inherits(cond, "error")
[11:02:04.439]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.439]                   NULL)
[11:02:04.439]                 if (is_error) {
[11:02:04.439]                   sessionInformation <- function() {
[11:02:04.439]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.439]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.439]                       search = base::search(), system = base::Sys.info())
[11:02:04.439]                   }
[11:02:04.439]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.439]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.439]                     cond$call), session = sessionInformation(), 
[11:02:04.439]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.439]                   signalCondition(cond)
[11:02:04.439]                 }
[11:02:04.439]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.439]                 "immediateCondition"))) {
[11:02:04.439]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.439]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.439]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.439]                   if (TRUE && !signal) {
[11:02:04.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.439]                     {
[11:02:04.439]                       inherits <- base::inherits
[11:02:04.439]                       invokeRestart <- base::invokeRestart
[11:02:04.439]                       is.null <- base::is.null
[11:02:04.439]                       muffled <- FALSE
[11:02:04.439]                       if (inherits(cond, "message")) {
[11:02:04.439]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.439]                         if (muffled) 
[11:02:04.439]                           invokeRestart("muffleMessage")
[11:02:04.439]                       }
[11:02:04.439]                       else if (inherits(cond, "warning")) {
[11:02:04.439]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.439]                         if (muffled) 
[11:02:04.439]                           invokeRestart("muffleWarning")
[11:02:04.439]                       }
[11:02:04.439]                       else if (inherits(cond, "condition")) {
[11:02:04.439]                         if (!is.null(pattern)) {
[11:02:04.439]                           computeRestarts <- base::computeRestarts
[11:02:04.439]                           grepl <- base::grepl
[11:02:04.439]                           restarts <- computeRestarts(cond)
[11:02:04.439]                           for (restart in restarts) {
[11:02:04.439]                             name <- restart$name
[11:02:04.439]                             if (is.null(name)) 
[11:02:04.439]                               next
[11:02:04.439]                             if (!grepl(pattern, name)) 
[11:02:04.439]                               next
[11:02:04.439]                             invokeRestart(restart)
[11:02:04.439]                             muffled <- TRUE
[11:02:04.439]                             break
[11:02:04.439]                           }
[11:02:04.439]                         }
[11:02:04.439]                       }
[11:02:04.439]                       invisible(muffled)
[11:02:04.439]                     }
[11:02:04.439]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.439]                   }
[11:02:04.439]                 }
[11:02:04.439]                 else {
[11:02:04.439]                   if (TRUE) {
[11:02:04.439]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.439]                     {
[11:02:04.439]                       inherits <- base::inherits
[11:02:04.439]                       invokeRestart <- base::invokeRestart
[11:02:04.439]                       is.null <- base::is.null
[11:02:04.439]                       muffled <- FALSE
[11:02:04.439]                       if (inherits(cond, "message")) {
[11:02:04.439]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.439]                         if (muffled) 
[11:02:04.439]                           invokeRestart("muffleMessage")
[11:02:04.439]                       }
[11:02:04.439]                       else if (inherits(cond, "warning")) {
[11:02:04.439]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.439]                         if (muffled) 
[11:02:04.439]                           invokeRestart("muffleWarning")
[11:02:04.439]                       }
[11:02:04.439]                       else if (inherits(cond, "condition")) {
[11:02:04.439]                         if (!is.null(pattern)) {
[11:02:04.439]                           computeRestarts <- base::computeRestarts
[11:02:04.439]                           grepl <- base::grepl
[11:02:04.439]                           restarts <- computeRestarts(cond)
[11:02:04.439]                           for (restart in restarts) {
[11:02:04.439]                             name <- restart$name
[11:02:04.439]                             if (is.null(name)) 
[11:02:04.439]                               next
[11:02:04.439]                             if (!grepl(pattern, name)) 
[11:02:04.439]                               next
[11:02:04.439]                             invokeRestart(restart)
[11:02:04.439]                             muffled <- TRUE
[11:02:04.439]                             break
[11:02:04.439]                           }
[11:02:04.439]                         }
[11:02:04.439]                       }
[11:02:04.439]                       invisible(muffled)
[11:02:04.439]                     }
[11:02:04.439]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.439]                   }
[11:02:04.439]                 }
[11:02:04.439]             }
[11:02:04.439]         }))
[11:02:04.439]     }, error = function(ex) {
[11:02:04.439]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.439]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.439]                 ...future.rng), started = ...future.startTime, 
[11:02:04.439]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.439]             version = "1.8"), class = "FutureResult")
[11:02:04.439]     }, finally = {
[11:02:04.439]         if (!identical(...future.workdir, getwd())) 
[11:02:04.439]             setwd(...future.workdir)
[11:02:04.439]         {
[11:02:04.439]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.439]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.439]             }
[11:02:04.439]             base::options(...future.oldOptions)
[11:02:04.439]             if (.Platform$OS.type == "windows") {
[11:02:04.439]                 old_names <- names(...future.oldEnvVars)
[11:02:04.439]                 envs <- base::Sys.getenv()
[11:02:04.439]                 names <- names(envs)
[11:02:04.439]                 common <- intersect(names, old_names)
[11:02:04.439]                 added <- setdiff(names, old_names)
[11:02:04.439]                 removed <- setdiff(old_names, names)
[11:02:04.439]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.439]                   envs[common]]
[11:02:04.439]                 NAMES <- toupper(changed)
[11:02:04.439]                 args <- list()
[11:02:04.439]                 for (kk in seq_along(NAMES)) {
[11:02:04.439]                   name <- changed[[kk]]
[11:02:04.439]                   NAME <- NAMES[[kk]]
[11:02:04.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.439]                     next
[11:02:04.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.439]                 }
[11:02:04.439]                 NAMES <- toupper(added)
[11:02:04.439]                 for (kk in seq_along(NAMES)) {
[11:02:04.439]                   name <- added[[kk]]
[11:02:04.439]                   NAME <- NAMES[[kk]]
[11:02:04.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.439]                     next
[11:02:04.439]                   args[[name]] <- ""
[11:02:04.439]                 }
[11:02:04.439]                 NAMES <- toupper(removed)
[11:02:04.439]                 for (kk in seq_along(NAMES)) {
[11:02:04.439]                   name <- removed[[kk]]
[11:02:04.439]                   NAME <- NAMES[[kk]]
[11:02:04.439]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.439]                     next
[11:02:04.439]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.439]                 }
[11:02:04.439]                 if (length(args) > 0) 
[11:02:04.439]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.439]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.439]             }
[11:02:04.439]             else {
[11:02:04.439]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.439]             }
[11:02:04.439]             {
[11:02:04.439]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.439]                   0L) {
[11:02:04.439]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.439]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.439]                   base::options(opts)
[11:02:04.439]                 }
[11:02:04.439]                 {
[11:02:04.439]                   {
[11:02:04.439]                     NULL
[11:02:04.439]                     RNGkind("Mersenne-Twister")
[11:02:04.439]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.439]                       inherits = FALSE)
[11:02:04.439]                   }
[11:02:04.439]                   options(future.plan = NULL)
[11:02:04.439]                   if (is.na(NA_character_)) 
[11:02:04.439]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.439]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.439]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.439]                     .init = FALSE)
[11:02:04.439]                 }
[11:02:04.439]             }
[11:02:04.439]         }
[11:02:04.439]     })
[11:02:04.439]     if (TRUE) {
[11:02:04.439]         base::sink(type = "output", split = FALSE)
[11:02:04.439]         if (TRUE) {
[11:02:04.439]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.439]         }
[11:02:04.439]         else {
[11:02:04.439]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.439]         }
[11:02:04.439]         base::close(...future.stdout)
[11:02:04.439]         ...future.stdout <- NULL
[11:02:04.439]     }
[11:02:04.439]     ...future.result$conditions <- ...future.conditions
[11:02:04.439]     ...future.result$finished <- base::Sys.time()
[11:02:04.439]     ...future.result
[11:02:04.439] }
[11:02:04.441] plan(): Setting new future strategy stack:
[11:02:04.441] List of future strategies:
[11:02:04.441] 1. sequential:
[11:02:04.441]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.441]    - tweaked: FALSE
[11:02:04.441]    - call: NULL
[11:02:04.441] plan(): nbrOfWorkers() = 1
[11:02:04.442] plan(): Setting new future strategy stack:
[11:02:04.442] List of future strategies:
[11:02:04.442] 1. multicore:
[11:02:04.442]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.442]    - tweaked: FALSE
[11:02:04.442]    - call: plan(multicore)
[11:02:04.444] plan(): nbrOfWorkers() = 1
[11:02:04.444] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[11:02:04.446] getGlobalsAndPackages() ...
[11:02:04.446] Not searching for globals
[11:02:04.447] - globals: [0] <none>
[11:02:04.447] getGlobalsAndPackages() ... DONE
[11:02:04.447] Packages needed by the future expression (n = 0): <none>
[11:02:04.447] Packages needed by future strategies (n = 0): <none>
[11:02:04.447] {
[11:02:04.447]     {
[11:02:04.447]         {
[11:02:04.447]             ...future.startTime <- base::Sys.time()
[11:02:04.447]             {
[11:02:04.447]                 {
[11:02:04.447]                   {
[11:02:04.447]                     base::local({
[11:02:04.447]                       has_future <- base::requireNamespace("future", 
[11:02:04.447]                         quietly = TRUE)
[11:02:04.447]                       if (has_future) {
[11:02:04.447]                         ns <- base::getNamespace("future")
[11:02:04.447]                         version <- ns[[".package"]][["version"]]
[11:02:04.447]                         if (is.null(version)) 
[11:02:04.447]                           version <- utils::packageVersion("future")
[11:02:04.447]                       }
[11:02:04.447]                       else {
[11:02:04.447]                         version <- NULL
[11:02:04.447]                       }
[11:02:04.447]                       if (!has_future || version < "1.8.0") {
[11:02:04.447]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.447]                           "", base::R.version$version.string), 
[11:02:04.447]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.447]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.447]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.447]                             "release", "version")], collapse = " "), 
[11:02:04.447]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.447]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.447]                           info)
[11:02:04.447]                         info <- base::paste(info, collapse = "; ")
[11:02:04.447]                         if (!has_future) {
[11:02:04.447]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.447]                             info)
[11:02:04.447]                         }
[11:02:04.447]                         else {
[11:02:04.447]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.447]                             info, version)
[11:02:04.447]                         }
[11:02:04.447]                         base::stop(msg)
[11:02:04.447]                       }
[11:02:04.447]                     })
[11:02:04.447]                   }
[11:02:04.447]                   ...future.strategy.old <- future::plan("list")
[11:02:04.447]                   options(future.plan = NULL)
[11:02:04.447]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.447]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.447]                 }
[11:02:04.447]                 ...future.workdir <- getwd()
[11:02:04.447]             }
[11:02:04.447]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.447]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.447]         }
[11:02:04.447]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.447]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.447]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.447]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.447]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.447]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.447]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.447]             base::names(...future.oldOptions))
[11:02:04.447]     }
[11:02:04.447]     if (FALSE) {
[11:02:04.447]     }
[11:02:04.447]     else {
[11:02:04.447]         if (TRUE) {
[11:02:04.447]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.447]                 open = "w")
[11:02:04.447]         }
[11:02:04.447]         else {
[11:02:04.447]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.447]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.447]         }
[11:02:04.447]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.447]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.447]             base::sink(type = "output", split = FALSE)
[11:02:04.447]             base::close(...future.stdout)
[11:02:04.447]         }, add = TRUE)
[11:02:04.447]     }
[11:02:04.447]     ...future.frame <- base::sys.nframe()
[11:02:04.447]     ...future.conditions <- base::list()
[11:02:04.447]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.447]     if (FALSE) {
[11:02:04.447]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.447]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.447]     }
[11:02:04.447]     ...future.result <- base::tryCatch({
[11:02:04.447]         base::withCallingHandlers({
[11:02:04.447]             ...future.value <- base::withVisible(base::local({
[11:02:04.447]                 ii
[11:02:04.447]             }))
[11:02:04.447]             future::FutureResult(value = ...future.value$value, 
[11:02:04.447]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.447]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.447]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.447]                     ...future.globalenv.names))
[11:02:04.447]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.447]         }, condition = base::local({
[11:02:04.447]             c <- base::c
[11:02:04.447]             inherits <- base::inherits
[11:02:04.447]             invokeRestart <- base::invokeRestart
[11:02:04.447]             length <- base::length
[11:02:04.447]             list <- base::list
[11:02:04.447]             seq.int <- base::seq.int
[11:02:04.447]             signalCondition <- base::signalCondition
[11:02:04.447]             sys.calls <- base::sys.calls
[11:02:04.447]             `[[` <- base::`[[`
[11:02:04.447]             `+` <- base::`+`
[11:02:04.447]             `<<-` <- base::`<<-`
[11:02:04.447]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.447]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.447]                   3L)]
[11:02:04.447]             }
[11:02:04.447]             function(cond) {
[11:02:04.447]                 is_error <- inherits(cond, "error")
[11:02:04.447]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.447]                   NULL)
[11:02:04.447]                 if (is_error) {
[11:02:04.447]                   sessionInformation <- function() {
[11:02:04.447]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.447]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.447]                       search = base::search(), system = base::Sys.info())
[11:02:04.447]                   }
[11:02:04.447]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.447]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.447]                     cond$call), session = sessionInformation(), 
[11:02:04.447]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.447]                   signalCondition(cond)
[11:02:04.447]                 }
[11:02:04.447]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.447]                 "immediateCondition"))) {
[11:02:04.447]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.447]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.447]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.447]                   if (TRUE && !signal) {
[11:02:04.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.447]                     {
[11:02:04.447]                       inherits <- base::inherits
[11:02:04.447]                       invokeRestart <- base::invokeRestart
[11:02:04.447]                       is.null <- base::is.null
[11:02:04.447]                       muffled <- FALSE
[11:02:04.447]                       if (inherits(cond, "message")) {
[11:02:04.447]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.447]                         if (muffled) 
[11:02:04.447]                           invokeRestart("muffleMessage")
[11:02:04.447]                       }
[11:02:04.447]                       else if (inherits(cond, "warning")) {
[11:02:04.447]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.447]                         if (muffled) 
[11:02:04.447]                           invokeRestart("muffleWarning")
[11:02:04.447]                       }
[11:02:04.447]                       else if (inherits(cond, "condition")) {
[11:02:04.447]                         if (!is.null(pattern)) {
[11:02:04.447]                           computeRestarts <- base::computeRestarts
[11:02:04.447]                           grepl <- base::grepl
[11:02:04.447]                           restarts <- computeRestarts(cond)
[11:02:04.447]                           for (restart in restarts) {
[11:02:04.447]                             name <- restart$name
[11:02:04.447]                             if (is.null(name)) 
[11:02:04.447]                               next
[11:02:04.447]                             if (!grepl(pattern, name)) 
[11:02:04.447]                               next
[11:02:04.447]                             invokeRestart(restart)
[11:02:04.447]                             muffled <- TRUE
[11:02:04.447]                             break
[11:02:04.447]                           }
[11:02:04.447]                         }
[11:02:04.447]                       }
[11:02:04.447]                       invisible(muffled)
[11:02:04.447]                     }
[11:02:04.447]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.447]                   }
[11:02:04.447]                 }
[11:02:04.447]                 else {
[11:02:04.447]                   if (TRUE) {
[11:02:04.447]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.447]                     {
[11:02:04.447]                       inherits <- base::inherits
[11:02:04.447]                       invokeRestart <- base::invokeRestart
[11:02:04.447]                       is.null <- base::is.null
[11:02:04.447]                       muffled <- FALSE
[11:02:04.447]                       if (inherits(cond, "message")) {
[11:02:04.447]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.447]                         if (muffled) 
[11:02:04.447]                           invokeRestart("muffleMessage")
[11:02:04.447]                       }
[11:02:04.447]                       else if (inherits(cond, "warning")) {
[11:02:04.447]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.447]                         if (muffled) 
[11:02:04.447]                           invokeRestart("muffleWarning")
[11:02:04.447]                       }
[11:02:04.447]                       else if (inherits(cond, "condition")) {
[11:02:04.447]                         if (!is.null(pattern)) {
[11:02:04.447]                           computeRestarts <- base::computeRestarts
[11:02:04.447]                           grepl <- base::grepl
[11:02:04.447]                           restarts <- computeRestarts(cond)
[11:02:04.447]                           for (restart in restarts) {
[11:02:04.447]                             name <- restart$name
[11:02:04.447]                             if (is.null(name)) 
[11:02:04.447]                               next
[11:02:04.447]                             if (!grepl(pattern, name)) 
[11:02:04.447]                               next
[11:02:04.447]                             invokeRestart(restart)
[11:02:04.447]                             muffled <- TRUE
[11:02:04.447]                             break
[11:02:04.447]                           }
[11:02:04.447]                         }
[11:02:04.447]                       }
[11:02:04.447]                       invisible(muffled)
[11:02:04.447]                     }
[11:02:04.447]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.447]                   }
[11:02:04.447]                 }
[11:02:04.447]             }
[11:02:04.447]         }))
[11:02:04.447]     }, error = function(ex) {
[11:02:04.447]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.447]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.447]                 ...future.rng), started = ...future.startTime, 
[11:02:04.447]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.447]             version = "1.8"), class = "FutureResult")
[11:02:04.447]     }, finally = {
[11:02:04.447]         if (!identical(...future.workdir, getwd())) 
[11:02:04.447]             setwd(...future.workdir)
[11:02:04.447]         {
[11:02:04.447]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.447]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.447]             }
[11:02:04.447]             base::options(...future.oldOptions)
[11:02:04.447]             if (.Platform$OS.type == "windows") {
[11:02:04.447]                 old_names <- names(...future.oldEnvVars)
[11:02:04.447]                 envs <- base::Sys.getenv()
[11:02:04.447]                 names <- names(envs)
[11:02:04.447]                 common <- intersect(names, old_names)
[11:02:04.447]                 added <- setdiff(names, old_names)
[11:02:04.447]                 removed <- setdiff(old_names, names)
[11:02:04.447]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.447]                   envs[common]]
[11:02:04.447]                 NAMES <- toupper(changed)
[11:02:04.447]                 args <- list()
[11:02:04.447]                 for (kk in seq_along(NAMES)) {
[11:02:04.447]                   name <- changed[[kk]]
[11:02:04.447]                   NAME <- NAMES[[kk]]
[11:02:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.447]                     next
[11:02:04.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.447]                 }
[11:02:04.447]                 NAMES <- toupper(added)
[11:02:04.447]                 for (kk in seq_along(NAMES)) {
[11:02:04.447]                   name <- added[[kk]]
[11:02:04.447]                   NAME <- NAMES[[kk]]
[11:02:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.447]                     next
[11:02:04.447]                   args[[name]] <- ""
[11:02:04.447]                 }
[11:02:04.447]                 NAMES <- toupper(removed)
[11:02:04.447]                 for (kk in seq_along(NAMES)) {
[11:02:04.447]                   name <- removed[[kk]]
[11:02:04.447]                   NAME <- NAMES[[kk]]
[11:02:04.447]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.447]                     next
[11:02:04.447]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.447]                 }
[11:02:04.447]                 if (length(args) > 0) 
[11:02:04.447]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.447]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.447]             }
[11:02:04.447]             else {
[11:02:04.447]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.447]             }
[11:02:04.447]             {
[11:02:04.447]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.447]                   0L) {
[11:02:04.447]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.447]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.447]                   base::options(opts)
[11:02:04.447]                 }
[11:02:04.447]                 {
[11:02:04.447]                   {
[11:02:04.447]                     NULL
[11:02:04.447]                     RNGkind("Mersenne-Twister")
[11:02:04.447]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.447]                       inherits = FALSE)
[11:02:04.447]                   }
[11:02:04.447]                   options(future.plan = NULL)
[11:02:04.447]                   if (is.na(NA_character_)) 
[11:02:04.447]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.447]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.447]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.447]                     .init = FALSE)
[11:02:04.447]                 }
[11:02:04.447]             }
[11:02:04.447]         }
[11:02:04.447]     })
[11:02:04.447]     if (TRUE) {
[11:02:04.447]         base::sink(type = "output", split = FALSE)
[11:02:04.447]         if (TRUE) {
[11:02:04.447]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.447]         }
[11:02:04.447]         else {
[11:02:04.447]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.447]         }
[11:02:04.447]         base::close(...future.stdout)
[11:02:04.447]         ...future.stdout <- NULL
[11:02:04.447]     }
[11:02:04.447]     ...future.result$conditions <- ...future.conditions
[11:02:04.447]     ...future.result$finished <- base::Sys.time()
[11:02:04.447]     ...future.result
[11:02:04.447] }
[11:02:04.449] plan(): Setting new future strategy stack:
[11:02:04.449] List of future strategies:
[11:02:04.449] 1. sequential:
[11:02:04.449]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.449]    - tweaked: FALSE
[11:02:04.449]    - call: NULL
[11:02:04.450] plan(): nbrOfWorkers() = 1
[11:02:04.450] plan(): Setting new future strategy stack:
[11:02:04.450] List of future strategies:
[11:02:04.450] 1. multicore:
[11:02:04.450]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.450]    - tweaked: FALSE
[11:02:04.450]    - call: plan(multicore)
[11:02:04.452] plan(): nbrOfWorkers() = 1
[11:02:04.452] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[11:02:04.453] getGlobalsAndPackages() ...
[11:02:04.453] Not searching for globals
[11:02:04.454] - globals: [0] <none>
[11:02:04.454] getGlobalsAndPackages() ... DONE
[11:02:04.454] Packages needed by the future expression (n = 0): <none>
[11:02:04.454] Packages needed by future strategies (n = 0): <none>
[11:02:04.454] {
[11:02:04.454]     {
[11:02:04.454]         {
[11:02:04.454]             ...future.startTime <- base::Sys.time()
[11:02:04.454]             {
[11:02:04.454]                 {
[11:02:04.454]                   {
[11:02:04.454]                     base::local({
[11:02:04.454]                       has_future <- base::requireNamespace("future", 
[11:02:04.454]                         quietly = TRUE)
[11:02:04.454]                       if (has_future) {
[11:02:04.454]                         ns <- base::getNamespace("future")
[11:02:04.454]                         version <- ns[[".package"]][["version"]]
[11:02:04.454]                         if (is.null(version)) 
[11:02:04.454]                           version <- utils::packageVersion("future")
[11:02:04.454]                       }
[11:02:04.454]                       else {
[11:02:04.454]                         version <- NULL
[11:02:04.454]                       }
[11:02:04.454]                       if (!has_future || version < "1.8.0") {
[11:02:04.454]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.454]                           "", base::R.version$version.string), 
[11:02:04.454]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.454]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.454]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.454]                             "release", "version")], collapse = " "), 
[11:02:04.454]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.454]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.454]                           info)
[11:02:04.454]                         info <- base::paste(info, collapse = "; ")
[11:02:04.454]                         if (!has_future) {
[11:02:04.454]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.454]                             info)
[11:02:04.454]                         }
[11:02:04.454]                         else {
[11:02:04.454]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.454]                             info, version)
[11:02:04.454]                         }
[11:02:04.454]                         base::stop(msg)
[11:02:04.454]                       }
[11:02:04.454]                     })
[11:02:04.454]                   }
[11:02:04.454]                   ...future.strategy.old <- future::plan("list")
[11:02:04.454]                   options(future.plan = NULL)
[11:02:04.454]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.454]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.454]                 }
[11:02:04.454]                 ...future.workdir <- getwd()
[11:02:04.454]             }
[11:02:04.454]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.454]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.454]         }
[11:02:04.454]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.454]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.454]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.454]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.454]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.454]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.454]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.454]             base::names(...future.oldOptions))
[11:02:04.454]     }
[11:02:04.454]     if (FALSE) {
[11:02:04.454]     }
[11:02:04.454]     else {
[11:02:04.454]         if (TRUE) {
[11:02:04.454]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.454]                 open = "w")
[11:02:04.454]         }
[11:02:04.454]         else {
[11:02:04.454]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.454]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.454]         }
[11:02:04.454]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.454]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.454]             base::sink(type = "output", split = FALSE)
[11:02:04.454]             base::close(...future.stdout)
[11:02:04.454]         }, add = TRUE)
[11:02:04.454]     }
[11:02:04.454]     ...future.frame <- base::sys.nframe()
[11:02:04.454]     ...future.conditions <- base::list()
[11:02:04.454]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.454]     if (FALSE) {
[11:02:04.454]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.454]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.454]     }
[11:02:04.454]     ...future.result <- base::tryCatch({
[11:02:04.454]         base::withCallingHandlers({
[11:02:04.454]             ...future.value <- base::withVisible(base::local({
[11:02:04.454]                 ii
[11:02:04.454]             }))
[11:02:04.454]             future::FutureResult(value = ...future.value$value, 
[11:02:04.454]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.454]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.454]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.454]                     ...future.globalenv.names))
[11:02:04.454]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.454]         }, condition = base::local({
[11:02:04.454]             c <- base::c
[11:02:04.454]             inherits <- base::inherits
[11:02:04.454]             invokeRestart <- base::invokeRestart
[11:02:04.454]             length <- base::length
[11:02:04.454]             list <- base::list
[11:02:04.454]             seq.int <- base::seq.int
[11:02:04.454]             signalCondition <- base::signalCondition
[11:02:04.454]             sys.calls <- base::sys.calls
[11:02:04.454]             `[[` <- base::`[[`
[11:02:04.454]             `+` <- base::`+`
[11:02:04.454]             `<<-` <- base::`<<-`
[11:02:04.454]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.454]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.454]                   3L)]
[11:02:04.454]             }
[11:02:04.454]             function(cond) {
[11:02:04.454]                 is_error <- inherits(cond, "error")
[11:02:04.454]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.454]                   NULL)
[11:02:04.454]                 if (is_error) {
[11:02:04.454]                   sessionInformation <- function() {
[11:02:04.454]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.454]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.454]                       search = base::search(), system = base::Sys.info())
[11:02:04.454]                   }
[11:02:04.454]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.454]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.454]                     cond$call), session = sessionInformation(), 
[11:02:04.454]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.454]                   signalCondition(cond)
[11:02:04.454]                 }
[11:02:04.454]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.454]                 "immediateCondition"))) {
[11:02:04.454]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.454]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.454]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.454]                   if (TRUE && !signal) {
[11:02:04.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.454]                     {
[11:02:04.454]                       inherits <- base::inherits
[11:02:04.454]                       invokeRestart <- base::invokeRestart
[11:02:04.454]                       is.null <- base::is.null
[11:02:04.454]                       muffled <- FALSE
[11:02:04.454]                       if (inherits(cond, "message")) {
[11:02:04.454]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.454]                         if (muffled) 
[11:02:04.454]                           invokeRestart("muffleMessage")
[11:02:04.454]                       }
[11:02:04.454]                       else if (inherits(cond, "warning")) {
[11:02:04.454]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.454]                         if (muffled) 
[11:02:04.454]                           invokeRestart("muffleWarning")
[11:02:04.454]                       }
[11:02:04.454]                       else if (inherits(cond, "condition")) {
[11:02:04.454]                         if (!is.null(pattern)) {
[11:02:04.454]                           computeRestarts <- base::computeRestarts
[11:02:04.454]                           grepl <- base::grepl
[11:02:04.454]                           restarts <- computeRestarts(cond)
[11:02:04.454]                           for (restart in restarts) {
[11:02:04.454]                             name <- restart$name
[11:02:04.454]                             if (is.null(name)) 
[11:02:04.454]                               next
[11:02:04.454]                             if (!grepl(pattern, name)) 
[11:02:04.454]                               next
[11:02:04.454]                             invokeRestart(restart)
[11:02:04.454]                             muffled <- TRUE
[11:02:04.454]                             break
[11:02:04.454]                           }
[11:02:04.454]                         }
[11:02:04.454]                       }
[11:02:04.454]                       invisible(muffled)
[11:02:04.454]                     }
[11:02:04.454]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.454]                   }
[11:02:04.454]                 }
[11:02:04.454]                 else {
[11:02:04.454]                   if (TRUE) {
[11:02:04.454]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.454]                     {
[11:02:04.454]                       inherits <- base::inherits
[11:02:04.454]                       invokeRestart <- base::invokeRestart
[11:02:04.454]                       is.null <- base::is.null
[11:02:04.454]                       muffled <- FALSE
[11:02:04.454]                       if (inherits(cond, "message")) {
[11:02:04.454]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.454]                         if (muffled) 
[11:02:04.454]                           invokeRestart("muffleMessage")
[11:02:04.454]                       }
[11:02:04.454]                       else if (inherits(cond, "warning")) {
[11:02:04.454]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.454]                         if (muffled) 
[11:02:04.454]                           invokeRestart("muffleWarning")
[11:02:04.454]                       }
[11:02:04.454]                       else if (inherits(cond, "condition")) {
[11:02:04.454]                         if (!is.null(pattern)) {
[11:02:04.454]                           computeRestarts <- base::computeRestarts
[11:02:04.454]                           grepl <- base::grepl
[11:02:04.454]                           restarts <- computeRestarts(cond)
[11:02:04.454]                           for (restart in restarts) {
[11:02:04.454]                             name <- restart$name
[11:02:04.454]                             if (is.null(name)) 
[11:02:04.454]                               next
[11:02:04.454]                             if (!grepl(pattern, name)) 
[11:02:04.454]                               next
[11:02:04.454]                             invokeRestart(restart)
[11:02:04.454]                             muffled <- TRUE
[11:02:04.454]                             break
[11:02:04.454]                           }
[11:02:04.454]                         }
[11:02:04.454]                       }
[11:02:04.454]                       invisible(muffled)
[11:02:04.454]                     }
[11:02:04.454]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.454]                   }
[11:02:04.454]                 }
[11:02:04.454]             }
[11:02:04.454]         }))
[11:02:04.454]     }, error = function(ex) {
[11:02:04.454]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.454]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.454]                 ...future.rng), started = ...future.startTime, 
[11:02:04.454]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.454]             version = "1.8"), class = "FutureResult")
[11:02:04.454]     }, finally = {
[11:02:04.454]         if (!identical(...future.workdir, getwd())) 
[11:02:04.454]             setwd(...future.workdir)
[11:02:04.454]         {
[11:02:04.454]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.454]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.454]             }
[11:02:04.454]             base::options(...future.oldOptions)
[11:02:04.454]             if (.Platform$OS.type == "windows") {
[11:02:04.454]                 old_names <- names(...future.oldEnvVars)
[11:02:04.454]                 envs <- base::Sys.getenv()
[11:02:04.454]                 names <- names(envs)
[11:02:04.454]                 common <- intersect(names, old_names)
[11:02:04.454]                 added <- setdiff(names, old_names)
[11:02:04.454]                 removed <- setdiff(old_names, names)
[11:02:04.454]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.454]                   envs[common]]
[11:02:04.454]                 NAMES <- toupper(changed)
[11:02:04.454]                 args <- list()
[11:02:04.454]                 for (kk in seq_along(NAMES)) {
[11:02:04.454]                   name <- changed[[kk]]
[11:02:04.454]                   NAME <- NAMES[[kk]]
[11:02:04.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.454]                     next
[11:02:04.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.454]                 }
[11:02:04.454]                 NAMES <- toupper(added)
[11:02:04.454]                 for (kk in seq_along(NAMES)) {
[11:02:04.454]                   name <- added[[kk]]
[11:02:04.454]                   NAME <- NAMES[[kk]]
[11:02:04.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.454]                     next
[11:02:04.454]                   args[[name]] <- ""
[11:02:04.454]                 }
[11:02:04.454]                 NAMES <- toupper(removed)
[11:02:04.454]                 for (kk in seq_along(NAMES)) {
[11:02:04.454]                   name <- removed[[kk]]
[11:02:04.454]                   NAME <- NAMES[[kk]]
[11:02:04.454]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.454]                     next
[11:02:04.454]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.454]                 }
[11:02:04.454]                 if (length(args) > 0) 
[11:02:04.454]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.454]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.454]             }
[11:02:04.454]             else {
[11:02:04.454]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.454]             }
[11:02:04.454]             {
[11:02:04.454]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.454]                   0L) {
[11:02:04.454]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.454]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.454]                   base::options(opts)
[11:02:04.454]                 }
[11:02:04.454]                 {
[11:02:04.454]                   {
[11:02:04.454]                     NULL
[11:02:04.454]                     RNGkind("Mersenne-Twister")
[11:02:04.454]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.454]                       inherits = FALSE)
[11:02:04.454]                   }
[11:02:04.454]                   options(future.plan = NULL)
[11:02:04.454]                   if (is.na(NA_character_)) 
[11:02:04.454]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.454]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.454]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.454]                     .init = FALSE)
[11:02:04.454]                 }
[11:02:04.454]             }
[11:02:04.454]         }
[11:02:04.454]     })
[11:02:04.454]     if (TRUE) {
[11:02:04.454]         base::sink(type = "output", split = FALSE)
[11:02:04.454]         if (TRUE) {
[11:02:04.454]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.454]         }
[11:02:04.454]         else {
[11:02:04.454]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.454]         }
[11:02:04.454]         base::close(...future.stdout)
[11:02:04.454]         ...future.stdout <- NULL
[11:02:04.454]     }
[11:02:04.454]     ...future.result$conditions <- ...future.conditions
[11:02:04.454]     ...future.result$finished <- base::Sys.time()
[11:02:04.454]     ...future.result
[11:02:04.454] }
[11:02:04.456] plan(): Setting new future strategy stack:
[11:02:04.456] List of future strategies:
[11:02:04.456] 1. sequential:
[11:02:04.456]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.456]    - tweaked: FALSE
[11:02:04.456]    - call: NULL
[11:02:04.457] plan(): nbrOfWorkers() = 1
[11:02:04.457] plan(): Setting new future strategy stack:
[11:02:04.457] List of future strategies:
[11:02:04.457] 1. multicore:
[11:02:04.457]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.457]    - tweaked: FALSE
[11:02:04.457]    - call: plan(multicore)
[11:02:04.459] plan(): nbrOfWorkers() = 1
[11:02:04.459] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[11:02:04.460] getGlobalsAndPackages() ...
[11:02:04.460] Not searching for globals
[11:02:04.461] - globals: [0] <none>
[11:02:04.461] getGlobalsAndPackages() ... DONE
[11:02:04.461] Packages needed by the future expression (n = 0): <none>
[11:02:04.461] Packages needed by future strategies (n = 0): <none>
[11:02:04.461] {
[11:02:04.461]     {
[11:02:04.461]         {
[11:02:04.461]             ...future.startTime <- base::Sys.time()
[11:02:04.461]             {
[11:02:04.461]                 {
[11:02:04.461]                   {
[11:02:04.461]                     base::local({
[11:02:04.461]                       has_future <- base::requireNamespace("future", 
[11:02:04.461]                         quietly = TRUE)
[11:02:04.461]                       if (has_future) {
[11:02:04.461]                         ns <- base::getNamespace("future")
[11:02:04.461]                         version <- ns[[".package"]][["version"]]
[11:02:04.461]                         if (is.null(version)) 
[11:02:04.461]                           version <- utils::packageVersion("future")
[11:02:04.461]                       }
[11:02:04.461]                       else {
[11:02:04.461]                         version <- NULL
[11:02:04.461]                       }
[11:02:04.461]                       if (!has_future || version < "1.8.0") {
[11:02:04.461]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.461]                           "", base::R.version$version.string), 
[11:02:04.461]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.461]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.461]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.461]                             "release", "version")], collapse = " "), 
[11:02:04.461]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.461]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.461]                           info)
[11:02:04.461]                         info <- base::paste(info, collapse = "; ")
[11:02:04.461]                         if (!has_future) {
[11:02:04.461]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.461]                             info)
[11:02:04.461]                         }
[11:02:04.461]                         else {
[11:02:04.461]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.461]                             info, version)
[11:02:04.461]                         }
[11:02:04.461]                         base::stop(msg)
[11:02:04.461]                       }
[11:02:04.461]                     })
[11:02:04.461]                   }
[11:02:04.461]                   ...future.strategy.old <- future::plan("list")
[11:02:04.461]                   options(future.plan = NULL)
[11:02:04.461]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.461]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.461]                 }
[11:02:04.461]                 ...future.workdir <- getwd()
[11:02:04.461]             }
[11:02:04.461]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.461]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.461]         }
[11:02:04.461]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.461]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.461]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.461]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.461]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.461]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.461]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.461]             base::names(...future.oldOptions))
[11:02:04.461]     }
[11:02:04.461]     if (FALSE) {
[11:02:04.461]     }
[11:02:04.461]     else {
[11:02:04.461]         if (TRUE) {
[11:02:04.461]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.461]                 open = "w")
[11:02:04.461]         }
[11:02:04.461]         else {
[11:02:04.461]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.461]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.461]         }
[11:02:04.461]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.461]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.461]             base::sink(type = "output", split = FALSE)
[11:02:04.461]             base::close(...future.stdout)
[11:02:04.461]         }, add = TRUE)
[11:02:04.461]     }
[11:02:04.461]     ...future.frame <- base::sys.nframe()
[11:02:04.461]     ...future.conditions <- base::list()
[11:02:04.461]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.461]     if (FALSE) {
[11:02:04.461]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.461]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.461]     }
[11:02:04.461]     ...future.result <- base::tryCatch({
[11:02:04.461]         base::withCallingHandlers({
[11:02:04.461]             ...future.value <- base::withVisible(base::local({
[11:02:04.461]                 ii
[11:02:04.461]             }))
[11:02:04.461]             future::FutureResult(value = ...future.value$value, 
[11:02:04.461]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.461]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.461]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.461]                     ...future.globalenv.names))
[11:02:04.461]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.461]         }, condition = base::local({
[11:02:04.461]             c <- base::c
[11:02:04.461]             inherits <- base::inherits
[11:02:04.461]             invokeRestart <- base::invokeRestart
[11:02:04.461]             length <- base::length
[11:02:04.461]             list <- base::list
[11:02:04.461]             seq.int <- base::seq.int
[11:02:04.461]             signalCondition <- base::signalCondition
[11:02:04.461]             sys.calls <- base::sys.calls
[11:02:04.461]             `[[` <- base::`[[`
[11:02:04.461]             `+` <- base::`+`
[11:02:04.461]             `<<-` <- base::`<<-`
[11:02:04.461]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.461]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.461]                   3L)]
[11:02:04.461]             }
[11:02:04.461]             function(cond) {
[11:02:04.461]                 is_error <- inherits(cond, "error")
[11:02:04.461]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.461]                   NULL)
[11:02:04.461]                 if (is_error) {
[11:02:04.461]                   sessionInformation <- function() {
[11:02:04.461]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.461]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.461]                       search = base::search(), system = base::Sys.info())
[11:02:04.461]                   }
[11:02:04.461]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.461]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.461]                     cond$call), session = sessionInformation(), 
[11:02:04.461]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.461]                   signalCondition(cond)
[11:02:04.461]                 }
[11:02:04.461]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.461]                 "immediateCondition"))) {
[11:02:04.461]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.461]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.461]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.461]                   if (TRUE && !signal) {
[11:02:04.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.461]                     {
[11:02:04.461]                       inherits <- base::inherits
[11:02:04.461]                       invokeRestart <- base::invokeRestart
[11:02:04.461]                       is.null <- base::is.null
[11:02:04.461]                       muffled <- FALSE
[11:02:04.461]                       if (inherits(cond, "message")) {
[11:02:04.461]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.461]                         if (muffled) 
[11:02:04.461]                           invokeRestart("muffleMessage")
[11:02:04.461]                       }
[11:02:04.461]                       else if (inherits(cond, "warning")) {
[11:02:04.461]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.461]                         if (muffled) 
[11:02:04.461]                           invokeRestart("muffleWarning")
[11:02:04.461]                       }
[11:02:04.461]                       else if (inherits(cond, "condition")) {
[11:02:04.461]                         if (!is.null(pattern)) {
[11:02:04.461]                           computeRestarts <- base::computeRestarts
[11:02:04.461]                           grepl <- base::grepl
[11:02:04.461]                           restarts <- computeRestarts(cond)
[11:02:04.461]                           for (restart in restarts) {
[11:02:04.461]                             name <- restart$name
[11:02:04.461]                             if (is.null(name)) 
[11:02:04.461]                               next
[11:02:04.461]                             if (!grepl(pattern, name)) 
[11:02:04.461]                               next
[11:02:04.461]                             invokeRestart(restart)
[11:02:04.461]                             muffled <- TRUE
[11:02:04.461]                             break
[11:02:04.461]                           }
[11:02:04.461]                         }
[11:02:04.461]                       }
[11:02:04.461]                       invisible(muffled)
[11:02:04.461]                     }
[11:02:04.461]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.461]                   }
[11:02:04.461]                 }
[11:02:04.461]                 else {
[11:02:04.461]                   if (TRUE) {
[11:02:04.461]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.461]                     {
[11:02:04.461]                       inherits <- base::inherits
[11:02:04.461]                       invokeRestart <- base::invokeRestart
[11:02:04.461]                       is.null <- base::is.null
[11:02:04.461]                       muffled <- FALSE
[11:02:04.461]                       if (inherits(cond, "message")) {
[11:02:04.461]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.461]                         if (muffled) 
[11:02:04.461]                           invokeRestart("muffleMessage")
[11:02:04.461]                       }
[11:02:04.461]                       else if (inherits(cond, "warning")) {
[11:02:04.461]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.461]                         if (muffled) 
[11:02:04.461]                           invokeRestart("muffleWarning")
[11:02:04.461]                       }
[11:02:04.461]                       else if (inherits(cond, "condition")) {
[11:02:04.461]                         if (!is.null(pattern)) {
[11:02:04.461]                           computeRestarts <- base::computeRestarts
[11:02:04.461]                           grepl <- base::grepl
[11:02:04.461]                           restarts <- computeRestarts(cond)
[11:02:04.461]                           for (restart in restarts) {
[11:02:04.461]                             name <- restart$name
[11:02:04.461]                             if (is.null(name)) 
[11:02:04.461]                               next
[11:02:04.461]                             if (!grepl(pattern, name)) 
[11:02:04.461]                               next
[11:02:04.461]                             invokeRestart(restart)
[11:02:04.461]                             muffled <- TRUE
[11:02:04.461]                             break
[11:02:04.461]                           }
[11:02:04.461]                         }
[11:02:04.461]                       }
[11:02:04.461]                       invisible(muffled)
[11:02:04.461]                     }
[11:02:04.461]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.461]                   }
[11:02:04.461]                 }
[11:02:04.461]             }
[11:02:04.461]         }))
[11:02:04.461]     }, error = function(ex) {
[11:02:04.461]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.461]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.461]                 ...future.rng), started = ...future.startTime, 
[11:02:04.461]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.461]             version = "1.8"), class = "FutureResult")
[11:02:04.461]     }, finally = {
[11:02:04.461]         if (!identical(...future.workdir, getwd())) 
[11:02:04.461]             setwd(...future.workdir)
[11:02:04.461]         {
[11:02:04.461]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.461]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.461]             }
[11:02:04.461]             base::options(...future.oldOptions)
[11:02:04.461]             if (.Platform$OS.type == "windows") {
[11:02:04.461]                 old_names <- names(...future.oldEnvVars)
[11:02:04.461]                 envs <- base::Sys.getenv()
[11:02:04.461]                 names <- names(envs)
[11:02:04.461]                 common <- intersect(names, old_names)
[11:02:04.461]                 added <- setdiff(names, old_names)
[11:02:04.461]                 removed <- setdiff(old_names, names)
[11:02:04.461]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.461]                   envs[common]]
[11:02:04.461]                 NAMES <- toupper(changed)
[11:02:04.461]                 args <- list()
[11:02:04.461]                 for (kk in seq_along(NAMES)) {
[11:02:04.461]                   name <- changed[[kk]]
[11:02:04.461]                   NAME <- NAMES[[kk]]
[11:02:04.461]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.461]                     next
[11:02:04.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.461]                 }
[11:02:04.461]                 NAMES <- toupper(added)
[11:02:04.461]                 for (kk in seq_along(NAMES)) {
[11:02:04.461]                   name <- added[[kk]]
[11:02:04.461]                   NAME <- NAMES[[kk]]
[11:02:04.461]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.461]                     next
[11:02:04.461]                   args[[name]] <- ""
[11:02:04.461]                 }
[11:02:04.461]                 NAMES <- toupper(removed)
[11:02:04.461]                 for (kk in seq_along(NAMES)) {
[11:02:04.461]                   name <- removed[[kk]]
[11:02:04.461]                   NAME <- NAMES[[kk]]
[11:02:04.461]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.461]                     next
[11:02:04.461]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.461]                 }
[11:02:04.461]                 if (length(args) > 0) 
[11:02:04.461]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.461]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.461]             }
[11:02:04.461]             else {
[11:02:04.461]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.461]             }
[11:02:04.461]             {
[11:02:04.461]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.461]                   0L) {
[11:02:04.461]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.461]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.461]                   base::options(opts)
[11:02:04.461]                 }
[11:02:04.461]                 {
[11:02:04.461]                   {
[11:02:04.461]                     NULL
[11:02:04.461]                     RNGkind("Mersenne-Twister")
[11:02:04.461]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.461]                       inherits = FALSE)
[11:02:04.461]                   }
[11:02:04.461]                   options(future.plan = NULL)
[11:02:04.461]                   if (is.na(NA_character_)) 
[11:02:04.461]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.461]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.461]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.461]                     .init = FALSE)
[11:02:04.461]                 }
[11:02:04.461]             }
[11:02:04.461]         }
[11:02:04.461]     })
[11:02:04.461]     if (TRUE) {
[11:02:04.461]         base::sink(type = "output", split = FALSE)
[11:02:04.461]         if (TRUE) {
[11:02:04.461]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.461]         }
[11:02:04.461]         else {
[11:02:04.461]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.461]         }
[11:02:04.461]         base::close(...future.stdout)
[11:02:04.461]         ...future.stdout <- NULL
[11:02:04.461]     }
[11:02:04.461]     ...future.result$conditions <- ...future.conditions
[11:02:04.461]     ...future.result$finished <- base::Sys.time()
[11:02:04.461]     ...future.result
[11:02:04.461] }
[11:02:04.463] plan(): Setting new future strategy stack:
[11:02:04.463] List of future strategies:
[11:02:04.463] 1. sequential:
[11:02:04.463]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.463]    - tweaked: FALSE
[11:02:04.463]    - call: NULL
[11:02:04.464] plan(): nbrOfWorkers() = 1
[11:02:04.464] plan(): Setting new future strategy stack:
[11:02:04.464] List of future strategies:
[11:02:04.464] 1. multicore:
[11:02:04.464]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.464]    - tweaked: FALSE
[11:02:04.464]    - call: plan(multicore)
[11:02:04.466] plan(): nbrOfWorkers() = 1
[11:02:04.466] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = FALSE) and errors
[11:02:04.468] getGlobalsAndPackages() ...
[11:02:04.468] Not searching for globals
[11:02:04.468] - globals: [0] <none>
[11:02:04.468] getGlobalsAndPackages() ... DONE
[11:02:04.468] Packages needed by the future expression (n = 0): <none>
[11:02:04.469] Packages needed by future strategies (n = 0): <none>
[11:02:04.469] {
[11:02:04.469]     {
[11:02:04.469]         {
[11:02:04.469]             ...future.startTime <- base::Sys.time()
[11:02:04.469]             {
[11:02:04.469]                 {
[11:02:04.469]                   {
[11:02:04.469]                     base::local({
[11:02:04.469]                       has_future <- base::requireNamespace("future", 
[11:02:04.469]                         quietly = TRUE)
[11:02:04.469]                       if (has_future) {
[11:02:04.469]                         ns <- base::getNamespace("future")
[11:02:04.469]                         version <- ns[[".package"]][["version"]]
[11:02:04.469]                         if (is.null(version)) 
[11:02:04.469]                           version <- utils::packageVersion("future")
[11:02:04.469]                       }
[11:02:04.469]                       else {
[11:02:04.469]                         version <- NULL
[11:02:04.469]                       }
[11:02:04.469]                       if (!has_future || version < "1.8.0") {
[11:02:04.469]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.469]                           "", base::R.version$version.string), 
[11:02:04.469]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.469]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.469]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.469]                             "release", "version")], collapse = " "), 
[11:02:04.469]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.469]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.469]                           info)
[11:02:04.469]                         info <- base::paste(info, collapse = "; ")
[11:02:04.469]                         if (!has_future) {
[11:02:04.469]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.469]                             info)
[11:02:04.469]                         }
[11:02:04.469]                         else {
[11:02:04.469]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.469]                             info, version)
[11:02:04.469]                         }
[11:02:04.469]                         base::stop(msg)
[11:02:04.469]                       }
[11:02:04.469]                     })
[11:02:04.469]                   }
[11:02:04.469]                   ...future.strategy.old <- future::plan("list")
[11:02:04.469]                   options(future.plan = NULL)
[11:02:04.469]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.469]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.469]                 }
[11:02:04.469]                 ...future.workdir <- getwd()
[11:02:04.469]             }
[11:02:04.469]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.469]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.469]         }
[11:02:04.469]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.469]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.469]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.469]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.469]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.469]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.469]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.469]             base::names(...future.oldOptions))
[11:02:04.469]     }
[11:02:04.469]     if (FALSE) {
[11:02:04.469]     }
[11:02:04.469]     else {
[11:02:04.469]         if (TRUE) {
[11:02:04.469]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.469]                 open = "w")
[11:02:04.469]         }
[11:02:04.469]         else {
[11:02:04.469]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.469]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.469]         }
[11:02:04.469]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.469]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.469]             base::sink(type = "output", split = FALSE)
[11:02:04.469]             base::close(...future.stdout)
[11:02:04.469]         }, add = TRUE)
[11:02:04.469]     }
[11:02:04.469]     ...future.frame <- base::sys.nframe()
[11:02:04.469]     ...future.conditions <- base::list()
[11:02:04.469]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.469]     if (FALSE) {
[11:02:04.469]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.469]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.469]     }
[11:02:04.469]     ...future.result <- base::tryCatch({
[11:02:04.469]         base::withCallingHandlers({
[11:02:04.469]             ...future.value <- base::withVisible(base::local({
[11:02:04.469]                 stop("Whoops!")
[11:02:04.469]                 1
[11:02:04.469]             }))
[11:02:04.469]             future::FutureResult(value = ...future.value$value, 
[11:02:04.469]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.469]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.469]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.469]                     ...future.globalenv.names))
[11:02:04.469]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.469]         }, condition = base::local({
[11:02:04.469]             c <- base::c
[11:02:04.469]             inherits <- base::inherits
[11:02:04.469]             invokeRestart <- base::invokeRestart
[11:02:04.469]             length <- base::length
[11:02:04.469]             list <- base::list
[11:02:04.469]             seq.int <- base::seq.int
[11:02:04.469]             signalCondition <- base::signalCondition
[11:02:04.469]             sys.calls <- base::sys.calls
[11:02:04.469]             `[[` <- base::`[[`
[11:02:04.469]             `+` <- base::`+`
[11:02:04.469]             `<<-` <- base::`<<-`
[11:02:04.469]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.469]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.469]                   3L)]
[11:02:04.469]             }
[11:02:04.469]             function(cond) {
[11:02:04.469]                 is_error <- inherits(cond, "error")
[11:02:04.469]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.469]                   NULL)
[11:02:04.469]                 if (is_error) {
[11:02:04.469]                   sessionInformation <- function() {
[11:02:04.469]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.469]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.469]                       search = base::search(), system = base::Sys.info())
[11:02:04.469]                   }
[11:02:04.469]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.469]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.469]                     cond$call), session = sessionInformation(), 
[11:02:04.469]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.469]                   signalCondition(cond)
[11:02:04.469]                 }
[11:02:04.469]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.469]                 "immediateCondition"))) {
[11:02:04.469]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.469]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.469]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.469]                   if (TRUE && !signal) {
[11:02:04.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.469]                     {
[11:02:04.469]                       inherits <- base::inherits
[11:02:04.469]                       invokeRestart <- base::invokeRestart
[11:02:04.469]                       is.null <- base::is.null
[11:02:04.469]                       muffled <- FALSE
[11:02:04.469]                       if (inherits(cond, "message")) {
[11:02:04.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.469]                         if (muffled) 
[11:02:04.469]                           invokeRestart("muffleMessage")
[11:02:04.469]                       }
[11:02:04.469]                       else if (inherits(cond, "warning")) {
[11:02:04.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.469]                         if (muffled) 
[11:02:04.469]                           invokeRestart("muffleWarning")
[11:02:04.469]                       }
[11:02:04.469]                       else if (inherits(cond, "condition")) {
[11:02:04.469]                         if (!is.null(pattern)) {
[11:02:04.469]                           computeRestarts <- base::computeRestarts
[11:02:04.469]                           grepl <- base::grepl
[11:02:04.469]                           restarts <- computeRestarts(cond)
[11:02:04.469]                           for (restart in restarts) {
[11:02:04.469]                             name <- restart$name
[11:02:04.469]                             if (is.null(name)) 
[11:02:04.469]                               next
[11:02:04.469]                             if (!grepl(pattern, name)) 
[11:02:04.469]                               next
[11:02:04.469]                             invokeRestart(restart)
[11:02:04.469]                             muffled <- TRUE
[11:02:04.469]                             break
[11:02:04.469]                           }
[11:02:04.469]                         }
[11:02:04.469]                       }
[11:02:04.469]                       invisible(muffled)
[11:02:04.469]                     }
[11:02:04.469]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.469]                   }
[11:02:04.469]                 }
[11:02:04.469]                 else {
[11:02:04.469]                   if (TRUE) {
[11:02:04.469]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.469]                     {
[11:02:04.469]                       inherits <- base::inherits
[11:02:04.469]                       invokeRestart <- base::invokeRestart
[11:02:04.469]                       is.null <- base::is.null
[11:02:04.469]                       muffled <- FALSE
[11:02:04.469]                       if (inherits(cond, "message")) {
[11:02:04.469]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.469]                         if (muffled) 
[11:02:04.469]                           invokeRestart("muffleMessage")
[11:02:04.469]                       }
[11:02:04.469]                       else if (inherits(cond, "warning")) {
[11:02:04.469]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.469]                         if (muffled) 
[11:02:04.469]                           invokeRestart("muffleWarning")
[11:02:04.469]                       }
[11:02:04.469]                       else if (inherits(cond, "condition")) {
[11:02:04.469]                         if (!is.null(pattern)) {
[11:02:04.469]                           computeRestarts <- base::computeRestarts
[11:02:04.469]                           grepl <- base::grepl
[11:02:04.469]                           restarts <- computeRestarts(cond)
[11:02:04.469]                           for (restart in restarts) {
[11:02:04.469]                             name <- restart$name
[11:02:04.469]                             if (is.null(name)) 
[11:02:04.469]                               next
[11:02:04.469]                             if (!grepl(pattern, name)) 
[11:02:04.469]                               next
[11:02:04.469]                             invokeRestart(restart)
[11:02:04.469]                             muffled <- TRUE
[11:02:04.469]                             break
[11:02:04.469]                           }
[11:02:04.469]                         }
[11:02:04.469]                       }
[11:02:04.469]                       invisible(muffled)
[11:02:04.469]                     }
[11:02:04.469]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.469]                   }
[11:02:04.469]                 }
[11:02:04.469]             }
[11:02:04.469]         }))
[11:02:04.469]     }, error = function(ex) {
[11:02:04.469]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.469]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.469]                 ...future.rng), started = ...future.startTime, 
[11:02:04.469]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.469]             version = "1.8"), class = "FutureResult")
[11:02:04.469]     }, finally = {
[11:02:04.469]         if (!identical(...future.workdir, getwd())) 
[11:02:04.469]             setwd(...future.workdir)
[11:02:04.469]         {
[11:02:04.469]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.469]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.469]             }
[11:02:04.469]             base::options(...future.oldOptions)
[11:02:04.469]             if (.Platform$OS.type == "windows") {
[11:02:04.469]                 old_names <- names(...future.oldEnvVars)
[11:02:04.469]                 envs <- base::Sys.getenv()
[11:02:04.469]                 names <- names(envs)
[11:02:04.469]                 common <- intersect(names, old_names)
[11:02:04.469]                 added <- setdiff(names, old_names)
[11:02:04.469]                 removed <- setdiff(old_names, names)
[11:02:04.469]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.469]                   envs[common]]
[11:02:04.469]                 NAMES <- toupper(changed)
[11:02:04.469]                 args <- list()
[11:02:04.469]                 for (kk in seq_along(NAMES)) {
[11:02:04.469]                   name <- changed[[kk]]
[11:02:04.469]                   NAME <- NAMES[[kk]]
[11:02:04.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.469]                     next
[11:02:04.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.469]                 }
[11:02:04.469]                 NAMES <- toupper(added)
[11:02:04.469]                 for (kk in seq_along(NAMES)) {
[11:02:04.469]                   name <- added[[kk]]
[11:02:04.469]                   NAME <- NAMES[[kk]]
[11:02:04.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.469]                     next
[11:02:04.469]                   args[[name]] <- ""
[11:02:04.469]                 }
[11:02:04.469]                 NAMES <- toupper(removed)
[11:02:04.469]                 for (kk in seq_along(NAMES)) {
[11:02:04.469]                   name <- removed[[kk]]
[11:02:04.469]                   NAME <- NAMES[[kk]]
[11:02:04.469]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.469]                     next
[11:02:04.469]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.469]                 }
[11:02:04.469]                 if (length(args) > 0) 
[11:02:04.469]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.469]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.469]             }
[11:02:04.469]             else {
[11:02:04.469]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.469]             }
[11:02:04.469]             {
[11:02:04.469]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.469]                   0L) {
[11:02:04.469]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.469]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.469]                   base::options(opts)
[11:02:04.469]                 }
[11:02:04.469]                 {
[11:02:04.469]                   {
[11:02:04.469]                     NULL
[11:02:04.469]                     RNGkind("Mersenne-Twister")
[11:02:04.469]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.469]                       inherits = FALSE)
[11:02:04.469]                   }
[11:02:04.469]                   options(future.plan = NULL)
[11:02:04.469]                   if (is.na(NA_character_)) 
[11:02:04.469]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.469]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.469]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.469]                     .init = FALSE)
[11:02:04.469]                 }
[11:02:04.469]             }
[11:02:04.469]         }
[11:02:04.469]     })
[11:02:04.469]     if (TRUE) {
[11:02:04.469]         base::sink(type = "output", split = FALSE)
[11:02:04.469]         if (TRUE) {
[11:02:04.469]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.469]         }
[11:02:04.469]         else {
[11:02:04.469]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.469]         }
[11:02:04.469]         base::close(...future.stdout)
[11:02:04.469]         ...future.stdout <- NULL
[11:02:04.469]     }
[11:02:04.469]     ...future.result$conditions <- ...future.conditions
[11:02:04.469]     ...future.result$finished <- base::Sys.time()
[11:02:04.469]     ...future.result
[11:02:04.469] }
[11:02:04.471] plan(): Setting new future strategy stack:
[11:02:04.471] List of future strategies:
[11:02:04.471] 1. sequential:
[11:02:04.471]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.471]    - tweaked: FALSE
[11:02:04.471]    - call: NULL
[11:02:04.471] plan(): nbrOfWorkers() = 1
[11:02:04.472] plan(): Setting new future strategy stack:
[11:02:04.472] List of future strategies:
[11:02:04.472] 1. multicore:
[11:02:04.472]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.472]    - tweaked: FALSE
[11:02:04.472]    - call: plan(multicore)
[11:02:04.474] plan(): nbrOfWorkers() = 1
[11:02:04.474] SequentialFuture started (and completed)
[11:02:04.474] signalConditions() ...
[11:02:04.474]  - include = ‘immediateCondition’
[11:02:04.474]  - exclude = 
[11:02:04.474]  - resignal = FALSE
[11:02:04.474]  - Number of conditions: 1
[11:02:04.474] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:02:04.475] signalConditions() ...
[11:02:04.475]  - include = ‘immediateCondition’
[11:02:04.475]  - exclude = 
[11:02:04.475]  - resignal = FALSE
[11:02:04.475]  - Number of conditions: 1
[11:02:04.475] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.475] signalConditions() ...
[11:02:04.475]  - include = ‘immediateCondition’
[11:02:04.476]  - exclude = 
[11:02:04.476]  - resignal = FALSE
[11:02:04.476]  - Number of conditions: 1
[11:02:04.476] signalConditions() ... done
[11:02:04.476] Future state: ‘finished’
[11:02:04.476] signalConditions() ...
[11:02:04.476]  - include = ‘condition’
[11:02:04.476]  - exclude = ‘immediateCondition’
[11:02:04.476]  - resignal = TRUE
[11:02:04.476]  - Number of conditions: 1
[11:02:04.476]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.476] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.477] signalConditions() ...
[11:02:04.477]  - include = ‘immediateCondition’
[11:02:04.477]  - exclude = 
[11:02:04.477]  - resignal = FALSE
[11:02:04.477]  - Number of conditions: 1
[11:02:04.477] signalConditions() ... done
[11:02:04.477] Future state: ‘finished’
[11:02:04.477] signalConditions() ...
[11:02:04.477]  - include = ‘condition’
[11:02:04.477]  - exclude = ‘immediateCondition’
[11:02:04.478]  - resignal = TRUE
[11:02:04.478]  - Number of conditions: 1
[11:02:04.478]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.478] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.479] getGlobalsAndPackages() ...
[11:02:04.479] Searching for globals...
[11:02:04.486] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[11:02:04.487] Searching for globals ... DONE
[11:02:04.487] Resolving globals: FALSE
[11:02:04.487] 
[11:02:04.487] 
[11:02:04.487] getGlobalsAndPackages() ... DONE
[11:02:04.488] Packages needed by the future expression (n = 0): <none>
[11:02:04.488] Packages needed by future strategies (n = 0): <none>
[11:02:04.488] {
[11:02:04.488]     {
[11:02:04.488]         {
[11:02:04.488]             ...future.startTime <- base::Sys.time()
[11:02:04.488]             {
[11:02:04.488]                 {
[11:02:04.488]                   {
[11:02:04.488]                     base::local({
[11:02:04.488]                       has_future <- base::requireNamespace("future", 
[11:02:04.488]                         quietly = TRUE)
[11:02:04.488]                       if (has_future) {
[11:02:04.488]                         ns <- base::getNamespace("future")
[11:02:04.488]                         version <- ns[[".package"]][["version"]]
[11:02:04.488]                         if (is.null(version)) 
[11:02:04.488]                           version <- utils::packageVersion("future")
[11:02:04.488]                       }
[11:02:04.488]                       else {
[11:02:04.488]                         version <- NULL
[11:02:04.488]                       }
[11:02:04.488]                       if (!has_future || version < "1.8.0") {
[11:02:04.488]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.488]                           "", base::R.version$version.string), 
[11:02:04.488]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.488]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.488]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.488]                             "release", "version")], collapse = " "), 
[11:02:04.488]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.488]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.488]                           info)
[11:02:04.488]                         info <- base::paste(info, collapse = "; ")
[11:02:04.488]                         if (!has_future) {
[11:02:04.488]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.488]                             info)
[11:02:04.488]                         }
[11:02:04.488]                         else {
[11:02:04.488]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.488]                             info, version)
[11:02:04.488]                         }
[11:02:04.488]                         base::stop(msg)
[11:02:04.488]                       }
[11:02:04.488]                     })
[11:02:04.488]                   }
[11:02:04.488]                   ...future.strategy.old <- future::plan("list")
[11:02:04.488]                   options(future.plan = NULL)
[11:02:04.488]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.488]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.488]                 }
[11:02:04.488]                 ...future.workdir <- getwd()
[11:02:04.488]             }
[11:02:04.488]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.488]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.488]         }
[11:02:04.488]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.488]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.488]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.488]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.488]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.488]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.488]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.488]             base::names(...future.oldOptions))
[11:02:04.488]     }
[11:02:04.488]     if (FALSE) {
[11:02:04.488]     }
[11:02:04.488]     else {
[11:02:04.488]         if (TRUE) {
[11:02:04.488]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.488]                 open = "w")
[11:02:04.488]         }
[11:02:04.488]         else {
[11:02:04.488]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.488]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.488]         }
[11:02:04.488]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.488]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.488]             base::sink(type = "output", split = FALSE)
[11:02:04.488]             base::close(...future.stdout)
[11:02:04.488]         }, add = TRUE)
[11:02:04.488]     }
[11:02:04.488]     ...future.frame <- base::sys.nframe()
[11:02:04.488]     ...future.conditions <- base::list()
[11:02:04.488]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.488]     if (FALSE) {
[11:02:04.488]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.488]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.488]     }
[11:02:04.488]     ...future.result <- base::tryCatch({
[11:02:04.488]         base::withCallingHandlers({
[11:02:04.488]             ...future.value <- base::withVisible(base::local({
[11:02:04.488]                 stop(structure(list(message = "boom"), class = c("MyError", 
[11:02:04.488]                   "error", "condition")))
[11:02:04.488]             }))
[11:02:04.488]             future::FutureResult(value = ...future.value$value, 
[11:02:04.488]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.488]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.488]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.488]                     ...future.globalenv.names))
[11:02:04.488]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.488]         }, condition = base::local({
[11:02:04.488]             c <- base::c
[11:02:04.488]             inherits <- base::inherits
[11:02:04.488]             invokeRestart <- base::invokeRestart
[11:02:04.488]             length <- base::length
[11:02:04.488]             list <- base::list
[11:02:04.488]             seq.int <- base::seq.int
[11:02:04.488]             signalCondition <- base::signalCondition
[11:02:04.488]             sys.calls <- base::sys.calls
[11:02:04.488]             `[[` <- base::`[[`
[11:02:04.488]             `+` <- base::`+`
[11:02:04.488]             `<<-` <- base::`<<-`
[11:02:04.488]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.488]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.488]                   3L)]
[11:02:04.488]             }
[11:02:04.488]             function(cond) {
[11:02:04.488]                 is_error <- inherits(cond, "error")
[11:02:04.488]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.488]                   NULL)
[11:02:04.488]                 if (is_error) {
[11:02:04.488]                   sessionInformation <- function() {
[11:02:04.488]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.488]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.488]                       search = base::search(), system = base::Sys.info())
[11:02:04.488]                   }
[11:02:04.488]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.488]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.488]                     cond$call), session = sessionInformation(), 
[11:02:04.488]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.488]                   signalCondition(cond)
[11:02:04.488]                 }
[11:02:04.488]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.488]                 "immediateCondition"))) {
[11:02:04.488]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.488]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.488]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.488]                   if (TRUE && !signal) {
[11:02:04.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.488]                     {
[11:02:04.488]                       inherits <- base::inherits
[11:02:04.488]                       invokeRestart <- base::invokeRestart
[11:02:04.488]                       is.null <- base::is.null
[11:02:04.488]                       muffled <- FALSE
[11:02:04.488]                       if (inherits(cond, "message")) {
[11:02:04.488]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.488]                         if (muffled) 
[11:02:04.488]                           invokeRestart("muffleMessage")
[11:02:04.488]                       }
[11:02:04.488]                       else if (inherits(cond, "warning")) {
[11:02:04.488]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.488]                         if (muffled) 
[11:02:04.488]                           invokeRestart("muffleWarning")
[11:02:04.488]                       }
[11:02:04.488]                       else if (inherits(cond, "condition")) {
[11:02:04.488]                         if (!is.null(pattern)) {
[11:02:04.488]                           computeRestarts <- base::computeRestarts
[11:02:04.488]                           grepl <- base::grepl
[11:02:04.488]                           restarts <- computeRestarts(cond)
[11:02:04.488]                           for (restart in restarts) {
[11:02:04.488]                             name <- restart$name
[11:02:04.488]                             if (is.null(name)) 
[11:02:04.488]                               next
[11:02:04.488]                             if (!grepl(pattern, name)) 
[11:02:04.488]                               next
[11:02:04.488]                             invokeRestart(restart)
[11:02:04.488]                             muffled <- TRUE
[11:02:04.488]                             break
[11:02:04.488]                           }
[11:02:04.488]                         }
[11:02:04.488]                       }
[11:02:04.488]                       invisible(muffled)
[11:02:04.488]                     }
[11:02:04.488]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.488]                   }
[11:02:04.488]                 }
[11:02:04.488]                 else {
[11:02:04.488]                   if (TRUE) {
[11:02:04.488]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.488]                     {
[11:02:04.488]                       inherits <- base::inherits
[11:02:04.488]                       invokeRestart <- base::invokeRestart
[11:02:04.488]                       is.null <- base::is.null
[11:02:04.488]                       muffled <- FALSE
[11:02:04.488]                       if (inherits(cond, "message")) {
[11:02:04.488]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.488]                         if (muffled) 
[11:02:04.488]                           invokeRestart("muffleMessage")
[11:02:04.488]                       }
[11:02:04.488]                       else if (inherits(cond, "warning")) {
[11:02:04.488]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.488]                         if (muffled) 
[11:02:04.488]                           invokeRestart("muffleWarning")
[11:02:04.488]                       }
[11:02:04.488]                       else if (inherits(cond, "condition")) {
[11:02:04.488]                         if (!is.null(pattern)) {
[11:02:04.488]                           computeRestarts <- base::computeRestarts
[11:02:04.488]                           grepl <- base::grepl
[11:02:04.488]                           restarts <- computeRestarts(cond)
[11:02:04.488]                           for (restart in restarts) {
[11:02:04.488]                             name <- restart$name
[11:02:04.488]                             if (is.null(name)) 
[11:02:04.488]                               next
[11:02:04.488]                             if (!grepl(pattern, name)) 
[11:02:04.488]                               next
[11:02:04.488]                             invokeRestart(restart)
[11:02:04.488]                             muffled <- TRUE
[11:02:04.488]                             break
[11:02:04.488]                           }
[11:02:04.488]                         }
[11:02:04.488]                       }
[11:02:04.488]                       invisible(muffled)
[11:02:04.488]                     }
[11:02:04.488]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.488]                   }
[11:02:04.488]                 }
[11:02:04.488]             }
[11:02:04.488]         }))
[11:02:04.488]     }, error = function(ex) {
[11:02:04.488]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.488]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.488]                 ...future.rng), started = ...future.startTime, 
[11:02:04.488]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.488]             version = "1.8"), class = "FutureResult")
[11:02:04.488]     }, finally = {
[11:02:04.488]         if (!identical(...future.workdir, getwd())) 
[11:02:04.488]             setwd(...future.workdir)
[11:02:04.488]         {
[11:02:04.488]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.488]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.488]             }
[11:02:04.488]             base::options(...future.oldOptions)
[11:02:04.488]             if (.Platform$OS.type == "windows") {
[11:02:04.488]                 old_names <- names(...future.oldEnvVars)
[11:02:04.488]                 envs <- base::Sys.getenv()
[11:02:04.488]                 names <- names(envs)
[11:02:04.488]                 common <- intersect(names, old_names)
[11:02:04.488]                 added <- setdiff(names, old_names)
[11:02:04.488]                 removed <- setdiff(old_names, names)
[11:02:04.488]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.488]                   envs[common]]
[11:02:04.488]                 NAMES <- toupper(changed)
[11:02:04.488]                 args <- list()
[11:02:04.488]                 for (kk in seq_along(NAMES)) {
[11:02:04.488]                   name <- changed[[kk]]
[11:02:04.488]                   NAME <- NAMES[[kk]]
[11:02:04.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.488]                     next
[11:02:04.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.488]                 }
[11:02:04.488]                 NAMES <- toupper(added)
[11:02:04.488]                 for (kk in seq_along(NAMES)) {
[11:02:04.488]                   name <- added[[kk]]
[11:02:04.488]                   NAME <- NAMES[[kk]]
[11:02:04.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.488]                     next
[11:02:04.488]                   args[[name]] <- ""
[11:02:04.488]                 }
[11:02:04.488]                 NAMES <- toupper(removed)
[11:02:04.488]                 for (kk in seq_along(NAMES)) {
[11:02:04.488]                   name <- removed[[kk]]
[11:02:04.488]                   NAME <- NAMES[[kk]]
[11:02:04.488]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.488]                     next
[11:02:04.488]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.488]                 }
[11:02:04.488]                 if (length(args) > 0) 
[11:02:04.488]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.488]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.488]             }
[11:02:04.488]             else {
[11:02:04.488]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.488]             }
[11:02:04.488]             {
[11:02:04.488]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.488]                   0L) {
[11:02:04.488]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.488]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.488]                   base::options(opts)
[11:02:04.488]                 }
[11:02:04.488]                 {
[11:02:04.488]                   {
[11:02:04.488]                     NULL
[11:02:04.488]                     RNGkind("Mersenne-Twister")
[11:02:04.488]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.488]                       inherits = FALSE)
[11:02:04.488]                   }
[11:02:04.488]                   options(future.plan = NULL)
[11:02:04.488]                   if (is.na(NA_character_)) 
[11:02:04.488]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.488]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.488]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.488]                     .init = FALSE)
[11:02:04.488]                 }
[11:02:04.488]             }
[11:02:04.488]         }
[11:02:04.488]     })
[11:02:04.488]     if (TRUE) {
[11:02:04.488]         base::sink(type = "output", split = FALSE)
[11:02:04.488]         if (TRUE) {
[11:02:04.488]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.488]         }
[11:02:04.488]         else {
[11:02:04.488]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.488]         }
[11:02:04.488]         base::close(...future.stdout)
[11:02:04.488]         ...future.stdout <- NULL
[11:02:04.488]     }
[11:02:04.488]     ...future.result$conditions <- ...future.conditions
[11:02:04.488]     ...future.result$finished <- base::Sys.time()
[11:02:04.488]     ...future.result
[11:02:04.488] }
[11:02:04.490] plan(): Setting new future strategy stack:
[11:02:04.490] List of future strategies:
[11:02:04.490] 1. sequential:
[11:02:04.490]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.490]    - tweaked: FALSE
[11:02:04.490]    - call: NULL
[11:02:04.490] plan(): nbrOfWorkers() = 1
[11:02:04.491] plan(): Setting new future strategy stack:
[11:02:04.491] List of future strategies:
[11:02:04.491] 1. multicore:
[11:02:04.491]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.491]    - tweaked: FALSE
[11:02:04.491]    - call: plan(multicore)
[11:02:04.493] plan(): nbrOfWorkers() = 1
[11:02:04.493] SequentialFuture started (and completed)
[11:02:04.493] signalConditions() ...
[11:02:04.493]  - include = ‘immediateCondition’
[11:02:04.493]  - exclude = 
[11:02:04.493]  - resignal = FALSE
[11:02:04.493]  - Number of conditions: 1
[11:02:04.493] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:02:04.494] signalConditions() ...
[11:02:04.494]  - include = ‘immediateCondition’
[11:02:04.494]  - exclude = 
[11:02:04.494]  - resignal = FALSE
[11:02:04.494]  - Number of conditions: 1
[11:02:04.494] signalConditions() ... done
<MyError: boom>
[11:02:04.494] signalConditions() ...
[11:02:04.494]  - include = ‘immediateCondition’
[11:02:04.494]  - exclude = 
[11:02:04.495]  - resignal = FALSE
[11:02:04.495]  - Number of conditions: 1
[11:02:04.495] signalConditions() ... done
[11:02:04.495] Future state: ‘finished’
[11:02:04.495] signalConditions() ...
[11:02:04.495]  - include = ‘condition’
[11:02:04.495]  - exclude = ‘immediateCondition’
[11:02:04.495]  - resignal = TRUE
[11:02:04.495]  - Number of conditions: 1
[11:02:04.495]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[11:02:04.495] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[11:02:04.497] getGlobalsAndPackages() ...
[11:02:04.497] Searching for globals...
[11:02:04.497] - globals found: [1] ‘{’
[11:02:04.497] Searching for globals ... DONE
[11:02:04.498] Resolving globals: FALSE
[11:02:04.498] 
[11:02:04.498] 
[11:02:04.498] getGlobalsAndPackages() ... DONE
[11:02:04.498] Packages needed by the future expression (n = 0): <none>
[11:02:04.498] Packages needed by future strategies (n = 0): <none>
[11:02:04.499] {
[11:02:04.499]     {
[11:02:04.499]         {
[11:02:04.499]             ...future.startTime <- base::Sys.time()
[11:02:04.499]             {
[11:02:04.499]                 {
[11:02:04.499]                   {
[11:02:04.499]                     base::local({
[11:02:04.499]                       has_future <- base::requireNamespace("future", 
[11:02:04.499]                         quietly = TRUE)
[11:02:04.499]                       if (has_future) {
[11:02:04.499]                         ns <- base::getNamespace("future")
[11:02:04.499]                         version <- ns[[".package"]][["version"]]
[11:02:04.499]                         if (is.null(version)) 
[11:02:04.499]                           version <- utils::packageVersion("future")
[11:02:04.499]                       }
[11:02:04.499]                       else {
[11:02:04.499]                         version <- NULL
[11:02:04.499]                       }
[11:02:04.499]                       if (!has_future || version < "1.8.0") {
[11:02:04.499]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.499]                           "", base::R.version$version.string), 
[11:02:04.499]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.499]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.499]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.499]                             "release", "version")], collapse = " "), 
[11:02:04.499]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.499]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.499]                           info)
[11:02:04.499]                         info <- base::paste(info, collapse = "; ")
[11:02:04.499]                         if (!has_future) {
[11:02:04.499]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.499]                             info)
[11:02:04.499]                         }
[11:02:04.499]                         else {
[11:02:04.499]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.499]                             info, version)
[11:02:04.499]                         }
[11:02:04.499]                         base::stop(msg)
[11:02:04.499]                       }
[11:02:04.499]                     })
[11:02:04.499]                   }
[11:02:04.499]                   ...future.strategy.old <- future::plan("list")
[11:02:04.499]                   options(future.plan = NULL)
[11:02:04.499]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.499]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.499]                 }
[11:02:04.499]                 ...future.workdir <- getwd()
[11:02:04.499]             }
[11:02:04.499]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.499]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.499]         }
[11:02:04.499]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.499]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.499]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.499]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.499]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.499]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.499]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.499]             base::names(...future.oldOptions))
[11:02:04.499]     }
[11:02:04.499]     if (FALSE) {
[11:02:04.499]     }
[11:02:04.499]     else {
[11:02:04.499]         if (TRUE) {
[11:02:04.499]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.499]                 open = "w")
[11:02:04.499]         }
[11:02:04.499]         else {
[11:02:04.499]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.499]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.499]         }
[11:02:04.499]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.499]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.499]             base::sink(type = "output", split = FALSE)
[11:02:04.499]             base::close(...future.stdout)
[11:02:04.499]         }, add = TRUE)
[11:02:04.499]     }
[11:02:04.499]     ...future.frame <- base::sys.nframe()
[11:02:04.499]     ...future.conditions <- base::list()
[11:02:04.499]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.499]     if (FALSE) {
[11:02:04.499]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.499]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.499]     }
[11:02:04.499]     ...future.result <- base::tryCatch({
[11:02:04.499]         base::withCallingHandlers({
[11:02:04.499]             ...future.value <- base::withVisible(base::local({
[11:02:04.499]                 42L
[11:02:04.499]             }))
[11:02:04.499]             future::FutureResult(value = ...future.value$value, 
[11:02:04.499]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.499]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.499]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.499]                     ...future.globalenv.names))
[11:02:04.499]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.499]         }, condition = base::local({
[11:02:04.499]             c <- base::c
[11:02:04.499]             inherits <- base::inherits
[11:02:04.499]             invokeRestart <- base::invokeRestart
[11:02:04.499]             length <- base::length
[11:02:04.499]             list <- base::list
[11:02:04.499]             seq.int <- base::seq.int
[11:02:04.499]             signalCondition <- base::signalCondition
[11:02:04.499]             sys.calls <- base::sys.calls
[11:02:04.499]             `[[` <- base::`[[`
[11:02:04.499]             `+` <- base::`+`
[11:02:04.499]             `<<-` <- base::`<<-`
[11:02:04.499]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.499]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.499]                   3L)]
[11:02:04.499]             }
[11:02:04.499]             function(cond) {
[11:02:04.499]                 is_error <- inherits(cond, "error")
[11:02:04.499]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.499]                   NULL)
[11:02:04.499]                 if (is_error) {
[11:02:04.499]                   sessionInformation <- function() {
[11:02:04.499]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.499]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.499]                       search = base::search(), system = base::Sys.info())
[11:02:04.499]                   }
[11:02:04.499]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.499]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.499]                     cond$call), session = sessionInformation(), 
[11:02:04.499]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.499]                   signalCondition(cond)
[11:02:04.499]                 }
[11:02:04.499]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.499]                 "immediateCondition"))) {
[11:02:04.499]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.499]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.499]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.499]                   if (TRUE && !signal) {
[11:02:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.499]                     {
[11:02:04.499]                       inherits <- base::inherits
[11:02:04.499]                       invokeRestart <- base::invokeRestart
[11:02:04.499]                       is.null <- base::is.null
[11:02:04.499]                       muffled <- FALSE
[11:02:04.499]                       if (inherits(cond, "message")) {
[11:02:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.499]                         if (muffled) 
[11:02:04.499]                           invokeRestart("muffleMessage")
[11:02:04.499]                       }
[11:02:04.499]                       else if (inherits(cond, "warning")) {
[11:02:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.499]                         if (muffled) 
[11:02:04.499]                           invokeRestart("muffleWarning")
[11:02:04.499]                       }
[11:02:04.499]                       else if (inherits(cond, "condition")) {
[11:02:04.499]                         if (!is.null(pattern)) {
[11:02:04.499]                           computeRestarts <- base::computeRestarts
[11:02:04.499]                           grepl <- base::grepl
[11:02:04.499]                           restarts <- computeRestarts(cond)
[11:02:04.499]                           for (restart in restarts) {
[11:02:04.499]                             name <- restart$name
[11:02:04.499]                             if (is.null(name)) 
[11:02:04.499]                               next
[11:02:04.499]                             if (!grepl(pattern, name)) 
[11:02:04.499]                               next
[11:02:04.499]                             invokeRestart(restart)
[11:02:04.499]                             muffled <- TRUE
[11:02:04.499]                             break
[11:02:04.499]                           }
[11:02:04.499]                         }
[11:02:04.499]                       }
[11:02:04.499]                       invisible(muffled)
[11:02:04.499]                     }
[11:02:04.499]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.499]                   }
[11:02:04.499]                 }
[11:02:04.499]                 else {
[11:02:04.499]                   if (TRUE) {
[11:02:04.499]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.499]                     {
[11:02:04.499]                       inherits <- base::inherits
[11:02:04.499]                       invokeRestart <- base::invokeRestart
[11:02:04.499]                       is.null <- base::is.null
[11:02:04.499]                       muffled <- FALSE
[11:02:04.499]                       if (inherits(cond, "message")) {
[11:02:04.499]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.499]                         if (muffled) 
[11:02:04.499]                           invokeRestart("muffleMessage")
[11:02:04.499]                       }
[11:02:04.499]                       else if (inherits(cond, "warning")) {
[11:02:04.499]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.499]                         if (muffled) 
[11:02:04.499]                           invokeRestart("muffleWarning")
[11:02:04.499]                       }
[11:02:04.499]                       else if (inherits(cond, "condition")) {
[11:02:04.499]                         if (!is.null(pattern)) {
[11:02:04.499]                           computeRestarts <- base::computeRestarts
[11:02:04.499]                           grepl <- base::grepl
[11:02:04.499]                           restarts <- computeRestarts(cond)
[11:02:04.499]                           for (restart in restarts) {
[11:02:04.499]                             name <- restart$name
[11:02:04.499]                             if (is.null(name)) 
[11:02:04.499]                               next
[11:02:04.499]                             if (!grepl(pattern, name)) 
[11:02:04.499]                               next
[11:02:04.499]                             invokeRestart(restart)
[11:02:04.499]                             muffled <- TRUE
[11:02:04.499]                             break
[11:02:04.499]                           }
[11:02:04.499]                         }
[11:02:04.499]                       }
[11:02:04.499]                       invisible(muffled)
[11:02:04.499]                     }
[11:02:04.499]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.499]                   }
[11:02:04.499]                 }
[11:02:04.499]             }
[11:02:04.499]         }))
[11:02:04.499]     }, error = function(ex) {
[11:02:04.499]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.499]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.499]                 ...future.rng), started = ...future.startTime, 
[11:02:04.499]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.499]             version = "1.8"), class = "FutureResult")
[11:02:04.499]     }, finally = {
[11:02:04.499]         if (!identical(...future.workdir, getwd())) 
[11:02:04.499]             setwd(...future.workdir)
[11:02:04.499]         {
[11:02:04.499]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.499]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.499]             }
[11:02:04.499]             base::options(...future.oldOptions)
[11:02:04.499]             if (.Platform$OS.type == "windows") {
[11:02:04.499]                 old_names <- names(...future.oldEnvVars)
[11:02:04.499]                 envs <- base::Sys.getenv()
[11:02:04.499]                 names <- names(envs)
[11:02:04.499]                 common <- intersect(names, old_names)
[11:02:04.499]                 added <- setdiff(names, old_names)
[11:02:04.499]                 removed <- setdiff(old_names, names)
[11:02:04.499]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.499]                   envs[common]]
[11:02:04.499]                 NAMES <- toupper(changed)
[11:02:04.499]                 args <- list()
[11:02:04.499]                 for (kk in seq_along(NAMES)) {
[11:02:04.499]                   name <- changed[[kk]]
[11:02:04.499]                   NAME <- NAMES[[kk]]
[11:02:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.499]                     next
[11:02:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.499]                 }
[11:02:04.499]                 NAMES <- toupper(added)
[11:02:04.499]                 for (kk in seq_along(NAMES)) {
[11:02:04.499]                   name <- added[[kk]]
[11:02:04.499]                   NAME <- NAMES[[kk]]
[11:02:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.499]                     next
[11:02:04.499]                   args[[name]] <- ""
[11:02:04.499]                 }
[11:02:04.499]                 NAMES <- toupper(removed)
[11:02:04.499]                 for (kk in seq_along(NAMES)) {
[11:02:04.499]                   name <- removed[[kk]]
[11:02:04.499]                   NAME <- NAMES[[kk]]
[11:02:04.499]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.499]                     next
[11:02:04.499]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.499]                 }
[11:02:04.499]                 if (length(args) > 0) 
[11:02:04.499]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.499]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.499]             }
[11:02:04.499]             else {
[11:02:04.499]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.499]             }
[11:02:04.499]             {
[11:02:04.499]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.499]                   0L) {
[11:02:04.499]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.499]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.499]                   base::options(opts)
[11:02:04.499]                 }
[11:02:04.499]                 {
[11:02:04.499]                   {
[11:02:04.499]                     NULL
[11:02:04.499]                     RNGkind("Mersenne-Twister")
[11:02:04.499]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.499]                       inherits = FALSE)
[11:02:04.499]                   }
[11:02:04.499]                   options(future.plan = NULL)
[11:02:04.499]                   if (is.na(NA_character_)) 
[11:02:04.499]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.499]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.499]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.499]                     .init = FALSE)
[11:02:04.499]                 }
[11:02:04.499]             }
[11:02:04.499]         }
[11:02:04.499]     })
[11:02:04.499]     if (TRUE) {
[11:02:04.499]         base::sink(type = "output", split = FALSE)
[11:02:04.499]         if (TRUE) {
[11:02:04.499]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.499]         }
[11:02:04.499]         else {
[11:02:04.499]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.499]         }
[11:02:04.499]         base::close(...future.stdout)
[11:02:04.499]         ...future.stdout <- NULL
[11:02:04.499]     }
[11:02:04.499]     ...future.result$conditions <- ...future.conditions
[11:02:04.499]     ...future.result$finished <- base::Sys.time()
[11:02:04.499]     ...future.result
[11:02:04.499] }
[11:02:04.500] plan(): Setting new future strategy stack:
[11:02:04.500] List of future strategies:
[11:02:04.500] 1. sequential:
[11:02:04.500]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.500]    - tweaked: FALSE
[11:02:04.500]    - call: NULL
[11:02:04.501] plan(): nbrOfWorkers() = 1
[11:02:04.501] plan(): Setting new future strategy stack:
[11:02:04.502] List of future strategies:
[11:02:04.502] 1. multicore:
[11:02:04.502]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.502]    - tweaked: FALSE
[11:02:04.502]    - call: plan(multicore)
[11:02:04.503] plan(): nbrOfWorkers() = 1
[11:02:04.503] SequentialFuture started (and completed)
[11:02:04.503] resolved() for ‘SequentialFuture’ ...
[11:02:04.503] - state: ‘finished’
[11:02:04.503] - run: TRUE
[11:02:04.504] - result: ‘FutureResult’
[11:02:04.504] resolved() for ‘SequentialFuture’ ... done
[1] TRUE
[1] 42
*** multicore(..., globals = TRUE) with globals
[11:02:04.505] getGlobalsAndPackages() ...
[11:02:04.505] Searching for globals...
[11:02:04.507] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[11:02:04.507] Searching for globals ... DONE
[11:02:04.507] Resolving globals: FALSE
[11:02:04.508] The total size of the 1 globals is 39 bytes (39 bytes)
[11:02:04.508] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[11:02:04.508] - globals: [1] ‘a’
[11:02:04.508] 
[11:02:04.508] getGlobalsAndPackages() ... DONE
[11:02:04.508] Packages needed by the future expression (n = 0): <none>
[11:02:04.509] Packages needed by future strategies (n = 0): <none>
[11:02:04.509] {
[11:02:04.509]     {
[11:02:04.509]         {
[11:02:04.509]             ...future.startTime <- base::Sys.time()
[11:02:04.509]             {
[11:02:04.509]                 {
[11:02:04.509]                   {
[11:02:04.509]                     base::local({
[11:02:04.509]                       has_future <- base::requireNamespace("future", 
[11:02:04.509]                         quietly = TRUE)
[11:02:04.509]                       if (has_future) {
[11:02:04.509]                         ns <- base::getNamespace("future")
[11:02:04.509]                         version <- ns[[".package"]][["version"]]
[11:02:04.509]                         if (is.null(version)) 
[11:02:04.509]                           version <- utils::packageVersion("future")
[11:02:04.509]                       }
[11:02:04.509]                       else {
[11:02:04.509]                         version <- NULL
[11:02:04.509]                       }
[11:02:04.509]                       if (!has_future || version < "1.8.0") {
[11:02:04.509]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.509]                           "", base::R.version$version.string), 
[11:02:04.509]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.509]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.509]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.509]                             "release", "version")], collapse = " "), 
[11:02:04.509]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.509]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.509]                           info)
[11:02:04.509]                         info <- base::paste(info, collapse = "; ")
[11:02:04.509]                         if (!has_future) {
[11:02:04.509]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.509]                             info)
[11:02:04.509]                         }
[11:02:04.509]                         else {
[11:02:04.509]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.509]                             info, version)
[11:02:04.509]                         }
[11:02:04.509]                         base::stop(msg)
[11:02:04.509]                       }
[11:02:04.509]                     })
[11:02:04.509]                   }
[11:02:04.509]                   ...future.strategy.old <- future::plan("list")
[11:02:04.509]                   options(future.plan = NULL)
[11:02:04.509]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.509]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.509]                 }
[11:02:04.509]                 ...future.workdir <- getwd()
[11:02:04.509]             }
[11:02:04.509]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.509]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.509]         }
[11:02:04.509]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.509]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.509]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.509]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.509]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.509]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.509]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.509]             base::names(...future.oldOptions))
[11:02:04.509]     }
[11:02:04.509]     if (FALSE) {
[11:02:04.509]     }
[11:02:04.509]     else {
[11:02:04.509]         if (TRUE) {
[11:02:04.509]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.509]                 open = "w")
[11:02:04.509]         }
[11:02:04.509]         else {
[11:02:04.509]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.509]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.509]         }
[11:02:04.509]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.509]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.509]             base::sink(type = "output", split = FALSE)
[11:02:04.509]             base::close(...future.stdout)
[11:02:04.509]         }, add = TRUE)
[11:02:04.509]     }
[11:02:04.509]     ...future.frame <- base::sys.nframe()
[11:02:04.509]     ...future.conditions <- base::list()
[11:02:04.509]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.509]     if (FALSE) {
[11:02:04.509]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.509]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.509]     }
[11:02:04.509]     ...future.result <- base::tryCatch({
[11:02:04.509]         base::withCallingHandlers({
[11:02:04.509]             ...future.value <- base::withVisible(base::local({
[11:02:04.509]                 b <- 3
[11:02:04.509]                 c <- 2
[11:02:04.509]                 a * b * c
[11:02:04.509]             }))
[11:02:04.509]             future::FutureResult(value = ...future.value$value, 
[11:02:04.509]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.509]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.509]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.509]                     ...future.globalenv.names))
[11:02:04.509]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.509]         }, condition = base::local({
[11:02:04.509]             c <- base::c
[11:02:04.509]             inherits <- base::inherits
[11:02:04.509]             invokeRestart <- base::invokeRestart
[11:02:04.509]             length <- base::length
[11:02:04.509]             list <- base::list
[11:02:04.509]             seq.int <- base::seq.int
[11:02:04.509]             signalCondition <- base::signalCondition
[11:02:04.509]             sys.calls <- base::sys.calls
[11:02:04.509]             `[[` <- base::`[[`
[11:02:04.509]             `+` <- base::`+`
[11:02:04.509]             `<<-` <- base::`<<-`
[11:02:04.509]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.509]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.509]                   3L)]
[11:02:04.509]             }
[11:02:04.509]             function(cond) {
[11:02:04.509]                 is_error <- inherits(cond, "error")
[11:02:04.509]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.509]                   NULL)
[11:02:04.509]                 if (is_error) {
[11:02:04.509]                   sessionInformation <- function() {
[11:02:04.509]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.509]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.509]                       search = base::search(), system = base::Sys.info())
[11:02:04.509]                   }
[11:02:04.509]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.509]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.509]                     cond$call), session = sessionInformation(), 
[11:02:04.509]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.509]                   signalCondition(cond)
[11:02:04.509]                 }
[11:02:04.509]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.509]                 "immediateCondition"))) {
[11:02:04.509]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.509]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.509]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.509]                   if (TRUE && !signal) {
[11:02:04.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.509]                     {
[11:02:04.509]                       inherits <- base::inherits
[11:02:04.509]                       invokeRestart <- base::invokeRestart
[11:02:04.509]                       is.null <- base::is.null
[11:02:04.509]                       muffled <- FALSE
[11:02:04.509]                       if (inherits(cond, "message")) {
[11:02:04.509]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.509]                         if (muffled) 
[11:02:04.509]                           invokeRestart("muffleMessage")
[11:02:04.509]                       }
[11:02:04.509]                       else if (inherits(cond, "warning")) {
[11:02:04.509]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.509]                         if (muffled) 
[11:02:04.509]                           invokeRestart("muffleWarning")
[11:02:04.509]                       }
[11:02:04.509]                       else if (inherits(cond, "condition")) {
[11:02:04.509]                         if (!is.null(pattern)) {
[11:02:04.509]                           computeRestarts <- base::computeRestarts
[11:02:04.509]                           grepl <- base::grepl
[11:02:04.509]                           restarts <- computeRestarts(cond)
[11:02:04.509]                           for (restart in restarts) {
[11:02:04.509]                             name <- restart$name
[11:02:04.509]                             if (is.null(name)) 
[11:02:04.509]                               next
[11:02:04.509]                             if (!grepl(pattern, name)) 
[11:02:04.509]                               next
[11:02:04.509]                             invokeRestart(restart)
[11:02:04.509]                             muffled <- TRUE
[11:02:04.509]                             break
[11:02:04.509]                           }
[11:02:04.509]                         }
[11:02:04.509]                       }
[11:02:04.509]                       invisible(muffled)
[11:02:04.509]                     }
[11:02:04.509]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.509]                   }
[11:02:04.509]                 }
[11:02:04.509]                 else {
[11:02:04.509]                   if (TRUE) {
[11:02:04.509]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.509]                     {
[11:02:04.509]                       inherits <- base::inherits
[11:02:04.509]                       invokeRestart <- base::invokeRestart
[11:02:04.509]                       is.null <- base::is.null
[11:02:04.509]                       muffled <- FALSE
[11:02:04.509]                       if (inherits(cond, "message")) {
[11:02:04.509]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.509]                         if (muffled) 
[11:02:04.509]                           invokeRestart("muffleMessage")
[11:02:04.509]                       }
[11:02:04.509]                       else if (inherits(cond, "warning")) {
[11:02:04.509]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.509]                         if (muffled) 
[11:02:04.509]                           invokeRestart("muffleWarning")
[11:02:04.509]                       }
[11:02:04.509]                       else if (inherits(cond, "condition")) {
[11:02:04.509]                         if (!is.null(pattern)) {
[11:02:04.509]                           computeRestarts <- base::computeRestarts
[11:02:04.509]                           grepl <- base::grepl
[11:02:04.509]                           restarts <- computeRestarts(cond)
[11:02:04.509]                           for (restart in restarts) {
[11:02:04.509]                             name <- restart$name
[11:02:04.509]                             if (is.null(name)) 
[11:02:04.509]                               next
[11:02:04.509]                             if (!grepl(pattern, name)) 
[11:02:04.509]                               next
[11:02:04.509]                             invokeRestart(restart)
[11:02:04.509]                             muffled <- TRUE
[11:02:04.509]                             break
[11:02:04.509]                           }
[11:02:04.509]                         }
[11:02:04.509]                       }
[11:02:04.509]                       invisible(muffled)
[11:02:04.509]                     }
[11:02:04.509]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.509]                   }
[11:02:04.509]                 }
[11:02:04.509]             }
[11:02:04.509]         }))
[11:02:04.509]     }, error = function(ex) {
[11:02:04.509]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.509]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.509]                 ...future.rng), started = ...future.startTime, 
[11:02:04.509]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.509]             version = "1.8"), class = "FutureResult")
[11:02:04.509]     }, finally = {
[11:02:04.509]         if (!identical(...future.workdir, getwd())) 
[11:02:04.509]             setwd(...future.workdir)
[11:02:04.509]         {
[11:02:04.509]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.509]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.509]             }
[11:02:04.509]             base::options(...future.oldOptions)
[11:02:04.509]             if (.Platform$OS.type == "windows") {
[11:02:04.509]                 old_names <- names(...future.oldEnvVars)
[11:02:04.509]                 envs <- base::Sys.getenv()
[11:02:04.509]                 names <- names(envs)
[11:02:04.509]                 common <- intersect(names, old_names)
[11:02:04.509]                 added <- setdiff(names, old_names)
[11:02:04.509]                 removed <- setdiff(old_names, names)
[11:02:04.509]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.509]                   envs[common]]
[11:02:04.509]                 NAMES <- toupper(changed)
[11:02:04.509]                 args <- list()
[11:02:04.509]                 for (kk in seq_along(NAMES)) {
[11:02:04.509]                   name <- changed[[kk]]
[11:02:04.509]                   NAME <- NAMES[[kk]]
[11:02:04.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.509]                     next
[11:02:04.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.509]                 }
[11:02:04.509]                 NAMES <- toupper(added)
[11:02:04.509]                 for (kk in seq_along(NAMES)) {
[11:02:04.509]                   name <- added[[kk]]
[11:02:04.509]                   NAME <- NAMES[[kk]]
[11:02:04.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.509]                     next
[11:02:04.509]                   args[[name]] <- ""
[11:02:04.509]                 }
[11:02:04.509]                 NAMES <- toupper(removed)
[11:02:04.509]                 for (kk in seq_along(NAMES)) {
[11:02:04.509]                   name <- removed[[kk]]
[11:02:04.509]                   NAME <- NAMES[[kk]]
[11:02:04.509]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.509]                     next
[11:02:04.509]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.509]                 }
[11:02:04.509]                 if (length(args) > 0) 
[11:02:04.509]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.509]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.509]             }
[11:02:04.509]             else {
[11:02:04.509]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.509]             }
[11:02:04.509]             {
[11:02:04.509]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.509]                   0L) {
[11:02:04.509]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.509]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.509]                   base::options(opts)
[11:02:04.509]                 }
[11:02:04.509]                 {
[11:02:04.509]                   {
[11:02:04.509]                     NULL
[11:02:04.509]                     RNGkind("Mersenne-Twister")
[11:02:04.509]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.509]                       inherits = FALSE)
[11:02:04.509]                   }
[11:02:04.509]                   options(future.plan = NULL)
[11:02:04.509]                   if (is.na(NA_character_)) 
[11:02:04.509]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.509]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.509]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.509]                     .init = FALSE)
[11:02:04.509]                 }
[11:02:04.509]             }
[11:02:04.509]         }
[11:02:04.509]     })
[11:02:04.509]     if (TRUE) {
[11:02:04.509]         base::sink(type = "output", split = FALSE)
[11:02:04.509]         if (TRUE) {
[11:02:04.509]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.509]         }
[11:02:04.509]         else {
[11:02:04.509]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.509]         }
[11:02:04.509]         base::close(...future.stdout)
[11:02:04.509]         ...future.stdout <- NULL
[11:02:04.509]     }
[11:02:04.509]     ...future.result$conditions <- ...future.conditions
[11:02:04.509]     ...future.result$finished <- base::Sys.time()
[11:02:04.509]     ...future.result
[11:02:04.509] }
[11:02:04.511] assign_globals() ...
[11:02:04.511] List of 1
[11:02:04.511]  $ a: num 0
[11:02:04.511]  - attr(*, "where")=List of 1
[11:02:04.511]   ..$ a:<environment: R_EmptyEnv> 
[11:02:04.511]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.511]  - attr(*, "resolved")= logi FALSE
[11:02:04.511]  - attr(*, "total_size")= num 39
[11:02:04.514] - copied ‘a’ to environment
[11:02:04.514] assign_globals() ... done
[11:02:04.515] plan(): Setting new future strategy stack:
[11:02:04.515] List of future strategies:
[11:02:04.515] 1. sequential:
[11:02:04.515]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.515]    - tweaked: FALSE
[11:02:04.515]    - call: NULL
[11:02:04.515] plan(): nbrOfWorkers() = 1
[11:02:04.516] plan(): Setting new future strategy stack:
[11:02:04.516] List of future strategies:
[11:02:04.516] 1. multicore:
[11:02:04.516]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.516]    - tweaked: FALSE
[11:02:04.516]    - call: plan(multicore)
[11:02:04.519] plan(): nbrOfWorkers() = 1
[11:02:04.519] SequentialFuture started (and completed)
SequentialFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: 1 objects totaling 39 bytes (numeric ‘a’ of 39 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 39 bytes of class ‘numeric’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[11:02:04.521] getGlobalsAndPackages() ...
[11:02:04.521] Searching for globals...
[11:02:04.521] - globals found: [2] ‘{’, ‘ii’
[11:02:04.522] Searching for globals ... DONE
[11:02:04.522] Resolving globals: FALSE
[11:02:04.522] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.522] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.522] - globals: [1] ‘ii’
[11:02:04.522] 
[11:02:04.523] getGlobalsAndPackages() ... DONE
[11:02:04.523] Packages needed by the future expression (n = 0): <none>
[11:02:04.523] Packages needed by future strategies (n = 0): <none>
[11:02:04.523] {
[11:02:04.523]     {
[11:02:04.523]         {
[11:02:04.523]             ...future.startTime <- base::Sys.time()
[11:02:04.523]             {
[11:02:04.523]                 {
[11:02:04.523]                   {
[11:02:04.523]                     base::local({
[11:02:04.523]                       has_future <- base::requireNamespace("future", 
[11:02:04.523]                         quietly = TRUE)
[11:02:04.523]                       if (has_future) {
[11:02:04.523]                         ns <- base::getNamespace("future")
[11:02:04.523]                         version <- ns[[".package"]][["version"]]
[11:02:04.523]                         if (is.null(version)) 
[11:02:04.523]                           version <- utils::packageVersion("future")
[11:02:04.523]                       }
[11:02:04.523]                       else {
[11:02:04.523]                         version <- NULL
[11:02:04.523]                       }
[11:02:04.523]                       if (!has_future || version < "1.8.0") {
[11:02:04.523]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.523]                           "", base::R.version$version.string), 
[11:02:04.523]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.523]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.523]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.523]                             "release", "version")], collapse = " "), 
[11:02:04.523]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.523]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.523]                           info)
[11:02:04.523]                         info <- base::paste(info, collapse = "; ")
[11:02:04.523]                         if (!has_future) {
[11:02:04.523]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.523]                             info)
[11:02:04.523]                         }
[11:02:04.523]                         else {
[11:02:04.523]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.523]                             info, version)
[11:02:04.523]                         }
[11:02:04.523]                         base::stop(msg)
[11:02:04.523]                       }
[11:02:04.523]                     })
[11:02:04.523]                   }
[11:02:04.523]                   ...future.strategy.old <- future::plan("list")
[11:02:04.523]                   options(future.plan = NULL)
[11:02:04.523]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.523]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.523]                 }
[11:02:04.523]                 ...future.workdir <- getwd()
[11:02:04.523]             }
[11:02:04.523]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.523]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.523]         }
[11:02:04.523]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.523]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.523]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.523]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.523]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.523]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.523]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.523]             base::names(...future.oldOptions))
[11:02:04.523]     }
[11:02:04.523]     if (FALSE) {
[11:02:04.523]     }
[11:02:04.523]     else {
[11:02:04.523]         if (TRUE) {
[11:02:04.523]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.523]                 open = "w")
[11:02:04.523]         }
[11:02:04.523]         else {
[11:02:04.523]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.523]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.523]         }
[11:02:04.523]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.523]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.523]             base::sink(type = "output", split = FALSE)
[11:02:04.523]             base::close(...future.stdout)
[11:02:04.523]         }, add = TRUE)
[11:02:04.523]     }
[11:02:04.523]     ...future.frame <- base::sys.nframe()
[11:02:04.523]     ...future.conditions <- base::list()
[11:02:04.523]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.523]     if (FALSE) {
[11:02:04.523]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.523]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.523]     }
[11:02:04.523]     ...future.result <- base::tryCatch({
[11:02:04.523]         base::withCallingHandlers({
[11:02:04.523]             ...future.value <- base::withVisible(base::local({
[11:02:04.523]                 ii
[11:02:04.523]             }))
[11:02:04.523]             future::FutureResult(value = ...future.value$value, 
[11:02:04.523]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.523]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.523]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.523]                     ...future.globalenv.names))
[11:02:04.523]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.523]         }, condition = base::local({
[11:02:04.523]             c <- base::c
[11:02:04.523]             inherits <- base::inherits
[11:02:04.523]             invokeRestart <- base::invokeRestart
[11:02:04.523]             length <- base::length
[11:02:04.523]             list <- base::list
[11:02:04.523]             seq.int <- base::seq.int
[11:02:04.523]             signalCondition <- base::signalCondition
[11:02:04.523]             sys.calls <- base::sys.calls
[11:02:04.523]             `[[` <- base::`[[`
[11:02:04.523]             `+` <- base::`+`
[11:02:04.523]             `<<-` <- base::`<<-`
[11:02:04.523]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.523]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.523]                   3L)]
[11:02:04.523]             }
[11:02:04.523]             function(cond) {
[11:02:04.523]                 is_error <- inherits(cond, "error")
[11:02:04.523]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.523]                   NULL)
[11:02:04.523]                 if (is_error) {
[11:02:04.523]                   sessionInformation <- function() {
[11:02:04.523]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.523]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.523]                       search = base::search(), system = base::Sys.info())
[11:02:04.523]                   }
[11:02:04.523]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.523]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.523]                     cond$call), session = sessionInformation(), 
[11:02:04.523]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.523]                   signalCondition(cond)
[11:02:04.523]                 }
[11:02:04.523]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.523]                 "immediateCondition"))) {
[11:02:04.523]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.523]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.523]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.523]                   if (TRUE && !signal) {
[11:02:04.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.523]                     {
[11:02:04.523]                       inherits <- base::inherits
[11:02:04.523]                       invokeRestart <- base::invokeRestart
[11:02:04.523]                       is.null <- base::is.null
[11:02:04.523]                       muffled <- FALSE
[11:02:04.523]                       if (inherits(cond, "message")) {
[11:02:04.523]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.523]                         if (muffled) 
[11:02:04.523]                           invokeRestart("muffleMessage")
[11:02:04.523]                       }
[11:02:04.523]                       else if (inherits(cond, "warning")) {
[11:02:04.523]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.523]                         if (muffled) 
[11:02:04.523]                           invokeRestart("muffleWarning")
[11:02:04.523]                       }
[11:02:04.523]                       else if (inherits(cond, "condition")) {
[11:02:04.523]                         if (!is.null(pattern)) {
[11:02:04.523]                           computeRestarts <- base::computeRestarts
[11:02:04.523]                           grepl <- base::grepl
[11:02:04.523]                           restarts <- computeRestarts(cond)
[11:02:04.523]                           for (restart in restarts) {
[11:02:04.523]                             name <- restart$name
[11:02:04.523]                             if (is.null(name)) 
[11:02:04.523]                               next
[11:02:04.523]                             if (!grepl(pattern, name)) 
[11:02:04.523]                               next
[11:02:04.523]                             invokeRestart(restart)
[11:02:04.523]                             muffled <- TRUE
[11:02:04.523]                             break
[11:02:04.523]                           }
[11:02:04.523]                         }
[11:02:04.523]                       }
[11:02:04.523]                       invisible(muffled)
[11:02:04.523]                     }
[11:02:04.523]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.523]                   }
[11:02:04.523]                 }
[11:02:04.523]                 else {
[11:02:04.523]                   if (TRUE) {
[11:02:04.523]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.523]                     {
[11:02:04.523]                       inherits <- base::inherits
[11:02:04.523]                       invokeRestart <- base::invokeRestart
[11:02:04.523]                       is.null <- base::is.null
[11:02:04.523]                       muffled <- FALSE
[11:02:04.523]                       if (inherits(cond, "message")) {
[11:02:04.523]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.523]                         if (muffled) 
[11:02:04.523]                           invokeRestart("muffleMessage")
[11:02:04.523]                       }
[11:02:04.523]                       else if (inherits(cond, "warning")) {
[11:02:04.523]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.523]                         if (muffled) 
[11:02:04.523]                           invokeRestart("muffleWarning")
[11:02:04.523]                       }
[11:02:04.523]                       else if (inherits(cond, "condition")) {
[11:02:04.523]                         if (!is.null(pattern)) {
[11:02:04.523]                           computeRestarts <- base::computeRestarts
[11:02:04.523]                           grepl <- base::grepl
[11:02:04.523]                           restarts <- computeRestarts(cond)
[11:02:04.523]                           for (restart in restarts) {
[11:02:04.523]                             name <- restart$name
[11:02:04.523]                             if (is.null(name)) 
[11:02:04.523]                               next
[11:02:04.523]                             if (!grepl(pattern, name)) 
[11:02:04.523]                               next
[11:02:04.523]                             invokeRestart(restart)
[11:02:04.523]                             muffled <- TRUE
[11:02:04.523]                             break
[11:02:04.523]                           }
[11:02:04.523]                         }
[11:02:04.523]                       }
[11:02:04.523]                       invisible(muffled)
[11:02:04.523]                     }
[11:02:04.523]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.523]                   }
[11:02:04.523]                 }
[11:02:04.523]             }
[11:02:04.523]         }))
[11:02:04.523]     }, error = function(ex) {
[11:02:04.523]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.523]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.523]                 ...future.rng), started = ...future.startTime, 
[11:02:04.523]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.523]             version = "1.8"), class = "FutureResult")
[11:02:04.523]     }, finally = {
[11:02:04.523]         if (!identical(...future.workdir, getwd())) 
[11:02:04.523]             setwd(...future.workdir)
[11:02:04.523]         {
[11:02:04.523]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.523]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.523]             }
[11:02:04.523]             base::options(...future.oldOptions)
[11:02:04.523]             if (.Platform$OS.type == "windows") {
[11:02:04.523]                 old_names <- names(...future.oldEnvVars)
[11:02:04.523]                 envs <- base::Sys.getenv()
[11:02:04.523]                 names <- names(envs)
[11:02:04.523]                 common <- intersect(names, old_names)
[11:02:04.523]                 added <- setdiff(names, old_names)
[11:02:04.523]                 removed <- setdiff(old_names, names)
[11:02:04.523]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.523]                   envs[common]]
[11:02:04.523]                 NAMES <- toupper(changed)
[11:02:04.523]                 args <- list()
[11:02:04.523]                 for (kk in seq_along(NAMES)) {
[11:02:04.523]                   name <- changed[[kk]]
[11:02:04.523]                   NAME <- NAMES[[kk]]
[11:02:04.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.523]                     next
[11:02:04.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.523]                 }
[11:02:04.523]                 NAMES <- toupper(added)
[11:02:04.523]                 for (kk in seq_along(NAMES)) {
[11:02:04.523]                   name <- added[[kk]]
[11:02:04.523]                   NAME <- NAMES[[kk]]
[11:02:04.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.523]                     next
[11:02:04.523]                   args[[name]] <- ""
[11:02:04.523]                 }
[11:02:04.523]                 NAMES <- toupper(removed)
[11:02:04.523]                 for (kk in seq_along(NAMES)) {
[11:02:04.523]                   name <- removed[[kk]]
[11:02:04.523]                   NAME <- NAMES[[kk]]
[11:02:04.523]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.523]                     next
[11:02:04.523]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.523]                 }
[11:02:04.523]                 if (length(args) > 0) 
[11:02:04.523]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.523]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.523]             }
[11:02:04.523]             else {
[11:02:04.523]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.523]             }
[11:02:04.523]             {
[11:02:04.523]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.523]                   0L) {
[11:02:04.523]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.523]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.523]                   base::options(opts)
[11:02:04.523]                 }
[11:02:04.523]                 {
[11:02:04.523]                   {
[11:02:04.523]                     NULL
[11:02:04.523]                     RNGkind("Mersenne-Twister")
[11:02:04.523]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.523]                       inherits = FALSE)
[11:02:04.523]                   }
[11:02:04.523]                   options(future.plan = NULL)
[11:02:04.523]                   if (is.na(NA_character_)) 
[11:02:04.523]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.523]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.523]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.523]                     .init = FALSE)
[11:02:04.523]                 }
[11:02:04.523]             }
[11:02:04.523]         }
[11:02:04.523]     })
[11:02:04.523]     if (TRUE) {
[11:02:04.523]         base::sink(type = "output", split = FALSE)
[11:02:04.523]         if (TRUE) {
[11:02:04.523]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.523]         }
[11:02:04.523]         else {
[11:02:04.523]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.523]         }
[11:02:04.523]         base::close(...future.stdout)
[11:02:04.523]         ...future.stdout <- NULL
[11:02:04.523]     }
[11:02:04.523]     ...future.result$conditions <- ...future.conditions
[11:02:04.523]     ...future.result$finished <- base::Sys.time()
[11:02:04.523]     ...future.result
[11:02:04.523] }
[11:02:04.525] assign_globals() ...
[11:02:04.525] List of 1
[11:02:04.525]  $ ii: int 1
[11:02:04.525]  - attr(*, "where")=List of 1
[11:02:04.525]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.525]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.525]  - attr(*, "resolved")= logi FALSE
[11:02:04.525]  - attr(*, "total_size")= num 35
[11:02:04.527] - copied ‘ii’ to environment
[11:02:04.527] assign_globals() ... done
[11:02:04.527] plan(): Setting new future strategy stack:
[11:02:04.527] List of future strategies:
[11:02:04.527] 1. sequential:
[11:02:04.527]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.527]    - tweaked: FALSE
[11:02:04.527]    - call: NULL
[11:02:04.528] plan(): nbrOfWorkers() = 1
[11:02:04.528] plan(): Setting new future strategy stack:
[11:02:04.528] List of future strategies:
[11:02:04.528] 1. multicore:
[11:02:04.528]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.528]    - tweaked: FALSE
[11:02:04.528]    - call: plan(multicore)
[11:02:04.530] plan(): nbrOfWorkers() = 1
[11:02:04.530] SequentialFuture started (and completed)
 - Creating multicore future #2 ...
[11:02:04.531] getGlobalsAndPackages() ...
[11:02:04.532] Searching for globals...
[11:02:04.532] - globals found: [2] ‘{’, ‘ii’
[11:02:04.532] Searching for globals ... DONE
[11:02:04.532] Resolving globals: FALSE
[11:02:04.533] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.533] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.533] - globals: [1] ‘ii’
[11:02:04.533] 
[11:02:04.533] getGlobalsAndPackages() ... DONE
[11:02:04.533] Packages needed by the future expression (n = 0): <none>
[11:02:04.533] Packages needed by future strategies (n = 0): <none>
[11:02:04.534] {
[11:02:04.534]     {
[11:02:04.534]         {
[11:02:04.534]             ...future.startTime <- base::Sys.time()
[11:02:04.534]             {
[11:02:04.534]                 {
[11:02:04.534]                   {
[11:02:04.534]                     base::local({
[11:02:04.534]                       has_future <- base::requireNamespace("future", 
[11:02:04.534]                         quietly = TRUE)
[11:02:04.534]                       if (has_future) {
[11:02:04.534]                         ns <- base::getNamespace("future")
[11:02:04.534]                         version <- ns[[".package"]][["version"]]
[11:02:04.534]                         if (is.null(version)) 
[11:02:04.534]                           version <- utils::packageVersion("future")
[11:02:04.534]                       }
[11:02:04.534]                       else {
[11:02:04.534]                         version <- NULL
[11:02:04.534]                       }
[11:02:04.534]                       if (!has_future || version < "1.8.0") {
[11:02:04.534]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.534]                           "", base::R.version$version.string), 
[11:02:04.534]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.534]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.534]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.534]                             "release", "version")], collapse = " "), 
[11:02:04.534]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.534]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.534]                           info)
[11:02:04.534]                         info <- base::paste(info, collapse = "; ")
[11:02:04.534]                         if (!has_future) {
[11:02:04.534]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.534]                             info)
[11:02:04.534]                         }
[11:02:04.534]                         else {
[11:02:04.534]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.534]                             info, version)
[11:02:04.534]                         }
[11:02:04.534]                         base::stop(msg)
[11:02:04.534]                       }
[11:02:04.534]                     })
[11:02:04.534]                   }
[11:02:04.534]                   ...future.strategy.old <- future::plan("list")
[11:02:04.534]                   options(future.plan = NULL)
[11:02:04.534]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.534]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.534]                 }
[11:02:04.534]                 ...future.workdir <- getwd()
[11:02:04.534]             }
[11:02:04.534]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.534]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.534]         }
[11:02:04.534]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.534]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.534]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.534]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.534]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.534]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.534]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.534]             base::names(...future.oldOptions))
[11:02:04.534]     }
[11:02:04.534]     if (FALSE) {
[11:02:04.534]     }
[11:02:04.534]     else {
[11:02:04.534]         if (TRUE) {
[11:02:04.534]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.534]                 open = "w")
[11:02:04.534]         }
[11:02:04.534]         else {
[11:02:04.534]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.534]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.534]         }
[11:02:04.534]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.534]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.534]             base::sink(type = "output", split = FALSE)
[11:02:04.534]             base::close(...future.stdout)
[11:02:04.534]         }, add = TRUE)
[11:02:04.534]     }
[11:02:04.534]     ...future.frame <- base::sys.nframe()
[11:02:04.534]     ...future.conditions <- base::list()
[11:02:04.534]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.534]     if (FALSE) {
[11:02:04.534]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.534]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.534]     }
[11:02:04.534]     ...future.result <- base::tryCatch({
[11:02:04.534]         base::withCallingHandlers({
[11:02:04.534]             ...future.value <- base::withVisible(base::local({
[11:02:04.534]                 ii
[11:02:04.534]             }))
[11:02:04.534]             future::FutureResult(value = ...future.value$value, 
[11:02:04.534]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.534]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.534]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.534]                     ...future.globalenv.names))
[11:02:04.534]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.534]         }, condition = base::local({
[11:02:04.534]             c <- base::c
[11:02:04.534]             inherits <- base::inherits
[11:02:04.534]             invokeRestart <- base::invokeRestart
[11:02:04.534]             length <- base::length
[11:02:04.534]             list <- base::list
[11:02:04.534]             seq.int <- base::seq.int
[11:02:04.534]             signalCondition <- base::signalCondition
[11:02:04.534]             sys.calls <- base::sys.calls
[11:02:04.534]             `[[` <- base::`[[`
[11:02:04.534]             `+` <- base::`+`
[11:02:04.534]             `<<-` <- base::`<<-`
[11:02:04.534]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.534]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.534]                   3L)]
[11:02:04.534]             }
[11:02:04.534]             function(cond) {
[11:02:04.534]                 is_error <- inherits(cond, "error")
[11:02:04.534]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.534]                   NULL)
[11:02:04.534]                 if (is_error) {
[11:02:04.534]                   sessionInformation <- function() {
[11:02:04.534]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.534]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.534]                       search = base::search(), system = base::Sys.info())
[11:02:04.534]                   }
[11:02:04.534]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.534]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.534]                     cond$call), session = sessionInformation(), 
[11:02:04.534]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.534]                   signalCondition(cond)
[11:02:04.534]                 }
[11:02:04.534]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.534]                 "immediateCondition"))) {
[11:02:04.534]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.534]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.534]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.534]                   if (TRUE && !signal) {
[11:02:04.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.534]                     {
[11:02:04.534]                       inherits <- base::inherits
[11:02:04.534]                       invokeRestart <- base::invokeRestart
[11:02:04.534]                       is.null <- base::is.null
[11:02:04.534]                       muffled <- FALSE
[11:02:04.534]                       if (inherits(cond, "message")) {
[11:02:04.534]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.534]                         if (muffled) 
[11:02:04.534]                           invokeRestart("muffleMessage")
[11:02:04.534]                       }
[11:02:04.534]                       else if (inherits(cond, "warning")) {
[11:02:04.534]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.534]                         if (muffled) 
[11:02:04.534]                           invokeRestart("muffleWarning")
[11:02:04.534]                       }
[11:02:04.534]                       else if (inherits(cond, "condition")) {
[11:02:04.534]                         if (!is.null(pattern)) {
[11:02:04.534]                           computeRestarts <- base::computeRestarts
[11:02:04.534]                           grepl <- base::grepl
[11:02:04.534]                           restarts <- computeRestarts(cond)
[11:02:04.534]                           for (restart in restarts) {
[11:02:04.534]                             name <- restart$name
[11:02:04.534]                             if (is.null(name)) 
[11:02:04.534]                               next
[11:02:04.534]                             if (!grepl(pattern, name)) 
[11:02:04.534]                               next
[11:02:04.534]                             invokeRestart(restart)
[11:02:04.534]                             muffled <- TRUE
[11:02:04.534]                             break
[11:02:04.534]                           }
[11:02:04.534]                         }
[11:02:04.534]                       }
[11:02:04.534]                       invisible(muffled)
[11:02:04.534]                     }
[11:02:04.534]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.534]                   }
[11:02:04.534]                 }
[11:02:04.534]                 else {
[11:02:04.534]                   if (TRUE) {
[11:02:04.534]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.534]                     {
[11:02:04.534]                       inherits <- base::inherits
[11:02:04.534]                       invokeRestart <- base::invokeRestart
[11:02:04.534]                       is.null <- base::is.null
[11:02:04.534]                       muffled <- FALSE
[11:02:04.534]                       if (inherits(cond, "message")) {
[11:02:04.534]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.534]                         if (muffled) 
[11:02:04.534]                           invokeRestart("muffleMessage")
[11:02:04.534]                       }
[11:02:04.534]                       else if (inherits(cond, "warning")) {
[11:02:04.534]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.534]                         if (muffled) 
[11:02:04.534]                           invokeRestart("muffleWarning")
[11:02:04.534]                       }
[11:02:04.534]                       else if (inherits(cond, "condition")) {
[11:02:04.534]                         if (!is.null(pattern)) {
[11:02:04.534]                           computeRestarts <- base::computeRestarts
[11:02:04.534]                           grepl <- base::grepl
[11:02:04.534]                           restarts <- computeRestarts(cond)
[11:02:04.534]                           for (restart in restarts) {
[11:02:04.534]                             name <- restart$name
[11:02:04.534]                             if (is.null(name)) 
[11:02:04.534]                               next
[11:02:04.534]                             if (!grepl(pattern, name)) 
[11:02:04.534]                               next
[11:02:04.534]                             invokeRestart(restart)
[11:02:04.534]                             muffled <- TRUE
[11:02:04.534]                             break
[11:02:04.534]                           }
[11:02:04.534]                         }
[11:02:04.534]                       }
[11:02:04.534]                       invisible(muffled)
[11:02:04.534]                     }
[11:02:04.534]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.534]                   }
[11:02:04.534]                 }
[11:02:04.534]             }
[11:02:04.534]         }))
[11:02:04.534]     }, error = function(ex) {
[11:02:04.534]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.534]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.534]                 ...future.rng), started = ...future.startTime, 
[11:02:04.534]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.534]             version = "1.8"), class = "FutureResult")
[11:02:04.534]     }, finally = {
[11:02:04.534]         if (!identical(...future.workdir, getwd())) 
[11:02:04.534]             setwd(...future.workdir)
[11:02:04.534]         {
[11:02:04.534]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.534]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.534]             }
[11:02:04.534]             base::options(...future.oldOptions)
[11:02:04.534]             if (.Platform$OS.type == "windows") {
[11:02:04.534]                 old_names <- names(...future.oldEnvVars)
[11:02:04.534]                 envs <- base::Sys.getenv()
[11:02:04.534]                 names <- names(envs)
[11:02:04.534]                 common <- intersect(names, old_names)
[11:02:04.534]                 added <- setdiff(names, old_names)
[11:02:04.534]                 removed <- setdiff(old_names, names)
[11:02:04.534]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.534]                   envs[common]]
[11:02:04.534]                 NAMES <- toupper(changed)
[11:02:04.534]                 args <- list()
[11:02:04.534]                 for (kk in seq_along(NAMES)) {
[11:02:04.534]                   name <- changed[[kk]]
[11:02:04.534]                   NAME <- NAMES[[kk]]
[11:02:04.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.534]                     next
[11:02:04.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.534]                 }
[11:02:04.534]                 NAMES <- toupper(added)
[11:02:04.534]                 for (kk in seq_along(NAMES)) {
[11:02:04.534]                   name <- added[[kk]]
[11:02:04.534]                   NAME <- NAMES[[kk]]
[11:02:04.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.534]                     next
[11:02:04.534]                   args[[name]] <- ""
[11:02:04.534]                 }
[11:02:04.534]                 NAMES <- toupper(removed)
[11:02:04.534]                 for (kk in seq_along(NAMES)) {
[11:02:04.534]                   name <- removed[[kk]]
[11:02:04.534]                   NAME <- NAMES[[kk]]
[11:02:04.534]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.534]                     next
[11:02:04.534]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.534]                 }
[11:02:04.534]                 if (length(args) > 0) 
[11:02:04.534]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.534]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.534]             }
[11:02:04.534]             else {
[11:02:04.534]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.534]             }
[11:02:04.534]             {
[11:02:04.534]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.534]                   0L) {
[11:02:04.534]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.534]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.534]                   base::options(opts)
[11:02:04.534]                 }
[11:02:04.534]                 {
[11:02:04.534]                   {
[11:02:04.534]                     NULL
[11:02:04.534]                     RNGkind("Mersenne-Twister")
[11:02:04.534]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.534]                       inherits = FALSE)
[11:02:04.534]                   }
[11:02:04.534]                   options(future.plan = NULL)
[11:02:04.534]                   if (is.na(NA_character_)) 
[11:02:04.534]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.534]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.534]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.534]                     .init = FALSE)
[11:02:04.534]                 }
[11:02:04.534]             }
[11:02:04.534]         }
[11:02:04.534]     })
[11:02:04.534]     if (TRUE) {
[11:02:04.534]         base::sink(type = "output", split = FALSE)
[11:02:04.534]         if (TRUE) {
[11:02:04.534]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.534]         }
[11:02:04.534]         else {
[11:02:04.534]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.534]         }
[11:02:04.534]         base::close(...future.stdout)
[11:02:04.534]         ...future.stdout <- NULL
[11:02:04.534]     }
[11:02:04.534]     ...future.result$conditions <- ...future.conditions
[11:02:04.534]     ...future.result$finished <- base::Sys.time()
[11:02:04.534]     ...future.result
[11:02:04.534] }
[11:02:04.535] assign_globals() ...
[11:02:04.536] List of 1
[11:02:04.536]  $ ii: int 2
[11:02:04.536]  - attr(*, "where")=List of 1
[11:02:04.536]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.536]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.536]  - attr(*, "resolved")= logi FALSE
[11:02:04.536]  - attr(*, "total_size")= num 35
[11:02:04.537] - copied ‘ii’ to environment
[11:02:04.538] assign_globals() ... done
[11:02:04.538] plan(): Setting new future strategy stack:
[11:02:04.538] List of future strategies:
[11:02:04.538] 1. sequential:
[11:02:04.538]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.538]    - tweaked: FALSE
[11:02:04.538]    - call: NULL
[11:02:04.538] plan(): nbrOfWorkers() = 1
[11:02:04.539] plan(): Setting new future strategy stack:
[11:02:04.539] List of future strategies:
[11:02:04.539] 1. multicore:
[11:02:04.539]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.539]    - tweaked: FALSE
[11:02:04.539]    - call: plan(multicore)
[11:02:04.541] plan(): nbrOfWorkers() = 1
[11:02:04.541] SequentialFuture started (and completed)
 - Creating multicore future #3 ...
[11:02:04.542] getGlobalsAndPackages() ...
[11:02:04.542] Searching for globals...
[11:02:04.543] - globals found: [2] ‘{’, ‘ii’
[11:02:04.543] Searching for globals ... DONE
[11:02:04.543] Resolving globals: FALSE
[11:02:04.543] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.544] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.544] - globals: [1] ‘ii’
[11:02:04.544] 
[11:02:04.544] getGlobalsAndPackages() ... DONE
[11:02:04.544] Packages needed by the future expression (n = 0): <none>
[11:02:04.544] Packages needed by future strategies (n = 0): <none>
[11:02:04.545] {
[11:02:04.545]     {
[11:02:04.545]         {
[11:02:04.545]             ...future.startTime <- base::Sys.time()
[11:02:04.545]             {
[11:02:04.545]                 {
[11:02:04.545]                   {
[11:02:04.545]                     base::local({
[11:02:04.545]                       has_future <- base::requireNamespace("future", 
[11:02:04.545]                         quietly = TRUE)
[11:02:04.545]                       if (has_future) {
[11:02:04.545]                         ns <- base::getNamespace("future")
[11:02:04.545]                         version <- ns[[".package"]][["version"]]
[11:02:04.545]                         if (is.null(version)) 
[11:02:04.545]                           version <- utils::packageVersion("future")
[11:02:04.545]                       }
[11:02:04.545]                       else {
[11:02:04.545]                         version <- NULL
[11:02:04.545]                       }
[11:02:04.545]                       if (!has_future || version < "1.8.0") {
[11:02:04.545]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.545]                           "", base::R.version$version.string), 
[11:02:04.545]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.545]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.545]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.545]                             "release", "version")], collapse = " "), 
[11:02:04.545]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.545]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.545]                           info)
[11:02:04.545]                         info <- base::paste(info, collapse = "; ")
[11:02:04.545]                         if (!has_future) {
[11:02:04.545]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.545]                             info)
[11:02:04.545]                         }
[11:02:04.545]                         else {
[11:02:04.545]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.545]                             info, version)
[11:02:04.545]                         }
[11:02:04.545]                         base::stop(msg)
[11:02:04.545]                       }
[11:02:04.545]                     })
[11:02:04.545]                   }
[11:02:04.545]                   ...future.strategy.old <- future::plan("list")
[11:02:04.545]                   options(future.plan = NULL)
[11:02:04.545]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.545]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.545]                 }
[11:02:04.545]                 ...future.workdir <- getwd()
[11:02:04.545]             }
[11:02:04.545]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.545]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.545]         }
[11:02:04.545]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.545]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.545]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.545]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.545]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.545]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.545]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.545]             base::names(...future.oldOptions))
[11:02:04.545]     }
[11:02:04.545]     if (FALSE) {
[11:02:04.545]     }
[11:02:04.545]     else {
[11:02:04.545]         if (TRUE) {
[11:02:04.545]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.545]                 open = "w")
[11:02:04.545]         }
[11:02:04.545]         else {
[11:02:04.545]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.545]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.545]         }
[11:02:04.545]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.545]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.545]             base::sink(type = "output", split = FALSE)
[11:02:04.545]             base::close(...future.stdout)
[11:02:04.545]         }, add = TRUE)
[11:02:04.545]     }
[11:02:04.545]     ...future.frame <- base::sys.nframe()
[11:02:04.545]     ...future.conditions <- base::list()
[11:02:04.545]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.545]     if (FALSE) {
[11:02:04.545]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.545]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.545]     }
[11:02:04.545]     ...future.result <- base::tryCatch({
[11:02:04.545]         base::withCallingHandlers({
[11:02:04.545]             ...future.value <- base::withVisible(base::local({
[11:02:04.545]                 ii
[11:02:04.545]             }))
[11:02:04.545]             future::FutureResult(value = ...future.value$value, 
[11:02:04.545]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.545]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.545]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.545]                     ...future.globalenv.names))
[11:02:04.545]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.545]         }, condition = base::local({
[11:02:04.545]             c <- base::c
[11:02:04.545]             inherits <- base::inherits
[11:02:04.545]             invokeRestart <- base::invokeRestart
[11:02:04.545]             length <- base::length
[11:02:04.545]             list <- base::list
[11:02:04.545]             seq.int <- base::seq.int
[11:02:04.545]             signalCondition <- base::signalCondition
[11:02:04.545]             sys.calls <- base::sys.calls
[11:02:04.545]             `[[` <- base::`[[`
[11:02:04.545]             `+` <- base::`+`
[11:02:04.545]             `<<-` <- base::`<<-`
[11:02:04.545]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.545]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.545]                   3L)]
[11:02:04.545]             }
[11:02:04.545]             function(cond) {
[11:02:04.545]                 is_error <- inherits(cond, "error")
[11:02:04.545]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.545]                   NULL)
[11:02:04.545]                 if (is_error) {
[11:02:04.545]                   sessionInformation <- function() {
[11:02:04.545]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.545]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.545]                       search = base::search(), system = base::Sys.info())
[11:02:04.545]                   }
[11:02:04.545]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.545]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.545]                     cond$call), session = sessionInformation(), 
[11:02:04.545]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.545]                   signalCondition(cond)
[11:02:04.545]                 }
[11:02:04.545]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.545]                 "immediateCondition"))) {
[11:02:04.545]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.545]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.545]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.545]                   if (TRUE && !signal) {
[11:02:04.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.545]                     {
[11:02:04.545]                       inherits <- base::inherits
[11:02:04.545]                       invokeRestart <- base::invokeRestart
[11:02:04.545]                       is.null <- base::is.null
[11:02:04.545]                       muffled <- FALSE
[11:02:04.545]                       if (inherits(cond, "message")) {
[11:02:04.545]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.545]                         if (muffled) 
[11:02:04.545]                           invokeRestart("muffleMessage")
[11:02:04.545]                       }
[11:02:04.545]                       else if (inherits(cond, "warning")) {
[11:02:04.545]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.545]                         if (muffled) 
[11:02:04.545]                           invokeRestart("muffleWarning")
[11:02:04.545]                       }
[11:02:04.545]                       else if (inherits(cond, "condition")) {
[11:02:04.545]                         if (!is.null(pattern)) {
[11:02:04.545]                           computeRestarts <- base::computeRestarts
[11:02:04.545]                           grepl <- base::grepl
[11:02:04.545]                           restarts <- computeRestarts(cond)
[11:02:04.545]                           for (restart in restarts) {
[11:02:04.545]                             name <- restart$name
[11:02:04.545]                             if (is.null(name)) 
[11:02:04.545]                               next
[11:02:04.545]                             if (!grepl(pattern, name)) 
[11:02:04.545]                               next
[11:02:04.545]                             invokeRestart(restart)
[11:02:04.545]                             muffled <- TRUE
[11:02:04.545]                             break
[11:02:04.545]                           }
[11:02:04.545]                         }
[11:02:04.545]                       }
[11:02:04.545]                       invisible(muffled)
[11:02:04.545]                     }
[11:02:04.545]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.545]                   }
[11:02:04.545]                 }
[11:02:04.545]                 else {
[11:02:04.545]                   if (TRUE) {
[11:02:04.545]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.545]                     {
[11:02:04.545]                       inherits <- base::inherits
[11:02:04.545]                       invokeRestart <- base::invokeRestart
[11:02:04.545]                       is.null <- base::is.null
[11:02:04.545]                       muffled <- FALSE
[11:02:04.545]                       if (inherits(cond, "message")) {
[11:02:04.545]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.545]                         if (muffled) 
[11:02:04.545]                           invokeRestart("muffleMessage")
[11:02:04.545]                       }
[11:02:04.545]                       else if (inherits(cond, "warning")) {
[11:02:04.545]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.545]                         if (muffled) 
[11:02:04.545]                           invokeRestart("muffleWarning")
[11:02:04.545]                       }
[11:02:04.545]                       else if (inherits(cond, "condition")) {
[11:02:04.545]                         if (!is.null(pattern)) {
[11:02:04.545]                           computeRestarts <- base::computeRestarts
[11:02:04.545]                           grepl <- base::grepl
[11:02:04.545]                           restarts <- computeRestarts(cond)
[11:02:04.545]                           for (restart in restarts) {
[11:02:04.545]                             name <- restart$name
[11:02:04.545]                             if (is.null(name)) 
[11:02:04.545]                               next
[11:02:04.545]                             if (!grepl(pattern, name)) 
[11:02:04.545]                               next
[11:02:04.545]                             invokeRestart(restart)
[11:02:04.545]                             muffled <- TRUE
[11:02:04.545]                             break
[11:02:04.545]                           }
[11:02:04.545]                         }
[11:02:04.545]                       }
[11:02:04.545]                       invisible(muffled)
[11:02:04.545]                     }
[11:02:04.545]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.545]                   }
[11:02:04.545]                 }
[11:02:04.545]             }
[11:02:04.545]         }))
[11:02:04.545]     }, error = function(ex) {
[11:02:04.545]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.545]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.545]                 ...future.rng), started = ...future.startTime, 
[11:02:04.545]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.545]             version = "1.8"), class = "FutureResult")
[11:02:04.545]     }, finally = {
[11:02:04.545]         if (!identical(...future.workdir, getwd())) 
[11:02:04.545]             setwd(...future.workdir)
[11:02:04.545]         {
[11:02:04.545]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.545]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.545]             }
[11:02:04.545]             base::options(...future.oldOptions)
[11:02:04.545]             if (.Platform$OS.type == "windows") {
[11:02:04.545]                 old_names <- names(...future.oldEnvVars)
[11:02:04.545]                 envs <- base::Sys.getenv()
[11:02:04.545]                 names <- names(envs)
[11:02:04.545]                 common <- intersect(names, old_names)
[11:02:04.545]                 added <- setdiff(names, old_names)
[11:02:04.545]                 removed <- setdiff(old_names, names)
[11:02:04.545]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.545]                   envs[common]]
[11:02:04.545]                 NAMES <- toupper(changed)
[11:02:04.545]                 args <- list()
[11:02:04.545]                 for (kk in seq_along(NAMES)) {
[11:02:04.545]                   name <- changed[[kk]]
[11:02:04.545]                   NAME <- NAMES[[kk]]
[11:02:04.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.545]                     next
[11:02:04.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.545]                 }
[11:02:04.545]                 NAMES <- toupper(added)
[11:02:04.545]                 for (kk in seq_along(NAMES)) {
[11:02:04.545]                   name <- added[[kk]]
[11:02:04.545]                   NAME <- NAMES[[kk]]
[11:02:04.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.545]                     next
[11:02:04.545]                   args[[name]] <- ""
[11:02:04.545]                 }
[11:02:04.545]                 NAMES <- toupper(removed)
[11:02:04.545]                 for (kk in seq_along(NAMES)) {
[11:02:04.545]                   name <- removed[[kk]]
[11:02:04.545]                   NAME <- NAMES[[kk]]
[11:02:04.545]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.545]                     next
[11:02:04.545]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.545]                 }
[11:02:04.545]                 if (length(args) > 0) 
[11:02:04.545]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.545]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.545]             }
[11:02:04.545]             else {
[11:02:04.545]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.545]             }
[11:02:04.545]             {
[11:02:04.545]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.545]                   0L) {
[11:02:04.545]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.545]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.545]                   base::options(opts)
[11:02:04.545]                 }
[11:02:04.545]                 {
[11:02:04.545]                   {
[11:02:04.545]                     NULL
[11:02:04.545]                     RNGkind("Mersenne-Twister")
[11:02:04.545]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.545]                       inherits = FALSE)
[11:02:04.545]                   }
[11:02:04.545]                   options(future.plan = NULL)
[11:02:04.545]                   if (is.na(NA_character_)) 
[11:02:04.545]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.545]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.545]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.545]                     .init = FALSE)
[11:02:04.545]                 }
[11:02:04.545]             }
[11:02:04.545]         }
[11:02:04.545]     })
[11:02:04.545]     if (TRUE) {
[11:02:04.545]         base::sink(type = "output", split = FALSE)
[11:02:04.545]         if (TRUE) {
[11:02:04.545]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.545]         }
[11:02:04.545]         else {
[11:02:04.545]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.545]         }
[11:02:04.545]         base::close(...future.stdout)
[11:02:04.545]         ...future.stdout <- NULL
[11:02:04.545]     }
[11:02:04.545]     ...future.result$conditions <- ...future.conditions
[11:02:04.545]     ...future.result$finished <- base::Sys.time()
[11:02:04.545]     ...future.result
[11:02:04.545] }
[11:02:04.546] assign_globals() ...
[11:02:04.546] List of 1
[11:02:04.546]  $ ii: int 3
[11:02:04.546]  - attr(*, "where")=List of 1
[11:02:04.546]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.546]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.546]  - attr(*, "resolved")= logi FALSE
[11:02:04.546]  - attr(*, "total_size")= num 35
[11:02:04.549] - copied ‘ii’ to environment
[11:02:04.549] assign_globals() ... done
[11:02:04.550] plan(): Setting new future strategy stack:
[11:02:04.550] List of future strategies:
[11:02:04.550] 1. sequential:
[11:02:04.550]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.550]    - tweaked: FALSE
[11:02:04.550]    - call: NULL
[11:02:04.550] plan(): nbrOfWorkers() = 1
[11:02:04.551] plan(): Setting new future strategy stack:
[11:02:04.551] List of future strategies:
[11:02:04.551] 1. multicore:
[11:02:04.551]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.551]    - tweaked: FALSE
[11:02:04.551]    - call: plan(multicore)
[11:02:04.552] plan(): nbrOfWorkers() = 1
[11:02:04.552] SequentialFuture started (and completed)
 - Creating multicore future #4 ...
[11:02:04.554] getGlobalsAndPackages() ...
[11:02:04.554] Searching for globals...
[11:02:04.554] - globals found: [2] ‘{’, ‘ii’
[11:02:04.555] Searching for globals ... DONE
[11:02:04.555] Resolving globals: FALSE
[11:02:04.555] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.555] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.555] - globals: [1] ‘ii’
[11:02:04.555] 
[11:02:04.556] getGlobalsAndPackages() ... DONE
[11:02:04.556] Packages needed by the future expression (n = 0): <none>
[11:02:04.556] Packages needed by future strategies (n = 0): <none>
[11:02:04.556] {
[11:02:04.556]     {
[11:02:04.556]         {
[11:02:04.556]             ...future.startTime <- base::Sys.time()
[11:02:04.556]             {
[11:02:04.556]                 {
[11:02:04.556]                   {
[11:02:04.556]                     base::local({
[11:02:04.556]                       has_future <- base::requireNamespace("future", 
[11:02:04.556]                         quietly = TRUE)
[11:02:04.556]                       if (has_future) {
[11:02:04.556]                         ns <- base::getNamespace("future")
[11:02:04.556]                         version <- ns[[".package"]][["version"]]
[11:02:04.556]                         if (is.null(version)) 
[11:02:04.556]                           version <- utils::packageVersion("future")
[11:02:04.556]                       }
[11:02:04.556]                       else {
[11:02:04.556]                         version <- NULL
[11:02:04.556]                       }
[11:02:04.556]                       if (!has_future || version < "1.8.0") {
[11:02:04.556]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.556]                           "", base::R.version$version.string), 
[11:02:04.556]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.556]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.556]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.556]                             "release", "version")], collapse = " "), 
[11:02:04.556]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.556]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.556]                           info)
[11:02:04.556]                         info <- base::paste(info, collapse = "; ")
[11:02:04.556]                         if (!has_future) {
[11:02:04.556]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.556]                             info)
[11:02:04.556]                         }
[11:02:04.556]                         else {
[11:02:04.556]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.556]                             info, version)
[11:02:04.556]                         }
[11:02:04.556]                         base::stop(msg)
[11:02:04.556]                       }
[11:02:04.556]                     })
[11:02:04.556]                   }
[11:02:04.556]                   ...future.strategy.old <- future::plan("list")
[11:02:04.556]                   options(future.plan = NULL)
[11:02:04.556]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.556]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.556]                 }
[11:02:04.556]                 ...future.workdir <- getwd()
[11:02:04.556]             }
[11:02:04.556]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.556]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.556]         }
[11:02:04.556]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.556]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.556]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.556]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.556]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.556]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.556]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.556]             base::names(...future.oldOptions))
[11:02:04.556]     }
[11:02:04.556]     if (FALSE) {
[11:02:04.556]     }
[11:02:04.556]     else {
[11:02:04.556]         if (TRUE) {
[11:02:04.556]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.556]                 open = "w")
[11:02:04.556]         }
[11:02:04.556]         else {
[11:02:04.556]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.556]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.556]         }
[11:02:04.556]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.556]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.556]             base::sink(type = "output", split = FALSE)
[11:02:04.556]             base::close(...future.stdout)
[11:02:04.556]         }, add = TRUE)
[11:02:04.556]     }
[11:02:04.556]     ...future.frame <- base::sys.nframe()
[11:02:04.556]     ...future.conditions <- base::list()
[11:02:04.556]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.556]     if (FALSE) {
[11:02:04.556]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.556]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.556]     }
[11:02:04.556]     ...future.result <- base::tryCatch({
[11:02:04.556]         base::withCallingHandlers({
[11:02:04.556]             ...future.value <- base::withVisible(base::local({
[11:02:04.556]                 ii
[11:02:04.556]             }))
[11:02:04.556]             future::FutureResult(value = ...future.value$value, 
[11:02:04.556]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.556]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.556]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.556]                     ...future.globalenv.names))
[11:02:04.556]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.556]         }, condition = base::local({
[11:02:04.556]             c <- base::c
[11:02:04.556]             inherits <- base::inherits
[11:02:04.556]             invokeRestart <- base::invokeRestart
[11:02:04.556]             length <- base::length
[11:02:04.556]             list <- base::list
[11:02:04.556]             seq.int <- base::seq.int
[11:02:04.556]             signalCondition <- base::signalCondition
[11:02:04.556]             sys.calls <- base::sys.calls
[11:02:04.556]             `[[` <- base::`[[`
[11:02:04.556]             `+` <- base::`+`
[11:02:04.556]             `<<-` <- base::`<<-`
[11:02:04.556]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.556]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.556]                   3L)]
[11:02:04.556]             }
[11:02:04.556]             function(cond) {
[11:02:04.556]                 is_error <- inherits(cond, "error")
[11:02:04.556]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.556]                   NULL)
[11:02:04.556]                 if (is_error) {
[11:02:04.556]                   sessionInformation <- function() {
[11:02:04.556]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.556]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.556]                       search = base::search(), system = base::Sys.info())
[11:02:04.556]                   }
[11:02:04.556]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.556]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.556]                     cond$call), session = sessionInformation(), 
[11:02:04.556]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.556]                   signalCondition(cond)
[11:02:04.556]                 }
[11:02:04.556]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.556]                 "immediateCondition"))) {
[11:02:04.556]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.556]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.556]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.556]                   if (TRUE && !signal) {
[11:02:04.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.556]                     {
[11:02:04.556]                       inherits <- base::inherits
[11:02:04.556]                       invokeRestart <- base::invokeRestart
[11:02:04.556]                       is.null <- base::is.null
[11:02:04.556]                       muffled <- FALSE
[11:02:04.556]                       if (inherits(cond, "message")) {
[11:02:04.556]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.556]                         if (muffled) 
[11:02:04.556]                           invokeRestart("muffleMessage")
[11:02:04.556]                       }
[11:02:04.556]                       else if (inherits(cond, "warning")) {
[11:02:04.556]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.556]                         if (muffled) 
[11:02:04.556]                           invokeRestart("muffleWarning")
[11:02:04.556]                       }
[11:02:04.556]                       else if (inherits(cond, "condition")) {
[11:02:04.556]                         if (!is.null(pattern)) {
[11:02:04.556]                           computeRestarts <- base::computeRestarts
[11:02:04.556]                           grepl <- base::grepl
[11:02:04.556]                           restarts <- computeRestarts(cond)
[11:02:04.556]                           for (restart in restarts) {
[11:02:04.556]                             name <- restart$name
[11:02:04.556]                             if (is.null(name)) 
[11:02:04.556]                               next
[11:02:04.556]                             if (!grepl(pattern, name)) 
[11:02:04.556]                               next
[11:02:04.556]                             invokeRestart(restart)
[11:02:04.556]                             muffled <- TRUE
[11:02:04.556]                             break
[11:02:04.556]                           }
[11:02:04.556]                         }
[11:02:04.556]                       }
[11:02:04.556]                       invisible(muffled)
[11:02:04.556]                     }
[11:02:04.556]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.556]                   }
[11:02:04.556]                 }
[11:02:04.556]                 else {
[11:02:04.556]                   if (TRUE) {
[11:02:04.556]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.556]                     {
[11:02:04.556]                       inherits <- base::inherits
[11:02:04.556]                       invokeRestart <- base::invokeRestart
[11:02:04.556]                       is.null <- base::is.null
[11:02:04.556]                       muffled <- FALSE
[11:02:04.556]                       if (inherits(cond, "message")) {
[11:02:04.556]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.556]                         if (muffled) 
[11:02:04.556]                           invokeRestart("muffleMessage")
[11:02:04.556]                       }
[11:02:04.556]                       else if (inherits(cond, "warning")) {
[11:02:04.556]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.556]                         if (muffled) 
[11:02:04.556]                           invokeRestart("muffleWarning")
[11:02:04.556]                       }
[11:02:04.556]                       else if (inherits(cond, "condition")) {
[11:02:04.556]                         if (!is.null(pattern)) {
[11:02:04.556]                           computeRestarts <- base::computeRestarts
[11:02:04.556]                           grepl <- base::grepl
[11:02:04.556]                           restarts <- computeRestarts(cond)
[11:02:04.556]                           for (restart in restarts) {
[11:02:04.556]                             name <- restart$name
[11:02:04.556]                             if (is.null(name)) 
[11:02:04.556]                               next
[11:02:04.556]                             if (!grepl(pattern, name)) 
[11:02:04.556]                               next
[11:02:04.556]                             invokeRestart(restart)
[11:02:04.556]                             muffled <- TRUE
[11:02:04.556]                             break
[11:02:04.556]                           }
[11:02:04.556]                         }
[11:02:04.556]                       }
[11:02:04.556]                       invisible(muffled)
[11:02:04.556]                     }
[11:02:04.556]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.556]                   }
[11:02:04.556]                 }
[11:02:04.556]             }
[11:02:04.556]         }))
[11:02:04.556]     }, error = function(ex) {
[11:02:04.556]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.556]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.556]                 ...future.rng), started = ...future.startTime, 
[11:02:04.556]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.556]             version = "1.8"), class = "FutureResult")
[11:02:04.556]     }, finally = {
[11:02:04.556]         if (!identical(...future.workdir, getwd())) 
[11:02:04.556]             setwd(...future.workdir)
[11:02:04.556]         {
[11:02:04.556]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.556]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.556]             }
[11:02:04.556]             base::options(...future.oldOptions)
[11:02:04.556]             if (.Platform$OS.type == "windows") {
[11:02:04.556]                 old_names <- names(...future.oldEnvVars)
[11:02:04.556]                 envs <- base::Sys.getenv()
[11:02:04.556]                 names <- names(envs)
[11:02:04.556]                 common <- intersect(names, old_names)
[11:02:04.556]                 added <- setdiff(names, old_names)
[11:02:04.556]                 removed <- setdiff(old_names, names)
[11:02:04.556]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.556]                   envs[common]]
[11:02:04.556]                 NAMES <- toupper(changed)
[11:02:04.556]                 args <- list()
[11:02:04.556]                 for (kk in seq_along(NAMES)) {
[11:02:04.556]                   name <- changed[[kk]]
[11:02:04.556]                   NAME <- NAMES[[kk]]
[11:02:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.556]                     next
[11:02:04.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.556]                 }
[11:02:04.556]                 NAMES <- toupper(added)
[11:02:04.556]                 for (kk in seq_along(NAMES)) {
[11:02:04.556]                   name <- added[[kk]]
[11:02:04.556]                   NAME <- NAMES[[kk]]
[11:02:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.556]                     next
[11:02:04.556]                   args[[name]] <- ""
[11:02:04.556]                 }
[11:02:04.556]                 NAMES <- toupper(removed)
[11:02:04.556]                 for (kk in seq_along(NAMES)) {
[11:02:04.556]                   name <- removed[[kk]]
[11:02:04.556]                   NAME <- NAMES[[kk]]
[11:02:04.556]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.556]                     next
[11:02:04.556]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.556]                 }
[11:02:04.556]                 if (length(args) > 0) 
[11:02:04.556]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.556]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.556]             }
[11:02:04.556]             else {
[11:02:04.556]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.556]             }
[11:02:04.556]             {
[11:02:04.556]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.556]                   0L) {
[11:02:04.556]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.556]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.556]                   base::options(opts)
[11:02:04.556]                 }
[11:02:04.556]                 {
[11:02:04.556]                   {
[11:02:04.556]                     NULL
[11:02:04.556]                     RNGkind("Mersenne-Twister")
[11:02:04.556]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.556]                       inherits = FALSE)
[11:02:04.556]                   }
[11:02:04.556]                   options(future.plan = NULL)
[11:02:04.556]                   if (is.na(NA_character_)) 
[11:02:04.556]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.556]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.556]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.556]                     .init = FALSE)
[11:02:04.556]                 }
[11:02:04.556]             }
[11:02:04.556]         }
[11:02:04.556]     })
[11:02:04.556]     if (TRUE) {
[11:02:04.556]         base::sink(type = "output", split = FALSE)
[11:02:04.556]         if (TRUE) {
[11:02:04.556]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.556]         }
[11:02:04.556]         else {
[11:02:04.556]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.556]         }
[11:02:04.556]         base::close(...future.stdout)
[11:02:04.556]         ...future.stdout <- NULL
[11:02:04.556]     }
[11:02:04.556]     ...future.result$conditions <- ...future.conditions
[11:02:04.556]     ...future.result$finished <- base::Sys.time()
[11:02:04.556]     ...future.result
[11:02:04.556] }
[11:02:04.558] assign_globals() ...
[11:02:04.558] List of 1
[11:02:04.558]  $ ii: int 4
[11:02:04.558]  - attr(*, "where")=List of 1
[11:02:04.558]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.558]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.558]  - attr(*, "resolved")= logi FALSE
[11:02:04.558]  - attr(*, "total_size")= num 35
[11:02:04.560] - copied ‘ii’ to environment
[11:02:04.560] assign_globals() ... done
[11:02:04.560] plan(): Setting new future strategy stack:
[11:02:04.560] List of future strategies:
[11:02:04.560] 1. sequential:
[11:02:04.560]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.560]    - tweaked: FALSE
[11:02:04.560]    - call: NULL
[11:02:04.561] plan(): nbrOfWorkers() = 1
[11:02:04.561] plan(): Setting new future strategy stack:
[11:02:04.561] List of future strategies:
[11:02:04.561] 1. multicore:
[11:02:04.561]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.561]    - tweaked: FALSE
[11:02:04.561]    - call: plan(multicore)
[11:02:04.563] plan(): nbrOfWorkers() = 1
[11:02:04.563] SequentialFuture started (and completed)
 - Resolving 4 multicore futures
*** multicore(..., globals = TRUE) and errors
[11:02:04.565] getGlobalsAndPackages() ...
[11:02:04.565] Searching for globals...
[11:02:04.566] - globals found: [2] ‘{’, ‘stop’
[11:02:04.566] Searching for globals ... DONE
[11:02:04.566] Resolving globals: FALSE
[11:02:04.566] 
[11:02:04.566] 
[11:02:04.566] getGlobalsAndPackages() ... DONE
[11:02:04.567] Packages needed by the future expression (n = 0): <none>
[11:02:04.567] Packages needed by future strategies (n = 0): <none>
[11:02:04.567] {
[11:02:04.567]     {
[11:02:04.567]         {
[11:02:04.567]             ...future.startTime <- base::Sys.time()
[11:02:04.567]             {
[11:02:04.567]                 {
[11:02:04.567]                   {
[11:02:04.567]                     base::local({
[11:02:04.567]                       has_future <- base::requireNamespace("future", 
[11:02:04.567]                         quietly = TRUE)
[11:02:04.567]                       if (has_future) {
[11:02:04.567]                         ns <- base::getNamespace("future")
[11:02:04.567]                         version <- ns[[".package"]][["version"]]
[11:02:04.567]                         if (is.null(version)) 
[11:02:04.567]                           version <- utils::packageVersion("future")
[11:02:04.567]                       }
[11:02:04.567]                       else {
[11:02:04.567]                         version <- NULL
[11:02:04.567]                       }
[11:02:04.567]                       if (!has_future || version < "1.8.0") {
[11:02:04.567]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.567]                           "", base::R.version$version.string), 
[11:02:04.567]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.567]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.567]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.567]                             "release", "version")], collapse = " "), 
[11:02:04.567]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.567]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.567]                           info)
[11:02:04.567]                         info <- base::paste(info, collapse = "; ")
[11:02:04.567]                         if (!has_future) {
[11:02:04.567]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.567]                             info)
[11:02:04.567]                         }
[11:02:04.567]                         else {
[11:02:04.567]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.567]                             info, version)
[11:02:04.567]                         }
[11:02:04.567]                         base::stop(msg)
[11:02:04.567]                       }
[11:02:04.567]                     })
[11:02:04.567]                   }
[11:02:04.567]                   ...future.strategy.old <- future::plan("list")
[11:02:04.567]                   options(future.plan = NULL)
[11:02:04.567]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.567]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.567]                 }
[11:02:04.567]                 ...future.workdir <- getwd()
[11:02:04.567]             }
[11:02:04.567]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.567]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.567]         }
[11:02:04.567]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.567]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.567]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.567]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.567]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.567]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.567]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.567]             base::names(...future.oldOptions))
[11:02:04.567]     }
[11:02:04.567]     if (FALSE) {
[11:02:04.567]     }
[11:02:04.567]     else {
[11:02:04.567]         if (TRUE) {
[11:02:04.567]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.567]                 open = "w")
[11:02:04.567]         }
[11:02:04.567]         else {
[11:02:04.567]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.567]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.567]         }
[11:02:04.567]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.567]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.567]             base::sink(type = "output", split = FALSE)
[11:02:04.567]             base::close(...future.stdout)
[11:02:04.567]         }, add = TRUE)
[11:02:04.567]     }
[11:02:04.567]     ...future.frame <- base::sys.nframe()
[11:02:04.567]     ...future.conditions <- base::list()
[11:02:04.567]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.567]     if (FALSE) {
[11:02:04.567]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.567]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.567]     }
[11:02:04.567]     ...future.result <- base::tryCatch({
[11:02:04.567]         base::withCallingHandlers({
[11:02:04.567]             ...future.value <- base::withVisible(base::local({
[11:02:04.567]                 stop("Whoops!")
[11:02:04.567]                 1
[11:02:04.567]             }))
[11:02:04.567]             future::FutureResult(value = ...future.value$value, 
[11:02:04.567]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.567]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.567]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.567]                     ...future.globalenv.names))
[11:02:04.567]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.567]         }, condition = base::local({
[11:02:04.567]             c <- base::c
[11:02:04.567]             inherits <- base::inherits
[11:02:04.567]             invokeRestart <- base::invokeRestart
[11:02:04.567]             length <- base::length
[11:02:04.567]             list <- base::list
[11:02:04.567]             seq.int <- base::seq.int
[11:02:04.567]             signalCondition <- base::signalCondition
[11:02:04.567]             sys.calls <- base::sys.calls
[11:02:04.567]             `[[` <- base::`[[`
[11:02:04.567]             `+` <- base::`+`
[11:02:04.567]             `<<-` <- base::`<<-`
[11:02:04.567]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.567]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.567]                   3L)]
[11:02:04.567]             }
[11:02:04.567]             function(cond) {
[11:02:04.567]                 is_error <- inherits(cond, "error")
[11:02:04.567]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.567]                   NULL)
[11:02:04.567]                 if (is_error) {
[11:02:04.567]                   sessionInformation <- function() {
[11:02:04.567]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.567]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.567]                       search = base::search(), system = base::Sys.info())
[11:02:04.567]                   }
[11:02:04.567]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.567]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.567]                     cond$call), session = sessionInformation(), 
[11:02:04.567]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.567]                   signalCondition(cond)
[11:02:04.567]                 }
[11:02:04.567]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.567]                 "immediateCondition"))) {
[11:02:04.567]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.567]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.567]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.567]                   if (TRUE && !signal) {
[11:02:04.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.567]                     {
[11:02:04.567]                       inherits <- base::inherits
[11:02:04.567]                       invokeRestart <- base::invokeRestart
[11:02:04.567]                       is.null <- base::is.null
[11:02:04.567]                       muffled <- FALSE
[11:02:04.567]                       if (inherits(cond, "message")) {
[11:02:04.567]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.567]                         if (muffled) 
[11:02:04.567]                           invokeRestart("muffleMessage")
[11:02:04.567]                       }
[11:02:04.567]                       else if (inherits(cond, "warning")) {
[11:02:04.567]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.567]                         if (muffled) 
[11:02:04.567]                           invokeRestart("muffleWarning")
[11:02:04.567]                       }
[11:02:04.567]                       else if (inherits(cond, "condition")) {
[11:02:04.567]                         if (!is.null(pattern)) {
[11:02:04.567]                           computeRestarts <- base::computeRestarts
[11:02:04.567]                           grepl <- base::grepl
[11:02:04.567]                           restarts <- computeRestarts(cond)
[11:02:04.567]                           for (restart in restarts) {
[11:02:04.567]                             name <- restart$name
[11:02:04.567]                             if (is.null(name)) 
[11:02:04.567]                               next
[11:02:04.567]                             if (!grepl(pattern, name)) 
[11:02:04.567]                               next
[11:02:04.567]                             invokeRestart(restart)
[11:02:04.567]                             muffled <- TRUE
[11:02:04.567]                             break
[11:02:04.567]                           }
[11:02:04.567]                         }
[11:02:04.567]                       }
[11:02:04.567]                       invisible(muffled)
[11:02:04.567]                     }
[11:02:04.567]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.567]                   }
[11:02:04.567]                 }
[11:02:04.567]                 else {
[11:02:04.567]                   if (TRUE) {
[11:02:04.567]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.567]                     {
[11:02:04.567]                       inherits <- base::inherits
[11:02:04.567]                       invokeRestart <- base::invokeRestart
[11:02:04.567]                       is.null <- base::is.null
[11:02:04.567]                       muffled <- FALSE
[11:02:04.567]                       if (inherits(cond, "message")) {
[11:02:04.567]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.567]                         if (muffled) 
[11:02:04.567]                           invokeRestart("muffleMessage")
[11:02:04.567]                       }
[11:02:04.567]                       else if (inherits(cond, "warning")) {
[11:02:04.567]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.567]                         if (muffled) 
[11:02:04.567]                           invokeRestart("muffleWarning")
[11:02:04.567]                       }
[11:02:04.567]                       else if (inherits(cond, "condition")) {
[11:02:04.567]                         if (!is.null(pattern)) {
[11:02:04.567]                           computeRestarts <- base::computeRestarts
[11:02:04.567]                           grepl <- base::grepl
[11:02:04.567]                           restarts <- computeRestarts(cond)
[11:02:04.567]                           for (restart in restarts) {
[11:02:04.567]                             name <- restart$name
[11:02:04.567]                             if (is.null(name)) 
[11:02:04.567]                               next
[11:02:04.567]                             if (!grepl(pattern, name)) 
[11:02:04.567]                               next
[11:02:04.567]                             invokeRestart(restart)
[11:02:04.567]                             muffled <- TRUE
[11:02:04.567]                             break
[11:02:04.567]                           }
[11:02:04.567]                         }
[11:02:04.567]                       }
[11:02:04.567]                       invisible(muffled)
[11:02:04.567]                     }
[11:02:04.567]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.567]                   }
[11:02:04.567]                 }
[11:02:04.567]             }
[11:02:04.567]         }))
[11:02:04.567]     }, error = function(ex) {
[11:02:04.567]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.567]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.567]                 ...future.rng), started = ...future.startTime, 
[11:02:04.567]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.567]             version = "1.8"), class = "FutureResult")
[11:02:04.567]     }, finally = {
[11:02:04.567]         if (!identical(...future.workdir, getwd())) 
[11:02:04.567]             setwd(...future.workdir)
[11:02:04.567]         {
[11:02:04.567]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.567]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.567]             }
[11:02:04.567]             base::options(...future.oldOptions)
[11:02:04.567]             if (.Platform$OS.type == "windows") {
[11:02:04.567]                 old_names <- names(...future.oldEnvVars)
[11:02:04.567]                 envs <- base::Sys.getenv()
[11:02:04.567]                 names <- names(envs)
[11:02:04.567]                 common <- intersect(names, old_names)
[11:02:04.567]                 added <- setdiff(names, old_names)
[11:02:04.567]                 removed <- setdiff(old_names, names)
[11:02:04.567]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.567]                   envs[common]]
[11:02:04.567]                 NAMES <- toupper(changed)
[11:02:04.567]                 args <- list()
[11:02:04.567]                 for (kk in seq_along(NAMES)) {
[11:02:04.567]                   name <- changed[[kk]]
[11:02:04.567]                   NAME <- NAMES[[kk]]
[11:02:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.567]                     next
[11:02:04.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.567]                 }
[11:02:04.567]                 NAMES <- toupper(added)
[11:02:04.567]                 for (kk in seq_along(NAMES)) {
[11:02:04.567]                   name <- added[[kk]]
[11:02:04.567]                   NAME <- NAMES[[kk]]
[11:02:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.567]                     next
[11:02:04.567]                   args[[name]] <- ""
[11:02:04.567]                 }
[11:02:04.567]                 NAMES <- toupper(removed)
[11:02:04.567]                 for (kk in seq_along(NAMES)) {
[11:02:04.567]                   name <- removed[[kk]]
[11:02:04.567]                   NAME <- NAMES[[kk]]
[11:02:04.567]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.567]                     next
[11:02:04.567]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.567]                 }
[11:02:04.567]                 if (length(args) > 0) 
[11:02:04.567]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.567]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.567]             }
[11:02:04.567]             else {
[11:02:04.567]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.567]             }
[11:02:04.567]             {
[11:02:04.567]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.567]                   0L) {
[11:02:04.567]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.567]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.567]                   base::options(opts)
[11:02:04.567]                 }
[11:02:04.567]                 {
[11:02:04.567]                   {
[11:02:04.567]                     NULL
[11:02:04.567]                     RNGkind("Mersenne-Twister")
[11:02:04.567]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.567]                       inherits = FALSE)
[11:02:04.567]                   }
[11:02:04.567]                   options(future.plan = NULL)
[11:02:04.567]                   if (is.na(NA_character_)) 
[11:02:04.567]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.567]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.567]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.567]                     .init = FALSE)
[11:02:04.567]                 }
[11:02:04.567]             }
[11:02:04.567]         }
[11:02:04.567]     })
[11:02:04.567]     if (TRUE) {
[11:02:04.567]         base::sink(type = "output", split = FALSE)
[11:02:04.567]         if (TRUE) {
[11:02:04.567]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.567]         }
[11:02:04.567]         else {
[11:02:04.567]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.567]         }
[11:02:04.567]         base::close(...future.stdout)
[11:02:04.567]         ...future.stdout <- NULL
[11:02:04.567]     }
[11:02:04.567]     ...future.result$conditions <- ...future.conditions
[11:02:04.567]     ...future.result$finished <- base::Sys.time()
[11:02:04.567]     ...future.result
[11:02:04.567] }
[11:02:04.569] plan(): Setting new future strategy stack:
[11:02:04.569] List of future strategies:
[11:02:04.569] 1. sequential:
[11:02:04.569]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.569]    - tweaked: FALSE
[11:02:04.569]    - call: NULL
[11:02:04.569] plan(): nbrOfWorkers() = 1
[11:02:04.570] plan(): Setting new future strategy stack:
[11:02:04.570] List of future strategies:
[11:02:04.570] 1. multicore:
[11:02:04.570]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.570]    - tweaked: FALSE
[11:02:04.570]    - call: plan(multicore)
[11:02:04.571] plan(): nbrOfWorkers() = 1
[11:02:04.572] SequentialFuture started (and completed)
[11:02:04.572] signalConditions() ...
[11:02:04.572]  - include = ‘immediateCondition’
[11:02:04.572]  - exclude = 
[11:02:04.572]  - resignal = FALSE
[11:02:04.572]  - Number of conditions: 1
[11:02:04.572] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘simpleError’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:02:04.573] signalConditions() ...
[11:02:04.573]  - include = ‘immediateCondition’
[11:02:04.573]  - exclude = 
[11:02:04.573]  - resignal = FALSE
[11:02:04.573]  - Number of conditions: 1
[11:02:04.573] signalConditions() ... done
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.573] signalConditions() ...
[11:02:04.573]  - include = ‘immediateCondition’
[11:02:04.573]  - exclude = 
[11:02:04.573]  - resignal = FALSE
[11:02:04.574]  - Number of conditions: 1
[11:02:04.574] signalConditions() ... done
[11:02:04.574] Future state: ‘finished’
[11:02:04.574] signalConditions() ...
[11:02:04.574]  - include = ‘condition’
[11:02:04.574]  - exclude = ‘immediateCondition’
[11:02:04.574]  - resignal = TRUE
[11:02:04.574]  - Number of conditions: 1
[11:02:04.574]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.574] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.575] signalConditions() ...
[11:02:04.575]  - include = ‘immediateCondition’
[11:02:04.575]  - exclude = 
[11:02:04.575]  - resignal = FALSE
[11:02:04.575]  - Number of conditions: 1
[11:02:04.575] signalConditions() ... done
[11:02:04.575] Future state: ‘finished’
[11:02:04.575] signalConditions() ...
[11:02:04.575]  - include = ‘condition’
[11:02:04.575]  - exclude = ‘immediateCondition’
[11:02:04.575]  - resignal = TRUE
[11:02:04.575]  - Number of conditions: 1
[11:02:04.576]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.576] signalConditions() ... done
[1] "Error in eval(quote({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in eval(quote({    stop("Whoops!")    1}), new.env()): Whoops!>
[11:02:04.578] getGlobalsAndPackages() ...
[11:02:04.578] Searching for globals...
[11:02:04.579] - globals found: [5] ‘{’, ‘stop’, ‘structure’, ‘list’, ‘c’
[11:02:04.579] Searching for globals ... DONE
[11:02:04.579] Resolving globals: FALSE
[11:02:04.580] 
[11:02:04.580] 
[11:02:04.580] getGlobalsAndPackages() ... DONE
[11:02:04.580] Packages needed by the future expression (n = 0): <none>
[11:02:04.580] Packages needed by future strategies (n = 0): <none>
[11:02:04.581] {
[11:02:04.581]     {
[11:02:04.581]         {
[11:02:04.581]             ...future.startTime <- base::Sys.time()
[11:02:04.581]             {
[11:02:04.581]                 {
[11:02:04.581]                   {
[11:02:04.581]                     base::local({
[11:02:04.581]                       has_future <- base::requireNamespace("future", 
[11:02:04.581]                         quietly = TRUE)
[11:02:04.581]                       if (has_future) {
[11:02:04.581]                         ns <- base::getNamespace("future")
[11:02:04.581]                         version <- ns[[".package"]][["version"]]
[11:02:04.581]                         if (is.null(version)) 
[11:02:04.581]                           version <- utils::packageVersion("future")
[11:02:04.581]                       }
[11:02:04.581]                       else {
[11:02:04.581]                         version <- NULL
[11:02:04.581]                       }
[11:02:04.581]                       if (!has_future || version < "1.8.0") {
[11:02:04.581]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.581]                           "", base::R.version$version.string), 
[11:02:04.581]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.581]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.581]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.581]                             "release", "version")], collapse = " "), 
[11:02:04.581]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.581]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.581]                           info)
[11:02:04.581]                         info <- base::paste(info, collapse = "; ")
[11:02:04.581]                         if (!has_future) {
[11:02:04.581]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.581]                             info)
[11:02:04.581]                         }
[11:02:04.581]                         else {
[11:02:04.581]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.581]                             info, version)
[11:02:04.581]                         }
[11:02:04.581]                         base::stop(msg)
[11:02:04.581]                       }
[11:02:04.581]                     })
[11:02:04.581]                   }
[11:02:04.581]                   ...future.strategy.old <- future::plan("list")
[11:02:04.581]                   options(future.plan = NULL)
[11:02:04.581]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.581]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.581]                 }
[11:02:04.581]                 ...future.workdir <- getwd()
[11:02:04.581]             }
[11:02:04.581]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.581]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.581]         }
[11:02:04.581]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.581]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.581]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.581]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.581]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.581]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.581]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.581]             base::names(...future.oldOptions))
[11:02:04.581]     }
[11:02:04.581]     if (FALSE) {
[11:02:04.581]     }
[11:02:04.581]     else {
[11:02:04.581]         if (TRUE) {
[11:02:04.581]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.581]                 open = "w")
[11:02:04.581]         }
[11:02:04.581]         else {
[11:02:04.581]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.581]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.581]         }
[11:02:04.581]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.581]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.581]             base::sink(type = "output", split = FALSE)
[11:02:04.581]             base::close(...future.stdout)
[11:02:04.581]         }, add = TRUE)
[11:02:04.581]     }
[11:02:04.581]     ...future.frame <- base::sys.nframe()
[11:02:04.581]     ...future.conditions <- base::list()
[11:02:04.581]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.581]     if (FALSE) {
[11:02:04.581]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.581]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.581]     }
[11:02:04.581]     ...future.result <- base::tryCatch({
[11:02:04.581]         base::withCallingHandlers({
[11:02:04.581]             ...future.value <- base::withVisible(base::local({
[11:02:04.581]                 stop(structure(list(message = "boom"), class = c("MyError", 
[11:02:04.581]                   "error", "condition")))
[11:02:04.581]             }))
[11:02:04.581]             future::FutureResult(value = ...future.value$value, 
[11:02:04.581]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.581]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.581]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.581]                     ...future.globalenv.names))
[11:02:04.581]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.581]         }, condition = base::local({
[11:02:04.581]             c <- base::c
[11:02:04.581]             inherits <- base::inherits
[11:02:04.581]             invokeRestart <- base::invokeRestart
[11:02:04.581]             length <- base::length
[11:02:04.581]             list <- base::list
[11:02:04.581]             seq.int <- base::seq.int
[11:02:04.581]             signalCondition <- base::signalCondition
[11:02:04.581]             sys.calls <- base::sys.calls
[11:02:04.581]             `[[` <- base::`[[`
[11:02:04.581]             `+` <- base::`+`
[11:02:04.581]             `<<-` <- base::`<<-`
[11:02:04.581]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.581]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.581]                   3L)]
[11:02:04.581]             }
[11:02:04.581]             function(cond) {
[11:02:04.581]                 is_error <- inherits(cond, "error")
[11:02:04.581]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.581]                   NULL)
[11:02:04.581]                 if (is_error) {
[11:02:04.581]                   sessionInformation <- function() {
[11:02:04.581]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.581]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.581]                       search = base::search(), system = base::Sys.info())
[11:02:04.581]                   }
[11:02:04.581]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.581]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.581]                     cond$call), session = sessionInformation(), 
[11:02:04.581]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.581]                   signalCondition(cond)
[11:02:04.581]                 }
[11:02:04.581]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.581]                 "immediateCondition"))) {
[11:02:04.581]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.581]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.581]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.581]                   if (TRUE && !signal) {
[11:02:04.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.581]                     {
[11:02:04.581]                       inherits <- base::inherits
[11:02:04.581]                       invokeRestart <- base::invokeRestart
[11:02:04.581]                       is.null <- base::is.null
[11:02:04.581]                       muffled <- FALSE
[11:02:04.581]                       if (inherits(cond, "message")) {
[11:02:04.581]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.581]                         if (muffled) 
[11:02:04.581]                           invokeRestart("muffleMessage")
[11:02:04.581]                       }
[11:02:04.581]                       else if (inherits(cond, "warning")) {
[11:02:04.581]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.581]                         if (muffled) 
[11:02:04.581]                           invokeRestart("muffleWarning")
[11:02:04.581]                       }
[11:02:04.581]                       else if (inherits(cond, "condition")) {
[11:02:04.581]                         if (!is.null(pattern)) {
[11:02:04.581]                           computeRestarts <- base::computeRestarts
[11:02:04.581]                           grepl <- base::grepl
[11:02:04.581]                           restarts <- computeRestarts(cond)
[11:02:04.581]                           for (restart in restarts) {
[11:02:04.581]                             name <- restart$name
[11:02:04.581]                             if (is.null(name)) 
[11:02:04.581]                               next
[11:02:04.581]                             if (!grepl(pattern, name)) 
[11:02:04.581]                               next
[11:02:04.581]                             invokeRestart(restart)
[11:02:04.581]                             muffled <- TRUE
[11:02:04.581]                             break
[11:02:04.581]                           }
[11:02:04.581]                         }
[11:02:04.581]                       }
[11:02:04.581]                       invisible(muffled)
[11:02:04.581]                     }
[11:02:04.581]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.581]                   }
[11:02:04.581]                 }
[11:02:04.581]                 else {
[11:02:04.581]                   if (TRUE) {
[11:02:04.581]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.581]                     {
[11:02:04.581]                       inherits <- base::inherits
[11:02:04.581]                       invokeRestart <- base::invokeRestart
[11:02:04.581]                       is.null <- base::is.null
[11:02:04.581]                       muffled <- FALSE
[11:02:04.581]                       if (inherits(cond, "message")) {
[11:02:04.581]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.581]                         if (muffled) 
[11:02:04.581]                           invokeRestart("muffleMessage")
[11:02:04.581]                       }
[11:02:04.581]                       else if (inherits(cond, "warning")) {
[11:02:04.581]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.581]                         if (muffled) 
[11:02:04.581]                           invokeRestart("muffleWarning")
[11:02:04.581]                       }
[11:02:04.581]                       else if (inherits(cond, "condition")) {
[11:02:04.581]                         if (!is.null(pattern)) {
[11:02:04.581]                           computeRestarts <- base::computeRestarts
[11:02:04.581]                           grepl <- base::grepl
[11:02:04.581]                           restarts <- computeRestarts(cond)
[11:02:04.581]                           for (restart in restarts) {
[11:02:04.581]                             name <- restart$name
[11:02:04.581]                             if (is.null(name)) 
[11:02:04.581]                               next
[11:02:04.581]                             if (!grepl(pattern, name)) 
[11:02:04.581]                               next
[11:02:04.581]                             invokeRestart(restart)
[11:02:04.581]                             muffled <- TRUE
[11:02:04.581]                             break
[11:02:04.581]                           }
[11:02:04.581]                         }
[11:02:04.581]                       }
[11:02:04.581]                       invisible(muffled)
[11:02:04.581]                     }
[11:02:04.581]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.581]                   }
[11:02:04.581]                 }
[11:02:04.581]             }
[11:02:04.581]         }))
[11:02:04.581]     }, error = function(ex) {
[11:02:04.581]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.581]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.581]                 ...future.rng), started = ...future.startTime, 
[11:02:04.581]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.581]             version = "1.8"), class = "FutureResult")
[11:02:04.581]     }, finally = {
[11:02:04.581]         if (!identical(...future.workdir, getwd())) 
[11:02:04.581]             setwd(...future.workdir)
[11:02:04.581]         {
[11:02:04.581]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.581]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.581]             }
[11:02:04.581]             base::options(...future.oldOptions)
[11:02:04.581]             if (.Platform$OS.type == "windows") {
[11:02:04.581]                 old_names <- names(...future.oldEnvVars)
[11:02:04.581]                 envs <- base::Sys.getenv()
[11:02:04.581]                 names <- names(envs)
[11:02:04.581]                 common <- intersect(names, old_names)
[11:02:04.581]                 added <- setdiff(names, old_names)
[11:02:04.581]                 removed <- setdiff(old_names, names)
[11:02:04.581]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.581]                   envs[common]]
[11:02:04.581]                 NAMES <- toupper(changed)
[11:02:04.581]                 args <- list()
[11:02:04.581]                 for (kk in seq_along(NAMES)) {
[11:02:04.581]                   name <- changed[[kk]]
[11:02:04.581]                   NAME <- NAMES[[kk]]
[11:02:04.581]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.581]                     next
[11:02:04.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.581]                 }
[11:02:04.581]                 NAMES <- toupper(added)
[11:02:04.581]                 for (kk in seq_along(NAMES)) {
[11:02:04.581]                   name <- added[[kk]]
[11:02:04.581]                   NAME <- NAMES[[kk]]
[11:02:04.581]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.581]                     next
[11:02:04.581]                   args[[name]] <- ""
[11:02:04.581]                 }
[11:02:04.581]                 NAMES <- toupper(removed)
[11:02:04.581]                 for (kk in seq_along(NAMES)) {
[11:02:04.581]                   name <- removed[[kk]]
[11:02:04.581]                   NAME <- NAMES[[kk]]
[11:02:04.581]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.581]                     next
[11:02:04.581]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.581]                 }
[11:02:04.581]                 if (length(args) > 0) 
[11:02:04.581]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.581]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.581]             }
[11:02:04.581]             else {
[11:02:04.581]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.581]             }
[11:02:04.581]             {
[11:02:04.581]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.581]                   0L) {
[11:02:04.581]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.581]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.581]                   base::options(opts)
[11:02:04.581]                 }
[11:02:04.581]                 {
[11:02:04.581]                   {
[11:02:04.581]                     NULL
[11:02:04.581]                     RNGkind("Mersenne-Twister")
[11:02:04.581]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.581]                       inherits = FALSE)
[11:02:04.581]                   }
[11:02:04.581]                   options(future.plan = NULL)
[11:02:04.581]                   if (is.na(NA_character_)) 
[11:02:04.581]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.581]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.581]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.581]                     .init = FALSE)
[11:02:04.581]                 }
[11:02:04.581]             }
[11:02:04.581]         }
[11:02:04.581]     })
[11:02:04.581]     if (TRUE) {
[11:02:04.581]         base::sink(type = "output", split = FALSE)
[11:02:04.581]         if (TRUE) {
[11:02:04.581]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.581]         }
[11:02:04.581]         else {
[11:02:04.581]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.581]         }
[11:02:04.581]         base::close(...future.stdout)
[11:02:04.581]         ...future.stdout <- NULL
[11:02:04.581]     }
[11:02:04.581]     ...future.result$conditions <- ...future.conditions
[11:02:04.581]     ...future.result$finished <- base::Sys.time()
[11:02:04.581]     ...future.result
[11:02:04.581] }
[11:02:04.582] plan(): Setting new future strategy stack:
[11:02:04.582] List of future strategies:
[11:02:04.582] 1. sequential:
[11:02:04.582]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.582]    - tweaked: FALSE
[11:02:04.582]    - call: NULL
[11:02:04.583] plan(): nbrOfWorkers() = 1
[11:02:04.584] plan(): Setting new future strategy stack:
[11:02:04.584] List of future strategies:
[11:02:04.584] 1. multicore:
[11:02:04.584]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.584]    - tweaked: FALSE
[11:02:04.584]    - call: plan(multicore)
[11:02:04.585] plan(): nbrOfWorkers() = 1
[11:02:04.585] SequentialFuture started (and completed)
[11:02:04.585] signalConditions() ...
[11:02:04.586]  - include = ‘immediateCondition’
[11:02:04.586]  - exclude = 
[11:02:04.586]  - resignal = FALSE
[11:02:04.586]  - Number of conditions: 1
[11:02:04.586] signalConditions() ... done
SequentialFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: FALSE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
Resolved: TRUE
Value: 27 bytes of class ‘NULL’
Conditions captured: [n=1] ‘MyError’
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘SequentialFuture’, ‘UniprocessFuture’, ‘Future’, ‘environment’
[11:02:04.586] signalConditions() ...
[11:02:04.586]  - include = ‘immediateCondition’
[11:02:04.586]  - exclude = 
[11:02:04.587]  - resignal = FALSE
[11:02:04.587]  - Number of conditions: 1
[11:02:04.587] signalConditions() ... done
<MyError: boom>
[11:02:04.587] signalConditions() ...
[11:02:04.587]  - include = ‘immediateCondition’
[11:02:04.587]  - exclude = 
[11:02:04.587]  - resignal = FALSE
[11:02:04.587]  - Number of conditions: 1
[11:02:04.587] signalConditions() ... done
[11:02:04.587] Future state: ‘finished’
[11:02:04.587] signalConditions() ...
[11:02:04.587]  - include = ‘condition’
[11:02:04.588]  - exclude = ‘immediateCondition’
[11:02:04.588]  - resignal = TRUE
[11:02:04.588]  - Number of conditions: 1
[11:02:04.588]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[11:02:04.588] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[11:02:04.588] getGlobalsAndPackages() ...
[11:02:04.588] Searching for globals...
[11:02:04.589] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[11:02:04.589] Searching for globals ... DONE
[11:02:04.589] Resolving globals: FALSE
[11:02:04.589] The total size of the 2 globals is 78 bytes (78 bytes)
[11:02:04.590] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 78 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (39 bytes of class ‘numeric’) and ‘b’ (39 bytes of class ‘numeric’)
[11:02:04.590] - globals: [2] ‘a’, ‘b’
[11:02:04.590] 
[11:02:04.590] getGlobalsAndPackages() ... DONE
[11:02:04.590] Packages needed by the future expression (n = 0): <none>
[11:02:04.590] Packages needed by future strategies (n = 0): <none>
[11:02:04.591] {
[11:02:04.591]     {
[11:02:04.591]         {
[11:02:04.591]             ...future.startTime <- base::Sys.time()
[11:02:04.591]             {
[11:02:04.591]                 {
[11:02:04.591]                   {
[11:02:04.591]                     base::local({
[11:02:04.591]                       has_future <- base::requireNamespace("future", 
[11:02:04.591]                         quietly = TRUE)
[11:02:04.591]                       if (has_future) {
[11:02:04.591]                         ns <- base::getNamespace("future")
[11:02:04.591]                         version <- ns[[".package"]][["version"]]
[11:02:04.591]                         if (is.null(version)) 
[11:02:04.591]                           version <- utils::packageVersion("future")
[11:02:04.591]                       }
[11:02:04.591]                       else {
[11:02:04.591]                         version <- NULL
[11:02:04.591]                       }
[11:02:04.591]                       if (!has_future || version < "1.8.0") {
[11:02:04.591]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.591]                           "", base::R.version$version.string), 
[11:02:04.591]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:04.591]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.591]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.591]                             "release", "version")], collapse = " "), 
[11:02:04.591]                           hostname = base::Sys.info()[["nodename"]])
[11:02:04.591]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.591]                           info)
[11:02:04.591]                         info <- base::paste(info, collapse = "; ")
[11:02:04.591]                         if (!has_future) {
[11:02:04.591]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.591]                             info)
[11:02:04.591]                         }
[11:02:04.591]                         else {
[11:02:04.591]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.591]                             info, version)
[11:02:04.591]                         }
[11:02:04.591]                         base::stop(msg)
[11:02:04.591]                       }
[11:02:04.591]                     })
[11:02:04.591]                   }
[11:02:04.591]                   ...future.strategy.old <- future::plan("list")
[11:02:04.591]                   options(future.plan = NULL)
[11:02:04.591]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.591]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.591]                 }
[11:02:04.591]                 ...future.workdir <- getwd()
[11:02:04.591]             }
[11:02:04.591]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.591]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.591]         }
[11:02:04.591]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.591]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.591]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.591]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.591]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.591]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.591]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.591]             base::names(...future.oldOptions))
[11:02:04.591]     }
[11:02:04.591]     if (FALSE) {
[11:02:04.591]     }
[11:02:04.591]     else {
[11:02:04.591]         if (TRUE) {
[11:02:04.591]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.591]                 open = "w")
[11:02:04.591]         }
[11:02:04.591]         else {
[11:02:04.591]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.591]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.591]         }
[11:02:04.591]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.591]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.591]             base::sink(type = "output", split = FALSE)
[11:02:04.591]             base::close(...future.stdout)
[11:02:04.591]         }, add = TRUE)
[11:02:04.591]     }
[11:02:04.591]     ...future.frame <- base::sys.nframe()
[11:02:04.591]     ...future.conditions <- base::list()
[11:02:04.591]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.591]     if (FALSE) {
[11:02:04.591]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.591]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.591]     }
[11:02:04.591]     ...future.result <- base::tryCatch({
[11:02:04.591]         base::withCallingHandlers({
[11:02:04.591]             ...future.value <- base::withVisible(base::local({
[11:02:04.591]                 a * b
[11:02:04.591]             }))
[11:02:04.591]             future::FutureResult(value = ...future.value$value, 
[11:02:04.591]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.591]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.591]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.591]                     ...future.globalenv.names))
[11:02:04.591]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.591]         }, condition = base::local({
[11:02:04.591]             c <- base::c
[11:02:04.591]             inherits <- base::inherits
[11:02:04.591]             invokeRestart <- base::invokeRestart
[11:02:04.591]             length <- base::length
[11:02:04.591]             list <- base::list
[11:02:04.591]             seq.int <- base::seq.int
[11:02:04.591]             signalCondition <- base::signalCondition
[11:02:04.591]             sys.calls <- base::sys.calls
[11:02:04.591]             `[[` <- base::`[[`
[11:02:04.591]             `+` <- base::`+`
[11:02:04.591]             `<<-` <- base::`<<-`
[11:02:04.591]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.591]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.591]                   3L)]
[11:02:04.591]             }
[11:02:04.591]             function(cond) {
[11:02:04.591]                 is_error <- inherits(cond, "error")
[11:02:04.591]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.591]                   NULL)
[11:02:04.591]                 if (is_error) {
[11:02:04.591]                   sessionInformation <- function() {
[11:02:04.591]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.591]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.591]                       search = base::search(), system = base::Sys.info())
[11:02:04.591]                   }
[11:02:04.591]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.591]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.591]                     cond$call), session = sessionInformation(), 
[11:02:04.591]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.591]                   signalCondition(cond)
[11:02:04.591]                 }
[11:02:04.591]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.591]                 "immediateCondition"))) {
[11:02:04.591]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.591]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.591]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.591]                   if (TRUE && !signal) {
[11:02:04.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.591]                     {
[11:02:04.591]                       inherits <- base::inherits
[11:02:04.591]                       invokeRestart <- base::invokeRestart
[11:02:04.591]                       is.null <- base::is.null
[11:02:04.591]                       muffled <- FALSE
[11:02:04.591]                       if (inherits(cond, "message")) {
[11:02:04.591]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.591]                         if (muffled) 
[11:02:04.591]                           invokeRestart("muffleMessage")
[11:02:04.591]                       }
[11:02:04.591]                       else if (inherits(cond, "warning")) {
[11:02:04.591]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.591]                         if (muffled) 
[11:02:04.591]                           invokeRestart("muffleWarning")
[11:02:04.591]                       }
[11:02:04.591]                       else if (inherits(cond, "condition")) {
[11:02:04.591]                         if (!is.null(pattern)) {
[11:02:04.591]                           computeRestarts <- base::computeRestarts
[11:02:04.591]                           grepl <- base::grepl
[11:02:04.591]                           restarts <- computeRestarts(cond)
[11:02:04.591]                           for (restart in restarts) {
[11:02:04.591]                             name <- restart$name
[11:02:04.591]                             if (is.null(name)) 
[11:02:04.591]                               next
[11:02:04.591]                             if (!grepl(pattern, name)) 
[11:02:04.591]                               next
[11:02:04.591]                             invokeRestart(restart)
[11:02:04.591]                             muffled <- TRUE
[11:02:04.591]                             break
[11:02:04.591]                           }
[11:02:04.591]                         }
[11:02:04.591]                       }
[11:02:04.591]                       invisible(muffled)
[11:02:04.591]                     }
[11:02:04.591]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.591]                   }
[11:02:04.591]                 }
[11:02:04.591]                 else {
[11:02:04.591]                   if (TRUE) {
[11:02:04.591]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.591]                     {
[11:02:04.591]                       inherits <- base::inherits
[11:02:04.591]                       invokeRestart <- base::invokeRestart
[11:02:04.591]                       is.null <- base::is.null
[11:02:04.591]                       muffled <- FALSE
[11:02:04.591]                       if (inherits(cond, "message")) {
[11:02:04.591]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.591]                         if (muffled) 
[11:02:04.591]                           invokeRestart("muffleMessage")
[11:02:04.591]                       }
[11:02:04.591]                       else if (inherits(cond, "warning")) {
[11:02:04.591]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.591]                         if (muffled) 
[11:02:04.591]                           invokeRestart("muffleWarning")
[11:02:04.591]                       }
[11:02:04.591]                       else if (inherits(cond, "condition")) {
[11:02:04.591]                         if (!is.null(pattern)) {
[11:02:04.591]                           computeRestarts <- base::computeRestarts
[11:02:04.591]                           grepl <- base::grepl
[11:02:04.591]                           restarts <- computeRestarts(cond)
[11:02:04.591]                           for (restart in restarts) {
[11:02:04.591]                             name <- restart$name
[11:02:04.591]                             if (is.null(name)) 
[11:02:04.591]                               next
[11:02:04.591]                             if (!grepl(pattern, name)) 
[11:02:04.591]                               next
[11:02:04.591]                             invokeRestart(restart)
[11:02:04.591]                             muffled <- TRUE
[11:02:04.591]                             break
[11:02:04.591]                           }
[11:02:04.591]                         }
[11:02:04.591]                       }
[11:02:04.591]                       invisible(muffled)
[11:02:04.591]                     }
[11:02:04.591]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.591]                   }
[11:02:04.591]                 }
[11:02:04.591]             }
[11:02:04.591]         }))
[11:02:04.591]     }, error = function(ex) {
[11:02:04.591]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.591]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.591]                 ...future.rng), started = ...future.startTime, 
[11:02:04.591]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.591]             version = "1.8"), class = "FutureResult")
[11:02:04.591]     }, finally = {
[11:02:04.591]         if (!identical(...future.workdir, getwd())) 
[11:02:04.591]             setwd(...future.workdir)
[11:02:04.591]         {
[11:02:04.591]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.591]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.591]             }
[11:02:04.591]             base::options(...future.oldOptions)
[11:02:04.591]             if (.Platform$OS.type == "windows") {
[11:02:04.591]                 old_names <- names(...future.oldEnvVars)
[11:02:04.591]                 envs <- base::Sys.getenv()
[11:02:04.591]                 names <- names(envs)
[11:02:04.591]                 common <- intersect(names, old_names)
[11:02:04.591]                 added <- setdiff(names, old_names)
[11:02:04.591]                 removed <- setdiff(old_names, names)
[11:02:04.591]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.591]                   envs[common]]
[11:02:04.591]                 NAMES <- toupper(changed)
[11:02:04.591]                 args <- list()
[11:02:04.591]                 for (kk in seq_along(NAMES)) {
[11:02:04.591]                   name <- changed[[kk]]
[11:02:04.591]                   NAME <- NAMES[[kk]]
[11:02:04.591]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.591]                     next
[11:02:04.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.591]                 }
[11:02:04.591]                 NAMES <- toupper(added)
[11:02:04.591]                 for (kk in seq_along(NAMES)) {
[11:02:04.591]                   name <- added[[kk]]
[11:02:04.591]                   NAME <- NAMES[[kk]]
[11:02:04.591]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.591]                     next
[11:02:04.591]                   args[[name]] <- ""
[11:02:04.591]                 }
[11:02:04.591]                 NAMES <- toupper(removed)
[11:02:04.591]                 for (kk in seq_along(NAMES)) {
[11:02:04.591]                   name <- removed[[kk]]
[11:02:04.591]                   NAME <- NAMES[[kk]]
[11:02:04.591]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.591]                     next
[11:02:04.591]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.591]                 }
[11:02:04.591]                 if (length(args) > 0) 
[11:02:04.591]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.591]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.591]             }
[11:02:04.591]             else {
[11:02:04.591]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.591]             }
[11:02:04.591]             {
[11:02:04.591]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.591]                   0L) {
[11:02:04.591]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.591]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.591]                   base::options(opts)
[11:02:04.591]                 }
[11:02:04.591]                 {
[11:02:04.591]                   {
[11:02:04.591]                     NULL
[11:02:04.591]                     RNGkind("Mersenne-Twister")
[11:02:04.591]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:04.591]                       inherits = FALSE)
[11:02:04.591]                   }
[11:02:04.591]                   options(future.plan = NULL)
[11:02:04.591]                   if (is.na(NA_character_)) 
[11:02:04.591]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.591]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.591]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.591]                     .init = FALSE)
[11:02:04.591]                 }
[11:02:04.591]             }
[11:02:04.591]         }
[11:02:04.591]     })
[11:02:04.591]     if (TRUE) {
[11:02:04.591]         base::sink(type = "output", split = FALSE)
[11:02:04.591]         if (TRUE) {
[11:02:04.591]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.591]         }
[11:02:04.591]         else {
[11:02:04.591]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.591]         }
[11:02:04.591]         base::close(...future.stdout)
[11:02:04.591]         ...future.stdout <- NULL
[11:02:04.591]     }
[11:02:04.591]     ...future.result$conditions <- ...future.conditions
[11:02:04.591]     ...future.result$finished <- base::Sys.time()
[11:02:04.591]     ...future.result
[11:02:04.591] }
[11:02:04.592] assign_globals() ...
[11:02:04.592] List of 2
[11:02:04.592]  $ a: num 2
[11:02:04.592]  $ b: num 3
[11:02:04.592]  - attr(*, "where")=List of 2
[11:02:04.592]   ..$ a:<environment: R_EmptyEnv> 
[11:02:04.592]   ..$ b:<environment: R_EmptyEnv> 
[11:02:04.592]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.592]  - attr(*, "resolved")= logi FALSE
[11:02:04.592]  - attr(*, "total_size")= num 78
[11:02:04.595] - copied ‘a’ to environment
[11:02:04.595] - copied ‘b’ to environment
[11:02:04.595] assign_globals() ... done
[11:02:04.595] plan(): Setting new future strategy stack:
[11:02:04.595] List of future strategies:
[11:02:04.595] 1. sequential:
[11:02:04.595]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.595]    - tweaked: FALSE
[11:02:04.595]    - call: NULL
[11:02:04.596] plan(): nbrOfWorkers() = 1
[11:02:04.596] plan(): Setting new future strategy stack:
[11:02:04.596] List of future strategies:
[11:02:04.596] 1. multicore:
[11:02:04.596]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.596]    - tweaked: FALSE
[11:02:04.596]    - call: plan(multicore)
[11:02:04.598] plan(): nbrOfWorkers() = 1
[11:02:04.598] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 1 cores ... DONE
Testing with 2 cores ...
Number of workers: 2
*** multicore(..., globals = FALSE) without globals
[11:02:04.601] getGlobalsAndPackages() ...
[11:02:04.601] Not searching for globals
[11:02:04.601] - globals: [0] <none>
[11:02:04.601] getGlobalsAndPackages() ... DONE
[11:02:04.602] Packages needed by the future expression (n = 0): <none>
[11:02:04.602] Packages needed by future strategies (n = 0): <none>
[11:02:04.603] {
[11:02:04.603]     {
[11:02:04.603]         {
[11:02:04.603]             ...future.startTime <- base::Sys.time()
[11:02:04.603]             {
[11:02:04.603]                 {
[11:02:04.603]                   {
[11:02:04.603]                     {
[11:02:04.603]                       base::local({
[11:02:04.603]                         has_future <- base::requireNamespace("future", 
[11:02:04.603]                           quietly = TRUE)
[11:02:04.603]                         if (has_future) {
[11:02:04.603]                           ns <- base::getNamespace("future")
[11:02:04.603]                           version <- ns[[".package"]][["version"]]
[11:02:04.603]                           if (is.null(version)) 
[11:02:04.603]                             version <- utils::packageVersion("future")
[11:02:04.603]                         }
[11:02:04.603]                         else {
[11:02:04.603]                           version <- NULL
[11:02:04.603]                         }
[11:02:04.603]                         if (!has_future || version < "1.8.0") {
[11:02:04.603]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.603]                             "", base::R.version$version.string), 
[11:02:04.603]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.603]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.603]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.603]                               "release", "version")], collapse = " "), 
[11:02:04.603]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.603]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.603]                             info)
[11:02:04.603]                           info <- base::paste(info, collapse = "; ")
[11:02:04.603]                           if (!has_future) {
[11:02:04.603]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.603]                               info)
[11:02:04.603]                           }
[11:02:04.603]                           else {
[11:02:04.603]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.603]                               info, version)
[11:02:04.603]                           }
[11:02:04.603]                           base::stop(msg)
[11:02:04.603]                         }
[11:02:04.603]                       })
[11:02:04.603]                     }
[11:02:04.603]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.603]                     base::options(mc.cores = 1L)
[11:02:04.603]                   }
[11:02:04.603]                   ...future.strategy.old <- future::plan("list")
[11:02:04.603]                   options(future.plan = NULL)
[11:02:04.603]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.603]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.603]                 }
[11:02:04.603]                 ...future.workdir <- getwd()
[11:02:04.603]             }
[11:02:04.603]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.603]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.603]         }
[11:02:04.603]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.603]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.603]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.603]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.603]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.603]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.603]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.603]             base::names(...future.oldOptions))
[11:02:04.603]     }
[11:02:04.603]     if (FALSE) {
[11:02:04.603]     }
[11:02:04.603]     else {
[11:02:04.603]         if (TRUE) {
[11:02:04.603]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.603]                 open = "w")
[11:02:04.603]         }
[11:02:04.603]         else {
[11:02:04.603]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.603]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.603]         }
[11:02:04.603]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.603]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.603]             base::sink(type = "output", split = FALSE)
[11:02:04.603]             base::close(...future.stdout)
[11:02:04.603]         }, add = TRUE)
[11:02:04.603]     }
[11:02:04.603]     ...future.frame <- base::sys.nframe()
[11:02:04.603]     ...future.conditions <- base::list()
[11:02:04.603]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.603]     if (FALSE) {
[11:02:04.603]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.603]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.603]     }
[11:02:04.603]     ...future.result <- base::tryCatch({
[11:02:04.603]         base::withCallingHandlers({
[11:02:04.603]             ...future.value <- base::withVisible(base::local({
[11:02:04.603]                 withCallingHandlers({
[11:02:04.603]                   {
[11:02:04.603]                     42L
[11:02:04.603]                   }
[11:02:04.603]                 }, immediateCondition = function(cond) {
[11:02:04.603]                   save_rds <- function (object, pathname, ...) 
[11:02:04.603]                   {
[11:02:04.603]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.603]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.603]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.603]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.603]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.603]                         fi_tmp[["mtime"]])
[11:02:04.603]                     }
[11:02:04.603]                     tryCatch({
[11:02:04.603]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.603]                     }, error = function(ex) {
[11:02:04.603]                       msg <- conditionMessage(ex)
[11:02:04.603]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.603]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.603]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.603]                         fi_tmp[["mtime"]], msg)
[11:02:04.603]                       ex$message <- msg
[11:02:04.603]                       stop(ex)
[11:02:04.603]                     })
[11:02:04.603]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.603]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.603]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.603]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.603]                       fi <- file.info(pathname)
[11:02:04.603]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.603]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.603]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.603]                         fi[["size"]], fi[["mtime"]])
[11:02:04.603]                       stop(msg)
[11:02:04.603]                     }
[11:02:04.603]                     invisible(pathname)
[11:02:04.603]                   }
[11:02:04.603]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.603]                     rootPath = tempdir()) 
[11:02:04.603]                   {
[11:02:04.603]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.603]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.603]                       tmpdir = path, fileext = ".rds")
[11:02:04.603]                     save_rds(obj, file)
[11:02:04.603]                   }
[11:02:04.603]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.603]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.603]                   {
[11:02:04.603]                     inherits <- base::inherits
[11:02:04.603]                     invokeRestart <- base::invokeRestart
[11:02:04.603]                     is.null <- base::is.null
[11:02:04.603]                     muffled <- FALSE
[11:02:04.603]                     if (inherits(cond, "message")) {
[11:02:04.603]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.603]                       if (muffled) 
[11:02:04.603]                         invokeRestart("muffleMessage")
[11:02:04.603]                     }
[11:02:04.603]                     else if (inherits(cond, "warning")) {
[11:02:04.603]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.603]                       if (muffled) 
[11:02:04.603]                         invokeRestart("muffleWarning")
[11:02:04.603]                     }
[11:02:04.603]                     else if (inherits(cond, "condition")) {
[11:02:04.603]                       if (!is.null(pattern)) {
[11:02:04.603]                         computeRestarts <- base::computeRestarts
[11:02:04.603]                         grepl <- base::grepl
[11:02:04.603]                         restarts <- computeRestarts(cond)
[11:02:04.603]                         for (restart in restarts) {
[11:02:04.603]                           name <- restart$name
[11:02:04.603]                           if (is.null(name)) 
[11:02:04.603]                             next
[11:02:04.603]                           if (!grepl(pattern, name)) 
[11:02:04.603]                             next
[11:02:04.603]                           invokeRestart(restart)
[11:02:04.603]                           muffled <- TRUE
[11:02:04.603]                           break
[11:02:04.603]                         }
[11:02:04.603]                       }
[11:02:04.603]                     }
[11:02:04.603]                     invisible(muffled)
[11:02:04.603]                   }
[11:02:04.603]                   muffleCondition(cond)
[11:02:04.603]                 })
[11:02:04.603]             }))
[11:02:04.603]             future::FutureResult(value = ...future.value$value, 
[11:02:04.603]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.603]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.603]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.603]                     ...future.globalenv.names))
[11:02:04.603]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.603]         }, condition = base::local({
[11:02:04.603]             c <- base::c
[11:02:04.603]             inherits <- base::inherits
[11:02:04.603]             invokeRestart <- base::invokeRestart
[11:02:04.603]             length <- base::length
[11:02:04.603]             list <- base::list
[11:02:04.603]             seq.int <- base::seq.int
[11:02:04.603]             signalCondition <- base::signalCondition
[11:02:04.603]             sys.calls <- base::sys.calls
[11:02:04.603]             `[[` <- base::`[[`
[11:02:04.603]             `+` <- base::`+`
[11:02:04.603]             `<<-` <- base::`<<-`
[11:02:04.603]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.603]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.603]                   3L)]
[11:02:04.603]             }
[11:02:04.603]             function(cond) {
[11:02:04.603]                 is_error <- inherits(cond, "error")
[11:02:04.603]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.603]                   NULL)
[11:02:04.603]                 if (is_error) {
[11:02:04.603]                   sessionInformation <- function() {
[11:02:04.603]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.603]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.603]                       search = base::search(), system = base::Sys.info())
[11:02:04.603]                   }
[11:02:04.603]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.603]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.603]                     cond$call), session = sessionInformation(), 
[11:02:04.603]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.603]                   signalCondition(cond)
[11:02:04.603]                 }
[11:02:04.603]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.603]                 "immediateCondition"))) {
[11:02:04.603]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.603]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.603]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.603]                   if (TRUE && !signal) {
[11:02:04.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.603]                     {
[11:02:04.603]                       inherits <- base::inherits
[11:02:04.603]                       invokeRestart <- base::invokeRestart
[11:02:04.603]                       is.null <- base::is.null
[11:02:04.603]                       muffled <- FALSE
[11:02:04.603]                       if (inherits(cond, "message")) {
[11:02:04.603]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.603]                         if (muffled) 
[11:02:04.603]                           invokeRestart("muffleMessage")
[11:02:04.603]                       }
[11:02:04.603]                       else if (inherits(cond, "warning")) {
[11:02:04.603]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.603]                         if (muffled) 
[11:02:04.603]                           invokeRestart("muffleWarning")
[11:02:04.603]                       }
[11:02:04.603]                       else if (inherits(cond, "condition")) {
[11:02:04.603]                         if (!is.null(pattern)) {
[11:02:04.603]                           computeRestarts <- base::computeRestarts
[11:02:04.603]                           grepl <- base::grepl
[11:02:04.603]                           restarts <- computeRestarts(cond)
[11:02:04.603]                           for (restart in restarts) {
[11:02:04.603]                             name <- restart$name
[11:02:04.603]                             if (is.null(name)) 
[11:02:04.603]                               next
[11:02:04.603]                             if (!grepl(pattern, name)) 
[11:02:04.603]                               next
[11:02:04.603]                             invokeRestart(restart)
[11:02:04.603]                             muffled <- TRUE
[11:02:04.603]                             break
[11:02:04.603]                           }
[11:02:04.603]                         }
[11:02:04.603]                       }
[11:02:04.603]                       invisible(muffled)
[11:02:04.603]                     }
[11:02:04.603]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.603]                   }
[11:02:04.603]                 }
[11:02:04.603]                 else {
[11:02:04.603]                   if (TRUE) {
[11:02:04.603]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.603]                     {
[11:02:04.603]                       inherits <- base::inherits
[11:02:04.603]                       invokeRestart <- base::invokeRestart
[11:02:04.603]                       is.null <- base::is.null
[11:02:04.603]                       muffled <- FALSE
[11:02:04.603]                       if (inherits(cond, "message")) {
[11:02:04.603]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.603]                         if (muffled) 
[11:02:04.603]                           invokeRestart("muffleMessage")
[11:02:04.603]                       }
[11:02:04.603]                       else if (inherits(cond, "warning")) {
[11:02:04.603]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.603]                         if (muffled) 
[11:02:04.603]                           invokeRestart("muffleWarning")
[11:02:04.603]                       }
[11:02:04.603]                       else if (inherits(cond, "condition")) {
[11:02:04.603]                         if (!is.null(pattern)) {
[11:02:04.603]                           computeRestarts <- base::computeRestarts
[11:02:04.603]                           grepl <- base::grepl
[11:02:04.603]                           restarts <- computeRestarts(cond)
[11:02:04.603]                           for (restart in restarts) {
[11:02:04.603]                             name <- restart$name
[11:02:04.603]                             if (is.null(name)) 
[11:02:04.603]                               next
[11:02:04.603]                             if (!grepl(pattern, name)) 
[11:02:04.603]                               next
[11:02:04.603]                             invokeRestart(restart)
[11:02:04.603]                             muffled <- TRUE
[11:02:04.603]                             break
[11:02:04.603]                           }
[11:02:04.603]                         }
[11:02:04.603]                       }
[11:02:04.603]                       invisible(muffled)
[11:02:04.603]                     }
[11:02:04.603]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.603]                   }
[11:02:04.603]                 }
[11:02:04.603]             }
[11:02:04.603]         }))
[11:02:04.603]     }, error = function(ex) {
[11:02:04.603]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.603]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.603]                 ...future.rng), started = ...future.startTime, 
[11:02:04.603]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.603]             version = "1.8"), class = "FutureResult")
[11:02:04.603]     }, finally = {
[11:02:04.603]         if (!identical(...future.workdir, getwd())) 
[11:02:04.603]             setwd(...future.workdir)
[11:02:04.603]         {
[11:02:04.603]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.603]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.603]             }
[11:02:04.603]             base::options(...future.oldOptions)
[11:02:04.603]             if (.Platform$OS.type == "windows") {
[11:02:04.603]                 old_names <- names(...future.oldEnvVars)
[11:02:04.603]                 envs <- base::Sys.getenv()
[11:02:04.603]                 names <- names(envs)
[11:02:04.603]                 common <- intersect(names, old_names)
[11:02:04.603]                 added <- setdiff(names, old_names)
[11:02:04.603]                 removed <- setdiff(old_names, names)
[11:02:04.603]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.603]                   envs[common]]
[11:02:04.603]                 NAMES <- toupper(changed)
[11:02:04.603]                 args <- list()
[11:02:04.603]                 for (kk in seq_along(NAMES)) {
[11:02:04.603]                   name <- changed[[kk]]
[11:02:04.603]                   NAME <- NAMES[[kk]]
[11:02:04.603]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.603]                     next
[11:02:04.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.603]                 }
[11:02:04.603]                 NAMES <- toupper(added)
[11:02:04.603]                 for (kk in seq_along(NAMES)) {
[11:02:04.603]                   name <- added[[kk]]
[11:02:04.603]                   NAME <- NAMES[[kk]]
[11:02:04.603]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.603]                     next
[11:02:04.603]                   args[[name]] <- ""
[11:02:04.603]                 }
[11:02:04.603]                 NAMES <- toupper(removed)
[11:02:04.603]                 for (kk in seq_along(NAMES)) {
[11:02:04.603]                   name <- removed[[kk]]
[11:02:04.603]                   NAME <- NAMES[[kk]]
[11:02:04.603]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.603]                     next
[11:02:04.603]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.603]                 }
[11:02:04.603]                 if (length(args) > 0) 
[11:02:04.603]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.603]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.603]             }
[11:02:04.603]             else {
[11:02:04.603]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.603]             }
[11:02:04.603]             {
[11:02:04.603]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.603]                   0L) {
[11:02:04.603]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.603]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.603]                   base::options(opts)
[11:02:04.603]                 }
[11:02:04.603]                 {
[11:02:04.603]                   {
[11:02:04.603]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.603]                     NULL
[11:02:04.603]                   }
[11:02:04.603]                   options(future.plan = NULL)
[11:02:04.603]                   if (is.na(NA_character_)) 
[11:02:04.603]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.603]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.603]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.603]                     .init = FALSE)
[11:02:04.603]                 }
[11:02:04.603]             }
[11:02:04.603]         }
[11:02:04.603]     })
[11:02:04.603]     if (TRUE) {
[11:02:04.603]         base::sink(type = "output", split = FALSE)
[11:02:04.603]         if (TRUE) {
[11:02:04.603]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.603]         }
[11:02:04.603]         else {
[11:02:04.603]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.603]         }
[11:02:04.603]         base::close(...future.stdout)
[11:02:04.603]         ...future.stdout <- NULL
[11:02:04.603]     }
[11:02:04.603]     ...future.result$conditions <- ...future.conditions
[11:02:04.603]     ...future.result$finished <- base::Sys.time()
[11:02:04.603]     ...future.result
[11:02:04.603] }
[11:02:04.605] requestCore(): workers = 2
[11:02:04.608] MulticoreFuture started
[11:02:04.608] plan(): Setting new future strategy stack:
[11:02:04.608] List of future strategies:
[11:02:04.608] 1. sequential:
[11:02:04.608]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.608]    - tweaked: FALSE
[11:02:04.608]    - call: NULL
[11:02:04.610] plan(): nbrOfWorkers() = 1
[11:02:04.611] plan(): Setting new future strategy stack:
[11:02:04.612] List of future strategies:
[11:02:04.612] 1. multicore:
[11:02:04.612]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.612]    - tweaked: FALSE
[11:02:04.612]    - call: plan(multicore)
[11:02:04.620] plan(): nbrOfWorkers() = 2
[1] FALSE
[11:02:04.621] result() for MulticoreFuture ...
[11:02:04.628] result() for MulticoreFuture ...
[11:02:04.628] result() for MulticoreFuture ... done
[11:02:04.629] result() for MulticoreFuture ... done
[11:02:04.629] result() for MulticoreFuture ...
[11:02:04.629] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = FALSE) with globals
[11:02:04.631] getGlobalsAndPackages() ...
[11:02:04.631] Not searching for globals
[11:02:04.631] - globals: [0] <none>
[11:02:04.631] getGlobalsAndPackages() ... DONE
[11:02:04.632] Packages needed by the future expression (n = 0): <none>
[11:02:04.632] Packages needed by future strategies (n = 0): <none>
[11:02:04.632] {
[11:02:04.632]     {
[11:02:04.632]         {
[11:02:04.632]             ...future.startTime <- base::Sys.time()
[11:02:04.632]             {
[11:02:04.632]                 {
[11:02:04.632]                   {
[11:02:04.632]                     {
[11:02:04.632]                       base::local({
[11:02:04.632]                         has_future <- base::requireNamespace("future", 
[11:02:04.632]                           quietly = TRUE)
[11:02:04.632]                         if (has_future) {
[11:02:04.632]                           ns <- base::getNamespace("future")
[11:02:04.632]                           version <- ns[[".package"]][["version"]]
[11:02:04.632]                           if (is.null(version)) 
[11:02:04.632]                             version <- utils::packageVersion("future")
[11:02:04.632]                         }
[11:02:04.632]                         else {
[11:02:04.632]                           version <- NULL
[11:02:04.632]                         }
[11:02:04.632]                         if (!has_future || version < "1.8.0") {
[11:02:04.632]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.632]                             "", base::R.version$version.string), 
[11:02:04.632]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.632]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.632]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.632]                               "release", "version")], collapse = " "), 
[11:02:04.632]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.632]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.632]                             info)
[11:02:04.632]                           info <- base::paste(info, collapse = "; ")
[11:02:04.632]                           if (!has_future) {
[11:02:04.632]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.632]                               info)
[11:02:04.632]                           }
[11:02:04.632]                           else {
[11:02:04.632]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.632]                               info, version)
[11:02:04.632]                           }
[11:02:04.632]                           base::stop(msg)
[11:02:04.632]                         }
[11:02:04.632]                       })
[11:02:04.632]                     }
[11:02:04.632]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.632]                     base::options(mc.cores = 1L)
[11:02:04.632]                   }
[11:02:04.632]                   ...future.strategy.old <- future::plan("list")
[11:02:04.632]                   options(future.plan = NULL)
[11:02:04.632]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.632]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.632]                 }
[11:02:04.632]                 ...future.workdir <- getwd()
[11:02:04.632]             }
[11:02:04.632]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.632]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.632]         }
[11:02:04.632]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.632]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.632]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.632]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.632]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.632]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.632]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.632]             base::names(...future.oldOptions))
[11:02:04.632]     }
[11:02:04.632]     if (FALSE) {
[11:02:04.632]     }
[11:02:04.632]     else {
[11:02:04.632]         if (TRUE) {
[11:02:04.632]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.632]                 open = "w")
[11:02:04.632]         }
[11:02:04.632]         else {
[11:02:04.632]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.632]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.632]         }
[11:02:04.632]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.632]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.632]             base::sink(type = "output", split = FALSE)
[11:02:04.632]             base::close(...future.stdout)
[11:02:04.632]         }, add = TRUE)
[11:02:04.632]     }
[11:02:04.632]     ...future.frame <- base::sys.nframe()
[11:02:04.632]     ...future.conditions <- base::list()
[11:02:04.632]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.632]     if (FALSE) {
[11:02:04.632]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.632]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.632]     }
[11:02:04.632]     ...future.result <- base::tryCatch({
[11:02:04.632]         base::withCallingHandlers({
[11:02:04.632]             ...future.value <- base::withVisible(base::local({
[11:02:04.632]                 withCallingHandlers({
[11:02:04.632]                   {
[11:02:04.632]                     b <- 3
[11:02:04.632]                     c <- 2
[11:02:04.632]                     a * b * c
[11:02:04.632]                   }
[11:02:04.632]                 }, immediateCondition = function(cond) {
[11:02:04.632]                   save_rds <- function (object, pathname, ...) 
[11:02:04.632]                   {
[11:02:04.632]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.632]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.632]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.632]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.632]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.632]                         fi_tmp[["mtime"]])
[11:02:04.632]                     }
[11:02:04.632]                     tryCatch({
[11:02:04.632]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.632]                     }, error = function(ex) {
[11:02:04.632]                       msg <- conditionMessage(ex)
[11:02:04.632]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.632]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.632]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.632]                         fi_tmp[["mtime"]], msg)
[11:02:04.632]                       ex$message <- msg
[11:02:04.632]                       stop(ex)
[11:02:04.632]                     })
[11:02:04.632]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.632]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.632]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.632]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.632]                       fi <- file.info(pathname)
[11:02:04.632]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.632]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.632]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.632]                         fi[["size"]], fi[["mtime"]])
[11:02:04.632]                       stop(msg)
[11:02:04.632]                     }
[11:02:04.632]                     invisible(pathname)
[11:02:04.632]                   }
[11:02:04.632]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.632]                     rootPath = tempdir()) 
[11:02:04.632]                   {
[11:02:04.632]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.632]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.632]                       tmpdir = path, fileext = ".rds")
[11:02:04.632]                     save_rds(obj, file)
[11:02:04.632]                   }
[11:02:04.632]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.632]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.632]                   {
[11:02:04.632]                     inherits <- base::inherits
[11:02:04.632]                     invokeRestart <- base::invokeRestart
[11:02:04.632]                     is.null <- base::is.null
[11:02:04.632]                     muffled <- FALSE
[11:02:04.632]                     if (inherits(cond, "message")) {
[11:02:04.632]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.632]                       if (muffled) 
[11:02:04.632]                         invokeRestart("muffleMessage")
[11:02:04.632]                     }
[11:02:04.632]                     else if (inherits(cond, "warning")) {
[11:02:04.632]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.632]                       if (muffled) 
[11:02:04.632]                         invokeRestart("muffleWarning")
[11:02:04.632]                     }
[11:02:04.632]                     else if (inherits(cond, "condition")) {
[11:02:04.632]                       if (!is.null(pattern)) {
[11:02:04.632]                         computeRestarts <- base::computeRestarts
[11:02:04.632]                         grepl <- base::grepl
[11:02:04.632]                         restarts <- computeRestarts(cond)
[11:02:04.632]                         for (restart in restarts) {
[11:02:04.632]                           name <- restart$name
[11:02:04.632]                           if (is.null(name)) 
[11:02:04.632]                             next
[11:02:04.632]                           if (!grepl(pattern, name)) 
[11:02:04.632]                             next
[11:02:04.632]                           invokeRestart(restart)
[11:02:04.632]                           muffled <- TRUE
[11:02:04.632]                           break
[11:02:04.632]                         }
[11:02:04.632]                       }
[11:02:04.632]                     }
[11:02:04.632]                     invisible(muffled)
[11:02:04.632]                   }
[11:02:04.632]                   muffleCondition(cond)
[11:02:04.632]                 })
[11:02:04.632]             }))
[11:02:04.632]             future::FutureResult(value = ...future.value$value, 
[11:02:04.632]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.632]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.632]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.632]                     ...future.globalenv.names))
[11:02:04.632]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.632]         }, condition = base::local({
[11:02:04.632]             c <- base::c
[11:02:04.632]             inherits <- base::inherits
[11:02:04.632]             invokeRestart <- base::invokeRestart
[11:02:04.632]             length <- base::length
[11:02:04.632]             list <- base::list
[11:02:04.632]             seq.int <- base::seq.int
[11:02:04.632]             signalCondition <- base::signalCondition
[11:02:04.632]             sys.calls <- base::sys.calls
[11:02:04.632]             `[[` <- base::`[[`
[11:02:04.632]             `+` <- base::`+`
[11:02:04.632]             `<<-` <- base::`<<-`
[11:02:04.632]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.632]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.632]                   3L)]
[11:02:04.632]             }
[11:02:04.632]             function(cond) {
[11:02:04.632]                 is_error <- inherits(cond, "error")
[11:02:04.632]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.632]                   NULL)
[11:02:04.632]                 if (is_error) {
[11:02:04.632]                   sessionInformation <- function() {
[11:02:04.632]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.632]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.632]                       search = base::search(), system = base::Sys.info())
[11:02:04.632]                   }
[11:02:04.632]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.632]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.632]                     cond$call), session = sessionInformation(), 
[11:02:04.632]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.632]                   signalCondition(cond)
[11:02:04.632]                 }
[11:02:04.632]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.632]                 "immediateCondition"))) {
[11:02:04.632]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.632]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.632]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.632]                   if (TRUE && !signal) {
[11:02:04.632]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.632]                     {
[11:02:04.632]                       inherits <- base::inherits
[11:02:04.632]                       invokeRestart <- base::invokeRestart
[11:02:04.632]                       is.null <- base::is.null
[11:02:04.632]                       muffled <- FALSE
[11:02:04.632]                       if (inherits(cond, "message")) {
[11:02:04.632]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.632]                         if (muffled) 
[11:02:04.632]                           invokeRestart("muffleMessage")
[11:02:04.632]                       }
[11:02:04.632]                       else if (inherits(cond, "warning")) {
[11:02:04.632]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.632]                         if (muffled) 
[11:02:04.632]                           invokeRestart("muffleWarning")
[11:02:04.632]                       }
[11:02:04.632]                       else if (inherits(cond, "condition")) {
[11:02:04.632]                         if (!is.null(pattern)) {
[11:02:04.632]                           computeRestarts <- base::computeRestarts
[11:02:04.632]                           grepl <- base::grepl
[11:02:04.632]                           restarts <- computeRestarts(cond)
[11:02:04.632]                           for (restart in restarts) {
[11:02:04.632]                             name <- restart$name
[11:02:04.632]                             if (is.null(name)) 
[11:02:04.632]                               next
[11:02:04.632]                             if (!grepl(pattern, name)) 
[11:02:04.632]                               next
[11:02:04.632]                             invokeRestart(restart)
[11:02:04.632]                             muffled <- TRUE
[11:02:04.632]                             break
[11:02:04.632]                           }
[11:02:04.632]                         }
[11:02:04.632]                       }
[11:02:04.632]                       invisible(muffled)
[11:02:04.632]                     }
[11:02:04.632]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.632]                   }
[11:02:04.632]                 }
[11:02:04.632]                 else {
[11:02:04.632]                   if (TRUE) {
[11:02:04.632]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.632]                     {
[11:02:04.632]                       inherits <- base::inherits
[11:02:04.632]                       invokeRestart <- base::invokeRestart
[11:02:04.632]                       is.null <- base::is.null
[11:02:04.632]                       muffled <- FALSE
[11:02:04.632]                       if (inherits(cond, "message")) {
[11:02:04.632]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.632]                         if (muffled) 
[11:02:04.632]                           invokeRestart("muffleMessage")
[11:02:04.632]                       }
[11:02:04.632]                       else if (inherits(cond, "warning")) {
[11:02:04.632]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.632]                         if (muffled) 
[11:02:04.632]                           invokeRestart("muffleWarning")
[11:02:04.632]                       }
[11:02:04.632]                       else if (inherits(cond, "condition")) {
[11:02:04.632]                         if (!is.null(pattern)) {
[11:02:04.632]                           computeRestarts <- base::computeRestarts
[11:02:04.632]                           grepl <- base::grepl
[11:02:04.632]                           restarts <- computeRestarts(cond)
[11:02:04.632]                           for (restart in restarts) {
[11:02:04.632]                             name <- restart$name
[11:02:04.632]                             if (is.null(name)) 
[11:02:04.632]                               next
[11:02:04.632]                             if (!grepl(pattern, name)) 
[11:02:04.632]                               next
[11:02:04.632]                             invokeRestart(restart)
[11:02:04.632]                             muffled <- TRUE
[11:02:04.632]                             break
[11:02:04.632]                           }
[11:02:04.632]                         }
[11:02:04.632]                       }
[11:02:04.632]                       invisible(muffled)
[11:02:04.632]                     }
[11:02:04.632]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.632]                   }
[11:02:04.632]                 }
[11:02:04.632]             }
[11:02:04.632]         }))
[11:02:04.632]     }, error = function(ex) {
[11:02:04.632]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.632]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.632]                 ...future.rng), started = ...future.startTime, 
[11:02:04.632]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.632]             version = "1.8"), class = "FutureResult")
[11:02:04.632]     }, finally = {
[11:02:04.632]         if (!identical(...future.workdir, getwd())) 
[11:02:04.632]             setwd(...future.workdir)
[11:02:04.632]         {
[11:02:04.632]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.632]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.632]             }
[11:02:04.632]             base::options(...future.oldOptions)
[11:02:04.632]             if (.Platform$OS.type == "windows") {
[11:02:04.632]                 old_names <- names(...future.oldEnvVars)
[11:02:04.632]                 envs <- base::Sys.getenv()
[11:02:04.632]                 names <- names(envs)
[11:02:04.632]                 common <- intersect(names, old_names)
[11:02:04.632]                 added <- setdiff(names, old_names)
[11:02:04.632]                 removed <- setdiff(old_names, names)
[11:02:04.632]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.632]                   envs[common]]
[11:02:04.632]                 NAMES <- toupper(changed)
[11:02:04.632]                 args <- list()
[11:02:04.632]                 for (kk in seq_along(NAMES)) {
[11:02:04.632]                   name <- changed[[kk]]
[11:02:04.632]                   NAME <- NAMES[[kk]]
[11:02:04.632]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.632]                     next
[11:02:04.632]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.632]                 }
[11:02:04.632]                 NAMES <- toupper(added)
[11:02:04.632]                 for (kk in seq_along(NAMES)) {
[11:02:04.632]                   name <- added[[kk]]
[11:02:04.632]                   NAME <- NAMES[[kk]]
[11:02:04.632]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.632]                     next
[11:02:04.632]                   args[[name]] <- ""
[11:02:04.632]                 }
[11:02:04.632]                 NAMES <- toupper(removed)
[11:02:04.632]                 for (kk in seq_along(NAMES)) {
[11:02:04.632]                   name <- removed[[kk]]
[11:02:04.632]                   NAME <- NAMES[[kk]]
[11:02:04.632]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.632]                     next
[11:02:04.632]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.632]                 }
[11:02:04.632]                 if (length(args) > 0) 
[11:02:04.632]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.632]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.632]             }
[11:02:04.632]             else {
[11:02:04.632]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.632]             }
[11:02:04.632]             {
[11:02:04.632]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.632]                   0L) {
[11:02:04.632]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.632]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.632]                   base::options(opts)
[11:02:04.632]                 }
[11:02:04.632]                 {
[11:02:04.632]                   {
[11:02:04.632]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.632]                     NULL
[11:02:04.632]                   }
[11:02:04.632]                   options(future.plan = NULL)
[11:02:04.632]                   if (is.na(NA_character_)) 
[11:02:04.632]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.632]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.632]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.632]                     .init = FALSE)
[11:02:04.632]                 }
[11:02:04.632]             }
[11:02:04.632]         }
[11:02:04.632]     })
[11:02:04.632]     if (TRUE) {
[11:02:04.632]         base::sink(type = "output", split = FALSE)
[11:02:04.632]         if (TRUE) {
[11:02:04.632]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.632]         }
[11:02:04.632]         else {
[11:02:04.632]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.632]         }
[11:02:04.632]         base::close(...future.stdout)
[11:02:04.632]         ...future.stdout <- NULL
[11:02:04.632]     }
[11:02:04.632]     ...future.result$conditions <- ...future.conditions
[11:02:04.632]     ...future.result$finished <- base::Sys.time()
[11:02:04.632]     ...future.result
[11:02:04.632] }
[11:02:04.635] requestCore(): workers = 2
[11:02:04.637] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.638] plan(): Setting new future strategy stack:
[11:02:04.638] List of future strategies:
[11:02:04.638] 1. sequential:
[11:02:04.638]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.638]    - tweaked: FALSE
[11:02:04.638]    - call: NULL
[11:02:04.639] plan(): nbrOfWorkers() = 1
[11:02:04.641] plan(): Setting new future strategy stack:
[11:02:04.641] List of future strategies:
[11:02:04.641] 1. multicore:
[11:02:04.641]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.641]    - tweaked: FALSE
[11:02:04.641]    - call: plan(multicore)
[11:02:04.644] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.645] result() for MulticoreFuture ...
[11:02:04.646] result() for MulticoreFuture ...
[11:02:04.646] result() for MulticoreFuture ... done
[11:02:04.646] result() for MulticoreFuture ... done
[11:02:04.647] result() for MulticoreFuture ...
[11:02:04.647] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = FALSE) with globals and blocking
 - Creating multicore future #1 ...
[11:02:04.650] getGlobalsAndPackages() ...
[11:02:04.650] Not searching for globals
[11:02:04.650] - globals: [0] <none>
[11:02:04.650] getGlobalsAndPackages() ... DONE
[11:02:04.651] Packages needed by the future expression (n = 0): <none>
[11:02:04.651] Packages needed by future strategies (n = 0): <none>
[11:02:04.651] {
[11:02:04.651]     {
[11:02:04.651]         {
[11:02:04.651]             ...future.startTime <- base::Sys.time()
[11:02:04.651]             {
[11:02:04.651]                 {
[11:02:04.651]                   {
[11:02:04.651]                     {
[11:02:04.651]                       base::local({
[11:02:04.651]                         has_future <- base::requireNamespace("future", 
[11:02:04.651]                           quietly = TRUE)
[11:02:04.651]                         if (has_future) {
[11:02:04.651]                           ns <- base::getNamespace("future")
[11:02:04.651]                           version <- ns[[".package"]][["version"]]
[11:02:04.651]                           if (is.null(version)) 
[11:02:04.651]                             version <- utils::packageVersion("future")
[11:02:04.651]                         }
[11:02:04.651]                         else {
[11:02:04.651]                           version <- NULL
[11:02:04.651]                         }
[11:02:04.651]                         if (!has_future || version < "1.8.0") {
[11:02:04.651]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.651]                             "", base::R.version$version.string), 
[11:02:04.651]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.651]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.651]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.651]                               "release", "version")], collapse = " "), 
[11:02:04.651]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.651]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.651]                             info)
[11:02:04.651]                           info <- base::paste(info, collapse = "; ")
[11:02:04.651]                           if (!has_future) {
[11:02:04.651]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.651]                               info)
[11:02:04.651]                           }
[11:02:04.651]                           else {
[11:02:04.651]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.651]                               info, version)
[11:02:04.651]                           }
[11:02:04.651]                           base::stop(msg)
[11:02:04.651]                         }
[11:02:04.651]                       })
[11:02:04.651]                     }
[11:02:04.651]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.651]                     base::options(mc.cores = 1L)
[11:02:04.651]                   }
[11:02:04.651]                   ...future.strategy.old <- future::plan("list")
[11:02:04.651]                   options(future.plan = NULL)
[11:02:04.651]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.651]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.651]                 }
[11:02:04.651]                 ...future.workdir <- getwd()
[11:02:04.651]             }
[11:02:04.651]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.651]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.651]         }
[11:02:04.651]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.651]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.651]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.651]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.651]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.651]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.651]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.651]             base::names(...future.oldOptions))
[11:02:04.651]     }
[11:02:04.651]     if (FALSE) {
[11:02:04.651]     }
[11:02:04.651]     else {
[11:02:04.651]         if (TRUE) {
[11:02:04.651]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.651]                 open = "w")
[11:02:04.651]         }
[11:02:04.651]         else {
[11:02:04.651]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.651]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.651]         }
[11:02:04.651]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.651]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.651]             base::sink(type = "output", split = FALSE)
[11:02:04.651]             base::close(...future.stdout)
[11:02:04.651]         }, add = TRUE)
[11:02:04.651]     }
[11:02:04.651]     ...future.frame <- base::sys.nframe()
[11:02:04.651]     ...future.conditions <- base::list()
[11:02:04.651]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.651]     if (FALSE) {
[11:02:04.651]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.651]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.651]     }
[11:02:04.651]     ...future.result <- base::tryCatch({
[11:02:04.651]         base::withCallingHandlers({
[11:02:04.651]             ...future.value <- base::withVisible(base::local({
[11:02:04.651]                 withCallingHandlers({
[11:02:04.651]                   {
[11:02:04.651]                     ii
[11:02:04.651]                   }
[11:02:04.651]                 }, immediateCondition = function(cond) {
[11:02:04.651]                   save_rds <- function (object, pathname, ...) 
[11:02:04.651]                   {
[11:02:04.651]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.651]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.651]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.651]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.651]                         fi_tmp[["mtime"]])
[11:02:04.651]                     }
[11:02:04.651]                     tryCatch({
[11:02:04.651]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.651]                     }, error = function(ex) {
[11:02:04.651]                       msg <- conditionMessage(ex)
[11:02:04.651]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.651]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.651]                         fi_tmp[["mtime"]], msg)
[11:02:04.651]                       ex$message <- msg
[11:02:04.651]                       stop(ex)
[11:02:04.651]                     })
[11:02:04.651]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.651]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.651]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.651]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.651]                       fi <- file.info(pathname)
[11:02:04.651]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.651]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.651]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.651]                         fi[["size"]], fi[["mtime"]])
[11:02:04.651]                       stop(msg)
[11:02:04.651]                     }
[11:02:04.651]                     invisible(pathname)
[11:02:04.651]                   }
[11:02:04.651]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.651]                     rootPath = tempdir()) 
[11:02:04.651]                   {
[11:02:04.651]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.651]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.651]                       tmpdir = path, fileext = ".rds")
[11:02:04.651]                     save_rds(obj, file)
[11:02:04.651]                   }
[11:02:04.651]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.651]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.651]                   {
[11:02:04.651]                     inherits <- base::inherits
[11:02:04.651]                     invokeRestart <- base::invokeRestart
[11:02:04.651]                     is.null <- base::is.null
[11:02:04.651]                     muffled <- FALSE
[11:02:04.651]                     if (inherits(cond, "message")) {
[11:02:04.651]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.651]                       if (muffled) 
[11:02:04.651]                         invokeRestart("muffleMessage")
[11:02:04.651]                     }
[11:02:04.651]                     else if (inherits(cond, "warning")) {
[11:02:04.651]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.651]                       if (muffled) 
[11:02:04.651]                         invokeRestart("muffleWarning")
[11:02:04.651]                     }
[11:02:04.651]                     else if (inherits(cond, "condition")) {
[11:02:04.651]                       if (!is.null(pattern)) {
[11:02:04.651]                         computeRestarts <- base::computeRestarts
[11:02:04.651]                         grepl <- base::grepl
[11:02:04.651]                         restarts <- computeRestarts(cond)
[11:02:04.651]                         for (restart in restarts) {
[11:02:04.651]                           name <- restart$name
[11:02:04.651]                           if (is.null(name)) 
[11:02:04.651]                             next
[11:02:04.651]                           if (!grepl(pattern, name)) 
[11:02:04.651]                             next
[11:02:04.651]                           invokeRestart(restart)
[11:02:04.651]                           muffled <- TRUE
[11:02:04.651]                           break
[11:02:04.651]                         }
[11:02:04.651]                       }
[11:02:04.651]                     }
[11:02:04.651]                     invisible(muffled)
[11:02:04.651]                   }
[11:02:04.651]                   muffleCondition(cond)
[11:02:04.651]                 })
[11:02:04.651]             }))
[11:02:04.651]             future::FutureResult(value = ...future.value$value, 
[11:02:04.651]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.651]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.651]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.651]                     ...future.globalenv.names))
[11:02:04.651]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.651]         }, condition = base::local({
[11:02:04.651]             c <- base::c
[11:02:04.651]             inherits <- base::inherits
[11:02:04.651]             invokeRestart <- base::invokeRestart
[11:02:04.651]             length <- base::length
[11:02:04.651]             list <- base::list
[11:02:04.651]             seq.int <- base::seq.int
[11:02:04.651]             signalCondition <- base::signalCondition
[11:02:04.651]             sys.calls <- base::sys.calls
[11:02:04.651]             `[[` <- base::`[[`
[11:02:04.651]             `+` <- base::`+`
[11:02:04.651]             `<<-` <- base::`<<-`
[11:02:04.651]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.651]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.651]                   3L)]
[11:02:04.651]             }
[11:02:04.651]             function(cond) {
[11:02:04.651]                 is_error <- inherits(cond, "error")
[11:02:04.651]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.651]                   NULL)
[11:02:04.651]                 if (is_error) {
[11:02:04.651]                   sessionInformation <- function() {
[11:02:04.651]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.651]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.651]                       search = base::search(), system = base::Sys.info())
[11:02:04.651]                   }
[11:02:04.651]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.651]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.651]                     cond$call), session = sessionInformation(), 
[11:02:04.651]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.651]                   signalCondition(cond)
[11:02:04.651]                 }
[11:02:04.651]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.651]                 "immediateCondition"))) {
[11:02:04.651]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.651]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.651]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.651]                   if (TRUE && !signal) {
[11:02:04.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.651]                     {
[11:02:04.651]                       inherits <- base::inherits
[11:02:04.651]                       invokeRestart <- base::invokeRestart
[11:02:04.651]                       is.null <- base::is.null
[11:02:04.651]                       muffled <- FALSE
[11:02:04.651]                       if (inherits(cond, "message")) {
[11:02:04.651]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.651]                         if (muffled) 
[11:02:04.651]                           invokeRestart("muffleMessage")
[11:02:04.651]                       }
[11:02:04.651]                       else if (inherits(cond, "warning")) {
[11:02:04.651]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.651]                         if (muffled) 
[11:02:04.651]                           invokeRestart("muffleWarning")
[11:02:04.651]                       }
[11:02:04.651]                       else if (inherits(cond, "condition")) {
[11:02:04.651]                         if (!is.null(pattern)) {
[11:02:04.651]                           computeRestarts <- base::computeRestarts
[11:02:04.651]                           grepl <- base::grepl
[11:02:04.651]                           restarts <- computeRestarts(cond)
[11:02:04.651]                           for (restart in restarts) {
[11:02:04.651]                             name <- restart$name
[11:02:04.651]                             if (is.null(name)) 
[11:02:04.651]                               next
[11:02:04.651]                             if (!grepl(pattern, name)) 
[11:02:04.651]                               next
[11:02:04.651]                             invokeRestart(restart)
[11:02:04.651]                             muffled <- TRUE
[11:02:04.651]                             break
[11:02:04.651]                           }
[11:02:04.651]                         }
[11:02:04.651]                       }
[11:02:04.651]                       invisible(muffled)
[11:02:04.651]                     }
[11:02:04.651]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.651]                   }
[11:02:04.651]                 }
[11:02:04.651]                 else {
[11:02:04.651]                   if (TRUE) {
[11:02:04.651]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.651]                     {
[11:02:04.651]                       inherits <- base::inherits
[11:02:04.651]                       invokeRestart <- base::invokeRestart
[11:02:04.651]                       is.null <- base::is.null
[11:02:04.651]                       muffled <- FALSE
[11:02:04.651]                       if (inherits(cond, "message")) {
[11:02:04.651]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.651]                         if (muffled) 
[11:02:04.651]                           invokeRestart("muffleMessage")
[11:02:04.651]                       }
[11:02:04.651]                       else if (inherits(cond, "warning")) {
[11:02:04.651]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.651]                         if (muffled) 
[11:02:04.651]                           invokeRestart("muffleWarning")
[11:02:04.651]                       }
[11:02:04.651]                       else if (inherits(cond, "condition")) {
[11:02:04.651]                         if (!is.null(pattern)) {
[11:02:04.651]                           computeRestarts <- base::computeRestarts
[11:02:04.651]                           grepl <- base::grepl
[11:02:04.651]                           restarts <- computeRestarts(cond)
[11:02:04.651]                           for (restart in restarts) {
[11:02:04.651]                             name <- restart$name
[11:02:04.651]                             if (is.null(name)) 
[11:02:04.651]                               next
[11:02:04.651]                             if (!grepl(pattern, name)) 
[11:02:04.651]                               next
[11:02:04.651]                             invokeRestart(restart)
[11:02:04.651]                             muffled <- TRUE
[11:02:04.651]                             break
[11:02:04.651]                           }
[11:02:04.651]                         }
[11:02:04.651]                       }
[11:02:04.651]                       invisible(muffled)
[11:02:04.651]                     }
[11:02:04.651]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.651]                   }
[11:02:04.651]                 }
[11:02:04.651]             }
[11:02:04.651]         }))
[11:02:04.651]     }, error = function(ex) {
[11:02:04.651]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.651]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.651]                 ...future.rng), started = ...future.startTime, 
[11:02:04.651]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.651]             version = "1.8"), class = "FutureResult")
[11:02:04.651]     }, finally = {
[11:02:04.651]         if (!identical(...future.workdir, getwd())) 
[11:02:04.651]             setwd(...future.workdir)
[11:02:04.651]         {
[11:02:04.651]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.651]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.651]             }
[11:02:04.651]             base::options(...future.oldOptions)
[11:02:04.651]             if (.Platform$OS.type == "windows") {
[11:02:04.651]                 old_names <- names(...future.oldEnvVars)
[11:02:04.651]                 envs <- base::Sys.getenv()
[11:02:04.651]                 names <- names(envs)
[11:02:04.651]                 common <- intersect(names, old_names)
[11:02:04.651]                 added <- setdiff(names, old_names)
[11:02:04.651]                 removed <- setdiff(old_names, names)
[11:02:04.651]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.651]                   envs[common]]
[11:02:04.651]                 NAMES <- toupper(changed)
[11:02:04.651]                 args <- list()
[11:02:04.651]                 for (kk in seq_along(NAMES)) {
[11:02:04.651]                   name <- changed[[kk]]
[11:02:04.651]                   NAME <- NAMES[[kk]]
[11:02:04.651]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.651]                     next
[11:02:04.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.651]                 }
[11:02:04.651]                 NAMES <- toupper(added)
[11:02:04.651]                 for (kk in seq_along(NAMES)) {
[11:02:04.651]                   name <- added[[kk]]
[11:02:04.651]                   NAME <- NAMES[[kk]]
[11:02:04.651]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.651]                     next
[11:02:04.651]                   args[[name]] <- ""
[11:02:04.651]                 }
[11:02:04.651]                 NAMES <- toupper(removed)
[11:02:04.651]                 for (kk in seq_along(NAMES)) {
[11:02:04.651]                   name <- removed[[kk]]
[11:02:04.651]                   NAME <- NAMES[[kk]]
[11:02:04.651]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.651]                     next
[11:02:04.651]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.651]                 }
[11:02:04.651]                 if (length(args) > 0) 
[11:02:04.651]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.651]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.651]             }
[11:02:04.651]             else {
[11:02:04.651]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.651]             }
[11:02:04.651]             {
[11:02:04.651]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.651]                   0L) {
[11:02:04.651]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.651]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.651]                   base::options(opts)
[11:02:04.651]                 }
[11:02:04.651]                 {
[11:02:04.651]                   {
[11:02:04.651]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.651]                     NULL
[11:02:04.651]                   }
[11:02:04.651]                   options(future.plan = NULL)
[11:02:04.651]                   if (is.na(NA_character_)) 
[11:02:04.651]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.651]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.651]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.651]                     .init = FALSE)
[11:02:04.651]                 }
[11:02:04.651]             }
[11:02:04.651]         }
[11:02:04.651]     })
[11:02:04.651]     if (TRUE) {
[11:02:04.651]         base::sink(type = "output", split = FALSE)
[11:02:04.651]         if (TRUE) {
[11:02:04.651]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.651]         }
[11:02:04.651]         else {
[11:02:04.651]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.651]         }
[11:02:04.651]         base::close(...future.stdout)
[11:02:04.651]         ...future.stdout <- NULL
[11:02:04.651]     }
[11:02:04.651]     ...future.result$conditions <- ...future.conditions
[11:02:04.651]     ...future.result$finished <- base::Sys.time()
[11:02:04.651]     ...future.result
[11:02:04.651] }
[11:02:04.654] requestCore(): workers = 2
[11:02:04.656] MulticoreFuture started
 - Creating multicore future #2 ...
[11:02:04.657] plan(): Setting new future strategy stack:
[11:02:04.657] List of future strategies:
[11:02:04.657] 1. sequential:
[11:02:04.657]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.657]    - tweaked: FALSE
[11:02:04.657]    - call: NULL
[11:02:04.658] plan(): nbrOfWorkers() = 1
[11:02:04.659] getGlobalsAndPackages() ...
[11:02:04.659] Not searching for globals
[11:02:04.660] - globals: [0] <none>
[11:02:04.660] plan(): Setting new future strategy stack:
[11:02:04.660] getGlobalsAndPackages() ... DONE
[11:02:04.660] List of future strategies:
[11:02:04.660] 1. multicore:
[11:02:04.660]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.660]    - tweaked: FALSE
[11:02:04.660]    - call: plan(multicore)
[11:02:04.661] Packages needed by the future expression (n = 0): <none>
[11:02:04.661] Packages needed by future strategies (n = 0): <none>
[11:02:04.662] plan(): nbrOfWorkers() = 2
[11:02:04.661] {
[11:02:04.661]     {
[11:02:04.661]         {
[11:02:04.661]             ...future.startTime <- base::Sys.time()
[11:02:04.661]             {
[11:02:04.661]                 {
[11:02:04.661]                   {
[11:02:04.661]                     {
[11:02:04.661]                       base::local({
[11:02:04.661]                         has_future <- base::requireNamespace("future", 
[11:02:04.661]                           quietly = TRUE)
[11:02:04.661]                         if (has_future) {
[11:02:04.661]                           ns <- base::getNamespace("future")
[11:02:04.661]                           version <- ns[[".package"]][["version"]]
[11:02:04.661]                           if (is.null(version)) 
[11:02:04.661]                             version <- utils::packageVersion("future")
[11:02:04.661]                         }
[11:02:04.661]                         else {
[11:02:04.661]                           version <- NULL
[11:02:04.661]                         }
[11:02:04.661]                         if (!has_future || version < "1.8.0") {
[11:02:04.661]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.661]                             "", base::R.version$version.string), 
[11:02:04.661]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.661]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.661]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.661]                               "release", "version")], collapse = " "), 
[11:02:04.661]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.661]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.661]                             info)
[11:02:04.661]                           info <- base::paste(info, collapse = "; ")
[11:02:04.661]                           if (!has_future) {
[11:02:04.661]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.661]                               info)
[11:02:04.661]                           }
[11:02:04.661]                           else {
[11:02:04.661]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.661]                               info, version)
[11:02:04.661]                           }
[11:02:04.661]                           base::stop(msg)
[11:02:04.661]                         }
[11:02:04.661]                       })
[11:02:04.661]                     }
[11:02:04.661]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.661]                     base::options(mc.cores = 1L)
[11:02:04.661]                   }
[11:02:04.661]                   ...future.strategy.old <- future::plan("list")
[11:02:04.661]                   options(future.plan = NULL)
[11:02:04.661]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.661]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.661]                 }
[11:02:04.661]                 ...future.workdir <- getwd()
[11:02:04.661]             }
[11:02:04.661]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.661]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.661]         }
[11:02:04.661]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.661]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.661]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.661]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.661]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.661]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.661]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.661]             base::names(...future.oldOptions))
[11:02:04.661]     }
[11:02:04.661]     if (FALSE) {
[11:02:04.661]     }
[11:02:04.661]     else {
[11:02:04.661]         if (TRUE) {
[11:02:04.661]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.661]                 open = "w")
[11:02:04.661]         }
[11:02:04.661]         else {
[11:02:04.661]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.661]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.661]         }
[11:02:04.661]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.661]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.661]             base::sink(type = "output", split = FALSE)
[11:02:04.661]             base::close(...future.stdout)
[11:02:04.661]         }, add = TRUE)
[11:02:04.661]     }
[11:02:04.661]     ...future.frame <- base::sys.nframe()
[11:02:04.661]     ...future.conditions <- base::list()
[11:02:04.661]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.661]     if (FALSE) {
[11:02:04.661]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.661]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.661]     }
[11:02:04.661]     ...future.result <- base::tryCatch({
[11:02:04.661]         base::withCallingHandlers({
[11:02:04.661]             ...future.value <- base::withVisible(base::local({
[11:02:04.661]                 withCallingHandlers({
[11:02:04.661]                   {
[11:02:04.661]                     ii
[11:02:04.661]                   }
[11:02:04.661]                 }, immediateCondition = function(cond) {
[11:02:04.661]                   save_rds <- function (object, pathname, ...) 
[11:02:04.661]                   {
[11:02:04.661]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.661]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.661]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.661]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.661]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.661]                         fi_tmp[["mtime"]])
[11:02:04.661]                     }
[11:02:04.661]                     tryCatch({
[11:02:04.661]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.661]                     }, error = function(ex) {
[11:02:04.661]                       msg <- conditionMessage(ex)
[11:02:04.661]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.661]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.661]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.661]                         fi_tmp[["mtime"]], msg)
[11:02:04.661]                       ex$message <- msg
[11:02:04.661]                       stop(ex)
[11:02:04.661]                     })
[11:02:04.661]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.661]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.661]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.661]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.661]                       fi <- file.info(pathname)
[11:02:04.661]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.661]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.661]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.661]                         fi[["size"]], fi[["mtime"]])
[11:02:04.661]                       stop(msg)
[11:02:04.661]                     }
[11:02:04.661]                     invisible(pathname)
[11:02:04.661]                   }
[11:02:04.661]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.661]                     rootPath = tempdir()) 
[11:02:04.661]                   {
[11:02:04.661]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.661]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.661]                       tmpdir = path, fileext = ".rds")
[11:02:04.661]                     save_rds(obj, file)
[11:02:04.661]                   }
[11:02:04.661]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.661]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.661]                   {
[11:02:04.661]                     inherits <- base::inherits
[11:02:04.661]                     invokeRestart <- base::invokeRestart
[11:02:04.661]                     is.null <- base::is.null
[11:02:04.661]                     muffled <- FALSE
[11:02:04.661]                     if (inherits(cond, "message")) {
[11:02:04.661]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.661]                       if (muffled) 
[11:02:04.661]                         invokeRestart("muffleMessage")
[11:02:04.661]                     }
[11:02:04.661]                     else if (inherits(cond, "warning")) {
[11:02:04.661]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.661]                       if (muffled) 
[11:02:04.661]                         invokeRestart("muffleWarning")
[11:02:04.661]                     }
[11:02:04.661]                     else if (inherits(cond, "condition")) {
[11:02:04.661]                       if (!is.null(pattern)) {
[11:02:04.661]                         computeRestarts <- base::computeRestarts
[11:02:04.661]                         grepl <- base::grepl
[11:02:04.661]                         restarts <- computeRestarts(cond)
[11:02:04.661]                         for (restart in restarts) {
[11:02:04.661]                           name <- restart$name
[11:02:04.661]                           if (is.null(name)) 
[11:02:04.661]                             next
[11:02:04.661]                           if (!grepl(pattern, name)) 
[11:02:04.661]                             next
[11:02:04.661]                           invokeRestart(restart)
[11:02:04.661]                           muffled <- TRUE
[11:02:04.661]                           break
[11:02:04.661]                         }
[11:02:04.661]                       }
[11:02:04.661]                     }
[11:02:04.661]                     invisible(muffled)
[11:02:04.661]                   }
[11:02:04.661]                   muffleCondition(cond)
[11:02:04.661]                 })
[11:02:04.661]             }))
[11:02:04.661]             future::FutureResult(value = ...future.value$value, 
[11:02:04.661]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.661]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.661]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.661]                     ...future.globalenv.names))
[11:02:04.661]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.661]         }, condition = base::local({
[11:02:04.661]             c <- base::c
[11:02:04.661]             inherits <- base::inherits
[11:02:04.661]             invokeRestart <- base::invokeRestart
[11:02:04.661]             length <- base::length
[11:02:04.661]             list <- base::list
[11:02:04.661]             seq.int <- base::seq.int
[11:02:04.661]             signalCondition <- base::signalCondition
[11:02:04.661]             sys.calls <- base::sys.calls
[11:02:04.661]             `[[` <- base::`[[`
[11:02:04.661]             `+` <- base::`+`
[11:02:04.661]             `<<-` <- base::`<<-`
[11:02:04.661]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.661]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.661]                   3L)]
[11:02:04.661]             }
[11:02:04.661]             function(cond) {
[11:02:04.661]                 is_error <- inherits(cond, "error")
[11:02:04.661]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.661]                   NULL)
[11:02:04.661]                 if (is_error) {
[11:02:04.661]                   sessionInformation <- function() {
[11:02:04.661]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.661]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.661]                       search = base::search(), system = base::Sys.info())
[11:02:04.661]                   }
[11:02:04.661]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.661]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.661]                     cond$call), session = sessionInformation(), 
[11:02:04.661]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.661]                   signalCondition(cond)
[11:02:04.661]                 }
[11:02:04.661]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.661]                 "immediateCondition"))) {
[11:02:04.661]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.661]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.661]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.661]                   if (TRUE && !signal) {
[11:02:04.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.661]                     {
[11:02:04.661]                       inherits <- base::inherits
[11:02:04.661]                       invokeRestart <- base::invokeRestart
[11:02:04.661]                       is.null <- base::is.null
[11:02:04.661]                       muffled <- FALSE
[11:02:04.661]                       if (inherits(cond, "message")) {
[11:02:04.661]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.661]                         if (muffled) 
[11:02:04.661]                           invokeRestart("muffleMessage")
[11:02:04.661]                       }
[11:02:04.661]                       else if (inherits(cond, "warning")) {
[11:02:04.661]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.661]                         if (muffled) 
[11:02:04.661]                           invokeRestart("muffleWarning")
[11:02:04.661]                       }
[11:02:04.661]                       else if (inherits(cond, "condition")) {
[11:02:04.661]                         if (!is.null(pattern)) {
[11:02:04.661]                           computeRestarts <- base::computeRestarts
[11:02:04.661]                           grepl <- base::grepl
[11:02:04.661]                           restarts <- computeRestarts(cond)
[11:02:04.661]                           for (restart in restarts) {
[11:02:04.661]                             name <- restart$name
[11:02:04.661]                             if (is.null(name)) 
[11:02:04.661]                               next
[11:02:04.661]                             if (!grepl(pattern, name)) 
[11:02:04.661]                               next
[11:02:04.661]                             invokeRestart(restart)
[11:02:04.661]                             muffled <- TRUE
[11:02:04.661]                             break
[11:02:04.661]                           }
[11:02:04.661]                         }
[11:02:04.661]                       }
[11:02:04.661]                       invisible(muffled)
[11:02:04.661]                     }
[11:02:04.661]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.661]                   }
[11:02:04.661]                 }
[11:02:04.661]                 else {
[11:02:04.661]                   if (TRUE) {
[11:02:04.661]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.661]                     {
[11:02:04.661]                       inherits <- base::inherits
[11:02:04.661]                       invokeRestart <- base::invokeRestart
[11:02:04.661]                       is.null <- base::is.null
[11:02:04.661]                       muffled <- FALSE
[11:02:04.661]                       if (inherits(cond, "message")) {
[11:02:04.661]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.661]                         if (muffled) 
[11:02:04.661]                           invokeRestart("muffleMessage")
[11:02:04.661]                       }
[11:02:04.661]                       else if (inherits(cond, "warning")) {
[11:02:04.661]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.661]                         if (muffled) 
[11:02:04.661]                           invokeRestart("muffleWarning")
[11:02:04.661]                       }
[11:02:04.661]                       else if (inherits(cond, "condition")) {
[11:02:04.661]                         if (!is.null(pattern)) {
[11:02:04.661]                           computeRestarts <- base::computeRestarts
[11:02:04.661]                           grepl <- base::grepl
[11:02:04.661]                           restarts <- computeRestarts(cond)
[11:02:04.661]                           for (restart in restarts) {
[11:02:04.661]                             name <- restart$name
[11:02:04.661]                             if (is.null(name)) 
[11:02:04.661]                               next
[11:02:04.661]                             if (!grepl(pattern, name)) 
[11:02:04.661]                               next
[11:02:04.661]                             invokeRestart(restart)
[11:02:04.661]                             muffled <- TRUE
[11:02:04.661]                             break
[11:02:04.661]                           }
[11:02:04.661]                         }
[11:02:04.661]                       }
[11:02:04.661]                       invisible(muffled)
[11:02:04.661]                     }
[11:02:04.661]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.661]                   }
[11:02:04.661]                 }
[11:02:04.661]             }
[11:02:04.661]         }))
[11:02:04.661]     }, error = function(ex) {
[11:02:04.661]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.661]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.661]                 ...future.rng), started = ...future.startTime, 
[11:02:04.661]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.661]             version = "1.8"), class = "FutureResult")
[11:02:04.661]     }, finally = {
[11:02:04.661]         if (!identical(...future.workdir, getwd())) 
[11:02:04.661]             setwd(...future.workdir)
[11:02:04.661]         {
[11:02:04.661]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.661]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.661]             }
[11:02:04.661]             base::options(...future.oldOptions)
[11:02:04.661]             if (.Platform$OS.type == "windows") {
[11:02:04.661]                 old_names <- names(...future.oldEnvVars)
[11:02:04.661]                 envs <- base::Sys.getenv()
[11:02:04.661]                 names <- names(envs)
[11:02:04.661]                 common <- intersect(names, old_names)
[11:02:04.661]                 added <- setdiff(names, old_names)
[11:02:04.661]                 removed <- setdiff(old_names, names)
[11:02:04.661]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.661]                   envs[common]]
[11:02:04.661]                 NAMES <- toupper(changed)
[11:02:04.661]                 args <- list()
[11:02:04.661]                 for (kk in seq_along(NAMES)) {
[11:02:04.661]                   name <- changed[[kk]]
[11:02:04.661]                   NAME <- NAMES[[kk]]
[11:02:04.661]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.661]                     next
[11:02:04.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.661]                 }
[11:02:04.661]                 NAMES <- toupper(added)
[11:02:04.661]                 for (kk in seq_along(NAMES)) {
[11:02:04.661]                   name <- added[[kk]]
[11:02:04.661]                   NAME <- NAMES[[kk]]
[11:02:04.661]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.661]                     next
[11:02:04.661]                   args[[name]] <- ""
[11:02:04.661]                 }
[11:02:04.661]                 NAMES <- toupper(removed)
[11:02:04.661]                 for (kk in seq_along(NAMES)) {
[11:02:04.661]                   name <- removed[[kk]]
[11:02:04.661]                   NAME <- NAMES[[kk]]
[11:02:04.661]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.661]                     next
[11:02:04.661]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.661]                 }
[11:02:04.661]                 if (length(args) > 0) 
[11:02:04.661]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.661]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.661]             }
[11:02:04.661]             else {
[11:02:04.661]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.661]             }
[11:02:04.661]             {
[11:02:04.661]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.661]                   0L) {
[11:02:04.661]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.661]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.661]                   base::options(opts)
[11:02:04.661]                 }
[11:02:04.661]                 {
[11:02:04.661]                   {
[11:02:04.661]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.661]                     NULL
[11:02:04.661]                   }
[11:02:04.661]                   options(future.plan = NULL)
[11:02:04.661]                   if (is.na(NA_character_)) 
[11:02:04.661]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.661]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.661]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.661]                     .init = FALSE)
[11:02:04.661]                 }
[11:02:04.661]             }
[11:02:04.661]         }
[11:02:04.661]     })
[11:02:04.661]     if (TRUE) {
[11:02:04.661]         base::sink(type = "output", split = FALSE)
[11:02:04.661]         if (TRUE) {
[11:02:04.661]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.661]         }
[11:02:04.661]         else {
[11:02:04.661]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.661]         }
[11:02:04.661]         base::close(...future.stdout)
[11:02:04.661]         ...future.stdout <- NULL
[11:02:04.661]     }
[11:02:04.661]     ...future.result$conditions <- ...future.conditions
[11:02:04.661]     ...future.result$finished <- base::Sys.time()
[11:02:04.661]     ...future.result
[11:02:04.661] }
[11:02:04.665] requestCore(): workers = 2
[11:02:04.666] MulticoreFuture started
 - Creating multicore future #3 ...
[11:02:04.667] plan(): Setting new future strategy stack:
[11:02:04.668] List of future strategies:
[11:02:04.668] 1. sequential:
[11:02:04.668]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.668]    - tweaked: FALSE
[11:02:04.668]    - call: NULL
[11:02:04.669] plan(): nbrOfWorkers() = 1
[11:02:04.670] getGlobalsAndPackages() ...
[11:02:04.670] Not searching for globals
[11:02:04.670] - globals: [0] <none>
[11:02:04.670] getGlobalsAndPackages() ... DONE
[11:02:04.670] plan(): Setting new future strategy stack:
[11:02:04.671] List of future strategies:
[11:02:04.671] 1. multicore:
[11:02:04.671]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.671]    - tweaked: FALSE
[11:02:04.671]    - call: plan(multicore)
[11:02:04.671] Packages needed by the future expression (n = 0): <none>
[11:02:04.671] Packages needed by future strategies (n = 0): <none>
[11:02:04.673] plan(): nbrOfWorkers() = 2
[11:02:04.672] {
[11:02:04.672]     {
[11:02:04.672]         {
[11:02:04.672]             ...future.startTime <- base::Sys.time()
[11:02:04.672]             {
[11:02:04.672]                 {
[11:02:04.672]                   {
[11:02:04.672]                     {
[11:02:04.672]                       base::local({
[11:02:04.672]                         has_future <- base::requireNamespace("future", 
[11:02:04.672]                           quietly = TRUE)
[11:02:04.672]                         if (has_future) {
[11:02:04.672]                           ns <- base::getNamespace("future")
[11:02:04.672]                           version <- ns[[".package"]][["version"]]
[11:02:04.672]                           if (is.null(version)) 
[11:02:04.672]                             version <- utils::packageVersion("future")
[11:02:04.672]                         }
[11:02:04.672]                         else {
[11:02:04.672]                           version <- NULL
[11:02:04.672]                         }
[11:02:04.672]                         if (!has_future || version < "1.8.0") {
[11:02:04.672]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.672]                             "", base::R.version$version.string), 
[11:02:04.672]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.672]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.672]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.672]                               "release", "version")], collapse = " "), 
[11:02:04.672]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.672]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.672]                             info)
[11:02:04.672]                           info <- base::paste(info, collapse = "; ")
[11:02:04.672]                           if (!has_future) {
[11:02:04.672]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.672]                               info)
[11:02:04.672]                           }
[11:02:04.672]                           else {
[11:02:04.672]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.672]                               info, version)
[11:02:04.672]                           }
[11:02:04.672]                           base::stop(msg)
[11:02:04.672]                         }
[11:02:04.672]                       })
[11:02:04.672]                     }
[11:02:04.672]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.672]                     base::options(mc.cores = 1L)
[11:02:04.672]                   }
[11:02:04.672]                   ...future.strategy.old <- future::plan("list")
[11:02:04.672]                   options(future.plan = NULL)
[11:02:04.672]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.672]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.672]                 }
[11:02:04.672]                 ...future.workdir <- getwd()
[11:02:04.672]             }
[11:02:04.672]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.672]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.672]         }
[11:02:04.672]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.672]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.672]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.672]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.672]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.672]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.672]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.672]             base::names(...future.oldOptions))
[11:02:04.672]     }
[11:02:04.672]     if (FALSE) {
[11:02:04.672]     }
[11:02:04.672]     else {
[11:02:04.672]         if (TRUE) {
[11:02:04.672]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.672]                 open = "w")
[11:02:04.672]         }
[11:02:04.672]         else {
[11:02:04.672]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.672]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.672]         }
[11:02:04.672]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.672]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.672]             base::sink(type = "output", split = FALSE)
[11:02:04.672]             base::close(...future.stdout)
[11:02:04.672]         }, add = TRUE)
[11:02:04.672]     }
[11:02:04.672]     ...future.frame <- base::sys.nframe()
[11:02:04.672]     ...future.conditions <- base::list()
[11:02:04.672]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.672]     if (FALSE) {
[11:02:04.672]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.672]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.672]     }
[11:02:04.672]     ...future.result <- base::tryCatch({
[11:02:04.672]         base::withCallingHandlers({
[11:02:04.672]             ...future.value <- base::withVisible(base::local({
[11:02:04.672]                 withCallingHandlers({
[11:02:04.672]                   {
[11:02:04.672]                     ii
[11:02:04.672]                   }
[11:02:04.672]                 }, immediateCondition = function(cond) {
[11:02:04.672]                   save_rds <- function (object, pathname, ...) 
[11:02:04.672]                   {
[11:02:04.672]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.672]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.672]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.672]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.672]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.672]                         fi_tmp[["mtime"]])
[11:02:04.672]                     }
[11:02:04.672]                     tryCatch({
[11:02:04.672]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.672]                     }, error = function(ex) {
[11:02:04.672]                       msg <- conditionMessage(ex)
[11:02:04.672]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.672]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.672]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.672]                         fi_tmp[["mtime"]], msg)
[11:02:04.672]                       ex$message <- msg
[11:02:04.672]                       stop(ex)
[11:02:04.672]                     })
[11:02:04.672]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.672]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.672]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.672]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.672]                       fi <- file.info(pathname)
[11:02:04.672]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.672]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.672]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.672]                         fi[["size"]], fi[["mtime"]])
[11:02:04.672]                       stop(msg)
[11:02:04.672]                     }
[11:02:04.672]                     invisible(pathname)
[11:02:04.672]                   }
[11:02:04.672]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.672]                     rootPath = tempdir()) 
[11:02:04.672]                   {
[11:02:04.672]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.672]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.672]                       tmpdir = path, fileext = ".rds")
[11:02:04.672]                     save_rds(obj, file)
[11:02:04.672]                   }
[11:02:04.672]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.672]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.672]                   {
[11:02:04.672]                     inherits <- base::inherits
[11:02:04.672]                     invokeRestart <- base::invokeRestart
[11:02:04.672]                     is.null <- base::is.null
[11:02:04.672]                     muffled <- FALSE
[11:02:04.672]                     if (inherits(cond, "message")) {
[11:02:04.672]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.672]                       if (muffled) 
[11:02:04.672]                         invokeRestart("muffleMessage")
[11:02:04.672]                     }
[11:02:04.672]                     else if (inherits(cond, "warning")) {
[11:02:04.672]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.672]                       if (muffled) 
[11:02:04.672]                         invokeRestart("muffleWarning")
[11:02:04.672]                     }
[11:02:04.672]                     else if (inherits(cond, "condition")) {
[11:02:04.672]                       if (!is.null(pattern)) {
[11:02:04.672]                         computeRestarts <- base::computeRestarts
[11:02:04.672]                         grepl <- base::grepl
[11:02:04.672]                         restarts <- computeRestarts(cond)
[11:02:04.672]                         for (restart in restarts) {
[11:02:04.672]                           name <- restart$name
[11:02:04.672]                           if (is.null(name)) 
[11:02:04.672]                             next
[11:02:04.672]                           if (!grepl(pattern, name)) 
[11:02:04.672]                             next
[11:02:04.672]                           invokeRestart(restart)
[11:02:04.672]                           muffled <- TRUE
[11:02:04.672]                           break
[11:02:04.672]                         }
[11:02:04.672]                       }
[11:02:04.672]                     }
[11:02:04.672]                     invisible(muffled)
[11:02:04.672]                   }
[11:02:04.672]                   muffleCondition(cond)
[11:02:04.672]                 })
[11:02:04.672]             }))
[11:02:04.672]             future::FutureResult(value = ...future.value$value, 
[11:02:04.672]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.672]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.672]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.672]                     ...future.globalenv.names))
[11:02:04.672]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.672]         }, condition = base::local({
[11:02:04.672]             c <- base::c
[11:02:04.672]             inherits <- base::inherits
[11:02:04.672]             invokeRestart <- base::invokeRestart
[11:02:04.672]             length <- base::length
[11:02:04.672]             list <- base::list
[11:02:04.672]             seq.int <- base::seq.int
[11:02:04.672]             signalCondition <- base::signalCondition
[11:02:04.672]             sys.calls <- base::sys.calls
[11:02:04.672]             `[[` <- base::`[[`
[11:02:04.672]             `+` <- base::`+`
[11:02:04.672]             `<<-` <- base::`<<-`
[11:02:04.672]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.672]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.672]                   3L)]
[11:02:04.672]             }
[11:02:04.672]             function(cond) {
[11:02:04.672]                 is_error <- inherits(cond, "error")
[11:02:04.672]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.672]                   NULL)
[11:02:04.672]                 if (is_error) {
[11:02:04.672]                   sessionInformation <- function() {
[11:02:04.672]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.672]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.672]                       search = base::search(), system = base::Sys.info())
[11:02:04.672]                   }
[11:02:04.672]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.672]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.672]                     cond$call), session = sessionInformation(), 
[11:02:04.672]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.672]                   signalCondition(cond)
[11:02:04.672]                 }
[11:02:04.672]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.672]                 "immediateCondition"))) {
[11:02:04.672]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.672]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.672]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.672]                   if (TRUE && !signal) {
[11:02:04.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.672]                     {
[11:02:04.672]                       inherits <- base::inherits
[11:02:04.672]                       invokeRestart <- base::invokeRestart
[11:02:04.672]                       is.null <- base::is.null
[11:02:04.672]                       muffled <- FALSE
[11:02:04.672]                       if (inherits(cond, "message")) {
[11:02:04.672]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.672]                         if (muffled) 
[11:02:04.672]                           invokeRestart("muffleMessage")
[11:02:04.672]                       }
[11:02:04.672]                       else if (inherits(cond, "warning")) {
[11:02:04.672]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.672]                         if (muffled) 
[11:02:04.672]                           invokeRestart("muffleWarning")
[11:02:04.672]                       }
[11:02:04.672]                       else if (inherits(cond, "condition")) {
[11:02:04.672]                         if (!is.null(pattern)) {
[11:02:04.672]                           computeRestarts <- base::computeRestarts
[11:02:04.672]                           grepl <- base::grepl
[11:02:04.672]                           restarts <- computeRestarts(cond)
[11:02:04.672]                           for (restart in restarts) {
[11:02:04.672]                             name <- restart$name
[11:02:04.672]                             if (is.null(name)) 
[11:02:04.672]                               next
[11:02:04.672]                             if (!grepl(pattern, name)) 
[11:02:04.672]                               next
[11:02:04.672]                             invokeRestart(restart)
[11:02:04.672]                             muffled <- TRUE
[11:02:04.672]                             break
[11:02:04.672]                           }
[11:02:04.672]                         }
[11:02:04.672]                       }
[11:02:04.672]                       invisible(muffled)
[11:02:04.672]                     }
[11:02:04.672]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.672]                   }
[11:02:04.672]                 }
[11:02:04.672]                 else {
[11:02:04.672]                   if (TRUE) {
[11:02:04.672]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.672]                     {
[11:02:04.672]                       inherits <- base::inherits
[11:02:04.672]                       invokeRestart <- base::invokeRestart
[11:02:04.672]                       is.null <- base::is.null
[11:02:04.672]                       muffled <- FALSE
[11:02:04.672]                       if (inherits(cond, "message")) {
[11:02:04.672]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.672]                         if (muffled) 
[11:02:04.672]                           invokeRestart("muffleMessage")
[11:02:04.672]                       }
[11:02:04.672]                       else if (inherits(cond, "warning")) {
[11:02:04.672]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.672]                         if (muffled) 
[11:02:04.672]                           invokeRestart("muffleWarning")
[11:02:04.672]                       }
[11:02:04.672]                       else if (inherits(cond, "condition")) {
[11:02:04.672]                         if (!is.null(pattern)) {
[11:02:04.672]                           computeRestarts <- base::computeRestarts
[11:02:04.672]                           grepl <- base::grepl
[11:02:04.672]                           restarts <- computeRestarts(cond)
[11:02:04.672]                           for (restart in restarts) {
[11:02:04.672]                             name <- restart$name
[11:02:04.672]                             if (is.null(name)) 
[11:02:04.672]                               next
[11:02:04.672]                             if (!grepl(pattern, name)) 
[11:02:04.672]                               next
[11:02:04.672]                             invokeRestart(restart)
[11:02:04.672]                             muffled <- TRUE
[11:02:04.672]                             break
[11:02:04.672]                           }
[11:02:04.672]                         }
[11:02:04.672]                       }
[11:02:04.672]                       invisible(muffled)
[11:02:04.672]                     }
[11:02:04.672]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.672]                   }
[11:02:04.672]                 }
[11:02:04.672]             }
[11:02:04.672]         }))
[11:02:04.672]     }, error = function(ex) {
[11:02:04.672]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.672]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.672]                 ...future.rng), started = ...future.startTime, 
[11:02:04.672]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.672]             version = "1.8"), class = "FutureResult")
[11:02:04.672]     }, finally = {
[11:02:04.672]         if (!identical(...future.workdir, getwd())) 
[11:02:04.672]             setwd(...future.workdir)
[11:02:04.672]         {
[11:02:04.672]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.672]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.672]             }
[11:02:04.672]             base::options(...future.oldOptions)
[11:02:04.672]             if (.Platform$OS.type == "windows") {
[11:02:04.672]                 old_names <- names(...future.oldEnvVars)
[11:02:04.672]                 envs <- base::Sys.getenv()
[11:02:04.672]                 names <- names(envs)
[11:02:04.672]                 common <- intersect(names, old_names)
[11:02:04.672]                 added <- setdiff(names, old_names)
[11:02:04.672]                 removed <- setdiff(old_names, names)
[11:02:04.672]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.672]                   envs[common]]
[11:02:04.672]                 NAMES <- toupper(changed)
[11:02:04.672]                 args <- list()
[11:02:04.672]                 for (kk in seq_along(NAMES)) {
[11:02:04.672]                   name <- changed[[kk]]
[11:02:04.672]                   NAME <- NAMES[[kk]]
[11:02:04.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.672]                     next
[11:02:04.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.672]                 }
[11:02:04.672]                 NAMES <- toupper(added)
[11:02:04.672]                 for (kk in seq_along(NAMES)) {
[11:02:04.672]                   name <- added[[kk]]
[11:02:04.672]                   NAME <- NAMES[[kk]]
[11:02:04.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.672]                     next
[11:02:04.672]                   args[[name]] <- ""
[11:02:04.672]                 }
[11:02:04.672]                 NAMES <- toupper(removed)
[11:02:04.672]                 for (kk in seq_along(NAMES)) {
[11:02:04.672]                   name <- removed[[kk]]
[11:02:04.672]                   NAME <- NAMES[[kk]]
[11:02:04.672]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.672]                     next
[11:02:04.672]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.672]                 }
[11:02:04.672]                 if (length(args) > 0) 
[11:02:04.672]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.672]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.672]             }
[11:02:04.672]             else {
[11:02:04.672]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.672]             }
[11:02:04.672]             {
[11:02:04.672]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.672]                   0L) {
[11:02:04.672]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.672]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.672]                   base::options(opts)
[11:02:04.672]                 }
[11:02:04.672]                 {
[11:02:04.672]                   {
[11:02:04.672]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.672]                     NULL
[11:02:04.672]                   }
[11:02:04.672]                   options(future.plan = NULL)
[11:02:04.672]                   if (is.na(NA_character_)) 
[11:02:04.672]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.672]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.672]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.672]                     .init = FALSE)
[11:02:04.672]                 }
[11:02:04.672]             }
[11:02:04.672]         }
[11:02:04.672]     })
[11:02:04.672]     if (TRUE) {
[11:02:04.672]         base::sink(type = "output", split = FALSE)
[11:02:04.672]         if (TRUE) {
[11:02:04.672]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.672]         }
[11:02:04.672]         else {
[11:02:04.672]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.672]         }
[11:02:04.672]         base::close(...future.stdout)
[11:02:04.672]         ...future.stdout <- NULL
[11:02:04.672]     }
[11:02:04.672]     ...future.result$conditions <- ...future.conditions
[11:02:04.672]     ...future.result$finished <- base::Sys.time()
[11:02:04.672]     ...future.result
[11:02:04.672] }
[11:02:04.675] requestCore(): workers = 2
[11:02:04.676] Poll #1 (0): usedCores() = 2, workers = 2
[11:02:04.686] result() for MulticoreFuture ...
[11:02:04.687] result() for MulticoreFuture ...
[11:02:04.688] result() for MulticoreFuture ... done
[11:02:04.688] result() for MulticoreFuture ... done
[11:02:04.688] result() for MulticoreFuture ...
[11:02:04.688] result() for MulticoreFuture ... done
[11:02:04.690] MulticoreFuture started
 - Creating multicore future #4 ...
[11:02:04.691] plan(): Setting new future strategy stack:
[11:02:04.691] List of future strategies:
[11:02:04.691] 1. sequential:
[11:02:04.691]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.691]    - tweaked: FALSE
[11:02:04.691]    - call: NULL
[11:02:04.692] plan(): nbrOfWorkers() = 1
[11:02:04.694] getGlobalsAndPackages() ...
[11:02:04.694] Not searching for globals
[11:02:04.694] plan(): Setting new future strategy stack:
[11:02:04.694] - globals: [0] <none>
[11:02:04.694] getGlobalsAndPackages() ... DONE
[11:02:04.694] List of future strategies:
[11:02:04.694] 1. multicore:
[11:02:04.694]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.694]    - tweaked: FALSE
[11:02:04.694]    - call: plan(multicore)
[11:02:04.695] Packages needed by the future expression (n = 0): <none>
[11:02:04.695] Packages needed by future strategies (n = 0): <none>
[11:02:04.697] plan(): nbrOfWorkers() = 2
[11:02:04.696] {
[11:02:04.696]     {
[11:02:04.696]         {
[11:02:04.696]             ...future.startTime <- base::Sys.time()
[11:02:04.696]             {
[11:02:04.696]                 {
[11:02:04.696]                   {
[11:02:04.696]                     {
[11:02:04.696]                       base::local({
[11:02:04.696]                         has_future <- base::requireNamespace("future", 
[11:02:04.696]                           quietly = TRUE)
[11:02:04.696]                         if (has_future) {
[11:02:04.696]                           ns <- base::getNamespace("future")
[11:02:04.696]                           version <- ns[[".package"]][["version"]]
[11:02:04.696]                           if (is.null(version)) 
[11:02:04.696]                             version <- utils::packageVersion("future")
[11:02:04.696]                         }
[11:02:04.696]                         else {
[11:02:04.696]                           version <- NULL
[11:02:04.696]                         }
[11:02:04.696]                         if (!has_future || version < "1.8.0") {
[11:02:04.696]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.696]                             "", base::R.version$version.string), 
[11:02:04.696]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.696]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.696]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.696]                               "release", "version")], collapse = " "), 
[11:02:04.696]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.696]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.696]                             info)
[11:02:04.696]                           info <- base::paste(info, collapse = "; ")
[11:02:04.696]                           if (!has_future) {
[11:02:04.696]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.696]                               info)
[11:02:04.696]                           }
[11:02:04.696]                           else {
[11:02:04.696]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.696]                               info, version)
[11:02:04.696]                           }
[11:02:04.696]                           base::stop(msg)
[11:02:04.696]                         }
[11:02:04.696]                       })
[11:02:04.696]                     }
[11:02:04.696]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.696]                     base::options(mc.cores = 1L)
[11:02:04.696]                   }
[11:02:04.696]                   ...future.strategy.old <- future::plan("list")
[11:02:04.696]                   options(future.plan = NULL)
[11:02:04.696]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.696]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.696]                 }
[11:02:04.696]                 ...future.workdir <- getwd()
[11:02:04.696]             }
[11:02:04.696]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.696]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.696]         }
[11:02:04.696]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.696]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.696]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.696]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.696]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.696]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.696]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.696]             base::names(...future.oldOptions))
[11:02:04.696]     }
[11:02:04.696]     if (FALSE) {
[11:02:04.696]     }
[11:02:04.696]     else {
[11:02:04.696]         if (TRUE) {
[11:02:04.696]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.696]                 open = "w")
[11:02:04.696]         }
[11:02:04.696]         else {
[11:02:04.696]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.696]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.696]         }
[11:02:04.696]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.696]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.696]             base::sink(type = "output", split = FALSE)
[11:02:04.696]             base::close(...future.stdout)
[11:02:04.696]         }, add = TRUE)
[11:02:04.696]     }
[11:02:04.696]     ...future.frame <- base::sys.nframe()
[11:02:04.696]     ...future.conditions <- base::list()
[11:02:04.696]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.696]     if (FALSE) {
[11:02:04.696]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.696]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.696]     }
[11:02:04.696]     ...future.result <- base::tryCatch({
[11:02:04.696]         base::withCallingHandlers({
[11:02:04.696]             ...future.value <- base::withVisible(base::local({
[11:02:04.696]                 withCallingHandlers({
[11:02:04.696]                   {
[11:02:04.696]                     ii
[11:02:04.696]                   }
[11:02:04.696]                 }, immediateCondition = function(cond) {
[11:02:04.696]                   save_rds <- function (object, pathname, ...) 
[11:02:04.696]                   {
[11:02:04.696]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.696]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.696]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.696]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.696]                         fi_tmp[["mtime"]])
[11:02:04.696]                     }
[11:02:04.696]                     tryCatch({
[11:02:04.696]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.696]                     }, error = function(ex) {
[11:02:04.696]                       msg <- conditionMessage(ex)
[11:02:04.696]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.696]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.696]                         fi_tmp[["mtime"]], msg)
[11:02:04.696]                       ex$message <- msg
[11:02:04.696]                       stop(ex)
[11:02:04.696]                     })
[11:02:04.696]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.696]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.696]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.696]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.696]                       fi <- file.info(pathname)
[11:02:04.696]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.696]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.696]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.696]                         fi[["size"]], fi[["mtime"]])
[11:02:04.696]                       stop(msg)
[11:02:04.696]                     }
[11:02:04.696]                     invisible(pathname)
[11:02:04.696]                   }
[11:02:04.696]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.696]                     rootPath = tempdir()) 
[11:02:04.696]                   {
[11:02:04.696]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.696]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.696]                       tmpdir = path, fileext = ".rds")
[11:02:04.696]                     save_rds(obj, file)
[11:02:04.696]                   }
[11:02:04.696]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.696]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.696]                   {
[11:02:04.696]                     inherits <- base::inherits
[11:02:04.696]                     invokeRestart <- base::invokeRestart
[11:02:04.696]                     is.null <- base::is.null
[11:02:04.696]                     muffled <- FALSE
[11:02:04.696]                     if (inherits(cond, "message")) {
[11:02:04.696]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.696]                       if (muffled) 
[11:02:04.696]                         invokeRestart("muffleMessage")
[11:02:04.696]                     }
[11:02:04.696]                     else if (inherits(cond, "warning")) {
[11:02:04.696]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.696]                       if (muffled) 
[11:02:04.696]                         invokeRestart("muffleWarning")
[11:02:04.696]                     }
[11:02:04.696]                     else if (inherits(cond, "condition")) {
[11:02:04.696]                       if (!is.null(pattern)) {
[11:02:04.696]                         computeRestarts <- base::computeRestarts
[11:02:04.696]                         grepl <- base::grepl
[11:02:04.696]                         restarts <- computeRestarts(cond)
[11:02:04.696]                         for (restart in restarts) {
[11:02:04.696]                           name <- restart$name
[11:02:04.696]                           if (is.null(name)) 
[11:02:04.696]                             next
[11:02:04.696]                           if (!grepl(pattern, name)) 
[11:02:04.696]                             next
[11:02:04.696]                           invokeRestart(restart)
[11:02:04.696]                           muffled <- TRUE
[11:02:04.696]                           break
[11:02:04.696]                         }
[11:02:04.696]                       }
[11:02:04.696]                     }
[11:02:04.696]                     invisible(muffled)
[11:02:04.696]                   }
[11:02:04.696]                   muffleCondition(cond)
[11:02:04.696]                 })
[11:02:04.696]             }))
[11:02:04.696]             future::FutureResult(value = ...future.value$value, 
[11:02:04.696]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.696]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.696]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.696]                     ...future.globalenv.names))
[11:02:04.696]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.696]         }, condition = base::local({
[11:02:04.696]             c <- base::c
[11:02:04.696]             inherits <- base::inherits
[11:02:04.696]             invokeRestart <- base::invokeRestart
[11:02:04.696]             length <- base::length
[11:02:04.696]             list <- base::list
[11:02:04.696]             seq.int <- base::seq.int
[11:02:04.696]             signalCondition <- base::signalCondition
[11:02:04.696]             sys.calls <- base::sys.calls
[11:02:04.696]             `[[` <- base::`[[`
[11:02:04.696]             `+` <- base::`+`
[11:02:04.696]             `<<-` <- base::`<<-`
[11:02:04.696]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.696]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.696]                   3L)]
[11:02:04.696]             }
[11:02:04.696]             function(cond) {
[11:02:04.696]                 is_error <- inherits(cond, "error")
[11:02:04.696]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.696]                   NULL)
[11:02:04.696]                 if (is_error) {
[11:02:04.696]                   sessionInformation <- function() {
[11:02:04.696]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.696]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.696]                       search = base::search(), system = base::Sys.info())
[11:02:04.696]                   }
[11:02:04.696]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.696]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.696]                     cond$call), session = sessionInformation(), 
[11:02:04.696]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.696]                   signalCondition(cond)
[11:02:04.696]                 }
[11:02:04.696]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.696]                 "immediateCondition"))) {
[11:02:04.696]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.696]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.696]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.696]                   if (TRUE && !signal) {
[11:02:04.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.696]                     {
[11:02:04.696]                       inherits <- base::inherits
[11:02:04.696]                       invokeRestart <- base::invokeRestart
[11:02:04.696]                       is.null <- base::is.null
[11:02:04.696]                       muffled <- FALSE
[11:02:04.696]                       if (inherits(cond, "message")) {
[11:02:04.696]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.696]                         if (muffled) 
[11:02:04.696]                           invokeRestart("muffleMessage")
[11:02:04.696]                       }
[11:02:04.696]                       else if (inherits(cond, "warning")) {
[11:02:04.696]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.696]                         if (muffled) 
[11:02:04.696]                           invokeRestart("muffleWarning")
[11:02:04.696]                       }
[11:02:04.696]                       else if (inherits(cond, "condition")) {
[11:02:04.696]                         if (!is.null(pattern)) {
[11:02:04.696]                           computeRestarts <- base::computeRestarts
[11:02:04.696]                           grepl <- base::grepl
[11:02:04.696]                           restarts <- computeRestarts(cond)
[11:02:04.696]                           for (restart in restarts) {
[11:02:04.696]                             name <- restart$name
[11:02:04.696]                             if (is.null(name)) 
[11:02:04.696]                               next
[11:02:04.696]                             if (!grepl(pattern, name)) 
[11:02:04.696]                               next
[11:02:04.696]                             invokeRestart(restart)
[11:02:04.696]                             muffled <- TRUE
[11:02:04.696]                             break
[11:02:04.696]                           }
[11:02:04.696]                         }
[11:02:04.696]                       }
[11:02:04.696]                       invisible(muffled)
[11:02:04.696]                     }
[11:02:04.696]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.696]                   }
[11:02:04.696]                 }
[11:02:04.696]                 else {
[11:02:04.696]                   if (TRUE) {
[11:02:04.696]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.696]                     {
[11:02:04.696]                       inherits <- base::inherits
[11:02:04.696]                       invokeRestart <- base::invokeRestart
[11:02:04.696]                       is.null <- base::is.null
[11:02:04.696]                       muffled <- FALSE
[11:02:04.696]                       if (inherits(cond, "message")) {
[11:02:04.696]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.696]                         if (muffled) 
[11:02:04.696]                           invokeRestart("muffleMessage")
[11:02:04.696]                       }
[11:02:04.696]                       else if (inherits(cond, "warning")) {
[11:02:04.696]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.696]                         if (muffled) 
[11:02:04.696]                           invokeRestart("muffleWarning")
[11:02:04.696]                       }
[11:02:04.696]                       else if (inherits(cond, "condition")) {
[11:02:04.696]                         if (!is.null(pattern)) {
[11:02:04.696]                           computeRestarts <- base::computeRestarts
[11:02:04.696]                           grepl <- base::grepl
[11:02:04.696]                           restarts <- computeRestarts(cond)
[11:02:04.696]                           for (restart in restarts) {
[11:02:04.696]                             name <- restart$name
[11:02:04.696]                             if (is.null(name)) 
[11:02:04.696]                               next
[11:02:04.696]                             if (!grepl(pattern, name)) 
[11:02:04.696]                               next
[11:02:04.696]                             invokeRestart(restart)
[11:02:04.696]                             muffled <- TRUE
[11:02:04.696]                             break
[11:02:04.696]                           }
[11:02:04.696]                         }
[11:02:04.696]                       }
[11:02:04.696]                       invisible(muffled)
[11:02:04.696]                     }
[11:02:04.696]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.696]                   }
[11:02:04.696]                 }
[11:02:04.696]             }
[11:02:04.696]         }))
[11:02:04.696]     }, error = function(ex) {
[11:02:04.696]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.696]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.696]                 ...future.rng), started = ...future.startTime, 
[11:02:04.696]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.696]             version = "1.8"), class = "FutureResult")
[11:02:04.696]     }, finally = {
[11:02:04.696]         if (!identical(...future.workdir, getwd())) 
[11:02:04.696]             setwd(...future.workdir)
[11:02:04.696]         {
[11:02:04.696]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.696]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.696]             }
[11:02:04.696]             base::options(...future.oldOptions)
[11:02:04.696]             if (.Platform$OS.type == "windows") {
[11:02:04.696]                 old_names <- names(...future.oldEnvVars)
[11:02:04.696]                 envs <- base::Sys.getenv()
[11:02:04.696]                 names <- names(envs)
[11:02:04.696]                 common <- intersect(names, old_names)
[11:02:04.696]                 added <- setdiff(names, old_names)
[11:02:04.696]                 removed <- setdiff(old_names, names)
[11:02:04.696]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.696]                   envs[common]]
[11:02:04.696]                 NAMES <- toupper(changed)
[11:02:04.696]                 args <- list()
[11:02:04.696]                 for (kk in seq_along(NAMES)) {
[11:02:04.696]                   name <- changed[[kk]]
[11:02:04.696]                   NAME <- NAMES[[kk]]
[11:02:04.696]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.696]                     next
[11:02:04.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.696]                 }
[11:02:04.696]                 NAMES <- toupper(added)
[11:02:04.696]                 for (kk in seq_along(NAMES)) {
[11:02:04.696]                   name <- added[[kk]]
[11:02:04.696]                   NAME <- NAMES[[kk]]
[11:02:04.696]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.696]                     next
[11:02:04.696]                   args[[name]] <- ""
[11:02:04.696]                 }
[11:02:04.696]                 NAMES <- toupper(removed)
[11:02:04.696]                 for (kk in seq_along(NAMES)) {
[11:02:04.696]                   name <- removed[[kk]]
[11:02:04.696]                   NAME <- NAMES[[kk]]
[11:02:04.696]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.696]                     next
[11:02:04.696]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.696]                 }
[11:02:04.696]                 if (length(args) > 0) 
[11:02:04.696]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.696]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.696]             }
[11:02:04.696]             else {
[11:02:04.696]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.696]             }
[11:02:04.696]             {
[11:02:04.696]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.696]                   0L) {
[11:02:04.696]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.696]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.696]                   base::options(opts)
[11:02:04.696]                 }
[11:02:04.696]                 {
[11:02:04.696]                   {
[11:02:04.696]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.696]                     NULL
[11:02:04.696]                   }
[11:02:04.696]                   options(future.plan = NULL)
[11:02:04.696]                   if (is.na(NA_character_)) 
[11:02:04.696]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.696]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.696]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.696]                     .init = FALSE)
[11:02:04.696]                 }
[11:02:04.696]             }
[11:02:04.696]         }
[11:02:04.696]     })
[11:02:04.696]     if (TRUE) {
[11:02:04.696]         base::sink(type = "output", split = FALSE)
[11:02:04.696]         if (TRUE) {
[11:02:04.696]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.696]         }
[11:02:04.696]         else {
[11:02:04.696]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.696]         }
[11:02:04.696]         base::close(...future.stdout)
[11:02:04.696]         ...future.stdout <- NULL
[11:02:04.696]     }
[11:02:04.696]     ...future.result$conditions <- ...future.conditions
[11:02:04.696]     ...future.result$finished <- base::Sys.time()
[11:02:04.696]     ...future.result
[11:02:04.696] }
[11:02:04.699] requestCore(): workers = 2
[11:02:04.699] Poll #1 (0): usedCores() = 2, workers = 2
[11:02:04.728] result() for MulticoreFuture ...
[11:02:04.729] result() for MulticoreFuture ...
[11:02:04.729] result() for MulticoreFuture ... done
[11:02:04.729] result() for MulticoreFuture ... done
[11:02:04.729] result() for MulticoreFuture ...
[11:02:04.729] result() for MulticoreFuture ... done
[11:02:04.731] MulticoreFuture started
 - Resolving 4 multicore futures
[11:02:04.732] result() for MulticoreFuture ...
[11:02:04.733] result() for MulticoreFuture ... done
[11:02:04.733] plan(): Setting new future strategy stack:
[11:02:04.733] result() for MulticoreFuture ...
[11:02:04.733] result() for MulticoreFuture ... done
[11:02:04.733] result() for MulticoreFuture ...
[11:02:04.734] result() for MulticoreFuture ... done
[11:02:04.734] result() for MulticoreFuture ...
[11:02:04.733] List of future strategies:
[11:02:04.733] 1. sequential:
[11:02:04.733]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.733]    - tweaked: FALSE
[11:02:04.733]    - call: NULL
[11:02:04.734] result() for MulticoreFuture ... done
[11:02:04.734] result() for MulticoreFuture ...
[11:02:04.734] plan(): nbrOfWorkers() = 1
[11:02:04.736] result() for MulticoreFuture ...
[11:02:04.736] result() for MulticoreFuture ... done
[11:02:04.736] result() for MulticoreFuture ... done
[11:02:04.736] result() for MulticoreFuture ...
[11:02:04.737] result() for MulticoreFuture ... done
[11:02:04.737] plan(): Setting new future strategy stack:
[11:02:04.737] result() for MulticoreFuture ...
[11:02:04.737] List of future strategies:
[11:02:04.737] 1. multicore:
[11:02:04.737]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.737]    - tweaked: FALSE
[11:02:04.737]    - call: plan(multicore)
[11:02:04.740] plan(): nbrOfWorkers() = 2
[11:02:04.741] result() for MulticoreFuture ...
[11:02:04.741] result() for MulticoreFuture ... done
[11:02:04.741] result() for MulticoreFuture ... done
[11:02:04.741] result() for MulticoreFuture ...
[11:02:04.741] result() for MulticoreFuture ... done
*** multicore(..., globals = FALSE) and errors
[11:02:04.744] getGlobalsAndPackages() ...
[11:02:04.744] Not searching for globals
[11:02:04.744] - globals: [0] <none>
[11:02:04.744] getGlobalsAndPackages() ... DONE
[11:02:04.745] Packages needed by the future expression (n = 0): <none>
[11:02:04.745] Packages needed by future strategies (n = 0): <none>
[11:02:04.746] {
[11:02:04.746]     {
[11:02:04.746]         {
[11:02:04.746]             ...future.startTime <- base::Sys.time()
[11:02:04.746]             {
[11:02:04.746]                 {
[11:02:04.746]                   {
[11:02:04.746]                     {
[11:02:04.746]                       base::local({
[11:02:04.746]                         has_future <- base::requireNamespace("future", 
[11:02:04.746]                           quietly = TRUE)
[11:02:04.746]                         if (has_future) {
[11:02:04.746]                           ns <- base::getNamespace("future")
[11:02:04.746]                           version <- ns[[".package"]][["version"]]
[11:02:04.746]                           if (is.null(version)) 
[11:02:04.746]                             version <- utils::packageVersion("future")
[11:02:04.746]                         }
[11:02:04.746]                         else {
[11:02:04.746]                           version <- NULL
[11:02:04.746]                         }
[11:02:04.746]                         if (!has_future || version < "1.8.0") {
[11:02:04.746]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.746]                             "", base::R.version$version.string), 
[11:02:04.746]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.746]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.746]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.746]                               "release", "version")], collapse = " "), 
[11:02:04.746]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.746]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.746]                             info)
[11:02:04.746]                           info <- base::paste(info, collapse = "; ")
[11:02:04.746]                           if (!has_future) {
[11:02:04.746]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.746]                               info)
[11:02:04.746]                           }
[11:02:04.746]                           else {
[11:02:04.746]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.746]                               info, version)
[11:02:04.746]                           }
[11:02:04.746]                           base::stop(msg)
[11:02:04.746]                         }
[11:02:04.746]                       })
[11:02:04.746]                     }
[11:02:04.746]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.746]                     base::options(mc.cores = 1L)
[11:02:04.746]                   }
[11:02:04.746]                   ...future.strategy.old <- future::plan("list")
[11:02:04.746]                   options(future.plan = NULL)
[11:02:04.746]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.746]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.746]                 }
[11:02:04.746]                 ...future.workdir <- getwd()
[11:02:04.746]             }
[11:02:04.746]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.746]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.746]         }
[11:02:04.746]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.746]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.746]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.746]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.746]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.746]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.746]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.746]             base::names(...future.oldOptions))
[11:02:04.746]     }
[11:02:04.746]     if (FALSE) {
[11:02:04.746]     }
[11:02:04.746]     else {
[11:02:04.746]         if (TRUE) {
[11:02:04.746]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.746]                 open = "w")
[11:02:04.746]         }
[11:02:04.746]         else {
[11:02:04.746]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.746]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.746]         }
[11:02:04.746]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.746]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.746]             base::sink(type = "output", split = FALSE)
[11:02:04.746]             base::close(...future.stdout)
[11:02:04.746]         }, add = TRUE)
[11:02:04.746]     }
[11:02:04.746]     ...future.frame <- base::sys.nframe()
[11:02:04.746]     ...future.conditions <- base::list()
[11:02:04.746]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.746]     if (FALSE) {
[11:02:04.746]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.746]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.746]     }
[11:02:04.746]     ...future.result <- base::tryCatch({
[11:02:04.746]         base::withCallingHandlers({
[11:02:04.746]             ...future.value <- base::withVisible(base::local({
[11:02:04.746]                 withCallingHandlers({
[11:02:04.746]                   {
[11:02:04.746]                     stop("Whoops!")
[11:02:04.746]                     1
[11:02:04.746]                   }
[11:02:04.746]                 }, immediateCondition = function(cond) {
[11:02:04.746]                   save_rds <- function (object, pathname, ...) 
[11:02:04.746]                   {
[11:02:04.746]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.746]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.746]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.746]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.746]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.746]                         fi_tmp[["mtime"]])
[11:02:04.746]                     }
[11:02:04.746]                     tryCatch({
[11:02:04.746]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.746]                     }, error = function(ex) {
[11:02:04.746]                       msg <- conditionMessage(ex)
[11:02:04.746]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.746]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.746]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.746]                         fi_tmp[["mtime"]], msg)
[11:02:04.746]                       ex$message <- msg
[11:02:04.746]                       stop(ex)
[11:02:04.746]                     })
[11:02:04.746]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.746]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.746]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.746]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.746]                       fi <- file.info(pathname)
[11:02:04.746]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.746]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.746]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.746]                         fi[["size"]], fi[["mtime"]])
[11:02:04.746]                       stop(msg)
[11:02:04.746]                     }
[11:02:04.746]                     invisible(pathname)
[11:02:04.746]                   }
[11:02:04.746]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.746]                     rootPath = tempdir()) 
[11:02:04.746]                   {
[11:02:04.746]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.746]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.746]                       tmpdir = path, fileext = ".rds")
[11:02:04.746]                     save_rds(obj, file)
[11:02:04.746]                   }
[11:02:04.746]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.746]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.746]                   {
[11:02:04.746]                     inherits <- base::inherits
[11:02:04.746]                     invokeRestart <- base::invokeRestart
[11:02:04.746]                     is.null <- base::is.null
[11:02:04.746]                     muffled <- FALSE
[11:02:04.746]                     if (inherits(cond, "message")) {
[11:02:04.746]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.746]                       if (muffled) 
[11:02:04.746]                         invokeRestart("muffleMessage")
[11:02:04.746]                     }
[11:02:04.746]                     else if (inherits(cond, "warning")) {
[11:02:04.746]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.746]                       if (muffled) 
[11:02:04.746]                         invokeRestart("muffleWarning")
[11:02:04.746]                     }
[11:02:04.746]                     else if (inherits(cond, "condition")) {
[11:02:04.746]                       if (!is.null(pattern)) {
[11:02:04.746]                         computeRestarts <- base::computeRestarts
[11:02:04.746]                         grepl <- base::grepl
[11:02:04.746]                         restarts <- computeRestarts(cond)
[11:02:04.746]                         for (restart in restarts) {
[11:02:04.746]                           name <- restart$name
[11:02:04.746]                           if (is.null(name)) 
[11:02:04.746]                             next
[11:02:04.746]                           if (!grepl(pattern, name)) 
[11:02:04.746]                             next
[11:02:04.746]                           invokeRestart(restart)
[11:02:04.746]                           muffled <- TRUE
[11:02:04.746]                           break
[11:02:04.746]                         }
[11:02:04.746]                       }
[11:02:04.746]                     }
[11:02:04.746]                     invisible(muffled)
[11:02:04.746]                   }
[11:02:04.746]                   muffleCondition(cond)
[11:02:04.746]                 })
[11:02:04.746]             }))
[11:02:04.746]             future::FutureResult(value = ...future.value$value, 
[11:02:04.746]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.746]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.746]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.746]                     ...future.globalenv.names))
[11:02:04.746]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.746]         }, condition = base::local({
[11:02:04.746]             c <- base::c
[11:02:04.746]             inherits <- base::inherits
[11:02:04.746]             invokeRestart <- base::invokeRestart
[11:02:04.746]             length <- base::length
[11:02:04.746]             list <- base::list
[11:02:04.746]             seq.int <- base::seq.int
[11:02:04.746]             signalCondition <- base::signalCondition
[11:02:04.746]             sys.calls <- base::sys.calls
[11:02:04.746]             `[[` <- base::`[[`
[11:02:04.746]             `+` <- base::`+`
[11:02:04.746]             `<<-` <- base::`<<-`
[11:02:04.746]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.746]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.746]                   3L)]
[11:02:04.746]             }
[11:02:04.746]             function(cond) {
[11:02:04.746]                 is_error <- inherits(cond, "error")
[11:02:04.746]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.746]                   NULL)
[11:02:04.746]                 if (is_error) {
[11:02:04.746]                   sessionInformation <- function() {
[11:02:04.746]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.746]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.746]                       search = base::search(), system = base::Sys.info())
[11:02:04.746]                   }
[11:02:04.746]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.746]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.746]                     cond$call), session = sessionInformation(), 
[11:02:04.746]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.746]                   signalCondition(cond)
[11:02:04.746]                 }
[11:02:04.746]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.746]                 "immediateCondition"))) {
[11:02:04.746]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.746]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.746]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.746]                   if (TRUE && !signal) {
[11:02:04.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.746]                     {
[11:02:04.746]                       inherits <- base::inherits
[11:02:04.746]                       invokeRestart <- base::invokeRestart
[11:02:04.746]                       is.null <- base::is.null
[11:02:04.746]                       muffled <- FALSE
[11:02:04.746]                       if (inherits(cond, "message")) {
[11:02:04.746]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.746]                         if (muffled) 
[11:02:04.746]                           invokeRestart("muffleMessage")
[11:02:04.746]                       }
[11:02:04.746]                       else if (inherits(cond, "warning")) {
[11:02:04.746]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.746]                         if (muffled) 
[11:02:04.746]                           invokeRestart("muffleWarning")
[11:02:04.746]                       }
[11:02:04.746]                       else if (inherits(cond, "condition")) {
[11:02:04.746]                         if (!is.null(pattern)) {
[11:02:04.746]                           computeRestarts <- base::computeRestarts
[11:02:04.746]                           grepl <- base::grepl
[11:02:04.746]                           restarts <- computeRestarts(cond)
[11:02:04.746]                           for (restart in restarts) {
[11:02:04.746]                             name <- restart$name
[11:02:04.746]                             if (is.null(name)) 
[11:02:04.746]                               next
[11:02:04.746]                             if (!grepl(pattern, name)) 
[11:02:04.746]                               next
[11:02:04.746]                             invokeRestart(restart)
[11:02:04.746]                             muffled <- TRUE
[11:02:04.746]                             break
[11:02:04.746]                           }
[11:02:04.746]                         }
[11:02:04.746]                       }
[11:02:04.746]                       invisible(muffled)
[11:02:04.746]                     }
[11:02:04.746]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.746]                   }
[11:02:04.746]                 }
[11:02:04.746]                 else {
[11:02:04.746]                   if (TRUE) {
[11:02:04.746]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.746]                     {
[11:02:04.746]                       inherits <- base::inherits
[11:02:04.746]                       invokeRestart <- base::invokeRestart
[11:02:04.746]                       is.null <- base::is.null
[11:02:04.746]                       muffled <- FALSE
[11:02:04.746]                       if (inherits(cond, "message")) {
[11:02:04.746]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.746]                         if (muffled) 
[11:02:04.746]                           invokeRestart("muffleMessage")
[11:02:04.746]                       }
[11:02:04.746]                       else if (inherits(cond, "warning")) {
[11:02:04.746]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.746]                         if (muffled) 
[11:02:04.746]                           invokeRestart("muffleWarning")
[11:02:04.746]                       }
[11:02:04.746]                       else if (inherits(cond, "condition")) {
[11:02:04.746]                         if (!is.null(pattern)) {
[11:02:04.746]                           computeRestarts <- base::computeRestarts
[11:02:04.746]                           grepl <- base::grepl
[11:02:04.746]                           restarts <- computeRestarts(cond)
[11:02:04.746]                           for (restart in restarts) {
[11:02:04.746]                             name <- restart$name
[11:02:04.746]                             if (is.null(name)) 
[11:02:04.746]                               next
[11:02:04.746]                             if (!grepl(pattern, name)) 
[11:02:04.746]                               next
[11:02:04.746]                             invokeRestart(restart)
[11:02:04.746]                             muffled <- TRUE
[11:02:04.746]                             break
[11:02:04.746]                           }
[11:02:04.746]                         }
[11:02:04.746]                       }
[11:02:04.746]                       invisible(muffled)
[11:02:04.746]                     }
[11:02:04.746]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.746]                   }
[11:02:04.746]                 }
[11:02:04.746]             }
[11:02:04.746]         }))
[11:02:04.746]     }, error = function(ex) {
[11:02:04.746]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.746]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.746]                 ...future.rng), started = ...future.startTime, 
[11:02:04.746]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.746]             version = "1.8"), class = "FutureResult")
[11:02:04.746]     }, finally = {
[11:02:04.746]         if (!identical(...future.workdir, getwd())) 
[11:02:04.746]             setwd(...future.workdir)
[11:02:04.746]         {
[11:02:04.746]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.746]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.746]             }
[11:02:04.746]             base::options(...future.oldOptions)
[11:02:04.746]             if (.Platform$OS.type == "windows") {
[11:02:04.746]                 old_names <- names(...future.oldEnvVars)
[11:02:04.746]                 envs <- base::Sys.getenv()
[11:02:04.746]                 names <- names(envs)
[11:02:04.746]                 common <- intersect(names, old_names)
[11:02:04.746]                 added <- setdiff(names, old_names)
[11:02:04.746]                 removed <- setdiff(old_names, names)
[11:02:04.746]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.746]                   envs[common]]
[11:02:04.746]                 NAMES <- toupper(changed)
[11:02:04.746]                 args <- list()
[11:02:04.746]                 for (kk in seq_along(NAMES)) {
[11:02:04.746]                   name <- changed[[kk]]
[11:02:04.746]                   NAME <- NAMES[[kk]]
[11:02:04.746]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.746]                     next
[11:02:04.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.746]                 }
[11:02:04.746]                 NAMES <- toupper(added)
[11:02:04.746]                 for (kk in seq_along(NAMES)) {
[11:02:04.746]                   name <- added[[kk]]
[11:02:04.746]                   NAME <- NAMES[[kk]]
[11:02:04.746]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.746]                     next
[11:02:04.746]                   args[[name]] <- ""
[11:02:04.746]                 }
[11:02:04.746]                 NAMES <- toupper(removed)
[11:02:04.746]                 for (kk in seq_along(NAMES)) {
[11:02:04.746]                   name <- removed[[kk]]
[11:02:04.746]                   NAME <- NAMES[[kk]]
[11:02:04.746]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.746]                     next
[11:02:04.746]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.746]                 }
[11:02:04.746]                 if (length(args) > 0) 
[11:02:04.746]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.746]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.746]             }
[11:02:04.746]             else {
[11:02:04.746]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.746]             }
[11:02:04.746]             {
[11:02:04.746]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.746]                   0L) {
[11:02:04.746]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.746]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.746]                   base::options(opts)
[11:02:04.746]                 }
[11:02:04.746]                 {
[11:02:04.746]                   {
[11:02:04.746]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.746]                     NULL
[11:02:04.746]                   }
[11:02:04.746]                   options(future.plan = NULL)
[11:02:04.746]                   if (is.na(NA_character_)) 
[11:02:04.746]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.746]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.746]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.746]                     .init = FALSE)
[11:02:04.746]                 }
[11:02:04.746]             }
[11:02:04.746]         }
[11:02:04.746]     })
[11:02:04.746]     if (TRUE) {
[11:02:04.746]         base::sink(type = "output", split = FALSE)
[11:02:04.746]         if (TRUE) {
[11:02:04.746]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.746]         }
[11:02:04.746]         else {
[11:02:04.746]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.746]         }
[11:02:04.746]         base::close(...future.stdout)
[11:02:04.746]         ...future.stdout <- NULL
[11:02:04.746]     }
[11:02:04.746]     ...future.result$conditions <- ...future.conditions
[11:02:04.746]     ...future.result$finished <- base::Sys.time()
[11:02:04.746]     ...future.result
[11:02:04.746] }
[11:02:04.748] requestCore(): workers = 2
[11:02:04.750] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.751] plan(): Setting new future strategy stack:
[11:02:04.751] List of future strategies:
[11:02:04.751] 1. sequential:
[11:02:04.751]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.751]    - tweaked: FALSE
[11:02:04.751]    - call: NULL
[11:02:04.752] plan(): nbrOfWorkers() = 1
[11:02:04.754] plan(): Setting new future strategy stack:
[11:02:04.754] List of future strategies:
[11:02:04.754] 1. multicore:
[11:02:04.754]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.754]    - tweaked: FALSE
[11:02:04.754]    - call: plan(multicore)
[11:02:04.757] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.760] result() for MulticoreFuture ...
[11:02:04.762] result() for MulticoreFuture ...
[11:02:04.763] result() for MulticoreFuture ... done
[11:02:04.763] signalConditions() ...
[11:02:04.763]  - include = ‘immediateCondition’
[11:02:04.763]  - exclude = 
[11:02:04.763]  - resignal = FALSE
[11:02:04.763]  - Number of conditions: 1
[11:02:04.763] signalConditions() ... done
[11:02:04.763] result() for MulticoreFuture ... done
[11:02:04.763] result() for MulticoreFuture ...
[11:02:04.764] result() for MulticoreFuture ... done
[11:02:04.764] signalConditions() ...
[11:02:04.764]  - include = ‘immediateCondition’
[11:02:04.764]  - exclude = 
[11:02:04.764]  - resignal = FALSE
[11:02:04.764]  - Number of conditions: 1
[11:02:04.764] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.765] result() for MulticoreFuture ...
[11:02:04.765] result() for MulticoreFuture ... done
[11:02:04.765] result() for MulticoreFuture ...
[11:02:04.765] result() for MulticoreFuture ... done
[11:02:04.765] signalConditions() ...
[11:02:04.765]  - include = ‘immediateCondition’
[11:02:04.766]  - exclude = 
[11:02:04.766]  - resignal = FALSE
[11:02:04.766]  - Number of conditions: 1
[11:02:04.766] signalConditions() ... done
[11:02:04.766] Future state: ‘finished’
[11:02:04.766] result() for MulticoreFuture ...
[11:02:04.766] result() for MulticoreFuture ... done
[11:02:04.766] signalConditions() ...
[11:02:04.766]  - include = ‘condition’
[11:02:04.767]  - exclude = ‘immediateCondition’
[11:02:04.767]  - resignal = TRUE
[11:02:04.767]  - Number of conditions: 1
[11:02:04.767]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.767] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.768] result() for MulticoreFuture ...
[11:02:04.768] result() for MulticoreFuture ... done
[11:02:04.768] result() for MulticoreFuture ...
[11:02:04.768] result() for MulticoreFuture ... done
[11:02:04.768] signalConditions() ...
[11:02:04.768]  - include = ‘immediateCondition’
[11:02:04.768]  - exclude = 
[11:02:04.768]  - resignal = FALSE
[11:02:04.769]  - Number of conditions: 1
[11:02:04.769] signalConditions() ... done
[11:02:04.769] Future state: ‘finished’
[11:02:04.769] result() for MulticoreFuture ...
[11:02:04.769] result() for MulticoreFuture ... done
[11:02:04.769] signalConditions() ...
[11:02:04.769]  - include = ‘condition’
[11:02:04.769]  - exclude = ‘immediateCondition’
[11:02:04.769]  - resignal = TRUE
[11:02:04.770]  - Number of conditions: 1
[11:02:04.770]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.770] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.772] getGlobalsAndPackages() ...
[11:02:04.772] 
[11:02:04.773] - globals: [0] <none>
[11:02:04.773] getGlobalsAndPackages() ... DONE
[11:02:04.773] Packages needed by the future expression (n = 0): <none>
[11:02:04.773] Packages needed by future strategies (n = 0): <none>
[11:02:04.774] {
[11:02:04.774]     {
[11:02:04.774]         {
[11:02:04.774]             ...future.startTime <- base::Sys.time()
[11:02:04.774]             {
[11:02:04.774]                 {
[11:02:04.774]                   {
[11:02:04.774]                     {
[11:02:04.774]                       base::local({
[11:02:04.774]                         has_future <- base::requireNamespace("future", 
[11:02:04.774]                           quietly = TRUE)
[11:02:04.774]                         if (has_future) {
[11:02:04.774]                           ns <- base::getNamespace("future")
[11:02:04.774]                           version <- ns[[".package"]][["version"]]
[11:02:04.774]                           if (is.null(version)) 
[11:02:04.774]                             version <- utils::packageVersion("future")
[11:02:04.774]                         }
[11:02:04.774]                         else {
[11:02:04.774]                           version <- NULL
[11:02:04.774]                         }
[11:02:04.774]                         if (!has_future || version < "1.8.0") {
[11:02:04.774]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.774]                             "", base::R.version$version.string), 
[11:02:04.774]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.774]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.774]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.774]                               "release", "version")], collapse = " "), 
[11:02:04.774]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.774]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.774]                             info)
[11:02:04.774]                           info <- base::paste(info, collapse = "; ")
[11:02:04.774]                           if (!has_future) {
[11:02:04.774]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.774]                               info)
[11:02:04.774]                           }
[11:02:04.774]                           else {
[11:02:04.774]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.774]                               info, version)
[11:02:04.774]                           }
[11:02:04.774]                           base::stop(msg)
[11:02:04.774]                         }
[11:02:04.774]                       })
[11:02:04.774]                     }
[11:02:04.774]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.774]                     base::options(mc.cores = 1L)
[11:02:04.774]                   }
[11:02:04.774]                   ...future.strategy.old <- future::plan("list")
[11:02:04.774]                   options(future.plan = NULL)
[11:02:04.774]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.774]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.774]                 }
[11:02:04.774]                 ...future.workdir <- getwd()
[11:02:04.774]             }
[11:02:04.774]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.774]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.774]         }
[11:02:04.774]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.774]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.774]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.774]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.774]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.774]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.774]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.774]             base::names(...future.oldOptions))
[11:02:04.774]     }
[11:02:04.774]     if (FALSE) {
[11:02:04.774]     }
[11:02:04.774]     else {
[11:02:04.774]         if (TRUE) {
[11:02:04.774]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.774]                 open = "w")
[11:02:04.774]         }
[11:02:04.774]         else {
[11:02:04.774]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.774]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.774]         }
[11:02:04.774]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.774]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.774]             base::sink(type = "output", split = FALSE)
[11:02:04.774]             base::close(...future.stdout)
[11:02:04.774]         }, add = TRUE)
[11:02:04.774]     }
[11:02:04.774]     ...future.frame <- base::sys.nframe()
[11:02:04.774]     ...future.conditions <- base::list()
[11:02:04.774]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.774]     if (FALSE) {
[11:02:04.774]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.774]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.774]     }
[11:02:04.774]     ...future.result <- base::tryCatch({
[11:02:04.774]         base::withCallingHandlers({
[11:02:04.774]             ...future.value <- base::withVisible(base::local({
[11:02:04.774]                 withCallingHandlers({
[11:02:04.774]                   {
[11:02:04.774]                     stop(structure(list(message = "boom"), class = c("MyError", 
[11:02:04.774]                       "error", "condition")))
[11:02:04.774]                   }
[11:02:04.774]                 }, immediateCondition = function(cond) {
[11:02:04.774]                   save_rds <- function (object, pathname, ...) 
[11:02:04.774]                   {
[11:02:04.774]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.774]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.774]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.774]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.774]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.774]                         fi_tmp[["mtime"]])
[11:02:04.774]                     }
[11:02:04.774]                     tryCatch({
[11:02:04.774]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.774]                     }, error = function(ex) {
[11:02:04.774]                       msg <- conditionMessage(ex)
[11:02:04.774]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.774]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.774]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.774]                         fi_tmp[["mtime"]], msg)
[11:02:04.774]                       ex$message <- msg
[11:02:04.774]                       stop(ex)
[11:02:04.774]                     })
[11:02:04.774]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.774]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.774]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.774]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.774]                       fi <- file.info(pathname)
[11:02:04.774]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.774]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.774]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.774]                         fi[["size"]], fi[["mtime"]])
[11:02:04.774]                       stop(msg)
[11:02:04.774]                     }
[11:02:04.774]                     invisible(pathname)
[11:02:04.774]                   }
[11:02:04.774]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.774]                     rootPath = tempdir()) 
[11:02:04.774]                   {
[11:02:04.774]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.774]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.774]                       tmpdir = path, fileext = ".rds")
[11:02:04.774]                     save_rds(obj, file)
[11:02:04.774]                   }
[11:02:04.774]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.774]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.774]                   {
[11:02:04.774]                     inherits <- base::inherits
[11:02:04.774]                     invokeRestart <- base::invokeRestart
[11:02:04.774]                     is.null <- base::is.null
[11:02:04.774]                     muffled <- FALSE
[11:02:04.774]                     if (inherits(cond, "message")) {
[11:02:04.774]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.774]                       if (muffled) 
[11:02:04.774]                         invokeRestart("muffleMessage")
[11:02:04.774]                     }
[11:02:04.774]                     else if (inherits(cond, "warning")) {
[11:02:04.774]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.774]                       if (muffled) 
[11:02:04.774]                         invokeRestart("muffleWarning")
[11:02:04.774]                     }
[11:02:04.774]                     else if (inherits(cond, "condition")) {
[11:02:04.774]                       if (!is.null(pattern)) {
[11:02:04.774]                         computeRestarts <- base::computeRestarts
[11:02:04.774]                         grepl <- base::grepl
[11:02:04.774]                         restarts <- computeRestarts(cond)
[11:02:04.774]                         for (restart in restarts) {
[11:02:04.774]                           name <- restart$name
[11:02:04.774]                           if (is.null(name)) 
[11:02:04.774]                             next
[11:02:04.774]                           if (!grepl(pattern, name)) 
[11:02:04.774]                             next
[11:02:04.774]                           invokeRestart(restart)
[11:02:04.774]                           muffled <- TRUE
[11:02:04.774]                           break
[11:02:04.774]                         }
[11:02:04.774]                       }
[11:02:04.774]                     }
[11:02:04.774]                     invisible(muffled)
[11:02:04.774]                   }
[11:02:04.774]                   muffleCondition(cond)
[11:02:04.774]                 })
[11:02:04.774]             }))
[11:02:04.774]             future::FutureResult(value = ...future.value$value, 
[11:02:04.774]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.774]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.774]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.774]                     ...future.globalenv.names))
[11:02:04.774]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.774]         }, condition = base::local({
[11:02:04.774]             c <- base::c
[11:02:04.774]             inherits <- base::inherits
[11:02:04.774]             invokeRestart <- base::invokeRestart
[11:02:04.774]             length <- base::length
[11:02:04.774]             list <- base::list
[11:02:04.774]             seq.int <- base::seq.int
[11:02:04.774]             signalCondition <- base::signalCondition
[11:02:04.774]             sys.calls <- base::sys.calls
[11:02:04.774]             `[[` <- base::`[[`
[11:02:04.774]             `+` <- base::`+`
[11:02:04.774]             `<<-` <- base::`<<-`
[11:02:04.774]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.774]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.774]                   3L)]
[11:02:04.774]             }
[11:02:04.774]             function(cond) {
[11:02:04.774]                 is_error <- inherits(cond, "error")
[11:02:04.774]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.774]                   NULL)
[11:02:04.774]                 if (is_error) {
[11:02:04.774]                   sessionInformation <- function() {
[11:02:04.774]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.774]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.774]                       search = base::search(), system = base::Sys.info())
[11:02:04.774]                   }
[11:02:04.774]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.774]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.774]                     cond$call), session = sessionInformation(), 
[11:02:04.774]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.774]                   signalCondition(cond)
[11:02:04.774]                 }
[11:02:04.774]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.774]                 "immediateCondition"))) {
[11:02:04.774]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.774]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.774]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.774]                   if (TRUE && !signal) {
[11:02:04.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.774]                     {
[11:02:04.774]                       inherits <- base::inherits
[11:02:04.774]                       invokeRestart <- base::invokeRestart
[11:02:04.774]                       is.null <- base::is.null
[11:02:04.774]                       muffled <- FALSE
[11:02:04.774]                       if (inherits(cond, "message")) {
[11:02:04.774]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.774]                         if (muffled) 
[11:02:04.774]                           invokeRestart("muffleMessage")
[11:02:04.774]                       }
[11:02:04.774]                       else if (inherits(cond, "warning")) {
[11:02:04.774]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.774]                         if (muffled) 
[11:02:04.774]                           invokeRestart("muffleWarning")
[11:02:04.774]                       }
[11:02:04.774]                       else if (inherits(cond, "condition")) {
[11:02:04.774]                         if (!is.null(pattern)) {
[11:02:04.774]                           computeRestarts <- base::computeRestarts
[11:02:04.774]                           grepl <- base::grepl
[11:02:04.774]                           restarts <- computeRestarts(cond)
[11:02:04.774]                           for (restart in restarts) {
[11:02:04.774]                             name <- restart$name
[11:02:04.774]                             if (is.null(name)) 
[11:02:04.774]                               next
[11:02:04.774]                             if (!grepl(pattern, name)) 
[11:02:04.774]                               next
[11:02:04.774]                             invokeRestart(restart)
[11:02:04.774]                             muffled <- TRUE
[11:02:04.774]                             break
[11:02:04.774]                           }
[11:02:04.774]                         }
[11:02:04.774]                       }
[11:02:04.774]                       invisible(muffled)
[11:02:04.774]                     }
[11:02:04.774]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.774]                   }
[11:02:04.774]                 }
[11:02:04.774]                 else {
[11:02:04.774]                   if (TRUE) {
[11:02:04.774]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.774]                     {
[11:02:04.774]                       inherits <- base::inherits
[11:02:04.774]                       invokeRestart <- base::invokeRestart
[11:02:04.774]                       is.null <- base::is.null
[11:02:04.774]                       muffled <- FALSE
[11:02:04.774]                       if (inherits(cond, "message")) {
[11:02:04.774]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.774]                         if (muffled) 
[11:02:04.774]                           invokeRestart("muffleMessage")
[11:02:04.774]                       }
[11:02:04.774]                       else if (inherits(cond, "warning")) {
[11:02:04.774]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.774]                         if (muffled) 
[11:02:04.774]                           invokeRestart("muffleWarning")
[11:02:04.774]                       }
[11:02:04.774]                       else if (inherits(cond, "condition")) {
[11:02:04.774]                         if (!is.null(pattern)) {
[11:02:04.774]                           computeRestarts <- base::computeRestarts
[11:02:04.774]                           grepl <- base::grepl
[11:02:04.774]                           restarts <- computeRestarts(cond)
[11:02:04.774]                           for (restart in restarts) {
[11:02:04.774]                             name <- restart$name
[11:02:04.774]                             if (is.null(name)) 
[11:02:04.774]                               next
[11:02:04.774]                             if (!grepl(pattern, name)) 
[11:02:04.774]                               next
[11:02:04.774]                             invokeRestart(restart)
[11:02:04.774]                             muffled <- TRUE
[11:02:04.774]                             break
[11:02:04.774]                           }
[11:02:04.774]                         }
[11:02:04.774]                       }
[11:02:04.774]                       invisible(muffled)
[11:02:04.774]                     }
[11:02:04.774]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.774]                   }
[11:02:04.774]                 }
[11:02:04.774]             }
[11:02:04.774]         }))
[11:02:04.774]     }, error = function(ex) {
[11:02:04.774]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.774]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.774]                 ...future.rng), started = ...future.startTime, 
[11:02:04.774]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.774]             version = "1.8"), class = "FutureResult")
[11:02:04.774]     }, finally = {
[11:02:04.774]         if (!identical(...future.workdir, getwd())) 
[11:02:04.774]             setwd(...future.workdir)
[11:02:04.774]         {
[11:02:04.774]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.774]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.774]             }
[11:02:04.774]             base::options(...future.oldOptions)
[11:02:04.774]             if (.Platform$OS.type == "windows") {
[11:02:04.774]                 old_names <- names(...future.oldEnvVars)
[11:02:04.774]                 envs <- base::Sys.getenv()
[11:02:04.774]                 names <- names(envs)
[11:02:04.774]                 common <- intersect(names, old_names)
[11:02:04.774]                 added <- setdiff(names, old_names)
[11:02:04.774]                 removed <- setdiff(old_names, names)
[11:02:04.774]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.774]                   envs[common]]
[11:02:04.774]                 NAMES <- toupper(changed)
[11:02:04.774]                 args <- list()
[11:02:04.774]                 for (kk in seq_along(NAMES)) {
[11:02:04.774]                   name <- changed[[kk]]
[11:02:04.774]                   NAME <- NAMES[[kk]]
[11:02:04.774]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.774]                     next
[11:02:04.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.774]                 }
[11:02:04.774]                 NAMES <- toupper(added)
[11:02:04.774]                 for (kk in seq_along(NAMES)) {
[11:02:04.774]                   name <- added[[kk]]
[11:02:04.774]                   NAME <- NAMES[[kk]]
[11:02:04.774]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.774]                     next
[11:02:04.774]                   args[[name]] <- ""
[11:02:04.774]                 }
[11:02:04.774]                 NAMES <- toupper(removed)
[11:02:04.774]                 for (kk in seq_along(NAMES)) {
[11:02:04.774]                   name <- removed[[kk]]
[11:02:04.774]                   NAME <- NAMES[[kk]]
[11:02:04.774]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.774]                     next
[11:02:04.774]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.774]                 }
[11:02:04.774]                 if (length(args) > 0) 
[11:02:04.774]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.774]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.774]             }
[11:02:04.774]             else {
[11:02:04.774]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.774]             }
[11:02:04.774]             {
[11:02:04.774]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.774]                   0L) {
[11:02:04.774]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.774]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.774]                   base::options(opts)
[11:02:04.774]                 }
[11:02:04.774]                 {
[11:02:04.774]                   {
[11:02:04.774]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.774]                     NULL
[11:02:04.774]                   }
[11:02:04.774]                   options(future.plan = NULL)
[11:02:04.774]                   if (is.na(NA_character_)) 
[11:02:04.774]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.774]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.774]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.774]                     .init = FALSE)
[11:02:04.774]                 }
[11:02:04.774]             }
[11:02:04.774]         }
[11:02:04.774]     })
[11:02:04.774]     if (TRUE) {
[11:02:04.774]         base::sink(type = "output", split = FALSE)
[11:02:04.774]         if (TRUE) {
[11:02:04.774]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.774]         }
[11:02:04.774]         else {
[11:02:04.774]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.774]         }
[11:02:04.774]         base::close(...future.stdout)
[11:02:04.774]         ...future.stdout <- NULL
[11:02:04.774]     }
[11:02:04.774]     ...future.result$conditions <- ...future.conditions
[11:02:04.774]     ...future.result$finished <- base::Sys.time()
[11:02:04.774]     ...future.result
[11:02:04.774] }
[11:02:04.776] requestCore(): workers = 2
[11:02:04.780] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.781] plan(): Setting new future strategy stack:
[11:02:04.781] List of future strategies:
[11:02:04.781] 1. sequential:
[11:02:04.781]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.781]    - tweaked: FALSE
[11:02:04.781]    - call: NULL
[11:02:04.783] plan(): nbrOfWorkers() = 1
[11:02:04.785] plan(): Setting new future strategy stack:
[11:02:04.785] List of future strategies:
[11:02:04.785] 1. multicore:
[11:02:04.785]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.785]    - tweaked: FALSE
[11:02:04.785]    - call: plan(multicore)
[11:02:04.788] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.791] result() for MulticoreFuture ...
[11:02:04.794] result() for MulticoreFuture ...
[11:02:04.794] result() for MulticoreFuture ... done
[11:02:04.794] signalConditions() ...
[11:02:04.794]  - include = ‘immediateCondition’
[11:02:04.794]  - exclude = 
[11:02:04.794]  - resignal = FALSE
[11:02:04.794]  - Number of conditions: 1
[11:02:04.794] signalConditions() ... done
[11:02:04.795] result() for MulticoreFuture ... done
[11:02:04.795] result() for MulticoreFuture ...
[11:02:04.795] result() for MulticoreFuture ... done
[11:02:04.795] signalConditions() ...
[11:02:04.795]  - include = ‘immediateCondition’
[11:02:04.795]  - exclude = 
[11:02:04.795]  - resignal = FALSE
[11:02:04.795]  - Number of conditions: 1
[11:02:04.795] signalConditions() ... done
<MyError: boom>
[11:02:04.796] result() for MulticoreFuture ...
[11:02:04.796] result() for MulticoreFuture ... done
[11:02:04.796] result() for MulticoreFuture ...
[11:02:04.796] result() for MulticoreFuture ... done
[11:02:04.796] signalConditions() ...
[11:02:04.796]  - include = ‘immediateCondition’
[11:02:04.796]  - exclude = 
[11:02:04.796]  - resignal = FALSE
[11:02:04.797]  - Number of conditions: 1
[11:02:04.797] signalConditions() ... done
[11:02:04.797] Future state: ‘finished’
[11:02:04.797] result() for MulticoreFuture ...
[11:02:04.797] result() for MulticoreFuture ... done
[11:02:04.797] signalConditions() ...
[11:02:04.797]  - include = ‘condition’
[11:02:04.797]  - exclude = ‘immediateCondition’
[11:02:04.798]  - resignal = TRUE
[11:02:04.798]  - Number of conditions: 1
[11:02:04.798]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[11:02:04.798] signalConditions() ... done
*** multicore(..., globals = TRUE) without globals
[11:02:04.800] getGlobalsAndPackages() ...
[11:02:04.800] Searching for globals...
[11:02:04.801] - globals found: [1] ‘{’
[11:02:04.801] Searching for globals ... DONE
[11:02:04.801] Resolving globals: FALSE
[11:02:04.801] 
[11:02:04.802] 
[11:02:04.802] getGlobalsAndPackages() ... DONE
[11:02:04.802] Packages needed by the future expression (n = 0): <none>
[11:02:04.802] Packages needed by future strategies (n = 0): <none>
[11:02:04.803] {
[11:02:04.803]     {
[11:02:04.803]         {
[11:02:04.803]             ...future.startTime <- base::Sys.time()
[11:02:04.803]             {
[11:02:04.803]                 {
[11:02:04.803]                   {
[11:02:04.803]                     {
[11:02:04.803]                       base::local({
[11:02:04.803]                         has_future <- base::requireNamespace("future", 
[11:02:04.803]                           quietly = TRUE)
[11:02:04.803]                         if (has_future) {
[11:02:04.803]                           ns <- base::getNamespace("future")
[11:02:04.803]                           version <- ns[[".package"]][["version"]]
[11:02:04.803]                           if (is.null(version)) 
[11:02:04.803]                             version <- utils::packageVersion("future")
[11:02:04.803]                         }
[11:02:04.803]                         else {
[11:02:04.803]                           version <- NULL
[11:02:04.803]                         }
[11:02:04.803]                         if (!has_future || version < "1.8.0") {
[11:02:04.803]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.803]                             "", base::R.version$version.string), 
[11:02:04.803]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.803]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.803]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.803]                               "release", "version")], collapse = " "), 
[11:02:04.803]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.803]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.803]                             info)
[11:02:04.803]                           info <- base::paste(info, collapse = "; ")
[11:02:04.803]                           if (!has_future) {
[11:02:04.803]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.803]                               info)
[11:02:04.803]                           }
[11:02:04.803]                           else {
[11:02:04.803]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.803]                               info, version)
[11:02:04.803]                           }
[11:02:04.803]                           base::stop(msg)
[11:02:04.803]                         }
[11:02:04.803]                       })
[11:02:04.803]                     }
[11:02:04.803]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.803]                     base::options(mc.cores = 1L)
[11:02:04.803]                   }
[11:02:04.803]                   ...future.strategy.old <- future::plan("list")
[11:02:04.803]                   options(future.plan = NULL)
[11:02:04.803]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.803]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.803]                 }
[11:02:04.803]                 ...future.workdir <- getwd()
[11:02:04.803]             }
[11:02:04.803]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.803]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.803]         }
[11:02:04.803]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.803]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.803]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.803]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.803]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.803]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.803]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.803]             base::names(...future.oldOptions))
[11:02:04.803]     }
[11:02:04.803]     if (FALSE) {
[11:02:04.803]     }
[11:02:04.803]     else {
[11:02:04.803]         if (TRUE) {
[11:02:04.803]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.803]                 open = "w")
[11:02:04.803]         }
[11:02:04.803]         else {
[11:02:04.803]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.803]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.803]         }
[11:02:04.803]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.803]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.803]             base::sink(type = "output", split = FALSE)
[11:02:04.803]             base::close(...future.stdout)
[11:02:04.803]         }, add = TRUE)
[11:02:04.803]     }
[11:02:04.803]     ...future.frame <- base::sys.nframe()
[11:02:04.803]     ...future.conditions <- base::list()
[11:02:04.803]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.803]     if (FALSE) {
[11:02:04.803]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.803]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.803]     }
[11:02:04.803]     ...future.result <- base::tryCatch({
[11:02:04.803]         base::withCallingHandlers({
[11:02:04.803]             ...future.value <- base::withVisible(base::local({
[11:02:04.803]                 withCallingHandlers({
[11:02:04.803]                   {
[11:02:04.803]                     42L
[11:02:04.803]                   }
[11:02:04.803]                 }, immediateCondition = function(cond) {
[11:02:04.803]                   save_rds <- function (object, pathname, ...) 
[11:02:04.803]                   {
[11:02:04.803]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.803]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.803]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.803]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.803]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.803]                         fi_tmp[["mtime"]])
[11:02:04.803]                     }
[11:02:04.803]                     tryCatch({
[11:02:04.803]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.803]                     }, error = function(ex) {
[11:02:04.803]                       msg <- conditionMessage(ex)
[11:02:04.803]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.803]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.803]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.803]                         fi_tmp[["mtime"]], msg)
[11:02:04.803]                       ex$message <- msg
[11:02:04.803]                       stop(ex)
[11:02:04.803]                     })
[11:02:04.803]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.803]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.803]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.803]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.803]                       fi <- file.info(pathname)
[11:02:04.803]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.803]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.803]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.803]                         fi[["size"]], fi[["mtime"]])
[11:02:04.803]                       stop(msg)
[11:02:04.803]                     }
[11:02:04.803]                     invisible(pathname)
[11:02:04.803]                   }
[11:02:04.803]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.803]                     rootPath = tempdir()) 
[11:02:04.803]                   {
[11:02:04.803]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.803]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.803]                       tmpdir = path, fileext = ".rds")
[11:02:04.803]                     save_rds(obj, file)
[11:02:04.803]                   }
[11:02:04.803]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.803]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.803]                   {
[11:02:04.803]                     inherits <- base::inherits
[11:02:04.803]                     invokeRestart <- base::invokeRestart
[11:02:04.803]                     is.null <- base::is.null
[11:02:04.803]                     muffled <- FALSE
[11:02:04.803]                     if (inherits(cond, "message")) {
[11:02:04.803]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.803]                       if (muffled) 
[11:02:04.803]                         invokeRestart("muffleMessage")
[11:02:04.803]                     }
[11:02:04.803]                     else if (inherits(cond, "warning")) {
[11:02:04.803]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.803]                       if (muffled) 
[11:02:04.803]                         invokeRestart("muffleWarning")
[11:02:04.803]                     }
[11:02:04.803]                     else if (inherits(cond, "condition")) {
[11:02:04.803]                       if (!is.null(pattern)) {
[11:02:04.803]                         computeRestarts <- base::computeRestarts
[11:02:04.803]                         grepl <- base::grepl
[11:02:04.803]                         restarts <- computeRestarts(cond)
[11:02:04.803]                         for (restart in restarts) {
[11:02:04.803]                           name <- restart$name
[11:02:04.803]                           if (is.null(name)) 
[11:02:04.803]                             next
[11:02:04.803]                           if (!grepl(pattern, name)) 
[11:02:04.803]                             next
[11:02:04.803]                           invokeRestart(restart)
[11:02:04.803]                           muffled <- TRUE
[11:02:04.803]                           break
[11:02:04.803]                         }
[11:02:04.803]                       }
[11:02:04.803]                     }
[11:02:04.803]                     invisible(muffled)
[11:02:04.803]                   }
[11:02:04.803]                   muffleCondition(cond)
[11:02:04.803]                 })
[11:02:04.803]             }))
[11:02:04.803]             future::FutureResult(value = ...future.value$value, 
[11:02:04.803]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.803]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.803]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.803]                     ...future.globalenv.names))
[11:02:04.803]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.803]         }, condition = base::local({
[11:02:04.803]             c <- base::c
[11:02:04.803]             inherits <- base::inherits
[11:02:04.803]             invokeRestart <- base::invokeRestart
[11:02:04.803]             length <- base::length
[11:02:04.803]             list <- base::list
[11:02:04.803]             seq.int <- base::seq.int
[11:02:04.803]             signalCondition <- base::signalCondition
[11:02:04.803]             sys.calls <- base::sys.calls
[11:02:04.803]             `[[` <- base::`[[`
[11:02:04.803]             `+` <- base::`+`
[11:02:04.803]             `<<-` <- base::`<<-`
[11:02:04.803]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.803]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.803]                   3L)]
[11:02:04.803]             }
[11:02:04.803]             function(cond) {
[11:02:04.803]                 is_error <- inherits(cond, "error")
[11:02:04.803]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.803]                   NULL)
[11:02:04.803]                 if (is_error) {
[11:02:04.803]                   sessionInformation <- function() {
[11:02:04.803]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.803]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.803]                       search = base::search(), system = base::Sys.info())
[11:02:04.803]                   }
[11:02:04.803]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.803]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.803]                     cond$call), session = sessionInformation(), 
[11:02:04.803]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.803]                   signalCondition(cond)
[11:02:04.803]                 }
[11:02:04.803]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.803]                 "immediateCondition"))) {
[11:02:04.803]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.803]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.803]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.803]                   if (TRUE && !signal) {
[11:02:04.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.803]                     {
[11:02:04.803]                       inherits <- base::inherits
[11:02:04.803]                       invokeRestart <- base::invokeRestart
[11:02:04.803]                       is.null <- base::is.null
[11:02:04.803]                       muffled <- FALSE
[11:02:04.803]                       if (inherits(cond, "message")) {
[11:02:04.803]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.803]                         if (muffled) 
[11:02:04.803]                           invokeRestart("muffleMessage")
[11:02:04.803]                       }
[11:02:04.803]                       else if (inherits(cond, "warning")) {
[11:02:04.803]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.803]                         if (muffled) 
[11:02:04.803]                           invokeRestart("muffleWarning")
[11:02:04.803]                       }
[11:02:04.803]                       else if (inherits(cond, "condition")) {
[11:02:04.803]                         if (!is.null(pattern)) {
[11:02:04.803]                           computeRestarts <- base::computeRestarts
[11:02:04.803]                           grepl <- base::grepl
[11:02:04.803]                           restarts <- computeRestarts(cond)
[11:02:04.803]                           for (restart in restarts) {
[11:02:04.803]                             name <- restart$name
[11:02:04.803]                             if (is.null(name)) 
[11:02:04.803]                               next
[11:02:04.803]                             if (!grepl(pattern, name)) 
[11:02:04.803]                               next
[11:02:04.803]                             invokeRestart(restart)
[11:02:04.803]                             muffled <- TRUE
[11:02:04.803]                             break
[11:02:04.803]                           }
[11:02:04.803]                         }
[11:02:04.803]                       }
[11:02:04.803]                       invisible(muffled)
[11:02:04.803]                     }
[11:02:04.803]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.803]                   }
[11:02:04.803]                 }
[11:02:04.803]                 else {
[11:02:04.803]                   if (TRUE) {
[11:02:04.803]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.803]                     {
[11:02:04.803]                       inherits <- base::inherits
[11:02:04.803]                       invokeRestart <- base::invokeRestart
[11:02:04.803]                       is.null <- base::is.null
[11:02:04.803]                       muffled <- FALSE
[11:02:04.803]                       if (inherits(cond, "message")) {
[11:02:04.803]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.803]                         if (muffled) 
[11:02:04.803]                           invokeRestart("muffleMessage")
[11:02:04.803]                       }
[11:02:04.803]                       else if (inherits(cond, "warning")) {
[11:02:04.803]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.803]                         if (muffled) 
[11:02:04.803]                           invokeRestart("muffleWarning")
[11:02:04.803]                       }
[11:02:04.803]                       else if (inherits(cond, "condition")) {
[11:02:04.803]                         if (!is.null(pattern)) {
[11:02:04.803]                           computeRestarts <- base::computeRestarts
[11:02:04.803]                           grepl <- base::grepl
[11:02:04.803]                           restarts <- computeRestarts(cond)
[11:02:04.803]                           for (restart in restarts) {
[11:02:04.803]                             name <- restart$name
[11:02:04.803]                             if (is.null(name)) 
[11:02:04.803]                               next
[11:02:04.803]                             if (!grepl(pattern, name)) 
[11:02:04.803]                               next
[11:02:04.803]                             invokeRestart(restart)
[11:02:04.803]                             muffled <- TRUE
[11:02:04.803]                             break
[11:02:04.803]                           }
[11:02:04.803]                         }
[11:02:04.803]                       }
[11:02:04.803]                       invisible(muffled)
[11:02:04.803]                     }
[11:02:04.803]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.803]                   }
[11:02:04.803]                 }
[11:02:04.803]             }
[11:02:04.803]         }))
[11:02:04.803]     }, error = function(ex) {
[11:02:04.803]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.803]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.803]                 ...future.rng), started = ...future.startTime, 
[11:02:04.803]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.803]             version = "1.8"), class = "FutureResult")
[11:02:04.803]     }, finally = {
[11:02:04.803]         if (!identical(...future.workdir, getwd())) 
[11:02:04.803]             setwd(...future.workdir)
[11:02:04.803]         {
[11:02:04.803]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.803]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.803]             }
[11:02:04.803]             base::options(...future.oldOptions)
[11:02:04.803]             if (.Platform$OS.type == "windows") {
[11:02:04.803]                 old_names <- names(...future.oldEnvVars)
[11:02:04.803]                 envs <- base::Sys.getenv()
[11:02:04.803]                 names <- names(envs)
[11:02:04.803]                 common <- intersect(names, old_names)
[11:02:04.803]                 added <- setdiff(names, old_names)
[11:02:04.803]                 removed <- setdiff(old_names, names)
[11:02:04.803]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.803]                   envs[common]]
[11:02:04.803]                 NAMES <- toupper(changed)
[11:02:04.803]                 args <- list()
[11:02:04.803]                 for (kk in seq_along(NAMES)) {
[11:02:04.803]                   name <- changed[[kk]]
[11:02:04.803]                   NAME <- NAMES[[kk]]
[11:02:04.803]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.803]                     next
[11:02:04.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.803]                 }
[11:02:04.803]                 NAMES <- toupper(added)
[11:02:04.803]                 for (kk in seq_along(NAMES)) {
[11:02:04.803]                   name <- added[[kk]]
[11:02:04.803]                   NAME <- NAMES[[kk]]
[11:02:04.803]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.803]                     next
[11:02:04.803]                   args[[name]] <- ""
[11:02:04.803]                 }
[11:02:04.803]                 NAMES <- toupper(removed)
[11:02:04.803]                 for (kk in seq_along(NAMES)) {
[11:02:04.803]                   name <- removed[[kk]]
[11:02:04.803]                   NAME <- NAMES[[kk]]
[11:02:04.803]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.803]                     next
[11:02:04.803]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.803]                 }
[11:02:04.803]                 if (length(args) > 0) 
[11:02:04.803]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.803]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.803]             }
[11:02:04.803]             else {
[11:02:04.803]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.803]             }
[11:02:04.803]             {
[11:02:04.803]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.803]                   0L) {
[11:02:04.803]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.803]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.803]                   base::options(opts)
[11:02:04.803]                 }
[11:02:04.803]                 {
[11:02:04.803]                   {
[11:02:04.803]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.803]                     NULL
[11:02:04.803]                   }
[11:02:04.803]                   options(future.plan = NULL)
[11:02:04.803]                   if (is.na(NA_character_)) 
[11:02:04.803]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.803]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.803]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.803]                     .init = FALSE)
[11:02:04.803]                 }
[11:02:04.803]             }
[11:02:04.803]         }
[11:02:04.803]     })
[11:02:04.803]     if (TRUE) {
[11:02:04.803]         base::sink(type = "output", split = FALSE)
[11:02:04.803]         if (TRUE) {
[11:02:04.803]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.803]         }
[11:02:04.803]         else {
[11:02:04.803]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.803]         }
[11:02:04.803]         base::close(...future.stdout)
[11:02:04.803]         ...future.stdout <- NULL
[11:02:04.803]     }
[11:02:04.803]     ...future.result$conditions <- ...future.conditions
[11:02:04.803]     ...future.result$finished <- base::Sys.time()
[11:02:04.803]     ...future.result
[11:02:04.803] }
[11:02:04.806] requestCore(): workers = 2
[11:02:04.807] MulticoreFuture started
[11:02:04.808] plan(): Setting new future strategy stack:
[11:02:04.808] List of future strategies:
[11:02:04.808] 1. sequential:
[11:02:04.808]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.808]    - tweaked: FALSE
[11:02:04.808]    - call: NULL
[11:02:04.809] plan(): nbrOfWorkers() = 1
[11:02:04.811] plan(): Setting new future strategy stack:
[11:02:04.811] List of future strategies:
[11:02:04.811] 1. multicore:
[11:02:04.811]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.811]    - tweaked: FALSE
[11:02:04.811]    - call: plan(multicore)
[11:02:04.814] plan(): nbrOfWorkers() = 2
[1] TRUE
[11:02:04.815] result() for MulticoreFuture ...
[11:02:04.816] result() for MulticoreFuture ...
[11:02:04.816] result() for MulticoreFuture ... done
[11:02:04.816] result() for MulticoreFuture ... done
[11:02:04.816] result() for MulticoreFuture ...
[11:02:04.816] result() for MulticoreFuture ... done
[1] 42
*** multicore(..., globals = TRUE) with globals
[11:02:04.818] getGlobalsAndPackages() ...
[11:02:04.819] Searching for globals...
[11:02:04.821] - globals found: [4] ‘{’, ‘<-’, ‘*’, ‘a’
[11:02:04.821] Searching for globals ... DONE
[11:02:04.821] Resolving globals: FALSE
[11:02:04.822] The total size of the 1 globals is 39 bytes (39 bytes)
[11:02:04.822] The total size of the 1 globals exported for future expression (‘{; b <- 3; c <- 2; a * b * c; }’) is 39 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘a’ (39 bytes of class ‘numeric’)
[11:02:04.822] - globals: [1] ‘a’
[11:02:04.822] 
[11:02:04.822] getGlobalsAndPackages() ... DONE
[11:02:04.823] Packages needed by the future expression (n = 0): <none>
[11:02:04.823] Packages needed by future strategies (n = 0): <none>
[11:02:04.824] {
[11:02:04.824]     {
[11:02:04.824]         {
[11:02:04.824]             ...future.startTime <- base::Sys.time()
[11:02:04.824]             {
[11:02:04.824]                 {
[11:02:04.824]                   {
[11:02:04.824]                     {
[11:02:04.824]                       base::local({
[11:02:04.824]                         has_future <- base::requireNamespace("future", 
[11:02:04.824]                           quietly = TRUE)
[11:02:04.824]                         if (has_future) {
[11:02:04.824]                           ns <- base::getNamespace("future")
[11:02:04.824]                           version <- ns[[".package"]][["version"]]
[11:02:04.824]                           if (is.null(version)) 
[11:02:04.824]                             version <- utils::packageVersion("future")
[11:02:04.824]                         }
[11:02:04.824]                         else {
[11:02:04.824]                           version <- NULL
[11:02:04.824]                         }
[11:02:04.824]                         if (!has_future || version < "1.8.0") {
[11:02:04.824]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.824]                             "", base::R.version$version.string), 
[11:02:04.824]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.824]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.824]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.824]                               "release", "version")], collapse = " "), 
[11:02:04.824]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.824]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.824]                             info)
[11:02:04.824]                           info <- base::paste(info, collapse = "; ")
[11:02:04.824]                           if (!has_future) {
[11:02:04.824]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.824]                               info)
[11:02:04.824]                           }
[11:02:04.824]                           else {
[11:02:04.824]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.824]                               info, version)
[11:02:04.824]                           }
[11:02:04.824]                           base::stop(msg)
[11:02:04.824]                         }
[11:02:04.824]                       })
[11:02:04.824]                     }
[11:02:04.824]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.824]                     base::options(mc.cores = 1L)
[11:02:04.824]                   }
[11:02:04.824]                   ...future.strategy.old <- future::plan("list")
[11:02:04.824]                   options(future.plan = NULL)
[11:02:04.824]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.824]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.824]                 }
[11:02:04.824]                 ...future.workdir <- getwd()
[11:02:04.824]             }
[11:02:04.824]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.824]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.824]         }
[11:02:04.824]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.824]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.824]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.824]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.824]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.824]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.824]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.824]             base::names(...future.oldOptions))
[11:02:04.824]     }
[11:02:04.824]     if (FALSE) {
[11:02:04.824]     }
[11:02:04.824]     else {
[11:02:04.824]         if (TRUE) {
[11:02:04.824]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.824]                 open = "w")
[11:02:04.824]         }
[11:02:04.824]         else {
[11:02:04.824]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.824]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.824]         }
[11:02:04.824]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.824]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.824]             base::sink(type = "output", split = FALSE)
[11:02:04.824]             base::close(...future.stdout)
[11:02:04.824]         }, add = TRUE)
[11:02:04.824]     }
[11:02:04.824]     ...future.frame <- base::sys.nframe()
[11:02:04.824]     ...future.conditions <- base::list()
[11:02:04.824]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.824]     if (FALSE) {
[11:02:04.824]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.824]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.824]     }
[11:02:04.824]     ...future.result <- base::tryCatch({
[11:02:04.824]         base::withCallingHandlers({
[11:02:04.824]             ...future.value <- base::withVisible(base::local({
[11:02:04.824]                 withCallingHandlers({
[11:02:04.824]                   {
[11:02:04.824]                     b <- 3
[11:02:04.824]                     c <- 2
[11:02:04.824]                     a * b * c
[11:02:04.824]                   }
[11:02:04.824]                 }, immediateCondition = function(cond) {
[11:02:04.824]                   save_rds <- function (object, pathname, ...) 
[11:02:04.824]                   {
[11:02:04.824]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.824]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.824]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.824]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.824]                         fi_tmp[["mtime"]])
[11:02:04.824]                     }
[11:02:04.824]                     tryCatch({
[11:02:04.824]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.824]                     }, error = function(ex) {
[11:02:04.824]                       msg <- conditionMessage(ex)
[11:02:04.824]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.824]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.824]                         fi_tmp[["mtime"]], msg)
[11:02:04.824]                       ex$message <- msg
[11:02:04.824]                       stop(ex)
[11:02:04.824]                     })
[11:02:04.824]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.824]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.824]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.824]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.824]                       fi <- file.info(pathname)
[11:02:04.824]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.824]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.824]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.824]                         fi[["size"]], fi[["mtime"]])
[11:02:04.824]                       stop(msg)
[11:02:04.824]                     }
[11:02:04.824]                     invisible(pathname)
[11:02:04.824]                   }
[11:02:04.824]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.824]                     rootPath = tempdir()) 
[11:02:04.824]                   {
[11:02:04.824]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.824]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.824]                       tmpdir = path, fileext = ".rds")
[11:02:04.824]                     save_rds(obj, file)
[11:02:04.824]                   }
[11:02:04.824]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.824]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.824]                   {
[11:02:04.824]                     inherits <- base::inherits
[11:02:04.824]                     invokeRestart <- base::invokeRestart
[11:02:04.824]                     is.null <- base::is.null
[11:02:04.824]                     muffled <- FALSE
[11:02:04.824]                     if (inherits(cond, "message")) {
[11:02:04.824]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.824]                       if (muffled) 
[11:02:04.824]                         invokeRestart("muffleMessage")
[11:02:04.824]                     }
[11:02:04.824]                     else if (inherits(cond, "warning")) {
[11:02:04.824]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.824]                       if (muffled) 
[11:02:04.824]                         invokeRestart("muffleWarning")
[11:02:04.824]                     }
[11:02:04.824]                     else if (inherits(cond, "condition")) {
[11:02:04.824]                       if (!is.null(pattern)) {
[11:02:04.824]                         computeRestarts <- base::computeRestarts
[11:02:04.824]                         grepl <- base::grepl
[11:02:04.824]                         restarts <- computeRestarts(cond)
[11:02:04.824]                         for (restart in restarts) {
[11:02:04.824]                           name <- restart$name
[11:02:04.824]                           if (is.null(name)) 
[11:02:04.824]                             next
[11:02:04.824]                           if (!grepl(pattern, name)) 
[11:02:04.824]                             next
[11:02:04.824]                           invokeRestart(restart)
[11:02:04.824]                           muffled <- TRUE
[11:02:04.824]                           break
[11:02:04.824]                         }
[11:02:04.824]                       }
[11:02:04.824]                     }
[11:02:04.824]                     invisible(muffled)
[11:02:04.824]                   }
[11:02:04.824]                   muffleCondition(cond)
[11:02:04.824]                 })
[11:02:04.824]             }))
[11:02:04.824]             future::FutureResult(value = ...future.value$value, 
[11:02:04.824]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.824]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.824]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.824]                     ...future.globalenv.names))
[11:02:04.824]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.824]         }, condition = base::local({
[11:02:04.824]             c <- base::c
[11:02:04.824]             inherits <- base::inherits
[11:02:04.824]             invokeRestart <- base::invokeRestart
[11:02:04.824]             length <- base::length
[11:02:04.824]             list <- base::list
[11:02:04.824]             seq.int <- base::seq.int
[11:02:04.824]             signalCondition <- base::signalCondition
[11:02:04.824]             sys.calls <- base::sys.calls
[11:02:04.824]             `[[` <- base::`[[`
[11:02:04.824]             `+` <- base::`+`
[11:02:04.824]             `<<-` <- base::`<<-`
[11:02:04.824]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.824]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.824]                   3L)]
[11:02:04.824]             }
[11:02:04.824]             function(cond) {
[11:02:04.824]                 is_error <- inherits(cond, "error")
[11:02:04.824]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.824]                   NULL)
[11:02:04.824]                 if (is_error) {
[11:02:04.824]                   sessionInformation <- function() {
[11:02:04.824]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.824]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.824]                       search = base::search(), system = base::Sys.info())
[11:02:04.824]                   }
[11:02:04.824]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.824]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.824]                     cond$call), session = sessionInformation(), 
[11:02:04.824]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.824]                   signalCondition(cond)
[11:02:04.824]                 }
[11:02:04.824]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.824]                 "immediateCondition"))) {
[11:02:04.824]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.824]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.824]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.824]                   if (TRUE && !signal) {
[11:02:04.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.824]                     {
[11:02:04.824]                       inherits <- base::inherits
[11:02:04.824]                       invokeRestart <- base::invokeRestart
[11:02:04.824]                       is.null <- base::is.null
[11:02:04.824]                       muffled <- FALSE
[11:02:04.824]                       if (inherits(cond, "message")) {
[11:02:04.824]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.824]                         if (muffled) 
[11:02:04.824]                           invokeRestart("muffleMessage")
[11:02:04.824]                       }
[11:02:04.824]                       else if (inherits(cond, "warning")) {
[11:02:04.824]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.824]                         if (muffled) 
[11:02:04.824]                           invokeRestart("muffleWarning")
[11:02:04.824]                       }
[11:02:04.824]                       else if (inherits(cond, "condition")) {
[11:02:04.824]                         if (!is.null(pattern)) {
[11:02:04.824]                           computeRestarts <- base::computeRestarts
[11:02:04.824]                           grepl <- base::grepl
[11:02:04.824]                           restarts <- computeRestarts(cond)
[11:02:04.824]                           for (restart in restarts) {
[11:02:04.824]                             name <- restart$name
[11:02:04.824]                             if (is.null(name)) 
[11:02:04.824]                               next
[11:02:04.824]                             if (!grepl(pattern, name)) 
[11:02:04.824]                               next
[11:02:04.824]                             invokeRestart(restart)
[11:02:04.824]                             muffled <- TRUE
[11:02:04.824]                             break
[11:02:04.824]                           }
[11:02:04.824]                         }
[11:02:04.824]                       }
[11:02:04.824]                       invisible(muffled)
[11:02:04.824]                     }
[11:02:04.824]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.824]                   }
[11:02:04.824]                 }
[11:02:04.824]                 else {
[11:02:04.824]                   if (TRUE) {
[11:02:04.824]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.824]                     {
[11:02:04.824]                       inherits <- base::inherits
[11:02:04.824]                       invokeRestart <- base::invokeRestart
[11:02:04.824]                       is.null <- base::is.null
[11:02:04.824]                       muffled <- FALSE
[11:02:04.824]                       if (inherits(cond, "message")) {
[11:02:04.824]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.824]                         if (muffled) 
[11:02:04.824]                           invokeRestart("muffleMessage")
[11:02:04.824]                       }
[11:02:04.824]                       else if (inherits(cond, "warning")) {
[11:02:04.824]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.824]                         if (muffled) 
[11:02:04.824]                           invokeRestart("muffleWarning")
[11:02:04.824]                       }
[11:02:04.824]                       else if (inherits(cond, "condition")) {
[11:02:04.824]                         if (!is.null(pattern)) {
[11:02:04.824]                           computeRestarts <- base::computeRestarts
[11:02:04.824]                           grepl <- base::grepl
[11:02:04.824]                           restarts <- computeRestarts(cond)
[11:02:04.824]                           for (restart in restarts) {
[11:02:04.824]                             name <- restart$name
[11:02:04.824]                             if (is.null(name)) 
[11:02:04.824]                               next
[11:02:04.824]                             if (!grepl(pattern, name)) 
[11:02:04.824]                               next
[11:02:04.824]                             invokeRestart(restart)
[11:02:04.824]                             muffled <- TRUE
[11:02:04.824]                             break
[11:02:04.824]                           }
[11:02:04.824]                         }
[11:02:04.824]                       }
[11:02:04.824]                       invisible(muffled)
[11:02:04.824]                     }
[11:02:04.824]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.824]                   }
[11:02:04.824]                 }
[11:02:04.824]             }
[11:02:04.824]         }))
[11:02:04.824]     }, error = function(ex) {
[11:02:04.824]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.824]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.824]                 ...future.rng), started = ...future.startTime, 
[11:02:04.824]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.824]             version = "1.8"), class = "FutureResult")
[11:02:04.824]     }, finally = {
[11:02:04.824]         if (!identical(...future.workdir, getwd())) 
[11:02:04.824]             setwd(...future.workdir)
[11:02:04.824]         {
[11:02:04.824]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.824]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.824]             }
[11:02:04.824]             base::options(...future.oldOptions)
[11:02:04.824]             if (.Platform$OS.type == "windows") {
[11:02:04.824]                 old_names <- names(...future.oldEnvVars)
[11:02:04.824]                 envs <- base::Sys.getenv()
[11:02:04.824]                 names <- names(envs)
[11:02:04.824]                 common <- intersect(names, old_names)
[11:02:04.824]                 added <- setdiff(names, old_names)
[11:02:04.824]                 removed <- setdiff(old_names, names)
[11:02:04.824]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.824]                   envs[common]]
[11:02:04.824]                 NAMES <- toupper(changed)
[11:02:04.824]                 args <- list()
[11:02:04.824]                 for (kk in seq_along(NAMES)) {
[11:02:04.824]                   name <- changed[[kk]]
[11:02:04.824]                   NAME <- NAMES[[kk]]
[11:02:04.824]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.824]                     next
[11:02:04.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.824]                 }
[11:02:04.824]                 NAMES <- toupper(added)
[11:02:04.824]                 for (kk in seq_along(NAMES)) {
[11:02:04.824]                   name <- added[[kk]]
[11:02:04.824]                   NAME <- NAMES[[kk]]
[11:02:04.824]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.824]                     next
[11:02:04.824]                   args[[name]] <- ""
[11:02:04.824]                 }
[11:02:04.824]                 NAMES <- toupper(removed)
[11:02:04.824]                 for (kk in seq_along(NAMES)) {
[11:02:04.824]                   name <- removed[[kk]]
[11:02:04.824]                   NAME <- NAMES[[kk]]
[11:02:04.824]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.824]                     next
[11:02:04.824]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.824]                 }
[11:02:04.824]                 if (length(args) > 0) 
[11:02:04.824]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.824]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.824]             }
[11:02:04.824]             else {
[11:02:04.824]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.824]             }
[11:02:04.824]             {
[11:02:04.824]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.824]                   0L) {
[11:02:04.824]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.824]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.824]                   base::options(opts)
[11:02:04.824]                 }
[11:02:04.824]                 {
[11:02:04.824]                   {
[11:02:04.824]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.824]                     NULL
[11:02:04.824]                   }
[11:02:04.824]                   options(future.plan = NULL)
[11:02:04.824]                   if (is.na(NA_character_)) 
[11:02:04.824]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.824]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.824]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.824]                     .init = FALSE)
[11:02:04.824]                 }
[11:02:04.824]             }
[11:02:04.824]         }
[11:02:04.824]     })
[11:02:04.824]     if (TRUE) {
[11:02:04.824]         base::sink(type = "output", split = FALSE)
[11:02:04.824]         if (TRUE) {
[11:02:04.824]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.824]         }
[11:02:04.824]         else {
[11:02:04.824]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.824]         }
[11:02:04.824]         base::close(...future.stdout)
[11:02:04.824]         ...future.stdout <- NULL
[11:02:04.824]     }
[11:02:04.824]     ...future.result$conditions <- ...future.conditions
[11:02:04.824]     ...future.result$finished <- base::Sys.time()
[11:02:04.824]     ...future.result
[11:02:04.824] }
[11:02:04.826] assign_globals() ...
[11:02:04.826] List of 1
[11:02:04.826]  $ a: num 0
[11:02:04.826]  - attr(*, "where")=List of 1
[11:02:04.826]   ..$ a:<environment: R_EmptyEnv> 
[11:02:04.826]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.826]  - attr(*, "resolved")= logi FALSE
[11:02:04.826]  - attr(*, "total_size")= num 39
[11:02:04.829] - copied ‘a’ to environment
[11:02:04.829] assign_globals() ... done
[11:02:04.829] requestCore(): workers = 2
[11:02:04.831] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    b <- 3
    c <- 2
    a * b * c
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
[11:02:04.832] plan(): Setting new future strategy stack:
Globals: 1 objects totaling 39 bytes (numeric ‘a’ of 39 bytes)
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.832] List of future strategies:
[11:02:04.832] 1. sequential:
[11:02:04.832]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.832]    - tweaked: FALSE
[11:02:04.832]    - call: NULL
[11:02:04.833] plan(): nbrOfWorkers() = 1
[11:02:04.835] plan(): Setting new future strategy stack:
[11:02:04.835] List of future strategies:
[11:02:04.835] 1. multicore:
[11:02:04.835]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.835]    - tweaked: FALSE
[11:02:04.835]    - call: plan(multicore)
[11:02:04.838] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.838] result() for MulticoreFuture ...
[11:02:04.839] result() for MulticoreFuture ...
[11:02:04.839] result() for MulticoreFuture ... done
[11:02:04.839] result() for MulticoreFuture ... done
[11:02:04.840] result() for MulticoreFuture ...
[11:02:04.840] result() for MulticoreFuture ... done
[1] 0
*** multicore(..., globals = TRUE) with globals and blocking
 - Creating multicore future #1 ...
[11:02:04.842] getGlobalsAndPackages() ...
[11:02:04.842] Searching for globals...
[11:02:04.846] - globals found: [2] ‘{’, ‘ii’
[11:02:04.846] Searching for globals ... DONE
[11:02:04.846] Resolving globals: FALSE
[11:02:04.846] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.847] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.847] - globals: [1] ‘ii’
[11:02:04.847] 
[11:02:04.847] getGlobalsAndPackages() ... DONE
[11:02:04.848] Packages needed by the future expression (n = 0): <none>
[11:02:04.848] Packages needed by future strategies (n = 0): <none>
[11:02:04.848] {
[11:02:04.848]     {
[11:02:04.848]         {
[11:02:04.848]             ...future.startTime <- base::Sys.time()
[11:02:04.848]             {
[11:02:04.848]                 {
[11:02:04.848]                   {
[11:02:04.848]                     {
[11:02:04.848]                       base::local({
[11:02:04.848]                         has_future <- base::requireNamespace("future", 
[11:02:04.848]                           quietly = TRUE)
[11:02:04.848]                         if (has_future) {
[11:02:04.848]                           ns <- base::getNamespace("future")
[11:02:04.848]                           version <- ns[[".package"]][["version"]]
[11:02:04.848]                           if (is.null(version)) 
[11:02:04.848]                             version <- utils::packageVersion("future")
[11:02:04.848]                         }
[11:02:04.848]                         else {
[11:02:04.848]                           version <- NULL
[11:02:04.848]                         }
[11:02:04.848]                         if (!has_future || version < "1.8.0") {
[11:02:04.848]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.848]                             "", base::R.version$version.string), 
[11:02:04.848]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.848]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.848]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.848]                               "release", "version")], collapse = " "), 
[11:02:04.848]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.848]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.848]                             info)
[11:02:04.848]                           info <- base::paste(info, collapse = "; ")
[11:02:04.848]                           if (!has_future) {
[11:02:04.848]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.848]                               info)
[11:02:04.848]                           }
[11:02:04.848]                           else {
[11:02:04.848]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.848]                               info, version)
[11:02:04.848]                           }
[11:02:04.848]                           base::stop(msg)
[11:02:04.848]                         }
[11:02:04.848]                       })
[11:02:04.848]                     }
[11:02:04.848]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.848]                     base::options(mc.cores = 1L)
[11:02:04.848]                   }
[11:02:04.848]                   ...future.strategy.old <- future::plan("list")
[11:02:04.848]                   options(future.plan = NULL)
[11:02:04.848]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.848]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.848]                 }
[11:02:04.848]                 ...future.workdir <- getwd()
[11:02:04.848]             }
[11:02:04.848]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.848]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.848]         }
[11:02:04.848]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.848]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.848]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.848]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.848]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.848]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.848]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.848]             base::names(...future.oldOptions))
[11:02:04.848]     }
[11:02:04.848]     if (FALSE) {
[11:02:04.848]     }
[11:02:04.848]     else {
[11:02:04.848]         if (TRUE) {
[11:02:04.848]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.848]                 open = "w")
[11:02:04.848]         }
[11:02:04.848]         else {
[11:02:04.848]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.848]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.848]         }
[11:02:04.848]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.848]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.848]             base::sink(type = "output", split = FALSE)
[11:02:04.848]             base::close(...future.stdout)
[11:02:04.848]         }, add = TRUE)
[11:02:04.848]     }
[11:02:04.848]     ...future.frame <- base::sys.nframe()
[11:02:04.848]     ...future.conditions <- base::list()
[11:02:04.848]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.848]     if (FALSE) {
[11:02:04.848]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.848]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.848]     }
[11:02:04.848]     ...future.result <- base::tryCatch({
[11:02:04.848]         base::withCallingHandlers({
[11:02:04.848]             ...future.value <- base::withVisible(base::local({
[11:02:04.848]                 withCallingHandlers({
[11:02:04.848]                   {
[11:02:04.848]                     ii
[11:02:04.848]                   }
[11:02:04.848]                 }, immediateCondition = function(cond) {
[11:02:04.848]                   save_rds <- function (object, pathname, ...) 
[11:02:04.848]                   {
[11:02:04.848]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.848]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.848]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.848]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.848]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.848]                         fi_tmp[["mtime"]])
[11:02:04.848]                     }
[11:02:04.848]                     tryCatch({
[11:02:04.848]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.848]                     }, error = function(ex) {
[11:02:04.848]                       msg <- conditionMessage(ex)
[11:02:04.848]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.848]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.848]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.848]                         fi_tmp[["mtime"]], msg)
[11:02:04.848]                       ex$message <- msg
[11:02:04.848]                       stop(ex)
[11:02:04.848]                     })
[11:02:04.848]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.848]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.848]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.848]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.848]                       fi <- file.info(pathname)
[11:02:04.848]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.848]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.848]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.848]                         fi[["size"]], fi[["mtime"]])
[11:02:04.848]                       stop(msg)
[11:02:04.848]                     }
[11:02:04.848]                     invisible(pathname)
[11:02:04.848]                   }
[11:02:04.848]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.848]                     rootPath = tempdir()) 
[11:02:04.848]                   {
[11:02:04.848]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.848]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.848]                       tmpdir = path, fileext = ".rds")
[11:02:04.848]                     save_rds(obj, file)
[11:02:04.848]                   }
[11:02:04.848]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.848]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.848]                   {
[11:02:04.848]                     inherits <- base::inherits
[11:02:04.848]                     invokeRestart <- base::invokeRestart
[11:02:04.848]                     is.null <- base::is.null
[11:02:04.848]                     muffled <- FALSE
[11:02:04.848]                     if (inherits(cond, "message")) {
[11:02:04.848]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.848]                       if (muffled) 
[11:02:04.848]                         invokeRestart("muffleMessage")
[11:02:04.848]                     }
[11:02:04.848]                     else if (inherits(cond, "warning")) {
[11:02:04.848]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.848]                       if (muffled) 
[11:02:04.848]                         invokeRestart("muffleWarning")
[11:02:04.848]                     }
[11:02:04.848]                     else if (inherits(cond, "condition")) {
[11:02:04.848]                       if (!is.null(pattern)) {
[11:02:04.848]                         computeRestarts <- base::computeRestarts
[11:02:04.848]                         grepl <- base::grepl
[11:02:04.848]                         restarts <- computeRestarts(cond)
[11:02:04.848]                         for (restart in restarts) {
[11:02:04.848]                           name <- restart$name
[11:02:04.848]                           if (is.null(name)) 
[11:02:04.848]                             next
[11:02:04.848]                           if (!grepl(pattern, name)) 
[11:02:04.848]                             next
[11:02:04.848]                           invokeRestart(restart)
[11:02:04.848]                           muffled <- TRUE
[11:02:04.848]                           break
[11:02:04.848]                         }
[11:02:04.848]                       }
[11:02:04.848]                     }
[11:02:04.848]                     invisible(muffled)
[11:02:04.848]                   }
[11:02:04.848]                   muffleCondition(cond)
[11:02:04.848]                 })
[11:02:04.848]             }))
[11:02:04.848]             future::FutureResult(value = ...future.value$value, 
[11:02:04.848]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.848]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.848]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.848]                     ...future.globalenv.names))
[11:02:04.848]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.848]         }, condition = base::local({
[11:02:04.848]             c <- base::c
[11:02:04.848]             inherits <- base::inherits
[11:02:04.848]             invokeRestart <- base::invokeRestart
[11:02:04.848]             length <- base::length
[11:02:04.848]             list <- base::list
[11:02:04.848]             seq.int <- base::seq.int
[11:02:04.848]             signalCondition <- base::signalCondition
[11:02:04.848]             sys.calls <- base::sys.calls
[11:02:04.848]             `[[` <- base::`[[`
[11:02:04.848]             `+` <- base::`+`
[11:02:04.848]             `<<-` <- base::`<<-`
[11:02:04.848]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.848]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.848]                   3L)]
[11:02:04.848]             }
[11:02:04.848]             function(cond) {
[11:02:04.848]                 is_error <- inherits(cond, "error")
[11:02:04.848]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.848]                   NULL)
[11:02:04.848]                 if (is_error) {
[11:02:04.848]                   sessionInformation <- function() {
[11:02:04.848]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.848]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.848]                       search = base::search(), system = base::Sys.info())
[11:02:04.848]                   }
[11:02:04.848]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.848]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.848]                     cond$call), session = sessionInformation(), 
[11:02:04.848]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.848]                   signalCondition(cond)
[11:02:04.848]                 }
[11:02:04.848]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.848]                 "immediateCondition"))) {
[11:02:04.848]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.848]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.848]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.848]                   if (TRUE && !signal) {
[11:02:04.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.848]                     {
[11:02:04.848]                       inherits <- base::inherits
[11:02:04.848]                       invokeRestart <- base::invokeRestart
[11:02:04.848]                       is.null <- base::is.null
[11:02:04.848]                       muffled <- FALSE
[11:02:04.848]                       if (inherits(cond, "message")) {
[11:02:04.848]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.848]                         if (muffled) 
[11:02:04.848]                           invokeRestart("muffleMessage")
[11:02:04.848]                       }
[11:02:04.848]                       else if (inherits(cond, "warning")) {
[11:02:04.848]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.848]                         if (muffled) 
[11:02:04.848]                           invokeRestart("muffleWarning")
[11:02:04.848]                       }
[11:02:04.848]                       else if (inherits(cond, "condition")) {
[11:02:04.848]                         if (!is.null(pattern)) {
[11:02:04.848]                           computeRestarts <- base::computeRestarts
[11:02:04.848]                           grepl <- base::grepl
[11:02:04.848]                           restarts <- computeRestarts(cond)
[11:02:04.848]                           for (restart in restarts) {
[11:02:04.848]                             name <- restart$name
[11:02:04.848]                             if (is.null(name)) 
[11:02:04.848]                               next
[11:02:04.848]                             if (!grepl(pattern, name)) 
[11:02:04.848]                               next
[11:02:04.848]                             invokeRestart(restart)
[11:02:04.848]                             muffled <- TRUE
[11:02:04.848]                             break
[11:02:04.848]                           }
[11:02:04.848]                         }
[11:02:04.848]                       }
[11:02:04.848]                       invisible(muffled)
[11:02:04.848]                     }
[11:02:04.848]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.848]                   }
[11:02:04.848]                 }
[11:02:04.848]                 else {
[11:02:04.848]                   if (TRUE) {
[11:02:04.848]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.848]                     {
[11:02:04.848]                       inherits <- base::inherits
[11:02:04.848]                       invokeRestart <- base::invokeRestart
[11:02:04.848]                       is.null <- base::is.null
[11:02:04.848]                       muffled <- FALSE
[11:02:04.848]                       if (inherits(cond, "message")) {
[11:02:04.848]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.848]                         if (muffled) 
[11:02:04.848]                           invokeRestart("muffleMessage")
[11:02:04.848]                       }
[11:02:04.848]                       else if (inherits(cond, "warning")) {
[11:02:04.848]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.848]                         if (muffled) 
[11:02:04.848]                           invokeRestart("muffleWarning")
[11:02:04.848]                       }
[11:02:04.848]                       else if (inherits(cond, "condition")) {
[11:02:04.848]                         if (!is.null(pattern)) {
[11:02:04.848]                           computeRestarts <- base::computeRestarts
[11:02:04.848]                           grepl <- base::grepl
[11:02:04.848]                           restarts <- computeRestarts(cond)
[11:02:04.848]                           for (restart in restarts) {
[11:02:04.848]                             name <- restart$name
[11:02:04.848]                             if (is.null(name)) 
[11:02:04.848]                               next
[11:02:04.848]                             if (!grepl(pattern, name)) 
[11:02:04.848]                               next
[11:02:04.848]                             invokeRestart(restart)
[11:02:04.848]                             muffled <- TRUE
[11:02:04.848]                             break
[11:02:04.848]                           }
[11:02:04.848]                         }
[11:02:04.848]                       }
[11:02:04.848]                       invisible(muffled)
[11:02:04.848]                     }
[11:02:04.848]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.848]                   }
[11:02:04.848]                 }
[11:02:04.848]             }
[11:02:04.848]         }))
[11:02:04.848]     }, error = function(ex) {
[11:02:04.848]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.848]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.848]                 ...future.rng), started = ...future.startTime, 
[11:02:04.848]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.848]             version = "1.8"), class = "FutureResult")
[11:02:04.848]     }, finally = {
[11:02:04.848]         if (!identical(...future.workdir, getwd())) 
[11:02:04.848]             setwd(...future.workdir)
[11:02:04.848]         {
[11:02:04.848]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.848]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.848]             }
[11:02:04.848]             base::options(...future.oldOptions)
[11:02:04.848]             if (.Platform$OS.type == "windows") {
[11:02:04.848]                 old_names <- names(...future.oldEnvVars)
[11:02:04.848]                 envs <- base::Sys.getenv()
[11:02:04.848]                 names <- names(envs)
[11:02:04.848]                 common <- intersect(names, old_names)
[11:02:04.848]                 added <- setdiff(names, old_names)
[11:02:04.848]                 removed <- setdiff(old_names, names)
[11:02:04.848]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.848]                   envs[common]]
[11:02:04.848]                 NAMES <- toupper(changed)
[11:02:04.848]                 args <- list()
[11:02:04.848]                 for (kk in seq_along(NAMES)) {
[11:02:04.848]                   name <- changed[[kk]]
[11:02:04.848]                   NAME <- NAMES[[kk]]
[11:02:04.848]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.848]                     next
[11:02:04.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.848]                 }
[11:02:04.848]                 NAMES <- toupper(added)
[11:02:04.848]                 for (kk in seq_along(NAMES)) {
[11:02:04.848]                   name <- added[[kk]]
[11:02:04.848]                   NAME <- NAMES[[kk]]
[11:02:04.848]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.848]                     next
[11:02:04.848]                   args[[name]] <- ""
[11:02:04.848]                 }
[11:02:04.848]                 NAMES <- toupper(removed)
[11:02:04.848]                 for (kk in seq_along(NAMES)) {
[11:02:04.848]                   name <- removed[[kk]]
[11:02:04.848]                   NAME <- NAMES[[kk]]
[11:02:04.848]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.848]                     next
[11:02:04.848]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.848]                 }
[11:02:04.848]                 if (length(args) > 0) 
[11:02:04.848]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.848]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.848]             }
[11:02:04.848]             else {
[11:02:04.848]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.848]             }
[11:02:04.848]             {
[11:02:04.848]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.848]                   0L) {
[11:02:04.848]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.848]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.848]                   base::options(opts)
[11:02:04.848]                 }
[11:02:04.848]                 {
[11:02:04.848]                   {
[11:02:04.848]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.848]                     NULL
[11:02:04.848]                   }
[11:02:04.848]                   options(future.plan = NULL)
[11:02:04.848]                   if (is.na(NA_character_)) 
[11:02:04.848]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.848]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.848]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.848]                     .init = FALSE)
[11:02:04.848]                 }
[11:02:04.848]             }
[11:02:04.848]         }
[11:02:04.848]     })
[11:02:04.848]     if (TRUE) {
[11:02:04.848]         base::sink(type = "output", split = FALSE)
[11:02:04.848]         if (TRUE) {
[11:02:04.848]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.848]         }
[11:02:04.848]         else {
[11:02:04.848]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.848]         }
[11:02:04.848]         base::close(...future.stdout)
[11:02:04.848]         ...future.stdout <- NULL
[11:02:04.848]     }
[11:02:04.848]     ...future.result$conditions <- ...future.conditions
[11:02:04.848]     ...future.result$finished <- base::Sys.time()
[11:02:04.848]     ...future.result
[11:02:04.848] }
[11:02:04.851] assign_globals() ...
[11:02:04.851] List of 1
[11:02:04.851]  $ ii: int 1
[11:02:04.851]  - attr(*, "where")=List of 1
[11:02:04.851]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.851]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.851]  - attr(*, "resolved")= logi FALSE
[11:02:04.851]  - attr(*, "total_size")= num 35
[11:02:04.853] - copied ‘ii’ to environment
[11:02:04.854] assign_globals() ... done
[11:02:04.854] requestCore(): workers = 2
[11:02:04.855] MulticoreFuture started
 - Creating multicore future #2 ...
[11:02:04.856] plan(): Setting new future strategy stack:
[11:02:04.857] List of future strategies:
[11:02:04.857] 1. sequential:
[11:02:04.857]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.857]    - tweaked: FALSE
[11:02:04.857]    - call: NULL
[11:02:04.858] plan(): nbrOfWorkers() = 1
[11:02:04.859] getGlobalsAndPackages() ...
[11:02:04.859] Searching for globals...
[11:02:04.859] plan(): Setting new future strategy stack:
[11:02:04.859] List of future strategies:
[11:02:04.859] 1. multicore:
[11:02:04.859]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.859]    - tweaked: FALSE
[11:02:04.859]    - call: plan(multicore)
[11:02:04.860] - globals found: [2] ‘{’, ‘ii’
[11:02:04.861] Searching for globals ... DONE
[11:02:04.861] Resolving globals: FALSE
[11:02:04.861] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.862] plan(): nbrOfWorkers() = 2
[11:02:04.862] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.862] - globals: [1] ‘ii’
[11:02:04.862] 
[11:02:04.862] getGlobalsAndPackages() ... DONE
[11:02:04.863] Packages needed by the future expression (n = 0): <none>
[11:02:04.863] Packages needed by future strategies (n = 0): <none>
[11:02:04.864] {
[11:02:04.864]     {
[11:02:04.864]         {
[11:02:04.864]             ...future.startTime <- base::Sys.time()
[11:02:04.864]             {
[11:02:04.864]                 {
[11:02:04.864]                   {
[11:02:04.864]                     {
[11:02:04.864]                       base::local({
[11:02:04.864]                         has_future <- base::requireNamespace("future", 
[11:02:04.864]                           quietly = TRUE)
[11:02:04.864]                         if (has_future) {
[11:02:04.864]                           ns <- base::getNamespace("future")
[11:02:04.864]                           version <- ns[[".package"]][["version"]]
[11:02:04.864]                           if (is.null(version)) 
[11:02:04.864]                             version <- utils::packageVersion("future")
[11:02:04.864]                         }
[11:02:04.864]                         else {
[11:02:04.864]                           version <- NULL
[11:02:04.864]                         }
[11:02:04.864]                         if (!has_future || version < "1.8.0") {
[11:02:04.864]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.864]                             "", base::R.version$version.string), 
[11:02:04.864]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.864]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.864]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.864]                               "release", "version")], collapse = " "), 
[11:02:04.864]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.864]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.864]                             info)
[11:02:04.864]                           info <- base::paste(info, collapse = "; ")
[11:02:04.864]                           if (!has_future) {
[11:02:04.864]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.864]                               info)
[11:02:04.864]                           }
[11:02:04.864]                           else {
[11:02:04.864]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.864]                               info, version)
[11:02:04.864]                           }
[11:02:04.864]                           base::stop(msg)
[11:02:04.864]                         }
[11:02:04.864]                       })
[11:02:04.864]                     }
[11:02:04.864]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.864]                     base::options(mc.cores = 1L)
[11:02:04.864]                   }
[11:02:04.864]                   ...future.strategy.old <- future::plan("list")
[11:02:04.864]                   options(future.plan = NULL)
[11:02:04.864]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.864]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.864]                 }
[11:02:04.864]                 ...future.workdir <- getwd()
[11:02:04.864]             }
[11:02:04.864]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.864]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.864]         }
[11:02:04.864]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.864]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.864]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.864]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.864]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.864]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.864]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.864]             base::names(...future.oldOptions))
[11:02:04.864]     }
[11:02:04.864]     if (FALSE) {
[11:02:04.864]     }
[11:02:04.864]     else {
[11:02:04.864]         if (TRUE) {
[11:02:04.864]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.864]                 open = "w")
[11:02:04.864]         }
[11:02:04.864]         else {
[11:02:04.864]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.864]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.864]         }
[11:02:04.864]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.864]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.864]             base::sink(type = "output", split = FALSE)
[11:02:04.864]             base::close(...future.stdout)
[11:02:04.864]         }, add = TRUE)
[11:02:04.864]     }
[11:02:04.864]     ...future.frame <- base::sys.nframe()
[11:02:04.864]     ...future.conditions <- base::list()
[11:02:04.864]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.864]     if (FALSE) {
[11:02:04.864]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.864]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.864]     }
[11:02:04.864]     ...future.result <- base::tryCatch({
[11:02:04.864]         base::withCallingHandlers({
[11:02:04.864]             ...future.value <- base::withVisible(base::local({
[11:02:04.864]                 withCallingHandlers({
[11:02:04.864]                   {
[11:02:04.864]                     ii
[11:02:04.864]                   }
[11:02:04.864]                 }, immediateCondition = function(cond) {
[11:02:04.864]                   save_rds <- function (object, pathname, ...) 
[11:02:04.864]                   {
[11:02:04.864]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.864]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.864]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.864]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.864]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.864]                         fi_tmp[["mtime"]])
[11:02:04.864]                     }
[11:02:04.864]                     tryCatch({
[11:02:04.864]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.864]                     }, error = function(ex) {
[11:02:04.864]                       msg <- conditionMessage(ex)
[11:02:04.864]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.864]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.864]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.864]                         fi_tmp[["mtime"]], msg)
[11:02:04.864]                       ex$message <- msg
[11:02:04.864]                       stop(ex)
[11:02:04.864]                     })
[11:02:04.864]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.864]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.864]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.864]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.864]                       fi <- file.info(pathname)
[11:02:04.864]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.864]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.864]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.864]                         fi[["size"]], fi[["mtime"]])
[11:02:04.864]                       stop(msg)
[11:02:04.864]                     }
[11:02:04.864]                     invisible(pathname)
[11:02:04.864]                   }
[11:02:04.864]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.864]                     rootPath = tempdir()) 
[11:02:04.864]                   {
[11:02:04.864]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.864]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.864]                       tmpdir = path, fileext = ".rds")
[11:02:04.864]                     save_rds(obj, file)
[11:02:04.864]                   }
[11:02:04.864]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.864]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.864]                   {
[11:02:04.864]                     inherits <- base::inherits
[11:02:04.864]                     invokeRestart <- base::invokeRestart
[11:02:04.864]                     is.null <- base::is.null
[11:02:04.864]                     muffled <- FALSE
[11:02:04.864]                     if (inherits(cond, "message")) {
[11:02:04.864]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.864]                       if (muffled) 
[11:02:04.864]                         invokeRestart("muffleMessage")
[11:02:04.864]                     }
[11:02:04.864]                     else if (inherits(cond, "warning")) {
[11:02:04.864]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.864]                       if (muffled) 
[11:02:04.864]                         invokeRestart("muffleWarning")
[11:02:04.864]                     }
[11:02:04.864]                     else if (inherits(cond, "condition")) {
[11:02:04.864]                       if (!is.null(pattern)) {
[11:02:04.864]                         computeRestarts <- base::computeRestarts
[11:02:04.864]                         grepl <- base::grepl
[11:02:04.864]                         restarts <- computeRestarts(cond)
[11:02:04.864]                         for (restart in restarts) {
[11:02:04.864]                           name <- restart$name
[11:02:04.864]                           if (is.null(name)) 
[11:02:04.864]                             next
[11:02:04.864]                           if (!grepl(pattern, name)) 
[11:02:04.864]                             next
[11:02:04.864]                           invokeRestart(restart)
[11:02:04.864]                           muffled <- TRUE
[11:02:04.864]                           break
[11:02:04.864]                         }
[11:02:04.864]                       }
[11:02:04.864]                     }
[11:02:04.864]                     invisible(muffled)
[11:02:04.864]                   }
[11:02:04.864]                   muffleCondition(cond)
[11:02:04.864]                 })
[11:02:04.864]             }))
[11:02:04.864]             future::FutureResult(value = ...future.value$value, 
[11:02:04.864]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.864]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.864]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.864]                     ...future.globalenv.names))
[11:02:04.864]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.864]         }, condition = base::local({
[11:02:04.864]             c <- base::c
[11:02:04.864]             inherits <- base::inherits
[11:02:04.864]             invokeRestart <- base::invokeRestart
[11:02:04.864]             length <- base::length
[11:02:04.864]             list <- base::list
[11:02:04.864]             seq.int <- base::seq.int
[11:02:04.864]             signalCondition <- base::signalCondition
[11:02:04.864]             sys.calls <- base::sys.calls
[11:02:04.864]             `[[` <- base::`[[`
[11:02:04.864]             `+` <- base::`+`
[11:02:04.864]             `<<-` <- base::`<<-`
[11:02:04.864]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.864]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.864]                   3L)]
[11:02:04.864]             }
[11:02:04.864]             function(cond) {
[11:02:04.864]                 is_error <- inherits(cond, "error")
[11:02:04.864]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.864]                   NULL)
[11:02:04.864]                 if (is_error) {
[11:02:04.864]                   sessionInformation <- function() {
[11:02:04.864]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.864]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.864]                       search = base::search(), system = base::Sys.info())
[11:02:04.864]                   }
[11:02:04.864]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.864]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.864]                     cond$call), session = sessionInformation(), 
[11:02:04.864]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.864]                   signalCondition(cond)
[11:02:04.864]                 }
[11:02:04.864]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.864]                 "immediateCondition"))) {
[11:02:04.864]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.864]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.864]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.864]                   if (TRUE && !signal) {
[11:02:04.864]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.864]                     {
[11:02:04.864]                       inherits <- base::inherits
[11:02:04.864]                       invokeRestart <- base::invokeRestart
[11:02:04.864]                       is.null <- base::is.null
[11:02:04.864]                       muffled <- FALSE
[11:02:04.864]                       if (inherits(cond, "message")) {
[11:02:04.864]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.864]                         if (muffled) 
[11:02:04.864]                           invokeRestart("muffleMessage")
[11:02:04.864]                       }
[11:02:04.864]                       else if (inherits(cond, "warning")) {
[11:02:04.864]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.864]                         if (muffled) 
[11:02:04.864]                           invokeRestart("muffleWarning")
[11:02:04.864]                       }
[11:02:04.864]                       else if (inherits(cond, "condition")) {
[11:02:04.864]                         if (!is.null(pattern)) {
[11:02:04.864]                           computeRestarts <- base::computeRestarts
[11:02:04.864]                           grepl <- base::grepl
[11:02:04.864]                           restarts <- computeRestarts(cond)
[11:02:04.864]                           for (restart in restarts) {
[11:02:04.864]                             name <- restart$name
[11:02:04.864]                             if (is.null(name)) 
[11:02:04.864]                               next
[11:02:04.864]                             if (!grepl(pattern, name)) 
[11:02:04.864]                               next
[11:02:04.864]                             invokeRestart(restart)
[11:02:04.864]                             muffled <- TRUE
[11:02:04.864]                             break
[11:02:04.864]                           }
[11:02:04.864]                         }
[11:02:04.864]                       }
[11:02:04.864]                       invisible(muffled)
[11:02:04.864]                     }
[11:02:04.864]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.864]                   }
[11:02:04.864]                 }
[11:02:04.864]                 else {
[11:02:04.864]                   if (TRUE) {
[11:02:04.864]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.864]                     {
[11:02:04.864]                       inherits <- base::inherits
[11:02:04.864]                       invokeRestart <- base::invokeRestart
[11:02:04.864]                       is.null <- base::is.null
[11:02:04.864]                       muffled <- FALSE
[11:02:04.864]                       if (inherits(cond, "message")) {
[11:02:04.864]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.864]                         if (muffled) 
[11:02:04.864]                           invokeRestart("muffleMessage")
[11:02:04.864]                       }
[11:02:04.864]                       else if (inherits(cond, "warning")) {
[11:02:04.864]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.864]                         if (muffled) 
[11:02:04.864]                           invokeRestart("muffleWarning")
[11:02:04.864]                       }
[11:02:04.864]                       else if (inherits(cond, "condition")) {
[11:02:04.864]                         if (!is.null(pattern)) {
[11:02:04.864]                           computeRestarts <- base::computeRestarts
[11:02:04.864]                           grepl <- base::grepl
[11:02:04.864]                           restarts <- computeRestarts(cond)
[11:02:04.864]                           for (restart in restarts) {
[11:02:04.864]                             name <- restart$name
[11:02:04.864]                             if (is.null(name)) 
[11:02:04.864]                               next
[11:02:04.864]                             if (!grepl(pattern, name)) 
[11:02:04.864]                               next
[11:02:04.864]                             invokeRestart(restart)
[11:02:04.864]                             muffled <- TRUE
[11:02:04.864]                             break
[11:02:04.864]                           }
[11:02:04.864]                         }
[11:02:04.864]                       }
[11:02:04.864]                       invisible(muffled)
[11:02:04.864]                     }
[11:02:04.864]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.864]                   }
[11:02:04.864]                 }
[11:02:04.864]             }
[11:02:04.864]         }))
[11:02:04.864]     }, error = function(ex) {
[11:02:04.864]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.864]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.864]                 ...future.rng), started = ...future.startTime, 
[11:02:04.864]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.864]             version = "1.8"), class = "FutureResult")
[11:02:04.864]     }, finally = {
[11:02:04.864]         if (!identical(...future.workdir, getwd())) 
[11:02:04.864]             setwd(...future.workdir)
[11:02:04.864]         {
[11:02:04.864]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.864]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.864]             }
[11:02:04.864]             base::options(...future.oldOptions)
[11:02:04.864]             if (.Platform$OS.type == "windows") {
[11:02:04.864]                 old_names <- names(...future.oldEnvVars)
[11:02:04.864]                 envs <- base::Sys.getenv()
[11:02:04.864]                 names <- names(envs)
[11:02:04.864]                 common <- intersect(names, old_names)
[11:02:04.864]                 added <- setdiff(names, old_names)
[11:02:04.864]                 removed <- setdiff(old_names, names)
[11:02:04.864]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.864]                   envs[common]]
[11:02:04.864]                 NAMES <- toupper(changed)
[11:02:04.864]                 args <- list()
[11:02:04.864]                 for (kk in seq_along(NAMES)) {
[11:02:04.864]                   name <- changed[[kk]]
[11:02:04.864]                   NAME <- NAMES[[kk]]
[11:02:04.864]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.864]                     next
[11:02:04.864]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.864]                 }
[11:02:04.864]                 NAMES <- toupper(added)
[11:02:04.864]                 for (kk in seq_along(NAMES)) {
[11:02:04.864]                   name <- added[[kk]]
[11:02:04.864]                   NAME <- NAMES[[kk]]
[11:02:04.864]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.864]                     next
[11:02:04.864]                   args[[name]] <- ""
[11:02:04.864]                 }
[11:02:04.864]                 NAMES <- toupper(removed)
[11:02:04.864]                 for (kk in seq_along(NAMES)) {
[11:02:04.864]                   name <- removed[[kk]]
[11:02:04.864]                   NAME <- NAMES[[kk]]
[11:02:04.864]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.864]                     next
[11:02:04.864]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.864]                 }
[11:02:04.864]                 if (length(args) > 0) 
[11:02:04.864]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.864]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.864]             }
[11:02:04.864]             else {
[11:02:04.864]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.864]             }
[11:02:04.864]             {
[11:02:04.864]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.864]                   0L) {
[11:02:04.864]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.864]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.864]                   base::options(opts)
[11:02:04.864]                 }
[11:02:04.864]                 {
[11:02:04.864]                   {
[11:02:04.864]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.864]                     NULL
[11:02:04.864]                   }
[11:02:04.864]                   options(future.plan = NULL)
[11:02:04.864]                   if (is.na(NA_character_)) 
[11:02:04.864]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.864]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.864]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.864]                     .init = FALSE)
[11:02:04.864]                 }
[11:02:04.864]             }
[11:02:04.864]         }
[11:02:04.864]     })
[11:02:04.864]     if (TRUE) {
[11:02:04.864]         base::sink(type = "output", split = FALSE)
[11:02:04.864]         if (TRUE) {
[11:02:04.864]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.864]         }
[11:02:04.864]         else {
[11:02:04.864]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.864]         }
[11:02:04.864]         base::close(...future.stdout)
[11:02:04.864]         ...future.stdout <- NULL
[11:02:04.864]     }
[11:02:04.864]     ...future.result$conditions <- ...future.conditions
[11:02:04.864]     ...future.result$finished <- base::Sys.time()
[11:02:04.864]     ...future.result
[11:02:04.864] }
[11:02:04.867] assign_globals() ...
[11:02:04.867] List of 1
[11:02:04.867]  $ ii: int 2
[11:02:04.867]  - attr(*, "where")=List of 1
[11:02:04.867]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.867]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.867]  - attr(*, "resolved")= logi FALSE
[11:02:04.867]  - attr(*, "total_size")= num 35
[11:02:04.871] - copied ‘ii’ to environment
[11:02:04.871] assign_globals() ... done
[11:02:04.871] requestCore(): workers = 2
[11:02:04.873] MulticoreFuture started
 - Creating multicore future #3 ...
[11:02:04.874] plan(): Setting new future strategy stack:
[11:02:04.874] List of future strategies:
[11:02:04.874] 1. sequential:
[11:02:04.874]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.874]    - tweaked: FALSE
[11:02:04.874]    - call: NULL
[11:02:04.875] plan(): nbrOfWorkers() = 1
[11:02:04.876] getGlobalsAndPackages() ...
[11:02:04.876] Searching for globals...
[11:02:04.877] plan(): Setting new future strategy stack:
[11:02:04.877] List of future strategies:
[11:02:04.877] 1. multicore:
[11:02:04.877]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.877]    - tweaked: FALSE
[11:02:04.877]    - call: plan(multicore)
[11:02:04.878] - globals found: [2] ‘{’, ‘ii’
[11:02:04.878] Searching for globals ... DONE
[11:02:04.878] Resolving globals: FALSE
[11:02:04.879] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.879] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.879] plan(): nbrOfWorkers() = 2
[11:02:04.880] - globals: [1] ‘ii’
[11:02:04.880] 
[11:02:04.880] getGlobalsAndPackages() ... DONE
[11:02:04.881] Packages needed by the future expression (n = 0): <none>
[11:02:04.881] Packages needed by future strategies (n = 0): <none>
[11:02:04.881] {
[11:02:04.881]     {
[11:02:04.881]         {
[11:02:04.881]             ...future.startTime <- base::Sys.time()
[11:02:04.881]             {
[11:02:04.881]                 {
[11:02:04.881]                   {
[11:02:04.881]                     {
[11:02:04.881]                       base::local({
[11:02:04.881]                         has_future <- base::requireNamespace("future", 
[11:02:04.881]                           quietly = TRUE)
[11:02:04.881]                         if (has_future) {
[11:02:04.881]                           ns <- base::getNamespace("future")
[11:02:04.881]                           version <- ns[[".package"]][["version"]]
[11:02:04.881]                           if (is.null(version)) 
[11:02:04.881]                             version <- utils::packageVersion("future")
[11:02:04.881]                         }
[11:02:04.881]                         else {
[11:02:04.881]                           version <- NULL
[11:02:04.881]                         }
[11:02:04.881]                         if (!has_future || version < "1.8.0") {
[11:02:04.881]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.881]                             "", base::R.version$version.string), 
[11:02:04.881]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.881]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.881]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.881]                               "release", "version")], collapse = " "), 
[11:02:04.881]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.881]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.881]                             info)
[11:02:04.881]                           info <- base::paste(info, collapse = "; ")
[11:02:04.881]                           if (!has_future) {
[11:02:04.881]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.881]                               info)
[11:02:04.881]                           }
[11:02:04.881]                           else {
[11:02:04.881]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.881]                               info, version)
[11:02:04.881]                           }
[11:02:04.881]                           base::stop(msg)
[11:02:04.881]                         }
[11:02:04.881]                       })
[11:02:04.881]                     }
[11:02:04.881]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.881]                     base::options(mc.cores = 1L)
[11:02:04.881]                   }
[11:02:04.881]                   ...future.strategy.old <- future::plan("list")
[11:02:04.881]                   options(future.plan = NULL)
[11:02:04.881]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.881]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.881]                 }
[11:02:04.881]                 ...future.workdir <- getwd()
[11:02:04.881]             }
[11:02:04.881]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.881]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.881]         }
[11:02:04.881]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.881]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.881]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.881]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.881]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.881]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.881]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.881]             base::names(...future.oldOptions))
[11:02:04.881]     }
[11:02:04.881]     if (FALSE) {
[11:02:04.881]     }
[11:02:04.881]     else {
[11:02:04.881]         if (TRUE) {
[11:02:04.881]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.881]                 open = "w")
[11:02:04.881]         }
[11:02:04.881]         else {
[11:02:04.881]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.881]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.881]         }
[11:02:04.881]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.881]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.881]             base::sink(type = "output", split = FALSE)
[11:02:04.881]             base::close(...future.stdout)
[11:02:04.881]         }, add = TRUE)
[11:02:04.881]     }
[11:02:04.881]     ...future.frame <- base::sys.nframe()
[11:02:04.881]     ...future.conditions <- base::list()
[11:02:04.881]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.881]     if (FALSE) {
[11:02:04.881]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.881]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.881]     }
[11:02:04.881]     ...future.result <- base::tryCatch({
[11:02:04.881]         base::withCallingHandlers({
[11:02:04.881]             ...future.value <- base::withVisible(base::local({
[11:02:04.881]                 withCallingHandlers({
[11:02:04.881]                   {
[11:02:04.881]                     ii
[11:02:04.881]                   }
[11:02:04.881]                 }, immediateCondition = function(cond) {
[11:02:04.881]                   save_rds <- function (object, pathname, ...) 
[11:02:04.881]                   {
[11:02:04.881]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.881]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.881]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.881]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.881]                         fi_tmp[["mtime"]])
[11:02:04.881]                     }
[11:02:04.881]                     tryCatch({
[11:02:04.881]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.881]                     }, error = function(ex) {
[11:02:04.881]                       msg <- conditionMessage(ex)
[11:02:04.881]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.881]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.881]                         fi_tmp[["mtime"]], msg)
[11:02:04.881]                       ex$message <- msg
[11:02:04.881]                       stop(ex)
[11:02:04.881]                     })
[11:02:04.881]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.881]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.881]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.881]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.881]                       fi <- file.info(pathname)
[11:02:04.881]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.881]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.881]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.881]                         fi[["size"]], fi[["mtime"]])
[11:02:04.881]                       stop(msg)
[11:02:04.881]                     }
[11:02:04.881]                     invisible(pathname)
[11:02:04.881]                   }
[11:02:04.881]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.881]                     rootPath = tempdir()) 
[11:02:04.881]                   {
[11:02:04.881]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.881]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.881]                       tmpdir = path, fileext = ".rds")
[11:02:04.881]                     save_rds(obj, file)
[11:02:04.881]                   }
[11:02:04.881]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.881]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.881]                   {
[11:02:04.881]                     inherits <- base::inherits
[11:02:04.881]                     invokeRestart <- base::invokeRestart
[11:02:04.881]                     is.null <- base::is.null
[11:02:04.881]                     muffled <- FALSE
[11:02:04.881]                     if (inherits(cond, "message")) {
[11:02:04.881]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.881]                       if (muffled) 
[11:02:04.881]                         invokeRestart("muffleMessage")
[11:02:04.881]                     }
[11:02:04.881]                     else if (inherits(cond, "warning")) {
[11:02:04.881]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.881]                       if (muffled) 
[11:02:04.881]                         invokeRestart("muffleWarning")
[11:02:04.881]                     }
[11:02:04.881]                     else if (inherits(cond, "condition")) {
[11:02:04.881]                       if (!is.null(pattern)) {
[11:02:04.881]                         computeRestarts <- base::computeRestarts
[11:02:04.881]                         grepl <- base::grepl
[11:02:04.881]                         restarts <- computeRestarts(cond)
[11:02:04.881]                         for (restart in restarts) {
[11:02:04.881]                           name <- restart$name
[11:02:04.881]                           if (is.null(name)) 
[11:02:04.881]                             next
[11:02:04.881]                           if (!grepl(pattern, name)) 
[11:02:04.881]                             next
[11:02:04.881]                           invokeRestart(restart)
[11:02:04.881]                           muffled <- TRUE
[11:02:04.881]                           break
[11:02:04.881]                         }
[11:02:04.881]                       }
[11:02:04.881]                     }
[11:02:04.881]                     invisible(muffled)
[11:02:04.881]                   }
[11:02:04.881]                   muffleCondition(cond)
[11:02:04.881]                 })
[11:02:04.881]             }))
[11:02:04.881]             future::FutureResult(value = ...future.value$value, 
[11:02:04.881]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.881]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.881]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.881]                     ...future.globalenv.names))
[11:02:04.881]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.881]         }, condition = base::local({
[11:02:04.881]             c <- base::c
[11:02:04.881]             inherits <- base::inherits
[11:02:04.881]             invokeRestart <- base::invokeRestart
[11:02:04.881]             length <- base::length
[11:02:04.881]             list <- base::list
[11:02:04.881]             seq.int <- base::seq.int
[11:02:04.881]             signalCondition <- base::signalCondition
[11:02:04.881]             sys.calls <- base::sys.calls
[11:02:04.881]             `[[` <- base::`[[`
[11:02:04.881]             `+` <- base::`+`
[11:02:04.881]             `<<-` <- base::`<<-`
[11:02:04.881]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.881]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.881]                   3L)]
[11:02:04.881]             }
[11:02:04.881]             function(cond) {
[11:02:04.881]                 is_error <- inherits(cond, "error")
[11:02:04.881]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.881]                   NULL)
[11:02:04.881]                 if (is_error) {
[11:02:04.881]                   sessionInformation <- function() {
[11:02:04.881]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.881]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.881]                       search = base::search(), system = base::Sys.info())
[11:02:04.881]                   }
[11:02:04.881]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.881]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.881]                     cond$call), session = sessionInformation(), 
[11:02:04.881]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.881]                   signalCondition(cond)
[11:02:04.881]                 }
[11:02:04.881]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.881]                 "immediateCondition"))) {
[11:02:04.881]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.881]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.881]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.881]                   if (TRUE && !signal) {
[11:02:04.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.881]                     {
[11:02:04.881]                       inherits <- base::inherits
[11:02:04.881]                       invokeRestart <- base::invokeRestart
[11:02:04.881]                       is.null <- base::is.null
[11:02:04.881]                       muffled <- FALSE
[11:02:04.881]                       if (inherits(cond, "message")) {
[11:02:04.881]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.881]                         if (muffled) 
[11:02:04.881]                           invokeRestart("muffleMessage")
[11:02:04.881]                       }
[11:02:04.881]                       else if (inherits(cond, "warning")) {
[11:02:04.881]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.881]                         if (muffled) 
[11:02:04.881]                           invokeRestart("muffleWarning")
[11:02:04.881]                       }
[11:02:04.881]                       else if (inherits(cond, "condition")) {
[11:02:04.881]                         if (!is.null(pattern)) {
[11:02:04.881]                           computeRestarts <- base::computeRestarts
[11:02:04.881]                           grepl <- base::grepl
[11:02:04.881]                           restarts <- computeRestarts(cond)
[11:02:04.881]                           for (restart in restarts) {
[11:02:04.881]                             name <- restart$name
[11:02:04.881]                             if (is.null(name)) 
[11:02:04.881]                               next
[11:02:04.881]                             if (!grepl(pattern, name)) 
[11:02:04.881]                               next
[11:02:04.881]                             invokeRestart(restart)
[11:02:04.881]                             muffled <- TRUE
[11:02:04.881]                             break
[11:02:04.881]                           }
[11:02:04.881]                         }
[11:02:04.881]                       }
[11:02:04.881]                       invisible(muffled)
[11:02:04.881]                     }
[11:02:04.881]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.881]                   }
[11:02:04.881]                 }
[11:02:04.881]                 else {
[11:02:04.881]                   if (TRUE) {
[11:02:04.881]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.881]                     {
[11:02:04.881]                       inherits <- base::inherits
[11:02:04.881]                       invokeRestart <- base::invokeRestart
[11:02:04.881]                       is.null <- base::is.null
[11:02:04.881]                       muffled <- FALSE
[11:02:04.881]                       if (inherits(cond, "message")) {
[11:02:04.881]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.881]                         if (muffled) 
[11:02:04.881]                           invokeRestart("muffleMessage")
[11:02:04.881]                       }
[11:02:04.881]                       else if (inherits(cond, "warning")) {
[11:02:04.881]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.881]                         if (muffled) 
[11:02:04.881]                           invokeRestart("muffleWarning")
[11:02:04.881]                       }
[11:02:04.881]                       else if (inherits(cond, "condition")) {
[11:02:04.881]                         if (!is.null(pattern)) {
[11:02:04.881]                           computeRestarts <- base::computeRestarts
[11:02:04.881]                           grepl <- base::grepl
[11:02:04.881]                           restarts <- computeRestarts(cond)
[11:02:04.881]                           for (restart in restarts) {
[11:02:04.881]                             name <- restart$name
[11:02:04.881]                             if (is.null(name)) 
[11:02:04.881]                               next
[11:02:04.881]                             if (!grepl(pattern, name)) 
[11:02:04.881]                               next
[11:02:04.881]                             invokeRestart(restart)
[11:02:04.881]                             muffled <- TRUE
[11:02:04.881]                             break
[11:02:04.881]                           }
[11:02:04.881]                         }
[11:02:04.881]                       }
[11:02:04.881]                       invisible(muffled)
[11:02:04.881]                     }
[11:02:04.881]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.881]                   }
[11:02:04.881]                 }
[11:02:04.881]             }
[11:02:04.881]         }))
[11:02:04.881]     }, error = function(ex) {
[11:02:04.881]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.881]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.881]                 ...future.rng), started = ...future.startTime, 
[11:02:04.881]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.881]             version = "1.8"), class = "FutureResult")
[11:02:04.881]     }, finally = {
[11:02:04.881]         if (!identical(...future.workdir, getwd())) 
[11:02:04.881]             setwd(...future.workdir)
[11:02:04.881]         {
[11:02:04.881]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.881]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.881]             }
[11:02:04.881]             base::options(...future.oldOptions)
[11:02:04.881]             if (.Platform$OS.type == "windows") {
[11:02:04.881]                 old_names <- names(...future.oldEnvVars)
[11:02:04.881]                 envs <- base::Sys.getenv()
[11:02:04.881]                 names <- names(envs)
[11:02:04.881]                 common <- intersect(names, old_names)
[11:02:04.881]                 added <- setdiff(names, old_names)
[11:02:04.881]                 removed <- setdiff(old_names, names)
[11:02:04.881]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.881]                   envs[common]]
[11:02:04.881]                 NAMES <- toupper(changed)
[11:02:04.881]                 args <- list()
[11:02:04.881]                 for (kk in seq_along(NAMES)) {
[11:02:04.881]                   name <- changed[[kk]]
[11:02:04.881]                   NAME <- NAMES[[kk]]
[11:02:04.881]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.881]                     next
[11:02:04.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.881]                 }
[11:02:04.881]                 NAMES <- toupper(added)
[11:02:04.881]                 for (kk in seq_along(NAMES)) {
[11:02:04.881]                   name <- added[[kk]]
[11:02:04.881]                   NAME <- NAMES[[kk]]
[11:02:04.881]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.881]                     next
[11:02:04.881]                   args[[name]] <- ""
[11:02:04.881]                 }
[11:02:04.881]                 NAMES <- toupper(removed)
[11:02:04.881]                 for (kk in seq_along(NAMES)) {
[11:02:04.881]                   name <- removed[[kk]]
[11:02:04.881]                   NAME <- NAMES[[kk]]
[11:02:04.881]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.881]                     next
[11:02:04.881]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.881]                 }
[11:02:04.881]                 if (length(args) > 0) 
[11:02:04.881]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.881]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.881]             }
[11:02:04.881]             else {
[11:02:04.881]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.881]             }
[11:02:04.881]             {
[11:02:04.881]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.881]                   0L) {
[11:02:04.881]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.881]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.881]                   base::options(opts)
[11:02:04.881]                 }
[11:02:04.881]                 {
[11:02:04.881]                   {
[11:02:04.881]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.881]                     NULL
[11:02:04.881]                   }
[11:02:04.881]                   options(future.plan = NULL)
[11:02:04.881]                   if (is.na(NA_character_)) 
[11:02:04.881]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.881]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.881]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.881]                     .init = FALSE)
[11:02:04.881]                 }
[11:02:04.881]             }
[11:02:04.881]         }
[11:02:04.881]     })
[11:02:04.881]     if (TRUE) {
[11:02:04.881]         base::sink(type = "output", split = FALSE)
[11:02:04.881]         if (TRUE) {
[11:02:04.881]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.881]         }
[11:02:04.881]         else {
[11:02:04.881]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.881]         }
[11:02:04.881]         base::close(...future.stdout)
[11:02:04.881]         ...future.stdout <- NULL
[11:02:04.881]     }
[11:02:04.881]     ...future.result$conditions <- ...future.conditions
[11:02:04.881]     ...future.result$finished <- base::Sys.time()
[11:02:04.881]     ...future.result
[11:02:04.881] }
[11:02:04.885] assign_globals() ...
[11:02:04.885] List of 1
[11:02:04.885]  $ ii: int 3
[11:02:04.885]  - attr(*, "where")=List of 1
[11:02:04.885]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.885]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.885]  - attr(*, "resolved")= logi FALSE
[11:02:04.885]  - attr(*, "total_size")= num 35
[11:02:04.888] - copied ‘ii’ to environment
[11:02:04.888] assign_globals() ... done
[11:02:04.888] requestCore(): workers = 2
[11:02:04.889] Poll #1 (0): usedCores() = 2, workers = 2
[11:02:04.899] result() for MulticoreFuture ...
[11:02:04.900] result() for MulticoreFuture ...
[11:02:04.900] result() for MulticoreFuture ... done
[11:02:04.900] result() for MulticoreFuture ... done
[11:02:04.900] result() for MulticoreFuture ...
[11:02:04.901] result() for MulticoreFuture ... done
[11:02:04.902] MulticoreFuture started
 - Creating multicore future #4 ...
[11:02:04.904] plan(): Setting new future strategy stack:
[11:02:04.904] List of future strategies:
[11:02:04.904] 1. sequential:
[11:02:04.904]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.904]    - tweaked: FALSE
[11:02:04.904]    - call: NULL
[11:02:04.911] plan(): nbrOfWorkers() = 1
[11:02:04.913] getGlobalsAndPackages() ...
[11:02:04.913] Searching for globals...
[11:02:04.914] plan(): Setting new future strategy stack:
[11:02:04.914] List of future strategies:
[11:02:04.914] 1. multicore:
[11:02:04.914]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.914]    - tweaked: FALSE
[11:02:04.914]    - call: plan(multicore)
[11:02:04.915] - globals found: [2] ‘{’, ‘ii’
[11:02:04.915] Searching for globals ... DONE
[11:02:04.916] Resolving globals: FALSE
[11:02:04.916] The total size of the 1 globals is 35 bytes (35 bytes)
[11:02:04.917] The total size of the 1 globals exported for future expression (‘{; ii; }’) is 35 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There is one global: ‘ii’ (35 bytes of class ‘numeric’)
[11:02:04.917] - globals: [1] ‘ii’
[11:02:04.918] plan(): nbrOfWorkers() = 2
[11:02:04.918] 
[11:02:04.918] getGlobalsAndPackages() ... DONE
[11:02:04.919] Packages needed by the future expression (n = 0): <none>
[11:02:04.919] Packages needed by future strategies (n = 0): <none>
[11:02:04.920] {
[11:02:04.920]     {
[11:02:04.920]         {
[11:02:04.920]             ...future.startTime <- base::Sys.time()
[11:02:04.920]             {
[11:02:04.920]                 {
[11:02:04.920]                   {
[11:02:04.920]                     {
[11:02:04.920]                       base::local({
[11:02:04.920]                         has_future <- base::requireNamespace("future", 
[11:02:04.920]                           quietly = TRUE)
[11:02:04.920]                         if (has_future) {
[11:02:04.920]                           ns <- base::getNamespace("future")
[11:02:04.920]                           version <- ns[[".package"]][["version"]]
[11:02:04.920]                           if (is.null(version)) 
[11:02:04.920]                             version <- utils::packageVersion("future")
[11:02:04.920]                         }
[11:02:04.920]                         else {
[11:02:04.920]                           version <- NULL
[11:02:04.920]                         }
[11:02:04.920]                         if (!has_future || version < "1.8.0") {
[11:02:04.920]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.920]                             "", base::R.version$version.string), 
[11:02:04.920]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.920]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.920]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.920]                               "release", "version")], collapse = " "), 
[11:02:04.920]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.920]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.920]                             info)
[11:02:04.920]                           info <- base::paste(info, collapse = "; ")
[11:02:04.920]                           if (!has_future) {
[11:02:04.920]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.920]                               info)
[11:02:04.920]                           }
[11:02:04.920]                           else {
[11:02:04.920]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.920]                               info, version)
[11:02:04.920]                           }
[11:02:04.920]                           base::stop(msg)
[11:02:04.920]                         }
[11:02:04.920]                       })
[11:02:04.920]                     }
[11:02:04.920]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.920]                     base::options(mc.cores = 1L)
[11:02:04.920]                   }
[11:02:04.920]                   ...future.strategy.old <- future::plan("list")
[11:02:04.920]                   options(future.plan = NULL)
[11:02:04.920]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.920]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.920]                 }
[11:02:04.920]                 ...future.workdir <- getwd()
[11:02:04.920]             }
[11:02:04.920]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.920]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.920]         }
[11:02:04.920]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.920]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.920]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.920]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.920]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.920]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.920]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.920]             base::names(...future.oldOptions))
[11:02:04.920]     }
[11:02:04.920]     if (FALSE) {
[11:02:04.920]     }
[11:02:04.920]     else {
[11:02:04.920]         if (TRUE) {
[11:02:04.920]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.920]                 open = "w")
[11:02:04.920]         }
[11:02:04.920]         else {
[11:02:04.920]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.920]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.920]         }
[11:02:04.920]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.920]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.920]             base::sink(type = "output", split = FALSE)
[11:02:04.920]             base::close(...future.stdout)
[11:02:04.920]         }, add = TRUE)
[11:02:04.920]     }
[11:02:04.920]     ...future.frame <- base::sys.nframe()
[11:02:04.920]     ...future.conditions <- base::list()
[11:02:04.920]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.920]     if (FALSE) {
[11:02:04.920]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.920]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.920]     }
[11:02:04.920]     ...future.result <- base::tryCatch({
[11:02:04.920]         base::withCallingHandlers({
[11:02:04.920]             ...future.value <- base::withVisible(base::local({
[11:02:04.920]                 withCallingHandlers({
[11:02:04.920]                   {
[11:02:04.920]                     ii
[11:02:04.920]                   }
[11:02:04.920]                 }, immediateCondition = function(cond) {
[11:02:04.920]                   save_rds <- function (object, pathname, ...) 
[11:02:04.920]                   {
[11:02:04.920]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.920]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.920]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.920]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.920]                         fi_tmp[["mtime"]])
[11:02:04.920]                     }
[11:02:04.920]                     tryCatch({
[11:02:04.920]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.920]                     }, error = function(ex) {
[11:02:04.920]                       msg <- conditionMessage(ex)
[11:02:04.920]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.920]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.920]                         fi_tmp[["mtime"]], msg)
[11:02:04.920]                       ex$message <- msg
[11:02:04.920]                       stop(ex)
[11:02:04.920]                     })
[11:02:04.920]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.920]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.920]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.920]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.920]                       fi <- file.info(pathname)
[11:02:04.920]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.920]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.920]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.920]                         fi[["size"]], fi[["mtime"]])
[11:02:04.920]                       stop(msg)
[11:02:04.920]                     }
[11:02:04.920]                     invisible(pathname)
[11:02:04.920]                   }
[11:02:04.920]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.920]                     rootPath = tempdir()) 
[11:02:04.920]                   {
[11:02:04.920]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.920]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.920]                       tmpdir = path, fileext = ".rds")
[11:02:04.920]                     save_rds(obj, file)
[11:02:04.920]                   }
[11:02:04.920]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.920]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.920]                   {
[11:02:04.920]                     inherits <- base::inherits
[11:02:04.920]                     invokeRestart <- base::invokeRestart
[11:02:04.920]                     is.null <- base::is.null
[11:02:04.920]                     muffled <- FALSE
[11:02:04.920]                     if (inherits(cond, "message")) {
[11:02:04.920]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.920]                       if (muffled) 
[11:02:04.920]                         invokeRestart("muffleMessage")
[11:02:04.920]                     }
[11:02:04.920]                     else if (inherits(cond, "warning")) {
[11:02:04.920]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.920]                       if (muffled) 
[11:02:04.920]                         invokeRestart("muffleWarning")
[11:02:04.920]                     }
[11:02:04.920]                     else if (inherits(cond, "condition")) {
[11:02:04.920]                       if (!is.null(pattern)) {
[11:02:04.920]                         computeRestarts <- base::computeRestarts
[11:02:04.920]                         grepl <- base::grepl
[11:02:04.920]                         restarts <- computeRestarts(cond)
[11:02:04.920]                         for (restart in restarts) {
[11:02:04.920]                           name <- restart$name
[11:02:04.920]                           if (is.null(name)) 
[11:02:04.920]                             next
[11:02:04.920]                           if (!grepl(pattern, name)) 
[11:02:04.920]                             next
[11:02:04.920]                           invokeRestart(restart)
[11:02:04.920]                           muffled <- TRUE
[11:02:04.920]                           break
[11:02:04.920]                         }
[11:02:04.920]                       }
[11:02:04.920]                     }
[11:02:04.920]                     invisible(muffled)
[11:02:04.920]                   }
[11:02:04.920]                   muffleCondition(cond)
[11:02:04.920]                 })
[11:02:04.920]             }))
[11:02:04.920]             future::FutureResult(value = ...future.value$value, 
[11:02:04.920]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.920]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.920]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.920]                     ...future.globalenv.names))
[11:02:04.920]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.920]         }, condition = base::local({
[11:02:04.920]             c <- base::c
[11:02:04.920]             inherits <- base::inherits
[11:02:04.920]             invokeRestart <- base::invokeRestart
[11:02:04.920]             length <- base::length
[11:02:04.920]             list <- base::list
[11:02:04.920]             seq.int <- base::seq.int
[11:02:04.920]             signalCondition <- base::signalCondition
[11:02:04.920]             sys.calls <- base::sys.calls
[11:02:04.920]             `[[` <- base::`[[`
[11:02:04.920]             `+` <- base::`+`
[11:02:04.920]             `<<-` <- base::`<<-`
[11:02:04.920]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.920]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.920]                   3L)]
[11:02:04.920]             }
[11:02:04.920]             function(cond) {
[11:02:04.920]                 is_error <- inherits(cond, "error")
[11:02:04.920]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.920]                   NULL)
[11:02:04.920]                 if (is_error) {
[11:02:04.920]                   sessionInformation <- function() {
[11:02:04.920]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.920]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.920]                       search = base::search(), system = base::Sys.info())
[11:02:04.920]                   }
[11:02:04.920]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.920]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.920]                     cond$call), session = sessionInformation(), 
[11:02:04.920]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.920]                   signalCondition(cond)
[11:02:04.920]                 }
[11:02:04.920]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.920]                 "immediateCondition"))) {
[11:02:04.920]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.920]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.920]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.920]                   if (TRUE && !signal) {
[11:02:04.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.920]                     {
[11:02:04.920]                       inherits <- base::inherits
[11:02:04.920]                       invokeRestart <- base::invokeRestart
[11:02:04.920]                       is.null <- base::is.null
[11:02:04.920]                       muffled <- FALSE
[11:02:04.920]                       if (inherits(cond, "message")) {
[11:02:04.920]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.920]                         if (muffled) 
[11:02:04.920]                           invokeRestart("muffleMessage")
[11:02:04.920]                       }
[11:02:04.920]                       else if (inherits(cond, "warning")) {
[11:02:04.920]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.920]                         if (muffled) 
[11:02:04.920]                           invokeRestart("muffleWarning")
[11:02:04.920]                       }
[11:02:04.920]                       else if (inherits(cond, "condition")) {
[11:02:04.920]                         if (!is.null(pattern)) {
[11:02:04.920]                           computeRestarts <- base::computeRestarts
[11:02:04.920]                           grepl <- base::grepl
[11:02:04.920]                           restarts <- computeRestarts(cond)
[11:02:04.920]                           for (restart in restarts) {
[11:02:04.920]                             name <- restart$name
[11:02:04.920]                             if (is.null(name)) 
[11:02:04.920]                               next
[11:02:04.920]                             if (!grepl(pattern, name)) 
[11:02:04.920]                               next
[11:02:04.920]                             invokeRestart(restart)
[11:02:04.920]                             muffled <- TRUE
[11:02:04.920]                             break
[11:02:04.920]                           }
[11:02:04.920]                         }
[11:02:04.920]                       }
[11:02:04.920]                       invisible(muffled)
[11:02:04.920]                     }
[11:02:04.920]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.920]                   }
[11:02:04.920]                 }
[11:02:04.920]                 else {
[11:02:04.920]                   if (TRUE) {
[11:02:04.920]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.920]                     {
[11:02:04.920]                       inherits <- base::inherits
[11:02:04.920]                       invokeRestart <- base::invokeRestart
[11:02:04.920]                       is.null <- base::is.null
[11:02:04.920]                       muffled <- FALSE
[11:02:04.920]                       if (inherits(cond, "message")) {
[11:02:04.920]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.920]                         if (muffled) 
[11:02:04.920]                           invokeRestart("muffleMessage")
[11:02:04.920]                       }
[11:02:04.920]                       else if (inherits(cond, "warning")) {
[11:02:04.920]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.920]                         if (muffled) 
[11:02:04.920]                           invokeRestart("muffleWarning")
[11:02:04.920]                       }
[11:02:04.920]                       else if (inherits(cond, "condition")) {
[11:02:04.920]                         if (!is.null(pattern)) {
[11:02:04.920]                           computeRestarts <- base::computeRestarts
[11:02:04.920]                           grepl <- base::grepl
[11:02:04.920]                           restarts <- computeRestarts(cond)
[11:02:04.920]                           for (restart in restarts) {
[11:02:04.920]                             name <- restart$name
[11:02:04.920]                             if (is.null(name)) 
[11:02:04.920]                               next
[11:02:04.920]                             if (!grepl(pattern, name)) 
[11:02:04.920]                               next
[11:02:04.920]                             invokeRestart(restart)
[11:02:04.920]                             muffled <- TRUE
[11:02:04.920]                             break
[11:02:04.920]                           }
[11:02:04.920]                         }
[11:02:04.920]                       }
[11:02:04.920]                       invisible(muffled)
[11:02:04.920]                     }
[11:02:04.920]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.920]                   }
[11:02:04.920]                 }
[11:02:04.920]             }
[11:02:04.920]         }))
[11:02:04.920]     }, error = function(ex) {
[11:02:04.920]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.920]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.920]                 ...future.rng), started = ...future.startTime, 
[11:02:04.920]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.920]             version = "1.8"), class = "FutureResult")
[11:02:04.920]     }, finally = {
[11:02:04.920]         if (!identical(...future.workdir, getwd())) 
[11:02:04.920]             setwd(...future.workdir)
[11:02:04.920]         {
[11:02:04.920]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.920]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.920]             }
[11:02:04.920]             base::options(...future.oldOptions)
[11:02:04.920]             if (.Platform$OS.type == "windows") {
[11:02:04.920]                 old_names <- names(...future.oldEnvVars)
[11:02:04.920]                 envs <- base::Sys.getenv()
[11:02:04.920]                 names <- names(envs)
[11:02:04.920]                 common <- intersect(names, old_names)
[11:02:04.920]                 added <- setdiff(names, old_names)
[11:02:04.920]                 removed <- setdiff(old_names, names)
[11:02:04.920]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.920]                   envs[common]]
[11:02:04.920]                 NAMES <- toupper(changed)
[11:02:04.920]                 args <- list()
[11:02:04.920]                 for (kk in seq_along(NAMES)) {
[11:02:04.920]                   name <- changed[[kk]]
[11:02:04.920]                   NAME <- NAMES[[kk]]
[11:02:04.920]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.920]                     next
[11:02:04.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.920]                 }
[11:02:04.920]                 NAMES <- toupper(added)
[11:02:04.920]                 for (kk in seq_along(NAMES)) {
[11:02:04.920]                   name <- added[[kk]]
[11:02:04.920]                   NAME <- NAMES[[kk]]
[11:02:04.920]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.920]                     next
[11:02:04.920]                   args[[name]] <- ""
[11:02:04.920]                 }
[11:02:04.920]                 NAMES <- toupper(removed)
[11:02:04.920]                 for (kk in seq_along(NAMES)) {
[11:02:04.920]                   name <- removed[[kk]]
[11:02:04.920]                   NAME <- NAMES[[kk]]
[11:02:04.920]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.920]                     next
[11:02:04.920]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.920]                 }
[11:02:04.920]                 if (length(args) > 0) 
[11:02:04.920]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.920]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.920]             }
[11:02:04.920]             else {
[11:02:04.920]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.920]             }
[11:02:04.920]             {
[11:02:04.920]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.920]                   0L) {
[11:02:04.920]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.920]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.920]                   base::options(opts)
[11:02:04.920]                 }
[11:02:04.920]                 {
[11:02:04.920]                   {
[11:02:04.920]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.920]                     NULL
[11:02:04.920]                   }
[11:02:04.920]                   options(future.plan = NULL)
[11:02:04.920]                   if (is.na(NA_character_)) 
[11:02:04.920]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.920]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.920]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.920]                     .init = FALSE)
[11:02:04.920]                 }
[11:02:04.920]             }
[11:02:04.920]         }
[11:02:04.920]     })
[11:02:04.920]     if (TRUE) {
[11:02:04.920]         base::sink(type = "output", split = FALSE)
[11:02:04.920]         if (TRUE) {
[11:02:04.920]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.920]         }
[11:02:04.920]         else {
[11:02:04.920]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.920]         }
[11:02:04.920]         base::close(...future.stdout)
[11:02:04.920]         ...future.stdout <- NULL
[11:02:04.920]     }
[11:02:04.920]     ...future.result$conditions <- ...future.conditions
[11:02:04.920]     ...future.result$finished <- base::Sys.time()
[11:02:04.920]     ...future.result
[11:02:04.920] }
[11:02:04.922] assign_globals() ...
[11:02:04.922] List of 1
[11:02:04.922]  $ ii: int 4
[11:02:04.922]  - attr(*, "where")=List of 1
[11:02:04.922]   ..$ ii:<environment: R_EmptyEnv> 
[11:02:04.922]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:04.922]  - attr(*, "resolved")= logi FALSE
[11:02:04.922]  - attr(*, "total_size")= num 35
[11:02:04.926] - copied ‘ii’ to environment
[11:02:04.926] assign_globals() ... done
[11:02:04.926] requestCore(): workers = 2
[11:02:04.926] Poll #1 (0): usedCores() = 2, workers = 2
[11:02:04.937] result() for MulticoreFuture ...
[11:02:04.938] result() for MulticoreFuture ...
[11:02:04.938] result() for MulticoreFuture ... done
[11:02:04.938] result() for MulticoreFuture ... done
[11:02:04.938] result() for MulticoreFuture ...
[11:02:04.938] result() for MulticoreFuture ... done
[11:02:04.940] MulticoreFuture started
 - Resolving 4 multicore futures
[11:02:04.942] result() for MulticoreFuture ...
[11:02:04.942] plan(): Setting new future strategy stack:
[11:02:04.942] result() for MulticoreFuture ... done
[11:02:04.942] result() for MulticoreFuture ...
[11:02:04.942] result() for MulticoreFuture ... done
[11:02:04.942] result() for MulticoreFuture ...
[11:02:04.942] List of future strategies:
[11:02:04.942] 1. sequential:
[11:02:04.942]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.942]    - tweaked: FALSE
[11:02:04.942]    - call: NULL
[11:02:04.943] result() for MulticoreFuture ... done
[11:02:04.943] result() for MulticoreFuture ...
[11:02:04.943] plan(): nbrOfWorkers() = 1
[11:02:04.943] result() for MulticoreFuture ... done
[11:02:04.943] result() for MulticoreFuture ...
[11:02:04.944] result() for MulticoreFuture ...
[11:02:04.945] result() for MulticoreFuture ... done
[11:02:04.945] result() for MulticoreFuture ... done
[11:02:04.945] plan(): Setting new future strategy stack:
[11:02:04.945] result() for MulticoreFuture ...
[11:02:04.945] result() for MulticoreFuture ... done
[11:02:04.945] result() for MulticoreFuture ...
[11:02:04.945] List of future strategies:
[11:02:04.945] 1. multicore:
[11:02:04.945]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.945]    - tweaked: FALSE
[11:02:04.945]    - call: plan(multicore)
[11:02:04.949] plan(): nbrOfWorkers() = 2
[11:02:04.949] result() for MulticoreFuture ...
[11:02:04.949] result() for MulticoreFuture ... done
[11:02:04.949] result() for MulticoreFuture ... done
[11:02:04.949] result() for MulticoreFuture ...
[11:02:04.950] result() for MulticoreFuture ... done
*** multicore(..., globals = TRUE) and errors
[11:02:04.952] getGlobalsAndPackages() ...
[11:02:04.952] Searching for globals...
[11:02:04.953] - globals found: [2] ‘{’, ‘stop’
[11:02:04.953] Searching for globals ... DONE
[11:02:04.954] Resolving globals: FALSE
[11:02:04.954] 
[11:02:04.954] 
[11:02:04.954] getGlobalsAndPackages() ... DONE
[11:02:04.955] Packages needed by the future expression (n = 0): <none>
[11:02:04.955] Packages needed by future strategies (n = 0): <none>
[11:02:04.955] {
[11:02:04.955]     {
[11:02:04.955]         {
[11:02:04.955]             ...future.startTime <- base::Sys.time()
[11:02:04.955]             {
[11:02:04.955]                 {
[11:02:04.955]                   {
[11:02:04.955]                     {
[11:02:04.955]                       base::local({
[11:02:04.955]                         has_future <- base::requireNamespace("future", 
[11:02:04.955]                           quietly = TRUE)
[11:02:04.955]                         if (has_future) {
[11:02:04.955]                           ns <- base::getNamespace("future")
[11:02:04.955]                           version <- ns[[".package"]][["version"]]
[11:02:04.955]                           if (is.null(version)) 
[11:02:04.955]                             version <- utils::packageVersion("future")
[11:02:04.955]                         }
[11:02:04.955]                         else {
[11:02:04.955]                           version <- NULL
[11:02:04.955]                         }
[11:02:04.955]                         if (!has_future || version < "1.8.0") {
[11:02:04.955]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.955]                             "", base::R.version$version.string), 
[11:02:04.955]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.955]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.955]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.955]                               "release", "version")], collapse = " "), 
[11:02:04.955]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.955]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.955]                             info)
[11:02:04.955]                           info <- base::paste(info, collapse = "; ")
[11:02:04.955]                           if (!has_future) {
[11:02:04.955]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.955]                               info)
[11:02:04.955]                           }
[11:02:04.955]                           else {
[11:02:04.955]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.955]                               info, version)
[11:02:04.955]                           }
[11:02:04.955]                           base::stop(msg)
[11:02:04.955]                         }
[11:02:04.955]                       })
[11:02:04.955]                     }
[11:02:04.955]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.955]                     base::options(mc.cores = 1L)
[11:02:04.955]                   }
[11:02:04.955]                   ...future.strategy.old <- future::plan("list")
[11:02:04.955]                   options(future.plan = NULL)
[11:02:04.955]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.955]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.955]                 }
[11:02:04.955]                 ...future.workdir <- getwd()
[11:02:04.955]             }
[11:02:04.955]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.955]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.955]         }
[11:02:04.955]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.955]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.955]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.955]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.955]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.955]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.955]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.955]             base::names(...future.oldOptions))
[11:02:04.955]     }
[11:02:04.955]     if (FALSE) {
[11:02:04.955]     }
[11:02:04.955]     else {
[11:02:04.955]         if (TRUE) {
[11:02:04.955]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.955]                 open = "w")
[11:02:04.955]         }
[11:02:04.955]         else {
[11:02:04.955]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.955]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.955]         }
[11:02:04.955]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.955]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.955]             base::sink(type = "output", split = FALSE)
[11:02:04.955]             base::close(...future.stdout)
[11:02:04.955]         }, add = TRUE)
[11:02:04.955]     }
[11:02:04.955]     ...future.frame <- base::sys.nframe()
[11:02:04.955]     ...future.conditions <- base::list()
[11:02:04.955]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.955]     if (FALSE) {
[11:02:04.955]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.955]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.955]     }
[11:02:04.955]     ...future.result <- base::tryCatch({
[11:02:04.955]         base::withCallingHandlers({
[11:02:04.955]             ...future.value <- base::withVisible(base::local({
[11:02:04.955]                 withCallingHandlers({
[11:02:04.955]                   {
[11:02:04.955]                     stop("Whoops!")
[11:02:04.955]                     1
[11:02:04.955]                   }
[11:02:04.955]                 }, immediateCondition = function(cond) {
[11:02:04.955]                   save_rds <- function (object, pathname, ...) 
[11:02:04.955]                   {
[11:02:04.955]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.955]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.955]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.955]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.955]                         fi_tmp[["mtime"]])
[11:02:04.955]                     }
[11:02:04.955]                     tryCatch({
[11:02:04.955]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.955]                     }, error = function(ex) {
[11:02:04.955]                       msg <- conditionMessage(ex)
[11:02:04.955]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.955]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.955]                         fi_tmp[["mtime"]], msg)
[11:02:04.955]                       ex$message <- msg
[11:02:04.955]                       stop(ex)
[11:02:04.955]                     })
[11:02:04.955]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.955]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.955]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.955]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.955]                       fi <- file.info(pathname)
[11:02:04.955]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.955]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.955]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.955]                         fi[["size"]], fi[["mtime"]])
[11:02:04.955]                       stop(msg)
[11:02:04.955]                     }
[11:02:04.955]                     invisible(pathname)
[11:02:04.955]                   }
[11:02:04.955]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.955]                     rootPath = tempdir()) 
[11:02:04.955]                   {
[11:02:04.955]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.955]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.955]                       tmpdir = path, fileext = ".rds")
[11:02:04.955]                     save_rds(obj, file)
[11:02:04.955]                   }
[11:02:04.955]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.955]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.955]                   {
[11:02:04.955]                     inherits <- base::inherits
[11:02:04.955]                     invokeRestart <- base::invokeRestart
[11:02:04.955]                     is.null <- base::is.null
[11:02:04.955]                     muffled <- FALSE
[11:02:04.955]                     if (inherits(cond, "message")) {
[11:02:04.955]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.955]                       if (muffled) 
[11:02:04.955]                         invokeRestart("muffleMessage")
[11:02:04.955]                     }
[11:02:04.955]                     else if (inherits(cond, "warning")) {
[11:02:04.955]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.955]                       if (muffled) 
[11:02:04.955]                         invokeRestart("muffleWarning")
[11:02:04.955]                     }
[11:02:04.955]                     else if (inherits(cond, "condition")) {
[11:02:04.955]                       if (!is.null(pattern)) {
[11:02:04.955]                         computeRestarts <- base::computeRestarts
[11:02:04.955]                         grepl <- base::grepl
[11:02:04.955]                         restarts <- computeRestarts(cond)
[11:02:04.955]                         for (restart in restarts) {
[11:02:04.955]                           name <- restart$name
[11:02:04.955]                           if (is.null(name)) 
[11:02:04.955]                             next
[11:02:04.955]                           if (!grepl(pattern, name)) 
[11:02:04.955]                             next
[11:02:04.955]                           invokeRestart(restart)
[11:02:04.955]                           muffled <- TRUE
[11:02:04.955]                           break
[11:02:04.955]                         }
[11:02:04.955]                       }
[11:02:04.955]                     }
[11:02:04.955]                     invisible(muffled)
[11:02:04.955]                   }
[11:02:04.955]                   muffleCondition(cond)
[11:02:04.955]                 })
[11:02:04.955]             }))
[11:02:04.955]             future::FutureResult(value = ...future.value$value, 
[11:02:04.955]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.955]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.955]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.955]                     ...future.globalenv.names))
[11:02:04.955]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.955]         }, condition = base::local({
[11:02:04.955]             c <- base::c
[11:02:04.955]             inherits <- base::inherits
[11:02:04.955]             invokeRestart <- base::invokeRestart
[11:02:04.955]             length <- base::length
[11:02:04.955]             list <- base::list
[11:02:04.955]             seq.int <- base::seq.int
[11:02:04.955]             signalCondition <- base::signalCondition
[11:02:04.955]             sys.calls <- base::sys.calls
[11:02:04.955]             `[[` <- base::`[[`
[11:02:04.955]             `+` <- base::`+`
[11:02:04.955]             `<<-` <- base::`<<-`
[11:02:04.955]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.955]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.955]                   3L)]
[11:02:04.955]             }
[11:02:04.955]             function(cond) {
[11:02:04.955]                 is_error <- inherits(cond, "error")
[11:02:04.955]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.955]                   NULL)
[11:02:04.955]                 if (is_error) {
[11:02:04.955]                   sessionInformation <- function() {
[11:02:04.955]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.955]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.955]                       search = base::search(), system = base::Sys.info())
[11:02:04.955]                   }
[11:02:04.955]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.955]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.955]                     cond$call), session = sessionInformation(), 
[11:02:04.955]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.955]                   signalCondition(cond)
[11:02:04.955]                 }
[11:02:04.955]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.955]                 "immediateCondition"))) {
[11:02:04.955]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.955]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.955]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.955]                   if (TRUE && !signal) {
[11:02:04.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.955]                     {
[11:02:04.955]                       inherits <- base::inherits
[11:02:04.955]                       invokeRestart <- base::invokeRestart
[11:02:04.955]                       is.null <- base::is.null
[11:02:04.955]                       muffled <- FALSE
[11:02:04.955]                       if (inherits(cond, "message")) {
[11:02:04.955]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.955]                         if (muffled) 
[11:02:04.955]                           invokeRestart("muffleMessage")
[11:02:04.955]                       }
[11:02:04.955]                       else if (inherits(cond, "warning")) {
[11:02:04.955]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.955]                         if (muffled) 
[11:02:04.955]                           invokeRestart("muffleWarning")
[11:02:04.955]                       }
[11:02:04.955]                       else if (inherits(cond, "condition")) {
[11:02:04.955]                         if (!is.null(pattern)) {
[11:02:04.955]                           computeRestarts <- base::computeRestarts
[11:02:04.955]                           grepl <- base::grepl
[11:02:04.955]                           restarts <- computeRestarts(cond)
[11:02:04.955]                           for (restart in restarts) {
[11:02:04.955]                             name <- restart$name
[11:02:04.955]                             if (is.null(name)) 
[11:02:04.955]                               next
[11:02:04.955]                             if (!grepl(pattern, name)) 
[11:02:04.955]                               next
[11:02:04.955]                             invokeRestart(restart)
[11:02:04.955]                             muffled <- TRUE
[11:02:04.955]                             break
[11:02:04.955]                           }
[11:02:04.955]                         }
[11:02:04.955]                       }
[11:02:04.955]                       invisible(muffled)
[11:02:04.955]                     }
[11:02:04.955]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.955]                   }
[11:02:04.955]                 }
[11:02:04.955]                 else {
[11:02:04.955]                   if (TRUE) {
[11:02:04.955]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.955]                     {
[11:02:04.955]                       inherits <- base::inherits
[11:02:04.955]                       invokeRestart <- base::invokeRestart
[11:02:04.955]                       is.null <- base::is.null
[11:02:04.955]                       muffled <- FALSE
[11:02:04.955]                       if (inherits(cond, "message")) {
[11:02:04.955]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.955]                         if (muffled) 
[11:02:04.955]                           invokeRestart("muffleMessage")
[11:02:04.955]                       }
[11:02:04.955]                       else if (inherits(cond, "warning")) {
[11:02:04.955]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.955]                         if (muffled) 
[11:02:04.955]                           invokeRestart("muffleWarning")
[11:02:04.955]                       }
[11:02:04.955]                       else if (inherits(cond, "condition")) {
[11:02:04.955]                         if (!is.null(pattern)) {
[11:02:04.955]                           computeRestarts <- base::computeRestarts
[11:02:04.955]                           grepl <- base::grepl
[11:02:04.955]                           restarts <- computeRestarts(cond)
[11:02:04.955]                           for (restart in restarts) {
[11:02:04.955]                             name <- restart$name
[11:02:04.955]                             if (is.null(name)) 
[11:02:04.955]                               next
[11:02:04.955]                             if (!grepl(pattern, name)) 
[11:02:04.955]                               next
[11:02:04.955]                             invokeRestart(restart)
[11:02:04.955]                             muffled <- TRUE
[11:02:04.955]                             break
[11:02:04.955]                           }
[11:02:04.955]                         }
[11:02:04.955]                       }
[11:02:04.955]                       invisible(muffled)
[11:02:04.955]                     }
[11:02:04.955]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.955]                   }
[11:02:04.955]                 }
[11:02:04.955]             }
[11:02:04.955]         }))
[11:02:04.955]     }, error = function(ex) {
[11:02:04.955]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.955]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.955]                 ...future.rng), started = ...future.startTime, 
[11:02:04.955]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.955]             version = "1.8"), class = "FutureResult")
[11:02:04.955]     }, finally = {
[11:02:04.955]         if (!identical(...future.workdir, getwd())) 
[11:02:04.955]             setwd(...future.workdir)
[11:02:04.955]         {
[11:02:04.955]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.955]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.955]             }
[11:02:04.955]             base::options(...future.oldOptions)
[11:02:04.955]             if (.Platform$OS.type == "windows") {
[11:02:04.955]                 old_names <- names(...future.oldEnvVars)
[11:02:04.955]                 envs <- base::Sys.getenv()
[11:02:04.955]                 names <- names(envs)
[11:02:04.955]                 common <- intersect(names, old_names)
[11:02:04.955]                 added <- setdiff(names, old_names)
[11:02:04.955]                 removed <- setdiff(old_names, names)
[11:02:04.955]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.955]                   envs[common]]
[11:02:04.955]                 NAMES <- toupper(changed)
[11:02:04.955]                 args <- list()
[11:02:04.955]                 for (kk in seq_along(NAMES)) {
[11:02:04.955]                   name <- changed[[kk]]
[11:02:04.955]                   NAME <- NAMES[[kk]]
[11:02:04.955]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.955]                     next
[11:02:04.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.955]                 }
[11:02:04.955]                 NAMES <- toupper(added)
[11:02:04.955]                 for (kk in seq_along(NAMES)) {
[11:02:04.955]                   name <- added[[kk]]
[11:02:04.955]                   NAME <- NAMES[[kk]]
[11:02:04.955]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.955]                     next
[11:02:04.955]                   args[[name]] <- ""
[11:02:04.955]                 }
[11:02:04.955]                 NAMES <- toupper(removed)
[11:02:04.955]                 for (kk in seq_along(NAMES)) {
[11:02:04.955]                   name <- removed[[kk]]
[11:02:04.955]                   NAME <- NAMES[[kk]]
[11:02:04.955]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.955]                     next
[11:02:04.955]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.955]                 }
[11:02:04.955]                 if (length(args) > 0) 
[11:02:04.955]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.955]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.955]             }
[11:02:04.955]             else {
[11:02:04.955]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.955]             }
[11:02:04.955]             {
[11:02:04.955]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.955]                   0L) {
[11:02:04.955]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.955]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.955]                   base::options(opts)
[11:02:04.955]                 }
[11:02:04.955]                 {
[11:02:04.955]                   {
[11:02:04.955]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.955]                     NULL
[11:02:04.955]                   }
[11:02:04.955]                   options(future.plan = NULL)
[11:02:04.955]                   if (is.na(NA_character_)) 
[11:02:04.955]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.955]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.955]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.955]                     .init = FALSE)
[11:02:04.955]                 }
[11:02:04.955]             }
[11:02:04.955]         }
[11:02:04.955]     })
[11:02:04.955]     if (TRUE) {
[11:02:04.955]         base::sink(type = "output", split = FALSE)
[11:02:04.955]         if (TRUE) {
[11:02:04.955]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.955]         }
[11:02:04.955]         else {
[11:02:04.955]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.955]         }
[11:02:04.955]         base::close(...future.stdout)
[11:02:04.955]         ...future.stdout <- NULL
[11:02:04.955]     }
[11:02:04.955]     ...future.result$conditions <- ...future.conditions
[11:02:04.955]     ...future.result$finished <- base::Sys.time()
[11:02:04.955]     ...future.result
[11:02:04.955] }
[11:02:04.958] requestCore(): workers = 2
[11:02:04.960] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop("Whoops!")
    1
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.961] plan(): Setting new future strategy stack:
[11:02:04.961] List of future strategies:
[11:02:04.961] 1. sequential:
[11:02:04.961]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.961]    - tweaked: FALSE
[11:02:04.961]    - call: NULL
[11:02:04.962] plan(): nbrOfWorkers() = 1
[11:02:04.964] plan(): Setting new future strategy stack:
[11:02:04.964] List of future strategies:
[11:02:04.964] 1. multicore:
[11:02:04.964]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.964]    - tweaked: FALSE
[11:02:04.964]    - call: plan(multicore)
[11:02:04.967] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.969] result() for MulticoreFuture ...
[11:02:04.972] result() for MulticoreFuture ...
[11:02:04.972] result() for MulticoreFuture ... done
[11:02:04.972] signalConditions() ...
[11:02:04.972]  - include = ‘immediateCondition’
[11:02:04.972]  - exclude = 
[11:02:04.972]  - resignal = FALSE
[11:02:04.972]  - Number of conditions: 1
[11:02:04.973] signalConditions() ... done
[11:02:04.973] result() for MulticoreFuture ... done
[11:02:04.973] result() for MulticoreFuture ...
[11:02:04.973] result() for MulticoreFuture ... done
[11:02:04.973] signalConditions() ...
[11:02:04.973]  - include = ‘immediateCondition’
[11:02:04.973]  - exclude = 
[11:02:04.973]  - resignal = FALSE
[11:02:04.973]  - Number of conditions: 1
[11:02:04.974] signalConditions() ... done
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.974] result() for MulticoreFuture ...
[11:02:04.974] result() for MulticoreFuture ... done
[11:02:04.974] result() for MulticoreFuture ...
[11:02:04.975] result() for MulticoreFuture ... done
[11:02:04.975] signalConditions() ...
[11:02:04.975]  - include = ‘immediateCondition’
[11:02:04.975]  - exclude = 
[11:02:04.975]  - resignal = FALSE
[11:02:04.975]  - Number of conditions: 1
[11:02:04.975] signalConditions() ... done
[11:02:04.975] Future state: ‘finished’
[11:02:04.975] result() for MulticoreFuture ...
[11:02:04.976] result() for MulticoreFuture ... done
[11:02:04.976] signalConditions() ...
[11:02:04.976]  - include = ‘condition’
[11:02:04.976]  - exclude = ‘immediateCondition’
[11:02:04.976]  - resignal = TRUE
[11:02:04.976]  - Number of conditions: 1
[11:02:04.976]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.976] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.979] result() for MulticoreFuture ...
[11:02:04.980] result() for MulticoreFuture ... done
[11:02:04.980] result() for MulticoreFuture ...
[11:02:04.980] result() for MulticoreFuture ... done
[11:02:04.980] signalConditions() ...
[11:02:04.980]  - include = ‘immediateCondition’
[11:02:04.980]  - exclude = 
[11:02:04.980]  - resignal = FALSE
[11:02:04.980]  - Number of conditions: 1
[11:02:04.981] signalConditions() ... done
[11:02:04.981] Future state: ‘finished’
[11:02:04.981] result() for MulticoreFuture ...
[11:02:04.981] result() for MulticoreFuture ... done
[11:02:04.981] signalConditions() ...
[11:02:04.981]  - include = ‘condition’
[11:02:04.981]  - exclude = ‘immediateCondition’
[11:02:04.981]  - resignal = TRUE
[11:02:04.981]  - Number of conditions: 1
[11:02:04.982]  - Condition #1: ‘simpleError’, ‘error’, ‘condition’
[11:02:04.982] signalConditions() ... done
[1] "Error in withCallingHandlers({ : Whoops!\n"
attr(,"class")
[1] "try-error"
attr(,"condition")
<simpleError in withCallingHandlers({    {        stop("Whoops!")        1    }}, immediateCondition = function(cond) {    save_rds <- function (object, pathname, ...)     {        pathname_tmp <- sprintf("%s.tmp", pathname)        if (file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]])        }        tryCatch({            saveRDS(object, file = pathname_tmp, ...)        }, error = function(ex) {            msg <- conditionMessage(ex)            fi_tmp <- file.info(pathname_tmp)            msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 msg)            ex$message <- msg            stop(ex)        })        stopifnot(file_test("-f", pathname_tmp))        res <- file.rename(from = pathname_tmp, to = pathname)        if (!res || file_test("-f", pathname_tmp)) {            fi_tmp <- file.info(pathname_tmp)            fi <- file.info(pathname)            msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)",                 sQuote(pathname_tmp), fi_tmp[["size"]], fi_tmp[["mtime"]],                 sQuote(pathname), fi[["size"]], fi[["mtime"]])            stop(msg)        }        invisible(pathname)    }    saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath),         rootPath = tempdir())     {        obj <- list(time = Sys.time(), condition = cond)        file <- tempfile(pattern = class(cond)[1], tmpdir = path,             fileext = ".rds")        save_rds(obj, file)    }    saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")    muffleCondition <- function (cond, pattern = "^muffle")     {        inherits <- base::inherits        invokeRestart <- base::invokeRestart        is.null <- base::is.null        muffled <- FALSE        if (inherits(cond, "message")) {            muffled <- grepl(pattern, "muffleMessage")            if (muffled)                 invokeRestart("muffleMessage")        }        else if (inherits(cond, "warning")) {            muffled <- grepl(pattern, "muffleWarning")            if (muffled)                 invokeRestart("muffleWarning")        }        else if (inherits(cond, "condition")) {            if (!is.null(pattern)) {                computeRestarts <- base::computeRestarts                grepl <- base::grepl                restarts <- computeRestarts(cond)                for (restart in restarts) {                  name <- restart$name                  if (is.null(name))                     next                  if (!grepl(pattern, name))                     next                  invokeRestart(restart)                  muffled <- TRUE                  break                }            }        }        invisible(muffled)    }    muffleCondition(cond)}): Whoops!>
[11:02:04.984] getGlobalsAndPackages() ...
[11:02:04.984] 
[11:02:04.984] - globals: [0] <none>
[11:02:04.985] getGlobalsAndPackages() ... DONE
[11:02:04.985] Packages needed by the future expression (n = 0): <none>
[11:02:04.985] Packages needed by future strategies (n = 0): <none>
[11:02:04.986] {
[11:02:04.986]     {
[11:02:04.986]         {
[11:02:04.986]             ...future.startTime <- base::Sys.time()
[11:02:04.986]             {
[11:02:04.986]                 {
[11:02:04.986]                   {
[11:02:04.986]                     {
[11:02:04.986]                       base::local({
[11:02:04.986]                         has_future <- base::requireNamespace("future", 
[11:02:04.986]                           quietly = TRUE)
[11:02:04.986]                         if (has_future) {
[11:02:04.986]                           ns <- base::getNamespace("future")
[11:02:04.986]                           version <- ns[[".package"]][["version"]]
[11:02:04.986]                           if (is.null(version)) 
[11:02:04.986]                             version <- utils::packageVersion("future")
[11:02:04.986]                         }
[11:02:04.986]                         else {
[11:02:04.986]                           version <- NULL
[11:02:04.986]                         }
[11:02:04.986]                         if (!has_future || version < "1.8.0") {
[11:02:04.986]                           info <- base::c(r_version = base::gsub("R version ", 
[11:02:04.986]                             "", base::R.version$version.string), 
[11:02:04.986]                             platform = base::sprintf("%s (%s-bit)", 
[11:02:04.986]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:04.986]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:04.986]                               "release", "version")], collapse = " "), 
[11:02:04.986]                             hostname = base::Sys.info()[["nodename"]])
[11:02:04.986]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:02:04.986]                             info)
[11:02:04.986]                           info <- base::paste(info, collapse = "; ")
[11:02:04.986]                           if (!has_future) {
[11:02:04.986]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:04.986]                               info)
[11:02:04.986]                           }
[11:02:04.986]                           else {
[11:02:04.986]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:04.986]                               info, version)
[11:02:04.986]                           }
[11:02:04.986]                           base::stop(msg)
[11:02:04.986]                         }
[11:02:04.986]                       })
[11:02:04.986]                     }
[11:02:04.986]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:02:04.986]                     base::options(mc.cores = 1L)
[11:02:04.986]                   }
[11:02:04.986]                   ...future.strategy.old <- future::plan("list")
[11:02:04.986]                   options(future.plan = NULL)
[11:02:04.986]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.986]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:04.986]                 }
[11:02:04.986]                 ...future.workdir <- getwd()
[11:02:04.986]             }
[11:02:04.986]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:04.986]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:04.986]         }
[11:02:04.986]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:04.986]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:04.986]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:04.986]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:04.986]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:04.986]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:04.986]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:04.986]             base::names(...future.oldOptions))
[11:02:04.986]     }
[11:02:04.986]     if (FALSE) {
[11:02:04.986]     }
[11:02:04.986]     else {
[11:02:04.986]         if (TRUE) {
[11:02:04.986]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:04.986]                 open = "w")
[11:02:04.986]         }
[11:02:04.986]         else {
[11:02:04.986]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:04.986]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:04.986]         }
[11:02:04.986]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:04.986]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:04.986]             base::sink(type = "output", split = FALSE)
[11:02:04.986]             base::close(...future.stdout)
[11:02:04.986]         }, add = TRUE)
[11:02:04.986]     }
[11:02:04.986]     ...future.frame <- base::sys.nframe()
[11:02:04.986]     ...future.conditions <- base::list()
[11:02:04.986]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:04.986]     if (FALSE) {
[11:02:04.986]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:04.986]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:04.986]     }
[11:02:04.986]     ...future.result <- base::tryCatch({
[11:02:04.986]         base::withCallingHandlers({
[11:02:04.986]             ...future.value <- base::withVisible(base::local({
[11:02:04.986]                 withCallingHandlers({
[11:02:04.986]                   {
[11:02:04.986]                     stop(structure(list(message = "boom"), class = c("MyError", 
[11:02:04.986]                       "error", "condition")))
[11:02:04.986]                   }
[11:02:04.986]                 }, immediateCondition = function(cond) {
[11:02:04.986]                   save_rds <- function (object, pathname, ...) 
[11:02:04.986]                   {
[11:02:04.986]                     pathname_tmp <- sprintf("%s.tmp", pathname)
[11:02:04.986]                     if (file_test("-f", pathname_tmp)) {
[11:02:04.986]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.986]                       stopf("Cannot save RDS file because a temporary save file already exists: %s (%0.f bytes; last modified on %s)", 
[11:02:04.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.986]                         fi_tmp[["mtime"]])
[11:02:04.986]                     }
[11:02:04.986]                     tryCatch({
[11:02:04.986]                       saveRDS(object, file = pathname_tmp, ...)
[11:02:04.986]                     }, error = function(ex) {
[11:02:04.986]                       msg <- conditionMessage(ex)
[11:02:04.986]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.986]                       msg <- sprintf("saveRDS() failed to save to temporary file %s (%.0f bytes; last modified on %s). The reason was: %s", 
[11:02:04.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.986]                         fi_tmp[["mtime"]], msg)
[11:02:04.986]                       ex$message <- msg
[11:02:04.986]                       stop(ex)
[11:02:04.986]                     })
[11:02:04.986]                     stopifnot(file_test("-f", pathname_tmp))
[11:02:04.986]                     res <- file.rename(from = pathname_tmp, to = pathname)
[11:02:04.986]                     if (!res || file_test("-f", pathname_tmp)) {
[11:02:04.986]                       fi_tmp <- file.info(pathname_tmp)
[11:02:04.986]                       fi <- file.info(pathname)
[11:02:04.986]                       msg <- sprintf("save_rds() failed to rename temporary save file %s (%0.f bytes; last modified on %s) to %s (%0.f bytes; last modified on %s)", 
[11:02:04.986]                         sQuote(pathname_tmp), fi_tmp[["size"]], 
[11:02:04.986]                         fi_tmp[["mtime"]], sQuote(pathname), 
[11:02:04.986]                         fi[["size"]], fi[["mtime"]])
[11:02:04.986]                       stop(msg)
[11:02:04.986]                     }
[11:02:04.986]                     invisible(pathname)
[11:02:04.986]                   }
[11:02:04.986]                   saveImmediateCondition <- function (cond, path = immediateConditionsPath(rootPath = rootPath), 
[11:02:04.986]                     rootPath = tempdir()) 
[11:02:04.986]                   {
[11:02:04.986]                     obj <- list(time = Sys.time(), condition = cond)
[11:02:04.986]                     file <- tempfile(pattern = class(cond)[1], 
[11:02:04.986]                       tmpdir = path, fileext = ".rds")
[11:02:04.986]                     save_rds(obj, file)
[11:02:04.986]                   }
[11:02:04.986]                   saveImmediateCondition(cond, path = "/tmp/Rtmp0bKRZV/.future/immediateConditions")
[11:02:04.986]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.986]                   {
[11:02:04.986]                     inherits <- base::inherits
[11:02:04.986]                     invokeRestart <- base::invokeRestart
[11:02:04.986]                     is.null <- base::is.null
[11:02:04.986]                     muffled <- FALSE
[11:02:04.986]                     if (inherits(cond, "message")) {
[11:02:04.986]                       muffled <- grepl(pattern, "muffleMessage")
[11:02:04.986]                       if (muffled) 
[11:02:04.986]                         invokeRestart("muffleMessage")
[11:02:04.986]                     }
[11:02:04.986]                     else if (inherits(cond, "warning")) {
[11:02:04.986]                       muffled <- grepl(pattern, "muffleWarning")
[11:02:04.986]                       if (muffled) 
[11:02:04.986]                         invokeRestart("muffleWarning")
[11:02:04.986]                     }
[11:02:04.986]                     else if (inherits(cond, "condition")) {
[11:02:04.986]                       if (!is.null(pattern)) {
[11:02:04.986]                         computeRestarts <- base::computeRestarts
[11:02:04.986]                         grepl <- base::grepl
[11:02:04.986]                         restarts <- computeRestarts(cond)
[11:02:04.986]                         for (restart in restarts) {
[11:02:04.986]                           name <- restart$name
[11:02:04.986]                           if (is.null(name)) 
[11:02:04.986]                             next
[11:02:04.986]                           if (!grepl(pattern, name)) 
[11:02:04.986]                             next
[11:02:04.986]                           invokeRestart(restart)
[11:02:04.986]                           muffled <- TRUE
[11:02:04.986]                           break
[11:02:04.986]                         }
[11:02:04.986]                       }
[11:02:04.986]                     }
[11:02:04.986]                     invisible(muffled)
[11:02:04.986]                   }
[11:02:04.986]                   muffleCondition(cond)
[11:02:04.986]                 })
[11:02:04.986]             }))
[11:02:04.986]             future::FutureResult(value = ...future.value$value, 
[11:02:04.986]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.986]                   ...future.rng), globalenv = if (FALSE) 
[11:02:04.986]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:04.986]                     ...future.globalenv.names))
[11:02:04.986]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:04.986]         }, condition = base::local({
[11:02:04.986]             c <- base::c
[11:02:04.986]             inherits <- base::inherits
[11:02:04.986]             invokeRestart <- base::invokeRestart
[11:02:04.986]             length <- base::length
[11:02:04.986]             list <- base::list
[11:02:04.986]             seq.int <- base::seq.int
[11:02:04.986]             signalCondition <- base::signalCondition
[11:02:04.986]             sys.calls <- base::sys.calls
[11:02:04.986]             `[[` <- base::`[[`
[11:02:04.986]             `+` <- base::`+`
[11:02:04.986]             `<<-` <- base::`<<-`
[11:02:04.986]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:04.986]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:04.986]                   3L)]
[11:02:04.986]             }
[11:02:04.986]             function(cond) {
[11:02:04.986]                 is_error <- inherits(cond, "error")
[11:02:04.986]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:04.986]                   NULL)
[11:02:04.986]                 if (is_error) {
[11:02:04.986]                   sessionInformation <- function() {
[11:02:04.986]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:04.986]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:04.986]                       search = base::search(), system = base::Sys.info())
[11:02:04.986]                   }
[11:02:04.986]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.986]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:04.986]                     cond$call), session = sessionInformation(), 
[11:02:04.986]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:04.986]                   signalCondition(cond)
[11:02:04.986]                 }
[11:02:04.986]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:04.986]                 "immediateCondition"))) {
[11:02:04.986]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:04.986]                   ...future.conditions[[length(...future.conditions) + 
[11:02:04.986]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:04.986]                   if (TRUE && !signal) {
[11:02:04.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.986]                     {
[11:02:04.986]                       inherits <- base::inherits
[11:02:04.986]                       invokeRestart <- base::invokeRestart
[11:02:04.986]                       is.null <- base::is.null
[11:02:04.986]                       muffled <- FALSE
[11:02:04.986]                       if (inherits(cond, "message")) {
[11:02:04.986]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.986]                         if (muffled) 
[11:02:04.986]                           invokeRestart("muffleMessage")
[11:02:04.986]                       }
[11:02:04.986]                       else if (inherits(cond, "warning")) {
[11:02:04.986]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.986]                         if (muffled) 
[11:02:04.986]                           invokeRestart("muffleWarning")
[11:02:04.986]                       }
[11:02:04.986]                       else if (inherits(cond, "condition")) {
[11:02:04.986]                         if (!is.null(pattern)) {
[11:02:04.986]                           computeRestarts <- base::computeRestarts
[11:02:04.986]                           grepl <- base::grepl
[11:02:04.986]                           restarts <- computeRestarts(cond)
[11:02:04.986]                           for (restart in restarts) {
[11:02:04.986]                             name <- restart$name
[11:02:04.986]                             if (is.null(name)) 
[11:02:04.986]                               next
[11:02:04.986]                             if (!grepl(pattern, name)) 
[11:02:04.986]                               next
[11:02:04.986]                             invokeRestart(restart)
[11:02:04.986]                             muffled <- TRUE
[11:02:04.986]                             break
[11:02:04.986]                           }
[11:02:04.986]                         }
[11:02:04.986]                       }
[11:02:04.986]                       invisible(muffled)
[11:02:04.986]                     }
[11:02:04.986]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.986]                   }
[11:02:04.986]                 }
[11:02:04.986]                 else {
[11:02:04.986]                   if (TRUE) {
[11:02:04.986]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:04.986]                     {
[11:02:04.986]                       inherits <- base::inherits
[11:02:04.986]                       invokeRestart <- base::invokeRestart
[11:02:04.986]                       is.null <- base::is.null
[11:02:04.986]                       muffled <- FALSE
[11:02:04.986]                       if (inherits(cond, "message")) {
[11:02:04.986]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:04.986]                         if (muffled) 
[11:02:04.986]                           invokeRestart("muffleMessage")
[11:02:04.986]                       }
[11:02:04.986]                       else if (inherits(cond, "warning")) {
[11:02:04.986]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:04.986]                         if (muffled) 
[11:02:04.986]                           invokeRestart("muffleWarning")
[11:02:04.986]                       }
[11:02:04.986]                       else if (inherits(cond, "condition")) {
[11:02:04.986]                         if (!is.null(pattern)) {
[11:02:04.986]                           computeRestarts <- base::computeRestarts
[11:02:04.986]                           grepl <- base::grepl
[11:02:04.986]                           restarts <- computeRestarts(cond)
[11:02:04.986]                           for (restart in restarts) {
[11:02:04.986]                             name <- restart$name
[11:02:04.986]                             if (is.null(name)) 
[11:02:04.986]                               next
[11:02:04.986]                             if (!grepl(pattern, name)) 
[11:02:04.986]                               next
[11:02:04.986]                             invokeRestart(restart)
[11:02:04.986]                             muffled <- TRUE
[11:02:04.986]                             break
[11:02:04.986]                           }
[11:02:04.986]                         }
[11:02:04.986]                       }
[11:02:04.986]                       invisible(muffled)
[11:02:04.986]                     }
[11:02:04.986]                     muffleCondition(cond, pattern = "^muffle")
[11:02:04.986]                   }
[11:02:04.986]                 }
[11:02:04.986]             }
[11:02:04.986]         }))
[11:02:04.986]     }, error = function(ex) {
[11:02:04.986]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:04.986]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:04.986]                 ...future.rng), started = ...future.startTime, 
[11:02:04.986]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:04.986]             version = "1.8"), class = "FutureResult")
[11:02:04.986]     }, finally = {
[11:02:04.986]         if (!identical(...future.workdir, getwd())) 
[11:02:04.986]             setwd(...future.workdir)
[11:02:04.986]         {
[11:02:04.986]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:04.986]                 ...future.oldOptions$nwarnings <- NULL
[11:02:04.986]             }
[11:02:04.986]             base::options(...future.oldOptions)
[11:02:04.986]             if (.Platform$OS.type == "windows") {
[11:02:04.986]                 old_names <- names(...future.oldEnvVars)
[11:02:04.986]                 envs <- base::Sys.getenv()
[11:02:04.986]                 names <- names(envs)
[11:02:04.986]                 common <- intersect(names, old_names)
[11:02:04.986]                 added <- setdiff(names, old_names)
[11:02:04.986]                 removed <- setdiff(old_names, names)
[11:02:04.986]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:04.986]                   envs[common]]
[11:02:04.986]                 NAMES <- toupper(changed)
[11:02:04.986]                 args <- list()
[11:02:04.986]                 for (kk in seq_along(NAMES)) {
[11:02:04.986]                   name <- changed[[kk]]
[11:02:04.986]                   NAME <- NAMES[[kk]]
[11:02:04.986]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.986]                     next
[11:02:04.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.986]                 }
[11:02:04.986]                 NAMES <- toupper(added)
[11:02:04.986]                 for (kk in seq_along(NAMES)) {
[11:02:04.986]                   name <- added[[kk]]
[11:02:04.986]                   NAME <- NAMES[[kk]]
[11:02:04.986]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.986]                     next
[11:02:04.986]                   args[[name]] <- ""
[11:02:04.986]                 }
[11:02:04.986]                 NAMES <- toupper(removed)
[11:02:04.986]                 for (kk in seq_along(NAMES)) {
[11:02:04.986]                   name <- removed[[kk]]
[11:02:04.986]                   NAME <- NAMES[[kk]]
[11:02:04.986]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:04.986]                     next
[11:02:04.986]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:04.986]                 }
[11:02:04.986]                 if (length(args) > 0) 
[11:02:04.986]                   base::do.call(base::Sys.setenv, args = args)
[11:02:04.986]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:04.986]             }
[11:02:04.986]             else {
[11:02:04.986]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:04.986]             }
[11:02:04.986]             {
[11:02:04.986]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:04.986]                   0L) {
[11:02:04.986]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:04.986]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:04.986]                   base::options(opts)
[11:02:04.986]                 }
[11:02:04.986]                 {
[11:02:04.986]                   {
[11:02:04.986]                     base::options(mc.cores = ...future.mc.cores.old)
[11:02:04.986]                     NULL
[11:02:04.986]                   }
[11:02:04.986]                   options(future.plan = NULL)
[11:02:04.986]                   if (is.na(NA_character_)) 
[11:02:04.986]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:04.986]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:04.986]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:04.986]                     .init = FALSE)
[11:02:04.986]                 }
[11:02:04.986]             }
[11:02:04.986]         }
[11:02:04.986]     })
[11:02:04.986]     if (TRUE) {
[11:02:04.986]         base::sink(type = "output", split = FALSE)
[11:02:04.986]         if (TRUE) {
[11:02:04.986]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:04.986]         }
[11:02:04.986]         else {
[11:02:04.986]             ...future.result["stdout"] <- base::list(NULL)
[11:02:04.986]         }
[11:02:04.986]         base::close(...future.stdout)
[11:02:04.986]         ...future.stdout <- NULL
[11:02:04.986]     }
[11:02:04.986]     ...future.result$conditions <- ...future.conditions
[11:02:04.986]     ...future.result$finished <- base::Sys.time()
[11:02:04.986]     ...future.result
[11:02:04.986] }
[11:02:04.988] requestCore(): workers = 2
[11:02:04.990] MulticoreFuture started
MulticoreFuture:
Label: ‘<none>’
Expression:
{
    stop(structure(list(message = "boom"), class = c("MyError", 
        "error", "condition")))
}
Lazy evaluation: FALSE
Asynchronous evaluation: TRUE
Local evaluation: TRUE
Environment: R_GlobalEnv
Capture standard output: TRUE
Capture condition classes: ‘condition’ (excluding ‘nothing’)
Globals: <none>
Packages: <none>
L'Ecuyer-CMRG RNG seed: <none> (seed = FALSE)
[11:02:04.991] plan(): Setting new future strategy stack:
[11:02:04.991] List of future strategies:
[11:02:04.991] 1. sequential:
[11:02:04.991]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:04.991]    - tweaked: FALSE
[11:02:04.991]    - call: NULL
[11:02:04.992] plan(): nbrOfWorkers() = 1
[11:02:04.994] plan(): Setting new future strategy stack:
[11:02:04.994] List of future strategies:
[11:02:04.994] 1. multicore:
[11:02:04.994]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:04.994]    - tweaked: FALSE
[11:02:04.994]    - call: plan(multicore)
[11:02:04.997] plan(): nbrOfWorkers() = 2
Resolved: TRUE
Value: <not collected>
Conditions captured: <none>
Early signaling: FALSE
Owner process: 9f2c3995-f5bf-c7be-586b-7e2cc1e64df3
Class: ‘MulticoreFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:02:04.999] result() for MulticoreFuture ...
[11:02:05.002] result() for MulticoreFuture ...
[11:02:05.002] result() for MulticoreFuture ... done
[11:02:05.002] signalConditions() ...
[11:02:05.002]  - include = ‘immediateCondition’
[11:02:05.002]  - exclude = 
[11:02:05.002]  - resignal = FALSE
[11:02:05.002]  - Number of conditions: 1
[11:02:05.003] signalConditions() ... done
[11:02:05.003] result() for MulticoreFuture ... done
[11:02:05.003] result() for MulticoreFuture ...
[11:02:05.003] result() for MulticoreFuture ... done
[11:02:05.003] signalConditions() ...
[11:02:05.003]  - include = ‘immediateCondition’
[11:02:05.003]  - exclude = 
[11:02:05.003]  - resignal = FALSE
[11:02:05.004]  - Number of conditions: 1
[11:02:05.004] signalConditions() ... done
<MyError: boom>
[11:02:05.004] result() for MulticoreFuture ...
[11:02:05.004] result() for MulticoreFuture ... done
[11:02:05.004] result() for MulticoreFuture ...
[11:02:05.004] result() for MulticoreFuture ... done
[11:02:05.004] signalConditions() ...
[11:02:05.004]  - include = ‘immediateCondition’
[11:02:05.004]  - exclude = 
[11:02:05.005]  - resignal = FALSE
[11:02:05.005]  - Number of conditions: 1
[11:02:05.005] signalConditions() ... done
[11:02:05.005] Future state: ‘finished’
[11:02:05.005] result() for MulticoreFuture ...
[11:02:05.005] result() for MulticoreFuture ... done
[11:02:05.005] signalConditions() ...
[11:02:05.005]  - include = ‘condition’
[11:02:05.005]  - exclude = ‘immediateCondition’
[11:02:05.006]  - resignal = TRUE
[11:02:05.006]  - Number of conditions: 1
[11:02:05.006]  - Condition #1: ‘MyError’, ‘error’, ‘condition’
[11:02:05.006] signalConditions() ... done
*** multicore(..., workers = 1L) ...
[11:02:05.006] getGlobalsAndPackages() ...
[11:02:05.006] Searching for globals...
[11:02:05.008] - globals found: [4] ‘{’, ‘*’, ‘a’, ‘b’
[11:02:05.008] Searching for globals ... DONE
[11:02:05.008] Resolving globals: FALSE
[11:02:05.008] The total size of the 2 globals is 78 bytes (78 bytes)
[11:02:05.009] The total size of the 2 globals exported for future expression (‘{; a * b; }’) is 78 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘a’ (39 bytes of class ‘numeric’) and ‘b’ (39 bytes of class ‘numeric’)
[11:02:05.009] - globals: [2] ‘a’, ‘b’
[11:02:05.009] 
[11:02:05.009] getGlobalsAndPackages() ... DONE
[11:02:05.010] Packages needed by the future expression (n = 0): <none>
[11:02:05.010] Packages needed by future strategies (n = 0): <none>
[11:02:05.010] {
[11:02:05.010]     {
[11:02:05.010]         {
[11:02:05.010]             ...future.startTime <- base::Sys.time()
[11:02:05.010]             {
[11:02:05.010]                 {
[11:02:05.010]                   {
[11:02:05.010]                     base::local({
[11:02:05.010]                       has_future <- base::requireNamespace("future", 
[11:02:05.010]                         quietly = TRUE)
[11:02:05.010]                       if (has_future) {
[11:02:05.010]                         ns <- base::getNamespace("future")
[11:02:05.010]                         version <- ns[[".package"]][["version"]]
[11:02:05.010]                         if (is.null(version)) 
[11:02:05.010]                           version <- utils::packageVersion("future")
[11:02:05.010]                       }
[11:02:05.010]                       else {
[11:02:05.010]                         version <- NULL
[11:02:05.010]                       }
[11:02:05.010]                       if (!has_future || version < "1.8.0") {
[11:02:05.010]                         info <- base::c(r_version = base::gsub("R version ", 
[11:02:05.010]                           "", base::R.version$version.string), 
[11:02:05.010]                           platform = base::sprintf("%s (%s-bit)", 
[11:02:05.010]                             base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:02:05.010]                           os = base::paste(base::Sys.info()[base::c("sysname", 
[11:02:05.010]                             "release", "version")], collapse = " "), 
[11:02:05.010]                           hostname = base::Sys.info()[["nodename"]])
[11:02:05.010]                         info <- base::sprintf("%s: %s", base::names(info), 
[11:02:05.010]                           info)
[11:02:05.010]                         info <- base::paste(info, collapse = "; ")
[11:02:05.010]                         if (!has_future) {
[11:02:05.010]                           msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:02:05.010]                             info)
[11:02:05.010]                         }
[11:02:05.010]                         else {
[11:02:05.010]                           msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:02:05.010]                             info, version)
[11:02:05.010]                         }
[11:02:05.010]                         base::stop(msg)
[11:02:05.010]                       }
[11:02:05.010]                     })
[11:02:05.010]                   }
[11:02:05.010]                   ...future.strategy.old <- future::plan("list")
[11:02:05.010]                   options(future.plan = NULL)
[11:02:05.010]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:02:05.010]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:02:05.010]                 }
[11:02:05.010]                 ...future.workdir <- getwd()
[11:02:05.010]             }
[11:02:05.010]             ...future.oldOptions <- base::as.list(base::.Options)
[11:02:05.010]             ...future.oldEnvVars <- base::Sys.getenv()
[11:02:05.010]         }
[11:02:05.010]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:02:05.010]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:02:05.010]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:02:05.010]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:02:05.010]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:02:05.010]             future.stdout.windows.reencode = NULL, width = 80L)
[11:02:05.010]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:02:05.010]             base::names(...future.oldOptions))
[11:02:05.010]     }
[11:02:05.010]     if (FALSE) {
[11:02:05.010]     }
[11:02:05.010]     else {
[11:02:05.010]         if (TRUE) {
[11:02:05.010]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:02:05.010]                 open = "w")
[11:02:05.010]         }
[11:02:05.010]         else {
[11:02:05.010]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:02:05.010]                 windows = "NUL", "/dev/null"), open = "w")
[11:02:05.010]         }
[11:02:05.010]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:02:05.010]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:02:05.010]             base::sink(type = "output", split = FALSE)
[11:02:05.010]             base::close(...future.stdout)
[11:02:05.010]         }, add = TRUE)
[11:02:05.010]     }
[11:02:05.010]     ...future.frame <- base::sys.nframe()
[11:02:05.010]     ...future.conditions <- base::list()
[11:02:05.010]     ...future.rng <- base::globalenv()$.Random.seed
[11:02:05.010]     if (FALSE) {
[11:02:05.010]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:02:05.010]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:02:05.010]     }
[11:02:05.010]     ...future.result <- base::tryCatch({
[11:02:05.010]         base::withCallingHandlers({
[11:02:05.010]             ...future.value <- base::withVisible(base::local({
[11:02:05.010]                 a * b
[11:02:05.010]             }))
[11:02:05.010]             future::FutureResult(value = ...future.value$value, 
[11:02:05.010]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:05.010]                   ...future.rng), globalenv = if (FALSE) 
[11:02:05.010]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:02:05.010]                     ...future.globalenv.names))
[11:02:05.010]                 else NULL, started = ...future.startTime, version = "1.8")
[11:02:05.010]         }, condition = base::local({
[11:02:05.010]             c <- base::c
[11:02:05.010]             inherits <- base::inherits
[11:02:05.010]             invokeRestart <- base::invokeRestart
[11:02:05.010]             length <- base::length
[11:02:05.010]             list <- base::list
[11:02:05.010]             seq.int <- base::seq.int
[11:02:05.010]             signalCondition <- base::signalCondition
[11:02:05.010]             sys.calls <- base::sys.calls
[11:02:05.010]             `[[` <- base::`[[`
[11:02:05.010]             `+` <- base::`+`
[11:02:05.010]             `<<-` <- base::`<<-`
[11:02:05.010]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:02:05.010]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:02:05.010]                   3L)]
[11:02:05.010]             }
[11:02:05.010]             function(cond) {
[11:02:05.010]                 is_error <- inherits(cond, "error")
[11:02:05.010]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:02:05.010]                   NULL)
[11:02:05.010]                 if (is_error) {
[11:02:05.010]                   sessionInformation <- function() {
[11:02:05.010]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:02:05.010]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:02:05.010]                       search = base::search(), system = base::Sys.info())
[11:02:05.010]                   }
[11:02:05.010]                   ...future.conditions[[length(...future.conditions) + 
[11:02:05.010]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:02:05.010]                     cond$call), session = sessionInformation(), 
[11:02:05.010]                     timestamp = base::Sys.time(), signaled = 0L)
[11:02:05.010]                   signalCondition(cond)
[11:02:05.010]                 }
[11:02:05.010]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:02:05.010]                 "immediateCondition"))) {
[11:02:05.010]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:02:05.010]                   ...future.conditions[[length(...future.conditions) + 
[11:02:05.010]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:02:05.010]                   if (TRUE && !signal) {
[11:02:05.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:05.010]                     {
[11:02:05.010]                       inherits <- base::inherits
[11:02:05.010]                       invokeRestart <- base::invokeRestart
[11:02:05.010]                       is.null <- base::is.null
[11:02:05.010]                       muffled <- FALSE
[11:02:05.010]                       if (inherits(cond, "message")) {
[11:02:05.010]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:05.010]                         if (muffled) 
[11:02:05.010]                           invokeRestart("muffleMessage")
[11:02:05.010]                       }
[11:02:05.010]                       else if (inherits(cond, "warning")) {
[11:02:05.010]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:05.010]                         if (muffled) 
[11:02:05.010]                           invokeRestart("muffleWarning")
[11:02:05.010]                       }
[11:02:05.010]                       else if (inherits(cond, "condition")) {
[11:02:05.010]                         if (!is.null(pattern)) {
[11:02:05.010]                           computeRestarts <- base::computeRestarts
[11:02:05.010]                           grepl <- base::grepl
[11:02:05.010]                           restarts <- computeRestarts(cond)
[11:02:05.010]                           for (restart in restarts) {
[11:02:05.010]                             name <- restart$name
[11:02:05.010]                             if (is.null(name)) 
[11:02:05.010]                               next
[11:02:05.010]                             if (!grepl(pattern, name)) 
[11:02:05.010]                               next
[11:02:05.010]                             invokeRestart(restart)
[11:02:05.010]                             muffled <- TRUE
[11:02:05.010]                             break
[11:02:05.010]                           }
[11:02:05.010]                         }
[11:02:05.010]                       }
[11:02:05.010]                       invisible(muffled)
[11:02:05.010]                     }
[11:02:05.010]                     muffleCondition(cond, pattern = "^muffle")
[11:02:05.010]                   }
[11:02:05.010]                 }
[11:02:05.010]                 else {
[11:02:05.010]                   if (TRUE) {
[11:02:05.010]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:02:05.010]                     {
[11:02:05.010]                       inherits <- base::inherits
[11:02:05.010]                       invokeRestart <- base::invokeRestart
[11:02:05.010]                       is.null <- base::is.null
[11:02:05.010]                       muffled <- FALSE
[11:02:05.010]                       if (inherits(cond, "message")) {
[11:02:05.010]                         muffled <- grepl(pattern, "muffleMessage")
[11:02:05.010]                         if (muffled) 
[11:02:05.010]                           invokeRestart("muffleMessage")
[11:02:05.010]                       }
[11:02:05.010]                       else if (inherits(cond, "warning")) {
[11:02:05.010]                         muffled <- grepl(pattern, "muffleWarning")
[11:02:05.010]                         if (muffled) 
[11:02:05.010]                           invokeRestart("muffleWarning")
[11:02:05.010]                       }
[11:02:05.010]                       else if (inherits(cond, "condition")) {
[11:02:05.010]                         if (!is.null(pattern)) {
[11:02:05.010]                           computeRestarts <- base::computeRestarts
[11:02:05.010]                           grepl <- base::grepl
[11:02:05.010]                           restarts <- computeRestarts(cond)
[11:02:05.010]                           for (restart in restarts) {
[11:02:05.010]                             name <- restart$name
[11:02:05.010]                             if (is.null(name)) 
[11:02:05.010]                               next
[11:02:05.010]                             if (!grepl(pattern, name)) 
[11:02:05.010]                               next
[11:02:05.010]                             invokeRestart(restart)
[11:02:05.010]                             muffled <- TRUE
[11:02:05.010]                             break
[11:02:05.010]                           }
[11:02:05.010]                         }
[11:02:05.010]                       }
[11:02:05.010]                       invisible(muffled)
[11:02:05.010]                     }
[11:02:05.010]                     muffleCondition(cond, pattern = "^muffle")
[11:02:05.010]                   }
[11:02:05.010]                 }
[11:02:05.010]             }
[11:02:05.010]         }))
[11:02:05.010]     }, error = function(ex) {
[11:02:05.010]         base::structure(base::list(value = NULL, visible = NULL, 
[11:02:05.010]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:02:05.010]                 ...future.rng), started = ...future.startTime, 
[11:02:05.010]             finished = Sys.time(), session_uuid = NA_character_, 
[11:02:05.010]             version = "1.8"), class = "FutureResult")
[11:02:05.010]     }, finally = {
[11:02:05.010]         if (!identical(...future.workdir, getwd())) 
[11:02:05.010]             setwd(...future.workdir)
[11:02:05.010]         {
[11:02:05.010]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:02:05.010]                 ...future.oldOptions$nwarnings <- NULL
[11:02:05.010]             }
[11:02:05.010]             base::options(...future.oldOptions)
[11:02:05.010]             if (.Platform$OS.type == "windows") {
[11:02:05.010]                 old_names <- names(...future.oldEnvVars)
[11:02:05.010]                 envs <- base::Sys.getenv()
[11:02:05.010]                 names <- names(envs)
[11:02:05.010]                 common <- intersect(names, old_names)
[11:02:05.010]                 added <- setdiff(names, old_names)
[11:02:05.010]                 removed <- setdiff(old_names, names)
[11:02:05.010]                 changed <- common[...future.oldEnvVars[common] != 
[11:02:05.010]                   envs[common]]
[11:02:05.010]                 NAMES <- toupper(changed)
[11:02:05.010]                 args <- list()
[11:02:05.010]                 for (kk in seq_along(NAMES)) {
[11:02:05.010]                   name <- changed[[kk]]
[11:02:05.010]                   NAME <- NAMES[[kk]]
[11:02:05.010]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:05.010]                     next
[11:02:05.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:05.010]                 }
[11:02:05.010]                 NAMES <- toupper(added)
[11:02:05.010]                 for (kk in seq_along(NAMES)) {
[11:02:05.010]                   name <- added[[kk]]
[11:02:05.010]                   NAME <- NAMES[[kk]]
[11:02:05.010]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:05.010]                     next
[11:02:05.010]                   args[[name]] <- ""
[11:02:05.010]                 }
[11:02:05.010]                 NAMES <- toupper(removed)
[11:02:05.010]                 for (kk in seq_along(NAMES)) {
[11:02:05.010]                   name <- removed[[kk]]
[11:02:05.010]                   NAME <- NAMES[[kk]]
[11:02:05.010]                   if (name != NAME && is.element(NAME, old_names)) 
[11:02:05.010]                     next
[11:02:05.010]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:02:05.010]                 }
[11:02:05.010]                 if (length(args) > 0) 
[11:02:05.010]                   base::do.call(base::Sys.setenv, args = args)
[11:02:05.010]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:02:05.010]             }
[11:02:05.010]             else {
[11:02:05.010]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:02:05.010]             }
[11:02:05.010]             {
[11:02:05.010]                 if (base::length(...future.futureOptionsAdded) > 
[11:02:05.010]                   0L) {
[11:02:05.010]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:02:05.010]                   base::names(opts) <- ...future.futureOptionsAdded
[11:02:05.010]                   base::options(opts)
[11:02:05.010]                 }
[11:02:05.010]                 {
[11:02:05.010]                   {
[11:02:05.010]                     NULL
[11:02:05.010]                     RNGkind("Mersenne-Twister")
[11:02:05.010]                     base::rm(list = ".Random.seed", envir = base::globalenv(), 
[11:02:05.010]                       inherits = FALSE)
[11:02:05.010]                   }
[11:02:05.010]                   options(future.plan = NULL)
[11:02:05.010]                   if (is.na(NA_character_)) 
[11:02:05.010]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:02:05.010]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:02:05.010]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:02:05.010]                     .init = FALSE)
[11:02:05.010]                 }
[11:02:05.010]             }
[11:02:05.010]         }
[11:02:05.010]     })
[11:02:05.010]     if (TRUE) {
[11:02:05.010]         base::sink(type = "output", split = FALSE)
[11:02:05.010]         if (TRUE) {
[11:02:05.010]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:02:05.010]         }
[11:02:05.010]         else {
[11:02:05.010]             ...future.result["stdout"] <- base::list(NULL)
[11:02:05.010]         }
[11:02:05.010]         base::close(...future.stdout)
[11:02:05.010]         ...future.stdout <- NULL
[11:02:05.010]     }
[11:02:05.010]     ...future.result$conditions <- ...future.conditions
[11:02:05.010]     ...future.result$finished <- base::Sys.time()
[11:02:05.010]     ...future.result
[11:02:05.010] }
[11:02:05.012] assign_globals() ...
[11:02:05.012] List of 2
[11:02:05.012]  $ a: num 2
[11:02:05.012]  $ b: num 3
[11:02:05.012]  - attr(*, "where")=List of 2
[11:02:05.012]   ..$ a:<environment: R_EmptyEnv> 
[11:02:05.012]   ..$ b:<environment: R_EmptyEnv> 
[11:02:05.012]  - attr(*, "class")= chr [1:3] "FutureGlobals" "Globals" "list"
[11:02:05.012]  - attr(*, "resolved")= logi FALSE
[11:02:05.012]  - attr(*, "total_size")= num 78
[11:02:05.016] - copied ‘a’ to environment
[11:02:05.016] - copied ‘b’ to environment
[11:02:05.016] assign_globals() ... done
[11:02:05.016] plan(): Setting new future strategy stack:
[11:02:05.016] List of future strategies:
[11:02:05.016] 1. sequential:
[11:02:05.016]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:05.016]    - tweaked: FALSE
[11:02:05.016]    - call: NULL
[11:02:05.017] plan(): nbrOfWorkers() = 1
[11:02:05.018] plan(): Setting new future strategy stack:
[11:02:05.018] List of future strategies:
[11:02:05.018] 1. multicore:
[11:02:05.018]    - args: function (..., workers = availableCores(constraints = "multicore"), envir = parent.frame())
[11:02:05.018]    - tweaked: FALSE
[11:02:05.018]    - call: plan(multicore)
[11:02:05.022] plan(): nbrOfWorkers() = 2
[11:02:05.022] SequentialFuture started (and completed)
[1] 6
*** multicore(..., workers = 1L) ... DONE
Testing with 2 cores ... DONE
> 
> message("*** multicore() ... DONE")
*** multicore() ... DONE
> 
> source("incl/end.R")
[11:02:05.023] plan(): Setting new future strategy stack:
[11:02:05.023] List of future strategies:
[11:02:05.023] 1. FutureStrategy:
[11:02:05.023]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:02:05.023]    - tweaked: FALSE
[11:02:05.023]    - call: future::plan(oplan)
[11:02:05.024] plan(): nbrOfWorkers() = 1
> 
