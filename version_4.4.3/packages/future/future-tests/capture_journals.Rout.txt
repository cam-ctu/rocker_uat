
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source("incl/start.R")
[11:00:47.571] plan(): Setting new future strategy stack:
[11:00:47.571] List of future strategies:
[11:00:47.571] 1. sequential:
[11:00:47.571]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:00:47.571]    - tweaked: FALSE
[11:00:47.571]    - call: future::plan("sequential")
[11:00:47.585] plan(): nbrOfWorkers() = 1
> 
> capture_journals <- future:::capture_journals
> 
> message("*** capture_journals() ...")
*** capture_journals() ...
> 
> slow_fcn <- function(x) {
+   Sys.sleep(0.5 + 1/x)
+ }
> 
> plan(multisession, workers = 2)
[11:00:47.602] plan(): Setting new future strategy stack:
[11:00:47.602] List of future strategies:
[11:00:47.602] 1. multisession:
[11:00:47.602]    - args: function (..., workers = 2, envir = parent.frame())
[11:00:47.602]    - tweaked: TRUE
[11:00:47.602]    - call: plan(multisession, workers = 2)
[11:00:47.613] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ...
[11:00:47.613] multisession:
[11:00:47.613] - args: function (..., workers = 2, envir = parent.frame())
[11:00:47.613] - tweaked: TRUE
[11:00:47.613] - call: plan(multisession, workers = 2)
[11:00:47.614] getGlobalsAndPackages() ...
[11:00:47.614] Not searching for globals
[11:00:47.615] - globals: [0] <none>
[11:00:47.615] getGlobalsAndPackages() ... DONE
[11:00:48.086] Packages needed by the future expression (n = 0): <none>
[11:00:48.086] Packages needed by future strategies (n = 0): <none>
[11:00:48.087] {
[11:00:48.087]     {
[11:00:48.087]         {
[11:00:48.087]             ...future.startTime <- base::Sys.time()
[11:00:48.087]             {
[11:00:48.087]                 {
[11:00:48.087]                   {
[11:00:48.087]                     {
[11:00:48.087]                       base::local({
[11:00:48.087]                         has_future <- base::requireNamespace("future", 
[11:00:48.087]                           quietly = TRUE)
[11:00:48.087]                         if (has_future) {
[11:00:48.087]                           ns <- base::getNamespace("future")
[11:00:48.087]                           version <- ns[[".package"]][["version"]]
[11:00:48.087]                           if (is.null(version)) 
[11:00:48.087]                             version <- utils::packageVersion("future")
[11:00:48.087]                         }
[11:00:48.087]                         else {
[11:00:48.087]                           version <- NULL
[11:00:48.087]                         }
[11:00:48.087]                         if (!has_future || version < "1.8.0") {
[11:00:48.087]                           info <- base::c(r_version = base::gsub("R version ", 
[11:00:48.087]                             "", base::R.version$version.string), 
[11:00:48.087]                             platform = base::sprintf("%s (%s-bit)", 
[11:00:48.087]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:00:48.087]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:00:48.087]                               "release", "version")], collapse = " "), 
[11:00:48.087]                             hostname = base::Sys.info()[["nodename"]])
[11:00:48.087]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:00:48.087]                             info)
[11:00:48.087]                           info <- base::paste(info, collapse = "; ")
[11:00:48.087]                           if (!has_future) {
[11:00:48.087]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:00:48.087]                               info)
[11:00:48.087]                           }
[11:00:48.087]                           else {
[11:00:48.087]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:00:48.087]                               info, version)
[11:00:48.087]                           }
[11:00:48.087]                           base::stop(msg)
[11:00:48.087]                         }
[11:00:48.087]                       })
[11:00:48.087]                     }
[11:00:48.087]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:00:48.087]                     base::options(mc.cores = 1L)
[11:00:48.087]                   }
[11:00:48.087]                   ...future.strategy.old <- future::plan("list")
[11:00:48.087]                   options(future.plan = NULL)
[11:00:48.087]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.087]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:00:48.087]                 }
[11:00:48.087]                 ...future.workdir <- getwd()
[11:00:48.087]             }
[11:00:48.087]             ...future.oldOptions <- base::as.list(base::.Options)
[11:00:48.087]             ...future.oldEnvVars <- base::Sys.getenv()
[11:00:48.087]         }
[11:00:48.087]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:00:48.087]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:00:48.087]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:00:48.087]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:00:48.087]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:00:48.087]             future.stdout.windows.reencode = NULL, width = 80L)
[11:00:48.087]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:00:48.087]             base::names(...future.oldOptions))
[11:00:48.087]     }
[11:00:48.087]     if (FALSE) {
[11:00:48.087]     }
[11:00:48.087]     else {
[11:00:48.087]         if (TRUE) {
[11:00:48.087]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:00:48.087]                 open = "w")
[11:00:48.087]         }
[11:00:48.087]         else {
[11:00:48.087]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:00:48.087]                 windows = "NUL", "/dev/null"), open = "w")
[11:00:48.087]         }
[11:00:48.087]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:00:48.087]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:00:48.087]             base::sink(type = "output", split = FALSE)
[11:00:48.087]             base::close(...future.stdout)
[11:00:48.087]         }, add = TRUE)
[11:00:48.087]     }
[11:00:48.087]     ...future.frame <- base::sys.nframe()
[11:00:48.087]     ...future.conditions <- base::list()
[11:00:48.087]     ...future.rng <- base::globalenv()$.Random.seed
[11:00:48.087]     if (FALSE) {
[11:00:48.087]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:00:48.087]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:00:48.087]     }
[11:00:48.087]     ...future.result <- base::tryCatch({
[11:00:48.087]         base::withCallingHandlers({
[11:00:48.087]             ...future.value <- base::withVisible(base::local({
[11:00:48.087]                 ...future.makeSendCondition <- base::local({
[11:00:48.087]                   sendCondition <- NULL
[11:00:48.087]                   function(frame = 1L) {
[11:00:48.087]                     if (is.function(sendCondition)) 
[11:00:48.087]                       return(sendCondition)
[11:00:48.087]                     ns <- getNamespace("parallel")
[11:00:48.087]                     if (exists("sendData", mode = "function", 
[11:00:48.087]                       envir = ns)) {
[11:00:48.087]                       parallel_sendData <- get("sendData", mode = "function", 
[11:00:48.087]                         envir = ns)
[11:00:48.087]                       envir <- sys.frame(frame)
[11:00:48.087]                       master <- NULL
[11:00:48.087]                       while (!identical(envir, .GlobalEnv) && 
[11:00:48.087]                         !identical(envir, emptyenv())) {
[11:00:48.087]                         if (exists("master", mode = "list", envir = envir, 
[11:00:48.087]                           inherits = FALSE)) {
[11:00:48.087]                           master <- get("master", mode = "list", 
[11:00:48.087]                             envir = envir, inherits = FALSE)
[11:00:48.087]                           if (inherits(master, c("SOCKnode", 
[11:00:48.087]                             "SOCK0node"))) {
[11:00:48.087]                             sendCondition <<- function(cond) {
[11:00:48.087]                               data <- list(type = "VALUE", value = cond, 
[11:00:48.087]                                 success = TRUE)
[11:00:48.087]                               parallel_sendData(master, data)
[11:00:48.087]                             }
[11:00:48.087]                             return(sendCondition)
[11:00:48.087]                           }
[11:00:48.087]                         }
[11:00:48.087]                         frame <- frame + 1L
[11:00:48.087]                         envir <- sys.frame(frame)
[11:00:48.087]                       }
[11:00:48.087]                     }
[11:00:48.087]                     sendCondition <<- function(cond) NULL
[11:00:48.087]                   }
[11:00:48.087]                 })
[11:00:48.087]                 withCallingHandlers({
[11:00:48.087]                   NA
[11:00:48.087]                 }, immediateCondition = function(cond) {
[11:00:48.087]                   sendCondition <- ...future.makeSendCondition()
[11:00:48.087]                   sendCondition(cond)
[11:00:48.087]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.087]                   {
[11:00:48.087]                     inherits <- base::inherits
[11:00:48.087]                     invokeRestart <- base::invokeRestart
[11:00:48.087]                     is.null <- base::is.null
[11:00:48.087]                     muffled <- FALSE
[11:00:48.087]                     if (inherits(cond, "message")) {
[11:00:48.087]                       muffled <- grepl(pattern, "muffleMessage")
[11:00:48.087]                       if (muffled) 
[11:00:48.087]                         invokeRestart("muffleMessage")
[11:00:48.087]                     }
[11:00:48.087]                     else if (inherits(cond, "warning")) {
[11:00:48.087]                       muffled <- grepl(pattern, "muffleWarning")
[11:00:48.087]                       if (muffled) 
[11:00:48.087]                         invokeRestart("muffleWarning")
[11:00:48.087]                     }
[11:00:48.087]                     else if (inherits(cond, "condition")) {
[11:00:48.087]                       if (!is.null(pattern)) {
[11:00:48.087]                         computeRestarts <- base::computeRestarts
[11:00:48.087]                         grepl <- base::grepl
[11:00:48.087]                         restarts <- computeRestarts(cond)
[11:00:48.087]                         for (restart in restarts) {
[11:00:48.087]                           name <- restart$name
[11:00:48.087]                           if (is.null(name)) 
[11:00:48.087]                             next
[11:00:48.087]                           if (!grepl(pattern, name)) 
[11:00:48.087]                             next
[11:00:48.087]                           invokeRestart(restart)
[11:00:48.087]                           muffled <- TRUE
[11:00:48.087]                           break
[11:00:48.087]                         }
[11:00:48.087]                       }
[11:00:48.087]                     }
[11:00:48.087]                     invisible(muffled)
[11:00:48.087]                   }
[11:00:48.087]                   muffleCondition(cond)
[11:00:48.087]                 })
[11:00:48.087]             }))
[11:00:48.087]             future::FutureResult(value = ...future.value$value, 
[11:00:48.087]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.087]                   ...future.rng), globalenv = if (FALSE) 
[11:00:48.087]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:00:48.087]                     ...future.globalenv.names))
[11:00:48.087]                 else NULL, started = ...future.startTime, version = "1.8")
[11:00:48.087]         }, condition = base::local({
[11:00:48.087]             c <- base::c
[11:00:48.087]             inherits <- base::inherits
[11:00:48.087]             invokeRestart <- base::invokeRestart
[11:00:48.087]             length <- base::length
[11:00:48.087]             list <- base::list
[11:00:48.087]             seq.int <- base::seq.int
[11:00:48.087]             signalCondition <- base::signalCondition
[11:00:48.087]             sys.calls <- base::sys.calls
[11:00:48.087]             `[[` <- base::`[[`
[11:00:48.087]             `+` <- base::`+`
[11:00:48.087]             `<<-` <- base::`<<-`
[11:00:48.087]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:00:48.087]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:00:48.087]                   3L)]
[11:00:48.087]             }
[11:00:48.087]             function(cond) {
[11:00:48.087]                 is_error <- inherits(cond, "error")
[11:00:48.087]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:00:48.087]                   NULL)
[11:00:48.087]                 if (is_error) {
[11:00:48.087]                   sessionInformation <- function() {
[11:00:48.087]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:00:48.087]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:00:48.087]                       search = base::search(), system = base::Sys.info())
[11:00:48.087]                   }
[11:00:48.087]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.087]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:00:48.087]                     cond$call), session = sessionInformation(), 
[11:00:48.087]                     timestamp = base::Sys.time(), signaled = 0L)
[11:00:48.087]                   signalCondition(cond)
[11:00:48.087]                 }
[11:00:48.087]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:00:48.087]                 "immediateCondition"))) {
[11:00:48.087]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:00:48.087]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.087]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:00:48.087]                   if (TRUE && !signal) {
[11:00:48.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.087]                     {
[11:00:48.087]                       inherits <- base::inherits
[11:00:48.087]                       invokeRestart <- base::invokeRestart
[11:00:48.087]                       is.null <- base::is.null
[11:00:48.087]                       muffled <- FALSE
[11:00:48.087]                       if (inherits(cond, "message")) {
[11:00:48.087]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.087]                         if (muffled) 
[11:00:48.087]                           invokeRestart("muffleMessage")
[11:00:48.087]                       }
[11:00:48.087]                       else if (inherits(cond, "warning")) {
[11:00:48.087]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.087]                         if (muffled) 
[11:00:48.087]                           invokeRestart("muffleWarning")
[11:00:48.087]                       }
[11:00:48.087]                       else if (inherits(cond, "condition")) {
[11:00:48.087]                         if (!is.null(pattern)) {
[11:00:48.087]                           computeRestarts <- base::computeRestarts
[11:00:48.087]                           grepl <- base::grepl
[11:00:48.087]                           restarts <- computeRestarts(cond)
[11:00:48.087]                           for (restart in restarts) {
[11:00:48.087]                             name <- restart$name
[11:00:48.087]                             if (is.null(name)) 
[11:00:48.087]                               next
[11:00:48.087]                             if (!grepl(pattern, name)) 
[11:00:48.087]                               next
[11:00:48.087]                             invokeRestart(restart)
[11:00:48.087]                             muffled <- TRUE
[11:00:48.087]                             break
[11:00:48.087]                           }
[11:00:48.087]                         }
[11:00:48.087]                       }
[11:00:48.087]                       invisible(muffled)
[11:00:48.087]                     }
[11:00:48.087]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.087]                   }
[11:00:48.087]                 }
[11:00:48.087]                 else {
[11:00:48.087]                   if (TRUE) {
[11:00:48.087]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.087]                     {
[11:00:48.087]                       inherits <- base::inherits
[11:00:48.087]                       invokeRestart <- base::invokeRestart
[11:00:48.087]                       is.null <- base::is.null
[11:00:48.087]                       muffled <- FALSE
[11:00:48.087]                       if (inherits(cond, "message")) {
[11:00:48.087]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.087]                         if (muffled) 
[11:00:48.087]                           invokeRestart("muffleMessage")
[11:00:48.087]                       }
[11:00:48.087]                       else if (inherits(cond, "warning")) {
[11:00:48.087]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.087]                         if (muffled) 
[11:00:48.087]                           invokeRestart("muffleWarning")
[11:00:48.087]                       }
[11:00:48.087]                       else if (inherits(cond, "condition")) {
[11:00:48.087]                         if (!is.null(pattern)) {
[11:00:48.087]                           computeRestarts <- base::computeRestarts
[11:00:48.087]                           grepl <- base::grepl
[11:00:48.087]                           restarts <- computeRestarts(cond)
[11:00:48.087]                           for (restart in restarts) {
[11:00:48.087]                             name <- restart$name
[11:00:48.087]                             if (is.null(name)) 
[11:00:48.087]                               next
[11:00:48.087]                             if (!grepl(pattern, name)) 
[11:00:48.087]                               next
[11:00:48.087]                             invokeRestart(restart)
[11:00:48.087]                             muffled <- TRUE
[11:00:48.087]                             break
[11:00:48.087]                           }
[11:00:48.087]                         }
[11:00:48.087]                       }
[11:00:48.087]                       invisible(muffled)
[11:00:48.087]                     }
[11:00:48.087]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.087]                   }
[11:00:48.087]                 }
[11:00:48.087]             }
[11:00:48.087]         }))
[11:00:48.087]     }, error = function(ex) {
[11:00:48.087]         base::structure(base::list(value = NULL, visible = NULL, 
[11:00:48.087]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.087]                 ...future.rng), started = ...future.startTime, 
[11:00:48.087]             finished = Sys.time(), session_uuid = NA_character_, 
[11:00:48.087]             version = "1.8"), class = "FutureResult")
[11:00:48.087]     }, finally = {
[11:00:48.087]         if (!identical(...future.workdir, getwd())) 
[11:00:48.087]             setwd(...future.workdir)
[11:00:48.087]         {
[11:00:48.087]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:00:48.087]                 ...future.oldOptions$nwarnings <- NULL
[11:00:48.087]             }
[11:00:48.087]             base::options(...future.oldOptions)
[11:00:48.087]             if (.Platform$OS.type == "windows") {
[11:00:48.087]                 old_names <- names(...future.oldEnvVars)
[11:00:48.087]                 envs <- base::Sys.getenv()
[11:00:48.087]                 names <- names(envs)
[11:00:48.087]                 common <- intersect(names, old_names)
[11:00:48.087]                 added <- setdiff(names, old_names)
[11:00:48.087]                 removed <- setdiff(old_names, names)
[11:00:48.087]                 changed <- common[...future.oldEnvVars[common] != 
[11:00:48.087]                   envs[common]]
[11:00:48.087]                 NAMES <- toupper(changed)
[11:00:48.087]                 args <- list()
[11:00:48.087]                 for (kk in seq_along(NAMES)) {
[11:00:48.087]                   name <- changed[[kk]]
[11:00:48.087]                   NAME <- NAMES[[kk]]
[11:00:48.087]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.087]                     next
[11:00:48.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.087]                 }
[11:00:48.087]                 NAMES <- toupper(added)
[11:00:48.087]                 for (kk in seq_along(NAMES)) {
[11:00:48.087]                   name <- added[[kk]]
[11:00:48.087]                   NAME <- NAMES[[kk]]
[11:00:48.087]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.087]                     next
[11:00:48.087]                   args[[name]] <- ""
[11:00:48.087]                 }
[11:00:48.087]                 NAMES <- toupper(removed)
[11:00:48.087]                 for (kk in seq_along(NAMES)) {
[11:00:48.087]                   name <- removed[[kk]]
[11:00:48.087]                   NAME <- NAMES[[kk]]
[11:00:48.087]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.087]                     next
[11:00:48.087]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.087]                 }
[11:00:48.087]                 if (length(args) > 0) 
[11:00:48.087]                   base::do.call(base::Sys.setenv, args = args)
[11:00:48.087]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:00:48.087]             }
[11:00:48.087]             else {
[11:00:48.087]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:00:48.087]             }
[11:00:48.087]             {
[11:00:48.087]                 if (base::length(...future.futureOptionsAdded) > 
[11:00:48.087]                   0L) {
[11:00:48.087]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:00:48.087]                   base::names(opts) <- ...future.futureOptionsAdded
[11:00:48.087]                   base::options(opts)
[11:00:48.087]                 }
[11:00:48.087]                 {
[11:00:48.087]                   {
[11:00:48.087]                     base::options(mc.cores = ...future.mc.cores.old)
[11:00:48.087]                     NULL
[11:00:48.087]                   }
[11:00:48.087]                   options(future.plan = NULL)
[11:00:48.087]                   if (is.na(NA_character_)) 
[11:00:48.087]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.087]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:00:48.087]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:00:48.087]                     .init = FALSE)
[11:00:48.087]                 }
[11:00:48.087]             }
[11:00:48.087]         }
[11:00:48.087]     })
[11:00:48.087]     if (TRUE) {
[11:00:48.087]         base::sink(type = "output", split = FALSE)
[11:00:48.087]         if (TRUE) {
[11:00:48.087]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:00:48.087]         }
[11:00:48.087]         else {
[11:00:48.087]             ...future.result["stdout"] <- base::list(NULL)
[11:00:48.087]         }
[11:00:48.087]         base::close(...future.stdout)
[11:00:48.087]         ...future.stdout <- NULL
[11:00:48.087]     }
[11:00:48.087]     ...future.result$conditions <- ...future.conditions
[11:00:48.087]     ...future.result$finished <- base::Sys.time()
[11:00:48.087]     ...future.result
[11:00:48.087] }
[11:00:48.138] MultisessionFuture started
[11:00:48.138] result() for ClusterFuture ...
[11:00:48.139] receiveMessageFromWorker() for ClusterFuture ...
[11:00:48.139] - Validating connection of MultisessionFuture
[11:00:48.168] - received message: FutureResult
[11:00:48.168] - Received FutureResult
[11:00:48.171] - Erased future from FutureRegistry
[11:00:48.171] result() for ClusterFuture ...
[11:00:48.171] - result already collected: FutureResult
[11:00:48.171] result() for ClusterFuture ... done
[11:00:48.171] receiveMessageFromWorker() for ClusterFuture ... done
[11:00:48.171] result() for ClusterFuture ... done
[11:00:48.171] result() for ClusterFuture ...
[11:00:48.172] - result already collected: FutureResult
[11:00:48.172] result() for ClusterFuture ... done
[11:00:48.172] plan(): plan_init() of ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’ ... DONE
[11:00:48.172] plan(): nbrOfWorkers() = 2
> js <- capture_journals({
+   fs <- lapply(3:1, FUN = function(x) future(slow_fcn(x)))
+   vs <- value(fs)
+ })
[11:00:48.172] getGlobalsAndPackages() ...
[11:00:48.172] Searching for globals...
[11:00:48.177] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[11:00:48.177] Searching for globals ... DONE
[11:00:48.177] Resolving globals: FALSE
[11:00:48.178] The total size of the 2 globals is 243 bytes (243 bytes)
[11:00:48.179] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[11:00:48.179] - globals: [2] ‘slow_fcn’, ‘x’
[11:00:48.179] 
[11:00:48.179] getGlobalsAndPackages() ... DONE
[11:00:48.180] run() for ‘Future’ ...
[11:00:48.180] - state: ‘created’
[11:00:48.180] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:00:48.193] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:00:48.193] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:00:48.193]   - Field: ‘node’
[11:00:48.193]   - Field: ‘label’
[11:00:48.193]   - Field: ‘local’
[11:00:48.194]   - Field: ‘owner’
[11:00:48.194]   - Field: ‘envir’
[11:00:48.194]   - Field: ‘workers’
[11:00:48.194]   - Field: ‘packages’
[11:00:48.194]   - Field: ‘gc’
[11:00:48.194]   - Field: ‘conditions’
[11:00:48.194]   - Field: ‘persistent’
[11:00:48.194]   - Field: ‘expr’
[11:00:48.194]   - Field: ‘uuid’
[11:00:48.194]   - Field: ‘seed’
[11:00:48.194]   - Field: ‘version’
[11:00:48.194]   - Field: ‘result’
[11:00:48.195]   - Field: ‘asynchronous’
[11:00:48.195]   - Field: ‘calls’
[11:00:48.195]   - Field: ‘globals’
[11:00:48.195]   - Field: ‘stdout’
[11:00:48.195]   - Field: ‘earlySignal’
[11:00:48.195]   - Field: ‘lazy’
[11:00:48.195]   - Field: ‘state’
[11:00:48.195] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:00:48.195] - Launch lazy future ...
[11:00:48.195] Packages needed by the future expression (n = 0): <none>
[11:00:48.196] Packages needed by future strategies (n = 0): <none>
[11:00:48.196] {
[11:00:48.196]     {
[11:00:48.196]         {
[11:00:48.196]             ...future.startTime <- base::Sys.time()
[11:00:48.196]             {
[11:00:48.196]                 {
[11:00:48.196]                   {
[11:00:48.196]                     {
[11:00:48.196]                       base::local({
[11:00:48.196]                         has_future <- base::requireNamespace("future", 
[11:00:48.196]                           quietly = TRUE)
[11:00:48.196]                         if (has_future) {
[11:00:48.196]                           ns <- base::getNamespace("future")
[11:00:48.196]                           version <- ns[[".package"]][["version"]]
[11:00:48.196]                           if (is.null(version)) 
[11:00:48.196]                             version <- utils::packageVersion("future")
[11:00:48.196]                         }
[11:00:48.196]                         else {
[11:00:48.196]                           version <- NULL
[11:00:48.196]                         }
[11:00:48.196]                         if (!has_future || version < "1.8.0") {
[11:00:48.196]                           info <- base::c(r_version = base::gsub("R version ", 
[11:00:48.196]                             "", base::R.version$version.string), 
[11:00:48.196]                             platform = base::sprintf("%s (%s-bit)", 
[11:00:48.196]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:00:48.196]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:00:48.196]                               "release", "version")], collapse = " "), 
[11:00:48.196]                             hostname = base::Sys.info()[["nodename"]])
[11:00:48.196]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:00:48.196]                             info)
[11:00:48.196]                           info <- base::paste(info, collapse = "; ")
[11:00:48.196]                           if (!has_future) {
[11:00:48.196]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:00:48.196]                               info)
[11:00:48.196]                           }
[11:00:48.196]                           else {
[11:00:48.196]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:00:48.196]                               info, version)
[11:00:48.196]                           }
[11:00:48.196]                           base::stop(msg)
[11:00:48.196]                         }
[11:00:48.196]                       })
[11:00:48.196]                     }
[11:00:48.196]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:00:48.196]                     base::options(mc.cores = 1L)
[11:00:48.196]                   }
[11:00:48.196]                   ...future.strategy.old <- future::plan("list")
[11:00:48.196]                   options(future.plan = NULL)
[11:00:48.196]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.196]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:00:48.196]                 }
[11:00:48.196]                 ...future.workdir <- getwd()
[11:00:48.196]             }
[11:00:48.196]             ...future.oldOptions <- base::as.list(base::.Options)
[11:00:48.196]             ...future.oldEnvVars <- base::Sys.getenv()
[11:00:48.196]         }
[11:00:48.196]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:00:48.196]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:00:48.196]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:00:48.196]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:00:48.196]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:00:48.196]             future.stdout.windows.reencode = NULL, width = 80L)
[11:00:48.196]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:00:48.196]             base::names(...future.oldOptions))
[11:00:48.196]     }
[11:00:48.196]     if (FALSE) {
[11:00:48.196]     }
[11:00:48.196]     else {
[11:00:48.196]         if (TRUE) {
[11:00:48.196]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:00:48.196]                 open = "w")
[11:00:48.196]         }
[11:00:48.196]         else {
[11:00:48.196]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:00:48.196]                 windows = "NUL", "/dev/null"), open = "w")
[11:00:48.196]         }
[11:00:48.196]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:00:48.196]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:00:48.196]             base::sink(type = "output", split = FALSE)
[11:00:48.196]             base::close(...future.stdout)
[11:00:48.196]         }, add = TRUE)
[11:00:48.196]     }
[11:00:48.196]     ...future.frame <- base::sys.nframe()
[11:00:48.196]     ...future.conditions <- base::list()
[11:00:48.196]     ...future.rng <- base::globalenv()$.Random.seed
[11:00:48.196]     if (FALSE) {
[11:00:48.196]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:00:48.196]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:00:48.196]     }
[11:00:48.196]     ...future.result <- base::tryCatch({
[11:00:48.196]         base::withCallingHandlers({
[11:00:48.196]             ...future.value <- base::withVisible(base::local({
[11:00:48.196]                 ...future.makeSendCondition <- base::local({
[11:00:48.196]                   sendCondition <- NULL
[11:00:48.196]                   function(frame = 1L) {
[11:00:48.196]                     if (is.function(sendCondition)) 
[11:00:48.196]                       return(sendCondition)
[11:00:48.196]                     ns <- getNamespace("parallel")
[11:00:48.196]                     if (exists("sendData", mode = "function", 
[11:00:48.196]                       envir = ns)) {
[11:00:48.196]                       parallel_sendData <- get("sendData", mode = "function", 
[11:00:48.196]                         envir = ns)
[11:00:48.196]                       envir <- sys.frame(frame)
[11:00:48.196]                       master <- NULL
[11:00:48.196]                       while (!identical(envir, .GlobalEnv) && 
[11:00:48.196]                         !identical(envir, emptyenv())) {
[11:00:48.196]                         if (exists("master", mode = "list", envir = envir, 
[11:00:48.196]                           inherits = FALSE)) {
[11:00:48.196]                           master <- get("master", mode = "list", 
[11:00:48.196]                             envir = envir, inherits = FALSE)
[11:00:48.196]                           if (inherits(master, c("SOCKnode", 
[11:00:48.196]                             "SOCK0node"))) {
[11:00:48.196]                             sendCondition <<- function(cond) {
[11:00:48.196]                               data <- list(type = "VALUE", value = cond, 
[11:00:48.196]                                 success = TRUE)
[11:00:48.196]                               parallel_sendData(master, data)
[11:00:48.196]                             }
[11:00:48.196]                             return(sendCondition)
[11:00:48.196]                           }
[11:00:48.196]                         }
[11:00:48.196]                         frame <- frame + 1L
[11:00:48.196]                         envir <- sys.frame(frame)
[11:00:48.196]                       }
[11:00:48.196]                     }
[11:00:48.196]                     sendCondition <<- function(cond) NULL
[11:00:48.196]                   }
[11:00:48.196]                 })
[11:00:48.196]                 withCallingHandlers({
[11:00:48.196]                   slow_fcn(x)
[11:00:48.196]                 }, immediateCondition = function(cond) {
[11:00:48.196]                   sendCondition <- ...future.makeSendCondition()
[11:00:48.196]                   sendCondition(cond)
[11:00:48.196]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.196]                   {
[11:00:48.196]                     inherits <- base::inherits
[11:00:48.196]                     invokeRestart <- base::invokeRestart
[11:00:48.196]                     is.null <- base::is.null
[11:00:48.196]                     muffled <- FALSE
[11:00:48.196]                     if (inherits(cond, "message")) {
[11:00:48.196]                       muffled <- grepl(pattern, "muffleMessage")
[11:00:48.196]                       if (muffled) 
[11:00:48.196]                         invokeRestart("muffleMessage")
[11:00:48.196]                     }
[11:00:48.196]                     else if (inherits(cond, "warning")) {
[11:00:48.196]                       muffled <- grepl(pattern, "muffleWarning")
[11:00:48.196]                       if (muffled) 
[11:00:48.196]                         invokeRestart("muffleWarning")
[11:00:48.196]                     }
[11:00:48.196]                     else if (inherits(cond, "condition")) {
[11:00:48.196]                       if (!is.null(pattern)) {
[11:00:48.196]                         computeRestarts <- base::computeRestarts
[11:00:48.196]                         grepl <- base::grepl
[11:00:48.196]                         restarts <- computeRestarts(cond)
[11:00:48.196]                         for (restart in restarts) {
[11:00:48.196]                           name <- restart$name
[11:00:48.196]                           if (is.null(name)) 
[11:00:48.196]                             next
[11:00:48.196]                           if (!grepl(pattern, name)) 
[11:00:48.196]                             next
[11:00:48.196]                           invokeRestart(restart)
[11:00:48.196]                           muffled <- TRUE
[11:00:48.196]                           break
[11:00:48.196]                         }
[11:00:48.196]                       }
[11:00:48.196]                     }
[11:00:48.196]                     invisible(muffled)
[11:00:48.196]                   }
[11:00:48.196]                   muffleCondition(cond)
[11:00:48.196]                 })
[11:00:48.196]             }))
[11:00:48.196]             future::FutureResult(value = ...future.value$value, 
[11:00:48.196]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.196]                   ...future.rng), globalenv = if (FALSE) 
[11:00:48.196]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:00:48.196]                     ...future.globalenv.names))
[11:00:48.196]                 else NULL, started = ...future.startTime, version = "1.8")
[11:00:48.196]         }, condition = base::local({
[11:00:48.196]             c <- base::c
[11:00:48.196]             inherits <- base::inherits
[11:00:48.196]             invokeRestart <- base::invokeRestart
[11:00:48.196]             length <- base::length
[11:00:48.196]             list <- base::list
[11:00:48.196]             seq.int <- base::seq.int
[11:00:48.196]             signalCondition <- base::signalCondition
[11:00:48.196]             sys.calls <- base::sys.calls
[11:00:48.196]             `[[` <- base::`[[`
[11:00:48.196]             `+` <- base::`+`
[11:00:48.196]             `<<-` <- base::`<<-`
[11:00:48.196]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:00:48.196]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:00:48.196]                   3L)]
[11:00:48.196]             }
[11:00:48.196]             function(cond) {
[11:00:48.196]                 is_error <- inherits(cond, "error")
[11:00:48.196]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:00:48.196]                   NULL)
[11:00:48.196]                 if (is_error) {
[11:00:48.196]                   sessionInformation <- function() {
[11:00:48.196]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:00:48.196]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:00:48.196]                       search = base::search(), system = base::Sys.info())
[11:00:48.196]                   }
[11:00:48.196]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.196]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:00:48.196]                     cond$call), session = sessionInformation(), 
[11:00:48.196]                     timestamp = base::Sys.time(), signaled = 0L)
[11:00:48.196]                   signalCondition(cond)
[11:00:48.196]                 }
[11:00:48.196]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:00:48.196]                 "immediateCondition"))) {
[11:00:48.196]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:00:48.196]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.196]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:00:48.196]                   if (TRUE && !signal) {
[11:00:48.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.196]                     {
[11:00:48.196]                       inherits <- base::inherits
[11:00:48.196]                       invokeRestart <- base::invokeRestart
[11:00:48.196]                       is.null <- base::is.null
[11:00:48.196]                       muffled <- FALSE
[11:00:48.196]                       if (inherits(cond, "message")) {
[11:00:48.196]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.196]                         if (muffled) 
[11:00:48.196]                           invokeRestart("muffleMessage")
[11:00:48.196]                       }
[11:00:48.196]                       else if (inherits(cond, "warning")) {
[11:00:48.196]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.196]                         if (muffled) 
[11:00:48.196]                           invokeRestart("muffleWarning")
[11:00:48.196]                       }
[11:00:48.196]                       else if (inherits(cond, "condition")) {
[11:00:48.196]                         if (!is.null(pattern)) {
[11:00:48.196]                           computeRestarts <- base::computeRestarts
[11:00:48.196]                           grepl <- base::grepl
[11:00:48.196]                           restarts <- computeRestarts(cond)
[11:00:48.196]                           for (restart in restarts) {
[11:00:48.196]                             name <- restart$name
[11:00:48.196]                             if (is.null(name)) 
[11:00:48.196]                               next
[11:00:48.196]                             if (!grepl(pattern, name)) 
[11:00:48.196]                               next
[11:00:48.196]                             invokeRestart(restart)
[11:00:48.196]                             muffled <- TRUE
[11:00:48.196]                             break
[11:00:48.196]                           }
[11:00:48.196]                         }
[11:00:48.196]                       }
[11:00:48.196]                       invisible(muffled)
[11:00:48.196]                     }
[11:00:48.196]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.196]                   }
[11:00:48.196]                 }
[11:00:48.196]                 else {
[11:00:48.196]                   if (TRUE) {
[11:00:48.196]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.196]                     {
[11:00:48.196]                       inherits <- base::inherits
[11:00:48.196]                       invokeRestart <- base::invokeRestart
[11:00:48.196]                       is.null <- base::is.null
[11:00:48.196]                       muffled <- FALSE
[11:00:48.196]                       if (inherits(cond, "message")) {
[11:00:48.196]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.196]                         if (muffled) 
[11:00:48.196]                           invokeRestart("muffleMessage")
[11:00:48.196]                       }
[11:00:48.196]                       else if (inherits(cond, "warning")) {
[11:00:48.196]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.196]                         if (muffled) 
[11:00:48.196]                           invokeRestart("muffleWarning")
[11:00:48.196]                       }
[11:00:48.196]                       else if (inherits(cond, "condition")) {
[11:00:48.196]                         if (!is.null(pattern)) {
[11:00:48.196]                           computeRestarts <- base::computeRestarts
[11:00:48.196]                           grepl <- base::grepl
[11:00:48.196]                           restarts <- computeRestarts(cond)
[11:00:48.196]                           for (restart in restarts) {
[11:00:48.196]                             name <- restart$name
[11:00:48.196]                             if (is.null(name)) 
[11:00:48.196]                               next
[11:00:48.196]                             if (!grepl(pattern, name)) 
[11:00:48.196]                               next
[11:00:48.196]                             invokeRestart(restart)
[11:00:48.196]                             muffled <- TRUE
[11:00:48.196]                             break
[11:00:48.196]                           }
[11:00:48.196]                         }
[11:00:48.196]                       }
[11:00:48.196]                       invisible(muffled)
[11:00:48.196]                     }
[11:00:48.196]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.196]                   }
[11:00:48.196]                 }
[11:00:48.196]             }
[11:00:48.196]         }))
[11:00:48.196]     }, error = function(ex) {
[11:00:48.196]         base::structure(base::list(value = NULL, visible = NULL, 
[11:00:48.196]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.196]                 ...future.rng), started = ...future.startTime, 
[11:00:48.196]             finished = Sys.time(), session_uuid = NA_character_, 
[11:00:48.196]             version = "1.8"), class = "FutureResult")
[11:00:48.196]     }, finally = {
[11:00:48.196]         if (!identical(...future.workdir, getwd())) 
[11:00:48.196]             setwd(...future.workdir)
[11:00:48.196]         {
[11:00:48.196]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:00:48.196]                 ...future.oldOptions$nwarnings <- NULL
[11:00:48.196]             }
[11:00:48.196]             base::options(...future.oldOptions)
[11:00:48.196]             if (.Platform$OS.type == "windows") {
[11:00:48.196]                 old_names <- names(...future.oldEnvVars)
[11:00:48.196]                 envs <- base::Sys.getenv()
[11:00:48.196]                 names <- names(envs)
[11:00:48.196]                 common <- intersect(names, old_names)
[11:00:48.196]                 added <- setdiff(names, old_names)
[11:00:48.196]                 removed <- setdiff(old_names, names)
[11:00:48.196]                 changed <- common[...future.oldEnvVars[common] != 
[11:00:48.196]                   envs[common]]
[11:00:48.196]                 NAMES <- toupper(changed)
[11:00:48.196]                 args <- list()
[11:00:48.196]                 for (kk in seq_along(NAMES)) {
[11:00:48.196]                   name <- changed[[kk]]
[11:00:48.196]                   NAME <- NAMES[[kk]]
[11:00:48.196]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.196]                     next
[11:00:48.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.196]                 }
[11:00:48.196]                 NAMES <- toupper(added)
[11:00:48.196]                 for (kk in seq_along(NAMES)) {
[11:00:48.196]                   name <- added[[kk]]
[11:00:48.196]                   NAME <- NAMES[[kk]]
[11:00:48.196]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.196]                     next
[11:00:48.196]                   args[[name]] <- ""
[11:00:48.196]                 }
[11:00:48.196]                 NAMES <- toupper(removed)
[11:00:48.196]                 for (kk in seq_along(NAMES)) {
[11:00:48.196]                   name <- removed[[kk]]
[11:00:48.196]                   NAME <- NAMES[[kk]]
[11:00:48.196]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.196]                     next
[11:00:48.196]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.196]                 }
[11:00:48.196]                 if (length(args) > 0) 
[11:00:48.196]                   base::do.call(base::Sys.setenv, args = args)
[11:00:48.196]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:00:48.196]             }
[11:00:48.196]             else {
[11:00:48.196]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:00:48.196]             }
[11:00:48.196]             {
[11:00:48.196]                 if (base::length(...future.futureOptionsAdded) > 
[11:00:48.196]                   0L) {
[11:00:48.196]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:00:48.196]                   base::names(opts) <- ...future.futureOptionsAdded
[11:00:48.196]                   base::options(opts)
[11:00:48.196]                 }
[11:00:48.196]                 {
[11:00:48.196]                   {
[11:00:48.196]                     base::options(mc.cores = ...future.mc.cores.old)
[11:00:48.196]                     NULL
[11:00:48.196]                   }
[11:00:48.196]                   options(future.plan = NULL)
[11:00:48.196]                   if (is.na(NA_character_)) 
[11:00:48.196]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.196]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:00:48.196]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:00:48.196]                     .init = FALSE)
[11:00:48.196]                 }
[11:00:48.196]             }
[11:00:48.196]         }
[11:00:48.196]     })
[11:00:48.196]     if (TRUE) {
[11:00:48.196]         base::sink(type = "output", split = FALSE)
[11:00:48.196]         if (TRUE) {
[11:00:48.196]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:00:48.196]         }
[11:00:48.196]         else {
[11:00:48.196]             ...future.result["stdout"] <- base::list(NULL)
[11:00:48.196]         }
[11:00:48.196]         base::close(...future.stdout)
[11:00:48.196]         ...future.stdout <- NULL
[11:00:48.196]     }
[11:00:48.196]     ...future.result$conditions <- ...future.conditions
[11:00:48.196]     ...future.result$finished <- base::Sys.time()
[11:00:48.196]     ...future.result
[11:00:48.196] }
[11:00:48.201] Exporting 2 global objects (563 bytes) to cluster node #1 ...
[11:00:48.201] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ...
[11:00:48.202] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ... DONE
[11:00:48.202] Exporting ‘x’ (35 bytes) to cluster node #1 ...
[11:00:48.202] Exporting ‘x’ (35 bytes) to cluster node #1 ... DONE
[11:00:48.202] Exporting 2 global objects (563 bytes) to cluster node #1 ... DONE
[11:00:48.203] MultisessionFuture started
[11:00:48.204] - Launch lazy future ... done
[11:00:48.204] run() for ‘MultisessionFuture’ ... done
[11:00:48.205] getGlobalsAndPackages() ...
[11:00:48.206] Searching for globals...
[11:00:48.207] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[11:00:48.207] Searching for globals ... DONE
[11:00:48.207] Resolving globals: FALSE
[11:00:48.208] The total size of the 2 globals is 243 bytes (243 bytes)
[11:00:48.208] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[11:00:48.208] - globals: [2] ‘slow_fcn’, ‘x’
[11:00:48.208] 
[11:00:48.208] getGlobalsAndPackages() ... DONE
[11:00:48.209] run() for ‘Future’ ...
[11:00:48.209] - state: ‘created’
[11:00:48.209] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:00:48.222] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:00:48.223] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:00:48.223]   - Field: ‘node’
[11:00:48.223]   - Field: ‘label’
[11:00:48.223]   - Field: ‘local’
[11:00:48.223]   - Field: ‘owner’
[11:00:48.223]   - Field: ‘envir’
[11:00:48.223]   - Field: ‘workers’
[11:00:48.223]   - Field: ‘packages’
[11:00:48.223]   - Field: ‘gc’
[11:00:48.223]   - Field: ‘conditions’
[11:00:48.224]   - Field: ‘persistent’
[11:00:48.224]   - Field: ‘expr’
[11:00:48.224]   - Field: ‘uuid’
[11:00:48.224]   - Field: ‘seed’
[11:00:48.224]   - Field: ‘version’
[11:00:48.224]   - Field: ‘result’
[11:00:48.224]   - Field: ‘asynchronous’
[11:00:48.224]   - Field: ‘calls’
[11:00:48.224]   - Field: ‘globals’
[11:00:48.225]   - Field: ‘stdout’
[11:00:48.225]   - Field: ‘earlySignal’
[11:00:48.225]   - Field: ‘lazy’
[11:00:48.225]   - Field: ‘state’
[11:00:48.225] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:00:48.225] - Launch lazy future ...
[11:00:48.225] Packages needed by the future expression (n = 0): <none>
[11:00:48.225] Packages needed by future strategies (n = 0): <none>
[11:00:48.226] {
[11:00:48.226]     {
[11:00:48.226]         {
[11:00:48.226]             ...future.startTime <- base::Sys.time()
[11:00:48.226]             {
[11:00:48.226]                 {
[11:00:48.226]                   {
[11:00:48.226]                     {
[11:00:48.226]                       base::local({
[11:00:48.226]                         has_future <- base::requireNamespace("future", 
[11:00:48.226]                           quietly = TRUE)
[11:00:48.226]                         if (has_future) {
[11:00:48.226]                           ns <- base::getNamespace("future")
[11:00:48.226]                           version <- ns[[".package"]][["version"]]
[11:00:48.226]                           if (is.null(version)) 
[11:00:48.226]                             version <- utils::packageVersion("future")
[11:00:48.226]                         }
[11:00:48.226]                         else {
[11:00:48.226]                           version <- NULL
[11:00:48.226]                         }
[11:00:48.226]                         if (!has_future || version < "1.8.0") {
[11:00:48.226]                           info <- base::c(r_version = base::gsub("R version ", 
[11:00:48.226]                             "", base::R.version$version.string), 
[11:00:48.226]                             platform = base::sprintf("%s (%s-bit)", 
[11:00:48.226]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:00:48.226]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:00:48.226]                               "release", "version")], collapse = " "), 
[11:00:48.226]                             hostname = base::Sys.info()[["nodename"]])
[11:00:48.226]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:00:48.226]                             info)
[11:00:48.226]                           info <- base::paste(info, collapse = "; ")
[11:00:48.226]                           if (!has_future) {
[11:00:48.226]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:00:48.226]                               info)
[11:00:48.226]                           }
[11:00:48.226]                           else {
[11:00:48.226]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:00:48.226]                               info, version)
[11:00:48.226]                           }
[11:00:48.226]                           base::stop(msg)
[11:00:48.226]                         }
[11:00:48.226]                       })
[11:00:48.226]                     }
[11:00:48.226]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:00:48.226]                     base::options(mc.cores = 1L)
[11:00:48.226]                   }
[11:00:48.226]                   ...future.strategy.old <- future::plan("list")
[11:00:48.226]                   options(future.plan = NULL)
[11:00:48.226]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.226]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:00:48.226]                 }
[11:00:48.226]                 ...future.workdir <- getwd()
[11:00:48.226]             }
[11:00:48.226]             ...future.oldOptions <- base::as.list(base::.Options)
[11:00:48.226]             ...future.oldEnvVars <- base::Sys.getenv()
[11:00:48.226]         }
[11:00:48.226]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:00:48.226]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:00:48.226]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:00:48.226]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:00:48.226]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:00:48.226]             future.stdout.windows.reencode = NULL, width = 80L)
[11:00:48.226]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:00:48.226]             base::names(...future.oldOptions))
[11:00:48.226]     }
[11:00:48.226]     if (FALSE) {
[11:00:48.226]     }
[11:00:48.226]     else {
[11:00:48.226]         if (TRUE) {
[11:00:48.226]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:00:48.226]                 open = "w")
[11:00:48.226]         }
[11:00:48.226]         else {
[11:00:48.226]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:00:48.226]                 windows = "NUL", "/dev/null"), open = "w")
[11:00:48.226]         }
[11:00:48.226]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:00:48.226]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:00:48.226]             base::sink(type = "output", split = FALSE)
[11:00:48.226]             base::close(...future.stdout)
[11:00:48.226]         }, add = TRUE)
[11:00:48.226]     }
[11:00:48.226]     ...future.frame <- base::sys.nframe()
[11:00:48.226]     ...future.conditions <- base::list()
[11:00:48.226]     ...future.rng <- base::globalenv()$.Random.seed
[11:00:48.226]     if (FALSE) {
[11:00:48.226]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:00:48.226]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:00:48.226]     }
[11:00:48.226]     ...future.result <- base::tryCatch({
[11:00:48.226]         base::withCallingHandlers({
[11:00:48.226]             ...future.value <- base::withVisible(base::local({
[11:00:48.226]                 ...future.makeSendCondition <- base::local({
[11:00:48.226]                   sendCondition <- NULL
[11:00:48.226]                   function(frame = 1L) {
[11:00:48.226]                     if (is.function(sendCondition)) 
[11:00:48.226]                       return(sendCondition)
[11:00:48.226]                     ns <- getNamespace("parallel")
[11:00:48.226]                     if (exists("sendData", mode = "function", 
[11:00:48.226]                       envir = ns)) {
[11:00:48.226]                       parallel_sendData <- get("sendData", mode = "function", 
[11:00:48.226]                         envir = ns)
[11:00:48.226]                       envir <- sys.frame(frame)
[11:00:48.226]                       master <- NULL
[11:00:48.226]                       while (!identical(envir, .GlobalEnv) && 
[11:00:48.226]                         !identical(envir, emptyenv())) {
[11:00:48.226]                         if (exists("master", mode = "list", envir = envir, 
[11:00:48.226]                           inherits = FALSE)) {
[11:00:48.226]                           master <- get("master", mode = "list", 
[11:00:48.226]                             envir = envir, inherits = FALSE)
[11:00:48.226]                           if (inherits(master, c("SOCKnode", 
[11:00:48.226]                             "SOCK0node"))) {
[11:00:48.226]                             sendCondition <<- function(cond) {
[11:00:48.226]                               data <- list(type = "VALUE", value = cond, 
[11:00:48.226]                                 success = TRUE)
[11:00:48.226]                               parallel_sendData(master, data)
[11:00:48.226]                             }
[11:00:48.226]                             return(sendCondition)
[11:00:48.226]                           }
[11:00:48.226]                         }
[11:00:48.226]                         frame <- frame + 1L
[11:00:48.226]                         envir <- sys.frame(frame)
[11:00:48.226]                       }
[11:00:48.226]                     }
[11:00:48.226]                     sendCondition <<- function(cond) NULL
[11:00:48.226]                   }
[11:00:48.226]                 })
[11:00:48.226]                 withCallingHandlers({
[11:00:48.226]                   slow_fcn(x)
[11:00:48.226]                 }, immediateCondition = function(cond) {
[11:00:48.226]                   sendCondition <- ...future.makeSendCondition()
[11:00:48.226]                   sendCondition(cond)
[11:00:48.226]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.226]                   {
[11:00:48.226]                     inherits <- base::inherits
[11:00:48.226]                     invokeRestart <- base::invokeRestart
[11:00:48.226]                     is.null <- base::is.null
[11:00:48.226]                     muffled <- FALSE
[11:00:48.226]                     if (inherits(cond, "message")) {
[11:00:48.226]                       muffled <- grepl(pattern, "muffleMessage")
[11:00:48.226]                       if (muffled) 
[11:00:48.226]                         invokeRestart("muffleMessage")
[11:00:48.226]                     }
[11:00:48.226]                     else if (inherits(cond, "warning")) {
[11:00:48.226]                       muffled <- grepl(pattern, "muffleWarning")
[11:00:48.226]                       if (muffled) 
[11:00:48.226]                         invokeRestart("muffleWarning")
[11:00:48.226]                     }
[11:00:48.226]                     else if (inherits(cond, "condition")) {
[11:00:48.226]                       if (!is.null(pattern)) {
[11:00:48.226]                         computeRestarts <- base::computeRestarts
[11:00:48.226]                         grepl <- base::grepl
[11:00:48.226]                         restarts <- computeRestarts(cond)
[11:00:48.226]                         for (restart in restarts) {
[11:00:48.226]                           name <- restart$name
[11:00:48.226]                           if (is.null(name)) 
[11:00:48.226]                             next
[11:00:48.226]                           if (!grepl(pattern, name)) 
[11:00:48.226]                             next
[11:00:48.226]                           invokeRestart(restart)
[11:00:48.226]                           muffled <- TRUE
[11:00:48.226]                           break
[11:00:48.226]                         }
[11:00:48.226]                       }
[11:00:48.226]                     }
[11:00:48.226]                     invisible(muffled)
[11:00:48.226]                   }
[11:00:48.226]                   muffleCondition(cond)
[11:00:48.226]                 })
[11:00:48.226]             }))
[11:00:48.226]             future::FutureResult(value = ...future.value$value, 
[11:00:48.226]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.226]                   ...future.rng), globalenv = if (FALSE) 
[11:00:48.226]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:00:48.226]                     ...future.globalenv.names))
[11:00:48.226]                 else NULL, started = ...future.startTime, version = "1.8")
[11:00:48.226]         }, condition = base::local({
[11:00:48.226]             c <- base::c
[11:00:48.226]             inherits <- base::inherits
[11:00:48.226]             invokeRestart <- base::invokeRestart
[11:00:48.226]             length <- base::length
[11:00:48.226]             list <- base::list
[11:00:48.226]             seq.int <- base::seq.int
[11:00:48.226]             signalCondition <- base::signalCondition
[11:00:48.226]             sys.calls <- base::sys.calls
[11:00:48.226]             `[[` <- base::`[[`
[11:00:48.226]             `+` <- base::`+`
[11:00:48.226]             `<<-` <- base::`<<-`
[11:00:48.226]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:00:48.226]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:00:48.226]                   3L)]
[11:00:48.226]             }
[11:00:48.226]             function(cond) {
[11:00:48.226]                 is_error <- inherits(cond, "error")
[11:00:48.226]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:00:48.226]                   NULL)
[11:00:48.226]                 if (is_error) {
[11:00:48.226]                   sessionInformation <- function() {
[11:00:48.226]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:00:48.226]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:00:48.226]                       search = base::search(), system = base::Sys.info())
[11:00:48.226]                   }
[11:00:48.226]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.226]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:00:48.226]                     cond$call), session = sessionInformation(), 
[11:00:48.226]                     timestamp = base::Sys.time(), signaled = 0L)
[11:00:48.226]                   signalCondition(cond)
[11:00:48.226]                 }
[11:00:48.226]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:00:48.226]                 "immediateCondition"))) {
[11:00:48.226]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:00:48.226]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.226]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:00:48.226]                   if (TRUE && !signal) {
[11:00:48.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.226]                     {
[11:00:48.226]                       inherits <- base::inherits
[11:00:48.226]                       invokeRestart <- base::invokeRestart
[11:00:48.226]                       is.null <- base::is.null
[11:00:48.226]                       muffled <- FALSE
[11:00:48.226]                       if (inherits(cond, "message")) {
[11:00:48.226]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.226]                         if (muffled) 
[11:00:48.226]                           invokeRestart("muffleMessage")
[11:00:48.226]                       }
[11:00:48.226]                       else if (inherits(cond, "warning")) {
[11:00:48.226]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.226]                         if (muffled) 
[11:00:48.226]                           invokeRestart("muffleWarning")
[11:00:48.226]                       }
[11:00:48.226]                       else if (inherits(cond, "condition")) {
[11:00:48.226]                         if (!is.null(pattern)) {
[11:00:48.226]                           computeRestarts <- base::computeRestarts
[11:00:48.226]                           grepl <- base::grepl
[11:00:48.226]                           restarts <- computeRestarts(cond)
[11:00:48.226]                           for (restart in restarts) {
[11:00:48.226]                             name <- restart$name
[11:00:48.226]                             if (is.null(name)) 
[11:00:48.226]                               next
[11:00:48.226]                             if (!grepl(pattern, name)) 
[11:00:48.226]                               next
[11:00:48.226]                             invokeRestart(restart)
[11:00:48.226]                             muffled <- TRUE
[11:00:48.226]                             break
[11:00:48.226]                           }
[11:00:48.226]                         }
[11:00:48.226]                       }
[11:00:48.226]                       invisible(muffled)
[11:00:48.226]                     }
[11:00:48.226]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.226]                   }
[11:00:48.226]                 }
[11:00:48.226]                 else {
[11:00:48.226]                   if (TRUE) {
[11:00:48.226]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.226]                     {
[11:00:48.226]                       inherits <- base::inherits
[11:00:48.226]                       invokeRestart <- base::invokeRestart
[11:00:48.226]                       is.null <- base::is.null
[11:00:48.226]                       muffled <- FALSE
[11:00:48.226]                       if (inherits(cond, "message")) {
[11:00:48.226]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.226]                         if (muffled) 
[11:00:48.226]                           invokeRestart("muffleMessage")
[11:00:48.226]                       }
[11:00:48.226]                       else if (inherits(cond, "warning")) {
[11:00:48.226]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.226]                         if (muffled) 
[11:00:48.226]                           invokeRestart("muffleWarning")
[11:00:48.226]                       }
[11:00:48.226]                       else if (inherits(cond, "condition")) {
[11:00:48.226]                         if (!is.null(pattern)) {
[11:00:48.226]                           computeRestarts <- base::computeRestarts
[11:00:48.226]                           grepl <- base::grepl
[11:00:48.226]                           restarts <- computeRestarts(cond)
[11:00:48.226]                           for (restart in restarts) {
[11:00:48.226]                             name <- restart$name
[11:00:48.226]                             if (is.null(name)) 
[11:00:48.226]                               next
[11:00:48.226]                             if (!grepl(pattern, name)) 
[11:00:48.226]                               next
[11:00:48.226]                             invokeRestart(restart)
[11:00:48.226]                             muffled <- TRUE
[11:00:48.226]                             break
[11:00:48.226]                           }
[11:00:48.226]                         }
[11:00:48.226]                       }
[11:00:48.226]                       invisible(muffled)
[11:00:48.226]                     }
[11:00:48.226]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.226]                   }
[11:00:48.226]                 }
[11:00:48.226]             }
[11:00:48.226]         }))
[11:00:48.226]     }, error = function(ex) {
[11:00:48.226]         base::structure(base::list(value = NULL, visible = NULL, 
[11:00:48.226]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.226]                 ...future.rng), started = ...future.startTime, 
[11:00:48.226]             finished = Sys.time(), session_uuid = NA_character_, 
[11:00:48.226]             version = "1.8"), class = "FutureResult")
[11:00:48.226]     }, finally = {
[11:00:48.226]         if (!identical(...future.workdir, getwd())) 
[11:00:48.226]             setwd(...future.workdir)
[11:00:48.226]         {
[11:00:48.226]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:00:48.226]                 ...future.oldOptions$nwarnings <- NULL
[11:00:48.226]             }
[11:00:48.226]             base::options(...future.oldOptions)
[11:00:48.226]             if (.Platform$OS.type == "windows") {
[11:00:48.226]                 old_names <- names(...future.oldEnvVars)
[11:00:48.226]                 envs <- base::Sys.getenv()
[11:00:48.226]                 names <- names(envs)
[11:00:48.226]                 common <- intersect(names, old_names)
[11:00:48.226]                 added <- setdiff(names, old_names)
[11:00:48.226]                 removed <- setdiff(old_names, names)
[11:00:48.226]                 changed <- common[...future.oldEnvVars[common] != 
[11:00:48.226]                   envs[common]]
[11:00:48.226]                 NAMES <- toupper(changed)
[11:00:48.226]                 args <- list()
[11:00:48.226]                 for (kk in seq_along(NAMES)) {
[11:00:48.226]                   name <- changed[[kk]]
[11:00:48.226]                   NAME <- NAMES[[kk]]
[11:00:48.226]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.226]                     next
[11:00:48.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.226]                 }
[11:00:48.226]                 NAMES <- toupper(added)
[11:00:48.226]                 for (kk in seq_along(NAMES)) {
[11:00:48.226]                   name <- added[[kk]]
[11:00:48.226]                   NAME <- NAMES[[kk]]
[11:00:48.226]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.226]                     next
[11:00:48.226]                   args[[name]] <- ""
[11:00:48.226]                 }
[11:00:48.226]                 NAMES <- toupper(removed)
[11:00:48.226]                 for (kk in seq_along(NAMES)) {
[11:00:48.226]                   name <- removed[[kk]]
[11:00:48.226]                   NAME <- NAMES[[kk]]
[11:00:48.226]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.226]                     next
[11:00:48.226]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.226]                 }
[11:00:48.226]                 if (length(args) > 0) 
[11:00:48.226]                   base::do.call(base::Sys.setenv, args = args)
[11:00:48.226]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:00:48.226]             }
[11:00:48.226]             else {
[11:00:48.226]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:00:48.226]             }
[11:00:48.226]             {
[11:00:48.226]                 if (base::length(...future.futureOptionsAdded) > 
[11:00:48.226]                   0L) {
[11:00:48.226]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:00:48.226]                   base::names(opts) <- ...future.futureOptionsAdded
[11:00:48.226]                   base::options(opts)
[11:00:48.226]                 }
[11:00:48.226]                 {
[11:00:48.226]                   {
[11:00:48.226]                     base::options(mc.cores = ...future.mc.cores.old)
[11:00:48.226]                     NULL
[11:00:48.226]                   }
[11:00:48.226]                   options(future.plan = NULL)
[11:00:48.226]                   if (is.na(NA_character_)) 
[11:00:48.226]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.226]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:00:48.226]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:00:48.226]                     .init = FALSE)
[11:00:48.226]                 }
[11:00:48.226]             }
[11:00:48.226]         }
[11:00:48.226]     })
[11:00:48.226]     if (TRUE) {
[11:00:48.226]         base::sink(type = "output", split = FALSE)
[11:00:48.226]         if (TRUE) {
[11:00:48.226]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:00:48.226]         }
[11:00:48.226]         else {
[11:00:48.226]             ...future.result["stdout"] <- base::list(NULL)
[11:00:48.226]         }
[11:00:48.226]         base::close(...future.stdout)
[11:00:48.226]         ...future.stdout <- NULL
[11:00:48.226]     }
[11:00:48.226]     ...future.result$conditions <- ...future.conditions
[11:00:48.226]     ...future.result$finished <- base::Sys.time()
[11:00:48.226]     ...future.result
[11:00:48.226] }
[11:00:48.280] Exporting 2 global objects (563 bytes) to cluster node #2 ...
[11:00:48.280] Exporting ‘slow_fcn’ (208 bytes) to cluster node #2 ...
[11:00:48.280] Exporting ‘slow_fcn’ (208 bytes) to cluster node #2 ... DONE
[11:00:48.280] Exporting ‘x’ (35 bytes) to cluster node #2 ...
[11:00:48.281] Exporting ‘x’ (35 bytes) to cluster node #2 ... DONE
[11:00:48.281] Exporting 2 global objects (563 bytes) to cluster node #2 ... DONE
[11:00:48.282] MultisessionFuture started
[11:00:48.283] - Launch lazy future ... done
[11:00:48.283] run() for ‘MultisessionFuture’ ... done
[11:00:48.283] getGlobalsAndPackages() ...
[11:00:48.283] Searching for globals...
[11:00:48.285] - globals found: [6] ‘slow_fcn’, ‘x’, ‘{’, ‘Sys.sleep’, ‘+’, ‘/’
[11:00:48.285] Searching for globals ... DONE
[11:00:48.286] Resolving globals: FALSE
[11:00:48.286] The total size of the 2 globals is 243 bytes (243 bytes)
[11:00:48.287] The total size of the 2 globals exported for future expression (‘slow_fcn(x)’) is 243 bytes.. This exceeds the maximum allowed size of 500.00 MiB (option 'future.globals.maxSize'). There are two globals: ‘slow_fcn’ (208 bytes of class ‘function’) and ‘x’ (35 bytes of class ‘numeric’)
[11:00:48.287] - globals: [2] ‘slow_fcn’, ‘x’
[11:00:48.287] 
[11:00:48.287] getGlobalsAndPackages() ... DONE
[11:00:48.288] run() for ‘Future’ ...
[11:00:48.288] - state: ‘created’
[11:00:48.288] - Future backend: ‘FutureStrategy’, ‘tweaked’, ‘multisession’, ‘cluster’, ‘multiprocess’, ‘future’, ‘function’
[11:00:48.301] - Future class: ‘MultisessionFuture’, ‘ClusterFuture’, ‘MultiprocessFuture’, ‘Future’, ‘environment’
[11:00:48.301] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ...
[11:00:48.301]   - Field: ‘node’
[11:00:48.301]   - Field: ‘label’
[11:00:48.302]   - Field: ‘local’
[11:00:48.302]   - Field: ‘owner’
[11:00:48.302]   - Field: ‘envir’
[11:00:48.302]   - Field: ‘workers’
[11:00:48.302]   - Field: ‘packages’
[11:00:48.302]   - Field: ‘gc’
[11:00:48.302]   - Field: ‘conditions’
[11:00:48.302]   - Field: ‘persistent’
[11:00:48.302]   - Field: ‘expr’
[11:00:48.302]   - Field: ‘uuid’
[11:00:48.303]   - Field: ‘seed’
[11:00:48.303]   - Field: ‘version’
[11:00:48.303]   - Field: ‘result’
[11:00:48.303]   - Field: ‘asynchronous’
[11:00:48.303]   - Field: ‘calls’
[11:00:48.303]   - Field: ‘globals’
[11:00:48.303]   - Field: ‘stdout’
[11:00:48.303]   - Field: ‘earlySignal’
[11:00:48.303]   - Field: ‘lazy’
[11:00:48.303]   - Field: ‘state’
[11:00:48.304] - Copy elements of temporary ‘MultisessionFuture’ to final ‘Future’ object ... done
[11:00:48.304] - Launch lazy future ...
[11:00:48.304] Packages needed by the future expression (n = 0): <none>
[11:00:48.304] Packages needed by future strategies (n = 0): <none>
[11:00:48.305] {
[11:00:48.305]     {
[11:00:48.305]         {
[11:00:48.305]             ...future.startTime <- base::Sys.time()
[11:00:48.305]             {
[11:00:48.305]                 {
[11:00:48.305]                   {
[11:00:48.305]                     {
[11:00:48.305]                       base::local({
[11:00:48.305]                         has_future <- base::requireNamespace("future", 
[11:00:48.305]                           quietly = TRUE)
[11:00:48.305]                         if (has_future) {
[11:00:48.305]                           ns <- base::getNamespace("future")
[11:00:48.305]                           version <- ns[[".package"]][["version"]]
[11:00:48.305]                           if (is.null(version)) 
[11:00:48.305]                             version <- utils::packageVersion("future")
[11:00:48.305]                         }
[11:00:48.305]                         else {
[11:00:48.305]                           version <- NULL
[11:00:48.305]                         }
[11:00:48.305]                         if (!has_future || version < "1.8.0") {
[11:00:48.305]                           info <- base::c(r_version = base::gsub("R version ", 
[11:00:48.305]                             "", base::R.version$version.string), 
[11:00:48.305]                             platform = base::sprintf("%s (%s-bit)", 
[11:00:48.305]                               base::R.version$platform, 8 * base::.Machine$sizeof.pointer), 
[11:00:48.305]                             os = base::paste(base::Sys.info()[base::c("sysname", 
[11:00:48.305]                               "release", "version")], collapse = " "), 
[11:00:48.305]                             hostname = base::Sys.info()[["nodename"]])
[11:00:48.305]                           info <- base::sprintf("%s: %s", base::names(info), 
[11:00:48.305]                             info)
[11:00:48.305]                           info <- base::paste(info, collapse = "; ")
[11:00:48.305]                           if (!has_future) {
[11:00:48.305]                             msg <- base::sprintf("Package 'future' is not installed on worker (%s)", 
[11:00:48.305]                               info)
[11:00:48.305]                           }
[11:00:48.305]                           else {
[11:00:48.305]                             msg <- base::sprintf("Package 'future' on worker (%s) must be of version >= 1.8.0: %s", 
[11:00:48.305]                               info, version)
[11:00:48.305]                           }
[11:00:48.305]                           base::stop(msg)
[11:00:48.305]                         }
[11:00:48.305]                       })
[11:00:48.305]                     }
[11:00:48.305]                     ...future.mc.cores.old <- base::getOption("mc.cores")
[11:00:48.305]                     base::options(mc.cores = 1L)
[11:00:48.305]                   }
[11:00:48.305]                   ...future.strategy.old <- future::plan("list")
[11:00:48.305]                   options(future.plan = NULL)
[11:00:48.305]                   Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.305]                   future::plan("default", .cleanup = FALSE, .init = FALSE)
[11:00:48.305]                 }
[11:00:48.305]                 ...future.workdir <- getwd()
[11:00:48.305]             }
[11:00:48.305]             ...future.oldOptions <- base::as.list(base::.Options)
[11:00:48.305]             ...future.oldEnvVars <- base::Sys.getenv()
[11:00:48.305]         }
[11:00:48.305]         base::options(future.startup.script = FALSE, future.globals.onMissing = NULL, 
[11:00:48.305]             future.globals.maxSize = NULL, future.globals.method = NULL, 
[11:00:48.305]             future.globals.onMissing = NULL, future.globals.onReference = NULL, 
[11:00:48.305]             future.globals.resolve = NULL, future.resolve.recursive = NULL, 
[11:00:48.305]             future.rng.onMisuse = NULL, future.rng.onMisuse.keepFuture = NULL, 
[11:00:48.305]             future.stdout.windows.reencode = NULL, width = 80L)
[11:00:48.305]         ...future.futureOptionsAdded <- base::setdiff(base::names(base::.Options), 
[11:00:48.305]             base::names(...future.oldOptions))
[11:00:48.305]     }
[11:00:48.305]     if (FALSE) {
[11:00:48.305]     }
[11:00:48.305]     else {
[11:00:48.305]         if (TRUE) {
[11:00:48.305]             ...future.stdout <- base::rawConnection(base::raw(0L), 
[11:00:48.305]                 open = "w")
[11:00:48.305]         }
[11:00:48.305]         else {
[11:00:48.305]             ...future.stdout <- base::file(base::switch(.Platform$OS.type, 
[11:00:48.305]                 windows = "NUL", "/dev/null"), open = "w")
[11:00:48.305]         }
[11:00:48.305]         base::sink(...future.stdout, type = "output", split = FALSE)
[11:00:48.305]         base::on.exit(if (!base::is.null(...future.stdout)) {
[11:00:48.305]             base::sink(type = "output", split = FALSE)
[11:00:48.305]             base::close(...future.stdout)
[11:00:48.305]         }, add = TRUE)
[11:00:48.305]     }
[11:00:48.305]     ...future.frame <- base::sys.nframe()
[11:00:48.305]     ...future.conditions <- base::list()
[11:00:48.305]     ...future.rng <- base::globalenv()$.Random.seed
[11:00:48.305]     if (FALSE) {
[11:00:48.305]         ...future.globalenv.names <- c(base::names(base::.GlobalEnv), 
[11:00:48.305]             "...future.value", "...future.globalenv.names", ".Random.seed")
[11:00:48.305]     }
[11:00:48.305]     ...future.result <- base::tryCatch({
[11:00:48.305]         base::withCallingHandlers({
[11:00:48.305]             ...future.value <- base::withVisible(base::local({
[11:00:48.305]                 ...future.makeSendCondition <- base::local({
[11:00:48.305]                   sendCondition <- NULL
[11:00:48.305]                   function(frame = 1L) {
[11:00:48.305]                     if (is.function(sendCondition)) 
[11:00:48.305]                       return(sendCondition)
[11:00:48.305]                     ns <- getNamespace("parallel")
[11:00:48.305]                     if (exists("sendData", mode = "function", 
[11:00:48.305]                       envir = ns)) {
[11:00:48.305]                       parallel_sendData <- get("sendData", mode = "function", 
[11:00:48.305]                         envir = ns)
[11:00:48.305]                       envir <- sys.frame(frame)
[11:00:48.305]                       master <- NULL
[11:00:48.305]                       while (!identical(envir, .GlobalEnv) && 
[11:00:48.305]                         !identical(envir, emptyenv())) {
[11:00:48.305]                         if (exists("master", mode = "list", envir = envir, 
[11:00:48.305]                           inherits = FALSE)) {
[11:00:48.305]                           master <- get("master", mode = "list", 
[11:00:48.305]                             envir = envir, inherits = FALSE)
[11:00:48.305]                           if (inherits(master, c("SOCKnode", 
[11:00:48.305]                             "SOCK0node"))) {
[11:00:48.305]                             sendCondition <<- function(cond) {
[11:00:48.305]                               data <- list(type = "VALUE", value = cond, 
[11:00:48.305]                                 success = TRUE)
[11:00:48.305]                               parallel_sendData(master, data)
[11:00:48.305]                             }
[11:00:48.305]                             return(sendCondition)
[11:00:48.305]                           }
[11:00:48.305]                         }
[11:00:48.305]                         frame <- frame + 1L
[11:00:48.305]                         envir <- sys.frame(frame)
[11:00:48.305]                       }
[11:00:48.305]                     }
[11:00:48.305]                     sendCondition <<- function(cond) NULL
[11:00:48.305]                   }
[11:00:48.305]                 })
[11:00:48.305]                 withCallingHandlers({
[11:00:48.305]                   slow_fcn(x)
[11:00:48.305]                 }, immediateCondition = function(cond) {
[11:00:48.305]                   sendCondition <- ...future.makeSendCondition()
[11:00:48.305]                   sendCondition(cond)
[11:00:48.305]                   muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.305]                   {
[11:00:48.305]                     inherits <- base::inherits
[11:00:48.305]                     invokeRestart <- base::invokeRestart
[11:00:48.305]                     is.null <- base::is.null
[11:00:48.305]                     muffled <- FALSE
[11:00:48.305]                     if (inherits(cond, "message")) {
[11:00:48.305]                       muffled <- grepl(pattern, "muffleMessage")
[11:00:48.305]                       if (muffled) 
[11:00:48.305]                         invokeRestart("muffleMessage")
[11:00:48.305]                     }
[11:00:48.305]                     else if (inherits(cond, "warning")) {
[11:00:48.305]                       muffled <- grepl(pattern, "muffleWarning")
[11:00:48.305]                       if (muffled) 
[11:00:48.305]                         invokeRestart("muffleWarning")
[11:00:48.305]                     }
[11:00:48.305]                     else if (inherits(cond, "condition")) {
[11:00:48.305]                       if (!is.null(pattern)) {
[11:00:48.305]                         computeRestarts <- base::computeRestarts
[11:00:48.305]                         grepl <- base::grepl
[11:00:48.305]                         restarts <- computeRestarts(cond)
[11:00:48.305]                         for (restart in restarts) {
[11:00:48.305]                           name <- restart$name
[11:00:48.305]                           if (is.null(name)) 
[11:00:48.305]                             next
[11:00:48.305]                           if (!grepl(pattern, name)) 
[11:00:48.305]                             next
[11:00:48.305]                           invokeRestart(restart)
[11:00:48.305]                           muffled <- TRUE
[11:00:48.305]                           break
[11:00:48.305]                         }
[11:00:48.305]                       }
[11:00:48.305]                     }
[11:00:48.305]                     invisible(muffled)
[11:00:48.305]                   }
[11:00:48.305]                   muffleCondition(cond)
[11:00:48.305]                 })
[11:00:48.305]             }))
[11:00:48.305]             future::FutureResult(value = ...future.value$value, 
[11:00:48.305]                 visible = ...future.value$visible, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.305]                   ...future.rng), globalenv = if (FALSE) 
[11:00:48.305]                   list(added = base::setdiff(base::names(base::.GlobalEnv), 
[11:00:48.305]                     ...future.globalenv.names))
[11:00:48.305]                 else NULL, started = ...future.startTime, version = "1.8")
[11:00:48.305]         }, condition = base::local({
[11:00:48.305]             c <- base::c
[11:00:48.305]             inherits <- base::inherits
[11:00:48.305]             invokeRestart <- base::invokeRestart
[11:00:48.305]             length <- base::length
[11:00:48.305]             list <- base::list
[11:00:48.305]             seq.int <- base::seq.int
[11:00:48.305]             signalCondition <- base::signalCondition
[11:00:48.305]             sys.calls <- base::sys.calls
[11:00:48.305]             `[[` <- base::`[[`
[11:00:48.305]             `+` <- base::`+`
[11:00:48.305]             `<<-` <- base::`<<-`
[11:00:48.305]             sysCalls <- function(calls = sys.calls(), from = 1L) {
[11:00:48.305]                 calls[seq.int(from = from + 12L, to = length(calls) - 
[11:00:48.305]                   3L)]
[11:00:48.305]             }
[11:00:48.305]             function(cond) {
[11:00:48.305]                 is_error <- inherits(cond, "error")
[11:00:48.305]                 ignore <- !is_error && !is.null(NULL) && inherits(cond, 
[11:00:48.305]                   NULL)
[11:00:48.305]                 if (is_error) {
[11:00:48.305]                   sessionInformation <- function() {
[11:00:48.305]                     list(r = base::R.Version(), locale = base::Sys.getlocale(), 
[11:00:48.305]                       rngkind = base::RNGkind(), namespaces = base::loadedNamespaces(), 
[11:00:48.305]                       search = base::search(), system = base::Sys.info())
[11:00:48.305]                   }
[11:00:48.305]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.305]                     1L]] <<- list(condition = cond, calls = c(sysCalls(from = ...future.frame), 
[11:00:48.305]                     cond$call), session = sessionInformation(), 
[11:00:48.305]                     timestamp = base::Sys.time(), signaled = 0L)
[11:00:48.305]                   signalCondition(cond)
[11:00:48.305]                 }
[11:00:48.305]                 else if (!ignore && TRUE && inherits(cond, c("condition", 
[11:00:48.305]                 "immediateCondition"))) {
[11:00:48.305]                   signal <- TRUE && inherits(cond, "immediateCondition")
[11:00:48.305]                   ...future.conditions[[length(...future.conditions) + 
[11:00:48.305]                     1L]] <<- list(condition = cond, signaled = base::as.integer(signal))
[11:00:48.305]                   if (TRUE && !signal) {
[11:00:48.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.305]                     {
[11:00:48.305]                       inherits <- base::inherits
[11:00:48.305]                       invokeRestart <- base::invokeRestart
[11:00:48.305]                       is.null <- base::is.null
[11:00:48.305]                       muffled <- FALSE
[11:00:48.305]                       if (inherits(cond, "message")) {
[11:00:48.305]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.305]                         if (muffled) 
[11:00:48.305]                           invokeRestart("muffleMessage")
[11:00:48.305]                       }
[11:00:48.305]                       else if (inherits(cond, "warning")) {
[11:00:48.305]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.305]                         if (muffled) 
[11:00:48.305]                           invokeRestart("muffleWarning")
[11:00:48.305]                       }
[11:00:48.305]                       else if (inherits(cond, "condition")) {
[11:00:48.305]                         if (!is.null(pattern)) {
[11:00:48.305]                           computeRestarts <- base::computeRestarts
[11:00:48.305]                           grepl <- base::grepl
[11:00:48.305]                           restarts <- computeRestarts(cond)
[11:00:48.305]                           for (restart in restarts) {
[11:00:48.305]                             name <- restart$name
[11:00:48.305]                             if (is.null(name)) 
[11:00:48.305]                               next
[11:00:48.305]                             if (!grepl(pattern, name)) 
[11:00:48.305]                               next
[11:00:48.305]                             invokeRestart(restart)
[11:00:48.305]                             muffled <- TRUE
[11:00:48.305]                             break
[11:00:48.305]                           }
[11:00:48.305]                         }
[11:00:48.305]                       }
[11:00:48.305]                       invisible(muffled)
[11:00:48.305]                     }
[11:00:48.305]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.305]                   }
[11:00:48.305]                 }
[11:00:48.305]                 else {
[11:00:48.305]                   if (TRUE) {
[11:00:48.305]                     muffleCondition <- function (cond, pattern = "^muffle") 
[11:00:48.305]                     {
[11:00:48.305]                       inherits <- base::inherits
[11:00:48.305]                       invokeRestart <- base::invokeRestart
[11:00:48.305]                       is.null <- base::is.null
[11:00:48.305]                       muffled <- FALSE
[11:00:48.305]                       if (inherits(cond, "message")) {
[11:00:48.305]                         muffled <- grepl(pattern, "muffleMessage")
[11:00:48.305]                         if (muffled) 
[11:00:48.305]                           invokeRestart("muffleMessage")
[11:00:48.305]                       }
[11:00:48.305]                       else if (inherits(cond, "warning")) {
[11:00:48.305]                         muffled <- grepl(pattern, "muffleWarning")
[11:00:48.305]                         if (muffled) 
[11:00:48.305]                           invokeRestart("muffleWarning")
[11:00:48.305]                       }
[11:00:48.305]                       else if (inherits(cond, "condition")) {
[11:00:48.305]                         if (!is.null(pattern)) {
[11:00:48.305]                           computeRestarts <- base::computeRestarts
[11:00:48.305]                           grepl <- base::grepl
[11:00:48.305]                           restarts <- computeRestarts(cond)
[11:00:48.305]                           for (restart in restarts) {
[11:00:48.305]                             name <- restart$name
[11:00:48.305]                             if (is.null(name)) 
[11:00:48.305]                               next
[11:00:48.305]                             if (!grepl(pattern, name)) 
[11:00:48.305]                               next
[11:00:48.305]                             invokeRestart(restart)
[11:00:48.305]                             muffled <- TRUE
[11:00:48.305]                             break
[11:00:48.305]                           }
[11:00:48.305]                         }
[11:00:48.305]                       }
[11:00:48.305]                       invisible(muffled)
[11:00:48.305]                     }
[11:00:48.305]                     muffleCondition(cond, pattern = "^muffle")
[11:00:48.305]                   }
[11:00:48.305]                 }
[11:00:48.305]             }
[11:00:48.305]         }))
[11:00:48.305]     }, error = function(ex) {
[11:00:48.305]         base::structure(base::list(value = NULL, visible = NULL, 
[11:00:48.305]             conditions = ...future.conditions, rng = !identical(base::globalenv()$.Random.seed, 
[11:00:48.305]                 ...future.rng), started = ...future.startTime, 
[11:00:48.305]             finished = Sys.time(), session_uuid = NA_character_, 
[11:00:48.305]             version = "1.8"), class = "FutureResult")
[11:00:48.305]     }, finally = {
[11:00:48.305]         if (!identical(...future.workdir, getwd())) 
[11:00:48.305]             setwd(...future.workdir)
[11:00:48.305]         {
[11:00:48.305]             if (identical(getOption("nwarnings"), ...future.oldOptions$nwarnings)) {
[11:00:48.305]                 ...future.oldOptions$nwarnings <- NULL
[11:00:48.305]             }
[11:00:48.305]             base::options(...future.oldOptions)
[11:00:48.305]             if (.Platform$OS.type == "windows") {
[11:00:48.305]                 old_names <- names(...future.oldEnvVars)
[11:00:48.305]                 envs <- base::Sys.getenv()
[11:00:48.305]                 names <- names(envs)
[11:00:48.305]                 common <- intersect(names, old_names)
[11:00:48.305]                 added <- setdiff(names, old_names)
[11:00:48.305]                 removed <- setdiff(old_names, names)
[11:00:48.305]                 changed <- common[...future.oldEnvVars[common] != 
[11:00:48.305]                   envs[common]]
[11:00:48.305]                 NAMES <- toupper(changed)
[11:00:48.305]                 args <- list()
[11:00:48.305]                 for (kk in seq_along(NAMES)) {
[11:00:48.305]                   name <- changed[[kk]]
[11:00:48.305]                   NAME <- NAMES[[kk]]
[11:00:48.305]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.305]                     next
[11:00:48.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.305]                 }
[11:00:48.305]                 NAMES <- toupper(added)
[11:00:48.305]                 for (kk in seq_along(NAMES)) {
[11:00:48.305]                   name <- added[[kk]]
[11:00:48.305]                   NAME <- NAMES[[kk]]
[11:00:48.305]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.305]                     next
[11:00:48.305]                   args[[name]] <- ""
[11:00:48.305]                 }
[11:00:48.305]                 NAMES <- toupper(removed)
[11:00:48.305]                 for (kk in seq_along(NAMES)) {
[11:00:48.305]                   name <- removed[[kk]]
[11:00:48.305]                   NAME <- NAMES[[kk]]
[11:00:48.305]                   if (name != NAME && is.element(NAME, old_names)) 
[11:00:48.305]                     next
[11:00:48.305]                   args[[name]] <- ...future.oldEnvVars[[name]]
[11:00:48.305]                 }
[11:00:48.305]                 if (length(args) > 0) 
[11:00:48.305]                   base::do.call(base::Sys.setenv, args = args)
[11:00:48.305]                 args <- names <- old_names <- NAMES <- envs <- common <- added <- removed <- NULL
[11:00:48.305]             }
[11:00:48.305]             else {
[11:00:48.305]                 base::do.call(base::Sys.setenv, args = base::as.list(...future.oldEnvVars))
[11:00:48.305]             }
[11:00:48.305]             {
[11:00:48.305]                 if (base::length(...future.futureOptionsAdded) > 
[11:00:48.305]                   0L) {
[11:00:48.305]                   opts <- base::vector("list", length = base::length(...future.futureOptionsAdded))
[11:00:48.305]                   base::names(opts) <- ...future.futureOptionsAdded
[11:00:48.305]                   base::options(opts)
[11:00:48.305]                 }
[11:00:48.305]                 {
[11:00:48.305]                   {
[11:00:48.305]                     base::options(mc.cores = ...future.mc.cores.old)
[11:00:48.305]                     NULL
[11:00:48.305]                   }
[11:00:48.305]                   options(future.plan = NULL)
[11:00:48.305]                   if (is.na(NA_character_)) 
[11:00:48.305]                     Sys.unsetenv("R_FUTURE_PLAN")
[11:00:48.305]                   else Sys.setenv(R_FUTURE_PLAN = NA_character_)
[11:00:48.305]                   future::plan(...future.strategy.old, .cleanup = FALSE, 
[11:00:48.305]                     .init = FALSE)
[11:00:48.305]                 }
[11:00:48.305]             }
[11:00:48.305]         }
[11:00:48.305]     })
[11:00:48.305]     if (TRUE) {
[11:00:48.305]         base::sink(type = "output", split = FALSE)
[11:00:48.305]         if (TRUE) {
[11:00:48.305]             ...future.result$stdout <- base::rawToChar(base::rawConnectionValue(...future.stdout))
[11:00:48.305]         }
[11:00:48.305]         else {
[11:00:48.305]             ...future.result["stdout"] <- base::list(NULL)
[11:00:48.305]         }
[11:00:48.305]         base::close(...future.stdout)
[11:00:48.305]         ...future.stdout <- NULL
[11:00:48.305]     }
[11:00:48.305]     ...future.result$conditions <- ...future.conditions
[11:00:48.305]     ...future.result$finished <- base::Sys.time()
[11:00:48.305]     ...future.result
[11:00:48.305] }
[11:00:48.307] Poll #1 (0): usedNodes() = 2, workers = 2
[11:00:48.340] Poll #2 (0.03 secs): usedNodes() = 2, workers = 2
[11:00:48.382] Poll #3 (0.08 secs): usedNodes() = 2, workers = 2
[11:00:48.414] Poll #4 (0.11 secs): usedNodes() = 2, workers = 2
[11:00:48.446] Poll #5 (0.14 secs): usedNodes() = 2, workers = 2
[11:00:48.477] Poll #6 (0.17 secs): usedNodes() = 2, workers = 2
[11:00:48.509] Poll #7 (0.2 secs): usedNodes() = 2, workers = 2
[11:00:48.541] Poll #8 (0.23 secs): usedNodes() = 2, workers = 2
[11:00:48.573] Poll #9 (0.27 secs): usedNodes() = 2, workers = 2
[11:00:48.605] Poll #10 (0.3 secs): usedNodes() = 2, workers = 2
[11:00:48.638] Poll #11 (0.33 secs): usedNodes() = 2, workers = 2
[11:00:48.671] Poll #12 (0.36 secs): usedNodes() = 2, workers = 2
[11:00:48.703] Poll #13 (0.4 secs): usedNodes() = 2, workers = 2
[11:00:48.736] Poll #14 (0.43 secs): usedNodes() = 2, workers = 2
[11:00:48.769] Poll #15 (0.46 secs): usedNodes() = 2, workers = 2
[11:00:48.802] Poll #16 (0.5 secs): usedNodes() = 2, workers = 2
[11:00:48.836] Poll #17 (0.53 secs): usedNodes() = 2, workers = 2
[11:00:48.869] Poll #18 (0.56 secs): usedNodes() = 2, workers = 2
[11:00:48.902] Poll #19 (0.6 secs): usedNodes() = 2, workers = 2
[11:00:48.936] Poll #20 (0.63 secs): usedNodes() = 2, workers = 2
[11:00:48.970] Poll #21 (0.66 secs): usedNodes() = 2, workers = 2
[11:00:49.004] Poll #22 (0.7 secs): usedNodes() = 2, workers = 2
[11:00:49.037] Poll #23 (0.73 secs): usedNodes() = 2, workers = 2
[11:00:49.071] Poll #24 (0.76 secs): usedNodes() = 2, workers = 2
[11:00:49.085] receiveMessageFromWorker() for ClusterFuture ...
[11:00:49.085] - Validating connection of MultisessionFuture
[11:00:49.085] - received message: FutureResult
[11:00:49.086] - Received FutureResult
[11:00:49.086] - Erased future from FutureRegistry
[11:00:49.086] result() for ClusterFuture ...
[11:00:49.086] - result already collected: FutureResult
[11:00:49.086] result() for ClusterFuture ... done
[11:00:49.089] receiveMessageFromWorker() for ClusterFuture ... done
[11:00:49.089] result() for ClusterFuture ...
[11:00:49.089] - result already collected: FutureResult
[11:00:49.089] result() for ClusterFuture ... done
[11:00:49.090] result() for ClusterFuture ...
[11:00:49.090] - result already collected: FutureResult
[11:00:49.090] result() for ClusterFuture ... done
[11:00:49.092] Exporting 2 global objects (563 bytes) to cluster node #1 ...
[11:00:49.092] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ...
[11:00:49.092] Exporting ‘slow_fcn’ (208 bytes) to cluster node #1 ... DONE
[11:00:49.093] Exporting ‘x’ (35 bytes) to cluster node #1 ...
[11:00:49.093] Exporting ‘x’ (35 bytes) to cluster node #1 ... DONE
[11:00:49.093] Exporting 2 global objects (563 bytes) to cluster node #1 ... DONE
[11:00:49.094] MultisessionFuture started
[11:00:49.095] - Launch lazy future ... done
[11:00:49.095] run() for ‘MultisessionFuture’ ... done
[11:00:49.095] resolve() on list ...
[11:00:49.095]  recursive: 0
[11:00:49.096]  length: 3
[11:00:49.096] 
[11:00:49.096] Future #1
[11:00:49.096] result() for ClusterFuture ...
[11:00:49.096] - result already collected: FutureResult
[11:00:49.096] result() for ClusterFuture ... done
[11:00:49.096] result() for ClusterFuture ...
[11:00:49.096] - result already collected: FutureResult
[11:00:49.096] result() for ClusterFuture ... done
[11:00:49.096] signalConditionsASAP(MultisessionFuture, pos=1) ...
[11:00:49.097] - nx: 3
[11:00:49.097] - relay: TRUE
[11:00:49.097] - stdout: TRUE
[11:00:49.097] - signal: TRUE
[11:00:49.097] - resignal: FALSE
[11:00:49.097] - force: TRUE
[11:00:49.097] - relayed: [n=3] FALSE, FALSE, FALSE
[11:00:49.097] - queued futures: [n=3] FALSE, FALSE, FALSE
[11:00:49.097]  - until=1
[11:00:49.097]  - relaying element #1
[11:00:49.097] result() for ClusterFuture ...
[11:00:49.097] - result already collected: FutureResult
[11:00:49.097] result() for ClusterFuture ... done
[11:00:49.098] result() for ClusterFuture ...
[11:00:49.098] - result already collected: FutureResult
[11:00:49.098] result() for ClusterFuture ... done
[11:00:49.098] result() for ClusterFuture ...
[11:00:49.098] - result already collected: FutureResult
[11:00:49.098] result() for ClusterFuture ... done
[11:00:49.098] result() for ClusterFuture ...
[11:00:49.098] - result already collected: FutureResult
[11:00:49.098] result() for ClusterFuture ... done
[11:00:49.098] - relayed: [n=3] TRUE, FALSE, FALSE
[11:00:49.098] - queued futures: [n=3] TRUE, FALSE, FALSE
[11:00:49.099] signalConditionsASAP(MultisessionFuture, pos=1) ... done
[11:00:49.099]  length: 2 (resolved future 1)
[11:00:49.356] receiveMessageFromWorker() for ClusterFuture ...
[11:00:49.356] - Validating connection of MultisessionFuture
[11:00:49.356] - received message: FutureResult
[11:00:49.357] - Received FutureResult
[11:00:49.357] - Erased future from FutureRegistry
[11:00:49.357] result() for ClusterFuture ...
[11:00:49.357] - result already collected: FutureResult
[11:00:49.357] result() for ClusterFuture ... done
[11:00:49.359] receiveMessageFromWorker() for ClusterFuture ... done
[11:00:49.359] Future #2
[11:00:49.359] result() for ClusterFuture ...
[11:00:49.359] - result already collected: FutureResult
[11:00:49.359] result() for ClusterFuture ... done
[11:00:49.359] result() for ClusterFuture ...
[11:00:49.359] - result already collected: FutureResult
[11:00:49.359] result() for ClusterFuture ... done
[11:00:49.360] signalConditionsASAP(MultisessionFuture, pos=2) ...
[11:00:49.360] - nx: 3
[11:00:49.360] - relay: TRUE
[11:00:49.360] - stdout: TRUE
[11:00:49.360] - signal: TRUE
[11:00:49.360] - resignal: FALSE
[11:00:49.360] - force: TRUE
[11:00:49.360] - relayed: [n=3] TRUE, FALSE, FALSE
[11:00:49.360] - queued futures: [n=3] TRUE, FALSE, FALSE
[11:00:49.360]  - until=2
[11:00:49.360]  - relaying element #2
[11:00:49.360] result() for ClusterFuture ...
[11:00:49.360] - result already collected: FutureResult
[11:00:49.361] result() for ClusterFuture ... done
[11:00:49.361] result() for ClusterFuture ...
[11:00:49.361] - result already collected: FutureResult
[11:00:49.361] result() for ClusterFuture ... done
[11:00:49.361] result() for ClusterFuture ...
[11:00:49.361] - result already collected: FutureResult
[11:00:49.361] result() for ClusterFuture ... done
[11:00:49.361] result() for ClusterFuture ...
[11:00:49.361] - result already collected: FutureResult
[11:00:49.361] result() for ClusterFuture ... done
[11:00:49.361] - relayed: [n=3] TRUE, TRUE, FALSE
[11:00:49.362] - queued futures: [n=3] TRUE, TRUE, FALSE
[11:00:49.362] signalConditionsASAP(MultisessionFuture, pos=2) ... done
[11:00:49.362]  length: 1 (resolved future 2)
[11:00:50.645] receiveMessageFromWorker() for ClusterFuture ...
[11:00:50.646] - Validating connection of MultisessionFuture
[11:00:50.646] - received message: FutureResult
[11:00:50.647] - Received FutureResult
[11:00:50.647] - Erased future from FutureRegistry
[11:00:50.647] result() for ClusterFuture ...
[11:00:50.647] - result already collected: FutureResult
[11:00:50.647] result() for ClusterFuture ... done
[11:00:50.649] receiveMessageFromWorker() for ClusterFuture ... done
[11:00:50.649] Future #3
[11:00:50.649] result() for ClusterFuture ...
[11:00:50.649] - result already collected: FutureResult
[11:00:50.649] result() for ClusterFuture ... done
[11:00:50.649] result() for ClusterFuture ...
[11:00:50.649] - result already collected: FutureResult
[11:00:50.649] result() for ClusterFuture ... done
[11:00:50.650] signalConditionsASAP(MultisessionFuture, pos=3) ...
[11:00:50.650] - nx: 3
[11:00:50.650] - relay: TRUE
[11:00:50.650] - stdout: TRUE
[11:00:50.650] - signal: TRUE
[11:00:50.650] - resignal: FALSE
[11:00:50.650] - force: TRUE
[11:00:50.650] - relayed: [n=3] TRUE, TRUE, FALSE
[11:00:50.650] - queued futures: [n=3] TRUE, TRUE, FALSE
[11:00:50.650]  - until=3
[11:00:50.650]  - relaying element #3
[11:00:50.650] result() for ClusterFuture ...
[11:00:50.650] - result already collected: FutureResult
[11:00:50.651] result() for ClusterFuture ... done
[11:00:50.651] result() for ClusterFuture ...
[11:00:50.651] - result already collected: FutureResult
[11:00:50.651] result() for ClusterFuture ... done
[11:00:50.651] result() for ClusterFuture ...
[11:00:50.651] - result already collected: FutureResult
[11:00:50.651] result() for ClusterFuture ... done
[11:00:50.651] result() for ClusterFuture ...
[11:00:50.651] - result already collected: FutureResult
[11:00:50.651] result() for ClusterFuture ... done
[11:00:50.651] - relayed: [n=3] TRUE, TRUE, TRUE
[11:00:50.652] - queued futures: [n=3] TRUE, TRUE, TRUE
[11:00:50.652] signalConditionsASAP(MultisessionFuture, pos=3) ... done
[11:00:50.652]  length: 0 (resolved future 3)
[11:00:50.652] Relaying remaining futures
[11:00:50.652] signalConditionsASAP(NULL, pos=0) ...
[11:00:50.652] - nx: 3
[11:00:50.652] - relay: TRUE
[11:00:50.652] - stdout: TRUE
[11:00:50.652] - signal: TRUE
[11:00:50.652] - resignal: FALSE
[11:00:50.652] - force: TRUE
[11:00:50.652] - relayed: [n=3] TRUE, TRUE, TRUE
[11:00:50.652] - queued futures: [n=3] TRUE, TRUE, TRUE
 - flush all
[11:00:50.653] - relayed: [n=3] TRUE, TRUE, TRUE
[11:00:50.653] - queued futures: [n=3] TRUE, TRUE, TRUE
[11:00:50.653] signalConditionsASAP(NULL, pos=0) ... done
[11:00:50.653] resolve() on list ... DONE
[11:00:50.653] result() for ClusterFuture ...
[11:00:50.653] - result already collected: FutureResult
[11:00:50.653] result() for ClusterFuture ... done
[11:00:50.653] result() for ClusterFuture ...
[11:00:50.653] - result already collected: FutureResult
[11:00:50.653] result() for ClusterFuture ... done
[11:00:50.653] result() for ClusterFuture ...
[11:00:50.654] - result already collected: FutureResult
[11:00:50.654] result() for ClusterFuture ... done
[11:00:50.654] result() for ClusterFuture ...
[11:00:50.654] - result already collected: FutureResult
[11:00:50.654] result() for ClusterFuture ... done
[11:00:50.654] result() for ClusterFuture ...
[11:00:50.654] - result already collected: FutureResult
[11:00:50.654] result() for ClusterFuture ... done
[11:00:50.654] result() for ClusterFuture ...
[11:00:50.654] - result already collected: FutureResult
[11:00:50.654] result() for ClusterFuture ... done
> print(js)
[[1]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
6         launch   overhead   <NA> 2025-05-06 11:00:48 0.02319264 secs
2      getWorker   overhead launch 2025-05-06 11:00:48 0.02614331 secs
3    eraseWorker   overhead launch 2025-05-06 11:00:48 0.02747369 secs
4 attachPackages   overhead launch 2025-05-06 11:00:48 0.02840233 secs
5  exportGlobals   overhead launch 2025-05-06 11:00:48 0.02895951 secs
9       evaluate evaluation   <NA> 2025-05-06 11:00:48 0.07165909 secs
7  receiveResult   overhead gather 2025-05-06 11:00:49 0.91282272 secs
8         gather   overhead   <NA> 2025-05-06 11:00:49 0.91385293 secs
           duration future_label                          future_uuid
1 7.080317e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
6 8.290768e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
2 2.021790e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
3 3.573895e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
4 4.124641e-05 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
5 1.415730e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
9 8.389301e-01 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
7 1.926422e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
8 2.546310e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
                          session_uuid
1 39a0a310-45b5-0096-c9a4-43f585215bf5
6 39a0a310-45b5-0096-c9a4-43f585215bf5
2 39a0a310-45b5-0096-c9a4-43f585215bf5
3 39a0a310-45b5-0096-c9a4-43f585215bf5
4 39a0a310-45b5-0096-c9a4-43f585215bf5
5 39a0a310-45b5-0096-c9a4-43f585215bf5
9 a55932d4-bbfb-ba96-b0c6-894f2fb596ff
7 39a0a310-45b5-0096-c9a4-43f585215bf5
8 39a0a310-45b5-0096-c9a4-43f585215bf5

[[2]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
6         launch   overhead   <NA> 2025-05-06 11:00:48 0.01970840 secs
2      getWorker   overhead launch 2025-05-06 11:00:48 0.02285266 secs
3    eraseWorker   overhead launch 2025-05-06 11:00:48 0.02362609 secs
4 attachPackages   overhead launch 2025-05-06 11:00:48 0.07343841 secs
5  exportGlobals   overhead launch 2025-05-06 11:00:48 0.07415152 secs
9       evaluate evaluation   <NA> 2025-05-06 11:00:48 0.11727071 secs
7  receiveResult   overhead gather 2025-05-06 11:00:49 1.15044832 secs
8         gather   overhead   <NA> 2025-05-06 11:00:49 1.15140462 secs
           duration future_label                          future_uuid
1 3.249407e-03 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
6 5.720592e-02 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
2 1.327991e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
3 4.895711e-02 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
4 4.458427e-05 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
5 1.464128e-03 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
9 1.032761e+00 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
7 1.718998e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
8 2.515316e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
                          session_uuid
1 39a0a310-45b5-0096-c9a4-43f585215bf5
6 39a0a310-45b5-0096-c9a4-43f585215bf5
2 39a0a310-45b5-0096-c9a4-43f585215bf5
3 39a0a310-45b5-0096-c9a4-43f585215bf5
4 39a0a310-45b5-0096-c9a4-43f585215bf5
5 39a0a310-45b5-0096-c9a4-43f585215bf5
9 a25975f9-2a7e-7eae-5279-acc9557409ff
7 39a0a310-45b5-0096-c9a4-43f585215bf5
8 39a0a310-45b5-0096-c9a4-43f585215bf5

[[3]]
           event   category parent               start              at
1         create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
6         launch   overhead   <NA> 2025-05-06 11:00:48 0.02052736 secs
2      getWorker   overhead launch 2025-05-06 11:00:48 0.02371311 secs
3    eraseWorker   overhead launch 2025-05-06 11:00:49 0.80715847 secs
4 attachPackages   overhead launch 2025-05-06 11:00:49 0.80803633 secs
5  exportGlobals   overhead launch 2025-05-06 11:00:49 0.80855870 secs
9       evaluate evaluation   <NA> 2025-05-06 11:00:49 0.85134578 secs
7  receiveResult   overhead gather 2025-05-06 11:00:50 2.36245179 secs
8         gather   overhead   <NA> 2025-05-06 11:00:50 2.36347961 secs
           duration future_label                          future_uuid
1 3.931522e-03 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
6 7.904289e-01 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
2 7.829361e-01 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
3 3.380775e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
4 4.124641e-05 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
5 1.328945e-03 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
9 1.502919e+00 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
7 2.117157e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
8 2.505779e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
                          session_uuid
1 39a0a310-45b5-0096-c9a4-43f585215bf5
6 39a0a310-45b5-0096-c9a4-43f585215bf5
2 39a0a310-45b5-0096-c9a4-43f585215bf5
3 39a0a310-45b5-0096-c9a4-43f585215bf5
4 39a0a310-45b5-0096-c9a4-43f585215bf5
5 39a0a310-45b5-0096-c9a4-43f585215bf5
9 a55932d4-bbfb-ba96-b0c6-894f2fb596ff
7 39a0a310-45b5-0096-c9a4-43f585215bf5
8 39a0a310-45b5-0096-c9a4-43f585215bf5

> stopifnot(
+   is.list(js),
+   all(vapply(js, FUN = is.data.frame, FUN.VALUE = NA))
+ )
>   
> ## Shut down parallel workers
> plan(sequential)
[11:00:50.659] plan(): Setting new future strategy stack:
[11:00:50.659] List of future strategies:
[11:00:50.659] 1. sequential:
[11:00:50.659]    - args: function (..., envir = parent.frame(), workers = "<NULL>")
[11:00:50.659]    - tweaked: FALSE
[11:00:50.659]    - call: plan(sequential)
[11:00:50.660] plan(): nbrOfWorkers() = 1
> 
> message("*** capture_journals() ... done")
*** capture_journals() ... done
> 
> 
> message("*** summary() of FutureJournal ...")
*** summary() of FutureJournal ...
> 
> js <- do.call(rbind, js)
> print(js)
            event   category parent               start              at
1          create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
6          launch   overhead   <NA> 2025-05-06 11:00:48 0.02319264 secs
2       getWorker   overhead launch 2025-05-06 11:00:48 0.02614331 secs
3     eraseWorker   overhead launch 2025-05-06 11:00:48 0.02747369 secs
4  attachPackages   overhead launch 2025-05-06 11:00:48 0.02840233 secs
5   exportGlobals   overhead launch 2025-05-06 11:00:48 0.02895951 secs
9        evaluate evaluation   <NA> 2025-05-06 11:00:48 0.07165909 secs
7   receiveResult   overhead gather 2025-05-06 11:00:49 0.91282272 secs
8          gather   overhead   <NA> 2025-05-06 11:00:49 0.91385293 secs
11         create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
61         launch   overhead   <NA> 2025-05-06 11:00:48 0.01970840 secs
21      getWorker   overhead launch 2025-05-06 11:00:48 0.02285266 secs
31    eraseWorker   overhead launch 2025-05-06 11:00:48 0.02362609 secs
41 attachPackages   overhead launch 2025-05-06 11:00:48 0.07343841 secs
51  exportGlobals   overhead launch 2025-05-06 11:00:48 0.07415152 secs
91       evaluate evaluation   <NA> 2025-05-06 11:00:48 0.11727071 secs
71  receiveResult   overhead gather 2025-05-06 11:00:49 1.15044832 secs
81         gather   overhead   <NA> 2025-05-06 11:00:49 1.15140462 secs
12         create   overhead   <NA> 2025-05-06 11:00:48 0.00000000 secs
62         launch   overhead   <NA> 2025-05-06 11:00:48 0.02052736 secs
22      getWorker   overhead launch 2025-05-06 11:00:48 0.02371311 secs
32    eraseWorker   overhead launch 2025-05-06 11:00:49 0.80715847 secs
42 attachPackages   overhead launch 2025-05-06 11:00:49 0.80803633 secs
52  exportGlobals   overhead launch 2025-05-06 11:00:49 0.80855870 secs
92       evaluate evaluation   <NA> 2025-05-06 11:00:49 0.85134578 secs
72  receiveResult   overhead gather 2025-05-06 11:00:50 2.36245179 secs
82         gather   overhead   <NA> 2025-05-06 11:00:50 2.36347961 secs
            duration future_label                          future_uuid
1  7.080317e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
6  8.290768e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
2  2.021790e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
3  3.573895e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
4  4.124641e-05 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
5  1.415730e-03 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
9  8.389301e-01 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
7  1.926422e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
8  2.546310e-04 secs         <NA> 7cf43caa-476c-8175-3b71-df95025c9381
11 3.249407e-03 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
61 5.720592e-02 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
21 1.327991e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
31 4.895711e-02 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
41 4.458427e-05 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
51 1.464128e-03 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
91 1.032761e+00 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
71 1.718998e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
81 2.515316e-04 secs         <NA> bc517726-f99e-4544-e025-50ecbfa7ce53
12 3.931522e-03 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
62 7.904289e-01 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
22 7.829361e-01 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
32 3.380775e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
42 4.124641e-05 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
52 1.328945e-03 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
92 1.502919e+00 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
72 2.117157e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
82 2.505779e-04 secs         <NA> 8a4a340c-b3d4-d72a-fe4b-3540a60c0b17
                           session_uuid
1  39a0a310-45b5-0096-c9a4-43f585215bf5
6  39a0a310-45b5-0096-c9a4-43f585215bf5
2  39a0a310-45b5-0096-c9a4-43f585215bf5
3  39a0a310-45b5-0096-c9a4-43f585215bf5
4  39a0a310-45b5-0096-c9a4-43f585215bf5
5  39a0a310-45b5-0096-c9a4-43f585215bf5
9  a55932d4-bbfb-ba96-b0c6-894f2fb596ff
7  39a0a310-45b5-0096-c9a4-43f585215bf5
8  39a0a310-45b5-0096-c9a4-43f585215bf5
11 39a0a310-45b5-0096-c9a4-43f585215bf5
61 39a0a310-45b5-0096-c9a4-43f585215bf5
21 39a0a310-45b5-0096-c9a4-43f585215bf5
31 39a0a310-45b5-0096-c9a4-43f585215bf5
41 39a0a310-45b5-0096-c9a4-43f585215bf5
51 39a0a310-45b5-0096-c9a4-43f585215bf5
91 a25975f9-2a7e-7eae-5279-acc9557409ff
71 39a0a310-45b5-0096-c9a4-43f585215bf5
81 39a0a310-45b5-0096-c9a4-43f585215bf5
12 39a0a310-45b5-0096-c9a4-43f585215bf5
62 39a0a310-45b5-0096-c9a4-43f585215bf5
22 39a0a310-45b5-0096-c9a4-43f585215bf5
32 39a0a310-45b5-0096-c9a4-43f585215bf5
42 39a0a310-45b5-0096-c9a4-43f585215bf5
52 39a0a310-45b5-0096-c9a4-43f585215bf5
92 a55932d4-bbfb-ba96-b0c6-894f2fb596ff
72 39a0a310-45b5-0096-c9a4-43f585215bf5
82 39a0a310-45b5-0096-c9a4-43f585215bf5
> 
> stats <- summary(js)
> print(stats)
Number of futures: 3
  summary       evaluate evaluate_ratio        overhead overhead_ratio
1     min 0.8389301 secs      0.9177587 0.01562572 secs     0.01709396
2    mean 1.1248700 secs      0.7618500 0.29031452 secs     0.19662371
3  median 1.0327609 secs      0.8967615 0.06070685 secs     0.05271266
4     max 1.5029190 secs      0.6358251 0.79461098 secs     0.33616822
5   total 3.3746099 secs      0.7618500 0.87094355 secs     0.19662371
        duration       walltime
1 0.9141076 secs 0.9141076 secs
2 1.4764980 secs 1.4764980 secs
3 1.1516562 secs 1.1516562 secs
4 2.3637302 secs 2.3637302 secs
5 4.4294939 secs 4.4294939 secs
> 
> message("*** summary() of FutureJournal ... done")
*** summary() of FutureJournal ... done
> 
> #source("incl/end.R")
> 
